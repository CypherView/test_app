{
  "version": 3,
  "sources": ["src/app/shared/components/tabs/dynamic-tab-panel/dynamic-tab-panel.component.ts", "src/app/shared/components/tabs/dynamic-tab-panel/dynamic-tab-panel.component.html"],
  "sourcesContent": ["import {\n  Component,\n  DestroyRef,\n  inject,\n  input,\n  OnInit,\n  output,\n  signal,\n} from '@angular/core';\nimport {\n  ActivatedRoute,\n  NavigationEnd,\n  Router,\n  RouterModule,\n} from '@angular/router';\nimport { takeUntilDestroyed } from '@angular/core/rxjs-interop';\nimport { NgTemplateOutlet } from '@angular/common';\nimport { filter } from 'rxjs';\n\nimport { TabsModule } from 'primeng/tabs';\n\nimport { TabConfig } from '../../../models/tabs.model';\nimport {\n  isArray,\n  isDefined,\n  isNullOrUndefined,\n  isString,\n} from '../../../utils';\n\n@Component({\n  selector: 'app-dynamic-tab-panel',\n  imports: [TabsModule, RouterModule, NgTemplateOutlet],\n  templateUrl: './dynamic-tab-panel.component.html',\n  styleUrl: './dynamic-tab-panel.component.scss',\n})\nexport class DynamicTabPanelComponent implements OnInit {\n  readonly tabs = input<TabConfig[]>([]);\n  readonly baseRoute = input<string>('');\n  readonly tabChange = output<TabConfig>();\n  private readonly router = inject(Router);\n  private readonly route = inject(ActivatedRoute);\n  private readonly destroyRef = inject(DestroyRef);\n\n  private readonly tabCache = new Map<string, TabConfig>();\n  activeTabPath = signal<string[]>([]);\n\n  ngOnInit(): void {\n    this.router.events\n      .pipe(\n        filter((event) => event instanceof NavigationEnd),\n        takeUntilDestroyed(this.destroyRef),\n      )\n      .subscribe(async () => {\n        await this.updateActiveTabFromUrl();\n      });\n\n    this.route.params\n      .pipe(takeUntilDestroyed(this.destroyRef))\n      .subscribe(async () => {\n        await this.updateActiveTabFromUrl();\n      });\n  }\n\n  /**\n   * Updates the active tab path based on the current URL.\n   */\n  private buildPathFromUrl(): string[] {\n    const urlSegments = this.router.url\n      .split('/')\n      .filter((segment): boolean => segment !== '');\n    const path: string[] = [];\n\n    let currentTabs = this.tabs();\n    for (const segment of urlSegments) {\n      const matchingTab = this.findTabByRoute(currentTabs, segment);\n      if (isDefined(matchingTab)) {\n        path.push(matchingTab.id);\n        currentTabs = isArray(matchingTab.children) ? matchingTab.children : [];\n      }\n    }\n    return path;\n  }\n\n  private async handleDefaultNavigation(path: string[]): Promise<string[]> {\n    if (path.length > 0 || !isArray(this.tabs()) || this.tabs().length === 0) {\n      return path;\n    }\n\n    const firstTab = this.tabs()[0];\n    if (!isDefined(firstTab) || !isString(firstTab.id)) {\n      return path;\n    }\n\n    path.push(firstTab.id);\n    await this.navigateToDefaultTab(firstTab);\n    return path;\n  }\n\n  private async navigateToDefaultTab(firstTab: TabConfig): Promise<void> {\n    if (isArray(firstTab.children) && firstTab.children.length > 0) {\n      const firstChild = firstTab.children[0];\n      if (isDefined(firstChild) && isString(firstChild.id)) {\n        await this.router.navigate([\n          this.getTabPath(firstTab),\n          this.getTabPath(firstChild),\n        ]);\n      }\n    } else {\n      await this.router.navigate([this.getTabPath(firstTab)]);\n    }\n  }\n\n  private async updateActiveTabFromUrl(): Promise<void> {\n    const path = this.buildPathFromUrl();\n    const finalPath = await this.handleDefaultNavigation(path);\n    this.activeTabPath.set(finalPath);\n  }\n\n  /**\n   * Finds a tab by its route.\n   * @param tabs - The list of tabs to search.\n   * @param route - The route to match.\n   * @returns The matching tab, if found.\n   */\n  private findTabByRoute(\n    tabs: TabConfig[],\n    route: string,\n  ): TabConfig | undefined {\n    const cacheKey = `${route}`;\n    if (this.tabCache.has(cacheKey)) {\n      return this.tabCache.get(cacheKey);\n    }\n\n    const tab = tabs.find((tab) => tab.route === route || tab.id === route);\n    if (tab) {\n      this.tabCache.set(cacheKey, tab);\n    }\n    return tab;\n  }\n\n  /**\n   * Gets the path for a tab.\n   * @param tab - The tab to get the path for.\n   * @param level - The level of the tab (optional).\n   * @returns The path for the tab.\n   */\n  getTabPath(tab: TabConfig): string {\n    if (isNullOrUndefined(tab)) {\n      throw new Error('Tab configuration is required');\n    }\n\n    return isString(tab.route) ? tab.route : tab.id;\n  }\n\n  /**\n   * Gets the active tab at a specific level.\n   * @param tabs - The list of tabs to search.\n   * @param level - The level to search at.\n   * @returns The active tab at the specified level, if found.\n   */\n  getActiveTabAtLevel(tabs: TabConfig[], level: number): TabConfig | undefined {\n    const activeId = this.activeTabPath()[level];\n    return tabs.find((tab) => tab.id === activeId);\n  }\n\n  /**\n   * Gets the final active tab.\n   * @returns The final active tab, if found.\n   */\n  getFinalActiveTab(): TabConfig | undefined {\n    let currentTabs = this.tabs();\n    let finalTab: TabConfig | undefined;\n\n    for (const level of this.activeTabPath()) {\n      finalTab = currentTabs.find((tab) => tab.id === level);\n      if (finalTab?.children) {\n        currentTabs = finalTab.children;\n      } else {\n        break;\n      }\n    }\n    return finalTab;\n  }\n\n  /**\n   * Updates the active tab path.\n   * @param tabs - The list of tabs to search.\n   * @param tabId - The ID of the tab to activate.\n   * @param level - The level of the tab.\n   * @returns The updated active tab path.\n   */\n  updateActiveTabPath(\n    tabs: TabConfig[],\n    tabId: string,\n    level: number,\n  ): string[] {\n    if (!isArray(tabs) || !isString(tabId)) {\n      return this.activeTabPath();\n    }\n\n    const newPath = [...this.activeTabPath().slice(0, level), tabId];\n    const selectedTab = tabs.find((tab) => isDefined(tab) && tab.id === tabId);\n\n    if (\n      isDefined(selectedTab) &&\n      isArray(selectedTab.children) &&\n      selectedTab.children.length > 0\n    ) {\n      const firstChild = selectedTab.children[0];\n      if (isDefined(firstChild) && isString(firstChild.id)) {\n        newPath.push(firstChild.id);\n      }\n    }\n\n    return newPath;\n  }\n\n  /**\n   * Handles tab change events.\n   * @param tab - The tab that was changed.\n   */\n  onTabChange(tab: TabConfig) {\n    this.tabChange.emit(tab);\n    const newPath = this.updateActiveTabPath(this.tabs(), tab.id, tab.level);\n    this.activeTabPath.set(newPath);\n  }\n}\n", "<div class=\"flex flex-col h-full w-full overflow-hidden\">\n  <div class=\"flex-shrink-0\">\n    <!-- Main Tabs -->\n    <p-tabs [value]=\"activeTabPath()[0]\" [scrollable]=\"true\" role=\"tablist\">\n      <p-tablist>\n        @for (tab of tabs(); track tab.id) {\n          <p-tab\n            [value]=\"tab.id\"\n            [disabled]=\"tab?.disabled\"\n            [routerLink]=\"getTabPath(tab) ? [getTabPath(tab)] : []\"\n            [routerLinkActiveOptions]=\"{ exact: true }\"\n            routerLinkActive=\"p-highlight\"\n            (click)=\"onTabChange(tab)\"\n            (keydown.enter)=\"onTabChange(tab)\"\n            [attr.aria-label]=\"tab.label\"\n            [attr.role]=\"'tab'\"\n          >\n            <ng-container\n              [ngTemplateOutlet]=\"tabContent\"\n              [ngTemplateOutletContext]=\"{ $implicit: tab }\"\n            >\n            </ng-container>\n          </p-tab>\n        }\n      </p-tablist>\n    </p-tabs>\n\n    <!-- Nested Tabs -->\n    @for (level of activeTabPath(); track $index) {\n      @if (\n        $index > 0 && getActiveTabAtLevel(tabs(), $index - 1)?.children?.length\n      ) {\n        <p-tabs\n          [value]=\"activeTabPath()[$index]\"\n          [scrollable]=\"true\"\n          role=\"tablist\"\n          class=\"nested-tabs\"\n        >\n          <p-tablist>\n            @for (\n              tab of getActiveTabAtLevel(tabs(), $index - 1)?.children;\n              track tab.id\n            ) {\n              <p-tab\n                [value]=\"tab.id\"\n                [disabled]=\"tab?.disabled\"\n                [routerLink]=\"getTabPath(tab) ? [getTabPath(tab)] : []\"\n                [routerLinkActiveOptions]=\"{ exact: true }\"\n                routerLinkActive=\"p-highlight\"\n                (click)=\"onTabChange(tab)\"\n                (keydown.enter)=\"onTabChange(tab)\"\n                [attr.aria-label]=\"tab.label\"\n                [attr.role]=\"'tab'\"\n              >\n                <ng-container\n                  [ngTemplateOutlet]=\"tabContent\"\n                  [ngTemplateOutletContext]=\"{ $implicit: tab }\"\n                >\n                </ng-container>\n              </p-tab>\n            }\n          </p-tablist>\n        </p-tabs>\n      }\n    }\n  </div>\n\n  <!-- Tab Content Template Definition (not rendered here, but used above) -->\n  <ng-template #tabContent let-tab>\n    @if (tab.icon) {\n      <i [class]=\"tab.icon\" aria-hidden=\"true\"></i>\n    }\n    {{ tab.label }}\n  </ng-template>\n\n  <!-- Actual Content Area for the active tab -->\n  <div class=\"flex-grow min-h-0 overflow-hidden flex flex-col\" role=\"tabpanel\">\n    @if (getFinalActiveTab()?.template) {\n      <ng-container\n        [ngTemplateOutlet]=\"getFinalActiveTab()!.template!\"\n      ></ng-container>\n    } @else {\n      <!-- Fallback content if no template is defined for the active tab -->\n      <div class=\"p-4 text-center\">\n        Select a tab to view content or no content template defined.\n      </div>\n    }\n  </div>\n</div>\n"],
  "mappings": "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",
  "names": ["tab"]
}
