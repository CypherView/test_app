{
  "version": 3,
  "sources": ["src/app/features/administration/strategies/vendor-data.strategy.ts", "src/app/features/administration/strategies/distributor-data.strategy.ts", "src/app/features/administration/strategies/client-data-strategy.ts"],
  "sourcesContent": ["import { Injectable, inject } from '@angular/core';\nimport { firstValueFrom } from 'rxjs';\nimport { AccountsService, VendorResponse } from '../../../api';\nimport { EntityDataStrategy } from './entity-data.strategy';\n\n@Injectable({ providedIn: 'root' })\nexport class VendorDataStrategy implements EntityDataStrategy<VendorResponse> {\n  private readonly accountsService = inject(AccountsService);\n\n  async fetchById(id: string): Promise<VendorResponse> {\n    try {\n      return await firstValueFrom(this.accountsService.getVendor(id));\n    } catch (error) {\n      throw new Error(\n        `Failed to fetch vendor: ${error instanceof Error ? error.message : String(error)}`,\n      );\n    }\n  }\n\n  async update(\n    id: string,\n    data: Partial<VendorResponse>,\n  ): Promise<VendorResponse> {\n    try {\n      return await firstValueFrom(this.accountsService.updateVendor(id, data));\n    } catch (error) {\n      throw new Error(\n        `Failed to update vendor: ${error instanceof Error ? error.message : String(error)}`,\n      );\n    }\n  }\n}\n", "import { Injectable, inject } from '@angular/core';\nimport { firstValueFrom } from 'rxjs';\nimport { AccountsService, DistributorResponse } from '../../../api';\nimport { EntityDataStrategy } from './entity-data.strategy';\n\n@Injectable({ providedIn: 'root' })\nexport class DistributorDataStrategy\n  implements EntityDataStrategy<DistributorResponse>\n{\n  private readonly accountsService = inject(AccountsService);\n\n  async fetchById(id: string): Promise<DistributorResponse> {\n    try {\n      return await firstValueFrom(this.accountsService.getDistributor(id));\n    } catch (error) {\n      throw new Error(\n        `Failed to fetch distributor: ${error instanceof Error ? error.message : String(error)}`,\n      );\n    }\n  }\n\n  async update(\n    id: string,\n    data: Partial<DistributorResponse>,\n  ): Promise<DistributorResponse> {\n    try {\n      return await firstValueFrom(\n        this.accountsService.updateDistributor(id, data),\n      );\n    } catch (error) {\n      throw new Error(\n        `Failed to update distributor: ${error instanceof Error ? error.message : String(error)}`,\n      );\n    }\n  }\n}\n", "import { Injectable, inject } from '@angular/core';\nimport { firstValueFrom } from 'rxjs';\nimport { AccountsService, ClientResponse } from '../../../api';\nimport { EntityDataStrategy } from './entity-data.strategy';\n\n@Injectable({ providedIn: 'root' })\nexport class ClientDataStrategy implements EntityDataStrategy<ClientResponse> {\n  private readonly accountsService = inject(AccountsService);\n\n  async fetchById(id: string): Promise<ClientResponse> {\n    try {\n      return await firstValueFrom(this.accountsService.getClient(id));\n    } catch (error) {\n      throw new Error(\n        `Failed to fetch client: ${error instanceof Error ? error.message : String(error)}`,\n      );\n    }\n  }\n\n  async update(\n    id: string,\n    data: Partial<ClientResponse>,\n  ): Promise<ClientResponse> {\n    try {\n      return await firstValueFrom(this.accountsService.updateClient(id, data));\n    } catch (error) {\n      throw new Error(\n        `Failed to update client: ${error instanceof Error ? error.message : String(error)}`,\n      );\n    }\n  }\n}\n"],
  "mappings": ";;;;;;;;;;;;AAMM,IAAO,qBAAP,MAAO,oBAAkB;EACZ,kBAAkB,OAAO,eAAe;EAEzD,MAAM,UAAU,IAAU;AACxB,QAAI;AACF,aAAO,MAAM,eAAe,KAAK,gBAAgB,UAAU,EAAE,CAAC;IAChE,SAAS,OAAO;AACd,YAAM,IAAI,MACR,2BAA2B,iBAAiB,QAAQ,MAAM,UAAU,OAAO,KAAK,CAAC,EAAE;IAEvF;EACF;EAEA,MAAM,OACJ,IACA,MAA6B;AAE7B,QAAI;AACF,aAAO,MAAM,eAAe,KAAK,gBAAgB,aAAa,IAAI,IAAI,CAAC;IACzE,SAAS,OAAO;AACd,YAAM,IAAI,MACR,4BAA4B,iBAAiB,QAAQ,MAAM,UAAU,OAAO,KAAK,CAAC,EAAE;IAExF;EACF;;qCAxBW,qBAAkB;EAAA;4EAAlB,qBAAkB,SAAlB,oBAAkB,WAAA,YADL,OAAM,CAAA;;;sEACnB,oBAAkB,CAAA;UAD9B;WAAW,EAAE,YAAY,OAAM,CAAE;;;;;ACC5B,IAAO,0BAAP,MAAO,yBAAuB;EAGjB,kBAAkB,OAAO,eAAe;EAEzD,MAAM,UAAU,IAAU;AACxB,QAAI;AACF,aAAO,MAAM,eAAe,KAAK,gBAAgB,eAAe,EAAE,CAAC;IACrE,SAAS,OAAO;AACd,YAAM,IAAI,MACR,gCAAgC,iBAAiB,QAAQ,MAAM,UAAU,OAAO,KAAK,CAAC,EAAE;IAE5F;EACF;EAEA,MAAM,OACJ,IACA,MAAkC;AAElC,QAAI;AACF,aAAO,MAAM,eACX,KAAK,gBAAgB,kBAAkB,IAAI,IAAI,CAAC;IAEpD,SAAS,OAAO;AACd,YAAM,IAAI,MACR,iCAAiC,iBAAiB,QAAQ,MAAM,UAAU,OAAO,KAAK,CAAC,EAAE;IAE7F;EACF;;qCA5BW,0BAAuB;EAAA;4EAAvB,0BAAuB,SAAvB,yBAAuB,WAAA,YADV,OAAM,CAAA;;;sEACnB,yBAAuB,CAAA;UADnC;WAAW,EAAE,YAAY,OAAM,CAAE;;;;;ACC5B,IAAO,qBAAP,MAAO,oBAAkB;EACZ,kBAAkB,OAAO,eAAe;EAEzD,MAAM,UAAU,IAAU;AACxB,QAAI;AACF,aAAO,MAAM,eAAe,KAAK,gBAAgB,UAAU,EAAE,CAAC;IAChE,SAAS,OAAO;AACd,YAAM,IAAI,MACR,2BAA2B,iBAAiB,QAAQ,MAAM,UAAU,OAAO,KAAK,CAAC,EAAE;IAEvF;EACF;EAEA,MAAM,OACJ,IACA,MAA6B;AAE7B,QAAI;AACF,aAAO,MAAM,eAAe,KAAK,gBAAgB,aAAa,IAAI,IAAI,CAAC;IACzE,SAAS,OAAO;AACd,YAAM,IAAI,MACR,4BAA4B,iBAAiB,QAAQ,MAAM,UAAU,OAAO,KAAK,CAAC,EAAE;IAExF;EACF;;qCAxBW,qBAAkB;EAAA;4EAAlB,qBAAkB,SAAlB,oBAAkB,WAAA,YADL,OAAM,CAAA;;;sEACnB,oBAAkB,CAAA;UAD9B;WAAW,EAAE,YAAY,OAAM,CAAE;;;",
  "names": []
}
