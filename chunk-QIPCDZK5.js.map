{
  "version": 3,
  "sources": ["src/app/features/administration/guards/client-assets.guard.ts", "src/app/features/administration/guards/client-geofences.guard.ts", "src/app/features/administration/guards/client-alerts.guard.ts", "src/app/features/administration/guards/vendor.guard.ts", "src/app/features/administration/guards/distributors.guard.ts"],
  "sourcesContent": ["import { ActivatedRouteSnapshot, CanActivateFn, Router } from '@angular/router';\nimport { inject } from '@angular/core';\n\nimport { isDefined } from '../../../shared/utils';\n\nexport const clientAssetsGuard: CanActivateFn = (route, _state) => {\n  const router = inject(Router);\n\n  // Function to get all parameters from the route tree\n  const getAllParams = () => {\n    let currentRoute: ActivatedRouteSnapshot | null = route;\n    const params: Record<string, string> = {};\n\n    // Traverse up the route tree\n    while (isDefined(currentRoute)) {\n      for (const key of currentRoute.paramMap.keys) {\n        params[key] = currentRoute.paramMap.get(key) as string;\n      }\n\n      currentRoute = currentRoute.parent;\n    }\n\n    return params;\n  };\n\n  // Get all parameters including those from parent routes\n  const allParams = getAllParams();\n  const clientId = allParams['clientId'];\n\n  if (isDefined(clientId)) {\n    return router.createUrlTree([\n      'admin',\n      'client',\n      clientId,\n      'assets',\n      'grid',\n      'client-assets',\n    ]);\n  }\n\n  // If no clientId, don't allow access to the route\n  return false;\n};\n", "import { ActivatedRouteSnapshot, CanActivateFn, Router } from '@angular/router';\nimport { inject } from '@angular/core';\n\nimport { isDefined } from '../../../shared/utils';\n\nexport const clientGeofencesGuard: CanActivateFn = (route, _state) => {\n  const router = inject(Router);\n\n  // Function to get all parameters from the route tree\n  const getAllParams = () => {\n    let currentRoute: ActivatedRouteSnapshot | null = route;\n    const params: Record<string, string> = {};\n\n    // Traverse up the route tree\n    while (isDefined(currentRoute)) {\n      for (const key of currentRoute.paramMap.keys) {\n        params[key] = currentRoute.paramMap.get(key) as string;\n      }\n\n      currentRoute = currentRoute.parent;\n    }\n\n    return params;\n  };\n\n  // Get all parameters including those from parent routes\n  const allParams = getAllParams();\n  const clientId = allParams['clientId'];\n\n  if (isDefined(clientId)) {\n    return router.createUrlTree([\n      'admin',\n      'client',\n      clientId,\n      'geofences',\n      'grid',\n      'client-geofences',\n    ]);\n  }\n\n  // If no clientId, don't allow access to the route\n  return false;\n};\n", "import { CanActivateFn, Router } from '@angular/router';\nimport { inject } from '@angular/core';\n\nimport { getAllRouteParams, isDefined } from '../../../shared/utils';\n\nexport const clientAlertsGuard: CanActivateFn = (route, _state) => {\n  const router = inject(Router);\n\n  // Get all parameters including those from parent routes\n  const allParams = getAllRouteParams(route);\n  const clientId = allParams['clientId'];\n\n  if (isDefined(clientId)) {\n    return router.createUrlTree([\n      'admin',\n      'client',\n      clientId,\n      'alerts',\n      'grid',\n      'client-alerts',\n    ]);\n  }\n\n  // If no clientId, don't allow access to the route\n  return false;\n};\n", "import { CanActivateFn, Router } from '@angular/router';\nimport { inject } from '@angular/core';\n\nimport { getAllRouteParams, isDefined } from '../../../shared/utils';\n\nexport const vendorsGuard: CanActivateFn = (route, _state) => {\n  const router = inject(Router);\n\n  // Get all parameters including those from parent routes\n  const allParams = getAllRouteParams(route);\n  const distributorId = allParams['distributorId'];\n\n  if (isDefined(distributorId)) {\n    return router.createUrlTree([\n      'admin',\n      'distributor',\n      distributorId,\n      'vendors',\n      'grid',\n      'distributor-vendors',\n    ]);\n  }\n\n  // If no distributorId, don't allow access to the route\n  return false;\n};\n", "import { CanActivateFn, Router } from '@angular/router';\nimport { getAllRouteParams, isDefined } from '../../../shared/utils';\nimport { inject } from '@angular/core';\n\nexport const distributorsGuard: CanActivateFn = (route, _state) => {\n  const router = inject(Router);\n\n  // Get all parameters including those from parent routes\n  const allParams = getAllRouteParams(route);\n  const superAdminId = allParams['superAdminId'];\n\n  if (isDefined(superAdminId)) {\n    return router.createUrlTree([\n      'admin',\n      'super-admin',\n      superAdminId,\n      'distributors',\n      'grid',\n      'super-admin-distributors',\n    ]);\n  }\n\n  // If no superAdminId, don't allow access to the route\n  return false;\n};\n"],
  "mappings": ";;;;;;;;;;;;AAKO,IAAM,oBAAmC,CAAC,OAAO,WAAU;AAChE,QAAM,SAAS,OAAO,MAAM;AAG5B,QAAM,eAAe,MAAK;AACxB,QAAI,eAA8C;AAClD,UAAM,SAAiC,CAAA;AAGvC,WAAO,UAAU,YAAY,GAAG;AAC9B,iBAAW,OAAO,aAAa,SAAS,MAAM;AAC5C,eAAO,GAAG,IAAI,aAAa,SAAS,IAAI,GAAG;MAC7C;AAEA,qBAAe,aAAa;IAC9B;AAEA,WAAO;EACT;AAGA,QAAM,YAAY,aAAY;AAC9B,QAAM,WAAW,UAAU,UAAU;AAErC,MAAI,UAAU,QAAQ,GAAG;AACvB,WAAO,OAAO,cAAc;MAC1B;MACA;MACA;MACA;MACA;MACA;KACD;EACH;AAGA,SAAO;AACT;;;ACrCO,IAAM,uBAAsC,CAAC,OAAO,WAAU;AACnE,QAAM,SAAS,OAAO,MAAM;AAG5B,QAAM,eAAe,MAAK;AACxB,QAAI,eAA8C;AAClD,UAAM,SAAiC,CAAA;AAGvC,WAAO,UAAU,YAAY,GAAG;AAC9B,iBAAW,OAAO,aAAa,SAAS,MAAM;AAC5C,eAAO,GAAG,IAAI,aAAa,SAAS,IAAI,GAAG;MAC7C;AAEA,qBAAe,aAAa;IAC9B;AAEA,WAAO;EACT;AAGA,QAAM,YAAY,aAAY;AAC9B,QAAM,WAAW,UAAU,UAAU;AAErC,MAAI,UAAU,QAAQ,GAAG;AACvB,WAAO,OAAO,cAAc;MAC1B;MACA;MACA;MACA;MACA;MACA;KACD;EACH;AAGA,SAAO;AACT;;;ACrCO,IAAM,oBAAmC,CAAC,OAAO,WAAU;AAChE,QAAM,SAAS,OAAO,MAAM;AAG5B,QAAM,YAAY,kBAAkB,KAAK;AACzC,QAAM,WAAW,UAAU,UAAU;AAErC,MAAI,UAAU,QAAQ,GAAG;AACvB,WAAO,OAAO,cAAc;MAC1B;MACA;MACA;MACA;MACA;MACA;KACD;EACH;AAGA,SAAO;AACT;;;ACpBO,IAAM,eAA8B,CAAC,OAAO,WAAU;AAC3D,QAAM,SAAS,OAAO,MAAM;AAG5B,QAAM,YAAY,kBAAkB,KAAK;AACzC,QAAM,gBAAgB,UAAU,eAAe;AAE/C,MAAI,UAAU,aAAa,GAAG;AAC5B,WAAO,OAAO,cAAc;MAC1B;MACA;MACA;MACA;MACA;MACA;KACD;EACH;AAGA,SAAO;AACT;;;ACrBO,IAAM,oBAAmC,CAAC,OAAO,WAAU;AAChE,QAAM,SAAS,OAAO,MAAM;AAG5B,QAAM,YAAY,kBAAkB,KAAK;AACzC,QAAM,eAAe,UAAU,cAAc;AAE7C,MAAI,UAAU,YAAY,GAAG;AAC3B,WAAO,OAAO,cAAc;MAC1B;MACA;MACA;MACA;MACA;MACA;KACD;EACH;AAGA,SAAO;AACT;",
  "names": []
}
