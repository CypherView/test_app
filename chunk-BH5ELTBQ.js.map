{"version":3,"sources":["src/app/features/administration/services/adapters/base-tree.adapter.service.ts","src/app/features/administration/services/adapters/device-types.adapter.service.ts","src/app/features/administration/factories/flexible-section-builder.factory.ts","src/app/features/administration/components/generic-details-container/generic-details-container.component.ts","src/app/features/administration/components/generic-details-container/generic-details-container.component.html","src/app/features/administration/components/assets/asset-details-section/asset-details-section.component.ts","src/app/features/administration/components/assets/asset-details-section/asset-details-section.component.html","src/app/shared/services/cache-invalidation.service.ts","src/app/features/administration/components/assets/asset-categories-section/asset-categories-section.component.ts","src/app/features/administration/components/assets/asset-categories-section/asset-categories-section.component.html","src/app/features/administration/components/assets/asset-contacts-section/asset-contacts-section.component.ts","src/app/features/administration/components/assets/asset-contacts-section/asset-contacts-section.component.html","src/app/features/administration/components/assets/asset-profiles-section/asset-profiles-section.component.ts","src/app/features/administration/components/assets/asset-profiles-section/asset-profiles-section.component.html","src/app/features/administration/utils/form-to-request-mapper.ts","src/app/features/administration/components/assets/asset-sharing-section/asset-sharing-section.component.ts","src/app/features/administration/components/assets/asset-sharing-section/asset-sharing-section.component.html","src/app/features/administration/components/assets/asset-event-triggers-section/asset-event-triggers-section.component.ts","src/app/features/administration/components/assets/asset-event-triggers-section/asset-event-triggers-section.component.html","src/app/features/administration/components/assets/asset-reminders-section/asset-reminders-section.component.ts","src/app/features/administration/components/assets/asset-reminders-section/asset-reminders-section.component.html","src/app/features/administration/components/assets/asset-analog-triggers-section/asset-analog-triggers-section.component.ts","src/app/features/administration/components/assets/asset-analog-triggers-section/asset-analog-triggers-section.component.html","src/app/features/administration/components/assets/asset-curfew-events-section/asset-curfew-events-section.component.ts","src/app/features/administration/components/assets/asset-curfew-events-section/asset-curfew-events-section.component.html","src/app/features/administration/components/assets/asset-labels-section/asset-labels-section.component.ts","src/app/features/administration/components/assets/asset-labels-section/asset-labels-section.component.html","src/app/features/administration/components/assets/asset-counter-type-section/asset-counter-type-section.component.ts","src/app/features/administration/components/assets/asset-counter-type-section/asset-counter-type-section.component.html","src/app/features/administration/components/shared/info-section/info-section.component.ts","src/app/features/administration/components/shared/info-section/info-section.component.html","src/app/features/administration/factories/asset-section-config.factory.ts","src/app/features/administration/components/details-accordion-container/details-accordion-container.component.ts","src/app/features/administration/components/details-accordion-container/details-accordion-container.component.html","src/app/features/administration/services/entity/entity-details.state.service.ts","src/app/features/administration/components/assets/asset-details-container/asset-details-container.component.ts","src/app/features/administration/components/assets/asset-details-container/asset-details-container.component.html","src/app/features/administration/components/sim-cards/sim-card-details-container/sim-card-details-container.component.ts","src/app/features/administration/components/sim-cards/sim-card-details-container/sim-card-details-container.component.html","src/app/features/administration/components/asset-tags/asset-tag-details-container/asset-tag-details-container.component.ts","src/app/features/administration/components/asset-tags/asset-tag-details-container/asset-tag-details-container.component.html","src/app/features/administration/components/device-config-profiles/device-config-profile-details-container/device-config-profile-details-container.component.ts","src/app/features/administration/components/device-config-profiles/device-config-profile-details-container/device-config-profile-details-container.component.html","src/app/features/administration/components/device/device-details-container/device-details-container.component.ts","src/app/features/administration/components/device/device-details-container/device-details-container.component.html","src/app/features/administration/components/geofences/geofence-details-container/geofence-details-container.component.ts","src/app/features/administration/components/geofences/geofence-details-container/geofence-details-container.component.html","src/app/features/administration/components/device-providers/device-provider-details-container/device-provider-details-container.component.ts","src/app/features/administration/components/device-providers/device-provider-details-container/device-provider-details-container.component.html","src/app/features/administration/components/sms-gateway-providers/sms-gateway-provider-details-container/sms-gateway-provider-details-container.component.ts","src/app/features/administration/components/sms-gateway-providers/sms-gateway-provider-details-container/sms-gateway-provider-details-container.component.html","src/app/features/administration/components/io-types/io-type-details-container/io-type-details-container.component.ts","src/app/features/administration/components/io-types/io-type-details-container/io-type-details-container.component.html","src/app/features/administration/components/overspeed-profiles/overspeed-profile-details-container/overspeed-profile-details-container.component.ts","src/app/features/administration/components/overspeed-profiles/overspeed-profile-details-container/overspeed-profile-details-container.component.html","src/app/features/administration/components/alerts/alert-details-container/alert-details-container.component.ts","src/app/features/administration/components/alerts/alert-details-container/alert-details-container.component.html","src/app/features/administration/components/user-roles/user-role-details-container/user-role-details-container.component.ts","src/app/features/administration/components/user-roles/user-role-details-container/user-role-details-container.component.html","src/app/features/administration/components/users/user-details-container/user-details-container.component.ts","src/app/features/administration/components/users/user-details-container/user-details-container.component.html","src/app/features/administration/components/custom-fields/custom-field-details-container/custom-field-details-container.component.ts","src/app/features/administration/components/custom-fields/custom-field-details-container/custom-field-details-container.component.html","src/app/features/administration/components/email-providers/email-provider-details-container/email-provider-details-container.component.ts","src/app/features/administration/components/email-providers/email-provider-details-container/email-provider-details-container.component.html","src/app/features/administration/components/themes/theme-details-container/theme-details-container.component.ts","src/app/features/administration/components/themes/theme-details-container/theme-details-container.component.html","src/app/features/administration/components/cost-centres/cost-centre-details-container/cost-centre-details-container.component.ts","src/app/features/administration/components/cost-centres/cost-centre-details-container/cost-centre-details-container.component.html","src/app/features/administration/components/geofence-groups/geofence-group-details-container/geofence-group-details-container.component.ts","src/app/features/administration/components/geofence-groups/geofence-group-details-container/geofence-group-details-container.component.html","src/app/features/administration/components/asset-groups/asset-group-details-container/asset-group-details-container.component.ts","src/app/features/administration/components/asset-groups/asset-group-details-container/asset-group-details-container.component.html","src/app/features/administration/components/asset-categories/asset-category-details-container/asset-category-details-container.component.ts","src/app/features/administration/components/asset-categories/asset-category-details-container/asset-category-details-container.component.html","src/app/features/administration/components/vendor-clients/vendor-client-details-container/vendor-client-details-container.component.ts","src/app/features/administration/components/vendor-clients/vendor-client-details-container/vendor-client-details-container.component.html","src/app/features/administration/components/distributor-vendors/distributor-vendor-details-container/distributor-vendor-details-container.component.ts","src/app/features/administration/components/distributor-vendors/distributor-vendor-details-container/distributor-vendor-details-container.component.html","src/app/features/administration/components/asset-rating-profiles/asset-rating-profile-details-section/asset-rating-profile-details-section.component.ts","src/app/features/administration/components/asset-rating-profiles/asset-rating-profile-details-section/asset-rating-profile-details-section.component.html","src/app/features/administration/factories/asset-rating-profile-section-config.factory.ts","src/app/features/administration/components/asset-rating-profiles/asset-rating-profile-details-container/asset-rating-profile-details-container.component.ts","src/app/features/administration/components/asset-rating-profiles/asset-rating-profile-details-container/asset-rating-profile-details-container.component.html","src/app/features/administration/components/super-admin-distributors/super-admin-distributors-details-container/super-admin-distributors-details-container.component.ts","src/app/features/administration/components/super-admin-distributors/super-admin-distributors-details-container/super-admin-distributors-details-container.component.html","src/app/features/administration/components/asset-state-profiles/asset-state-profile-details-container/asset-state-profile-details-container.component.ts","src/app/features/administration/components/asset-state-profiles/asset-state-profile-details-container/asset-state-profile-details-container.component.html","src/app/features/administration/components/company-groups/company-group-details-container/company-group-details-container.component.ts","src/app/features/administration/components/company-groups/company-group-details-container/company-group-details-container.component.html","src/app/features/administration/components/road-profiles/road-profile-details-container/road-profile-details-container.component.ts","src/app/features/administration/components/road-profiles/road-profile-details-container/road-profile-details-container.component.html","src/app/features/administration/components/geo-lock-profiles/geo-lock-profile-details-container/geo-lock-profile-details-container.component.ts","src/app/features/administration/components/geo-lock-profiles/geo-lock-profile-details-container/geo-lock-profile-details-container.component.html","src/app/features/administration/components/device-types/device-types-details-container/device-types-details-container.component.ts","src/app/features/administration/components/device-types/device-types-details-container/device-types-details-container.component.html","src/app/features/administration/factories/details-config.factory.ts","src/app/features/administration/components/sim-cards/sim-card-details-section/sim-card-details-section.component.ts","src/app/features/administration/components/sim-cards/sim-card-details-section/sim-card-details-section.component.html","src/app/features/administration/factories/sim-card-section-config.factory.ts","src/app/features/administration/components/asset-tags/asset-tag-details-section/asset-tag-details-section.component.ts","src/app/features/administration/components/asset-tags/asset-tag-details-section/asset-tag-details-section.component.html","src/app/features/administration/factories/asset-tag-section-config.factory.ts","src/app/features/administration/components/device-config-profiles/device-config-profile-details-section/device-config-profile-details-section.component.ts","src/app/features/administration/components/device-config-profiles/device-config-profile-details-section/device-config-profile-details-section.component.html","src/app/features/administration/components/device/device-parameters-section/device-parameters-section.component.ts","src/app/features/administration/components/device/device-parameters-section/device-parameters-section.component.html","src/app/features/administration/helpers/io-devices.helper.ts","src/app/features/administration/components/device/device-io-whitelist-section/device-io-whitelist-section.component.ts","src/app/features/administration/components/device/device-io-whitelist-section/device-io-whitelist-section.component.html","src/app/features/administration/components/device/device-bitmap-section/device-bitmap-section.component.ts","src/app/features/administration/components/device/device-bitmap-section/device-bitmap-section.component.html","src/app/features/administration/components/device/device-io-section/device-io-section.component.ts","src/app/features/administration/components/device/device-io-section/device-io-section.component.html","src/app/features/administration/components/device/device-accessory-section/device-accessory-section.component.ts","src/app/features/administration/components/device/device-accessory-section/device-accessory-section.component.html","src/app/features/administration/factories/device-config-profiles-config.factory.ts","src/app/features/administration/components/device/device-details-section/device-details-section.component.ts","src/app/features/administration/components/device/device-details-section/device-details-section.component.html","src/app/features/administration/components/device/device-linked-section/device-linked-section.component.ts","src/app/features/administration/components/device/device-linked-section/device-linked-section.component.html","src/app/features/administration/components/shared/form-section/form-section.component.ts","src/app/features/administration/components/shared/form-section/form-section.component.html","src/app/features/administration/factories/device-config.factory.ts","src/app/features/administration/components/geofences/geofence-details-section/geofence-details-section.component.ts","src/app/features/administration/components/geofences/geofence-details-section/geofence-details-section.component.html","node_modules/@angular/google-maps/fesm2022/google-maps.mjs","src/app/shared/services/google-maps-loader.service.ts","src/app/shared/components/maps/google-map/google-map.component.ts","src/app/shared/components/maps/google-map/google-map.component.html","src/app/shared/components/maps/google-maps-zone/google-maps-zone.component.ts","src/app/shared/components/maps/google-maps-zone/google-maps-zone.component.html","src/app/features/administration/components/geofences/geofence-map-section/geofence-map-section.component.ts","src/app/features/administration/components/geofences/geofence-map-section/geofence-map-section.component.html","src/app/features/administration/factories/geofence-section-config.factory.ts","src/app/features/administration/components/device-providers/device-provider-details-section/device-provider-details-section.component.ts","src/app/features/administration/components/device-providers/device-provider-details-section/device-provider-details-section.component.html","src/app/features/administration/components/device-providers/device-provider-parameters-section/device-provider-parameters-section.component.ts","src/app/features/administration/components/device-providers/device-provider-parameters-section/device-provider-parameters-section.component.html","src/app/features/administration/factories/device-providers-config.factory.ts","src/app/features/administration/components/sms-gateway-providers/sms-gateway-provider-details-section/sms-gateway-provider-details-section.component.ts","src/app/features/administration/components/sms-gateway-providers/sms-gateway-provider-details-section/sms-gateway-provider-details-section.component.html","src/app/features/administration/components/sms-gateway-providers/sms-gateway-provider-parameters-section/sms-gateway-provider-parameters-section.component.ts","src/app/features/administration/components/sms-gateway-providers/sms-gateway-provider-parameters-section/sms-gateway-provider-parameters-section.component.html","src/app/features/administration/factories/sms-gateway-provider-section-config.factory.ts","src/app/features/administration/components/io-types/io-type-details-section/io-type-details-section.component.ts","src/app/features/administration/components/io-types/io-type-details-section/io-type-details-section.component.html","src/app/features/administration/factories/io-type-config.factory.ts","src/app/features/administration/components/overspeed-profiles/overspeed-profile-details-section/overspeed-profile-details-section.component.ts","src/app/features/administration/components/overspeed-profiles/overspeed-profile-details-section/overspeed-profile-details-section.component.html","src/app/features/administration/factories/overspeed-profile-config.factory.ts","src/app/shared/services/alert-icon-storage.service.ts","src/app/features/administration/components/alerts/alert-details-section/alert-details-section.component.ts","src/app/features/administration/components/alerts/alert-details-section/alert-details-section.component.html","src/app/features/administration/factories/alert-section-config.factory.ts","src/app/features/administration/components/user-roles/user-role-details-section/user-role-details-section.component.ts","src/app/features/administration/components/user-roles/user-role-details-section/user-role-details-section.component.html","src/app/features/administration/components/user-roles/user-role-rights-section/user-role-rights-section.component.ts","src/app/features/administration/components/user-roles/user-role-rights-section/user-role-rights-section.component.html","src/app/features/administration/components/user-roles/user-role-inline-policies-section/user-role-inline-policies-section.component.ts","src/app/features/administration/components/user-roles/user-role-inline-policies-section/user-role-inline-policies-section.component.html","src/app/features/administration/factories/user-role-section-config.factory.ts","src/app/features/administration/components/users/user-details-section/services/user-form.service.ts","src/app/features/administration/components/users/user-details-section/services/client-search.service.ts","src/app/features/administration/components/users/user-details-section/services/user-data-loading.service.ts","src/app/features/administration/components/users/user-details-section/user-details-section.component.ts","src/app/features/administration/components/users/user-details-section/user-details-section.component.html","src/app/features/administration/components/users/user-roles-section/user-roles-section.component.ts","src/app/features/administration/components/users/user-roles-section/user-roles-section.component.html","src/app/features/administration/components/users/user-api-keys-section/user-api-keys-section.component.ts","src/app/features/administration/components/users/user-api-keys-section/user-api-keys-section.component.html","src/app/features/administration/components/users/user-notify-section/user-notify-section.component.ts","src/app/features/administration/components/users/user-notify-section/user-notify-section.component.html","src/app/features/administration/components/users/user-client-permissions-section/user-client-permissions-section.component.ts","src/app/features/administration/components/users/user-client-permissions-section/user-client-permissions-section.component.html","src/app/features/administration/factories/user-section-config.factory.ts","src/app/features/administration/services/adapters/assets.adapter.service.ts","src/app/features/administration/services/adapters/geofences.adapter.service.ts","src/app/features/administration/services/adapters/alerts.adapter.service.ts","src/app/features/administration/services/adapters/devices.adapter.service.ts","src/app/features/administration/services/adapters/asset-tags.adapter.service.ts","src/app/features/administration/services/adapters/device-providers-data-adapter.service.ts","src/app/features/administration/services/adapters/email-providers-data-adapter.service.ts","src/app/features/administration/services/adapters/sim-cards.adapter.service.ts","src/app/features/administration/services/adapters/sms-gateway-provider.adapter.service.ts","src/app/features/administration/services/adapters/io-types.adapter.service.ts","src/app/features/administration/services/adapters/device-config-profiles.adapter.service.ts","src/app/features/administration/services/adapters/vendors.adapter.service.ts","src/app/features/administration/services/adapters/asset-rating-profiles.adapter.service.ts","src/app/features/administration/services/adapters/asset-state-profiles.adapter.service.ts","src/app/features/administration/services/adapters/overspeed-profiles.adapter.service.ts","src/app/features/administration/services/adapters/road-profiles.adapter.service.ts","src/app/features/administration/services/adapters/geo-lock-profiles.adapter.service.ts","src/app/features/administration/services/adapters/custom-fields.adapter.service.ts","src/app/features/administration/services/adapters/cost-centres.adapter.service.ts","src/app/features/administration/services/adapters/asset-groups-adapter.service.ts","src/app/features/administration/services/adapters/asset-categories.adapter.service.ts","src/app/features/administration/services/adapters/geofence-groups.adapter.service.ts","src/app/features/administration/services/adapters/users.adapter.service.ts","src/app/features/administration/services/adapters/user-roles.adapter.service.ts","src/app/features/administration/services/adapters/themes.adapter.service.ts","src/app/features/administration/services/adapters/company-groups.adapter.service.ts","src/app/features/administration/services/adapters/clients.adapter.service.ts","src/app/features/administration/services/adapters/distributors.adapter.service.ts","src/app/features/administration/components/custom-fields/custom-field-details-section/custom-field-details-section.component.ts","src/app/features/administration/components/custom-fields/custom-field-details-section/custom-field-details-section.component.html","src/app/features/administration/factories/custom-field-section-config.factory.ts","src/app/features/administration/components/email-providers/email-provider-details-section/email-provider-details-section.component.ts","src/app/features/administration/components/email-providers/email-provider-details-section/email-provider-details-section.component.html","src/app/features/administration/components/email-providers/email-provider-parameters-section/email-provider-parameters-section.component.ts","src/app/features/administration/components/email-providers/email-provider-parameters-section/email-provider-parameters-section.component.html","src/app/features/administration/factories/email-providers-section-config.factory.ts","src/app/features/administration/components/themes/theme-details-section/theme-details-section.component.ts","src/app/features/administration/components/themes/theme-details-section/theme-details-section.component.html","src/app/features/administration/services/theme-utility.service.ts","src/app/features/administration/services/theme-color.service.ts","src/app/features/administration/factories/theme-form-field.factory.ts","src/app/features/administration/services/form-field.service.ts","src/app/features/administration/components/base/theme-settings-section-base.ts","src/app/features/administration/components/themes/theme-value-display/theme-value-display.component.ts","src/app/features/administration/components/themes/theme-value-display/theme-value-display.component.html","src/app/features/administration/components/themes/theme-settings-main-section/theme-settings-main-section.component.ts","src/app/features/administration/components/themes/theme-settings-main-section/theme-settings-main-section.component.html","src/app/features/administration/components/themes/theme-settings-color-section/theme-settings-color-section.component.ts","src/app/features/administration/components/themes/theme-settings-color-section/theme-settings-color-section.component.html","src/app/features/administration/components/themes/theme-settings-content-section/theme-settings-content-section.component.ts","src/app/features/administration/components/themes/theme-settings-content-section/theme-settings-content-section.component.html","src/app/features/administration/components/themes/theme-settings-navigation-section/theme-settings-navigation-section.component.ts","src/app/features/administration/components/themes/theme-settings-navigation-section/theme-settings-navigation-section.component.html","src/app/features/administration/components/themes/theme-settings-top-navigation-section/theme-settings-top-navigation-section.component.ts","src/app/features/administration/components/themes/theme-settings-top-navigation-section/theme-settings-top-navigation-section.component.html","src/app/features/administration/components/themes/theme-settings-header-section/theme-settings-header-section.component.ts","src/app/features/administration/components/themes/theme-settings-header-section/theme-settings-header-section.component.html","src/app/features/administration/components/themes/theme-settings-footer-section/theme-settings-footer-section.component.ts","src/app/features/administration/components/themes/theme-settings-footer-section/theme-settings-footer-section.component.html","src/app/features/administration/components/themes/theme-settings-modal-section/theme-settings-modal-section.component.ts","src/app/features/administration/components/themes/theme-settings-modal-section/theme-settings-modal-section.component.html","src/app/features/administration/components/themes/theme-settings-sidebar-section/theme-settings-sidebar-section.component.ts","src/app/features/administration/components/themes/theme-settings-sidebar-section/theme-settings-sidebar-section.component.html","src/app/features/administration/components/themes/theme-settings-button-section/theme-settings-button-section.component.ts","src/app/features/administration/components/themes/theme-settings-button-section/theme-settings-button-section.component.html","src/app/features/administration/components/themes/theme-settings-input-section/theme-settings-input-section.component.ts","src/app/features/administration/components/themes/theme-settings-input-section/theme-settings-input-section.component.html","src/app/features/administration/components/themes/theme-settings-tab-section/theme-settings-tab-section.component.ts","src/app/features/administration/components/themes/theme-settings-tab-section/theme-settings-tab-section.component.html","src/app/features/administration/components/themes/theme-settings-accordion-section/theme-settings-accordion-section.component.ts","src/app/features/administration/components/themes/theme-settings-accordion-section/theme-settings-accordion-section.component.html","src/app/features/administration/components/themes/theme-settings-table-section/theme-settings-table-section.component.ts","src/app/features/administration/components/themes/theme-settings-table-section/theme-settings-table-section.component.html","src/app/features/administration/components/themes/theme-settings-tree-section/theme-settings-tree-section.component.ts","src/app/features/administration/components/themes/theme-settings-tree-section/theme-settings-tree-section.component.html","src/app/features/administration/components/themes/theme-settings-list-section/theme-settings-list-section.component.ts","src/app/features/administration/components/themes/theme-settings-list-section/theme-settings-list-section.component.html","src/app/features/administration/components/themes/theme-settings-feed-section/theme-settings-feed-section.component.ts","src/app/features/administration/components/themes/theme-settings-feed-section/theme-settings-feed-section.component.html","src/app/features/administration/components/themes/theme-settings-graph-section/theme-settings-graph-section.component.ts","src/app/features/administration/components/themes/theme-settings-graph-section/theme-settings-graph-section.component.html","src/app/features/administration/components/themes/theme-settings-loader-section/theme-settings-loader-section.component.ts","src/app/features/administration/components/themes/theme-settings-loader-section/theme-settings-loader-section.component.html","src/app/features/administration/factories/theme-section-config.factory.ts","src/app/features/administration/components/cost-centres/cost-centre-details-section/cost-centre-details-section.component.ts","src/app/features/administration/components/cost-centres/cost-centre-details-section/cost-centre-details-section.component.html","src/app/features/administration/components/shared/contacts-section/contacts-section.component.ts","src/app/features/administration/components/shared/contacts-section/contacts-section.component.html","src/app/features/administration/components/shared/asset-list-section/asset-list-section.component.ts","src/app/features/administration/components/shared/asset-list-section/asset-list-section.component.html","src/app/features/administration/components/shared/user-list-section/user-list-section.component.ts","src/app/features/administration/components/shared/user-list-section/user-list-section.component.html","src/app/features/administration/factories/cost-centre-section-config.factory.ts","src/app/features/administration/components/geofence-groups/geofence-group-details-section/geofence-group-details-section.component.ts","src/app/features/administration/components/geofence-groups/geofence-group-details-section/geofence-group-details-section.component.html","src/app/features/administration/factories/geofence-group-section-config.factory.ts","src/app/features/administration/components/asset-groups/asset-group-details-section/asset-group-details-section.component.ts","src/app/features/administration/components/asset-groups/asset-group-details-section/asset-group-details-section.component.html","src/app/features/administration/factories/asset-group-section-config.factory.ts","src/app/features/administration/components/asset-categories/asset-category-details-section/asset-category-details-section.component.ts","src/app/features/administration/components/asset-categories/asset-category-details-section/asset-category-details-section.component.html","src/app/features/administration/factories/asset-category-section-config.factory.ts","src/app/features/administration/factories/client-section-config.factory.ts","src/app/features/administration/factories/vendor-section-config.factory.ts","src/app/features/administration/factories/distributor-section-config.factory.ts","src/app/features/administration/components/asset-state-profiles/asset-state-profile-details-section/asset-state-profile-details-section.component.ts","src/app/features/administration/components/asset-state-profiles/asset-state-profile-details-section/asset-state-profile-details-section.component.html","src/app/features/administration/factories/asset-state-profile-section-config.factory.ts","src/app/features/administration/components/company-groups/company-group-details-section/company-group-details-section.component.ts","src/app/features/administration/components/company-groups/company-group-details-section/company-group-details-section.component.html","src/app/features/administration/components/company-groups/company-group-email-template-section/company-group-email-template-section.component.ts","src/app/features/administration/components/company-groups/company-group-email-template-section/company-group-email-template-section.component.html","src/app/features/administration/factories/company-group-section-config.factory.ts","src/app/shared/services/geo-filter.service.ts","src/app/features/administration/components/road-profiles/road-profile-details-section/road-profile-details-section.component.ts","src/app/features/administration/components/road-profiles/road-profile-details-section/road-profile-details-section.component.html","src/app/features/administration/factories/road-profile-section-config.factory.ts","src/app/features/administration/components/geo-lock-profiles/geo-lock-profile-details-section/geo-lock-profile-details-section.component.ts","src/app/features/administration/components/geo-lock-profiles/geo-lock-profile-details-section/geo-lock-profile-details-section.component.html","src/app/features/administration/factories/geo-lock-profiles-config.factory.ts","src/app/features/administration/components/device-types/device-types-io-section/device-types-io-section.component.ts","src/app/features/administration/components/device-types/device-types-io-section/device-types-io-section.component.html","src/app/features/administration/components/device-types/device-types-accessories-section/device-types-accessories-section.component.ts","src/app/features/administration/components/device-types/device-types-accessories-section/device-types-accessories-section.component.html","src/app/features/administration/components/device-types/device-types-features-section/device-types-features-section.component.ts","src/app/features/administration/components/device-types/device-types-features-section/device-types-features-section.component.html","src/app/features/administration/components/device-types/device-types-settings-definition-section/device-types-settings-definition-section.component.ts","src/app/features/administration/components/device-types/device-types-settings-definition-section/device-types-settings-definition-section.component.html","src/app/features/administration/factories/device-types-section-config.factory.ts"],"sourcesContent":["import { Observable, of, map } from 'rxjs';\nimport { TreeNode } from 'primeng/api';\nimport {\n  DataGridParams,\n  TreeTableAdapter,\n  TreeTableResponse,\n} from '../../../../shared/models';\nimport {\n  isDefined,\n  isEmpty,\n  isNullOrUndefined,\n} from '../../../../shared/utils';\nimport { IdName } from '../../../../api';\n\n// Common interface for hierarchical entities\nexport interface HierarchicalEntity {\n  id: string;\n  name?: string | null;\n  parent?: IdName;\n  owner?: { id: string };\n  [key: string]: unknown;\n}\n\nexport abstract class BaseTreeAdapter<\n  TList extends HierarchicalEntity,\n  TListResponse extends { items: TList[]; count: number },\n  TDetail = TList,\n> implements TreeTableAdapter<TDetail, DataGridParams, TreeTableResponse<TList>>\n{\n  /**\n   * Fetches entities from the server based on the provided parameters.\n   * This method is responsible for making the API call to retrieve the list of entities.\n   * It should be implemented in derived classes to provide the specific API call.\n   *\n   * @param owner - The owner ID to filter entities by\n   * @param offset - The offset for pagination\n   * @param limit - The limit for pagination\n   * @param sortField - The field to sort the entities by\n   * @param filters - The filters to apply to the entity list\n   * @return Observable containing the list of entities and their count\n   * @throws Error if the API call fails\n   */\n  protected abstract fetchEntities(\n    owner: string,\n    offset: number | undefined,\n    limit: number | undefined,\n    sortField: string | undefined,\n    filters: string | undefined,\n  ): Observable<TListResponse>;\n\n  /**\n   * Fetches a single entity by its ID.\n   * This method should be implemented in derived classes to provide the specific API call.\n   *\n   * @param id - The ID of the entity to fetch\n   * @return Observable containing the entity data\n   * @throws Error if the API call fails\n   */\n  abstract getById(id: string): Observable<TDetail>;\n\n  /**\n   * Fetches a list of entities based on the provided parameters.\n   * This method transforms the flat list of entities into a hierarchical structure.\n   *\n   * @param params - The parameters for fetching the entity list\n   * @return Observable containing the hierarchical TreeNode structure and other metadata\n   */\n  getList(params: DataGridParams): Observable<TreeTableResponse<TList>> {\n    const { owner, limit, offset, sortField, filters } = params;\n\n    if (isNullOrUndefined(owner)) {\n      return of({ nodes: [], items: [], count: 0, limit: 0 });\n    }\n\n    return this.fetchEntities(\n      owner,\n      offset,\n      limit,\n      sortField as string,\n      filters,\n    ).pipe(\n      map((response) => {\n        // Transform the flat list into a hierarchical structure\n        const nodes = this.buildEntityTree(response.items);\n\n        return {\n          nodes,\n          items: response.items,\n          count: response.count,\n          limit: limit || 0,\n        };\n      }),\n    );\n  }\n\n  /**\n   * Converts flat entity data into hierarchical TreeNode structure\n   * This method builds a tree structure from a flat list of entities.\n   * It handles circular references, missing parents, and owner relationships.\n   *\n   * @param items - Flat list of entities to be converted into a tree structure\n   * @returns Hierarchical TreeNode structure for TreeTable\n   */\n  protected buildEntityTree(items: TList[]): TreeNode[] {\n    if (!items?.length) return [];\n\n    // Map of id -> node\n    const nodeMap = new Map<string, TreeNode>();\n    // Map of ownerId -> nodeId (for root/owner nodes)\n    const ownerRootMap = new Map<string, string>();\n    // Map for missing parent nodes\n    const missingParentMap = new Map<string, TreeNode>();\n    // Set to track circular/self references\n    const circularRefs = new Set<string>();\n\n    // Identify root nodes and circular references\n    items.forEach((item) => {\n      if (isDefined(item.owner?.id) && item.id === item.owner.id) {\n        ownerRootMap.set(item.owner.id, item.id);\n      }\n      if (item.parent?.id === item.id) {\n        circularRefs.add(item.id);\n        console.warn(\n          `Self-reference detected for entity ${item.id} (${item.name})`,\n        );\n      }\n    });\n\n    // Create all nodes\n    items.forEach((item) => {\n      nodeMap.set(item.id, {\n        key: item.id,\n        data: item,\n        children: [],\n        leaf: true,\n      });\n    });\n\n    const rootNodes: TreeNode[] = [];\n    const attached = new Set<string>();\n\n    // Build the tree structure\n    items.forEach((item) =>\n      this.processTreeNode(\n        item,\n        nodeMap,\n        ownerRootMap,\n        missingParentMap,\n        circularRefs,\n        rootNodes,\n        attached,\n      ),\n    );\n\n    this.sortNodesByName(rootNodes);\n    return rootNodes;\n  }\n\n  /**\n   * Processes each tree node and attaches it to its parent or root node\n   * Handles circular references and missing parents.\n   *\n   * @param item - The entity item to process\n   * @param nodeMap - Map of all nodes by ID\n   * @param ownerRootMap - Map of owner IDs to root node IDs\n   * @param missingParentMap - Map for missing parent nodes\n   * @param circularRefs - Set of circular references\n   * @param rootNodes - Array of root nodes\n   * @param attached - Set of already attached node keys\n   * @returns void\n   */\n  private processTreeNode(\n    item: TList,\n    nodeMap: Map<string, TreeNode>,\n    ownerRootMap: Map<string, string>,\n    missingParentMap: Map<string, TreeNode>,\n    circularRefs: Set<string>,\n    rootNodes: TreeNode[],\n    attached: Set<string>,\n  ): void {\n    const currentNode = nodeMap.get(item.id);\n    if (!currentNode) return;\n\n    // Handle circular references\n    if (circularRefs.has(item.id)) {\n      this.attachToOwnerOrRoot(\n        item,\n        currentNode,\n        ownerRootMap,\n        nodeMap,\n        rootNodes,\n        attached,\n      );\n      return;\n    }\n\n    // If this is a root/owner node\n    if (item.owner?.id === item.id && !attached.has(item.id)) {\n      rootNodes.push(currentNode);\n      attached.add(item.id);\n      return;\n    }\n\n    // Attach to parent if possible\n    if (isDefined(item.parent?.id) && !circularRefs.has(item.id)) {\n      this.attachToParent(\n        item,\n        currentNode,\n        nodeMap,\n        missingParentMap,\n        ownerRootMap,\n        rootNodes,\n        attached,\n      );\n      return;\n    }\n\n    // If not attached yet, attach to owner or root\n    this.attachToOwnerOrRoot(\n      item,\n      currentNode,\n      ownerRootMap,\n      nodeMap,\n      rootNodes,\n      attached,\n    );\n  }\n\n  /**\n   * Attaches the current node to its parent node\n   * If the parent is missing, it creates a placeholder node for it.\n   * @param item - The entity item to process\n   * @param currentNode - The current node being processed\n   * @param nodeMap - Map of all nodes by ID\n   * @param missingParentMap - Map for missing parent nodes\n   * @param ownerRootMap - Map of owner IDs to root node IDs\n   * @param rootNodes - Array of root nodes\n   * @param attached - Set of already attached node keys\n   * @returns void\n   */\n  private attachToParent(\n    item: TList,\n    currentNode: TreeNode,\n    nodeMap: Map<string, TreeNode>,\n    missingParentMap: Map<string, TreeNode>,\n    ownerRootMap: Map<string, string>,\n    rootNodes: TreeNode[],\n    attached: Set<string>,\n  ): void {\n    let parentNode = isDefined(item.parent)\n      ? nodeMap.get(item.parent.id)\n      : undefined;\n\n    // If parent is missing, create placeholder\n    parentNode ??= this.createMissingParentNode(\n      item,\n      missingParentMap,\n      ownerRootMap,\n      nodeMap,\n      rootNodes,\n      attached,\n    );\n\n    // Attach current node to parent\n    if (!attached.has(item.id) && isDefined(parentNode.children)) {\n      parentNode.children.push(currentNode);\n      parentNode.leaf = false;\n      attached.add(item.id);\n    }\n  }\n\n  /**\n   * Creates a placeholder node for a missing parent entity\n   * This method is called when a parent node is not found in the map.\n   * It creates a new node with a unique key and default data.\n   *\n   * @param item - The entity item for which the parent is missing\n   * @param missingParentMap - Map for missing parent nodes\n   * @param ownerRootMap - Map of owner IDs to root node IDs\n   * @param nodeMap - Map of all nodes by ID\n   * @param rootNodes - Array of root nodes\n   * @param attached - Set of already attached node keys\n   * @returns The created placeholder node for the missing parent\n   */\n  private createMissingParentNode(\n    item: TList,\n    missingParentMap: Map<string, TreeNode>,\n    ownerRootMap: Map<string, string>,\n    nodeMap: Map<string, TreeNode>,\n    rootNodes: TreeNode[],\n    attached: Set<string>,\n  ): TreeNode {\n    let parentNode = isDefined(item.parent)\n      ? missingParentMap.get(item.parent.id)\n      : undefined;\n\n    if (!parentNode) {\n      const parentId = item?.parent?.id;\n      const parentKey = `missing-${parentId}`;\n\n      // Use the configurable method to create entity data\n      const entityData = this.createMissingEntityData(\n        parentId,\n        item?.parent?.name,\n        item.owner,\n      );\n\n      parentNode = {\n        key: parentKey,\n        data: entityData,\n        children: [],\n        leaf: false,\n        styleClass: 'missing-parent-node',\n      };\n      missingParentMap.set(parentId ?? '', parentNode);\n\n      // Use shared attachment logic\n      this.attachNodeToOwnerOrRoot(\n        parentKey,\n        parentNode,\n        item.owner?.id,\n        ownerRootMap,\n        nodeMap,\n        rootNodes,\n        attached,\n      );\n    }\n\n    return parentNode;\n  }\n\n  /**\n   * Attaches the current node to its owner or to root nodes\n   * This method is called when the node cannot be attached to a parent.\n   * It checks if the node has an owner and tries to attach it to the owner's root node.\n   * If not, it adds the node to the root nodes array.\n   * @param item - The entity item to process\n   * @param currentNode - The current node being processed\n   * @param ownerRootMap - Map of owner IDs to root node IDs\n   * @param nodeMap - Map of all nodes by ID\n   * @param rootNodes - Array of root nodes\n   * @param attached - Set of already attached node keys\n   * @returns void\n   * */\n  private attachToOwnerOrRoot(\n    item: TList,\n    currentNode: TreeNode,\n    ownerRootMap: Map<string, string>,\n    nodeMap: Map<string, TreeNode>,\n    rootNodes: TreeNode[],\n    attached: Set<string>,\n  ): void {\n    this.attachNodeToOwnerOrRoot(\n      item.id,\n      currentNode,\n      item.owner?.id,\n      ownerRootMap,\n      nodeMap,\n      rootNodes,\n      attached,\n    );\n  }\n\n  /**\n   * Shared utility method to attach a node to its owner or to root nodes\n   * @param nodeKey - Unique identifier of the node\n   * @param node - The node to attach\n   * @param ownerId - ID of the owner (if any)\n   * @param ownerRootMap - Map of owner IDs to root node IDs\n   * @param nodeMap - Map of all nodes by ID\n   * @param rootNodes - Array of root nodes\n   * @param attached - Set of already attached node keys\n   * @returns true if node was attached, false otherwise\n   */\n  private attachNodeToOwnerOrRoot(\n    nodeKey: string,\n    node: TreeNode,\n    ownerId: string | undefined,\n    ownerRootMap: Map<string, string>,\n    nodeMap: Map<string, TreeNode>,\n    rootNodes: TreeNode[],\n    attached: Set<string>,\n  ): boolean {\n    // Skip if already attached\n    if (attached.has(nodeKey)) {\n      return false;\n    }\n\n    // Try to attach to owner\n    if (\n      isDefined(ownerId) &&\n      ownerRootMap.has(ownerId) &&\n      nodeKey !== ownerId // Prevent self-attachment\n    ) {\n      const rootNodeId = ownerRootMap.get(ownerId);\n      const ownerNode = isDefined(rootNodeId) ? nodeMap.get(rootNodeId) : null;\n\n      if (isDefined(ownerNode?.children)) {\n        ownerNode.children.push(node);\n        ownerNode.leaf = false;\n        attached.add(nodeKey);\n        return true;\n      }\n    }\n\n    // Add to root if not attached to owner\n    rootNodes.push(node);\n    attached.add(nodeKey);\n    return true;\n  }\n\n  /**\n   * Creates data for a missing parent entity\n   * Override this method in derived classes to customize the missing parent structure\n   * @param parentId - ID of the missing parent\n   * @param parentName - Name of the missing parent, if available\n   * @param ownerInfo - Owner information to inherit\n   * @returns Partial entity data for the missing parent\n   */\n  protected createMissingEntityData(\n    parentId: string | undefined,\n    parentName: string | null | undefined,\n    ownerInfo: { id: string } | undefined,\n  ) {\n    return {\n      id: parentId,\n      name: parentName ?? 'Unknown',\n      owner: ownerInfo,\n      parent: null,\n    };\n  }\n\n  /**\n   * Sorts the nodes by their name property in a case-insensitive manner\n   * This method is called recursively for all child nodes.\n   * @param nodes - Array of TreeNode objects to be sorted\n   * @return void\n   */\n  protected sortNodesByName(nodes: TreeNode[]): void {\n    nodes.sort((a, b) => {\n      const nameA = a.data?.name?.toLowerCase() ?? '';\n      const nameB = b.data?.name?.toLowerCase() ?? '';\n      return nameA.localeCompare(nameB);\n    });\n\n    nodes.forEach((node) => {\n      if (isDefined(node.children) && !isEmpty(node.children)) {\n        this.sortNodesByName(node.children);\n      }\n    });\n  }\n}\n","import {\n  DeviceTypeListItem,\n  DeviceTypeResponse,\n  DeviceTypesService,\n} from '../../../../api';\nimport { Injectable, inject } from '@angular/core';\n\nimport { BaseTreeAdapter } from './base-tree.adapter.service';\nimport { Observable } from 'rxjs';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class DeviceTypesDataAdapter extends BaseTreeAdapter<\n  DeviceTypeListItem,\n  { items: DeviceTypeListItem[]; count: number },\n  DeviceTypeResponse\n> {\n  private readonly deviceTypesService = inject(DeviceTypesService);\n\n  protected fetchEntities(\n    owner: string,\n    offset: number | undefined,\n    limit: number | undefined,\n    sortField: string | undefined,\n    filters: string | undefined,\n  ): Observable<{ items: DeviceTypeListItem[]; count: number }> {\n    return this.deviceTypesService.listDeviceTypes(\n      owner,\n      true, // recurse to get all levels\n      offset,\n      limit,\n      sortField,\n      filters,\n    );\n  }\n\n  getById(id: string): Observable<DeviceTypeResponse> {\n    return this.deviceTypesService.getDeviceType(id);\n  }\n}\n","import { Type } from '@angular/core';\nimport {\n  AdminDetailSection,\n  EntitySection,\n  AdminSectionLayout,\n  AdminSectionCategory,\n  AdminSectionConfiguration,\n} from '../models';\n\nexport class FlexibleSectionBuilder<T = unknown> {\n  private sections: AdminDetailSection[] = [];\n  private categories: AdminSectionCategory[] = [];\n  private defaultExpandedCategory?: string;\n  private allowMultipleExpanded = false;\n  private showCategoryIcons = false;\n\n  constructor(private entity: T | null = null) {\n    // Initialize with common default categories\n    this.withDefaultCategories();\n  }\n\n  /**\n   * Add a section to the builder\n   */\n  withSection(\n    id: string,\n    title: string,\n    component: Type<EntitySection<unknown>>,\n    category = 'information',\n    order = 10,\n    additionalInputs: Record<string, unknown> = {},\n  ): this {\n    this.sections.push({\n      id,\n      title,\n      component,\n      category,\n      order,\n      componentInputs: {\n        entity: this.entity,\n        ...additionalInputs,\n      },\n    });\n    return this;\n  }\n\n  /**\n   * Add a section with full configuration options\n   */\n  withAdvancedSection(\n    section: Omit<AdminDetailSection, 'componentInputs'> & {\n      componentInputs?: Record<string, unknown>;\n    },\n  ): this {\n    this.sections.push({\n      ...section,\n      componentInputs: {\n        entity: this.entity,\n        ...(section.componentInputs || {}),\n      },\n    });\n    return this;\n  }\n\n  /**\n   * Define or override a category\n   */\n  withCategory(\n    key: string,\n    label: string,\n    order: number,\n    options?: {\n      visible?: boolean | ((entity: unknown) => boolean);\n      icon?: string;\n      description?: string;\n    },\n  ): this {\n    const existingIndex = this.categories.findIndex((c) => c.key === key);\n    const category: AdminSectionCategory = {\n      key,\n      label,\n      order,\n      ...options,\n    };\n\n    if (existingIndex >= 0) {\n      this.categories[existingIndex] = category;\n    } else {\n      this.categories.push(category);\n    }\n    return this;\n  }\n\n  /**\n   * Remove a category\n   */\n  withoutCategory(key: string): this {\n    this.categories = this.categories.filter((c) => c.key !== key);\n    return this;\n  }\n\n  /**\n   * Set the default expanded category\n   */\n  withDefaultExpanded(categoryKey: string): this {\n    this.defaultExpandedCategory = categoryKey;\n    return this;\n  }\n\n  /**\n   * Allow multiple accordion panels to be expanded simultaneously\n   */\n  withMultipleExpansion(allow = true): this {\n    this.allowMultipleExpanded = allow;\n    return this;\n  }\n\n  /**\n   * Show category icons in the accordion headers\n   */\n  withCategoryIcons(show = true): this {\n    this.showCategoryIcons = show;\n    return this;\n  }\n\n  /**\n   * Add multiple sections at once\n   */\n  withSections(sections: AdminDetailSection[]): this {\n    sections.forEach((section) => {\n      this.sections.push({\n        ...section,\n        componentInputs: {\n          entity: this.entity,\n          ...(section.componentInputs || {}),\n        },\n      });\n    });\n    return this;\n  }\n\n  /**\n   * Add default categories commonly used across entities\n   */\n  private withDefaultCategories(): this {\n    this.categories = [\n      { key: 'information', label: 'Information', order: 10 },\n      { key: 'settings', label: 'Settings', order: 20 },\n      { key: 'events', label: 'Events', order: 30 },\n      { key: 'statistics', label: 'Statistics', order: 40 },\n      { key: 'io', label: 'IO', order: 50 },\n      { key: 'accessories', label: 'Accessories', order: 60 },\n      { key: 'controls', label: 'Controls', order: 70 },\n      { key: 'assets', label: 'Assets', order: 80 },\n      { key: 'users', label: 'Users', order: 90 },\n      { key: 'features', label: 'Features', order: 100 },\n      { key: 'customization', label: 'Email Customization', order: 110 },\n      { key: 'feed', label: 'Changes', order: 120 },\n      { key: 'backend', label: 'Backend', order: 130 },\n      { key: 'custom', label: 'Custom', order: 140 },\n    ];\n    return this;\n  }\n\n  /**\n   * Build the final configuration\n   */\n  build(): AdminSectionConfiguration {\n    // Filter out categories that have no sections\n    const usedCategories = this.categories.filter((category) =>\n      this.sections.some((section) => section.category === category.key),\n    );\n\n    const layout: AdminSectionLayout = {\n      categories: usedCategories.sort((a, b) => a.order - b.order),\n      defaultExpandedCategory: this.defaultExpandedCategory,\n      allowMultipleExpanded: this.allowMultipleExpanded,\n      showCategoryIcons: this.showCategoryIcons,\n    };\n\n    return {\n      sections: this.sections,\n      layout,\n    };\n  }\n\n  /**\n   * Legacy method to just return sections (for backward compatibility)\n   */\n  buildSections(): AdminDetailSection[] {\n    return this.sections;\n  }\n\n  /**\n   * Create a builder for a specific entity type\n   */\n  static forEntity<TEntity>(\n    entity: TEntity | null,\n  ): FlexibleSectionBuilder<TEntity> {\n    return new FlexibleSectionBuilder<TEntity>(entity);\n  }\n}\n","import {\n  ChangeDetectionStrategy,\n  Component,\n  computed,\n  inject,\n  input,\n  OnInit,\n  signal,\n} from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { AccordionModule } from 'primeng/accordion';\nimport { DividerModule } from 'primeng/divider';\nimport { ButtonModule } from 'primeng/button';\nimport { TooltipModule } from 'primeng/tooltip';\n\nimport { DetailsComponentFactory } from '../../factories/details-config.factory';\nimport { isNullOrUndefined } from '../../../../shared/utils';\nimport { EntitySectionConfig } from '../../models/entity-section.interface';\nimport { ProgressSpinnerModule } from 'primeng/progressspinner';\n\n@Component({\n  selector: 'app-generic-details-container',\n  imports: [\n    CommonModule,\n    AccordionModule,\n    DividerModule,\n    ButtonModule,\n    TooltipModule,\n    ProgressSpinnerModule,\n  ],\n  templateUrl: './generic-details-container.component.html',\n  styleUrl: './generic-details-container.component.scss',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class GenericDetailsContainerComponent implements OnInit {\n  readonly entity = input<Record<string, unknown>>({});\n  readonly entityType = input<string>('');\n\n  private readonly detailsFactory = inject(DetailsComponentFactory);\n\n  readonly isLoading = signal<boolean>(false);\n  readonly currentMode = signal<'view' | 'edit'>('view');\n  activeIndexes: number[] = [0]; // Default to first panel open\n\n  readonly displayedSections = computed(() => {\n    const config = this.getEntityConfig();\n    if (!config?.sections) return [];\n\n    return config.sections\n      .filter((section) => {\n        if (typeof section.visible === 'function') {\n          return section.visible(this.entity());\n        }\n        return section.visible !== false;\n      })\n      .sort((a, b) => (a.order ?? 0) - (b.order ?? 0));\n  });\n\n  // Computed properties for sections by category\n  readonly informationSections = computed(() =>\n    this.displayedSections().filter((s) => s.category === 'information'),\n  );\n\n  readonly settingsSections = computed(() =>\n    this.displayedSections().filter((s) => s.category === 'settings'),\n  );\n\n  readonly statisticsSections = computed(() =>\n    this.displayedSections().filter((s) => s.category === 'statistics'),\n  );\n\n  readonly customSections = computed(() =>\n    this.displayedSections().filter((s) => s.category === 'custom'),\n  );\n\n  // Computed properties for category visibility\n  readonly hasInformationSections = computed(\n    () => this.informationSections().length > 0,\n  );\n\n  readonly hasSettingsSections = computed(\n    () => this.settingsSections().length > 0,\n  );\n\n  readonly hasStatisticsSections = computed(\n    () => this.statisticsSections().length > 0,\n  );\n\n  readonly hasCustomSections = computed(() => this.customSections().length > 0);\n\n  readonly canToggleMode = computed(() => {\n    const config = this.getEntityConfig();\n    return config?.allowModeToggle !== false;\n  });\n\n  ngOnInit(): void {\n    const config = this.getEntityConfig();\n\n    if (config?.defaultMode) {\n      this.currentMode.set(config.defaultMode);\n    }\n\n    // Load data if needed\n    this.loadEntityDetails();\n  }\n\n  loadEntityDetails(): void {\n    const id = this.entity()?.['id'];\n    const type = this.entityType();\n\n    if (isNullOrUndefined(id) || isNullOrUndefined(type)) return;\n\n    // Check if we already have full details\n    if (this.hasFullDetails()) return;\n\n    // Load full details if needed\n    this.isLoading.set(true);\n\n    setTimeout(() => {\n      this.isLoading.set(false);\n    }, 500);\n  }\n\n  hasFullDetails(): boolean {\n    // Check if we have all required fields\n    return true;\n  }\n\n  getEntityConfig() {\n    return this.detailsFactory.getEntityConfig(this.entityType());\n  }\n\n  getSectionInputs(section: EntitySectionConfig) {\n    return {\n      entity: this.entity(),\n      mode: this.currentMode(),\n      options: {\n        title: section.title,\n        readonly: section.readonly ?? false,\n        expanded: section.expanded,\n        category: section.category,\n        order: section.order,\n      },\n    };\n  }\n\n  toggleMode(): void {\n    this.currentMode.set(this.currentMode() === 'view' ? 'edit' : 'view');\n  }\n}\n","<div class=\"p-3 bg-surface-card rounded-md shadow-sm h-full overflow-auto\">\n  <!-- Header with edit/view toggle -->\n  <div class=\"flex justify-between items-center mb-4\">\n    <h2 class=\"text-xl font-semibold\">\n      <span class=\"text-sm text-surface-600 ml-2\">{{ entityType() }}</span>\n    </h2>\n  </div>\n\n  <!-- Loading state -->\n  @if (isLoading()) {\n    <div class=\"flex justify-center items-center p-5\">\n      <p-progressSpinner></p-progressSpinner>\n    </div>\n  }\n\n  <!-- Content with accordion sections -->\n  @if (entity() && !isLoading()) {\n    <div>\n      <p-accordion [multiple]=\"true\">\n        <!-- Information sections -->\n        @if (hasInformationSections()) {\n          <p-accordion-panel header=\"INFORMATION\" styleClass=\"mb-2\">\n            <ng-template pTemplate=\"header\">\n              <span class=\"uppercase\">Information</span>\n            </ng-template>\n            <ng-template pTemplate=\"content\">\n              @for (\n                section of informationSections();\n                track section;\n                let last = $last\n              ) {\n                <div class=\"section-container\">\n                  @if (section.title) {\n                    <h3 class=\"section-title\">\n                      {{ section.title }}\n                    </h3>\n                  }\n                  <ng-container\n                    *ngComponentOutlet=\"\n                      section.component;\n                      inputs: getSectionInputs(section)\n                    \"\n                  >\n                  </ng-container>\n                </div>\n                @if (!last) {\n                  <p-divider></p-divider>\n                }\n              }\n            </ng-template>\n          </p-accordion-panel>\n        }\n        <!-- Settings sections -->\n        @if (hasSettingsSections()) {\n          <p-accordion-panel header=\"SETTINGS\" styleClass=\"mb-2\">\n            <ng-template pTemplate=\"header\">\n              <span class=\"uppercase\">Settings</span>\n            </ng-template>\n            <ng-template pTemplate=\"content\">\n              @for (\n                section of settingsSections();\n                track section;\n                let last = $last\n              ) {\n                <div class=\"section-container\">\n                  @if (section.title) {\n                    <h3 class=\"section-title\">\n                      {{ section.title }}\n                    </h3>\n                  }\n                  <ng-container\n                    *ngComponentOutlet=\"\n                      section.component;\n                      inputs: getSectionInputs(section)\n                    \"\n                  >\n                  </ng-container>\n                </div>\n                @if (!last) {\n                  <p-divider></p-divider>\n                }\n              }\n            </ng-template>\n          </p-accordion-panel>\n        }\n        <!-- Statistics sections -->\n        @if (hasStatisticsSections()) {\n          <p-accordion-panel header=\"STATISTICS\" styleClass=\"mb-2\">\n            <ng-template pTemplate=\"header\">\n              <span class=\"uppercase\">Statistics</span>\n            </ng-template>\n            <ng-template pTemplate=\"content\">\n              @for (\n                section of statisticsSections();\n                track section;\n                let last = $last\n              ) {\n                <div class=\"section-container\">\n                  @if (section.title) {\n                    <h3 class=\"section-title\">\n                      {{ section.title }}\n                    </h3>\n                  }\n                  <ng-container\n                    *ngComponentOutlet=\"\n                      section.component;\n                      inputs: getSectionInputs(section)\n                    \"\n                  >\n                  </ng-container>\n                </div>\n                @if (!last) {\n                  <p-divider></p-divider>\n                }\n              }\n            </ng-template>\n          </p-accordion-panel>\n        }\n        <!-- Custom sections -->\n        @if (hasCustomSections()) {\n          <p-accordion-panel header=\"CUSTOM\" styleClass=\"mb-2\">\n            <ng-template pTemplate=\"header\">\n              <span class=\"uppercase\">Custom</span>\n            </ng-template>\n            <ng-template pTemplate=\"content\">\n              @for (\n                section of customSections();\n                track section;\n                let last = $last\n              ) {\n                <div class=\"section-container\">\n                  @if (section.title) {\n                    <h3 class=\"section-title\">\n                      {{ section.title }}\n                    </h3>\n                  }\n                  <ng-container\n                    *ngComponentOutlet=\"\n                      section.component;\n                      inputs: getSectionInputs(section)\n                    \"\n                  >\n                  </ng-container>\n                </div>\n                @if (!last) {\n                  <p-divider></p-divider>\n                }\n              }\n            </ng-template>\n          </p-accordion-panel>\n        }\n      </p-accordion>\n    </div>\n  }\n</div>\n","import { CommonModule } from '@angular/common';\nimport {\n  ChangeDetectorRef,\n  Component,\n  computed,\n  effect,\n  inject,\n  input,\n  OnInit,\n  signal,\n} from '@angular/core';\nimport { ReactiveFormsModule, Validators } from '@angular/forms';\nimport { ButtonModule } from 'primeng/button';\nimport { InputTextModule } from 'primeng/inputtext';\nimport { ChipModule } from 'primeng/chip';\n\nimport { EntitySectionBaseComponent } from '../../../components/base/entity-section-base';\nimport {\n  AssetCreateRequest,\n  AssetListItem,\n  AssetTagListItem,\n  AssetUpdateRequest,\n  EntitiesService,\n  IdName,\n} from '../../../../../api';\nimport {\n  hasProperty,\n  isDefined,\n  isEmpty,\n  isNullOrUndefined,\n} from '../../../../../shared/utils';\nimport { takeUntilDestroyed } from '@angular/core/rxjs-interop';\nimport { UtilityService } from '../../../../../core/services/utility.service';\nimport {\n  AssetGroupingTreeItem,\n  createAutocompleteField,\n  createDropdownField,\n  createTextField,\n  createTreeSelectField,\n} from '../../../../../shared/models';\nimport { GridComponent } from '../../../../../shared/components/grid/grid.component';\nimport { DynamicFormComponent } from '../../../../../shared/components/forms/dynamic-form/dynamic-form.component';\nimport {\n  catchError,\n  debounceTime,\n  firstValueFrom,\n  of,\n  Subject,\n  switchMap,\n} from 'rxjs';\nimport { COLORS, SEARCH_DEBOUNCE_TIME } from '../../../../../core/models';\nimport { AssetGroupingService } from '../../../../../shared/services/asset-grouping.service';\n\n@Component({\n  selector: 'app-asset-details-section',\n  imports: [\n    CommonModule,\n    ReactiveFormsModule,\n    ButtonModule,\n    InputTextModule,\n    ChipModule,\n    GridComponent,\n    DynamicFormComponent,\n  ],\n  templateUrl: './asset-details-section.component.html',\n  styleUrl: './asset-details-section.component.scss',\n})\nexport class AssetDetailsSectionComponent\n  extends EntitySectionBaseComponent<AssetListItem | AssetCreateRequest>\n  implements OnInit\n{\n  readonly ownerId = input<string | null>(null);\n  private readonly entitiesService = inject(EntitiesService);\n  private readonly utilityService = inject(UtilityService);\n  private readonly assetGroupingService = inject(AssetGroupingService);\n  private readonly cdr = inject(ChangeDetectorRef);\n  protected readonly selectOptionsLoaded = signal<boolean>(false);\n  assetTypes: { label: string; value: string }[] = [];\n  selectOptions: Record<\n    string,\n    { label: string; value: string }[] | AssetGroupingTreeItem[]\n  > = {};\n  colors = [...COLORS]\n    .sort((a, b) => a.localeCompare(b))\n    .map((color) => ({\n      label: this.utilityService.toTitleCase(color),\n      value: color,\n    }));\n  readonly assetDetails = computed(() => {\n    const assetDetails = this.entity();\n    if (!isDefined(assetDetails)) return [];\n\n    return [\n      {\n        key: 'Name',\n        value: assetDetails.name,\n      },\n      {\n        key: 'Tags',\n        value: !isEmpty(assetDetails.tags)\n          ? assetDetails?.tags?.map((tag) => tag).join(', ')\n          : 'None',\n      },\n      {\n        key: 'Type',\n        value: isDefined(assetDetails.assetType)\n          ? assetDetails.assetType.name\n          : 'Unknown',\n      },\n      {\n        key: 'Color',\n        value: isDefined(assetDetails.color)\n          ? this.utilityService.toTitleCase(assetDetails.color)\n          : 'None',\n      },\n      {\n        key: 'Cost Centre',\n        value: isDefined(assetDetails.costCentre)\n          ? assetDetails.costCentre.name\n          : 'None',\n      },\n      {\n        key: 'Groups',\n        value: !isEmpty(assetDetails.groups)\n          ? assetDetails.groups.map((group) => group.name).join(', ')\n          : '',\n      },\n      {\n        key: 'Asset Tag',\n        value: assetDetails.assetTag ?? 'None',\n      },\n      {\n        key: 'Icon Name',\n        value: assetDetails.mapIconName ?? 'Default',\n      },\n    ];\n  });\n  assetTagsSearchResults = signal<AssetTagListItem[] | undefined>(undefined);\n  private readonly searchSubject = new Subject<string>();\n\n  constructor() {\n    super();\n\n    // Setup initial columns\n    this.columns = [\n      { field: 'key', header: '', transform: 'uppercase' },\n      { field: 'value', header: '' },\n    ];\n\n    // React to entity changes\n    effect(() => {\n      const entity = this.entity();\n      if (entity && !this.createMode()) {\n        this.updateFormFields();\n      }\n    });\n  }\n\n  ngOnInit() {\n    this.setUpAssetTagsSearch();\n    this.loadSelectOptions();\n  }\n\n  private loadSelectOptions() {\n    const asset = this.entity();\n    const ownerIdValue = this.ownerId();\n\n    const effectiveOwnerId = asset?.owner?.id ?? ownerIdValue;\n\n    if (isNullOrUndefined(effectiveOwnerId)) {\n      this.selectOptions = {};\n      this.selectOptionsLoaded.set(true);\n      this.updateFormFields();\n      return;\n    }\n\n    Promise.all([\n      this.assetGroupingService.getAssetTypes(effectiveOwnerId),\n      firstValueFrom(this.entitiesService.listCostCentres(effectiveOwnerId)),\n      this.assetGroupingService.getAssetGroupsAsTree(effectiveOwnerId),\n    ])\n      .then(([assetTypes, costCentres, assetGroups]) => {\n        this.selectOptions = {\n          assetTypes: assetTypes\n            .map((item) => ({\n              label: item.name ?? '',\n              value: item.id,\n            }))\n            .sort((a, b) => a.label.localeCompare(b.label)),\n          costCentres: costCentres.items\n            .map((costCentre) => ({\n              label: costCentre.name ?? '',\n              value: costCentre.id,\n            }))\n            .sort((a, b) => a.label.localeCompare(b.label)),\n          groups: assetGroups,\n        };\n\n        this.selectOptionsLoaded.set(true);\n        this.updateFormFields();\n      })\n      .catch(() => {\n        this.selectOptionsLoaded.set(false);\n      });\n  }\n\n  private setUpAssetTagsSearch(): void {\n    this.searchSubject\n      .pipe(\n        debounceTime(SEARCH_DEBOUNCE_TIME),\n        takeUntilDestroyed(this.destroyRef),\n        switchMap((searchTerm) => {\n          const owner = this.entity()?.owner;\n\n          if (isNullOrUndefined(owner?.id)) {\n            return of({ items: [] });\n          }\n\n          const filters = {\n            state: { value: 'active', operator: '=' },\n            name: { value: `*${searchTerm}*`, operator: '=' },\n          };\n          const rqlFilter = this.utilityService.constructRqlFilter(filters);\n\n          return this.entitiesService\n            .listAssetTags(owner.id, 0, 10, 'name', rqlFilter)\n            .pipe(\n              catchError(() => {\n                return of({ items: [] });\n              }),\n            );\n        }),\n      )\n      .subscribe({\n        next: (data) => {\n          if (isDefined(data) && hasProperty(data, 'items')) {\n            this.assetTagsSearchResults.set(\n              isNullOrUndefined(data.items) ? [] : data.items,\n            );\n          }\n        },\n        error: (error) => {\n          console.error('Error searching asset tags:', error);\n          this.assetTagsSearchResults.set([]);\n        },\n      });\n  }\n\n  protected override updateFormFields(): void {\n    const asset = this.entity();\n    this.formFields = [\n      createTextField('name', 'Name', asset?.name, {\n        name: 'name',\n        validations: [\n          {\n            name: 'required',\n            validator: Validators.required,\n            message: 'Name is required',\n          },\n        ],\n      }),\n      createDropdownField(\n        'mapIconName',\n        'Icon Name',\n        [\n          { label: 'Default', value: 'Default' },\n          { label: 'Airplane', value: 'Airplane' },\n          { label: 'Ambulance (small)', value: 'Ambulance (small)' },\n          { label: 'Ambulance', value: 'Ambulance' },\n          { label: 'Boat', value: 'Boat' },\n          { label: 'Bus', value: 'Bus' },\n          { label: 'Car', value: 'Car' },\n          { label: 'Cement Mixer', value: 'Cement Mixer' },\n          { label: 'Container', value: 'Container' },\n          { label: 'Dump Truck', value: 'Dump Truck' },\n          { label: 'Excavator', value: 'Excavator' },\n          { label: 'Haul Truck', value: 'Haul Truck' },\n          { label: 'Lawn Mower', value: 'Lawn Mower' },\n          { label: 'Man', value: 'Man' },\n          { label: 'Motorcycle', value: 'Motorcycle' },\n          { label: 'Parcel', value: 'Parcel' },\n          { label: 'Pickup Truck', value: 'Pickup Truck' },\n          { label: 'School Bus (small)', value: 'School Bus (small)' },\n          { label: 'School Bus', value: 'School Bus' },\n          { label: 'Tractor', value: 'Tractor' },\n          { label: 'Trailer', value: 'Trailer' },\n          { label: 'Truck (small)', value: 'Truck (small)' },\n          { label: 'Truck', value: 'Truck' },\n          { label: 'Van (small)', value: 'Van (small)' },\n          { label: 'Van', value: 'Van' },\n        ],\n        asset?.mapIconName ?? 'Default',\n        {\n          validations: [\n            {\n              name: 'required',\n              validator: Validators.required,\n              message: 'Icon name is required',\n            },\n          ],\n          props: {\n            appendTo: 'body',\n          },\n        },\n      ),\n      createAutocompleteField('tags', 'Tags', [], [], () => {}, {\n        layout: 'horizontal',\n        labelWidth: '1/3',\n        name: 'tags',\n        placeholder: 'Enter tags ...',\n        props: {\n          appendTo: 'body',\n          typeahead: false,\n          multiple: true,\n          dropdown: false,\n        },\n      }),\n      createDropdownField(\n        'assetType',\n        'Type',\n        (this.selectOptions?.['assetTypes'] as {\n          label: string;\n          value: string;\n        }[]) ?? [],\n        asset?.assetType?.id,\n        {\n          layout: 'horizontal',\n          labelWidth: '1/3',\n          name: 'assetType',\n          props: {\n            appendTo: 'body',\n          },\n          validations: [\n            {\n              name: 'required',\n              validator: Validators.required,\n              message: 'Asset type is required',\n            },\n          ],\n        },\n      ),\n      createDropdownField('color', 'Color', this.colors, asset?.color, {\n        layout: 'horizontal',\n        labelWidth: '1/3',\n        name: 'color',\n        props: {\n          appendTo: 'body',\n        },\n        validations: [\n          {\n            name: 'required',\n            validator: Validators.required,\n            message: 'Color is required',\n          },\n        ],\n      }),\n      createDropdownField(\n        'costCentre',\n        'Cost Centre',\n        (this.selectOptions?.['costCentres'] as {\n          label: string;\n          value: string;\n        }[]) ?? [],\n        asset?.costCentre?.id,\n        {\n          layout: 'horizontal',\n          labelWidth: '1/3',\n          name: 'costCentre',\n          props: {\n            appendTo: 'body',\n          },\n          validations: [\n            {\n              name: 'required',\n              validator: Validators.required,\n              message: 'Cost centre is required',\n            },\n          ],\n        },\n      ),\n      createTreeSelectField(\n        'groups',\n        'Groups',\n        this.getSelectedGroupNodes(\n          asset?.groups,\n          this.selectOptions?.['groups'] as AssetGroupingTreeItem[],\n        ),\n        this.selectOptions?.['groups'] ?? [],\n        {\n          layout: 'horizontal',\n          labelWidth: '1/3',\n          name: 'groups',\n          props: {\n            appendTo: 'body',\n            placeholder: 'Select Group',\n            multiple: true,\n            showClear: true,\n            selectionMode: 'checkbox',\n            filter: true,\n          },\n          validations: [\n            {\n              name: 'required',\n              validator: Validators.required,\n              message: 'At least one group is required',\n            },\n          ],\n        },\n      ),\n      createAutocompleteField(\n        'assetTag',\n        'Asset Tag',\n        typeof asset?.assetTag === 'string' ? asset.assetTag : undefined,\n        () => this.assetTagsSearchResults() ?? [],\n        this.searchAssetTag.bind(this),\n        {\n          layout: 'horizontal',\n          labelWidth: '1/3',\n          name: 'assetTag',\n          props: {\n            appendTo: 'body',\n            showClear: true,\n            multiple: false,\n            field: 'name',\n            completeOnFocus: false,\n            typeahead: true,\n            showEmptyMessage: true,\n            emptyMessage: 'No asset tags found',\n          },\n        },\n      ),\n    ];\n    this.cdr.detectChanges();\n  }\n\n  protected override submitChanges(\n    formData: Record<string, string | number>,\n  ): void {\n    const asset = this.entity();\n    if (isNullOrUndefined(asset)) return;\n    this.entitiesService\n      .updateAsset(asset.id, this.transformData(formData))\n      .pipe(takeUntilDestroyed(this.destroyRef))\n      .subscribe({\n        next: () => {\n          this.isFormEditable.set(false);\n          this.isSubmitting.set(false);\n          this.broadcastService.broadcast('entity-updated', {\n            entityType: 'asset',\n            entityId: asset.id,\n          });\n        },\n        error: () => {\n          this.isFormEditable.set(true);\n          this.isSubmitting.set(false);\n        },\n      });\n  }\n\n  protected override onFormValueChange(\n    formData: Record<string, string | number | object | null | undefined>,\n  ): void {\n    const transformedData = this.transformData(formData);\n    // Emit the transformed values\n    this.formValueChange.emit(transformedData);\n  }\n\n  private getSelectedGroupNodes(\n    assetGroups: IdName[] | undefined,\n    treeOptions: AssetGroupingTreeItem[] | undefined,\n  ): AssetGroupingTreeItem[] {\n    if (!assetGroups || !treeOptions) return [];\n\n    const selectedNodes: AssetGroupingTreeItem[] = [];\n\n    // Recursive function to find node by ID in the tree structure\n    const findNodeById = (\n      nodes: AssetGroupingTreeItem[],\n      id: string,\n    ): AssetGroupingTreeItem | undefined => {\n      for (const node of nodes) {\n        if (node.id === id) {\n          return node;\n        }\n        if (node.children && node.children.length > 0) {\n          const found = findNodeById(node.children, id);\n          if (found) return found;\n        }\n      }\n      return undefined;\n    };\n\n    assetGroups.forEach((group) => {\n      const foundNode = findNodeById(treeOptions, group.id);\n      if (foundNode) {\n        selectedNodes.push(foundNode);\n      }\n    });\n\n    return selectedNodes;\n  }\n\n  protected transformData(\n    formData: Record<string, string | number | object | null | undefined>,\n  ): Partial<AssetUpdateRequest | AssetCreateRequest> {\n    const transformedData = { ...formData };\n\n    // Transform assetType ID to IdName object\n    if (\n      isDefined(transformedData['assetType']) &&\n      typeof transformedData['assetType'] === 'string'\n    ) {\n      const assetTypeOption = this.selectOptions?.['assetTypes']?.find(\n        (option) => option.value === transformedData['assetType'],\n      );\n\n      if (assetTypeOption) {\n        transformedData['assetType'] = {\n          id: assetTypeOption.value,\n          name: assetTypeOption.label,\n        };\n      }\n    }\n\n    // Transform costCentre ID to IdName object\n    if (\n      isDefined(transformedData['costCentre']) &&\n      typeof transformedData['costCentre'] === 'string'\n    ) {\n      const costCentreOption = this.selectOptions?.['costCentres']?.find(\n        (option) => option.value === transformedData['costCentre'],\n      );\n\n      if (costCentreOption) {\n        transformedData['costCentre'] = {\n          id: costCentreOption.value,\n          name: costCentreOption.label,\n        };\n      }\n    }\n\n    // Transform groups array - handle both flat and nested tree structures\n    if (Array.isArray(transformedData['groups'])) {\n      // Recursive function to find group in tree structure\n      const findGroupInTree = (\n        nodes: AssetGroupingTreeItem[],\n        targetId: string,\n      ): AssetGroupingTreeItem | undefined => {\n        for (const node of nodes) {\n          if (node.id === targetId) {\n            return node;\n          }\n          if (node.children && node.children.length > 0) {\n            const found = findGroupInTree(node.children, targetId);\n            if (found) return found;\n          }\n        }\n        return undefined;\n      };\n\n      transformedData['groups'] = transformedData['groups']\n        .map((group) => {\n          // Handle case where group is already a TreeNode object\n          const groupId =\n            typeof group === 'object' && isDefined(group.id) ? group.id : group;\n\n          const groupOption = findGroupInTree(\n            (this.selectOptions?.['groups'] as AssetGroupingTreeItem[]) ?? [],\n            groupId,\n          );\n\n          return groupOption\n            ? {\n                id: groupOption.id,\n                name: groupOption.label,\n              }\n            : undefined;\n        })\n        .filter((group): group is { id: string; name: string } =>\n          isDefined(group),\n        );\n    }\n\n    if (transformedData['assetTag'] === '') {\n      transformedData['assetTag'] = null;\n    }\n\n    return transformedData as AssetUpdateRequest | AssetCreateRequest;\n  }\n\n  searchAssetTag(searchTerm: string) {\n    this.assetTagsSearchResults.set(undefined);\n    this.searchSubject.next(searchTerm);\n  }\n}\n","<div class=\"card pt-2\">\n  <div class=\"mb-4 p-2 flex justify-start items-center\">\n    <svg\n      class=\"custom-icon-svg w-[2.5rem] h-[2.5rem]\"\n      [ngClass]=\"{ 'icon-primary': isFormEditable() }\"\n      [attr.aria-label]=\"'Truck moving icon'\"\n    >\n      <use [attr.href]=\"'assets/sprites/sprite.svg#truck-moving-solid'\"></use>\n    </svg>\n\n    <div class=\"pl-6 flex-1\">\n      <div class=\"flex justify-between items-center\">\n        <h2 class=\"text-xl font-semibold m-0\">Asset Details</h2>\n        @if (!isFormEditable() && !createMode()) {\n          <div class=\"icon-light\">\n            <span\n              class=\"pi pi-pen-to-square action hover !text-2xl\"\n              [attr.aria-label]=\"'Edit asset details'\"\n              (click)=\"onEdit()\"\n              (keydown.enter)=\"onEdit()\"\n            ></span>\n          </div>\n        }\n      </div>\n      <span>The following information is required to identify your asset.</span>\n    </div>\n  </div>\n\n  @if (isFormEditable() || (createMode() && formFields.length)) {\n    <app-dynamic-form\n      [fields]=\"formFields\"\n      [actions]=\"actions\"\n      [hideActions]=\"createMode()\"\n      (formSubmit)=\"onSubmit($event)\"\n      (formValidityChange)=\"onFormValidityChange($event)\"\n      (formValueChange)=\"onFormValueChange($event)\"\n    >\n    </app-dynamic-form>\n  }\n\n  @if (!isFormEditable() && !createMode()) {\n    <app-grid\n      [data]=\"assetDetails()\"\n      [columns]=\"columns\"\n      [showGridLines]=\"false\"\n      [hideHeader]=\"true\"\n      tableStyleClass=\"info-display !w-auto\"\n    ></app-grid>\n  }\n</div>\n","import { Injectable, inject } from '@angular/core';\nimport { RequestCacheService } from './request-cache.service';\nimport { AssetGroupingService } from './asset-grouping.service';\nimport { BroadcastEventMessageService } from '../../features/administration/services/broadcast-event-messages.service';\n\nexport interface EntityUpdateEvent {\n  entityType: string;\n  operation?: 'create' | 'update' | 'delete';\n  entityId?: string;\n  clientId?: string;\n}\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class CacheInvalidationService {\n  private readonly requestCache = inject(RequestCacheService);\n  private readonly assetGroupingService = inject(AssetGroupingService);\n  private readonly broadcastService = inject(BroadcastEventMessageService);\n\n  constructor() {\n    // Listen for entity updates and clear relevant caches\n    this.broadcastService.on('entity-updated').subscribe((event) => {\n      this.handleEntityUpdate(event);\n    });\n  }\n\n  private handleEntityUpdate(event: EntityUpdateEvent): void {\n    const { entityType, operation } = event;\n\n    switch (entityType) {\n      case 'assetCategory':\n        this.clearAssetCategoryCaches();\n        break;\n      case 'assetGroup':\n        this.clearAssetGroupCaches();\n        break;\n      case 'costCentre':\n        this.clearCostCentreCaches();\n        break;\n      case 'asset':\n        // When assets are created/updated, categories might be affected\n        if (operation === 'create' || operation === 'update') {\n          this.clearAssetCategoryCaches();\n        }\n        break;\n    }\n  }\n\n  /**\n   * Clear asset category caches\n   */\n  clearAssetCategoryCaches(): void {\n    this.requestCache.clearCacheByPattern('assetCategories-');\n    this.assetGroupingService.clear();\n  }\n\n  /**\n   * Clear asset group caches\n   */\n  clearAssetGroupCaches(): void {\n    this.requestCache.clearCacheByPattern('assetGroups-');\n    this.assetGroupingService.clear();\n  }\n\n  /**\n   * Clear cost centre caches\n   */\n  clearCostCentreCaches(): void {\n    this.requestCache.clearCacheByPattern('costCentres-');\n    this.assetGroupingService.clear();\n  }\n\n  /**\n   * Clear all caches for a specific client\n   */\n  clearClientCaches(clientId: string): void {\n    this.requestCache.clearClientCache(clientId);\n    this.assetGroupingService.clear();\n  }\n\n  /**\n   * Clear all caches (useful when user changes context)\n   */\n  clearAllCaches(): void {\n    this.requestCache.clearCache();\n    this.assetGroupingService.clear();\n  }\n\n  /**\n   * Force refresh of asset categories for a specific client\n   */\n  refreshAssetCategories(clientId: string): void {\n    this.requestCache.clearCacheByPattern(`assetCategories-${clientId}`);\n  }\n}\n","import {\n  ChangeDetectorRef,\n  Component,\n  computed,\n  effect,\n  inject,\n  input,\n  OnInit,\n  signal,\n} from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { takeUntilDestroyed } from '@angular/core/rxjs-interop';\nimport { ReactiveFormsModule } from '@angular/forms';\n\nimport { ButtonModule } from 'primeng/button';\n\nimport {\n  AssetCreateRequest,\n  AssetListItem,\n  EntitiesService,\n} from '../../../../../api';\nimport {\n  AssetGroupingItem,\n  createDropdownField,\n} from '../../../../../shared/models';\nimport {\n  isDefined,\n  isEmpty,\n  isNullOrUndefined,\n  isString,\n} from '../../../../../shared/utils';\nimport { EntitySectionBaseComponent } from '../../base';\nimport { DynamicFormComponent } from '../../../../../shared/components/forms/dynamic-form/dynamic-form.component';\nimport { GridComponent } from '../../../../../shared/components/grid/grid.component';\nimport { AssetGroupingService } from '../../../../../shared/services/asset-grouping.service';\nimport { CacheInvalidationService } from '../../../../../shared/services/cache-invalidation.service';\nimport { DEFAULT_SYSTEM_ID } from '../../../../../core/models';\n\n@Component({\n  selector: 'app-asset-categories-section',\n  imports: [\n    CommonModule,\n    ReactiveFormsModule,\n    ButtonModule,\n    GridComponent,\n    DynamicFormComponent,\n  ],\n  templateUrl: './asset-categories-section.component.html',\n  styleUrl: './asset-categories-section.component.scss',\n})\nexport class AssetCategoriesSectionComponent\n  extends EntitySectionBaseComponent<AssetListItem | AssetCreateRequest>\n  implements OnInit\n{\n  readonly ownerId = input<string | null>(null);\n  private readonly entitiesService = inject(EntitiesService);\n  private readonly assetGroupingService = inject(AssetGroupingService);\n  private readonly cacheInvalidationService = inject(CacheInvalidationService);\n  private readonly cdr = inject(ChangeDetectorRef);\n  protected readonly selectOptionsLoaded = signal<boolean>(false);\n  selectOptions: Record<string, { label: string; value: string }[]> = {};\n\n  readonly assetDetails = computed(() => {\n    const assetDetails = this.entity();\n    if (!isDefined(assetDetails)) return [];\n\n    return [\n      {\n        key: 'Department',\n        value: isEmpty(assetDetails.categories)\n          ? 'None'\n          : (assetDetails?.categories ?? [])\n              .filter((category) => isDefined(category))\n              .map((category) => category?.name)\n              .join(', '),\n      },\n    ];\n  });\n  assetCategories: AssetGroupingItem[] = [];\n\n  constructor() {\n    super();\n\n    // Setup initial columns\n    this.columns = [\n      { field: 'key', header: '', transform: 'uppercase' },\n      { field: 'value', header: '' },\n    ];\n\n    // React to entity changes\n    effect(() => {\n      if (this.selectOptionsLoaded()) {\n        this.updateFormFields();\n      }\n    });\n  }\n\n  ngOnInit() {\n    this.loadSelectOptions();\n  }\n\n  private loadSelectOptions() {\n    const asset = this.entity();\n    const ownerIdValue = this.ownerId();\n\n    const effectiveOwnerId = asset?.owner?.id ?? ownerIdValue;\n    if (!isDefined(effectiveOwnerId)) {\n      this.selectOptions = {};\n      this.selectOptionsLoaded.set(true);\n      return;\n    }\n\n    // Check if we need to refresh cache (e.g., if this is a create mode)\n    const shouldRefreshCache = this.createMode();\n    if (shouldRefreshCache) {\n      this.cacheInvalidationService.refreshAssetCategories(effectiveOwnerId);\n    }\n\n    this.assetGroupingService\n      .getAssetCategories(effectiveOwnerId)\n      .then((assetCategories) => {\n        this.assetCategories = assetCategories;\n        this.selectOptions = {\n          assetCategories: assetCategories\n            .map((item) => ({\n              label: item.name ?? '',\n              value: item.id,\n            }))\n            .sort((a, b) => a.label.localeCompare(b.label)),\n        };\n\n        this.selectOptionsLoaded.set(true);\n      })\n      .catch(() => {\n        this.selectOptions = {};\n        this.selectOptionsLoaded.set(true);\n      });\n  }\n\n  protected override updateFormFields(): void {\n    const assetDetails = this.entity();\n    this.formFields = [];\n    this.assetCategories\n      .filter((category) => category?.parent === DEFAULT_SYSTEM_ID)\n      .forEach((category) => {\n        const items = this.assetCategories.filter(\n          (cat) =>\n            cat.index === category.index && cat.parent !== DEFAULT_SYSTEM_ID,\n        );\n        const options = items.map((item) => ({\n          label: item.name ?? '',\n          value: item.id,\n        }));\n        this.formFields.push(\n          createDropdownField(\n            `category${category.index}`,\n            category.name,\n            options,\n            assetDetails?.categories && isDefined(category.index)\n              ? (assetDetails?.categories[category.index]?.id ?? '')\n              : '',\n            {\n              layout: 'horizontal',\n              labelWidth: '1/3',\n              name: `category${category.index}`,\n              props: {\n                appendTo: 'body',\n              },\n            },\n          ),\n        );\n      });\n    this.cdr.detectChanges();\n  }\n\n  protected override submitChanges(\n    formData: Record<string, string | number>,\n  ): void {\n    const asset = this.entity();\n    if (isNullOrUndefined(asset)) return;\n    this.entitiesService\n      .updateAsset(asset.id, this.transformFormData(formData))\n      .pipe(takeUntilDestroyed(this.destroyRef))\n      .subscribe({\n        next: () => {\n          this.isFormEditable.set(false);\n          this.isSubmitting.set(false);\n          this.broadcastService.broadcast('entity-updated', {\n            entityType: 'asset',\n            operation: 'update',\n            entityId: asset.id,\n          });\n        },\n        error: () => {\n          this.isFormEditable.set(true);\n          this.isSubmitting.set(false);\n        },\n      });\n  }\n\n  protected override onFormValueChange(\n    formData: Record<string, unknown>,\n  ): void {\n    const transformedData = this.transformFormData(formData);\n\n    // Emit the transformed values\n    this.formValueChange.emit(transformedData);\n  }\n\n  // Iterate through form fields by their names (e.g., 'category0', 'category1')\n  override transformFormData(formData: Record<string, unknown>) {\n    const transformedData = {\n      categories: [] as { id: string; name: string }[],\n    };\n\n    // Get parent categories (used for labels in updateFormFields)\n    const parentCategories = this.assetCategories.filter(\n      (category) => category?.parent === DEFAULT_SYSTEM_ID,\n    );\n\n    parentCategories.forEach((parentCategory) => {\n      const fieldName = `category${parentCategory.index}`;\n      const value = formData[fieldName];\n\n      let category: AssetGroupingItem | undefined;\n\n      if (isDefined(value) && isString(value)) {\n        // Find the category by selected value\n        category = this.assetCategories.find((cat) => cat.id === value);\n      }\n\n      // If no value, use the parent category itself\n      category ??= parentCategory;\n\n      if (isDefined(category)) {\n        transformedData.categories[parentCategory.index ?? 0] = {\n          id: category.id,\n          name: category.name,\n        };\n      }\n    });\n\n    return transformedData;\n  }\n}\n","<div class=\"card pt-2\">\n  <div class=\"mb-4 p-2 flex justify-start items-center\">\n    <svg\n      class=\"custom-icon-svg w-[2.5rem] h-[2.5rem]\"\n      [ngClass]=\"{ 'icon-primary': isFormEditable() }\"\n      [attr.aria-label]=\"'Site map icon'\"\n    >\n      <use [attr.href]=\"'assets/sprites/sprite.svg#sitemap-solid'\"></use>\n    </svg>\n\n    <div class=\"pl-6 flex-1\">\n      <div class=\"flex justify-between items-center\">\n        <h2 class=\"text-xl font-semibold m-0\">Categories</h2>\n        @if (!isFormEditable() && !createMode()) {\n          <div class=\"icon-light\">\n            <span\n              class=\"pi pi-pen-to-square action hover !text-2xl\"\n              [attr.aria-label]=\"'Edit asset details'\"\n              (click)=\"onEdit()\"\n              (keydown.enter)=\"onEdit()\"\n            ></span>\n          </div>\n        }\n      </div>\n      <span>Assets can belong to a number of user defined categories.</span>\n    </div>\n  </div>\n  @if (isFormEditable() || createMode()) {\n    <app-dynamic-form\n      [fields]=\"formFields\"\n      [actions]=\"actions\"\n      [hideActions]=\"createMode()\"\n      (formSubmit)=\"onSubmit($event)\"\n      (formValidityChange)=\"onFormValidityChange($event)\"\n      (formValueChange)=\"onFormValueChange($event)\"\n    >\n    </app-dynamic-form>\n  }\n\n  @if (!isFormEditable() && !createMode()) {\n    <app-grid\n      [data]=\"assetDetails()\"\n      [columns]=\"columns\"\n      [showGridLines]=\"false\"\n      [hideHeader]=\"true\"\n      tableStyleClass=\"info-display !w-auto\"\n    ></app-grid>\n  }\n</div>\n","import {\n  AfterViewInit,\n  Component,\n  computed,\n  effect,\n  inject,\n  signal,\n  TemplateRef,\n  ViewChild,\n} from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { takeUntilDestroyed } from '@angular/core/rxjs-interop';\nimport { FormGroup, ReactiveFormsModule, Validators } from '@angular/forms';\n\nimport { ButtonModule } from 'primeng/button';\nimport { DataViewModule } from 'primeng/dataview';\n\nimport { AssetResponse, Contact, EntitiesService } from '../../../../../api';\nimport { UtilityService } from '../../../../../core/services/utility.service';\nimport {\n  createTextField,\n  createDropdownField,\n  FormAction,\n} from '../../../../../shared/models';\nimport {\n  isDefined,\n  isNullOrUndefined,\n  mobileValidator,\n  phoneValidator,\n} from '../../../../../shared/utils';\nimport { EntitySectionBaseComponent } from '../../base';\nimport { DynamicFormModalComponent } from '../../../../../shared/components/forms/dynamic-form-modal/dynamic-form-modal.component';\nimport { PanelModule } from 'primeng/panel';\nimport { DividerModule } from 'primeng/divider';\n\n@Component({\n  selector: 'app-asset-contacts-section',\n  imports: [\n    CommonModule,\n    ReactiveFormsModule,\n    ButtonModule,\n    DynamicFormModalComponent,\n    DataViewModule,\n    PanelModule,\n    DividerModule,\n  ],\n  templateUrl: './asset-contacts-section.component.html',\n  styleUrl: './asset-contacts-section.component.scss',\n})\nexport class AssetContactsSectionComponent\n  extends EntitySectionBaseComponent<AssetResponse>\n  implements AfterViewInit\n{\n  @ViewChild('iconTemplate', { static: true })\n  iconTemplate: TemplateRef<unknown> | undefined;\n  private readonly entitiesService = inject(EntitiesService);\n  readonly utilityService = inject(UtilityService);\n  protected readonly selectOptionsLoaded = signal<boolean>(false);\n\n  readonly assetContacts = computed(() => {\n    const assetContacts = this.entity()?.contacts;\n    if (!isDefined(assetContacts)) return [];\n\n    return assetContacts.flatMap((contact) => {\n      return [\n        { key: contact.type, value: contact.name },\n        {\n          key: 'mobile',\n          value: contact.phoneMobile,\n          icon: 'pi pi-mobile',\n        },\n      ];\n    });\n  });\n\n  // State management\n  contacts = signal<Contact[]>([]);\n  private originalContacts: Contact[] = []; // Backup for reverting changes - will be reassigned in onEnterEditMode\n  showModal = signal<boolean>(false);\n  editingContact = signal<Contact | null>(null);\n  editingContactIndex = signal<number>(-1);\n  modalHeader = computed(() =>\n    this.editingContact() ? 'Edit Contact' : 'Add Contact',\n  );\n\n  contactTypes = [\n    'owner',\n    'emergency',\n    'administrative',\n    'technical',\n    'operational',\n    'management',\n  ];\n\n  // Modal form actions\n  override readonly actions: FormAction[] = [\n    {\n      label: 'Cancel',\n      action: () => {\n        this.closeModal();\n      },\n      severity: 'secondary',\n    },\n    {\n      label: 'OK',\n      action: (formData: FormGroup) => {\n        this.saveContact(formData);\n      },\n      severity: 'primary',\n      disabled: (form?: FormGroup) => {\n        if (isNullOrUndefined(form)) return true;\n        return form.invalid;\n      },\n    },\n  ];\n\n  constructor() {\n    super();\n\n    // React to entity changes\n    effect(() => {\n      const assetContacts = this.entity()?.contacts;\n      if (assetContacts) {\n        this.contacts.set([...assetContacts]);\n        this.updateFormFields();\n      }\n    });\n  }\n\n  /**\n   * Override onEnterEditMode to backup current contacts\n   */\n  protected override onEnterEditMode(): void {\n    super.onEnterEditMode();\n    // Backup contacts when entering edit mode\n    this.originalContacts = [...this.contacts()];\n  }\n\n  /**\n   * Override cancelEdit to restore original contacts\n   */\n  protected override cancelEdit(): void {\n    // Restore original contacts\n    this.contacts.set([...this.originalContacts]);\n    super.cancelEdit();\n  }\n\n  override ngAfterViewInit(): void {\n    super.ngAfterViewInit();\n    this.columns = [\n      {\n        field: 'key',\n        header: '',\n        transform: 'uppercase',\n        cellTemplate: this.iconTemplate,\n      },\n      { field: 'value', header: '' },\n    ];\n  }\n\n  protected override updateFormFields(): void {\n    const editingContact = this.editingContact();\n\n    this.formFields = [\n      createTextField('id', 'ID', editingContact?.id ?? '', {\n        name: 'id',\n        hidden: true,\n      }),\n      createTextField('name', 'Name', editingContact?.name ?? '', {\n        name: 'name',\n        validations: [\n          {\n            name: 'required',\n            validator: Validators.required,\n            message: 'Name is required',\n          },\n        ],\n      }),\n      createDropdownField(\n        'type',\n        'Type',\n        this.contactTypes.map((type) => ({\n          label: this.utilityService.toTitleCase(type),\n          value: type,\n        })),\n        editingContact?.type ?? 'owner',\n        {\n          name: 'type',\n          props: {\n            appendTo: 'body',\n          },\n          validations: [\n            {\n              name: 'required',\n              validator: Validators.required,\n              message: 'Type is required',\n            },\n          ],\n        },\n      ),\n      createTextField(\n        'emailAddress',\n        'Email',\n        editingContact?.emailAddress ?? '',\n        {\n          name: 'emailAddress',\n          validations: [\n            {\n              name: 'email',\n              validator: Validators.email,\n              message: 'Invalid email format',\n            },\n          ],\n        },\n      ),\n      createTextField(\n        'phoneMobile',\n        'Mobile',\n        editingContact?.phoneMobile ?? '',\n        {\n          name: 'phoneMobile',\n          validations: [\n            {\n              name: 'mobile',\n              validator: mobileValidator(),\n              message: 'Invalid mobile number (10-15 digits required)',\n            },\n          ],\n        },\n      ),\n      createTextField(\n        'phoneOffice',\n        'Phone',\n        editingContact?.phoneOffice ?? '',\n        {\n          name: 'phoneOffice',\n          validations: [\n            {\n              name: 'phone',\n              validator: phoneValidator(),\n              message: 'Invalid phone number (7-15 digits required)',\n            },\n          ],\n        },\n      ),\n      createTextField('notes', 'Notes', editingContact?.notes ?? '', {\n        name: 'notes',\n      }),\n    ];\n  }\n\n  /**\n   * Open modal to add a new contact\n   */\n  addContact(): void {\n    this.editingContact.set(null);\n    this.editingContactIndex.set(-1);\n    this.updateFormFields();\n    this.showModal.set(true);\n  }\n\n  /**\n   * Open modal to edit an existing contact\n   */\n  editContact(contact: Contact, index: number): void {\n    this.editingContact.set({ ...contact });\n    this.editingContactIndex.set(index);\n    this.updateFormFields();\n    this.showModal.set(true);\n  }\n\n  /**\n   * Delete a contact\n   */\n  deleteContact(index: number): void {\n    const currentContacts = [...this.contacts()];\n    currentContacts.splice(index, 1);\n    this.contacts.set(currentContacts);\n    this.markFormAsDirty();\n  }\n\n  /**\n   * Save contact (add or edit)\n   */\n  saveContact(formGroup: FormGroup): void {\n    if (formGroup.invalid) return;\n\n    const formValue = formGroup.value as Contact;\n    const currentContacts = [...this.contacts()];\n    const index = this.editingContactIndex();\n\n    if (index >= 0) {\n      // Edit existing contact\n      currentContacts[index] = formValue;\n    } else {\n      // Add new contact - generate ID if not present\n      if (!formValue.id) {\n        formValue.id = crypto.randomUUID();\n      }\n      currentContacts.push(formValue);\n    }\n\n    this.contacts.set(currentContacts);\n    this.markFormAsDirty();\n    this.closeModal();\n  }\n\n  /**\n   * Close the modal\n   */\n  closeModal(): void {\n    this.showModal.set(false);\n    this.editingContact.set(null);\n    this.editingContactIndex.set(-1);\n  }\n\n  /**\n   * Mark the parent form as dirty to enable save button\n   */\n  private markFormAsDirty(): void {\n    this.hasFormChanges = true;\n  }\n\n  /**\n   * Show success message\n   */\n  protected override showSuccessMessage(message: string): void {\n    this.messageService.add({\n      severity: 'success',\n      summary: 'Success',\n      detail: message,\n      life: 3000,\n    });\n  }\n\n  /**\n   * Show error message\n   */\n  protected override showErrorMessage(error: unknown): void {\n    const errorMessage =\n      error instanceof Error ? error.message : 'An error occurred';\n    this.messageService.add({\n      severity: 'error',\n      summary: 'Error',\n      detail: errorMessage,\n      life: 5000,\n    });\n  }\n\n  protected override submitChanges(\n    _formData: Record<string, string | number>,\n  ): void {\n    const asset = this.entity();\n    if (isNullOrUndefined(asset)) return;\n\n    // Prepare the payload with contacts\n    const payload = {\n      contacts: this.contacts(),\n    };\n\n    this.isSubmitting.set(true);\n    this.entitiesService\n      .updateAsset(asset.id, payload)\n      .pipe(takeUntilDestroyed(this.destroyRef))\n      .subscribe({\n        next: () => {\n          this.isFormEditable.set(false);\n          this.isSubmitting.set(false);\n          this.clearUnsavedChanges();\n\n          // Update the original contacts backup after successful save\n          this.originalContacts = [...this.contacts()];\n\n          this.showSuccessMessage('Contacts updated successfully');\n          this.broadcastService.broadcast('entity-updated', {\n            entityType: 'asset',\n            entityId: asset.id,\n          });\n        },\n        error: (error) => {\n          this.isFormEditable.set(true);\n          this.isSubmitting.set(false);\n          this.showErrorMessage(error);\n        },\n      });\n  }\n\n  onClose(): void {\n    this.closeModal();\n  }\n}\n","<div class=\"asset-contacts-section card pt-2\">\n  <!-- Header Section -->\n  <div class=\"section-header mb-4 p-2 flex justify-start items-center\">\n    <span\n      class=\"pi pi-id-card !text-[2.5rem]\"\n      [ngClass]=\"{ 'icon-primary': isFormEditable() }\"\n      [attr.aria-label]=\"'id card icon'\"\n    ></span>\n\n    <div class=\"pl-6 flex-1\">\n      <div class=\"flex justify-between items-center\">\n        <h2 class=\"text-xl font-semibold m-0\">Contacts</h2>\n        @if (!isFormEditable()) {\n          <div class=\"icon-light\">\n            <span\n              class=\"pi pi-pen-to-square action hover !text-2xl\"\n              [attr.aria-label]=\"'Edit asset contacts.'\"\n              (click)=\"onEdit()\"\n              (keydown.enter)=\"onEdit()\"\n            ></span>\n          </div>\n        }\n      </div>\n      <span>Specify contact information specific to this asset.</span>\n    </div>\n  </div>\n\n  <!-- Edit Mode -->\n  @if (isFormEditable()) {\n    <div class=\"edit-contacts p-field p-2\">\n      <div class=\"flex flex-col justify-end w-full\">\n        <!-- No Contacts Placeholder -->\n        @if (contacts().length === 0) {\n          <div class=\"empty-contacts text-center p-4\">\n            <p>No contacts added yet. Click \"Add\" to create a contact.</p>\n          </div>\n        }\n\n        <!-- Contacts List -->\n        @for (contact of contacts(); track contact.id; let i = $index) {\n          <p-panel class=\"mb-3\">\n            <div class=\"grid grid-cols-5 gap-4\">\n              <span class=\"font-semibold mb-2 col-span-1 text-right\">{{\n                utilityService.toTitleCase(contact.type)\n              }}</span>\n              <span class=\"col-span-3\">{{ contact.name }}</span>\n              <div\n                class=\"icon-light col-span-1 text-right flex gap-2 justify-end\"\n              >\n                <button\n                  type=\"button\"\n                  class=\"pi pi-trash action hover !text-xl cursor-pointer bg-transparent border-0 p-0\"\n                  [attr.aria-label]=\"'Delete Contact'\"\n                  (click)=\"deleteContact(i)\"\n                ></button>\n              </div>\n            </div>\n\n            <!-- Mobile Phone -->\n            @if (contact.phoneMobile) {\n              <div class=\"grid grid-cols-5 gap-4 mt-2\">\n                <div class=\"col-span-1 text-right\">\n                  <i class=\"pi pi-mobile !text-[1.25rem]\"></i>\n                </div>\n                <span class=\"col-span-4 text-link\">{{\n                  contact.phoneMobile\n                }}</span>\n              </div>\n            }\n\n            <!-- Email -->\n            @if (contact?.emailAddress) {\n              <div class=\"grid grid-cols-5 gap-4 mt-2\">\n                <div class=\"col-span-1 text-right\">\n                  <i class=\"pi pi-envelope !text-[1.25rem]\"></i>\n                </div>\n                <span class=\"col-span-4 text-link\">{{\n                  contact?.emailAddress\n                }}</span>\n              </div>\n            }\n\n            <!-- Phone -->\n            @if (contact?.phoneOffice) {\n              <div class=\"grid grid-cols-5 gap-4 mt-2\">\n                <div class=\"col-span-1 text-right\">\n                  <i class=\"pi pi-phone !text-[1.25rem]\"></i>\n                </div>\n                <span class=\"col-span-4 text-link\">{{\n                  contact?.phoneOffice\n                }}</span>\n              </div>\n            }\n\n            <!-- Notes -->\n            @if (contact?.notes) {\n              <div class=\"grid grid-cols-5 gap-4 mt-2\">\n                <div class=\"col-span-1 text-right\">\n                  <i class=\"pi pi-comment !text-[1.25rem]\"></i>\n                </div>\n                <span class=\"col-span-4 text-link\">{{ contact?.notes }}</span>\n              </div>\n            }\n          </p-panel>\n        }\n\n        <!-- Add Button -->\n        <div class=\"add-contact-button text-right mt-3 mb-4\">\n          <p-button\n            (onClick)=\"addContact()\"\n            severity=\"secondary\"\n            label=\"Add Contact\"\n            icon=\"pi pi-plus\"\n          />\n        </div>\n\n        <!-- Action Buttons -->\n        <div class=\"action-buttons flex justify-end gap-2 mt-4\">\n          <p-button\n            type=\"button\"\n            label=\"Cancel\"\n            severity=\"secondary\"\n            (onClick)=\"cancelEdit()\"\n          />\n\n          <p-button\n            type=\"button\"\n            label=\"Save\"\n            severity=\"primary\"\n            [loading]=\"isSubmitting()\"\n            [disabled]=\"!hasFormChanges\"\n            (onClick)=\"submitChanges({})\"\n          />\n        </div>\n      </div>\n    </div>\n  }\n  <!-- View Mode -->\n  @else {\n    <div class=\"view-contacts p-2\">\n      @if (contacts().length === 0) {\n        <div class=\"empty-contacts text-center p-4\">\n          <p>No contacts added to this asset.</p>\n        </div>\n      } @else {\n        @for (contact of contacts(); track contact.id; let last = $last) {\n          <div class=\"contact-item p-3\">\n            <!-- Contact Header -->\n            <div class=\"grid grid-cols-5 gap-4\">\n              <div class=\"font-semibold mb-2 col-span-1 text-right\">\n                {{ utilityService.toTitleCase(contact.type) }}\n              </div>\n\n              <span class=\"col-span-4\">{{ contact.name }}</span>\n            </div>\n\n            <!-- Mobile Phone -->\n            @if (contact.phoneMobile) {\n              <div class=\"grid grid-cols-5 gap-4 mt-2\">\n                <div class=\"col-span-1 text-right\">\n                  <i class=\"pi pi-mobile !text-[1.25rem]\"></i>\n                </div>\n                <span class=\"col-span-4 text-link\">{{\n                  contact.phoneMobile\n                }}</span>\n              </div>\n            }\n\n            <!-- Email -->\n            @if (contact.emailAddress) {\n              <div class=\"grid grid-cols-5 gap-4 mt-2\">\n                <div class=\"col-span-1 text-right\">\n                  <i class=\"pi pi-envelope !text-[1.25rem]\"></i>\n                </div>\n                <span class=\"col-span-4 text-link\">{{\n                  contact.emailAddress\n                }}</span>\n              </div>\n            }\n\n            <!-- Phone -->\n            @if (contact.phoneOffice) {\n              <div class=\"grid grid-cols-5 gap-4 mt-2\">\n                <div class=\"col-span-1 text-right\">\n                  <i class=\"pi pi-phone !text-[1.25rem]\"></i>\n                </div>\n                <span class=\"col-span-4 text-link\">{{\n                  contact.phoneOffice\n                }}</span>\n              </div>\n            }\n\n            <!-- Notes -->\n            @if (contact.notes) {\n              <div class=\"grid grid-cols-5 gap-4 mt-2\">\n                <div class=\"col-span-1 text-right\">\n                  <i class=\"pi pi-comment !text-[1.25rem]\"></i>\n                </div>\n                <span class=\"col-span-4\">{{ contact.notes }}</span>\n              </div>\n            }\n\n            @if (!last) {\n              <p-divider styleClass=\"my-3\" />\n            }\n          </div>\n        }\n      }\n    </div>\n  }\n</div>\n\n<!-- Add/Edit Contact Modal -->\n<app-dynamic-form-modal\n  [visible]=\"showModal()\"\n  [header]=\"modalHeader()\"\n  [fields]=\"formFields\"\n  [actions]=\"actions\"\n  [styleClass]=\"'w-[40rem]'\"\n  (modalClose)=\"onClose()\"\n>\n</app-dynamic-form-modal>\n","import {\n  Component,\n  computed,\n  effect,\n  inject,\n  OnInit,\n  signal,\n} from '@angular/core';\nimport { takeUntilDestroyed } from '@angular/core/rxjs-interop';\nimport {\n  combineLatest,\n  catchError,\n  of,\n  Subject,\n  switchMap,\n  debounceTime,\n  Observable,\n} from 'rxjs';\nimport { CommonModule } from '@angular/common';\n\nimport {\n  AssetRatingProfileListItem,\n  AssetRatingProfileListResponse,\n  AssetResponse,\n  AssetUpdateRequest,\n  AssetCreateRequest,\n  EntitiesService,\n} from '../../../../../api';\nimport {\n  createMultiselectField,\n  createDropdownField,\n  createAutocompleteField,\n} from '../../../../../shared/models';\nimport { isDefined, isString } from '../../../../../shared/utils';\nimport { TypedEntitySectionBaseComponent } from '../../base';\nimport {\n  DEFAULT_LIST_SIZE,\n  DEFAULT_SYSTEM_ID,\n} from '../../../../../core/models';\nimport { DynamicFormComponent } from '../../../../../shared/components/forms/dynamic-form/dynamic-form.component';\nimport { GridComponent } from '../../../../../shared/components/grid/grid.component';\n\nimport { UtilityService } from '../../../../../core/services/utility.service';\nimport { isEmpty } from 'lodash';\nimport { FormToRequestMapper } from '../../../utils/form-to-request-mapper';\n\n@Component({\n  selector: 'app-asset-profiles-section',\n  imports: [CommonModule, GridComponent, DynamicFormComponent],\n  templateUrl: './asset-profiles-section.component.html',\n  styleUrl: './asset-profiles-section.component.scss',\n})\nexport class AssetProfilesSectionComponent\n  extends TypedEntitySectionBaseComponent<\n    AssetResponse,\n    AssetUpdateRequest,\n    AssetCreateRequest,\n    AssetResponse\n  >\n  implements OnInit\n{\n  private readonly entitiesService = inject(EntitiesService);\n  private readonly utilityService = inject(UtilityService);\n  protected readonly selectOptionsLoaded = signal<boolean>(false);\n  selectOptions: Record<string, { label: string; value: string }[]> = {};\n\n  readonly assetDetails = computed(() => {\n    const assetDetails = this.entity();\n    if (!isDefined(assetDetails)) return [];\n\n    return [\n      {\n        key: 'Asset Rating',\n        value: assetDetails.ratingProfile?.name ?? 'None',\n      },\n      {\n        key: 'Asset State',\n        value: !isEmpty(assetDetails.assetStateProfiles)\n          ? assetDetails.assetStateProfiles\n              ?.map((state) => state.name)\n              .join(', ')\n          : 'None',\n      },\n      {\n        key: 'Road Profile',\n        value: assetDetails.roadProfile?.name ?? 'None',\n      },\n      {\n        key: 'Geo Lock Profile',\n        value: assetDetails.geoLockProfile?.name ?? 'None',\n      },\n    ];\n  });\n  private readonly searchAssetRatingSubject = new Subject<string>();\n  private readonly assetRatingSuggestions = signal<\n    AssetRatingProfileListItem[]\n  >([]);\n  private requestMapper?: FormToRequestMapper<AssetUpdateRequest>;\n\n  constructor() {\n    super();\n\n    // Setup initial columns\n    this.columns = [\n      { field: 'key', header: '', transform: 'uppercase' },\n      { field: 'value', header: '' },\n    ];\n\n    // React to entity changes\n    effect(() => {\n      const assetDetails = this.entity();\n      if (assetDetails && this.selectOptionsLoaded()) {\n        this.initializeRequestMapper();\n        this.updateFormFields();\n      }\n    });\n  }\n\n  ngOnInit() {\n    this.loadSelectOptions();\n    this.setupSearchAssetRating();\n  }\n\n  private loadSelectOptions() {\n    const asset = this.entity();\n    if (!isDefined(asset) || !isString(asset.id)) {\n      this.selectOptions = {};\n      this.selectOptionsLoaded.set(true);\n      return;\n    }\n\n    combineLatest([\n      this.entitiesService.listGeoLockProfiles(\n        asset.owner.id,\n        true,\n        0,\n        100,\n        'name',\n        'state=active',\n      ),\n      this.entitiesService.listRoadProfiles(\n        asset.owner.id,\n        true,\n        0,\n        100,\n        'name',\n        'state=active',\n      ),\n      this.entitiesService.listAssetStateProfiles(asset.owner.id),\n    ])\n      .pipe(\n        takeUntilDestroyed(this.destroyRef),\n        catchError(() => {\n          return of([{ items: [] }, { items: [] }, { items: [] }]);\n        }),\n      )\n      .subscribe(([geoLockProfiles, roadProfiles, assetStateProfiles]) => {\n        const noneOption = { label: 'None', value: DEFAULT_SYSTEM_ID };\n\n        this.selectOptions = {\n          geoLockProfiles: [\n            noneOption,\n            ...geoLockProfiles.items\n              .map((item) => ({\n                label: item.name ?? '',\n                value: item.id,\n              }))\n              .sort((a, b) => a.label.localeCompare(b.label)),\n          ],\n          roadProfiles: [\n            noneOption,\n            ...roadProfiles.items\n              .map((item) => ({\n                label: item.name ?? '',\n                value: item.id,\n              }))\n              .sort((a, b) => a.label.localeCompare(b.label)),\n          ],\n          assetStateProfiles: assetStateProfiles.items\n            .map((item) => ({\n              label: item.name ?? '',\n              value: item.id,\n            }))\n            .sort((a, b) => a.label.localeCompare(b.label)),\n        };\n\n        this.selectOptionsLoaded.set(true);\n      });\n  }\n\n  private setupSearchAssetRating() {\n    this.searchAssetRatingSubject\n      .pipe(\n        debounceTime(300),\n        takeUntilDestroyed(this.destroyRef),\n        switchMap((searchTerm) => {\n          if (searchTerm === null || searchTerm === undefined) {\n            return of({\n              count: 0,\n              offset: 0,\n              limit: DEFAULT_LIST_SIZE,\n              items: [],\n            } as AssetRatingProfileListResponse);\n          }\n\n          const filters = {\n            state: { value: 'active', operator: '=' },\n            name: { value: `*${searchTerm}*`, operator: '=' },\n          };\n          const rqlFilter = this.utilityService.constructRqlFilter(filters);\n\n          return this.entitiesService.listAssetRatingProfiles(\n            this.entity()?.owner.id ?? '',\n            0,\n            10,\n            'name',\n            rqlFilter,\n          );\n        }),\n      )\n      .subscribe((response: AssetRatingProfileListResponse) => {\n        this.assetRatingSuggestions.set(response.items);\n      });\n  }\n\n  private searchAssetRating(searchTerm: string) {\n    if (searchTerm === null || searchTerm === undefined) {\n      this.assetRatingSuggestions.set([]);\n      return;\n    }\n\n    this.searchAssetRatingSubject.next(searchTerm);\n  }\n\n  private initializeRequestMapper(): void {\n    this.requestMapper = new FormToRequestMapper<AssetUpdateRequest>({\n      ratingProfile: {\n        requestProperty: 'ratingProfile',\n        transform: (value) => {\n          const profile = value as AssetRatingProfileListItem;\n          return {\n            id: profile.id,\n            name: profile.name,\n          };\n        },\n      },\n      assetStateProfiles: {\n        requestProperty: 'assetStateProfiles',\n        transform: (value) => {\n          const profiles = (value as AssetRatingProfileListItem[]).map(\n            (profile) => {\n              const item = this.selectOptions?.['assetStateProfiles']?.find(\n                (item) => item.value === profile.id,\n              );\n              return {\n                id: item?.value,\n                name: item?.label,\n              };\n            },\n          );\n          return profiles;\n        },\n      },\n      roadProfile: {\n        requestProperty: 'roadProfile',\n        transform: (value) => {\n          const item = this.selectOptions?.['roadProfiles']?.find(\n            (item) => item.value === value,\n          );\n          return {\n            id: item?.value,\n            name: item?.label,\n          };\n        },\n      },\n      geoLockProfile: {\n        requestProperty: 'geoLockProfile',\n        transform: (value) => {\n          const item = this.selectOptions?.['geoLockProfiles']?.find(\n            (item) => item.value === value,\n          );\n          return {\n            id: item?.value,\n            name: item?.label,\n          };\n        },\n      },\n    });\n  }\n\n  protected override updateFormFields(): void {\n    const asset = this.entity();\n    this.formFields = [\n      createAutocompleteField(\n        'ratingProfile',\n        'Asset Rating',\n        asset?.ratingProfile?.name,\n        () => this.assetRatingSuggestions(),\n        this.searchAssetRating.bind(this),\n        {\n          layout: 'horizontal',\n          labelWidth: '1/3',\n          name: 'ratingProfile',\n          props: {\n            appendTo: 'body',\n            showClear: true,\n            multiple: false,\n            field: 'name',\n            completeOnFocus: false,\n            typeahead: true,\n            showEmptyMessage: true,\n            forceSelection: true,\n          },\n        },\n      ),\n      createMultiselectField(\n        'assetStateProfiles',\n        'Asset State',\n        asset?.assetStateProfiles ?? [],\n        this.selectOptions?.['assetStateProfiles'] ?? [],\n        {\n          layout: 'horizontal',\n          labelWidth: '1/3',\n          name: 'assetStateProfiles',\n          props: {\n            appendTo: 'body',\n            multiple: true,\n            showClear: true,\n          },\n        },\n      ),\n      createDropdownField(\n        'roadProfile',\n        'Road Profile',\n        this.selectOptions?.['roadProfiles'] ?? [],\n        asset?.roadProfile?.id,\n        {\n          layout: 'horizontal',\n          labelWidth: '1/3',\n          name: 'roadProfile',\n          props: {\n            appendTo: 'body',\n          },\n        },\n      ),\n      createDropdownField(\n        'geoLockProfile',\n        'Geo Lock Profile',\n        this.selectOptions?.['geoLockProfiles'] ?? [],\n        asset?.geoLockProfile?.id,\n        {\n          layout: 'horizontal',\n          labelWidth: '1/3',\n          name: 'geoLockProfile',\n          props: {\n            appendTo: 'body',\n          },\n        },\n      ),\n    ];\n  }\n\n  protected override getUpdateMethod(): (\n    id: string,\n    data: AssetUpdateRequest,\n  ) => Observable<AssetResponse> {\n    return (id, data) => this.entitiesService.updateAsset(id, data);\n  }\n\n  protected override transformFormData(\n    formData: Record<string, unknown> | Record<string, string | number>[],\n  ): AssetUpdateRequest {\n    if (!this.requestMapper) {\n      throw new Error('Request mapper not initialized');\n    }\n\n    try {\n      // Handle both possible input types\n      const normalizedFormData = Array.isArray(formData)\n        ? formData.reduce((acc, item) => ({ ...acc, ...item }), {})\n        : formData;\n\n      const partialRequest = this.requestMapper.transform(normalizedFormData);\n\n      const updateRequest: Partial<AssetUpdateRequest> = {};\n\n      for (const key in partialRequest) {\n        if (Object.hasOwn(partialRequest, key)) {\n          const value = partialRequest[key];\n          if (value !== undefined && value !== null) {\n            updateRequest[key] = value;\n          }\n        }\n      }\n      return updateRequest;\n    } catch (error) {\n      console.error('Form data transformation failed:', error);\n      throw error;\n    }\n  }\n}\n","<div class=\"card pt-2\">\n  <div class=\"mb-4 p-2 flex justify-start items-center\">\n    <span\n      class=\"pi pi-verified !text-[2.5rem]\"\n      [ngClass]=\"{ 'icon-primary': isFormEditable() }\"\n      [attr.aria-label]=\"'verified icon'\"\n    ></span>\n\n    <div class=\"pl-6 flex-1\">\n      <div class=\"flex justify-between items-center\">\n        <h2 class=\"text-xl font-semibold m-0\">Profiles</h2>\n        @if (!isFormEditable()) {\n          <div class=\"icon-light\">\n            <span\n              class=\"pi pi-pen-to-square action hover !text-2xl\"\n              [attr.aria-label]=\"'Edit asset profiles'\"\n              (click)=\"onEdit()\"\n              (keydown.enter)=\"onEdit()\"\n            ></span>\n          </div>\n        }\n      </div>\n      <span> Profiles Select from the following profiles.</span>\n    </div>\n  </div>\n  @if (isFormEditable()) {\n    <app-dynamic-form\n      [fields]=\"formFields\"\n      [actions]=\"actions\"\n      (formSubmit)=\"onSubmit($event)\"\n    >\n    </app-dynamic-form>\n  } @else {\n    <app-grid\n      [data]=\"assetDetails()\"\n      [columns]=\"columns\"\n      [showGridLines]=\"false\"\n      [hideHeader]=\"true\"\n      tableStyleClass=\"info-display !w-auto\"\n    ></app-grid>\n  }\n</div>\n","import { isDefined } from '../../../shared/utils';\n\nexport type FormFieldMapping<T> = Record<\n  string,\n  {\n    requestProperty: keyof T;\n    transform?: (value: unknown) => unknown;\n    validate?: (value: unknown) => boolean;\n    required?: boolean;\n  }\n>;\n\nexport class FormToRequestMapper<TRequest> {\n  constructor(private readonly mapping: FormFieldMapping<TRequest>) {}\n\n  transform(formData: Record<string, unknown>): Partial<TRequest> {\n    const result: Partial<TRequest> = {};\n\n    for (const [formField, config] of Object.entries(this.mapping)) {\n      const formValue = formData[formField];\n\n      // Skip if value is undefined and not required\n      if (!isDefined(formValue) && config.required !== true) {\n        continue;\n      }\n\n      // Validate if validator provided\n      if (config.validate && !config.validate(formValue)) {\n        throw new Error(`Validation failed for field: ${formField}`);\n      }\n\n      // Transform value if transformer provided\n      const finalValue = config.transform\n        ? config.transform(formValue)\n        : formValue;\n\n      result[config.requestProperty] = finalValue as TRequest[keyof TRequest];\n    }\n\n    return result;\n  }\n}\n\nexport class RequestValidator {\n  static validate<T>(\n    data: unknown,\n    schema: Record<keyof T, (value: unknown) => boolean>,\n  ): data is T {\n    if (data === null || data === undefined || typeof data !== 'object') {\n      return false;\n    }\n\n    const obj = data as Record<string, unknown>;\n\n    for (const [key, validator] of Object.entries(schema)) {\n      const validatorFn = validator as (value: unknown) => boolean;\n      if (!validatorFn(obj[key])) {\n        console.error(`Validation failed for property: ${key}`);\n        return false;\n      }\n    }\n\n    return true;\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport {\n  Component,\n  computed,\n  effect,\n  inject,\n  OnInit,\n  signal,\n} from '@angular/core';\nimport { ReactiveFormsModule, Validators } from '@angular/forms';\nimport { ConfirmationService, MessageService } from 'primeng/api';\n\nimport { ButtonModule } from 'primeng/button';\nimport { DataViewModule } from 'primeng/dataview';\nimport { DividerModule } from 'primeng/divider';\nimport { InputTextModule } from 'primeng/inputtext';\nimport { PanelModule } from 'primeng/panel';\nimport { ToastModule } from 'primeng/toast';\nimport { ConfirmDialog } from 'primeng/confirmdialog';\n\nimport { DynamicFormModalComponent } from '../../../../../shared/components/forms/dynamic-form-modal/dynamic-form-modal.component';\nimport { takeUntilDestroyed } from '@angular/core/rxjs-interop';\nimport {\n  AccountsService,\n  AssetResponse,\n  EntitiesService,\n  IdName,\n} from '../../../../../api';\nimport { UtilityService } from '../../../../../core/services/utility.service';\nimport { FormAction, createTextField } from '../../../../../shared/models';\nimport { isEmpty, isNullOrUndefined } from '../../../../../shared/utils';\nimport { EntitySectionBaseComponent } from '../../base';\nimport { GridComponent } from '../../../../../shared/components/grid/grid.component';\nimport {\n  catchError,\n  debounceTime,\n  distinctUntilChanged,\n  EMPTY,\n  Subject,\n  switchMap,\n} from 'rxjs';\n\n@Component({\n  selector: 'app-asset-sharing-section',\n  imports: [\n    CommonModule,\n    ReactiveFormsModule,\n    ButtonModule,\n    InputTextModule,\n    DynamicFormModalComponent,\n    DataViewModule,\n    PanelModule,\n    DividerModule,\n    GridComponent,\n    ToastModule,\n    ConfirmDialog,\n  ],\n  providers: [MessageService, ConfirmationService],\n  templateUrl: './asset-sharing-section.component.html',\n  styleUrl: './asset-sharing-section.component.scss',\n})\nexport class AssetSharingSectionComponent\n  extends EntitySectionBaseComponent<AssetResponse>\n  implements OnInit\n{\n  private readonly entitiesService = inject(EntitiesService);\n  readonly utilityService = inject(UtilityService);\n  readonly accountsService = inject(AccountsService);\n  readonly confirmationService = inject(ConfirmationService);\n\n  // UI state signals\n  readonly showModal = signal<boolean>(false);\n  readonly isSearchingClient = signal<boolean>(false);\n\n  // Data signals\n  readonly selectedClient = signal<IdName | null>(null);\n  private readonly searchClientSubject = new Subject<string>();\n\n  readonly assetSharedWith = computed(() => {\n    const assetSharedWith = this.entity()?.sharedWith;\n    if (isNullOrUndefined(assetSharedWith)) return [];\n\n    return [\n      {\n        key: 'Shared With',\n        value: assetSharedWith\n          .map((sharedWith: IdName) => sharedWith.name)\n          .join(', '),\n      },\n    ];\n  });\n\n  override readonly actions: FormAction[] = [\n    {\n      label: 'Cancel',\n      action: () => {\n        this.onClose();\n      },\n      severity: 'secondary',\n    },\n    {\n      label: 'Ok',\n      action: () => {\n        const selectedClientValue = this.selectedClient();\n        if (selectedClientValue) {\n          this.addClientToSharedList(selectedClientValue);\n        }\n      },\n      severity: 'primary',\n      // Only enable when a client is found\n      disabled: () => this.selectedClient() === null,\n    },\n  ];\n\n  sharedWith: IdName[] = [];\n\n  constructor() {\n    super();\n\n    this.columns = [\n      {\n        field: 'key',\n        header: '',\n        transform: 'uppercase',\n      },\n      { field: 'value', header: '' },\n    ];\n\n    // React to entity changes\n    effect(() => {\n      const assetSharedWith = this.entity()?.sharedWith;\n      if (assetSharedWith) {\n        this.sharedWith = assetSharedWith;\n        this.updateFormFields();\n      }\n    });\n  }\n\n  ngOnInit(): void {\n    this.setupSearchClient();\n  }\n\n  private setupSearchClient() {\n    this.searchClientSubject\n      .pipe(\n        debounceTime(300),\n        distinctUntilChanged(),\n        takeUntilDestroyed(this.destroyRef),\n        switchMap((searchTerm) => {\n          if (isNullOrUndefined(searchTerm)) {\n            this.isSearchingClient.set(false);\n            return EMPTY;\n          }\n          return this.accountsService.getClientByPin(searchTerm).pipe(\n            catchError(() => {\n              this.selectedClient.set(null);\n              this.isSearchingClient.set(false);\n              // Trigger validation after search completes\n              this.form?.get('pin')?.updateValueAndValidity();\n              return EMPTY;\n            }),\n          );\n        }),\n      )\n      .subscribe({\n        next: (response) => {\n          this.isSearchingClient.set(false);\n          if (!isEmpty(response)) {\n            this.selectedClient.set(response);\n          } else {\n            this.selectedClient.set(null);\n          }\n          // Trigger validation after search completes\n          this.form?.get('pin')?.updateValueAndValidity();\n        },\n        error: () => {\n          this.isSearchingClient.set(false);\n          this.selectedClient.set(null);\n          // Trigger validation after search completes\n          this.form?.get('pin')?.updateValueAndValidity();\n        },\n      });\n  }\n\n  private searchClient(searchTerm: string) {\n    if (isNullOrUndefined(searchTerm)) {\n      this.selectedClient.set(null);\n      this.isSearchingClient.set(false);\n      return;\n    }\n\n    this.isSearchingClient.set(true);\n    this.searchClientSubject.next(searchTerm);\n  }\n\n  protected override updateFormFields(): void {\n    this.formFields = [\n      createTextField('pin', 'PIN', '', {\n        name: 'pin',\n        validations: [\n          {\n            name: 'required',\n            validator: Validators.required,\n            message: 'PIN is required',\n          },\n          {\n            name: 'minlength',\n            validator: Validators.minLength(3),\n            message: 'PIN must be at least 3 characters',\n          },\n          {\n            name: 'clientNotFound',\n            validator: (control) => {\n              const value = control.value as string;\n              // Only validate if PIN has sufficient length\n              if (isNullOrUndefined(value) || value.length < 3) {\n                return null; // Let minlength handle this\n              }\n              // Don't show error while still searching\n              if (this.isSearchingClient()) {\n                return null;\n              }\n              // Check if client was found\n              return this.selectedClient() === null\n                ? { clientNotFound: true }\n                : null;\n            },\n            message: 'No client found for this PIN',\n          },\n        ],\n        events: {\n          onChange: (value: string) => {\n            if (value && value.length >= 3) {\n              this.searchClient(value);\n            } else {\n              this.selectedClient.set(null);\n            }\n          },\n        },\n      }),\n    ];\n  }\n\n  /**\n   * Open modal to add shared entity\n   */\n  openAddEntityModal(): void {\n    this.selectedClient.set(null);\n    this.updateFormFields();\n    this.showModal.set(true);\n  }\n\n  /**\n   * Add client to shared entities list\n   */\n  private addClientToSharedList(client: IdName): void {\n    // Check if client is already in shared list\n    const isDuplicate = this.sharedWith.some((item) => item.id === client.id);\n\n    if (isDuplicate) {\n      this.messageService.add({\n        severity: 'warn',\n        summary: 'Already Shared',\n        detail: `Asset is already shared with ${client.name}`,\n      });\n      return;\n    }\n\n    // Add to shared list\n    this.sharedWith = [...this.sharedWith, client];\n    // Reset form and close modal\n    this.onClose();\n  }\n\n  protected override submitChanges(\n    _formData: Record<string, string | number>,\n  ): void {\n    const asset = this.entity();\n    if (!asset) return;\n\n    // Update asset with new shared list\n    this.entitiesService\n      .updateAsset(asset.id, {\n        sharedWith: this.sharedWith,\n      })\n      .pipe(\n        takeUntilDestroyed(this.destroyRef),\n        catchError((error) => {\n          this.isLoading.set(false);\n          this.messageService.add({\n            severity: 'error',\n            summary: 'Error',\n            detail: 'Failed to update sharing settings',\n          });\n          console.error('Failed to update shared entities', error);\n          return EMPTY;\n        }),\n      )\n      .subscribe({\n        next: (updatedAsset) => {\n          this.isLoading.set(false);\n          // Update local list\n          this.sharedWith = updatedAsset.sharedWith || [];\n        },\n      });\n  }\n\n  onClose() {\n    this.showModal.set(false);\n    this.selectedClient.set(null);\n  }\n\n  removeClientFromSharedList(client: IdName): void {\n    this.confirmationService.confirm({\n      message: `Are you sure you want to remove sharing with ${client.name}?`,\n      accept: () => {\n        this.sharedWith = this.sharedWith.filter(\n          (item) => item.id !== client.id,\n        );\n      },\n    });\n  }\n}\n","<div class=\"card pt-2\">\n  <!-- Header Section -->\n  <div class=\"section-header mb-4 p-2 flex justify-start items-center\">\n    <span\n      class=\"pi pi-share-alt !text-[2.5rem]\"\n      [ngClass]=\"{ 'icon-primary': isFormEditable() }\"\n      aria-label=\"share icon\"\n    ></span>\n\n    <div class=\"pl-6 flex-1\">\n      <div class=\"flex justify-between items-center\">\n        <h2 class=\"text-xl font-semibold m-0\">Sharing</h2>\n        @if (!isFormEditable()) {\n          <div class=\"icon-light\">\n            <span\n              class=\"pi pi-pen-to-square action hover !text-2xl\"\n              aria-label=\"Edit asset sharing\"\n              (click)=\"onEdit()\"\n              (keydown.enter)=\"onEdit()\"\n            ></span>\n          </div>\n        }\n      </div>\n      <span>Add companies you'd like to share this asset with below.</span>\n    </div>\n  </div>\n\n  <!-- Edit Mode -->\n  @if (isFormEditable()) {\n    <div class=\"p-field p-2 flex align-items-center gap-2\">\n      <label for=\"logo\" class=\"w-1/3 flex-shrink-0\">Shared With</label>\n      <div class=\"flex flex-col justify-end w-full\">\n        <div class=\"flex-grow-1 flex flex-col\">\n          @if (sharedWith.length === 0) {\n            <p-panel />\n          }\n\n          @for (item of sharedWith; track item) {\n            <p-panel>\n              <div class=\"flex flex-row justify-between\">\n                <div>\n                  <span class=\"px-4\"> {{ item.name }}</span>\n                </div>\n\n                <div class=\"icon-light\">\n                  <span\n                    class=\"pi pi-trash action hover !text-xl\"\n                    [attr.aria-label]=\"'Delete Item'\"\n                    (click)=\"removeClientFromSharedList(item)\"\n                    (keydown.enter)=\"removeClientFromSharedList(item)\"\n                  ></span>\n                </div>\n              </div>\n            </p-panel>\n          }\n\n          <p-button\n            (onClick)=\"openAddEntityModal()\"\n            severity=\"secondary\"\n            label=\"Add\"\n            class=\"self-end p-2\"\n          />\n\n          <div class=\"flex justify-end gap-2 mt-4\">\n            <p-button\n              type=\"button\"\n              label=\"Cancel\"\n              severity=\"secondary\"\n              (onClick)=\"isFormEditable.set(false)\"\n            />\n\n            <p-button\n              type=\"submit\"\n              label=\"Save\"\n              severity=\"primary\"\n              [disabled]=\"true\"\n              (onClick)=\"submitChanges({})\"\n            />\n          </div>\n        </div>\n      </div>\n    </div>\n  }\n  <!-- View Mode -->\n  @else {\n    <app-grid\n      [data]=\"assetSharedWith()\"\n      [columns]=\"columns\"\n      [showGridLines]=\"false\"\n      [hideHeader]=\"true\"\n      tableStyleClass=\"info-display !w-auto\"\n    ></app-grid>\n  }\n</div>\n\n<!-- Add/Edit Shared With Modal -->\n<app-dynamic-form-modal\n  [visible]=\"showModal()\"\n  header=\"Share Asset\"\n  [fields]=\"formFields\"\n  [actions]=\"actions\"\n  [styleClass]=\"'w-[40rem]'\"\n  (modalClose)=\"onClose()\"\n  (formSubmit)=\"onSubmit($event)\"\n>\n  <div formHeader>\n    @if (isLoading()) {\n      <div class=\"mt-2 mb-4\">\n        <i class=\"pi pi-spinner pi-spin\"></i>\n        <span>Searching for client...</span>\n      </div>\n    } @else if (selectedClient()) {\n      <div class=\"mt-2 mb-4\">\n        <div class=\"flex flex-column gap-2\">\n          <div class=\"text-xl muted\">Client Found:</div>\n          <div class=\"flex justify-content-between\">\n            <span>{{ selectedClient()?.name }}</span>\n          </div>\n        </div>\n      </div>\n    } @else {\n      <p class=\"mt-2 mb-4 muted\">\n        Enter the PIN number for the company you would like to share this asset\n        with. If you do not know the PIN code, contact the company in question\n        and ask for their PIN.\n      </p>\n    }\n  </div>\n</app-dynamic-form-modal>\n\n<p-confirmdialog />\n","import { CommonModule } from '@angular/common';\nimport {\n  Component,\n  computed,\n  effect,\n  inject,\n  OnInit,\n  signal,\n} from '@angular/core';\nimport { ReactiveFormsModule } from '@angular/forms';\nimport { ButtonModule } from 'primeng/button';\nimport { InputTextModule } from 'primeng/inputtext';\nimport { ChipModule } from 'primeng/chip';\n\nimport { EntitySectionBaseComponent } from '../../../components/base/entity-section-base';\nimport { AssetResponse, EntitiesService, IdName } from '../../../../../api';\nimport {\n  isDefined,\n  isNullOrUndefined,\n  isString,\n} from '../../../../../shared/utils';\nimport { takeUntilDestroyed } from '@angular/core/rxjs-interop';\nimport {\n  createDropdownField,\n  createNumberField,\n  MeasurementUnitType,\n} from '../../../../../shared/models';\nimport { GridComponent } from '../../../../../shared/components/grid/grid.component';\nimport { DynamicFormComponent } from '../../../../../shared/components/forms/dynamic-form/dynamic-form.component';\nimport { MeasurementUnitsService } from '../../../../../shared/services/measurement-units/measurement-units.service';\n\n@Component({\n  selector: 'app-asset-event-triggers-section',\n  imports: [\n    CommonModule,\n    ReactiveFormsModule,\n    ButtonModule,\n    InputTextModule,\n    ChipModule,\n    GridComponent,\n    DynamicFormComponent,\n  ],\n  templateUrl: './asset-event-triggers-section.component.html',\n  styleUrl: './asset-event-triggers-section.component.scss',\n})\nexport class AssetEventTriggersSectionComponent\n  extends EntitySectionBaseComponent<AssetResponse>\n  implements OnInit\n{\n  private readonly entitiesService = inject(EntitiesService);\n  private readonly measurementUnitsService = inject(MeasurementUnitsService);\n  protected readonly selectOptionsLoaded = signal<boolean>(false);\n  selectOptions: Record<string, { label: string; value: string }[]> = {};\n  readonly assetEventTriggers = computed(() => {\n    const asset = this.entity();\n    const assetEventTriggers = asset?.parameters;\n    if (isNullOrUndefined(assetEventTriggers)) return [];\n\n    return [\n      {\n        key: 'Max Speed',\n        value: isDefined(assetEventTriggers.overspeed)\n          ? this.measurementUnitsService.format(\n              assetEventTriggers.overspeed,\n              MeasurementUnitType.SPEED,\n            ).format\n          : 'None',\n      },\n      {\n        key: 'Overspeed Profile',\n        value: isDefined(asset?.overspeedProfile)\n          ? asset?.overspeedProfile?.name\n          : 'None',\n      },\n      {\n        key: 'Speed Tolerance',\n        value: isDefined(assetEventTriggers.overspeedTolerance)\n          ? `${assetEventTriggers.overspeedTolerance}%`\n          : 'None',\n      },\n      {\n        key: 'Excessive Idle',\n        value: isDefined(assetEventTriggers.excessiveIdle)\n          ? `${assetEventTriggers.excessiveIdle} minutes`\n          : 'None',\n      },\n      {\n        key: 'Max Trip Distance',\n        value: isDefined(assetEventTriggers.maxTripDistance)\n          ? `${\n              this.measurementUnitsService.format(\n                assetEventTriggers.maxTripDistance,\n                MeasurementUnitType.DISTANCE,\n              ).value\n            } ${this.measurementUnitsService.unit(\n              MeasurementUnitType.DISTANCE,\n            )}`\n          : 'None',\n      },\n      {\n        key: 'Max Trip Time',\n        value: isDefined(assetEventTriggers.maxTripTime)\n          ? `${assetEventTriggers.maxTripTime} minutes`\n          : 'None',\n      },\n      {\n        key: 'Max inactive time',\n        value: isDefined(assetEventTriggers.maxInactiveTime)\n          ? `${assetEventTriggers.maxInactiveTime} minutes`\n          : 'None',\n      },\n    ];\n  });\n\n  constructor() {\n    super();\n\n    // Setup initial columns\n    this.columns = [\n      { field: 'key', header: '', transform: 'uppercase' },\n      { field: 'value', header: '' },\n    ];\n\n    // React to entity changes\n    effect(() => {\n      const assetEventTriggers = this.entity();\n      if (assetEventTriggers && this.selectOptionsLoaded()) {\n        this.updateFormFields();\n      }\n    });\n  }\n\n  ngOnInit() {\n    this.loadSelectOptions();\n  }\n\n  private loadSelectOptions() {\n    const asset = this.entity();\n    if (!isDefined(asset) || !isString(asset.id)) {\n      this.selectOptions = {};\n      this.selectOptionsLoaded.set(true);\n      this.updateFormFields();\n      return;\n    }\n\n    this.entitiesService\n      .listOverspeedProfiles(asset.owner.id)\n      .pipe(takeUntilDestroyed(this.destroyRef))\n      .subscribe((response) => {\n        this.selectOptions = {\n          overspeedProfiles: response.items\n            .map((item) => ({\n              label: item.name ?? '',\n              value: item.id,\n            }))\n            .sort((a, b) => a.label.localeCompare(b.label)),\n        };\n\n        this.selectOptionsLoaded.set(true);\n      });\n  }\n\n  protected override updateFormFields(): void {\n    const asset = this.entity();\n    this.formFields = [\n      createNumberField(\n        'overspeed',\n        'Max Speed',\n        asset?.parameters?.overspeed !== undefined &&\n          asset?.parameters?.overspeed !== null\n          ? this.measurementUnitsService.fromBackend(\n              MeasurementUnitType.SPEED,\n              asset.parameters.overspeed,\n            )\n          : undefined,\n        {\n          layout: 'horizontal',\n          labelWidth: '1/3',\n          name: 'overspeed',\n          props: {\n            suffix: this.measurementUnitsService.unitSymbol(\n              MeasurementUnitType.SPEED,\n            ),\n          },\n        },\n      ),\n      createDropdownField(\n        'overspeedProfile',\n        'Overspeed Profile',\n        this.selectOptions['overspeedProfiles'],\n        asset?.overspeedProfile?.id ?? undefined,\n        {\n          layout: 'horizontal',\n          labelWidth: '1/3',\n          name: 'overspeedProfile',\n          props: {\n            placeholder: 'Select Overspeed Profile',\n            filter: true,\n            showClear: true,\n            clearButtonAriaLabel: 'Clear selection',\n          },\n        },\n      ),\n      createNumberField(\n        'overspeedTolerance',\n        'Speed Tolerance',\n        asset?.parameters?.overspeedTolerance ?? undefined,\n        {\n          layout: 'horizontal',\n          labelWidth: '1/3',\n          name: 'overspeedTolerance',\n          props: {\n            suffix: '%',\n          },\n        },\n      ),\n      createNumberField(\n        'excessiveIdle',\n        'Excessive Idle',\n        asset?.parameters?.excessiveIdle ?? undefined,\n        {\n          layout: 'horizontal',\n          labelWidth: '1/3',\n          name: 'excessiveIdle',\n          props: {\n            suffix: 'minutes',\n          },\n        },\n      ),\n      createNumberField(\n        'maxTripDistance',\n        'Max Trip Distance',\n        asset?.parameters?.maxTripDistance !== undefined &&\n          asset?.parameters?.maxTripDistance !== null\n          ? this.measurementUnitsService.fromBackend(\n              MeasurementUnitType.DISTANCE,\n              asset.parameters.maxTripDistance,\n            )\n          : undefined,\n        {\n          layout: 'horizontal',\n          labelWidth: '1/3',\n          name: 'maxTripDistance',\n          props: {\n            suffix: this.measurementUnitsService.unit(\n              MeasurementUnitType.DISTANCE,\n            ),\n          },\n        },\n      ),\n      createNumberField(\n        'maxTripTime',\n        'Max Trip Time',\n        asset?.parameters?.maxTripTime ?? undefined,\n        {\n          layout: 'horizontal',\n          labelWidth: '1/3',\n          name: 'maxTripTime',\n          props: {\n            suffix: 'minutes',\n          },\n        },\n      ),\n      createNumberField(\n        'maxInactiveTime',\n        'Max inactive time',\n        asset?.parameters?.maxInactiveTime ?? undefined,\n        {\n          layout: 'horizontal',\n          labelWidth: '1/3',\n          name: 'maxInactiveTime',\n          props: {\n            suffix: 'minutes',\n          },\n        },\n      ),\n    ];\n  }\n\n  protected override submitChanges(\n    formData: Record<string, string | number>,\n  ): void {\n    const asset = this.entity();\n    if (isNullOrUndefined(asset)) return;\n\n    // Extract overspeedProfile from formData if present\n    const { overspeedProfile, ...rawParameters } = formData;\n\n    // Convert measurement values to backend format\n    const parameters: Record<string, string | number> = {};\n\n    for (const [key, value] of Object.entries(rawParameters)) {\n      if (value !== undefined && value !== null && value !== '') {\n        switch (key) {\n          case 'overspeed':\n            parameters[key] = this.measurementUnitsService.toBackend(\n              MeasurementUnitType.SPEED,\n              value,\n            );\n            break;\n          case 'maxTripDistance':\n            parameters[key] = this.measurementUnitsService.toBackend(\n              MeasurementUnitType.DISTANCE,\n              value,\n            );\n            break;\n          default:\n            parameters[key] = value;\n            break;\n        }\n      }\n    }\n\n    // Prepare update payload\n    const updatePayload: {\n      parameters: Record<string, string | number>;\n      overspeedProfile?: IdName;\n    } = { parameters };\n\n    // Handle overspeedProfile separately if present\n    if (overspeedProfile !== undefined) {\n      const selectedProfile = this.selectOptions['overspeedProfiles']?.find(\n        (option) => option.value === overspeedProfile,\n      );\n\n      updatePayload.overspeedProfile = selectedProfile\n        ? {\n            id: selectedProfile.value,\n            name: selectedProfile.label,\n          }\n        : undefined;\n    }\n\n    this.handleEntityUpdate(\n      this.entitiesService\n        .updateAsset(asset.id, updatePayload)\n        .pipe(takeUntilDestroyed(this.destroyRef)),\n      'Asset Event triggers updated successfully',\n    );\n  }\n}\n","<div class=\"card pt-2\">\n  <div class=\"mb-4 p-2 flex justify-start items-center\">\n    <span\n      class=\"pi pi-gauge !text-[2.5rem]\"\n      [ngClass]=\"{ 'icon-primary': isFormEditable() }\"\n      [attr.aria-label]=\"'id card icon'\"\n    ></span>\n\n    <div class=\"pl-6 flex-1\">\n      <div class=\"flex justify-between items-center\">\n        <h2 class=\"text-xl font-semibold m-0\">Event Triggers</h2>\n        @if (!isFormEditable()) {\n          <div class=\"icon-light\">\n            <span\n              class=\"pi pi-pen-to-square action hover !text-2xl\"\n              aria-label=\"Edit event triggers\"\n              (click)=\"onEdit()\"\n              (keydown.enter)=\"onEdit()\"\n            ></span>\n          </div>\n        }\n      </div>\n      <span\n        >Define when speed, idle and trip limit events will be generated for\n        this asset.</span\n      >\n    </div>\n  </div>\n  @if (isFormEditable()) {\n    <app-dynamic-form\n      [fields]=\"formFields\"\n      [actions]=\"actions\"\n      (formSubmit)=\"onSubmit($event)\"\n    >\n    </app-dynamic-form>\n  } @else {\n    <app-grid\n      [data]=\"assetEventTriggers()\"\n      [columns]=\"columns\"\n      [showGridLines]=\"false\"\n      [hideHeader]=\"true\"\n      tableStyleClass=\"info-display !w-auto\"\n    ></app-grid>\n  }\n</div>\n","import {\n  Component,\n  computed,\n  effect,\n  ElementRef,\n  inject,\n  OnInit,\n  signal,\n  ViewChild,\n} from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { takeUntilDestroyed } from '@angular/core/rxjs-interop';\nimport { Validators } from '@angular/forms';\nimport { HttpClient } from '@angular/common/http';\nimport { catchError, finalize, forkJoin, of } from 'rxjs';\n\nimport { InputTextModule } from 'primeng/inputtext';\nimport { ButtonModule } from 'primeng/button';\nimport { DataViewModule } from 'primeng/dataview';\nimport { CardModule } from 'primeng/card';\nimport { MenuItem } from 'primeng/api';\n\nimport {\n  AssetResponse,\n  EntitiesService,\n  ReminderCreateRequest,\n  ReminderListItem,\n} from '../../../../../api';\nimport {\n  createDropdownField,\n  createTextField,\n  createDateField,\n  FormFieldConfig,\n  createNumberField,\n  FormAction,\n  createListboxField,\n} from '../../../../../shared/models';\nimport {\n  isDefined,\n  isEmpty,\n  isNullOrUndefined,\n} from '../../../../../shared/utils';\nimport { EntitySectionBaseComponent } from '../../base';\nimport { GridComponent } from '../../../../../shared/components/grid/grid.component';\n\nimport {\n  DAY_OF_MONTH_OPTIONS,\n  MONTH_OPTIONS,\n  ReminderType,\n  WEEKDAY_OPTIONS,\n} from '../../../models';\nimport { DynamicFormModalComponent } from '../../../../../shared/components/forms/dynamic-form-modal/dynamic-form-modal.component';\nimport { AuthDataService } from '../../../../../core/services/auth-data.service';\nimport { Menu, MenuModule } from 'primeng/menu';\n\n@Component({\n  selector: 'app-asset-reminders-section',\n  imports: [\n    CommonModule,\n    ButtonModule,\n    InputTextModule,\n    GridComponent,\n    DynamicFormModalComponent,\n    MenuModule,\n    DataViewModule,\n    CardModule,\n  ],\n  templateUrl: './asset-reminders-section.component.html',\n  styleUrl: './asset-reminders-section.component.scss',\n})\nexport class AssetRemindersSectionComponent\n  extends EntitySectionBaseComponent<AssetResponse>\n  implements OnInit\n{\n  @ViewChild('addReminderMenu') addReminderMenu!: Menu;\n  @ViewChild('addReminderBtn', { read: ElementRef })\n  addReminderBtn!: ElementRef<HTMLButtonElement>;\n\n  private readonly entitiesService = inject(EntitiesService);\n  private readonly http = inject(HttpClient);\n  private readonly authDataService = inject(AuthDataService);\n\n  // Signals - properly declare isLoadingAsset\n  readonly isLoadingAsset = signal<boolean>(false);\n  private readonly remindersData = signal<ReminderListItem[]>([]);\n\n  // Modal controls\n  readonly showReminderModal = signal<boolean>(false);\n  readonly currentModalTitle = signal<string>('Add Reminder');\n  readonly currentReminderType = signal<ReminderType | null>(null);\n\n  private readonly newReminders = signal<Partial<ReminderCreateRequest>[]>([]);\n  private readonly deletedReminderIds = signal<string[]>([]);\n\n  // Track the currently loaded asset ID to prevent duplicate loads\n  private loadedAssetId: string | null = null;\n\n  // Split button menu items\n  reminderOptions: MenuItem[] = [\n    {\n      label: 'Odometer Reminder',\n      command: () => this.openReminderModal(ReminderType.ODOMETER),\n    },\n    {\n      label: 'Engine Hours Reminder',\n      command: () => this.openReminderModal(ReminderType.ENGINE_HOURS),\n    },\n    {\n      label: 'Time Based Reminder',\n      command: () => this.openReminderModal(ReminderType.TIME_BASED),\n    },\n  ];\n\n  // Computed properties\n  readonly reminders = computed(() => {\n    const remindersList = this.remindersData();\n\n    return [\n      {\n        key: 'Reminders',\n        value: isEmpty(remindersList)\n          ? 'None'\n          : remindersList.map((reminder) => reminder.name).join(', '),\n      },\n    ];\n  });\n\n  // Sorted reminders for the list view\n  readonly sortedReminders = computed(() => {\n    const combined = [\n      ...this.remindersData().filter(\n        (r) => !this.deletedReminderIds().includes(r.id ?? ''),\n      ),\n      ...this.newReminders().filter(\n        (r) => !this.deletedReminderIds().includes(r['id'] ?? ''),\n      ),\n    ];\n    return combined.sort((a, b) => {\n      const dateA =\n        a['modifiedDate'] ??\n        (isDefined(a['id']?.startsWith('temp-') ?? false) ? Date.now() : 0);\n      const dateB =\n        b['modifiedDate'] ??\n        (isDefined(b['id']?.startsWith('temp-') ?? false) ? Date.now() : 0);\n      const timeA =\n        typeof dateA === 'string' ? new Date(dateA).getTime() : Number(dateA);\n      const timeB =\n        typeof dateB === 'string' ? new Date(dateB).getTime() : Number(dateB);\n      return timeB - timeA;\n    });\n  });\n\n  // Check if there are changes to save\n  readonly hasChanges = computed(() => {\n    return (\n      this.newReminders().length > 0 || this.deletedReminderIds().length > 0\n    );\n  });\n\n  override readonly actions: FormAction[] = [\n    {\n      label: 'Cancel',\n      action: () => {\n        this.showReminderModal.set(false);\n        this.resetModal();\n      },\n      severity: 'secondary',\n    },\n    {\n      label: 'Ok',\n      action: (formData) => {\n        this.onReminderSubmit(formData.value);\n      },\n      severity: 'primary',\n      disabled: (form) => {\n        return (\n          (form?.invalid ?? false) ||\n          ((form?.dirty ?? false) && !(form?.touched ?? false)) ||\n          this.isLoadingAsset()\n        );\n      },\n    },\n  ];\n  timezones: { label: string; value: string }[] = [];\n  formHeader = '';\n\n  constructor() {\n    super();\n\n    // Setup initial columns\n    this.columns = [\n      { field: 'key', header: '', transform: 'uppercase' },\n      { field: 'value', header: '' },\n    ];\n\n    // Only watch entity changes, not isLoadingAsset\n    effect(() => {\n      const asset = this.entity();\n      // Only proceed if we have a valid asset with an ID and owner\n      if (isDefined(asset?.id) && isDefined(asset?.owner?.id)) {\n        // Check if this is a different asset than the one we already loaded\n        if (asset.id !== this.loadedAssetId) {\n          this.loadReminders(asset);\n        }\n      } else {\n        this.remindersData.set([]);\n        this.loadedAssetId = null;\n        this.resetChanges();\n      }\n    });\n  }\n\n  ngOnInit(): void {\n    this.loadTimezones();\n  }\n\n  onAddReminderMenuShow() {\n    // Delay to ensure overlay is in DOM\n    queueMicrotask(() => {\n      const overlay = this.addReminderMenu?.container as HTMLElement;\n      const btnEl = this.addReminderBtn?.nativeElement;\n      if (isNullOrUndefined(overlay) || isNullOrUndefined(btnEl)) return;\n\n      const btnRect = btnEl.getBoundingClientRect();\n      const overlayRect = overlay.getBoundingClientRect();\n\n      const rightPadding = 0; // px gap from viewport/right edge of button\n      const left = btnRect.right - overlayRect.width - rightPadding;\n\n      overlay.style.left = `${left}px`;\n      overlay.style.top = `${btnRect.bottom}px`;\n      overlay.style.transformOrigin = 'top right';\n    });\n  }\n\n  private loadReminders(asset: AssetResponse) {\n    // Skip if already loading or if no asset ID\n    if (this.isLoadingAsset()) return;\n\n    // Update the loaded asset ID before making the request\n    this.loadedAssetId = asset.id;\n    this.isLoadingAsset.set(true);\n\n    this.entitiesService\n      .listReminders(asset.owner.id, asset.id)\n      .pipe(\n        takeUntilDestroyed(this.destroyRef),\n        catchError(() => {\n          this.isLoadingAsset.set(false);\n          return of({ items: [], count: 0 });\n        }),\n      )\n      .subscribe({\n        next: (response) => {\n          const reminders = response.items ?? [];\n          this.remindersData.set(reminders);\n          this.isLoadingAsset.set(false);\n          this.resetChanges();\n        },\n      });\n  }\n\n  /**\n   * Load timezones from JSON file\n   */\n  private loadTimezones(): void {\n    this.http\n      .get<{ id: string; name: string }[]>('/assets/docs/timezones.json')\n      .subscribe((data) => {\n        this.timezones = data\n          .map((tz) => ({ label: tz.id, value: tz.id }))\n          .sort((a, b) => a.label.localeCompare(b.label));\n      });\n  }\n\n  /**\n   * Create reset counter options based on type\n   * @param type - The reminder type\n   * @returns Array of options for the dropdown\n   */\n  private createResetCounterOptions(\n    type: ReminderType,\n  ): { label: string; value: number }[] {\n    return Array.from({ length: 8 }, (_, i) => ({\n      label: `${type}_cnt_${i + 1}`,\n      value: i + 1,\n    }));\n  }\n\n  /**\n   * Create reset configuration based on type\n   * @param resetType - The type of reset (daily, weekly, monthly)\n   * @param resetCounterOptions - Options for the reset counter\n   * @returns FormFieldConfig for the reset configuration\n   */\n  private createResetConfig(\n    resetType: 'daily' | 'weekly' | 'monthly',\n    resetCounterOptions: { label: string; value: number }[],\n  ): FormFieldConfig[] {\n    // Common structure for all reset types\n    const config: FormFieldConfig[] = [\n      {\n        name: 'reset',\n        key: 'reset',\n        type: 'group',\n        fields: [\n          // This will be populated based on reset type\n        ],\n      },\n      createDropdownField(\n        'timeZoneId',\n        'Timezone',\n        this.timezones,\n        this.authDataService.getUserProfile()?.timeZoneId,\n        {\n          layout: 'horizontal',\n          labelWidth: '1/3',\n          placeholder: 'Select timezone',\n          name: 'timeZoneId',\n          props: {\n            appendTo: 'body',\n          },\n        },\n      ),\n    ];\n\n    // Get the reset group to modify\n    const resetGroup = config[0];\n\n    // Add type-specific fields\n    switch (resetType) {\n      case 'daily':\n        resetGroup.fields = [\n          {\n            name: 'daily',\n            key: 'daily',\n            type: 'group',\n            fields: [\n              createNumberField('recurrence', 'Every', 1, {\n                name: 'recurrence',\n                validations: [\n                  {\n                    name: 'required',\n                    validator: Validators.required,\n                    message: 'Recurrence is required',\n                  },\n                ],\n                props: { suffix: 'Days' },\n              }),\n            ],\n          },\n          createDropdownField(\n            'counter',\n            'Reset Counter',\n            resetCounterOptions,\n            resetCounterOptions[0].value,\n            {\n              name: 'counter',\n              validations: [\n                {\n                  name: 'required',\n                  validator: Validators.required,\n                  message: 'Counter is required',\n                },\n              ],\n              props: { appendTo: 'body' },\n            },\n          ),\n          {\n            name: 'trigger',\n            key: 'trigger',\n            type: 'group',\n            fields: [\n              createDateField('start', 'Starting at', new Date(), {\n                name: 'start',\n                validations: [\n                  {\n                    name: 'required',\n                    validator: Validators.required,\n                    message: 'Starting date is required',\n                  },\n                ],\n                props: {\n                  appendTo: 'body',\n                  showTime: true,\n                  showSeconds: true,\n                  dateFormat: 'yy/mm/dd',\n                },\n              }),\n            ],\n          },\n        ];\n        break;\n\n      case 'weekly':\n        resetGroup.fields = [\n          {\n            name: 'weekly',\n            key: 'weekly',\n            type: 'group',\n            fields: [\n              createListboxField('days', 'Weekdays', [], WEEKDAY_OPTIONS, {\n                name: 'days',\n                validations: [\n                  {\n                    name: 'required',\n                    validator: Validators.required,\n                    message: 'Weekdays is required',\n                  },\n                ],\n                props: {\n                  checkmark: true,\n                  multiple: true,\n                },\n              }),\n            ],\n          },\n          createDropdownField(\n            'counter',\n            'Reset Counter Value',\n            resetCounterOptions,\n            resetCounterOptions[0].value,\n            {\n              name: 'counter',\n              props: { appendTo: 'body' },\n              validations: [\n                {\n                  name: 'required',\n                  validator: Validators.required,\n                  message: 'Counter is required',\n                },\n              ],\n            },\n          ),\n        ];\n        break;\n\n      case 'monthly':\n        resetGroup.fields = [\n          {\n            name: 'monthly',\n            key: 'monthly',\n            type: 'group',\n            fields: [\n              createListboxField('months', 'Months', [], MONTH_OPTIONS, {\n                name: 'months',\n                validations: [\n                  {\n                    name: 'required',\n                    validator: Validators.required,\n                    message: 'Months is required',\n                  },\n                ],\n                props: {\n                  checkmark: true,\n                  multiple: true,\n                },\n              }),\n              createDropdownField(\n                'day',\n                'Day ',\n                DAY_OF_MONTH_OPTIONS,\n                DAY_OF_MONTH_OPTIONS[0].value,\n                {\n                  name: 'day',\n                  validations: [\n                    {\n                      name: 'required',\n                      validator: Validators.required,\n                      message: 'Day of month is required',\n                    },\n                  ],\n                  props: { appendTo: 'body' },\n                },\n              ),\n            ],\n          },\n          createDropdownField(\n            'counter',\n            'Reset Counter',\n            resetCounterOptions,\n            resetCounterOptions[0].value,\n            {\n              name: 'counter',\n              props: { appendTo: 'body' },\n              validations: [\n                {\n                  name: 'required',\n                  validator: Validators.required,\n                  message: 'Counter is required',\n                },\n              ],\n            },\n          ),\n        ];\n        break;\n    }\n\n    return config;\n  }\n\n  /**\n   * Create a dropdown field for reset type\n   * @param type - The reminder type\n   * @returns FormFieldConfig for the dropdown\n   */\n  private createResetTypeDropdown(type: ReminderType): FormFieldConfig {\n    const resetCounterOptions = this.createResetCounterOptions(type);\n\n    return createDropdownField(\n      'resetType',\n      'Reset',\n      [\n        { label: 'After each reminder', value: 'none' },\n        { label: 'Daily', value: 'daily' },\n        { label: 'Weekly', value: 'weekly' },\n        { label: 'Monthly', value: 'monthly' },\n      ],\n      'none',\n      {\n        name: 'resetType',\n        conditional: true,\n        conditions: {\n          none: [\n            {\n              name: 'trigger',\n              key: 'trigger',\n              type: 'group',\n              fields: [\n                createTextField('start', 'Starting at', '', {\n                  name: 'start',\n                  validations: [\n                    {\n                      name: 'required',\n                      validator: Validators.required,\n                      message: 'Starting date is required',\n                    },\n                  ],\n                  hint:\n                    type === ReminderType.ENGINE_HOURS\n                      ? 'Set the hours to start reminders from'\n                      : 'Set the odometer value to start reminders from',\n                }),\n              ],\n            },\n          ],\n          daily: this.createResetConfig('daily', resetCounterOptions),\n          weekly: this.createResetConfig('weekly', resetCounterOptions),\n          monthly: this.createResetConfig('monthly', resetCounterOptions),\n        },\n        props: {\n          appendTo: 'body',\n        },\n      },\n    );\n  }\n\n  /**\n   * Create a base reminder form with common fields\n   * @param name - The name of the reminder\n   * @param modeOptions - Dropdown options for mode selection\n   * @param onceFieldCreator - Function to create the once field\n   * @param repeatingFieldsCreator - Function to create the repeating fields\n   * @returns Array of FormFieldConfig for the form\n   */\n  private createBaseReminderForm(\n    name: string,\n    modeOptions: { label: string; value: string }[],\n    onceFieldCreator: () => FormFieldConfig,\n    repeatingFieldsCreator: () => FormFieldConfig[],\n  ): FormFieldConfig[] {\n    return [\n      createTextField('name', 'Name', name, {\n        name: 'name',\n        validations: [\n          {\n            name: 'required',\n            validator: Validators.required,\n            message: 'Name is required',\n          },\n        ],\n      }),\n      createDropdownField('mode', 'Mode', modeOptions, 'once', {\n        name: 'mode',\n        conditional: true,\n        conditions: {\n          once: [onceFieldCreator()],\n          repeating: repeatingFieldsCreator(),\n        },\n        props: {\n          appendTo: 'body',\n        },\n      }),\n    ];\n  }\n\n  /**\n   * Open modal for adding a new reminder of specified type\n   */\n  openReminderModal(type: ReminderType): void {\n    this.currentReminderType.set(type);\n    this.currentModalTitle.set(\n      `Add ${this.getReminderTypeDisplay(type)} Reminder`,\n    );\n    this.updateFormFields();\n    switch (type) {\n      case ReminderType.ODOMETER:\n        this.formHeader =\n          'Odometer reminders will create an event (and optional alert) when the specified odometer value is reached.';\n        break;\n      case ReminderType.ENGINE_HOURS:\n        this.formHeader =\n          'Engine hours reminders will create an event (and optional alert) when the specified engine hours value is reached.';\n        break;\n      case ReminderType.TIME_BASED:\n        this.formHeader =\n          'Time based reminders will create an event (and optional alert) when the specified date and time is reached.';\n    }\n    this.showReminderModal.set(true);\n  }\n\n  /**\n   * Reset the modal state\n   */\n  resetModal(): void {\n    this.currentReminderType.set(null);\n    this.formFields = [];\n  }\n\n  /**\n   * Update form fields based on reminder type\n   */\n  protected override updateFormFields(): void {\n    const type = this.currentReminderType();\n\n    if (type === ReminderType.TIME_BASED) {\n      this.formFields = this.createBaseReminderForm(\n        'Time Based Reminder',\n        [\n          { label: 'At specific date/time', value: 'once' },\n          { label: 'Every X days', value: 'repeating' },\n        ],\n        // Once field creator\n        () => {\n          return {\n            name: 'trigger',\n            key: 'trigger',\n            type: 'group',\n            fields: [\n              createDateField('value', 'Date', '', {\n                name: 'value',\n                validations: [\n                  {\n                    name: 'required',\n                    validator: Validators.required,\n                    message: 'Starting date is required',\n                  },\n                ],\n                props: {\n                  appendTo: 'body',\n                  showTime: true,\n                  showSeconds: true,\n                  dateFormat: 'yy/mm/dd',\n                },\n              }),\n            ],\n          };\n        },\n        // Repeating fields creator\n        () => [\n          {\n            name: 'trigger',\n            key: 'trigger',\n            type: 'group',\n            fields: [\n              createNumberField('value', 'Days', 1, {\n                name: 'value',\n                validations: [\n                  {\n                    name: 'required',\n                    validator: Validators.required,\n                    message: 'Days is required',\n                  },\n                ],\n              }),\n              createDateField('start', 'Starting at', new Date(), {\n                name: 'start',\n                validations: [\n                  {\n                    name: 'required',\n                    validator: Validators.required,\n                    message: 'Starting date is required',\n                  },\n                ],\n                props: {\n                  appendTo: 'body',\n                  showTime: true,\n                  showSeconds: true,\n                  dateFormat: 'yy/mm/dd',\n                },\n              }),\n            ],\n          },\n        ],\n      );\n    } else if (type === ReminderType.ODOMETER) {\n      this.formFields = this.createBaseReminderForm(\n        'Odometer Reminder',\n        [\n          { label: 'At specific odometer', value: 'once' },\n          { label: 'Every X kilometers', value: 'repeating' },\n        ],\n        // Once field creator\n        () => {\n          return {\n            name: 'trigger',\n            key: 'trigger',\n            type: 'group',\n            fields: [\n              createNumberField('value', 'Odometer', undefined, {\n                name: 'value',\n                validations: [\n                  {\n                    name: 'required',\n                    validator: Validators.required,\n                    message: 'Odometer is required',\n                  },\n                ],\n              }),\n            ],\n          };\n        },\n        // Repeating fields creator\n        () => [\n          createNumberField('kilometres', 'Kilometres', undefined, {\n            name: 'kilometres',\n            validations: [\n              {\n                name: 'required',\n                validator: Validators.required,\n                message: 'Kilometres is required',\n              },\n            ],\n          }),\n          this.createResetTypeDropdown(type),\n        ],\n      );\n    } else if (type === ReminderType.ENGINE_HOURS) {\n      this.formFields = this.createBaseReminderForm(\n        'Engine Hours Reminder',\n        [\n          { label: 'At specific hours', value: 'once' },\n          { label: 'Every X hours', value: 'repeating' },\n        ],\n        // Once field creator\n        () => {\n          return {\n            name: 'trigger',\n            key: 'trigger',\n            type: 'group',\n            fields: [\n              createNumberField('value', 'Engine Hours', undefined, {\n                name: 'value',\n                validations: [\n                  {\n                    name: 'required',\n                    validator: Validators.required,\n                    message: 'Engine hours is required',\n                  },\n                ],\n              }),\n            ],\n          };\n        },\n        // Repeating fields creator\n        () => [\n          {\n            name: 'trigger',\n            key: 'trigger',\n            type: 'group',\n            fields: [\n              createNumberField('value', 'Hours', undefined, {\n                name: 'value',\n                validations: [\n                  {\n                    name: 'required',\n                    validator: Validators.required,\n                    message: 'Hours is required',\n                  },\n                ],\n              }),\n            ],\n          },\n          this.createResetTypeDropdown(type),\n        ],\n      );\n    }\n  }\n\n  /**\n   * Get display name for reminder type\n   */\n  getReminderTypeDisplay(type: string): string {\n    switch (type) {\n      case ReminderType.ODOMETER:\n        return 'Odometer';\n      case ReminderType.ENGINE_HOURS:\n        return 'Engine Hours';\n      case ReminderType.TIME_BASED:\n        return 'Time Based';\n      default:\n        return 'Unknown Type';\n    }\n  }\n\n  /**\n   * Handle reminder submission from modal\n   */\n  onReminderSubmit(reminder: Partial<ReminderListItem>): void {\n    const entity = this.entity();\n    if (isNullOrUndefined(entity?.id)) return;\n    // Create a new reminder with form data\n    const newReminder = {\n      name: reminder.name,\n      target: {\n        type: 'asset',\n        id: entity.id,\n        name: entity.name,\n      },\n      type: this.currentReminderType(),\n      mode: reminder.mode,\n      timeZoneId:\n        reminder.timeZoneId ??\n        this.authDataService.getUserProfile()?.timeZoneId,\n      trigger: reminder.trigger\n        ? { ...reminder.trigger, value: `${reminder.trigger.value}` }\n        : undefined,\n      reset: reminder.reset ?? {\n        type: 'none',\n        counter: 1,\n        daily: { recurrence: 1 },\n        weekly: {\n          days: [...Array(7).keys()].map((x) => x),\n        },\n        monthly: {\n          months: [...Array(12).keys()].map((x) => ++x), // index starts at 1\n          day: 1,\n        },\n      },\n      ownerId: entity?.owner.id,\n      enabled: reminder.mode !== 'once',\n    };\n\n    // Add to new reminders list\n    this.newReminders.set([...this.newReminders(), newReminder]);\n\n    // Close modal\n    this.showReminderModal.set(false);\n    this.resetModal();\n  }\n\n  /**\n   * Delete a reminder\n   */\n  deleteReminder(reminder: Partial<ReminderListItem>): void {\n    // If it's a new reminder (not yet saved), just remove from newReminders array\n    if (isNullOrUndefined(reminder.id)) {\n      this.newReminders.set(this.newReminders().filter((r) => r !== reminder));\n    }\n    // If it's an existing reminder, mark it for deletion\n    else if (isDefined(reminder.id)) {\n      this.deletedReminderIds.set([...this.deletedReminderIds(), reminder.id]);\n      // The sortedReminders computed will handle filtering this out\n    }\n\n    this.messageService.add({\n      severity: 'info',\n      summary: 'Reminder Deleted',\n      detail: `Reminder \"${reminder.name}\" has been marked for deletion.`,\n    });\n  }\n\n  /**\n   * Reset all tracked changes\n   */\n  resetChanges(): void {\n    this.newReminders.set([]);\n    this.deletedReminderIds.set([]);\n  }\n\n  /**\n   * Save all changes (create and delete)\n   */\n  saveAllChanges(): void {\n    const asset = this.entity();\n    if (isNullOrUndefined(asset?.id)) return;\n\n    this.isLoadingAsset.set(true);\n\n    // Create all new reminders\n    const createObservables = this.newReminders().map((reminder) => {\n      const reminderData = {\n        ...reminder,\n        ownerId: asset.owner.id,\n      };\n      return this.entitiesService.createReminder(reminderData);\n    });\n\n    // Delete all marked reminders\n    const deleteObservables = this.deletedReminderIds().map((id) => {\n      return this.entitiesService.deleteReminder(id);\n    });\n\n    // Combine all observables\n    forkJoin({\n      creates: !isEmpty(createObservables)\n        ? forkJoin(createObservables)\n        : of(null),\n      deletes: !isEmpty(deleteObservables)\n        ? forkJoin(deleteObservables)\n        : of(null),\n    })\n      .pipe(\n        takeUntilDestroyed(this.destroyRef),\n        finalize(() => this.isLoadingAsset.set(false)),\n        catchError(() => {\n          this.messageService.add({\n            severity: 'error',\n            summary: 'Error',\n            detail: 'Failed to save reminders',\n          });\n\n          return of(null);\n        }),\n      )\n      .subscribe({\n        next: () => {\n          this.messageService.add({\n            severity: 'success',\n            summary: 'Success',\n            detail: 'Reminders updated successfully',\n          });\n\n          // Reload reminders to get the updated list\n          this.loadedAssetId = null;\n          this.loadReminders(asset);\n\n          this.isFormEditable.set(false);\n          this.isSubmitting.set(false);\n          this.broadcastService.broadcast('entity-updated', {\n            entityType: 'asset',\n            entityId: asset.id,\n          });\n        },\n        error: () => {\n          this.isFormEditable.set(true);\n          this.isSubmitting.set(false);\n        },\n      });\n  }\n\n  protected override submitChanges(\n    _formData: Record<string, string | number>,\n  ): void {\n    // We're using our custom saveAllChanges method instead\n    this.saveAllChanges();\n  }\n\n  onCancel(): void {\n    this.isFormEditable.set(false);\n    this.resetChanges();\n  }\n}\n","<div class=\"card pt-2\">\n  <div class=\"mb-4 p-2 flex justify-start items-center\">\n    <span\n      class=\"pi pi-clock !text-[2.5rem]\"\n      [ngClass]=\"{ 'icon-primary': isFormEditable() }\"\n      aria-label=\"share icon\"\n    ></span>\n\n    <div class=\"pl-6 flex-1\">\n      <div class=\"flex justify-between items-center\">\n        <h2 class=\"text-xl font-semibold m-0\">Reminders</h2>\n        @if (!isFormEditable()) {\n          <div class=\"icon-light\">\n            <span\n              class=\"pi pi-pen-to-square action hover !text-2xl\"\n              [attr.aria-label]=\"'Edit reminders'\"\n              (click)=\"onEdit()\"\n              (keydown.enter)=\"onEdit()\"\n            ></span>\n          </div>\n        }\n      </div>\n      <span>Set reminders on asset.</span>\n    </div>\n  </div>\n\n  <!-- Edit Mode -->\n  @if (isFormEditable()) {\n    <div class=\"p-field p-2 flex align-items-center gap-2\">\n      <label for=\"\" class=\"w-1/3 flex-shrink-0\">Reminders</label>\n      <div class=\"flex flex-col justify-end w-full\">\n        <div class=\"flex-grow-1 flex flex-col\">\n          @if (sortedReminders().length === 0) {\n            <p-card />\n          }\n\n          @for (item of sortedReminders(); track item) {\n            <p-card styleClass=\"mb-2\">\n              <div class=\"flex flex-row justify-between\">\n                <div>\n                  <span class=\"px-4\"> {{ item?.['name'] }}</span>\n                </div>\n\n                <div class=\"icon-light\">\n                  <span\n                    class=\"pi pi-trash action hover !text-xl\"\n                    aria-label=\"'Delete Reminder'\"\n                    (click)=\"deleteReminder(item)\"\n                    (keydown.enter)=\"deleteReminder(item)\"\n                  ></span>\n                </div>\n              </div>\n            </p-card>\n          }\n\n          <div class=\"w-full flex justify-end pt-2\">\n            <p-button\n              #addReminderBtn\n              label=\"Add Reminder\"\n              severity=\"secondary\"\n              styleClass=\"p-2\"\n              icon=\"pi pi-chevron-down\"\n              iconPos=\"right\"\n              (onClick)=\"addReminderMenu.toggle($event)\"\n            ></p-button>\n            <p-menu\n              #addReminderMenu\n              [popup]=\"true\"\n              [model]=\"reminderOptions\"\n              appendTo=\"body\"\n              (onShow)=\"onAddReminderMenuShow()\"\n              styleClass=\"origin-top-right\"\n            ></p-menu>\n          </div>\n\n          <div class=\"flex justify-end gap-2 mt-4\">\n            <p-button\n              type=\"button\"\n              label=\"Cancel\"\n              severity=\"secondary\"\n              (onClick)=\"onCancel()\"\n            />\n\n            <p-button\n              type=\"submit\"\n              label=\"Save\"\n              severity=\"primary\"\n              [loading]=\"isLoadingAsset()\"\n              [disabled]=\"!hasChanges()\"\n              (onClick)=\"saveAllChanges()\"\n            />\n          </div>\n        </div>\n      </div>\n    </div>\n  }\n  <!-- View Mode -->\n  @else {\n    <app-grid\n      [data]=\"reminders()\"\n      [columns]=\"columns\"\n      [showGridLines]=\"false\"\n      [hideHeader]=\"true\"\n      tableStyleClass=\"info-display !w-auto\"\n    ></app-grid>\n  }\n</div>\n\n<!-- Add/Edit Shared With Modal -->\n@if (showReminderModal()) {\n  <app-dynamic-form-modal\n    [visible]=\"showReminderModal()\"\n    [header]=\"currentModalTitle()\"\n    [fields]=\"formFields\"\n    [actions]=\"actions\"\n    [styleClass]=\"'w-[40rem]'\"\n    (modalClose)=\"showReminderModal.set(false)\"\n    (formSubmit)=\"onReminderSubmit($event)\"\n  >\n    <div formHeader>\n      <p class=\"mt-2 mb-4 muted\">\n        {{ formHeader }}\n      </p>\n    </div>\n  </app-dynamic-form-modal>\n}\n","import {\n  Component,\n  computed,\n  effect,\n  inject,\n  OnInit,\n  signal,\n} from '@angular/core';\nimport { takeUntilDestroyed } from '@angular/core/rxjs-interop';\nimport {\n  AssetAnalogParameter,\n  AssetResponse,\n  AssetTemperatureParameter,\n  EntitiesService,\n  IoTypeListItem,\n} from '../../../../../api';\nimport {\n  MeasurementUnitType,\n  createNumberField,\n  createDropdownField,\n  FormAction,\n} from '../../../../../shared/models';\nimport { MeasurementUnitsService } from '../../../../../shared/services/measurement-units/measurement-units.service';\nimport {\n  isDefined,\n  isEmpty,\n  isNullOrUndefined,\n  isString,\n} from '../../../../../shared/utils';\nimport { EntitySectionBaseComponent } from '../../base';\nimport { CommonModule } from '@angular/common';\nimport { FormGroup, ReactiveFormsModule } from '@angular/forms';\nimport { ButtonModule } from 'primeng/button';\nimport { GridComponent } from '../../../../../shared/components/grid/grid.component';\nimport { DynamicFormModalComponent } from '../../../../../shared/components/forms/dynamic-form-modal/dynamic-form-modal.component';\nimport { CardModule } from 'primeng/card';\nimport { DEFAULT_LIST_SIZE } from '../../../../../core/models';\nimport { UtilityService } from '../../../../../core/services/utility.service';\nimport { ApiSchemaService } from '../../../../../core/services/api-schema.service';\nimport { combineLatest, finalize } from 'rxjs';\nimport {\n  AnalogTriggerListItem,\n  TemperatureTriggerListItem,\n} from '../../../models';\n\n@Component({\n  selector: 'app-asset-analog-triggers-section',\n  imports: [\n    CommonModule,\n    ReactiveFormsModule,\n    ButtonModule,\n    GridComponent,\n    DynamicFormModalComponent,\n    CardModule,\n  ],\n  templateUrl: './asset-analog-triggers-section.component.html',\n  styleUrl: './asset-analog-triggers-section.component.scss',\n})\nexport class AssetAnalogTriggersSectionComponent\n  extends EntitySectionBaseComponent<AssetResponse>\n  implements OnInit\n{\n  private readonly entitiesService = inject(EntitiesService);\n  private readonly measurementUnitsService = inject(MeasurementUnitsService);\n  private readonly utilityService = inject(UtilityService);\n  private readonly apiSchemaService = inject(ApiSchemaService);\n\n  private currentModalType: 'analog' | 'temperature' | null = null;\n\n  protected readonly selectOptionsLoaded = signal<boolean>(false);\n  selectOptions: Record<\n    string,\n    { label: string; value: string; type: string }[]\n  > = {};\n\n  readonly analogTriggers = signal<AnalogTriggerListItem[]>([]);\n  readonly temperatureTriggers = signal<TemperatureTriggerListItem[]>([]);\n\n  readonly assetAnalogAndTemperatureTriggersList = computed(() => {\n    // Use working copies when in edit mode, original when in view mode\n\n    return [\n      {\n        key: 'Analogs',\n        value:\n          this.analogTriggers().length > 0\n            ? this.analogTriggers()\n                .map((analog) => analog.name)\n                .join(', ')\n            : 'None',\n      },\n      {\n        key: 'Temperature',\n        value:\n          this.temperatureTriggers().length > 0\n            ? this.temperatureTriggers()\n                .map((temp) => temp.name)\n                .join(', ')\n            : 'None',\n      },\n    ];\n  });\n\n  override readonly actions: FormAction[] = [\n    {\n      label: 'Cancel',\n      action: () => {\n        this.showModal = false;\n      },\n      severity: 'secondary',\n    },\n    {\n      label: 'Ok',\n      action: (form: FormGroup) => {\n        if (form.valid) {\n          const formData = form.value;\n\n          // Get IO Type name based on selected ID\n          let ioTypeName = '';\n          if (this.currentModalType === 'analog') {\n            const selectedOption = this.selectOptions?.[\n              'analogInputTypes'\n            ]?.find((opt) => opt.value === formData.id);\n            ioTypeName = selectedOption?.label ?? '';\n            formData.ioType = selectedOption?.type ?? '';\n            formData.name = formData.name ?? ioTypeName;\n          } else if (this.currentModalType === 'temperature') {\n            const selectedOption = this.selectOptions?.[\n              'temperatureInputTypes'\n            ]?.find((opt) => opt.value === formData.id);\n            ioTypeName = selectedOption?.label ?? '';\n            formData.ioType = selectedOption?.type ?? '';\n            formData.name = formData.name ?? ioTypeName;\n          }\n\n          // Create new item with name from IO type\n          const newItem: AnalogTriggerListItem = {\n            id: formData.id,\n            data: formData,\n            name: ioTypeName,\n            description: this.generateDescription(formData),\n          };\n\n          // Add new item\n          if (this.currentModalType === 'analog') {\n            this.analogTriggers.update((triggers) => [...triggers, newItem]);\n          } else if (this.currentModalType === 'temperature') {\n            this.temperatureTriggers.update((triggers) => [\n              ...triggers,\n              newItem,\n            ]);\n          }\n\n          this.showModal = false;\n        }\n      },\n      severity: 'primary',\n      disabled: (form?: FormGroup) =>\n        !(form?.valid ?? false) || (form?.pristine ?? true),\n    },\n  ];\n\n  showModal = false;\n  ioTypes: IoTypeListItem[] = [];\n  modalTitle = '';\n\n  constructor() {\n    super();\n\n    // Setup initial columns\n    this.columns = [\n      { field: 'key', header: '', transform: 'uppercase' },\n      { field: 'value', header: '' },\n    ];\n\n    // Initialize signals from entity data\n    effect(() => {\n      const asset = this.entity();\n      if (asset) {\n        // Initialize with asset data\n        const analogList = (asset.parameters?.analogs || []).map((analog) =>\n          this.analogToListItem(analog),\n        );\n        const temperatureList = (asset.parameters?.temperatures || []).map(\n          (temp) => this.temperatureToListItem(temp),\n        );\n\n        this.analogTriggers.set(analogList);\n        this.temperatureTriggers.set(temperatureList);\n      }\n    });\n  }\n\n  ngOnInit(): void {\n    this.loadSelectOptions();\n  }\n\n  private generateDescription(\n    data: AssetAnalogParameter | AssetTemperatureParameter,\n  ): string {\n    return `Range of ${data.minRange} to ${data.maxRange} with a debounce of ${data.rangeDebounce} positions`;\n  }\n\n  private loadSelectOptions() {\n    const asset = this.entity();\n    if (!isDefined(asset) || !isString(asset.id)) {\n      return;\n    }\n    combineLatest([\n      this.loadIOTypes(asset.owner.id, ['analog_input', 'can_input']),\n      this.loadIOTypes(asset.owner.id, ['temperature_input']),\n    ])\n      .pipe(takeUntilDestroyed(this.destroyRef))\n      .subscribe(([ioTypes, temperatureIoTypes]) => {\n        this.selectOptions = {\n          analogInputTypes: ioTypes.items\n            .map((item) => ({\n              label: item.name ?? '',\n              value: item.id,\n              type:\n                this.apiSchemaService.getEntityType<\n                  Record<string, unknown>,\n                  IoTypeListItem.TypeEnum\n                >(item as Record<string, unknown>, 'iotype') ?? '',\n            }))\n            .sort((a, b) => a.label.localeCompare(b.label)),\n          temperatureInputTypes: temperatureIoTypes.items\n            .map((item) => ({\n              label: item.name ?? '',\n              value: item.id,\n              type:\n                this.apiSchemaService.getEntityType<\n                  Record<string, unknown>,\n                  IoTypeListItem.TypeEnum\n                >(item as Record<string, unknown>, 'iotype') ?? '',\n            }))\n            .sort((a, b) => a.label.localeCompare(b.label)),\n        };\n        this.selectOptionsLoaded.set(true);\n      });\n  }\n\n  private loadIOTypes(owner: string, types: string[]) {\n    const typePropertyKey = this.apiSchemaService.getTypePropertyKey('Iotype');\n    const filters = isEmpty(types)\n      ? {\n          state: {\n            value: 'active',\n            operator: 'in',\n          },\n        }\n      : {\n          state: {\n            value: 'active',\n            operator: '=',\n          },\n          [typePropertyKey]: {\n            value: types,\n            operator: 'in',\n          },\n        };\n    return this.entitiesService\n      .listIoTypes(\n        owner,\n        true,\n        0,\n        DEFAULT_LIST_SIZE,\n        'name',\n        this.utilityService.constructRqlFilter(filters),\n      )\n      .pipe(takeUntilDestroyed(this.destroyRef));\n  }\n\n  protected override updateFormFields(): void {\n    // No form fields to update in this section\n  }\n\n  protected override submitChanges(): void {\n    const asset = this.entity();\n    if (isNullOrUndefined(asset)) return;\n    this.isSubmitting.set(true);\n\n    // Use the prepared data for the API update\n    this.handleEntityUpdate(\n      this.entitiesService\n        .updateAsset(asset.id, {\n          parameters: {\n            analogs: this.analogTriggers().map((item) => item.data),\n            temperatures: this.temperatureTriggers().map((item) => item.data),\n          },\n        })\n        .pipe(\n          takeUntilDestroyed(this.destroyRef),\n          finalize(() => this.isSubmitting.set(false)),\n        ),\n      'Asset Analog triggers updated successfully',\n    );\n  }\n\n  updateAnalogFormFields(): void {\n    this.formFields = [\n      createDropdownField(\n        'id',\n        'Analog Input',\n        this.selectOptions?.['analogInputTypes'] ?? [],\n        '',\n        {\n          layout: 'horizontal',\n          labelWidth: '1/3',\n          name: 'id',\n          props: {\n            appendTo: 'body',\n          },\n        },\n      ),\n      createNumberField('minRange', 'Min Range', 0, {\n        layout: 'horizontal',\n        labelWidth: '1/3',\n        name: 'minRange',\n      }),\n      createNumberField('maxRange', 'Max Range', 100, {\n        layout: 'horizontal',\n        labelWidth: '1/3',\n        name: 'maxRange',\n      }),\n      createNumberField('rangeDebounce', 'Range Debounce', 0, {\n        layout: 'horizontal',\n        labelWidth: '1/3',\n        name: 'rangeDebounce',\n      }),\n      createNumberField('decValue', 'Drop Amount', 0, {\n        layout: 'horizontal',\n        labelWidth: '1/3',\n        name: 'decValue',\n      }),\n      createNumberField('incValue', 'Increase Amount', 0, {\n        layout: 'horizontal',\n        labelWidth: '1/3',\n        name: 'incValue',\n      }),\n    ];\n  }\n\n  updateTemperatureFormFields(): void {\n    this.formFields = [\n      createDropdownField(\n        'id',\n        'Temperature Input',\n        this.selectOptions?.['temperatureInputTypes'] ?? [],\n        '',\n        {\n          layout: 'horizontal',\n          labelWidth: '1/3',\n          name: 'id',\n          props: {\n            appendTo: 'body',\n          },\n        },\n      ),\n      createNumberField('minRange', 'Min Range', 0, {\n        layout: 'horizontal',\n        labelWidth: '1/3',\n        name: 'minRange',\n        props: {\n          suffix: this.measurementUnitsService.unitSymbol(\n            MeasurementUnitType.TEMPERATURE,\n          ),\n        },\n      }),\n      createNumberField('maxRange', 'Max Range', 100, {\n        layout: 'horizontal',\n        labelWidth: '1/3',\n        name: 'maxRange',\n        props: {\n          suffix: this.measurementUnitsService.unitSymbol(\n            MeasurementUnitType.TEMPERATURE,\n          ),\n        },\n      }),\n      createNumberField('rangeDebounce', 'Range Debounce', 0, {\n        layout: 'horizontal',\n        labelWidth: '1/3',\n        name: 'rangeDebounce',\n      }),\n    ];\n  }\n\n  onClose() {\n    this.showModal = false;\n  }\n\n  getDescription(\n    analog: AssetAnalogParameter | AssetTemperatureParameter,\n  ): string {\n    return `Range of ${analog.minRange} to ${analog.maxRange} with a debounce of ${analog.rangeDebounce} positions`;\n  }\n\n  analogToListItem(analog: AssetAnalogParameter) {\n    return {\n      id: analog.id,\n      name: analog.name,\n      description: this.getDescription(analog),\n      data: analog,\n    };\n  }\n\n  temperatureToListItem(temp: AssetTemperatureParameter) {\n    return {\n      id: temp.id,\n      name: temp.name,\n      description: this.getDescription(temp),\n      data: temp,\n    };\n  }\n\n  openAnalogModal() {\n    this.currentModalType = 'analog';\n    this.modalTitle = 'Analog Event Trigger';\n    this.updateAnalogFormFields();\n    this.showModal = true;\n  }\n\n  openTemperatureModal() {\n    this.currentModalType = 'temperature';\n    this.modalTitle = 'Temperature Event Trigger';\n    this.updateTemperatureFormFields();\n    this.showModal = true;\n  }\n\n  deleteAnalogTrigger(item: AnalogTriggerListItem) {\n    this.analogTriggers.update((triggers) =>\n      triggers.filter((trigger) => trigger !== item),\n    );\n  }\n\n  deleteTemperatureTrigger(item: TemperatureTriggerListItem) {\n    this.temperatureTriggers.update((triggers) =>\n      triggers.filter((trigger) => trigger !== item),\n    );\n  }\n\n  protected override cancelEdit(): void {\n    const asset = this.entity();\n    if (asset) {\n      const analogList = (asset.parameters?.analogs || []).map((analog) =>\n        this.analogToListItem(analog),\n      );\n      const temperatureList = (asset.parameters?.temperatures || []).map(\n        (temp) => this.temperatureToListItem(temp),\n      );\n\n      this.analogTriggers.set(analogList);\n      this.temperatureTriggers.set(temperatureList);\n    }\n  }\n}\n","<div class=\"card pt-2\">\n  <div class=\"mb-4 p-2 flex justify-start items-center\">\n    <span\n      class=\"pi pi-wave-pulse !text-[2.5rem]\"\n      [ngClass]=\"{ 'icon-primary': isFormEditable() }\"\n      [attr.aria-label]=\"'pulse icon'\"\n    ></span>\n\n    <div class=\"pl-6 flex-1\">\n      <div class=\"flex justify-between items-center\">\n        <h2 class=\"text-xl font-semibold m-0\">Analog Triggers</h2>\n        @if (!isFormEditable()) {\n          <div class=\"icon-light\">\n            <span\n              class=\"pi pi-pen-to-square action hover !text-2xl\"\n              aria-label=\"Edit analog triggers\"\n              (click)=\"onEdit()\"\n              (keydown.enter)=\"onEdit()\"\n            ></span>\n          </div>\n        }\n      </div>\n      <span\n        >Define when speed, idle and trip limit analogs will be generated for\n        this asset.</span\n      >\n    </div>\n  </div>\n  <!-- Edit Mode -->\n  @if (isFormEditable()) {\n    <div class=\"p-field p-2 flex align-items-center gap-2\">\n      <label for=\"\" class=\"w-1/3 flex-shrink-0\">Analogs</label>\n      <div class=\"flex flex-col justify-end w-full\">\n        <div class=\"flex-grow-1 flex flex-col\">\n          @if (analogTriggers().length === 0) {\n            <p-card\n              styleClass=\"!rounded-none !border !border-solid card-border\"\n            />\n          }\n\n          @for (item of analogTriggers(); track $index) {\n            <p-card\n              styleClass=\"!rounded-none !border !border-solid card-border\"\n            >\n              <div class=\"flex flex-row justify-between items-center gap-2\">\n                <span\n                  class=\"pi pi-wave-pulse !text-xl\"\n                  [attr.aria-label]=\"'pulse icon'\"\n                ></span>\n                <div class=\"flex-1 flex flex-col justify-content-center\">\n                  <span> {{ item.name }} </span>\n                  <div class=\"text-base muted\">\n                    <p>{{ item.description }}</p>\n                  </div>\n                </div>\n\n                <div class=\"icon-light\">\n                  <span\n                    class=\"pi pi-trash action hover !text-xl\"\n                    aria-label=\"'Delete Analog Trigger'\"\n                    (click)=\"deleteAnalogTrigger(item)\"\n                    (keydown.enter)=\"deleteAnalogTrigger(item)\"\n                  ></span>\n                </div>\n              </div>\n            </p-card>\n          }\n\n          <div class=\"text-right mt-3 mb-4\">\n            <p-button\n              (onClick)=\"openAnalogModal()\"\n              severity=\"secondary\"\n              label=\"Add\"\n            />\n          </div>\n        </div>\n      </div>\n    </div>\n\n    <div class=\"p-field p-2 flex align-items-center gap-2\">\n      <label for=\"\" class=\"w-1/3 flex-shrink-0\">Temperatures</label>\n      <div class=\"flex flex-col justify-end w-full\">\n        <div class=\"flex-grow-1 flex flex-col\">\n          @if (analogTriggers().length === 0) {\n            <p-card\n              styleClass=\"!rounded-none !border !border-solid card-border\"\n            />\n          }\n\n          @for (item of temperatureTriggers(); track $index) {\n            <p-card\n              styleClass=\"!rounded-none !border !border-solid card-border\"\n            >\n              <div class=\"flex flex-row justify-between items-center gap-2\">\n                <svg\n                  class=\"custom-icon-svg w-[1.25rem] h-[1.25rem]\"\n                  aria-label=\"temperature icon\"\n                >\n                  <use\n                    [attr.href]=\"\n                      'assets/sprites/sprite.svg#temperature-half-solid'\n                    \"\n                  ></use>\n                </svg>\n                <div class=\"flex-1 flex flex-col justify-content-center\">\n                  <span> {{ item.name }} </span>\n                  <div class=\"text-base muted\">\n                    <p>{{ item.description }}</p>\n                  </div>\n                </div>\n\n                <div class=\"icon-light\">\n                  <span\n                    class=\"pi pi-trash action hover !text-xl\"\n                    aria-label=\"'Delete Temperature Trigger'\"\n                    (click)=\"deleteTemperatureTrigger(item)\"\n                    (keydown.enter)=\"deleteTemperatureTrigger(item)\"\n                  ></span>\n                </div>\n              </div>\n            </p-card>\n          }\n\n          <div class=\"text-right mt-3 mb-4\">\n            <p-button\n              (onClick)=\"openTemperatureModal()\"\n              severity=\"secondary\"\n              label=\"Add\"\n            />\n          </div>\n        </div>\n      </div>\n    </div>\n    <div class=\"flex justify-end gap-2 mt-4\">\n      <p-button\n        type=\"button\"\n        label=\"Cancel\"\n        severity=\"secondary\"\n        (onClick)=\"isFormEditable.set(false); cancelEdit()\"\n      />\n\n      <p-button\n        type=\"submit\"\n        label=\"Save\"\n        severity=\"primary\"\n        [loading]=\"isSubmitting()\"\n        (onClick)=\"submitChanges()\"\n      />\n    </div>\n  }\n  <!-- View Mode -->\n  @else {\n    <app-grid\n      [data]=\"assetAnalogAndTemperatureTriggersList()\"\n      [columns]=\"columns\"\n      [showGridLines]=\"false\"\n      [hideHeader]=\"true\"\n      tableStyleClass=\"info-display !w-auto\"\n    ></app-grid>\n  }\n</div>\n\n<!-- Add/Edit Shared With Modal -->\n@if (showModal) {\n  <app-dynamic-form-modal\n    [visible]=\"showModal\"\n    [header]=\"modalTitle\"\n    [fields]=\"formFields\"\n    [actions]=\"actions\"\n    [styleClass]=\"'w-[40rem]'\"\n    (modalClose)=\"onClose()\"\n  >\n  </app-dynamic-form-modal>\n}\n","import { CommonModule } from '@angular/common';\nimport { Component, computed, inject, OnInit, signal } from '@angular/core';\nimport { ReactiveFormsModule, Validators } from '@angular/forms';\n\nimport { ButtonModule } from 'primeng/button';\nimport { CardModule } from 'primeng/card';\n\nimport {\n  AssetResponse,\n  EntitiesService,\n  IoTypeListItem,\n  AssetAnalogParameter,\n  AssetTemperatureParameter,\n  AssetCurfewParameter,\n  AssetCreateRequest,\n  AssetParameters,\n} from '../../../../../api';\nimport { AppListsTranslations } from '../../../../../core/models';\nimport { UtilityService } from '../../../../../core/services/utility.service';\nimport { GridComponent } from '../../../../../shared/components/grid/grid.component';\nimport {\n  createDropdownField,\n  createNumberField,\n  MeasurementUnitType,\n  createModalListField,\n  FormFieldConfig,\n  ListFieldModalConfig,\n  createDateField,\n  createListboxField,\n  createTextField,\n} from '../../../../../shared/models';\nimport { MeasurementUnitsService } from '../../../../../shared/services/measurement-units/measurement-units.service';\nimport { isNullOrUndefined } from '../../../../../shared/utils';\nimport { WEEKDAY_OPTIONS } from '../../../models';\nimport { EntitySectionBaseComponent } from '../../base';\nimport { DynamicFormComponent } from '../../../../../shared/components/forms/dynamic-form/dynamic-form.component';\nimport { ModalListFormComponent } from '../../../../../shared/components/forms/modal-list-form/modal-list-form.component';\nimport { HttpClient } from '@angular/common/http';\nimport { Observable } from 'rxjs';\nimport { v4 as uuidv4 } from 'uuid';\nimport { EntityOperationRegistryService } from '../../../services/entity/entity-operation-registry.service';\nimport { AuthDataService } from '../../../../../core/services/auth-data.service';\n\n@Component({\n  selector: 'app-asset-curfew-events-section',\n  imports: [\n    CommonModule,\n    ReactiveFormsModule,\n    ButtonModule,\n    GridComponent,\n    DynamicFormComponent,\n    CardModule,\n  ],\n  templateUrl: './asset-curfew-events-section.component.html',\n  styleUrl: './asset-curfew-events-section.component.scss',\n})\nexport class AssetCurfewEventsSectionComponent\n  extends EntitySectionBaseComponent<AssetResponse>\n  implements OnInit\n{\n  private readonly http = inject(HttpClient);\n  private readonly entitiesService = inject(EntitiesService);\n  private readonly measurementUnitsService = inject(MeasurementUnitsService);\n  private readonly utilityService = inject(UtilityService);\n  private readonly operationRegistry = inject(EntityOperationRegistryService);\n  private readonly authDataService = inject(AuthDataService);\n\n  timezones: { label: string; value: string }[] = [];\n\n  protected readonly selectOptionsLoaded = signal<boolean>(false);\n  selectOptions: Record<\n    string,\n    { label: string; value: string; type: string }[]\n  > = {};\n\n  readonly assetCurfewEvents = computed(() => {\n    const asset = this.entity();\n    const assetCurfewEvents = asset?.parameters?.curfews;\n    if (isNullOrUndefined(assetCurfewEvents)) return [];\n\n    return [\n      {\n        key: 'Working Hours',\n        value: assetCurfewEvents\n          .map((event) => `${event.from} - ${event.to}`)\n          .join(', '),\n      },\n    ];\n  });\n\n  showModal = false;\n  ioTypes: IoTypeListItem[] = [];\n  modalTitle = '';\n\n  constructor() {\n    super();\n\n    // Setup initial columns\n    this.columns = [\n      { field: 'key', header: '', transform: 'uppercase' },\n      { field: 'value', header: '' },\n    ];\n  }\n\n  ngOnInit(): void {\n    this.loadTimezones();\n  }\n\n  private generateDescription(\n    data: AssetAnalogParameter | AssetTemperatureParameter,\n  ): string {\n    return `Range of ${data.minRange} to ${data.maxRange} with a debounce of ${data.rangeDebounce} positions`;\n  }\n\n  private loadTimezones(): void {\n    this.http\n      .get<{ id: string; name: string }[]>('/assets/docs/timezones.json')\n      .subscribe((data) => {\n        this.timezones = data\n          .map((tz) => ({ label: tz.id, value: tz.id }))\n          .sort((a, b) => a.label.localeCompare(b.label));\n        this.updateFormFields();\n      });\n  }\n\n  protected override updateFormFields(): void {\n    const assetCurfewModalConfig: ListFieldModalConfig<AssetCurfewParameter> = {\n      modalComponent: ModalListFormComponent,\n      modalTitle: 'External Tab',\n      defaultItemProvider: () => ({\n        id: uuidv4(),\n        from: '00:00',\n        to: '23:59',\n        timeZoneId: this.authDataService.getUserProfile()?.timeZoneId ?? '',\n        days: WEEKDAY_OPTIONS.map((day) => day.value),\n      }),\n      listItemFormatter: (item) => {\n        const tabItem = item;\n        return {\n          id: tabItem.id,\n          title: `${tabItem.from} - ${tabItem.to}`,\n          display: `Between ${tabItem.from} and ${tabItem.to} on ${this.utilityService.getWeekdaysString(tabItem.days)}`,\n          icon: 'clock',\n        };\n      },\n\n      modalFields: (_item): FormFieldConfig[] => {\n        return [\n          createTextField('id', 'ID', _item?.id, {\n            name: 'id',\n            hidden: true,\n          }),\n          createDateField('from', 'From', '', {\n            name: 'from',\n            placeholder: 'Select time',\n            props: {\n              timeOnly: true,\n              showSeconds: false,\n            },\n            style: { width: '100%' },\n          }),\n          createDateField('to', 'To', '', {\n            name: 'to',\n            placeholder: 'Select time',\n            props: {\n              timeOnly: true,\n              showSeconds: false,\n            },\n            style: { width: '100%' },\n          }),\n          createDropdownField('timeZoneId', 'Time Zone', this.timezones, '', {\n            layout: 'horizontal',\n            labelWidth: '1/3',\n            placeholder: 'Select timezone',\n            name: 'timeZone',\n            props: {\n              appendTo: 'body',\n            },\n          }),\n          createListboxField('days', 'Weekdays', [], WEEKDAY_OPTIONS, {\n            name: 'days',\n            validations: [\n              {\n                name: 'required',\n                validator: Validators.required,\n                message: 'Days is required',\n              },\n            ],\n            props: {\n              checkmark: true,\n              multiple: true,\n            },\n          }),\n        ];\n      },\n      subHeader: AppListsTranslations['MODALS']['EXTERNAL-TABS']['DESC'],\n    };\n\n    this.formFields = [\n      createModalListField(\n        'curfews',\n        'Working Hours',\n        this.entity()?.parameters?.curfews ?? [],\n        {\n          layout: 'horizontal',\n          labelWidth: '1/3',\n          name: 'curfews',\n          props: {\n            modalConfig:\n              assetCurfewModalConfig as unknown as ListFieldModalConfig<unknown>,\n          },\n        },\n      ),\n    ];\n  }\n\n  override getUpdateMethod(): (\n    id: string,\n    data: AssetParameters,\n  ) => Observable<AssetResponse> {\n    return (\n      this.operationRegistry.getOperation<\n        AssetResponse | AssetCreateRequest,\n        AssetCreateRequest,\n        AssetResponse,\n        'update'\n      >('asset', 'update') ??\n      ((id, data) =>\n        this.entitiesService.updateAsset(id, {\n          parameters: data,\n        }))\n    );\n  }\n\n  updateAnalogFormFields(): void {\n    this.formFields = [\n      createDropdownField(\n        'id',\n        'Analog Input',\n        this.selectOptions?.['analogInputTypes'] ?? [],\n        '',\n        {\n          layout: 'horizontal',\n          labelWidth: '1/3',\n          name: 'id',\n          props: {\n            appendTo: 'body',\n          },\n        },\n      ),\n      createNumberField('minRange', 'Min Range', 0, {\n        layout: 'horizontal',\n        labelWidth: '1/3',\n        name: 'minRange',\n      }),\n      createNumberField('maxRange', 'Max Range', 100, {\n        layout: 'horizontal',\n        labelWidth: '1/3',\n        name: 'maxRange',\n      }),\n      createNumberField('rangeDebounce', 'Range Debounce', 0, {\n        layout: 'horizontal',\n        labelWidth: '1/3',\n        name: 'rangeDebounce',\n      }),\n      createNumberField('decValue', 'Drop Amount', 0, {\n        layout: 'horizontal',\n        labelWidth: '1/3',\n        name: 'decValue',\n      }),\n      createNumberField('incValue', 'Increase Amount', 0, {\n        layout: 'horizontal',\n        labelWidth: '1/3',\n        name: 'incValue',\n      }),\n    ];\n  }\n\n  updateTemperatureFormFields(): void {\n    this.formFields = [\n      createDropdownField(\n        'id',\n        'Temperature Input',\n        this.selectOptions?.['temperatureInputTypes'] ?? [],\n        '',\n        {\n          layout: 'horizontal',\n          labelWidth: '1/3',\n          name: 'id',\n          props: {\n            appendTo: 'body',\n          },\n        },\n      ),\n      createNumberField('minRange', 'Min Range', 0, {\n        layout: 'horizontal',\n        labelWidth: '1/3',\n        name: 'minRange',\n        props: {\n          suffix: this.measurementUnitsService.unitSymbol(\n            MeasurementUnitType.TEMPERATURE,\n          ),\n        },\n      }),\n      createNumberField('maxRange', 'Max Range', 100, {\n        layout: 'horizontal',\n        labelWidth: '1/3',\n        name: 'maxRange',\n        props: {\n          suffix: this.measurementUnitsService.unitSymbol(\n            MeasurementUnitType.TEMPERATURE,\n          ),\n        },\n      }),\n      createNumberField('rangeDebounce', 'Range Debounce', 0, {\n        layout: 'horizontal',\n        labelWidth: '1/3',\n        name: 'rangeDebounce',\n      }),\n    ];\n  }\n\n  onClose() {\n    this.showModal = false;\n  }\n\n  getDescription(\n    analog: AssetAnalogParameter | AssetTemperatureParameter,\n  ): string {\n    return `Range of ${analog.minRange} to ${analog.maxRange} with a debounce of ${analog.rangeDebounce} positions`;\n  }\n}\n","<div class=\"card pt-2\">\n  <div class=\"mb-4 p-2 flex justify-start items-center\">\n    <span\n      class=\"pi pi-clock !text-[2.5rem]\"\n      [ngClass]=\"{ 'icon-primary': isFormEditable() }\"\n      [attr.aria-label]=\"'clock icon'\"\n    ></span>\n\n    <div class=\"pl-6 flex-1\">\n      <div class=\"flex justify-between items-center\">\n        <h2 class=\"text-xl font-semibold m-0\">Working Hours</h2>\n        @if (!isFormEditable()) {\n          <div class=\"icon-light\">\n            <span\n              class=\"pi pi-pen-to-square action hover !text-2xl\"\n              aria-label=\"Edit working hours\"\n              (click)=\"onEdit()\"\n              (keydown.enter)=\"onEdit()\"\n            ></span>\n          </div>\n        }\n      </div>\n      <span\n        >Define the working hours of this asset in order to generate curfew\n        violation events.\n      </span>\n    </div>\n  </div>\n  @if (isFormEditable()) {\n    <app-dynamic-form\n      [fields]=\"formFields\"\n      [actions]=\"actions\"\n      (formSubmit)=\"onSubmit($event)\"\n    >\n    </app-dynamic-form>\n  } @else {\n    <app-grid\n      [data]=\"assetCurfewEvents()\"\n      [columns]=\"columns\"\n      [showGridLines]=\"false\"\n      [hideHeader]=\"true\"\n      tableStyleClass=\"info-display !w-auto\"\n    ></app-grid>\n  }\n</div>\n","import { CommonModule } from '@angular/common';\nimport { Component, computed, inject, OnInit, signal } from '@angular/core';\nimport { takeUntilDestroyed } from '@angular/core/rxjs-interop';\n\nimport { ButtonModule } from 'primeng/button';\nimport {\n  AssetResponse,\n  EntitiesService,\n  LabelListItem,\n  LabelListResponse,\n  LabelValuePayload,\n} from '../../../../../api';\nimport { DEFAULT_LIST_SIZE } from '../../../../../core/models';\nimport { DynamicFormComponent } from '../../../../../shared/components/forms/dynamic-form/dynamic-form.component';\nimport { GridComponent } from '../../../../../shared/components/grid/grid.component';\nimport { createAutocompleteField } from '../../../../../shared/models';\nimport {\n  isDefined,\n  isEmpty,\n  isNullOrUndefined,\n  isString,\n} from '../../../../../shared/utils';\nimport { EntitySectionBaseComponent } from '../../base';\nimport { UtilityService } from '../../../../../core/services/utility.service';\nimport { Subject, debounceTime, switchMap, of } from 'rxjs';\n\n@Component({\n  selector: 'app-asset-labels-section',\n  imports: [CommonModule, ButtonModule, GridComponent, DynamicFormComponent],\n  templateUrl: './asset-labels-section.component.html',\n  styleUrl: './asset-labels-section.component.scss',\n})\nexport class AssetLabelsSectionComponent\n  extends EntitySectionBaseComponent<AssetResponse>\n  implements OnInit\n{\n  private readonly entitiesService = inject(EntitiesService);\n  private readonly utilityService = inject(UtilityService);\n\n  readonly assetDetails = computed(() => {\n    const assetDetails = this.entity();\n    const availableLabels = this.labels();\n    if (!isDefined(assetDetails)) return [];\n\n    const mappedTripLabels = (assetDetails.defaultTripLabels || []).map(\n      (value) => {\n        const [rootLabel, subLabel] = value.split('/');\n        const label1 = availableLabels.find((x) => x.label === rootLabel);\n        let label2: LabelValuePayload | undefined;\n        if (label1?.values) {\n          label2 = label1.values.find((x) => x.label === subLabel);\n        }\n\n        const name = label1\n          ? [label1.name, label2?.name].filter((x) => isDefined(x)).join(': ')\n          : value;\n\n        return {\n          id: value,\n          name: name,\n        };\n      },\n    );\n\n    return [\n      {\n        key: 'Default Trip Labels',\n        value: mappedTripLabels.map((l) => l.name).join(', ') || 'None', // Display names, join if multiple\n      },\n    ];\n  });\n\n  private readonly searchDefaultLabelsSubject = new Subject<string>();\n  private readonly defaultLabelsSuggestions = signal<\n    LabelListItem[] | undefined\n  >([]);\n  labels = signal<LabelListItem[]>([]);\n\n  constructor() {\n    super();\n\n    // Setup initial columns\n    this.columns = [\n      { field: 'key', header: '', transform: 'uppercase' },\n      { field: 'value', header: '' },\n    ];\n  }\n\n  ngOnInit() {\n    this.loadLabels();\n    this.setupSearchDefaultLabels();\n    this.updateFormFields();\n  }\n\n  private loadLabels() {\n    const asset = this.entity();\n    if (!isDefined(asset) || !isString(asset.id)) {\n      this.labels.set([]);\n      return;\n    }\n\n    this.entitiesService\n      .listLabels(\n        asset.owner.id,\n        true,\n        0,\n        DEFAULT_LIST_SIZE,\n        'name',\n        'state=active',\n      )\n      .pipe(takeUntilDestroyed(this.destroyRef))\n      .subscribe((response) => {\n        this.labels.set(response.items);\n      });\n  }\n\n  private setupSearchDefaultLabels() {\n    this.searchDefaultLabelsSubject\n      .pipe(\n        debounceTime(300),\n        takeUntilDestroyed(this.destroyRef),\n        switchMap((searchTerm) => {\n          if (isNullOrUndefined(searchTerm)) {\n            return of({\n              count: 0,\n              offset: 0,\n              limit: DEFAULT_LIST_SIZE,\n              items: [],\n            } as LabelListResponse);\n          }\n\n          const filters = {\n            state: { value: 'active', operator: '=' },\n            name: { value: `*${searchTerm}*`, operator: '=' },\n          };\n          const rqlFilter = this.utilityService.constructRqlFilter(filters);\n\n          return this.entitiesService.listLabels(\n            this.entity()?.owner.id ?? '',\n            true,\n            0,\n            10,\n            'name',\n            rqlFilter,\n          );\n        }),\n      )\n      .subscribe((response: LabelListResponse) => {\n        this.defaultLabelsSuggestions.set(response.items);\n      });\n  }\n\n  private searchDefaultLabels(searchTerm: string) {\n    if (isNullOrUndefined(searchTerm)) {\n      this.defaultLabelsSuggestions.set([]);\n      return;\n    }\n    this.defaultLabelsSuggestions.set(undefined);\n    this.searchDefaultLabelsSubject.next(searchTerm);\n  }\n\n  protected override updateFormFields(): void {\n    const asset = this.entity();\n    this.formFields = [\n      createAutocompleteField(\n        'defaultLabels',\n        'Asset Rating',\n        asset?.ratingProfile?.name,\n        this.defaultLabelsSuggestions(),\n        this.searchDefaultLabels.bind(this),\n        {\n          layout: 'horizontal',\n          labelWidth: '1/3',\n          name: 'defaultLabels',\n          props: {\n            appendTo: 'body',\n            multiple: false,\n            field: 'name',\n            typeahead: true,\n            showEmptyMessage: true,\n            emptyMessage: 'No labels found',\n            completeOnFocus: false,\n          },\n        },\n      ),\n    ];\n  }\n\n  protected override submitChanges(\n    formData: Record<string, string | number>,\n  ): void {\n    const asset = this.entity();\n    if (isNullOrUndefined(asset)) return;\n    this.entitiesService\n      .updateAsset(asset.id, formData)\n      .pipe(takeUntilDestroyed(this.destroyRef))\n      .subscribe({\n        next: () => {\n          this.isFormEditable.set(false);\n          this.isSubmitting.set(false);\n          this.broadcastService.broadcast('entity-updated', {\n            entityType: 'asset',\n            entityId: asset.id,\n          });\n        },\n        error: () => {\n          this.isFormEditable.set(true);\n          this.isSubmitting.set(false);\n        },\n      });\n  }\n\n  searchLabel(query: string) {\n    if (isEmpty(query)) {\n      this.labels.set(this.labels());\n      return;\n    }\n\n    const filteredLabels = this.labels().filter(\n      (label) =>\n        ((label.name?.toLowerCase().includes(query.toLowerCase()) ?? false) ||\n          label.label?.toLowerCase().includes(query.toLowerCase())) ??\n        false,\n    );\n    this.labels.set(filteredLabels);\n  }\n}\n","<div class=\"card pt-2\">\n  <div class=\"mb-4 p-2 flex justify-start items-center\">\n    <span\n      class=\"pi pi-tag !text-[2.5rem]\"\n      [ngClass]=\"{ 'icon-primary': isFormEditable() }\"\n      [attr.aria-label]=\"'tag icon'\"\n    ></span>\n\n    <div class=\"pl-6 flex-1\">\n      <div class=\"flex justify-between items-center\">\n        <h2 class=\"text-xl font-semibold m-0\">Default Labels</h2>\n        @if (!isFormEditable()) {\n          <div class=\"icon-light\">\n            <span\n              class=\"pi pi-pen-to-square action hover !text-2xl\"\n              [attr.aria-label]=\"'Edit asset default labels'\"\n              (click)=\"onEdit()\"\n              (keydown.enter)=\"onEdit()\"\n            ></span>\n          </div>\n        }\n      </div>\n      <span\n        >Configure labels that will be applied to data from this asset by\n        default.</span\n      >\n    </div>\n  </div>\n  @if (isFormEditable()) {\n    <app-dynamic-form\n      [fields]=\"formFields\"\n      [actions]=\"actions\"\n      (formSubmit)=\"onSubmit($event)\"\n    >\n    </app-dynamic-form>\n  } @else {\n    <app-grid\n      [data]=\"assetDetails()\"\n      [columns]=\"columns\"\n      [showGridLines]=\"false\"\n      [hideHeader]=\"true\"\n      tableStyleClass=\"info-display !w-auto\"\n    ></app-grid>\n  }\n</div>\n","import {\n  Component,\n  computed,\n  effect,\n  inject,\n  input,\n  signal,\n} from '@angular/core';\nimport { takeUntilDestroyed } from '@angular/core/rxjs-interop';\n\nimport {\n  AssetListItem,\n  EntitiesService,\n  TelemetryStateResponse,\n} from '../../../../../api';\nimport {\n  createDateField,\n  createNumberField,\n  MeasurementUnitType,\n} from '../../../../../shared/models';\nimport {\n  isDefined,\n  isEmpty,\n  isNullOrUndefined,\n} from '../../../../../shared/utils';\nimport { EntitySectionBaseComponent } from '../../base';\nimport { MeasurementUnitsService } from '../../../../../shared/services/measurement-units/measurement-units.service';\nimport { CommonModule } from '@angular/common';\nimport { ButtonModule } from 'primeng/button';\nimport { DynamicFormComponent } from '../../../../../shared/components/forms/dynamic-form/dynamic-form.component';\nimport { GridComponent } from '../../../../../shared/components/grid/grid.component';\nimport { finalize } from 'rxjs';\n\n@Component({\n  selector: 'app-asset-counter-type-section',\n  imports: [CommonModule, ButtonModule, GridComponent, DynamicFormComponent],\n  templateUrl: './asset-counter-type-section.component.html',\n  styleUrl: './asset-counter-type-section.component.scss',\n})\nexport class AssetCounterTypeSectionComponent extends EntitySectionBaseComponent<AssetListItem> {\n  counterType = input<'hours' | 'odometer'>('hours');\n  private readonly entitiesService = inject(EntitiesService);\n  private readonly measurementsService = inject(MeasurementUnitsService);\n  private readonly assetLocation = signal<TelemetryStateResponse | null>(null);\n\n  private formatDateString(dateString: string | undefined): string {\n    if (!isDefined(dateString)) return '';\n\n    try {\n      const date = new Date(dateString);\n      if (Number.isNaN(date.getTime())) {\n        return 'Invalid Date';\n      }\n\n      return date.toLocaleDateString(undefined, {\n        weekday: 'long',\n        day: 'numeric',\n        month: 'long',\n      });\n    } catch (e) {\n      console.error('Error parsing date:', e);\n      return 'Invalid Date';\n    }\n  }\n\n  private formatCounterValue(value: number): number {\n    if (this.counterType() === 'odometer') {\n      return this.measurementsService.fromBackend(\n        MeasurementUnitType.DISTANCE,\n        value,\n        1,\n      );\n    }\n    if (this.counterType() === 'hours') {\n      return Math.round(value * 10) / 10;\n    }\n    return value;\n  }\n\n  private getCounterLabel(): string {\n    return this.counterType() === 'odometer' ? 'Odometer' : 'Engine Hours';\n  }\n\n  readonly assetDetails = computed(() => {\n    const assetDetails = this.entity();\n    if (!isDefined(assetDetails)) return [];\n\n    const location = this.assetLocation();\n    if (isEmpty(location?.['counters'])) return [];\n\n    const rawValue = location?.['counters']?.[this.counterType()] ?? 0;\n    const value = this.formatCounterValue(rawValue);\n    const formattedDate = this.formatDateString(location?.['date']);\n\n    return [\n      {\n        key: this.getCounterLabel(),\n        value: value,\n      },\n      {\n        key: 'Date',\n        value: formattedDate,\n      },\n    ];\n  });\n  title = computed(() =>\n    this.counterType() === 'odometer' ? 'Odometer' : 'Engine Hours',\n  );\n\n  constructor() {\n    super();\n\n    // Setup initial columns\n    this.columns = [\n      { field: 'key', header: '', transform: 'uppercase' },\n      { field: 'value', header: '' },\n    ];\n\n    let previousEntityId: string | undefined;\n\n    effect(() => {\n      const assetDetails = this.entity();\n      const currentEntityId = assetDetails?.id;\n\n      // Only load if the entity ID has actually changed\n      if (isDefined(currentEntityId) && currentEntityId !== previousEntityId) {\n        previousEntityId = currentEntityId;\n        this.loadAssetLocation(currentEntityId);\n      }\n    });\n\n    effect(() => {\n      const assetDetails = this.entity();\n      const location = this.assetLocation(); // Track this to re-run on updates\n      if (assetDetails && location) {\n        this.updateFormFields();\n      }\n    });\n  }\n\n  private loadAssetLocation(assetId: string): void {\n    this.assetLocation.set(null);\n    this.entitiesService\n      .getAssetLocation(assetId)\n      .pipe(takeUntilDestroyed(this.destroyRef))\n      .subscribe((location) => {\n        this.assetLocation.set(location);\n      });\n  }\n\n  protected override updateFormFields(): void {\n    const location = this.assetLocation();\n    let value = location?.['counters']?.[this.counterType()] ?? 0;\n    const dateString = location?.['date'];\n    const initialDateValue = isDefined(dateString)\n      ? new Date(dateString)\n      : null;\n    if (this.counterType() === 'odometer') {\n      value = this.measurementsService.fromBackend(\n        MeasurementUnitType.DISTANCE,\n        value,\n        1,\n      );\n    }\n    if (this.counterType() === 'hours') {\n      value = Math.round(value * 10) / 10;\n    }\n    this.formFields = [\n      createNumberField(\n        'value',\n        this.counterType() === 'odometer' ? 'Odometer' : 'Engine Hours',\n        value,\n        {\n          name: 'value',\n          props: {\n            suffix:\n              this.counterType() === 'odometer'\n                ? this.measurementsService.getUnitConfig(\n                    MeasurementUnitType.DISTANCE,\n                  )\n                : 'hours',\n          },\n        },\n      ),\n\n      createDateField('date', 'Date', initialDateValue, {\n        name: 'date',\n        props: {\n          showTime: true,\n          timeOnly: false,\n          dateFormat: 'mm/dd/yy',\n          hourFormat: '24',\n          showIcon: true,\n          appendTo: 'body',\n        },\n      }),\n    ];\n  }\n\n  protected override submitChanges(\n    formData: Record<string, string | number>,\n  ): void {\n    const asset = this.entity();\n    if (isNullOrUndefined(asset)) return;\n    this.entitiesService\n      .updateAsset(asset.id, this.transformFormData(formData))\n      .pipe(\n        takeUntilDestroyed(this.destroyRef),\n        finalize(() => this.isSubmitting.set(false)),\n      )\n      .subscribe({\n        next: () => {\n          this.isFormEditable.set(false);\n          this.broadcastService.broadcast('entity-updated', {\n            entityType: 'asset',\n            entityId: asset.id,\n          });\n        },\n        error: () => {\n          this.isFormEditable.set(true);\n        },\n      });\n  }\n\n  protected override onFormValueChange(\n    formData: Record<string, unknown>,\n  ): void {\n    const transformedData = this.transformFormData(formData);\n\n    // Emit the transformed values\n    this.formValueChange.emit(transformedData);\n  }\n\n  protected override transformFormData(formData: Record<string, unknown>) {\n    const transformedData = { ...formData };\n\n    if (isDefined(transformedData['value'])) {\n      if (this.counterType() === 'odometer') {\n        transformedData['value'] = this.measurementsService.toBackend(\n          MeasurementUnitType.DISTANCE,\n          Number(transformedData['value']),\n          1,\n        );\n      }\n      if (this.counterType() === 'hours') {\n        transformedData['value'] =\n          Math.round(Number(transformedData['value']) * 10) / 10;\n      }\n    }\n    return transformedData;\n  }\n}\n","<div class=\"card pt-2\">\n  <div class=\"mb-4 p-2 flex justify-start items-center\">\n    <span\n      class=\"pi pi-tag !text-[2.5rem]\"\n      [ngClass]=\"{ 'icon-primary': isFormEditable() }\"\n      [attr.aria-label]=\"'tag icon'\"\n    ></span>\n\n    <div class=\"pl-6 flex-1\">\n      <div class=\"flex justify-between items-center\">\n        <h2 class=\"text-xl font-semibold m-0\">{{ title() }}</h2>\n        @if (!isFormEditable()) {\n          <div class=\"icon-light\">\n            <span\n              class=\"pi pi-pen-to-square action hover !text-2xl\"\n              [attr.aria-label]=\"'Edit'\"\n              (click)=\"onEdit()\"\n              (keydown.enter)=\"onEdit()\"\n            ></span>\n          </div>\n        }\n      </div>\n      <span>Adjust the {{ title() | lowercase }} below</span>\n    </div>\n  </div>\n  @if (isFormEditable()) {\n    <app-dynamic-form\n      [fields]=\"formFields\"\n      [actions]=\"actions\"\n      (formSubmit)=\"onSubmit($event)\"\n    >\n    </app-dynamic-form>\n  } @else {\n    <app-grid\n      [data]=\"assetDetails()\"\n      [columns]=\"columns\"\n      [showGridLines]=\"false\"\n      [hideHeader]=\"true\"\n      tableStyleClass=\"info-display !w-auto\"\n    ></app-grid>\n  }\n</div>\n","import {\n  ChangeDetectorRef,\n  Component,\n  computed,\n  effect,\n  inject,\n  resource,\n  signal,\n  untracked,\n} from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { Validators } from '@angular/forms';\nimport { map, Observable, of, firstValueFrom } from 'rxjs';\n\n// PrimeNG imports\nimport { ButtonModule } from 'primeng/button';\n\n// Core imports\nimport {\n  AccountsService,\n  AssetTagCreateRequest,\n  CustomFieldDefinition,\n  EntitiesService,\n  IdName,\n} from '../../../../../api';\nimport {\n  createDateField,\n  createDropdownField,\n  createNumberField,\n  createTextAreaField,\n  createTextField,\n  createToggleSwitchField,\n} from '../../../../../shared/models';\nimport { isDefined, isNullOrUndefined } from '../../../../../shared/utils';\nimport { EntitySectionBaseComponent } from '../../base';\nimport { AdminStateService } from '../../../services/admin-state.service';\n\n// Lazy loaded components\nimport { DynamicFormComponent } from '../../../../../shared/components/forms/dynamic-form/dynamic-form.component';\nimport { GridComponent } from '../../../../../shared/components/grid/grid.component';\nimport { RequestCacheService } from '../../../../../shared/services/request-cache.service';\n\ninterface EntityWithFields {\n  id?: string;\n  assetType?: IdName;\n  fields?: Record<string, string | boolean | number | object>;\n}\n\n@Component({\n  selector: 'app-info-section',\n  imports: [CommonModule, ButtonModule, GridComponent, DynamicFormComponent],\n  templateUrl: './info-section.component.html',\n  styleUrl: './info-section.component.scss',\n})\nexport class InfoSectionComponent<\n  T extends EntityWithFields,\n> extends EntitySectionBaseComponent<T> {\n  private readonly entitiesService = inject(EntitiesService);\n  private readonly adminStateService = inject(AdminStateService);\n  private readonly cacheService = inject(RequestCacheService);\n  private readonly accountsService = inject(AccountsService);\n  private readonly cdr = inject(ChangeDetectorRef);\n\n  private readonly customFieldsResource = resource({\n    params: () => ({ request: this.adminStateService.selectedClient()?.id }),\n    loader: ({ params }) => {\n      const clientId = params.request;\n      if (isNullOrUndefined(clientId)) {\n        return firstValueFrom(of([]));\n      }\n      return firstValueFrom(\n        this.cacheService\n          .getOrFetch(`custom-fields-${clientId}`, () =>\n            this.accountsService.getClient(clientId),\n          )\n          .pipe(\n            map((client) => {\n              const entityDetails = this.entity();\n              return [\n                ...(client?.customFields?.[this.entityType()] ?? []),\n                ...((entityDetails?.assetType &&\n                  client?.customFields?.[entityDetails.assetType.id]) ??\n                  []),\n              ];\n            }),\n          ),\n      );\n    },\n  });\n\n  readonly entityCustomFields = signal<CustomFieldDefinition[]>([]);\n\n  readonly entityDetails = computed(() => {\n    const entityDetails = this.entity();\n    const selectedClient = this.adminStateService.selectedClient();\n\n    if (isNullOrUndefined(entityDetails) || isNullOrUndefined(selectedClient)) {\n      return [];\n    }\n\n    // Return the details without side effects\n    return this.entityCustomFields().map((field) => ({\n      key: field['title'],\n      value: entityDetails['fields']?.[field['id']] ?? 'None',\n    }));\n  });\n\n  constructor() {\n    super();\n\n    // Setup initial columns\n    this.columns = [\n      { field: 'key', header: '', transform: 'uppercase' },\n      { field: 'value', header: '' },\n    ];\n\n    effect(() => {\n      const customFields = this.customFieldsResource.value();\n      const entityDetails = this.entity();\n\n      if (customFields && entityDetails) {\n        this.entityCustomFields.set(customFields);\n        untracked(() => {\n          this.updateFormFields();\n          this.cdr.detectChanges();\n        });\n      }\n    });\n  }\n\n  protected override updateFormFields(): void {\n    const entity = this.entity();\n    this.formFields = this.entityCustomFields().map((field) =>\n      this.createFormField(field, entity),\n    );\n  }\n\n  private createFormField(\n    field: CustomFieldDefinition,\n    entity: EntityWithFields | null,\n  ) {\n    const fieldValue = entity?.fields?.[field['id']];\n    const formattedValue = this.formatFieldValue(fieldValue);\n\n    switch (field['type']) {\n      case 'number':\n        return this.createNumberFieldConfig(field, formattedValue);\n      case 'combo':\n        return this.createDropdownFieldConfig(field, formattedValue);\n      case 'memo':\n        return this.createTextAreaFieldConfig(field, formattedValue);\n      case 'checkbox':\n        return this.createToggleSwitchFieldConfig(field, formattedValue);\n      case 'date':\n        return this.createDateFieldConfig(field, entity, false);\n      case 'datetime':\n        return this.createDateFieldConfig(field, entity, true);\n      default:\n        return this.createTextFieldConfig(field, formattedValue);\n    }\n  }\n\n  private formatFieldValue(\n    fieldValue: string | boolean | number | object | undefined | null,\n  ): string | boolean | number | object {\n    if (!isDefined(fieldValue)) {\n      return '';\n    }\n    return typeof fieldValue === 'object'\n      ? JSON.stringify(fieldValue)\n      : fieldValue;\n  }\n\n  private getFieldValidations(field: CustomFieldDefinition) {\n    return field['required']\n      ? [\n          {\n            name: 'required',\n            validator: Validators.required,\n            message: `${field['title']} is required`,\n          },\n        ]\n      : [];\n  }\n\n  private createNumberFieldConfig(\n    field: CustomFieldDefinition,\n    formattedValue: string | number | boolean | object,\n  ) {\n    return createNumberField(\n      String(field['id']),\n      String(field['title']),\n      formattedValue as number,\n      {\n        name: String(field['id']),\n        validations: this.getFieldValidations(field),\n      },\n    );\n  }\n\n  private createDropdownFieldConfig(\n    field: CustomFieldDefinition,\n    formattedValue: string | number | boolean | object,\n  ) {\n    return createDropdownField(\n      String(field['id']),\n      String(field['title']),\n      field.values?.map((value) => ({\n        label: String(value.key),\n        value: String(value.value),\n      })) ?? [],\n      formattedValue as string,\n      {\n        name: String(field['id']),\n        validations: this.getFieldValidations(field),\n      },\n    );\n  }\n\n  private createTextAreaFieldConfig(\n    field: CustomFieldDefinition,\n    formattedValue: string | number | boolean | object,\n  ) {\n    return createTextAreaField(\n      String(field?.id),\n      String(field['title']),\n      formattedValue as string,\n      {\n        name: String(field?.id),\n        validations: this.getFieldValidations(field),\n        hint: field['description'],\n      },\n    );\n  }\n\n  private createToggleSwitchFieldConfig(\n    field: CustomFieldDefinition,\n    formattedValue: string | number | boolean | object,\n  ) {\n    return createToggleSwitchField(\n      field.id,\n      field.title,\n      formattedValue as boolean,\n      {\n        name: field.id,\n        validations: this.getFieldValidations(field),\n        hint: field['description'],\n      },\n    );\n  }\n\n  private createDateFieldConfig(\n    field: CustomFieldDefinition,\n    entity: EntityWithFields | null,\n    showTime: boolean,\n  ) {\n    return createDateField(\n      field.id,\n      field.title,\n      entity?.fields?.[field.id] as unknown as Date,\n      {\n        name: field.id,\n        validations: this.getFieldValidations(field),\n        hint: field['hint'],\n        props: {\n          showTime,\n          timeOnly: false,\n          dateFormat: 'mm/dd/yy',\n          hourFormat: '24',\n          showIcon: true,\n          appendTo: 'body',\n        },\n      },\n    );\n  }\n\n  private createTextFieldConfig(\n    field: CustomFieldDefinition,\n    formattedValue: string | number | boolean | object,\n  ) {\n    return createTextField(\n      String(field['id']),\n      String(field['title']),\n      formattedValue as string,\n      {\n        name: String(field['id']),\n        validations: this.getFieldValidations(field),\n      },\n    );\n  }\n\n  override getUpdateMethod(): (\n    id: string,\n    payload: object | Record<string, string | number | boolean>,\n  ) => Observable<unknown> {\n    switch (this.entityType()) {\n      case 'asset':\n        return (id, payload) =>\n          this.entitiesService.updateAsset(id, {\n            fields: payload as Record<string, object>,\n          });\n      case 'simcard':\n        return (id, payload) =>\n          this.entitiesService.updateSimCard(id, {\n            fields: payload as Record<string, object>,\n          });\n      case 'device':\n        return (id, payload) =>\n          this.entitiesService.updateDevice(id, {\n            fields: payload as Record<string, object>,\n          });\n      case 'assettag':\n        return (id, payload) =>\n          this.entitiesService.updateAssetTag(\n            id,\n            payload as AssetTagCreateRequest,\n          );\n      default:\n        throw new Error(`Update for '${this.entityType()}' not yet supported`);\n    }\n  }\n\n  protected override onFormValueChange(\n    formData: Record<string, string | number | object>,\n  ): void {\n    const transformedData = { fields: formData };\n\n    // Emit the transformed values\n    this.formValueChange.emit(transformedData);\n  }\n}\n","<div class=\"card pt-2\">\n  <div class=\"mb-4 p-2 flex justify-start items-center\">\n    <svg\n      class=\"custom-icon-svg w-[2.5rem] h-[2.5rem]\"\n      [ngClass]=\"{ 'icon-primary': isFormEditable() }\"\n      [attr.aria-label]=\"'Book open icon'\"\n    >\n      <use [attr.href]=\"'assets/sprites/sprite.svg#book-open-solid'\"></use>\n    </svg>\n\n    <div class=\"pl-6 flex-1\">\n      <div class=\"flex justify-between items-center\">\n        <h2 class=\"text-xl font-semibold m-0\">Information</h2>\n        @if (!isFormEditable() && !createMode()) {\n          <div class=\"icon-light\">\n            <span\n              class=\"pi pi-pen-to-square action hover !text-2xl\"\n              [attr.aria-label]=\"'Edit entity details'\"\n              (click)=\"onEdit()\"\n              (keydown.enter)=\"onEdit()\"\n            ></span>\n          </div>\n        }\n      </div>\n      <span>The following supplemental information is required.</span>\n    </div>\n  </div>\n  @if (isFormEditable() || (createMode() && formFields.length)) {\n    <app-dynamic-form\n      [fields]=\"formFields\"\n      [actions]=\"actions\"\n      [hideActions]=\"createMode()\"\n      (formSubmit)=\"onSubmit($event)\"\n      (formValidityChange)=\"onFormValidityChange($event)\"\n      (formValueChange)=\"onFormValueChange($event)\"\n    >\n    </app-dynamic-form>\n  }\n  @if (!isFormEditable() && !createMode()) {\n    <app-grid\n      [data]=\"entityDetails()\"\n      [columns]=\"columns\"\n      [showGridLines]=\"false\"\n      [hideHeader]=\"true\"\n      tableStyleClass=\"info-display !w-auto\"\n    ></app-grid>\n  }\n</div>\n","import { Injectable } from '@angular/core';\nimport { AdminDetailSection } from '../models';\nimport { AssetDetailsSectionComponent } from '../components/assets/asset-details-section/asset-details-section.component';\nimport { AssetCategoriesSectionComponent } from '../components/assets/asset-categories-section/asset-categories-section.component';\nimport { AssetResponse } from '../../../api';\nimport { AssetContactsSectionComponent } from '../components/assets/asset-contacts-section/asset-contacts-section.component';\nimport { AssetProfilesSectionComponent } from '../components/assets/asset-profiles-section/asset-profiles-section.component';\nimport { AssetSharingSectionComponent } from '../components/assets/asset-sharing-section/asset-sharing-section.component';\nimport { AssetEventTriggersSectionComponent } from '../components/assets/asset-event-triggers-section/asset-event-triggers-section.component';\nimport { AssetRemindersSectionComponent } from '../components/assets/asset-reminders-section/asset-reminders-section.component';\nimport { AssetAnalogTriggersSectionComponent } from '../components/assets/asset-analog-triggers-section/asset-analog-triggers-section.component';\nimport { FeedSectionComponent } from '../components/shared/feed-section/feed-section.component';\nimport { AssetCurfewEventsSectionComponent } from '../components/assets/asset-curfew-events-section/asset-curfew-events-section.component';\nimport { AssetLabelsSectionComponent } from '../components/assets/asset-labels-section/asset-labels-section.component';\nimport { AssetCounterTypeSectionComponent } from '../components/assets/asset-counter-type-section/asset-counter-type-section.component';\nimport { InfoSectionComponent } from '../components/shared/info-section/info-section.component';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class AssetSectionConfigFactory {\n  /**\n   * Create sections for asset information\n   */\n  createAssetInformationSections(\n    asset: AssetResponse | null,\n  ): AdminDetailSection[] {\n    return [\n      {\n        id: 'asset-details',\n        title: 'Asset Details',\n        component: AssetDetailsSectionComponent,\n        componentInputs: { entity: asset },\n        category: 'information',\n        order: 10,\n      },\n      {\n        id: 'asset-categories',\n        title: 'Categories',\n        component: AssetCategoriesSectionComponent,\n        componentInputs: { entity: asset },\n        category: 'information',\n        order: 20,\n      },\n      {\n        id: 'asset-information',\n        title: 'Asset Information',\n        component: InfoSectionComponent<AssetResponse>,\n        componentInputs: {\n          entity: asset,\n          dataPath: 'customFields',\n          entityType: 'asset',\n        },\n        category: 'information',\n        order: 30,\n      },\n      {\n        id: 'asset-contacts',\n        title: 'Contacts',\n        component: AssetContactsSectionComponent,\n        componentInputs: { entity: asset },\n        category: 'information',\n        order: 40,\n      },\n    ];\n  }\n\n  /**\n   * Create sections for asset settings\n   */\n  createAssetSettingsSections(\n    asset: AssetResponse | null,\n  ): AdminDetailSection[] {\n    return [\n      {\n        id: 'profiles',\n        title: 'Profiles',\n        component: AssetProfilesSectionComponent,\n        componentInputs: { entity: asset },\n        category: 'settings',\n        order: 10,\n      },\n      {\n        id: 'asset-sharing',\n        title: 'Sharing',\n        component: AssetSharingSectionComponent,\n        componentInputs: { entity: asset },\n        category: 'settings',\n        order: 20,\n      },\n      {\n        id: 'asset-odometer',\n        title: 'Odometer',\n        component: AssetCounterTypeSectionComponent,\n        componentInputs: { entity: asset, counterType: 'odometer' },\n        category: 'settings',\n        order: 30,\n      },\n      {\n        id: 'asset-hours',\n        title: 'Engine Hours',\n        component: AssetCounterTypeSectionComponent,\n        componentInputs: { entity: asset, counterType: 'hours' },\n        category: 'settings',\n        order: 40,\n      },\n      {\n        id: 'asset-reminders',\n        title: 'Reminders',\n        component: AssetRemindersSectionComponent,\n        componentInputs: { entity: asset },\n        category: 'settings',\n        order: 50,\n      },\n      {\n        id: 'asset-default-labels',\n        title: 'Default Labels',\n        component: AssetLabelsSectionComponent,\n        componentInputs: { entity: asset },\n        category: 'settings',\n        order: 60,\n      },\n    ];\n  }\n\n  /**\n   * Create sections for asset events\n   */\n  createAssetEventsSections(asset: AssetResponse | null): AdminDetailSection[] {\n    return [\n      {\n        id: 'asset-event-triggers',\n        title: 'Event Triggers',\n        component: AssetEventTriggersSectionComponent,\n        componentInputs: { entity: asset },\n        category: 'events',\n        order: 10,\n      },\n      {\n        id: 'asset-curfew-events',\n        title: 'Working Hours',\n        component: AssetCurfewEventsSectionComponent,\n        componentInputs: { entity: asset },\n        category: 'events',\n        order: 20,\n      },\n      {\n        id: 'asset-analog-triggers',\n        title: 'Analog Triggers',\n        component: AssetAnalogTriggersSectionComponent,\n        componentInputs: { entity: asset },\n        category: 'events',\n        order: 30,\n      },\n      /*      {\n        id: 'asset-zone-triggers',\n        title: 'Geographic Triggers',\n        component: AssetZonesSectionComponent,\n        componentInputs: { entity: asset },\n        category: 'events',\n        order: 40,\n      }, */\n    ];\n  }\n\n  /**\n   * Create sections for asset changes\n   * @param asset The asset object to display in the section\n   * @returns An array of AdminDetailSection objects representing the asset changes sections\n   */\n  createChangesSection(asset: AssetResponse | null): AdminDetailSection[] {\n    return [\n      {\n        id: 'asset-changes',\n        title: 'Changes',\n        component: FeedSectionComponent,\n        componentInputs: {\n          entity: asset,\n        },\n        category: 'feed',\n        order: 10,\n      },\n    ];\n  }\n\n  /**\n   * Create all asset sections in one call\n   */\n  createAllAssetSections(asset: AssetResponse | null): AdminDetailSection[] {\n    return [\n      ...this.createAssetInformationSections(asset),\n      ...this.createAssetSettingsSections(asset),\n      ...this.createAssetEventsSections(asset),\n      ...this.createChangesSection(asset),\n    ];\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport {\n  ChangeDetectionStrategy,\n  Component,\n  computed,\n  input,\n  output,\n  signal,\n  effect,\n  inject,\n} from '@angular/core';\nimport { AccordionModule } from 'primeng/accordion';\nimport { ButtonModule } from 'primeng/button';\nimport { DividerModule } from 'primeng/divider';\nimport { TooltipModule } from 'primeng/tooltip';\nimport { AdminDetailSection, AdminSectionLayout } from '../../models';\nimport { isDefined, isNullOrUndefined } from '../../../../shared/utils';\nimport { UnsavedChangesService } from '../../services/unsaved-changes.service';\n\n@Component({\n  selector: 'app-details-accordion-container',\n  imports: [\n    CommonModule,\n    AccordionModule,\n    DividerModule,\n    ButtonModule,\n    TooltipModule,\n  ],\n  templateUrl: './details-accordion-container.component.html',\n  styleUrl: './details-accordion-container.component.scss',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class DetailsAccordionContainerComponent {\n  readonly sections = input<AdminDetailSection[]>([]);\n  readonly entity = input<unknown>(null);\n  readonly title = input<string>('Details');\n  readonly subtitle = input<string>('');\n  readonly allowModeToggle = input<boolean>(true);\n  readonly initialMode = input<'view' | 'edit'>('view');\n  readonly layout = input<AdminSectionLayout | null>(null);\n  entityChange = output<unknown>();\n\n  // Services\n  private readonly unsavedChangesService = inject(UnsavedChangesService);\n\n  // Accordion state management to preserve expansion state during data updates\n  readonly accordionValue = signal<string>('information');\n  private readonly _sectionInputsCache = new Map<\n    string,\n    Record<string, unknown>\n  >();\n\n  constructor() {\n    // Monitor entity changes and preserve accordion state\n    effect(() => {\n      this.entity(); // Track entity changes\n      const sections = this.sections(); // Track sections changes\n\n      // Clear cache when sections change to avoid stale references\n      this._clearStaleCache(sections);\n    });\n\n    // Set initial expanded category based on layout configuration\n    effect(() => {\n      const layout = this.layout();\n      const defaultCategory = layout?.defaultExpandedCategory;\n      if (isDefined(defaultCategory) && defaultCategory.trim() !== '') {\n        this.accordionValue.set(defaultCategory);\n      }\n    });\n  }\n\n  /**\n   * Clear cache entries for sections that no longer exist\n   */\n  private _clearStaleCache(currentSections: AdminDetailSection[]): void {\n    const currentSectionIds = new Set(currentSections.map((s) => s.id));\n    const cacheKeys = Array.from(this._sectionInputsCache.keys());\n\n    for (const key of cacheKeys) {\n      const sectionId = key.replace('_inputs', '');\n      if (!currentSectionIds.has(sectionId)) {\n        this._sectionInputsCache.delete(key);\n      }\n    }\n  }\n\n  /**\n   * Handle accordion panel open/close events\n   */\n  async handleAccordionChange(\n    value: string | number | string[] | number[],\n  ): Promise<void> {\n    // Check for unsaved changes before allowing the change\n    const canProceed: boolean =\n      await this.unsavedChangesService.checkUnsavedChanges();\n\n    if (canProceed) {\n      this.accordionValue.set(value as string);\n    }\n  }\n\n  // Computed properties for sections by category\n  readonly informationSections = computed(() =>\n    this.visibleSections()\n      .filter(\n        (s) => s.category === 'information' || isNullOrUndefined(s.category),\n      )\n      .sort((a, b) => (a.order ?? 0) - (b.order ?? 0)),\n  );\n\n  readonly settingsSections = computed(() =>\n    this.visibleSections()\n      .filter((s) => s.category === 'settings')\n      .sort((a, b) => (a.order ?? 0) - (b.order ?? 0)),\n  );\n\n  readonly statisticsSections = computed(() =>\n    this.visibleSections()\n      .filter((s) => s.category === 'statistics')\n      .sort((a, b) => (a.order ?? 0) - (b.order ?? 0)),\n  );\n\n  readonly eventsSections = computed(() =>\n    this.visibleSections()\n      .filter((s) => s.category === 'events')\n      .sort((a, b) => (a.order ?? 0) - (b.order ?? 0)),\n  );\n\n  readonly customSections = computed(() =>\n    this.visibleSections()\n      .filter((s) => s.category === 'custom')\n      .sort((a, b) => (a.order ?? 0) - (b.order ?? 0)),\n  );\n\n  readonly ioSections = computed(() =>\n    this.visibleSections()\n      .filter((s) => s.category === 'io')\n      .sort((a, b) => (a.order ?? 0) - (b.order ?? 0)),\n  );\n\n  readonly accessoriesSections = computed(() =>\n    this.visibleSections()\n      .filter((s) => s.category === 'accessories')\n      .sort((a, b) => (a.order ?? 0) - (b.order ?? 0)),\n  );\n\n  readonly feedSections = computed(() =>\n    this.visibleSections()\n      .filter((s) => s.category === 'feed')\n      .sort((a, b) => (a.order ?? 0) - (b.order ?? 0)),\n  );\n\n  readonly controlsSections = computed(() =>\n    this.visibleSections()\n      .filter((s) => s.category === 'controls')\n      .sort((a, b) => (a.order ?? 0) - (b.order ?? 0)),\n  );\n\n  readonly assetsSections = computed(() =>\n    this.visibleSections()\n      .filter((s) => s.category === 'assets')\n      .sort((a, b) => (a.order ?? 0) - (b.order ?? 0)),\n  );\n\n  readonly usersSections = computed(() =>\n    this.visibleSections()\n      .filter((s) => s.category === 'users')\n      .sort((a, b) => (a.order ?? 0) - (b.order ?? 0)),\n  );\n\n  readonly featureSections = computed(() =>\n    this.visibleSections()\n      .filter((s) => s.category === 'features')\n      .sort((a, b) => (a.order ?? 0) - (b.order ?? 0)),\n  );\n\n  readonly customizationSections = computed(() =>\n    this.visibleSections()\n      .filter((s) => s.category === 'customization')\n      .sort((a, b) => (a.order ?? 0) - (b.order ?? 0)),\n  );\n\n  readonly backendSections = computed(() =>\n    this.visibleSections()\n      .filter((s) => s.category === 'backend')\n      .sort((a, b) => (a.order ?? 0) - (b.order ?? 0)),\n  );\n\n  readonly visibleSections = computed(() => {\n    return this.sections().filter((section) => {\n      if (typeof section.visible === 'function') {\n        return section.visible(this.entity()) === true;\n      }\n      return section.visible !== false;\n    });\n  });\n\n  // Computed property for sorted categories based on layout configuration\n  readonly sortedCategories = computed(() => {\n    const layout = this.layout();\n    if (layout?.categories) {\n      return layout.categories\n        .filter((category) => {\n          // Check if category is visible\n          if (typeof category.visible === 'function') {\n            return category.visible(this.entity());\n          }\n          if (typeof category.visible === 'boolean') {\n            return category.visible;\n          }\n          // Default to visible if not specified\n          return this.hasSections(category.key);\n        })\n        .sort((a, b) => a.order - b.order);\n    }\n\n    // Fallback to default categories if no layout provided\n    return this.defaultSectionTypes().filter((type) =>\n      this.hasSections(type.key),\n    );\n  });\n\n  // Default section types as computed property for fallback\n  readonly defaultSectionTypes = computed(() => [\n    { key: 'information', label: 'Information', order: 10 },\n    { key: 'settings', label: 'Settings', order: 20 },\n    { key: 'events', label: 'Events', order: 30 },\n    { key: 'statistics', label: 'Statistics', order: 40 },\n    { key: 'io', label: 'IO', order: 50 },\n    { key: 'accessories', label: 'Accessories', order: 60 },\n    { key: 'controls', label: 'Controls', order: 70 },\n    { key: 'assets', label: 'Assets', order: 80 },\n    { key: 'users', label: 'Users', order: 90 },\n    { key: 'features', label: 'Features', order: 100 },\n    { key: 'customization', label: 'Email Customization', order: 110 },\n    { key: 'feed', label: 'Changes', order: 120 },\n    { key: 'backend', label: 'Backend', order: 130 },\n    { key: 'custom', label: 'Custom', order: 140 },\n  ]);\n\n  // Generic method to get sections by type\n  getSections(type: string) {\n    switch (type) {\n      case 'information':\n        return this.informationSections();\n      case 'settings':\n        return this.settingsSections();\n      case 'events':\n        return this.eventsSections();\n      case 'statistics':\n        return this.statisticsSections();\n      case 'io':\n        return this.ioSections();\n      case 'accessories':\n        return this.accessoriesSections();\n      case 'controls':\n        return this.controlsSections();\n      case 'feed':\n        return this.feedSections();\n      case 'custom':\n        return this.customSections();\n      case 'assets':\n        return this.assetsSections();\n      case 'users':\n        return this.usersSections();\n      case 'features':\n        return this.featureSections();\n      case 'customization':\n        return this.customizationSections();\n      case 'backend':\n        return this.backendSections();\n      default:\n        return [];\n    }\n  }\n\n  // Generic method to check if a section type has items\n  hasSections(type: string): boolean {\n    const sections = this.getSections(type);\n    return isDefined(sections) && sections.length > 0;\n  }\n\n  getSectionInputs(section: AdminDetailSection): Record<string, unknown> {\n    // Create a stable input object to prevent unnecessary component recreation\n    // Only create new object if the section inputs have actually changed\n    const key = `${section.id}_inputs`;\n\n    const currentInputs = {\n      ...section.componentInputs,\n      onEntityChange: (updatedEntity: unknown) => {\n        this.entityChange.emit(updatedEntity);\n      },\n    };\n\n    const cachedInputs = this._sectionInputsCache.get(key);\n\n    if (!cachedInputs || this._hasInputsChanged(cachedInputs, currentInputs)) {\n      this._sectionInputsCache.set(key, currentInputs);\n      return currentInputs;\n    }\n\n    return cachedInputs;\n  }\n\n  private _hasInputsChanged(\n    oldInputs: Record<string, unknown>,\n    newInputs: Record<string, unknown>,\n  ): boolean {\n    const oldKeys = Object.keys(oldInputs).filter(\n      (k) => k !== 'onEntityChange',\n    );\n    const newKeys = Object.keys(newInputs).filter(\n      (k) => k !== 'onEntityChange',\n    );\n\n    if (oldKeys.length !== newKeys.length) return true;\n\n    return oldKeys.some((key) => oldInputs[key] !== newInputs[key]);\n  }\n}\n","<!-- details-accordion-container.component.html -->\n<div class=\"p-3 bg-surface-card rounded-md shadow-sm h-full overflow-auto\">\n  <p-accordion\n    [value]=\"accordionValue()\"\n    (valueChange)=\"handleAccordionChange($event)\"\n    [multiple]=\"layout()?.allowMultipleExpanded ?? false\"\n  >\n    <!-- Loop through all section types -->\n    @for (category of sortedCategories(); track category.key) {\n      <p-accordion-panel [value]=\"category.key\">\n        <p-accordion-header>\n          <span class=\"uppercase\">{{ category.label }}</span>\n        </p-accordion-header>\n        <p-accordion-content>\n          @for (\n            section of getSections(category.key);\n            track section.id;\n            let last = $last\n          ) {\n            <ng-container\n              *ngComponentOutlet=\"\n                section.component;\n                inputs: getSectionInputs(section)\n              \"\n            ></ng-container>\n            @if (!last) {\n              <p-divider />\n            }\n          }\n        </p-accordion-content>\n      </p-accordion-panel>\n    }\n  </p-accordion>\n</div>\n","import {\n  Injectable,\n  signal,\n  Type,\n  inject,\n  DestroyRef,\n  computed,\n  Injector,\n} from '@angular/core';\nimport { Router } from '@angular/router';\n\nimport {\n  isDefined,\n  isNullOrUndefined,\n  isString,\n} from '../../../../shared/utils';\nimport { DetailsComponentFactory } from '../../factories';\nimport { BaseEntity } from '../../../../shared/models';\nimport { takeUntilDestroyed } from '@angular/core/rxjs-interop';\nimport { BroadcastEventMessageService } from '../broadcast-event-messages.service';\n\nexport interface EntityUpdatePayload {\n  entityType: string;\n  operation: string;\n  data: BaseEntity;\n}\n\nexport interface EntityDeletePayload {\n  entityType: string;\n  operation: string;\n  entityId: string;\n  data: BaseEntity;\n}\n\n@Injectable({ providedIn: 'root' })\nexport class EntityDetailsStateService {\n  // State signals\n  readonly showPanel = signal<boolean>(false);\n  readonly selectedItem = signal<BaseEntity | null>(null);\n  readonly detailsComponent = signal<Type<unknown> | null>(null);\n  readonly detailsInputs = signal<Record<string, unknown>>({});\n  readonly isLoading = signal<boolean>(false);\n\n  private readonly detailsFactory = inject(DetailsComponentFactory);\n  private readonly broadcastService = inject(BroadcastEventMessageService);\n  private readonly destroyRef = inject(DestroyRef);\n  private readonly router = inject(Router);\n  private readonly injector = inject(Injector);\n\n  readonly selectedItemTitle = computed(() => {\n    const item = this.selectedItem();\n\n    // Case 1: No item selected\n    if (isNullOrUndefined(item)) {\n      return 'Details';\n    }\n\n    // Case 2: Item has a name property\n    if (isDefined(item['name']) && isString(item['name'])) {\n      return item['name'];\n    }\n\n    // Case 3: Item has a entityType property - get formatted entity type\n    if (isDefined(item['entityType']) && isString(item['entityType'])) {\n      // Format the entity type (capitalize first letter or apply other formatting)\n      const formattedType = this.formatEntityType(item['entityType']);\n      return `${formattedType} Details`;\n    }\n\n    // Default case\n    return 'Item Details';\n  });\n\n  readonly selectedItemType = computed(() => {\n    const item = this.selectedItem();\n    return item ? String(item['entityType']) : '';\n  });\n\n  readonly selectedItemId = computed(() => {\n    const item = this.selectedItem();\n    return item ? String(item['id']) : '';\n  });\n\n  // Keep existing methods for backward compatibility\n  getSelectedItemTitle(): string {\n    return this.selectedItemTitle();\n  }\n\n  getSelectedItemType(): string {\n    return this.selectedItemType();\n  }\n\n  getSelectedItemId(): string {\n    return this.selectedItemId();\n  }\n\n  constructor() {\n    // Listen for entity updates to refresh the details panel\n    this.broadcastService\n      .on('entity-updated')\n      .pipe(takeUntilDestroyed(this.destroyRef))\n      .subscribe((event) => {\n        // Check if the updated entity matches the currently selected one\n        const current = this.selectedItem();\n        if (\n          current &&\n          current.id === (event as unknown as EntityUpdatePayload)['data']?.id\n        ) {\n          // Trigger a refresh of the entity\n          this.refreshSelectedItem(\n            (event as unknown as EntityUpdatePayload)['data'],\n          );\n        }\n      });\n\n    // Listen for entity deletions to close the details panel\n    this.broadcastService\n      .on('entity-deleted')\n      .pipe(takeUntilDestroyed(this.destroyRef))\n      .subscribe((event) => {\n        // Check if the deleted entity matches the currently selected one\n        const current = this.selectedItem();\n        const eventPayload = event as EntityDeletePayload;\n        if (current && current.id === eventPayload.entityId) {\n          // Close the details panel since the entity no longer exists\n          this.closeDetailsPanel();\n        }\n      });\n  }\n\n  /**\n   * Refreshes the currently selected item by fetching updated data\n   */\n  refreshSelectedItem(data: BaseEntity): void {\n    const item = this.selectedItem();\n    if (!item) return;\n    this.selectedItem.set(data);\n  }\n\n  /**\n   * Soft refresh that updates entity data without affecting UI state like accordion expansion\n   * This preserves the current accordion states when refreshing data\n   */\n  softRefreshSelectedItem(_updatedData?: BaseEntity): void {\n    const currentItem = this.selectedItem();\n    if (!currentItem) return;\n\n    // Always set loading state first\n    this.isLoading.set(true);\n\n    // Even if we have updatedData from the grid, still fetch complete entity\n    const entityType = this.selectedItemType();\n    const entityId = this.selectedItemId();\n\n    if (entityType && entityId) {\n      // Use dynamic import to avoid circular dependency\n      import('./entity-details-loader.service')\n        .then(({ EntityDetailsLoaderService }) => {\n          const loaderService = this.injector.get(EntityDetailsLoaderService);\n\n          // Always fetch complete entity data regardless of whether updatedData is provided\n          loaderService\n            .softLoadEntityDetailsObservable(entityType, entityId)\n            .pipe(takeUntilDestroyed(this.destroyRef))\n            .subscribe({\n              next: (completeEntity: BaseEntity | null) => {\n                if (isDefined(completeEntity)) {\n                  // Update with complete data\n                  this.selectedItem.set(completeEntity);\n\n                  // Keep existing inputs object but update its properties\n                  const currentInputs = this.detailsInputs();\n                  if (isDefined(currentInputs)) {\n                    currentInputs['entity'] = completeEntity;\n                    // Signal change without creating new object reference\n                    this.detailsInputs.set(currentInputs);\n                  } else {\n                    this.detailsInputs.set({ entity: completeEntity });\n                  }\n                }\n                this.isLoading.set(false);\n              },\n              error: () => this.isLoading.set(false),\n            });\n        })\n        .catch(() => this.isLoading.set(false));\n    } else {\n      this.isLoading.set(false);\n    }\n  }\n\n  /**\n   * Computed property to track if we're doing a soft refresh\n   * (loading while an item is selected - shows subtle indicator instead of full loader)\n   */\n  readonly isSoftRefreshing = computed(\n    () => this.isLoading() && this.selectedItem() !== null,\n  );\n\n  /**\n   * Opens the details panel with the specified item and component\n   */\n  openDetailsPanel(\n    item: BaseEntity,\n    componentType: Type<unknown> | null,\n  ): void {\n    this.selectedItem.set(item);\n\n    // Get the appropriate component based on item entityType and provided component\n    const component =\n      componentType ||\n      this.detailsFactory.getDetailsComponent(String(item['entityType']));\n    this.detailsComponent.set(component);\n    this.detailsInputs.set({ entity: item });\n    this.showPanel.set(true);\n  }\n\n  /**\n   * Closes the details panel (UI state only)\n   */\n  closeDetailsPanel(): void {\n    this.showPanel.set(false);\n    this.selectedItem.set(null);\n    this.detailsComponent.set(null);\n    this.detailsInputs.set({});\n  }\n\n  /**\n   * Format entity type string for display\n   * @param type Raw entity type string\n   * @returns Formatted entity type\n   */\n  private formatEntityType(type: string): string {\n    // Simple formatting: capitalize first letter\n    if (!type) return 'Item';\n\n    // Convert kebab-case or snake_case to capitalized words\n    return type.replace(/[-_]/g, ' ').replace(/\\w\\S*/g, (word) => {\n      return word.charAt(0).toUpperCase() + word.substring(1).toLowerCase();\n    });\n  }\n  updateEntity(updatedEntity: BaseEntity): void {\n    // Create a fresh copy to ensure change detection\n    const updatedCopy: BaseEntity = { ...updatedEntity };\n    this.selectedItem.set(updatedCopy);\n    this.detailsInputs.set({ entity: updatedCopy });\n\n    // Clear loading state if we were soft refreshing\n    if (this.isLoading()) {\n      this.isLoading.set(false);\n    }\n  }\n}\n","import { Component, computed, inject, input, signal } from '@angular/core';\nimport { AssetListItem, AssetResponse } from '../../../../../api';\nimport { AssetSectionConfigFactory } from '../../../factories/asset-section-config.factory';\nimport { DetailsAccordionContainerComponent } from '../../details-accordion-container/details-accordion-container.component';\nimport { EntityDetailsStateService } from '../../../services/entity/entity-details.state.service';\nimport { ProgressSpinnerModule } from 'primeng/progressspinner';\nimport { MessageModule } from 'primeng/message';\n\n@Component({\n  selector: 'app-asset-details-container',\n  imports: [\n    DetailsAccordionContainerComponent,\n    ProgressSpinnerModule,\n    MessageModule,\n  ],\n  templateUrl: './asset-details-container.component.html',\n  styleUrl: './asset-details-container.component.scss',\n})\nexport class AssetDetailsContainerComponent {\n  readonly entity = input<AssetListItem | null>(null);\n\n  private readonly assetSectionFactory = inject(AssetSectionConfigFactory);\n  readonly entityDetailsState = inject(EntityDetailsStateService);\n\n  readonly isLoading = computed(() => this.entityDetailsState.isLoading());\n  readonly isSoftRefreshing = computed(() =>\n    this.entityDetailsState.isSoftRefreshing(),\n  );\n  readonly isInitialLoading = computed(\n    () => this.isLoading() && !this.isSoftRefreshing() && !this.fullAsset(),\n  );\n  readonly fullAsset = computed(() => {\n    const entityDetails = this.entityDetailsState.selectedItem();\n\n    if (!entityDetails) {\n      return null;\n    }\n    return entityDetails as AssetResponse;\n  });\n  readonly sections = computed(() => {\n    const asset = this.fullAsset();\n    if (!asset) return [];\n    return this.assetSectionFactory.createAllAssetSections(asset);\n  });\n  readonly error = signal<string | null>(null);\n\n  onEntityChange(entity: unknown): void {\n    this.entityDetailsState.updateEntity(entity as AssetResponse);\n    this.error.set(null);\n  }\n}\n","@if (!isInitialLoading() && !error()) {\n  @if (fullAsset()) {\n    <app-details-accordion-container\n      [sections]=\"sections()\"\n      [entity]=\"fullAsset()\"\n      [title]=\"fullAsset()?.name || 'Asset Details'\"\n      subtitle=\"Asset\"\n      [allowModeToggle]=\"true\"\n      (entityChange)=\"onEntityChange($event)\"\n      initialMode=\"view\"\n    ></app-details-accordion-container>\n  } @else {\n    <div class=\"p-4\">\n      <p-message severity=\"info\" text=\"No asset details available.\"></p-message>\n    </div>\n  }\n}\n","import { Component, computed, inject, input, signal } from '@angular/core';\nimport { SimCardListItem, SimCardResponse } from '../../../../../api';\nimport { DetailsAccordionContainerComponent } from '../../details-accordion-container/details-accordion-container.component';\nimport { EntityDetailsStateService } from '../../../services/entity/entity-details.state.service';\nimport { ProgressSpinnerModule } from 'primeng/progressspinner';\nimport { MessageModule } from 'primeng/message';\nimport { SimCardSectionConfigFactory } from '../../../factories';\n\n@Component({\n  selector: 'app-sim-card-details-container',\n  imports: [\n    DetailsAccordionContainerComponent,\n    ProgressSpinnerModule,\n    MessageModule,\n  ],\n  templateUrl: './sim-card-details-container.component.html',\n  styleUrl: './sim-card-details-container.component.scss',\n})\nexport class SimCardDetailsContainerComponent {\n  readonly entity = input<SimCardListItem | null>(null);\n\n  private readonly simCardSectionFactory = inject(SimCardSectionConfigFactory);\n  readonly entityDetailsState = inject(EntityDetailsStateService);\n\n  readonly isLoading = computed(() => this.entityDetailsState.isLoading());\n  readonly isSoftRefreshing = computed(() =>\n    this.entityDetailsState.isSoftRefreshing(),\n  );\n  readonly isInitialLoading = computed(\n    () => this.isLoading() && !this.isSoftRefreshing() && !this.fullSimCard(),\n  );\n  readonly fullSimCard = computed(() => {\n    const entityDetails = this.entityDetailsState.selectedItem();\n\n    if (!entityDetails) {\n      return null;\n    }\n    return entityDetails as SimCardResponse;\n  });\n  readonly sections = computed(() => {\n    const simCard = this.fullSimCard();\n    if (!simCard) return [];\n    return this.simCardSectionFactory.createAllSimCardSections(simCard);\n  });\n  readonly error = signal<string | null>(null);\n\n  onEntityChange(entity: unknown): void {\n    this.entityDetailsState.updateEntity(entity as SimCardResponse);\n    this.error.set(null);\n  }\n}\n","@if (!isInitialLoading() && !error()) {\n  @if (fullSimCard()) {\n    <app-details-accordion-container\n      [sections]=\"sections()\"\n      [entity]=\"fullSimCard()\"\n      [title]=\"fullSimCard()?.name || 'Sim Card Details'\"\n      subtitle=\"Sim Card\"\n      [allowModeToggle]=\"true\"\n      (entityChange)=\"onEntityChange($event)\"\n      initialMode=\"view\"\n    ></app-details-accordion-container>\n  } @else {\n    <div class=\"p-4\">\n      <p-message\n        severity=\"info\"\n        text=\"No sim card details available.\"\n      ></p-message>\n    </div>\n  }\n}\n","import { Component, computed, inject, input, signal } from '@angular/core';\nimport { MessageModule } from 'primeng/message';\nimport { ProgressSpinnerModule } from 'primeng/progressspinner';\nimport { AssetTagListItem, AssetTagResponse } from '../../../../../api';\nimport { EntityDetailsStateService } from '../../../services/entity/entity-details.state.service';\nimport { DetailsAccordionContainerComponent } from '../../details-accordion-container/details-accordion-container.component';\nimport { AssetTagSectionConfigFactory } from '../../../factories';\n\n@Component({\n  selector: 'app-asset-tag-details-container',\n  imports: [\n    DetailsAccordionContainerComponent,\n    ProgressSpinnerModule,\n    MessageModule,\n  ],\n  templateUrl: './asset-tag-details-container.component.html',\n  styleUrl: './asset-tag-details-container.component.scss',\n})\nexport class AssetTagDetailsContainerComponent {\n  readonly entity = input<AssetTagListItem | null>(null);\n\n  private readonly assetTagSectionFactory = inject(\n    AssetTagSectionConfigFactory,\n  );\n  readonly entityDetailsState = inject(EntityDetailsStateService);\n\n  readonly isLoading = computed(() => this.entityDetailsState.isLoading());\n  readonly isSoftRefreshing = computed(() =>\n    this.entityDetailsState.isSoftRefreshing(),\n  );\n  readonly isInitialLoading = computed(\n    () => this.isLoading() && !this.isSoftRefreshing() && !this.fullAssetTag(),\n  );\n  readonly fullAssetTag = computed(() => {\n    const entityDetails = this.entityDetailsState.selectedItem();\n\n    if (!entityDetails) {\n      return null;\n    }\n    return entityDetails as AssetTagResponse;\n  });\n  readonly sections = computed(() => {\n    const assetTag = this.fullAssetTag();\n    if (!assetTag) return [];\n    return this.assetTagSectionFactory.createAllAssetTagSections(assetTag);\n  });\n  readonly error = signal<string | null>(null);\n\n  onEntityChange(entity: unknown): void {\n    this.entityDetailsState.updateEntity(entity as AssetTagResponse);\n    this.error.set(null);\n  }\n}\n","@if (!isInitialLoading() && !error()) {\n  @if (fullAssetTag()) {\n    <app-details-accordion-container\n      [sections]=\"sections()\"\n      [entity]=\"fullAssetTag()\"\n      [title]=\"fullAssetTag()?.name || 'Asset Tag Details'\"\n      subtitle=\"Asset Tag\"\n      [allowModeToggle]=\"true\"\n      (entityChange)=\"onEntityChange($event)\"\n      initialMode=\"view\"\n    ></app-details-accordion-container>\n  } @else {\n    <div class=\"p-4\">\n      <p-message\n        severity=\"info\"\n        text=\"No asset tag details available.\"\n      ></p-message>\n    </div>\n  }\n}\n","import {\n  Component,\n  computed,\n  effect,\n  inject,\n  input,\n  signal,\n} from '@angular/core';\n\nimport { MessageModule } from 'primeng/message';\nimport { ProgressSpinnerModule } from 'primeng/progressspinner';\n\nimport { DetailsAccordionContainerComponent } from '../../details-accordion-container/details-accordion-container.component';\nimport {\n  DeviceConfigProfileCreateRequest,\n  DeviceConfigProfileListItem,\n  DeviceConfigProfileResponse,\n  DeviceTypeAccessory,\n  DeviceTypeResponse,\n  EntitiesService,\n  IoTypeListItem,\n} from '../../../../../api';\nimport { DeviceConfigProfileSectionConfigFactory } from '../../../factories';\nimport { EntityDetailsStateService } from '../../../services/entity/entity-details.state.service';\nimport { EntityOperationRegistryService } from '../../../services/entity/entity-operation-registry.service';\nimport { EMPTY, firstValueFrom } from 'rxjs';\nimport { RequestCacheService } from '../../../../../shared/services/request-cache.service';\nimport { isDefined, isNullOrUndefined } from '../../../../../shared/utils';\n\n@Component({\n  selector: 'app-device-config-profile-details-container',\n  imports: [\n    DetailsAccordionContainerComponent,\n    ProgressSpinnerModule,\n    MessageModule,\n  ],\n  templateUrl: './device-config-profile-details-container.component.html',\n  styleUrl: './device-config-profile-details-container.component.scss',\n})\nexport class DeviceConfigProfileDetailsContainerComponent {\n  readonly entity = input<DeviceConfigProfileListItem | null>(null);\n\n  private readonly deviceConfigProfileSectionFactory = inject(\n    DeviceConfigProfileSectionConfigFactory,\n  );\n  readonly entityDetailsState = inject(EntityDetailsStateService);\n  private readonly entitiesService = inject(EntitiesService);\n  private readonly operationRegistry = inject(EntityOperationRegistryService);\n  private readonly cacheService = inject(RequestCacheService);\n\n  readonly isLoading = computed(() => this.entityDetailsState.isLoading());\n  readonly isSoftRefreshing = computed(() =>\n    this.entityDetailsState.isSoftRefreshing(),\n  );\n  readonly isInitialLoading = computed(\n    () =>\n      this.isLoading() &&\n      !this.isSoftRefreshing() &&\n      !this.fullDeviceConfigProfile(),\n  );\n  readonly fullDeviceConfigProfile = computed(() => {\n    const entityDetails = this.entityDetailsState.selectedItem();\n\n    if (!entityDetails) {\n      return null;\n    }\n    return entityDetails as DeviceConfigProfileResponse;\n  });\n  readonly sections = computed(() => {\n    const deviceConfigProfile = this.fullDeviceConfigProfile();\n    const deviceType = this.deviceType();\n    const ioTypes = this.ioTypes();\n    if (!(deviceConfigProfile || deviceType || isDefined(ioTypes))) return [];\n    return this.deviceConfigProfileSectionFactory.createAllDeviceConfigProfileSections(\n      deviceConfigProfile,\n      this.deviceTypeAccessories(),\n      deviceType,\n      ioTypes,\n    );\n  });\n  readonly error = signal<string | null>(null);\n  readonly deviceTypeAccessories = signal<\n    Record<string, DeviceTypeAccessory> | undefined\n  >(undefined);\n  readonly deviceType = signal<DeviceTypeResponse | null>(null);\n  readonly ioTypes = signal<IoTypeListItem[]>([]);\n\n  constructor() {\n    this.operationRegistry.registerEntityOperations('device-config-profile', {\n      update: (id, data) =>\n        this.entitiesService.updateDeviceConfigProfile(id, data),\n      create: (data: DeviceConfigProfileCreateRequest) =>\n        this.entitiesService.createDeviceConfigProfile(data),\n      get: (id) => this.entitiesService.getDeviceConfigProfile(id),\n    });\n\n    this.operationRegistry.registerEntityOperations('device', {\n      update: (id, data) =>\n        this.entitiesService.updateDeviceConfigProfile(id, data),\n      create: (_data: DeviceConfigProfileCreateRequest) => EMPTY,\n      get: (_id) => EMPTY,\n    });\n\n    effect(() => {\n      const deviceConfigProfile = this.fullDeviceConfigProfile();\n      if (deviceConfigProfile) {\n        this.loadDeviceType(deviceConfigProfile.deviceType?.id ?? '').catch(\n          (error) => {\n            this.error.set(error.message);\n          },\n        );\n        this.loadIoTypes().catch((error) => {\n          this.error.set(error.message);\n        });\n      }\n    });\n  }\n\n  onEntityChange(entity: unknown): void {\n    this.entityDetailsState.updateEntity(entity as DeviceConfigProfileResponse);\n    this.error.set(null);\n  }\n\n  async loadDeviceType(deviceTypeId: string): Promise<void> {\n    const ownerId = this.entity()?.owner?.id;\n    if (!deviceTypeId || isNullOrUndefined(ownerId)) return;\n\n    await this.cacheService\n      .getOrFetchAsync(\n        `deviceType-${deviceTypeId}-${ownerId}`,\n        () =>\n          firstValueFrom(\n            this.entitiesService.getDeviceType(deviceTypeId, ownerId),\n          ),\n        300000,\n      )\n      .then((deviceType) => {\n        this.deviceType.set(deviceType);\n        this.deviceTypeAccessories.set(deviceType.accessories);\n      });\n  }\n\n  async loadIoTypes(): Promise<void> {\n    const ownerId = this.entity()?.owner?.id;\n    if (isNullOrUndefined(ownerId)) return;\n\n    await this.cacheService\n      .getOrFetchAsync(\n        `ioTypes-${ownerId}`,\n        () =>\n          firstValueFrom(\n            this.entitiesService.listIoTypes(ownerId, true, 0, 300),\n          ),\n        300000,\n      )\n      .then((response) => {\n        this.ioTypes.set(response.items);\n      });\n  }\n}\n","@if (!isInitialLoading() && !error()) {\n  @if (fullDeviceConfigProfile()) {\n    <app-details-accordion-container\n      [sections]=\"sections()\"\n      [entity]=\"fullDeviceConfigProfile()\"\n      [title]=\"\n        fullDeviceConfigProfile()?.name || 'Device Config Profile Details'\n      \"\n      subtitle=\"Device Config Profile\"\n      [allowModeToggle]=\"true\"\n      (entityChange)=\"onEntityChange($event)\"\n      initialMode=\"view\"\n    ></app-details-accordion-container>\n  } @else {\n    <div class=\"p-4\">\n      <p-message\n        severity=\"info\"\n        text=\"No device config profile details available.\"\n      ></p-message>\n    </div>\n  }\n}\n","import {\n  Component,\n  computed,\n  DestroyRef,\n  effect,\n  inject,\n  input,\n  OnInit,\n  signal,\n} from '@angular/core';\n\nimport { MessageModule } from 'primeng/message';\nimport { ProgressSpinnerModule } from 'primeng/progressspinner';\nimport { firstValueFrom } from 'rxjs';\n\nimport {\n  DeviceListItem,\n  EntitiesService,\n  DeviceResponse,\n  DeviceTypeAccessory,\n  DeviceTypeResponse,\n  IoTypeListItem,\n  DeviceCreateRequest,\n} from '../../../../../api';\nimport { RequestCacheService } from '../../../../../shared/services/request-cache.service';\nimport { isDefined, isNullOrUndefined } from '../../../../../shared/utils';\nimport { EntityDetailsStateService } from '../../../services/entity/entity-details.state.service';\nimport { EntityOperationRegistryService } from '../../../services/entity/entity-operation-registry.service';\nimport { DetailsAccordionContainerComponent } from '../../details-accordion-container/details-accordion-container.component';\nimport { DeviceSectionConfigFactory } from '../../../factories';\nimport { BroadcastEventMessageService } from '../../../services/broadcast-event-messages.service';\nimport { takeUntilDestroyed } from '@angular/core/rxjs-interop';\nimport { ToastService } from '../../../../../core/services/toast.service';\n\ninterface EntityUpdatedMessage {\n  entityType: string;\n  data: DeviceResponse;\n}\n@Component({\n  selector: 'app-device-details-container',\n  imports: [\n    DetailsAccordionContainerComponent,\n    ProgressSpinnerModule,\n    MessageModule,\n  ],\n  templateUrl: './device-details-container.component.html',\n  styleUrl: './device-details-container.component.scss',\n})\nexport class DeviceDetailsContainerComponent implements OnInit {\n  readonly entity = input<DeviceListItem | null>(null);\n\n  private readonly deviceSectionFactory = inject(DeviceSectionConfigFactory);\n  readonly entityDetailsState = inject(EntityDetailsStateService);\n  private readonly entitiesService = inject(EntitiesService);\n  private readonly operationRegistry = inject(EntityOperationRegistryService);\n  private readonly cacheService = inject(RequestCacheService);\n  private readonly broadcastService = inject(BroadcastEventMessageService);\n  private readonly toastService = inject(ToastService);\n  private readonly destroyRef = inject(DestroyRef);\n\n  readonly isLoading = computed(() => this.entityDetailsState.isLoading());\n  readonly isSoftRefreshing = computed(() =>\n    this.entityDetailsState.isSoftRefreshing(),\n  );\n  readonly isInitialLoading = computed(\n    () => this.isLoading() && !this.isSoftRefreshing() && !this.fullDevice(),\n  );\n  readonly fullDevice = computed(() => {\n    const entityDetails = this.entityDetailsState.selectedItem();\n\n    if (!entityDetails) {\n      return null;\n    }\n    return entityDetails as DeviceResponse;\n  });\n  readonly sections = computed(() => {\n    const device = this.fullDevice();\n    const deviceType = this.deviceType();\n    const ioTypes = this.ioTypes();\n    if (!(device || deviceType || isDefined(ioTypes))) return [];\n    return this.deviceSectionFactory.createAllDeviceSections(\n      device,\n      this.deviceTypeAccessories(),\n      deviceType,\n      ioTypes,\n    );\n  });\n  readonly error = signal<string | null>(null);\n  readonly deviceTypeAccessories = signal<\n    Record<string, DeviceTypeAccessory> | undefined\n  >(undefined);\n  readonly deviceType = signal<DeviceTypeResponse | null>(null);\n  readonly ioTypes = signal<IoTypeListItem[]>([]);\n  private isEntityUpdatedMessage(\n    message: unknown,\n  ): message is EntityUpdatedMessage {\n    return (\n      isDefined(message) &&\n      message !== null &&\n      typeof message === 'object' &&\n      'entityType' in message &&\n      'data' in message &&\n      (message as EntityUpdatedMessage).entityType === 'device'\n    );\n  }\n\n  constructor() {\n    this.operationRegistry.registerEntityOperations('device', {\n      update: (id, data) => this.entitiesService.updateDevice(id, data),\n      create: (data: DeviceCreateRequest) =>\n        this.entitiesService.createDevice(data),\n      get: (id) => this.entitiesService.getDevice(id),\n    });\n\n    effect(() => {\n      const device = this.fullDevice();\n      if (device) {\n        this.loadDeviceType(device.deviceType?.id ?? '').catch((error) => {\n          this.error.set(error.message);\n        });\n        this.loadIoTypes().catch((error) => {\n          this.error.set(error.message);\n        });\n      }\n    });\n  }\n\n  ngOnInit(): void {\n    this.broadcastService\n      .on('entity-updated')\n      .pipe(takeUntilDestroyed(this.destroyRef))\n      .subscribe((message) => {\n        if (this.isEntityUpdatedMessage(message)) {\n          this.toastService.showSuccess(\n            'Success',\n            'Device updated successfully',\n          );\n          this.onEntityChange(message.data);\n        }\n      });\n  }\n\n  onEntityChange(entity: unknown): void {\n    this.entityDetailsState.updateEntity(entity as DeviceResponse);\n    this.error.set(null);\n  }\n\n  async loadDeviceType(deviceTypeId: string): Promise<void> {\n    const ownerId = this.entity()?.owner?.id;\n    if (!deviceTypeId || isNullOrUndefined(ownerId)) return;\n\n    await this.cacheService\n      .getOrFetchAsync(\n        `deviceType-${deviceTypeId}-${ownerId}`,\n        () =>\n          firstValueFrom(\n            this.entitiesService.getDeviceType(deviceTypeId, ownerId),\n          ),\n        300000,\n      )\n      .then((deviceType) => {\n        this.deviceType.set(deviceType);\n        this.deviceTypeAccessories.set(deviceType.accessories);\n      });\n  }\n\n  async loadIoTypes(): Promise<void> {\n    const ownerId = this.entity()?.owner?.id;\n    if (isNullOrUndefined(ownerId)) return;\n\n    await this.cacheService\n      .getOrFetchAsync(\n        `ioTypes-${ownerId}`,\n        () =>\n          firstValueFrom(\n            this.entitiesService.listIoTypes(ownerId, true, 0, 300),\n          ),\n        300000,\n      )\n      .then((response) => {\n        this.ioTypes.set(response.items);\n      });\n  }\n}\n","@if (!isInitialLoading() && !error()) {\n  @if (fullDevice()) {\n    <app-details-accordion-container\n      [sections]=\"sections()\"\n      [entity]=\"fullDevice()\"\n      [title]=\"fullDevice()?.name || 'Device Details'\"\n      subtitle=\"Device\"\n      [allowModeToggle]=\"true\"\n      (entityChange)=\"onEntityChange($event)\"\n      initialMode=\"view\"\n    ></app-details-accordion-container>\n  } @else {\n    <div class=\"p-4\">\n      <p-message\n        severity=\"info\"\n        text=\"No device details available.\"\n      ></p-message>\n    </div>\n  }\n}\n","import { Component, computed, inject, input, signal } from '@angular/core';\nimport { MessageModule } from 'primeng/message';\nimport { ProgressSpinnerModule } from 'primeng/progressspinner';\nimport { GeofenceSectionConfigFactory } from '../../../factories';\nimport { EntityDetailsStateService } from '../../../services/entity/entity-details.state.service';\nimport { DetailsAccordionContainerComponent } from '../../details-accordion-container/details-accordion-container.component';\nimport { ZoneListItem, ZoneResponse } from '../../../../../api';\n\n@Component({\n  selector: 'app-geofence-details-container',\n  imports: [\n    DetailsAccordionContainerComponent,\n    ProgressSpinnerModule,\n    MessageModule,\n  ],\n  templateUrl: './geofence-details-container.component.html',\n  styleUrl: './geofence-details-container.component.scss',\n})\nexport class GeofenceDetailsContainerComponent {\n  readonly entity = input<ZoneListItem | null>(null);\n\n  private readonly geofenceSectionFactory = inject(\n    GeofenceSectionConfigFactory,\n  );\n  readonly entityDetailsState = inject(EntityDetailsStateService);\n\n  readonly isLoading = computed(() => this.entityDetailsState.isLoading());\n  readonly isSoftRefreshing = computed(() =>\n    this.entityDetailsState.isSoftRefreshing(),\n  );\n  readonly isInitialLoading = computed(\n    () => this.isLoading() && !this.isSoftRefreshing() && !this.fullGeofence(),\n  );\n  readonly fullGeofence = computed(() => {\n    const entityDetails = this.entityDetailsState.selectedItem();\n\n    if (!entityDetails) {\n      return null;\n    }\n    return entityDetails as ZoneResponse;\n  });\n  readonly sections = computed(() => {\n    const geofence = this.fullGeofence();\n    if (!geofence) return [];\n    return this.geofenceSectionFactory.createAllGeofenceSections(geofence);\n  });\n  readonly error = signal<string | null>(null);\n\n  onEntityChange(entity: unknown): void {\n    this.entityDetailsState.updateEntity(entity as ZoneResponse);\n    this.error.set(null);\n  }\n}\n","@if (!isInitialLoading() && !error()) {\n  @if (fullGeofence()) {\n    <app-details-accordion-container\n      [sections]=\"sections()\"\n      [entity]=\"fullGeofence()\"\n      [title]=\"fullGeofence()?.name || 'Geofence Details'\"\n      subtitle=\"Geofence\"\n      [allowModeToggle]=\"true\"\n      (entityChange)=\"onEntityChange($event)\"\n      initialMode=\"view\"\n    ></app-details-accordion-container>\n  } @else {\n    <div class=\"p-4\">\n      <p-message\n        severity=\"info\"\n        text=\"No geofence details available.\"\n      ></p-message>\n    </div>\n  }\n}\n","import {\n  Component,\n  computed,\n  effect,\n  inject,\n  input,\n  signal,\n} from '@angular/core';\n\nimport { MessageModule } from 'primeng/message';\nimport { ProgressSpinnerModule } from 'primeng/progressspinner';\n\nimport { DetailsAccordionContainerComponent } from '../../details-accordion-container/details-accordion-container.component';\nimport {\n  DeviceProviderCreateRequest,\n  DeviceProviderListItem,\n  DeviceProviderResponse,\n  EntitiesService,\n  DeviceProviderTypeResponse,\n} from '../../../../../api';\nimport { DeviceProviderSectionConfigFactory } from '../../../factories';\nimport { EntityDetailsStateService } from '../../../services/entity/entity-details.state.service';\nimport { EntityOperationRegistryService } from '../../../services/entity/entity-operation-registry.service';\nimport { firstValueFrom } from 'rxjs';\nimport { RequestCacheService } from '../../../../../shared/services/request-cache.service';\nimport { isDefined } from '../../../../../shared/utils';\n\n@Component({\n  selector: 'app-device-provider-details-container',\n  imports: [\n    DetailsAccordionContainerComponent,\n    ProgressSpinnerModule,\n    MessageModule,\n  ],\n  templateUrl: './device-provider-details-container.component.html',\n  styleUrl: './device-provider-details-container.component.scss',\n})\nexport class DeviceProviderDetailsContainerComponent {\n  readonly entity = input<DeviceProviderListItem | null>(null);\n\n  private readonly deviceProviderSectionFactory = inject(\n    DeviceProviderSectionConfigFactory,\n  );\n  readonly entityDetailsState = inject(EntityDetailsStateService);\n  private readonly entitiesService = inject(EntitiesService);\n  private readonly operationRegistry = inject(EntityOperationRegistryService);\n  private readonly cacheService = inject(RequestCacheService);\n\n  readonly isLoading = computed(() => this.entityDetailsState.isLoading());\n  readonly isSoftRefreshing = computed(() =>\n    this.entityDetailsState.isSoftRefreshing(),\n  );\n  readonly isInitialLoading = computed(\n    () =>\n      this.isLoading() &&\n      !this.isSoftRefreshing() &&\n      !this.fullDeviceProvider(),\n  );\n  readonly fullDeviceProvider = computed(() => {\n    const entityDetails = this.entityDetailsState.selectedItem();\n\n    if (!entityDetails) {\n      return null;\n    }\n    return entityDetails as DeviceProviderResponse;\n  });\n  readonly sections = computed(() => {\n    const deviceProvider = this.fullDeviceProvider();\n    const deviceProviderType = this.deviceProviderType();\n    if (!(deviceProvider || isDefined(deviceProviderType))) return [];\n    return this.deviceProviderSectionFactory.createAllDeviceProviderSections(\n      deviceProvider,\n      deviceProviderType,\n    );\n  });\n  readonly error = signal<string | null>(null);\n  readonly deviceProviderType = signal<DeviceProviderTypeResponse | null>(null);\n\n  constructor() {\n    this.operationRegistry.registerEntityOperations('device-provider', {\n      update: (id, data) => this.entitiesService.updateDeviceProvider(id, data),\n      create: (data: DeviceProviderCreateRequest) =>\n        this.entitiesService.createDeviceProvider(data),\n      get: (id) => this.entitiesService.getDeviceProvider(id),\n    });\n\n    effect(() => {\n      const deviceProvider = this.fullDeviceProvider();\n      if (isDefined(deviceProvider?.deviceProviderType?.id)) {\n        this.loadDeviceProviderType(\n          deviceProvider?.deviceProviderType?.id ?? '',\n        ).catch((error) => {\n          this.error.set(error.message);\n        });\n      }\n    });\n  }\n\n  onEntityChange(entity: unknown): void {\n    this.entityDetailsState.updateEntity(entity as DeviceProviderResponse);\n    this.error.set(null);\n  }\n\n  async loadDeviceProviderType(deviceProviderTypeId: string): Promise<void> {\n    await this.cacheService\n      .getOrFetchAsync(\n        `deviceProviderType-${deviceProviderTypeId}`,\n        () =>\n          firstValueFrom(\n            this.entitiesService.getDeviceProviderType(deviceProviderTypeId),\n          ),\n        300000,\n      )\n      .then((response) => {\n        this.deviceProviderType.set(response);\n      });\n  }\n}\n","@if (!isInitialLoading() && !error()) {\n  @if (fullDeviceProvider()) {\n    <app-details-accordion-container\n      [sections]=\"sections()\"\n      [entity]=\"fullDeviceProvider()\"\n      [title]=\"fullDeviceProvider()?.name || 'Device Provider Details'\"\n      subtitle=\"Device Provider\"\n      [allowModeToggle]=\"true\"\n      (entityChange)=\"onEntityChange($event)\"\n      initialMode=\"view\"\n    ></app-details-accordion-container>\n  } @else {\n    <div class=\"p-4\">\n      <p-message\n        severity=\"info\"\n        text=\"No device provider details available.\"\n      ></p-message>\n    </div>\n  }\n}\n","import {\n  Component,\n  computed,\n  effect,\n  inject,\n  input,\n  signal,\n} from '@angular/core';\n\nimport { MessageModule } from 'primeng/message';\nimport { ProgressSpinnerModule } from 'primeng/progressspinner';\n\nimport { DetailsAccordionContainerComponent } from '../../details-accordion-container/details-accordion-container.component';\nimport {\n  SmsGatewayProviderCreateRequest,\n  SmsGatewayProviderListItem,\n  SmsGatewayProviderResponse,\n  EntitiesService,\n  SmsGatewayProviderTypeResponse,\n  SmsGatewayProviderUpdateRequest,\n  IdName,\n} from '../../../../../api';\nimport { SmsGatewayProviderSectionConfigFactory } from '../../../factories';\nimport { EntityDetailsStateService } from '../../../services/entity/entity-details.state.service';\nimport { EntityOperationRegistryService } from '../../../services/entity/entity-operation-registry.service';\nimport { firstValueFrom } from 'rxjs';\nimport { RequestCacheService } from '../../../../../shared/services/request-cache.service';\nimport { isDefined, isNullOrUndefined } from '../../../../../shared/utils';\nimport { ApiSchemaService } from '../../../../../core/services/api-schema.service';\n\n@Component({\n  selector: 'app-sms-gateway-provider-details-container',\n  imports: [\n    DetailsAccordionContainerComponent,\n    ProgressSpinnerModule,\n    MessageModule,\n  ],\n  templateUrl: './sms-gateway-provider-details-container.component.html',\n  styleUrl: './sms-gateway-provider-details-container.component.scss',\n})\nexport class SmsGatewayProviderDetailsContainerComponent {\n  readonly entity = input<SmsGatewayProviderListItem | null>(null);\n\n  private readonly smsGatewayProviderSectionFactory = inject(\n    SmsGatewayProviderSectionConfigFactory,\n  );\n  readonly entityDetailsState = inject(EntityDetailsStateService);\n  private readonly entitiesService = inject(EntitiesService);\n  private readonly operationRegistry = inject(EntityOperationRegistryService);\n  private readonly cacheService = inject(RequestCacheService);\n  private readonly apiSchemaService = inject(ApiSchemaService);\n  private readonly entityName = 'smsgatewayprovider';\n\n  readonly isLoading = computed(() => this.entityDetailsState.isLoading());\n  readonly isSoftRefreshing = computed(() =>\n    this.entityDetailsState.isSoftRefreshing(),\n  );\n  readonly isInitialLoading = computed(\n    () =>\n      this.isLoading() &&\n      !this.isSoftRefreshing() &&\n      !this.fullSmsGatewayProvider(),\n  );\n  readonly fullSmsGatewayProvider = computed(() => {\n    const entityDetails = this.entityDetailsState.selectedItem();\n\n    if (!entityDetails) {\n      return null;\n    }\n    return entityDetails as SmsGatewayProviderResponse;\n  });\n  readonly sections = computed(() => {\n    const smsGatewayProvider = this.fullSmsGatewayProvider();\n    const smsGatewayProviderType = this.smsGatewayProviderType();\n    if (!(smsGatewayProvider || isDefined(smsGatewayProviderType))) return [];\n    return this.smsGatewayProviderSectionFactory.createAllSmsGatewayProviderSections(\n      smsGatewayProvider,\n      smsGatewayProviderType,\n    );\n  });\n  readonly error = signal<string | null>(null);\n  readonly smsGatewayProviderType =\n    signal<SmsGatewayProviderTypeResponse | null>(null);\n\n  constructor() {\n    this.operationRegistry.registerEntityOperations('sms-gateway-provider', {\n      update: (id, data) =>\n        this.entitiesService.updateSmsGatewayProvider(\n          id,\n          data as SmsGatewayProviderUpdateRequest,\n        ),\n      create: (data: SmsGatewayProviderCreateRequest) =>\n        this.entitiesService.createSmsGatewayProvider(data),\n      get: (id) => this.entitiesService.getSmsGatewayProvider(id),\n    });\n\n    effect(() => {\n      const smsGatewayProvider = this.fullSmsGatewayProvider();\n      let typeIdToLoad: string | undefined | null = null;\n\n      if (smsGatewayProvider) {\n        const typeObject = this.apiSchemaService.getEntityType<\n          Record<string, unknown>,\n          IdName\n        >(smsGatewayProvider as Record<string, unknown>, this.entityName);\n        typeIdToLoad = typeObject?.id;\n      }\n\n      if (isDefined(typeIdToLoad) && typeIdToLoad !== '') {\n        this.loadSmsGatewayProviderType(typeIdToLoad).catch((error) => {\n          this.error.set(\n            error.message ?? 'Failed to load SMS gateway provider type',\n          );\n        });\n      } else if (\n        smsGatewayProvider &&\n        (isNullOrUndefined(typeIdToLoad) || typeIdToLoad === '')\n      ) {\n        this.smsGatewayProviderType.set(null);\n      }\n    });\n  }\n\n  onEntityChange(entity: unknown): void {\n    this.entityDetailsState.updateEntity(entity as SmsGatewayProviderResponse);\n    this.error.set(null);\n  }\n\n  async loadSmsGatewayProviderType(\n    smsGatewayProviderTypeId: string,\n  ): Promise<void> {\n    if (!smsGatewayProviderTypeId) {\n      this.smsGatewayProviderType.set(null);\n      return;\n    }\n    await this.cacheService\n      .getOrFetchAsync(\n        `smsGatewayProviderType-${smsGatewayProviderTypeId}`,\n        () =>\n          firstValueFrom(\n            this.entitiesService.getSmsGatewayProviderType(\n              smsGatewayProviderTypeId,\n            ),\n          ),\n        300000,\n      )\n      .then((response) => {\n        this.smsGatewayProviderType.set(response);\n      });\n  }\n}\n","@if (!isInitialLoading() && !error()) {\n  @if (fullSmsGatewayProvider()) {\n    <app-details-accordion-container\n      [sections]=\"sections()\"\n      [entity]=\"fullSmsGatewayProvider()\"\n      [title]=\"fullSmsGatewayProvider()?.name || 'SMS Gateway Provider Details'\"\n      subtitle=\"SMS Gateway Provider\"\n      [allowModeToggle]=\"true\"\n      (entityChange)=\"onEntityChange($event)\"\n      initialMode=\"view\"\n    ></app-details-accordion-container>\n  } @else {\n    <div class=\"p-4\">\n      <p-message\n        severity=\"info\"\n        text=\"No SMS gateway provider details available.\"\n      ></p-message>\n    </div>\n  }\n}\n","import {\n  Component,\n  computed,\n  DestroyRef,\n  inject,\n  input,\n  OnInit,\n  signal,\n} from '@angular/core';\nimport { IoTypeListItem, IoTypeResponse } from '../../../../../api';\nimport { DetailsAccordionContainerComponent } from '../../details-accordion-container/details-accordion-container.component';\nimport { EntityDetailsStateService } from '../../../services/entity/entity-details.state.service';\nimport { ProgressSpinnerModule } from 'primeng/progressspinner';\nimport { MessageModule } from 'primeng/message';\nimport { IoTypeSectionConfigFactory } from '../../../factories';\nimport { BroadcastEventMessageService } from '../../../services/broadcast-event-messages.service';\nimport { takeUntilDestroyed } from '@angular/core/rxjs-interop';\nimport { isDefined } from '../../../../../shared/utils';\nimport { ToastService } from '../../../../../core/services/toast.service';\n\ninterface EntityUpdatedMessage {\n  entityType: string;\n  data: IoTypeResponse;\n}\n@Component({\n  selector: 'app-io-type-details-container',\n  imports: [\n    DetailsAccordionContainerComponent,\n    ProgressSpinnerModule,\n    MessageModule,\n  ],\n  templateUrl: './io-type-details-container.component.html',\n  styleUrl: './io-type-details-container.component.scss',\n})\nexport class IoTypeDetailsContainerComponent implements OnInit {\n  readonly entity = input<IoTypeListItem | null>(null);\n\n  private readonly ioTypeSectionFactory = inject(IoTypeSectionConfigFactory);\n  readonly entityDetailsState = inject(EntityDetailsStateService);\n  private readonly broadcastService = inject(BroadcastEventMessageService);\n  private readonly toastService = inject(ToastService);\n  private readonly destroyRef = inject(DestroyRef);\n\n  readonly isLoading = computed(() => this.entityDetailsState.isLoading());\n  readonly isSoftRefreshing = computed(() =>\n    this.entityDetailsState.isSoftRefreshing(),\n  );\n  readonly isInitialLoading = computed(\n    () => this.isLoading() && !this.isSoftRefreshing() && !this.fullIoType(),\n  );\n  readonly fullIoType = computed(() => {\n    const entityDetails = this.entityDetailsState.selectedItem();\n\n    if (!entityDetails) {\n      return null;\n    }\n    return entityDetails as IoTypeResponse;\n  });\n  readonly sections = computed(() => {\n    const ioType = this.fullIoType();\n    if (!ioType) return [];\n    return this.ioTypeSectionFactory.createAllIoTypeSections(ioType);\n  });\n  readonly error = signal<string | null>(null);\n  private isEntityUpdatedMessage(\n    message: unknown,\n  ): message is EntityUpdatedMessage {\n    return (\n      isDefined(message) &&\n      message !== null &&\n      typeof message === 'object' &&\n      'entityType' in message &&\n      'data' in message &&\n      (message as EntityUpdatedMessage).entityType === 'iotype'\n    );\n  }\n  onEntityChange(entity: unknown): void {\n    this.entityDetailsState.updateEntity(entity as IoTypeResponse);\n    this.error.set(null);\n  }\n\n  ngOnInit(): void {\n    this.broadcastService\n      .on('entity-updated')\n      .pipe(takeUntilDestroyed(this.destroyRef))\n      .subscribe((message) => {\n        if (this.isEntityUpdatedMessage(message)) {\n          this.toastService.showSuccess(\n            'Success',\n            'IO Type updated successfully',\n          );\n          this.onEntityChange(message.data);\n        }\n      });\n  }\n}\n","@if (!isInitialLoading() && !error()) {\n  @if (fullIoType()) {\n    <app-details-accordion-container\n      [sections]=\"sections()\"\n      [entity]=\"fullIoType()\"\n      [title]=\"fullIoType()?.name || 'IO Type Details'\"\n      subtitle=\"IO Type\"\n      [allowModeToggle]=\"true\"\n      (entityChange)=\"onEntityChange($event)\"\n      initialMode=\"view\"\n    ></app-details-accordion-container>\n  } @else {\n    <div class=\"p-4\">\n      <p-message\n        severity=\"info\"\n        text=\"No IO type details available.\"\n      ></p-message>\n    </div>\n  }\n}\n","import { Component, computed, inject, input, signal } from '@angular/core';\nimport { MessageModule } from 'primeng/message';\nimport { ProgressSpinnerModule } from 'primeng/progressspinner';\n\nimport {\n  OverspeedProfileListItem,\n  OverspeedProfileResponse,\n} from '../../../../../api';\nimport { EntityDetailsStateService } from '../../../services/entity/entity-details.state.service';\nimport { DetailsAccordionContainerComponent } from '../../details-accordion-container/details-accordion-container.component';\nimport { OverspeedProfileSectionConfigFactory } from '../../../factories';\n\n@Component({\n  selector: 'app-overspeed-profile-details-container',\n  imports: [\n    DetailsAccordionContainerComponent,\n    ProgressSpinnerModule,\n    MessageModule,\n  ],\n  templateUrl: './overspeed-profile-details-container.component.html',\n  styleUrl: './overspeed-profile-details-container.component.scss',\n})\nexport class OverspeedProfileDetailsContainerComponent {\n  readonly entity = input<OverspeedProfileListItem | null>(null);\n\n  private readonly overspeedProfileSectionFactory = inject(\n    OverspeedProfileSectionConfigFactory,\n  );\n  readonly entityDetailsState = inject(EntityDetailsStateService);\n\n  readonly isLoading = computed(() => this.entityDetailsState.isLoading());\n  readonly isSoftRefreshing = computed(() =>\n    this.entityDetailsState.isSoftRefreshing(),\n  );\n  readonly isInitialLoading = computed(\n    () =>\n      this.isLoading() &&\n      !this.isSoftRefreshing() &&\n      !this.fullOverspeedProfile(),\n  );\n  readonly fullOverspeedProfile = computed(() => {\n    const entityDetails = this.entityDetailsState.selectedItem();\n\n    if (!entityDetails) {\n      return null;\n    }\n    return entityDetails as OverspeedProfileResponse;\n  });\n  readonly sections = computed(() => {\n    const overspeedProfile = this.fullOverspeedProfile();\n    if (!overspeedProfile) return [];\n    return this.overspeedProfileSectionFactory.createAllOverspeedProfileSections(\n      overspeedProfile,\n    );\n  });\n  readonly error = signal<string | null>(null);\n\n  onEntityChange(entity: unknown): void {\n    this.entityDetailsState.updateEntity(entity as OverspeedProfileResponse);\n    this.error.set(null);\n  }\n}\n","@if (!isInitialLoading() && !error()) {\n  @if (fullOverspeedProfile()) {\n    <app-details-accordion-container\n      [sections]=\"sections()\"\n      [entity]=\"fullOverspeedProfile()\"\n      [title]=\"fullOverspeedProfile()?.name || 'Overspeed Profile Details'\"\n      subtitle=\"Overspeed Profile\"\n      [allowModeToggle]=\"true\"\n      (entityChange)=\"onEntityChange($event)\"\n      initialMode=\"view\"\n    ></app-details-accordion-container>\n  } @else {\n    <div class=\"p-4\">\n      <p-message\n        severity=\"info\"\n        text=\"No overspeed profile details available.\"\n      ></p-message>\n    </div>\n  }\n}\n","import {\n  Component,\n  computed,\n  DestroyRef,\n  inject,\n  input,\n  OnInit,\n  signal,\n} from '@angular/core';\n\nimport { MessageModule } from 'primeng/message';\nimport { ProgressSpinnerModule } from 'primeng/progressspinner';\n\nimport {\n  AlertListItem,\n  EntitiesService,\n  AlertResponse,\n  AlertCreateRequest,\n} from '../../../../../api';\nimport { isDefined, isNullOrUndefined } from '../../../../../shared/utils';\nimport { EntityDetailsStateService } from '../../../services/entity/entity-details.state.service';\nimport { EntityOperationRegistryService } from '../../../services/entity/entity-operation-registry.service';\nimport { DetailsAccordionContainerComponent } from '../../details-accordion-container/details-accordion-container.component';\nimport { AlertSectionConfigFactory } from '../../../factories';\nimport { ToastService } from '../../../../../core/services/toast.service';\nimport { BroadcastEventMessageService } from '../../../services/broadcast-event-messages.service';\nimport { takeUntilDestroyed } from '@angular/core/rxjs-interop';\n\ninterface EntityUpdatedMessage {\n  entityType: string;\n  data: AlertResponse;\n}\n@Component({\n  selector: 'app-alert-details-container',\n  imports: [\n    DetailsAccordionContainerComponent,\n    ProgressSpinnerModule,\n    MessageModule,\n  ],\n  templateUrl: './alert-details-container.component.html',\n  styleUrl: './alert-details-container.component.scss',\n})\nexport class AlertDetailsContainerComponent implements OnInit {\n  readonly entity = input<AlertListItem | null>(null);\n\n  private readonly alertSectionFactory = inject(AlertSectionConfigFactory);\n  readonly entityDetailsState = inject(EntityDetailsStateService);\n  private readonly entitiesService = inject(EntitiesService);\n  private readonly operationRegistry = inject(EntityOperationRegistryService);\n  private readonly broadcastService = inject(BroadcastEventMessageService);\n  private readonly toastService = inject(ToastService);\n  private readonly destroyRef = inject(DestroyRef);\n\n  readonly isLoading = computed(() => this.entityDetailsState.isLoading());\n  readonly isSoftRefreshing = computed(() =>\n    this.entityDetailsState.isSoftRefreshing(),\n  );\n  readonly isInitialLoading = computed(\n    () => this.isLoading() && !this.isSoftRefreshing() && !this.fullAlert(),\n  );\n  readonly fullAlert = computed(() => {\n    const entityDetails = this.entityDetailsState.selectedItem();\n\n    if (isNullOrUndefined(entityDetails)) {\n      return null;\n    }\n    return entityDetails as AlertResponse;\n  });\n  readonly sections = computed(() => {\n    const alert = this.fullAlert();\n    if (isNullOrUndefined(alert)) return [];\n    return this.alertSectionFactory.createAllAlertSections(alert);\n  });\n  readonly error = signal<string | null>(null);\n  private isEntityUpdatedMessage(\n    message: unknown,\n  ): message is EntityUpdatedMessage {\n    return (\n      isDefined(message) &&\n      message !== null &&\n      typeof message === 'object' &&\n      'entityType' in message &&\n      'data' in message &&\n      (message as EntityUpdatedMessage).entityType === 'alert'\n    );\n  }\n\n  constructor() {\n    this.operationRegistry.registerEntityOperations('alert', {\n      update: (id, data) => this.entitiesService.updateAlert(id, data),\n      create: (data: AlertCreateRequest) =>\n        this.entitiesService.createAlert(data),\n      get: (id) => this.entitiesService.getAlert(id),\n    });\n  }\n\n  ngOnInit(): void {\n    this.broadcastService\n      .on('entity-updated')\n      .pipe(takeUntilDestroyed(this.destroyRef))\n      .subscribe((message) => {\n        if (this.isEntityUpdatedMessage(message)) {\n          this.toastService.showSuccess(\n            'Success',\n            'Alert updated successfully',\n          );\n          this.onEntityChange(message.data);\n        }\n      });\n  }\n\n  onEntityChange(entity: unknown): void {\n    this.entityDetailsState.updateEntity(entity as AlertResponse);\n    this.error.set(null);\n  }\n}\n","@if (!isInitialLoading() && !error()) {\n  @if (fullAlert()) {\n    <app-details-accordion-container\n      [sections]=\"sections()\"\n      [entity]=\"fullAlert()\"\n      [title]=\"fullAlert()?.name || 'Alert Details'\"\n      subtitle=\"Alert\"\n      [allowModeToggle]=\"true\"\n      (entityChange)=\"onEntityChange($event)\"\n      initialMode=\"view\"\n    ></app-details-accordion-container>\n  } @else {\n    <div class=\"p-4\">\n      <p-message severity=\"info\" text=\"No alert details available.\"></p-message>\n    </div>\n  }\n}\n","import { Component, computed, inject, input, signal } from '@angular/core';\nimport { MessageModule } from 'primeng/message';\nimport { ProgressSpinnerModule } from 'primeng/progressspinner';\n\nimport { UserRoleListItem, UserRoleResponse } from '../../../../../api';\nimport { EntityDetailsStateService } from '../../../services/entity/entity-details.state.service';\nimport { DetailsAccordionContainerComponent } from '../../details-accordion-container/details-accordion-container.component';\nimport { UserRoleSectionConfigFactory } from '../../../factories';\n\n@Component({\n  selector: 'app-user-role-details-container',\n  imports: [\n    DetailsAccordionContainerComponent,\n    ProgressSpinnerModule,\n    MessageModule,\n  ],\n  templateUrl: './user-role-details-container.component.html',\n  styleUrl: './user-role-details-container.component.scss',\n})\nexport class UserRoleDetailsContainerComponent {\n  readonly entity = input<UserRoleListItem | null>(null);\n\n  private readonly userRoleSectionFactory = inject(\n    UserRoleSectionConfigFactory,\n  );\n  readonly entityDetailsState = inject(EntityDetailsStateService);\n\n  readonly isLoading = computed(() => this.entityDetailsState.isLoading());\n  readonly isSoftRefreshing = computed(() =>\n    this.entityDetailsState.isSoftRefreshing(),\n  );\n  readonly isInitialLoading = computed(\n    () => this.isLoading() && !this.isSoftRefreshing() && !this.fullUserRole(),\n  );\n  readonly fullUserRole = computed(() => {\n    const entityDetails = this.entityDetailsState.selectedItem();\n\n    if (!entityDetails) {\n      return null;\n    }\n    return entityDetails as UserRoleResponse;\n  });\n  readonly sections = computed(() => {\n    const userRole = this.fullUserRole();\n    if (!userRole) return [];\n    return this.userRoleSectionFactory.createAllUserRoleSections(userRole);\n  });\n  readonly error = signal<string | null>(null);\n\n  onEntityChange(entity: unknown): void {\n    this.entityDetailsState.updateEntity(entity as UserRoleResponse);\n    this.error.set(null);\n  }\n}\n","@if (!isInitialLoading() && !error()) {\n  @if (fullUserRole()) {\n    <app-details-accordion-container\n      [sections]=\"sections()\"\n      [entity]=\"fullUserRole()\"\n      [title]=\"fullUserRole()?.name || 'User Role Details'\"\n      subtitle=\"User Role\"\n      [allowModeToggle]=\"true\"\n      (entityChange)=\"onEntityChange($event)\"\n      initialMode=\"view\"\n    ></app-details-accordion-container>\n  } @else {\n    <div class=\"p-4\">\n      <p-message\n        severity=\"info\"\n        text=\"No user role details available.\"\n      ></p-message>\n    </div>\n  }\n}\n","import { Component, computed, inject, input, signal } from '@angular/core';\nimport { MessageModule } from 'primeng/message';\nimport { ProgressSpinnerModule } from 'primeng/progressspinner';\n\nimport { UserListItem, UserResponse } from '../../../../../api';\nimport { EntityDetailsStateService } from '../../../services/entity/entity-details.state.service';\nimport { DetailsAccordionContainerComponent } from '../../details-accordion-container/details-accordion-container.component';\nimport { UserSectionConfigFactory } from '../../../factories';\nimport { ActivatedRoute } from '@angular/router';\n\n@Component({\n  selector: 'app-user-details-container',\n  imports: [\n    DetailsAccordionContainerComponent,\n    ProgressSpinnerModule,\n    MessageModule,\n  ],\n  templateUrl: './user-details-container.component.html',\n  styleUrl: './user-details-container.component.scss',\n})\nexport class UserDetailsContainerComponent {\n  readonly entity = input<UserListItem | null>(null);\n\n  private readonly userSectionFactory = inject(UserSectionConfigFactory);\n  readonly entityDetailsState = inject(EntityDetailsStateService);\n  private readonly activatedRoute = inject(ActivatedRoute);\n\n  readonly isLoading = computed(() => this.entityDetailsState.isLoading());\n  readonly isSoftRefreshing = computed(() =>\n    this.entityDetailsState.isSoftRefreshing(),\n  );\n  readonly isInitialLoading = computed(\n    () => this.isLoading() && !this.isSoftRefreshing() && !this.fullUser(),\n  );\n  readonly fullUser = computed(() => {\n    const entityDetails = this.entityDetailsState.selectedItem();\n\n    if (!entityDetails) {\n      return null;\n    }\n    return entityDetails as UserResponse;\n  });\n  readonly sections = computed(() => {\n    const user = this.fullUser();\n\n    if (!user) return [];\n    const routeParams = this.getRouteParams();\n\n    const ownerId =\n      routeParams['clientId'] ??\n      routeParams['vendorId'] ??\n      routeParams['distributorId'] ??\n      'none';\n    return this.userSectionFactory.createAllUserSections(user, `${ownerId}`);\n  });\n  readonly error = signal<string | null>(null);\n\n  onEntityChange(entity: unknown): void {\n    this.entityDetailsState.updateEntity(entity as UserResponse);\n    this.error.set(null);\n  }\n\n  private getRouteParams(): Record<string, string | number> {\n    // Start from the root and collect all parameters from the entire route tree\n    let rootRoute = this.activatedRoute;\n    while (rootRoute.parent) {\n      rootRoute = rootRoute.parent;\n    }\n\n    const allParams: Record<string, string | number> = {};\n\n    // Recursively collect parameters from all route segments\n    this.collectParamsFromRoute(rootRoute, allParams);\n\n    return allParams;\n  }\n\n  private collectParamsFromRoute(\n    route: ActivatedRoute,\n    allParams: Record<string, string | number>,\n  ): void {\n    // Add current route's parameters\n    Object.assign(\n      allParams,\n      route.snapshot.params as Record<string, string | number>,\n    );\n\n    // Recursively collect from all children\n    route.children.forEach((childRoute) => {\n      this.collectParamsFromRoute(childRoute, allParams);\n    });\n  }\n}\n","@if (!isInitialLoading() && !error()) {\n  @if (fullUser()) {\n    <app-details-accordion-container\n      [sections]=\"sections()\"\n      [entity]=\"fullUser()\"\n      [title]=\"fullUser()?.name || 'User Details'\"\n      subtitle=\"User\"\n      [allowModeToggle]=\"true\"\n      (entityChange)=\"onEntityChange($event)\"\n      initialMode=\"view\"\n    ></app-details-accordion-container>\n  } @else {\n    <div class=\"p-4\">\n      <p-message severity=\"info\" text=\"No user details available.\"></p-message>\n    </div>\n  }\n}\n","import { Component, computed, inject, input, signal } from '@angular/core';\nimport { CustomFieldResponse } from '../../../models';\nimport { EntityDetailsStateService } from '../../../services/entity/entity-details.state.service';\nimport { CustomFieldSectionConfigFactory } from '../../../factories';\nimport { MessageModule } from 'primeng/message';\nimport { ProgressSpinnerModule } from 'primeng/progressspinner';\nimport { DetailsAccordionContainerComponent } from '../../details-accordion-container/details-accordion-container.component';\n\n@Component({\n  selector: 'app-custom-field-details-container',\n  imports: [\n    DetailsAccordionContainerComponent,\n    ProgressSpinnerModule,\n    MessageModule,\n  ],\n  templateUrl: './custom-field-details-container.component.html',\n  styleUrl: './custom-field-details-container.component.scss',\n})\nexport class CustomFieldDetailsContainerComponent {\n  readonly entity = input<CustomFieldResponse | null>(null);\n\n  private readonly customFieldSectionFactory = inject(\n    CustomFieldSectionConfigFactory,\n  );\n  readonly entityDetailsState = inject(EntityDetailsStateService);\n\n  readonly isLoading = computed(() => this.entityDetailsState.isLoading());\n  readonly isSoftRefreshing = computed(() =>\n    this.entityDetailsState.isSoftRefreshing(),\n  );\n  readonly isInitialLoading = computed(\n    () =>\n      this.isLoading() && !this.isSoftRefreshing() && !this.fullCustomField(),\n  );\n  readonly fullCustomField = computed(() => {\n    const entityDetails = this.entityDetailsState.selectedItem();\n\n    if (!entityDetails) {\n      return null;\n    }\n    return entityDetails as CustomFieldResponse;\n  });\n  readonly sections = computed(() => {\n    const customField = this.fullCustomField();\n    if (!customField) return [];\n    return this.customFieldSectionFactory.createAllCustomFieldSections(\n      customField,\n    );\n  });\n  readonly error = signal<string | null>(null);\n\n  onEntityChange(entity: unknown): void {\n    this.entityDetailsState.updateEntity(entity as CustomFieldResponse);\n    this.error.set(null);\n  }\n}\n","@if (!isInitialLoading() && !error()) {\n  @if (fullCustomField()) {\n    <app-details-accordion-container\n      [sections]=\"sections()\"\n      [entity]=\"fullCustomField()\"\n      [title]=\"fullCustomField()?.name || 'Custom Field Details'\"\n      subtitle=\"Custom Field\"\n      [allowModeToggle]=\"true\"\n      (entityChange)=\"onEntityChange($event)\"\n      initialMode=\"view\"\n    ></app-details-accordion-container>\n  } @else {\n    <div class=\"p-4\">\n      <p-message\n        severity=\"info\"\n        text=\"No custom field details available.\"\n      ></p-message>\n    </div>\n  }\n}\n","import {\n  Component,\n  computed,\n  effect,\n  inject,\n  input,\n  signal,\n} from '@angular/core';\n\nimport { MessageModule } from 'primeng/message';\nimport { ProgressSpinnerModule } from 'primeng/progressspinner';\n\nimport { DetailsAccordionContainerComponent } from '../../details-accordion-container/details-accordion-container.component';\nimport {\n  EmailProviderCreateRequest,\n  EmailProviderListItem,\n  EmailProviderResponse,\n  EntitiesService,\n  EmailProviderTypeResponse,\n  IdName,\n} from '../../../../../api';\nimport { EmailProviderSectionConfigFactory } from '../../../factories';\nimport { EntityDetailsStateService } from '../../../services/entity/entity-details.state.service';\nimport { EntityOperationRegistryService } from '../../../services/entity/entity-operation-registry.service';\nimport { firstValueFrom } from 'rxjs';\nimport { RequestCacheService } from '../../../../../shared/services/request-cache.service';\nimport { isDefined } from '../../../../../shared/utils';\nimport { ApiSchemaService } from '../../../../../core/services/api-schema.service';\n\n@Component({\n  selector: 'app-email-provider-details-container',\n  imports: [\n    DetailsAccordionContainerComponent,\n    ProgressSpinnerModule,\n    MessageModule,\n  ],\n  templateUrl: './email-provider-details-container.component.html',\n  styleUrl: './email-provider-details-container.component.scss',\n})\nexport class EmailProviderDetailsContainerComponent {\n  readonly entity = input<EmailProviderListItem | null>(null);\n\n  private readonly emailProviderSectionFactory = inject(\n    EmailProviderSectionConfigFactory,\n  );\n  readonly entityDetailsState = inject(EntityDetailsStateService);\n  private readonly entitiesService = inject(EntitiesService);\n  private readonly operationRegistry = inject(EntityOperationRegistryService);\n  private readonly cacheService = inject(RequestCacheService);\n  private readonly apiSchemaService = inject(ApiSchemaService);\n  private readonly entityName = 'EmailProvider';\n\n  readonly isLoading = computed(() => this.entityDetailsState.isLoading());\n  readonly isSoftRefreshing = computed(() =>\n    this.entityDetailsState.isSoftRefreshing(),\n  );\n  readonly isInitialLoading = computed(\n    () =>\n      this.isLoading() && !this.isSoftRefreshing() && !this.fullEmailProvider(),\n  );\n  readonly fullEmailProvider = computed(() => {\n    const entityDetails = this.entityDetailsState.selectedItem();\n\n    if (!entityDetails) {\n      return null;\n    }\n\n    return entityDetails as EmailProviderResponse;\n  });\n  readonly sections = computed(() => {\n    const emailProvider = this.fullEmailProvider();\n    const emailProviderType = this.emailProviderType();\n    if (!(emailProvider || isDefined(emailProviderType))) return [];\n    return this.emailProviderSectionFactory.createAllEmailProviderSections(\n      emailProvider,\n      emailProviderType,\n    );\n  });\n  readonly error = signal<string | null>(null);\n  readonly emailProviderType = signal<EmailProviderTypeResponse | null>(null);\n\n  constructor() {\n    this.operationRegistry.registerEntityOperations('email-provider', {\n      update: (id, data) => this.entitiesService.updateEmailProvider(id, data),\n      create: (data: EmailProviderCreateRequest) =>\n        this.entitiesService.createEmailProvider(data),\n      get: (id) => this.entitiesService.getEmailProvider(id),\n    });\n\n    effect(() => {\n      const emailProvider = this.fullEmailProvider();\n      let typeIdToLoad: string | undefined | null = null;\n      if (emailProvider) {\n        typeIdToLoad = this.apiSchemaService.getEntityType<\n          Record<string, unknown>,\n          IdName\n        >(emailProvider as Record<string, unknown>, this.entityName)?.id;\n      }\n      if (isDefined(typeIdToLoad) && typeIdToLoad !== '') {\n        this.loadEmailProviderType(typeIdToLoad).catch((error) => {\n          this.error.set(error.message);\n        });\n      } else {\n        this.emailProviderType.set(null);\n      }\n    });\n  }\n\n  onEntityChange(entity: unknown): void {\n    this.entityDetailsState.updateEntity(entity as EmailProviderResponse);\n    this.error.set(null);\n  }\n\n  async loadEmailProviderType(emailProviderTypeId: string): Promise<void> {\n    if (!emailProviderTypeId) {\n      this.emailProviderType.set(null);\n      return;\n    }\n    await this.cacheService\n      .getOrFetchAsync(\n        `emailProviderType-${emailProviderTypeId}`,\n        () =>\n          firstValueFrom(\n            this.entitiesService.getEmailProviderType(emailProviderTypeId),\n          ),\n        300000,\n      )\n      .then((response) => {\n        this.emailProviderType.set(response);\n      });\n  }\n}\n","@if (!isInitialLoading() && !error()) {\n  @if (fullEmailProvider()) {\n    <app-details-accordion-container\n      [sections]=\"sections()\"\n      [entity]=\"fullEmailProvider()\"\n      [title]=\"fullEmailProvider()?.name || 'Email Provider Details'\"\n      subtitle=\"Email Provider\"\n      [allowModeToggle]=\"true\"\n      (entityChange)=\"onEntityChange($event)\"\n      initialMode=\"view\"\n    ></app-details-accordion-container>\n  } @else {\n    <div class=\"p-4\">\n      <p-message\n        severity=\"info\"\n        text=\"No email provider details available.\"\n      ></p-message>\n    </div>\n  }\n}\n","import {\n  Component,\n  computed,\n  effect,\n  inject,\n  input,\n  signal,\n} from '@angular/core';\nimport { MessageModule } from 'primeng/message';\nimport { ProgressSpinnerModule } from 'primeng/progressspinner';\n\nimport { ThemeListItem, ThemeResponse } from '../../../../../api';\nimport { EntityDetailsStateService } from '../../../services/entity/entity-details.state.service';\nimport { DetailsAccordionContainerComponent } from '../../details-accordion-container/details-accordion-container.component';\nimport { ThemeSectionConfigFactory } from '../../../factories';\nimport { ThemeDataService } from '../../../../../shared/services/theme-data.service';\nimport { isDefined } from '../../../../../shared/utils';\n\n@Component({\n  selector: 'app-theme-details-container',\n  imports: [\n    DetailsAccordionContainerComponent,\n    ProgressSpinnerModule,\n    MessageModule,\n  ],\n  templateUrl: './theme-details-container.component.html',\n  styleUrl: './theme-details-container.component.scss',\n})\nexport class ThemeDetailsContainerComponent {\n  readonly entity = input<ThemeListItem | null>(null);\n\n  private readonly themeSectionFactory = inject(ThemeSectionConfigFactory);\n  readonly entityDetailsState = inject(EntityDetailsStateService);\n  private readonly themeService = inject(ThemeDataService);\n\n  readonly isLoading = computed(() => this.entityDetailsState.isLoading());\n  readonly isSoftRefreshing = computed(() =>\n    this.entityDetailsState.isSoftRefreshing(),\n  );\n  readonly isInitialLoading = computed(\n    () => this.isLoading() && !this.isSoftRefreshing() && !this.fullTheme(),\n  );\n  readonly fullTheme = computed(() => {\n    const entityDetails = this.entityDetailsState.selectedItem();\n\n    if (!entityDetails) {\n      return null;\n    }\n    return entityDetails as ThemeResponse;\n  });\n  readonly sections = computed(() => {\n    const theme = this.fullTheme();\n    if (!theme) return [];\n    return this.themeSectionFactory.createAllThemeSections(theme);\n  });\n  readonly error = signal<string | null>(null);\n\n  onEntityChange(entity: unknown): void {\n    this.entityDetailsState.updateEntity(entity as ThemeResponse);\n    this.error.set(null);\n  }\n\n  constructor() {\n    effect(() => {\n      const entity = this.entity();\n\n      if (isDefined(entity)) {\n        this.themeService.setTheme(entity);\n      }\n    });\n  }\n}\n","@if (!isInitialLoading() && !error()) {\n  @if (fullTheme()) {\n    <app-details-accordion-container\n      [sections]=\"sections()\"\n      [entity]=\"fullTheme()\"\n      [title]=\"fullTheme()?.name || 'Theme Details'\"\n      subtitle=\"Theme\"\n      [allowModeToggle]=\"true\"\n      (entityChange)=\"onEntityChange($event)\"\n      initialMode=\"view\"\n    ></app-details-accordion-container>\n  } @else {\n    <div class=\"p-4\">\n      <p-message severity=\"info\" text=\"No theme details available.\"></p-message>\n    </div>\n  }\n}\n","import { Component, computed, inject, input, signal } from '@angular/core';\n\nimport { MessageModule } from 'primeng/message';\nimport { ProgressSpinnerModule } from 'primeng/progressspinner';\n\nimport { DetailsAccordionContainerComponent } from '../../details-accordion-container/details-accordion-container.component';\nimport {\n  CostCentreCreateRequest,\n  CostCentreResponse,\n  EntitiesService,\n} from '../../../../../api';\nimport { CostCentreSectionConfigFactory } from '../../../factories';\nimport { EntityDetailsStateService } from '../../../services/entity/entity-details.state.service';\nimport { EntityOperationRegistryService } from '../../../services/entity/entity-operation-registry.service';\n\n@Component({\n  selector: 'app-cost-centre-details-container',\n  imports: [\n    DetailsAccordionContainerComponent,\n    ProgressSpinnerModule,\n    MessageModule,\n  ],\n  templateUrl: './cost-centre-details-container.component.html',\n  styleUrl: './cost-centre-details-container.component.scss',\n})\nexport class CostCentreDetailsContainerComponent {\n  readonly entity = input<CostCentreResponse | null>(null);\n\n  private readonly costCentreSectionFactory = inject(\n    CostCentreSectionConfigFactory,\n  );\n  readonly entityDetailsState = inject(EntityDetailsStateService);\n  private readonly entitiesService = inject(EntitiesService);\n  private readonly operationRegistry = inject(EntityOperationRegistryService);\n\n  readonly isLoading = computed(() => this.entityDetailsState.isLoading());\n  readonly isSoftRefreshing = computed(() =>\n    this.entityDetailsState.isSoftRefreshing(),\n  );\n  readonly isInitialLoading = computed(\n    () =>\n      this.isLoading() && !this.isSoftRefreshing() && !this.fullCostCentre(),\n  );\n  readonly fullCostCentre = computed(() => {\n    const entityDetails = this.entityDetailsState.selectedItem();\n\n    if (!entityDetails) {\n      return null;\n    }\n    return entityDetails as CostCentreResponse;\n  });\n  readonly sections = computed(() => {\n    const costCentre = this.fullCostCentre();\n    if (!costCentre) return [];\n    return this.costCentreSectionFactory.createAllCostCentreSections(\n      costCentre,\n    );\n  });\n  readonly error = signal<string | null>(null);\n\n  constructor() {\n    this.operationRegistry.registerEntityOperations('cost-centre', {\n      update: (id, data) => this.entitiesService.updateCostCentre(id, data),\n      create: (data: CostCentreCreateRequest) =>\n        this.entitiesService.createCostCentre(data),\n      get: (id) => this.entitiesService.getCostCentre(id),\n    });\n  }\n\n  onEntityChange(entity: unknown): void {\n    this.entityDetailsState.updateEntity(entity as CostCentreResponse);\n    this.error.set(null);\n  }\n}\n","@if (!isInitialLoading() && !error()) {\n  @if (fullCostCentre()) {\n    <app-details-accordion-container\n      [sections]=\"sections()\"\n      [entity]=\"fullCostCentre()\"\n      [title]=\"fullCostCentre()?.name || 'Cost Centre Details'\"\n      subtitle=\"Cost Centre\"\n      [allowModeToggle]=\"true\"\n      (entityChange)=\"onEntityChange($event)\"\n      initialMode=\"view\"\n    ></app-details-accordion-container>\n  } @else {\n    <div class=\"p-4\">\n      <p-message\n        severity=\"info\"\n        text=\"No cost centre details available.\"\n      ></p-message>\n    </div>\n  }\n}\n","import { Component, computed, inject, input, signal } from '@angular/core';\n\nimport { MessageModule } from 'primeng/message';\nimport { ProgressSpinnerModule } from 'primeng/progressspinner';\n\nimport { DetailsAccordionContainerComponent } from '../../details-accordion-container/details-accordion-container.component';\nimport {\n  ZoneGroupCreateRequest,\n  ZoneGroupResponse,\n  EntitiesService,\n} from '../../../../../api';\nimport { GeofenceGroupSectionConfigFactory } from '../../../factories';\nimport { EntityDetailsStateService } from '../../../services/entity/entity-details.state.service';\nimport { EntityOperationRegistryService } from '../../../services/entity/entity-operation-registry.service';\n\n@Component({\n  selector: 'app-geofence-group-details-container',\n  imports: [\n    DetailsAccordionContainerComponent,\n    ProgressSpinnerModule,\n    MessageModule,\n  ],\n  templateUrl: './geofence-group-details-container.component.html',\n  styleUrl: './geofence-group-details-container.component.scss',\n})\nexport class GeofenceGroupDetailsContainerComponent {\n  readonly entity = input<ZoneGroupResponse | null>(null);\n  private readonly geofenceGroupSectionFactory = inject(\n    GeofenceGroupSectionConfigFactory,\n  );\n  readonly entityDetailsState = inject(EntityDetailsStateService);\n  private readonly entitiesService = inject(EntitiesService);\n  private readonly operationRegistry = inject(EntityOperationRegistryService);\n\n  readonly isLoading = computed(() => this.entityDetailsState.isLoading());\n  readonly isSoftRefreshing = computed(() =>\n    this.entityDetailsState.isSoftRefreshing(),\n  );\n  readonly isInitialLoading = computed(\n    () =>\n      this.isLoading() && !this.isSoftRefreshing() && !this.fullGeofenceGroup(),\n  );\n  readonly fullGeofenceGroup = computed(() => {\n    const entityDetails = this.entityDetailsState.selectedItem();\n\n    if (!entityDetails) {\n      return null;\n    }\n    return entityDetails as ZoneGroupResponse;\n  });\n  readonly sections = computed(() => {\n    const geofenceGroup = this.fullGeofenceGroup();\n    if (!geofenceGroup) return [];\n    return this.geofenceGroupSectionFactory.createAllGeofenceGroupSections(\n      geofenceGroup,\n    );\n  });\n  readonly error = signal<string | null>(null);\n\n  constructor() {\n    this.operationRegistry.registerEntityOperations('geofence-group', {\n      update: (id, data) => this.entitiesService.updateZoneGroup(id, data),\n      create: (data: ZoneGroupCreateRequest) =>\n        this.entitiesService.createZoneGroup(data),\n      get: (id) => this.entitiesService.getZoneGroup(id),\n    });\n  }\n\n  onEntityChange(entity: unknown): void {\n    this.entityDetailsState.updateEntity(entity as ZoneGroupResponse);\n    this.error.set(null);\n  }\n}\n","@if (!isInitialLoading() && !error()) {\n  @if (fullGeofenceGroup()) {\n    <app-details-accordion-container\n      [sections]=\"sections()\"\n      [entity]=\"fullGeofenceGroup()\"\n      [title]=\"fullGeofenceGroup()?.name || 'Geofence Group Details'\"\n      subtitle=\"Geofence Group\"\n      [allowModeToggle]=\"true\"\n      (entityChange)=\"onEntityChange($event)\"\n      initialMode=\"view\"\n    ></app-details-accordion-container>\n  } @else {\n    <div class=\"p-4\">\n      <p-message\n        severity=\"info\"\n        text=\"No geofence group details available.\"\n      ></p-message>\n    </div>\n  }\n}\n","import { Component, computed, inject, input, signal } from '@angular/core';\n\nimport { MessageModule } from 'primeng/message';\nimport { ProgressSpinnerModule } from 'primeng/progressspinner';\n\nimport { DetailsAccordionContainerComponent } from '../../details-accordion-container/details-accordion-container.component';\nimport {\n  AssetGroupCreateRequest,\n  AssetGroupResponse,\n  EntitiesService,\n} from '../../../../../api';\nimport { AssetGroupSectionConfigFactory } from '../../../factories';\nimport { EntityDetailsStateService } from '../../../services/entity/entity-details.state.service';\nimport { EntityOperationRegistryService } from '../../../services/entity/entity-operation-registry.service';\n\n@Component({\n  selector: 'app-asset-group-details-container',\n  imports: [\n    DetailsAccordionContainerComponent,\n    ProgressSpinnerModule,\n    MessageModule,\n  ],\n  templateUrl: './asset-group-details-container.component.html',\n  styleUrl: './asset-group-details-container.component.scss',\n})\nexport class AssetGroupDetailsContainerComponent {\n  readonly entity = input<AssetGroupResponse | null>(null);\n  private readonly assetGroupSectionFactory = inject(\n    AssetGroupSectionConfigFactory,\n  );\n  readonly entityDetailsState = inject(EntityDetailsStateService);\n  private readonly entitiesService = inject(EntitiesService);\n  private readonly operationRegistry = inject(EntityOperationRegistryService);\n\n  readonly isLoading = computed(() => this.entityDetailsState.isLoading());\n  readonly isSoftRefreshing = computed(() =>\n    this.entityDetailsState.isSoftRefreshing(),\n  );\n  readonly isInitialLoading = computed(\n    () =>\n      this.isLoading() && !this.isSoftRefreshing() && !this.fullAssetGroup(),\n  );\n  readonly fullAssetGroup = computed(() => {\n    const entityDetails = this.entityDetailsState.selectedItem();\n\n    if (!entityDetails) {\n      return null;\n    }\n    return entityDetails as AssetGroupResponse;\n  });\n  readonly sections = computed(() => {\n    const assetGroup = this.fullAssetGroup();\n    if (!assetGroup) return [];\n    return this.assetGroupSectionFactory.createAllAssetGroupSections(\n      assetGroup,\n    );\n  });\n  readonly error = signal<string | null>(null);\n\n  constructor() {\n    this.operationRegistry.registerEntityOperations('asset-group', {\n      update: (id, data) => this.entitiesService.updateAssetGroup(id, data),\n      create: (data: AssetGroupCreateRequest) =>\n        this.entitiesService.createAssetGroup(data),\n      get: (id) => this.entitiesService.getAssetGroup(id),\n    });\n  }\n\n  onEntityChange(entity: unknown): void {\n    this.entityDetailsState.updateEntity(entity as AssetGroupResponse);\n    this.error.set(null);\n  }\n}\n","@if (!isInitialLoading() && !error()) {\n  @if (fullAssetGroup()) {\n    <app-details-accordion-container\n      [sections]=\"sections()\"\n      [entity]=\"fullAssetGroup()\"\n      [title]=\"fullAssetGroup()?.name || 'Asset Group Details'\"\n      subtitle=\"Asset Group\"\n      [allowModeToggle]=\"true\"\n      (entityChange)=\"onEntityChange($event)\"\n      initialMode=\"view\"\n    ></app-details-accordion-container>\n  } @else {\n    <div class=\"p-4\">\n      <p-message\n        severity=\"info\"\n        text=\"No asset group details available.\"\n      ></p-message>\n    </div>\n  }\n}\n","import {\n  Component,\n  computed,\n  DestroyRef,\n  inject,\n  input,\n  OnInit,\n  signal,\n} from '@angular/core';\n\nimport { MessageModule } from 'primeng/message';\nimport { ProgressSpinnerModule } from 'primeng/progressspinner';\n\nimport { DetailsAccordionContainerComponent } from '../../details-accordion-container/details-accordion-container.component';\nimport {\n  AssetCategoryCreateRequest,\n  AssetCategoryResponse,\n  EntitiesService,\n} from '../../../../../api';\nimport { AssetCategorySectionConfigFactory } from '../../../factories';\nimport { EntityDetailsStateService } from '../../../services/entity/entity-details.state.service';\nimport { EntityOperationRegistryService } from '../../../services/entity/entity-operation-registry.service';\nimport { takeUntilDestroyed } from '@angular/core/rxjs-interop';\nimport { ToastService } from '../../../../../core/services/toast.service';\nimport { BroadcastEventMessageService } from '../../../services/broadcast-event-messages.service';\nimport { isDefined } from '../../../../../shared/utils';\n\ninterface EntityUpdatedMessage {\n  entityType: string;\n  data: AssetCategoryResponse;\n}\n@Component({\n  selector: 'app-asset-category-details-container',\n  imports: [\n    DetailsAccordionContainerComponent,\n    ProgressSpinnerModule,\n    MessageModule,\n  ],\n  templateUrl: './asset-category-details-container.component.html',\n  styleUrl: './asset-category-details-container.component.scss',\n})\nexport class AssetCategoryDetailsContainerComponent implements OnInit {\n  readonly entity = input<AssetCategoryResponse | null>(null);\n\n  private readonly assetCategorySectionFactory = inject(\n    AssetCategorySectionConfigFactory,\n  );\n  readonly entityDetailsState = inject(EntityDetailsStateService);\n  private readonly entitiesService = inject(EntitiesService);\n  private readonly operationRegistry = inject(EntityOperationRegistryService);\n  private readonly broadcastService = inject(BroadcastEventMessageService);\n  private readonly toastService = inject(ToastService);\n  private readonly destroyRef = inject(DestroyRef);\n\n  readonly isLoading = computed(() => this.entityDetailsState.isLoading());\n  readonly isSoftRefreshing = computed(() =>\n    this.entityDetailsState.isSoftRefreshing(),\n  );\n  readonly isInitialLoading = computed(\n    () =>\n      this.isLoading() && !this.isSoftRefreshing() && !this.fullAssetCategory(),\n  );\n  readonly fullAssetCategory = computed(() => {\n    const entityDetails = this.entityDetailsState.selectedItem();\n\n    if (!entityDetails) {\n      return null;\n    }\n    return entityDetails as AssetCategoryResponse;\n  });\n  readonly sections = computed(() => {\n    const assetCategory = this.fullAssetCategory();\n    if (!assetCategory) return [];\n    return this.assetCategorySectionFactory.createAllAssetCategorySections(\n      assetCategory,\n    );\n  });\n  readonly error = signal<string | null>(null);\n  private isEntityUpdatedMessage(\n    message: unknown,\n  ): message is EntityUpdatedMessage {\n    return (\n      isDefined(message) &&\n      message !== null &&\n      typeof message === 'object' &&\n      'entityType' in message &&\n      'data' in message &&\n      (message as EntityUpdatedMessage).entityType === 'asset-category'\n    );\n  }\n\n  constructor() {\n    this.operationRegistry.registerEntityOperations('asset-category', {\n      update: (id, data) => this.entitiesService.updateAssetCategory(id, data),\n      create: (data: AssetCategoryCreateRequest) =>\n        this.entitiesService.createAssetCategory(data),\n      get: (id) => this.entitiesService.getAssetCategory(id),\n    });\n  }\n\n  ngOnInit(): void {\n    this.broadcastService\n      .on('entity-updated')\n      .pipe(takeUntilDestroyed(this.destroyRef))\n      .subscribe((message) => {\n        if (this.isEntityUpdatedMessage(message)) {\n          this.toastService.showSuccess(\n            'Success',\n            'Asset category updated successfully',\n          );\n          this.onEntityChange(message.data);\n        }\n      });\n  }\n\n  onEntityChange(entity: unknown): void {\n    this.entityDetailsState.updateEntity(entity as AssetCategoryResponse);\n    this.error.set(null);\n  }\n}\n","@if (!isInitialLoading() && !error()) {\n  @if (fullAssetCategory()) {\n    <app-details-accordion-container\n      [sections]=\"sections()\"\n      [entity]=\"fullAssetCategory()\"\n      [title]=\"fullAssetCategory()?.name || 'Asset Category Details'\"\n      subtitle=\"Asset Category\"\n      [allowModeToggle]=\"true\"\n      (entityChange)=\"onEntityChange($event)\"\n      initialMode=\"view\"\n    ></app-details-accordion-container>\n  } @else {\n    <div class=\"p-4\">\n      <p-message\n        severity=\"info\"\n        text=\"No asset category details available.\"\n      ></p-message>\n    </div>\n  }\n}\n","import {\n  Component,\n  computed,\n  DestroyRef,\n  inject,\n  input,\n  OnInit,\n  signal,\n} from '@angular/core';\n\nimport { MessageModule } from 'primeng/message';\nimport { ProgressSpinnerModule } from 'primeng/progressspinner';\n\nimport {\n  ClientListItem,\n  ClientResponse,\n  ClientCreateRequest,\n  AccountsService,\n} from '../../../../../api';\nimport { isDefined, isNullOrUndefined } from '../../../../../shared/utils';\nimport { EntityDetailsStateService } from '../../../services/entity/entity-details.state.service';\nimport { EntityOperationRegistryService } from '../../../services/entity/entity-operation-registry.service';\nimport { DetailsAccordionContainerComponent } from '../../details-accordion-container/details-accordion-container.component';\nimport { ClientSectionConfigFactory } from '../../../factories';\nimport { AuthDataService } from '../../../../../core/services/auth-data.service';\nimport { AppFeatures } from '../../../../../core/models';\nimport { takeUntilDestroyed } from '@angular/core/rxjs-interop';\nimport { BroadcastEventMessageService } from '../../../services/broadcast-event-messages.service';\n\ninterface EntityUpdatedMessage {\n  entityType: string;\n  data: ClientResponse;\n}\n@Component({\n  selector: 'app-vendor-client-details-container',\n  imports: [\n    DetailsAccordionContainerComponent,\n    ProgressSpinnerModule,\n    MessageModule,\n  ],\n  templateUrl: './vendor-client-details-container.component.html',\n  styleUrl: './vendor-client-details-container.component.scss',\n})\nexport class VendorClientDetailsContainerComponent implements OnInit {\n  readonly entity = input<ClientListItem | null>(null);\n\n  private readonly clientSectionFactory = inject(ClientSectionConfigFactory);\n  readonly entityDetailsState = inject(EntityDetailsStateService);\n  private readonly accountsService = inject(AccountsService);\n  private readonly operationRegistry = inject(EntityOperationRegistryService);\n  private readonly authDataService = inject(AuthDataService);\n  private readonly broadcastService = inject(BroadcastEventMessageService);\n  private readonly destroyRef = inject(DestroyRef);\n\n  readonly isLoading = computed(() => this.entityDetailsState.isLoading());\n  readonly isSoftRefreshing = computed(() =>\n    this.entityDetailsState.isSoftRefreshing(),\n  );\n  readonly isInitialLoading = computed(\n    () => this.isLoading() && !this.isSoftRefreshing() && !this.fullClient(),\n  );\n  readonly fullClient = computed(() => {\n    const entityDetails = this.entityDetailsState.selectedItem();\n\n    if (isNullOrUndefined(entityDetails)) {\n      return null;\n    }\n    return entityDetails as ClientResponse;\n  });\n  readonly sections = computed(() => {\n    const client = this.fullClient();\n    if (isNullOrUndefined(client)) return [];\n\n    if (this.authDataService.getUserProfile()?.owner?.type !== 'client') {\n      let appFeatures = Object.keys(AppFeatures);\n      const useFlags = this.authDataService.flags;\n      if (isNullOrUndefined(useFlags.assetPerformanceEnabled())) {\n        // Asset performance is not available, hide the feature flag section.\n        appFeatures = appFeatures.filter(\n          (feature) => feature !== 'page-assetperformance',\n        );\n      }\n      if (isNullOrUndefined(useFlags.deviceHealthEnabled())) {\n        appFeatures = appFeatures.filter(\n          (feature) => feature !== 'page-devicehealth',\n        );\n      }\n\n      return this.clientSectionFactory.createAllClientSections(\n        client,\n        appFeatures,\n      );\n    }\n\n    return [];\n  });\n  readonly error = signal<string | null>(null);\n  private isEntityUpdatedMessage(\n    message: unknown,\n  ): message is EntityUpdatedMessage {\n    return (\n      isDefined(message) &&\n      message !== null &&\n      typeof message === 'object' &&\n      'entityType' in message &&\n      'data' in message &&\n      (message as EntityUpdatedMessage).entityType === 'client'\n    );\n  }\n\n  constructor() {\n    this.operationRegistry.registerEntityOperations('client', {\n      update: (id, data) => this.accountsService.updateClient(id, data),\n      create: (data: ClientCreateRequest) =>\n        this.accountsService.createClient(data),\n      get: (id) => this.accountsService.getClient(id),\n    });\n  }\n\n  ngOnInit(): void {\n    this.broadcastService\n      .on('entity-updated')\n      .pipe(takeUntilDestroyed(this.destroyRef))\n      .subscribe((message) => {\n        if (this.isEntityUpdatedMessage(message)) {\n          const operation =\n            message.data.state === ClientResponse.StateEnum.Deleted\n              ? 'delete'\n              : 'update';\n          // Broadcast tree refresh for all client state changes\n          this.broadcastService.broadcast('tree-refresh-required', {\n            entityType: 'client',\n            operation,\n            entityId: message.data.id,\n            vendorId: message.data.owner.id,\n            distributorId: message.data.owner?.['owner']?.id, // Add distributor context\n            state: message.data.state,\n          });\n        }\n      });\n  }\n\n  onEntityChange(entity: unknown): void {\n    this.entityDetailsState.updateEntity(entity as ClientResponse);\n    this.error.set(null);\n  }\n}\n","@if (!isInitialLoading() && !error()) {\n  @if (fullClient()) {\n    <app-details-accordion-container\n      [sections]=\"sections()\"\n      [entity]=\"fullClient()\"\n      [title]=\"fullClient()?.name || 'Client Details'\"\n      subtitle=\"Client\"\n      [allowModeToggle]=\"true\"\n      (entityChange)=\"onEntityChange($event)\"\n      initialMode=\"view\"\n    ></app-details-accordion-container>\n  } @else {\n    <div class=\"p-4\">\n      <p-message\n        severity=\"info\"\n        text=\"No client details available.\"\n      ></p-message>\n    </div>\n  }\n}\n","import {\n  Component,\n  computed,\n  DestroyRef,\n  inject,\n  input,\n  OnInit,\n  signal,\n} from '@angular/core';\n\nimport { MessageModule } from 'primeng/message';\nimport { ProgressSpinnerModule } from 'primeng/progressspinner';\n\nimport {\n  VendorListItem,\n  VendorResponse,\n  VendorCreateRequest,\n  AccountsService,\n} from '../../../../../api';\nimport { isDefined, isNullOrUndefined } from '../../../../../shared/utils';\nimport { EntityDetailsStateService } from '../../../services/entity/entity-details.state.service';\nimport { EntityOperationRegistryService } from '../../../services/entity/entity-operation-registry.service';\nimport { DetailsAccordionContainerComponent } from '../../details-accordion-container/details-accordion-container.component';\nimport { VendorSectionConfigFactory } from '../../../factories';\nimport { BroadcastEventMessageService } from '../../../services/broadcast-event-messages.service';\nimport { takeUntilDestroyed } from '@angular/core/rxjs-interop';\n\ninterface EntityUpdatedMessage {\n  entityType: string;\n  data: VendorResponse;\n}\n@Component({\n  selector: 'app-distributor-vendor-details-container',\n  imports: [\n    DetailsAccordionContainerComponent,\n    ProgressSpinnerModule,\n    MessageModule,\n  ],\n  templateUrl: './distributor-vendor-details-container.component.html',\n  styleUrl: './distributor-vendor-details-container.component.scss',\n})\nexport class DistributorVendorDetailsContainerComponent implements OnInit {\n  readonly entity = input<VendorListItem | null>(null);\n\n  private readonly vendorSectionFactory = inject(VendorSectionConfigFactory);\n  readonly entityDetailsState = inject(EntityDetailsStateService);\n  private readonly accountsService = inject(AccountsService);\n  private readonly operationRegistry = inject(EntityOperationRegistryService);\n  private readonly broadcastService = inject(BroadcastEventMessageService);\n  private readonly destroyRef = inject(DestroyRef);\n\n  readonly isLoading = computed(() => this.entityDetailsState.isLoading());\n  readonly isSoftRefreshing = computed(() =>\n    this.entityDetailsState.isSoftRefreshing(),\n  );\n  readonly isInitialLoading = computed(\n    () => this.isLoading() && !this.isSoftRefreshing() && !this.fullVendor(),\n  );\n  readonly fullVendor = computed(() => {\n    const entityDetails = this.entityDetailsState.selectedItem();\n\n    if (isNullOrUndefined(entityDetails)) {\n      return null;\n    }\n    return entityDetails as VendorResponse;\n  });\n\n  readonly flexibleConfiguration = computed(() => {\n    const vendor = this.fullVendor();\n    if (isNullOrUndefined(vendor)) {\n      return { sections: [], layout: { categories: [] } };\n    }\n\n    return this.vendorSectionFactory.createFlexibleVendorConfiguration(vendor);\n  });\n\n  readonly error = signal<string | null>(null);\n  readonly useFlexibleApproach = signal<boolean>(false); // Toggle for demo purposes\n  private isEntityUpdatedMessage(\n    message: unknown,\n  ): message is EntityUpdatedMessage {\n    return (\n      isDefined(message) &&\n      message !== null &&\n      typeof message === 'object' &&\n      'entityType' in message &&\n      'data' in message &&\n      (message as EntityUpdatedMessage).entityType === 'vendor'\n    );\n  }\n\n  constructor() {\n    this.operationRegistry.registerEntityOperations('vendor', {\n      update: (id, data) => this.accountsService.updateVendor(id, data),\n      create: (data: VendorCreateRequest) =>\n        this.accountsService.createVendor(data),\n      get: (id) => this.accountsService.getVendor(id),\n    });\n  }\n\n  ngOnInit(): void {\n    this.broadcastService\n      .on('entity-updated')\n      .pipe(takeUntilDestroyed(this.destroyRef))\n      .subscribe((message) => {\n        if (this.isEntityUpdatedMessage(message)) {\n          // Broadcast tree refresh for all vendor state changes\n          const isDeleted =\n            message.data.state === VendorResponse.StateEnum.Deleted;\n\n          this.broadcastService.broadcast('tree-refresh-required', {\n            entityType: 'vendor',\n            operation: isDeleted ? 'delete' : 'update',\n            entityId: message.data.id,\n            distributorId: message.data.owner.id,\n            ...(isDeleted ? {} : { state: message.data.state }),\n          });\n        }\n      });\n  }\n\n  onEntityChange(entity: unknown): void {\n    this.entityDetailsState.updateEntity(entity as VendorResponse);\n    this.error.set(null);\n  }\n}\n","@if (!isInitialLoading() && !error()) {\n  @if (fullVendor()) {\n    <app-details-accordion-container\n      [sections]=\"flexibleConfiguration().sections\"\n      [layout]=\"flexibleConfiguration().layout\"\n      [entity]=\"fullVendor()\"\n      [title]=\"fullVendor()?.name || 'Vendor Details'\"\n      subtitle=\"Vendor (Flexible Configuration)\"\n      [allowModeToggle]=\"true\"\n      (entityChange)=\"onEntityChange($event)\"\n      initialMode=\"view\"\n    ></app-details-accordion-container>\n  } @else {\n    <div class=\"p-4\">\n      <p-message\n        severity=\"info\"\n        text=\"No vendor details available.\"\n      ></p-message>\n    </div>\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport {\n  Component,\n  computed,\n  effect,\n  inject,\n  input,\n  signal,\n} from '@angular/core';\nimport { takeUntilDestroyed } from '@angular/core/rxjs-interop';\nimport { Validators } from '@angular/forms';\n\nimport { ButtonModule } from 'primeng/button';\nimport { MessageModule } from 'primeng/message';\nimport { v4 as uuidv4 } from 'uuid';\n\nimport {\n  AssetRatingProfileListItem,\n  AssetRatingProfileCreateRequest,\n  EntitiesService,\n  AssetRatingPenalty,\n} from '../../../../../api';\nimport { DynamicFormComponent } from '../../../../../shared/components/forms/dynamic-form/dynamic-form.component';\nimport { ModalListFormComponent } from '../../../../../shared/components/forms/modal-list-form/modal-list-form.component';\nimport { GridComponent } from '../../../../../shared/components/grid/grid.component';\nimport {\n  ListFieldModalConfig,\n  FormFieldConfig,\n  createTextField,\n  createNumberField,\n  createModalListField,\n  createEventFilterField,\n  ActorNodeData,\n  EventNodeData,\n  FilterCondition,\n  TargetNodeData,\n  TreeSelectNode,\n} from '../../../../../shared/models';\nimport {\n  isDefined,\n  isEmpty,\n  isNullOrUndefined,\n} from '../../../../../shared/utils';\nimport { EntitySectionBaseComponent } from '../../base';\nimport { EventFilterService } from '../../../../../shared/services/event-filter.service';\n\ntype FormDataValue = string | number | object | null | undefined;\n@Component({\n  selector: 'app-asset-rating-profile-details-section',\n  imports: [\n    CommonModule,\n    ButtonModule,\n    GridComponent,\n    DynamicFormComponent,\n    MessageModule,\n  ],\n  templateUrl: './asset-rating-profile-details-section.component.html',\n  styleUrl: './asset-rating-profile-details-section.component.scss',\n})\nexport class AssetRatingProfileDetailsSectionComponent extends EntitySectionBaseComponent<\n  AssetRatingProfileListItem | AssetRatingProfileCreateRequest\n> {\n  readonly ownerId = input<string | null>(null);\n  private readonly entitiesService = inject(EntitiesService);\n  private readonly eventFilterService = inject(EventFilterService);\n\n  readonly assetRatingProfileDetails = computed(() => {\n    const assetRatingProfileDetails = this.entity();\n    if (!isDefined(assetRatingProfileDetails)) return [];\n\n    return [\n      { key: 'Name', value: assetRatingProfileDetails.name },\n      {\n        key: 'Penalties',\n        value: isEmpty(assetRatingProfileDetails.items)\n          ? 'None'\n          : assetRatingProfileDetails.items\n              ?.map((item) => item.name)\n              .join(', '),\n      },\n    ];\n  });\n  assetRatingProfilePenaltyModalConfig:\n    | ListFieldModalConfig<AssetRatingPenalty>\n    | undefined;\n  protected readonly warning = signal<string | null>(null);\n\n  constructor() {\n    super();\n\n    // Setup initial columns\n    this.columns = [\n      { field: 'key', header: '', transform: 'uppercase' },\n      { field: 'value', header: '' },\n    ];\n\n    effect(() => {\n      const assetRatingProfileDetails = this.entity();\n      if (\n        isNullOrUndefined(assetRatingProfileDetails?.items) ||\n        assetRatingProfileDetails.items.length < 1\n      ) {\n        this.warning.set(\n          'At least one penalty is required for the asset rating profile to be useful.',\n        );\n      } else {\n        this.warning.set(null);\n      }\n    });\n  }\n\n  protected override updateFormFields(): void {\n    const assetRatingProfile = this.entity();\n\n    this.assetRatingProfilePenaltyModalConfig = {\n      modalComponent: ModalListFormComponent,\n      modalTitle: 'Rating Penalty',\n      defaultItemProvider: () => ({\n        id: uuidv4(),\n        name: '',\n        max: 100,\n        offset: undefined,\n        penalty: 1,\n        cost: undefined,\n      }),\n      listItemFormatter: (item: AssetRatingPenalty) =>\n        this.stateItemToListItem(item),\n      modalFields: (\n        _item: AssetRatingPenalty | undefined,\n      ): FormFieldConfig[] => {\n        return [\n          createTextField('id', 'ID', _item?.id, {\n            name: 'id',\n            hidden: true,\n          }),\n          createTextField('name', 'Name', _item?.name, {\n            name: 'name',\n            validations: [\n              {\n                name: 'required',\n                validator: Validators.required,\n                message: 'Name is required',\n              },\n            ],\n          }),\n          createNumberField('penalty', 'Penalty', undefined, {\n            name: 'penalty',\n            validations: [\n              {\n                name: 'required',\n                validator: Validators.required,\n                message: 'Penalty is required',\n              },\n              {\n                name: 'min',\n                validator: Validators.min(1),\n                message: 'Min must be 1 or greater',\n              },\n              {\n                name: 'max',\n                validator: Validators.max(100),\n                message: 'Max must be 100 or less',\n              },\n            ],\n            layout: 'horizontal',\n            labelWidth: '1/3',\n          }),\n          createNumberField('max', 'Max', undefined, {\n            name: 'max',\n            validations: [\n              {\n                name: 'required',\n                validator: Validators.required,\n                message: 'Max is required',\n              },\n              {\n                name: 'min',\n                validator: Validators.min(1),\n                message: 'Min must be 1 or greater',\n              },\n              {\n                name: 'max',\n                validator: Validators.max(100),\n                message: 'Max must be 100 or less',\n              },\n            ],\n            layout: 'horizontal',\n            labelWidth: '1/3',\n          }),\n          createNumberField('cost', 'Cost', undefined, {\n            name: 'cost',\n            validations: [\n              {\n                name: 'required',\n                validator: Validators.required,\n                message: 'Cost is required',\n              },\n              {\n                name: 'min',\n                validator: Validators.min(0),\n                message: 'Min must be 0 or greater',\n              },\n              {\n                name: 'max',\n                validator: Validators.max(1000000),\n                message: 'Max must be 1000000 or less',\n              },\n            ],\n            layout: 'horizontal',\n            labelWidth: '1/3',\n          }),\n          createEventFilterField(\n            'filter',\n            'Event Filter',\n            undefined,\n            ['costcentres', 'groups', 'types'],\n            {\n              name: 'filter',\n              required: true,\n              validations: [\n                {\n                  name: 'required',\n                  validator: Validators.required,\n                  message: 'Event filter is required',\n                },\n              ],\n            },\n          ),\n        ];\n      },\n      subHeader:\n        'Choose penalty severity and configure the event filter to trigger this penalty.',\n    };\n    this.formFields = [\n      createTextField('name', 'Name', assetRatingProfile?.name, {\n        name: 'name',\n        validations: [\n          {\n            name: 'required',\n            validator: Validators.required,\n            message: 'Name is required',\n          },\n        ],\n      }),\n    ];\n\n    if (!this.createMode()) {\n      this.formFields.push(\n        createModalListField<AssetRatingPenalty>(\n          'items',\n          'Penalties',\n          assetRatingProfile?.items ?? [],\n          {\n            layout: 'horizontal',\n            labelWidth: '1/3',\n            name: 'items',\n            props: {\n              modalConfig: this\n                .assetRatingProfilePenaltyModalConfig as unknown as ListFieldModalConfig<unknown>,\n            },\n          },\n        ),\n      );\n    }\n  }\n\n  protected override submitChanges(\n    formData: Record<string, string | number>,\n  ): void {\n    const assetRatingProfile = this.entity();\n    if (isNullOrUndefined(assetRatingProfile)) return;\n    this.entitiesService\n      .updateAssetRatingProfile(\n        assetRatingProfile.id,\n        this.transformFormData(formData),\n      )\n      .pipe(takeUntilDestroyed(this.destroyRef))\n      .subscribe({\n        next: (response) => {\n          this.isFormEditable.set(false);\n          this.isSubmitting.set(false);\n          this.broadcastService.broadcast('entity-updated', {\n            entityType: 'asset-rating-profile',\n            operation: 'update',\n            entityId: assetRatingProfile.id,\n            data: response,\n          });\n        },\n        error: () => {\n          this.isFormEditable.set(true);\n          this.isSubmitting.set(false);\n        },\n      });\n  }\n\n  stateItemToListItem(item: AssetRatingPenalty) {\n    const costString = item.cost ? `, cost ${item.cost}` : '';\n    const display = `${item.penalty} (${item.max} max${costString})`;\n    return {\n      id: item.id,\n      title: item.name,\n      display,\n      icon: 'pi pi-star',\n    };\n  }\n\n  protected override onFormValueChange(\n    formData: Record<string, FormDataValue>,\n  ): void {\n    const transformedData = this.transformFormData(formData);\n\n    this.formValueChange.emit(transformedData);\n  }\n\n  protected override transformFormData(\n    formData: Record<string, FormDataValue>,\n  ): Record<string, FormDataValue> {\n    const transformedData = { ...formData };\n\n    // Transform each item in the \"items\" array (normalize name/state and filter)\n    if (Array.isArray(transformedData['items'])) {\n      transformedData['items'] = (\n        transformedData['items'] as Record<string, unknown>[]\n      ).map((item) => {\n        const transformedItem: Record<string, unknown> = { ...item };\n\n        // Transform nested filter\n        if (isDefined(transformedItem['filter'])) {\n          const filter = transformedItem['filter'] as {\n            actor?: TreeSelectNode<ActorNodeData>;\n            action?: TreeSelectNode<EventNodeData>;\n            target?: TreeSelectNode<TargetNodeData>;\n            conditions?: FilterCondition[];\n          };\n\n          transformedItem['filter'] = {\n            ...filter,\n            actor: filter?.actor?.data,\n            action: filter?.action?.data,\n            target: filter?.target?.data,\n            conditions:\n              filter?.conditions?.map(({ id: _id, ...rest }) => rest) ?? [],\n          };\n        }\n\n        return transformedItem;\n      });\n    }\n\n    return transformedData;\n  }\n}\n","<div class=\"card pt-2\">\n  <div class=\"mb-4 p-2 flex justify-start items-center\">\n    <span\n      class=\"pi pi-star !text-[2.5rem]\"\n      [ngClass]=\"{ 'icon-primary': isFormEditable() }\"\n      [attr.aria-label]=\"'star icon'\"\n    ></span>\n\n    <div class=\"pl-6 flex-1\">\n      <div class=\"flex justify-between items-center\">\n        <h2 class=\"text-xl font-semibold m-0\">Asset Rating Profile Details</h2>\n        @if (!isFormEditable() && !createMode()) {\n          <div class=\"icon-light\">\n            <span\n              class=\"pi pi-pen-to-square action hover !text-2xl\"\n              [attr.aria-label]=\"'Edit asset rating profile details'\"\n              (click)=\"onEdit()\"\n              (keydown.enter)=\"onEdit()\"\n            ></span>\n          </div>\n        }\n      </div>\n      <span>Configure the rating penalties for your asset rating profile</span>\n    </div>\n  </div>\n\n  @if (isFormEditable() || (createMode() && formFields.length)) {\n    <app-dynamic-form\n      [fields]=\"formFields\"\n      [actions]=\"actions\"\n      [hideActions]=\"createMode()\"\n      (formSubmit)=\"onSubmit($event)\"\n      (formValidityChange)=\"onFormValidityChange($event)\"\n      (formValueChange)=\"onFormValueChange($event)\"\n    >\n    </app-dynamic-form>\n  }\n\n  @if (!isFormEditable() && !createMode()) {\n    @if (warning()) {\n      <div class=\"mb-4\">\n        <p-message severity=\"warn\">\n          <span class=\"pi pi-exclamation-triangle mr-2\"></span>\n          {{ warning() }}</p-message\n        >\n      </div>\n    }\n    <app-grid\n      [data]=\"assetRatingProfileDetails()\"\n      [columns]=\"columns\"\n      [showGridLines]=\"false\"\n      [hideHeader]=\"true\"\n      tableStyleClass=\"info-display !w-auto\"\n    ></app-grid>\n  }\n</div>\n","import { Injectable } from '@angular/core';\nimport { AdminDetailSection } from '../models';\n\nimport { AssetRatingProfileResponse } from '../../../api';\nimport { FeedSectionComponent } from '../components/shared/feed-section/feed-section.component';\nimport { AssetRatingProfileDetailsSectionComponent } from '../components/asset-rating-profiles/asset-rating-profile-details-section/asset-rating-profile-details-section.component';\n\n@Injectable({ providedIn: 'root' })\nexport class AssetRatingProfileSectionConfigFactory {\n  /**\n   * Create sections for assetRatingProfile information\n   * @param assetRatingProfile The assetRatingProfile object to display in the section\n   * @returns An array of AdminDetailSection objects representing the assetRatingProfile information sections\n   */\n  createAssetRatingProfileInformationSections(\n    assetRatingProfile: AssetRatingProfileResponse | null,\n  ): AdminDetailSection[] {\n    return [\n      {\n        id: 'asset-rating-profile-details',\n        title: 'Asset Rating Profile Details',\n        component: AssetRatingProfileDetailsSectionComponent,\n        componentInputs: { entity: assetRatingProfile },\n        category: 'information',\n        order: 10,\n      },\n    ];\n  }\n\n  /**\n   * Create sections for assetRatingProfile changes\n   * @param assetRatingProfile The assetRatingProfile object to display in the section\n   * @returns An array of AdminDetailSection objects representing the assetRatingProfile changes sections\n   */\n  createChangesSection(\n    assetRatingProfile: AssetRatingProfileResponse | null,\n  ): AdminDetailSection[] {\n    return [\n      {\n        id: 'asset-rating-profile-changes',\n        title: 'Changes',\n        component: FeedSectionComponent,\n        componentInputs: {\n          entity: assetRatingProfile,\n        },\n        category: 'feed',\n        order: 10,\n      },\n    ];\n  }\n\n  /**\n   * Create all assetRatingProfile sections in one call\n   * @param assetRatingProfile The assetRatingProfile object to display in the sections\n   * @returns An array of AdminDetailSection objects representing all assetRatingProfile sections\n   */\n  createAllAssetRatingProfileSections(\n    assetRatingProfile: AssetRatingProfileResponse | null,\n  ): AdminDetailSection[] {\n    return [\n      ...this.createAssetRatingProfileInformationSections(assetRatingProfile),\n      ...this.createChangesSection(assetRatingProfile),\n    ];\n  }\n}\n","import { Component, computed, inject, input, signal } from '@angular/core';\nimport { MessageModule } from 'primeng/message';\nimport { ProgressSpinnerModule } from 'primeng/progressspinner';\nimport {\n  AssetRatingProfileListItem,\n  AssetRatingProfileResponse,\n} from '../../../../../api';\nimport { AssetRatingProfileSectionConfigFactory } from '../../../factories/asset-rating-profile-section-config.factory';\nimport { EntityDetailsStateService } from '../../../services/entity/entity-details.state.service';\nimport { DetailsAccordionContainerComponent } from '../../details-accordion-container/details-accordion-container.component';\n\n@Component({\n  selector: 'app-asset-rating-profile-details-container',\n  imports: [\n    DetailsAccordionContainerComponent,\n    ProgressSpinnerModule,\n    MessageModule,\n  ],\n  templateUrl: './asset-rating-profile-details-container.component.html',\n  styleUrl: './asset-rating-profile-details-container.component.scss',\n})\nexport class AssetRatingProfileDetailsContainerComponent {\n  readonly entity = input<AssetRatingProfileListItem | null>(null);\n\n  private readonly assetRatingProfileSectionFactory = inject(\n    AssetRatingProfileSectionConfigFactory,\n  );\n  readonly entityDetailsState = inject(EntityDetailsStateService);\n\n  readonly isLoading = computed(() => this.entityDetailsState.isLoading());\n  readonly fullAssetRatingProfile = computed(() => {\n    const entityDetails = this.entityDetailsState.selectedItem();\n\n    if (!entityDetails) {\n      return null;\n    }\n    return entityDetails as AssetRatingProfileResponse;\n  });\n  readonly sections = computed(() => {\n    const assetRatingProfile = this.fullAssetRatingProfile();\n    if (!assetRatingProfile) return [];\n    return this.assetRatingProfileSectionFactory.createAllAssetRatingProfileSections(\n      assetRatingProfile,\n    );\n  });\n  readonly error = signal<string | null>(null);\n\n  onEntityChange(entity: unknown): void {\n    this.entityDetailsState.updateEntity(entity as AssetRatingProfileResponse);\n    this.error.set(null);\n  }\n}\n","@if (!isLoading() && !error()) {\n  @if (fullAssetRatingProfile()) {\n    <app-details-accordion-container\n      [sections]=\"sections()\"\n      [entity]=\"fullAssetRatingProfile()\"\n      [title]=\"fullAssetRatingProfile()?.name || 'Asset Rating Profile Details'\"\n      subtitle=\"Asset Rating Profile\"\n      [allowModeToggle]=\"true\"\n      (entityChange)=\"onEntityChange($event)\"\n      initialMode=\"view\"\n    ></app-details-accordion-container>\n  } @else {\n    <div class=\"p-4\">\n      <p-message\n        severity=\"info\"\n        text=\"No asset rating profile details available.\"\n      ></p-message>\n    </div>\n  }\n}\n","import {\n  Component,\n  computed,\n  DestroyRef,\n  inject,\n  input,\n  OnInit,\n  signal,\n} from '@angular/core';\nimport { MessageModule } from 'primeng/message';\nimport { ProgressSpinnerModule } from 'primeng/progressspinner';\nimport {\n  DistributorListItem,\n  AccountsService,\n  DistributorResponse,\n  DistributorCreateRequest,\n} from '../../../../../api';\nimport { isDefined, isNullOrUndefined } from '../../../../../shared/utils';\nimport { EntityDetailsStateService } from '../../../services/entity/entity-details.state.service';\nimport { EntityOperationRegistryService } from '../../../services/entity/entity-operation-registry.service';\nimport { DetailsAccordionContainerComponent } from '../../details-accordion-container/details-accordion-container.component';\nimport { DistributorSectionConfigFactory } from '../../../factories';\nimport { BroadcastEventMessageService } from '../../../services/broadcast-event-messages.service';\nimport { takeUntilDestroyed } from '@angular/core/rxjs-interop';\nimport { ToastService } from '../../../../../core/services/toast.service';\n\ninterface EntityUpdatedMessage {\n  entityType: string;\n  data: DistributorResponse;\n}\n@Component({\n  selector: 'app-super-admin-distributors-details-container',\n  imports: [\n    DetailsAccordionContainerComponent,\n    ProgressSpinnerModule,\n    MessageModule,\n  ],\n  templateUrl: './super-admin-distributors-details-container.component.html',\n  styleUrl: './super-admin-distributors-details-container.component.scss',\n})\nexport class SuperAdminDistributorsDetailsContainerComponent implements OnInit {\n  readonly entity = input<DistributorListItem | null>(null);\n\n  private readonly distributorSectionFactory = inject(\n    DistributorSectionConfigFactory,\n  );\n  readonly entityDetailsState = inject(EntityDetailsStateService);\n  private readonly accountsService = inject(AccountsService);\n  private readonly operationRegistry = inject(EntityOperationRegistryService);\n  private readonly broadcastService = inject(BroadcastEventMessageService);\n  private readonly toastService = inject(ToastService);\n  private readonly destroyRef = inject(DestroyRef);\n\n  readonly isLoading = computed(() => this.entityDetailsState.isLoading());\n  readonly isSoftRefreshing = computed(() =>\n    this.entityDetailsState.isSoftRefreshing(),\n  );\n  readonly isInitialLoading = computed(\n    () =>\n      this.isLoading() && !this.isSoftRefreshing() && !this.fullDistributor(),\n  );\n  readonly fullDistributor = computed(() => {\n    const entityDetails = this.entityDetailsState.selectedItem();\n    if (isNullOrUndefined(entityDetails)) {\n      return null;\n    }\n    return entityDetails as DistributorResponse;\n  });\n  readonly sections = computed(() => {\n    const distributor = this.fullDistributor();\n    if (isNullOrUndefined(distributor)) return [];\n\n    return this.distributorSectionFactory.createAllDistributorSections(\n      distributor,\n    );\n  });\n  readonly error = signal<string | null>(null);\n  private isEntityUpdatedMessage(\n    message: unknown,\n  ): message is EntityUpdatedMessage {\n    return (\n      isDefined(message) &&\n      message !== null &&\n      typeof message === 'object' &&\n      'entityType' in message &&\n      'data' in message &&\n      (message as EntityUpdatedMessage).entityType === 'distributor'\n    );\n  }\n\n  constructor() {\n    this.operationRegistry.registerEntityOperations('distributor', {\n      update: (id, data) => this.accountsService.updateDistributor(id, data),\n      create: (data: DistributorCreateRequest) =>\n        this.accountsService.createDistributor(data),\n      get: (id) => this.accountsService.getDistributor(id),\n    });\n  }\n\n  ngOnInit(): void {\n    this.broadcastService\n      .on('entity-updated')\n      .pipe(takeUntilDestroyed(this.destroyRef))\n      .subscribe((message) => {\n        if (this.isEntityUpdatedMessage(message)) {\n          this.toastService.showSuccess(\n            'Success',\n            'Distributor updated successfully',\n          );\n          this.onEntityChange(message.data);\n\n          // Broadcast tree refresh for all distributor state changes\n          const operation =\n            message.data.state === DistributorResponse.StateEnum.Deleted\n              ? 'delete'\n              : 'update';\n\n          this.broadcastService.broadcast('tree-refresh-required', {\n            entityType: 'distributor',\n            operation,\n            entityId: message.data.id,\n            state: message.data.state,\n          });\n        }\n      });\n  }\n\n  onEntityChange(entity: unknown): void {\n    this.entityDetailsState.updateEntity(entity as DistributorResponse);\n    this.error.set(null);\n  }\n}\n","@if (!isInitialLoading() && !error()) {\n  @if (fullDistributor()) {\n    <app-details-accordion-container\n      [sections]=\"sections()\"\n      [entity]=\"fullDistributor()\"\n      [title]=\"fullDistributor()?.name || 'Distributor Details'\"\n      subtitle=\"Distributor\"\n      [allowModeToggle]=\"true\"\n      (entityChange)=\"onEntityChange($event)\"\n      initialMode=\"view\"\n    ></app-details-accordion-container>\n  } @else {\n    <div class=\"p-4\">\n      <p-message\n        severity=\"info\"\n        text=\"No distributor details available.\"\n      ></p-message>\n    </div>\n  }\n}\n","import { Component, computed, inject, input, signal } from '@angular/core';\nimport { MessageModule } from 'primeng/message';\nimport { ProgressSpinnerModule } from 'primeng/progressspinner';\nimport {\n  AssetStateProfileListItem,\n  AssetStateProfileResponse,\n} from '../../../../../api';\nimport { AssetStateProfileSectionConfigFactory } from '../../../factories';\nimport { EntityDetailsStateService } from '../../../services/entity/entity-details.state.service';\nimport { DetailsAccordionContainerComponent } from '../../details-accordion-container/details-accordion-container.component';\n\n@Component({\n  selector: 'app-asset-state-profile-details-container',\n  imports: [\n    DetailsAccordionContainerComponent,\n    ProgressSpinnerModule,\n    MessageModule,\n  ],\n  templateUrl: './asset-state-profile-details-container.component.html',\n  styleUrl: './asset-state-profile-details-container.component.scss',\n})\nexport class AssetStateProfileDetailsContainerComponent {\n  readonly entity = input<AssetStateProfileListItem | null>(null);\n\n  private readonly assetStateProfileSectionFactory = inject(\n    AssetStateProfileSectionConfigFactory,\n  );\n  readonly entityDetailsState = inject(EntityDetailsStateService);\n\n  readonly isLoading = computed(() => this.entityDetailsState.isLoading());\n  readonly fullAssetStateProfile = computed(() => {\n    const entityDetails = this.entityDetailsState.selectedItem();\n\n    if (!entityDetails) {\n      return null;\n    }\n    return entityDetails as AssetStateProfileResponse;\n  });\n  readonly sections = computed(() => {\n    const assetStateProfile = this.fullAssetStateProfile();\n    if (!assetStateProfile) return [];\n    return this.assetStateProfileSectionFactory.createAllAssetStateProfileSections(\n      assetStateProfile,\n    );\n  });\n  readonly error = signal<string | null>(null);\n\n  onEntityChange(entity: unknown): void {\n    this.entityDetailsState.updateEntity(entity as AssetStateProfileResponse);\n    this.error.set(null);\n  }\n}\n","@if (!isLoading() && !error()) {\n  @if (fullAssetStateProfile()) {\n    <app-details-accordion-container\n      [sections]=\"sections()\"\n      [entity]=\"fullAssetStateProfile()\"\n      [title]=\"fullAssetStateProfile()?.name || 'Asset State Profile Details'\"\n      subtitle=\"Asset State Profile\"\n      [allowModeToggle]=\"true\"\n      (entityChange)=\"onEntityChange($event)\"\n      initialMode=\"view\"\n    ></app-details-accordion-container>\n  } @else {\n    <div class=\"p-4\">\n      <p-message\n        severity=\"info\"\n        text=\"No asset state profile details available.\"\n      ></p-message>\n    </div>\n  }\n}\n","import { Component, computed, inject, input, signal } from '@angular/core';\n\nimport { MessageModule } from 'primeng/message';\nimport { ProgressSpinnerModule } from 'primeng/progressspinner';\n\nimport { DetailsAccordionContainerComponent } from '../../details-accordion-container/details-accordion-container.component';\nimport {\n  AccountsService,\n  CompanyGroupCreateRequest,\n  CompanyGroupResponse,\n} from '../../../../../api';\nimport { CompanyGroupSectionConfigFactory } from '../../../factories';\nimport { EntityDetailsStateService } from '../../../services/entity/entity-details.state.service';\nimport { EntityOperationRegistryService } from '../../../services/entity/entity-operation-registry.service';\nimport { AuthDataService } from '../../../../../core/services/auth-data.service';\nimport {\n  AppFeatures,\n  getBackendFeatureDefaults,\n} from '../../../../../core/models';\nimport { isNullOrUndefined } from '../../../../../shared/utils';\n\n@Component({\n  selector: 'app-company-group-details-container',\n  imports: [\n    DetailsAccordionContainerComponent,\n    ProgressSpinnerModule,\n    MessageModule,\n  ],\n  templateUrl: './company-group-details-container.component.html',\n  styleUrl: './company-group-details-container.component.scss',\n})\nexport class CompanyGroupDetailsContainerComponent {\n  readonly entity = input<CompanyGroupResponse | null>(null);\n\n  private readonly companyGroupSectionFactory = inject(\n    CompanyGroupSectionConfigFactory,\n  );\n  readonly entityDetailsState = inject(EntityDetailsStateService);\n  private readonly operationRegistry = inject(EntityOperationRegistryService);\n  private readonly accountsService = inject(AccountsService);\n  private readonly authDataService = inject(AuthDataService);\n\n  readonly isLoading = computed(() => this.entityDetailsState.isLoading());\n  readonly isSoftRefreshing = computed(() =>\n    this.entityDetailsState.isSoftRefreshing(),\n  );\n  readonly isInitialLoading = computed(\n    () =>\n      this.isLoading() && !this.isSoftRefreshing() && !this.fullCompanyGroup(),\n  );\n  readonly fullCompanyGroup = computed(() => {\n    const entityDetails = this.entityDetailsState.selectedItem();\n\n    if (!entityDetails) {\n      return null;\n    }\n    return entityDetails as CompanyGroupResponse;\n  });\n\n  readonly flexibleConfiguration = computed(() => {\n    const companyGroup = this.fullCompanyGroup();\n    if (!companyGroup) {\n      return { sections: [], layout: { categories: [] } };\n    }\n\n    if (this.authDataService.getUserProfile()?.owner?.type !== 'client') {\n      let appFeatures = Object.keys(AppFeatures);\n      const backend = getBackendFeatureDefaults(\n        this.authDataService.getUserProfile()?.owner?.type ?? '',\n      );\n      const useFlags = this.authDataService.flags;\n      if (isNullOrUndefined(useFlags.assetPerformanceEnabled())) {\n        appFeatures = appFeatures.filter(\n          (feature) => feature !== 'page-assetperformance',\n        );\n      }\n      if (isNullOrUndefined(useFlags.deviceHealthEnabled())) {\n        appFeatures = appFeatures.filter(\n          (feature) => feature !== 'page-devicehealth',\n        );\n      }\n\n      return this.companyGroupSectionFactory.createFlexibleCompanyGroupConfiguration(\n        companyGroup,\n        appFeatures,\n        backend,\n      );\n    }\n    return { sections: [], layout: { categories: [] } };\n  });\n\n  readonly error = signal<string | null>(null);\n\n  constructor() {\n    this.operationRegistry.registerEntityOperations('company-group', {\n      update: (id, data) => this.accountsService.updateCompanyGroup(id, data),\n      create: (data: CompanyGroupCreateRequest) =>\n        this.accountsService.createCompanyGroup(data),\n      get: (id) => this.accountsService.getCompanyGroup(id),\n    });\n  }\n\n  onEntityChange(entity: unknown): void {\n    this.entityDetailsState.updateEntity(entity as CompanyGroupResponse);\n    this.error.set(null);\n  }\n}\n","@if (!isInitialLoading() && !error()) {\n  @if (fullCompanyGroup()) {\n    <app-details-accordion-container\n      [sections]=\"flexibleConfiguration().sections\"\n      [layout]=\"flexibleConfiguration().layout\"\n      [entity]=\"fullCompanyGroup()\"\n      [title]=\"fullCompanyGroup()?.name || 'Company Group Details'\"\n      subtitle=\"Company Group (Custom Order & Titles)\"\n      [allowModeToggle]=\"true\"\n      (entityChange)=\"onEntityChange($event)\"\n      initialMode=\"view\"\n    ></app-details-accordion-container>\n  } @else {\n    <div class=\"p-4\">\n      <p-message\n        severity=\"info\"\n        text=\"No company group details available.\"\n      ></p-message>\n    </div>\n  }\n}\n","import { Component, computed, inject, input, signal } from '@angular/core';\nimport { MessageModule } from 'primeng/message';\nimport { ProgressSpinnerModule } from 'primeng/progressspinner';\n\nimport { RoadProfileListItem, RoadProfileResponse } from '../../../../../api';\nimport { EntityDetailsStateService } from '../../../services/entity/entity-details.state.service';\nimport { DetailsAccordionContainerComponent } from '../../details-accordion-container/details-accordion-container.component';\nimport { RoadProfileSectionConfigFactory } from '../../../factories';\n\n@Component({\n  selector: 'app-road-profile-details-container',\n  imports: [\n    DetailsAccordionContainerComponent,\n    ProgressSpinnerModule,\n    MessageModule,\n  ],\n  templateUrl: './road-profile-details-container.component.html',\n  styleUrl: './road-profile-details-container.component.scss',\n})\nexport class RoadProfileDetailsContainerComponent {\n  readonly entity = input<RoadProfileListItem | null>(null);\n\n  private readonly roadProfileSectionFactory = inject(\n    RoadProfileSectionConfigFactory,\n  );\n  readonly entityDetailsState = inject(EntityDetailsStateService);\n\n  readonly isLoading = computed(() => this.entityDetailsState.isLoading());\n  readonly isSoftRefreshing = computed(() =>\n    this.entityDetailsState.isSoftRefreshing(),\n  );\n  readonly isInitialLoading = computed(\n    () =>\n      this.isLoading() && !this.isSoftRefreshing() && !this.fullRoadProfile(),\n  );\n  readonly fullRoadProfile = computed(() => {\n    const entityDetails = this.entityDetailsState.selectedItem();\n\n    if (!entityDetails) {\n      return null;\n    }\n    return entityDetails as RoadProfileResponse;\n  });\n  readonly sections = computed(() => {\n    const roadProfile = this.fullRoadProfile();\n    if (!roadProfile) return [];\n    return this.roadProfileSectionFactory.createAllRoadProfileSections(\n      roadProfile,\n    );\n  });\n  readonly error = signal<string | null>(null);\n\n  onEntityChange(entity: unknown): void {\n    this.entityDetailsState.updateEntity(entity as RoadProfileResponse);\n    this.error.set(null);\n  }\n}\n","@if (!isInitialLoading() && !error()) {\n  @if (fullRoadProfile()) {\n    <app-details-accordion-container\n      [sections]=\"sections()\"\n      [entity]=\"fullRoadProfile()\"\n      [title]=\"fullRoadProfile()?.name || 'Road Profile Details'\"\n      subtitle=\"Road Profile\"\n      [allowModeToggle]=\"true\"\n      (entityChange)=\"onEntityChange($event)\"\n      initialMode=\"view\"\n    ></app-details-accordion-container>\n  } @else {\n    <div class=\"p-4\">\n      <p-message\n        severity=\"info\"\n        text=\"No road profile details available.\"\n      ></p-message>\n    </div>\n  }\n}\n","import { Component, computed, inject, input, signal } from '@angular/core';\n\nimport { MessageModule } from 'primeng/message';\nimport { ProgressSpinnerModule } from 'primeng/progressspinner';\n\nimport {\n  GeoLockProfileListItem,\n  GeoLockProfileResponse,\n} from '../../../../../api';\nimport { EntityDetailsStateService } from '../../../services/entity/entity-details.state.service';\nimport { DetailsAccordionContainerComponent } from '../../details-accordion-container/details-accordion-container.component';\nimport { GeoLockProfileSectionConfigFactory } from '../../../factories';\n\n@Component({\n  selector: 'app-geo-lock-profile-details-container',\n  imports: [\n    DetailsAccordionContainerComponent,\n    ProgressSpinnerModule,\n    MessageModule,\n  ],\n  templateUrl: './geo-lock-profile-details-container.component.html',\n  styleUrl: './geo-lock-profile-details-container.component.scss',\n})\nexport class GeoLockProfileDetailsContainerComponent {\n  readonly entity = input<GeoLockProfileListItem | null>(null);\n\n  private readonly geoLockProfileSectionFactory = inject(\n    GeoLockProfileSectionConfigFactory,\n  );\n  readonly entityDetailsState = inject(EntityDetailsStateService);\n\n  readonly isLoading = computed(() => this.entityDetailsState.isLoading());\n  readonly fullGeoLockProfile = computed(() => {\n    const entityDetails = this.entityDetailsState.selectedItem();\n\n    if (!entityDetails) {\n      return null;\n    }\n    return entityDetails as GeoLockProfileResponse;\n  });\n  readonly sections = computed(() => {\n    const geoLockProfile = this.fullGeoLockProfile();\n    if (!geoLockProfile) return [];\n    return this.geoLockProfileSectionFactory.createAllGeoLockProfileSections(\n      geoLockProfile,\n    );\n  });\n  readonly error = signal<string | null>(null);\n\n  onEntityChange(entity: unknown): void {\n    this.entityDetailsState.updateEntity(entity as GeoLockProfileResponse);\n    this.error.set(null);\n  }\n}\n","@if (!isLoading() && !error()) {\n  @if (fullGeoLockProfile()) {\n    <app-details-accordion-container\n      [sections]=\"sections()\"\n      [entity]=\"fullGeoLockProfile()\"\n      [title]=\"fullGeoLockProfile()?.name || 'Geo Lock Profile Details'\"\n      subtitle=\"Geo Lock Profile\"\n      [allowModeToggle]=\"true\"\n      (entityChange)=\"onEntityChange($event)\"\n      initialMode=\"view\"\n    ></app-details-accordion-container>\n  } @else {\n    <div class=\"p-4\">\n      <p-message\n        severity=\"info\"\n        text=\"No geo lock profile details available.\"\n      ></p-message>\n    </div>\n  }\n}\n","import {\n  Component,\n  computed,\n  DestroyRef,\n  inject,\n  OnInit,\n  signal,\n  input,\n} from '@angular/core';\nimport {\n  DeviceTypeCreateRequest,\n  DeviceTypeResponse,\n  DeviceTypesService,\n} from '../../../../../api';\nimport { EntityDetailsStateService } from '../../../services/entity/entity-details.state.service';\nimport { DeviceTypesSectionConfigFactory } from '../../../factories';\nimport { isDefined, isNullOrUndefined } from '../../../../../shared/utils';\nimport { EntityOperationRegistryService } from '../../../services/entity/entity-operation-registry.service';\nimport { BroadcastEventMessageService } from '../../../services/broadcast-event-messages.service';\nimport { takeUntilDestroyed } from '@angular/core/rxjs-interop';\nimport { ToastService } from '../../../../../core/services/toast.service';\nimport { DetailsAccordionContainerComponent } from '../../details-accordion-container/details-accordion-container.component';\nimport { MessageModule } from 'primeng/message';\n\ninterface EntityUpdatedMessage {\n  entityType: string;\n  data: DeviceTypeResponse;\n}\n\n@Component({\n  selector: 'app-device-types-details-container',\n  imports: [DetailsAccordionContainerComponent, MessageModule],\n  templateUrl: './device-types-details-container.component.html',\n  styleUrl: 'device-types-details-container.component.scss',\n})\nexport class DeviceTypesDetailsContainerComponent implements OnInit {\n  constructor() {\n    this.operationRegistry.registerEntityOperations('device-types', {\n      update: (id, data) => this.deviceTypesService.updateDeviceType(id, data),\n      create: (data: DeviceTypeCreateRequest) =>\n        this.deviceTypesService.createDeviceType(data),\n      get: (id) => this.deviceTypesService.getDeviceType(id),\n    });\n  }\n  readonly entity = input<DeviceTypeResponse | null>(null);\n\n  private readonly entityDetailsState = inject(EntityDetailsStateService);\n  private readonly deviceTypesSectionFactory = inject(\n    DeviceTypesSectionConfigFactory,\n  );\n  private readonly operationRegistry = inject(EntityOperationRegistryService);\n  private readonly broadcastService = inject(BroadcastEventMessageService);\n  private readonly toastService = inject(ToastService);\n  private readonly destroyRef = inject(DestroyRef);\n  private readonly deviceTypesService = inject(DeviceTypesService);\n\n  readonly isLoading = computed(() => this.entityDetailsState.isLoading());\n  readonly isSoftRefreshing = computed(() =>\n    this.entityDetailsState.isSoftRefreshing(),\n  );\n  readonly isInitialLoading = computed(\n    () =>\n      this.isLoading() && !this.isSoftRefreshing() && !this.fullDeviceType(),\n  );\n\n  readonly fullDeviceType = computed(() => {\n    const entityDetails = this.entityDetailsState.selectedItem();\n    if (isNullOrUndefined(entityDetails)) return null;\n\n    return entityDetails as DeviceTypeResponse;\n  });\n\n  readonly sections = computed(() => {\n    const fullDeviceType = this.fullDeviceType();\n    if (!fullDeviceType) return [];\n    return this.deviceTypesSectionFactory.createAllDeviceTypeSections(\n      fullDeviceType,\n    );\n  });\n\n  readonly error = signal<string | null>(null);\n  private isEntityUpdatedMessage(\n    message: unknown,\n  ): message is EntityUpdatedMessage {\n    return (\n      isDefined(message) &&\n      message !== null &&\n      typeof message === 'object' &&\n      'entityType' in message &&\n      'data' in message &&\n      (message as EntityUpdatedMessage).entityType === 'device-types'\n    );\n  }\n\n  ngOnInit(): void {\n    this.broadcastService\n      .on('entity-updated')\n      .pipe(takeUntilDestroyed(this.destroyRef))\n      .subscribe((message) => {\n        if (this.isEntityUpdatedMessage(message)) {\n          this.toastService.showSuccess(\n            'Success',\n            'Device Type updated successfully',\n          );\n          this.onEntityChange(message.data);\n        }\n      });\n  }\n\n  onEntityChange(entity: unknown): void {\n    this.entityDetailsState.updateEntity(entity as DeviceTypeResponse);\n    this.error.set(null);\n  }\n}\n","@if (!isInitialLoading() && !error()) {\n  @if (fullDeviceType()) {\n    <app-details-accordion-container\n      [sections]=\"sections()\"\n      [entity]=\"fullDeviceType()\"\n      [title]=\"fullDeviceType()?.name || 'Device Type Details'\"\n      subtitle=\"Device Type\"\n      [allowModeToggle]=\"true\"\n      (entityChange)=\"onEntityChange($event)\"\n      initialMode=\"view\"\n    ></app-details-accordion-container>\n  } @else {\n    <div class=\"p-4\">\n      <p-message\n        severity=\"info\"\n        text=\"No device type details available.\"\n      ></p-message>\n    </div>\n  }\n}\n","import { Injectable, Type } from '@angular/core';\nimport { ActivatedRoute } from '@angular/router';\nimport { take } from 'rxjs';\n\nimport { GenericDetailsContainerComponent } from '../components/generic-details-container/generic-details-container.component';\nimport { EntityDetailsConfig } from '../models/entity-section.interface';\nimport { AssetDetailsContainerComponent } from '../components/assets/asset-details-container/asset-details-container.component';\nimport { SimCardDetailsContainerComponent } from '../components/sim-cards/sim-card-details-container/sim-card-details-container.component';\nimport { AssetTagDetailsContainerComponent } from '../components/asset-tags/asset-tag-details-container/asset-tag-details-container.component';\nimport { DeviceConfigProfileDetailsContainerComponent } from '../components/device-config-profiles/device-config-profile-details-container/device-config-profile-details-container.component';\nimport { DeviceDetailsContainerComponent } from '../components/device/device-details-container/device-details-container.component';\nimport { GeofenceDetailsContainerComponent } from '../components/geofences/geofence-details-container/geofence-details-container.component';\nimport { DeviceProviderDetailsContainerComponent } from '../components/device-providers/device-provider-details-container/device-provider-details-container.component';\nimport { SmsGatewayProviderDetailsContainerComponent } from '../components/sms-gateway-providers/sms-gateway-provider-details-container/sms-gateway-provider-details-container.component';\nimport { IoTypeDetailsContainerComponent } from '../components/io-types/io-type-details-container/io-type-details-container.component';\nimport { OverspeedProfileDetailsContainerComponent } from '../components/overspeed-profiles/overspeed-profile-details-container/overspeed-profile-details-container.component';\nimport { AlertDetailsContainerComponent } from '../components/alerts/alert-details-container/alert-details-container.component';\nimport { UserRoleDetailsContainerComponent } from '../components/user-roles/user-role-details-container/user-role-details-container.component';\nimport { UserDetailsContainerComponent } from '../components/users/user-details-container/user-details-container.component';\nimport { CustomFieldDetailsContainerComponent } from '../components/custom-fields/custom-field-details-container/custom-field-details-container.component';\nimport { isDefined } from '../../../shared/utils';\nimport { EmailProviderDetailsContainerComponent } from '../components/email-providers/email-provider-details-container/email-provider-details-container.component';\nimport { ThemeDetailsContainerComponent } from '../components/themes/theme-details-container/theme-details-container.component';\nimport { CostCentreDetailsContainerComponent } from '../components/cost-centres/cost-centre-details-container/cost-centre-details-container.component';\nimport { GeofenceGroupDetailsContainerComponent } from '../components/geofence-groups/geofence-group-details-container/geofence-group-details-container.component';\nimport { AssetGroupDetailsContainerComponent } from '../components/asset-groups/asset-group-details-container/asset-group-details-container.component';\nimport { AssetCategoryDetailsContainerComponent } from '../components/asset-categories/asset-category-details-container/asset-category-details-container.component';\nimport { VendorClientDetailsContainerComponent } from '../components/vendor-clients/vendor-client-details-container/vendor-client-details-container.component';\nimport { DistributorVendorDetailsContainerComponent } from '../components/distributor-vendors/distributor-vendor-details-container/distributor-vendor-details-container.component';\nimport { AssetRatingProfileDetailsContainerComponent } from '../components/asset-rating-profiles/asset-rating-profile-details-container/asset-rating-profile-details-container.component';\nimport { SuperAdminDistributorsDetailsContainerComponent } from '../components/super-admin-distributors/super-admin-distributors-details-container/super-admin-distributors-details-container.component';\nimport { AssetStateProfileDetailsContainerComponent } from '../components/asset-state-profiles/asset-state-profile-details-container/asset-state-profile-details-container.component';\nimport { CompanyGroupDetailsContainerComponent } from '../components/company-groups/company-group-details-container/company-group-details-container.component';\nimport { RoadProfileDetailsContainerComponent } from '../components/road-profiles/road-profile-details-container/road-profile-details-container.component';\nimport { GeoLockProfileDetailsContainerComponent } from '../components/geo-lock-profiles/geo-lock-profile-details-container/geo-lock-profile-details-container.component';\nimport { DeviceTypesDetailsContainerComponent } from '../components/device-types/device-types-details-container/device-types-details-container.component';\n\ntype ComponentRegistry = Record<string, Type<unknown>>;\ntype ConfigRegistry = Record<string, EntityDetailsConfig>;\n\n@Injectable({ providedIn: 'root' })\nexport class DetailsComponentFactory {\n  private componentRegistry: ComponentRegistry = {};\n  private configRegistry: ConfigRegistry = {};\n  private entityTypeMapping: Record<string, string> = {\n    'client-assets': 'asset',\n    'client-sim-cards': 'simcard',\n    'client-alerts': 'alert',\n    'client-asset-tags': 'asset-tag',\n    'client-hardware-devices': 'device',\n    'client-geofences': 'geofence',\n    'client-io-types': 'io-type',\n    'client-sms-gateway-providers': 'sms-gateway-provider',\n    'client-device-providers': 'device-provider',\n    'client-device-config-profiles': 'device-config-profile',\n    'client-overspeed-profiles': 'overspeed-profile',\n    'client-user-roles': 'user-role',\n    'client-users': 'user',\n    'client-custom-fields': 'custom-field',\n    'client-cost-centres': 'cost-centre',\n    'client-geofence-groups': 'geofence-group',\n    'client-asset-groups': 'asset-group',\n    'client-asset-categories': 'asset-category',\n    'client-asset-rating-profiles': 'asset-rating-profile',\n    'client-asset-state-profiles': 'asset-state-profile',\n    'client-road-profiles': 'road-profile',\n    'client-geo-lock-profiles': 'geo-lock-profile',\n    'vendor-io-types': 'io-type',\n    'vendor-overspeed-profiles': 'overspeed-profile',\n    'vendor-device-config-profiles': 'device-config-profile',\n    'vendor-sms-gateway-providers': 'sms-gateway-provider',\n    'vendor-custom-fields': 'custom-field',\n    'vendor-email-providers': 'email-provider',\n    'vendor-users': 'user',\n    'vendor-user-roles': 'user-role',\n    'vendor-clients': 'client',\n    'vendor-themes': 'theme',\n    'vendor-company-groups': 'company-group',\n    'vendor-road-profiles': 'road-profile',\n    'distributor-device-providers': 'device-provider',\n    'distributor-overspeed-profiles': 'overspeed-profile',\n    'distributor-road-profiles': 'road-profile',\n    'distributor-themes': 'theme',\n    'distributor-users': 'user',\n    'distributor-user-roles': 'user-role',\n    'distributor-company-groups': 'company-group',\n    'distributor-vendors': 'vendor',\n    'super-admin-distributors': 'distributor',\n    'super-admin-device-types': 'device-types',\n    'system-users': 'user',\n    'system-user-roles': 'user-role',\n    // ... Add more mappings as needed\n  };\n\n  constructor() {\n    this.registerDefaultComponents();\n  }\n\n  /**\n   * Register default components\n   */\n  private registerDefaultComponents(): void {\n    this.registerComponent('asset', AssetDetailsContainerComponent);\n    this.registerComponent('simcard', SimCardDetailsContainerComponent);\n    this.registerComponent('asset-tag', AssetTagDetailsContainerComponent);\n    this.registerComponent(\n      'device-config-profile',\n      DeviceConfigProfileDetailsContainerComponent,\n    );\n    this.registerComponent('device', DeviceDetailsContainerComponent);\n    this.registerComponent('geofence', GeofenceDetailsContainerComponent);\n    this.registerComponent(\n      'device-provider',\n      DeviceProviderDetailsContainerComponent,\n    );\n    this.registerComponent(\n      'sms-gateway-provider',\n      SmsGatewayProviderDetailsContainerComponent,\n    );\n    this.registerComponent('io-type', IoTypeDetailsContainerComponent);\n    this.registerComponent(\n      'overspeed-profile',\n      OverspeedProfileDetailsContainerComponent,\n    );\n    this.registerComponent('alert', AlertDetailsContainerComponent);\n    this.registerComponent('user-role', UserRoleDetailsContainerComponent);\n    this.registerComponent('user', UserDetailsContainerComponent);\n    this.registerComponent(\n      'custom-field',\n      CustomFieldDetailsContainerComponent,\n    );\n    this.registerComponent('theme', ThemeDetailsContainerComponent);\n    this.registerComponent('cost-centre', CostCentreDetailsContainerComponent);\n    this.registerComponent(\n      'geofence-group',\n      GeofenceGroupDetailsContainerComponent,\n    );\n    this.registerComponent('asset-group', AssetGroupDetailsContainerComponent);\n    this.registerComponent(\n      'asset-category',\n      AssetCategoryDetailsContainerComponent,\n    );\n    this.registerComponent(\n      'email-provider',\n      EmailProviderDetailsContainerComponent,\n    );\n    this.registerComponent('client', VendorClientDetailsContainerComponent);\n    this.registerComponent(\n      'vendor',\n      DistributorVendorDetailsContainerComponent,\n    );\n    this.registerComponent(\n      'asset-rating-profile',\n      AssetRatingProfileDetailsContainerComponent,\n    );\n    this.registerComponent(\n      'distributor',\n      SuperAdminDistributorsDetailsContainerComponent,\n    );\n    this.registerComponent(\n      'asset-state-profile',\n      AssetStateProfileDetailsContainerComponent,\n    );\n    this.registerComponent(\n      'company-group',\n      CompanyGroupDetailsContainerComponent,\n    );\n    this.registerComponent(\n      'road-profile',\n      RoadProfileDetailsContainerComponent,\n    );\n    this.registerComponent(\n      'geo-lock-profile',\n      GeoLockProfileDetailsContainerComponent,\n    );\n    this.registerComponent(\n      'device-types',\n      DeviceTypesDetailsContainerComponent,\n    );\n  }\n\n  /**\n   * Register a component for an entity type\n   */\n  registerComponent(entityType: string, component: Type<unknown>): void {\n    this.componentRegistry[entityType.toLowerCase()] = component;\n  }\n\n  /**\n   * Register a configuration for an entity type\n   */\n  registerEntityConfig(entityType: string, config: EntityDetailsConfig): void {\n    this.configRegistry[entityType.toLowerCase()] = config;\n  }\n\n  /**\n   * Get the appropriate details component for an entity type\n   */\n  getDetailsComponent(entityType: string): Type<unknown> {\n    if (!entityType) return GenericDetailsContainerComponent;\n    const normalizedType = entityType.toLowerCase();\n    return (\n      this.componentRegistry[normalizedType] ?? GenericDetailsContainerComponent\n    );\n  }\n\n  /**\n   * Get the configuration for an entity type\n   */\n  getEntityConfig(entityType: string): EntityDetailsConfig | undefined {\n    if (!entityType) return undefined;\n\n    const normalizedType = entityType.toLowerCase();\n    return this.configRegistry[normalizedType];\n  }\n\n  /**\n   * Extract entity type from ActivatedRoute\n   * @param route The ActivatedRoute containing route parameters\n   * @param paramName The name of the parameter containing the entity type (default: 'type')\n   * @returns The entity type as a lowercase string, or empty string if not found\n   */\n  getEntityTypeFromRoute(\n    route: ActivatedRoute | string,\n    paramName = 'type',\n  ): string {\n    // If given a string (for backward compatibility), use the old behavior\n    if (typeof route === 'string') {\n      return this.normalizeEntityType(route);\n    }\n\n    // Extract the entity type from route parameters\n    let entityType = '';\n\n    // Try to get from params first (for normal route params)\n    route.params.pipe(take(1)).subscribe((params) => {\n      if (isDefined(params) && isDefined(params[paramName])) {\n        entityType = this.normalizeEntityType(params[paramName]);\n      }\n    });\n\n    // If not found in params, try queryParams\n    if (!entityType) {\n      route.queryParams.pipe(take(1)).subscribe((queryParams) => {\n        if (isDefined(queryParams) && isDefined(queryParams[paramName])) {\n          entityType = this.normalizeEntityType(queryParams[paramName]);\n        }\n      });\n    }\n\n    // If still not found, try route data (for static route configurations like tree tables)\n    if (!entityType) {\n      const routeData = route.snapshot.data;\n      if (isDefined(routeData) && isDefined(routeData[paramName])) {\n        entityType = this.normalizeEntityType(routeData[paramName]);\n      }\n    }\n\n    return entityType;\n  }\n\n  /**\n   * Normalize entity type using the mapping or by converting to lowercase\n   * @param rawType The raw entity type from the route\n   * @returns The normalized entity type\n   */\n  private normalizeEntityType(rawType: string): string {\n    if (!rawType) return '';\n\n    const normalizedType = rawType.toLowerCase();\n    return this.entityTypeMapping[normalizedType] || normalizedType;\n  }\n\n  /**\n   * Register a mapping between a route parameter value and an entity type\n   * @param routeValue The value found in route parameters\n   * @param entityType The internal entity type to map to\n   */\n  registerEntityTypeMapping(routeValue: string, entityType: string): void {\n    this.entityTypeMapping[routeValue.toLowerCase()] = entityType.toLowerCase();\n  }\n\n  /**\n   * Get the mapping for a route parameter value\n   * @param routeValue The value found in route parameters\n   * @returns The mapped entity type, or the original value if no mapping exists\n   */\n  getEntityTypeMapping(routeValue: string): string {\n    const normalizedValue = routeValue.toLowerCase();\n    return this.entityTypeMapping[normalizedValue] || normalizedValue;\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { Component, computed, inject, input } from '@angular/core';\nimport { Validators } from '@angular/forms';\nimport { ButtonModule } from 'primeng/button';\n\nimport { EntitySectionBaseComponent } from '../../../components/base/entity-section-base';\nimport {\n  SimCardCreateRequest,\n  SimCardListItem,\n  EntitiesService,\n} from '../../../../../api';\nimport { isDefined, isNullOrUndefined } from '../../../../../shared/utils';\nimport { takeUntilDestroyed } from '@angular/core/rxjs-interop';\nimport { createTextField } from '../../../../../shared/models';\nimport { GridComponent } from '../../../../../shared/components/grid/grid.component';\nimport { DynamicFormComponent } from '../../../../../shared/components/forms/dynamic-form/dynamic-form.component';\n\n@Component({\n  selector: 'app-sim-card-details-section',\n  imports: [CommonModule, ButtonModule, GridComponent, DynamicFormComponent],\n  templateUrl: './sim-card-details-section.component.html',\n  styleUrl: './sim-card-details-section.component.scss',\n})\nexport class SimCardDetailsSectionComponent extends EntitySectionBaseComponent<\n  SimCardListItem | SimCardCreateRequest\n> {\n  readonly ownerId = input<string | null>(null);\n  private readonly entitiesService = inject(EntitiesService);\n\n  readonly simCardDetails = computed(() => {\n    const simCardDetails = this.entity();\n    if (!isDefined(simCardDetails)) return [];\n\n    return [\n      { key: 'Serial Number', value: simCardDetails.name },\n      { key: 'Network', value: simCardDetails.networkName },\n      { key: 'Number', value: simCardDetails.number },\n      { key: 'Description', value: simCardDetails.description },\n    ];\n  });\n\n  constructor() {\n    super();\n\n    // Setup initial columns\n    this.columns = [\n      { field: 'key', header: '', transform: 'uppercase' },\n      { field: 'value', header: '' },\n    ];\n  }\n\n  protected override updateFormFields(): void {\n    const simCard = this.entity();\n    this.formFields = [\n      createTextField('name', 'Serial Number', simCard?.name, {\n        name: 'name',\n        validations: [\n          {\n            name: 'required',\n            validator: Validators.required,\n            message: 'Serial Number is required',\n          },\n        ],\n      }),\n      createTextField('networkName', 'Network', simCard?.networkName, {\n        name: 'networkName',\n        validations: [\n          {\n            name: 'required',\n            validator: Validators.required,\n            message: 'Network is required',\n          },\n        ],\n      }),\n      createTextField('number', 'Number', simCard?.number, {\n        name: 'number',\n        validations: [\n          {\n            name: 'required',\n            validator: Validators.required,\n            message: 'Number is required',\n          },\n        ],\n      }),\n      createTextField('description', 'Description', simCard?.description, {\n        name: 'description',\n        validations: [],\n      }),\n    ];\n  }\n\n  protected override submitChanges(\n    formData: Record<string, string | number>,\n  ): void {\n    const simCard = this.entity();\n    if (isNullOrUndefined(simCard)) return;\n    this.entitiesService\n      .updateSimCard(simCard.id, formData)\n      .pipe(takeUntilDestroyed(this.destroyRef))\n      .subscribe({\n        next: (response) => {\n          this.isFormEditable.set(false);\n          this.broadcastService.broadcast('entity-updated', {\n            entityType: 'simcard',\n            operation: 'update',\n            entityId: simCard.id,\n            data: response,\n          });\n        },\n        error: () => {\n          this.isFormEditable.set(true);\n        },\n      });\n  }\n}\n","<div class=\"card pt-2\">\n  <div class=\"mb-4 p-2 flex justify-start items-center\">\n    <span\n      class=\"pi pi-mobile !text-[2.5rem]\"\n      [ngClass]=\"{ 'icon-primary': isFormEditable() }\"\n      [attr.aria-label]=\"'mobile icon'\"\n    ></span>\n\n    <div class=\"pl-6 flex-1\">\n      <div class=\"flex justify-between items-center\">\n        <h2 class=\"text-xl font-semibold m-0\">SIM Card Details</h2>\n        @if (!isFormEditable() && !createMode()) {\n          <div class=\"icon-light\">\n            <span\n              class=\"pi pi-pen-to-square action hover !text-2xl\"\n              [attr.aria-label]=\"'Edit sim card details'\"\n              (click)=\"onEdit()\"\n              (keydown.enter)=\"onEdit()\"\n            ></span>\n          </div>\n        }\n      </div>\n      <span>Configure various details about your SIM card.</span>\n    </div>\n  </div>\n\n  @if (isFormEditable() || (createMode() && formFields.length)) {\n    <app-dynamic-form\n      [fields]=\"formFields\"\n      [actions]=\"actions\"\n      [hideActions]=\"createMode()\"\n      (formSubmit)=\"onSubmit($event)\"\n      (formValidityChange)=\"onFormValidityChange($event)\"\n      (formValueChange)=\"onFormValueChange($event)\"\n    >\n    </app-dynamic-form>\n  }\n\n  @if (!isFormEditable() && !createMode()) {\n    <app-grid\n      [data]=\"simCardDetails()\"\n      [columns]=\"columns\"\n      [showGridLines]=\"false\"\n      [hideHeader]=\"true\"\n      tableStyleClass=\"info-display !w-auto\"\n    ></app-grid>\n  }\n</div>\n","import { Injectable } from '@angular/core';\nimport { AdminDetailSection } from '../models';\n\nimport { SimCardResponse } from '../../../api';\nimport { SimCardDetailsSectionComponent } from '../components/sim-cards/sim-card-details-section/sim-card-details-section.component';\nimport { FeedSectionComponent } from '../components/shared/feed-section/feed-section.component';\n\n@Injectable({ providedIn: 'root' })\nexport class SimCardSectionConfigFactory {\n  /**\n   * Create sections for simCard information\n   * @param simCard The simCard object to display in the section\n   * @returns An array of AdminDetailSection objects representing the simCard information sections\n   */\n  createSimCardInformationSections(\n    simCard: SimCardResponse | null,\n  ): AdminDetailSection[] {\n    return [\n      {\n        id: 'sim-card-details',\n        title: 'Sim Card Details',\n        component: SimCardDetailsSectionComponent,\n        componentInputs: { entity: simCard },\n        category: 'information',\n        order: 10,\n      },\n    ];\n  }\n\n  /**\n   * Create sections for simCard changes\n   * @param simCard The simCard object to display in the section\n   * @returns An array of AdminDetailSection objects representing the simCard changes sections\n   */\n  createChangesSection(simCard: SimCardResponse | null): AdminDetailSection[] {\n    return [\n      {\n        id: 'sim-card-changes',\n        title: 'Changes',\n        component: FeedSectionComponent,\n        componentInputs: {\n          entity: simCard,\n        },\n        category: 'feed',\n        order: 10,\n      },\n    ];\n  }\n\n  /**\n   * Create all simCard sections in one call\n   * @param simCard The simCard object to display in the sections\n   * @returns An array of AdminDetailSection objects representing all simCard sections\n   */\n  createAllSimCardSections(\n    simCard: SimCardResponse | null,\n  ): AdminDetailSection[] {\n    return [\n      ...this.createSimCardInformationSections(simCard),\n      ...this.createChangesSection(simCard),\n    ];\n  }\n}\n","import {\n  ChangeDetectorRef,\n  Component,\n  computed,\n  effect,\n  inject,\n  input,\n  OnInit,\n  signal,\n  untracked,\n} from '@angular/core';\nimport { isDefined, isNullOrUndefined } from '../../../../../shared/utils';\nimport { CommonModule } from '@angular/common';\nimport { takeUntilDestroyed } from '@angular/core/rxjs-interop';\nimport { ReactiveFormsModule, Validators } from '@angular/forms';\n\nimport {\n  AssetTagListItem,\n  AssetTagCreateRequest,\n  EntitiesService,\n  IdName,\n} from '../../../../../api';\nimport { DynamicFormComponent } from '../../../../../shared/components/forms/dynamic-form/dynamic-form.component';\nimport { GridComponent } from '../../../../../shared/components/grid/grid.component';\nimport {\n  createDropdownField,\n  createTextField,\n} from '../../../../../shared/models';\nimport { EntitySectionBaseComponent } from '../../base';\nimport { finalize } from 'rxjs';\n\n@Component({\n  selector: 'app-asset-tag-details-section',\n  imports: [\n    CommonModule,\n    ReactiveFormsModule,\n    GridComponent,\n    DynamicFormComponent,\n  ],\n  templateUrl: './asset-tag-details-section.component.html',\n  styleUrl: './asset-tag-details-section.component.scss',\n})\nexport class AssetTagDetailsSectionComponent\n  extends EntitySectionBaseComponent<AssetTagListItem | AssetTagCreateRequest>\n  implements OnInit\n{\n  readonly ownerId = input<string | null>(null);\n  private readonly entitiesService = inject(EntitiesService);\n\n  private readonly cdr = inject(ChangeDetectorRef);\n  protected readonly selectOptionsLoaded = signal<boolean>(false);\n\n  readonly assetTagDetails = computed(() => {\n    const assetTagDetails = this.entity();\n    if (!isDefined(assetTagDetails)) return [];\n\n    return [\n      { key: 'Name', value: assetTagDetails.name },\n      { key: 'Serial Number', value: assetTagDetails.serialNumber ?? 'None' },\n      { key: 'Tag Type', value: assetTagDetails.assetTagType?.name ?? 'None' },\n      { key: 'Mode', value: assetTagDetails.mode ?? 'None' },\n    ];\n  });\n  selectOptions: Record<string, { label: string; value: string }[]> = {};\n\n  constructor() {\n    super();\n\n    // Setup initial columns\n    this.columns = [\n      { field: 'key', header: '', transform: 'uppercase' },\n      { field: 'value', header: '' },\n    ];\n\n    effect(() => {\n      const selectOptionsLoaded = this.selectOptionsLoaded();\n      if (selectOptionsLoaded) {\n        untracked(() => {\n          this.updateFormFields();\n          this.cdr.detectChanges();\n        });\n      }\n    });\n  }\n\n  ngOnInit(): void {\n    this.loadSelectOptions();\n  }\n\n  private loadSelectOptions(): void {\n    const asset = this.entity();\n    const ownerIdValue = this.ownerId();\n\n    const effectiveOwnerId = asset?.owner?.id ?? ownerIdValue;\n\n    if (isNullOrUndefined(effectiveOwnerId)) {\n      this.selectOptions = {};\n      this.selectOptionsLoaded.set(true);\n      this.updateFormFields();\n      return;\n    }\n\n    this.entitiesService\n      .listAssetTagTypes(effectiveOwnerId)\n      .pipe(takeUntilDestroyed(this.destroyRef))\n      .subscribe((result) => {\n        this.selectOptions = {\n          assetTagTypes: result.items\n            .map((item) => ({ label: item.name ?? '', value: item.id }))\n            .sort((a, b) => a.label.localeCompare(b.label)),\n        };\n\n        this.selectOptionsLoaded.set(true);\n      });\n  }\n\n  protected override updateFormFields(): void {\n    const assetTag = this.entity();\n    this.formFields = [\n      createTextField('name', 'Name', assetTag?.name, {\n        name: 'name',\n        validations: [\n          {\n            name: 'required',\n            validator: Validators.required,\n            message: 'Name is required',\n          },\n        ],\n      }),\n\n      createTextField('serialNumber', 'Serial Number', assetTag?.serialNumber, {\n        name: 'serialNumber',\n        validations: [\n          {\n            name: 'required',\n            validator: Validators.required,\n            message: 'Serial Number is required',\n          },\n        ],\n      }),\n\n      createDropdownField(\n        'assetTagType',\n        'Tag Type',\n        this.selectOptions?.['assetTagTypes'] ?? [],\n        assetTag?.assetTagType?.id,\n        {\n          name: 'assetTagType',\n          validations: [\n            {\n              name: 'required',\n              validator: Validators.required,\n              message: 'Tag Type is required',\n            },\n          ],\n          props: {\n            appendTo: 'body',\n          },\n        },\n      ),\n      createDropdownField(\n        'mode',\n        'Mode',\n        [\n          { label: 'Fixed', value: 'fixed' },\n          { label: 'Movable', value: 'movable' },\n          { label: 'Stock', value: 'stock' },\n        ],\n        assetTag?.mode,\n        {\n          name: 'mode',\n          validations: [\n            {\n              name: 'required',\n              validator: Validators.required,\n              message: 'Mode is required',\n            },\n          ],\n          props: {\n            appendTo: 'body',\n          },\n        },\n      ),\n    ];\n  }\n\n  protected override submitChanges(\n    formData: Record<string, string | number | IdName>,\n  ): void {\n    const assetTag = this.entity();\n    if (isNullOrUndefined(assetTag)) return;\n\n    // Create a copy of the formData\n    const updatedData = { ...formData };\n\n    // If assetTagType is present as an ID, convert it to an idName object\n    if (isDefined(updatedData['assetTagType'])) {\n      const tagTypeId = updatedData['assetTagType'] as string;\n\n      // Find the corresponding tag type from select options to get the name\n      const tagType = this.selectOptions?.['assetTagTypes']?.find(\n        (option) => option.value === tagTypeId,\n      );\n\n      if (tagType) {\n        // Replace with idName object\n        // Replace with idName object\n        updatedData['assetTagType'] = {\n          id: tagTypeId,\n          name: tagType.label,\n        };\n      } else {\n        // If we can't find the name, use existing name or a placeholder\n        const existingTagType = assetTag.assetTagType;\n        updatedData['assetTagType'] = {\n          id: tagTypeId,\n          name: existingTagType?.name ?? 'Unknown Tag Type',\n        };\n      }\n    }\n\n    // Proceed with the update\n    this.entitiesService\n      .updateAssetTag(assetTag.id, updatedData)\n      .pipe(\n        takeUntilDestroyed(this.destroyRef),\n        finalize(() => this.isSubmitting.set(false)),\n      )\n      .subscribe({\n        next: (response) => {\n          this.isFormEditable.set(false);\n          this.broadcastService.broadcast('entity-updated', {\n            entityType: 'asset-tag',\n            operation: 'update',\n            entityId: assetTag.id,\n            data: response,\n          });\n        },\n        error: () => {\n          this.isFormEditable.set(true);\n        },\n      });\n  }\n\n  protected override onFormValueChange(\n    formData: Record<string, string | number | object>,\n  ): void {\n    const transformedData = { ...formData };\n    if (isDefined(transformedData['assetTagType'])) {\n      const tagTypeId = transformedData['assetTagType'] as string;\n      const tagType = this.selectOptions?.['assetTagTypes']?.find(\n        (option) => option.value === tagTypeId,\n      );\n      if (tagType) {\n        transformedData['assetTagType'] = {\n          id: tagTypeId,\n          name: tagType.label,\n        };\n      }\n    }\n\n    this.formValueChange.emit(transformedData);\n  }\n}\n","<div class=\"card pt-2\">\n  <div class=\"mb-4 p-2 flex justify-start items-center\">\n    <span\n      class=\"pi pi-tags !text-[2.5rem]\"\n      [ngClass]=\"{ 'icon-primary': isFormEditable() }\"\n      [attr.aria-label]=\"'tags icon'\"\n    ></span>\n\n    <div class=\"pl-6 flex-1\">\n      <div class=\"flex justify-between items-center\">\n        <h2 class=\"text-xl font-semibold m-0\">Asset Tag Details</h2>\n        @if (!isFormEditable() && !createMode()) {\n          <div class=\"icon-light\">\n            <span\n              class=\"pi pi-pen-to-square action hover !text-2xl\"\n              [attr.aria-label]=\"'Edit asset tag details'\"\n              (click)=\"onEdit()\"\n              (keydown.enter)=\"onEdit()\"\n            ></span>\n          </div>\n        }\n      </div>\n      <span\n        >The following information is required in order to identify your asset\n        tag.</span\n      >\n    </div>\n  </div>\n\n  @if (isFormEditable() || (createMode() && formFields.length)) {\n    <app-dynamic-form\n      [fields]=\"formFields\"\n      [actions]=\"actions\"\n      [hideActions]=\"createMode()\"\n      (formSubmit)=\"onSubmit($event)\"\n      (formValidityChange)=\"onFormValidityChange($event)\"\n      (formValueChange)=\"onFormValueChange($event)\"\n    >\n    </app-dynamic-form>\n  }\n\n  @if (!isFormEditable() && !createMode()) {\n    <app-grid\n      [data]=\"assetTagDetails()\"\n      [columns]=\"columns\"\n      [showGridLines]=\"false\"\n      [hideHeader]=\"true\"\n      tableStyleClass=\"info-display !w-auto\"\n    ></app-grid>\n  }\n</div>\n","import { Injectable } from '@angular/core';\nimport { AssetTagResponse } from '../../../api';\nimport { AssetTagDetailsSectionComponent } from '../components/asset-tags/asset-tag-details-section/asset-tag-details-section.component';\nimport { AdminDetailSection } from '../models';\nimport { FeedSectionComponent } from '../components/shared/feed-section/feed-section.component';\n\n@Injectable({ providedIn: 'root' })\nexport class AssetTagSectionConfigFactory {\n  /**\n   * Create sections for assetTag information\n   * @param assetTag The assetTag object to display in the section\n   * @returns An array of AdminDetailSection objects representing the assetTag information sections\n   */\n  createAssetTagInformationSections(\n    assetTag: AssetTagResponse | null,\n  ): AdminDetailSection[] {\n    return [\n      {\n        id: 'assetTag-details',\n        title: 'Asset Tag Details',\n        component: AssetTagDetailsSectionComponent,\n        componentInputs: { entity: assetTag },\n        category: 'information',\n        order: 10,\n      },\n    ];\n  }\n\n  /**\n   * Create sections for assetTag changes\n   * @param assetTag The assetTag object to display in the section\n   * @returns An array of AdminDetailSection objects representing the assetTag changes sections\n   */\n  createChangesSection(\n    assetTag: AssetTagResponse | null,\n  ): AdminDetailSection[] {\n    return [\n      {\n        id: 'asset-tag-changes',\n        title: 'Changes',\n        component: FeedSectionComponent,\n        componentInputs: {\n          entity: assetTag,\n        },\n        category: 'feed',\n        order: 10,\n      },\n    ];\n  }\n\n  /**\n   * Create all assetTag sections in one call\n   * @param assetTag The assetTag object to display in the sections\n   * @returns An array of AdminDetailSection objects representing all assetTag sections\n   */\n  createAllAssetTagSections(\n    assetTag: AssetTagResponse | null,\n  ): AdminDetailSection[] {\n    return [\n      ...this.createAssetTagInformationSections(assetTag),\n      ...this.createChangesSection(assetTag),\n    ];\n  }\n}\n","import {\n  ChangeDetectorRef,\n  Component,\n  computed,\n  effect,\n  inject,\n  input,\n  OnInit,\n  signal,\n  untracked,\n} from '@angular/core';\nimport { takeUntilDestroyed } from '@angular/core/rxjs-interop';\nimport { Validators } from '@angular/forms';\n\nimport { ButtonModule } from 'primeng/button';\nimport { InputTextModule } from 'primeng/inputtext';\n\nimport {\n  DeviceConfigProfileListItem,\n  DeviceConfigProfileCreateRequest,\n  EntitiesService,\n  DeviceConfigProfileResponse,\n  DeviceTypeListItem,\n} from '../../../../../api';\nimport {\n  createDropdownField,\n  createTextField,\n} from '../../../../../shared/models';\nimport { EntitySectionBaseComponent } from '../../base';\nimport { isDefined, isNullOrUndefined } from '../../../../../shared/utils';\nimport { DynamicFormComponent } from '../../../../../shared/components/forms/dynamic-form/dynamic-form.component';\nimport { GridComponent } from '../../../../../shared/components/grid/grid.component';\nimport { CommonModule } from '@angular/common';\nimport { EntityOperationRegistryService } from '../../../services/entity/entity-operation-registry.service';\nimport { Observable } from 'rxjs';\n\ntype DeviceConfigProfileEntity =\n  | DeviceConfigProfileListItem\n  | DeviceConfigProfileCreateRequest;\n\n@Component({\n  selector: 'app-device-config-profile-details-section',\n  imports: [\n    CommonModule,\n    ButtonModule,\n    InputTextModule,\n    GridComponent,\n    DynamicFormComponent,\n  ],\n  templateUrl: './device-config-profile-details-section.component.html',\n  styleUrl: './device-config-profile-details-section.component.scss',\n})\nexport class DeviceConfigProfileDetailsSectionComponent\n  extends EntitySectionBaseComponent<DeviceConfigProfileEntity>\n  implements OnInit\n{\n  readonly ownerId = input<string | null>(null);\n  readonly entitiesService = inject(EntitiesService);\n  private readonly operationRegistry = inject(EntityOperationRegistryService);\n\n  private readonly cdr = inject(ChangeDetectorRef);\n  protected readonly selectOptionsLoaded = signal<boolean>(false);\n\n  readonly deviceConfigProfileDetails = computed(() => {\n    const deviceConfigProfileDetails = this.entity();\n    if (!isDefined(deviceConfigProfileDetails)) return [];\n\n    return [\n      { key: 'Name', value: deviceConfigProfileDetails.name },\n      {\n        key: 'Device Type',\n        value: deviceConfigProfileDetails.deviceType?.name ?? 'None',\n      },\n    ];\n  });\n  selectOptions: Record<\n    string,\n    { label: string; value: string; data: unknown }[]\n  > = {};\n\n  constructor() {\n    super();\n\n    // Setup initial columns\n    this.columns = [\n      { field: 'key', header: '', transform: 'uppercase' },\n      { field: 'value', header: '' },\n    ];\n\n    effect(() => {\n      const selectOptionsLoaded = this.selectOptionsLoaded();\n      if (selectOptionsLoaded) {\n        untracked(() => {\n          this.updateFormFields();\n          this.cdr.detectChanges();\n        });\n      }\n    });\n  }\n\n  ngOnInit(): void {\n    this.loadSelectOptions();\n  }\n\n  private loadSelectOptions(): void {\n    const deviceConfigProfile = this.entity();\n    const ownerIdValue = this.ownerId();\n\n    const effectiveOwnerId = deviceConfigProfile?.owner?.id ?? ownerIdValue;\n\n    if (isNullOrUndefined(effectiveOwnerId)) {\n      this.selectOptions = {};\n      this.selectOptionsLoaded.set(true);\n      this.updateFormFields();\n      return;\n    }\n\n    this.entitiesService\n      .listDeviceTypes(effectiveOwnerId)\n      .pipe(takeUntilDestroyed(this.destroyRef))\n      .subscribe((result) => {\n        this.selectOptions = {\n          deviceTypes: result.items\n            .filter(\n              (deviceType): deviceType is DeviceTypeListItem =>\n                deviceType.state === 'active' &&\n                (!this.createMode() ||\n                  (isDefined(deviceType.parent) &&\n                    deviceType.owner.id === effectiveOwnerId)),\n            )\n\n            .map((item) => ({\n              label: `${item?.parent?.name} - ${item?.name}`,\n              value: item.id,\n              data: item,\n            }))\n            .sort((a, b) => a.label.localeCompare(b.label)),\n        };\n\n        this.selectOptionsLoaded.set(true);\n      });\n  }\n\n  protected override updateFormFields(): void {\n    const deviceConfigProfile = this.entity();\n    this.formFields = [\n      createTextField('name', 'Name', deviceConfigProfile?.name, {\n        name: 'name',\n        validations: [\n          {\n            name: 'required',\n            validator: Validators.required,\n            message: 'Name is required',\n          },\n        ],\n      }),\n\n      createDropdownField(\n        'deviceType',\n        'Device Type',\n        this.selectOptions?.['deviceTypes'],\n        deviceConfigProfile?.deviceType?.id,\n        {\n          name: 'deviceType',\n          validations: [\n            {\n              name: 'required',\n              validator: Validators.required,\n              message: 'Device Type is required',\n            },\n          ],\n          disabled: !this.createMode(),\n          props: {\n            appendTo: 'body',\n          },\n        },\n      ),\n    ];\n  }\n\n  override getUpdateMethod(): (\n    id: string,\n    data: Partial<DeviceConfigProfileEntity>,\n  ) => Observable<DeviceConfigProfileResponse> {\n    return (\n      this.operationRegistry.getOperation<\n        DeviceConfigProfileEntity,\n        DeviceConfigProfileCreateRequest,\n        DeviceConfigProfileResponse,\n        'update'\n      >('device-config-profile', 'update') ??\n      ((id, data) => this.entitiesService.updateDeviceConfigProfile(id, data))\n    );\n  }\n\n  protected override onFormValueChange(\n    formData: Record<string, string | number | object>,\n  ): void {\n    const transformedData = this.transformFormData(formData);\n\n    this.formValueChange.emit(transformedData);\n  }\n\n  protected override transformFormData(\n    formData: Record<string, string | number | object>,\n  ) {\n    const transformedData = { ...formData };\n    if (isDefined(transformedData['deviceType'])) {\n      const tagTypeId = transformedData['deviceType'] as string;\n      const tagType = this.selectOptions?.['deviceTypes']?.find(\n        (option) => option.value === tagTypeId,\n      );\n      if (tagType) {\n        transformedData['deviceType'] = {\n          id: tagTypeId,\n          name: (tagType.data as DeviceTypeListItem)?.name,\n        };\n      }\n    }\n    return transformedData;\n  }\n}\n","<div class=\"card pt-2\">\n  <div class=\"mb-4 p-2 flex justify-start items-center\">\n    <span\n      class=\"pi pi-microchip !text-[2.5rem]\"\n      [ngClass]=\"{ 'icon-primary': isFormEditable() }\"\n      [attr.aria-label]=\"'microchip icon'\"\n    ></span>\n\n    <div class=\"pl-6 flex-1\">\n      <div class=\"flex justify-between items-center\">\n        <h2 class=\"text-xl font-semibold m-0\">Device Config Profile Details</h2>\n        @if (!isFormEditable() && !createMode()) {\n          <div class=\"icon-light\">\n            <span\n              class=\"pi pi-pen-to-square action hover !text-2xl\"\n              [attr.aria-label]=\"'Edit device config profile details'\"\n              (click)=\"onEdit()\"\n              (keydown.enter)=\"onEdit()\"\n            ></span>\n          </div>\n        }\n      </div>\n      <span>Configure your device configuration profile.</span>\n    </div>\n  </div>\n\n  @if (isFormEditable() || (createMode() && formFields.length)) {\n    <app-dynamic-form\n      [fields]=\"formFields\"\n      [actions]=\"actions\"\n      [hideActions]=\"createMode()\"\n      (formSubmit)=\"onSubmit($event)\"\n      (formValidityChange)=\"onFormValidityChange($event)\"\n      (formValueChange)=\"onFormValueChange($event)\"\n    >\n    </app-dynamic-form>\n  }\n\n  @if (!isFormEditable() && !createMode()) {\n    <app-grid\n      [data]=\"deviceConfigProfileDetails()\"\n      [columns]=\"columns\"\n      [showGridLines]=\"false\"\n      [hideHeader]=\"true\"\n      tableStyleClass=\"info-display !w-auto\"\n    ></app-grid>\n  }\n</div>\n","import { CommonModule } from '@angular/common';\nimport {\n  ChangeDetectorRef,\n  Component,\n  computed,\n  effect,\n  inject,\n  input,\n  signal,\n  untracked,\n} from '@angular/core';\n\nimport { ButtonModule } from 'primeng/button';\nimport { InputTextModule } from 'primeng/inputtext';\nimport { Observable } from 'rxjs';\n\nimport {\n  EntitiesService,\n  DeviceTypeResponse,\n  DeviceTypeIOCapabilities,\n  DeviceCreateRequest,\n  DeviceResponse,\n} from '../../../../../api';\nimport { DynamicFormComponent } from '../../../../../shared/components/forms/dynamic-form/dynamic-form.component';\nimport { GridComponent } from '../../../../../shared/components/grid/grid.component';\nimport {\n  createDropdownField,\n  createTextField,\n  FormAction,\n  FormFieldConfig,\n} from '../../../../../shared/models';\nimport { EntityOperationRegistryService } from '../../../services/entity/entity-operation-registry.service';\nimport { EntitySectionBaseComponent } from '../../base';\nimport {\n  isDefined,\n  isEmpty,\n  setNestedProperty,\n} from '../../../../../shared/utils';\nimport { DynamicFormModalComponent } from '../../../../../shared/components/forms/dynamic-form-modal/dynamic-form-modal.component';\nimport { FormGroup } from '@angular/forms';\n\ntype DeviceEntity = DeviceResponse | DeviceCreateRequest;\n\n// Define the type parameters for the mixin\n@Component({\n  selector: 'app-device-parameters-section',\n  imports: [\n    CommonModule,\n    ButtonModule,\n    InputTextModule,\n    GridComponent,\n    DynamicFormComponent,\n    DynamicFormModalComponent,\n  ],\n  templateUrl: './device-parameters-section.component.html',\n  styleUrl: './device-parameters-section.component.scss',\n})\nexport class DeviceParametersSectionComponent extends EntitySectionBaseComponent<DeviceEntity> {\n  readonly ownerId = input<string | null>(null);\n  readonly deviceType = input.required<DeviceTypeResponse | null>();\n  readonly entitiesService = inject(EntitiesService);\n  private readonly operationRegistry = inject(EntityOperationRegistryService);\n  private readonly cdr = inject(ChangeDetectorRef);\n\n  protected readonly customValues = signal<Record<string, string>>({});\n\n  readonly deviceDeviceParameters = computed(() => {\n    const deviceDeviceParameters = this.entity()?.parameters;\n    if (!isDefined(deviceDeviceParameters)) return [];\n\n    return [\n      {\n        key: 'Active Input',\n        value: isEmpty(deviceDeviceParameters.active_input)\n          ? 'None'\n          : deviceDeviceParameters.active_input,\n      },\n      {\n        key: 'Hours Input',\n        value: isEmpty(deviceDeviceParameters.hours_input)\n          ? 'None'\n          : deviceDeviceParameters.hours_input,\n      },\n      {\n        key: 'Idling Input',\n        value: isEmpty(deviceDeviceParameters.idling_input)\n          ? 'None'\n          : deviceDeviceParameters.idling_input,\n      },\n      {\n        key: 'Invert Idling Input',\n        value:\n          (deviceDeviceParameters.idling_input_invert ?? false) ? 'Yes' : 'No',\n      },\n    ];\n  });\n  isCustomInputModalOpen = false;\n  customInputFormFields: FormFieldConfig[] = [];\n  private currentEditField: string | null = null;\n  modalActions: FormAction[] = [\n    {\n      label: 'Cancel',\n      action: () => this.onClose(),\n      severity: 'secondary',\n    },\n    {\n      label: 'Save',\n      action: (formGroup: FormGroup) => {\n        this.onSaveCustomInput(formGroup);\n      },\n      severity: 'primary',\n    },\n  ];\n\n  constructor() {\n    super();\n\n    // Setup initial columns\n    this.columns = [\n      { field: 'key', header: '', transform: 'uppercase' },\n      { field: 'value', header: '' },\n    ];\n\n    effect(() => {\n      const deviceType = this.deviceType();\n\n      if (isDefined(deviceType)) {\n        untracked(() => {\n          this.updateFormFields();\n        });\n      }\n    });\n  }\n\n  private getIOOptions(\n    ioCapabilities: DeviceTypeIOCapabilities | undefined,\n    currentValue?: string | null,\n  ): { label: string; value: string }[] {\n    const options: { label: string; value: string }[] = [];\n\n    // Add digital inputs\n    if (isDefined(ioCapabilities?.digital_input)) {\n      Object.keys(ioCapabilities.digital_input).forEach((key) => {\n        let label = key;\n\n        // Special handling for known inputs\n        if (key === 'ignition') {\n          label = 'Ignition Wire';\n        } else if (key === 'movement') {\n          label = 'Movement Detection';\n        }\n\n        options.push({ label, value: key });\n      });\n    }\n\n    // Add digital outputs\n    if (isDefined(ioCapabilities?.digital_output)) {\n      Object.keys(ioCapabilities.digital_output).forEach((key) => {\n        options.push({ label: key, value: key });\n      });\n    }\n\n    // Sort alphabetically\n    options.sort((a, b) => a.label.localeCompare(b.label));\n\n    // Add current value if it's custom (not in the list and not empty/none/emulate/speed)\n    if (\n      isDefined(currentValue) &&\n      !options.some((o) => o.value === currentValue) &&\n      !['', 'none', 'emulate', 'speed'].includes(currentValue)\n    ) {\n      options.push({ label: currentValue, value: currentValue });\n    }\n\n    // Add custom option\n    options.push({ label: 'Custom...', value: '_custom_' });\n\n    return options;\n  }\n\n  protected override updateFormFields(): void {\n    const device = this.entity();\n    const deviceTypeData = this.deviceType();\n    const parameters = device?.parameters || {};\n\n    // Get IO options with current active_input value if custom\n    const activeInputOptions = this.getIOOptions(\n      deviceTypeData?.ioCapabilities,\n      parameters.active_input,\n    );\n\n    // Get IO options with current hours_input value if custom\n    const hoursInputOptions = this.getIOOptions(\n      deviceTypeData?.ioCapabilities,\n      parameters.hours_input,\n    );\n\n    // Get IO options with current idling_input value if custom\n    const idlingInputOptions = this.getIOOptions(\n      deviceTypeData?.ioCapabilities,\n      parameters.idling_input,\n    );\n    this.formFields = [\n      createDropdownField(\n        'active_input',\n        'Active Input',\n        [\n          { label: 'None', value: '' },\n          { label: 'Emulate', value: 'emulate' },\n          ...activeInputOptions,\n        ],\n        parameters.active_input,\n        {\n          name: 'active_input',\n          props: {\n            appendTo: 'body',\n          },\n          events: {\n            onChange: (event) => {\n              if (event === '_custom_') {\n                this.openCustomInputModal('active_input');\n              }\n            },\n          },\n        },\n      ),\n      createDropdownField(\n        'hours_input',\n        'Hours Input',\n        [\n          { label: 'None', value: '' },\n          { label: 'Emulate', value: 'emulate' },\n          ...hoursInputOptions,\n        ],\n        parameters.hours_input,\n        {\n          name: 'hours_input',\n          props: {\n            appendTo: 'body',\n          },\n          events: {\n            onChange: (event) => {\n              if (event === '_custom_') {\n                this.openCustomInputModal('hours_input');\n              }\n            },\n          },\n        },\n      ),\n      createDropdownField(\n        'idling_input',\n        'Idling Input',\n        [{ label: 'Speed', value: 'speed' }, ...idlingInputOptions],\n        parameters.idling_input,\n        {\n          name: 'idling_input',\n          props: {\n            appendTo: 'body',\n          },\n          events: {\n            onChange: (event) => {\n              if (event === '_custom_') {\n                this.openCustomInputModal('idling_input');\n              }\n            },\n          },\n        },\n      ),\n      createDropdownField(\n        'idling_input_invert',\n        'Invert Idling Input',\n        [\n          { label: 'Yes', value: true },\n          { label: 'No', value: false },\n        ],\n        parameters.idling_input_invert,\n        {\n          name: 'idling_input_invert',\n          props: {\n            appendTo: 'body',\n          },\n        },\n      ),\n    ];\n    this.cdr.detectChanges();\n  }\n\n  override getUpdateMethod(): (\n    id: string,\n    data: Partial<DeviceEntity>,\n  ) => Observable<DeviceResponse> {\n    return (\n      this.operationRegistry.getOperation<\n        DeviceEntity,\n        DeviceCreateRequest,\n        DeviceResponse,\n        'update'\n      >('device', 'update') ??\n      ((id, data) => this.entitiesService.updateDevice(id, data))\n    );\n  }\n\n  openCustomInputModal(fieldName: string): void {\n    this.currentEditField = fieldName;\n\n    // Get current value as default\n    const currentValue = this.entity()?.parameters?.[fieldName] ?? '';\n\n    this.customInputFormFields = [\n      createTextField('custom_input', 'Input', currentValue, {\n        name: 'custom_input',\n      }),\n    ];\n    this.isCustomInputModalOpen = true;\n  }\n\n  onClose() {\n    this.isCustomInputModalOpen = false;\n    this.currentEditField = null;\n  }\n\n  onSaveCustomInput(formGroup: FormGroup): void {\n    const customValue = formGroup.get('custom_input')?.value;\n\n    if (isDefined(customValue) && isDefined(this.currentEditField)) {\n      // Update the entity's parameters directly FIRST\n      const currentEntity = this.entity();\n      if (currentEntity?.parameters) {\n        currentEntity.parameters[this.currentEditField] = customValue;\n      }\n\n      // Store the custom value for later use\n      const customValues = this.customValues();\n      this.customValues.set({\n        ...customValues,\n        [this.currentEditField]: customValue,\n      });\n\n      // Get current form state before any rebuilding\n      const currentFormGroup = this.getFormGroup();\n      const formState: Record<string, string | number | object> = {};\n      const dirtyFields = new Set<string>();\n      const touchedFields = new Set<string>();\n\n      if (currentFormGroup) {\n        Object.keys(currentFormGroup.controls).forEach((key) => {\n          const control = currentFormGroup.get(key);\n          if (control) {\n            formState[key] = control.value;\n            if (control.dirty) dirtyFields.add(key);\n            if (control.touched) touchedFields.add(key);\n          }\n        });\n      }\n\n      // Add the custom field to dirty state\n      formState[this.currentEditField] = customValue;\n      dirtyFields.add(this.currentEditField);\n      touchedFields.add(this.currentEditField);\n\n      // Update form fields with the new entity data\n      this.updateFormFields();\n\n      // Use setTimeout to ensure form rebuilding is complete before restoring state\n      setTimeout(() => {\n        const newFormGroup = this.getFormGroup();\n        if (newFormGroup) {\n          Object.keys(formState).forEach((key) => {\n            const control = newFormGroup.get(key);\n            if (control) {\n              // Set value first\n              control.setValue(formState[key], { emitEvent: false });\n\n              // Then mark as dirty and touched\n              if (dirtyFields.has(key)) {\n                control.markAsDirty();\n              }\n              if (touchedFields.has(key)) {\n                control.markAsTouched();\n              }\n            }\n          });\n\n          // Force validation update\n          newFormGroup.updateValueAndValidity();\n        }\n\n        this.cdr.detectChanges();\n      }, 0);\n\n      // Close the modal\n      this.isCustomInputModalOpen = false;\n      this.currentEditField = null;\n    }\n  }\n\n  override transformFormData(formData: Record<string, string | boolean>) {\n    if (this.injectDataAtPath()) {\n      const result = {};\n      setNestedProperty(result, this.dataPath(), formData);\n      return result;\n    } else {\n      return formData;\n    }\n  }\n}\n","<div class=\"card pt-2\">\n  <div class=\"mb-4 p-2 flex justify-start items-center\">\n    <span\n      class=\"pi pi-wrench !text-[2.5rem]\"\n      [ngClass]=\"{ 'icon-primary': isFormEditable() }\"\n      [attr.aria-label]=\"'wrench icon'\"\n    ></span>\n\n    <div class=\"pl-6 flex-1\">\n      <div class=\"flex justify-between items-center\">\n        <h2 class=\"text-xl font-semibold m-0\">Device Parameters</h2>\n        @if (!isFormEditable() && !createMode()) {\n          <div class=\"icon-light\">\n            <span\n              class=\"pi pi-pen-to-square action hover !text-2xl\"\n              [attr.aria-label]=\"'Edit device parameters details'\"\n              (click)=\"onEdit()\"\n              (keydown.enter)=\"onEdit()\"\n            ></span>\n          </div>\n        }\n      </div>\n      <span>Configure various device parameters below.</span>\n    </div>\n  </div>\n\n  @if (isFormEditable() || (createMode() && formFields.length)) {\n    <app-dynamic-form\n      [fields]=\"formFields\"\n      [actions]=\"actions\"\n      [hideActions]=\"createMode()\"\n      (formSubmit)=\"onSubmit($event)\"\n      (formValidityChange)=\"onFormValidityChange($event)\"\n      (formValueChange)=\"onFormValueChange($event)\"\n    >\n    </app-dynamic-form>\n  }\n\n  @if (!isFormEditable() && !createMode()) {\n    <app-grid\n      [data]=\"deviceDeviceParameters()\"\n      [columns]=\"columns\"\n      [showGridLines]=\"false\"\n      [hideHeader]=\"true\"\n      tableStyleClass=\"info-display !w-auto\"\n    ></app-grid>\n  }\n</div>\n\n@if (isCustomInputModalOpen) {\n  <app-dynamic-form-modal\n    [visible]=\"isCustomInputModalOpen\"\n    header=\"Custom Input\"\n    [fields]=\"customInputFormFields\"\n    [actions]=\"modalActions\"\n    [styleClass]=\"'w-[40rem]'\"\n    (modalClose)=\"onClose()\"\n  >\n    <div formHeader>\n      <p class=\"mt-2 mb-4 muted\">\n        Enter the name of the custom input you'd like to use below.\n      </p>\n    </div>\n  </app-dynamic-form-modal>\n}\n","import { FormGroup, Validators } from '@angular/forms';\nimport {\n  DeviceTypeResponse,\n  DeviceIOParameters,\n  DeviceAnalogConfig,\n  DeviceCameraConfig,\n  DeviceCANConfig,\n  DeviceCounterConfig,\n  DeviceDigitalConfig,\n  DeviceOutputConfig,\n  DeviceTemperatureConfig,\n  DeviceValueConfig,\n  IoTypeListItem,\n} from '../../../api';\nimport { isDefined, isNullOrUndefined } from '../../../shared/utils';\nimport { DeviceEntity } from '../models';\nimport {\n  createDropdownField,\n  createNumberField,\n  createTextField,\n  FormFieldConfig,\n} from '../../../shared/models';\n\n/**\n * Type representing all possible device configuration types\n */\nexport type IODeviceConfig =\n  | DeviceDigitalConfig\n  | DeviceOutputConfig\n  | DeviceAnalogConfig\n  | DeviceTemperatureConfig\n  | DeviceCANConfig\n  | DeviceCounterConfig\n  | DeviceCameraConfig\n  | DeviceValueConfig;\n\n/**\n * Get IO keys from device type and device entity.\n *\n * This function retrieves the IO keys based on the device type and device entity.\n * It considers the IO capabilities defined in the device type and any accessories associated with the device.\n * It also filters the keys based on the specified IO types and whether to include optional keys.\n *\n * @param deviceType - The device type response object.\n * @param device - The device entity object.\n * @param includeOptional - Flag to include optional keys (default: true).\n * @param ioTypes - Array of IO types to filter the keys (default: ['analog_input', 'digital_input', 'digital_output', 'can_input', 'counter_input', 'temperature_input', 'value_input', 'camera_input']).\n *\n * @return An array of unique IO keys sorted in ascending order.\n */\nexport function getIoKeys(\n  deviceType: DeviceTypeResponse | null,\n  device: DeviceEntity | null,\n  includeOptional = true,\n  ioTypes: (keyof DeviceIOParameters)[] = [\n    'analog_input',\n    'digital_input',\n    'digital_output',\n    'can_input',\n    'counter_input',\n    'temperature_input',\n    'value_input',\n    'camera_input',\n  ],\n): string[] {\n  if (!deviceType) {\n    return [];\n  }\n\n  const collectedIos: string[] = [];\n\n  /**\n   * Helper function to process IO capabilities\n   */\n  const processIOCapabilities = (\n    ioProperties: Record<string, { optional?: boolean }>,\n  ) => {\n    const ios = Object.keys(ioProperties);\n    for (const io of ios) {\n      if (includeOptional || !(ioProperties[io].optional ?? false)) {\n        collectedIos.push(io);\n      }\n    }\n  };\n\n  // Process each IO type in the device type's capabilities\n  for (const ioType of ioTypes) {\n    // Add IOs from device type\n    const typeCapabilities = deviceType.ioCapabilities?.[ioType] ?? {};\n    processIOCapabilities(typeCapabilities);\n\n    // Add IOs from accessories\n    if (device?.accessories) {\n      Object.keys(device.accessories).forEach((accessoryId) => {\n        const accessoryCapabilities =\n          deviceType.accessories?.[accessoryId]?.ioCapabilities?.[ioType] ?? {};\n        processIOCapabilities(accessoryCapabilities);\n      });\n    }\n  }\n\n  // Add bitmap targets if they match requested IO types\n  const bitmaps = device?.parameters?.bitmaps || [];\n  const bitmapTargets = bitmaps\n    .filter((bitmap) =>\n      ioTypes.includes(bitmap.target_type as keyof DeviceIOParameters),\n    )\n    .map((bitmap) => bitmap.target_input);\n\n  collectedIos.push(...bitmapTargets);\n\n  // Remove duplicates and sort\n  const result = [...new Set(collectedIos)].sort((a, b) => a.localeCompare(b));\n\n  return result;\n}\n\n/**\n * Get the IO whitelist for a specific device type and device.\n *\n * This function retrieves the IO whitelist for a specific device type and device.\n * It considers the IO capabilities defined in the device type and any accessories associated with the device.\n * It also filters the keys based on the specified IO type and applies any whitelist if present.\n *\n * @param deviceType - The device type response object.\n * @param device - The device entity object.\n * @param ioType - The IO type to filter the keys (e.g., 'analog_input', 'digital_input', etc.).\n * @param currentInputId - Optional: The current input ID to scope custom inputs to\n *\n * @return An array of IO keys that are allowed based on the whitelist and device capabilities.\n *         If no whitelist is present, it returns all default inputs plus custom inputs.\n */\nexport function getDeviceIOWhitelist(\n  deviceType: DeviceTypeResponse,\n  device: DeviceEntity,\n  ioType: keyof DeviceIOParameters,\n  currentInputId?: string,\n): string[] {\n  const allInputs = getIoKeys(deviceType, device, true, [ioType]);\n  const defaultInputs = getIoKeys(deviceType, device, false, [ioType]);\n\n  // Extract custom inputs - only include those relevant to the current input\n  const customInputs: string[] = [];\n  const ioConfig = device?.parameters?.io?.[ioType];\n\n  if (isDefined(ioConfig) && isDefined(currentInputId)) {\n    // Only include custom inputs that are configured for the current input ID\n    const currentInputConfig = ioConfig[currentInputId];\n    if (\n      isDefined(currentInputConfig?.input) &&\n      !allInputs.includes(currentInputConfig.input)\n    ) {\n      customInputs.push(currentInputConfig.input);\n    }\n\n    // Also check for custom calibrations with the pattern custom_*_currentInputId\n    Object.keys(ioConfig).forEach((key) => {\n      if (key.startsWith('custom_') && key.endsWith(`_${currentInputId}`)) {\n        const calibration = ioConfig[key];\n        if (\n          isDefined(calibration?.input) &&\n          !customInputs.includes(calibration.input)\n        ) {\n          customInputs.push(calibration.input);\n        }\n      }\n    });\n  } else if (isDefined(ioConfig) && !isDefined(currentInputId)) {\n    // If no currentInputId is provided, include all custom inputs (backward compatibility)\n    for (const key of Object.keys(ioConfig)) {\n      const inputConfig = ioConfig[key];\n      const inputName = inputConfig?.input;\n\n      if (isDefined(inputName) && !allInputs.includes(inputName)) {\n        customInputs.push(inputName);\n      }\n    }\n  }\n\n  // Apply whitelist if present\n  const whitelist = device?.parameters?.io_whitelist || [];\n\n  if (whitelist.length > 0) {\n    // If whitelist exists, only allow inputs in the whitelist plus custom inputs\n    return [\n      ...allInputs.filter((input) => whitelist.includes(input)),\n      ...customInputs,\n    ];\n  } else {\n    // No whitelist, allow all default inputs plus custom inputs\n    return [...defaultInputs, ...customInputs];\n  }\n}\n\n/**\n * Get default calibration based on IO type\n *\n * This function returns a default calibration object for the specified IO type.\n * The calibration object contains default values for various properties\n * such as input, min/max volts, min/max value, multiplier, and invert.\n *\n * @param ioType - The IO type for which to get the default calibration.\n *                Possible values include 'analog_input', 'can_input', 'counter_input',\n *                'digital_input', 'digital_output', and 'camera_input'.\n *\n * @return A default calibration object for the specified IO type.\n *         The object contains properties such as input, minVolts, maxVolts,\n *         minValue, maxValue, multiplier, and invert.\n */\nexport function getDefaultCalibration(\n  ioType: keyof DeviceIOParameters,\n): IODeviceConfig {\n  switch (ioType) {\n    case 'analog_input':\n      return {\n        input: '',\n        minVolts: 0,\n        maxVolts: 100,\n        minValue: 0,\n        maxValue: 100,\n      };\n    case 'can_input':\n      return { input: '', minValue: 0, maxValue: 100, multiplier: 1 };\n    case 'counter_input':\n      return { input: '', multiplier: 1 };\n    case 'digital_input':\n      return { input: '', invert: false };\n    case 'digital_output':\n      return { input: '', invert: false, pulsed: false };\n    case 'camera_input':\n      return { input: '', enableLiveStream: false };\n    default:\n      return { input: '' };\n  }\n}\n\n/**\n * Add calibration parameters based on IO type\n *\n * This function updates the calibration object with parameters\n * based on the specified IO type and form group values.\n * It sets properties such as min/max volts, min/max value,\n * multiplier, invert, and enableLiveStream based on the IO type.\n *\n * @param calibration - The calibration object to update.\n * @param ioType - The IO type for which to add calibration parameters.\n *               Possible values include 'analog_input', 'can_input',\n *              'counter_input', 'digital_input', 'digital_output',\n *              and 'camera_input'.\n * @param formGroup - The form group containing the values to set in the calibration object.\n *\n * @return void\n */\nexport function addCalibrationParams(\n  calibration: IODeviceConfig,\n  ioType: keyof DeviceIOParameters,\n  formGroup: FormGroup,\n): void {\n  switch (ioType) {\n    case 'analog_input':\n      calibration.minVolts = Number(formGroup.get('minVolts')?.value ?? 0);\n      calibration.maxVolts = Number(formGroup.get('maxVolts')?.value ?? 100);\n      calibration.minValue = Number(formGroup.get('minValue')?.value ?? 0);\n      calibration.maxValue = Number(formGroup.get('maxValue')?.value ?? 100);\n      break;\n\n    case 'can_input':\n      calibration.minValue = Number(formGroup.get('minValue')?.value ?? 0);\n      calibration.maxValue = Number(formGroup.get('maxValue')?.value ?? 100);\n      calibration.multiplier = Number(formGroup.get('multiplier')?.value ?? 1);\n      break;\n\n    case 'counter_input':\n      calibration.multiplier = Number(formGroup.get('multiplier')?.value ?? 1);\n      break;\n\n    case 'digital_input':\n      calibration.invert = Boolean(formGroup.get('invert')?.value ?? false);\n      break;\n\n    case 'digital_output':\n      calibration.invert = Boolean(formGroup.get('invert')?.value ?? false);\n      calibration.pulsed = Boolean(formGroup.get('pulsed')?.value ?? false);\n      break;\n\n    case 'camera_input':\n      calibration.enableLiveStream = Boolean(\n        formGroup.get('enableLiveStream')?.value ?? false,\n      );\n      break;\n  }\n}\n\n/**\n * Get the display name for a given IO type\n *\n * This function retrieves the display name for a given IO type\n * based on a provided mapping object.\n *\n * @param ioType - The IO type for which to get the display name.\n *               It can be a key of DeviceIOParameters or a string.\n * @param ioTypeMap - An object mapping IO types to their display names.\n *\n * @return The display name for the given IO type.\n *        If the IO type is not found in the mapping, it returns the IO type itself.\n */\nexport function getIoTypeDisplayName(\n  ioType: keyof DeviceIOParameters | string,\n  ioTypeMap: { [K in keyof DeviceIOParameters]: string },\n): string {\n  return ioTypeMap[ioType] ?? ioType;\n}\n\n/**\n * Clear IO configuration for a specific input\n *\n * This function clears the IO configuration for a specific input\n * by deleting the input from the IO values object.\n * If there are no more inputs of that type, it removes the entire IO type from the object.\n *\n * @param ioValues - The IO values object containing the configuration.\n * @param ioType - The IO type to clear (e.g., 'analog_input', 'digital_input', etc.).\n * @param inputName - The name of the input to clear.\n *\n * @return The updated IO values object after clearing the specified input.\n *         If the input is not found, it returns the original IO values object.\n *         If the IO type becomes empty, it removes the IO type from the object.\n */\nexport function clearIOConfiguration(\n  ioValues: DeviceIOParameters,\n  ioType: keyof DeviceIOParameters,\n  inputName: string,\n): DeviceIOParameters {\n  if (isDefined(ioValues[ioType]?.[inputName])) {\n    delete ioValues[ioType][inputName];\n\n    // If no more inputs of this type, clean up the object\n    if (Object.keys(ioValues[ioType]).length === 0) {\n      delete ioValues[ioType];\n    }\n  }\n\n  return { ...ioValues };\n}\n\n/**\n * Get custom inputs that have been configured\n *\n * This function retrieves custom inputs that have been configured\n * for a specific IO type.\n * It filters out inputs that are already present in the provided list of all inputs.\n *\n * @param ioValues - The IO values object containing the configuration.\n * @param ioType - The IO type to check for custom inputs (e.g., 'analog_input', 'digital_input', etc.).\n * @param allInputs - An array of all inputs to filter out.\n *\n * @return An array of custom inputs that have been configured\n */\nexport function getCustomInputs(\n  ioValues: DeviceIOParameters,\n  ioType: keyof DeviceIOParameters,\n  allInputs: string[],\n): string[] {\n  const currentConfig: IODeviceConfig = ioValues[ioType] ?? {};\n\n  return Object.values(currentConfig)\n    .map((config) => config.input)\n    .filter(Boolean)\n    .filter((input) => !allInputs.includes(input)) as string[];\n}\n\n/**\n * Update IO values from the device entity\n *\n * This function updates the IO values based on the device entity.\n * If the device entity is null or doesn't have parameters,\n * it returns an empty object.\n *\n * @param device - The device entity object.\n *\n * @return An object containing the IO values from the device entity.\n *         If the device entity is null or doesn't have parameters, it returns an empty object.\n *         The returned object contains the IO parameters from the device entity.\n */\nexport function updateIOValues(\n  device: DeviceEntity | null,\n): DeviceIOParameters {\n  return device?.parameters?.io ? { ...device.parameters.io } : {};\n}\n\nconst commonFields: Record<string, FormFieldConfig> = {\n  input: createTextField('input', 'Input Name', '', {\n    name: 'input',\n    validations: [\n      {\n        name: 'required',\n        validator: Validators.required,\n        message: 'Input name is required',\n      },\n    ],\n  }),\n  minVolts: createNumberField('minVolts', 'Min Volts', 0, {\n    name: 'minVolts',\n    validations: [\n      {\n        name: 'required',\n        validator: Validators.required,\n        message: 'Minimum volts is required',\n      },\n      {\n        name: 'min',\n        validator: Validators.min(-2000000),\n        message: 'Minimum volts must be greater than or equal to -20000000',\n      },\n      {\n        name: 'max',\n        validator: Validators.max(2000000),\n        message: 'Minimum volts must be less than or equal to 20000000',\n      },\n    ],\n    props: { suffix: 'volts' },\n  }),\n  maxVolts: createNumberField('maxVolts', 'Max Volts', 100, {\n    name: 'maxVolts',\n    validations: [\n      {\n        name: 'required',\n        validator: Validators.required,\n        message: 'Maximum volts is required',\n      },\n      {\n        name: 'min',\n        validator: Validators.min(-2000000),\n        message: 'Maximum volts must be greater than or equal to -20000000',\n      },\n      {\n        name: 'max',\n        validator: Validators.max(2000000),\n        message: 'Maximum volts must be less than or equal to 20000000',\n      },\n    ],\n    props: { suffix: 'volts' },\n  }),\n  minValue: createNumberField('minValue', 'Min Value', 0, {\n    name: 'minValue',\n    validations: [\n      {\n        name: 'required',\n        validator: Validators.required,\n        message: 'Minimum value is required',\n      },\n    ],\n  }),\n  maxValue: createNumberField('maxValue', 'Max Value', 100, {\n    name: 'maxValue',\n    validations: [\n      {\n        name: 'required',\n        validator: Validators.required,\n        message: 'Maximum value is required',\n      },\n    ],\n  }),\n  invert: createDropdownField(\n    'invert',\n    'Invert Signal',\n    [\n      { label: 'No', value: false },\n      { label: 'Yes', value: true },\n    ],\n    false,\n    {\n      name: 'invert',\n      props: { appendTo: 'body' },\n    },\n  ),\n  pulsed: createDropdownField(\n    'pulsed',\n    'Pulsed Output',\n    [\n      { label: 'No', value: false },\n      { label: 'Yes', value: true },\n    ],\n    false,\n    {\n      name: 'pulsed',\n      props: { appendTo: 'body' },\n    },\n  ),\n  multiplier: createNumberField('multiplier', 'Multiplier', 1, {\n    name: 'multiplier',\n  }),\n  enableLiveStream: createDropdownField(\n    'enableLiveStream',\n    'Enable Live Stream',\n    [\n      { label: 'No', value: false },\n      { label: 'Yes', value: true },\n    ],\n    false,\n    {\n      name: 'enableLiveStream',\n      props: { appendTo: 'body' },\n    },\n  ),\n};\n\n/**\n * Generate form fields for calibration based on IO type\n *\n * This function generates form fields for calibration based on the specified IO type.\n * It creates text fields, number fields, and dropdown fields as needed.\n *\n * @param ioType - The IO type for which to generate form fields.\n *               Possible values include 'analog_input', 'digital_input', etc.\n * @param calibration - The calibration object containing the initial values for the form fields.\n *\n * @return An array of FormFieldConfig objects representing the generated form fields.\n *         Each object contains properties such as type, label, value, name, validations, and hint.\n *         The generated form fields can be used in a form group for user input.\n *         The function handles different IO types and creates appropriate fields for each.\n */\nexport function generateFormFields(\n  ioType: keyof DeviceIOParameters,\n  calibration: IODeviceConfig,\n  deviceType: DeviceTypeResponse | null,\n  unit?: string,\n): FormFieldConfig[] {\n  const fieldGenerators: Record<\n    keyof DeviceIOParameters,\n    () => FormFieldConfig[]\n  > = {\n    analog_input: () => [\n      { ...commonFields['input'], value: calibration.input },\n      { ...commonFields['minVolts'], value: calibration.minVolts },\n      { ...commonFields['maxVolts'], value: calibration.maxVolts },\n      {\n        ...commonFields['minValue'],\n        value: calibration.minValue,\n        props: { suffix: unit },\n      },\n      {\n        ...commonFields['maxValue'],\n        value: calibration.maxValue,\n        props: { suffix: unit },\n      },\n    ],\n    digital_input: () => [\n      { ...commonFields['input'], value: calibration.input },\n      { ...commonFields['invert'], value: calibration.invert },\n    ],\n    digital_output: () => [\n      { ...commonFields['input'], value: calibration.input },\n      { ...commonFields['invert'], value: calibration.invert },\n      { ...commonFields['pulsed'], value: calibration.pulsed },\n    ],\n    can_input: () => [\n      { ...commonFields['input'], value: calibration.input },\n      {\n        ...commonFields['minValue'],\n        value: calibration.minValue,\n        props: { suffix: unit },\n      },\n      {\n        ...commonFields['maxValue'],\n        value: calibration.maxValue,\n        props: { suffix: unit },\n      },\n      { ...commonFields['multiplier'], value: calibration.multiplier },\n    ],\n    counter_input: () => [\n      { ...commonFields['input'], value: calibration.input },\n      { ...commonFields['multiplier'], value: calibration.multiplier },\n    ],\n    camera_input: () => {\n      const hasLiveStreamCapability =\n        deviceType?.accessories &&\n        Object.values(deviceType.accessories).some(\n          (accessory) =>\n            accessory.features?.['video_live_stream'] &&\n            accessory.ioCapabilities?.camera_input?.[calibration.input],\n        );\n      return (hasLiveStreamCapability ?? false)\n        ? [\n            { ...commonFields['input'], value: calibration.input },\n            {\n              ...commonFields['enableLiveStream'],\n              value: calibration.enableLiveStream,\n            },\n          ]\n        : [{ ...commonFields['input'], value: calibration.input }];\n    },\n    value_input: () => [{ ...commonFields['input'], value: calibration.input }],\n    temperature_input: () => [\n      { ...commonFields['input'], value: calibration.input },\n    ],\n  };\n\n  return fieldGenerators[ioType]?.() ?? [];\n}\n\n/**\n * Format IO summary for display\n *\n * This function formats the IO summary for display purposes.\n * It takes an array of IO types, the IO values, and the current IO type,\n * and returns an array of objects containing the key and value for each IO type.\n *\n * @param ioTypes - An array of IO types to format.\n * @param ioValues - The IO values object containing the configuration.\n * @param currentIoType - The current IO type to format.\n *\n * @return An array of objects containing the key and value for each IO type.\n *        Each object has properties 'key' and 'value' representing the IO type name and its corresponding value.\n *        The function maps over the IO types and retrieves the input value from the IO values object.\n *       If the input value is not found, it defaults to 'None'.\n */\nexport function formatIoSummary(\n  ioTypes: IoTypeListItem[],\n  ioValues: DeviceIOParameters,\n  currentIoType: keyof DeviceIOParameters,\n): { key: string; value: string }[] {\n  return ioTypes.map((ioType) => ({\n    key: ioType.name ?? '',\n    value: ioValues[currentIoType]?.[ioType.id]?.input ?? 'None',\n  }));\n}\n\n/**\n * Calculate changes in IO parameters with deep comparison\n *\n * This function recursively calculates the changes in IO parameters by comparing\n * the current values with the original values. For each changed input, it includes\n * the complete input configuration (both changed and unchanged properties) while\n * omitting inputs that haven't changed.\n *\n * @param currentValues - The current IO parameters.\n * @param originalValues - The original IO parameters to compare against.\n *\n * @return An object containing only the inputs that have changed, with their complete configuration.\n *         If no changes are found, it returns an empty object.\n */\nfunction processInputChanges(\n  currentIoType: Record<string, unknown>,\n  originalIoType: Record<string, unknown>,\n): [Record<string, unknown>, boolean] {\n  const ioTypeChanges: Record<string, unknown> = {};\n  let hasChanges = false;\n\n  // Check each input within this IO type\n  for (const inputId in currentIoType) {\n    const currentInput = currentIoType[inputId];\n    const originalInput = originalIoType[inputId];\n\n    if (\n      isNullOrUndefined(originalInput) ||\n      JSON.stringify(currentInput) !== JSON.stringify(originalInput)\n    ) {\n      ioTypeChanges[inputId] = currentInput;\n      hasChanges = true;\n    }\n  }\n\n  return [ioTypeChanges, hasChanges];\n}\n\nfunction processRemovedInputs(\n  originalIoType: Record<string, unknown>,\n  currentIoType: Record<string, unknown>,\n  ioTypeChanges: Record<string, unknown>,\n): boolean {\n  let hasChanges = false;\n  for (const inputId in originalIoType) {\n    if (!(inputId in currentIoType)) {\n      ioTypeChanges[inputId] = null;\n      hasChanges = true;\n    }\n  }\n  return hasChanges;\n}\n\nexport function calculateIoChanges(\n  currentValues: DeviceIOParameters,\n  originalValues: DeviceIOParameters | null,\n): Partial<DeviceIOParameters> {\n  const changes: Partial<DeviceIOParameters> = {};\n  if (!originalValues) return changes;\n\n  // Process each IO type\n  for (const ioType in currentValues) {\n    const currentIoType = currentValues[ioType];\n    const originalIoType = originalValues[ioType] ?? {};\n\n    const [ioTypeChanges, changesFound] = processInputChanges(\n      currentIoType,\n      originalIoType,\n    );\n    const removedFound = processRemovedInputs(\n      originalIoType,\n      currentIoType,\n      ioTypeChanges,\n    );\n\n    if (changesFound || removedFound) {\n      changes[ioType] = ioTypeChanges;\n    }\n  }\n\n  // Check for removed IO types\n  for (const ioType in originalValues) {\n    if (!(ioType in currentValues)) {\n      changes[ioType] = null;\n    }\n  }\n\n  return changes;\n}\n","import { CommonModule } from '@angular/common';\nimport {\n  Component,\n  computed,\n  effect,\n  inject,\n  input,\n  untracked,\n} from '@angular/core';\n\nimport { ButtonModule } from 'primeng/button';\nimport { Observable } from 'rxjs';\n\nimport {\n  EntitiesService,\n  DeviceTypeResponse,\n  DeviceCreateRequest,\n  DeviceResponse,\n} from '../../../../../api';\nimport { DynamicFormComponent } from '../../../../../shared/components/forms/dynamic-form/dynamic-form.component';\nimport { GridComponent } from '../../../../../shared/components/grid/grid.component';\nimport {\n  createDropdownField,\n  createListboxField,\n} from '../../../../../shared/models';\nimport { EntityOperationRegistryService } from '../../../services/entity/entity-operation-registry.service';\nimport {\n  isDefined,\n  isEmpty,\n  isNullOrUndefined,\n  setNestedProperty,\n} from '../../../../../shared/utils';\nimport { getIoKeys } from '../../../helpers';\nimport { DeviceEntity } from '../../../models';\nimport { EntitySectionBaseComponent } from '../../base';\nimport { FormGroup } from '@angular/forms';\n\n@Component({\n  selector: 'app-device-io-whitelist-section',\n  imports: [CommonModule, ButtonModule, GridComponent, DynamicFormComponent],\n  templateUrl: './device-io-whitelist-section.component.html',\n  styleUrl: './device-io-whitelist-section.component.scss',\n})\nexport class DeviceIoWhitelistSectionComponent extends EntitySectionBaseComponent<DeviceEntity> {\n  readonly ownerId = input<string | null>(null);\n  readonly deviceType = input.required<DeviceTypeResponse | null>();\n  readonly entitiesService = inject(EntitiesService);\n  private readonly operationRegistry = inject(EntityOperationRegistryService);\n\n  readonly ioWhitelistDisplay = computed(() => {\n    const params = this.entity()?.parameters;\n    if (isNullOrUndefined(params?.io_whitelist)) return [];\n\n    const result = [\n      {\n        key: 'Selection',\n        value: isEmpty(params.io_whitelist) ? 'Default' : 'Custom',\n      },\n    ];\n\n    // Only add the Inputs row if there are actually inputs to show\n    if (!isEmpty(params.io_whitelist)) {\n      result.push({\n        key: 'Inputs',\n        value: params.io_whitelist.join(', '),\n      });\n    }\n\n    return result;\n  });\n\n  constructor() {\n    super();\n\n    // Setup initial columns\n    this.columns = [\n      { field: 'key', header: 'Mode', transform: 'uppercase' },\n      { field: 'value', header: 'Configuration' },\n    ];\n\n    effect(() => {\n      const deviceType = this.deviceType();\n      const entity = this.entity();\n      if (isDefined(deviceType) && isDefined(entity)) {\n        untracked(() => {\n          this.updateFormFields();\n        });\n      }\n    });\n  }\n\n  protected override updateFormFields(): void {\n    const device = this.entity();\n    const deviceTypeData = this.deviceType();\n    const parameters = device?.parameters || {};\n\n    // Get all available I/O keys from the device type\n    const allIOKeys = getIoKeys(deviceTypeData, device, true);\n\n    // Check if whitelist exists\n    const hasWhitelist =\n      Array.isArray(parameters.io_whitelist) &&\n      parameters.io_whitelist.length > 0;\n\n    // Set mode based on whitelist existence\n    const currentMode = hasWhitelist ? 'custom' : 'default';\n\n    // Get current whitelist or default inputs if no whitelist\n    const currentWhitelist = hasWhitelist\n      ? parameters.io_whitelist || []\n      : getIoKeys(deviceTypeData, device, false);\n\n    this.formFields = [\n      createDropdownField(\n        'mode',\n        'Selection Mode',\n        [\n          { label: 'Default', value: 'default' },\n          { label: 'Custom', value: 'custom' },\n        ],\n        currentMode,\n        {\n          name: 'mode',\n          props: {\n            appendTo: 'body',\n          },\n          conditional: true,\n          conditions: {\n            default: [], // No additional fields for default mode\n            custom: [\n              createListboxField(\n                'whitelist',\n                'Inputs',\n                currentWhitelist,\n                allIOKeys.map((io) => ({ label: io, value: io })),\n                {\n                  name: 'whitelist',\n                  props: {\n                    appendTo: 'body',\n                    multiple: true,\n                    filter: true,\n                    filterPlaceholder: 'Search I/O',\n                    optionLabel: 'label',\n                    style: { height: '250px' },\n                  },\n                },\n              ),\n            ],\n          },\n        },\n      ),\n    ];\n  }\n\n  override getUpdateMethod(): (\n    id: string,\n    data: Partial<DeviceEntity>,\n  ) => Observable<DeviceResponse> {\n    return (\n      this.operationRegistry.getOperation<\n        DeviceEntity,\n        DeviceCreateRequest,\n        DeviceResponse,\n        'update'\n      >('device', 'update') ??\n      ((id, data) => this.entitiesService.updateDevice(id, data))\n    );\n  }\n\n  protected override onSubmit(formGroup: FormGroup): void {\n    if (isNullOrUndefined(this.entity()) || !formGroup.valid) return;\n\n    this.isSubmitting.set(true);\n\n    const formData: Record<string, string | number | object> = {};\n\n    Object.keys(formGroup.controls).forEach((key) => {\n      const control = formGroup.controls[key];\n\n      formData[key] = control.value;\n    });\n    if (Object.keys(formData).length === 0) {\n      this.isFormEditable.set(false);\n      this.isSubmitting.set(false);\n      return;\n    }\n\n    this.submitChanges(formData);\n  }\n\n  override transformFormData(\n    formData: Record<string, string | boolean>,\n  ): Partial<DeviceEntity> {\n    // Extract mode and whitelist values\n    const mode = formData['mode'];\n    const whitelist = formData['whitelist'] ?? [];\n\n    // Create result object based on mode\n    const result: Partial<DeviceEntity> = {};\n\n    // Set whitelist property based on mode\n    const updatedData = {\n      io_whitelist: mode === 'custom' ? whitelist : null,\n    };\n\n    // Use path-based update if needed\n    if (this.injectDataAtPath()) {\n      setNestedProperty(result, this.dataPath(), updatedData);\n    } else {\n      Object.assign(result, updatedData);\n    }\n\n    return result;\n  }\n}\n","<div class=\"card pt-2\">\n  <div class=\"mb-4 p-2 flex justify-start items-center\">\n    <span\n      class=\"pi pi-list-check !text-[2.5rem]\"\n      [ngClass]=\"{ 'icon-primary': isFormEditable() }\"\n      [attr.aria-label]=\"'list icon'\"\n    ></span>\n\n    <div class=\"pl-6 flex-1\">\n      <div class=\"flex justify-between items-center\">\n        <h2 class=\"text-xl font-semibold m-0\">IO Selection</h2>\n        @if (!isFormEditable() && !createMode()) {\n          <div class=\"icon-light\">\n            <span\n              class=\"pi pi-pen-to-square action hover !text-2xl\"\n              [attr.aria-label]=\"'Edit device parameters details'\"\n              (click)=\"onEdit()\"\n              (keydown.enter)=\"onEdit()\"\n            ></span>\n          </div>\n        }\n      </div>\n      <span\n        >Select which of the various inputs and outputs available on the device\n        you would like to have captured and persisted.</span\n      >\n    </div>\n  </div>\n\n  @if (isFormEditable() || (createMode() && formFields.length)) {\n    <app-dynamic-form\n      [fields]=\"formFields\"\n      [actions]=\"actions\"\n      [hideActions]=\"createMode()\"\n      (formSubmit)=\"onSubmit($event)\"\n      (formValidityChange)=\"onFormValidityChange($event)\"\n      (formValueChange)=\"onFormValueChange($event)\"\n    >\n    </app-dynamic-form>\n  }\n\n  @if (!isFormEditable() && !createMode()) {\n    <app-grid\n      [data]=\"ioWhitelistDisplay()\"\n      [columns]=\"columns\"\n      [showGridLines]=\"false\"\n      [hideHeader]=\"true\"\n      tableStyleClass=\"info-display !w-auto\"\n    ></app-grid>\n  }\n</div>\n","import {\n  AfterViewInit,\n  Component,\n  computed,\n  effect,\n  inject,\n  TemplateRef,\n  untracked,\n  ViewChild,\n} from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { FormGroup, ReactiveFormsModule, Validators } from '@angular/forms';\n\nimport { InputTextModule } from 'primeng/inputtext';\nimport { ButtonModule } from 'primeng/button';\nimport { DataViewModule } from 'primeng/dataview';\nimport { PanelModule } from 'primeng/panel';\nimport { DividerModule } from 'primeng/divider';\n\nimport {\n  DeviceBitmapConfiguration,\n  DeviceCreateRequest,\n  DeviceResponse,\n  EntitiesService,\n} from '../../../../../api';\nimport { UtilityService } from '../../../../../core/services/utility.service';\nimport {\n  createTextField,\n  createDropdownField,\n  FormAction,\n  createNumberField,\n} from '../../../../../shared/models';\nimport {\n  enumToSelectOptionValues,\n  isDefined,\n  isNullOrUndefined,\n} from '../../../../../shared/utils';\nimport { DynamicFormModalComponent } from '../../../../../shared/components/forms/dynamic-form-modal/dynamic-form-modal.component';\nimport { GridComponent } from '../../../../../shared/components/grid/grid.component';\nimport { EntityOperationRegistryService } from '../../../services/entity/entity-operation-registry.service';\nimport { Observable } from 'rxjs';\nimport { DeviceEntity } from '../../../models';\nimport { EntitySectionBaseComponent } from '../../base';\n\n@Component({\n  selector: 'app-device-bitmap-section',\n  imports: [\n    CommonModule,\n    ReactiveFormsModule,\n    ButtonModule,\n    InputTextModule,\n    DynamicFormModalComponent,\n    DataViewModule,\n    PanelModule,\n    DividerModule,\n    GridComponent,\n  ],\n  templateUrl: './device-bitmap-section.component.html',\n  styleUrl: './device-bitmap-section.component.scss',\n})\nexport class DeviceBitmapSectionComponent\n  extends EntitySectionBaseComponent<DeviceEntity>\n  implements AfterViewInit\n{\n  @ViewChild('iconTemplate', { static: true })\n  iconTemplate: TemplateRef<unknown> | undefined;\n  readonly utilityService = inject(UtilityService);\n  private readonly operationRegistry = inject(EntityOperationRegistryService);\n  readonly entitiesService = inject(EntitiesService);\n\n  readonly deviceBitmaps = computed(() => {\n    const deviceBitmaps = this.entity()?.parameters?.bitmaps;\n    if (!isDefined(deviceBitmaps)) return [];\n\n    return [\n      {\n        key: 'Inputs',\n        value:\n          deviceBitmaps?.length > 0\n            ? deviceBitmaps.map((bitmap) => bitmap.target_input).join(', ')\n            : 'None',\n      },\n    ];\n  });\n  override readonly actions: FormAction[] = [\n    {\n      label: 'Cancel',\n      action: () => {\n        this.showModal = false;\n      },\n      severity: 'secondary',\n    },\n    {\n      label: 'Ok',\n      action: (formGroup: FormGroup) => {\n        if (formGroup.valid) {\n          // Convert form values to a bitmap configuration\n          const newBitmap: DeviceBitmapConfiguration = {\n            target_input: formGroup.get('target_input')?.value,\n            target_type: formGroup.get('target_type')?.value,\n            source_input: formGroup.get('source_input')?.value,\n            bitshift: Number(formGroup.get('bitshift')?.value ?? 0),\n            bitmask: parseInt(\n              ((formGroup.get('bitmask')?.value as string) ?? '').startsWith(\n                '0x',\n              )\n                ? formGroup.get('bitmask')?.value.slice(2)\n                : formGroup.get('bitmask')?.value,\n              16,\n            ),\n          };\n\n          // Add to current bitmaps list\n          this.bitmaps = [...this.bitmaps, newBitmap];\n\n          // Close the modal\n          this.showModal = false;\n        }\n      },\n      severity: 'primary',\n      disabled: (form?: FormGroup) => {\n        if (isNullOrUndefined(form)) return true;\n        return form.pristine || form.invalid;\n      },\n    },\n  ];\n  bitmaps: DeviceBitmapConfiguration[] = [];\n  showModal = false;\n  bitmapTypes = [\n    'owner',\n    'emergency',\n    'administrative',\n    'technical',\n    'operational',\n    'management',\n  ];\n\n  constructor() {\n    super();\n\n    // React to entity changes\n    effect(() => {\n      const deviceBitmaps = this.entity()?.parameters?.bitmaps;\n      if (deviceBitmaps) {\n        this.bitmaps = [...deviceBitmaps];\n        untracked(() => {\n          this.updateFormFields();\n        });\n      }\n    });\n  }\n\n  override ngAfterViewInit(): void {\n    super.ngAfterViewInit();\n    this.columns = [\n      {\n        field: 'key',\n        header: '',\n        transform: 'uppercase',\n        cellTemplate: this.iconTemplate,\n      },\n      { field: 'value', header: '' },\n    ];\n  }\n\n  protected override updateFormFields(): void {\n    this.formFields = [\n      createTextField('target_input', 'Target Input', '', {\n        name: 'target_input',\n        validations: [\n          {\n            name: 'required',\n            validator: Validators.required,\n            message: 'Target Input is required',\n          },\n        ],\n      }),\n      createDropdownField(\n        'target_type',\n        'Target Type',\n        enumToSelectOptionValues(DeviceBitmapConfiguration.TargetTypeEnum),\n        '',\n        {\n          name: 'target_type',\n          validations: [\n            {\n              name: 'required',\n              validator: Validators.required,\n              message: 'Target Type is required',\n            },\n          ],\n          props: {\n            appendTo: 'body',\n          },\n        },\n      ),\n      createTextField('source_input', 'Source Input', '', {\n        name: 'source_input',\n        validations: [\n          {\n            name: 'required',\n            validator: Validators.required,\n            message: 'Source Input is required',\n          },\n        ],\n      }),\n      createNumberField('bitshift', 'Bitshift', 0, {\n        name: 'bitshift',\n        validations: [\n          {\n            name: 'required',\n            validator: Validators.required,\n            message: 'Bitshift is required',\n          },\n        ],\n        hint: 'Number of bits the source input value will be shifted to the right',\n      }),\n      createTextField('bitmask', 'Bitmask', '0x1', {\n        name: 'bitmask',\n        validations: [\n          {\n            name: 'required',\n            validator: Validators.required,\n            message: 'Bitmask is required',\n          },\n        ],\n        hint: 'Bitmask to be applied to the value after shifting, in hex format (i.e. 0x01)',\n      }),\n    ];\n  }\n\n  override getUpdateMethod(): (\n    id: string,\n    data: Partial<DeviceEntity>,\n  ) => Observable<DeviceResponse> {\n    return (\n      this.operationRegistry.getOperation<\n        DeviceEntity,\n        DeviceCreateRequest,\n        DeviceResponse,\n        'update'\n      >('device', 'update') ??\n      ((id, data) => this.entitiesService.updateDevice(id, data))\n    );\n  }\n\n  onClose() {\n    this.showModal = false;\n  }\n\n  getBitMapDescription(bitmap: DeviceBitmapConfiguration): string {\n    return `(${bitmap.source_input} >> ${(bitmap.bitshift || 0).toString()}) & 0x${(bitmap.bitmask || 1).toString(16)}`;\n  }\n\n  addBitmap(): void {\n    this.updateFormFields();\n    this.showModal = true;\n  }\n\n  removeBitmap(index: number): void {\n    this.bitmaps = this.bitmaps.filter((_, i) => i !== index);\n  }\n}\n","<div class=\"card pt-2\">\n  <!-- Header Section -->\n  <div class=\"section-header mb-4 p-2 flex justify-start items-center\">\n    <svg\n      class=\"custom-icon-svg w-[2.5rem] h-[2.5rem]\"\n      [ngClass]=\"{ 'icon-primary': isFormEditable() }\"\n      [attr.aria-label]=\"'square binary icon'\"\n    >\n      <use [attr.href]=\"'assets/sprites/sprite.svg#square-binary-solid'\"></use>\n    </svg>\n\n    <div class=\"pl-6 flex-1\">\n      <div class=\"flex justify-between items-center\">\n        <h2 class=\"text-xl font-semibold m-0\">Bitmapped IO</h2>\n        @if (!isFormEditable()) {\n          <div class=\"icon-light\">\n            <span\n              class=\"pi pi-pen-to-square action hover !text-2xl\"\n              [attr.aria-label]=\"'Edit bitmapped IO properties.'\"\n              (click)=\"onEdit()\"\n              (keydown.enter)=\"onEdit()\"\n            ></span>\n          </div>\n        }\n      </div>\n      <span\n        >You can create new inputs from composite values using I/O bitmaps.\n        Configure these below.</span\n      >\n    </div>\n  </div>\n\n  <!-- Edit Mode -->\n  @if (isFormEditable()) {\n    <div class=\"edit-bitmaps p-field p-2\">\n      <div class=\"flex flex-col justify-end w-full\">\n        <!-- No Bitmaps Placeholder -->\n        @if (bitmaps.length === 0) {\n          <div class=\"empty-bitmaps text-center p-4 text-surface-500\">\n            <p>No bitmaps added yet. Click \"Add\" to create a bitmap.</p>\n          </div>\n        } @else {\n          <div class=\"grid grid-cols-5 gap-4 mt-2\">\n            <span class=\"font-semibold mb-2 col-span-2\">Inputs</span>\n            <!-- Bitmaps List -->\n            <div class=\"col-span-3\">\n              @for (bitmap of bitmaps; track $index) {\n                <p-panel styleClass=\"mb-3\" [showHeader]=\"false\">\n                  <div class=\"flex items-center justify-between mt-4\">\n                    <div class=\"flex flex-row gap-2 items-center\">\n                      <svg\n                        class=\"custom-icon-svg w-[1.25rem] h-[1.25rem]\"\n                        [attr.aria-label]=\"'square binary icon'\"\n                      >\n                        <use\n                          [attr.href]=\"\n                            'assets/sprites/sprite.svg#square-binary-solid'\n                          \"\n                        ></use>\n                      </svg>\n                      <div class=\"flex flex-col\">\n                        <span>{{ bitmap.target_input }}</span>\n                        <span class=\"muted\">{{\n                          getBitMapDescription(bitmap)\n                        }}</span>\n                      </div>\n                    </div>\n                    <div class=\"icon-light col-span-1 text-right\">\n                      <span\n                        class=\"pi pi-trash action hover !text-xl\"\n                        [attr.aria-label]=\"'Delete Bitmap'\"\n                        (click)=\"removeBitmap($index)\"\n                        (keydown.enter)=\"removeBitmap($index)\"\n                      ></span>\n                    </div>\n                  </div>\n                </p-panel>\n              }\n            </div>\n          </div>\n        }\n\n        <!-- Add Button -->\n        <div class=\"add-bitmap-button text-right mt-3 mb-4\">\n          <p-button (onClick)=\"addBitmap()\" severity=\"secondary\" label=\"Add\" />\n        </div>\n\n        <!-- Action Buttons -->\n        <div class=\"action-buttons flex justify-end gap-2 mt-4\">\n          <p-button\n            type=\"button\"\n            label=\"Cancel\"\n            severity=\"secondary\"\n            (onClick)=\"isFormEditable.set(false)\"\n          />\n\n          <p-button\n            type=\"submit\"\n            label=\"Save\"\n            severity=\"primary\"\n            (onClick)=\"\n              submitChanges({\n                bitmaps: bitmaps,\n              })\n            \"\n          />\n        </div>\n      </div>\n    </div>\n  }\n  <!-- View Mode -->\n\n  @if (!isFormEditable() && !createMode()) {\n    <app-grid\n      [data]=\"deviceBitmaps()\"\n      [columns]=\"columns\"\n      [showGridLines]=\"false\"\n      [hideHeader]=\"true\"\n      tableStyleClass=\"info-display !w-auto\"\n    ></app-grid>\n  }\n</div>\n\n<!-- Add/Edit Bitmap Modal -->\n<app-dynamic-form-modal\n  [visible]=\"showModal\"\n  header=\"Bitmapped IO Properties\"\n  [fields]=\"formFields\"\n  [actions]=\"actions\"\n  [styleClass]=\"'w-[40rem]'\"\n  (modalClose)=\"onClose()\"\n  (formSubmit)=\"onSubmit($event)\"\n>\n  <div formHeader>\n    <p class=\"mt-2 mb-4 muted\">\n      Specify the details for your new bitmapped input.\n    </p>\n  </div>\n</app-dynamic-form-modal>\n","// Angular imports\nimport {\n  Component,\n  computed,\n  effect,\n  inject,\n  input,\n  signal,\n} from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { FormGroup, FormsModule, ReactiveFormsModule } from '@angular/forms';\n\n// Third-party imports\nimport { InputTextModule } from 'primeng/inputtext';\nimport { ButtonModule } from 'primeng/button';\nimport { PanelModule } from 'primeng/panel';\nimport { SelectChangeEvent, SelectModule } from 'primeng/select';\n\n// Application imports\nimport {\n  DeviceCreateRequest,\n  DeviceIOParameters,\n  DeviceResponse,\n  DeviceTypeResponse,\n  EntitiesService,\n  IoTypeListItem,\n} from '../../../../../api';\nimport { UtilityService } from '../../../../../core/services/utility.service';\nimport { ApiSchemaService } from '../../../../../core/services/api-schema.service';\nimport { FormAction } from '../../../../../shared/models';\nimport { DynamicFormModalComponent } from '../../../../../shared/components/forms/dynamic-form-modal/dynamic-form-modal.component';\nimport { GridComponent } from '../../../../../shared/components/grid/grid.component';\nimport {\n  addCalibrationParams,\n  calculateIoChanges,\n  clearIOConfiguration,\n  formatIoSummary,\n  generateFormFields,\n  getDefaultCalibration,\n  getDeviceIOWhitelist,\n  getIoKeys,\n  getIoTypeDisplayName,\n  IODeviceConfig,\n  updateIOValues,\n} from '../../../helpers';\nimport { DeviceEntity, IO_TYPE_MAP } from '../../../models';\nimport {\n  isDefined,\n  isNullOrUndefined,\n  setNestedProperty,\n} from '../../../../../shared/utils';\nimport { Observable } from 'rxjs';\nimport { EntityOperationRegistryService } from '../../../services/entity/entity-operation-registry.service';\nimport { EntitySectionBaseComponent } from '../../base';\n\n@Component({\n  selector: 'app-device-io-section',\n  imports: [\n    CommonModule,\n    ReactiveFormsModule,\n    ButtonModule,\n    InputTextModule,\n    PanelModule,\n    DynamicFormModalComponent,\n    GridComponent,\n    FormsModule,\n    SelectModule,\n  ],\n  templateUrl: './device-io-section.component.html',\n  styleUrl: './device-io-section.component.scss',\n})\nexport class DeviceIOSectionComponent extends EntitySectionBaseComponent<DeviceEntity> {\n  readonly ioType = input.required<keyof DeviceIOParameters>();\n  readonly deviceType = input.required<DeviceTypeResponse | null>();\n  readonly ioTypes = input.required<IoTypeListItem[]>();\n  readonly iconType = input.required<'svg' | 'primeng'>();\n  readonly iconName = input.required<string>();\n  readonly utilityService = inject(UtilityService);\n  readonly entitiesService = inject(EntitiesService);\n  private readonly operationRegistry = inject(EntityOperationRegistryService);\n  private readonly apiSchemaService = inject(ApiSchemaService);\n\n  // Modal-related signals\n  readonly selectedInputName = signal<string | null>(null);\n  readonly selectedInputId = signal<string>('');\n  readonly selectedInputUnit = signal<string | undefined>(undefined);\n  readonly calibrationData = signal<IODeviceConfig | null>(null);\n  readonly showModal = signal<boolean>(false);\n\n  // Track the original input ID when creating custom calibrations\n  readonly originalInputIdForCustom = signal<string>('');\n\n  // Device-related signals\n  readonly ioValues = signal<DeviceIOParameters>({});\n\n  // IO type mapping\n  readonly ioTypeMap: { [K in keyof DeviceIOParameters]: string } = IO_TYPE_MAP;\n\n  // Modal actions\n  override readonly actions: FormAction[] = [\n    {\n      label: 'Cancel',\n      action: () => {\n        this.showModal.set(false);\n      },\n      severity: 'secondary',\n    },\n    {\n      label: 'Ok',\n      action: (formGroup: FormGroup) => {\n        if (formGroup.valid) {\n          this.applyCalibration(formGroup);\n        }\n      },\n      severity: 'primary',\n      disabled: (form?: FormGroup) => isNullOrUndefined(form),\n    },\n  ];\n\n  // Summary of I/O configuration for view mode\n  readonly ioSummary = computed(() =>\n    formatIoSummary(this.filteredIoTypes(), this.ioValues(), this.ioType()),\n  );\n\n  readonly filteredIoTypes = computed(() => {\n    const currentIoType = this.ioType();\n    return this.ioTypes()\n      .filter((x) => {\n        const typeValue = this.apiSchemaService.getEntityType<\n          Record<string, unknown>,\n          string\n        >(x as Record<string, unknown>, 'iotype');\n        return x.state === 'active' && typeValue === currentIoType;\n      })\n      .sort((a, b) => (a.name ?? '').localeCompare(b.name ?? ''));\n  });\n\n  readonly getDisplayName = (ioType: keyof DeviceIOParameters | string) =>\n    getIoTypeDisplayName(ioType, this.ioTypeMap);\n  private originalIoValues: DeviceIOParameters | null = null;\n\n  constructor() {\n    super();\n\n    this.columns = [\n      { field: 'key', header: 'Mode', transform: 'uppercase' },\n      { field: 'value', header: 'Configuration' },\n    ];\n\n    effect(() => {\n      const device = this.entity();\n      if (device) {\n        this.ioValues.set(JSON.parse(JSON.stringify(updateIOValues(device))));\n      }\n    });\n  }\n\n  override getUpdateMethod(): (\n    id: string,\n    data: Partial<DeviceEntity>,\n  ) => Observable<DeviceResponse> {\n    return (\n      this.operationRegistry.getOperation<\n        DeviceEntity,\n        DeviceCreateRequest,\n        DeviceResponse,\n        'update'\n      >('device', 'update') ??\n      ((id, data) => this.entitiesService.updateDevice(id, data))\n    );\n  }\n\n  override transformFormData(\n    formData: Record<string, string | boolean>,\n  ): Partial<DeviceEntity> {\n    const result = {};\n    if (this.injectDataAtPath()) {\n      setNestedProperty(result, this.dataPath(), formData);\n    } else {\n      Object.assign(result, formData);\n    }\n\n    return result;\n  }\n\n  getSelectedConfigOption(inputId: string): string {\n    const currentIoType = this.ioType();\n\n    if (isNullOrUndefined(currentIoType)) {\n      return 'none';\n    }\n\n    const ioConfig = this.ioValues()[currentIoType]?.[inputId];\n\n    if (isDefined(ioConfig)) {\n      return ioConfig.input ?? inputId;\n    }\n\n    const device = this.entity();\n    const defaultValue =\n      device?.parameters?.['default_inputs']?.[currentIoType]?.[inputId];\n\n    if (isDefined(defaultValue)) {\n      return defaultValue;\n    }\n\n    return 'none';\n  }\n\n  // #region Modal related methods\n  protected override updateFormFields(): void {\n    const calibration = this.calibrationData();\n    const currentIoType = this.ioType();\n    if (!calibration) return;\n\n    this.formFields = generateFormFields(\n      currentIoType,\n      calibration,\n      this.deviceType(),\n      this.selectedInputUnit(),\n    );\n  }\n\n  openCalibrationModal(\n    inputId: string,\n    currentValue: IODeviceConfig | null,\n    typeName: string | null | undefined,\n    unit?: string | null,\n  ): void {\n    const currentIoType = this.ioType();\n\n    if (isNullOrUndefined(currentIoType)) {\n      return;\n    }\n\n    this.selectedInputName.set(typeName ?? '');\n    this.selectedInputId.set(inputId);\n    this.selectedInputUnit.set(unit ?? undefined);\n\n    const isCustomInput = inputId === '_custom_';\n\n    let calibrationData = currentValue;\n    if (isNullOrUndefined(calibrationData)) {\n      calibrationData = getDefaultCalibration(currentIoType);\n    }\n\n    if (isCustomInput) {\n      calibrationData.input = '';\n    } else {\n      calibrationData.input = calibrationData.input ?? inputId;\n    }\n\n    this.calibrationData.set(calibrationData);\n    this.updateFormFields();\n    this.showModal.set(true);\n  }\n\n  applyCalibration(formGroup: FormGroup): void {\n    const currentIoType = this.ioType();\n    const selectedInputId = this.selectedInputId();\n\n    if (isNullOrUndefined(selectedInputId)) return;\n\n    const newInputName = formGroup.get('input')?.value;\n    const isCustomInput = selectedInputId === '_custom_';\n\n    if (isCustomInput) {\n      // For custom inputs, create a unique calibration key based on the name\n      const actualInputId = this.originalInputIdForCustom();\n\n      const newCalibration = {\n        input: newInputName,\n      };\n      addCalibrationParams(newCalibration, currentIoType, formGroup);\n\n      const currentValues = this.ioValues();\n      if (isNullOrUndefined(currentValues[currentIoType])) {\n        currentValues[currentIoType] = {};\n      }\n\n      // Store the custom calibration with the name-based key AND auto-select it for the original input\n      //currentValues[currentIoType][customCalibrationKey] = newCalibration;\n      currentValues[currentIoType][actualInputId] = { ...newCalibration };\n\n      this.ioValues.set({ ...currentValues });\n    } else {\n      // For regular inputs, update normally in ioValues\n      const newCalibration = {\n        input: newInputName,\n      };\n      addCalibrationParams(newCalibration, currentIoType, formGroup);\n\n      const currentValues = this.ioValues();\n      if (isNullOrUndefined(currentValues[currentIoType])) {\n        currentValues[currentIoType] = {};\n      }\n\n      if (isDefined(currentValues[currentIoType][selectedInputId])) {\n        currentValues[currentIoType][selectedInputId] = {\n          ...currentValues[currentIoType][selectedInputId],\n          ...newCalibration,\n        };\n      } else {\n        currentValues[currentIoType][selectedInputId] = newCalibration;\n      }\n\n      this.ioValues.set({ ...currentValues });\n    }\n\n    this.showModal.set(false);\n  }\n  //#endregion\n\n  //#region  State management methods\n  protected override async onEdit(): Promise<void> {\n    await super.onEdit();\n    this.originalIoValues = JSON.parse(JSON.stringify(this.ioValues()));\n  }\n\n  cancelIoEdit(): void {\n    if (this.originalIoValues) {\n      this.ioValues.set({ ...this.originalIoValues }); // Restore the original state\n    }\n    this.clearUnsavedChanges();\n    this.isFormEditable.set(false);\n  }\n\n  private getIoChanges(): Partial<DeviceIOParameters> {\n    return calculateIoChanges(this.ioValues(), this.originalIoValues);\n  }\n\n  saveIOChanges(): void {\n    const changes = this.getIoChanges();\n    this.submitChanges({ parameters: { io: changes } });\n  }\n\n  //#endregion\n\n  //#region IO related methods\n  handleConfigChange(\n    event: SelectChangeEvent,\n    inputId: string,\n    typeName: string | null | undefined,\n    unit?: string | null,\n  ): void {\n    const selectedValue = event.value;\n    const currentIoType = this.ioType();\n\n    if (isNullOrUndefined(currentIoType)) {\n      return;\n    }\n\n    if (selectedValue === 'none') {\n      this.ioValues.set(\n        clearIOConfiguration(this.ioValues(), this.ioType(), inputId),\n      );\n      return;\n    }\n\n    if (selectedValue === '_custom_') {\n      this.originalInputIdForCustom.set(inputId);\n      this.openCalibrationModal('_custom_', null, typeName, unit);\n      return;\n    }\n\n    // Handle standard input selection or custom calibration selection\n    this.handleInputSelection(\n      selectedValue,\n      inputId,\n      typeName,\n      unit,\n      currentIoType as string,\n    );\n  }\n\n  private handleInputSelection(\n    selectedValue: string,\n    inputId: string,\n    typeName: string | null | undefined,\n    unit: string | null | undefined,\n    currentIoType: string,\n  ): void {\n    const currentValues = this.ioValues();\n    const existingCustomConfig = this.findCustomConfigForValue(\n      selectedValue,\n      inputId,\n      currentIoType,\n    );\n    const isCustomCalibration = isDefined(existingCustomConfig);\n\n    let currentConfig = currentValues[currentIoType]?.[inputId];\n\n    if (isNullOrUndefined(currentConfig)) {\n      currentConfig = getDefaultCalibration(currentIoType);\n      currentConfig.input = selectedValue;\n\n      if (isNullOrUndefined(currentValues[currentIoType])) {\n        currentValues[currentIoType] = {};\n      }\n      currentValues[currentIoType][inputId] = currentConfig;\n    } else if (currentConfig.input !== selectedValue) {\n      if (isCustomCalibration && isDefined(existingCustomConfig)) {\n        // Copy the existing custom configuration\n        currentConfig = { ...existingCustomConfig };\n      } else {\n        // For standard inputs, just update the input name\n        currentConfig.input = selectedValue;\n      }\n      currentValues[currentIoType][inputId] = { ...currentConfig };\n    }\n\n    this.ioValues.set({ ...currentValues });\n\n    // Only open calibration modal for standard inputs that need configuration\n    if (!isCustomCalibration && selectedValue !== inputId) {\n      this.openCalibrationModal(inputId, currentConfig, typeName, unit);\n    }\n  }\n\n  private findCustomConfigForValue(\n    selectedValue: string,\n    inputId: string,\n    currentIoType: string,\n  ): IODeviceConfig | null {\n    const currentValues = this.ioValues();\n    const currentTypeValues = currentValues[currentIoType];\n\n    if (!isDefined(currentTypeValues)) {\n      return null;\n    }\n\n    // Look for a custom calibration with this name for this input\n    for (const key of Object.keys(currentTypeValues)) {\n      if (key.startsWith('custom_') && key.endsWith(`_${inputId}`)) {\n        const calibration = currentTypeValues[key];\n        if (calibration?.input === selectedValue) {\n          return calibration;\n        }\n      }\n    }\n\n    return null;\n  }\n\n  getLookupValues(inputId?: string): { label: string; value: string }[] {\n    const deviceType = this.deviceType();\n    const currentIoType = this.ioType();\n    const device = this.entity();\n\n    if (isNullOrUndefined(currentIoType) || !deviceType || !device) {\n      return [{ label: 'None', value: 'none' }];\n    }\n\n    // Get standard inputs from server\n    const inputs = getDeviceIOWhitelist(\n      deviceType,\n      device,\n      currentIoType,\n      inputId,\n    );\n\n    // Get custom calibrations for this specific input by looking at ioValues\n    const inputSpecificCustomInputs: string[] = [];\n    if (isDefined(inputId)) {\n      const ioValues = this.ioValues();\n      const currentTypeValues = ioValues[currentIoType];\n\n      if (isDefined(currentTypeValues)) {\n        Object.keys(currentTypeValues).forEach((key) => {\n          if (key === inputId) {\n            const calibration = currentTypeValues[key];\n            if (\n              isDefined(calibration?.input) &&\n              !inputSpecificCustomInputs.includes(calibration.input)\n            ) {\n              inputSpecificCustomInputs.push(calibration.input);\n            }\n          }\n        });\n      }\n    }\n\n    // Combine all custom inputs (passed in + input-specific)\n    const allCustomInputs = [...inputSpecificCustomInputs];\n\n    return [\n      { label: 'None', value: 'none' },\n      ...inputs\n        .map((key) => ({ label: key, value: key }))\n        .sort((a, b) => a.label.localeCompare(b.label)),\n      ...allCustomInputs\n        .filter((x) => !inputs.includes(x))\n        .map((key) => ({ label: key, value: key })),\n      { label: 'Custom...', value: '_custom_' },\n    ];\n  }\n\n  getIoKeys(deviceType: DeviceTypeResponse | null): string[] {\n    if (!deviceType) return [];\n    const currentIoType = this.ioType();\n    const device = this.entity();\n\n    return getIoKeys(deviceType, device, true, [currentIoType]);\n  }\n  //#endregion\n}\n","<div class=\"card pt-2\">\n  <!-- Header Section -->\n  <div class=\"section-header mb-4 p-2 flex justify-start items-center\">\n    @if (iconType() === 'svg') {\n      <svg\n        class=\"custom-icon-svg w-[2.5rem] h-[2.5rem]\"\n        [ngClass]=\"{ 'icon-primary': isFormEditable() }\"\n        [attr.aria-label]=\"'input/output icon'\"\n      >\n        <use [attr.href]=\"'assets/sprites/sprite.svg#' + iconName()\"></use>\n      </svg>\n    } @else {\n      <i\n        [class]=\"iconName() + ' !text-[2.5rem]'\"\n        [ngClass]=\"{ 'text-primary': isFormEditable() }\"\n        [attr.aria-label]=\"'input/output icon'\"\n      ></i>\n    }\n\n    <div class=\"pl-6 flex-1\">\n      <div class=\"flex justify-between items-center\">\n        <h2 class=\"text-xl font-semibold m-0\">\n          {{ getDisplayName(ioType()) }}\n        </h2>\n        @if (!isFormEditable()) {\n          <div class=\"icon-light\">\n            <span\n              class=\"pi pi-pen-to-square action hover !text-2xl\"\n              [attr.aria-label]=\"'Edit ' + getDisplayName(ioType())\"\n              (click)=\"onEdit()\"\n              (keydown.enter)=\"onEdit()\"\n            ></span>\n          </div>\n        }\n      </div>\n      <span\n        >Configure {{ getDisplayName(ioType()).toLowerCase() }} with calibration\n        settings</span\n      >\n    </div>\n  </div>\n\n  <!-- Edit Mode -->\n  @if (isFormEditable()) {\n    <div class=\"io-config p-field p-2\">\n      <div class=\"flex flex-col justify-end w-full\">\n        <!-- Inputs List -->\n        @for (type of filteredIoTypes(); track type.id) {\n          <div class=\"p-field flex align-items-center gap-2 mb-3\">\n            <span class=\"form-label p-2 flex-shrink-0 w-1/3\">{{\n              type.name\n            }}</span>\n            <div class=\"flex flex-row w-full flex-grow-1\">\n              <p-select\n                [options]=\"getLookupValues(type.id || '')\"\n                [ngModel]=\"getSelectedConfigOption(type.id || '')\"\n                (onChange)=\"\n                  handleConfigChange(\n                    $event,\n                    type.id || '',\n                    type.name,\n                    type.unit\n                  )\n                \"\n                styleClass=\"w-full\"\n                [appendTo]=\"'body'\"\n                placeholder=\"Select configuration\"\n              ></p-select>\n\n              <button\n                type=\"button\"\n                class=\"ml-2 p-2 flex items-center justify-center rounded-md hover:bg-surface-100\"\n                [attr.aria-label]=\"'Configure ' + type.name\"\n                (click)=\"\n                  openCalibrationModal(\n                    type.id,\n                    ioValues()[ioType()]?.[type.id || ''],\n                    type.name,\n                    type.unit\n                  )\n                \"\n                [disabled]=\"!ioValues()[ioType()]?.[type.id || '']\"\n              >\n                <i\n                  class=\"pi pi-cog\"\n                  [ngClass]=\"{\n                    'text-primary': ioValues()[ioType()]?.[type.id || ''],\n                    'text-surface-300': !ioValues()[ioType()]?.[type.id || ''],\n                  }\"\n                ></i>\n              </button>\n            </div>\n          </div>\n        }\n\n        <!-- Action Buttons -->\n        <div class=\"action-buttons flex justify-end gap-2 mt-4\">\n          <p-button\n            type=\"button\"\n            label=\"Cancel\"\n            severity=\"secondary\"\n            (onClick)=\"cancelIoEdit()\"\n          />\n\n          <p-button\n            type=\"submit\"\n            label=\"Save\"\n            severity=\"primary\"\n            [loading]=\"isSubmitting()\"\n            (onClick)=\"saveIOChanges()\"\n          />\n        </div>\n      </div>\n    </div>\n  }\n\n  <!-- View Mode -->\n  @if (!isFormEditable() && !createMode()) {\n    <app-grid\n      [data]=\"ioSummary()\"\n      [columns]=\"columns\"\n      [showGridLines]=\"false\"\n      [hideHeader]=\"true\"\n      tableStyleClass=\"info-display !w-auto\"\n    ></app-grid>\n  }\n</div>\n\n<!-- Calibration Modal -->\n@if (showModal()) {\n  <app-dynamic-form-modal\n    [header]=\"(selectedInputName() || 'Input') + ' calibration'\"\n    [fields]=\"formFields\"\n    [actions]=\"actions\"\n    [styleClass]=\"'w-[40rem]'\"\n    [visible]=\"showModal()\"\n    (modalClose)=\"showModal.set(false)\"\n  >\n    <div formHeader>\n      <p class=\"mt-2 mb-4 text-surface-600\">\n        Configure calibration settings for your IO\n      </p>\n    </div>\n  </app-dynamic-form-modal>\n}\n","import { CommonModule } from '@angular/common';\nimport { Component, computed, inject, input, OnInit } from '@angular/core';\n\nimport { ButtonModule } from 'primeng/button';\nimport { Observable } from 'rxjs';\n\nimport {\n  EntitiesService,\n  DeviceResponse,\n  DeviceCreateRequest,\n  DeviceTypeAccessory,\n} from '../../../../../api';\nimport { DynamicFormComponent } from '../../../../../shared/components/forms/dynamic-form/dynamic-form.component';\nimport { GridComponent } from '../../../../../shared/components/grid/grid.component';\nimport {\n  createDropdownField,\n  createTextField,\n  FormFieldConfig,\n} from '../../../../../shared/models';\nimport { isDefined } from '../../../../../shared/utils';\nimport { DeviceEntity } from '../../../models';\nimport { EntityOperationRegistryService } from '../../../services/entity/entity-operation-registry.service';\nimport { Validators } from '@angular/forms';\nimport { EntitySectionBaseComponent } from '../../base';\n\ntype AccessorySettingValue = string | boolean | number | null | undefined;\nexport interface FormBuilderField {\n  id: string;\n  title: string;\n  type: string;\n  value?: string | number;\n  defaultValue?: string | number;\n  required?: boolean;\n  description?: string;\n  min?: number;\n  max?: number;\n  width?: number;\n  writeonce?: boolean;\n  values?: {\n    key: string;\n    value: string;\n    fields?: FormBuilderField[];\n  }[];\n}\n\n@Component({\n  selector: 'app-device-accessory-section',\n  imports: [CommonModule, ButtonModule, GridComponent, DynamicFormComponent],\n  templateUrl: './device-accessory-section.component.html',\n  styleUrl: './device-accessory-section.component.scss',\n})\nexport class DeviceAccessorySectionComponent\n  extends EntitySectionBaseComponent<DeviceEntity>\n  implements OnInit\n{\n  readonly sectionHeader = input<string>('Device Accessory Configuration');\n  readonly deviceTypeAccessory = input.required<DeviceTypeAccessory>();\n  readonly accessoryId = input.required<string>();\n  readonly ownerId = input<string | null>(null);\n  readonly entitiesService = inject(EntitiesService);\n  private readonly operationRegistry = inject(EntityOperationRegistryService);\n\n  readonly accessoriesDisplay = computed(() => {\n    const accessories = this.entity()?.accessories;\n    const accessory = accessories?.[this.accessoryId()];\n    const subfields = this.parsedSettingsDefinition();\n\n    if (!accessory) {\n      return [{ key: 'Enabled', value: 'No' }];\n    }\n\n    return this.mapSettingsToKeyValuePairs(\n      (accessory.settings as unknown as Record<\n        string,\n        AccessorySettingValue\n      >) ?? {},\n      subfields,\n    );\n  });\n\n  ngOnInit(): void {\n    this.updateFormFields();\n    this.columns = [\n      {\n        field: 'key',\n        header: '',\n        transform: 'uppercase',\n      },\n      { field: 'value', header: '' },\n    ];\n  }\n\n  private mapSettingsToKeyValuePairs(\n    settings: Record<string, AccessorySettingValue>,\n    subfields: FormBuilderField[],\n  ): { key: string; value: string }[] {\n    return Object.entries(settings).map(([key, value]) => {\n      const field = subfields.find((field) => field.id === key);\n      return {\n        key: field?.title ?? key,\n        value: field\n          ? this.formatFieldValue(value, field)\n          : String(value ?? 'N/A'),\n      };\n    });\n  }\n\n  private formatFieldValue(\n    value: AccessorySettingValue,\n    field: FormBuilderField,\n  ): string {\n    if (value === 'true') return 'Yes';\n    if (value === 'false') return 'No';\n    if (field.type === 'combo' && field.values) {\n      return field.values.find((v) => v.key === String(value))?.value ?? 'N/A';\n    }\n    return String(value ?? 'N/A');\n  }\n\n  private readonly parsedSettingsDefinition = computed(\n    (): FormBuilderField[] => {\n      const deviceTypeAccessory = this.deviceTypeAccessory();\n      return isDefined(deviceTypeAccessory?.settingsDefinition)\n        ? (structuredClone(JSON.parse(deviceTypeAccessory.settingsDefinition))\n            ?.fields ?? [])\n        : [];\n    },\n  );\n\n  protected override updateFormFields(): void {\n    const device = this.entity();\n    const deviceTypeAccessory = this.deviceTypeAccessory();\n    const subfields: FormBuilderField[] = isDefined(\n      deviceTypeAccessory?.settingsDefinition,\n    )\n      ? structuredClone(JSON.parse(deviceTypeAccessory.settingsDefinition))\n          ?.fields\n      : [];\n    const customFields: FormFieldConfig[] = subfields.map((field) => {\n      if (field.type === 'combo') {\n        return createDropdownField(\n          field.id,\n          field.title,\n          (field.values ?? []).map((value) => ({\n            label: value.value,\n            value: value.key,\n          })),\n          (device?.accessories?.[this.accessoryId()]?.settings?.[field.id] ??\n            '') as string,\n          {\n            name: field.id,\n            validations:\n              (field.required ?? false)\n                ? [\n                    {\n                      name: 'required',\n                      validator: Validators.required,\n                      message: `${field.title} is required`,\n                    },\n                  ]\n                : [],\n            props: {\n              appendTo: 'body',\n            },\n          },\n        );\n      }\n\n      return createTextField(\n        field.id,\n        field.title,\n        (device?.accessories?.[this.accessoryId()]?.settings?.[field.id] ??\n          '') as string,\n        {\n          name: field.id,\n          validations:\n            (field.required ?? false)\n              ? [\n                  {\n                    name: 'required',\n                    validator: Validators.required,\n                    message: `${field.title} is required`,\n                  },\n                ]\n              : [],\n        },\n      );\n    });\n\n    this.formFields = [\n      createDropdownField(\n        'enabled',\n        'Enabled',\n        [\n          { label: 'Yes', value: true },\n          { label: 'No', value: false },\n        ],\n        true,\n        {\n          name: 'enabled',\n          props: {\n            appendTo: 'body',\n          },\n        },\n      ),\n      ...customFields,\n    ];\n  }\n\n  override getUpdateMethod(): (\n    id: string,\n    data: Partial<DeviceEntity>,\n  ) => Observable<DeviceResponse> {\n    return (\n      this.operationRegistry.getOperation<\n        DeviceEntity,\n        DeviceCreateRequest,\n        DeviceResponse,\n        'update'\n      >('device', 'update') ??\n      ((id, data) => this.entitiesService.updateDevice(id, data))\n    );\n  }\n}\n","<div class=\"card pt-2\">\n  <div class=\"mb-4 p-2 flex justify-start items-center\">\n    <span\n      class=\"pi pi-cog !text-[2.5rem]\"\n      [ngClass]=\"{ 'icon-primary': isFormEditable() }\"\n      [attr.aria-label]=\"'cog icon'\"\n    ></span>\n\n    <div class=\"pl-6 flex-1\">\n      <div class=\"flex justify-between items-center\">\n        <h2 class=\"text-xl font-semibold m-0\">{{ sectionHeader() }}</h2>\n        @if (!isFormEditable() && !createMode()) {\n          <div class=\"icon-light\">\n            <span\n              class=\"pi pi-pen-to-square action hover !text-2xl\"\n              [attr.aria-label]=\"'Edit device accessories details'\"\n              (click)=\"onEdit()\"\n              (keydown.enter)=\"onEdit()\"\n            ></span>\n          </div>\n        }\n      </div>\n      <span>Enable and configure this accessory below.</span>\n    </div>\n  </div>\n\n  @if (isFormEditable() || (createMode() && formFields.length)) {\n    <app-dynamic-form\n      [fields]=\"formFields\"\n      [actions]=\"actions\"\n      [hideActions]=\"createMode()\"\n      (formSubmit)=\"onSubmit($event)\"\n      (formValidityChange)=\"onFormValidityChange($event)\"\n      (formValueChange)=\"onFormValueChange($event)\"\n    >\n    </app-dynamic-form>\n  }\n\n  @if (!isFormEditable() && !createMode()) {\n    <app-grid\n      [data]=\"accessoriesDisplay()\"\n      [columns]=\"columns\"\n      [showGridLines]=\"false\"\n      [hideHeader]=\"true\"\n      tableStyleClass=\"info-display !w-auto\"\n    ></app-grid>\n  }\n</div>\n","import { Injectable } from '@angular/core';\n\nimport {\n  DeviceConfigProfileResponse,\n  DeviceTypeAccessory,\n  DeviceTypeResponse,\n  IoTypeListItem,\n} from '../../../api';\nimport { AdminDetailSection } from '../models';\nimport { DeviceConfigProfileDetailsSectionComponent } from '../components/device-config-profiles/device-config-profile-details-section/device-config-profile-details-section.component';\nimport { DeviceParametersSectionComponent } from '../components/device/device-parameters-section/device-parameters-section.component';\nimport { DeviceIoWhitelistSectionComponent } from '../components/device/device-io-whitelist-section/device-io-whitelist-section.component';\nimport { DeviceBitmapSectionComponent } from '../components/device/device-bitmap-section/device-bitmap-section.component';\nimport { DeviceIOSectionComponent } from '../components/device/device-io-section/device-io-section.component';\nimport { DeviceAccessorySectionComponent } from '../components/device/device-accessory-section/device-accessory-section.component';\n\n@Injectable({ providedIn: 'root' })\nexport class DeviceConfigProfileSectionConfigFactory {\n  /**\n   * Create sections for device config profile information\n   * @param deviceConfigProfile The device config profile object to display in the section\n   * @returns An array of AdminDetailSection objects representing the device config profile information sections\n   */\n  createDeviceConfigProfileInformationSection(\n    deviceConfigProfile: DeviceConfigProfileResponse | null,\n    deviceType: DeviceTypeResponse | null,\n  ): AdminDetailSection[] {\n    return [\n      {\n        id: 'device-config-profile-details',\n        title: 'Device Config Details',\n        component: DeviceConfigProfileDetailsSectionComponent,\n        componentInputs: { entity: deviceConfigProfile },\n        category: 'information',\n        order: 10,\n      },\n      {\n        id: 'device-config-profile-parameters',\n        title: 'Device Config Parameters',\n        component: DeviceParametersSectionComponent,\n        componentInputs: {\n          entity: deviceConfigProfile,\n          entityType: 'device-config-profile',\n          dataPath: 'parameters',\n          injectDataAtPath: true,\n          deviceType,\n        },\n        category: 'information',\n        order: 20,\n      },\n    ];\n  }\n\n  /**\n   * Create sections for device config profile IO\n   * @param deviceConfigProfile The device config profile object to display in the section\n   * @returns An array of AdminDetailSection objects representing the device config profile IO sections\n   */\n  createDeviceConfigProfileIOSection(\n    deviceConfigProfile: DeviceConfigProfileResponse | null,\n    deviceType: DeviceTypeResponse | null,\n    ioTypes: IoTypeListItem[],\n  ): AdminDetailSection[] {\n    return [\n      {\n        id: 'device-config-profile-io-selection',\n        title: 'IO Selection',\n        component: DeviceIoWhitelistSectionComponent,\n        componentInputs: {\n          entity: deviceConfigProfile,\n          entityType: 'device-config-profile',\n          dataPath: 'parameters',\n          injectDataAtPath: true,\n          deviceType,\n        },\n        category: 'io',\n        order: 10,\n      },\n      {\n        id: 'device-config-profile-bitmapped-io',\n        title: 'Bitmapped IO',\n        component: DeviceBitmapSectionComponent,\n        componentInputs: {\n          entity: deviceConfigProfile,\n          entityType: 'device-config-profile',\n          dataPath: 'parameters.io',\n          injectDataAtPath: true,\n        },\n        category: 'io',\n        order: 20,\n      },\n      {\n        id: 'device-config-profile-analog-inputs',\n        title: 'Analog Inputs',\n        component: DeviceIOSectionComponent,\n        componentInputs: {\n          entity: deviceConfigProfile,\n          entityType: 'device-config-profile',\n          dataPath: 'parameters.io',\n          injectDataAtPath: true,\n          ioType: 'analog_input',\n          iconType: 'svg',\n          iconName: 'gauge-simple-high-solid',\n          deviceType,\n          ioTypes,\n        },\n        category: 'io',\n        order: 30,\n      },\n      {\n        id: 'device-config-profile-camera-inputs',\n        title: 'Camera Inputs',\n        component: DeviceIOSectionComponent,\n        componentInputs: {\n          entity: deviceConfigProfile,\n          entityType: 'device-config-profile',\n          dataPath: 'parameters.io',\n          injectDataAtPath: true,\n          ioType: 'camera_input',\n          iconType: 'primeng',\n          iconName: 'pi pi-camera',\n          deviceType,\n          ioTypes,\n        },\n        category: 'io',\n        order: 40,\n      },\n      {\n        id: 'device-config-profile-can-bus-inputs',\n        title: 'CAN Bus Inputs',\n        component: DeviceIOSectionComponent,\n        componentInputs: {\n          entity: deviceConfigProfile,\n          entityType: 'device-config-profile',\n          dataPath: 'parameters.io',\n          injectDataAtPath: true,\n          ioType: 'can_input',\n          iconType: 'svg',\n          iconName: 'oil-can-solid',\n          deviceType,\n          ioTypes,\n        },\n        category: 'io',\n        order: 50,\n      },\n      {\n        id: 'device-config-profile-counter-inputs',\n        title: 'Counter Inputs',\n        component: DeviceIOSectionComponent,\n        componentInputs: {\n          entity: deviceConfigProfile,\n          entityType: 'device-config-profile',\n          dataPath: 'parameters.io',\n          injectDataAtPath: true,\n          ioType: 'counter_input',\n          iconType: 'primeng',\n          iconName: 'pi pi-clock',\n          deviceType,\n          ioTypes,\n        },\n        category: 'io',\n        order: 60,\n      },\n      {\n        id: 'device-config-profile-digital-inputs',\n        title: 'Digital Inputs',\n        component: DeviceIOSectionComponent,\n        componentInputs: {\n          entity: deviceConfigProfile,\n          entityType: 'device-config-profile',\n          dataPath: 'parameters.io',\n          injectDataAtPath: true,\n          ioType: 'digital_input',\n          iconType: 'primeng',\n          iconName: 'pi pi-arrow-left',\n          deviceType,\n          ioTypes,\n        },\n        category: 'io',\n        order: 70,\n      },\n      {\n        id: 'device-config-profile-digital-outputs',\n        title: 'Digital Outputs',\n        component: DeviceIOSectionComponent,\n        componentInputs: {\n          entity: deviceConfigProfile,\n          entityType: 'device-config-profile',\n          dataPath: 'parameters.io',\n          injectDataAtPath: true,\n          ioType: 'digital_output',\n          iconType: 'primeng',\n          iconName: 'pi pi-arrow-right',\n          deviceType,\n          ioTypes,\n        },\n        category: 'io',\n        order: 80,\n      },\n      {\n        id: 'device-config-profile-temperature-inputs',\n        title: 'Temperature Inputs',\n        component: DeviceIOSectionComponent,\n        componentInputs: {\n          entity: deviceConfigProfile,\n          entityType: 'device-config-profile',\n          dataPath: 'parameters.io',\n          injectDataAtPath: true,\n          ioType: 'temperature_input',\n          iconType: 'svg',\n          iconName: 'temperature-half-solid',\n          deviceType,\n          ioTypes,\n        },\n        category: 'io',\n        order: 90,\n      },\n      {\n        id: 'device-config-profile-value-inputs',\n        title: 'Value Inputs',\n        component: DeviceIOSectionComponent,\n        componentInputs: {\n          entity: deviceConfigProfile,\n          entityType: 'device-config-profile',\n          dataPath: 'parameters.io',\n          injectDataAtPath: true,\n          ioType: 'value_input',\n          iconType: 'primeng',\n          iconName: 'pi pi-list-check',\n          deviceType,\n          ioTypes,\n        },\n        category: 'io',\n        order: 100,\n      },\n    ];\n  }\n\n  createDeviceConfigProfileAccessoriesSection(\n    deviceConfigProfile: DeviceConfigProfileResponse | null,\n    deviceTypeAccessories: Record<string, DeviceTypeAccessory> | undefined,\n  ): AdminDetailSection[] {\n    if (!deviceConfigProfile) return [];\n\n    const sections: AdminDetailSection[] = [];\n    Object.entries(deviceConfigProfile?.accessories ?? {}).forEach(([key]) => {\n      sections.push({\n        id: `device-config-profile-accessory-${key}`,\n        title: deviceTypeAccessories?.[key]?.name ?? key,\n        component: DeviceAccessorySectionComponent,\n        componentInputs: {\n          entity: deviceConfigProfile,\n          entityType: 'device-config-profile',\n          dataPath: `accessories.${key}`,\n          injectDataAtPath: true,\n          deviceTypeAccessory: deviceTypeAccessories?.[key],\n          accessoryId: key,\n          sectionHeader: deviceTypeAccessories?.[key]?.name ?? key,\n        },\n        category: 'accessories',\n        order: 10 + Number(key),\n      });\n    });\n\n    return sections;\n  }\n\n  /**\n   * Create all deviceConfigProfile sections in one call\n   * @param deviceConfigProfile The deviceConfigProfile object to display in the sections\n   * @returns An array of AdminDetailSection objects representing all deviceConfigProfile sections\n   */\n  createAllDeviceConfigProfileSections(\n    deviceConfigProfile: DeviceConfigProfileResponse | null,\n    deviceTypeAccessories: Record<string, DeviceTypeAccessory> | undefined,\n    deviceType: DeviceTypeResponse | null,\n    ioTypes: IoTypeListItem[],\n  ): AdminDetailSection[] {\n    return [\n      ...this.createDeviceConfigProfileInformationSection(\n        deviceConfigProfile,\n        deviceType,\n      ),\n      ...this.createDeviceConfigProfileIOSection(\n        deviceConfigProfile,\n        deviceType,\n        ioTypes,\n      ),\n      ...this.createDeviceConfigProfileAccessoriesSection(\n        deviceConfigProfile,\n        deviceTypeAccessories,\n      ),\n    ];\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport {\n  ChangeDetectorRef,\n  Component,\n  computed,\n  effect,\n  inject,\n  input,\n  OnInit,\n  signal,\n  untracked,\n} from '@angular/core';\n\nimport { ButtonModule } from 'primeng/button';\nimport { combineLatest, defer, firstValueFrom, Observable } from 'rxjs';\n\nimport {\n  EntitiesService,\n  DeviceResponse,\n  DeviceCreateRequest,\n  AccountsService,\n  DeviceConfigProfileListItem,\n  ClientResponse,\n} from '../../../../../api';\nimport { DynamicFormComponent } from '../../../../../shared/components/forms/dynamic-form/dynamic-form.component';\nimport { GridComponent } from '../../../../../shared/components/grid/grid.component';\nimport {\n  createDropdownField,\n  createTextField,\n} from '../../../../../shared/models';\nimport {\n  getAllRouteParams,\n  isDefined,\n  isNullOrUndefined,\n} from '../../../../../shared/utils';\nimport { DeviceEntity } from '../../../models';\nimport { EntityOperationRegistryService } from '../../../services/entity/entity-operation-registry.service';\nimport { Validators } from '@angular/forms';\nimport { EntitySectionBaseComponent } from '../../base';\nimport { DEFAULT_SYSTEM_ID } from '../../../../../core/models';\nimport { takeUntilDestroyed } from '@angular/core/rxjs-interop';\nimport { ClientDataService } from '../../../../clients/services/client-data.service';\nimport { RequestCacheService } from '../../../../../shared/services/request-cache.service';\nimport { AdminStateService } from '../../../services/admin-state.service';\nimport { ActivatedRoute } from '@angular/router';\n\n@Component({\n  selector: 'app-device-details-section',\n  imports: [CommonModule, ButtonModule, GridComponent, DynamicFormComponent],\n  templateUrl: './device-details-section.component.html',\n  styleUrl: './device-details-section.component.scss',\n})\nexport class DeviceDetailsSectionComponent\n  extends EntitySectionBaseComponent<DeviceEntity>\n  implements OnInit\n{\n  readonly sectionHeader = input<string>('Device Details');\n\n  readonly ownerId = input<string | null>(null);\n  readonly entitiesService = inject(EntitiesService);\n  private readonly operationRegistry = inject(EntityOperationRegistryService);\n  private readonly clientDataService = inject(ClientDataService);\n  public readonly adminState = inject(AdminStateService);\n  private readonly accountsService = inject(AccountsService);\n  private readonly cdr = inject(ChangeDetectorRef);\n  private readonly requestCache = inject(RequestCacheService);\n  protected readonly selectOptionsLoaded = signal<boolean>(false);\n  private readonly route = inject(ActivatedRoute);\n\n  readonly detailsDisplay = computed(() => {\n    const details: DeviceEntity | null = { ...this.entity() } as DeviceEntity;\n\n    if (isNullOrUndefined(details)) {\n      return [];\n    }\n    if (isNullOrUndefined(details.configProfile)) {\n      details.configProfile = {\n        id: DEFAULT_SYSTEM_ID,\n        name: 'Manually Configured',\n      };\n    }\n\n    return [\n      {\n        key: 'Serial Number',\n        value: details.name ?? 'None',\n      },\n      {\n        key: 'Device Type',\n        value: details.deviceType?.name ?? 'None',\n      },\n      {\n        key: 'Configuration',\n        value: details.configProfile?.name ?? 'None',\n      },\n    ];\n  });\n  selectOptions: Record<\n    string,\n    { label: string; value: string; data?: unknown }[]\n  > = {};\n\n  constructor() {\n    super();\n\n    // Setup initial columns\n    this.columns = [\n      { field: 'key', header: '', transform: 'uppercase' },\n      { field: 'value', header: '' },\n    ];\n\n    effect(() => {\n      const selectOptionsLoaded = this.selectOptionsLoaded();\n      if (selectOptionsLoaded) {\n        untracked(() => {\n          this.updateFormFields();\n          this.cdr.detectChanges(); // Ensure change detection runs after updating form fields\n        });\n      }\n    });\n  }\n\n  ngOnInit(): void {\n    this.loadSelectOptions();\n  }\n\n  private loadSelectOptions(): void {\n    const device = this.entity();\n    const ownerIdValue = this.ownerId();\n\n    const effectiveOwnerId = device?.owner?.id ?? ownerIdValue;\n\n    if (isNullOrUndefined(effectiveOwnerId)) {\n      this.selectOptions = {\n        deviceTypes: [],\n        deviceProviders: [],\n        deviceConfigProfiles: [],\n      };\n      this.selectOptionsLoaded.set(true);\n      this.updateFormFields();\n      return;\n    }\n\n    const cacheTTL = 300000; // 5 minutes\n\n    combineLatest([\n      this.requestCache.getOrFetch(\n        `device-types-${effectiveOwnerId}`,\n        () => this.entitiesService.listDeviceTypes(effectiveOwnerId),\n        cacheTTL,\n      ),\n      this.requestCache.getOrFetch(\n        `device-providers-${effectiveOwnerId}-true`,\n        () => this.entitiesService.listDeviceProviders(effectiveOwnerId, true),\n        cacheTTL,\n      ),\n      this.requestCache.getOrFetch(\n        `device-config-profiles-${effectiveOwnerId}-true`,\n        () =>\n          this.entitiesService.listDeviceConfigProfiles(effectiveOwnerId, true),\n        cacheTTL,\n      ),\n      defer(() =>\n        this.getAvailableRootDeviceTypeIdsForClient().catch(\n          () => [] as string[],\n        ),\n      ),\n    ])\n      .pipe(takeUntilDestroyed(this.destroyRef))\n      .subscribe(\n        ([\n          deviceTypes,\n          deviceProviders,\n          deviceConfigProfiles,\n          availableDeviceTypeIds,\n        ]) => {\n          const filteredDeviceTypes = deviceTypes.items.filter(\n            (deviceType) =>\n              deviceType.state === 'active' &&\n              isDefined(deviceType.parent) &&\n              (deviceType.owner.id === effectiveOwnerId ||\n                availableDeviceTypeIds.length === 0 ||\n                availableDeviceTypeIds.includes(deviceType.parent.id)),\n          );\n\n          this.selectOptions = {\n            deviceTypes: filteredDeviceTypes\n              .map((item) => ({\n                label: `${item?.parent?.name} - ${item?.name}`,\n                value: item.id,\n                data: item,\n              }))\n              .sort((a, b) => a.label.localeCompare(b.label)),\n            deviceProviders: deviceProviders.items.map((item) => ({\n              label: item.name ?? '',\n              value: item.id,\n            })),\n            deviceConfigProfiles: deviceConfigProfiles.items.map((item) => ({\n              label: item.name ?? '',\n              value: item.id,\n              data: item,\n            })),\n          };\n\n          this.selectOptionsLoaded.set(true);\n        },\n      );\n  }\n\n  private getConfigProfiles(deviceTypeId: string | null | undefined) {\n    const device = this.entity();\n    return [\n      {\n        label: 'Manually Configured',\n        value: DEFAULT_SYSTEM_ID,\n      },\n      ...(this.selectOptions['deviceConfigProfiles'] ?? [])\n        .filter((x) => {\n          const profile = x.data as DeviceConfigProfileListItem;\n          return (\n            (profile.state === 'active' ||\n              profile.id === device?.configProfile?.id) &&\n            profile?.deviceType?.id === deviceTypeId\n          );\n        })\n        .map((x) => {\n          const profile = x.data as DeviceConfigProfileListItem;\n          return {\n            label: profile.name ?? '',\n            value: profile.id,\n          };\n        }),\n    ];\n  }\n\n  protected override updateFormFields(): void {\n    const device = this.entity();\n\n    this.formFields = [\n      createTextField('name', 'Serial Number', device?.name ?? '', {\n        name: 'name',\n        validations: [\n          {\n            name: 'required',\n            validator: Validators.required,\n            message: 'Serial Number is required',\n          },\n          {\n            name: 'pattern',\n            validator: Validators.pattern(/^[a-zA-Z0-9]+$/),\n            message: 'Serial Number must be alphanumeric',\n          },\n        ],\n      }),\n      createDropdownField(\n        'deviceType',\n        'Device Type',\n        this.selectOptions['deviceTypes'] ?? [],\n        device?.deviceType?.id ?? '',\n        {\n          name: 'deviceType',\n          validations: [\n            {\n              name: 'required',\n              validator: Validators.required,\n              message: 'Device Type is required',\n            },\n          ],\n          props: {\n            appendTo: 'body',\n          },\n          events: {\n            onChange: (value) => {\n              const configProfileField = this.formFields.find(\n                (field) => field.key === 'configProfile',\n              );\n              if (configProfileField) {\n                configProfileField.options = this.getConfigProfiles(value);\n                this.form?.patchValue({ configProfile: DEFAULT_SYSTEM_ID });\n              }\n            },\n          },\n        },\n      ),\n      createDropdownField(\n        'configProfile',\n        'Configuration Profile',\n        this.getConfigProfiles(device?.deviceType?.id),\n        device?.configProfile?.id ?? DEFAULT_SYSTEM_ID,\n        {\n          name: 'configProfile',\n          props: {\n            appendTo: 'body',\n          },\n        },\n      ),\n    ];\n\n    if (\n      this.createMode() &&\n      this.selectOptions['deviceProviders']?.length > 0\n    ) {\n      this.formFields.push(\n        createDropdownField(\n          'provider',\n          'Device Provider',\n          this.selectOptions['deviceProviders'] ?? [],\n          device?.provider?.id ?? '',\n          {\n            name: 'provider',\n            validations: [\n              {\n                name: 'required',\n                validator: Validators.required,\n                message: 'Device Provider is required',\n              },\n            ],\n            props: {\n              appendTo: 'body',\n            },\n          },\n        ),\n      );\n    }\n  }\n\n  override getUpdateMethod(): (\n    id: string,\n    data: Partial<DeviceEntity>,\n  ) => Observable<DeviceResponse> {\n    return (\n      this.operationRegistry.getOperation<\n        DeviceEntity,\n        DeviceCreateRequest,\n        DeviceResponse,\n        'update'\n      >('device', 'update') ??\n      ((id, data) => this.entitiesService.updateDevice(id, data))\n    );\n  }\n\n  async getAvailableRootDeviceTypeIdsForClient() {\n    // Get all route params including parent routes\n    const routeParams = getAllRouteParams(this.route.snapshot);\n    const clientId = routeParams['clientId'];\n\n    if (isNullOrUndefined(clientId)) {\n      // Fallback to adminState if no route param\n      const client = this.adminState.selectedClient();\n      if (isNullOrUndefined(client?.id)) return [];\n      return this.getAvailableDeviceTypesForClient(client.id);\n    }\n\n    return this.getAvailableDeviceTypesForClient(clientId);\n  }\n\n  private async getAvailableDeviceTypesForClient(\n    clientId: string,\n  ): Promise<string[]> {\n    try {\n      // Try to get from adminState first (cheap operation)\n      const adminClient = this.adminState.selectedClient();\n      if (\n        adminClient?.id === clientId &&\n        isDefined(adminClient.availableDeviceTypes)\n      ) {\n        return this.extractAvailableDeviceTypeIds(adminClient);\n      }\n\n      // Cache and fetch full client details if not in adminState\n      const client = await this.requestCache.getOrFetchAsync(\n        `client-${clientId}`,\n        () => firstValueFrom(this.accountsService.getClient(clientId)),\n        300000, // 5 minutes cache\n      );\n\n      return this.extractAvailableDeviceTypeIds(client);\n    } catch (error) {\n      console.error('Error fetching client device types:', error);\n      return [];\n    }\n  }\n\n  private async extractAvailableDeviceTypeIds(\n    client: ClientResponse,\n  ): Promise<string[]> {\n    let available = (client.availableDeviceTypes || []).map((x) => x.id);\n\n    // Fallback to vendor's available device types if client has none\n    if (available.length === 0 && isDefined(client.owner?.id)) {\n      const ownerId = client.owner.id;\n      const vendor = await this.requestCache.getOrFetchAsync(\n        `vendor-${ownerId}`,\n        () => firstValueFrom(this.accountsService.getVendor(ownerId)),\n        300000, // 5 minutes cache\n      );\n      available = (vendor.availableDeviceTypes ?? []).map((x) => x.id);\n    }\n\n    return available;\n  }\n\n  protected override onFormValueChange(\n    formData: Record<string, string | number | object>,\n  ): void {\n    const transformedData = this.transformFormData(formData);\n\n    // Emit the transformed values\n    this.formValueChange.emit(transformedData);\n  }\n\n  protected override transformFormData(\n    formData: Record<string, string | number | object>,\n  ): Record<string, string | number | object> {\n    const transformedData = { ...formData };\n\n    // Transform deviceType ID to IdName object\n    if (\n      isDefined(transformedData['deviceType']) &&\n      typeof transformedData['deviceType'] === 'string'\n    ) {\n      const deviceTypeOption = this.selectOptions?.['deviceTypes']?.find(\n        (option) => option.value === transformedData['deviceType'],\n      );\n\n      if (deviceTypeOption) {\n        transformedData['deviceType'] = {\n          id: deviceTypeOption.value,\n          name: deviceTypeOption.label,\n        };\n      }\n    }\n\n    // Transform configProfile ID to IdName object\n    if (\n      isDefined(transformedData['configProfile']) &&\n      typeof transformedData['configProfile'] === 'string'\n    ) {\n      const configProfileOption = this.selectOptions?.['deviceConfigProfiles']\n        ?.concat({\n          label: 'Manually Configured',\n          value: DEFAULT_SYSTEM_ID,\n        })\n        ?.find((option) => option.value === transformedData['configProfile']);\n\n      if (configProfileOption) {\n        transformedData['configProfile'] = {\n          id: configProfileOption.value,\n          name: configProfileOption.label,\n        };\n      }\n    }\n\n    // Transform provider ID to IdName object\n    if (\n      isDefined(transformedData['provider']) &&\n      typeof transformedData['provider'] === 'string'\n    ) {\n      const providerOption = this.selectOptions?.['deviceProviders']?.find(\n        (option) => option.value === transformedData['provider'],\n      );\n\n      if (providerOption) {\n        transformedData['provider'] = {\n          id: providerOption.value,\n          name: providerOption.label,\n        };\n      }\n    }\n\n    return transformedData;\n  }\n}\n","<div class=\"card pt-2\">\n  <div class=\"mb-4 p-2 flex justify-start items-center\">\n    <span\n      class=\"pi pi-microchip !text-[2.5rem]\"\n      [ngClass]=\"{ 'icon-primary': isFormEditable() }\"\n      [attr.aria-label]=\"'microchip icon'\"\n    ></span>\n\n    <div class=\"pl-6 flex-1\">\n      <div class=\"flex justify-between items-center\">\n        <h2 class=\"text-xl font-semibold m-0\">{{ sectionHeader() }}</h2>\n        @if (!isFormEditable() && !createMode()) {\n          <div class=\"icon-light\">\n            <span\n              class=\"pi pi-pen-to-square action hover !text-2xl\"\n              [attr.aria-label]=\"'Edit device details'\"\n              (click)=\"onEdit()\"\n              (keydown.enter)=\"onEdit()\"\n            ></span>\n          </div>\n        }\n      </div>\n      <span>Configure various details about your device.</span>\n    </div>\n  </div>\n\n  @if (isFormEditable() || (createMode() && formFields.length)) {\n    <app-dynamic-form\n      [fields]=\"formFields\"\n      [actions]=\"actions\"\n      [hideActions]=\"createMode()\"\n      (formSubmit)=\"onSubmit($event)\"\n      (formValidityChange)=\"onFormValidityChange($event)\"\n      (formValueChange)=\"onFormValueChange($event)\"\n    >\n    </app-dynamic-form>\n  }\n\n  @if (!isFormEditable() && !createMode()) {\n    <app-grid\n      [data]=\"detailsDisplay()\"\n      [columns]=\"columns\"\n      [showGridLines]=\"false\"\n      [hideHeader]=\"true\"\n      tableStyleClass=\"info-display !w-auto\"\n    ></app-grid>\n  }\n</div>\n","import {\n  Component,\n  computed,\n  effect,\n  inject,\n  input,\n  OnInit,\n  signal,\n  WritableSignal,\n} from '@angular/core';\nimport { takeUntilDestroyed } from '@angular/core/rxjs-interop';\n\nimport { ButtonModule } from 'primeng/button';\nimport { InputTextModule } from 'primeng/inputtext';\n\nimport {\n  EntitiesService,\n  DeviceListItem,\n  DeviceResponse,\n  DeviceCreateRequest,\n  SimCardListItem,\n  AssetListItem,\n  IdName,\n} from '../../../../../api';\nimport { createAutocompleteField } from '../../../../../shared/models';\nimport { EntitySectionBaseComponent } from '../../base';\nimport { isDefined, isNullOrUndefined } from '../../../../../shared/utils';\nimport { DynamicFormComponent } from '../../../../../shared/components/forms/dynamic-form/dynamic-form.component';\nimport { GridComponent } from '../../../../../shared/components/grid/grid.component';\nimport { CommonModule } from '@angular/common';\nimport { EntityOperationRegistryService } from '../../../services/entity/entity-operation-registry.service';\nimport { BehaviorSubject, debounceTime, Observable, of, switchMap } from 'rxjs';\nimport { UtilityService } from '../../../../../core/services/utility.service';\nimport { MessageModule } from 'primeng/message';\n\n@Component({\n  selector: 'app-device-linked-section',\n  imports: [\n    CommonModule,\n    ButtonModule,\n    InputTextModule,\n    GridComponent,\n    DynamicFormComponent,\n    MessageModule,\n  ],\n  templateUrl: './device-linked-section.component.html',\n  styleUrl: './device-linked-section.component.scss',\n})\nexport class DeviceLinkedSectionComponent\n  extends EntitySectionBaseComponent<DeviceListItem | DeviceResponse>\n  implements OnInit\n{\n  readonly ownerId = input<string | null>(null);\n  readonly entitiesService = inject(EntitiesService);\n  private readonly operationRegistry = inject(EntityOperationRegistryService);\n  private readonly utilityService = inject(UtilityService);\n\n  readonly deviceLinkedDetails = computed(() => {\n    const deviceDetails = this.entity();\n    if (!isDefined(deviceDetails)) return [];\n\n    return [\n      { key: 'Sim Card', value: deviceDetails.simcard?.name ?? 'None' },\n      {\n        key: 'Asset',\n        value: deviceDetails.asset?.name ?? 'None',\n      },\n    ];\n  });\n  private readonly searchSIMCardsSubject = new BehaviorSubject<string | null>(\n    null,\n  );\n  private readonly searchAssetsSubject = new BehaviorSubject<string | null>(\n    null,\n  );\n  simCardSuggestions = signal<Partial<SimCardListItem>[]>([]);\n  assetSuggestions = signal<Partial<AssetListItem>[]>([]);\n  protected readonly warning = signal<string | null>(null);\n\n  constructor() {\n    super();\n\n    this.columns = [\n      { field: 'key', header: '', transform: 'uppercase' },\n      { field: 'value', header: '' },\n    ];\n\n    effect(() => {\n      const deviceDetails = this.entity();\n      if (!isDefined(deviceDetails)) return;\n\n      if (deviceDetails.asset) {\n        this.checkAssetDevices(deviceDetails);\n      }\n    });\n  }\n\n  ngOnInit(): void {\n    this.setupSearch(\n      this.searchSIMCardsSubject,\n      this.simCardSuggestions,\n      this.entitiesService.listSimCards.bind(this.entitiesService),\n      { state: 'active' },\n    );\n    this.setupSearch(\n      this.searchAssetsSubject,\n      this.assetSuggestions,\n      this.entitiesService.listAssets.bind(this.entitiesService),\n      { state: 'active' },\n    );\n  }\n\n  private checkAssetDevices(\n    deviceDetails: DeviceListItem | DeviceResponse | undefined,\n  ) {\n    if (deviceDetails?.asset) {\n      this.entitiesService\n        .getAsset(deviceDetails.asset.id)\n        .subscribe((asset) => {\n          if (asset.devices && asset.devices.length > 1) {\n            this.warning.set(`Multiple Devices assigned to linked Asset`);\n          } else {\n            this.warning.set(null);\n          }\n        });\n    } else {\n      this.warning.set(null);\n    }\n  }\n\n  private setupSearch<T>(\n    subject: BehaviorSubject<string | null>,\n    suggestionSignal: WritableSignal<Partial<T>[]>,\n    listMethod: (\n      ownerId: string,\n      offset: number,\n      limit: number,\n      orderBy: string,\n      filter: string,\n    ) => Observable<{ items: T[] }>,\n    filters: Record<string, unknown>,\n  ) {\n    subject\n      .pipe(\n        debounceTime(300),\n        takeUntilDestroyed(this.destroyRef),\n        switchMap((searchTerm) => {\n          if (isNullOrUndefined(searchTerm)) {\n            return of({ items: [] });\n          }\n          const rqlFilter = this.utilityService.constructRqlFilter({\n            ...filters,\n            name: { value: `*${searchTerm}*`, operator: '=' },\n          });\n          return listMethod(\n            this.entity()?.owner.id ?? '',\n            0,\n            10,\n            'name',\n            rqlFilter,\n          );\n        }),\n      )\n      .subscribe((response) => {\n        suggestionSignal.set(response.items);\n      });\n  }\n\n  private searchSIMCards(searchTerm: string) {\n    const trimmedSearchTerm = searchTerm?.trim() ?? '';\n\n    // Skip if null/empty or same as current search term\n    if (\n      isNullOrUndefined(searchTerm) ||\n      trimmedSearchTerm === this.searchSIMCardsSubject.getValue()\n    ) {\n      return this.simCardSuggestions.set([...this.simCardSuggestions()]);\n    }\n\n    this.searchSIMCardsSubject.next(trimmedSearchTerm);\n  }\n\n  private searchAssets(searchTerm: string) {\n    const trimmedSearchTerm = searchTerm?.trim() ?? '';\n\n    if (\n      isNullOrUndefined(searchTerm) ||\n      trimmedSearchTerm === this.searchAssetsSubject.getValue()\n    ) {\n      return this.assetSuggestions.set([...this.assetSuggestions()]);\n    }\n\n    this.searchAssetsSubject.next(trimmedSearchTerm);\n  }\n\n  protected override updateFormFields(): void {\n    const device = this.entity();\n    if (device?.simcard) {\n      this.simCardSuggestions.set([\n        { id: device.simcard.id, name: device.simcard.name as string },\n      ]);\n    }\n    if (device?.asset) {\n      this.assetSuggestions.set([\n        { id: device.asset.id, name: device.asset.name as string },\n      ]);\n    }\n    this.formFields = [\n      createAutocompleteField(\n        'simcard',\n        'SIM Card',\n        device?.simcard?.name,\n        () => this.simCardSuggestions(),\n        this.searchSIMCards.bind(this),\n        {\n          layout: 'horizontal',\n          labelWidth: '1/3',\n          name: 'simcard',\n          props: {\n            appendTo: 'body',\n            showClear: true,\n            multiple: false,\n            field: 'name',\n            completeOnFocus: false,\n            typeahead: true,\n            showEmptyMessage: true,\n          },\n        },\n      ),\n      createAutocompleteField(\n        'asset',\n        'Asset',\n        device?.asset?.name,\n        () => this.assetSuggestions(),\n        this.searchAssets.bind(this),\n        {\n          layout: 'horizontal',\n          labelWidth: '1/3',\n          name: 'asset',\n          props: {\n            appendTo: 'body',\n            showClear: true,\n            multiple: false,\n            field: 'name',\n            completeOnFocus: false,\n            typeahead: true,\n            showEmptyMessage: true,\n          },\n        },\n      ),\n    ];\n  }\n\n  override getUpdateMethod(): (\n    id: string,\n    data: Partial<DeviceListItem | DeviceResponse>,\n  ) => Observable<DeviceResponse> {\n    return (\n      this.operationRegistry.getOperation<\n        DeviceListItem | DeviceResponse,\n        DeviceCreateRequest,\n        DeviceResponse,\n        'update'\n      >('device-config-profile', 'update') ??\n      ((id, data) => this.entitiesService.updateDevice(id, data))\n    );\n  }\n\n  protected override transformFormData(\n    formData: Record<string, string | number | object>,\n  ): Record<string, string | number | object> {\n    const transformedData: {\n      simcard?: IdName;\n      asset?: IdName;\n    } = { ...formData };\n    if (isDefined(transformedData['simcard'])) {\n      transformedData['simcard'] = {\n        id: transformedData?.simcard?.id,\n        name: transformedData['simcard']?.name,\n      };\n    }\n\n    if (isDefined(transformedData['asset'])) {\n      transformedData['asset'] = {\n        id: transformedData['asset']?.id,\n        name: transformedData['asset']?.name,\n      };\n    }\n\n    return transformedData;\n  }\n}\n","<div class=\"card pt-2\">\n  <div class=\"mb-4 p-2 flex justify-start items-center\">\n    <span\n      class=\"pi pi-link !text-[2.5rem]\"\n      [ngClass]=\"{ 'icon-primary': isFormEditable() }\"\n      [attr.aria-label]=\"'link icon'\"\n    ></span>\n\n    <div class=\"pl-6 flex-1\">\n      <div class=\"flex justify-between items-center\">\n        <h2 class=\"text-xl font-semibold m-0\">Linked Entities</h2>\n        @if (!isFormEditable() && !createMode()) {\n          <div class=\"icon-light\">\n            <span\n              class=\"pi pi-pen-to-square action hover !text-2xl\"\n              [attr.aria-label]=\"'Edit linked entities details'\"\n              (click)=\"onEdit()\"\n              (keydown.enter)=\"onEdit()\"\n            ></span>\n          </div>\n        }\n      </div>\n      <span>The following supplemental information is required.</span>\n    </div>\n  </div>\n\n  @if (isFormEditable() || (createMode() && formFields.length)) {\n    <app-dynamic-form\n      [fields]=\"formFields\"\n      [actions]=\"actions\"\n      [hideActions]=\"createMode()\"\n      (formSubmit)=\"onSubmit($event)\"\n      (formValidityChange)=\"onFormValidityChange($event)\"\n      (formValueChange)=\"onFormValueChange($event)\"\n    >\n    </app-dynamic-form>\n  }\n\n  @if (!isFormEditable() && !createMode()) {\n    @if (warning()) {\n      <div class=\"mb-4\">\n        <p-message severity=\"warn\">\n          <span class=\"pi pi-exclamation-triangle mr-2\"></span>\n          {{ warning() }}</p-message\n        >\n      </div>\n    }\n    <app-grid\n      [data]=\"deviceLinkedDetails()\"\n      [columns]=\"columns\"\n      [showGridLines]=\"false\"\n      [hideHeader]=\"true\"\n      tableStyleClass=\"info-display !w-auto\"\n    ></app-grid>\n  }\n</div>\n","import { Component, computed, inject, input, signal } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { Validators } from '@angular/forms';\nimport { Observable } from 'rxjs';\n\n// PrimeNG imports\nimport { ButtonModule } from 'primeng/button';\n\n// Core imports\nimport { EntitiesService, IdName } from '../../../../../api';\nimport {\n  createNumberField,\n  createTextField,\n} from '../../../../../shared/models';\nimport { isNullOrUndefined, isNumber } from '../../../../../shared/utils';\nimport { EntitySectionBaseComponent } from '../../base';\nimport { AdminStateService } from '../../../services/admin-state.service';\n\n// Lazy loaded components\nimport { DynamicFormComponent } from '../../../../../shared/components/forms/dynamic-form/dynamic-form.component';\nimport { GridComponent } from '../../../../../shared/components/grid/grid.component';\n\ninterface FormField {\n  id: string;\n  title: string;\n  type: 'text' | 'number';\n  value?: string | number;\n  defaultValue?: string | number;\n  required?: boolean;\n  description?: string;\n  min?: number;\n  max?: number;\n}\n\ninterface FormConfig {\n  fields: FormField[];\n  name?: string;\n}\n\n@Component({\n  selector: 'app-form-section',\n  imports: [CommonModule, ButtonModule, GridComponent, DynamicFormComponent],\n  templateUrl: './form-section.component.html',\n  styleUrl: './form-section.component.scss',\n})\nexport class FormSectionComponent<\n  T extends {\n    [x: string]: unknown;\n    id: string;\n    assetType?: IdName;\n  },\n> extends EntitySectionBaseComponent<T> {\n  valuesKey = input.required<string>();\n  formConfig = input.required<FormConfig>();\n  private readonly entitiesService = inject(EntitiesService);\n  private readonly adminStateService = inject(AdminStateService);\n\n  readonly entityCustomFields = signal<\n    Record<string, string | boolean | number>[]\n  >([]);\n\n  readonly entityDetails = computed(() => {\n    const entityDetails = this.entity();\n    const formConfig = this.formConfig();\n    if (isNullOrUndefined(entityDetails) || isNullOrUndefined(formConfig))\n      return [];\n\n    const values =\n      (entityDetails[this.valuesKey()] as Record<string, unknown>) ?? {};\n\n    return formConfig.fields.map((field) => ({\n      key: field.title,\n      value: values[field.id] ?? 'None',\n    }));\n  });\n\n  constructor() {\n    super();\n\n    // Setup initial columns\n    this.columns = [\n      { field: 'key', header: '', transform: 'uppercase' },\n      { field: 'value', header: '' },\n    ];\n  }\n\n  protected override updateFormFields(): void {\n    const entityDetails = this.entity();\n    const formConfig = this.formConfig();\n    const values: Record<string, unknown> =\n      (entityDetails?.[this.valuesKey()] as Record<string, unknown>) ?? {};\n    this.formFields = formConfig.fields\n      .map((field) => {\n        switch (field.type) {\n          case 'text':\n            return createTextField(\n              field.id,\n              field.title,\n              (values[field.id] as string) ??\n                field.value?.toString() ??\n                field.defaultValue?.toString(),\n              {\n                validations:\n                  (field.required ?? false)\n                    ? [\n                        {\n                          name: 'required',\n                          validator: Validators.required,\n                          message: `${field.title} is required`,\n                        },\n                      ]\n                    : [],\n                hint: field.description,\n              },\n            );\n          case 'number': {\n            const validations = [];\n            if (field.required ?? false) {\n              validations.push({\n                name: 'required',\n                validator: Validators.required,\n                message: `${field.title} is required`,\n              });\n            }\n            if (isNumber(field.min)) {\n              validations.push({\n                name: 'min',\n                validator: Validators.min(field.min),\n                message: `Value must be greater than ${field.min}`,\n              });\n            }\n            if (isNumber(field.max)) {\n              validations.push({\n                name: 'max',\n                validator: Validators.max(field.max),\n                message: `Value must be less than ${field.max}`,\n              });\n            }\n            return createNumberField(\n              field.id,\n              field.title,\n              (values[field.id] as number) ?? field.value ?? field.defaultValue,\n              {\n                validations,\n                hint: field.description,\n              },\n            );\n          }\n          default:\n            return undefined;\n        }\n      })\n      .filter((field) => field !== undefined); // Filter out undefined fields\n  }\n\n  override getUpdateMethod(): (\n    id: string,\n    payload: Partial<T>,\n  ) => Observable<unknown> {\n    switch (this.entityType()) {\n      case 'asset':\n        return (id, payload) => this.entitiesService.updateAsset(id, payload);\n      case 'simcard':\n        return (id, payload) => this.entitiesService.updateSimCard(id, payload);\n      case 'device':\n        return (id, payload) => this.entitiesService.updateDevice(id, payload);\n      case 'assettag':\n        return (id, payload) =>\n          this.entitiesService.updateAssetTag(id, payload);\n      default:\n        throw new Error(`Update for '${this.entityType}' not yet supported`);\n    }\n  }\n}\n","<div class=\"card pt-2\">\n  <div class=\"mb-4 p-2 flex justify-start items-center\">\n    <span\n      class=\"pi pi-sliders-v !text-[2.5rem]\"\n      [ngClass]=\"{ 'icon-primary': isFormEditable() }\"\n      [attr.aria-label]=\"'sliders vertical icon'\"\n    ></span>\n\n    <div class=\"pl-6 flex-1\">\n      <div class=\"flex justify-between items-center\">\n        <h2 class=\"text-xl font-semibold m-0\">{{ formConfig()['name'] }}</h2>\n        @if (!isFormEditable()) {\n          <div class=\"icon-light\">\n            <span\n              class=\"pi pi-pen-to-square action hover !text-2xl\"\n              [attr.aria-label]=\"'Edit entity details'\"\n              (click)=\"onEdit()\"\n              (keydown.enter)=\"onEdit()\"\n            ></span>\n          </div>\n        }\n      </div>\n    </div>\n  </div>\n  @if (isFormEditable()) {\n    <app-dynamic-form\n      [fields]=\"formFields\"\n      [actions]=\"actions\"\n      (formSubmit)=\"onSubmit($event)\"\n    >\n    </app-dynamic-form>\n  } @else {\n    <app-grid\n      [data]=\"entityDetails()\"\n      [columns]=\"columns\"\n      [showGridLines]=\"false\"\n      [hideHeader]=\"true\"\n      tableStyleClass=\"info-display !w-auto\"\n    ></app-grid>\n  }\n</div>\n","import { Injectable } from '@angular/core';\n\nimport {\n  DeviceResponse,\n  DeviceTypeAccessory,\n  DeviceTypeResponse,\n  IoTypeListItem,\n} from '../../../api';\nimport { AdminDetailSection } from '../models';\nimport { DeviceParametersSectionComponent } from '../components/device/device-parameters-section/device-parameters-section.component';\nimport { DeviceIoWhitelistSectionComponent } from '../components/device/device-io-whitelist-section/device-io-whitelist-section.component';\nimport { DeviceBitmapSectionComponent } from '../components/device/device-bitmap-section/device-bitmap-section.component';\nimport { DeviceIOSectionComponent } from '../components/device/device-io-section/device-io-section.component';\nimport { DeviceAccessorySectionComponent } from '../components/device/device-accessory-section/device-accessory-section.component';\nimport { DeviceDetailsSectionComponent } from '../components/device/device-details-section/device-details-section.component';\nimport { DeviceLinkedSectionComponent } from '../components/device/device-linked-section/device-linked-section.component';\nimport { InfoSectionComponent } from '../components/shared/info-section/info-section.component';\nimport { isDefined } from '../../../shared/utils';\nimport { FormSectionComponent } from '../components/shared/form-section/form-section.component';\nimport { FeedSectionComponent } from '../components/shared/feed-section/feed-section.component';\nimport { DEFAULT_SYSTEM_ID } from '../../../core/models';\n\n@Injectable({ providedIn: 'root' })\nexport class DeviceSectionConfigFactory {\n  /**\n   * Create sections for device information\n   * @param device The device object to display in the section\n   * @returns An array of AdminDetailSection objects representing the device information sections\n   */\n  createDeviceInformationSection(\n    device: DeviceResponse | null,\n  ): AdminDetailSection[] {\n    return [\n      {\n        id: 'device-details',\n        title: 'Device Config Details',\n        component: DeviceDetailsSectionComponent,\n        componentInputs: { entity: device },\n        category: 'information',\n        order: 10,\n      },\n      {\n        id: 'device-information',\n        title: 'Device Information',\n        component: InfoSectionComponent<DeviceResponse>,\n        componentInputs: {\n          entity: device,\n          dataPath: 'device_information',\n          entityType: 'device',\n        },\n        category: 'information',\n        order: 20,\n      },\n      {\n        id: 'device-linked-entities',\n        title: 'Linked Entities',\n        component: DeviceLinkedSectionComponent,\n        componentInputs: {\n          entity: device,\n          entityType: 'device',\n          dataPath: 'linked_entities',\n        },\n        category: 'information',\n        order: 30,\n      },\n    ];\n  }\n\n  /**\n   * Create sections for device IO\n   * @param device The device object to display in the section\n   * @returns An array of AdminDetailSection objects representing the device IO sections\n   */\n  createDeviceIOSection(\n    device: DeviceResponse | null,\n    deviceType: DeviceTypeResponse | null,\n    ioTypes: IoTypeListItem[],\n  ): AdminDetailSection[] {\n    return [\n      {\n        id: 'device-io-selection',\n        title: 'IO Selection',\n        component: DeviceIoWhitelistSectionComponent,\n        componentInputs: {\n          entity: device,\n          entityType: 'device',\n          deviceType,\n          injectDataAtPath: true,\n          dataPath: 'parameters',\n        },\n        category: 'io',\n        order: 10,\n      },\n      {\n        id: 'device-bitmapped-io',\n        title: 'Bitmapped IO',\n        component: DeviceBitmapSectionComponent,\n        componentInputs: {\n          entity: device,\n          entityType: 'device',\n        },\n        category: 'io',\n        order: 20,\n      },\n      {\n        id: 'device-analog-inputs',\n        title: 'Analog Inputs',\n        component: DeviceIOSectionComponent,\n        componentInputs: {\n          entity: device,\n          entityType: 'device',\n          ioType: 'analog_input',\n          iconType: 'svg',\n          iconName: 'gauge-simple-high-solid',\n          deviceType,\n          ioTypes,\n        },\n        category: 'io',\n        order: 30,\n      },\n      {\n        id: 'device-camera-inputs',\n        title: 'Camera Inputs',\n        component: DeviceIOSectionComponent,\n        componentInputs: {\n          entity: device,\n          entityType: 'device',\n          ioType: 'camera_input',\n          iconType: 'primeng',\n          iconName: 'pi pi-camera',\n          deviceType,\n          ioTypes,\n        },\n        category: 'io',\n        order: 40,\n      },\n      {\n        id: 'device-can-bus-inputs',\n        title: 'CAN Bus Inputs',\n        component: DeviceIOSectionComponent,\n        componentInputs: {\n          entity: device,\n          entityType: 'device',\n          ioType: 'can_input',\n          iconType: 'svg',\n          iconName: 'oil-can-solid',\n          deviceType,\n          ioTypes,\n        },\n        category: 'io',\n        order: 50,\n      },\n      {\n        id: 'device-counter-inputs',\n        title: 'Counter Inputs',\n        component: DeviceIOSectionComponent,\n        componentInputs: {\n          entity: device,\n          entityType: 'device',\n          ioType: 'counter_input',\n          iconType: 'primeng',\n          iconName: 'pi pi-clock',\n          deviceType,\n          ioTypes,\n        },\n        category: 'io',\n        order: 60,\n      },\n      {\n        id: 'device-digital-inputs',\n        title: 'Digital Inputs',\n        component: DeviceIOSectionComponent,\n        componentInputs: {\n          entity: device,\n          entityType: 'device',\n          ioType: 'digital_input',\n          iconType: 'primeng',\n          iconName: 'pi pi-arrow-left',\n          deviceType,\n          ioTypes,\n        },\n        category: 'io',\n        order: 70,\n      },\n      {\n        id: 'device-digital-outputs',\n        title: 'Digital Outputs',\n        component: DeviceIOSectionComponent,\n        componentInputs: {\n          entity: device,\n          entityType: 'device',\n          ioType: 'digital_output',\n          iconType: 'primeng',\n          iconName: 'pi pi-arrow-right',\n          deviceType,\n          ioTypes,\n        },\n        category: 'io',\n        order: 80,\n      },\n      {\n        id: 'device-temperature-inputs',\n        title: 'Temperature Inputs',\n        component: DeviceIOSectionComponent,\n        componentInputs: {\n          entity: device,\n          entityType: 'device',\n          ioType: 'temperature_input',\n          iconType: 'svg',\n          iconName: 'temperature-half-solid',\n          deviceType,\n          ioTypes,\n        },\n        category: 'io',\n        order: 90,\n      },\n      {\n        id: 'device-value-inputs',\n        title: 'Value Inputs',\n        component: DeviceIOSectionComponent,\n        componentInputs: {\n          entity: device,\n          entityType: 'device',\n          ioType: 'value_input',\n          iconType: 'primeng',\n          iconName: 'pi pi-list-check',\n          deviceType,\n          ioTypes,\n        },\n        category: 'io',\n        order: 100,\n      },\n    ];\n  }\n\n  /**\n   * Create sections for device accessories\n   * @param device The device object to display in the section\n   * @returns An array of AdminDetailSection objects representing the device accessories sections\n   */\n  createDeviceAccessoriesSection(\n    device: DeviceResponse | null,\n    deviceTypeAccessories: Record<string, DeviceTypeAccessory> | undefined,\n  ): AdminDetailSection[] {\n    if (!device) return [];\n\n    const sections: AdminDetailSection[] = [];\n    Object.entries(deviceTypeAccessories ?? {}).forEach(([key]) => {\n      sections.push({\n        id: `device-accessory-${key}`,\n        title: deviceTypeAccessories?.[key]?.name ?? key,\n        component: DeviceAccessorySectionComponent,\n        componentInputs: {\n          entity: device,\n          entityType: 'device',\n          dataPath: `accessories.${key}`,\n          deviceTypeAccessory: deviceTypeAccessories?.[key],\n          accessoryId: key,\n          sectionHeader: deviceTypeAccessories?.[key]?.name ?? key,\n        },\n        category: 'accessories',\n        order: 10 + Number(key),\n      });\n    });\n    return sections;\n  }\n\n  /**\n   * Create sections for device settings\n   * @param device The device object to display in the section\n   * @returns An array of AdminDetailSection objects representing the device settings sections\n   */\n  createSettingsSection(\n    device: DeviceResponse | null,\n    deviceType: DeviceTypeResponse | null,\n  ): AdminDetailSection[] {\n    let custom = [];\n\n    if (isDefined(deviceType?.settingsDefinition)) {\n      try {\n        const def = JSON.parse(deviceType.settingsDefinition);\n        custom = def.groups.map(\n          (group: { id: string; title: string }) =>\n            ({\n              id: group.id,\n              title: group.title,\n              component: FormSectionComponent,\n              componentInputs: {\n                entity: device,\n                formConfig: group,\n                entityType: 'device',\n                valuesKey: 'settings',\n              },\n              category: 'settings',\n              order: 10 + Number(group.id),\n            }) as AdminDetailSection,\n        );\n      } catch (err) {\n        console.warn(\n          'Invalid device type settings definition',\n          deviceType.settingsDefinition,\n        );\n        console.error(err);\n      }\n    }\n\n    return [\n      {\n        id: 'device-parameters',\n        title: 'Device Config Parameters',\n        component: DeviceParametersSectionComponent,\n        componentInputs: {\n          entity: device,\n          entityType: 'device',\n          dataPath: 'parameters',\n          injectDataAtPath: true,\n          deviceType,\n        },\n        category: 'settings',\n        order: 10,\n      },\n      ...custom,\n    ];\n  }\n\n  /**\n   * Create sections for device changes\n   * @param device The device object to display in the section\n   * @returns An array of AdminDetailSection objects representing the device changes sections\n   */\n  createChangesSection(device: DeviceResponse | null): AdminDetailSection[] {\n    return [\n      {\n        id: 'device-changes',\n        title: 'Changes',\n        component: FeedSectionComponent,\n        componentInputs: {\n          entity: device,\n        },\n        category: 'feed',\n        order: 10,\n      },\n    ];\n  }\n\n  /**\n   * Create all device sections in one call\n   * @param device The device object to display in the sections\n   * @returns An array of AdminDetailSection objects representing all device sections\n   */\n  createAllDeviceSections(\n    device: DeviceResponse | null,\n    deviceTypeAccessories: Record<string, DeviceTypeAccessory> | undefined,\n    deviceType: DeviceTypeResponse | null,\n    ioTypes: IoTypeListItem[],\n  ): AdminDetailSection[] {\n    const sections = [...this.createDeviceInformationSection(device)];\n\n    const hasConfigProfile =\n      isDefined(device?.configProfile?.id) &&\n      device?.configProfile?.id !== DEFAULT_SYSTEM_ID;\n    if (!hasConfigProfile) {\n      sections.push(...this.createSettingsSection(device, deviceType));\n      sections.push(...this.createDeviceIOSection(device, deviceType, ioTypes));\n\n      if (\n        deviceType?.accessories &&\n        Object.keys(deviceType?.accessories)?.length > 0\n      ) {\n        sections.push(\n          ...this.createDeviceAccessoriesSection(device, deviceTypeAccessories),\n        );\n      }\n    }\n\n    sections.push(...this.createChangesSection(device));\n    return sections;\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { Component, computed, effect, inject, input } from '@angular/core';\nimport { Validators } from '@angular/forms';\n\nimport { ButtonModule } from 'primeng/button';\nimport { InputTextModule } from 'primeng/inputtext';\n\nimport {\n  EntitiesService,\n  ZoneCreateRequest,\n  ZoneListItem,\n  ZoneResponse,\n  ZoneUpdateRequest,\n} from '../../../../../api';\nimport { DynamicFormComponent } from '../../../../../shared/components/forms/dynamic-form/dynamic-form.component';\nimport { GridComponent } from '../../../../../shared/components/grid/grid.component';\nimport {\n  AssetGroupingTreeItem,\n  createDropdownField,\n  createNumberField,\n  createTextField,\n  createTreeSelectField,\n  MeasurementUnitType,\n  TreeSelectNode,\n} from '../../../../../shared/models';\nimport {\n  enumToSelectOptionValues,\n  isDefined,\n} from '../../../../../shared/utils';\nimport { TypedEntitySectionBaseComponent } from '../../base';\nimport { AssetGroupingService } from '../../../../../shared/services/asset-grouping.service';\nimport { MeasurementUnitsService } from '../../../../../shared/services/measurement-units/measurement-units.service';\nimport { EntityOperationRegistryService } from '../../../services/entity/entity-operation-registry.service';\nimport { Observable } from 'rxjs';\nimport { UtilityService } from '../../../../../core/services/utility.service';\nimport { FormToRequestMapper } from '../../../utils/form-to-request-mapper';\n\ntype FormData = Record<string, string | number | object>;\n\n@Component({\n  selector: 'app-geofence-details-section',\n  imports: [\n    CommonModule,\n    ButtonModule,\n    InputTextModule,\n    GridComponent,\n    DynamicFormComponent,\n  ],\n  templateUrl: './geofence-details-section.component.html',\n  styleUrl: './geofence-details-section.component.scss',\n})\nexport class GeofenceDetailsSectionComponent extends TypedEntitySectionBaseComponent<\n  ZoneListItem,\n  ZoneUpdateRequest,\n  ZoneCreateRequest,\n  ZoneResponse\n> {\n  readonly ownerId = input<string | null>(null);\n  private readonly entitiesService = inject(EntitiesService);\n  private readonly assetGroupService = inject(AssetGroupingService);\n  private readonly measurementUnitsService = inject(MeasurementUnitsService);\n  private readonly operationRegistry = inject(EntityOperationRegistryService);\n  private readonly utilityService = inject(UtilityService);\n\n  readonly geofenceDetails = computed(() => {\n    const geofenceDetails = this.entity();\n    if (!isDefined(geofenceDetails)) return [];\n\n    return [\n      { key: 'Name', value: geofenceDetails.name },\n      {\n        key: 'Type',\n        value: this.utilityService.toTitleCase(geofenceDetails.zoneType ?? ''),\n      },\n      { key: 'Cost Centre', value: geofenceDetails.costCentre?.name ?? 'None' },\n      { key: 'Group', value: geofenceDetails.group?.name ?? 'None' },\n      {\n        key: 'Speed Limit',\n        value:\n          isDefined(geofenceDetails.speed) && geofenceDetails.speed > 0\n            ? this.measurementUnitsService.format(\n                geofenceDetails.speed,\n                MeasurementUnitType.SPEED,\n              ).format\n            : 'None',\n      },\n      {\n        key: 'Proximity Warning',\n        value:\n          isDefined(geofenceDetails.radius) && geofenceDetails.radius > 0\n            ? this.measurementUnitsService.format(\n                geofenceDetails.radius,\n                MeasurementUnitType.DISTANCE,\n              ).format\n            : 'None',\n      },\n    ];\n  });\n  zoneGroups: AssetGroupingTreeItem[] = [];\n  costCenters: AssetGroupingTreeItem[] = [];\n  private requestMapper?: FormToRequestMapper<ZoneUpdateRequest>;\n\n  constructor() {\n    super();\n\n    // Setup initial columns\n    this.columns = [\n      { field: 'key', header: '', transform: 'uppercase' },\n      { field: 'value', header: '' },\n    ];\n\n    effect(() => {\n      const geofence = this.entity();\n      if (isDefined(geofence)) {\n        // Track completion of both async operations\n        const dataLoadPromises: Promise<void>[] = [];\n\n        // Add cost centers loading promise\n        const costCentresPromise = this.loadCostCentres(\n          geofence['ownerId'],\n        ).catch(() => {\n          console.error('Failed to load cost centres');\n        });\n        dataLoadPromises.push(costCentresPromise);\n\n        // Add zone groups loading promise\n        const zoneGroupsPromise = this.assetGroupService\n          .getZoneGroupsAsTree(geofence['ownerId'])\n          .then((res) => {\n            this.zoneGroups = res;\n          })\n          .catch(() => {\n            console.error('Failed to load zone groups');\n          });\n        dataLoadPromises.push(zoneGroupsPromise);\n\n        // Wait for all data to load before updating form fields\n        Promise.all(dataLoadPromises)\n          .then(() => {\n            // Initialize the request mapper now that we have all the data\n            this.initializeRequestMapper();\n            this.updateFormFields();\n          })\n          .catch(() => {});\n      }\n    });\n  }\n\n  private async loadCostCentres(ownerId: string): Promise<void> {\n    const costCentreTree =\n      await this.assetGroupService.getCostCentresAsTree(ownerId);\n    this.costCenters = costCentreTree;\n  }\n\n  private initializeRequestMapper(): void {\n    this.requestMapper = new FormToRequestMapper<ZoneUpdateRequest>({\n      name: {\n        requestProperty: 'name',\n        validate: (value) => typeof value === 'string' && value.length > 0,\n      },\n      zoneType: {\n        requestProperty: 'zoneType',\n        validate: (value) => typeof value === 'string' && value.length > 0,\n      },\n      costCentre: {\n        requestProperty: 'costCentre',\n        transform: (value) => {\n          const item = this.assetGroupService.findInTree(\n            this.costCenters,\n            `${(value as TreeSelectNode).id}`,\n          );\n          return item ? { id: item.id, name: item.name } : undefined;\n        },\n      },\n      group: {\n        requestProperty: 'group',\n        transform: (value) => {\n          const item = this.assetGroupService.findInTree(\n            this.zoneGroups,\n            (value as TreeSelectNode).id,\n          );\n          return item ? { id: item.id, name: item.name } : undefined;\n        },\n      },\n      speed: {\n        requestProperty: 'speed',\n        transform: (value) => {\n          if (typeof value !== 'number') return undefined;\n          return this.measurementUnitsService.toBackend(\n            MeasurementUnitType.SPEED,\n            value,\n          );\n        },\n      },\n      radius: {\n        requestProperty: 'radius',\n        transform: (value) => {\n          if (typeof value !== 'number') return undefined;\n          return this.measurementUnitsService.toBackend(\n            MeasurementUnitType.DISTANCE,\n            value,\n          );\n        },\n      },\n    });\n  }\n\n  protected override updateFormFields(): void {\n    const geofence = this.entity();\n    this.formFields = [\n      createTextField('name', 'Name', geofence?.name, {\n        name: 'name',\n        validations: [\n          {\n            name: 'required',\n            validator: Validators.required,\n            message: 'Name is required',\n          },\n        ],\n      }),\n      createDropdownField(\n        'zoneType',\n        'Type',\n        enumToSelectOptionValues(ZoneListItem.ZoneTypeEnum).map((item) => {\n          if (item.label === 'Nogo') {\n            item.label = 'No Go';\n          }\n          if (item.label === 'Keepin') {\n            item.label = 'Keep In';\n          }\n          return item;\n        }),\n        geofence?.zoneType,\n        {\n          name: 'zoneType',\n          validations: [\n            {\n              name: 'required',\n              validator: Validators.required,\n              message: 'Type is required',\n            },\n          ],\n          props: {\n            appendTo: 'body',\n          },\n        },\n      ),\n      createTreeSelectField(\n        'costCentre',\n        'Cost Centre',\n        geofence?.costCentre\n          ? {\n              id: geofence.costCentre.id,\n              label: geofence.costCentre.name,\n              data: geofence.costCentre,\n            }\n          : null,\n        this.costCenters,\n        {\n          name: 'costCentre',\n          validations: [\n            {\n              name: 'required',\n              validator: Validators.required,\n              message: 'Cost centre is required',\n            },\n          ],\n          props: {\n            appendTo: 'body',\n            placeholder: 'Select Cost Centre',\n            multiple: false,\n            showClear: true,\n            selectionMode: 'single',\n            filter: true,\n          },\n        },\n      ),\n      createTreeSelectField(\n        'group',\n        'Group',\n        geofence?.group\n          ? {\n              id: geofence.group.id,\n              label: geofence.group.name,\n              data: geofence.group,\n            }\n          : null,\n        this.zoneGroups,\n        {\n          name: 'group',\n          validations: [\n            {\n              name: 'required',\n              validator: Validators.required,\n              message: 'Group is required',\n            },\n          ],\n          props: {\n            appendTo: 'body',\n            placeholder: 'Select Group',\n            multiple: false,\n            showClear: true,\n            selectionMode: 'single',\n            filter: true,\n          },\n        },\n      ),\n      createNumberField(\n        'speed',\n        'Speed Limit',\n        this.measurementUnitsService.fromBackend(\n          MeasurementUnitType.SPEED,\n          geofence?.speed ?? 0,\n        ),\n        {\n          name: 'speed',\n          props: {\n            appendTo: 'body',\n            placeholder: 'Enter Speed Limit',\n            showClear: true,\n            suffix: this.measurementUnitsService.unitSymbol(\n              MeasurementUnitType.SPEED,\n            ),\n          },\n        },\n      ),\n      createNumberField(\n        'radius',\n        'Proximity Warning',\n        this.measurementUnitsService.fromBackend(\n          MeasurementUnitType.DISTANCE,\n          geofence?.radius ?? 0,\n        ),\n        {\n          name: 'radius',\n          props: {\n            appendTo: 'body',\n            placeholder: 'Enter Proximity Warning',\n            showClear: true,\n            suffix: this.measurementUnitsService.unitSymbol(\n              MeasurementUnitType.DISTANCE,\n            ),\n          },\n        },\n      ),\n    ];\n  }\n\n  override getUpdateMethod(): (\n    id: string,\n    data: ZoneUpdateRequest,\n  ) => Observable<ZoneResponse> {\n    return (\n      this.operationRegistry.getOperation<\n        ZoneListItem,\n        ZoneUpdateRequest,\n        ZoneResponse,\n        'update'\n      >('zone', 'update') ??\n      ((id, data) => this.entitiesService.updateZone(id, data))\n    );\n  }\n\n  protected override onFormValueChange(formData: FormData): void {\n    try {\n      const transformedData = this.transformFormData(formData);\n      this.formValueChange.emit(transformedData);\n    } catch (error) {\n      console.warn('Form data transformation failed:', error);\n      // Emit raw data as fallback\n      this.formValueChange.emit(formData);\n    }\n  }\n\n  protected override transformFormData(\n    formData: Record<string, unknown> | Record<string, string | number>[],\n  ): ZoneUpdateRequest {\n    if (!this.requestMapper) {\n      return {};\n    }\n\n    try {\n      // Handle both possible input types\n      const normalizedFormData = Array.isArray(formData)\n        ? formData.reduce((acc, item) => ({ ...acc, ...item }), {})\n        : formData;\n\n      const partialRequest = this.requestMapper.transform(normalizedFormData);\n\n      // Build update request - only include properties that were actually provided\n      const updateRequest: Partial<ZoneUpdateRequest> = {};\n\n      // Only include properties that exist in the partial request (even if they're falsy)\n      if ('name' in partialRequest) {\n        updateRequest.name = partialRequest.name;\n      }\n\n      if ('zoneType' in partialRequest) {\n        updateRequest.zoneType = partialRequest.zoneType;\n      }\n\n      if ('costCentre' in partialRequest) {\n        updateRequest.costCentre = partialRequest.costCentre;\n      }\n\n      if ('group' in partialRequest) {\n        updateRequest.group = partialRequest.group;\n      }\n\n      if ('speed' in partialRequest) {\n        updateRequest.speed = partialRequest.speed;\n      }\n\n      if ('radius' in partialRequest) {\n        updateRequest.radius = partialRequest.radius;\n      }\n\n      return updateRequest;\n    } catch (error) {\n      console.error('Form data transformation failed:', error);\n      throw error;\n    }\n  }\n}\n","<div class=\"card pt-2\">\n  <div class=\"mb-4 p-2 flex justify-start items-center\">\n    <span\n      class=\"pi pi-map !text-[2.5rem]\"\n      [ngClass]=\"{ 'icon-primary': isFormEditable() }\"\n      [attr.aria-label]=\"'map icon'\"\n    ></span>\n\n    <div class=\"pl-6 flex-1\">\n      <div class=\"flex justify-between items-center\">\n        <h2 class=\"text-xl font-semibold m-0\">Geofence Details</h2>\n        @if (!isFormEditable() && !createMode()) {\n          <div class=\"icon-light\">\n            <span\n              class=\"pi pi-pen-to-square action hover !text-2xl\"\n              [attr.aria-label]=\"'Edit geofence details'\"\n              (click)=\"onEdit()\"\n              (keydown.enter)=\"onEdit()\"\n            ></span>\n          </div>\n        }\n      </div>\n      <span>Configure various details about your Geofence.</span>\n    </div>\n  </div>\n\n  @if (isFormEditable() || (createMode() && formFields.length)) {\n    <app-dynamic-form\n      [fields]=\"formFields\"\n      [actions]=\"actions\"\n      [hideActions]=\"createMode()\"\n      (formSubmit)=\"onSubmit($event)\"\n      (formValidityChange)=\"onFormValidityChange($event)\"\n      (formValueChange)=\"onFormValueChange($event)\"\n    >\n    </app-dynamic-form>\n  }\n\n  @if (!isFormEditable() && !createMode()) {\n    <app-grid\n      [data]=\"geofenceDetails()\"\n      [columns]=\"columns\"\n      [showGridLines]=\"false\"\n      [hideHeader]=\"true\"\n      tableStyleClass=\"info-display !w-auto\"\n    ></app-grid>\n  }\n</div>\n","import * as i0 from '@angular/core';\nimport { inject, ElementRef, NgZone, EventEmitter, PLATFORM_ID, Component, ChangeDetectionStrategy, ViewEncapsulation, Input, Output, Directive, InjectionToken, ContentChildren, NgModule, Injectable } from '@angular/core';\nimport { isPlatformBrowser } from '@angular/common';\nimport { BehaviorSubject, Observable, Subject, combineLatest, Subscription } from 'rxjs';\nimport { switchMap, take, map, takeUntil } from 'rxjs/operators';\n\n/** Manages event on a Google Maps object, ensuring that events are added only when necessary. */\nconst _c0 = [\"*\"];\nclass MapEventManager {\n  _ngZone;\n  /** Pending listeners that were added before the target was set. */\n  _pending = [];\n  _listeners = [];\n  _targetStream = new BehaviorSubject(undefined);\n  /** Clears all currently-registered event listeners. */\n  _clearListeners() {\n    for (const listener of this._listeners) {\n      listener.remove();\n    }\n    this._listeners = [];\n  }\n  constructor(_ngZone) {\n    this._ngZone = _ngZone;\n  }\n  /** Gets an observable that adds an event listener to the map when a consumer subscribes to it. */\n  getLazyEmitter(name) {\n    return this._targetStream.pipe(switchMap(target => {\n      const observable = new Observable(observer => {\n        // If the target hasn't been initialized yet, cache the observer so it can be added later.\n        if (!target) {\n          this._pending.push({\n            observable,\n            observer\n          });\n          return undefined;\n        }\n        const listener = target.addListener(name, event => {\n          this._ngZone.run(() => observer.next(event));\n        });\n        // If there's an error when initializing the Maps API (e.g. a wrong API key), it will\n        // return a dummy object that returns `undefined` from `addListener` (see #26514).\n        if (!listener) {\n          observer.complete();\n          return undefined;\n        }\n        this._listeners.push(listener);\n        return () => listener.remove();\n      });\n      return observable;\n    }));\n  }\n  /** Sets the current target that the manager should bind events to. */\n  setTarget(target) {\n    const currentTarget = this._targetStream.value;\n    if (target === currentTarget) {\n      return;\n    }\n    // Clear the listeners from the pre-existing target.\n    if (currentTarget) {\n      this._clearListeners();\n      this._pending = [];\n    }\n    this._targetStream.next(target);\n    // Add the listeners that were bound before the map was initialized.\n    this._pending.forEach(subscriber => subscriber.observable.subscribe(subscriber.observer));\n    this._pending = [];\n  }\n  /** Destroys the manager and clears the event listeners. */\n  destroy() {\n    this._clearListeners();\n    this._pending = [];\n    this._targetStream.complete();\n  }\n}\n\n// Workaround for: https://github.com/bazelbuild/rules_nodejs/issues/1265\n/** default options set to the Googleplex */\nconst DEFAULT_OPTIONS = {\n  center: {\n    lat: 37.421995,\n    lng: -122.084092\n  },\n  zoom: 17,\n  // Note: the type conversion here isn't necessary for our CI, but it resolves a g3 failure.\n  mapTypeId: 'roadmap'\n};\n/** Arbitrary default height for the map element */\nconst DEFAULT_HEIGHT = '500px';\n/** Arbitrary default width for the map element */\nconst DEFAULT_WIDTH = '500px';\n/**\n * Angular component that renders a Google Map via the Google Maps JavaScript\n * API.\n * @see https://developers.google.com/maps/documentation/javascript/reference/\n */\nclass GoogleMap {\n  _elementRef = inject(ElementRef);\n  _ngZone = inject(NgZone);\n  _eventManager = new MapEventManager(inject(NgZone));\n  _mapEl;\n  _existingAuthFailureCallback;\n  /**\n   * The underlying google.maps.Map object\n   *\n   * See developers.google.com/maps/documentation/javascript/reference/map#Map\n   */\n  googleMap;\n  /** Whether we're currently rendering inside a browser. */\n  _isBrowser;\n  /** Height of the map. Set this to `null` if you'd like to control the height through CSS. */\n  height = DEFAULT_HEIGHT;\n  /** Width of the map. Set this to `null` if you'd like to control the width through CSS. */\n  width = DEFAULT_WIDTH;\n  /**\n   * The Map ID of the map. This parameter cannot be set or changed after a map is instantiated.\n   * See: https://developers.google.com/maps/documentation/javascript/reference/map#MapOptions.mapId\n   */\n  mapId;\n  /**\n   * Type of map that should be rendered. E.g. hybrid map, terrain map etc.\n   * See: https://developers.google.com/maps/documentation/javascript/reference/map#MapTypeId\n   */\n  mapTypeId;\n  set center(center) {\n    this._center = center;\n  }\n  _center;\n  set zoom(zoom) {\n    this._zoom = zoom;\n  }\n  _zoom;\n  set options(options) {\n    this._options = options || DEFAULT_OPTIONS;\n  }\n  _options = DEFAULT_OPTIONS;\n  /** Event emitted when the map is initialized. */\n  mapInitialized = new EventEmitter();\n  /**\n   * See\n   * https://developers.google.com/maps/documentation/javascript/events#auth-errors\n   */\n  authFailure = new EventEmitter();\n  /**\n   * See\n   * https://developers.google.com/maps/documentation/javascript/reference/map#Map.bounds_changed\n   */\n  boundsChanged = this._eventManager.getLazyEmitter('bounds_changed');\n  /**\n   * See\n   * https://developers.google.com/maps/documentation/javascript/reference/map#Map.center_changed\n   */\n  centerChanged = this._eventManager.getLazyEmitter('center_changed');\n  /**\n   * See\n   * https://developers.google.com/maps/documentation/javascript/reference/map#Map.click\n   */\n  mapClick = this._eventManager.getLazyEmitter('click');\n  /**\n   * See\n   * https://developers.google.com/maps/documentation/javascript/reference/map#Map.dblclick\n   */\n  mapDblclick = this._eventManager.getLazyEmitter('dblclick');\n  /**\n   * See\n   * https://developers.google.com/maps/documentation/javascript/reference/map#Map.drag\n   */\n  mapDrag = this._eventManager.getLazyEmitter('drag');\n  /**\n   * See\n   * https://developers.google.com/maps/documentation/javascript/reference/map#Map.dragend\n   */\n  mapDragend = this._eventManager.getLazyEmitter('dragend');\n  /**\n   * See\n   * https://developers.google.com/maps/documentation/javascript/reference/map#Map.dragstart\n   */\n  mapDragstart = this._eventManager.getLazyEmitter('dragstart');\n  /**\n   * See\n   * https://developers.google.com/maps/documentation/javascript/reference/map#Map.heading_changed\n   */\n  headingChanged = this._eventManager.getLazyEmitter('heading_changed');\n  /**\n   * See\n   * https://developers.google.com/maps/documentation/javascript/reference/map#Map.idle\n   */\n  idle = this._eventManager.getLazyEmitter('idle');\n  /**\n   * See\n   * https://developers.google.com/maps/documentation/javascript/reference/map#Map.maptypeid_changed\n   */\n  maptypeidChanged = this._eventManager.getLazyEmitter('maptypeid_changed');\n  /**\n   * See\n   * https://developers.google.com/maps/documentation/javascript/reference/map#Map.mousemove\n   */\n  mapMousemove = this._eventManager.getLazyEmitter('mousemove');\n  /**\n   * See\n   * https://developers.google.com/maps/documentation/javascript/reference/map#Map.mouseout\n   */\n  mapMouseout = this._eventManager.getLazyEmitter('mouseout');\n  /**\n   * See\n   * https://developers.google.com/maps/documentation/javascript/reference/map#Map.mouseover\n   */\n  mapMouseover = this._eventManager.getLazyEmitter('mouseover');\n  /**\n   * See\n   * developers.google.com/maps/documentation/javascript/reference/map#Map.projection_changed\n   */\n  projectionChanged = this._eventManager.getLazyEmitter('projection_changed');\n  /**\n   * See\n   * https://developers.google.com/maps/documentation/javascript/reference/map#Map.rightclick\n   */\n  mapRightclick = this._eventManager.getLazyEmitter('rightclick');\n  /**\n   * See\n   * https://developers.google.com/maps/documentation/javascript/reference/map#Map.tilesloaded\n   */\n  tilesloaded = this._eventManager.getLazyEmitter('tilesloaded');\n  /**\n   * See\n   * https://developers.google.com/maps/documentation/javascript/reference/map#Map.tilt_changed\n   */\n  tiltChanged = this._eventManager.getLazyEmitter('tilt_changed');\n  /**\n   * See\n   * https://developers.google.com/maps/documentation/javascript/reference/map#Map.zoom_changed\n   */\n  zoomChanged = this._eventManager.getLazyEmitter('zoom_changed');\n  constructor() {\n    const platformId = inject(PLATFORM_ID);\n    this._isBrowser = isPlatformBrowser(platformId);\n    if (this._isBrowser) {\n      const googleMapsWindow = window;\n      if (!googleMapsWindow.google && (typeof ngDevMode === 'undefined' || ngDevMode)) {\n        throw Error('Namespace google not found, cannot construct embedded google ' + 'map. Please install the Google Maps JavaScript API: ' + 'https://developers.google.com/maps/documentation/javascript/' + 'tutorial#Loading_the_Maps_API');\n      }\n      this._existingAuthFailureCallback = googleMapsWindow.gm_authFailure;\n      googleMapsWindow.gm_authFailure = () => {\n        if (this._existingAuthFailureCallback) {\n          this._existingAuthFailureCallback();\n        }\n        this.authFailure.emit();\n      };\n    }\n  }\n  ngOnChanges(changes) {\n    if (changes['height'] || changes['width']) {\n      this._setSize();\n    }\n    const googleMap = this.googleMap;\n    if (googleMap) {\n      if (changes['options']) {\n        googleMap.setOptions(this._combineOptions());\n      }\n      if (changes['center'] && this._center) {\n        googleMap.setCenter(this._center);\n      }\n      // Note that the zoom can be zero.\n      if (changes['zoom'] && this._zoom != null) {\n        googleMap.setZoom(this._zoom);\n      }\n      if (changes['mapTypeId'] && this.mapTypeId) {\n        googleMap.setMapTypeId(this.mapTypeId);\n      }\n    }\n  }\n  ngOnInit() {\n    // It should be a noop during server-side rendering.\n    if (this._isBrowser) {\n      this._mapEl = this._elementRef.nativeElement.querySelector('.map-container');\n      this._setSize();\n      // Create the object outside the zone so its events don't trigger change detection.\n      // We'll bring it back in inside the `MapEventManager` only for the events that the\n      // user has subscribed to.\n      if (google.maps.Map) {\n        this._initialize(google.maps.Map);\n      } else {\n        this._ngZone.runOutsideAngular(() => {\n          google.maps.importLibrary('maps').then(lib => this._initialize(lib.Map));\n        });\n      }\n    }\n  }\n  _initialize(mapConstructor) {\n    this._ngZone.runOutsideAngular(() => {\n      this.googleMap = new mapConstructor(this._mapEl, this._combineOptions());\n      this._eventManager.setTarget(this.googleMap);\n      this.mapInitialized.emit(this.googleMap);\n    });\n  }\n  ngOnDestroy() {\n    this.mapInitialized.complete();\n    this._eventManager.destroy();\n    if (this._isBrowser) {\n      const googleMapsWindow = window;\n      googleMapsWindow.gm_authFailure = this._existingAuthFailureCallback;\n    }\n  }\n  /**\n   * See\n   * https://developers.google.com/maps/documentation/javascript/reference/map#Map.fitBounds\n   */\n  fitBounds(bounds, padding) {\n    this._assertInitialized();\n    this.googleMap.fitBounds(bounds, padding);\n  }\n  /**\n   * See\n   * https://developers.google.com/maps/documentation/javascript/reference/map#Map.panBy\n   */\n  panBy(x, y) {\n    this._assertInitialized();\n    this.googleMap.panBy(x, y);\n  }\n  /**\n   * See\n   * https://developers.google.com/maps/documentation/javascript/reference/map#Map.panTo\n   */\n  panTo(latLng) {\n    this._assertInitialized();\n    this.googleMap.panTo(latLng);\n  }\n  /**\n   * See\n   * https://developers.google.com/maps/documentation/javascript/reference/map#Map.panToBounds\n   */\n  panToBounds(latLngBounds, padding) {\n    this._assertInitialized();\n    this.googleMap.panToBounds(latLngBounds, padding);\n  }\n  /**\n   * See\n   * https://developers.google.com/maps/documentation/javascript/reference/map#Map.getBounds\n   */\n  getBounds() {\n    this._assertInitialized();\n    return this.googleMap.getBounds() || null;\n  }\n  /**\n   * See\n   * https://developers.google.com/maps/documentation/javascript/reference/map#Map.getCenter\n   */\n  getCenter() {\n    this._assertInitialized();\n    return this.googleMap.getCenter();\n  }\n  /**\n   * See\n   * https://developers.google.com/maps/documentation/javascript/reference/map#Map.getClickableIcons\n   */\n  getClickableIcons() {\n    this._assertInitialized();\n    return this.googleMap.getClickableIcons();\n  }\n  /**\n   * See\n   * https://developers.google.com/maps/documentation/javascript/reference/map#Map.getHeading\n   */\n  getHeading() {\n    this._assertInitialized();\n    return this.googleMap.getHeading();\n  }\n  /**\n   * See\n   * https://developers.google.com/maps/documentation/javascript/reference/map#Map.getMapTypeId\n   */\n  getMapTypeId() {\n    this._assertInitialized();\n    return this.googleMap.getMapTypeId();\n  }\n  /**\n   * See\n   * https://developers.google.com/maps/documentation/javascript/reference/map#Map.getProjection\n   */\n  getProjection() {\n    this._assertInitialized();\n    return this.googleMap.getProjection() || null;\n  }\n  /**\n   * See\n   * https://developers.google.com/maps/documentation/javascript/reference/map#Map.getStreetView\n   */\n  getStreetView() {\n    this._assertInitialized();\n    return this.googleMap.getStreetView();\n  }\n  /**\n   * See\n   * https://developers.google.com/maps/documentation/javascript/reference/map#Map.getTilt\n   */\n  getTilt() {\n    this._assertInitialized();\n    return this.googleMap.getTilt();\n  }\n  /**\n   * See\n   * https://developers.google.com/maps/documentation/javascript/reference/map#Map.getZoom\n   */\n  getZoom() {\n    this._assertInitialized();\n    return this.googleMap.getZoom();\n  }\n  /**\n   * See\n   * https://developers.google.com/maps/documentation/javascript/reference/map#Map.controls\n   */\n  get controls() {\n    this._assertInitialized();\n    return this.googleMap.controls;\n  }\n  /**\n   * See\n   * https://developers.google.com/maps/documentation/javascript/reference/map#Map.data\n   */\n  get data() {\n    this._assertInitialized();\n    return this.googleMap.data;\n  }\n  /**\n   * See\n   * https://developers.google.com/maps/documentation/javascript/reference/map#Map.mapTypes\n   */\n  get mapTypes() {\n    this._assertInitialized();\n    return this.googleMap.mapTypes;\n  }\n  /**\n   * See\n   * https://developers.google.com/maps/documentation/javascript/reference/map#Map.overlayMapTypes\n   */\n  get overlayMapTypes() {\n    this._assertInitialized();\n    return this.googleMap.overlayMapTypes;\n  }\n  /** Returns a promise that resolves when the map has been initialized. */\n  _resolveMap() {\n    return this.googleMap ? Promise.resolve(this.googleMap) : this.mapInitialized.pipe(take(1)).toPromise();\n  }\n  _setSize() {\n    if (this._mapEl) {\n      const styles = this._mapEl.style;\n      styles.height = this.height === null ? '' : coerceCssPixelValue(this.height) || DEFAULT_HEIGHT;\n      styles.width = this.width === null ? '' : coerceCssPixelValue(this.width) || DEFAULT_WIDTH;\n    }\n  }\n  /** Combines the center and zoom and the other map options into a single object */\n  _combineOptions() {\n    const options = this._options || {};\n    return {\n      ...options,\n      // It's important that we set **some** kind of `center` and `zoom`, otherwise\n      // Google Maps will render a blank rectangle which looks broken.\n      center: this._center || options.center || DEFAULT_OPTIONS.center,\n      zoom: this._zoom ?? options.zoom ?? DEFAULT_OPTIONS.zoom,\n      // Passing in an undefined `mapTypeId` seems to break tile loading\n      // so make sure that we have some kind of default (see #22082).\n      mapTypeId: this.mapTypeId || options.mapTypeId || DEFAULT_OPTIONS.mapTypeId,\n      mapId: this.mapId || options.mapId\n    };\n  }\n  /** Asserts that the map has been initialized. */\n  _assertInitialized() {\n    if (!this.googleMap && (typeof ngDevMode === 'undefined' || ngDevMode)) {\n      throw Error('Cannot access Google Map information before the API has been initialized. ' + 'Please wait for the API to load before trying to interact with it.');\n    }\n  }\n  static ɵfac = function GoogleMap_Factory(__ngFactoryType__) {\n    return new (__ngFactoryType__ || GoogleMap)();\n  };\n  static ɵcmp = /* @__PURE__ */i0.ɵɵdefineComponent({\n    type: GoogleMap,\n    selectors: [[\"google-map\"]],\n    inputs: {\n      height: \"height\",\n      width: \"width\",\n      mapId: \"mapId\",\n      mapTypeId: \"mapTypeId\",\n      center: \"center\",\n      zoom: \"zoom\",\n      options: \"options\"\n    },\n    outputs: {\n      mapInitialized: \"mapInitialized\",\n      authFailure: \"authFailure\",\n      boundsChanged: \"boundsChanged\",\n      centerChanged: \"centerChanged\",\n      mapClick: \"mapClick\",\n      mapDblclick: \"mapDblclick\",\n      mapDrag: \"mapDrag\",\n      mapDragend: \"mapDragend\",\n      mapDragstart: \"mapDragstart\",\n      headingChanged: \"headingChanged\",\n      idle: \"idle\",\n      maptypeidChanged: \"maptypeidChanged\",\n      mapMousemove: \"mapMousemove\",\n      mapMouseout: \"mapMouseout\",\n      mapMouseover: \"mapMouseover\",\n      projectionChanged: \"projectionChanged\",\n      mapRightclick: \"mapRightclick\",\n      tilesloaded: \"tilesloaded\",\n      tiltChanged: \"tiltChanged\",\n      zoomChanged: \"zoomChanged\"\n    },\n    exportAs: [\"googleMap\"],\n    features: [i0.ɵɵNgOnChangesFeature],\n    ngContentSelectors: _c0,\n    decls: 2,\n    vars: 0,\n    consts: [[1, \"map-container\"]],\n    template: function GoogleMap_Template(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵprojectionDef();\n        i0.ɵɵdomElement(0, \"div\", 0);\n        i0.ɵɵprojection(1);\n      }\n    },\n    encapsulation: 2,\n    changeDetection: 0\n  });\n}\n(() => {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(GoogleMap, [{\n    type: Component,\n    args: [{\n      selector: 'google-map',\n      exportAs: 'googleMap',\n      changeDetection: ChangeDetectionStrategy.OnPush,\n      template: '<div class=\"map-container\"></div><ng-content />',\n      encapsulation: ViewEncapsulation.None\n    }]\n  }], () => [], {\n    height: [{\n      type: Input\n    }],\n    width: [{\n      type: Input\n    }],\n    mapId: [{\n      type: Input\n    }],\n    mapTypeId: [{\n      type: Input\n    }],\n    center: [{\n      type: Input\n    }],\n    zoom: [{\n      type: Input\n    }],\n    options: [{\n      type: Input\n    }],\n    mapInitialized: [{\n      type: Output\n    }],\n    authFailure: [{\n      type: Output\n    }],\n    boundsChanged: [{\n      type: Output\n    }],\n    centerChanged: [{\n      type: Output\n    }],\n    mapClick: [{\n      type: Output\n    }],\n    mapDblclick: [{\n      type: Output\n    }],\n    mapDrag: [{\n      type: Output\n    }],\n    mapDragend: [{\n      type: Output\n    }],\n    mapDragstart: [{\n      type: Output\n    }],\n    headingChanged: [{\n      type: Output\n    }],\n    idle: [{\n      type: Output\n    }],\n    maptypeidChanged: [{\n      type: Output\n    }],\n    mapMousemove: [{\n      type: Output\n    }],\n    mapMouseout: [{\n      type: Output\n    }],\n    mapMouseover: [{\n      type: Output\n    }],\n    projectionChanged: [{\n      type: Output\n    }],\n    mapRightclick: [{\n      type: Output\n    }],\n    tilesloaded: [{\n      type: Output\n    }],\n    tiltChanged: [{\n      type: Output\n    }],\n    zoomChanged: [{\n      type: Output\n    }]\n  });\n})();\nconst cssUnitsPattern = /([A-Za-z%]+)$/;\n/** Coerces a value to a CSS pixel value. */\nfunction coerceCssPixelValue(value) {\n  if (value == null) {\n    return '';\n  }\n  return cssUnitsPattern.test(value) ? value : `${value}px`;\n}\n\n// Workaround for: https://github.com/bazelbuild/rules_nodejs/issues/1265\nclass MapBaseLayer {\n  _map = inject(GoogleMap);\n  _ngZone = inject(NgZone);\n  constructor() {}\n  ngOnInit() {\n    if (this._map._isBrowser) {\n      this._ngZone.runOutsideAngular(() => {\n        this._initializeObject();\n      });\n      this._assertInitialized();\n      this._setMap();\n    }\n  }\n  ngOnDestroy() {\n    this._unsetMap();\n  }\n  _assertInitialized() {\n    if (!this._map.googleMap) {\n      throw Error('Cannot access Google Map information before the API has been initialized. ' + 'Please wait for the API to load before trying to interact with it.');\n    }\n  }\n  _initializeObject() {}\n  _setMap() {}\n  _unsetMap() {}\n  static ɵfac = function MapBaseLayer_Factory(__ngFactoryType__) {\n    return new (__ngFactoryType__ || MapBaseLayer)();\n  };\n  static ɵdir = /* @__PURE__ */i0.ɵɵdefineDirective({\n    type: MapBaseLayer,\n    selectors: [[\"map-base-layer\"]],\n    exportAs: [\"mapBaseLayer\"]\n  });\n}\n(() => {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(MapBaseLayer, [{\n    type: Directive,\n    args: [{\n      selector: 'map-base-layer',\n      exportAs: 'mapBaseLayer'\n    }]\n  }], () => [], null);\n})();\n\n// Workaround for: https://github.com/bazelbuild/rules_nodejs/issues/1265\n/**\n * Angular component that renders a Google Maps Bicycling Layer via the Google Maps JavaScript API.\n *\n * See developers.google.com/maps/documentation/javascript/reference/map#BicyclingLayer\n */\nclass MapBicyclingLayer {\n  _map = inject(GoogleMap);\n  _zone = inject(NgZone);\n  /**\n   * The underlying google.maps.BicyclingLayer object.\n   *\n   * See developers.google.com/maps/documentation/javascript/reference/map#BicyclingLayer\n   */\n  bicyclingLayer;\n  /** Event emitted when the bicycling layer is initialized. */\n  bicyclingLayerInitialized = new EventEmitter();\n  ngOnInit() {\n    if (this._map._isBrowser) {\n      if (google.maps.BicyclingLayer && this._map.googleMap) {\n        this._initialize(this._map.googleMap, google.maps.BicyclingLayer);\n      } else {\n        this._zone.runOutsideAngular(() => {\n          Promise.all([this._map._resolveMap(), google.maps.importLibrary('maps')]).then(([map, lib]) => {\n            this._initialize(map, lib.BicyclingLayer);\n          });\n        });\n      }\n    }\n  }\n  _initialize(map, layerConstructor) {\n    this._zone.runOutsideAngular(() => {\n      this.bicyclingLayer = new layerConstructor();\n      this.bicyclingLayerInitialized.emit(this.bicyclingLayer);\n      this._assertLayerInitialized();\n      this.bicyclingLayer.setMap(map);\n    });\n  }\n  ngOnDestroy() {\n    this.bicyclingLayer?.setMap(null);\n  }\n  _assertLayerInitialized() {\n    if (!this.bicyclingLayer) {\n      throw Error('Cannot interact with a Google Map Bicycling Layer before it has been initialized. ' + 'Please wait for the Transit Layer to load before trying to interact with it.');\n    }\n  }\n  static ɵfac = function MapBicyclingLayer_Factory(__ngFactoryType__) {\n    return new (__ngFactoryType__ || MapBicyclingLayer)();\n  };\n  static ɵdir = /* @__PURE__ */i0.ɵɵdefineDirective({\n    type: MapBicyclingLayer,\n    selectors: [[\"map-bicycling-layer\"]],\n    outputs: {\n      bicyclingLayerInitialized: \"bicyclingLayerInitialized\"\n    },\n    exportAs: [\"mapBicyclingLayer\"]\n  });\n}\n(() => {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(MapBicyclingLayer, [{\n    type: Directive,\n    args: [{\n      selector: 'map-bicycling-layer',\n      exportAs: 'mapBicyclingLayer'\n    }]\n  }], null, {\n    bicyclingLayerInitialized: [{\n      type: Output\n    }]\n  });\n})();\n\n// Workaround for: https://github.com/bazelbuild/rules_nodejs/issues/1265\n/**\n * Angular component that renders a Google Maps Circle via the Google Maps JavaScript API.\n * @see developers.google.com/maps/documentation/javascript/reference/polygon#Circle\n */\nclass MapCircle {\n  _map = inject(GoogleMap);\n  _ngZone = inject(NgZone);\n  _eventManager = new MapEventManager(inject(NgZone));\n  _options = new BehaviorSubject({});\n  _center = new BehaviorSubject(undefined);\n  _radius = new BehaviorSubject(undefined);\n  _destroyed = new Subject();\n  /**\n   * Underlying google.maps.Circle object.\n   *\n   * @see developers.google.com/maps/documentation/javascript/reference/polygon#Circle\n   */\n  circle; // initialized in ngOnInit\n  set options(options) {\n    this._options.next(options || {});\n  }\n  set center(center) {\n    this._center.next(center);\n  }\n  set radius(radius) {\n    this._radius.next(radius);\n  }\n  /**\n   * @see\n   * developers.google.com/maps/documentation/javascript/reference/polygon#Circle.center_changed\n   */\n  centerChanged = this._eventManager.getLazyEmitter('center_changed');\n  /**\n   * @see\n   * developers.google.com/maps/documentation/javascript/reference/polygon#Circle.click\n   */\n  circleClick = this._eventManager.getLazyEmitter('click');\n  /**\n   * @see\n   * developers.google.com/maps/documentation/javascript/reference/polygon#Circle.dblclick\n   */\n  circleDblclick = this._eventManager.getLazyEmitter('dblclick');\n  /**\n   * @see\n   * developers.google.com/maps/documentation/javascript/reference/polygon#Circle.drag\n   */\n  circleDrag = this._eventManager.getLazyEmitter('drag');\n  /**\n   * @see\n   * developers.google.com/maps/documentation/javascript/reference/polygon#Circle.dragend\n   */\n  circleDragend = this._eventManager.getLazyEmitter('dragend');\n  /**\n   * @see\n   * developers.google.com/maps/documentation/javascript/reference/polygon#Circle.dragstart\n   */\n  circleDragstart = this._eventManager.getLazyEmitter('dragstart');\n  /**\n   * @see\n   * developers.google.com/maps/documentation/javascript/reference/polygon#Circle.mousedown\n   */\n  circleMousedown = this._eventManager.getLazyEmitter('mousedown');\n  /**\n   * @see\n   * developers.google.com/maps/documentation/javascript/reference/polygon#Circle.mousemove\n   */\n  circleMousemove = this._eventManager.getLazyEmitter('mousemove');\n  /**\n   * @see\n   * developers.google.com/maps/documentation/javascript/reference/polygon#Circle.mouseout\n   */\n  circleMouseout = this._eventManager.getLazyEmitter('mouseout');\n  /**\n   * @see\n   * developers.google.com/maps/documentation/javascript/reference/polygon#Circle.mouseover\n   */\n  circleMouseover = this._eventManager.getLazyEmitter('mouseover');\n  /**\n   * @see\n   * developers.google.com/maps/documentation/javascript/reference/polygon#Circle.mouseup\n   */\n  circleMouseup = this._eventManager.getLazyEmitter('mouseup');\n  /**\n   * @see\n   * developers.google.com/maps/documentation/javascript/reference/polygon#Circle.radius_changed\n   */\n  radiusChanged = this._eventManager.getLazyEmitter('radius_changed');\n  /**\n   * @see\n   * developers.google.com/maps/documentation/javascript/reference/polygon#Circle.rightclick\n   */\n  circleRightclick = this._eventManager.getLazyEmitter('rightclick');\n  /** Event emitted when the circle is initialized. */\n  circleInitialized = new EventEmitter();\n  constructor() {}\n  ngOnInit() {\n    if (!this._map._isBrowser) {\n      return;\n    }\n    this._combineOptions().pipe(take(1)).subscribe(options => {\n      if (google.maps.Circle && this._map.googleMap) {\n        this._initialize(this._map.googleMap, google.maps.Circle, options);\n      } else {\n        this._ngZone.runOutsideAngular(() => {\n          Promise.all([this._map._resolveMap(), google.maps.importLibrary('maps')]).then(([map, lib]) => {\n            this._initialize(map, lib.Circle, options);\n          });\n        });\n      }\n    });\n  }\n  _initialize(map, circleConstructor, options) {\n    // Create the object outside the zone so its events don't trigger change detection.\n    // We'll bring it back in inside the `MapEventManager` only for the events that the\n    // user has subscribed to.\n    this._ngZone.runOutsideAngular(() => {\n      this.circle = new circleConstructor(options);\n      this._assertInitialized();\n      this.circle.setMap(map);\n      this._eventManager.setTarget(this.circle);\n      this.circleInitialized.emit(this.circle);\n      this._watchForOptionsChanges();\n      this._watchForCenterChanges();\n      this._watchForRadiusChanges();\n    });\n  }\n  ngOnDestroy() {\n    this._eventManager.destroy();\n    this._destroyed.next();\n    this._destroyed.complete();\n    this.circle?.setMap(null);\n  }\n  /**\n   * @see\n   * developers.google.com/maps/documentation/javascript/reference/polygon#Circle.getBounds\n   */\n  getBounds() {\n    this._assertInitialized();\n    return this.circle.getBounds();\n  }\n  /**\n   * @see\n   * developers.google.com/maps/documentation/javascript/reference/polygon#Circle.getCenter\n   */\n  getCenter() {\n    this._assertInitialized();\n    return this.circle.getCenter();\n  }\n  /**\n   * @see\n   * developers.google.com/maps/documentation/javascript/reference/polygon#Circle.getDraggable\n   */\n  getDraggable() {\n    this._assertInitialized();\n    return this.circle.getDraggable();\n  }\n  /**\n   * @see\n   * developers.google.com/maps/documentation/javascript/reference/polygon#Circle.getEditable\n   */\n  getEditable() {\n    this._assertInitialized();\n    return this.circle.getEditable();\n  }\n  /**\n   * @see\n   * developers.google.com/maps/documentation/javascript/reference/polygon#Circle.getRadius\n   */\n  getRadius() {\n    this._assertInitialized();\n    return this.circle.getRadius();\n  }\n  /**\n   * @see\n   * developers.google.com/maps/documentation/javascript/reference/polygon#Circle.getVisible\n   */\n  getVisible() {\n    this._assertInitialized();\n    return this.circle.getVisible();\n  }\n  _combineOptions() {\n    return combineLatest([this._options, this._center, this._radius]).pipe(map(([options, center, radius]) => {\n      const combinedOptions = {\n        ...options,\n        center: center || options.center,\n        radius: radius !== undefined ? radius : options.radius\n      };\n      return combinedOptions;\n    }));\n  }\n  _watchForOptionsChanges() {\n    this._options.pipe(takeUntil(this._destroyed)).subscribe(options => {\n      this._assertInitialized();\n      this.circle.setOptions(options);\n    });\n  }\n  _watchForCenterChanges() {\n    this._center.pipe(takeUntil(this._destroyed)).subscribe(center => {\n      if (center) {\n        this._assertInitialized();\n        this.circle.setCenter(center);\n      }\n    });\n  }\n  _watchForRadiusChanges() {\n    this._radius.pipe(takeUntil(this._destroyed)).subscribe(radius => {\n      if (radius !== undefined) {\n        this._assertInitialized();\n        this.circle.setRadius(radius);\n      }\n    });\n  }\n  _assertInitialized() {\n    if (typeof ngDevMode === 'undefined' || ngDevMode) {\n      if (!this.circle) {\n        throw Error('Cannot interact with a Google Map Circle before it has been ' + 'initialized. Please wait for the Circle to load before trying to interact with it.');\n      }\n    }\n  }\n  static ɵfac = function MapCircle_Factory(__ngFactoryType__) {\n    return new (__ngFactoryType__ || MapCircle)();\n  };\n  static ɵdir = /* @__PURE__ */i0.ɵɵdefineDirective({\n    type: MapCircle,\n    selectors: [[\"map-circle\"]],\n    inputs: {\n      options: \"options\",\n      center: \"center\",\n      radius: \"radius\"\n    },\n    outputs: {\n      centerChanged: \"centerChanged\",\n      circleClick: \"circleClick\",\n      circleDblclick: \"circleDblclick\",\n      circleDrag: \"circleDrag\",\n      circleDragend: \"circleDragend\",\n      circleDragstart: \"circleDragstart\",\n      circleMousedown: \"circleMousedown\",\n      circleMousemove: \"circleMousemove\",\n      circleMouseout: \"circleMouseout\",\n      circleMouseover: \"circleMouseover\",\n      circleMouseup: \"circleMouseup\",\n      radiusChanged: \"radiusChanged\",\n      circleRightclick: \"circleRightclick\",\n      circleInitialized: \"circleInitialized\"\n    },\n    exportAs: [\"mapCircle\"]\n  });\n}\n(() => {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(MapCircle, [{\n    type: Directive,\n    args: [{\n      selector: 'map-circle',\n      exportAs: 'mapCircle'\n    }]\n  }], () => [], {\n    options: [{\n      type: Input\n    }],\n    center: [{\n      type: Input\n    }],\n    radius: [{\n      type: Input\n    }],\n    centerChanged: [{\n      type: Output\n    }],\n    circleClick: [{\n      type: Output\n    }],\n    circleDblclick: [{\n      type: Output\n    }],\n    circleDrag: [{\n      type: Output\n    }],\n    circleDragend: [{\n      type: Output\n    }],\n    circleDragstart: [{\n      type: Output\n    }],\n    circleMousedown: [{\n      type: Output\n    }],\n    circleMousemove: [{\n      type: Output\n    }],\n    circleMouseout: [{\n      type: Output\n    }],\n    circleMouseover: [{\n      type: Output\n    }],\n    circleMouseup: [{\n      type: Output\n    }],\n    radiusChanged: [{\n      type: Output\n    }],\n    circleRightclick: [{\n      type: Output\n    }],\n    circleInitialized: [{\n      type: Output\n    }]\n  });\n})();\n\n// Workaround for: https://github.com/bazelbuild/rules_nodejs/issues/1265\n/**\n * Angular component that renders a Google Maps Directions Renderer via the Google Maps\n * JavaScript API.\n *\n * See developers.google.com/maps/documentation/javascript/reference/directions#DirectionsRenderer\n */\nclass MapDirectionsRenderer {\n  _googleMap = inject(GoogleMap);\n  _ngZone = inject(NgZone);\n  _eventManager = new MapEventManager(inject(NgZone));\n  /**\n   * See developers.google.com/maps/documentation/javascript/reference/directions\n   * #DirectionsRendererOptions.directions\n   */\n  set directions(directions) {\n    this._directions = directions;\n  }\n  _directions;\n  /**\n   * See developers.google.com/maps/documentation/javascript/reference/directions\n   * #DirectionsRendererOptions\n   */\n  set options(options) {\n    this._options = options;\n  }\n  _options;\n  /**\n   * See developers.google.com/maps/documentation/javascript/reference/directions\n   * #DirectionsRenderer.directions_changed\n   */\n  directionsChanged = this._eventManager.getLazyEmitter('directions_changed');\n  /** Event emitted when the directions renderer is initialized. */\n  directionsRendererInitialized = new EventEmitter();\n  /** The underlying google.maps.DirectionsRenderer object. */\n  directionsRenderer;\n  constructor() {}\n  ngOnInit() {\n    if (this._googleMap._isBrowser) {\n      if (google.maps.DirectionsRenderer && this._googleMap.googleMap) {\n        this._initialize(this._googleMap.googleMap, google.maps.DirectionsRenderer);\n      } else {\n        this._ngZone.runOutsideAngular(() => {\n          Promise.all([this._googleMap._resolveMap(), google.maps.importLibrary('routes')]).then(([map, lib]) => {\n            this._initialize(map, lib.DirectionsRenderer);\n          });\n        });\n      }\n    }\n  }\n  _initialize(map, rendererConstructor) {\n    // Create the object outside the zone so its events don't trigger change detection.\n    // We'll bring it back in inside the `MapEventManager` only for the events that the\n    // user has subscribed to.\n    this._ngZone.runOutsideAngular(() => {\n      this.directionsRenderer = new rendererConstructor(this._combineOptions());\n      this._assertInitialized();\n      this.directionsRenderer.setMap(map);\n      this._eventManager.setTarget(this.directionsRenderer);\n      this.directionsRendererInitialized.emit(this.directionsRenderer);\n    });\n  }\n  ngOnChanges(changes) {\n    if (this.directionsRenderer) {\n      if (changes['options']) {\n        this.directionsRenderer.setOptions(this._combineOptions());\n      }\n      if (changes['directions'] && this._directions !== undefined) {\n        this.directionsRenderer.setDirections(this._directions);\n      }\n    }\n  }\n  ngOnDestroy() {\n    this._eventManager.destroy();\n    this.directionsRenderer?.setMap(null);\n  }\n  /**\n   * See developers.google.com/maps/documentation/javascript/reference/directions\n   * #DirectionsRenderer.getDirections\n   */\n  getDirections() {\n    this._assertInitialized();\n    return this.directionsRenderer.getDirections();\n  }\n  /**\n   * See developers.google.com/maps/documentation/javascript/reference/directions\n   * #DirectionsRenderer.getPanel\n   */\n  getPanel() {\n    this._assertInitialized();\n    return this.directionsRenderer.getPanel();\n  }\n  /**\n   * See developers.google.com/maps/documentation/javascript/reference/directions\n   * #DirectionsRenderer.getRouteIndex\n   */\n  getRouteIndex() {\n    this._assertInitialized();\n    return this.directionsRenderer.getRouteIndex();\n  }\n  _combineOptions() {\n    const options = this._options || {};\n    return {\n      ...options,\n      directions: this._directions || options.directions,\n      map: this._googleMap.googleMap\n    };\n  }\n  _assertInitialized() {\n    if (typeof ngDevMode === 'undefined' || ngDevMode) {\n      if (!this.directionsRenderer) {\n        throw Error('Cannot interact with a Google Map Directions Renderer before it has been ' + 'initialized. Please wait for the Directions Renderer to load before trying ' + 'to interact with it.');\n      }\n    }\n  }\n  static ɵfac = function MapDirectionsRenderer_Factory(__ngFactoryType__) {\n    return new (__ngFactoryType__ || MapDirectionsRenderer)();\n  };\n  static ɵdir = /* @__PURE__ */i0.ɵɵdefineDirective({\n    type: MapDirectionsRenderer,\n    selectors: [[\"map-directions-renderer\"]],\n    inputs: {\n      directions: \"directions\",\n      options: \"options\"\n    },\n    outputs: {\n      directionsChanged: \"directionsChanged\",\n      directionsRendererInitialized: \"directionsRendererInitialized\"\n    },\n    exportAs: [\"mapDirectionsRenderer\"],\n    features: [i0.ɵɵNgOnChangesFeature]\n  });\n}\n(() => {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(MapDirectionsRenderer, [{\n    type: Directive,\n    args: [{\n      selector: 'map-directions-renderer',\n      exportAs: 'mapDirectionsRenderer'\n    }]\n  }], () => [], {\n    directions: [{\n      type: Input\n    }],\n    options: [{\n      type: Input\n    }],\n    directionsChanged: [{\n      type: Output\n    }],\n    directionsRendererInitialized: [{\n      type: Output\n    }]\n  });\n})();\n\n// Workaround for: https://github.com/bazelbuild/rules_nodejs/issues/1265\n/**\n * Angular component that renders a Google Maps Ground Overlay via the Google Maps JavaScript API.\n *\n * See developers.google.com/maps/documentation/javascript/reference/image-overlay#GroundOverlay\n */\nclass MapGroundOverlay {\n  _map = inject(GoogleMap);\n  _ngZone = inject(NgZone);\n  _eventManager = new MapEventManager(inject(NgZone));\n  _opacity = new BehaviorSubject(1);\n  _url = new BehaviorSubject('');\n  _bounds = new BehaviorSubject(undefined);\n  _destroyed = new Subject();\n  _hasWatchers;\n  /**\n   * The underlying google.maps.GroundOverlay object.\n   *\n   * See developers.google.com/maps/documentation/javascript/reference/image-overlay#GroundOverlay\n   */\n  groundOverlay;\n  /** URL of the image that will be shown in the overlay. */\n  set url(url) {\n    this._url.next(url);\n  }\n  /** Bounds for the overlay. */\n  get bounds() {\n    return this._bounds.value;\n  }\n  set bounds(bounds) {\n    this._bounds.next(bounds);\n  }\n  /** Whether the overlay is clickable */\n  clickable = false;\n  /** Opacity of the overlay. */\n  set opacity(opacity) {\n    this._opacity.next(opacity);\n  }\n  /**\n   * See\n   * developers.google.com/maps/documentation/javascript/reference/image-overlay#GroundOverlay.click\n   */\n  mapClick = this._eventManager.getLazyEmitter('click');\n  /**\n   * See\n   * developers.google.com/maps/documentation/javascript/reference/image-overlay\n   * #GroundOverlay.dblclick\n   */\n  mapDblclick = this._eventManager.getLazyEmitter('dblclick');\n  /** Event emitted when the ground overlay is initialized. */\n  groundOverlayInitialized = new EventEmitter();\n  constructor() {}\n  ngOnInit() {\n    if (this._map._isBrowser) {\n      // The ground overlay setup is slightly different from the other Google Maps objects in that\n      // we have to recreate the `GroundOverlay` object whenever the bounds change, because\n      // Google Maps doesn't provide an API to update the bounds of an existing overlay.\n      this._bounds.pipe(takeUntil(this._destroyed)).subscribe(bounds => {\n        if (this.groundOverlay) {\n          this.groundOverlay.setMap(null);\n          this.groundOverlay = undefined;\n        }\n        if (!bounds) {\n          return;\n        }\n        if (google.maps.GroundOverlay && this._map.googleMap) {\n          this._initialize(this._map.googleMap, google.maps.GroundOverlay, bounds);\n        } else {\n          this._ngZone.runOutsideAngular(() => {\n            Promise.all([this._map._resolveMap(), google.maps.importLibrary('maps')]).then(([map, lib]) => {\n              this._initialize(map, lib.GroundOverlay, bounds);\n            });\n          });\n        }\n      });\n    }\n  }\n  _initialize(map, overlayConstructor, bounds) {\n    // Create the object outside the zone so its events don't trigger change detection.\n    // We'll bring it back in inside the `MapEventManager` only for the events that the\n    // user has subscribed to.\n    this._ngZone.runOutsideAngular(() => {\n      this.groundOverlay = new overlayConstructor(this._url.getValue(), bounds, {\n        clickable: this.clickable,\n        opacity: this._opacity.value\n      });\n      this._assertInitialized();\n      this.groundOverlay.setMap(map);\n      this._eventManager.setTarget(this.groundOverlay);\n      this.groundOverlayInitialized.emit(this.groundOverlay);\n      // We only need to set up the watchers once.\n      if (!this._hasWatchers) {\n        this._hasWatchers = true;\n        this._watchForOpacityChanges();\n        this._watchForUrlChanges();\n      }\n    });\n  }\n  ngOnDestroy() {\n    this._eventManager.destroy();\n    this._destroyed.next();\n    this._destroyed.complete();\n    this.groundOverlay?.setMap(null);\n  }\n  /**\n   * See\n   * developers.google.com/maps/documentation/javascript/reference/image-overlay\n   * #GroundOverlay.getBounds\n   */\n  getBounds() {\n    this._assertInitialized();\n    return this.groundOverlay.getBounds();\n  }\n  /**\n   * See\n   * developers.google.com/maps/documentation/javascript/reference/image-overlay\n   * #GroundOverlay.getOpacity\n   */\n  getOpacity() {\n    this._assertInitialized();\n    return this.groundOverlay.getOpacity();\n  }\n  /**\n   * See\n   * developers.google.com/maps/documentation/javascript/reference/image-overlay\n   * #GroundOverlay.getUrl\n   */\n  getUrl() {\n    this._assertInitialized();\n    return this.groundOverlay.getUrl();\n  }\n  _watchForOpacityChanges() {\n    this._opacity.pipe(takeUntil(this._destroyed)).subscribe(opacity => {\n      if (opacity != null) {\n        this.groundOverlay?.setOpacity(opacity);\n      }\n    });\n  }\n  _watchForUrlChanges() {\n    this._url.pipe(takeUntil(this._destroyed)).subscribe(url => {\n      const overlay = this.groundOverlay;\n      if (overlay) {\n        overlay.set('url', url);\n        // Google Maps only redraws the overlay if we re-set the map.\n        overlay.setMap(null);\n        overlay.setMap(this._map.googleMap);\n      }\n    });\n  }\n  _assertInitialized() {\n    if (typeof ngDevMode === 'undefined' || ngDevMode) {\n      if (!this.groundOverlay) {\n        throw Error('Cannot interact with a Google Map GroundOverlay before it has been initialized. ' + 'Please wait for the GroundOverlay to load before trying to interact with it.');\n      }\n    }\n  }\n  static ɵfac = function MapGroundOverlay_Factory(__ngFactoryType__) {\n    return new (__ngFactoryType__ || MapGroundOverlay)();\n  };\n  static ɵdir = /* @__PURE__ */i0.ɵɵdefineDirective({\n    type: MapGroundOverlay,\n    selectors: [[\"map-ground-overlay\"]],\n    inputs: {\n      url: \"url\",\n      bounds: \"bounds\",\n      clickable: \"clickable\",\n      opacity: \"opacity\"\n    },\n    outputs: {\n      mapClick: \"mapClick\",\n      mapDblclick: \"mapDblclick\",\n      groundOverlayInitialized: \"groundOverlayInitialized\"\n    },\n    exportAs: [\"mapGroundOverlay\"]\n  });\n}\n(() => {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(MapGroundOverlay, [{\n    type: Directive,\n    args: [{\n      selector: 'map-ground-overlay',\n      exportAs: 'mapGroundOverlay'\n    }]\n  }], () => [], {\n    url: [{\n      type: Input\n    }],\n    bounds: [{\n      type: Input\n    }],\n    clickable: [{\n      type: Input\n    }],\n    opacity: [{\n      type: Input\n    }],\n    mapClick: [{\n      type: Output\n    }],\n    mapDblclick: [{\n      type: Output\n    }],\n    groundOverlayInitialized: [{\n      type: Output\n    }]\n  });\n})();\n\n// Workaround for: https://github.com/bazelbuild/rules_nodejs/issues/1265\n/**\n * Angular component that renders a Google Maps info window via the Google Maps JavaScript API.\n *\n * See developers.google.com/maps/documentation/javascript/reference/info-window\n */\nclass MapInfoWindow {\n  _googleMap = inject(GoogleMap);\n  _elementRef = inject(ElementRef);\n  _ngZone = inject(NgZone);\n  _eventManager = new MapEventManager(inject(NgZone));\n  _options = new BehaviorSubject({});\n  _position = new BehaviorSubject(undefined);\n  _destroy = new Subject();\n  /**\n   * Underlying google.maps.InfoWindow\n   *\n   * See developers.google.com/maps/documentation/javascript/reference/info-window#InfoWindow\n   */\n  infoWindow;\n  set options(options) {\n    this._options.next(options || {});\n  }\n  set position(position) {\n    this._position.next(position);\n  }\n  /**\n   * See\n   * developers.google.com/maps/documentation/javascript/reference/info-window#InfoWindow.closeclick\n   */\n  closeclick = this._eventManager.getLazyEmitter('closeclick');\n  /**\n   * See\n   * developers.google.com/maps/documentation/javascript/reference/info-window\n   * #InfoWindow.content_changed\n   */\n  contentChanged = this._eventManager.getLazyEmitter('content_changed');\n  /**\n   * See\n   * developers.google.com/maps/documentation/javascript/reference/info-window#InfoWindow.domready\n   */\n  domready = this._eventManager.getLazyEmitter('domready');\n  /**\n   * See\n   * developers.google.com/maps/documentation/javascript/reference/info-window\n   * #InfoWindow.position_changed\n   */\n  positionChanged = this._eventManager.getLazyEmitter('position_changed');\n  /**\n   * See\n   * developers.google.com/maps/documentation/javascript/reference/info-window\n   * #InfoWindow.zindex_changed\n   */\n  zindexChanged = this._eventManager.getLazyEmitter('zindex_changed');\n  /** Event emitted when the info window is initialized. */\n  infoWindowInitialized = new EventEmitter();\n  constructor() {}\n  ngOnInit() {\n    if (this._googleMap._isBrowser) {\n      this._combineOptions().pipe(take(1)).subscribe(options => {\n        if (google.maps.InfoWindow) {\n          this._initialize(google.maps.InfoWindow, options);\n        } else {\n          this._ngZone.runOutsideAngular(() => {\n            google.maps.importLibrary('maps').then(lib => {\n              this._initialize(lib.InfoWindow, options);\n            });\n          });\n        }\n      });\n    }\n  }\n  _initialize(infoWindowConstructor, options) {\n    // Create the object outside the zone so its events don't trigger change detection.\n    // We'll bring it back in inside the `MapEventManager` only for the events that the\n    // user has subscribed to.\n    this._ngZone.runOutsideAngular(() => {\n      this.infoWindow = new infoWindowConstructor(options);\n      this._eventManager.setTarget(this.infoWindow);\n      this.infoWindowInitialized.emit(this.infoWindow);\n      this._watchForOptionsChanges();\n      this._watchForPositionChanges();\n    });\n  }\n  ngOnDestroy() {\n    this._eventManager.destroy();\n    this._destroy.next();\n    this._destroy.complete();\n    // If no info window has been created on the server, we do not try closing it.\n    // On the server, an info window cannot be created and this would cause errors.\n    if (this.infoWindow) {\n      this.close();\n    }\n  }\n  /**\n   * See developers.google.com/maps/documentation/javascript/reference/info-window#InfoWindow.close\n   */\n  close() {\n    this._assertInitialized();\n    this.infoWindow.close();\n  }\n  /**\n   * See\n   * developers.google.com/maps/documentation/javascript/reference/info-window#InfoWindow.getContent\n   */\n  getContent() {\n    this._assertInitialized();\n    return this.infoWindow.getContent() || null;\n  }\n  /**\n   * See\n   * developers.google.com/maps/documentation/javascript/reference/info-window\n   * #InfoWindow.getPosition\n   */\n  getPosition() {\n    this._assertInitialized();\n    return this.infoWindow.getPosition() || null;\n  }\n  /**\n   * See\n   * developers.google.com/maps/documentation/javascript/reference/info-window#InfoWindow.getZIndex\n   */\n  getZIndex() {\n    this._assertInitialized();\n    return this.infoWindow.getZIndex();\n  }\n  /**\n   * Opens the MapInfoWindow using the provided AdvancedMarkerElement.\n   * @deprecated Use the `open` method instead.\n   * @breaking-change 20.0.0\n   */\n  openAdvancedMarkerElement(advancedMarkerElement, content) {\n    this.open({\n      getAnchor: () => advancedMarkerElement\n    }, undefined, content);\n  }\n  /**\n   * Opens the MapInfoWindow using the provided anchor. If the anchor is not set,\n   * then the position property of the options input is used instead.\n   */\n  open(anchor, shouldFocus, content) {\n    this._assertInitialized();\n    if ((typeof ngDevMode === 'undefined' || ngDevMode) && anchor && !anchor.getAnchor) {\n      throw new Error('Specified anchor does not implement the `getAnchor` method. ' + 'It cannot be used to open an info window.');\n    }\n    const anchorObject = anchor ? anchor.getAnchor() : undefined;\n    // Prevent the info window from initializing when trying to reopen on the same anchor.\n    // Note that when the window is opened for the first time, the anchor will always be\n    // undefined. If that's the case, we have to allow it to open in order to handle the\n    // case where the window doesn't have an anchor, but is placed at a particular position.\n    if (this.infoWindow.get('anchor') !== anchorObject || !anchorObject) {\n      // If no explicit content is provided, it is taken from the DOM node.\n      // If it is, we need to hide it so it doesn't take up space on the page.\n      this._elementRef.nativeElement.style.display = content ? 'none' : '';\n      if (content) {\n        this.infoWindow.setContent(content);\n      }\n      this.infoWindow.open({\n        map: this._googleMap.googleMap,\n        anchor: anchorObject,\n        shouldFocus\n      });\n    }\n  }\n  _combineOptions() {\n    return combineLatest([this._options, this._position]).pipe(map(([options, position]) => {\n      const combinedOptions = {\n        ...options,\n        position: position || options.position,\n        content: this._elementRef.nativeElement\n      };\n      return combinedOptions;\n    }));\n  }\n  _watchForOptionsChanges() {\n    this._options.pipe(takeUntil(this._destroy)).subscribe(options => {\n      this._assertInitialized();\n      this.infoWindow.setOptions(options);\n    });\n  }\n  _watchForPositionChanges() {\n    this._position.pipe(takeUntil(this._destroy)).subscribe(position => {\n      if (position) {\n        this._assertInitialized();\n        this.infoWindow.setPosition(position);\n      }\n    });\n  }\n  _assertInitialized() {\n    if (typeof ngDevMode === 'undefined' || ngDevMode) {\n      if (!this.infoWindow) {\n        throw Error('Cannot interact with a Google Map Info Window before it has been ' + 'initialized. Please wait for the Info Window to load before trying to interact with ' + 'it.');\n      }\n    }\n  }\n  static ɵfac = function MapInfoWindow_Factory(__ngFactoryType__) {\n    return new (__ngFactoryType__ || MapInfoWindow)();\n  };\n  static ɵdir = /* @__PURE__ */i0.ɵɵdefineDirective({\n    type: MapInfoWindow,\n    selectors: [[\"map-info-window\"]],\n    hostAttrs: [2, \"display\", \"none\"],\n    inputs: {\n      options: \"options\",\n      position: \"position\"\n    },\n    outputs: {\n      closeclick: \"closeclick\",\n      contentChanged: \"contentChanged\",\n      domready: \"domready\",\n      positionChanged: \"positionChanged\",\n      zindexChanged: \"zindexChanged\",\n      infoWindowInitialized: \"infoWindowInitialized\"\n    },\n    exportAs: [\"mapInfoWindow\"]\n  });\n}\n(() => {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(MapInfoWindow, [{\n    type: Directive,\n    args: [{\n      selector: 'map-info-window',\n      exportAs: 'mapInfoWindow',\n      host: {\n        'style': 'display: none'\n      }\n    }]\n  }], () => [], {\n    options: [{\n      type: Input\n    }],\n    position: [{\n      type: Input\n    }],\n    closeclick: [{\n      type: Output\n    }],\n    contentChanged: [{\n      type: Output\n    }],\n    domready: [{\n      type: Output\n    }],\n    positionChanged: [{\n      type: Output\n    }],\n    zindexChanged: [{\n      type: Output\n    }],\n    infoWindowInitialized: [{\n      type: Output\n    }]\n  });\n})();\n\n// Workaround for: https://github.com/bazelbuild/rules_nodejs/issues/1265\n/**\n * Angular component that renders a Google Maps KML Layer via the Google Maps JavaScript API.\n *\n * See developers.google.com/maps/documentation/javascript/reference/kml#KmlLayer\n */\nclass MapKmlLayer {\n  _map = inject(GoogleMap);\n  _ngZone = inject(NgZone);\n  _eventManager = new MapEventManager(inject(NgZone));\n  _options = new BehaviorSubject({});\n  _url = new BehaviorSubject('');\n  _destroyed = new Subject();\n  /**\n   * The underlying google.maps.KmlLayer object.\n   *\n   * See developers.google.com/maps/documentation/javascript/reference/kml#KmlLayer\n   */\n  kmlLayer;\n  set options(options) {\n    this._options.next(options || {});\n  }\n  set url(url) {\n    this._url.next(url);\n  }\n  /**\n   * See developers.google.com/maps/documentation/javascript/reference/kml#KmlLayer.click\n   */\n  kmlClick = this._eventManager.getLazyEmitter('click');\n  /**\n   * See\n   * developers.google.com/maps/documentation/javascript/reference/kml\n   * #KmlLayer.defaultviewport_changed\n   */\n  defaultviewportChanged = this._eventManager.getLazyEmitter('defaultviewport_changed');\n  /**\n   * See developers.google.com/maps/documentation/javascript/reference/kml#KmlLayer.status_changed\n   */\n  statusChanged = this._eventManager.getLazyEmitter('status_changed');\n  /** Event emitted when the KML layer is initialized. */\n  kmlLayerInitialized = new EventEmitter();\n  constructor() {}\n  ngOnInit() {\n    if (this._map._isBrowser) {\n      this._combineOptions().pipe(take(1)).subscribe(options => {\n        if (google.maps.KmlLayer && this._map.googleMap) {\n          this._initialize(this._map.googleMap, google.maps.KmlLayer, options);\n        } else {\n          this._ngZone.runOutsideAngular(() => {\n            Promise.all([this._map._resolveMap(), google.maps.importLibrary('maps')]).then(([map, lib]) => {\n              this._initialize(map, lib.KmlLayer, options);\n            });\n          });\n        }\n      });\n    }\n  }\n  _initialize(map, layerConstructor, options) {\n    // Create the object outside the zone so its events don't trigger change detection.\n    // We'll bring it back in inside the `MapEventManager` only for the events that the\n    // user has subscribed to.\n    this._ngZone.runOutsideAngular(() => {\n      this.kmlLayer = new layerConstructor(options);\n      this._assertInitialized();\n      this.kmlLayer.setMap(map);\n      this._eventManager.setTarget(this.kmlLayer);\n      this.kmlLayerInitialized.emit(this.kmlLayer);\n      this._watchForOptionsChanges();\n      this._watchForUrlChanges();\n    });\n  }\n  ngOnDestroy() {\n    this._eventManager.destroy();\n    this._destroyed.next();\n    this._destroyed.complete();\n    this.kmlLayer?.setMap(null);\n  }\n  /**\n   * See\n   * developers.google.com/maps/documentation/javascript/reference/kml#KmlLayer.getDefaultViewport\n   */\n  getDefaultViewport() {\n    this._assertInitialized();\n    return this.kmlLayer.getDefaultViewport();\n  }\n  /**\n   * See developers.google.com/maps/documentation/javascript/reference/kml#KmlLayer.getMetadata\n   */\n  getMetadata() {\n    this._assertInitialized();\n    return this.kmlLayer.getMetadata();\n  }\n  /**\n   * See developers.google.com/maps/documentation/javascript/reference/kml#KmlLayer.getStatus\n   */\n  getStatus() {\n    this._assertInitialized();\n    return this.kmlLayer.getStatus();\n  }\n  /**\n   * See developers.google.com/maps/documentation/javascript/reference/kml#KmlLayer.getUrl\n   */\n  getUrl() {\n    this._assertInitialized();\n    return this.kmlLayer.getUrl();\n  }\n  /**\n   * See developers.google.com/maps/documentation/javascript/reference/kml#KmlLayer.getZIndex\n   */\n  getZIndex() {\n    this._assertInitialized();\n    return this.kmlLayer.getZIndex();\n  }\n  _combineOptions() {\n    return combineLatest([this._options, this._url]).pipe(map(([options, url]) => {\n      const combinedOptions = {\n        ...options,\n        url: url || options.url\n      };\n      return combinedOptions;\n    }));\n  }\n  _watchForOptionsChanges() {\n    this._options.pipe(takeUntil(this._destroyed)).subscribe(options => {\n      if (this.kmlLayer) {\n        this._assertInitialized();\n        this.kmlLayer.setOptions(options);\n      }\n    });\n  }\n  _watchForUrlChanges() {\n    this._url.pipe(takeUntil(this._destroyed)).subscribe(url => {\n      if (url && this.kmlLayer) {\n        this._assertInitialized();\n        this.kmlLayer.setUrl(url);\n      }\n    });\n  }\n  _assertInitialized() {\n    if (typeof ngDevMode === 'undefined' || ngDevMode) {\n      if (!this.kmlLayer) {\n        throw Error('Cannot interact with a Google Map KmlLayer before it has been ' + 'initialized. Please wait for the KmlLayer to load before trying to interact with it.');\n      }\n    }\n  }\n  static ɵfac = function MapKmlLayer_Factory(__ngFactoryType__) {\n    return new (__ngFactoryType__ || MapKmlLayer)();\n  };\n  static ɵdir = /* @__PURE__ */i0.ɵɵdefineDirective({\n    type: MapKmlLayer,\n    selectors: [[\"map-kml-layer\"]],\n    inputs: {\n      options: \"options\",\n      url: \"url\"\n    },\n    outputs: {\n      kmlClick: \"kmlClick\",\n      defaultviewportChanged: \"defaultviewportChanged\",\n      statusChanged: \"statusChanged\",\n      kmlLayerInitialized: \"kmlLayerInitialized\"\n    },\n    exportAs: [\"mapKmlLayer\"]\n  });\n}\n(() => {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(MapKmlLayer, [{\n    type: Directive,\n    args: [{\n      selector: 'map-kml-layer',\n      exportAs: 'mapKmlLayer'\n    }]\n  }], () => [], {\n    options: [{\n      type: Input\n    }],\n    url: [{\n      type: Input\n    }],\n    kmlClick: [{\n      type: Output\n    }],\n    defaultviewportChanged: [{\n      type: Output\n    }],\n    statusChanged: [{\n      type: Output\n    }],\n    kmlLayerInitialized: [{\n      type: Output\n    }]\n  });\n})();\n\n/** Token that marker directives can use to expose themselves to the clusterer. */\nconst MAP_MARKER = new InjectionToken('MAP_MARKER');\n\n// Workaround for: https://github.com/bazelbuild/rules_nodejs/issues/1265\n/**\n * Default options for the Google Maps marker component. Displays a marker\n * at the Googleplex.\n */\nconst DEFAULT_MARKER_OPTIONS$1 = {\n  position: {\n    lat: 37.421995,\n    lng: -122.084092\n  }\n};\n/**\n * Angular component that renders a Google Maps marker via the Google Maps JavaScript API.\n *\n * See developers.google.com/maps/documentation/javascript/reference/marker\n */\nclass MapMarker {\n  _googleMap = inject(GoogleMap);\n  _ngZone = inject(NgZone);\n  _eventManager = new MapEventManager(inject(NgZone));\n  /**\n   * Title of the marker.\n   * See: developers.google.com/maps/documentation/javascript/reference/marker#MarkerOptions.title\n   */\n  set title(title) {\n    this._title = title;\n  }\n  _title;\n  /**\n   * Position of the marker. See:\n   * developers.google.com/maps/documentation/javascript/reference/marker#MarkerOptions.position\n   */\n  set position(position) {\n    this._position = position;\n  }\n  _position;\n  /**\n   * Label for the marker.\n   * See: developers.google.com/maps/documentation/javascript/reference/marker#MarkerOptions.label\n   */\n  set label(label) {\n    this._label = label;\n  }\n  _label;\n  /**\n   * Whether the marker is clickable. See:\n   * developers.google.com/maps/documentation/javascript/reference/marker#MarkerOptions.clickable\n   */\n  set clickable(clickable) {\n    this._clickable = clickable;\n  }\n  _clickable;\n  /**\n   * Options used to configure the marker.\n   * See: developers.google.com/maps/documentation/javascript/reference/marker#MarkerOptions\n   */\n  set options(options) {\n    this._options = options;\n  }\n  _options;\n  /**\n   * Icon to be used for the marker.\n   * See: https://developers.google.com/maps/documentation/javascript/reference/marker#Icon\n   */\n  set icon(icon) {\n    this._icon = icon;\n  }\n  _icon;\n  /**\n   * Whether the marker is visible.\n   * See: developers.google.com/maps/documentation/javascript/reference/marker#MarkerOptions.visible\n   */\n  set visible(value) {\n    this._visible = value;\n  }\n  _visible;\n  /**\n   * See\n   * developers.google.com/maps/documentation/javascript/reference/marker#Marker.animation_changed\n   */\n  animationChanged = this._eventManager.getLazyEmitter('animation_changed');\n  /**\n   * See\n   * developers.google.com/maps/documentation/javascript/reference/marker#Marker.click\n   */\n  mapClick = this._eventManager.getLazyEmitter('click');\n  /**\n   * See\n   * developers.google.com/maps/documentation/javascript/reference/marker#Marker.clickable_changed\n   */\n  clickableChanged = this._eventManager.getLazyEmitter('clickable_changed');\n  /**\n   * See\n   * developers.google.com/maps/documentation/javascript/reference/marker#Marker.cursor_changed\n   */\n  cursorChanged = this._eventManager.getLazyEmitter('cursor_changed');\n  /**\n   * See\n   * developers.google.com/maps/documentation/javascript/reference/marker#Marker.dblclick\n   */\n  mapDblclick = this._eventManager.getLazyEmitter('dblclick');\n  /**\n   * See\n   * developers.google.com/maps/documentation/javascript/reference/marker#Marker.drag\n   */\n  mapDrag = this._eventManager.getLazyEmitter('drag');\n  /**\n   * See\n   * developers.google.com/maps/documentation/javascript/reference/marker#Marker.dragend\n   */\n  mapDragend = this._eventManager.getLazyEmitter('dragend');\n  /**\n   * See\n   * developers.google.com/maps/documentation/javascript/reference/marker#Marker.draggable_changed\n   */\n  draggableChanged = this._eventManager.getLazyEmitter('draggable_changed');\n  /**\n   * See\n   * developers.google.com/maps/documentation/javascript/reference/marker#Marker.dragstart\n   */\n  mapDragstart = this._eventManager.getLazyEmitter('dragstart');\n  /**\n   * See\n   * developers.google.com/maps/documentation/javascript/reference/marker#Marker.flat_changed\n   */\n  flatChanged = this._eventManager.getLazyEmitter('flat_changed');\n  /**\n   * See\n   * developers.google.com/maps/documentation/javascript/reference/marker#Marker.icon_changed\n   */\n  iconChanged = this._eventManager.getLazyEmitter('icon_changed');\n  /**\n   * See\n   * developers.google.com/maps/documentation/javascript/reference/marker#Marker.mousedown\n   */\n  mapMousedown = this._eventManager.getLazyEmitter('mousedown');\n  /**\n   * See\n   * developers.google.com/maps/documentation/javascript/reference/marker#Marker.mouseout\n   */\n  mapMouseout = this._eventManager.getLazyEmitter('mouseout');\n  /**\n   * See\n   * developers.google.com/maps/documentation/javascript/reference/marker#Marker.mouseover\n   */\n  mapMouseover = this._eventManager.getLazyEmitter('mouseover');\n  /**\n   * See\n   * developers.google.com/maps/documentation/javascript/reference/marker#Marker.mouseup\n   */\n  mapMouseup = this._eventManager.getLazyEmitter('mouseup');\n  /**\n   * See\n   * developers.google.com/maps/documentation/javascript/reference/marker#Marker.position_changed\n   */\n  positionChanged = this._eventManager.getLazyEmitter('position_changed');\n  /**\n   * See\n   * developers.google.com/maps/documentation/javascript/reference/marker#Marker.rightclick\n   */\n  mapRightclick = this._eventManager.getLazyEmitter('rightclick');\n  /**\n   * See\n   * developers.google.com/maps/documentation/javascript/reference/marker#Marker.shape_changed\n   */\n  shapeChanged = this._eventManager.getLazyEmitter('shape_changed');\n  /**\n   * See\n   * developers.google.com/maps/documentation/javascript/reference/marker#Marker.title_changed\n   */\n  titleChanged = this._eventManager.getLazyEmitter('title_changed');\n  /**\n   * See\n   * developers.google.com/maps/documentation/javascript/reference/marker#Marker.visible_changed\n   */\n  visibleChanged = this._eventManager.getLazyEmitter('visible_changed');\n  /**\n   * See\n   * developers.google.com/maps/documentation/javascript/reference/marker#Marker.zindex_changed\n   */\n  zindexChanged = this._eventManager.getLazyEmitter('zindex_changed');\n  /** Event emitted when the marker is initialized. */\n  markerInitialized = new EventEmitter();\n  /**\n   * The underlying google.maps.Marker object.\n   *\n   * See developers.google.com/maps/documentation/javascript/reference/marker#Marker\n   */\n  marker;\n  constructor() {}\n  ngOnInit() {\n    if (!this._googleMap._isBrowser) {\n      return;\n    }\n    if (google.maps.Marker && this._googleMap.googleMap) {\n      this._initialize(this._googleMap.googleMap, google.maps.Marker);\n    } else {\n      this._ngZone.runOutsideAngular(() => {\n        Promise.all([this._googleMap._resolveMap(), google.maps.importLibrary('marker')]).then(([map, lib]) => {\n          this._initialize(map, lib.Marker);\n        });\n      });\n    }\n  }\n  _initialize(map, markerConstructor) {\n    // Create the object outside the zone so its events don't trigger change detection.\n    // We'll bring it back in inside the `MapEventManager` only for the events that the\n    // user has subscribed to.\n    this._ngZone.runOutsideAngular(() => {\n      this.marker = new markerConstructor(this._combineOptions());\n      this._assertInitialized();\n      this.marker.setMap(map);\n      this._eventManager.setTarget(this.marker);\n      this.markerInitialized.next(this.marker);\n    });\n  }\n  ngOnChanges(changes) {\n    const {\n      marker,\n      _title,\n      _position,\n      _label,\n      _clickable,\n      _icon,\n      _visible\n    } = this;\n    if (marker) {\n      if (changes['options']) {\n        marker.setOptions(this._combineOptions());\n      }\n      if (changes['title'] && _title !== undefined) {\n        marker.setTitle(_title);\n      }\n      if (changes['position'] && _position) {\n        marker.setPosition(_position);\n      }\n      if (changes['label'] && _label !== undefined) {\n        marker.setLabel(_label);\n      }\n      if (changes['clickable'] && _clickable !== undefined) {\n        marker.setClickable(_clickable);\n      }\n      if (changes['icon'] && _icon) {\n        marker.setIcon(_icon);\n      }\n      if (changes['visible'] && _visible !== undefined) {\n        marker.setVisible(_visible);\n      }\n    }\n  }\n  ngOnDestroy() {\n    this.markerInitialized.complete();\n    this._eventManager.destroy();\n    this.marker?.setMap(null);\n  }\n  /**\n   * See\n   * developers.google.com/maps/documentation/javascript/reference/marker#Marker.getAnimation\n   */\n  getAnimation() {\n    this._assertInitialized();\n    return this.marker.getAnimation() || null;\n  }\n  /**\n   * See\n   * developers.google.com/maps/documentation/javascript/reference/marker#Marker.getClickable\n   */\n  getClickable() {\n    this._assertInitialized();\n    return this.marker.getClickable();\n  }\n  /**\n   * See\n   * developers.google.com/maps/documentation/javascript/reference/marker#Marker.getCursor\n   */\n  getCursor() {\n    this._assertInitialized();\n    return this.marker.getCursor() || null;\n  }\n  /**\n   * See\n   * developers.google.com/maps/documentation/javascript/reference/marker#Marker.getDraggable\n   */\n  getDraggable() {\n    this._assertInitialized();\n    return !!this.marker.getDraggable();\n  }\n  /**\n   * See\n   * developers.google.com/maps/documentation/javascript/reference/marker#Marker.getIcon\n   */\n  getIcon() {\n    this._assertInitialized();\n    return this.marker.getIcon() || null;\n  }\n  /**\n   * See\n   * developers.google.com/maps/documentation/javascript/reference/marker#Marker.getLabel\n   */\n  getLabel() {\n    this._assertInitialized();\n    return this.marker.getLabel() || null;\n  }\n  /**\n   * See\n   * developers.google.com/maps/documentation/javascript/reference/marker#Marker.getOpacity\n   */\n  getOpacity() {\n    this._assertInitialized();\n    return this.marker.getOpacity() || null;\n  }\n  /**\n   * See\n   * developers.google.com/maps/documentation/javascript/reference/marker#Marker.getPosition\n   */\n  getPosition() {\n    this._assertInitialized();\n    return this.marker.getPosition() || null;\n  }\n  /**\n   * See\n   * developers.google.com/maps/documentation/javascript/reference/marker#Marker.getShape\n   */\n  getShape() {\n    this._assertInitialized();\n    return this.marker.getShape() || null;\n  }\n  /**\n   * See\n   * developers.google.com/maps/documentation/javascript/reference/marker#Marker.getTitle\n   */\n  getTitle() {\n    this._assertInitialized();\n    return this.marker.getTitle() || null;\n  }\n  /**\n   * See\n   * developers.google.com/maps/documentation/javascript/reference/marker#Marker.getVisible\n   */\n  getVisible() {\n    this._assertInitialized();\n    return this.marker.getVisible();\n  }\n  /**\n   * See\n   * developers.google.com/maps/documentation/javascript/reference/marker#Marker.getZIndex\n   */\n  getZIndex() {\n    this._assertInitialized();\n    return this.marker.getZIndex() || null;\n  }\n  /** Gets the anchor point that can be used to attach other Google Maps objects. */\n  getAnchor() {\n    this._assertInitialized();\n    return this.marker;\n  }\n  /** Returns a promise that resolves when the marker has been initialized. */\n  _resolveMarker() {\n    return this.marker ? Promise.resolve(this.marker) : this.markerInitialized.pipe(take(1)).toPromise();\n  }\n  /** Creates a combined options object using the passed-in options and the individual inputs. */\n  _combineOptions() {\n    const options = this._options || DEFAULT_MARKER_OPTIONS$1;\n    return {\n      ...options,\n      title: this._title || options.title,\n      position: this._position || options.position,\n      label: this._label || options.label,\n      clickable: this._clickable ?? options.clickable,\n      map: this._googleMap.googleMap,\n      icon: this._icon || options.icon,\n      visible: this._visible ?? options.visible\n    };\n  }\n  _assertInitialized() {\n    if (typeof ngDevMode === 'undefined' || ngDevMode) {\n      if (!this.marker) {\n        throw Error('Cannot interact with a Google Map Marker before it has been ' + 'initialized. Please wait for the Marker to load before trying to interact with it.');\n      }\n    }\n  }\n  static ɵfac = function MapMarker_Factory(__ngFactoryType__) {\n    return new (__ngFactoryType__ || MapMarker)();\n  };\n  static ɵdir = /* @__PURE__ */i0.ɵɵdefineDirective({\n    type: MapMarker,\n    selectors: [[\"map-marker\"]],\n    inputs: {\n      title: \"title\",\n      position: \"position\",\n      label: \"label\",\n      clickable: \"clickable\",\n      options: \"options\",\n      icon: \"icon\",\n      visible: \"visible\"\n    },\n    outputs: {\n      animationChanged: \"animationChanged\",\n      mapClick: \"mapClick\",\n      clickableChanged: \"clickableChanged\",\n      cursorChanged: \"cursorChanged\",\n      mapDblclick: \"mapDblclick\",\n      mapDrag: \"mapDrag\",\n      mapDragend: \"mapDragend\",\n      draggableChanged: \"draggableChanged\",\n      mapDragstart: \"mapDragstart\",\n      flatChanged: \"flatChanged\",\n      iconChanged: \"iconChanged\",\n      mapMousedown: \"mapMousedown\",\n      mapMouseout: \"mapMouseout\",\n      mapMouseover: \"mapMouseover\",\n      mapMouseup: \"mapMouseup\",\n      positionChanged: \"positionChanged\",\n      mapRightclick: \"mapRightclick\",\n      shapeChanged: \"shapeChanged\",\n      titleChanged: \"titleChanged\",\n      visibleChanged: \"visibleChanged\",\n      zindexChanged: \"zindexChanged\",\n      markerInitialized: \"markerInitialized\"\n    },\n    exportAs: [\"mapMarker\"],\n    features: [i0.ɵɵProvidersFeature([{\n      provide: MAP_MARKER,\n      useExisting: MapMarker\n    }]), i0.ɵɵNgOnChangesFeature]\n  });\n}\n(() => {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(MapMarker, [{\n    type: Directive,\n    args: [{\n      selector: 'map-marker',\n      exportAs: 'mapMarker',\n      providers: [{\n        provide: MAP_MARKER,\n        useExisting: MapMarker\n      }]\n    }]\n  }], () => [], {\n    title: [{\n      type: Input\n    }],\n    position: [{\n      type: Input\n    }],\n    label: [{\n      type: Input\n    }],\n    clickable: [{\n      type: Input\n    }],\n    options: [{\n      type: Input\n    }],\n    icon: [{\n      type: Input\n    }],\n    visible: [{\n      type: Input\n    }],\n    animationChanged: [{\n      type: Output\n    }],\n    mapClick: [{\n      type: Output\n    }],\n    clickableChanged: [{\n      type: Output\n    }],\n    cursorChanged: [{\n      type: Output\n    }],\n    mapDblclick: [{\n      type: Output\n    }],\n    mapDrag: [{\n      type: Output\n    }],\n    mapDragend: [{\n      type: Output\n    }],\n    draggableChanged: [{\n      type: Output\n    }],\n    mapDragstart: [{\n      type: Output\n    }],\n    flatChanged: [{\n      type: Output\n    }],\n    iconChanged: [{\n      type: Output\n    }],\n    mapMousedown: [{\n      type: Output\n    }],\n    mapMouseout: [{\n      type: Output\n    }],\n    mapMouseover: [{\n      type: Output\n    }],\n    mapMouseup: [{\n      type: Output\n    }],\n    positionChanged: [{\n      type: Output\n    }],\n    mapRightclick: [{\n      type: Output\n    }],\n    shapeChanged: [{\n      type: Output\n    }],\n    titleChanged: [{\n      type: Output\n    }],\n    visibleChanged: [{\n      type: Output\n    }],\n    zindexChanged: [{\n      type: Output\n    }],\n    markerInitialized: [{\n      type: Output\n    }]\n  });\n})();\n\n// Workaround for: https://github.com/bazelbuild/rules_nodejs/issues/1265\n/** Default options for a clusterer. */\nconst DEFAULT_CLUSTERER_OPTIONS = {};\n/**\n * Angular component for implementing a Google Maps Marker Clusterer.\n * See https://developers.google.com/maps/documentation/javascript/marker-clustering\n *\n * @deprecated This component is using a deprecated clustering implementation. Use the\n *   `map-marker-clusterer` component instead.\n * @breaking-change 21.0.0\n *\n */\nclass DeprecatedMapMarkerClusterer {\n  _googleMap = inject(GoogleMap);\n  _ngZone = inject(NgZone);\n  _currentMarkers = new Set();\n  _eventManager = new MapEventManager(inject(NgZone));\n  _destroy = new Subject();\n  /** Whether the clusterer is allowed to be initialized. */\n  _canInitialize = this._googleMap._isBrowser;\n  ariaLabelFn = () => '';\n  set averageCenter(averageCenter) {\n    this._averageCenter = averageCenter;\n  }\n  _averageCenter;\n  batchSize;\n  set batchSizeIE(batchSizeIE) {\n    this._batchSizeIE = batchSizeIE;\n  }\n  _batchSizeIE;\n  set calculator(calculator) {\n    this._calculator = calculator;\n  }\n  _calculator;\n  set clusterClass(clusterClass) {\n    this._clusterClass = clusterClass;\n  }\n  _clusterClass;\n  set enableRetinaIcons(enableRetinaIcons) {\n    this._enableRetinaIcons = enableRetinaIcons;\n  }\n  _enableRetinaIcons;\n  set gridSize(gridSize) {\n    this._gridSize = gridSize;\n  }\n  _gridSize;\n  set ignoreHidden(ignoreHidden) {\n    this._ignoreHidden = ignoreHidden;\n  }\n  _ignoreHidden;\n  set imageExtension(imageExtension) {\n    this._imageExtension = imageExtension;\n  }\n  _imageExtension;\n  set imagePath(imagePath) {\n    this._imagePath = imagePath;\n  }\n  _imagePath;\n  set imageSizes(imageSizes) {\n    this._imageSizes = imageSizes;\n  }\n  _imageSizes;\n  set maxZoom(maxZoom) {\n    this._maxZoom = maxZoom;\n  }\n  _maxZoom;\n  set minimumClusterSize(minimumClusterSize) {\n    this._minimumClusterSize = minimumClusterSize;\n  }\n  _minimumClusterSize;\n  set styles(styles) {\n    this._styles = styles;\n  }\n  _styles;\n  set title(title) {\n    this._title = title;\n  }\n  _title;\n  set zIndex(zIndex) {\n    this._zIndex = zIndex;\n  }\n  _zIndex;\n  set zoomOnClick(zoomOnClick) {\n    this._zoomOnClick = zoomOnClick;\n  }\n  _zoomOnClick;\n  set options(options) {\n    this._options = options;\n  }\n  _options;\n  /**\n   * See\n   * googlemaps.github.io/v3-utility-library/modules/\n   * _google_markerclustererplus.html#clusteringbegin\n   */\n  clusteringbegin = this._eventManager.getLazyEmitter('clusteringbegin');\n  /**\n   * See\n   * googlemaps.github.io/v3-utility-library/modules/_google_markerclustererplus.html#clusteringend\n   */\n  clusteringend = this._eventManager.getLazyEmitter('clusteringend');\n  /** Emits when a cluster has been clicked. */\n  clusterClick = this._eventManager.getLazyEmitter('click');\n  _markers;\n  /**\n   * The underlying MarkerClusterer object.\n   *\n   * See\n   * googlemaps.github.io/v3-utility-library/classes/\n   * _google_markerclustererplus.markerclusterer.html\n   */\n  markerClusterer;\n  /** Event emitted when the clusterer is initialized. */\n  markerClustererInitialized = new EventEmitter();\n  constructor() {}\n  ngOnInit() {\n    if (this._canInitialize) {\n      this._ngZone.runOutsideAngular(() => {\n        this._googleMap._resolveMap().then(map => {\n          if (typeof MarkerClusterer !== 'function' && (typeof ngDevMode === 'undefined' || ngDevMode)) {\n            throw Error('MarkerClusterer class not found, cannot construct a marker cluster. ' + 'Please install the MarkerClustererPlus library: ' + 'https://github.com/googlemaps/js-markerclustererplus');\n          }\n          // Create the object outside the zone so its events don't trigger change detection.\n          // We'll bring it back in inside the `MapEventManager` only for the events that the\n          // user has subscribed to.\n          this.markerClusterer = this._ngZone.runOutsideAngular(() => {\n            return new MarkerClusterer(map, [], this._combineOptions());\n          });\n          this._assertInitialized();\n          this._eventManager.setTarget(this.markerClusterer);\n          this.markerClustererInitialized.emit(this.markerClusterer);\n        });\n      });\n    }\n  }\n  ngAfterContentInit() {\n    if (this._canInitialize) {\n      if (this.markerClusterer) {\n        this._watchForMarkerChanges();\n      } else {\n        this.markerClustererInitialized.pipe(take(1), takeUntil(this._destroy)).subscribe(() => this._watchForMarkerChanges());\n      }\n    }\n  }\n  ngOnChanges(changes) {\n    const {\n      markerClusterer: clusterer,\n      ariaLabelFn,\n      _averageCenter,\n      _batchSizeIE,\n      _calculator,\n      _styles,\n      _clusterClass,\n      _enableRetinaIcons,\n      _gridSize,\n      _ignoreHidden,\n      _imageExtension,\n      _imagePath,\n      _imageSizes,\n      _maxZoom,\n      _minimumClusterSize,\n      _title,\n      _zIndex,\n      _zoomOnClick\n    } = this;\n    if (clusterer) {\n      if (changes['options']) {\n        clusterer.setOptions(this._combineOptions());\n      }\n      if (changes['ariaLabelFn']) {\n        clusterer.ariaLabelFn = ariaLabelFn;\n      }\n      if (changes['averageCenter'] && _averageCenter !== undefined) {\n        clusterer.setAverageCenter(_averageCenter);\n      }\n      if (changes['batchSizeIE'] && _batchSizeIE !== undefined) {\n        clusterer.setBatchSizeIE(_batchSizeIE);\n      }\n      if (changes['calculator'] && !!_calculator) {\n        clusterer.setCalculator(_calculator);\n      }\n      if (changes['clusterClass'] && _clusterClass !== undefined) {\n        clusterer.setClusterClass(_clusterClass);\n      }\n      if (changes['enableRetinaIcons'] && _enableRetinaIcons !== undefined) {\n        clusterer.setEnableRetinaIcons(_enableRetinaIcons);\n      }\n      if (changes['gridSize'] && _gridSize !== undefined) {\n        clusterer.setGridSize(_gridSize);\n      }\n      if (changes['ignoreHidden'] && _ignoreHidden !== undefined) {\n        clusterer.setIgnoreHidden(_ignoreHidden);\n      }\n      if (changes['imageExtension'] && _imageExtension !== undefined) {\n        clusterer.setImageExtension(_imageExtension);\n      }\n      if (changes['imagePath'] && _imagePath !== undefined) {\n        clusterer.setImagePath(_imagePath);\n      }\n      if (changes['imageSizes'] && _imageSizes) {\n        clusterer.setImageSizes(_imageSizes);\n      }\n      if (changes['maxZoom'] && _maxZoom !== undefined) {\n        clusterer.setMaxZoom(_maxZoom);\n      }\n      if (changes['minimumClusterSize'] && _minimumClusterSize !== undefined) {\n        clusterer.setMinimumClusterSize(_minimumClusterSize);\n      }\n      if (changes['styles'] && _styles) {\n        clusterer.setStyles(_styles);\n      }\n      if (changes['title'] && _title !== undefined) {\n        clusterer.setTitle(_title);\n      }\n      if (changes['zIndex'] && _zIndex !== undefined) {\n        clusterer.setZIndex(_zIndex);\n      }\n      if (changes['zoomOnClick'] && _zoomOnClick !== undefined) {\n        clusterer.setZoomOnClick(_zoomOnClick);\n      }\n    }\n  }\n  ngOnDestroy() {\n    this._destroy.next();\n    this._destroy.complete();\n    this._eventManager.destroy();\n    this.markerClusterer?.setMap(null);\n  }\n  fitMapToMarkers(padding) {\n    this._assertInitialized();\n    this.markerClusterer.fitMapToMarkers(padding);\n  }\n  getAverageCenter() {\n    this._assertInitialized();\n    return this.markerClusterer.getAverageCenter();\n  }\n  getBatchSizeIE() {\n    this._assertInitialized();\n    return this.markerClusterer.getBatchSizeIE();\n  }\n  getCalculator() {\n    this._assertInitialized();\n    return this.markerClusterer.getCalculator();\n  }\n  getClusterClass() {\n    this._assertInitialized();\n    return this.markerClusterer.getClusterClass();\n  }\n  getClusters() {\n    this._assertInitialized();\n    return this.markerClusterer.getClusters();\n  }\n  getEnableRetinaIcons() {\n    this._assertInitialized();\n    return this.markerClusterer.getEnableRetinaIcons();\n  }\n  getGridSize() {\n    this._assertInitialized();\n    return this.markerClusterer.getGridSize();\n  }\n  getIgnoreHidden() {\n    this._assertInitialized();\n    return this.markerClusterer.getIgnoreHidden();\n  }\n  getImageExtension() {\n    this._assertInitialized();\n    return this.markerClusterer.getImageExtension();\n  }\n  getImagePath() {\n    this._assertInitialized();\n    return this.markerClusterer.getImagePath();\n  }\n  getImageSizes() {\n    this._assertInitialized();\n    return this.markerClusterer.getImageSizes();\n  }\n  getMaxZoom() {\n    this._assertInitialized();\n    return this.markerClusterer.getMaxZoom();\n  }\n  getMinimumClusterSize() {\n    this._assertInitialized();\n    return this.markerClusterer.getMinimumClusterSize();\n  }\n  getStyles() {\n    this._assertInitialized();\n    return this.markerClusterer.getStyles();\n  }\n  getTitle() {\n    this._assertInitialized();\n    return this.markerClusterer.getTitle();\n  }\n  getTotalClusters() {\n    this._assertInitialized();\n    return this.markerClusterer.getTotalClusters();\n  }\n  getTotalMarkers() {\n    this._assertInitialized();\n    return this.markerClusterer.getTotalMarkers();\n  }\n  getZIndex() {\n    this._assertInitialized();\n    return this.markerClusterer.getZIndex();\n  }\n  getZoomOnClick() {\n    this._assertInitialized();\n    return this.markerClusterer.getZoomOnClick();\n  }\n  _combineOptions() {\n    const options = this._options || DEFAULT_CLUSTERER_OPTIONS;\n    return {\n      ...options,\n      ariaLabelFn: this.ariaLabelFn ?? options.ariaLabelFn,\n      averageCenter: this._averageCenter ?? options.averageCenter,\n      batchSize: this.batchSize ?? options.batchSize,\n      batchSizeIE: this._batchSizeIE ?? options.batchSizeIE,\n      calculator: this._calculator ?? options.calculator,\n      clusterClass: this._clusterClass ?? options.clusterClass,\n      enableRetinaIcons: this._enableRetinaIcons ?? options.enableRetinaIcons,\n      gridSize: this._gridSize ?? options.gridSize,\n      ignoreHidden: this._ignoreHidden ?? options.ignoreHidden,\n      imageExtension: this._imageExtension ?? options.imageExtension,\n      imagePath: this._imagePath ?? options.imagePath,\n      imageSizes: this._imageSizes ?? options.imageSizes,\n      maxZoom: this._maxZoom ?? options.maxZoom,\n      minimumClusterSize: this._minimumClusterSize ?? options.minimumClusterSize,\n      styles: this._styles ?? options.styles,\n      title: this._title ?? options.title,\n      zIndex: this._zIndex ?? options.zIndex,\n      zoomOnClick: this._zoomOnClick ?? options.zoomOnClick\n    };\n  }\n  _watchForMarkerChanges() {\n    this._assertInitialized();\n    this._ngZone.runOutsideAngular(() => {\n      this._getInternalMarkers(this._markers).then(markers => {\n        const initialMarkers = [];\n        for (const marker of markers) {\n          this._currentMarkers.add(marker);\n          initialMarkers.push(marker);\n        }\n        this.markerClusterer.addMarkers(initialMarkers);\n      });\n    });\n    this._markers.changes.pipe(takeUntil(this._destroy)).subscribe(markerComponents => {\n      this._assertInitialized();\n      this._ngZone.runOutsideAngular(() => {\n        this._getInternalMarkers(markerComponents).then(markers => {\n          const newMarkers = new Set(markers);\n          const markersToAdd = [];\n          const markersToRemove = [];\n          for (const marker of Array.from(newMarkers)) {\n            if (!this._currentMarkers.has(marker)) {\n              this._currentMarkers.add(marker);\n              markersToAdd.push(marker);\n            }\n          }\n          for (const marker of Array.from(this._currentMarkers)) {\n            if (!newMarkers.has(marker)) {\n              markersToRemove.push(marker);\n            }\n          }\n          this.markerClusterer.addMarkers(markersToAdd, true);\n          this.markerClusterer.removeMarkers(markersToRemove, true);\n          this.markerClusterer.repaint();\n          for (const marker of markersToRemove) {\n            this._currentMarkers.delete(marker);\n          }\n        });\n      });\n    });\n  }\n  _getInternalMarkers(markers) {\n    return Promise.all(markers.map(markerComponent => markerComponent._resolveMarker()));\n  }\n  _assertInitialized() {\n    if (typeof ngDevMode === 'undefined' || ngDevMode) {\n      if (!this.markerClusterer) {\n        throw Error('Cannot interact with a MarkerClusterer before it has been initialized. ' + 'Please wait for the MarkerClusterer to load before trying to interact with it.');\n      }\n    }\n  }\n  static ɵfac = function DeprecatedMapMarkerClusterer_Factory(__ngFactoryType__) {\n    return new (__ngFactoryType__ || DeprecatedMapMarkerClusterer)();\n  };\n  static ɵcmp = /* @__PURE__ */i0.ɵɵdefineComponent({\n    type: DeprecatedMapMarkerClusterer,\n    selectors: [[\"deprecated-map-marker-clusterer\"]],\n    contentQueries: function DeprecatedMapMarkerClusterer_ContentQueries(rf, ctx, dirIndex) {\n      if (rf & 1) {\n        i0.ɵɵcontentQuery(dirIndex, MapMarker, 5);\n      }\n      if (rf & 2) {\n        let _t;\n        i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx._markers = _t);\n      }\n    },\n    inputs: {\n      ariaLabelFn: \"ariaLabelFn\",\n      averageCenter: \"averageCenter\",\n      batchSize: \"batchSize\",\n      batchSizeIE: \"batchSizeIE\",\n      calculator: \"calculator\",\n      clusterClass: \"clusterClass\",\n      enableRetinaIcons: \"enableRetinaIcons\",\n      gridSize: \"gridSize\",\n      ignoreHidden: \"ignoreHidden\",\n      imageExtension: \"imageExtension\",\n      imagePath: \"imagePath\",\n      imageSizes: \"imageSizes\",\n      maxZoom: \"maxZoom\",\n      minimumClusterSize: \"minimumClusterSize\",\n      styles: \"styles\",\n      title: \"title\",\n      zIndex: \"zIndex\",\n      zoomOnClick: \"zoomOnClick\",\n      options: \"options\"\n    },\n    outputs: {\n      clusteringbegin: \"clusteringbegin\",\n      clusteringend: \"clusteringend\",\n      clusterClick: \"clusterClick\",\n      markerClustererInitialized: \"markerClustererInitialized\"\n    },\n    exportAs: [\"mapMarkerClusterer\"],\n    features: [i0.ɵɵNgOnChangesFeature],\n    ngContentSelectors: _c0,\n    decls: 1,\n    vars: 0,\n    template: function DeprecatedMapMarkerClusterer_Template(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵprojectionDef();\n        i0.ɵɵprojection(0);\n      }\n    },\n    encapsulation: 2,\n    changeDetection: 0\n  });\n}\n(() => {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(DeprecatedMapMarkerClusterer, [{\n    type: Component,\n    args: [{\n      selector: 'deprecated-map-marker-clusterer',\n      exportAs: 'mapMarkerClusterer',\n      changeDetection: ChangeDetectionStrategy.OnPush,\n      template: '<ng-content/>',\n      encapsulation: ViewEncapsulation.None\n    }]\n  }], () => [], {\n    ariaLabelFn: [{\n      type: Input\n    }],\n    averageCenter: [{\n      type: Input\n    }],\n    batchSize: [{\n      type: Input\n    }],\n    batchSizeIE: [{\n      type: Input\n    }],\n    calculator: [{\n      type: Input\n    }],\n    clusterClass: [{\n      type: Input\n    }],\n    enableRetinaIcons: [{\n      type: Input\n    }],\n    gridSize: [{\n      type: Input\n    }],\n    ignoreHidden: [{\n      type: Input\n    }],\n    imageExtension: [{\n      type: Input\n    }],\n    imagePath: [{\n      type: Input\n    }],\n    imageSizes: [{\n      type: Input\n    }],\n    maxZoom: [{\n      type: Input\n    }],\n    minimumClusterSize: [{\n      type: Input\n    }],\n    styles: [{\n      type: Input\n    }],\n    title: [{\n      type: Input\n    }],\n    zIndex: [{\n      type: Input\n    }],\n    zoomOnClick: [{\n      type: Input\n    }],\n    options: [{\n      type: Input\n    }],\n    clusteringbegin: [{\n      type: Output\n    }],\n    clusteringend: [{\n      type: Output\n    }],\n    clusterClick: [{\n      type: Output\n    }],\n    _markers: [{\n      type: ContentChildren,\n      args: [MapMarker, {\n        descendants: true\n      }]\n    }],\n    markerClustererInitialized: [{\n      type: Output\n    }]\n  });\n})();\n\n// Workaround for: https://github.com/bazelbuild/rules_nodejs/issues/1265\n/**\n * Angular component that renders a Google Maps Polygon via the Google Maps JavaScript API.\n *\n * See developers.google.com/maps/documentation/javascript/reference/polygon#Polygon\n */\nclass MapPolygon {\n  _map = inject(GoogleMap);\n  _ngZone = inject(NgZone);\n  _eventManager = new MapEventManager(inject(NgZone));\n  _options = new BehaviorSubject({});\n  _paths = new BehaviorSubject(undefined);\n  _destroyed = new Subject();\n  /**\n   * The underlying google.maps.Polygon object.\n   *\n   * See developers.google.com/maps/documentation/javascript/reference/polygon#Polygon\n   */\n  polygon;\n  set options(options) {\n    this._options.next(options || {});\n  }\n  set paths(paths) {\n    this._paths.next(paths);\n  }\n  /**\n   * See developers.google.com/maps/documentation/javascript/reference/polygon#Polygon.click\n   */\n  polygonClick = this._eventManager.getLazyEmitter('click');\n  /**\n   * See developers.google.com/maps/documentation/javascript/reference/polygon#Polygon.dblclick\n   */\n  polygonDblclick = this._eventManager.getLazyEmitter('dblclick');\n  /**\n   * See developers.google.com/maps/documentation/javascript/reference/polygon#Polygon.drag\n   */\n  polygonDrag = this._eventManager.getLazyEmitter('drag');\n  /**\n   * See developers.google.com/maps/documentation/javascript/reference/polygon#Polygon.dragend\n   */\n  polygonDragend = this._eventManager.getLazyEmitter('dragend');\n  /**\n   * See developers.google.com/maps/documentation/javascript/reference/polygon#Polygon.dragstart\n   */\n  polygonDragstart = this._eventManager.getLazyEmitter('dragstart');\n  /**\n   * See developers.google.com/maps/documentation/javascript/reference/polygon#Polygon.mousedown\n   */\n  polygonMousedown = this._eventManager.getLazyEmitter('mousedown');\n  /**\n   * See developers.google.com/maps/documentation/javascript/reference/polygon#Polygon.mousemove\n   */\n  polygonMousemove = this._eventManager.getLazyEmitter('mousemove');\n  /**\n   * See developers.google.com/maps/documentation/javascript/reference/polygon#Polygon.mouseout\n   */\n  polygonMouseout = this._eventManager.getLazyEmitter('mouseout');\n  /**\n   * See developers.google.com/maps/documentation/javascript/reference/polygon#Polygon.mouseover\n   */\n  polygonMouseover = this._eventManager.getLazyEmitter('mouseover');\n  /**\n   * See developers.google.com/maps/documentation/javascript/reference/polygon#Polygon.mouseup\n   */\n  polygonMouseup = this._eventManager.getLazyEmitter('mouseup');\n  /**\n   * See developers.google.com/maps/documentation/javascript/reference/polygon#Polygon.rightclick\n   */\n  polygonRightclick = this._eventManager.getLazyEmitter('rightclick');\n  /** Event emitted when the polygon is initialized. */\n  polygonInitialized = new EventEmitter();\n  constructor() {}\n  ngOnInit() {\n    if (this._map._isBrowser) {\n      this._combineOptions().pipe(take(1)).subscribe(options => {\n        if (google.maps.Polygon && this._map.googleMap) {\n          this._initialize(this._map.googleMap, google.maps.Polygon, options);\n        } else {\n          this._ngZone.runOutsideAngular(() => {\n            Promise.all([this._map._resolveMap(), google.maps.importLibrary('maps')]).then(([map, lib]) => {\n              this._initialize(map, lib.Polygon, options);\n            });\n          });\n        }\n      });\n    }\n  }\n  _initialize(map, polygonConstructor, options) {\n    // Create the object outside the zone so its events don't trigger change detection.\n    // We'll bring it back in inside the `MapEventManager` only for the events that the\n    // user has subscribed to.\n    this._ngZone.runOutsideAngular(() => {\n      this.polygon = new polygonConstructor(options);\n      this._assertInitialized();\n      this.polygon.setMap(map);\n      this._eventManager.setTarget(this.polygon);\n      this.polygonInitialized.emit(this.polygon);\n      this._watchForOptionsChanges();\n      this._watchForPathChanges();\n    });\n  }\n  ngOnDestroy() {\n    this._eventManager.destroy();\n    this._destroyed.next();\n    this._destroyed.complete();\n    this.polygon?.setMap(null);\n  }\n  /**\n   * See\n   * developers.google.com/maps/documentation/javascript/reference/polygon#Polygon.getDraggable\n   */\n  getDraggable() {\n    this._assertInitialized();\n    return this.polygon.getDraggable();\n  }\n  /**\n   * See developers.google.com/maps/documentation/javascript/reference/polygon#Polygon.getEditable\n   */\n  getEditable() {\n    this._assertInitialized();\n    return this.polygon.getEditable();\n  }\n  /**\n   * See developers.google.com/maps/documentation/javascript/reference/polygon#Polygon.getPath\n   */\n  getPath() {\n    this._assertInitialized();\n    return this.polygon.getPath();\n  }\n  /**\n   * See developers.google.com/maps/documentation/javascript/reference/polygon#Polygon.getPaths\n   */\n  getPaths() {\n    this._assertInitialized();\n    return this.polygon.getPaths();\n  }\n  /**\n   * See developers.google.com/maps/documentation/javascript/reference/polygon#Polygon.getVisible\n   */\n  getVisible() {\n    this._assertInitialized();\n    return this.polygon.getVisible();\n  }\n  _combineOptions() {\n    return combineLatest([this._options, this._paths]).pipe(map(([options, paths]) => {\n      const combinedOptions = {\n        ...options,\n        paths: paths || options.paths\n      };\n      return combinedOptions;\n    }));\n  }\n  _watchForOptionsChanges() {\n    this._options.pipe(takeUntil(this._destroyed)).subscribe(options => {\n      this._assertInitialized();\n      this.polygon.setOptions(options);\n    });\n  }\n  _watchForPathChanges() {\n    this._paths.pipe(takeUntil(this._destroyed)).subscribe(paths => {\n      if (paths) {\n        this._assertInitialized();\n        this.polygon.setPaths(paths);\n      }\n    });\n  }\n  _assertInitialized() {\n    if (typeof ngDevMode === 'undefined' || ngDevMode) {\n      if (!this.polygon) {\n        throw Error('Cannot interact with a Google Map Polygon before it has been ' + 'initialized. Please wait for the Polygon to load before trying to interact with it.');\n      }\n    }\n  }\n  static ɵfac = function MapPolygon_Factory(__ngFactoryType__) {\n    return new (__ngFactoryType__ || MapPolygon)();\n  };\n  static ɵdir = /* @__PURE__ */i0.ɵɵdefineDirective({\n    type: MapPolygon,\n    selectors: [[\"map-polygon\"]],\n    inputs: {\n      options: \"options\",\n      paths: \"paths\"\n    },\n    outputs: {\n      polygonClick: \"polygonClick\",\n      polygonDblclick: \"polygonDblclick\",\n      polygonDrag: \"polygonDrag\",\n      polygonDragend: \"polygonDragend\",\n      polygonDragstart: \"polygonDragstart\",\n      polygonMousedown: \"polygonMousedown\",\n      polygonMousemove: \"polygonMousemove\",\n      polygonMouseout: \"polygonMouseout\",\n      polygonMouseover: \"polygonMouseover\",\n      polygonMouseup: \"polygonMouseup\",\n      polygonRightclick: \"polygonRightclick\",\n      polygonInitialized: \"polygonInitialized\"\n    },\n    exportAs: [\"mapPolygon\"]\n  });\n}\n(() => {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(MapPolygon, [{\n    type: Directive,\n    args: [{\n      selector: 'map-polygon',\n      exportAs: 'mapPolygon'\n    }]\n  }], () => [], {\n    options: [{\n      type: Input\n    }],\n    paths: [{\n      type: Input\n    }],\n    polygonClick: [{\n      type: Output\n    }],\n    polygonDblclick: [{\n      type: Output\n    }],\n    polygonDrag: [{\n      type: Output\n    }],\n    polygonDragend: [{\n      type: Output\n    }],\n    polygonDragstart: [{\n      type: Output\n    }],\n    polygonMousedown: [{\n      type: Output\n    }],\n    polygonMousemove: [{\n      type: Output\n    }],\n    polygonMouseout: [{\n      type: Output\n    }],\n    polygonMouseover: [{\n      type: Output\n    }],\n    polygonMouseup: [{\n      type: Output\n    }],\n    polygonRightclick: [{\n      type: Output\n    }],\n    polygonInitialized: [{\n      type: Output\n    }]\n  });\n})();\n\n// Workaround for: https://github.com/bazelbuild/rules_nodejs/issues/1265\n/**\n * Angular component that renders a Google Maps Polyline via the Google Maps JavaScript API.\n *\n * See developers.google.com/maps/documentation/javascript/reference/polygon#Polyline\n */\nclass MapPolyline {\n  _map = inject(GoogleMap);\n  _ngZone = inject(NgZone);\n  _eventManager = new MapEventManager(inject(NgZone));\n  _options = new BehaviorSubject({});\n  _path = new BehaviorSubject(undefined);\n  _destroyed = new Subject();\n  /**\n   * The underlying google.maps.Polyline object.\n   *\n   * See developers.google.com/maps/documentation/javascript/reference/polygon#Polyline\n   */\n  polyline;\n  set options(options) {\n    this._options.next(options || {});\n  }\n  set path(path) {\n    this._path.next(path);\n  }\n  /**\n   * See developers.google.com/maps/documentation/javascript/reference/polygon#Polyline.click\n   */\n  polylineClick = this._eventManager.getLazyEmitter('click');\n  /**\n   * See developers.google.com/maps/documentation/javascript/reference/polygon#Polyline.dblclick\n   */\n  polylineDblclick = this._eventManager.getLazyEmitter('dblclick');\n  /**\n   * See developers.google.com/maps/documentation/javascript/reference/polygon#Polyline.drag\n   */\n  polylineDrag = this._eventManager.getLazyEmitter('drag');\n  /**\n   * See developers.google.com/maps/documentation/javascript/reference/polygon#Polyline.dragend\n   */\n  polylineDragend = this._eventManager.getLazyEmitter('dragend');\n  /**\n   * See developers.google.com/maps/documentation/javascript/reference/polygon#Polyline.dragstart\n   */\n  polylineDragstart = this._eventManager.getLazyEmitter('dragstart');\n  /**\n   * See developers.google.com/maps/documentation/javascript/reference/polygon#Polyline.mousedown\n   */\n  polylineMousedown = this._eventManager.getLazyEmitter('mousedown');\n  /**\n   * See developers.google.com/maps/documentation/javascript/reference/polygon#Polyline.mousemove\n   */\n  polylineMousemove = this._eventManager.getLazyEmitter('mousemove');\n  /**\n   * See developers.google.com/maps/documentation/javascript/reference/polygon#Polyline.mouseout\n   */\n  polylineMouseout = this._eventManager.getLazyEmitter('mouseout');\n  /**\n   * See developers.google.com/maps/documentation/javascript/reference/polygon#Polyline.mouseover\n   */\n  polylineMouseover = this._eventManager.getLazyEmitter('mouseover');\n  /**\n   * See developers.google.com/maps/documentation/javascript/reference/polygon#Polyline.mouseup\n   */\n  polylineMouseup = this._eventManager.getLazyEmitter('mouseup');\n  /**\n   * See developers.google.com/maps/documentation/javascript/reference/polygon#Polyline.rightclick\n   */\n  polylineRightclick = this._eventManager.getLazyEmitter('rightclick');\n  /** Event emitted when the polyline is initialized. */\n  polylineInitialized = new EventEmitter();\n  constructor() {}\n  ngOnInit() {\n    if (this._map._isBrowser) {\n      this._combineOptions().pipe(take(1)).subscribe(options => {\n        if (google.maps.Polyline && this._map.googleMap) {\n          this._initialize(this._map.googleMap, google.maps.Polyline, options);\n        } else {\n          this._ngZone.runOutsideAngular(() => {\n            Promise.all([this._map._resolveMap(), google.maps.importLibrary('maps')]).then(([map, lib]) => {\n              this._initialize(map, lib.Polyline, options);\n            });\n          });\n        }\n      });\n    }\n  }\n  _initialize(map, polylineConstructor, options) {\n    // Create the object outside the zone so its events don't trigger change detection.\n    // We'll bring it back in inside the `MapEventManager` only for the events that the\n    // user has subscribed to.\n    this._ngZone.runOutsideAngular(() => {\n      this.polyline = new polylineConstructor(options);\n      this._assertInitialized();\n      this.polyline.setMap(map);\n      this._eventManager.setTarget(this.polyline);\n      this.polylineInitialized.emit(this.polyline);\n      this._watchForOptionsChanges();\n      this._watchForPathChanges();\n    });\n  }\n  ngOnDestroy() {\n    this._eventManager.destroy();\n    this._destroyed.next();\n    this._destroyed.complete();\n    this.polyline?.setMap(null);\n  }\n  /**\n   * See\n   * developers.google.com/maps/documentation/javascript/reference/polygon#Polyline.getDraggable\n   */\n  getDraggable() {\n    this._assertInitialized();\n    return this.polyline.getDraggable();\n  }\n  /**\n   * See developers.google.com/maps/documentation/javascript/reference/polygon#Polyline.getEditable\n   */\n  getEditable() {\n    this._assertInitialized();\n    return this.polyline.getEditable();\n  }\n  /**\n   * See developers.google.com/maps/documentation/javascript/reference/polygon#Polyline.getPath\n   */\n  getPath() {\n    this._assertInitialized();\n    return this.polyline.getPath();\n  }\n  /**\n   * See developers.google.com/maps/documentation/javascript/reference/polygon#Polyline.getVisible\n   */\n  getVisible() {\n    this._assertInitialized();\n    return this.polyline.getVisible();\n  }\n  _combineOptions() {\n    return combineLatest([this._options, this._path]).pipe(map(([options, path]) => {\n      const combinedOptions = {\n        ...options,\n        path: path || options.path\n      };\n      return combinedOptions;\n    }));\n  }\n  _watchForOptionsChanges() {\n    this._options.pipe(takeUntil(this._destroyed)).subscribe(options => {\n      this._assertInitialized();\n      this.polyline.setOptions(options);\n    });\n  }\n  _watchForPathChanges() {\n    this._path.pipe(takeUntil(this._destroyed)).subscribe(path => {\n      if (path) {\n        this._assertInitialized();\n        this.polyline.setPath(path);\n      }\n    });\n  }\n  _assertInitialized() {\n    if (typeof ngDevMode === 'undefined' || ngDevMode) {\n      if (!this.polyline) {\n        throw Error('Cannot interact with a Google Map Polyline before it has been ' + 'initialized. Please wait for the Polyline to load before trying to interact with it.');\n      }\n    }\n  }\n  static ɵfac = function MapPolyline_Factory(__ngFactoryType__) {\n    return new (__ngFactoryType__ || MapPolyline)();\n  };\n  static ɵdir = /* @__PURE__ */i0.ɵɵdefineDirective({\n    type: MapPolyline,\n    selectors: [[\"map-polyline\"]],\n    inputs: {\n      options: \"options\",\n      path: \"path\"\n    },\n    outputs: {\n      polylineClick: \"polylineClick\",\n      polylineDblclick: \"polylineDblclick\",\n      polylineDrag: \"polylineDrag\",\n      polylineDragend: \"polylineDragend\",\n      polylineDragstart: \"polylineDragstart\",\n      polylineMousedown: \"polylineMousedown\",\n      polylineMousemove: \"polylineMousemove\",\n      polylineMouseout: \"polylineMouseout\",\n      polylineMouseover: \"polylineMouseover\",\n      polylineMouseup: \"polylineMouseup\",\n      polylineRightclick: \"polylineRightclick\",\n      polylineInitialized: \"polylineInitialized\"\n    },\n    exportAs: [\"mapPolyline\"]\n  });\n}\n(() => {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(MapPolyline, [{\n    type: Directive,\n    args: [{\n      selector: 'map-polyline',\n      exportAs: 'mapPolyline'\n    }]\n  }], () => [], {\n    options: [{\n      type: Input\n    }],\n    path: [{\n      type: Input\n    }],\n    polylineClick: [{\n      type: Output\n    }],\n    polylineDblclick: [{\n      type: Output\n    }],\n    polylineDrag: [{\n      type: Output\n    }],\n    polylineDragend: [{\n      type: Output\n    }],\n    polylineDragstart: [{\n      type: Output\n    }],\n    polylineMousedown: [{\n      type: Output\n    }],\n    polylineMousemove: [{\n      type: Output\n    }],\n    polylineMouseout: [{\n      type: Output\n    }],\n    polylineMouseover: [{\n      type: Output\n    }],\n    polylineMouseup: [{\n      type: Output\n    }],\n    polylineRightclick: [{\n      type: Output\n    }],\n    polylineInitialized: [{\n      type: Output\n    }]\n  });\n})();\n\n// Workaround for: https://github.com/bazelbuild/rules_nodejs/issues/1265\n/**\n * Angular component that renders a Google Maps Rectangle via the Google Maps JavaScript API.\n *\n * See developers.google.com/maps/documentation/javascript/reference/polygon#Rectangle\n */\nclass MapRectangle {\n  _map = inject(GoogleMap);\n  _ngZone = inject(NgZone);\n  _eventManager = new MapEventManager(inject(NgZone));\n  _options = new BehaviorSubject({});\n  _bounds = new BehaviorSubject(undefined);\n  _destroyed = new Subject();\n  /**\n   * The underlying google.maps.Rectangle object.\n   *\n   * See developers.google.com/maps/documentation/javascript/reference/polygon#Rectangle\n   */\n  rectangle;\n  set options(options) {\n    this._options.next(options || {});\n  }\n  set bounds(bounds) {\n    this._bounds.next(bounds);\n  }\n  /**\n   * See\n   * developers.google.com/maps/documentation/javascript/reference/polygon#Rectangle.boundsChanged\n   */\n  boundsChanged = this._eventManager.getLazyEmitter('bounds_changed');\n  /**\n   * See\n   * developers.google.com/maps/documentation/javascript/reference/polygon#Rectangle.click\n   */\n  rectangleClick = this._eventManager.getLazyEmitter('click');\n  /**\n   * See\n   * developers.google.com/maps/documentation/javascript/reference/polygon#Rectangle.dblclick\n   */\n  rectangleDblclick = this._eventManager.getLazyEmitter('dblclick');\n  /**\n   * See\n   * developers.google.com/maps/documentation/javascript/reference/polygon#Rectangle.drag\n   */\n  rectangleDrag = this._eventManager.getLazyEmitter('drag');\n  /**\n   * See\n   * developers.google.com/maps/documentation/javascript/reference/polygon#Rectangle.dragend\n   */\n  rectangleDragend = this._eventManager.getLazyEmitter('dragend');\n  /**\n   * See\n   * developers.google.com/maps/documentation/javascript/reference/polygon#Rectangle.dragstart\n   */\n  rectangleDragstart = this._eventManager.getLazyEmitter('dragstart');\n  /**\n   * See\n   * developers.google.com/maps/documentation/javascript/reference/polygon#Rectangle.mousedown\n   */\n  rectangleMousedown = this._eventManager.getLazyEmitter('mousedown');\n  /**\n   * See\n   * developers.google.com/maps/documentation/javascript/reference/polygon#Rectangle.mousemove\n   */\n  rectangleMousemove = this._eventManager.getLazyEmitter('mousemove');\n  /**\n   * See\n   * developers.google.com/maps/documentation/javascript/reference/polygon#Rectangle.mouseout\n   */\n  rectangleMouseout = this._eventManager.getLazyEmitter('mouseout');\n  /**\n   * See\n   * developers.google.com/maps/documentation/javascript/reference/polygon#Rectangle.mouseover\n   */\n  rectangleMouseover = this._eventManager.getLazyEmitter('mouseover');\n  /**\n   * See\n   * developers.google.com/maps/documentation/javascript/reference/polygon#Rectangle.mouseup\n   */\n  rectangleMouseup = this._eventManager.getLazyEmitter('mouseup');\n  /**\n   * See\n   * developers.google.com/maps/documentation/javascript/reference/polygon#Rectangle.rightclick\n   */\n  rectangleRightclick = this._eventManager.getLazyEmitter('rightclick');\n  /** Event emitted when the rectangle is initialized. */\n  rectangleInitialized = new EventEmitter();\n  constructor() {}\n  ngOnInit() {\n    if (this._map._isBrowser) {\n      this._combineOptions().pipe(take(1)).subscribe(options => {\n        if (google.maps.Rectangle && this._map.googleMap) {\n          this._initialize(this._map.googleMap, google.maps.Rectangle, options);\n        } else {\n          this._ngZone.runOutsideAngular(() => {\n            Promise.all([this._map._resolveMap(), google.maps.importLibrary('maps')]).then(([map, lib]) => {\n              this._initialize(map, lib.Rectangle, options);\n            });\n          });\n        }\n      });\n    }\n  }\n  _initialize(map, rectangleConstructor, options) {\n    // Create the object outside the zone so its events don't trigger change detection.\n    // We'll bring it back in inside the `MapEventManager` only for the events that the\n    // user has subscribed to.\n    this._ngZone.runOutsideAngular(() => {\n      this.rectangle = new rectangleConstructor(options);\n      this._assertInitialized();\n      this.rectangle.setMap(map);\n      this._eventManager.setTarget(this.rectangle);\n      this.rectangleInitialized.emit(this.rectangle);\n      this._watchForOptionsChanges();\n      this._watchForBoundsChanges();\n    });\n  }\n  ngOnDestroy() {\n    this._eventManager.destroy();\n    this._destroyed.next();\n    this._destroyed.complete();\n    this.rectangle?.setMap(null);\n  }\n  /**\n   * See\n   * developers.google.com/maps/documentation/javascript/reference/polygon#Rectangle.getBounds\n   */\n  getBounds() {\n    this._assertInitialized();\n    return this.rectangle.getBounds();\n  }\n  /**\n   * See\n   * developers.google.com/maps/documentation/javascript/reference/polygon#Rectangle.getDraggable\n   */\n  getDraggable() {\n    this._assertInitialized();\n    return this.rectangle.getDraggable();\n  }\n  /**\n   * See\n   * developers.google.com/maps/documentation/javascript/reference/polygon#Rectangle.getEditable\n   */\n  getEditable() {\n    this._assertInitialized();\n    return this.rectangle.getEditable();\n  }\n  /**\n   * See\n   * developers.google.com/maps/documentation/javascript/reference/polygon#Rectangle.getVisible\n   */\n  getVisible() {\n    this._assertInitialized();\n    return this.rectangle.getVisible();\n  }\n  _combineOptions() {\n    return combineLatest([this._options, this._bounds]).pipe(map(([options, bounds]) => {\n      const combinedOptions = {\n        ...options,\n        bounds: bounds || options.bounds\n      };\n      return combinedOptions;\n    }));\n  }\n  _watchForOptionsChanges() {\n    this._options.pipe(takeUntil(this._destroyed)).subscribe(options => {\n      this._assertInitialized();\n      this.rectangle.setOptions(options);\n    });\n  }\n  _watchForBoundsChanges() {\n    this._bounds.pipe(takeUntil(this._destroyed)).subscribe(bounds => {\n      if (bounds) {\n        this._assertInitialized();\n        this.rectangle.setBounds(bounds);\n      }\n    });\n  }\n  _assertInitialized() {\n    if (typeof ngDevMode === 'undefined' || ngDevMode) {\n      if (!this.rectangle) {\n        throw Error('Cannot interact with a Google Map Rectangle before it has been initialized. ' + 'Please wait for the Rectangle to load before trying to interact with it.');\n      }\n    }\n  }\n  static ɵfac = function MapRectangle_Factory(__ngFactoryType__) {\n    return new (__ngFactoryType__ || MapRectangle)();\n  };\n  static ɵdir = /* @__PURE__ */i0.ɵɵdefineDirective({\n    type: MapRectangle,\n    selectors: [[\"map-rectangle\"]],\n    inputs: {\n      options: \"options\",\n      bounds: \"bounds\"\n    },\n    outputs: {\n      boundsChanged: \"boundsChanged\",\n      rectangleClick: \"rectangleClick\",\n      rectangleDblclick: \"rectangleDblclick\",\n      rectangleDrag: \"rectangleDrag\",\n      rectangleDragend: \"rectangleDragend\",\n      rectangleDragstart: \"rectangleDragstart\",\n      rectangleMousedown: \"rectangleMousedown\",\n      rectangleMousemove: \"rectangleMousemove\",\n      rectangleMouseout: \"rectangleMouseout\",\n      rectangleMouseover: \"rectangleMouseover\",\n      rectangleMouseup: \"rectangleMouseup\",\n      rectangleRightclick: \"rectangleRightclick\",\n      rectangleInitialized: \"rectangleInitialized\"\n    },\n    exportAs: [\"mapRectangle\"]\n  });\n}\n(() => {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(MapRectangle, [{\n    type: Directive,\n    args: [{\n      selector: 'map-rectangle',\n      exportAs: 'mapRectangle'\n    }]\n  }], () => [], {\n    options: [{\n      type: Input\n    }],\n    bounds: [{\n      type: Input\n    }],\n    boundsChanged: [{\n      type: Output\n    }],\n    rectangleClick: [{\n      type: Output\n    }],\n    rectangleDblclick: [{\n      type: Output\n    }],\n    rectangleDrag: [{\n      type: Output\n    }],\n    rectangleDragend: [{\n      type: Output\n    }],\n    rectangleDragstart: [{\n      type: Output\n    }],\n    rectangleMousedown: [{\n      type: Output\n    }],\n    rectangleMousemove: [{\n      type: Output\n    }],\n    rectangleMouseout: [{\n      type: Output\n    }],\n    rectangleMouseover: [{\n      type: Output\n    }],\n    rectangleMouseup: [{\n      type: Output\n    }],\n    rectangleRightclick: [{\n      type: Output\n    }],\n    rectangleInitialized: [{\n      type: Output\n    }]\n  });\n})();\n\n// Workaround for: https://github.com/bazelbuild/rules_nodejs/issues/1265\n/**\n * Angular component that renders a Google Maps Traffic Layer via the Google Maps JavaScript API.\n *\n * See developers.google.com/maps/documentation/javascript/reference/map#TrafficLayer\n */\nclass MapTrafficLayer {\n  _map = inject(GoogleMap);\n  _ngZone = inject(NgZone);\n  _autoRefresh = new BehaviorSubject(true);\n  _destroyed = new Subject();\n  /**\n   * The underlying google.maps.TrafficLayer object.\n   *\n   * See developers.google.com/maps/documentation/javascript/reference/map#TrafficLayer\n   */\n  trafficLayer;\n  /**\n   * Whether the traffic layer refreshes with updated information automatically.\n   */\n  set autoRefresh(autoRefresh) {\n    this._autoRefresh.next(autoRefresh);\n  }\n  /** Event emitted when the traffic layer is initialized. */\n  trafficLayerInitialized = new EventEmitter();\n  constructor() {}\n  ngOnInit() {\n    if (this._map._isBrowser) {\n      this._combineOptions().pipe(take(1)).subscribe(options => {\n        if (google.maps.TrafficLayer && this._map.googleMap) {\n          this._initialize(this._map.googleMap, google.maps.TrafficLayer, options);\n        } else {\n          this._ngZone.runOutsideAngular(() => {\n            Promise.all([this._map._resolveMap(), google.maps.importLibrary('maps')]).then(([map, lib]) => {\n              this._initialize(map, lib.TrafficLayer, options);\n            });\n          });\n        }\n      });\n    }\n  }\n  _initialize(map, layerConstructor, options) {\n    this._ngZone.runOutsideAngular(() => {\n      this.trafficLayer = new layerConstructor(options);\n      this._assertInitialized();\n      this.trafficLayer.setMap(map);\n      this.trafficLayerInitialized.emit(this.trafficLayer);\n      this._watchForAutoRefreshChanges();\n    });\n  }\n  ngOnDestroy() {\n    this._destroyed.next();\n    this._destroyed.complete();\n    this.trafficLayer?.setMap(null);\n  }\n  _combineOptions() {\n    return this._autoRefresh.pipe(map(autoRefresh => {\n      const combinedOptions = {\n        autoRefresh\n      };\n      return combinedOptions;\n    }));\n  }\n  _watchForAutoRefreshChanges() {\n    this._combineOptions().pipe(takeUntil(this._destroyed)).subscribe(options => {\n      this._assertInitialized();\n      this.trafficLayer.setOptions(options);\n    });\n  }\n  _assertInitialized() {\n    if (!this.trafficLayer) {\n      throw Error('Cannot interact with a Google Map Traffic Layer before it has been initialized. ' + 'Please wait for the Traffic Layer to load before trying to interact with it.');\n    }\n  }\n  static ɵfac = function MapTrafficLayer_Factory(__ngFactoryType__) {\n    return new (__ngFactoryType__ || MapTrafficLayer)();\n  };\n  static ɵdir = /* @__PURE__ */i0.ɵɵdefineDirective({\n    type: MapTrafficLayer,\n    selectors: [[\"map-traffic-layer\"]],\n    inputs: {\n      autoRefresh: \"autoRefresh\"\n    },\n    outputs: {\n      trafficLayerInitialized: \"trafficLayerInitialized\"\n    },\n    exportAs: [\"mapTrafficLayer\"]\n  });\n}\n(() => {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(MapTrafficLayer, [{\n    type: Directive,\n    args: [{\n      selector: 'map-traffic-layer',\n      exportAs: 'mapTrafficLayer'\n    }]\n  }], () => [], {\n    autoRefresh: [{\n      type: Input\n    }],\n    trafficLayerInitialized: [{\n      type: Output\n    }]\n  });\n})();\n\n// Workaround for: https://github.com/bazelbuild/rules_nodejs/issues/1265\n/**\n * Angular component that renders a Google Maps Transit Layer via the Google Maps JavaScript API.\n *\n * See developers.google.com/maps/documentation/javascript/reference/map#TransitLayer\n */\nclass MapTransitLayer {\n  _map = inject(GoogleMap);\n  _zone = inject(NgZone);\n  /**\n   * The underlying google.maps.TransitLayer object.\n   *\n   * See developers.google.com/maps/documentation/javascript/reference/map#TransitLayer\n   */\n  transitLayer;\n  /** Event emitted when the transit layer is initialized. */\n  transitLayerInitialized = new EventEmitter();\n  ngOnInit() {\n    if (this._map._isBrowser) {\n      if (google.maps.TransitLayer && this._map.googleMap) {\n        this._initialize(this._map.googleMap, google.maps.TransitLayer);\n      } else {\n        this._zone.runOutsideAngular(() => {\n          Promise.all([this._map._resolveMap(), google.maps.importLibrary('maps')]).then(([map, lib]) => {\n            this._initialize(map, lib.TransitLayer);\n          });\n        });\n      }\n    }\n  }\n  _initialize(map, layerConstructor) {\n    this._zone.runOutsideAngular(() => {\n      this.transitLayer = new layerConstructor();\n      this.transitLayerInitialized.emit(this.transitLayer);\n      this._assertLayerInitialized();\n      this.transitLayer.setMap(map);\n    });\n  }\n  ngOnDestroy() {\n    this.transitLayer?.setMap(null);\n  }\n  _assertLayerInitialized() {\n    if (!this.transitLayer) {\n      throw Error('Cannot interact with a Google Map Transit Layer before it has been initialized. ' + 'Please wait for the Transit Layer to load before trying to interact with it.');\n    }\n  }\n  static ɵfac = function MapTransitLayer_Factory(__ngFactoryType__) {\n    return new (__ngFactoryType__ || MapTransitLayer)();\n  };\n  static ɵdir = /* @__PURE__ */i0.ɵɵdefineDirective({\n    type: MapTransitLayer,\n    selectors: [[\"map-transit-layer\"]],\n    outputs: {\n      transitLayerInitialized: \"transitLayerInitialized\"\n    },\n    exportAs: [\"mapTransitLayer\"]\n  });\n}\n(() => {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(MapTransitLayer, [{\n    type: Directive,\n    args: [{\n      selector: 'map-transit-layer',\n      exportAs: 'mapTransitLayer'\n    }]\n  }], null, {\n    transitLayerInitialized: [{\n      type: Output\n    }]\n  });\n})();\n\n// Workaround for: https://github.com/bazelbuild/rules_nodejs/issues/1265\n/**\n * Angular directive that renders a Google Maps heatmap via the Google Maps JavaScript API.\n *\n * See: https://developers.google.com/maps/documentation/javascript/reference/visualization\n */\nclass MapHeatmapLayer {\n  _googleMap = inject(GoogleMap);\n  _ngZone = inject(NgZone);\n  /**\n   * Data shown on the heatmap.\n   * See: https://developers.google.com/maps/documentation/javascript/reference/visualization\n   */\n  set data(data) {\n    this._data = data;\n  }\n  _data;\n  /**\n   * Options used to configure the heatmap. See:\n   * developers.google.com/maps/documentation/javascript/reference/visualization#HeatmapLayerOptions\n   */\n  set options(options) {\n    this._options = options;\n  }\n  _options;\n  /**\n   * The underlying google.maps.visualization.HeatmapLayer object.\n   *\n   * See: https://developers.google.com/maps/documentation/javascript/reference/visualization\n   */\n  heatmap;\n  /** Event emitted when the heatmap is initialized. */\n  heatmapInitialized = new EventEmitter();\n  constructor() {}\n  ngOnInit() {\n    if (this._googleMap._isBrowser) {\n      if (!window.google?.maps?.visualization && !window.google?.maps.importLibrary && (typeof ngDevMode === 'undefined' || ngDevMode)) {\n        throw Error('Namespace `google.maps.visualization` not found, cannot construct heatmap. ' + 'Please install the Google Maps JavaScript API with the \"visualization\" library: ' + 'https://developers.google.com/maps/documentation/javascript/visualization');\n      }\n      if (google.maps.visualization?.HeatmapLayer && this._googleMap.googleMap) {\n        this._initialize(this._googleMap.googleMap, google.maps.visualization.HeatmapLayer);\n      } else {\n        this._ngZone.runOutsideAngular(() => {\n          Promise.all([this._googleMap._resolveMap(), google.maps.importLibrary('visualization')]).then(([map, lib]) => {\n            this._initialize(map, lib.HeatmapLayer);\n          });\n        });\n      }\n    }\n  }\n  _initialize(map, heatmapConstructor) {\n    // Create the object outside the zone so its events don't trigger change detection.\n    // We'll bring it back in inside the `MapEventManager` only for the events that the\n    // user has subscribed to.\n    this._ngZone.runOutsideAngular(() => {\n      this.heatmap = new heatmapConstructor(this._combineOptions());\n      this._assertInitialized();\n      this.heatmap.setMap(map);\n      this.heatmapInitialized.emit(this.heatmap);\n    });\n  }\n  ngOnChanges(changes) {\n    const {\n      _data,\n      heatmap\n    } = this;\n    if (heatmap) {\n      if (changes['options']) {\n        heatmap.setOptions(this._combineOptions());\n      }\n      if (changes['data'] && _data !== undefined) {\n        heatmap.setData(this._normalizeData(_data));\n      }\n    }\n  }\n  ngOnDestroy() {\n    this.heatmap?.setMap(null);\n  }\n  /**\n   * Gets the data that is currently shown on the heatmap.\n   * See: developers.google.com/maps/documentation/javascript/reference/visualization#HeatmapLayer\n   */\n  getData() {\n    this._assertInitialized();\n    return this.heatmap.getData();\n  }\n  /** Creates a combined options object using the passed-in options and the individual inputs. */\n  _combineOptions() {\n    const options = this._options || {};\n    return {\n      ...options,\n      data: this._normalizeData(this._data || options.data || []),\n      map: this._googleMap.googleMap\n    };\n  }\n  /**\n   * Most Google Maps APIs support both `LatLng` objects and `LatLngLiteral`. The latter is more\n   * convenient to write out, because the Google Maps API doesn't have to have been loaded in order\n   * to construct them. The `HeatmapLayer` appears to be an exception that only allows a `LatLng`\n   * object, or it throws a runtime error. Since it's more convenient and we expect that Angular\n   * users will load the API asynchronously, we allow them to pass in a `LatLngLiteral` and we\n   * convert it to a `LatLng` object before passing it off to Google Maps.\n   */\n  _normalizeData(data) {\n    const result = [];\n    data.forEach(item => {\n      result.push(isLatLngLiteral(item) ? new google.maps.LatLng(item.lat, item.lng) : item);\n    });\n    return result;\n  }\n  /** Asserts that the heatmap object has been initialized. */\n  _assertInitialized() {\n    if (typeof ngDevMode === 'undefined' || ngDevMode) {\n      if (!this.heatmap) {\n        throw Error('Cannot interact with a Google Map HeatmapLayer before it has been ' + 'initialized. Please wait for the heatmap to load before trying to interact with it.');\n      }\n    }\n  }\n  static ɵfac = function MapHeatmapLayer_Factory(__ngFactoryType__) {\n    return new (__ngFactoryType__ || MapHeatmapLayer)();\n  };\n  static ɵdir = /* @__PURE__ */i0.ɵɵdefineDirective({\n    type: MapHeatmapLayer,\n    selectors: [[\"map-heatmap-layer\"]],\n    inputs: {\n      data: \"data\",\n      options: \"options\"\n    },\n    outputs: {\n      heatmapInitialized: \"heatmapInitialized\"\n    },\n    exportAs: [\"mapHeatmapLayer\"],\n    features: [i0.ɵɵNgOnChangesFeature]\n  });\n}\n(() => {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(MapHeatmapLayer, [{\n    type: Directive,\n    args: [{\n      selector: 'map-heatmap-layer',\n      exportAs: 'mapHeatmapLayer'\n    }]\n  }], () => [], {\n    data: [{\n      type: Input\n    }],\n    options: [{\n      type: Input\n    }],\n    heatmapInitialized: [{\n      type: Output\n    }]\n  });\n})();\n/** Asserts that an object is a `LatLngLiteral`. */\nfunction isLatLngLiteral(value) {\n  return value && typeof value.lat === 'number' && typeof value.lng === 'number';\n}\n\n// Workaround for: https://github.com/bazelbuild/rules_nodejs/issues/1265\n/**\n * Default options for the Google Maps marker component. Displays a marker\n * at the Googleplex.\n */\nconst DEFAULT_MARKER_OPTIONS = {\n  position: {\n    lat: 37.221995,\n    lng: -122.184092\n  }\n};\n/**\n * Angular component that renders a Google Maps marker via the Google Maps JavaScript API.\n *\n * See developers.google.com/maps/documentation/javascript/reference/marker\n */\nclass MapAdvancedMarker {\n  _googleMap = inject(GoogleMap);\n  _ngZone = inject(NgZone);\n  _eventManager = new MapEventManager(inject(NgZone));\n  /**\n   * Rollover text. If provided, an accessibility text (e.g. for use with screen readers) will be added to the AdvancedMarkerElement with the provided value.\n   * See: https://developers.google.com/maps/documentation/javascript/reference/advanced-markers#AdvancedMarkerElementOptions.title\n   */\n  set title(title) {\n    this._title = title;\n  }\n  _title;\n  /**\n   * Sets the AdvancedMarkerElement's position. An AdvancedMarkerElement may be constructed without a position, but will not be displayed until its position is provided - for example, by a user's actions or choices. An AdvancedMarkerElement's position can be provided by setting AdvancedMarkerElement.position if not provided at the construction.\n   * Note: AdvancedMarkerElement with altitude is only supported on vector maps.\n   * https://developers.google.com/maps/documentation/javascript/reference/advanced-markers#AdvancedMarkerElementOptions.position\n   */\n  set position(position) {\n    this._position = position;\n  }\n  _position;\n  /**\n   * The DOM Element backing the visual of an AdvancedMarkerElement.\n   * Note: AdvancedMarkerElement does not clone the passed-in DOM element. Once the DOM element is passed to an AdvancedMarkerElement, passing the same DOM element to another AdvancedMarkerElement will move the DOM element and cause the previous AdvancedMarkerElement to look empty.\n   * See: https://developers.google.com/maps/documentation/javascript/reference/advanced-markers#AdvancedMarkerElementOptions.content\n   */\n  set content(content) {\n    this._content = content;\n  }\n  _content;\n  /**\n   * If true, the AdvancedMarkerElement can be dragged.\n   * Note: AdvancedMarkerElement with altitude is not draggable.\n   * https://developers.google.com/maps/documentation/javascript/reference/advanced-markers#AdvancedMarkerElementOptions.gmpDraggable\n   */\n  set gmpDraggable(draggable) {\n    this._draggable = draggable;\n  }\n  _draggable;\n  /**\n   * Options for constructing an AdvancedMarkerElement.\n   * https://developers.google.com/maps/documentation/javascript/reference/advanced-markers#AdvancedMarkerElementOptions\n   */\n  set options(options) {\n    this._options = options;\n  }\n  _options;\n  /**\n   * AdvancedMarkerElements on the map are prioritized by zIndex, with higher values indicating higher display.\n   * https://developers.google.com/maps/documentation/javascript/reference/advanced-markers#AdvancedMarkerElementOptions.zIndex\n   */\n  set zIndex(zIndex) {\n    this._zIndex = zIndex;\n  }\n  _zIndex;\n  /**\n   * This event is fired when the AdvancedMarkerElement element is clicked.\n   * https://developers.google.com/maps/documentation/javascript/reference/advanced-markers#AdvancedMarkerElement.click\n   */\n  mapClick = this._eventManager.getLazyEmitter('click');\n  /**\n   * This event is fired when the AdvancedMarkerElement is double-clicked.\n   */\n  mapDblclick = this._eventManager.getLazyEmitter('dblclick');\n  /**\n   * This event is fired when the mouse moves out of the AdvancedMarkerElement.\n   */\n  mapMouseout = this._eventManager.getLazyEmitter('mouseout');\n  /**\n   * This event is fired when the mouse moves over the AdvancedMarkerElement.\n   */\n  mapMouseover = this._eventManager.getLazyEmitter('mouseover');\n  /**\n   * This event is fired when the mouse button is released over the AdvancedMarkerElement.\n   */\n  mapMouseup = this._eventManager.getLazyEmitter('mouseup');\n  /**\n   * This event is fired when the AdvancedMarkerElement is right-clicked.\n   */\n  mapRightclick = this._eventManager.getLazyEmitter('rightclick');\n  /**\n   * This event is repeatedly fired while the user drags the AdvancedMarkerElement.\n   * https://developers.google.com/maps/documentation/javascript/reference/advanced-markers#AdvancedMarkerElement.drag\n   */\n  mapDrag = this._eventManager.getLazyEmitter('drag');\n  /**\n   * This event is fired when the user stops dragging the AdvancedMarkerElement.\n   * https://developers.google.com/maps/documentation/javascript/reference/advanced-markers#AdvancedMarkerElement.dragend\n   */\n  mapDragend = this._eventManager.getLazyEmitter('dragend');\n  /**\n   * This event is fired when the user starts dragging the AdvancedMarkerElement.\n   * https://developers.google.com/maps/documentation/javascript/reference/advanced-markers#AdvancedMarkerElement.dragstart\n   */\n  mapDragstart = this._eventManager.getLazyEmitter('dragstart');\n  /** Event emitted when the marker is initialized. */\n  markerInitialized = new EventEmitter();\n  /**\n   * The underlying google.maps.marker.AdvancedMarkerElement object.\n   *\n   * See developers.google.com/maps/documentation/javascript/reference/advanced-markers#AdvancedMarkerElement\n   */\n  advancedMarker;\n  constructor() {}\n  ngOnInit() {\n    if (!this._googleMap._isBrowser) {\n      return;\n    }\n    if (google.maps.marker?.AdvancedMarkerElement && this._googleMap.googleMap) {\n      this._initialize(this._googleMap.googleMap, google.maps.marker.AdvancedMarkerElement);\n    } else {\n      this._ngZone.runOutsideAngular(() => {\n        Promise.all([this._googleMap._resolveMap(), google.maps.importLibrary('marker')]).then(([map, lib]) => {\n          this._initialize(map, lib.AdvancedMarkerElement);\n        });\n      });\n    }\n  }\n  _initialize(map, advancedMarkerConstructor) {\n    // Create the object outside the zone so its events don't trigger change detection.\n    // We'll bring it back in inside the `MapEventManager` only for the events that the\n    // user has subscribed to.\n    this._ngZone.runOutsideAngular(() => {\n      this.advancedMarker = new advancedMarkerConstructor(this._combineOptions());\n      this._assertInitialized();\n      this.advancedMarker.map = map;\n      this._eventManager.setTarget(this.advancedMarker);\n      this.markerInitialized.next(this.advancedMarker);\n    });\n  }\n  ngOnChanges(changes) {\n    const {\n      advancedMarker,\n      _content,\n      _position,\n      _title,\n      _draggable,\n      _zIndex\n    } = this;\n    if (advancedMarker) {\n      if (changes['title']) {\n        advancedMarker.title = _title;\n      }\n      if (changes['gmpDraggable']) {\n        advancedMarker.gmpDraggable = _draggable;\n      }\n      if (changes['content']) {\n        advancedMarker.content = _content;\n      }\n      if (changes['position']) {\n        advancedMarker.position = _position;\n      }\n      if (changes['zIndex']) {\n        advancedMarker.zIndex = _zIndex;\n      }\n    }\n  }\n  ngOnDestroy() {\n    this.markerInitialized.complete();\n    this._eventManager.destroy();\n    if (this.advancedMarker) {\n      this.advancedMarker.map = null;\n    }\n  }\n  getAnchor() {\n    this._assertInitialized();\n    return this.advancedMarker;\n  }\n  /** Returns a promise that resolves when the marker has been initialized. */\n  _resolveMarker() {\n    return this.advancedMarker ? Promise.resolve(this.advancedMarker) : this.markerInitialized.pipe(take(1)).toPromise();\n  }\n  /** Creates a combined options object using the passed-in options and the individual inputs. */\n  _combineOptions() {\n    const options = this._options || DEFAULT_MARKER_OPTIONS;\n    return {\n      ...options,\n      title: this._title || options.title,\n      position: this._position || options.position,\n      content: this._content || options.content,\n      zIndex: this._zIndex ?? options.zIndex,\n      gmpDraggable: this._draggable ?? options.gmpDraggable,\n      map: this._googleMap.googleMap\n    };\n  }\n  /** Asserts that the map has been initialized. */\n  _assertInitialized() {\n    if (typeof ngDevMode === 'undefined' || ngDevMode) {\n      if (!this.advancedMarker) {\n        throw Error('Cannot interact with a Google Map Marker before it has been ' + 'initialized. Please wait for the Marker to load before trying to interact with it.');\n      }\n    }\n  }\n  static ɵfac = function MapAdvancedMarker_Factory(__ngFactoryType__) {\n    return new (__ngFactoryType__ || MapAdvancedMarker)();\n  };\n  static ɵdir = /* @__PURE__ */i0.ɵɵdefineDirective({\n    type: MapAdvancedMarker,\n    selectors: [[\"map-advanced-marker\"]],\n    inputs: {\n      title: \"title\",\n      position: \"position\",\n      content: \"content\",\n      gmpDraggable: \"gmpDraggable\",\n      options: \"options\",\n      zIndex: \"zIndex\"\n    },\n    outputs: {\n      mapClick: \"mapClick\",\n      mapDblclick: \"mapDblclick\",\n      mapMouseout: \"mapMouseout\",\n      mapMouseover: \"mapMouseover\",\n      mapMouseup: \"mapMouseup\",\n      mapRightclick: \"mapRightclick\",\n      mapDrag: \"mapDrag\",\n      mapDragend: \"mapDragend\",\n      mapDragstart: \"mapDragstart\",\n      markerInitialized: \"markerInitialized\"\n    },\n    exportAs: [\"mapAdvancedMarker\"],\n    features: [i0.ɵɵProvidersFeature([{\n      provide: MAP_MARKER,\n      useExisting: MapAdvancedMarker\n    }]), i0.ɵɵNgOnChangesFeature]\n  });\n}\n(() => {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(MapAdvancedMarker, [{\n    type: Directive,\n    args: [{\n      selector: 'map-advanced-marker',\n      exportAs: 'mapAdvancedMarker',\n      providers: [{\n        provide: MAP_MARKER,\n        useExisting: MapAdvancedMarker\n      }]\n    }]\n  }], () => [], {\n    title: [{\n      type: Input\n    }],\n    position: [{\n      type: Input\n    }],\n    content: [{\n      type: Input\n    }],\n    gmpDraggable: [{\n      type: Input\n    }],\n    options: [{\n      type: Input\n    }],\n    zIndex: [{\n      type: Input\n    }],\n    mapClick: [{\n      type: Output\n    }],\n    mapDblclick: [{\n      type: Output\n    }],\n    mapMouseout: [{\n      type: Output\n    }],\n    mapMouseover: [{\n      type: Output\n    }],\n    mapMouseup: [{\n      type: Output\n    }],\n    mapRightclick: [{\n      type: Output\n    }],\n    mapDrag: [{\n      type: Output\n    }],\n    mapDragend: [{\n      type: Output\n    }],\n    mapDragstart: [{\n      type: Output\n    }],\n    markerInitialized: [{\n      type: Output\n    }]\n  });\n})();\n\n// Workaround for: https://github.com/bazelbuild/rules_nodejs/issues/1265\n/**\n * Angular component for implementing a Google Maps Marker Clusterer.\n *\n * See https://developers.google.com/maps/documentation/javascript/marker-clustering\n */\nclass MapMarkerClusterer {\n  _googleMap = inject(GoogleMap);\n  _ngZone = inject(NgZone);\n  _currentMarkers = new Set();\n  _closestMapEventManager = new MapEventManager(this._ngZone);\n  _markersSubscription = Subscription.EMPTY;\n  /** Whether the clusterer is allowed to be initialized. */\n  _canInitialize = this._googleMap._isBrowser;\n  /**\n   * Used to customize how the marker cluster is rendered.\n   * See https://googlemaps.github.io/js-markerclusterer/interfaces/Renderer.html.\n   */\n  renderer;\n  /**\n   * Algorithm used to cluster the markers.\n   * See https://googlemaps.github.io/js-markerclusterer/interfaces/Algorithm.html.\n   */\n  algorithm;\n  /** Emits when clustering has started. */\n  clusteringbegin = this._closestMapEventManager.getLazyEmitter('clusteringbegin');\n  /** Emits when clustering is done. */\n  clusteringend = this._closestMapEventManager.getLazyEmitter('clusteringend');\n  /** Emits when a cluster has been clicked. */\n  clusterClick = new EventEmitter();\n  /** Event emitted when the marker clusterer is initialized. */\n  markerClustererInitialized = new EventEmitter();\n  _markers;\n  /** Underlying MarkerClusterer object used to interact with Google Maps. */\n  markerClusterer;\n  async ngOnInit() {\n    if (this._canInitialize) {\n      await this._createCluster();\n      // The `clusteringbegin` and `clusteringend` events are\n      // emitted on the map so that's why set it as the target.\n      this._closestMapEventManager.setTarget(this._googleMap.googleMap);\n    }\n  }\n  async ngOnChanges(changes) {\n    const change = changes['renderer'] || changes['algorithm'];\n    // Since the options are set in the constructor, we have to recreate the cluster if they change.\n    if (this.markerClusterer && change && !change.isFirstChange()) {\n      await this._createCluster();\n    }\n  }\n  ngOnDestroy() {\n    this._markersSubscription.unsubscribe();\n    this._closestMapEventManager.destroy();\n    this._destroyCluster();\n  }\n  async _createCluster() {\n    if (!markerClusterer?.MarkerClusterer && (typeof ngDevMode === 'undefined' || ngDevMode)) {\n      throw Error('MarkerClusterer class not found, cannot construct a marker cluster. ' + 'Please install the MarkerClusterer library: ' + 'https://github.com/googlemaps/js-markerclusterer');\n    }\n    const map = await this._googleMap._resolveMap();\n    this._destroyCluster();\n    // Create the object outside the zone so its events don't trigger change detection.\n    // We'll bring it back in inside the `MapEventManager` only for the events that the\n    // user has subscribed to.\n    this._ngZone.runOutsideAngular(() => {\n      this.markerClusterer = new markerClusterer.MarkerClusterer({\n        map,\n        renderer: this.renderer,\n        algorithm: this.algorithm,\n        onClusterClick: (event, cluster, map) => {\n          if (this.clusterClick.observers.length) {\n            this._ngZone.run(() => this.clusterClick.emit(cluster));\n          } else {\n            markerClusterer.defaultOnClusterClickHandler(event, cluster, map);\n          }\n        }\n      });\n      this.markerClustererInitialized.emit(this.markerClusterer);\n    });\n    await this._watchForMarkerChanges();\n  }\n  async _watchForMarkerChanges() {\n    this._assertInitialized();\n    const initialMarkers = [];\n    const markers = await this._getInternalMarkers(this._markers.toArray());\n    for (const marker of markers) {\n      this._currentMarkers.add(marker);\n      initialMarkers.push(marker);\n    }\n    this.markerClusterer.addMarkers(initialMarkers);\n    this._markersSubscription.unsubscribe();\n    this._markersSubscription = this._markers.changes.subscribe(async markerComponents => {\n      this._assertInitialized();\n      const newMarkers = new Set(await this._getInternalMarkers(markerComponents));\n      const markersToAdd = [];\n      const markersToRemove = [];\n      for (const marker of Array.from(newMarkers)) {\n        if (!this._currentMarkers.has(marker)) {\n          this._currentMarkers.add(marker);\n          markersToAdd.push(marker);\n        }\n      }\n      for (const marker of Array.from(this._currentMarkers)) {\n        if (!newMarkers.has(marker)) {\n          markersToRemove.push(marker);\n        }\n      }\n      this.markerClusterer.addMarkers(markersToAdd, true);\n      this.markerClusterer.removeMarkers(markersToRemove, true);\n      this.markerClusterer.render();\n      for (const marker of markersToRemove) {\n        this._currentMarkers.delete(marker);\n      }\n    });\n  }\n  _destroyCluster() {\n    // TODO(crisbeto): the naming here seems odd, but the `MarkerCluster` method isn't\n    // exposed. All this method seems to do at the time of writing is to call into `reset`.\n    // See: https://github.com/googlemaps/js-markerclusterer/blob/main/src/markerclusterer.ts#L205\n    this.markerClusterer?.onRemove();\n    this.markerClusterer = undefined;\n  }\n  _getInternalMarkers(markers) {\n    return Promise.all(markers.map(marker => marker._resolveMarker()));\n  }\n  _assertInitialized() {\n    if (typeof ngDevMode === 'undefined' || ngDevMode) {\n      if (!this._googleMap.googleMap) {\n        throw Error('Cannot access Google Map information before the API has been initialized. ' + 'Please wait for the API to load before trying to interact with it.');\n      }\n      if (!this.markerClusterer) {\n        throw Error('Cannot interact with a MarkerClusterer before it has been initialized. ' + 'Please wait for the MarkerClusterer to load before trying to interact with it.');\n      }\n    }\n  }\n  static ɵfac = function MapMarkerClusterer_Factory(__ngFactoryType__) {\n    return new (__ngFactoryType__ || MapMarkerClusterer)();\n  };\n  static ɵcmp = /* @__PURE__ */i0.ɵɵdefineComponent({\n    type: MapMarkerClusterer,\n    selectors: [[\"map-marker-clusterer\"]],\n    contentQueries: function MapMarkerClusterer_ContentQueries(rf, ctx, dirIndex) {\n      if (rf & 1) {\n        i0.ɵɵcontentQuery(dirIndex, MAP_MARKER, 5);\n      }\n      if (rf & 2) {\n        let _t;\n        i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx._markers = _t);\n      }\n    },\n    inputs: {\n      renderer: \"renderer\",\n      algorithm: \"algorithm\"\n    },\n    outputs: {\n      clusteringbegin: \"clusteringbegin\",\n      clusteringend: \"clusteringend\",\n      clusterClick: \"clusterClick\",\n      markerClustererInitialized: \"markerClustererInitialized\"\n    },\n    exportAs: [\"mapMarkerClusterer\"],\n    features: [i0.ɵɵNgOnChangesFeature],\n    ngContentSelectors: _c0,\n    decls: 1,\n    vars: 0,\n    template: function MapMarkerClusterer_Template(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵprojectionDef();\n        i0.ɵɵprojection(0);\n      }\n    },\n    encapsulation: 2,\n    changeDetection: 0\n  });\n}\n(() => {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(MapMarkerClusterer, [{\n    type: Component,\n    args: [{\n      selector: 'map-marker-clusterer',\n      exportAs: 'mapMarkerClusterer',\n      changeDetection: ChangeDetectionStrategy.OnPush,\n      template: '<ng-content/>',\n      encapsulation: ViewEncapsulation.None\n    }]\n  }], null, {\n    renderer: [{\n      type: Input\n    }],\n    algorithm: [{\n      type: Input\n    }],\n    clusteringbegin: [{\n      type: Output\n    }],\n    clusteringend: [{\n      type: Output\n    }],\n    clusterClick: [{\n      type: Output\n    }],\n    markerClustererInitialized: [{\n      type: Output\n    }],\n    _markers: [{\n      type: ContentChildren,\n      args: [MAP_MARKER, {\n        descendants: true\n      }]\n    }]\n  });\n})();\nconst COMPONENTS = [GoogleMap, MapBaseLayer, MapBicyclingLayer, MapCircle, MapDirectionsRenderer, MapGroundOverlay, MapHeatmapLayer, MapInfoWindow, MapKmlLayer, MapMarker, MapAdvancedMarker, DeprecatedMapMarkerClusterer, MapPolygon, MapPolyline, MapRectangle, MapTrafficLayer, MapTransitLayer, MapMarkerClusterer];\nclass GoogleMapsModule {\n  static ɵfac = function GoogleMapsModule_Factory(__ngFactoryType__) {\n    return new (__ngFactoryType__ || GoogleMapsModule)();\n  };\n  static ɵmod = /* @__PURE__ */i0.ɵɵdefineNgModule({\n    type: GoogleMapsModule,\n    imports: [GoogleMap, MapBaseLayer, MapBicyclingLayer, MapCircle, MapDirectionsRenderer, MapGroundOverlay, MapHeatmapLayer, MapInfoWindow, MapKmlLayer, MapMarker, MapAdvancedMarker, DeprecatedMapMarkerClusterer, MapPolygon, MapPolyline, MapRectangle, MapTrafficLayer, MapTransitLayer, MapMarkerClusterer],\n    exports: [GoogleMap, MapBaseLayer, MapBicyclingLayer, MapCircle, MapDirectionsRenderer, MapGroundOverlay, MapHeatmapLayer, MapInfoWindow, MapKmlLayer, MapMarker, MapAdvancedMarker, DeprecatedMapMarkerClusterer, MapPolygon, MapPolyline, MapRectangle, MapTrafficLayer, MapTransitLayer, MapMarkerClusterer]\n  });\n  static ɵinj = /* @__PURE__ */i0.ɵɵdefineInjector({});\n}\n(() => {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(GoogleMapsModule, [{\n    type: NgModule,\n    args: [{\n      imports: COMPONENTS,\n      exports: COMPONENTS\n    }]\n  }], null, null);\n})();\n\n// Workaround for: https://github.com/bazelbuild/rules_nodejs/issues/1265\n/**\n * Angular service that wraps the Google Maps DirectionsService from the Google Maps JavaScript\n * API.\n *\n * See developers.google.com/maps/documentation/javascript/reference/directions#DirectionsService\n */\nclass MapDirectionsService {\n  _ngZone = inject(NgZone);\n  _directionsService;\n  constructor() {}\n  /**\n   * See\n   * developers.google.com/maps/documentation/javascript/reference/directions\n   * #DirectionsService.route\n   */\n  route(request) {\n    return new Observable(observer => {\n      this._getService().then(service => {\n        service.route(request, (result, status) => {\n          this._ngZone.run(() => {\n            observer.next({\n              result: result || undefined,\n              status\n            });\n            observer.complete();\n          });\n        });\n      });\n    });\n  }\n  _getService() {\n    if (!this._directionsService) {\n      if (google.maps.DirectionsService) {\n        this._directionsService = new google.maps.DirectionsService();\n      } else {\n        return google.maps.importLibrary('routes').then(lib => {\n          this._directionsService = new lib.DirectionsService();\n          return this._directionsService;\n        });\n      }\n    }\n    return Promise.resolve(this._directionsService);\n  }\n  static ɵfac = function MapDirectionsService_Factory(__ngFactoryType__) {\n    return new (__ngFactoryType__ || MapDirectionsService)();\n  };\n  static ɵprov = /* @__PURE__ */i0.ɵɵdefineInjectable({\n    token: MapDirectionsService,\n    factory: MapDirectionsService.ɵfac,\n    providedIn: 'root'\n  });\n}\n(() => {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(MapDirectionsService, [{\n    type: Injectable,\n    args: [{\n      providedIn: 'root'\n    }]\n  }], () => [], null);\n})();\n\n// Workaround for: https://github.com/bazelbuild/rules_nodejs/issues/1265\n/**\n * Angular service that wraps the Google Maps Geocoder from the Google Maps JavaScript API.\n * See developers.google.com/maps/documentation/javascript/reference/geocoder#Geocoder\n */\nclass MapGeocoder {\n  _ngZone = inject(NgZone);\n  _geocoder;\n  constructor() {}\n  /**\n   * See developers.google.com/maps/documentation/javascript/reference/geocoder#Geocoder.geocode\n   */\n  geocode(request) {\n    return new Observable(observer => {\n      this._getGeocoder().then(geocoder => {\n        geocoder.geocode(request, (results, status) => {\n          this._ngZone.run(() => {\n            observer.next({\n              results: results || [],\n              status\n            });\n            observer.complete();\n          });\n        });\n      });\n    });\n  }\n  _getGeocoder() {\n    if (!this._geocoder) {\n      if (google.maps.Geocoder) {\n        this._geocoder = new google.maps.Geocoder();\n      } else {\n        return google.maps.importLibrary('geocoding').then(lib => {\n          this._geocoder = new lib.Geocoder();\n          return this._geocoder;\n        });\n      }\n    }\n    return Promise.resolve(this._geocoder);\n  }\n  static ɵfac = function MapGeocoder_Factory(__ngFactoryType__) {\n    return new (__ngFactoryType__ || MapGeocoder)();\n  };\n  static ɵprov = /* @__PURE__ */i0.ɵɵdefineInjectable({\n    token: MapGeocoder,\n    factory: MapGeocoder.ɵfac,\n    providedIn: 'root'\n  });\n}\n(() => {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(MapGeocoder, [{\n    type: Injectable,\n    args: [{\n      providedIn: 'root'\n    }]\n  }], () => [], null);\n})();\nexport { DeprecatedMapMarkerClusterer, GoogleMap, GoogleMapsModule, MapAdvancedMarker, MapBaseLayer, MapBicyclingLayer, MapCircle, MapDirectionsRenderer, MapDirectionsService, MapEventManager, MapGeocoder, MapGroundOverlay, MapHeatmapLayer, MapInfoWindow, MapKmlLayer, MapMarker, MapMarkerClusterer, MapPolygon, MapPolyline, MapRectangle, MapTrafficLayer, MapTransitLayer };\n","import { Injectable } from '@angular/core';\nimport { isDefined } from '../utils';\n\ndeclare global {\n  interface Window {\n    googleMapsInitialized?: Promise<void>;\n    googleMapsCallback?: () => void;\n  }\n}\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class GoogleMapsLoaderService {\n  private apiKey = '';\n  private librariesLoaded: Record<string, boolean> = {};\n\n  constructor() {}\n\n  setApiKey(key: string): void {\n    this.apiKey = key;\n  }\n\n  /**\n   * Load Google Maps API with specified libraries\n   * @param libraries Optional array of Google Maps libraries to load\n   * @returns Promise that resolves when the API is loaded\n   */\n  loadGoogleMaps(libraries: string[] = []): Promise<void> {\n    if (\n      typeof google !== 'undefined' &&\n      isDefined(google?.maps) &&\n      libraries.every((lib) => this.librariesLoaded[lib])\n    ) {\n      return Promise.resolve();\n    }\n\n    if (window.googleMapsInitialized) {\n      return window.googleMapsInitialized;\n    }\n\n    // Check for existing script\n    const existingScript = document.querySelector(\n      'script[src^=\"https://maps.googleapis.com/maps/api/js\"]',\n    );\n    if (existingScript) {\n      window.googleMapsInitialized =\n        window.googleMapsInitialized ??\n        new Promise<void>((resolve) => {\n          if (typeof google !== 'undefined' && isDefined(google.maps)) {\n            resolve();\n          } else {\n            window.googleMapsCallback = () => {\n              resolve();\n              delete window.googleMapsCallback;\n            };\n          }\n        });\n      return window.googleMapsInitialized;\n    }\n\n    const promise = new Promise<void>((resolve, reject) => {\n      window.googleMapsCallback = () => {\n        libraries.forEach((lib) => (this.librariesLoaded[lib] = true));\n        resolve();\n        delete window.googleMapsCallback;\n      };\n\n      try {\n        const script = document.createElement('script');\n        const libraryParam = libraries.length\n          ? `&libraries=${libraries.join(',')}`\n          : '';\n        script.src = `https://maps.googleapis.com/maps/api/js?key=${this.apiKey}${libraryParam}&callback=googleMapsCallback&loading=async`;\n        script.async = true;\n        script.defer = true;\n        script.onerror = () =>\n          reject(new Error('Failed to load Google Maps API'));\n        document.head.appendChild(script);\n      } catch (error) {\n        reject(error instanceof Error ? error : new Error(String(error)));\n      }\n    });\n\n    window.googleMapsInitialized = promise;\n    return promise;\n  }\n}\n","import {\n  Component,\n  AfterViewInit,\n  ViewChild,\n  ElementRef,\n  NgZone,\n  effect,\n  signal,\n  input,\n  model,\n  output,\n  OnDestroy,\n  inject,\n} from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { GoogleMapsModule } from '@angular/google-maps';\nimport { GoogleMapsLoaderService } from '../../../services/google-maps-loader.service';\nimport { environment } from '../../../../../environments/environment';\nimport {\n  LatLngLiteral,\n  MapMarker,\n  MapMouseEvent,\n  MapPolygon,\n  MarkerClickEvent,\n  MarkerDragEvent,\n  PolygonChangeEvent,\n  GoogleMapOptions,\n} from '../../../models/google-maps.interfaces';\nimport { isDefined, isNullOrUndefined, isString } from '../../../utils';\n\n/**\n * Type definition for marker custom data used in this component\n */\nexport interface MarkerCustomData {\n  id?: number | string;\n  type?: string;\n  [key: string]: unknown;\n}\n\n/**\n * Type definition for polygon custom data used in this component\n */\nexport interface PolygonCustomData {\n  id?: number | string;\n  name?: string;\n  [key: string]: unknown;\n}\n\n@Component({\n  selector: 'app-google-map',\n  standalone: true,\n  imports: [CommonModule, GoogleMapsModule],\n  templateUrl: './google-map.component.html',\n  styleUrls: ['./google-map.component.scss'],\n})\nexport class GoogleMapComponent implements AfterViewInit, OnDestroy {\n  private readonly ngZone = inject(NgZone);\n  private readonly googleMapsLoader = inject(GoogleMapsLoaderService);\n\n  @ViewChild('mapContainer') mapContainer!: ElementRef;\n\n  // Input signals with properly typed generics\n  apiKey = input(environment.googleMapsApiKey);\n  center = input<LatLngLiteral>({ lat: 40.7128, lng: -74.006 }); // Default: New York\n  zoom = input(12);\n  mapTypeId = input<google.maps.MapTypeId>('roadmap' as google.maps.MapTypeId);\n  markers = model<MapMarker<MarkerCustomData>[]>([]);\n  useAdvancedMarkers = input(true); // Toggle between legacy markers and advanced markers\n  polygons = model<MapPolygon<PolygonCustomData>[]>([]);\n  class = input('w-full h-[500px]');\n  enableTrafficLayer = input(false);\n  clickableMarkers = input(true);\n  fitBoundsToMarkers = input(false);\n\n  // Output events with properly typed generics\n  readonly mapClick = output<MapMouseEvent>();\n  readonly markerClick = output<MarkerClickEvent<MarkerCustomData>>();\n  readonly mapLoaded = output<google.maps.Map>();\n  readonly boundsChanged = output<google.maps.LatLngBounds>();\n  readonly centerChanged = output<LatLngLiteral>();\n  readonly markerDragEnd = output<MarkerDragEvent<MarkerCustomData>>();\n  readonly polygonChanged = output<PolygonChangeEvent<PolygonCustomData>>();\n\n  map!: google.maps.Map;\n  legacyMarkers: google.maps.Marker[] = [];\n  advancedMarkers: google.maps.marker.AdvancedMarkerElement[] = [];\n  googlePolygons: google.maps.Polygon[] = [];\n  infoWindow: google.maps.InfoWindow | null = null;\n  isMapInitialized = signal(false);\n  trafficLayer?: google.maps.TrafficLayer;\n  private polygonEventListeners: google.maps.MapsEventListener[] = [];\n  private boundsChangedTimeout: number | null = null;\n\n  constructor() {\n    // Effect for center and zoom\n    effect(() => {\n      if (!this.isMapInitialized()) return;\n      this.map.setCenter(this.center());\n      this.map.setZoom(this.zoom());\n    });\n\n    // Effect for markers\n    effect(() => {\n      if (!this.isMapInitialized()) return;\n      // Only update markers when markers signal changes\n      this.updateMarkers();\n    });\n\n    // Effect for polygons\n    effect(() => {\n      if (!this.isMapInitialized()) return;\n      // Only update polygons when polygons signal changes\n      this.updatePolygons();\n    });\n\n    // Effect for other map properties\n    effect(() => {\n      if (!this.isMapInitialized()) return;\n      this.toggleTrafficLayer();\n      this.map.setMapTypeId(this.mapTypeId());\n    });\n  }\n\n  ngAfterViewInit(): void {\n    // Update the API key in the loader service if provided\n    if (this.apiKey()) {\n      this.googleMapsLoader.setApiKey(this.apiKey());\n    }\n\n    // Load Google Maps API and initialize map\n    this.googleMapsLoader\n      .loadGoogleMaps(['geometry'])\n      .then(() => {\n        this.initializeMap();\n      })\n      .catch((error: Error) => {\n        console.error('Error loading Google Maps API:', error);\n      });\n  }\n\n  ngOnDestroy(): void {\n    // Remove all event listeners first\n    this.polygonEventListeners.forEach((listener) =>\n      google.maps.event.removeListener(listener),\n    );\n    this.polygonEventListeners = [];\n\n    // Remove all markers\n    this.clearMarkers();\n\n    // Remove all polygons\n    this.googlePolygons.forEach((polygon) => polygon.setMap(null));\n    this.googlePolygons = [];\n\n    // Remove traffic layer if any\n    if (this.trafficLayer) {\n      this.trafficLayer.setMap(null);\n      this.trafficLayer = undefined;\n    }\n\n    // Close and clear info window\n    if (this.infoWindow) {\n      this.infoWindow.close();\n      this.infoWindow = null;\n    }\n\n    // Optional: Remove all listeners from the map itself\n    if (isDefined(this.map)) {\n      google.maps.event.clearInstanceListeners(this.map);\n    }\n  }\n\n  private initializeMap(retryCount = 0): void {\n    if (isNullOrUndefined(this.mapContainer)) {\n      if (retryCount < 5) {\n        setTimeout(() => this.initializeMap(retryCount + 1), 100);\n      } else {\n        console.error('Map container not found after multiple attempts.');\n      }\n      return;\n    }\n\n    const mapOptions: GoogleMapOptions = {\n      center: this.center(),\n      zoom: this.zoom(),\n      mapTypeId: this.mapTypeId(),\n      streetViewControl: true,\n      mapTypeControl: true,\n      fullscreenControl: true,\n      zoomControl: true,\n    };\n\n    this.map = new google.maps.Map(\n      this.mapContainer.nativeElement,\n      mapOptions as google.maps.MapOptions,\n    );\n    this.infoWindow = new google.maps.InfoWindow();\n    this.isMapInitialized.set(true);\n\n    // Add event listeners\n    this.map.addListener('click', (event: google.maps.MapMouseEvent) => {\n      this.ngZone.run(() =>\n        this.mapClick.emit(event as unknown as MapMouseEvent),\n      );\n    });\n\n    this.map.addListener('bounds_changed', () => {\n      // Clear existing timeout\n      if (this.boundsChangedTimeout !== null) {\n        window.clearTimeout(this.boundsChangedTimeout);\n      }\n\n      // Set new timeout (throttle to 100ms)\n      this.boundsChangedTimeout = window.setTimeout(() => {\n        this.ngZone.run(() => {\n          const bounds = this.map.getBounds();\n          if (bounds) {\n            this.boundsChanged.emit(bounds);\n          }\n        });\n      }, 100);\n    });\n\n    // Initialize traffic layer if needed\n    if (this.enableTrafficLayer()) {\n      this.toggleTrafficLayer();\n    }\n\n    // Add markers\n    this.updateMarkers();\n\n    // Add polygons\n    this.updatePolygons();\n\n    // Emit map loaded event\n    this.ngZone.run(() => this.mapLoaded.emit(this.map));\n  }\n\n  private updateMarkers(): void {\n    // Clear existing markers\n    this.clearMarkers();\n\n    // Get current markers from the input\n    const currentMarkers = this.markers();\n\n    // Add new markers\n    if (isDefined(currentMarkers) && currentMarkers.length > 0) {\n      const bounds = new google.maps.LatLngBounds();\n\n      currentMarkers.forEach((markerData) => {\n        // Extend bounds with the marker position\n        bounds.extend(markerData.position);\n\n        if (\n          this.useAdvancedMarkers() &&\n          isDefined(google.maps.marker.AdvancedMarkerElement)\n        ) {\n          // Create and add advanced marker\n          this.createAdvancedMarker(markerData, bounds);\n        } else {\n          // Fallback to legacy marker\n          this.createLegacyMarker(markerData, bounds);\n        }\n      });\n\n      // Fit bounds if needed and if there are markers\n      if (this.fitBoundsToMarkers() && currentMarkers.length > 0) {\n        this.map.fitBounds(bounds);\n      }\n    }\n  }\n\n  private createAdvancedMarker(\n    markerData: MapMarker<MarkerCustomData>,\n    bounds: google.maps.LatLngBounds,\n  ): void {\n    // Check if the marker library is available\n    if (\n      isNullOrUndefined(google.maps.marker) ||\n      isNullOrUndefined(google.maps.marker.AdvancedMarkerElement)\n    ) {\n      console.warn(\n        'Advanced Marker Element is not available. Falling back to legacy marker.',\n      );\n      this.createLegacyMarker(markerData, bounds);\n      return;\n    }\n\n    // Create pin element for styling\n    let pinElement: google.maps.marker.PinElement | undefined;\n    if (isDefined(markerData.title)) {\n      pinElement = new google.maps.marker.PinElement({\n        glyph: markerData.title.charAt(0).toUpperCase(),\n        glyphColor: 'white',\n        background:\n          isDefined(markerData.icon) && typeof markerData.icon === 'string'\n            ? markerData.icon\n            : '#1E88E5', // Default blue color if no icon color is provided\n      });\n    }\n\n    // Create marker options\n    const markerOptions: google.maps.marker.AdvancedMarkerElementOptions = {\n      map: this.map,\n      position: markerData.position,\n      title: markerData.title,\n      content: pinElement || undefined,\n    };\n\n    // Add draggable property if specified\n    if (isDefined(markerData.draggable)) {\n      markerOptions.gmpDraggable = true;\n    }\n\n    // Create the advanced marker\n    const advancedMarker = new google.maps.marker.AdvancedMarkerElement(\n      markerOptions,\n    );\n\n    // Store reference to the marker\n    this.advancedMarkers.push(advancedMarker);\n\n    // Add click event if enabled\n    if (this.clickableMarkers()) {\n      advancedMarker.addListener('click', () => {\n        this.ngZone.run(() => {\n          // Show info window if content is provided\n          if (isDefined(markerData.infoContent) && this.infoWindow) {\n            this.infoWindow.setContent(markerData.infoContent);\n            this.infoWindow.open(this.map, advancedMarker);\n          }\n\n          // Emit marker click event\n          this.markerClick.emit({\n            marker: advancedMarker,\n            customData: markerData.customData,\n          });\n        });\n      });\n    }\n\n    // Add drag end event if marker is draggable\n    if (isDefined(markerData.draggable)) {\n      advancedMarker.addListener('dragend', () => {\n        this.ngZone.run(() => {\n          // For AdvancedMarkerElement, position is a direct property, not a method\n          const position = advancedMarker.position as google.maps.LatLngLiteral;\n          if (isDefined(position)) {\n            this.markerDragEnd.emit({\n              marker: advancedMarker,\n              position: {\n                lat: position.lat,\n                lng: position.lng,\n              },\n              customData: markerData.customData,\n            });\n          }\n        });\n      });\n    }\n  }\n\n  private createLegacyMarker(\n    markerData: MapMarker<MarkerCustomData>,\n    _bounds: google.maps.LatLngBounds,\n  ): void {\n    // Create the marker options with proper type checking\n    const markerOptions: google.maps.MarkerOptions = {\n      position: markerData.position,\n      map: this.map,\n      title: markerData.title ?? '',\n      icon: isString(markerData.icon) ? markerData.icon : undefined,\n      draggable: markerData.draggable ?? false,\n    };\n\n    const marker = new google.maps.Marker(markerOptions);\n\n    // Add marker to the collection\n    this.legacyMarkers.push(marker);\n\n    // Add click event if enabled\n    if (this.clickableMarkers()) {\n      marker.addListener('click', () => {\n        this.ngZone.run(() => {\n          // Show info window if content is provided\n          if (isDefined(markerData.infoContent) && this.infoWindow) {\n            this.infoWindow.setContent(markerData.infoContent);\n            this.infoWindow.open(this.map, marker);\n          }\n\n          // Emit marker click event\n          this.markerClick.emit({\n            marker,\n            customData: markerData.customData,\n          });\n        });\n      });\n    }\n\n    // Add drag end event if marker is draggable\n    if (isDefined(markerData.draggable)) {\n      marker.addListener('dragend', () => {\n        this.ngZone.run(() => {\n          const position = marker.getPosition();\n          if (position) {\n            this.markerDragEnd.emit({\n              marker,\n              position: {\n                lat: position.lat(),\n                lng: position.lng(),\n              },\n              customData: markerData.customData,\n            });\n          }\n        });\n      });\n    }\n  }\n\n  private clearMarkers(): void {\n    // Clear legacy markers\n    this.legacyMarkers.forEach((marker) => marker.setMap(null));\n    this.legacyMarkers = [];\n\n    // Clear advanced markers\n    this.advancedMarkers.forEach((marker) => {\n      marker.map = null;\n    });\n    this.advancedMarkers = [];\n  }\n\n  private updatePolygons(): void {\n    // Clear existing polygons and their listeners\n    this.clearPolygons();\n\n    // Get current polygons from the input\n    const currentPolygons = this.polygons();\n\n    // Add new polygons\n    if (isDefined(currentPolygons) && currentPolygons.length > 0) {\n      currentPolygons.forEach((polygonData) => {\n        const polygon = new google.maps.Polygon({\n          paths: polygonData.paths,\n          strokeColor: polygonData.strokeColor ?? '#FF0000',\n          strokeOpacity: polygonData.strokeOpacity ?? 0.8,\n          strokeWeight: polygonData.strokeWeight ?? 2,\n          fillColor: polygonData.fillColor ?? '#FF0000',\n          fillOpacity: polygonData.fillOpacity ?? 0.35,\n          editable: polygonData.editable ?? false,\n          draggable: polygonData.draggable ?? false,\n          map: this.map,\n        });\n\n        // Add polygon to collection\n        this.googlePolygons.push(polygon);\n\n        // Add event listener and track it\n        const listener = polygon.addListener('mouseup', () => {\n          this.ngZone.run(() => {\n            const path = polygon.getPath();\n            const paths: LatLngLiteral[] = [];\n\n            // Convert MVCArray to array of LatLngLiteral\n            for (let i = 0; i < path.getLength(); i++) {\n              const point = path.getAt(i);\n              paths.push({\n                lat: point.lat(),\n                lng: point.lng(),\n              });\n            }\n\n            this.polygonChanged.emit({\n              polygon,\n              paths,\n              customData: polygonData.customData,\n            });\n          });\n        });\n\n        // Store the listener reference for cleanup\n        this.polygonEventListeners.push(listener);\n      });\n    }\n  }\n\n  private clearPolygons(): void {\n    // Remove event listeners first\n    this.polygonEventListeners.forEach((listener) =>\n      google.maps.event.removeListener(listener),\n    );\n    this.polygonEventListeners = [];\n\n    // Then remove polygons from map\n    this.googlePolygons.forEach((polygon) => polygon.setMap(null));\n    this.googlePolygons = [];\n  }\n\n  private toggleTrafficLayer(): void {\n    if (this.enableTrafficLayer()) {\n      this.trafficLayer ??= new google.maps.TrafficLayer();\n      this.trafficLayer.setMap(this.map);\n    } else if (this.trafficLayer) {\n      this.trafficLayer.setMap(null);\n    }\n  }\n\n  // Public methods that can be called from parent components\n  public resizeMap(): void {\n    if (this.isMapInitialized()) {\n      google.maps.event.trigger(this.map, 'resize');\n    }\n  }\n\n  public panTo(position: LatLngLiteral): void {\n    if (this.isMapInitialized()) {\n      this.map.panTo(position);\n    }\n  }\n\n  setZoom(zoom: number, preventExtreme = true): void {\n    if (!this.isMapInitialized()) return;\n\n    let finalZoom = zoom;\n    if (preventExtreme) {\n      finalZoom = Math.max(3, Math.min(19, zoom)); // Prevent extreme zoom levels\n    }\n\n    this.map.setZoom(finalZoom);\n  }\n\n  public clearAllMarkers(): void {\n    if (this.isMapInitialized()) {\n      // Note: In a real implementation, you would need to use a writeable signal or model\n      this.clearMarkers();\n    }\n  }\n\n  public fitBounds(): void {\n    if (\n      !this.isMapInitialized() ||\n      (this.legacyMarkers.length === 0 && this.advancedMarkers.length === 0)\n    )\n      return;\n\n    const bounds = new google.maps.LatLngBounds();\n\n    // Add legacy marker positions to bounds\n    this.legacyMarkers.forEach((marker) => {\n      const position = marker.getPosition();\n      if (position) bounds.extend(position);\n    });\n\n    // Add advanced marker positions to bounds\n    this.advancedMarkers.forEach((marker) => {\n      const position = marker.position;\n      if (position) bounds.extend(position);\n    });\n\n    this.map.fitBounds(bounds);\n  }\n\n  public updatePolygonPaths(index: number, paths: LatLngLiteral[]): void {\n    if (this.isMapInitialized() && isDefined(this.polygons()[index])) {\n      // Note: In a real implementation, you would need to use a writeable signal or model\n      if (isDefined(this.googlePolygons[index])) {\n        this.googlePolygons[index].setPaths(paths);\n      }\n    }\n  }\n\n  public setPolygonEditable(index: number, editable: boolean): void {\n    if (this.isMapInitialized() && isDefined(this.polygons()[index])) {\n      this.googlePolygons[index].setEditable(editable);\n      // Note: In a real implementation, you would need to use a writeable signal or model\n    }\n  }\n\n  public setPolygonDraggable(index: number, draggable: boolean): void {\n    if (this.isMapInitialized() && isDefined(this.polygons()[index])) {\n      this.googlePolygons[index].setDraggable(draggable);\n      // Note: In a real implementation, you would need to use a writeable signal or model\n    }\n  }\n\n  public removePolygon(index: number): void {\n    if (this.isMapInitialized() && isDefined(this.polygons()[index])) {\n      this.googlePolygons[index].setMap(null);\n      this.googlePolygons.splice(index, 1);\n      // Note: In a real implementation, you would need to use a writeable signal or model\n    }\n  }\n\n  public clearAllPolygons(): void {\n    if (this.isMapInitialized()) {\n      // Note: In a real implementation, you would need to use a writeable signal or model\n      this.clearPolygons();\n    }\n  }\n}\n","<div class=\"google-map-container\">\n  <div #mapContainer class=\"map-container\" [ngClass]=\"class()\"></div>\n</div>\n","import {\n  ChangeDetectorRef,\n  Component,\n  OnDestroy,\n  OutputRefSubscription,\n  ViewChild,\n  afterNextRender,\n  effect,\n  inject,\n  input,\n  model,\n  output,\n  signal,\n} from '@angular/core';\nimport { firstValueFrom } from 'rxjs';\n\nimport {\n  GoogleMapComponent,\n  PolygonCustomData,\n} from '../google-map/google-map.component';\nimport {\n  EntitiesService,\n  ZoneListItem,\n  ZoneResponse,\n  ZoneUpdateRequest,\n} from '../../../../api';\nimport {\n  LatLngLiteral,\n  MapPolygon,\n  PolygonChangeEvent,\n} from '../../../models/google-maps.interfaces';\nimport { isDefined, isNullOrUndefined } from '../../../utils';\n\n/**\n * A component that provides zone editing functionality using Google Maps.\n * It allows displaying, editing and saving of geofence zones.\n */\n@Component({\n  selector: 'app-google-maps-zone',\n  standalone: true,\n  imports: [GoogleMapComponent],\n  templateUrl: './google-maps-zone.component.html',\n  styleUrls: ['./google-maps-zone.component.scss'],\n})\nexport class GoogleMapsZoneComponent implements OnDestroy {\n  readonly entity = input.required<ZoneResponse | ZoneListItem>();\n  readonly editable = model(false);\n\n  readonly onEditing = output<boolean>();\n  readonly onSaving = output<boolean>();\n  readonly onSaved = output<ZoneResponse | ZoneListItem>();\n\n  @ViewChild('map') map!: GoogleMapComponent;\n\n  private readonly entitiesService = inject(EntitiesService);\n  private readonly changeDetectorRef = inject(ChangeDetectorRef);\n\n  errorMessage: string | null = null;\n  private zonePolygon: MapPolygon<PolygonCustomData> | null = null;\n  private routePolyline: google.maps.Polyline | null = null;\n  private polygonChangedCleanup: OutputRefSubscription | undefined;\n  private routeEventListeners: google.maps.MapsEventListener[] = [];\n  center = signal({ lat: 40.7128, lng: -74.006 });\n  private fitBoundsTimeout: string | number | NodeJS.Timeout | undefined;\n\n  constructor() {\n    // Create a signal to track map initialization\n    const isMapInitialized = signal(false);\n\n    // First effect - handle when entity changes or becomes available\n    effect(() => {\n      const currentEntity = this.entity();\n      const mapIsReady = isMapInitialized();\n\n      if (isDefined(currentEntity?.points) && currentEntity.points.length > 0) {\n        const Lng =\n          currentEntity.points.reduce((sum, p) => sum + p.x, 0) /\n          currentEntity.points.length;\n        const Lat =\n          currentEntity.points.reduce((sum, p) => sum + p.y, 0) /\n          currentEntity.points.length;\n        this.center.set({ lat: Lat, lng: Lng });\n      }\n\n      if (mapIsReady && isDefined(currentEntity)) {\n        // Debounce loadZone and other operations\n        setTimeout(() => {\n          // Ensure the entity hasn't changed again during the timeout\n          if (this.entity() !== currentEntity) {\n            return;\n          }\n\n          // Always call loadZone to reflect the current entity state,\n          // especially if its geometry (points) might have changed.\n          this.loadZone();\n\n          if (\n            isDefined(currentEntity.points) &&\n            currentEntity.points.length > 0\n          ) {\n            const paths = currentEntity.points.map((p) => ({\n              lat: p.y,\n              lng: p.x,\n            }));\n            clearTimeout(this.fitBoundsTimeout);\n            this.fitBoundsTimeout = setTimeout(() => {\n              if (this.entity() === currentEntity) {\n                // Re-check entity before expensive operation\n                this.fitZoneToViewport(paths, currentEntity);\n              }\n            }, 200); // Debounce fitting\n          }\n\n          // Set up subscription for polygon changes\n          this.setupPolygonChangeSubscription(currentEntity);\n        }, 100); // Debounce the entire block of operations\n      }\n    });\n\n    // Second effect to handle the map initialization state\n    afterNextRender(() => {\n      if (isDefined(this.map)) {\n        // Check if map is already initialized (rare but possible)\n        if (this.map.isMapInitialized()) {\n          isMapInitialized.set(true);\n        }\n\n        // Set up a subscription to know when the map becomes initialized\n        this.map.mapLoaded.subscribe(() => {\n          isMapInitialized.set(true);\n        });\n      }\n    });\n\n    // Handle editable status changes\n    effect(() => {\n      const entity = this.entity();\n      if (isDefined(this.map) && isDefined(entity)) {\n        if (entity.zoneType === 'route') {\n          this.updateRouteEditableStatus();\n        } else if (this.zonePolygon) {\n          this.updatePolygonEditableStatus();\n        }\n      }\n    });\n  }\n\n  // Helper method to set up polygon change subscription\n  private setupPolygonChangeSubscription(\n    entity: ZoneResponse | ZoneListItem,\n  ): void {\n    if (entity?.zoneType !== 'route') {\n      // Clean up any existing subscription first\n      if (this.polygonChangedCleanup) {\n        this.polygonChangedCleanup.unsubscribe();\n        this.polygonChangedCleanup = undefined;\n      }\n\n      this.polygonChangedCleanup = this.map.polygonChanged.subscribe(\n        (event) => {\n          if (isDefined(entity) && event.customData?.id === entity.id) {\n            const updatedZone = {\n              ...entity,\n              points: event.paths.map((path) => ({\n                x: path.lng,\n                y: path.lat,\n              })),\n            };\n            this.onSaved.emit(updatedZone);\n          }\n        },\n      );\n    }\n  }\n\n  ngOnDestroy(): void {\n    this.clearRouteListeners();\n\n    // Clean up route polyline if it exists\n    if (this.routePolyline) {\n      this.routePolyline.setMap(null);\n      this.routePolyline = null;\n    }\n\n    if (this.polygonChangedCleanup) {\n      this.polygonChangedCleanup.unsubscribe();\n      this.polygonChangedCleanup = undefined;\n    }\n\n    if (isDefined(this.fitBoundsTimeout)) {\n      clearTimeout(this.fitBoundsTimeout);\n    }\n  }\n\n  /**\n   * Loads the zone onto the map\n   */\n  loadZone(): void {\n    const entity = this.entity(); // Get the most current entity\n    if (\n      isNullOrUndefined(this.map) ||\n      !this.map.isMapInitialized() ||\n      isNullOrUndefined(entity)\n    ) {\n      return;\n    }\n\n    this.clearMapElements();\n\n    const paths = (entity.points ?? []).map((p) => ({ lat: p.y, lng: p.x }));\n\n    if (entity.zoneType === 'route') {\n      this.displayRoute(paths);\n    } else {\n      // Ensure the new zonePolygon reflects the current editable state as well\n      let color = '';\n\n      // Fallback to zone type specific colors or a general default\n      switch (entity.zoneType) {\n        case 'nogo':\n          color = '#FF0000'; // Red for no-go zones\n          break;\n        case 'keepin':\n          color = '#4CAF50'; // Green for keep-in zones\n          break;\n        default:\n          color = '#1E88E5'; // Default blue for other types (e.g., 'polygon')\n          break;\n      }\n\n      this.zonePolygon = {\n        paths: paths,\n        editable: this.editable(),\n        draggable: this.editable(),\n        fillOpacity: 0.35,\n        strokeWeight: 2,\n        customData: { entityType: 'zone', entityId: entity.id },\n        fillColor: color,\n        strokeColor: color,\n      };\n\n      if (this.zonePolygon.paths.length > 0) {\n        this.map.polygons.set([this.zonePolygon]);\n      } else {\n        this.map.polygons.set([]); // Clear if no paths\n      }\n    }\n    // No explicit changeDetectorRef.detectChanges() needed if driven by signals\n  }\n\n  /**\n   * Automatically fit the zone to the viewport with appropriate zoom\n   */\n  private fitZoneToViewport(\n    paths: LatLngLiteral[],\n    _entity: ZoneResponse | ZoneListItem,\n  ): void {\n    if (\n      isNullOrUndefined(this.map?.map) ||\n      typeof google === 'undefined' ||\n      paths.length === 0\n    )\n      return;\n\n    try {\n      // Create bounds object\n      const bounds = new google.maps.LatLngBounds();\n\n      // Add all points to bounds\n      paths.forEach((point) => bounds.extend(point));\n\n      // Calculate area of the zone to determine padding\n      const area = this.calculateArea(paths);\n      let padding = 50; // Default padding in pixels\n\n      // Adjust padding based on zone size\n      if (area < 0.01) {\n        padding = 100; // More padding for small zones\n      } else if (area > 10) {\n        padding = 10; // Less padding for large zones\n      }\n\n      // Set center for underlying signal\n      const center = bounds.getCenter();\n      if (isDefined(center)) {\n        this.center.set({\n          lat: center.lat(),\n          lng: center.lng(),\n        });\n      }\n\n      // IMPORTANT: Remove any existing timeout for a cleaner approach\n      if (isDefined(this.fitBoundsTimeout)) {\n        clearTimeout(this.fitBoundsTimeout);\n      }\n\n      // Use a short timeout to ensure the map is ready before fitting bounds\n      // This is crucial for entity switching\n      this.fitBoundsTimeout = setTimeout(() => {\n        // Important: Force a new bounds instance to ensure Google Maps treats it as a change\n        const newBounds = new google.maps.LatLngBounds();\n        paths.forEach((point) => newBounds.extend(point));\n\n        // Apply the fit bounds with padding\n        this.map.map.fitBounds(newBounds, padding);\n\n        // For very small zones or points, set minimum zoom after a brief delay\n        if (paths.length === 1 || area < 0.0001) {\n          setTimeout(() => {\n            const currentZoom = this.map.map.getZoom() ?? 0;\n            if (currentZoom > 18) {\n              this.map.setZoom(18);\n            }\n          }, 150);\n        }\n\n        // For very large zones, limit maximum zoom out\n        if (area > 1000) {\n          setTimeout(() => {\n            const currentZoom = this.map.map.getZoom() ?? 0;\n            if (currentZoom < 5) {\n              this.map.setZoom(5);\n            }\n          }, 150);\n        }\n\n        // Force UI update\n        this.changeDetectorRef.markForCheck();\n      }, 50);\n    } catch (err) {\n      console.error('Error fitting bounds:', err);\n    }\n  }\n\n  /**\n   * Calculate approximate area of polygon/route in square kilometers\n   */\n  private calculateArea(paths: LatLngLiteral[]): number {\n    if (paths.length < 3) return 0;\n\n    try {\n      if (typeof google !== 'undefined') {\n        // For polygons, use Google's built-in area calculation\n        const googlePaths = paths.map(\n          (p) => new google.maps.LatLng(p.lat, p.lng),\n        );\n        return (\n          google.maps.geometry.spherical.computeArea(googlePaths) / 1000000\n        ); // Convert to sq km\n      } else {\n        // Fallback to approximate calculation using bounding box\n        let minLat = paths[0].lat,\n          maxLat = paths[0].lat;\n        let minLng = paths[0].lng,\n          maxLng = paths[0].lng;\n\n        paths.forEach((p) => {\n          minLat = Math.min(minLat, p.lat);\n          maxLat = Math.max(maxLat, p.lat);\n          minLng = Math.min(minLng, p.lng);\n          maxLng = Math.max(maxLng, p.lng);\n        });\n\n        // Rough approximation of area in square kilometers\n        const latDiff = maxLat - minLat;\n        const lngDiff = maxLng - minLng;\n        return latDiff * lngDiff * 111 * 111; // 1 degree is roughly 111km\n      }\n    } catch (err) {\n      console.error('Error calculating area:', err);\n      return 0;\n    }\n  }\n  /**\n   * Clears existing map elements (polygons, polylines)\n   */\n  private clearMapElements(): void {\n    // Clear polygon if exists\n    if (this.zonePolygon) {\n      try {\n        const currentPolygons = this.map.polygons() ?? [];\n        const filteredPolygons = currentPolygons.filter(\n          (p) => p.customData?.id !== this.entity()?.id,\n        );\n        // Update polygons signal\n        this.map.polygons.set(filteredPolygons);\n        this.zonePolygon = null;\n      } catch (err) {\n        console.error('Error clearing polygon:', err);\n      }\n    }\n\n    // Clear polyline if exists\n    if (this.routePolyline) {\n      try {\n        this.routePolyline.setMap(null);\n        this.routePolyline = null;\n      } catch (err) {\n        console.error('Error clearing polyline:', err);\n      }\n    }\n  }\n  /**\n   * Displays a route as a polyline\n   */\n  private displayRoute(paths: LatLngLiteral[]): void {\n    if (typeof google === 'undefined') {\n      return;\n    }\n\n    // Clear previous listeners\n    this.clearRouteListeners();\n\n    try {\n      // Create a polyline (route)\n      this.routePolyline = new google.maps.Polyline({\n        path: paths,\n        geodesic: true,\n        strokeColor: '#4CAF50', // Green for routes\n        strokeOpacity: 1.0,\n        strokeWeight: 4,\n        editable: this.editable(),\n        map: this.map.map,\n      });\n\n      // Add click listener to the route\n      const clickListener = this.routePolyline.addListener('click', () => {\n        // Handle route click, if needed\n      });\n      this.routeEventListeners.push(clickListener);\n\n      // Add path changed listener if editable\n      if (this.editable()) {\n        const setListener = google.maps.event.addListener(\n          this.routePolyline.getPath(),\n          'set_at',\n          () => this.handleRoutePathChanged(),\n        );\n        this.routeEventListeners.push(setListener);\n\n        const insertListener = google.maps.event.addListener(\n          this.routePolyline.getPath(),\n          'insert_at',\n          () => this.handleRoutePathChanged(),\n        );\n        this.routeEventListeners.push(insertListener);\n\n        const removeListener = google.maps.event.addListener(\n          this.routePolyline.getPath(),\n          'remove_at',\n          () => this.handleRoutePathChanged(),\n        );\n        this.routeEventListeners.push(removeListener);\n      }\n    } catch (err) {\n      console.error('Failed to display route:', err);\n      this.errorMessage = `Failed to display route: ${err instanceof Error ? err.message : 'Unknown error'}`;\n    }\n  }\n\n  private clearRouteListeners(): void {\n    if (this.routeEventListeners.length > 0) {\n      this.routeEventListeners.forEach((listener) =>\n        google.maps.event.removeListener(listener),\n      );\n      this.routeEventListeners = [];\n    }\n  }\n\n  /**\n   * Handles route path changes when edited\n   */\n  private handleRoutePathChanged(): void {\n    if (!this.routePolyline) return;\n\n    const path = this.routePolyline.getPath();\n    const points = [];\n\n    for (let i = 0; i < path.getLength(); i++) {\n      const point = path.getAt(i);\n      points.push({\n        x: point.lng(),\n        y: point.lat(),\n      });\n    }\n\n    // Create an updated version of the zone with new points\n    const updatedZone = {\n      ...this.entity(),\n      points,\n    };\n\n    // Emit the updated zone data\n    this.onSaving.emit(true);\n    this.onSaved.emit(updatedZone);\n  }\n\n  /**\n   * Updates the polyline editable status\n   */\n  private updateRouteEditableStatus(): void {\n    if (isNullOrUndefined(this.map) || isNullOrUndefined(this.routePolyline))\n      return;\n\n    const editable = this.editable();\n    this.routePolyline.setEditable(editable);\n    this.routePolyline.setOptions({\n      draggable: editable,\n      editable: editable,\n    });\n  }\n\n  /**\n   * Displays a zone as a polygon\n   */\n  private displayPolygon(paths: LatLngLiteral[]): void {\n    // Determine color based on zone type\n    let strokeColor = '#1E88E5'; // Default blue\n    let fillColor = '#1E88E5';\n\n    const entity = this.entity();\n    if (entity.zoneType === 'nogo') {\n      strokeColor = '#FF0000'; // Red for no-go zones\n      fillColor = '#FF0000';\n    } else if (entity.zoneType === 'keepin') {\n      strokeColor = '#4CAF50'; // Green for keep-in zones\n      fillColor = '#4CAF50';\n    }\n\n    this.zonePolygon = {\n      paths,\n      strokeColor,\n      strokeOpacity: 0.8,\n      strokeWeight: 2,\n      fillColor,\n      fillOpacity: 0.35,\n      editable: this.editable(),\n      draggable: this.editable(),\n      customData: {\n        id: entity.id,\n        name: entity.name ?? '',\n      },\n    };\n\n    // Update polygons on the map\n    const currentPolygons = this.map.polygons() ?? [];\n    const filteredPolygons = currentPolygons.filter(\n      (p) => p.customData?.id !== entity.id,\n    );\n\n    // Create a completely new array to ensure Angular detects the change\n    this.map.polygons.set([...filteredPolygons, this.zonePolygon]);\n\n    // Force update polygons in map\n    setTimeout(() => {\n      this.changeDetectorRef.markForCheck();\n    }, 0);\n  }\n\n  /**\n   * Updates the polygon editable and draggable status based on the editable input\n   */\n  updatePolygonEditableStatus(): void {\n    if (isNullOrUndefined(this.map) || isNullOrUndefined(this.zonePolygon)) {\n      return;\n    }\n\n    // Find the index of our polygon\n    const currentPolygons = this.map.polygons() ?? [];\n    const index = currentPolygons.findIndex(\n      (p) => p.customData?.id === this.entity().id,\n    );\n\n    if (index !== -1) {\n      // Update the polygon properties\n      const updatedPolygon = {\n        ...currentPolygons[index],\n        editable: this.editable(),\n        draggable: this.editable(),\n      };\n\n      // Update the polygon in the array\n      const updatedPolygons = [...currentPolygons];\n      updatedPolygons[index] = updatedPolygon;\n\n      // Update the polygons in the map\n      this.map.polygons.set(updatedPolygons);\n\n      // Also update internal reference\n      this.zonePolygon = updatedPolygon;\n\n      // Update UI elements if any Google Maps Polygon instances exist\n      if (\n        isDefined(this.map.googlePolygons) &&\n        this.map.googlePolygons.length > index\n      ) {\n        this.map.googlePolygons[index].setEditable(this.editable());\n        this.map.googlePolygons[index].setDraggable(this.editable());\n      }\n    }\n  }\n\n  /**\n   * Saves the current state of the zone\n   */\n  async saveZone(): Promise<void> {\n    const entity = this.entity();\n    if (isNullOrUndefined(entity)) {\n      return;\n    }\n\n    try {\n      this.onSaving.emit(true);\n\n      const points = [];\n\n      if (entity.zoneType === 'route' && this.routePolyline) {\n        // Extract points from route polyline\n        const path = this.routePolyline.getPath();\n\n        for (let i = 0; i < path.getLength(); i++) {\n          const point = path.getAt(i);\n          points.push({\n            x: point.lng(),\n            y: point.lat(),\n          });\n        }\n      } else if (this.zonePolygon) {\n        // Find the corresponding Google Maps polygon to get latest paths\n        const currentPolygon = this.map.googlePolygons?.find(\n          (_, index) =>\n            this.map.polygons()[index].customData?.id === this.entity().id,\n        );\n\n        if (!currentPolygon) {\n          throw new Error('Polygon not found');\n        }\n\n        // Extract points from the polygon\n        const path = currentPolygon.getPath();\n\n        for (let i = 0; i < path.getLength(); i++) {\n          const point = path.getAt(i);\n          points.push({\n            x: point.lng(),\n            y: point.lat(),\n          });\n        }\n      } else {\n        throw new Error('No polygon or route data found');\n      }\n\n      // Create update request\n      const updateRequest: ZoneUpdateRequest = {\n        points,\n      };\n\n      const updatedZone = await firstValueFrom(\n        this.entitiesService.updateZone(entity.id, updateRequest),\n      );\n\n      // Emit the updated zone\n      this.onSaved.emit(updatedZone);\n    } catch (error) {\n      this.showError(error as Error);\n    }\n  }\n\n  /**\n   * Starts editing mode\n   */\n  startEditing(): void {\n    if (!this.editable()) {\n      this.editable.set(true);\n\n      if (this.entity()?.zoneType === 'route') {\n        this.updateRouteEditableStatus();\n      } else {\n        this.updatePolygonEditableStatus();\n      }\n\n      this.onEditing.emit(true);\n    }\n  }\n\n  /**\n   * Stops editing mode\n   */\n  stopEditing(): void {\n    if (this.editable()) {\n      this.editable.set(false);\n\n      if (this.entity()?.zoneType === 'route') {\n        this.updateRouteEditableStatus();\n      } else {\n        this.updatePolygonEditableStatus();\n      }\n\n      this.onEditing.emit(false);\n    }\n  }\n\n  /**\n   * Helper method to display errors\n   */\n  private showError(error: Error): void {\n    this.errorMessage =\n      error?.message ?? 'An error occurred while saving the zone';\n    this.changeDetectorRef.markForCheck();\n  }\n\n  /**\n   * Handles polygon change events from the map\n   */\n  onPolygonChanged(event: PolygonChangeEvent<PolygonCustomData>): void {\n    if (event.customData?.id === this.entity()?.id) {\n      // Update internal representation if needed\n      this.zonePolygon = {\n        ...this.zonePolygon,\n        paths: event.paths,\n      };\n    }\n  }\n}\n","<div class=\"google-maps-zone-container\">\n  <div class=\"map-container\">\n    <app-google-map\n      #map\n      [class]=\"'h-[400px] w-full'\"\n      [center]=\"center()\"\n      (polygonChanged)=\"onPolygonChanged($event)\"\n    >\n    </app-google-map>\n  </div>\n\n  @if (errorMessage) {\n    <div class=\"error-message mt-2 p-2 bg-red-100 text-red-700 rounded\">\n      {{ errorMessage }}\n    </div>\n  }\n\n  @if (entity()) {\n    <div class=\"actions mt-3\">\n      @if (!editable()) {\n        <button\n          class=\"edit-btn bg-blue-600 hover:bg-blue-700 text-white py-2 px-4 rounded\"\n          (click)=\"startEditing()\"\n        >\n          Edit Zone\n        </button>\n      }\n      @if (editable()) {\n        <button\n          class=\"save-btn bg-green-600 hover:bg-green-700 text-white py-2 px-4 rounded mr-2\"\n          (click)=\"saveZone()\"\n        >\n          Save Changes\n        </button>\n      }\n      @if (editable()) {\n        <button\n          class=\"cancel-btn bg-gray-600 hover:bg-gray-700 text-white py-2 px-4 rounded\"\n          (click)=\"stopEditing()\"\n        >\n          Cancel\n        </button>\n      }\n    </div>\n  }\n</div>\n","import { Component, inject } from '@angular/core';\nimport { GoogleMapsZoneComponent } from '../../../../../shared/components/maps/google-maps-zone/google-maps-zone.component';\nimport {\n  EntitiesService,\n  ZoneListItem,\n  ZoneResponse,\n} from '../../../../../api';\nimport { EntitySectionBaseComponent } from '../../base';\nimport { isNullOrUndefined } from '../../../../../shared/utils';\nimport { takeUntilDestroyed } from '@angular/core/rxjs-interop';\n\n@Component({\n  selector: 'app-geofence-map-section',\n  imports: [GoogleMapsZoneComponent],\n  templateUrl: './geofence-map-section.component.html',\n  styleUrl: './geofence-map-section.component.scss',\n})\nexport class GeofenceMapSectionComponent extends EntitySectionBaseComponent<\n  ZoneListItem | ZoneResponse\n> {\n  private readonly entitiesService = inject(EntitiesService);\n\n  protected override updateFormFields(): void {\n    // No form fields to update in this section\n  }\n\n  protected override submitChanges(\n    formData: Record<string, string | number>,\n  ): void {\n    const geofence = this.entity();\n    if (isNullOrUndefined(geofence)) return;\n    this.entitiesService\n      .updateZone(geofence.id, formData)\n      .pipe(takeUntilDestroyed(this.destroyRef))\n      .subscribe({\n        next: (response) => {\n          this.isFormEditable.set(false);\n          this.broadcastService.broadcast('entity-updated', {\n            entityType: 'geofence',\n            operation: 'update',\n            entityId: geofence.id,\n            data: response,\n          });\n        },\n        error: () => {\n          this.isFormEditable.set(true);\n        },\n      });\n  }\n}\n","<app-google-maps-zone [entity]=\"entity()!\" (onSaved)=\"submitChanges($event)\">\n</app-google-maps-zone>\n","import { Injectable } from '@angular/core';\nimport { AdminDetailSection } from '../models';\nimport { GeofenceDetailsSectionComponent } from '../components/geofences/geofence-details-section/geofence-details-section.component';\nimport { ZoneResponse } from '../../../api';\nimport { GeofenceMapSectionComponent } from '../components/geofences/geofence-map-section/geofence-map-section.component';\nimport { FeedSectionComponent } from '../components/shared/feed-section/feed-section.component';\n\n@Injectable({ providedIn: 'root' })\nexport class GeofenceSectionConfigFactory {\n  /**\n   * Create sections for geofence information\n   * @param geofence The geofence object to display in the section\n   * @returns An array of AdminDetailSection objects representing the geofence information sections\n   */\n  createGeofenceInformationSections(\n    geofence: ZoneResponse | null,\n  ): AdminDetailSection[] {\n    return [\n      {\n        id: 'geofence-details',\n        title: 'Geofence Details',\n        component: GeofenceDetailsSectionComponent,\n        componentInputs: { entity: geofence },\n        category: 'information',\n        order: 10,\n      },\n      {\n        id: 'geofence-map',\n        title: 'Geofence Map',\n        component: GeofenceMapSectionComponent,\n        componentInputs: { entity: geofence },\n        category: 'information',\n        order: 20,\n      },\n    ];\n  }\n\n  /**\n   * Create sections for geofence changes\n   * @param geofence The geofence object to display in the section\n   * @returns An array of AdminDetailSection objects representing the geofence changes sections\n   */\n  createChangesSection(geofence: ZoneResponse | null): AdminDetailSection[] {\n    return [\n      {\n        id: 'geofence-changes',\n        title: 'Changes',\n        component: FeedSectionComponent,\n        componentInputs: {\n          entity: geofence,\n        },\n        category: 'feed',\n        order: 10,\n      },\n    ];\n  }\n\n  /**\n   * Create all geofence sections in one call\n   * @param geofence The geofence object to display in the sections\n   * @returns An array of AdminDetailSection objects representing all geofence sections\n   */\n  createAllGeofenceSections(\n    geofence: ZoneResponse | null,\n  ): AdminDetailSection[] {\n    return [\n      ...this.createGeofenceInformationSections(geofence),\n      ...this.createChangesSection(geofence),\n    ];\n  }\n}\n","import {\n  ChangeDetectorRef,\n  Component,\n  computed,\n  effect,\n  inject,\n  input,\n  OnInit,\n  signal,\n  untracked,\n} from '@angular/core';\nimport { Validators } from '@angular/forms';\n\nimport { ButtonModule } from 'primeng/button';\nimport { InputTextModule } from 'primeng/inputtext';\n\nimport {\n  DeviceProviderListItem,\n  DeviceProviderCreateRequest,\n  EntitiesService,\n  DeviceProviderResponse,\n  DeviceProviderTypeListItem,\n} from '../../../../../api';\nimport {\n  createDropdownField,\n  createTextField,\n} from '../../../../../shared/models';\nimport { EntitySectionBaseComponent } from '../../base';\nimport { isDefined, isNullOrUndefined } from '../../../../../shared/utils';\nimport { DynamicFormComponent } from '../../../../../shared/components/forms/dynamic-form/dynamic-form.component';\nimport { GridComponent } from '../../../../../shared/components/grid/grid.component';\nimport { CommonModule } from '@angular/common';\nimport { EntityOperationRegistryService } from '../../../services/entity/entity-operation-registry.service';\nimport { Observable } from 'rxjs';\nimport { faPlug } from '@fortawesome/free-solid-svg-icons';\nimport { FontAwesomeModule } from '@fortawesome/angular-fontawesome';\nimport { takeUntilDestroyed } from '@angular/core/rxjs-interop';\n\ntype DeviceProviderEntity =\n  | DeviceProviderListItem\n  | DeviceProviderCreateRequest;\n\n@Component({\n  selector: 'app-device-provider-details-section',\n  imports: [\n    CommonModule,\n    ButtonModule,\n    InputTextModule,\n    GridComponent,\n    DynamicFormComponent,\n    FontAwesomeModule,\n  ],\n  templateUrl: './device-provider-details-section.component.html',\n  styleUrl: './device-provider-details-section.component.scss',\n})\nexport class DeviceProviderDetailsSectionComponent\n  extends EntitySectionBaseComponent<DeviceProviderEntity>\n  implements OnInit\n{\n  readonly ownerId = input<string | null>(null);\n  readonly entitiesService = inject(EntitiesService);\n  private readonly operationRegistry = inject(EntityOperationRegistryService);\n\n  private readonly cdr = inject(ChangeDetectorRef);\n  protected readonly selectOptionsLoaded = signal<boolean>(false);\n\n  readonly deviceProviderDetails = computed(() => {\n    const deviceProviderDetails = this.entity();\n    if (!isDefined(deviceProviderDetails)) return [];\n\n    return [\n      {\n        key: 'Type',\n        value: deviceProviderDetails.deviceProviderType?.name ?? 'None',\n      },\n      { key: 'Name', value: deviceProviderDetails.name },\n    ];\n  });\n  selectOptions: Record<\n    string,\n    { label: string; value: string; data: unknown }[]\n  > = {};\n  faPlug = faPlug;\n\n  constructor() {\n    super();\n\n    // Setup initial columns\n    this.columns = [\n      { field: 'key', header: '', transform: 'uppercase' },\n      { field: 'value', header: '' },\n    ];\n\n    effect(() => {\n      const selectOptionsLoaded = this.selectOptionsLoaded();\n      if (selectOptionsLoaded) {\n        untracked(() => {\n          this.updateFormFields();\n          this.cdr.detectChanges();\n        });\n      }\n    });\n  }\n\n  ngOnInit(): void {\n    this.loadSelectOptions();\n  }\n\n  private loadSelectOptions(): void {\n    const deviceProvider = this.entity();\n    const ownerIdValue = this.ownerId();\n\n    const effectiveOwnerId = deviceProvider?.owner?.id ?? ownerIdValue;\n\n    if (isNullOrUndefined(effectiveOwnerId)) {\n      this.selectOptions = {};\n      this.selectOptionsLoaded.set(true);\n      this.updateFormFields();\n    }\n\n    this.entitiesService\n      .listDeviceProviderTypes(effectiveOwnerId)\n      .pipe(takeUntilDestroyed(this.destroyRef))\n      .subscribe((result) => {\n        this.selectOptions = {\n          deviceProviderTypes: result.items\n            .map((item) => ({\n              label: item?.name,\n              value: item.id,\n              data: item,\n            }))\n            .sort((a, b) => a.label.localeCompare(b.label)),\n        };\n\n        this.selectOptionsLoaded.set(true);\n      });\n  }\n\n  protected override updateFormFields(): void {\n    const deviceProvider = this.entity();\n    this.formFields = [\n      createDropdownField(\n        'deviceProviderType',\n        'Type',\n        this.selectOptions?.['deviceProviderTypes'],\n        deviceProvider?.deviceProviderType?.id,\n        {\n          name: 'deviceProviderType',\n          validations: [\n            {\n              name: 'required',\n              validator: Validators.required,\n              message: 'Type is required',\n            },\n          ],\n          disabled: !this.createMode(),\n          props: {\n            appendTo: 'body',\n          },\n        },\n      ),\n      createTextField('name', 'Name', deviceProvider?.name, {\n        name: 'name',\n        validations: [\n          {\n            name: 'required',\n            validator: Validators.required,\n            message: 'Name is required',\n          },\n        ],\n      }),\n    ];\n  }\n\n  override getUpdateMethod(): (\n    id: string,\n    data: Partial<DeviceProviderEntity>,\n  ) => Observable<DeviceProviderResponse> {\n    return (\n      this.operationRegistry.getOperation<\n        DeviceProviderEntity,\n        DeviceProviderCreateRequest,\n        DeviceProviderResponse,\n        'update'\n      >('device-provider', 'update') ??\n      ((id, data) => this.entitiesService.updateDeviceProvider(id, data))\n    );\n  }\n\n  protected override onFormValueChange(\n    formData: Record<string, string | number | object>,\n  ): void {\n    const transformedData = { ...formData };\n    if (isDefined(transformedData['deviceProviderType'])) {\n      const deviceProviderTypeId = transformedData[\n        'deviceProviderType'\n      ] as string;\n      const deviceProviderType = this.selectOptions?.[\n        'deviceProviderTypes'\n      ]?.find((option) => option.value === deviceProviderTypeId);\n      if (deviceProviderType) {\n        transformedData['deviceProviderType'] = {\n          id: deviceProviderTypeId,\n          name: (deviceProviderType.data as DeviceProviderTypeListItem)?.name,\n        };\n      }\n    }\n\n    this.formValueChange.emit(transformedData);\n  }\n}\n","<div class=\"card pt-2\">\n  <div class=\"mb-4 p-2 flex justify-start items-center\">\n    <fa-icon\n      [icon]=\"faPlug\"\n      class=\"!text-[2.5rem]\"\n      [ngClass]=\"{ 'icon-primary': isFormEditable() }\"\n    ></fa-icon>\n\n    <div class=\"pl-6 flex-1\">\n      <div class=\"flex justify-between items-center\">\n        <h2 class=\"text-xl font-semibold m-0\">Device Provider Details</h2>\n        @if (!isFormEditable() && !createMode()) {\n          <div class=\"icon-light\">\n            <span\n              class=\"pi pi-pen-to-square action hover !text-2xl\"\n              [attr.aria-label]=\"'Edit device provider details'\"\n              (click)=\"onEdit()\"\n              (keydown.enter)=\"onEdit()\"\n            ></span>\n          </div>\n        }\n      </div>\n      <span\n        >The following information is required in order to configure your device\n        provider.</span\n      >\n    </div>\n  </div>\n\n  @if (isFormEditable() || (createMode() && formFields.length)) {\n    <app-dynamic-form\n      [fields]=\"formFields\"\n      [actions]=\"actions\"\n      [hideActions]=\"createMode()\"\n      (formSubmit)=\"onSubmit($event)\"\n      (formValidityChange)=\"onFormValidityChange($event)\"\n      (formValueChange)=\"onFormValueChange($event)\"\n    >\n    </app-dynamic-form>\n  }\n\n  @if (!isFormEditable() && !createMode()) {\n    <app-grid\n      [data]=\"deviceProviderDetails()\"\n      [columns]=\"columns\"\n      [showGridLines]=\"false\"\n      [hideHeader]=\"true\"\n      tableStyleClass=\"info-display !w-auto\"\n    ></app-grid>\n  }\n</div>\n","import { CommonModule } from '@angular/common';\nimport {\n  Component,\n  computed,\n  effect,\n  inject,\n  input,\n  signal,\n} from '@angular/core';\n\nimport { ButtonModule } from 'primeng/button';\nimport { InputTextModule } from 'primeng/inputtext';\nimport { Observable } from 'rxjs';\n\nimport {\n  DeviceProviderCreateRequest,\n  DeviceProviderResponse,\n  EntitiesService,\n  DeviceTypeResponse,\n  DeviceProviderTypeResponse,\n} from '../../../../../api';\nimport { DynamicFormComponent } from '../../../../../shared/components/forms/dynamic-form/dynamic-form.component';\nimport { GridComponent } from '../../../../../shared/components/grid/grid.component';\nimport {\n  createNumberField,\n  createTextAreaField,\n  createTextField,\n  FormFieldConfig,\n} from '../../../../../shared/models';\nimport { isNullOrUndefined } from '../../../../../shared/utils';\nimport { EntityOperationRegistryService } from '../../../services/entity/entity-operation-registry.service';\nimport { EntitySectionBaseComponent } from '../../base';\nimport { FormBuilderField } from '../../../../../core/models';\nimport { Validators } from '@angular/forms';\n\ntype DeviceProviderEntity =\n  | DeviceProviderResponse\n  | DeviceProviderCreateRequest;\n\ninterface FormField {\n  id: string;\n  title: string;\n  type: string;\n  value?: string | number;\n  defaultValue?: string | number;\n  required?: boolean;\n  description?: string;\n  min?: number;\n  max?: number;\n}\n\n@Component({\n  selector: 'app-device-provider-parameters-section',\n  imports: [\n    CommonModule,\n    ButtonModule,\n    InputTextModule,\n    GridComponent,\n    DynamicFormComponent,\n  ],\n  templateUrl: './device-provider-parameters-section.component.html',\n  styleUrl: './device-provider-parameters-section.component.scss',\n})\nexport class DeviceProviderParametersSectionComponent extends EntitySectionBaseComponent<DeviceProviderEntity> {\n  readonly ownerId = input<string | null>(null);\n  readonly deviceProviderType = input<DeviceProviderTypeResponse | null>(null);\n  readonly entitiesService = inject(EntitiesService);\n  private readonly operationRegistry = inject(EntityOperationRegistryService);\n\n  protected readonly isLoadingDeviceType = signal<boolean>(false);\n  protected readonly deviceType = signal<DeviceTypeResponse | null>(null);\n  protected readonly customValues = signal<Record<string, string>>({});\n\n  readonly deviceProviderDeviceParameters = computed(() => {\n    const deviceProviderDeviceParameters = this.entity()?.parameters;\n    const deviceProviderType = this.deviceProviderType();\n    if (\n      isNullOrUndefined(deviceProviderDeviceParameters) ||\n      isNullOrUndefined(deviceProviderType)\n    )\n      return [];\n\n    const params: { groups: { fields: FormBuilderField[] }[] } = JSON.parse(\n      deviceProviderType.parameters,\n    );\n    const values: { key: string; value: string }[] = [];\n    params.groups.forEach((group) => {\n      group.fields.forEach((field: FormBuilderField) => {\n        values.push({\n          key: field.title,\n          value:\n            typeof deviceProviderDeviceParameters?.[field.id] === 'object'\n              ? JSON.stringify(deviceProviderDeviceParameters?.[field.id])\n              : ((deviceProviderDeviceParameters?.[\n                  field.id\n                ] as unknown as string) ?? 'None'),\n        });\n      });\n    });\n    return values;\n  });\n  selectOptions: Record<string, { label: string; value: string }[]> = {};\n\n  constructor() {\n    super();\n\n    // Setup initial columns\n    this.columns = [\n      { field: 'key', header: '', transform: 'uppercase' },\n      { field: 'value', header: '' },\n    ];\n\n    effect(() => {\n      const deviceProviderType = this.deviceProviderType();\n      if (deviceProviderType) {\n        this.updateFormFields();\n      }\n    });\n  }\n\n  protected override updateFormFields(): void {\n    const deviceProvider = this.entity();\n    const deviceProviderType = this.deviceProviderType();\n\n    if (!deviceProviderType) {\n      return;\n    }\n\n    const params: { groups: { fields: FormField[] }[] } = JSON.parse(\n      deviceProviderType.parameters,\n    );\n    const fields: FormFieldConfig[] = params.groups.reduce(\n      (acc: FormFieldConfig[], group) => {\n        const groupFields = group.fields.map((field: FormField) => {\n          if (field.type === 'memo') {\n            return createTextAreaField(\n              field.id,\n              field.title,\n              deviceProvider?.parameters?.[field.id] as unknown as string,\n              {\n                name: field.id,\n                validations:\n                  (field.required ?? false)\n                    ? [\n                        {\n                          name: 'required',\n                          validator: Validators.required,\n                          message: `${field.title} is required`,\n                        },\n                      ]\n                    : [],\n\n                hint: field.description,\n              },\n            );\n          }\n          if (field.type === 'number') {\n            return createNumberField(\n              field.id,\n              field.title,\n              deviceProvider?.parameters?.[field.id] as unknown as number,\n              {\n                name: field.id,\n                validations:\n                  (field.required ?? false)\n                    ? [\n                        {\n                          name: 'required',\n                          validator: Validators.required,\n                          message: `${field.title} is required`,\n                        },\n                      ]\n                    : [],\n\n                hint: field.description,\n              },\n            );\n          }\n          return createTextField(\n            field.id,\n            field.title,\n            deviceProvider?.parameters?.[field.id] as unknown as string,\n            {\n              name: field.id,\n              validations:\n                (field.required ?? false)\n                  ? [\n                      {\n                        name: 'required',\n                        validator: Validators.required,\n                        message: `${field.title} is required`,\n                      },\n                    ]\n                  : [],\n\n              hint: field.description,\n            },\n          );\n        });\n        return [...acc, ...groupFields];\n      },\n      [],\n    );\n\n    this.formFields = [\n      {\n        key: 'parameters',\n        name: 'parameters',\n        type: 'group',\n        fields,\n      },\n    ];\n  }\n\n  override getUpdateMethod(): (\n    id: string,\n    data: Partial<DeviceProviderEntity>,\n  ) => Observable<DeviceProviderResponse> {\n    return (\n      this.operationRegistry.getOperation<\n        DeviceProviderEntity,\n        DeviceProviderCreateRequest,\n        DeviceProviderResponse,\n        'update'\n      >('device-providers', 'update') ??\n      ((id, data) => this.entitiesService.updateDeviceProvider(id, data))\n    );\n  }\n}\n","<div class=\"card pt-2\">\n  <div class=\"mb-4 p-2 flex justify-start items-center\">\n    <span\n      class=\"pi pi-wrench !text-[2.5rem]\"\n      [ngClass]=\"{ 'icon-primary': isFormEditable() }\"\n      [attr.aria-label]=\"'wrench icon'\"\n    ></span>\n\n    <div class=\"pl-6 flex-1\">\n      <div class=\"flex justify-between items-center\">\n        <h2 class=\"text-xl font-semibold m-0\">Parameters</h2>\n        @if (!isFormEditable() && !createMode()) {\n          <div class=\"icon-light\">\n            <span\n              class=\"pi pi-pen-to-square action hover !text-2xl\"\n              [attr.aria-label]=\"'Edit device parameters details'\"\n              (click)=\"onEdit()\"\n              (keydown.enter)=\"onEdit()\"\n            ></span>\n          </div>\n        }\n      </div>\n      <span\n        >Configure the following parameters that are required to communicate\n        with the up-stream provider.</span\n      >\n    </div>\n  </div>\n\n  @if (isFormEditable() || (createMode() && formFields.length)) {\n    <app-dynamic-form\n      [fields]=\"formFields\"\n      [actions]=\"actions\"\n      [hideActions]=\"createMode()\"\n      (formSubmit)=\"onSubmit($event)\"\n      (formValidityChange)=\"onFormValidityChange($event)\"\n      (formValueChange)=\"onFormValueChange($event)\"\n    >\n    </app-dynamic-form>\n  }\n\n  @if (!isFormEditable() && !createMode()) {\n    <app-grid\n      [data]=\"deviceProviderDeviceParameters()\"\n      [columns]=\"columns\"\n      [showGridLines]=\"false\"\n      [hideHeader]=\"true\"\n      tableStyleClass=\"info-display !w-auto\"\n    ></app-grid>\n  }\n</div>\n","import { Injectable } from '@angular/core';\n\nimport {\n  DeviceProviderResponse,\n  DeviceProviderTypeResponse,\n} from '../../../api';\nimport { AdminDetailSection } from '../models';\nimport { DeviceProviderDetailsSectionComponent } from '../components/device-providers/device-provider-details-section/device-provider-details-section.component';\nimport { DeviceProviderParametersSectionComponent } from '../components/device-providers/device-provider-parameters-section/device-provider-parameters-section.component';\nimport { FeedSectionComponent } from '../components/shared/feed-section/feed-section.component';\n\n@Injectable({ providedIn: 'root' })\nexport class DeviceProviderSectionConfigFactory {\n  /**\n   * Create sections for device provider information\n   * @param deviceProvider The device provider object to display in the section\n   * @returns An array of AdminDetailSection objects representing the device provider information sections\n   */\n  createDeviceProviderInformationSection(\n    deviceProvider: DeviceProviderResponse | null,\n    deviceProviderType: DeviceProviderTypeResponse | null,\n  ): AdminDetailSection[] {\n    return [\n      {\n        id: 'device-provider-details',\n        title: 'Device Config Details',\n        component: DeviceProviderDetailsSectionComponent,\n        componentInputs: { entity: deviceProvider },\n        category: 'information',\n        order: 10,\n      },\n      {\n        id: 'device-provider-parameters',\n        title: 'Device Config Parameters',\n        component: DeviceProviderParametersSectionComponent,\n        componentInputs: {\n          entity: deviceProvider,\n          entityType: 'device-provider',\n          dataPath: 'parameters',\n          injectDataAtPath: true,\n          deviceProviderType,\n        },\n        category: 'information',\n        order: 20,\n      },\n    ];\n  }\n\n  /**\n   * Create sections for device provider changes\n   * @param deviceProvider The device provider object to display in the section\n   * @returns An array of AdminDetailSection objects representing the device provider changes sections\n   */\n  createChangesSection(\n    deviceProvider: DeviceProviderResponse | null,\n  ): AdminDetailSection[] {\n    return [\n      {\n        id: 'device-provider-changes',\n        title: 'Changes',\n        component: FeedSectionComponent,\n        componentInputs: {\n          entity: deviceProvider,\n        },\n        category: 'feed',\n        order: 10,\n      },\n    ];\n  }\n\n  /**\n   * Create all deviceProvider sections in one call\n   * @param deviceProvider The deviceProvider object to display in the sections\n   * @returns An array of AdminDetailSection objects representing all deviceProvider sections\n   */\n  createAllDeviceProviderSections(\n    deviceProvider: DeviceProviderResponse | null,\n    deviceProviderType: DeviceProviderTypeResponse | null,\n  ): AdminDetailSection[] {\n    return [\n      ...this.createDeviceProviderInformationSection(\n        deviceProvider,\n        deviceProviderType,\n      ),\n      ...this.createChangesSection(deviceProvider),\n    ];\n  }\n}\n","import {\n  ChangeDetectorRef,\n  Component,\n  OnInit,\n  computed,\n  effect,\n  inject,\n  input,\n  signal,\n  untracked,\n} from '@angular/core';\nimport { Validators } from '@angular/forms';\n\nimport { ButtonModule } from 'primeng/button';\nimport { InputTextModule } from 'primeng/inputtext';\nimport { faComments } from '@fortawesome/free-solid-svg-icons';\nimport { FontAwesomeModule } from '@fortawesome/angular-fontawesome';\nimport { takeUntilDestroyed } from '@angular/core/rxjs-interop';\n\nimport {\n  EntitiesService,\n  SmsGatewayProviderCreateRequest,\n  SmsGatewayProviderListItem,\n  SmsGatewayProviderResponse,\n  SmsGatewayProviderUpdateRequest,\n} from '../../../../../api';\nimport { EntityOperationRegistryService } from '../../../services/entity/entity-operation-registry.service';\nimport { ApiSchemaService } from '../../../../../core/services/api-schema.service';\nimport { TypedEntitySectionBaseComponent } from '../../base';\n\nimport { isDefined, isNullOrUndefined } from '../../../../../shared/utils';\nimport {\n  createDropdownField,\n  createTextField,\n} from '../../../../../shared/models';\nimport { DynamicFormComponent } from '../../../../../shared/components/forms/dynamic-form/dynamic-form.component';\nimport { GridComponent } from '../../../../../shared/components/grid/grid.component';\nimport { CommonModule } from '@angular/common';\nimport { Observable } from 'rxjs';\nimport { FormToRequestMapper } from '../../../utils/form-to-request-mapper';\n\n// Define a local type for what a 'type object' looks like if not imported\ninterface TypeObjectShape {\n  id: string;\n  name: string;\n  // Add other common properties if they exist across different type objects\n  // direction?: string; // Example if direction is common\n}\n\ntype SmsGatewayProviderEntity =\n  | SmsGatewayProviderListItem\n  | SmsGatewayProviderCreateRequest;\n\n@Component({\n  selector: 'app-sms-gateway-provider-details-section',\n  imports: [\n    CommonModule,\n    ButtonModule,\n    InputTextModule,\n    GridComponent,\n    DynamicFormComponent,\n    FontAwesomeModule,\n  ],\n  templateUrl: './sms-gateway-provider-details-section.component.html',\n  styleUrl: './sms-gateway-provider-details-section.component.scss',\n})\nexport class SmsGatewayProviderDetailsSectionComponent\n  extends TypedEntitySectionBaseComponent<\n    SmsGatewayProviderListItem,\n    SmsGatewayProviderUpdateRequest,\n    SmsGatewayProviderCreateRequest,\n    SmsGatewayProviderResponse\n  >\n  implements OnInit\n{\n  readonly ownerId = input<string | null>(null);\n  readonly entitiesService = inject(EntitiesService);\n  private readonly operationRegistry = inject(EntityOperationRegistryService);\n  private readonly apiSchemaService = inject(ApiSchemaService);\n  private readonly cdr = inject(ChangeDetectorRef);\n\n  protected readonly selectOptionsLoaded = signal<boolean>(false);\n  private readonly entityName = 'smsgatewayprovider';\n\n  selectOptions: Record<\n    string,\n    { label: string; value: string; data: unknown }[]\n  > = {};\n  faComments = faComments;\n\n  readonly smsGatewayProviderDetails = computed(() => {\n    const entity = this.entity();\n    if (!isDefined(entity)) return [];\n\n    const typeObject = this.apiSchemaService.getEntityType<\n      Record<string, unknown>,\n      TypeObjectShape\n    >(entity as Record<string, unknown>, this.entityName);\n\n    return [\n      {\n        key: 'Type',\n        value: typeObject?.name ?? 'None',\n      },\n      { key: 'Name', value: (entity as SmsGatewayProviderListItem).name },\n    ];\n  });\n  private requestMapper?: FormToRequestMapper<SmsGatewayProviderUpdateRequest>;\n\n  constructor() {\n    super();\n\n    // Setup initial columns\n    this.columns = [\n      { field: 'key', header: '', transform: 'uppercase' },\n      { field: 'value', header: '' },\n    ];\n\n    effect(() => {\n      const selectOptionsLoaded = this.selectOptionsLoaded();\n      if (selectOptionsLoaded) {\n        this.initializeRequestMapper();\n        untracked(() => {\n          this.updateFormFields();\n          this.cdr.detectChanges();\n        });\n      }\n    });\n  }\n\n  ngOnInit(): void {\n    this.loadSelectOptions();\n  }\n\n  private loadSelectOptions(): void {\n    const smsGatewayProvider = this.entity();\n    const ownerIdValue = this.ownerId();\n\n    const effectiveOwnerId = smsGatewayProvider?.owner?.id ?? ownerIdValue;\n\n    if (isNullOrUndefined(effectiveOwnerId)) {\n      this.selectOptions = {};\n      this.selectOptionsLoaded.set(true);\n      this.updateFormFields();\n      return;\n    }\n\n    this.entitiesService\n      .listSmsGatewayProviderTypes(effectiveOwnerId)\n      .pipe(takeUntilDestroyed(this.destroyRef))\n      .subscribe((result) => {\n        this.selectOptions = {\n          smsGatewayProviderTypes: result.items\n            .map((item) => ({\n              label: item?.name,\n              value: item.id,\n              data: item,\n            }))\n            .sort((a, b) => a.label.localeCompare(b.label)),\n        };\n\n        this.selectOptionsLoaded.set(true);\n      });\n  }\n\n  private initializeRequestMapper(): void {\n    this.requestMapper =\n      new FormToRequestMapper<SmsGatewayProviderUpdateRequest>({\n        name: {\n          requestProperty: 'name',\n          transform: (value) => value,\n        },\n        [this.apiSchemaService.getTypePropertyKey(this.entityName)]: {\n          requestProperty: this.apiSchemaService.getTypePropertyKey(\n            this.entityName,\n          ),\n          transform: (value) => {\n            const selectedType = this.selectOptions?.[\n              'smsGatewayProviderTypes'\n            ]?.find((option) => option.value === value);\n            return selectedType\n              ? { id: selectedType.value, name: selectedType.label }\n              : null;\n          },\n        },\n      });\n  }\n\n  protected override updateFormFields(): void {\n    const smsGatewayProvider = this.entity();\n    const typeObject = this.apiSchemaService.getEntityType<\n      Record<string, unknown>,\n      TypeObjectShape\n    >(smsGatewayProvider as Record<string, unknown>, this.entityName);\n\n    this.formFields = [\n      createDropdownField(\n        this.apiSchemaService.getTypePropertyKey(this.entityName),\n        'Type',\n        this.selectOptions?.['smsGatewayProviderTypes'],\n        typeObject?.id ?? null,\n        {\n          name: this.apiSchemaService.getTypePropertyKey(this.entityName),\n          validations: [\n            {\n              name: 'required',\n              validator: Validators.required,\n              message: 'Type is required',\n            },\n          ],\n\n          disabled:\n            !this.createMode() &&\n            !this.apiSchemaService.usesModernSchema() &&\n            isDefined(typeObject) &&\n            isDefined(typeObject?.id),\n          props: {\n            appendTo: 'body',\n          },\n        },\n      ),\n      createTextField(\n        'name',\n        'Name',\n        (smsGatewayProvider as SmsGatewayProviderListItem)?.name ?? '',\n        {\n          name: 'name',\n          validations: [\n            {\n              name: 'required',\n              validator: Validators.required,\n              message: 'Name is required',\n            },\n          ],\n        },\n      ),\n    ];\n  }\n\n  override getUpdateMethod(): (\n    id: string,\n    data: Partial<SmsGatewayProviderEntity>,\n  ) => Observable<SmsGatewayProviderResponse> {\n    return (\n      this.operationRegistry.getOperation<\n        SmsGatewayProviderEntity,\n        SmsGatewayProviderCreateRequest,\n        SmsGatewayProviderResponse,\n        'update'\n      >('sms-gateway-provider', 'update') ??\n      ((id, data) =>\n        this.entitiesService.updateSmsGatewayProvider(\n          id,\n          data as SmsGatewayProviderUpdateRequest,\n        ))\n    );\n  }\n\n  protected override onFormValueChange(\n    formData: Record<string, string | number | object>,\n  ): void {\n    try {\n      const transformedData = this.transformFormData(formData);\n      this.formValueChange.emit(transformedData);\n    } catch (error) {\n      console.warn('Form data transformation failed:', error);\n      // Emit raw data as fallback\n      this.formValueChange.emit(formData);\n    }\n  }\n\n  protected override transformFormData(\n    formData: Record<string, unknown> | Record<string, string | number>[],\n  ): SmsGatewayProviderUpdateRequest {\n    if (!this.requestMapper) {\n      return {};\n    }\n    try {\n      const normalizedFormData = Array.isArray(formData)\n        ? formData.reduce((acc, item) => ({ ...acc, ...item }), {})\n        : formData;\n\n      const partialRequest = this.requestMapper.transform(normalizedFormData);\n\n      // Build update request - only include properties that were actually provided\n      const updateRequest: Partial<SmsGatewayProviderUpdateRequest> = {};\n      for (const key in partialRequest) {\n        if (partialRequest[key] !== undefined) {\n          updateRequest[key] = partialRequest[key];\n        }\n      }\n      return updateRequest;\n    } catch (error) {\n      console.error('Error transforming form data:', error);\n      throw error;\n    }\n  }\n}\n","<div class=\"card pt-2\">\n  <div class=\"mb-4 p-2 flex justify-start items-center\">\n    <fa-icon\n      [icon]=\"faComments\"\n      class=\"!text-[2.5rem]\"\n      [ngClass]=\"{ 'icon-primary': isFormEditable() }\"\n    ></fa-icon>\n\n    <div class=\"pl-6 flex-1\">\n      <div class=\"flex justify-between items-center\">\n        <h2 class=\"text-xl font-semibold m-0\">SMS Gateway Provider Details</h2>\n        @if (!isFormEditable() && !createMode()) {\n          <div class=\"icon-light\">\n            <span\n              class=\"pi pi-pen-to-square action hover !text-2xl\"\n              [attr.aria-label]=\"'Edit sms gateway provider details'\"\n              (click)=\"onEdit()\"\n              (keydown.enter)=\"onEdit()\"\n            ></span>\n          </div>\n        }\n      </div>\n      <span\n        >The following information is required in order to configure your SMS\n        gateway provider.</span\n      >\n    </div>\n  </div>\n\n  @if (isFormEditable() || (createMode() && formFields.length)) {\n    <app-dynamic-form\n      [fields]=\"formFields\"\n      [actions]=\"actions\"\n      [hideActions]=\"createMode()\"\n      (formSubmit)=\"onSubmit($event)\"\n      (formValidityChange)=\"onFormValidityChange($event)\"\n      (formValueChange)=\"onFormValueChange($event)\"\n    >\n    </app-dynamic-form>\n  }\n\n  @if (!isFormEditable() && !createMode()) {\n    <app-grid\n      [data]=\"smsGatewayProviderDetails()\"\n      [columns]=\"columns\"\n      [showGridLines]=\"false\"\n      [hideHeader]=\"true\"\n      tableStyleClass=\"info-display !w-auto\"\n    ></app-grid>\n  }\n</div>\n","import { CommonModule } from '@angular/common';\nimport { Component, computed, effect, inject, input } from '@angular/core';\n\nimport { ButtonModule } from 'primeng/button';\nimport { InputTextModule } from 'primeng/inputtext';\nimport { Observable } from 'rxjs';\n\nimport {\n  SmsGatewayProviderCreateRequest,\n  SmsGatewayProviderResponse,\n  EntitiesService,\n  SmsGatewayProviderTypeResponse,\n} from '../../../../../api';\nimport { DynamicFormComponent } from '../../../../../shared/components/forms/dynamic-form/dynamic-form.component';\nimport { GridComponent } from '../../../../../shared/components/grid/grid.component';\nimport {\n  createDropdownField,\n  createNumberField,\n  createPasswordField,\n  createTextAreaField,\n  createTextField,\n  FormFieldConfig,\n} from '../../../../../shared/models';\nimport { isNullOrUndefined } from '../../../../../shared/utils';\nimport { EntityOperationRegistryService } from '../../../services/entity/entity-operation-registry.service';\nimport { EntitySectionBaseComponent } from '../../base';\nimport { Validators } from '@angular/forms';\n\ntype SmsGatewayProviderEntity =\n  | SmsGatewayProviderResponse\n  | SmsGatewayProviderCreateRequest;\n\ninterface FormField {\n  id: string;\n  title: string;\n  type: string;\n  value?: string | number;\n  defaultValue?: string | number;\n  required?: boolean;\n  description?: string;\n  min?: number;\n  max?: number;\n  width?: number;\n  writeonce?: boolean;\n  values?: {\n    key: string;\n    value: string;\n    fields?: FormField[];\n  }[];\n}\n\n@Component({\n  selector: 'app-sms-gateway-provider-parameters-section',\n  imports: [\n    CommonModule,\n    ButtonModule,\n    InputTextModule,\n    GridComponent,\n    DynamicFormComponent,\n  ],\n  templateUrl: './sms-gateway-provider-parameters-section.component.html',\n  styleUrl: './sms-gateway-provider-parameters-section.component.scss',\n})\nexport class SmsGatewayProviderParametersSectionComponent extends EntitySectionBaseComponent<SmsGatewayProviderEntity> {\n  readonly ownerId = input<string | null>(null);\n  readonly smsGatewayProviderType =\n    input<SmsGatewayProviderTypeResponse | null>(null);\n  readonly entitiesService = inject(EntitiesService);\n  private readonly operationRegistry = inject(EntityOperationRegistryService);\n\n  readonly smsGatewayProviderDeviceParameters = computed(() => {\n    const smsGatewayProviderDeviceParameters = this.entity()?.parameters;\n    const smsGatewayProviderType = this.smsGatewayProviderType();\n\n    if (\n      isNullOrUndefined(smsGatewayProviderDeviceParameters) ||\n      isNullOrUndefined(smsGatewayProviderType)\n    )\n      return [];\n\n    const parameterDefinition =\n      smsGatewayProviderType.parameterDefinition ?? '{\"groups\":[]}';\n    const params: { groups: { name: string; fields: FormField[] }[] } =\n      JSON.parse(parameterDefinition);\n    const values: { key: string; value: string }[] = [];\n\n    params.groups.forEach((group) => {\n      group.fields.forEach((field: FormField) => {\n        // Add the primary field\n        let fieldValue = 'None';\n        if (field.type === 'password') {\n          fieldValue = '****';\n        } else {\n          const paramValue = smsGatewayProviderDeviceParameters?.[field.id];\n          if (typeof paramValue === 'object') {\n            fieldValue = JSON.stringify(paramValue);\n          } else if (paramValue !== undefined) {\n            fieldValue = paramValue as unknown as string;\n          }\n        }\n\n        values.push({\n          key: field.title,\n          value: fieldValue,\n        });\n\n        // Handle combo fields with dependent fields\n        if (field.type === 'combo' && field.values) {\n          const selectedValue = smsGatewayProviderDeviceParameters?.[\n            field.id\n          ] as unknown as string;\n          const selectedOption = field.values.find(\n            (opt) => opt.key === selectedValue,\n          );\n\n          if (selectedOption?.fields) {\n            selectedOption.fields.forEach((subField) => {\n              if (\n                smsGatewayProviderDeviceParameters?.[subField.id] !== undefined\n              ) {\n                let fieldValue = 'None';\n                const paramValue =\n                  smsGatewayProviderDeviceParameters?.[subField.id];\n\n                if (subField.type === 'password') {\n                  fieldValue = '****';\n                } else if (typeof paramValue === 'object') {\n                  fieldValue = JSON.stringify(paramValue);\n                } else if (paramValue !== undefined) {\n                  fieldValue = paramValue as unknown as string;\n                }\n\n                values.push({\n                  key: `${subField.title}`,\n                  value: fieldValue,\n                });\n              }\n            });\n          }\n        }\n      });\n    });\n    return values;\n  });\n\n  constructor() {\n    super();\n\n    // Setup initial columns\n    this.columns = [\n      { field: 'key', header: '', transform: 'uppercase' },\n      { field: 'value', header: '' },\n    ];\n\n    effect(() => {\n      const smsGatewayProviderType = this.smsGatewayProviderType();\n      if (smsGatewayProviderType) {\n        this.updateFormFields();\n      }\n    });\n  }\n\n  protected override updateFormFields(): void {\n    const smsGatewayProvider = this.entity();\n    const smsGatewayProviderType = this.smsGatewayProviderType();\n\n    if (!smsGatewayProviderType) {\n      return;\n    }\n    const parameterDefinition =\n      smsGatewayProviderType.parameterDefinition ?? '{\"groups\":[]}';\n    const params: { groups: { name: string; fields: FormField[] }[] } =\n      JSON.parse(parameterDefinition);\n\n    const fields: FormFieldConfig[] = params.groups.reduce(\n      (acc: FormFieldConfig[], group) => {\n        const groupFields = group.fields.flatMap((field: FormField) => {\n          // Create base field\n          const baseField = this.createFormFieldConfig(\n            field,\n            smsGatewayProvider,\n          );\n\n          return [baseField];\n        });\n\n        return [...acc, ...groupFields];\n      },\n      [],\n    );\n\n    this.formFields = fields;\n  }\n\n  private createFormFieldConfig(\n    field: FormField,\n    smsGatewayProvider: SmsGatewayProviderEntity | null,\n  ): FormFieldConfig {\n    if (field.type === 'memo') {\n      return createTextAreaField(\n        field.id,\n        field.title,\n        smsGatewayProvider?.parameters?.[field.id] as unknown as string,\n        {\n          name: field.id,\n          validations:\n            (field.required ?? false)\n              ? [\n                  {\n                    name: 'required',\n                    validator: Validators.required,\n                    message: `${field.title} is required`,\n                  },\n                ]\n              : [],\n          hint: field.description,\n        },\n      );\n    }\n    if (field.type === 'number') {\n      return createNumberField(\n        field.id,\n        field.title,\n        smsGatewayProvider?.parameters?.[field.id] as unknown as number,\n        {\n          name: field.id,\n          validations:\n            (field.required ?? false)\n              ? [\n                  {\n                    name: 'required',\n                    validator: Validators.required,\n                    message: `${field.title} is required`,\n                  },\n                ]\n              : [],\n          hint: field.description,\n        },\n      );\n    }\n    if (field.type === 'combo' && field.values) {\n      // Handle dropdown field creation\n      const options = field.values.map((value) => ({\n        label: value.value,\n        value: value.key,\n      }));\n\n      return createDropdownField(\n        field.id,\n        field.title,\n        options,\n        (smsGatewayProvider?.parameters?.[field.id] as unknown as string) ||\n          (field.defaultValue as string),\n        {\n          name: field.id,\n          validations:\n            (field.required ?? false)\n              ? [\n                  {\n                    name: 'required',\n                    validator: Validators.required,\n                    message: `${field.title} is required`,\n                  },\n                ]\n              : [],\n          hint: field.description,\n          props: {\n            appendTo: 'body',\n          },\n          conditional: true,\n          conditions: options.reduce(\n            (acc, option) => ({\n              ...acc,\n              [option.value]: this.createConditionFields(\n                field?.values?.find((opt) => opt.key === option.value)\n                  ?.fields ?? [],\n              ),\n            }),\n            {},\n          ),\n        },\n      );\n    }\n    if (field.type === 'password') {\n      return createPasswordField(field.id, field.title, {\n        name: field.id,\n        validations:\n          (field.required ?? false)\n            ? [\n                {\n                  name: 'required',\n                  validator: Validators.required,\n                  message: `${field.title} is required`,\n                },\n              ]\n            : [],\n        hint: field.description,\n        props: {\n          type: 'password',\n        },\n      });\n    }\n\n    // Default text field\n    return createTextField(\n      field.id,\n      field.title,\n      smsGatewayProvider?.parameters?.[field.id] as unknown as string,\n      {\n        name: field.id,\n        validations:\n          (field.required ?? false)\n            ? [\n                {\n                  name: 'required',\n                  validator: Validators.required,\n                  message: `${field.title} is required`,\n                },\n              ]\n            : [],\n        hint: field.description,\n      },\n    );\n  }\n\n  override getUpdateMethod(): (\n    id: string,\n    data: Partial<SmsGatewayProviderEntity>,\n  ) => Observable<SmsGatewayProviderResponse> {\n    return (\n      this.operationRegistry.getOperation<\n        SmsGatewayProviderEntity,\n        SmsGatewayProviderCreateRequest,\n        SmsGatewayProviderResponse,\n        'update'\n      >('sms-gateway-providers', 'update') ??\n      ((id, data) =>\n        this.entitiesService.updateSmsGatewayProvider(id, {\n          parameters: data,\n        }))\n    );\n  }\n\n  createConditionFields(fields: FormField[]): FormFieldConfig[] {\n    return fields.map((field) => {\n      return this.createFormFieldConfig(field, this.entity());\n    });\n  }\n}\n","<div class=\"card pt-2\">\n  <div class=\"mb-4 p-2 flex justify-start items-center\">\n    <span\n      class=\"pi pi-wrench !text-[2.5rem]\"\n      [ngClass]=\"{ 'icon-primary': isFormEditable() }\"\n      [attr.aria-label]=\"'wrench icon'\"\n    ></span>\n\n    <div class=\"pl-6 flex-1\">\n      <div class=\"flex justify-between items-center\">\n        <h2 class=\"text-xl font-semibold m-0\">Parameters</h2>\n        @if (!isFormEditable() && !createMode()) {\n          <div class=\"icon-light\">\n            <span\n              class=\"pi pi-pen-to-square action hover !text-2xl\"\n              [attr.aria-label]=\"'Edit device parameters details'\"\n              (click)=\"onEdit()\"\n              (keydown.enter)=\"onEdit()\"\n            ></span>\n          </div>\n        }\n      </div>\n      <span\n        >Configure the following parameters that are required to communicate\n        with the up-stream provider.</span\n      >\n    </div>\n  </div>\n\n  @if (isFormEditable() || (createMode() && formFields.length)) {\n    <app-dynamic-form\n      [fields]=\"formFields\"\n      [actions]=\"actions\"\n      [hideActions]=\"createMode()\"\n      (formSubmit)=\"onSubmit($event)\"\n      (formValidityChange)=\"onFormValidityChange($event)\"\n      (formValueChange)=\"onFormValueChange($event)\"\n    >\n    </app-dynamic-form>\n  }\n\n  @if (!isFormEditable() && !createMode()) {\n    <app-grid\n      [data]=\"smsGatewayProviderDeviceParameters()\"\n      [columns]=\"columns\"\n      [showGridLines]=\"false\"\n      [hideHeader]=\"true\"\n      tableStyleClass=\"info-display !w-auto\"\n    ></app-grid>\n  }\n</div>\n","import { Injectable } from '@angular/core';\n\nimport {\n  SmsGatewayProviderResponse,\n  SmsGatewayProviderTypeResponse,\n} from '../../../api';\nimport { AdminDetailSection } from '../models';\nimport { SmsGatewayProviderDetailsSectionComponent } from '../components/sms-gateway-providers/sms-gateway-provider-details-section/sms-gateway-provider-details-section.component';\nimport { SmsGatewayProviderParametersSectionComponent } from '../components/sms-gateway-providers/sms-gateway-provider-parameters-section/sms-gateway-provider-parameters-section.component';\nimport { FeedSectionComponent } from '../components/shared/feed-section/feed-section.component';\n\n@Injectable({ providedIn: 'root' })\nexport class SmsGatewayProviderSectionConfigFactory {\n  /**\n   * Create sections for sms gateway provider information\n   * @param smsGatewayProvider The sms gateway provider object to display in the section\n   * @returns An array of AdminDetailSection objects representing the sms gateway provider information sections\n   */\n  createSmsGatewayProviderInformationSection(\n    smsGatewayProvider: SmsGatewayProviderResponse | null,\n    smsGatewayProviderType: SmsGatewayProviderTypeResponse | null,\n  ): AdminDetailSection[] {\n    return [\n      {\n        id: 'sms-gateway-provider-details',\n        title: 'Device Config Details',\n        component: SmsGatewayProviderDetailsSectionComponent,\n        componentInputs: { entity: smsGatewayProvider },\n        category: 'information',\n        order: 10,\n      },\n      {\n        id: 'sms-gateway-provider-parameters',\n        title: 'Device Config Parameters',\n        component: SmsGatewayProviderParametersSectionComponent,\n        componentInputs: {\n          entity: smsGatewayProvider,\n          entityType: 'sms-gateway-provider',\n          dataPath: 'parameters',\n          injectDataAtPath: true,\n          smsGatewayProviderType,\n        },\n        category: 'information',\n        order: 20,\n      },\n    ];\n  }\n\n  /**\n   * Create sections for sms gateway provider changes\n   * @param smsGatewayProvider The sms gateway provider object to display in the section\n   * @returns An array of AdminDetailSection objects representing the sms gateway provider changes sections\n   */\n  createChangesSection(\n    smsGatewayProvider: SmsGatewayProviderResponse | null,\n  ): AdminDetailSection[] {\n    return [\n      {\n        id: 'sms-gateway-provider-changes',\n        title: 'Changes',\n        component: FeedSectionComponent,\n        componentInputs: {\n          entity: smsGatewayProvider,\n        },\n        category: 'feed',\n        order: 10,\n      },\n    ];\n  }\n\n  /**\n   * Create all smsGatewayProvider sections in one call\n   * @param smsGatewayProvider The smsGatewayProvider object to display in the sections\n   * @returns An array of AdminDetailSection objects representing all smsGatewayProvider sections\n   */\n  createAllSmsGatewayProviderSections(\n    smsGatewayProvider: SmsGatewayProviderResponse | null,\n    smsGatewayProviderType: SmsGatewayProviderTypeResponse | null,\n  ): AdminDetailSection[] {\n    return [\n      ...this.createSmsGatewayProviderInformationSection(\n        smsGatewayProvider,\n        smsGatewayProviderType,\n      ),\n      ...this.createChangesSection(smsGatewayProvider),\n    ];\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { Component, computed, effect, inject, input } from '@angular/core';\nimport { Validators } from '@angular/forms';\nimport { ButtonModule } from 'primeng/button';\nimport { InputTextModule } from 'primeng/inputtext';\n\nimport { EntitySectionBaseComponent } from '../../../components/base/entity-section-base';\nimport {\n  IoTypeCreateRequest,\n  IoTypeListItem,\n  EntitiesService,\n} from '../../../../../api';\nimport { isDefined, isNullOrUndefined } from '../../../../../shared/utils';\nimport { takeUntilDestroyed } from '@angular/core/rxjs-interop';\nimport {\n  createDropdownField,\n  createNumberField,\n  createTextAreaField,\n  createTextField,\n} from '../../../../../shared/models';\nimport { GridComponent } from '../../../../../shared/components/grid/grid.component';\nimport { DynamicFormComponent } from '../../../../../shared/components/forms/dynamic-form/dynamic-form.component';\nimport { UtilityService } from '../../../../../core/services/utility.service';\nimport { FontAwesomeModule } from '@fortawesome/angular-fontawesome';\nimport { ApiSchemaService } from '../../../../../core/services/api-schema.service';\n\nexport type PropertyValueType = string | number | object;\n\n@Component({\n  selector: 'app-io-type-details-section',\n  imports: [\n    CommonModule,\n    ButtonModule,\n    InputTextModule,\n    GridComponent,\n    DynamicFormComponent,\n    FontAwesomeModule,\n  ],\n  templateUrl: './io-type-details-section.component.html',\n  styleUrl: './io-type-details-section.component.scss',\n})\nexport class IoTypeDetailsSectionComponent extends EntitySectionBaseComponent<\n  IoTypeListItem | IoTypeCreateRequest\n> {\n  readonly ownerId = input<string | null>(null);\n  private readonly entitiesService = inject(EntitiesService);\n  private readonly utilityService = inject(UtilityService);\n  private readonly apiSchemaService = inject(ApiSchemaService);\n\n  readonly typeOptions = [\n    { key: 'digital_input', label: 'Digital Input' },\n    { key: 'digital_output', label: 'Digital Output' },\n    { key: 'analog_input', label: 'Analog Input' },\n    { key: 'temperature_input', label: 'Temperature Input' },\n    {\n      key: 'can_input',\n      label: 'CAN Input',\n    },\n    {\n      key: 'counter_input',\n      label: 'Counter Input',\n    },\n    { key: 'camera_input', label: 'Camera Input' },\n    { key: 'value_input', label: 'Value Input' },\n  ];\n  readonly smoothingOptions = [\n    { label: 'None', value: 'none' },\n    { label: 'Moving Average (5 samples)', value: 'moving_average_5' },\n    { label: 'Moving Average (10 samples)', value: 'moving_average_10' },\n    { label: 'Moving Average (20 samples)', value: 'moving_average_20' },\n  ];\n  readonly rateTypeOptions = [\n    { value: 'none', label: 'None' },\n    { value: 'val_per_km', label: 'Value Per Kilometer' },\n    { value: 'km_per_val', label: 'Kilometer Per Value' },\n    { value: 'val_per_mile', label: 'Value Per Mile' },\n    { value: 'mile_per_val', label: 'Miles Per Value' },\n    { value: 'val_per_hour', label: 'Value Per Hour' },\n    { value: 'hour_per_val', label: 'Hours Per Value' },\n  ];\n\n  readonly ioTypeDetails = computed(() => {\n    const ioTypeDetails = this.entity();\n    if (!isDefined(ioTypeDetails)) return [];\n\n    // Get the type using ApiSchemaService for consistency\n    const typeValue = this.apiSchemaService.getEntityType<\n      Record<string, unknown>,\n      IoTypeListItem.TypeEnum\n    >(ioTypeDetails as Record<string, unknown>, 'Iotype');\n\n    const result: Partial<IoTypeListItem> = {\n      name: ioTypeDetails.name,\n      type: typeValue,\n      active: ioTypeDetails.text ? (ioTypeDetails.text.active ?? null) : null,\n      inactive: ioTypeDetails.text\n        ? (ioTypeDetails.text.inactive ?? null)\n        : null,\n      smoothingType: ioTypeDetails.smoothingType,\n      unit: ioTypeDetails.unit,\n      rateUnit: ioTypeDetails.rate?.unit,\n      rateMultiplier: ioTypeDetails.rate?.multiplier,\n      rateType: ioTypeDetails.rate?.type,\n      lookups: ioTypeDetails.lookups,\n    };\n    Object.keys(result).forEach(\n      (key) =>\n        (result[key] === undefined || result[key] === null) &&\n        delete result[key],\n    );\n\n    return Object.keys(result).map((key) => {\n      if (key === 'rateType') {\n        return {\n          key: this.utilityService.decamelize(key),\n          value: this.utilityService.decamelize(result[key]),\n        };\n      }\n      if (key === 'type') {\n        return {\n          key: this.utilityService.decamelize(key),\n          value: this.typeOptions.find((type) => type.key === result[key])\n            ?.label,\n        };\n      }\n      if (key === 'smoothingType') {\n        const typeValue = this.apiSchemaService.getEntityType<\n          Record<string, unknown>,\n          IoTypeListItem.TypeEnum\n        >(result as Record<string, unknown>, 'IoTypeListItem');\n        if (\n          typeValue === IoTypeListItem.TypeEnum.AnalogInput ||\n          typeValue === IoTypeListItem.TypeEnum.TemperatureInput ||\n          typeValue === IoTypeListItem.TypeEnum.CanInput\n        ) {\n          return {\n            key: 'Filter',\n            value: this.smoothingOptions.find(\n              (smoothing) => smoothing.value === result[key],\n            )?.label,\n          };\n        }\n        return;\n      }\n      return {\n        key: this.utilityService.decamelize(key),\n        value: result[key],\n      };\n    });\n  });\n\n  constructor() {\n    super();\n\n    // Setup initial columns\n    this.columns = [\n      { field: 'key', header: '', transform: 'uppercase' },\n      { field: 'value', header: '', transform: 'capitalize' },\n    ];\n\n    effect(() => {\n      const ioTypeDetails = this.ioTypeDetails();\n      if (ioTypeDetails.length > 0 && !this.createMode()) {\n        this.updateFormFields();\n      }\n    });\n  }\n\n  protected override updateFormFields(): void {\n    const ioType = this.entity();\n\n    // Get the type using ApiSchemaService for consistency\n    const typeValue = ioType\n      ? this.apiSchemaService.getEntityType<\n          Record<string, unknown>,\n          IoTypeListItem.TypeEnum\n        >(ioType as Record<string, unknown>, 'Iotype')\n      : null;\n\n    this.formFields = [\n      createTextField('name', 'Name', ioType?.name, {\n        name: 'name',\n        validations: [\n          {\n            name: 'required',\n            validator: Validators.required,\n            message: 'Name is required',\n          },\n        ],\n      }),\n      createDropdownField(\n        'type',\n        'Type',\n        this.typeOptions.map((option) => ({\n          label: option.label,\n          value: option.key,\n        })),\n        typeValue,\n        {\n          name: 'type',\n          validations: [\n            {\n              name: 'required',\n              validator: Validators.required,\n              message: 'Type is required',\n            },\n          ],\n          conditional: true,\n          conditions: {\n            digital_input: [\n              createTextField('active', 'Active Text', ioType?.text?.active, {\n                name: 'active',\n                validations: [\n                  {\n                    name: 'required',\n                    validator: Validators.required,\n                    message: 'Active Text is required',\n                  },\n                ],\n              }),\n              createTextField(\n                'inactive',\n                'Inactive Text',\n                ioType?.text?.inactive,\n                {\n                  name: 'inactive',\n                  validations: [\n                    {\n                      name: 'required',\n                      validator: Validators.required,\n                      message: 'Inactive Text is required',\n                    },\n                  ],\n                },\n              ),\n            ],\n            digital_output: [\n              createTextField('active', 'Active Text', ioType?.text?.active, {\n                name: 'active',\n                validations: [\n                  {\n                    name: 'required',\n                    validator: Validators.required,\n                    message: 'Active Text is required',\n                  },\n                ],\n              }),\n              createTextField(\n                'inactive',\n                'Inactive Text',\n                ioType?.text?.inactive,\n                {\n                  name: 'inactive',\n                  validations: [\n                    {\n                      name: 'required',\n                      validator: Validators.required,\n                      message: 'Inactive Text is required',\n                    },\n                  ],\n                },\n              ),\n            ],\n            analog_input: [\n              createTextField('unit', 'Unit', ioType?.unit, {\n                name: 'unit',\n                validations: [\n                  {\n                    name: 'required',\n                    validator: Validators.required,\n                    message: 'Unit is required',\n                  },\n                ],\n              }),\n              createDropdownField(\n                'smoothingType',\n                'Smoothing Type',\n                this.smoothingOptions,\n                ioType?.smoothingType,\n                {\n                  name: 'smoothingType',\n                  validations: [\n                    {\n                      name: 'required',\n                      validator: Validators.required,\n                      message: 'Smoothing Type is required',\n                    },\n                  ],\n                  props: {\n                    appendTo: 'body',\n                  },\n                },\n              ),\n            ],\n            temperature_input: [\n              createDropdownField(\n                'smoothingType',\n                'Smoothing Type',\n                this.smoothingOptions,\n                ioType?.smoothingType,\n                {\n                  name: 'smoothingType',\n                  validations: [\n                    {\n                      name: 'required',\n                      validator: Validators.required,\n                      message: 'Smoothing Type is required',\n                    },\n                  ],\n                  props: {\n                    appendTo: 'body',\n                  },\n                },\n              ),\n            ],\n            can_input: [\n              createTextField('active', 'Active Text', ioType?.text?.active, {\n                name: 'active',\n                validations: [\n                  {\n                    name: 'required',\n                    validator: Validators.required,\n                    message: 'Active Text is required',\n                  },\n                ],\n              }),\n              createTextField(\n                'inactive',\n                'Inactive Text',\n                ioType?.text?.inactive,\n                {\n                  name: 'inactive',\n                  validations: [\n                    {\n                      name: 'required',\n                      validator: Validators.required,\n                      message: 'Inactive Text is required',\n                    },\n                  ],\n                },\n              ),\n              createTextField('unit', 'Unit', ioType?.unit, {\n                name: 'unit',\n                validations: [\n                  {\n                    name: 'required',\n                    validator: Validators.required,\n                    message: 'Unit is required',\n                  },\n                ],\n              }),\n              createDropdownField(\n                'smoothingType',\n                'Smoothing Type',\n                this.smoothingOptions,\n                ioType?.smoothingType,\n                {\n                  name: 'smoothingType',\n                  validations: [\n                    {\n                      name: 'required',\n                      validator: Validators.required,\n                      message: 'Smoothing Type is required',\n                    },\n                  ],\n                  props: {\n                    appendTo: 'body',\n                  },\n                },\n              ),\n            ],\n            counter_input: [\n              createTextField('unit', 'Unit', ioType?.unit, {\n                name: 'unit',\n                validations: [\n                  {\n                    name: 'required',\n                    validator: Validators.required,\n                    message: 'Unit is required',\n                  },\n                ],\n              }),\n\n              createDropdownField(\n                'rateType',\n                'Rate Type',\n                this.rateTypeOptions,\n                ioType?.rate?.type,\n                {\n                  name: 'rateType',\n                  validations: [\n                    {\n                      name: 'required',\n                      validator: Validators.required,\n                      message: 'Rate Type is required',\n                    },\n                  ],\n                  props: {\n                    appendTo: 'body',\n                  },\n                },\n              ),\n              createNumberField(\n                'rateMultiplier',\n                'Rate Multiplier',\n                ioType?.rate?.multiplier ?? undefined,\n                {\n                  name: 'rateMultiplier',\n                  validations: [\n                    {\n                      name: 'required',\n                      validator: Validators.required,\n                      message: 'Rate Multiplier is required',\n                    },\n                  ],\n                },\n              ),\n              createTextField('rateUnit', 'Rate Unit', ioType?.rate?.unit, {\n                name: 'rateUnit',\n                validations: [\n                  {\n                    name: 'required',\n                    validator: Validators.required,\n                    message: 'Unit is required',\n                  },\n                ],\n              }),\n            ],\n            camera_input: [],\n            value_input: [\n              createTextAreaField('lookups', 'Lookups', '', {\n                name: 'lookups',\n                validations: [\n                  {\n                    name: 'required',\n                    validator: Validators.required,\n                    message: 'Lookups are required',\n                  },\n                ],\n                hint: 'Paste values in CSV format, i.e. \"key\",\"value\"',\n              }),\n            ],\n          },\n          props: {\n            appendTo: 'body',\n          },\n          disabled: !this.createMode(),\n        },\n      ),\n    ];\n  }\n\n  protected override submitChanges(\n    formData: Record<string, string | number>,\n  ): void {\n    const ioType = this.entity();\n    if (isNullOrUndefined(ioType)) return;\n\n    const transformedData = this.transformFormData(formData);\n    this.entitiesService\n      .updateIoType(ioType.id, transformedData)\n      .pipe(takeUntilDestroyed(this.destroyRef))\n      .subscribe({\n        next: (response) => {\n          this.isFormEditable.set(false);\n          this.isSubmitting.set(false);\n          this.broadcastService.broadcast('entity-updated', {\n            entityType: 'iotype',\n            operation: 'update',\n            entityId: ioType.id,\n            data: response,\n          });\n        },\n        error: () => {\n          this.isFormEditable.set(true);\n          this.isSubmitting.set(false);\n        },\n      });\n  }\n\n  private processTextProperty(\n    data: Record<string, PropertyValueType>,\n    property: string,\n    textKey: string,\n  ): void {\n    if (!isDefined(data[property])) return;\n\n    if (isNullOrUndefined(data['text'])) {\n      data['text'] = {};\n    }\n\n    if (typeof data[property] === 'string') {\n      (data['text'] as Record<string, string>)[textKey] = data[property].trim();\n    }\n    delete data[property];\n  }\n\n  private processRateProperty(\n    data: Record<string, PropertyValueType>,\n    property: string,\n    rateKey: string,\n    isNumeric = false,\n  ): void {\n    if (!isDefined(data[property])) return;\n\n    if (isNullOrUndefined(data['rate'])) {\n      data['rate'] = {};\n    }\n\n    const isCorrectType = isNumeric\n      ? typeof data[property] === 'number'\n      : typeof data[property] === 'string';\n\n    if (isCorrectType) {\n      const value = isNumeric\n        ? data[property]\n        : (data[property] as string).trim();\n      (data['rate'] as Record<string, PropertyValueType>)[rateKey] = value;\n    }\n    delete data[property];\n  }\n\n  protected override onFormValueChange(\n    formData: Record<string, PropertyValueType>,\n  ): void {\n    const transformedData = this.transformFormData(formData);\n\n    // Emit the transformed data for further processing\n    this.formValueChange.emit(transformedData);\n  }\n\n  protected override transformFormData(\n    formData: Record<string, PropertyValueType>,\n  ) {\n    const transformedData = { ...formData };\n\n    // Handle type property using ApiSchemaService for consistency\n    if (typeof transformedData['type'] === 'string') {\n      this.apiSchemaService.setEntityType<\n        Record<string, unknown>,\n        IoTypeListItem.TypeEnum\n      >(\n        transformedData,\n        'IoType',\n        transformedData['type'] as IoTypeListItem.TypeEnum,\n      );\n\n      // Remove the original 'type' property if it differs from the target property name\n      const typePropertyName =\n        this.apiSchemaService.getTypePropertyKey('iotype');\n      if (typePropertyName !== 'type' && 'type' in transformedData) {\n        delete transformedData['type'];\n      }\n    }\n\n    // Process text properties\n    this.processTextProperty(transformedData, 'active', 'active');\n    this.processTextProperty(transformedData, 'inactive', 'inactive');\n\n    // Process rate properties\n    this.processRateProperty(transformedData, 'rateType', 'type');\n    this.processRateProperty(\n      transformedData,\n      'rateMultiplier',\n      'multiplier',\n      true,\n    );\n    this.processRateProperty(transformedData, 'rateUnit', 'unit');\n    return transformedData;\n  }\n}\n","<div class=\"card pt-2\">\n  <div class=\"mb-4 p-2 flex justify-start items-center\">\n    <span\n      class=\"pi pi-arrow-right-arrow-left !text-[2.5rem]\"\n      [ngClass]=\"{ 'icon-primary': isFormEditable() }\"\n      [attr.aria-label]=\"'arrow-right-arrow-left icon'\"\n    ></span>\n\n    <div class=\"pl-6 flex-1\">\n      <div class=\"flex justify-between items-center\">\n        <h2 class=\"text-xl font-semibold m-0\">IO Type Details</h2>\n        @if (!isFormEditable() && !createMode()) {\n          <div class=\"icon-light\">\n            <span\n              class=\"pi pi-pen-to-square action hover !text-2xl\"\n              [attr.aria-label]=\"'Edit io type details'\"\n              (click)=\"onEdit()\"\n              (keydown.enter)=\"onEdit()\"\n            ></span>\n          </div>\n        }\n      </div>\n      <span\n        >The following information is required in order to configure your I/O\n        type.</span\n      >\n    </div>\n  </div>\n\n  @if (isFormEditable() || (createMode() && formFields.length)) {\n    <app-dynamic-form\n      [fields]=\"formFields\"\n      [actions]=\"actions\"\n      [hideActions]=\"createMode()\"\n      (formSubmit)=\"onSubmit($event)\"\n      (formValidityChange)=\"onFormValidityChange($event)\"\n      (formValueChange)=\"onFormValueChange($event)\"\n    >\n    </app-dynamic-form>\n  }\n\n  @if (!isFormEditable() && !createMode()) {\n    <app-grid\n      [data]=\"ioTypeDetails()\"\n      [columns]=\"columns\"\n      [showGridLines]=\"false\"\n      [hideHeader]=\"true\"\n      tableStyleClass=\"info-display !w-auto\"\n    ></app-grid>\n  }\n</div>\n","import { Injectable } from '@angular/core';\nimport { AdminDetailSection } from '../models';\n\nimport { IoTypeResponse } from '../../../api';\nimport { IoTypeDetailsSectionComponent } from '../components/io-types/io-type-details-section/io-type-details-section.component';\nimport { FeedSectionComponent } from '../components/shared/feed-section/feed-section.component';\n\n@Injectable({ providedIn: 'root' })\nexport class IoTypeSectionConfigFactory {\n  /**\n   * Create sections for ioType information\n   * @param ioType The ioType object to display in the section\n   * @returns An array of AdminDetailSection objects representing the ioType information sections\n   */\n  createIoTypeInformationSections(\n    ioType: IoTypeResponse | null,\n  ): AdminDetailSection[] {\n    return [\n      {\n        id: 'io-type-details',\n        title: 'IO Type Details',\n        component: IoTypeDetailsSectionComponent,\n        componentInputs: { entity: ioType },\n        category: 'information',\n        order: 10,\n      },\n    ];\n  }\n\n  /**\n   * Create sections for io type changes\n   * @param ioType The io type object to display in the section\n   * @returns An array of AdminDetailSection objects representing the io type changes sections\n   */\n  createChangesSection(ioType: IoTypeResponse | null): AdminDetailSection[] {\n    return [\n      {\n        id: 'io-type-changes',\n        title: 'Changes',\n        component: FeedSectionComponent,\n        componentInputs: {\n          entity: ioType,\n        },\n        category: 'feed',\n        order: 10,\n      },\n    ];\n  }\n\n  /**\n   * Create all ioType sections in one call\n   * @param ioType The ioType object to display in the sections\n   * @returns An array of AdminDetailSection objects representing all ioType sections\n   */\n  createAllIoTypeSections(ioType: IoTypeResponse | null): AdminDetailSection[] {\n    return [\n      ...this.createIoTypeInformationSections(ioType),\n      ...this.createChangesSection(ioType),\n    ];\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport {\n  Component,\n  computed,\n  effect,\n  inject,\n  input,\n  signal,\n} from '@angular/core';\nimport { takeUntilDestroyed } from '@angular/core/rxjs-interop';\nimport { Validators } from '@angular/forms';\n\nimport { ButtonModule } from 'primeng/button';\nimport { v4 as uuidv4 } from 'uuid';\n\nimport {\n  OverspeedProfileListItem,\n  OverspeedProfileCreateRequest,\n  EntitiesService,\n  OverspeedBandItem,\n} from '../../../../../api';\nimport { DynamicFormComponent } from '../../../../../shared/components/forms/dynamic-form/dynamic-form.component';\nimport { GridComponent } from '../../../../../shared/components/grid/grid.component';\nimport {\n  createModalListField,\n  createNumberField,\n  createTextField,\n  FormFieldConfig,\n  ListFieldModalConfig,\n  MeasurementUnitType,\n} from '../../../../../shared/models';\nimport {\n  isDefined,\n  isNullOrUndefined,\n  isNumber,\n} from '../../../../../shared/utils';\nimport { EntitySectionBaseComponent } from '../../base';\nimport { ModalListFormComponent } from '../../../../../shared/components/forms/modal-list-form/modal-list-form.component';\nimport { MessageModule } from 'primeng/message';\nimport { MeasurementUnitsService } from '../../../../../shared/services/measurement-units/measurement-units.service';\n\n@Component({\n  selector: 'app-overspeed-profile-details-section',\n  imports: [\n    CommonModule,\n    ButtonModule,\n    GridComponent,\n    DynamicFormComponent,\n    MessageModule,\n  ],\n  templateUrl: './overspeed-profile-details-section.component.html',\n  styleUrl: './overspeed-profile-details-section.component.scss',\n})\nexport class OverspeedProfileDetailsSectionComponent extends EntitySectionBaseComponent<\n  OverspeedProfileListItem | OverspeedProfileCreateRequest\n> {\n  readonly ownerId = input<string | null>(null);\n  private readonly entitiesService = inject(EntitiesService);\n  private readonly measurementUnitsService = inject(MeasurementUnitsService);\n\n  readonly overspeedProfileDetails = computed(() => {\n    const overspeedProfileDetails = this.entity();\n    if (!isDefined(overspeedProfileDetails)) return [];\n\n    return [\n      { key: 'Name', value: overspeedProfileDetails.name },\n      {\n        key: 'Bands',\n        value: overspeedProfileDetails.items\n          ?.map((item) => item.name)\n          .join(', '),\n      },\n    ];\n  });\n  overspeedProfileBandsModalConfig:\n    | ListFieldModalConfig<OverspeedBandItem>\n    | undefined;\n  protected readonly warning = signal<string | null>(null);\n\n  constructor() {\n    super();\n\n    // Setup initial columns\n    this.columns = [\n      { field: 'key', header: '', transform: 'uppercase' },\n      { field: 'value', header: '' },\n    ];\n\n    effect(() => {\n      const overspeedProfile = this.entity();\n      if (\n        isNullOrUndefined(overspeedProfile?.items) ||\n        overspeedProfile.items.length < 1\n      ) {\n        this.warning.set(\n          'At least one overspeed band is required for the overspeed profile to be useful.',\n        );\n      } else {\n        this.warning.set(null);\n      }\n    });\n  }\n\n  protected override updateFormFields(): void {\n    const overspeedProfile = this.entity();\n\n    let lastProcessedRawItemsRef: OverspeedBandItem[] | null = null;\n    let itemToMaxMapCache: Map<OverspeedBandItem, number | undefined> | null =\n      null;\n\n    this.overspeedProfileBandsModalConfig = {\n      modalComponent: ModalListFormComponent,\n      modalTitle: 'Overspeed Band',\n      defaultItemProvider: () => ({\n        id: uuidv4(),\n        name: '',\n        min: undefined,\n        offset: undefined,\n      }),\n      listItemFormatter: (item: OverspeedBandItem) => {\n        const currentItemsControl = this.dynamicForm?.form?.get('items');\n        const currentRawItemsFromForm: OverspeedBandItem[] =\n          currentItemsControl?.value ?? [];\n\n        if (\n          currentRawItemsFromForm !== lastProcessedRawItemsRef ||\n          !itemToMaxMapCache\n        ) {\n          const sortedRawItems = [...currentRawItemsFromForm].sort(\n            (a, b) => (a.min ?? 0) - (b.min ?? 0),\n          );\n\n          itemToMaxMapCache = new Map<OverspeedBandItem, number | undefined>();\n\n          for (let i = 0; i < sortedRawItems.length; i++) {\n            const currentItemInSortedList = sortedRawItems[i];\n            let maxForCurrentItem: number | undefined;\n            if (i < sortedRawItems.length - 1) {\n              const nextItemInSortedList = sortedRawItems[i + 1];\n              if (isNumber(nextItemInSortedList.min)) {\n                maxForCurrentItem = nextItemInSortedList.min;\n              }\n            }\n            itemToMaxMapCache.set(currentItemInSortedList, maxForCurrentItem);\n          }\n          lastProcessedRawItemsRef = currentRawItemsFromForm;\n        }\n\n        const max = itemToMaxMapCache.get(item);\n        return this.stateItemToListItem(item, max);\n      },\n      modalFields: (\n        _item: OverspeedBandItem | undefined,\n      ): FormFieldConfig[] => {\n        // For 'min' field, display value is internal_value - 100\n        // If _item.min is 150 (internal), modal shows 50.\n        // If new item, _item is undefined, defaultItemProvider gives min: 100 (internal), modal shows 0.\n        const initialMinForModal = isDefined(_item?.min) ? _item.min - 100 : 0;\n\n        return [\n          createTextField('id', 'ID', _item?.id, {\n            name: 'id',\n            hidden: true,\n          }),\n          createTextField('name', 'Name', _item?.name, {\n            name: 'name',\n            validations: [\n              {\n                name: 'required',\n                validator: Validators.required,\n                message: 'Name is required',\n              },\n            ],\n          }),\n          createNumberField('min', 'Min', initialMinForModal, {\n            name: 'min',\n            validations: [\n              {\n                name: 'required',\n                validator: Validators.required,\n                message: 'Min is required',\n              },\n              {\n                name: 'min',\n                validator: Validators.min(0),\n                message: 'Min must be 0 or greater',\n              },\n            ],\n            layout: 'horizontal',\n            labelWidth: '1/3',\n            props: {\n              suffix: '%',\n              min: 0,\n            },\n          }),\n          createNumberField(\n            'offset',\n            'Offset',\n            this.measurementUnitsService.fromBackend(\n              MeasurementUnitType.SPEED,\n              _item?.offset ?? 0,\n              2,\n            ),\n            {\n              name: 'offset',\n              validations: [\n                {\n                  name: 'required',\n                  validator: Validators.required,\n                  message: 'Offset is required',\n                },\n                {\n                  name: 'min',\n                  validator: Validators.min(-50),\n                  message: 'Offset must be -50 or greater',\n                },\n                {\n                  name: 'max',\n                  validator: Validators.max(50),\n                  message: 'Offset must be 50 or less',\n                },\n              ],\n              props: {\n                suffix: this.measurementUnitsService.unit(\n                  MeasurementUnitType.SPEED,\n                ),\n              },\n            },\n          ),\n        ];\n      },\n      subHeader: '',\n    };\n    this.formFields = [\n      createTextField('name', 'Name', overspeedProfile?.name, {\n        name: 'name',\n        validations: [\n          {\n            name: 'required',\n            validator: Validators.required,\n            message: 'Name is required',\n          },\n        ],\n      }),\n    ];\n\n    if (!this.createMode()) {\n      this.formFields.push(\n        createModalListField<OverspeedBandItem>(\n          'items',\n          'Bands',\n          overspeedProfile?.items ?? [],\n          {\n            layout: 'horizontal',\n            labelWidth: '1/3',\n            name: 'items',\n            props: {\n              modalConfig: this\n                .overspeedProfileBandsModalConfig as unknown as ListFieldModalConfig<unknown>,\n            },\n          },\n        ),\n      );\n    }\n  }\n\n  protected override submitChanges(\n    formData: Record<string, string | number>,\n  ): void {\n    const overspeedProfile = this.entity();\n    if (isNullOrUndefined(overspeedProfile)) return;\n    this.entitiesService\n      .updateOverspeedProfile(overspeedProfile.id, formData)\n      .pipe(takeUntilDestroyed(this.destroyRef))\n      .subscribe({\n        next: (response) => {\n          this.isFormEditable.set(false);\n          this.broadcastService.broadcast('entity-updated', {\n            entityType: 'overspeed-profile',\n            operation: 'update',\n            entityId: overspeedProfile.id,\n            data: response,\n          });\n        },\n        error: () => {\n          this.isFormEditable.set(true);\n        },\n      });\n  }\n\n  stateItemToListItem(item: OverspeedBandItem, max?: number) {\n    return {\n      id: item.id,\n      title: item.name,\n      display: isDefined(max)\n        ? `Overspeeding events ${item.min} - ${max} over the speed limit`\n        : `Overspeeding events ${item.min} plus over the speed limit`,\n      icon: 'pi pi-gauge',\n    };\n  }\n\n  stateItemsToListItems(items: OverspeedBandItem[]) {\n    return (items ?? [])\n      .sort((a, b) => {\n        return a.min - b.min;\n      })\n      .map((x, idx, arr) => {\n        const nextItem = idx < arr.length - 1 ? arr[idx + 1] : null;\n        const max = nextItem?.min;\n        return this.stateItemToListItem(x, max);\n      });\n  }\n\n  protected override onFormValueChange(\n    formData: Record<string, string | number | object>,\n  ): void {\n    const items = formData['items'] as OverspeedBandItem[];\n    if (isDefined(items)) {\n      const updatedItems = items.map((item) => ({\n        ...item,\n        min: isDefined(item.min) ? item.min + 100 : undefined,\n        offset: this.measurementUnitsService.toBackend(\n          MeasurementUnitType.SPEED,\n          item.offset ?? 0,\n        ),\n      }));\n      formData['items'] = updatedItems;\n    }\n\n    this.formValueChange.emit(formData);\n  }\n}\n","<div class=\"card pt-2\">\n  <div class=\"mb-4 p-2 flex justify-start items-center\">\n    <span\n      class=\"pi pi-gauge !text-[2.5rem]\"\n      [ngClass]=\"{ 'icon-primary': isFormEditable() }\"\n      [attr.aria-label]=\"'gauge icon'\"\n    ></span>\n\n    <div class=\"pl-6 flex-1\">\n      <div class=\"flex justify-between items-center\">\n        <h2 class=\"text-xl font-semibold m-0\">Overspeed Profile Details</h2>\n        @if (!isFormEditable() && !createMode()) {\n          <div class=\"icon-light\">\n            <span\n              class=\"pi pi-pen-to-square action hover !text-2xl\"\n              [attr.aria-label]=\"'Edit overspeed profile details'\"\n              (click)=\"onEdit()\"\n              (keydown.enter)=\"onEdit()\"\n            ></span>\n          </div>\n        }\n      </div>\n      <span\n        >Configure the bands which will be used to grade the severity of\n        overspeeding events.</span\n      >\n    </div>\n  </div>\n\n  @if (isFormEditable() || (createMode() && formFields.length)) {\n    <app-dynamic-form\n      [fields]=\"formFields\"\n      [actions]=\"actions\"\n      [hideActions]=\"createMode()\"\n      (formSubmit)=\"onSubmit($event)\"\n      (formValidityChange)=\"onFormValidityChange($event)\"\n      (formValueChange)=\"onFormValueChange($event)\"\n    >\n    </app-dynamic-form>\n  }\n\n  @if (!isFormEditable() && !createMode()) {\n    @if (warning()) {\n      <div class=\"mb-4\">\n        <p-message severity=\"warn\">\n          <span class=\"pi pi-exclamation-triangle mr-2\"></span>\n          {{ warning() }}</p-message\n        >\n      </div>\n    }\n    <app-grid\n      [data]=\"overspeedProfileDetails()\"\n      [columns]=\"columns\"\n      [showGridLines]=\"false\"\n      [hideHeader]=\"true\"\n      tableStyleClass=\"info-display !w-auto\"\n    ></app-grid>\n  }\n</div>\n","import { Injectable } from '@angular/core';\nimport { AdminDetailSection } from '../models';\n\nimport { OverspeedProfileResponse } from '../../../api';\nimport { OverspeedProfileDetailsSectionComponent } from '../components/overspeed-profiles/overspeed-profile-details-section/overspeed-profile-details-section.component';\nimport { FeedSectionComponent } from '../components/shared/feed-section/feed-section.component';\n\n@Injectable({ providedIn: 'root' })\nexport class OverspeedProfileSectionConfigFactory {\n  /**\n   * Create sections for overspeedProfile information\n   * @param overspeedProfile The overspeedProfile object to display in the section\n   * @returns An array of AdminDetailSection objects representing the overspeedProfile information sections\n   */\n  createOverspeedProfileInformationSections(\n    overspeedProfile: OverspeedProfileResponse | null,\n  ): AdminDetailSection[] {\n    return [\n      {\n        id: 'overspeed-profile-details',\n        title: 'Overspeed Profile Details',\n        component: OverspeedProfileDetailsSectionComponent,\n        componentInputs: { entity: overspeedProfile },\n        category: 'information',\n        order: 10,\n      },\n    ];\n  }\n\n  /**\n   * Create sections for overspeedProfile changes\n   * @param overspeedProfile The overspeedProfile object to display in the section\n   * @returns An array of AdminDetailSection objects representing the overspeedProfile changes sections\n   */\n  createChangesSection(\n    overspeedProfile: OverspeedProfileResponse | null,\n  ): AdminDetailSection[] {\n    return [\n      {\n        id: 'overspeed-profile-changes',\n        title: 'Changes',\n        component: FeedSectionComponent,\n        componentInputs: {\n          entity: overspeedProfile,\n        },\n        category: 'feed',\n        order: 10,\n      },\n    ];\n  }\n\n  /**\n   * Create all overspeedProfile sections in one call\n   * @param overspeedProfile The overspeedProfile object to display in the sections\n   * @returns An array of AdminDetailSection objects representing all overspeedProfile sections\n   */\n  createAllOverspeedProfileSections(\n    overspeedProfile: OverspeedProfileResponse | null,\n  ): AdminDetailSection[] {\n    return [\n      ...this.createOverspeedProfileInformationSections(overspeedProfile),\n      ...this.createChangesSection(overspeedProfile),\n    ];\n  }\n}\n","import { inject, Injectable } from '@angular/core';\nimport { LocalStorageService } from './local-storage.service';\n\n/**\n * Service to handle alert icon storage in localStorage\n * This is a temporary solution until the backend API supports iconName field\n */\n@Injectable({\n  providedIn: 'root',\n})\nexport class AlertIconStorageService {\n  private readonly STORAGE_KEY = 'alert-icons';\n  private readonly localStorageService = inject(LocalStorageService);\n\n  /**\n   * Get the icon name for a specific alert\n   * @param alertId The alert ID\n   * @returns The icon name or null if not found\n   */\n  getAlertIcon(alertId: string): string | null {\n    try {\n      const icons = this.getAllAlertIcons();\n      return icons[alertId] ?? null;\n    } catch (error) {\n      console.warn('Failed to get alert icon from storage:', error);\n      return null;\n    }\n  }\n\n  /**\n   * Set the icon name for a specific alert\n   * @param alertId The alert ID\n   * @param iconName The icon name to store\n   */\n  setAlertIcon(alertId: string, iconName: string | null): void {\n    try {\n      const icons = this.getAllAlertIcons();\n\n      if (iconName === null || iconName === undefined || iconName === '') {\n        delete icons[alertId];\n      } else {\n        icons[alertId] = iconName;\n      }\n\n      this.localStorageService.setItem(this.STORAGE_KEY, icons);\n    } catch (error) {\n      console.warn('Failed to save alert icon to storage:', error);\n    }\n  }\n\n  /**\n   * Get all alert icons from storage\n   * @returns A record of alertId -> iconName mappings\n   */\n  private getAllAlertIcons(): Record<string, string> {\n    try {\n      return this.localStorageService.getItem(this.STORAGE_KEY) ?? {};\n    } catch (error) {\n      console.warn('Failed to parse alert icons from storage:', error);\n      return {};\n    }\n  }\n\n  /**\n   * Remove icon for a specific alert\n   * @param alertId The alert ID\n   */\n  removeAlertIcon(alertId: string): void {\n    this.setAlertIcon(alertId, null);\n  }\n\n  /**\n   * Clear all stored alert icons\n   */\n  clearAllIcons(): void {\n    try {\n      this.localStorageService.removeItem(this.STORAGE_KEY);\n    } catch (error) {\n      console.warn('Failed to clear alert icons from storage:', error);\n    }\n  }\n\n  /**\n   * Get the default icon for alerts\n   * @returns The default icon name\n   */\n  getDefaultIcon(): string {\n    return 'warning';\n  }\n\n  /**\n   * Get the icon for an alert with fallback to default\n   * @param alertId The alert ID\n   * @returns The icon name or default icon\n   */\n  getAlertIconWithFallback(alertId: string): string {\n    return this.getAlertIcon(alertId) ?? this.getDefaultIcon();\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport {\n  ChangeDetectorRef,\n  Component,\n  computed,\n  effect,\n  inject,\n  input,\n  OnInit,\n  signal,\n  untracked,\n} from '@angular/core';\nimport { FormsModule, Validators } from '@angular/forms';\n\nimport { EntitySectionBaseComponent } from '../../../components/base/entity-section-base';\nimport {\n  AccountsService,\n  AlertCreateRequest,\n  AlertListItem,\n  AlertNotify,\n  AlertResponse,\n  EntitiesService,\n} from '../../../../../api';\nimport { isDefined, isNullOrUndefined } from '../../../../../shared/utils';\nimport {\n  ActorNodeData,\n  createDropdownField,\n  createEventFilterField,\n  createIconSelectorField,\n  createTextField,\n  createTreeSplitButtonListField,\n  EventNodeData,\n  FilterCondition,\n  FormFieldConfig,\n  TargetNodeData,\n  TreeSelectNode,\n} from '../../../../../shared/models';\nimport { GridComponent } from '../../../../../shared/components/grid/grid.component';\nimport { DynamicFormComponent } from '../../../../../shared/components/forms/dynamic-form/dynamic-form.component';\nimport { MultiSelectModule } from 'primeng/multiselect';\nimport { combineLatest, Observable } from 'rxjs';\nimport { TreeNode } from 'primeng/api';\nimport { AuthDataService } from '../../../../../core/services/auth-data.service';\nimport { AlertIconStorageService } from '../../../../../shared/services/alert-icon-storage.service';\nimport { EntityOperationRegistryService } from '../../../services/entity/entity-operation-registry.service';\nimport { EventFilterService } from '../../../../../shared/services/event-filter.service';\n\n@Component({\n  selector: 'app-alert-details-section',\n  imports: [\n    CommonModule,\n    GridComponent,\n    DynamicFormComponent,\n    MultiSelectModule,\n    FormsModule,\n  ],\n  templateUrl: './alert-details-section.component.html',\n  styleUrl: './alert-details-section.component.scss',\n})\nexport class AlertDetailsSectionComponent\n  extends EntitySectionBaseComponent<AlertListItem | AlertCreateRequest>\n  implements OnInit\n{\n  readonly ownerId = input<string | null>(null);\n  private readonly entitiesService = inject(EntitiesService);\n  private readonly accountsService = inject(AccountsService);\n  private readonly authDataService = inject(AuthDataService);\n  private readonly alertIconStorageService = inject(AlertIconStorageService);\n  private readonly operationRegistry = inject(EntityOperationRegistryService);\n  private readonly eventFilterService = inject(EventFilterService);\n\n  private readonly cdr = inject(ChangeDetectorRef);\n  protected readonly selectOptionsLoaded = signal<boolean>(false);\n\n  readonly alertDetails = computed(() => {\n    const alertDetails = this.entity();\n    if (!isDefined(alertDetails)) return [];\n\n    const filter = isDefined(alertDetails.filter)\n      ? this.eventFilterService.getEventFilterText(alertDetails.filter)\n      : 'None';\n\n    return [\n      { key: 'Name', value: alertDetails.name },\n      {\n        key: 'Icon',\n        value:\n          alertDetails['iconName'] ??\n          this.alertIconStorageService.getDefaultIcon(),\n      },\n      { key: 'Cost Centre', value: alertDetails.costCentre?.name ?? 'None' },\n      {\n        key: 'Priority',\n        value: alertDetails.priority\n          ? alertDetails.priority.charAt(0).toUpperCase() +\n            alertDetails.priority.slice(1)\n          : 'None',\n      },\n      { key: 'Event Filter', value: filter ?? 'None' },\n      {\n        key: 'Notify',\n        value:\n          isDefined(alertDetails.notify) && alertDetails.notify.length > 0\n            ? alertDetails.notify\n                .map((element: AlertNotify) => element.name)\n                .join(', ')\n            : 'None',\n      },\n    ];\n  });\n\n  readonly alertIcon = computed(() => {\n    const alert = this.entity();\n    return alert?.['iconName'] ?? this.alertIconStorageService.getDefaultIcon();\n  });\n  selectOptions: Record<string, { label: string; value: string }[]> = {};\n  notifyTree = signal<TreeNode[]>([]);\n\n  constructor() {\n    super();\n\n    this.columns = [\n      { field: 'key', header: '', transform: 'uppercase' },\n      { field: 'value', header: '' },\n    ];\n\n    // React to entity changes\n    effect(() => {\n      const entity = this.entity();\n      if (entity && !this.createMode()) {\n        untracked(() => {\n          this.updateFormFields();\n          this.cdr.detectChanges();\n        });\n      }\n    });\n  }\n\n  ngOnInit() {\n    this.loadSelectOptions();\n  }\n\n  private loadSelectOptions(): void {\n    const asset = this.entity();\n    const ownerIdValue = this.ownerId();\n\n    const effectiveOwnerId = asset?.owner?.id ?? ownerIdValue;\n\n    if (isNullOrUndefined(effectiveOwnerId)) {\n      this.selectOptions = {};\n      this.selectOptionsLoaded.set(true);\n      this.updateFormFields();\n      return;\n    }\n\n    combineLatest([\n      this.accountsService.listUserRoles(effectiveOwnerId, 0, 100),\n      this.accountsService.listUsers(\n        effectiveOwnerId,\n        0,\n        100,\n        undefined,\n        'state=active',\n      ),\n      this.entitiesService.listCostCentres(effectiveOwnerId),\n    ]).subscribe({\n      next: ([userRoles, users, costCentres]) => {\n        this.selectOptions = {\n          userRoles: userRoles.items\n            .map((item) => ({ label: item.name ?? '', value: item.id }))\n            .sort((a, b) => a.label.localeCompare(b.label)),\n          users: users.items\n            .map((item) => ({ label: item.name ?? '', value: item.id }))\n            .sort((a, b) => a.label.localeCompare(b.label)),\n          costCentres: costCentres.items\n            .map((item) => ({ label: item.name ?? '', value: item.id }))\n            .sort((a, b) => a.label.localeCompare(b.label)),\n        };\n        this.selectOptionsLoaded.set(true);\n        const userProfile = this.authDataService.getUserProfile();\n        this.notifyTree.set([\n          {\n            key: `user.${userProfile?.id}`,\n            label: 'Me',\n            selectable: true,\n            data: { id: userProfile?.id, type: 'user', name: 'Me' },\n          },\n          {\n            key: 'roles',\n            label: 'User with specific roles',\n            selectable: false,\n            children: userRoles.items.map((role) => ({\n              key: role.id,\n              label: role.name ?? '',\n              selectable: true,\n              data: { id: role.id, type: 'role', name: role.name ?? '' },\n            })),\n          },\n          {\n            key: 'users',\n            label: 'Specific Users',\n            selectable: false,\n            children: users.items.map((user) => ({\n              key: user.id,\n              label: user.name ?? '',\n              selectable: true,\n              data: { id: user.id, type: 'user', name: user.name ?? '' },\n            })),\n          },\n        ]);\n        this.updateFormFields();\n      },\n      error: () => {\n        this.selectOptionsLoaded.set(true);\n      },\n    });\n  }\n\n  protected override updateFormFields(): void {\n    const alert = this.entity();\n\n    const priorityOptions = [\n      { label: 'Low', value: 'low' },\n      { label: 'Medium', value: 'medium' },\n      { label: 'High', value: 'high' },\n    ];\n    this.formFields = [\n      createTextField('name', 'Name', alert?.name, {\n        name: 'name',\n        validations: [\n          {\n            name: 'required',\n            validator: Validators.required,\n            message: 'Name is required',\n          },\n        ],\n      }),\n      ...(this.createMode() === false\n        ? [\n            createIconSelectorField(\n              'iconName',\n              'Icon',\n              alert?.['iconName'] ??\n                this.alertIconStorageService.getDefaultIcon(),\n              {\n                name: 'iconName',\n                hint: 'Select an icon to represent this alert',\n              },\n            ),\n          ]\n        : []),\n      createDropdownField(\n        'costCentre',\n        'Cost Centre',\n        this.selectOptions['costCentres'],\n        alert?.costCentre?.id,\n        {\n          validations: [\n            {\n              name: 'required',\n              validator: Validators.required,\n              message: 'Cost centre is required',\n            },\n          ],\n          props: {\n            appendTo: 'body',\n          },\n        },\n      ),\n\n      createDropdownField(\n        'priority',\n        'Priority',\n        priorityOptions,\n        alert?.priority,\n        {\n          validations: [\n            {\n              name: 'required',\n              validator: Validators.required,\n              message: 'Priority is required',\n            },\n          ],\n          props: {\n            appendTo: 'body',\n          },\n        },\n      ),\n      createEventFilterField(\n        'filter',\n        'Event Filter',\n        alert?.filter,\n        ['costcentres', 'groups', 'types'],\n        {\n          name: 'filter',\n          required: true,\n          validations: [\n            {\n              name: 'required',\n              validator: Validators.required,\n              message: 'Event filter is required',\n            },\n          ],\n        },\n      ),\n      createTreeSplitButtonListField<AlertNotify>(\n        'notify',\n        'Notify',\n        alert?.notify,\n        this.notifyTree(),\n        {\n          name: 'notify',\n          props: {\n            appendTo: 'body',\n          },\n          transformTreeNodeToItem: (node: TreeNode) =>\n            this.transformTreeNodeToItem(node),\n          listItemFormatter: (item: AlertNotify) => {\n            return {\n              id: `${item.type}-${item.id}`,\n              display: item.name || item.id,\n              title: item.type\n                ? item.type.charAt(0).toUpperCase() + item.type.slice(1)\n                : 'Item',\n              icon: item.type === 'user' ? 'pi-user' : 'pi-users',\n            };\n          },\n          addButtonLabel: 'Add',\n        },\n      ) as FormFieldConfig<unknown>,\n    ];\n  }\n\n  override getUpdateMethod(): (\n    id: string,\n    data: Partial<AlertResponse | AlertCreateRequest>,\n  ) => Observable<AlertResponse> {\n    return (\n      this.operationRegistry.getOperation<\n        AlertResponse | AlertCreateRequest,\n        AlertCreateRequest,\n        AlertResponse,\n        'update'\n      >('alert', 'update') ??\n      ((id, data) => this.entitiesService.updateAlert(id, data))\n    );\n  }\n\n  protected override onFormValueChange(\n    formData: Record<string, string | number | object | null | undefined>,\n  ): void {\n    const transformedData = this.transformFormData(formData);\n\n    this.formValueChange.emit(transformedData);\n  }\n\n  protected override transformFormData(\n    formData: Record<string, string | number | object | null | undefined>,\n  ): Record<string, string | number | object | null | undefined> {\n    const transformedData = { ...formData };\n    // Transform costCentre ID to IdName object\n    if (isDefined(transformedData['costCentre'])) {\n      const costCentreOption = this.selectOptions?.['costCentres']?.find(\n        (option) => option.value === transformedData['costCentre'],\n      );\n\n      if (costCentreOption) {\n        transformedData['costCentre'] = {\n          id: costCentreOption.value,\n          name: costCentreOption.label,\n        };\n      }\n    }\n\n    if (isDefined(transformedData['filter'])) {\n      const filter = transformedData['filter'] as {\n        actor: TreeSelectNode<ActorNodeData> | undefined;\n        action: TreeSelectNode<EventNodeData> | undefined;\n        target: TreeSelectNode<TargetNodeData> | undefined;\n        conditions: FilterCondition[];\n      };\n      transformedData['filter'] = {\n        ...filter,\n        actor: filter?.['actor']?.['data'],\n        action: filter?.['action']?.['data'],\n        target: filter?.['target']?.['data'],\n        conditions: filter?.['conditions']?.map((condition) => {\n          const { id: _, ...rest } = condition;\n          return rest;\n        }),\n      };\n    }\n    return transformedData;\n  }\n\n  notifyToTreeItem(notify: AlertNotify): TreeNode {\n    const notifyType = notify.type;\n    const notifyId = notify.id;\n\n    if (notifyType === 'user') {\n      const user = this.authDataService.getUserProfile();\n      return {\n        key: `user.${user?.id}`,\n        label: user?.name ?? '',\n      };\n    }\n\n    return {\n      key: `notify.${notifyId}`,\n      label: notify?.name ?? '',\n    };\n  }\n\n  transformTreeNodeToItem(node: TreeNode): AlertNotify {\n    if (\n      isDefined(node.data) &&\n      typeof node.data === 'object' &&\n      'id' in node.data &&\n      'type' in node.data\n    ) {\n      // If node.data is already an AlertNotify object (recommended)\n      return node.data as AlertNotify;\n    }\n\n    // Fallback/example logic if node.data is not directly the AlertNotify object.\n    // You'll need to adapt this based on your TreeNode structure in notifyTree().\n    // For instance, if 'Me' is type 'user' and its key is the user ID:\n    if (node.label === 'Me') {\n      // Example for 'Me'\n      const userProfile = this.authDataService.getUserProfile(); // Assuming you have authDataService\n      return { id: userProfile?.id ?? 'me', type: 'user', name: 'Me' };\n    }\n\n    // Example for roles or users based on parent key or node key structure\n    let type: 'user' | 'role' = 'user'; // Default\n    const id = node.key ?? 'unknown_id';\n    const name = node.label ?? 'Unknown Name';\n\n    if (\n      node.parent?.key === 'roles' ||\n      (node.key?.startsWith('role_') ?? false)\n    ) {\n      type = 'role';\n    }\n    // No need to assign 'user' again as it's already the default\n    // This is a simplified example; ensure your logic correctly maps TreeNodes to AlertNotify.\n    return { id, type, name };\n  }\n}\n","<div class=\"card pt-2\">\n  <div class=\"mb-4 p-2 flex justify-start items-center\">\n    <!-- Dynamic icon based on alert configuration -->\n    @if (alertIcon(); as icon) {\n      <span\n        class=\"material-icons-outlined !text-[2.5rem] text-primary\"\n        [ngClass]=\"{ 'text-primary': isFormEditable() }\"\n        [attr.aria-label]=\"'Alert icon: ' + icon\"\n      >\n        {{ icon }}\n      </span>\n    } @else {\n      <span\n        class=\"pi pi-exclamation-triangle !text-[2.5rem]\"\n        [ngClass]=\"{ 'text-primary': isFormEditable() }\"\n        [attr.aria-label]=\"'Alert notification icon'\"\n      ></span>\n    }\n\n    <div class=\"pl-6 flex-1\">\n      <div class=\"flex justify-between items-center\">\n        <h2 class=\"text-xl font-semibold m-0\">Alert Details</h2>\n        @if (!isFormEditable() && !createMode()) {\n          <div class=\"icon-light\">\n            <span\n              class=\"pi pi-pen-to-square action hover !text-2xl\"\n              [attr.aria-label]=\"'Edit alert details'\"\n              (click)=\"onEdit()\"\n              (keydown.enter)=\"onEdit()\"\n            ></span>\n          </div>\n        }\n      </div>\n      <span>Configure various details about your Alert.</span>\n    </div>\n  </div>\n\n  @if (isFormEditable() || (createMode() && formFields.length)) {\n    <app-dynamic-form\n      [fields]=\"formFields\"\n      [actions]=\"actions\"\n      [hideActions]=\"createMode()\"\n      (formSubmit)=\"onSubmit($event)\"\n      (formValidityChange)=\"onFormValidityChange($event)\"\n      (formValueChange)=\"onFormValueChange($event)\"\n    >\n    </app-dynamic-form>\n  }\n\n  @if (!isFormEditable() && !createMode()) {\n    <app-grid\n      [data]=\"alertDetails()\"\n      [columns]=\"columns\"\n      [showGridLines]=\"false\"\n      [hideHeader]=\"true\"\n      tableStyleClass=\"info-display !w-auto\"\n    ></app-grid>\n  }\n</div>\n","import { Injectable } from '@angular/core';\n\nimport { AlertResponse } from '../../../api';\nimport { AdminDetailSection } from '../models';\nimport { FeedSectionComponent } from '../components/shared/feed-section/feed-section.component';\nimport { AlertDetailsSectionComponent } from '../components/alerts/alert-details-section/alert-details-section.component';\n\n@Injectable({ providedIn: 'root' })\nexport class AlertSectionConfigFactory {\n  /**\n   * Create sections for alert information\n   * @param alert The alert object to display in the section\n   * @returns An array of AdminDetailSection objects representing the alert information sections\n   */\n  createAlertInformationSection(\n    alert: AlertResponse | null,\n  ): AdminDetailSection[] {\n    return [\n      {\n        id: 'alert-details',\n        title: 'Alert Config Details',\n        component: AlertDetailsSectionComponent,\n        componentInputs: { entity: alert },\n        category: 'information',\n        order: 10,\n      },\n    ];\n  }\n\n  /**\n   * Create sections for alert changes\n   * @param alert The alert object to display in the section\n   * @returns An array of AdminDetailSection objects representing the alert changes sections\n   */\n  createChangesSection(alert: AlertResponse | null): AdminDetailSection[] {\n    return [\n      {\n        id: 'alert-changes',\n        title: 'Changes',\n        component: FeedSectionComponent,\n        componentInputs: {\n          entity: alert,\n        },\n        category: 'feed',\n        order: 10,\n      },\n    ];\n  }\n\n  /**\n   * Create all alert sections in one call\n   * @param alert The alert object to display in the sections\n   * @returns An array of AdminDetailSection objects representing all alert sections\n   */\n  createAllAlertSections(alert: AlertResponse | null): AdminDetailSection[] {\n    return [\n      ...this.createAlertInformationSection(alert),\n      ...this.createChangesSection(alert),\n    ];\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { Component, computed, inject } from '@angular/core';\nimport { takeUntilDestroyed } from '@angular/core/rxjs-interop';\nimport { Validators } from '@angular/forms';\n\nimport { ButtonModule } from 'primeng/button';\n\nimport {\n  UserRoleListItem,\n  UserRoleCreateRequest,\n  AccountsService,\n} from '../../../../../api';\nimport { DynamicFormComponent } from '../../../../../shared/components/forms/dynamic-form/dynamic-form.component';\nimport { GridComponent } from '../../../../../shared/components/grid/grid.component';\nimport { createTextField } from '../../../../../shared/models';\nimport { isDefined, isNullOrUndefined } from '../../../../../shared/utils';\nimport { EntitySectionBaseComponent } from '../../base';\nimport { MessageModule } from 'primeng/message';\nimport { FontAwesomeModule } from '@fortawesome/angular-fontawesome';\nimport { faUserLock } from '@fortawesome/free-solid-svg-icons';\n\n@Component({\n  selector: 'app-user-role-details-section',\n  imports: [\n    CommonModule,\n    ButtonModule,\n    GridComponent,\n    DynamicFormComponent,\n    MessageModule,\n    FontAwesomeModule,\n  ],\n  templateUrl: './user-role-details-section.component.html',\n  styleUrl: './user-role-details-section.component.scss',\n})\nexport class UserRoleDetailsSectionComponent extends EntitySectionBaseComponent<\n  UserRoleListItem | UserRoleCreateRequest\n> {\n  private readonly accountsService = inject(AccountsService);\n  faUserLock = faUserLock;\n\n  readonly userRoleDetails = computed(() => {\n    const userRoleDetails = this.entity();\n    if (!isDefined(userRoleDetails)) return [];\n\n    return [\n      { key: 'Name', value: userRoleDetails.name },\n      { key: 'Description', value: userRoleDetails.description },\n    ];\n  });\n\n  constructor() {\n    super();\n\n    // Setup initial columns\n    this.columns = [\n      { field: 'key', header: '', transform: 'uppercase' },\n      { field: 'value', header: '' },\n    ];\n  }\n\n  protected override updateFormFields(): void {\n    const userRole = this.entity();\n\n    this.formFields = [\n      createTextField('name', 'Name', userRole?.name, {\n        name: 'name',\n        validations: [\n          {\n            name: 'required',\n            validator: Validators.required,\n            message: 'Name is required',\n          },\n        ],\n      }),\n      createTextField('description', 'Description', userRole?.description, {\n        name: 'description',\n        validations: [\n          {\n            name: 'required',\n            validator: Validators.required,\n            message: 'Description is required',\n          },\n        ],\n      }),\n    ];\n  }\n\n  protected override submitChanges(\n    formData: Record<string, string | number>,\n  ): void {\n    const userRole = this.entity();\n    if (isNullOrUndefined(userRole)) return;\n    this.accountsService\n      .updateUserRole(userRole.id, formData)\n      .pipe(takeUntilDestroyed(this.destroyRef))\n      .subscribe({\n        next: (response) => {\n          this.isFormEditable.set(false);\n          this.broadcastService.broadcast('entity-updated', {\n            entityType: 'user-role',\n            operation: 'update',\n            entityId: userRole.id,\n            data: response,\n          });\n        },\n        error: () => {\n          this.isFormEditable.set(true);\n        },\n      });\n  }\n}\n","<div class=\"card pt-2\">\n  <div class=\"mb-4 p-2 flex justify-start items-center\">\n    <fa-icon\n      [icon]=\"faUserLock\"\n      class=\"!text-[2.5rem]\"\n      [ngClass]=\"{ 'icon-primary': isFormEditable() }\"\n    ></fa-icon>\n\n    <div class=\"pl-6 flex-1\">\n      <div class=\"flex justify-between items-center\">\n        <h2 class=\"text-xl font-semibold m-0\">User Role Details</h2>\n        @if (!isFormEditable() && !createMode()) {\n          <div class=\"icon-light\">\n            <span\n              class=\"pi pi-pen-to-square action hover !text-2xl\"\n              [attr.aria-label]=\"'Edit user role details'\"\n              (click)=\"onEdit()\"\n              (keydown.enter)=\"onEdit()\"\n            ></span>\n          </div>\n        }\n      </div>\n      <span>Describe this user role.</span>\n    </div>\n  </div>\n\n  @if (isFormEditable() || (createMode() && formFields.length)) {\n    <app-dynamic-form\n      [fields]=\"formFields\"\n      [actions]=\"actions\"\n      [hideActions]=\"createMode()\"\n      (formSubmit)=\"onSubmit($event)\"\n      (formValidityChange)=\"onFormValidityChange($event)\"\n      (formValueChange)=\"onFormValueChange($event)\"\n    >\n    </app-dynamic-form>\n  }\n\n  @if (!isFormEditable() && !createMode()) {\n    <app-grid\n      [data]=\"userRoleDetails()\"\n      [columns]=\"columns\"\n      [showGridLines]=\"false\"\n      [hideHeader]=\"true\"\n      tableStyleClass=\"info-display !w-auto\"\n    ></app-grid>\n  }\n</div>\n","import {\n  Component,\n  computed,\n  effect,\n  inject,\n  input,\n  signal,\n} from '@angular/core';\nimport { takeUntilDestroyed } from '@angular/core/rxjs-interop';\nimport { faKey } from '@fortawesome/free-solid-svg-icons';\n\nimport {\n  UserRoleListItem,\n  UserRoleCreateRequest,\n  AccountsService,\n} from '../../../../../api';\nimport { createListboxField } from '../../../../../shared/models';\nimport { isDefined, isNullOrUndefined } from '../../../../../shared/utils';\nimport { EntitySectionBaseComponent } from '../../base';\nimport { GridComponent } from '../../../../../shared/components/grid/grid.component';\nimport { CommonModule } from '@angular/common';\nimport { FontAwesomeModule } from '@fortawesome/angular-fontawesome';\nimport { ButtonModule } from 'primeng/button';\nimport { MessageModule } from 'primeng/message';\nimport { DynamicFormComponent } from '../../../../../shared/components/forms/dynamic-form/dynamic-form.component';\nimport { firstValueFrom } from 'rxjs';\nimport { LEGACY_RIGHTS } from '../../../models';\nimport { DEFAULT_SYSTEM_ID } from '../../../../../core/models';\n\n@Component({\n  selector: 'app-user-role-rights-section',\n  imports: [\n    CommonModule,\n    ButtonModule,\n    GridComponent,\n    DynamicFormComponent,\n    MessageModule,\n    FontAwesomeModule,\n  ],\n  templateUrl: './user-role-rights-section.component.html',\n  styleUrl: './user-role-rights-section.component.scss',\n})\nexport class UserRoleRightsSectionComponent extends EntitySectionBaseComponent<\n  UserRoleListItem | UserRoleCreateRequest\n> {\n  readonly ownerId = input<string | null>(null);\n  private readonly accountsService = inject(AccountsService);\n\n  private readonly resolvedCompanyType = signal<string | undefined>(undefined);\n  faKey = faKey;\n\n  readonly userRoleDetails = computed(() => {\n    const userRole = this.entity();\n    const companyType = this.resolvedCompanyType();\n\n    if (!isDefined(userRole) || !isDefined(companyType)) {\n      return [];\n    }\n\n    const legacyRights =\n      LEGACY_RIGHTS[companyType as keyof typeof LEGACY_RIGHTS];\n\n    const details: { key: string; value: string }[] = [];\n\n    if (isDefined(legacyRights)) {\n      legacyRights.forEach((right) => {\n        details.push({\n          key: right.title,\n          value: userRole.legacyRights?.[right.name]?.join(', ') ?? 'None',\n        });\n      });\n    }\n    return details;\n  });\n\n  constructor() {\n    super();\n\n    // Setup initial columns\n    this.columns = [\n      { field: 'key', header: '', transform: 'uppercase' },\n      { field: 'value', header: '', transform: 'capitalize' },\n    ];\n\n    effect(() => {\n      const userRole = this.entity();\n      const ownerId = userRole?.owner?.id;\n\n      if (isDefined(ownerId)) {\n        if (ownerId === DEFAULT_SYSTEM_ID) {\n          this.resolvedCompanyType.set('system');\n        } else {\n          this.resolvedCompanyType.set(undefined);\n          firstValueFrom(this.accountsService.getCompany(ownerId))\n            .then((response) => {\n              if (response.type) {\n                this.resolvedCompanyType.set(response.type);\n                this.updateFormFields();\n              } else {\n                console.warn(\n                  'Company response or type is undefined for owner ID:',\n                  ownerId,\n                );\n                this.resolvedCompanyType.set(undefined);\n              }\n            })\n            .catch((error) => {\n              console.error(\n                'Failed to fetch company type for owner ID:',\n                ownerId,\n                error,\n              );\n              this.resolvedCompanyType.set(undefined);\n            });\n        }\n      } else {\n        this.resolvedCompanyType.set(undefined);\n      }\n    });\n  }\n\n  protected override updateFormFields(): void {\n    const userRole: Record<string, string[]> = this.entity()?.legacyRights;\n    const companyType = this.resolvedCompanyType();\n    if (!isDefined(companyType)) {\n      this.formFields = [];\n      return;\n    }\n\n    const listBoxOptions = companyType\n      ? LEGACY_RIGHTS[companyType as keyof typeof LEGACY_RIGHTS]\n      : [];\n\n    this.formFields = listBoxOptions.map((right) => {\n      const selectedRights = userRole?.[right.name] ?? [];\n      return createListboxField(\n        right.name,\n        right.title,\n        selectedRights,\n        right.rights.map((r) => ({\n          label: r.title,\n          value: r.name,\n        })),\n        {\n          name: right.name,\n          props: {\n            checkmark: true,\n            multiple: true,\n          },\n        },\n      );\n    });\n  }\n\n  protected override submitChanges(\n    formData: Record<string, string | string[] | number>,\n  ): void {\n    const userRole = this.entity();\n    if (isNullOrUndefined(userRole)) return;\n    this.accountsService\n      .updateUserRole(userRole.id, {\n        legacyRights: formData as Record<string, string[]>,\n      })\n      .pipe(takeUntilDestroyed(this.destroyRef))\n      .subscribe({\n        next: (response) => {\n          this.isFormEditable.set(false);\n          this.broadcastService.broadcast('entity-updated', {\n            entityType: 'user-role',\n            operation: 'update',\n            entityId: userRole.id,\n            data: response,\n          });\n        },\n        error: () => {\n          this.isFormEditable.set(true);\n        },\n      });\n  }\n}\n","<div class=\"card pt-2\">\n  <div class=\"mb-4 p-2 flex justify-start items-center\">\n    <fa-icon\n      [icon]=\"faKey\"\n      class=\"!text-[2.5rem]\"\n      [ngClass]=\"{ 'icon-primary': isFormEditable() }\"\n    ></fa-icon>\n\n    <div class=\"pl-6 flex-1\">\n      <div class=\"flex justify-between items-center\">\n        <h2 class=\"text-xl font-semibold m-0\">Access Rights</h2>\n        @if (!isFormEditable() && !createMode()) {\n          <div class=\"icon-light\">\n            <span\n              class=\"pi pi-pen-to-square action hover !text-2xl\"\n              [attr.aria-label]=\"'Edit access rights details'\"\n              (click)=\"onEdit()\"\n              (keydown.enter)=\"onEdit()\"\n            ></span>\n          </div>\n        }\n      </div>\n      <span>Select from the following access rights.</span>\n    </div>\n  </div>\n\n  @if (isFormEditable() || (createMode() && formFields.length)) {\n    <app-dynamic-form\n      [fields]=\"formFields\"\n      [actions]=\"actions\"\n      [hideActions]=\"createMode()\"\n      (formSubmit)=\"onSubmit($event)\"\n      (formValidityChange)=\"onFormValidityChange($event)\"\n      (formValueChange)=\"onFormValueChange($event)\"\n    >\n    </app-dynamic-form>\n  }\n\n  @if (!isFormEditable() && !createMode()) {\n    <app-grid\n      [data]=\"userRoleDetails()\"\n      [columns]=\"columns\"\n      [showGridLines]=\"false\"\n      [hideHeader]=\"true\"\n      tableStyleClass=\"info-display !w-auto\"\n    ></app-grid>\n  }\n</div>\n","import { CommonModule } from '@angular/common';\nimport { Component, computed, inject, input } from '@angular/core';\nimport { takeUntilDestroyed } from '@angular/core/rxjs-interop';\nimport { Validators } from '@angular/forms';\nimport { FontAwesomeModule } from '@fortawesome/angular-fontawesome';\nimport { faPassport } from '@fortawesome/free-solid-svg-icons';\nimport { ButtonModule } from 'primeng/button';\nimport { MessageModule } from 'primeng/message';\nimport { v4 as uuidv4 } from 'uuid';\n\nimport {\n  UserRoleListItem,\n  UserRoleCreateRequest,\n  AccountsService,\n  Policy,\n} from '../../../../../api';\nimport { DynamicFormComponent } from '../../../../../shared/components/forms/dynamic-form/dynamic-form.component';\nimport { GridComponent } from '../../../../../shared/components/grid/grid.component';\nimport {\n  createModalListField,\n  createTextAreaField,\n  createTextField,\n  FormFieldConfig,\n  ListFieldModalConfig,\n} from '../../../../../shared/models';\nimport {\n  isDefined,\n  isNullOrUndefined,\n  isString,\n} from '../../../../../shared/utils';\nimport { EntitySectionBaseComponent } from '../../base';\nimport { ModalListFormComponent } from '../../../../../shared/components/forms/modal-list-form/modal-list-form.component';\n\n@Component({\n  selector: 'app-user-role-inline-policies-section',\n  imports: [\n    CommonModule,\n    ButtonModule,\n    GridComponent,\n    DynamicFormComponent,\n    MessageModule,\n    FontAwesomeModule,\n  ],\n  templateUrl: './user-role-inline-policies-section.component.html',\n  styleUrl: './user-role-inline-policies-section.component.scss',\n})\nexport class UserRoleInlinePoliciesSectionComponent extends EntitySectionBaseComponent<\n  UserRoleListItem | UserRoleCreateRequest\n> {\n  readonly ownerId = input<string | null>(null);\n  private readonly accountsService = inject(AccountsService);\n  faPassport = faPassport;\n\n  readonly userRoleDetails = computed(() => {\n    const userRoleDetails: Policy[] = this.entity()?.inlinePolicies;\n    if (!isDefined(userRoleDetails)) return [];\n\n    return [\n      {\n        key: 'Policies',\n        value: userRoleDetails.map((item) => item.name).join(', ') ?? 'None',\n      },\n    ];\n  });\n  userRolesModalConfig: ListFieldModalConfig<Policy> | undefined;\n\n  constructor() {\n    super();\n\n    // Setup initial columns\n    this.columns = [\n      { field: 'key', header: '', transform: 'uppercase' },\n      { field: 'value', header: '' },\n    ];\n  }\n\n  protected override updateFormFields(): void {\n    const userRole = this.entity();\n\n    this.userRolesModalConfig = {\n      modalComponent: ModalListFormComponent,\n      modalTitle: 'Inline Policy',\n      defaultItemProvider: () => {\n        // Create a properly structured default object\n        const defaultItem = {\n          id: uuidv4(),\n          name: 'New Policy', // Add a default name\n          statements: JSON.stringify(\n            [\n              {\n                id: 'statement1',\n                effect: 'allow',\n                actions: ['entities:SomeMethod'],\n                resources: ['*'],\n              },\n            ],\n            null,\n            2,\n          ),\n        };\n        return defaultItem as unknown as Policy;\n      },\n      listItemFormatter: (item: Policy) => {\n        // Ensure we have valid data to display\n        return {\n          id: item.id || '',\n          title: item.name || 'Unnamed Policy',\n          display: Array.isArray(item.statements)\n            ? `${item.statements.length} statement(s)`\n            : 'No statements',\n        };\n      },\n\n      modalFields: (_item: Policy | undefined): FormFieldConfig[] => {\n        // Default to empty array JSON string\n        let statementsJson = '[]';\n\n        try {\n          if (_item?.statements) {\n            // It's an object or array, stringify it\n            statementsJson = JSON.stringify(_item.statements);\n          }\n        } catch (e) {\n          console.error('Error handling statements:', e);\n        }\n\n        return [\n          createTextField('id', 'ID', _item?.id, {\n            name: 'id',\n            hidden: true,\n          }),\n          createTextField('name', 'Name', _item?.name, {\n            name: 'name',\n            validations: [\n              {\n                name: 'required',\n                validator: Validators.required,\n                message: 'Name is required',\n              },\n            ],\n          }),\n          createTextAreaField('statements', 'Statements', statementsJson, {\n            name: 'statements',\n            validations: [\n              {\n                name: 'required',\n                validator: Validators.required,\n                message: 'Statements are required',\n              },\n              {\n                name: 'json',\n                validator: (control) => {\n                  try {\n                    if (isNullOrUndefined(control.value)) return null;\n                    JSON.parse(control.value);\n                    return null;\n                  } catch (e) {\n                    console.error('Invalid JSON format:', e);\n                    return { json: true };\n                  }\n                },\n                message: 'Invalid JSON format',\n              },\n            ],\n          }),\n        ];\n      },\n      subHeader: '',\n    };\n\n    this.formFields = [\n      createModalListField(\n        'inlinePolicies',\n        'Policies',\n        userRole?.inlinePolicies ?? [],\n        {\n          layout: 'horizontal',\n          labelWidth: '1/3',\n          name: 'inlinePolicies',\n          props: {\n            modalConfig: this\n              .userRolesModalConfig as unknown as ListFieldModalConfig<unknown>,\n          },\n        },\n      ),\n    ];\n  }\n\n  protected override submitChanges(\n    formData: Record<string, Record<string, unknown>[]>,\n  ): void {\n    const userRole = this.entity();\n    if (isNullOrUndefined(userRole)) return;\n\n    const transformedData = this.transformFormData\n      ? this.transformFormData(formData)\n      : formData;\n    this.accountsService\n      .updateUserRole(userRole.id, transformedData)\n      .pipe(takeUntilDestroyed(this.destroyRef))\n      .subscribe({\n        next: (response) => {\n          this.isFormEditable.set(false);\n          this.broadcastService.broadcast('entity-updated', {\n            entityType: 'user-role',\n            operation: 'update',\n            entityId: userRole.id,\n            data: response,\n          });\n        },\n        error: () => {\n          this.isFormEditable.set(true);\n        },\n      });\n  }\n\n  protected override transformFormData?(\n    formData:\n      | Record<string, unknown>\n      | Record<string, Record<string, unknown>[]>,\n  ) {\n    const data = formData as Record<string, Record<string, unknown>[]>;\n\n    if (isDefined(data['inlinePolicies'])) {\n      data['inlinePolicies'] = data['inlinePolicies'].map((policy) => {\n        // Ensure we have a valid object\n        const transformedPolicy = {\n          id: policy['id'],\n          name: policy['name'],\n          statements: isString(policy['statements'])\n            ? JSON.parse(policy['statements'])\n            : policy['statements'],\n        };\n        return transformedPolicy;\n      });\n    }\n    return data;\n  }\n}\n","<div class=\"card pt-2\">\n  <div class=\"mb-4 p-2 flex justify-start items-center\">\n    <fa-icon\n      [icon]=\"faPassport\"\n      class=\"!text-[2.5rem]\"\n      [ngClass]=\"{ 'icon-primary': isFormEditable() }\"\n    ></fa-icon>\n\n    <div class=\"pl-6 flex-1\">\n      <div class=\"flex justify-between items-center\">\n        <h2 class=\"text-xl font-semibold m-0\">User Role Details</h2>\n        @if (!isFormEditable() && !createMode()) {\n          <div class=\"icon-light\">\n            <span\n              class=\"pi pi-pen-to-square action hover !text-2xl\"\n              [attr.aria-label]=\"'Edit user role details'\"\n              (click)=\"onEdit()\"\n              (keydown.enter)=\"onEdit()\"\n            ></span>\n          </div>\n        }\n      </div>\n      <span>Describe this user role.</span>\n    </div>\n  </div>\n\n  @if (isFormEditable() || (createMode() && formFields.length)) {\n    <app-dynamic-form\n      [fields]=\"formFields\"\n      [actions]=\"actions\"\n      [hideActions]=\"createMode()\"\n      (formSubmit)=\"onSubmit($event)\"\n      (formValidityChange)=\"onFormValidityChange($event)\"\n      (formValueChange)=\"onFormValueChange($event)\"\n    >\n    </app-dynamic-form>\n  }\n\n  @if (!isFormEditable() && !createMode()) {\n    <app-grid\n      [data]=\"userRoleDetails()\"\n      [columns]=\"columns\"\n      [showGridLines]=\"false\"\n      [hideHeader]=\"true\"\n      tableStyleClass=\"info-display !w-auto\"\n    ></app-grid>\n  }\n</div>\n","import { Injectable } from '@angular/core';\nimport { AdminDetailSection } from '../models';\n\nimport { UserRoleResponse } from '../../../api';\nimport { UserRoleDetailsSectionComponent } from '../components/user-roles/user-role-details-section/user-role-details-section.component';\nimport { FeedSectionComponent } from '../components/shared/feed-section/feed-section.component';\nimport { UserRoleRightsSectionComponent } from '../components/user-roles/user-role-rights-section/user-role-rights-section.component';\nimport { UserRoleInlinePoliciesSectionComponent } from '../components/user-roles/user-role-inline-policies-section/user-role-inline-policies-section.component';\n\n@Injectable({ providedIn: 'root' })\nexport class UserRoleSectionConfigFactory {\n  /**\n   * Create sections for userRole information\n   * @param userRole The userRole object to display in the section\n   * @returns An array of AdminDetailSection objects representing the userRole information sections\n   */\n  createUserRoleInformationSections(\n    userRole: UserRoleResponse | null,\n  ): AdminDetailSection[] {\n    return [\n      {\n        id: 'user-role-details',\n        title: 'User Role Details',\n        component: UserRoleDetailsSectionComponent,\n        componentInputs: { entity: userRole },\n        category: 'information',\n        order: 10,\n      },\n      {\n        id: 'user-role-rights',\n        title: 'User Role Rights',\n        component: UserRoleRightsSectionComponent,\n        componentInputs: { entity: userRole },\n        category: 'information',\n        order: 20,\n      },\n      {\n        id: 'user-role-inline-policies',\n        title: 'User Role Inline Policies',\n        component: UserRoleInlinePoliciesSectionComponent,\n        componentInputs: { entity: userRole },\n        category: 'information',\n        order: 30,\n      },\n    ];\n  }\n\n  /**\n   * Create sections for userRole changes\n   * @param userRole The userRole object to display in the section\n   * @returns An array of AdminDetailSection objects representing the userRole changes sections\n   */\n  createChangesSection(\n    userRole: UserRoleResponse | null,\n  ): AdminDetailSection[] {\n    return [\n      {\n        id: 'user-role-changes',\n        title: 'Changes',\n        component: FeedSectionComponent,\n        componentInputs: {\n          entity: userRole,\n        },\n        category: 'feed',\n        order: 10,\n      },\n    ];\n  }\n\n  /**\n   * Create all userRole sections in one call\n   * @param userRole The userRole object to display in the sections\n   * @returns An array of AdminDetailSection objects representing all userRole sections\n   */\n  createAllUserRoleSections(\n    userRole: UserRoleResponse | null,\n  ): AdminDetailSection[] {\n    return [\n      ...this.createUserRoleInformationSections(userRole),\n      ...this.createChangesSection(userRole),\n    ];\n  }\n}\n","import { Injectable, inject } from '@angular/core';\nimport { Validators } from '@angular/forms';\nimport {\n  createAutocompleteField,\n  createDropdownField,\n  createPasswordField,\n  createTextField,\n  createToggleSwitchField,\n  createTreeSelectField,\n  FormFieldConfig,\n  AssetGroupingTreeItem,\n} from '../../../../../../shared/models';\nimport {\n  UserListItem,\n  UserCreateRequest,\n  CompanyResponse,\n  ClientListItem,\n} from '../../../../../../api';\nimport { isDefined } from '../../../../../../shared/utils';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class UserFormService {\n  /**\n   * Creates form fields for user details based on current state\n   */\n  createUserFormFields(config: {\n    user: UserListItem | UserCreateRequest | null;\n    company: CompanyResponse | null;\n    createMode: boolean;\n    costCenters: AssetGroupingTreeItem[];\n    timezones: { label: string; value: string }[];\n    clientsSearchResults: ClientListItem[] | undefined;\n    searchClient: (term: string) => void;\n    isLoadingClients?: () => boolean;\n  }): FormFieldConfig[] {\n    const {\n      user,\n      company,\n      createMode,\n      costCenters,\n      timezones,\n      clientsSearchResults,\n      searchClient,\n      isLoadingClients,\n    } = config;\n\n    if (!isDefined(user)) return [];\n\n    const fields: FormFieldConfig[] = [];\n\n    // Basic fields\n    fields.push(\n      this.createNameField(user),\n      this.createEmailField(user),\n      this.createMobileField(user),\n    );\n\n    // Password field only in edit mode\n    if (!createMode) {\n      fields.push(this.createPasswordField());\n    }\n\n    // Cost centre field for client companies\n    if (isDefined(company) && company.type === 'client') {\n      fields.push(this.createCostCentreField(user, costCenters));\n    }\n\n    // Common fields\n    fields.push(this.createTimezoneField(user, timezones));\n\n    // Default client field for non-client companies\n    if (isDefined(company) && company.type !== 'client') {\n      fields.push(\n        this.createDefaultClientField(\n          user,\n          clientsSearchResults,\n          searchClient,\n          isLoadingClients,\n        ),\n      );\n    }\n\n    // Invite toggle for create mode\n    if (createMode) {\n      fields.push(this.createInviteField());\n    }\n\n    return fields;\n  }\n\n  private createNameField(\n    user: UserListItem | UserCreateRequest,\n  ): FormFieldConfig {\n    return createTextField('name', 'Name', user?.name, {\n      name: 'name',\n      validations: [\n        {\n          name: 'required',\n          validator: Validators.required,\n          message: 'Name is required',\n        },\n      ],\n    });\n  }\n\n  private createEmailField(\n    user: UserListItem | UserCreateRequest,\n  ): FormFieldConfig {\n    return createTextField(\n      'emailAddress',\n      'Email Address',\n      user?.emailAddress,\n      {\n        name: 'emailAddress',\n        validations: [\n          {\n            name: 'required',\n            validator: Validators.required,\n            message: 'Email Address is required',\n          },\n          {\n            name: 'email',\n            validator: Validators.email,\n            message: 'Email Address is invalid',\n          },\n        ],\n      },\n    );\n  }\n\n  private createMobileField(\n    user: UserListItem | UserCreateRequest,\n  ): FormFieldConfig {\n    return createTextField('mobile', 'Mobile Number', user?.mobile, {\n      name: 'mobile',\n    });\n  }\n\n  private createPasswordField(): FormFieldConfig {\n    return createPasswordField('password', 'Password', {\n      name: 'password',\n    });\n  }\n\n  private createCostCentreField(\n    user: UserListItem | UserCreateRequest,\n    costCenters: AssetGroupingTreeItem[],\n  ): FormFieldConfig {\n    return createTreeSelectField(\n      'costCentre',\n      'Cost Centre',\n      user?.costCentre\n        ? {\n            id: user.costCentre.id,\n            label: user.costCentre.name,\n            data: user.costCentre,\n          }\n        : null,\n      costCenters,\n      {\n        name: 'costCentre',\n        validations: [\n          {\n            name: 'required',\n            validator: Validators.required,\n            message: 'Cost Centre is required',\n          },\n        ],\n        props: {\n          appendTo: 'body',\n          placeholder: 'Select Cost Centre',\n          multiple: false,\n          showClear: true,\n          selectionMode: 'single',\n          filter: true,\n        },\n      },\n    );\n  }\n\n  private createTimezoneField(\n    user: UserListItem | UserCreateRequest,\n    timezones: { label: string; value: string }[],\n  ): FormFieldConfig {\n    return createDropdownField(\n      'timeZoneId',\n      'Time Zone',\n      timezones,\n      user?.timeZoneId,\n      {\n        layout: 'horizontal',\n        labelWidth: '1/3',\n        placeholder: 'Select timezone',\n        name: 'timeZoneId',\n        props: {\n          appendTo: 'body',\n        },\n      },\n    );\n  }\n\n  private createDefaultClientField(\n    user: UserListItem | UserCreateRequest,\n    clientsSearchResults: ClientListItem[] | undefined,\n    searchClient: (term: string) => void,\n    isLoadingClients?: () => boolean,\n  ): FormFieldConfig {\n    return createAutocompleteField(\n      'defaultClient',\n      'Default Client',\n      user?.defaultClient,\n      clientsSearchResults,\n      searchClient,\n      {\n        layout: 'horizontal',\n        labelWidth: '1/3',\n        name: 'defaultClient',\n        autocompleteLoading: isLoadingClients,\n        validations: [\n          {\n            name: 'required',\n            validator: Validators.required,\n            message: 'Default Client is required',\n          },\n        ],\n        placeholder: 'Enter client name...',\n        props: {\n          appendTo: 'body',\n          showClear: true,\n          multiple: false,\n          field: 'name',\n          completeOnFocus: false,\n          typeahead: true,\n          showEmptyMessage: true,\n          emptyMessage: 'No clients found',\n        },\n      },\n    );\n  }\n\n  private createInviteField(): FormFieldConfig {\n    return createToggleSwitchField('invite', 'Send Invite', true, {\n      name: 'invite',\n      hint: 'If enabled, the user will receive an email inviting them to activate their account.',\n      props: {\n        layout: 'horizontal',\n        labelWidth: '1/3',\n      },\n    });\n  }\n}\n","import { Injectable, inject, signal, DestroyRef } from '@angular/core';\nimport { takeUntilDestroyed } from '@angular/core/rxjs-interop';\nimport {\n  debounceTime,\n  distinctUntilChanged,\n  switchMap,\n  catchError,\n  of,\n  Subject,\n} from 'rxjs';\nimport { AccountsService, ClientListItem } from '../../../../../../api';\nimport { UtilityService } from '../../../../../../core/services/utility.service';\nimport {\n  hasProperty,\n  isDefined,\n  isNullOrUndefined,\n} from '../../../../../../shared/utils';\nimport { SEARCH_DEBOUNCE_TIME } from '../../../../../../core/models';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class ClientSearchService {\n  private readonly accountsService = inject(AccountsService);\n  private readonly utilityService = inject(UtilityService);\n  private readonly destroyRef = inject(DestroyRef);\n\n  private readonly searchSubject = new Subject<string>();\n  private readonly clientsSearchResults = signal<ClientListItem[] | undefined>(\n    undefined,\n  );\n  private readonly isLoading = signal<boolean>(false);\n  private ownerId: string | null = null;\n\n  // Getter for readonly access to results\n  get searchResults() {\n    return this.clientsSearchResults.asReadonly();\n  }\n\n  // Getter for readonly access to loading state\n  get isSearchLoading() {\n    return this.isLoading.asReadonly();\n  }\n\n  /**\n   * Initialize the search service with an owner ID and set up the search stream\n   */\n  initialize(ownerId: string | null): void {\n    this.ownerId = ownerId;\n    this.setupSearchStream();\n  }\n\n  /**\n   * Trigger a client search\n   */\n  search(searchTerm: string): void {\n    if (!searchTerm || searchTerm.trim() === '' || searchTerm.length < 3) {\n      this.clientsSearchResults.set([]);\n      this.isLoading.set(false);\n      return;\n    }\n\n    this.clientsSearchResults.set(undefined);\n    this.isLoading.set(true);\n    this.searchSubject.next(searchTerm);\n  }\n\n  /**\n   * Clear search results\n   */\n  clearResults(): void {\n    this.clientsSearchResults.set(undefined);\n  }\n\n  /**\n   * Set up the reactive search stream\n   */\n  private setupSearchStream(): void {\n    this.searchSubject\n      .pipe(\n        debounceTime(SEARCH_DEBOUNCE_TIME),\n        distinctUntilChanged(),\n        takeUntilDestroyed(this.destroyRef),\n        switchMap((searchTerm) => this.performSearch(searchTerm)),\n      )\n      .subscribe({\n        next: (data) => this.handleSearchResults(data),\n        error: () => this.handleSearchError(),\n      });\n  }\n\n  /**\n   * Perform the actual search API call\n   */\n  private performSearch(searchTerm: string) {\n    if (this.ownerId === null || this.ownerId === undefined) {\n      return of({ items: [] });\n    }\n\n    const filters = {\n      state: { value: 'active', operator: '=' },\n      name: { value: `*${searchTerm}*`, operator: '=' },\n    };\n    const rqlFilter = this.utilityService.constructRqlFilter(filters);\n\n    return this.accountsService\n      .listClients(this.ownerId, 0, 10, 'name', rqlFilter)\n      .pipe(catchError(() => of({ items: [] })));\n  }\n\n  /**\n   * Handle successful search results\n   */\n  private handleSearchResults(data: unknown): void {\n    this.isLoading.set(false);\n\n    if (isDefined(data) && hasProperty(data, 'items')) {\n      const results = isNullOrUndefined(data.items)\n        ? []\n        : (data.items as ClientListItem[]);\n      this.clientsSearchResults.set(results);\n    }\n  }\n\n  /**\n   * Handle search errors\n   */\n  private handleSearchError(): void {\n    this.isLoading.set(false);\n    this.clientsSearchResults.set([]);\n  }\n\n  /**\n   * Clean up the service\n   */\n  destroy(): void {\n    this.clientsSearchResults.set(undefined);\n    this.ownerId = null;\n  }\n}\n","import { Injectable, inject, signal } from '@angular/core';\nimport { firstValueFrom } from 'rxjs';\nimport { HttpClient } from '@angular/common/http';\nimport { AccountsService, CompanyResponse } from '../../../../../../api';\nimport { AssetGroupingService } from '../../../../../../shared/services/asset-grouping.service';\nimport { RequestCacheService } from '../../../../../../shared/services/request-cache.service';\nimport { AssetGroupingTreeItem } from '../../../../../../shared/models';\nimport { isDefined } from '../../../../../../shared/utils';\nimport { DEFAULT_SYSTEM_ID } from '../../../../../../core/models';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class UserDataLoadingService {\n  private readonly accountsService = inject(AccountsService);\n  private readonly assetGroupService = inject(AssetGroupingService);\n  private readonly http = inject(HttpClient);\n  private readonly cacheService = inject(RequestCacheService);\n\n  // Loading state signals\n  private readonly timezonesLoaded = signal(false);\n  private readonly costCentersLoaded = signal(false);\n  private readonly companyDataLoaded = signal(false);\n\n  // Data signals\n  private readonly companyData = signal<CompanyResponse | null>(null);\n  private readonly timezones = signal<{ label: string; value: string }[]>([]);\n  private readonly costCenters = signal<AssetGroupingTreeItem[]>([]);\n\n  // Getters for readonly access\n  get isDataLoaded() {\n    return (\n      this.timezonesLoaded() &&\n      this.costCentersLoaded() &&\n      this.companyDataLoaded()\n    );\n  }\n\n  get timezonesData() {\n    return this.timezones.asReadonly();\n  }\n\n  get costCentersData() {\n    return this.costCenters.asReadonly();\n  }\n\n  get companyInfo() {\n    return this.companyData.asReadonly();\n  }\n\n  get loadingStates() {\n    return {\n      timezones: this.timezonesLoaded.asReadonly(),\n      costCenters: this.costCentersLoaded.asReadonly(),\n      company: this.companyDataLoaded.asReadonly(),\n    };\n  }\n\n  /**\n   * Load all required data for the user form\n   */\n  async loadUserFormData(ownerId?: string | null): Promise<void> {\n    // Start loading timezones immediately\n    const timezonePromise = this.loadTimezones();\n\n    // Load company data if ownerId is provided\n    let companyPromise: Promise<void> = Promise.resolve();\n    if (isDefined(ownerId)) {\n      companyPromise = this.loadCompanyData(ownerId);\n    } else {\n      this.companyData.set(null);\n      this.companyDataLoaded.set(true);\n    }\n\n    // Wait for company data to determine if we need cost centers\n    await companyPromise;\n    const company = this.companyData();\n\n    // Load cost centers if needed\n    let costCenterPromise: Promise<void> = Promise.resolve();\n    if (isDefined(ownerId) && isDefined(company) && company.type === 'client') {\n      costCenterPromise = this.loadCostCentres(ownerId);\n    } else {\n      this.costCenters.set([]);\n      this.costCentersLoaded.set(true);\n    }\n\n    // Wait for all data to load\n    await Promise.all([timezonePromise, costCenterPromise]);\n  }\n\n  /**\n   * Load timezone data\n   */\n  private async loadTimezones(): Promise<void> {\n    try {\n      this.timezonesLoaded.set(false);\n      const data = await firstValueFrom(\n        this.http.get<{ id: string; name: string }[]>(\n          '/assets/docs/timezones.json',\n        ),\n      );\n\n      const timezones = data\n        .map((tz) => ({ label: tz.id, value: tz.id }))\n        .sort((a, b) => a.label.localeCompare(b.label));\n\n      this.timezones.set(timezones);\n      this.timezonesLoaded.set(true);\n    } catch (error) {\n      console.error('Failed to load timezones:', error);\n      this.timezones.set([]);\n      this.timezonesLoaded.set(true);\n      throw error;\n    }\n  }\n\n  /**\n   * Load company data with caching\n   */\n  private async loadCompanyData(ownerId: string): Promise<void> {\n    try {\n      this.companyDataLoaded.set(false);\n      this.companyData.set(null);\n\n      const company = await this.cacheService.getOrFetchAsync(\n        `company-${ownerId}`,\n        () => firstValueFrom(this.accountsService.getCompany(ownerId)),\n        300000, // Cache for 5 minutes\n      );\n\n      this.companyData.set(company);\n      this.companyDataLoaded.set(true);\n    } catch (error) {\n      console.error('Failed to load company data:', error);\n      this.companyData.set(null);\n      this.companyDataLoaded.set(true);\n      throw error;\n    }\n  }\n\n  /**\n   * Load cost centres data\n   */\n  private async loadCostCentres(ownerId: string): Promise<void> {\n    try {\n      this.costCentersLoaded.set(false);\n\n      const [costCentres, costCentreTree] = await Promise.all([\n        this.assetGroupService.getCostCentres(ownerId),\n        this.assetGroupService.getCostCentresAsTree(ownerId),\n      ]);\n      const userCostCentre = costCentres.find(\n        (centre) => centre.parent === DEFAULT_SYSTEM_ID,\n      );\n      const costCenters = this.assetGroupService.findCCInCCTree(\n        costCentreTree,\n        userCostCentre,\n      );\n\n      this.costCenters.set(costCenters);\n      this.costCentersLoaded.set(true);\n    } catch (error) {\n      console.error('Failed to load cost centres:', error);\n      this.costCenters.set([]);\n      this.costCentersLoaded.set(true);\n      throw error;\n    }\n  }\n\n  /**\n   * Reset all loading states and data\n   */\n  reset(): void {\n    this.timezonesLoaded.set(false);\n    this.costCentersLoaded.set(false);\n    this.companyDataLoaded.set(false);\n    this.companyData.set(null);\n    this.timezones.set([]);\n    this.costCenters.set([]);\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport {\n  ChangeDetectorRef,\n  Component,\n  computed,\n  effect,\n  inject,\n  input,\n  OnInit,\n  untracked,\n} from '@angular/core';\nimport { takeUntilDestroyed } from '@angular/core/rxjs-interop';\n\nimport { ButtonModule } from 'primeng/button';\nimport { MessageModule } from 'primeng/message';\nimport { FontAwesomeModule } from '@fortawesome/angular-fontawesome';\nimport { faUser } from '@fortawesome/free-solid-svg-icons';\n\nimport {\n  UserListItem,\n  UserCreateRequest,\n  AccountsService,\n  ClientResponse,\n  CostCentreResponse,\n} from '../../../../../api';\nimport { DynamicFormComponent } from '../../../../../shared/components/forms/dynamic-form/dynamic-form.component';\nimport { GridComponent } from '../../../../../shared/components/grid/grid.component';\nimport { isDefined } from '../../../../../shared/utils';\nimport { EntitySectionBaseComponent } from '../../base';\nimport { UtilsService } from '../../../../../shared/services/utils.service';\n\nimport { UserFormService } from './services/user-form.service';\nimport { ClientSearchService } from './services/client-search.service';\nimport { UserDataLoadingService } from './services/user-data-loading.service';\n@Component({\n  selector: 'app-user-details-section',\n  imports: [\n    CommonModule,\n    ButtonModule,\n    GridComponent,\n    DynamicFormComponent,\n    MessageModule,\n    FontAwesomeModule,\n  ],\n  templateUrl: './user-details-section.component.html',\n  styleUrl: './user-details-section.component.scss',\n})\nexport class UserDetailsSectionComponent\n  extends EntitySectionBaseComponent<UserListItem | UserCreateRequest>\n  implements OnInit\n{\n  readonly ownerId = input<string | null>(null);\n\n  // Injected services\n  private readonly accountsService = inject(AccountsService);\n  private readonly utilsService = inject(UtilsService);\n  private readonly cdr = inject(ChangeDetectorRef);\n  // Service dependencies\n  private readonly userFormService: UserFormService = inject(UserFormService);\n  private readonly dataLoadingService: UserDataLoadingService = inject(\n    UserDataLoadingService,\n  );\n  private readonly clientSearchService: ClientSearchService =\n    inject(ClientSearchService);\n\n  // Computed properties\n  protected readonly faUser = faUser;\n\n  readonly userDetails = computed(() => {\n    const userDetails = this.entity();\n    const company = this.dataLoadingService.companyInfo();\n    if (!isDefined(userDetails)) return [];\n\n    const details = [\n      { key: 'Name', value: userDetails.name },\n      { key: 'Email Address', value: userDetails.emailAddress },\n      { key: 'Mobile Number', value: userDetails.mobile },\n      { key: 'Password', value: '*********' },\n    ];\n\n    // Only add Cost Center if company type is 'client'\n    if (company?.type === 'client') {\n      details.push({\n        key: 'Cost Center',\n        value: userDetails.costCentre?.name ?? 'None',\n      });\n    }\n\n    details.push({ key: 'Time Zone', value: userDetails.timeZoneId ?? 'None' });\n\n    return details;\n  });\n\n  constructor() {\n    super();\n\n    // Setup initial columns\n    this.columns = [\n      { field: 'key', header: '', transform: 'uppercase' },\n      { field: 'value', header: '' },\n    ];\n\n    // Effect to update form fields when all necessary data is loaded\n    effect(() => {\n      if (this.dataLoadingService.isDataLoaded) {\n        untracked(() => {\n          this.updateFormFields();\n        });\n      }\n    });\n\n    effect(() => {\n      const searchResults = this.clientSearchService.searchResults();\n\n      // Find the client field in the form and update its suggestions\n      const clientField = this.formFields.find(\n        (field) => field.key === 'defaultClient',\n      );\n      if (clientField?.props) {\n        clientField.props.suggestions = searchResults;\n        this.cdr.detectChanges();\n      }\n    });\n  }\n  ngOnInit(): void {\n    // Initialize client search service with owner ID\n    const effectiveOwnerId = this.ownerId() ?? this.entity()?.ownerId;\n    this.clientSearchService.initialize(effectiveOwnerId); // Load all required data\n    this.dataLoadingService\n      .loadUserFormData(effectiveOwnerId)\n      .catch((error: unknown) => {\n        console.error('Failed to load user form data:', error);\n      });\n\n    // Set up form change tracking after form is initialized\n    setTimeout(() => {\n      this.trackFormChanges();\n    });\n  }\n\n  protected override updateFormFields(): void {\n    const user = this.entity();\n    if (!isDefined(user)) return;\n\n    this.formFields = this.userFormService.createUserFormFields({\n      user,\n      company: this.dataLoadingService.companyInfo(),\n      createMode: this.createMode(),\n      costCenters: this.dataLoadingService.costCentersData(),\n      timezones: this.dataLoadingService.timezonesData(),\n      clientsSearchResults: this.clientSearchService.searchResults(),\n      searchClient: (term: string) => this.clientSearchService.search(term),\n      isLoadingClients: () => this.clientSearchService.isSearchLoading(),\n    });\n\n    this.cdr.detectChanges();\n  }\n\n  protected override submitChanges(\n    formData: Record<string, string | number>,\n  ): void {\n    const user = this.entity();\n    if (user === null || user === undefined) return;\n    this.accountsService\n      .updateUser(user.id, formData)\n      .pipe(takeUntilDestroyed(this.destroyRef))\n      .subscribe({\n        next: (response) => {\n          this.clearUnsavedChanges();\n          this.isFormEditable.set(false);\n          this.broadcastService.broadcast('entity-updated', {\n            entityType: 'user',\n            operation: 'update',\n            entityId: user.id,\n            data: response,\n          });\n        },\n        error: () => {\n          this.isFormEditable.set(true);\n        },\n      });\n  }\n  protected override onFormValueChange(\n    formData: Record<string, string | number>,\n  ): void {\n    const transformedData: Record<string, unknown> = { ...formData };\n\n    if (isDefined(transformedData['defaultClient'])) {\n      const client = transformedData['defaultClient'] as ClientResponse;\n      transformedData['defaultClient'] = {\n        id: client.id,\n        name: client.name,\n      };\n    } else {\n      transformedData['defaultClient'] = null;\n    }\n\n    if (isDefined(transformedData['costCentre'])) {\n      const costCentre = transformedData['costCentre'] as CostCentreResponse;\n      transformedData['costCentre'] = {\n        id: costCentre.id,\n        name: costCentre.name,\n      };\n    } else {\n      transformedData['costCentre'] = null;\n    }\n\n    this.formValueChange.emit(transformedData);\n    this.hasFormChanges = true;\n  }\n}\n","<div class=\"card pt-2\">\n  <div class=\"mb-4 p-2 flex justify-start items-center\">\n    <fa-icon\n      [icon]=\"faUser\"\n      class=\"!text-[2.5rem]\"\n      [ngClass]=\"{ 'icon-primary': isFormEditable() }\"\n    ></fa-icon>\n\n    <div class=\"pl-6 flex-1\">\n      <div class=\"flex justify-between items-center\">\n        <h2 class=\"text-xl font-semibold m-0\">User Details</h2>\n        @if (!isFormEditable() && !createMode()) {\n          <div class=\"icon-light\">\n            <span\n              class=\"pi pi-pen-to-square action hover !text-2xl\"\n              [attr.aria-label]=\"'Edit user details'\"\n              (click)=\"onEdit()\"\n              (keydown.enter)=\"onEdit()\"\n            ></span>\n          </div>\n        }\n      </div>\n      <span>Describe this user.</span>\n    </div>\n  </div>\n\n  @if (isFormEditable() || (createMode() && formFields.length)) {\n    <app-dynamic-form\n      [fields]=\"formFields\"\n      [actions]=\"actions\"\n      [hideActions]=\"createMode()\"\n      (formSubmit)=\"onSubmit($event)\"\n      (formValidityChange)=\"onFormValidityChange($event)\"\n      (formValueChange)=\"onFormValueChange($event)\"\n    >\n    </app-dynamic-form>\n  }\n\n  @if (!isFormEditable() && !createMode()) {\n    <app-grid\n      [data]=\"userDetails()\"\n      [columns]=\"columns\"\n      [showGridLines]=\"false\"\n      [hideHeader]=\"true\"\n      tableStyleClass=\"info-display !w-auto\"\n    ></app-grid>\n  }\n</div>\n","import {\n  ChangeDetectorRef,\n  Component,\n  computed,\n  effect,\n  inject,\n  input,\n  OnInit,\n  signal,\n  untracked,\n} from '@angular/core';\nimport { takeUntilDestroyed } from '@angular/core/rxjs-interop';\nimport { faUserLock } from '@fortawesome/free-solid-svg-icons';\n\nimport {\n  AccountsService,\n  IdName,\n  UserCreateRequest,\n  UserListItem,\n} from '../../../../../api';\nimport { createListboxField } from '../../../../../shared/models';\nimport {\n  isDefined,\n  isEmpty,\n  isNullOrUndefined,\n} from '../../../../../shared/utils';\nimport { EntitySectionBaseComponent } from '../../base';\nimport { CommonModule } from '@angular/common';\nimport { FontAwesomeModule } from '@fortawesome/angular-fontawesome';\nimport { ButtonModule } from 'primeng/button';\nimport { DynamicFormComponent } from '../../../../../shared/components/forms/dynamic-form/dynamic-form.component';\nimport { GridComponent } from '../../../../../shared/components/grid/grid.component';\nimport { DEFAULT_SYSTEM_ID } from '../../../../../core/models';\n\n@Component({\n  selector: 'app-user-roles-section',\n  imports: [\n    CommonModule,\n    ButtonModule,\n    GridComponent,\n    DynamicFormComponent,\n    FontAwesomeModule,\n  ],\n  templateUrl: './user-roles-section.component.html',\n  styleUrl: './user-roles-section.component.scss',\n})\nexport class UserRolesSectionComponent\n  extends EntitySectionBaseComponent<UserListItem | UserCreateRequest>\n  implements OnInit\n{\n  readonly ownerId = input<string | null>(null);\n  private readonly accountsService = inject(AccountsService);\n  private readonly cdr = inject(ChangeDetectorRef);\n\n  faUserLock = faUserLock;\n\n  readonly userRoleDetails = computed(() => {\n    const userRoles: IdName[] = this.entity()?.roles;\n\n    if (!isDefined(userRoles)) {\n      return [];\n    }\n    return [\n      {\n        key: 'Roles',\n        value: !isEmpty(userRoles)\n          ? userRoles.map((role) => role.name).join(', ')\n          : 'None',\n      },\n    ];\n  });\n  protected readonly selectOptionsLoaded = signal<boolean>(false);\n  selectOptions: Record<string, { label: string; value: string }[]> = {};\n\n  constructor() {\n    super();\n\n    // Setup initial columns\n    this.columns = [\n      { field: 'key', header: '', transform: 'uppercase' },\n      { field: 'value', header: '', transform: 'capitalize' },\n    ];\n\n    effect(() => {\n      const selectOptionsLoaded = this.selectOptionsLoaded();\n      if (selectOptionsLoaded) {\n        untracked(() => {\n          this.updateFormFields();\n          this.cdr.detectChanges();\n        });\n      }\n    });\n  }\n\n  ngOnInit() {\n    this.loadSelectOptions();\n  }\n\n  private loadSelectOptions(): void {\n    const asset = this.entity();\n\n    const effectiveOwnerId = asset?.owner?.id ?? this.ownerId();\n\n    if (isNullOrUndefined(effectiveOwnerId)) {\n      this.selectOptions = {};\n      this.selectOptionsLoaded.set(true);\n      this.updateFormFields();\n      return;\n    }\n\n    this.accountsService.listUserRoles(effectiveOwnerId, 0, 100).subscribe({\n      next: (userRoles) => {\n        const hasDefaultSystemId = userRoles.items.some(\n          (item) => item.id === DEFAULT_SYSTEM_ID,\n        );\n        const options = userRoles.items\n          .map((item) => ({\n            label: item.name ?? '',\n            value: item.id,\n          }))\n          .sort((a, b) => a.label.localeCompare(b.label));\n\n        this.selectOptions = {\n          userRoles: hasDefaultSystemId\n            ? options\n            : [\n                { value: DEFAULT_SYSTEM_ID, label: 'Administrator' },\n                ...options,\n              ],\n        };\n        this.selectOptionsLoaded.set(true);\n      },\n      error: () => {\n        this.selectOptionsLoaded.set(true);\n      },\n    });\n  }\n\n  protected override updateFormFields(): void {\n    this.formFields = [\n      createListboxField(\n        'roles',\n        'Roles',\n        this.entity()?.roles?.map((role: IdName) => role.id) ?? [],\n        this.selectOptions['userRoles'],\n        {\n          name: 'userRoles',\n          props: {\n            checkbox: true,\n            multiple: true,\n          },\n        },\n      ),\n    ];\n  }\n\n  protected override submitChanges(\n    formData: Record<string, string | string[] | number>,\n  ): void {\n    const userRole = this.entity();\n    if (isNullOrUndefined(userRole)) return;\n    this.accountsService\n      .updateUser(userRole.id, this.transformFormData(formData))\n      .pipe(takeUntilDestroyed(this.destroyRef))\n      .subscribe({\n        next: (response) => {\n          this.isFormEditable.set(false);\n          this.broadcastService.broadcast('entity-updated', {\n            entityType: 'user-role',\n            operation: 'update',\n            entityId: userRole.id,\n            data: response,\n          });\n        },\n        error: () => {\n          this.isFormEditable.set(true);\n        },\n      });\n  }\n\n  protected override transformFormData(\n    formData:\n      | Record<string, unknown>\n      | Record<string, Record<string, unknown>[]>,\n  ) {\n    const data = { ...formData };\n\n    if (isDefined(data)) {\n      const userRole = this.entity();\n      if (isNullOrUndefined(userRole)) return data;\n\n      const roles = data['roles'] as string[];\n      if (isDefined(roles)) {\n        data['roles'] = roles.map((role) => ({\n          id: role,\n          name: this.selectOptions['userRoles']?.find(\n            (option) => option.value === role,\n          )?.label,\n        }));\n      }\n    }\n    return data;\n  }\n\n  protected override onFormValueChange(\n    formData: Record<string, string | number>,\n  ): void {\n    const transformedData = this.transformFormData(formData);\n    this.formValueChange.emit(transformedData);\n  }\n}\n","<div class=\"card pt-2\">\n  <div class=\"mb-4 p-2 flex justify-start items-center\">\n    <fa-icon\n      [icon]=\"faUserLock\"\n      class=\"!text-[2.5rem]\"\n      [ngClass]=\"{ 'icon-primary': isFormEditable() }\"\n    ></fa-icon>\n\n    <div class=\"pl-6 flex-1\">\n      <div class=\"flex justify-between items-center\">\n        <h2 class=\"text-xl font-semibold m-0\">User Roles</h2>\n        @if (!isFormEditable() && !createMode()) {\n          <div class=\"icon-light\">\n            <span\n              class=\"pi pi-pen-to-square action hover !text-2xl\"\n              [attr.aria-label]=\"'Edit user roles details'\"\n              (click)=\"onEdit()\"\n              (keydown.enter)=\"onEdit()\"\n            ></span>\n          </div>\n        }\n      </div>\n      <span>Select from the following user roles.</span>\n    </div>\n  </div>\n\n  @if (isFormEditable() || (createMode() && formFields.length)) {\n    <app-dynamic-form\n      [fields]=\"formFields\"\n      [actions]=\"actions\"\n      [hideActions]=\"createMode()\"\n      (formSubmit)=\"onSubmit($event)\"\n      (formValidityChange)=\"onFormValidityChange($event)\"\n      (formValueChange)=\"onFormValueChange($event)\"\n    >\n    </app-dynamic-form>\n  }\n\n  @if (!isFormEditable() && !createMode()) {\n    <app-grid\n      [data]=\"userRoleDetails()\"\n      [columns]=\"columns\"\n      [showGridLines]=\"false\"\n      [hideHeader]=\"true\"\n      tableStyleClass=\"info-display !w-auto\"\n    ></app-grid>\n  }\n</div>\n","import { CommonModule } from '@angular/common';\nimport { Component, computed, inject } from '@angular/core';\nimport { takeUntilDestroyed } from '@angular/core/rxjs-interop';\nimport { Validators } from '@angular/forms';\nimport { FontAwesomeModule } from '@fortawesome/angular-fontawesome';\nimport { faKey } from '@fortawesome/free-solid-svg-icons';\nimport { ButtonModule } from 'primeng/button';\nimport {\n  UserApiKeyCreateRequest,\n  AccountsService,\n  UserResponse,\n  ApiKey,\n} from '../../../../../api';\nimport { DynamicFormComponent } from '../../../../../shared/components/forms/dynamic-form/dynamic-form.component';\nimport { ModalListFormComponent } from '../../../../../shared/components/forms/modal-list-form/modal-list-form.component';\nimport { GridComponent } from '../../../../../shared/components/grid/grid.component';\nimport {\n  ListFieldModalConfig,\n  FormFieldConfig,\n  createTextField,\n  createModalListField,\n  createTextAreaField,\n} from '../../../../../shared/models';\nimport {\n  isDefined,\n  isEmpty,\n  isNullOrUndefined,\n} from '../../../../../shared/utils';\nimport { EntitySectionBaseComponent } from '../../base';\nimport { firstValueFrom } from 'rxjs';\nimport { DialogService, DynamicDialogRef } from 'primeng/dynamicdialog';\nimport { ConfirmationService, ConfirmEventType } from 'primeng/api';\nimport { ClientDataService } from '../../../../clients/services/client-data.service';\n\n@Component({\n  selector: 'app-user-api-keys-section',\n  imports: [\n    CommonModule,\n    ButtonModule,\n    GridComponent,\n    DynamicFormComponent,\n    FontAwesomeModule,\n  ],\n  templateUrl: './user-api-keys-section.component.html',\n  styleUrl: './user-api-keys-section.component.scss',\n})\nexport class UserApiKeysSectionComponent extends EntitySectionBaseComponent<\n  UserResponse | UserApiKeyCreateRequest\n> {\n  private readonly accountsService = inject(AccountsService);\n  private readonly dialogService = inject(DialogService);\n  private readonly confirmationService = inject(ConfirmationService);\n  faKey = faKey;\n  private readonly userProfileService = inject(ClientDataService);\n\n  readonly userApiKeyDetails = computed(() => {\n    const apiKeyDetails: Record<string, ApiKey> = this.entity()?.apiKeys;\n    if (!isDefined(apiKeyDetails)) return [];\n\n    return [\n      {\n        key: 'Keys',\n        value: !isEmpty(apiKeyDetails)\n          ? Object.values(apiKeyDetails)\n              .map((item) => item.name)\n              .join(', ')\n          : 'None',\n      },\n    ];\n  });\n  userApiKeysModalConfig: ListFieldModalConfig<ApiKey> | undefined;\n\n  constructor() {\n    super();\n\n    // Setup initial columns\n    this.columns = [\n      { field: 'key', header: '', transform: 'uppercase' },\n      { field: 'value', header: '' },\n    ];\n  }\n\n  protected override updateFormFields(): void {\n    const userEntity = this.entity(); // Can be UserResponse or UserApiKeyCreateRequest\n\n    this.userApiKeysModalConfig = {\n      modalComponent: ModalListFormComponent,\n      modalTitle: 'New API Key',\n      defaultItemProvider: () => ({\n        name: '',\n        policies: [],\n      }),\n      listItemFormatter: (item: Record<string, ApiKey>) => ({\n        id: Object.keys(item)[0] ?? '',\n        title: item[Object.keys(item)[0]].name ?? '',\n        display: Object.keys(item)[0] ?? '',\n      }),\n      modalFields: (item: Partial<ApiKey> | undefined): FormFieldConfig[] => [\n        createTextField('name', 'Key Name', item?.name, {\n          name: 'name',\n          validations: [\n            {\n              name: 'required',\n              validator: Validators.required,\n              message: 'Name is required',\n            },\n          ],\n        }),\n      ],\n      subHeader: 'Enter a descriptive name for your new API key.',\n      onSubmit: async (formInput: ApiKey, dialogRef: DynamicDialogRef) => {\n        const createRequest: UserApiKeyCreateRequest = {\n          name: formInput.name ?? '',\n          policies: formInput.policies ?? [],\n        };\n\n        const currentOwnerId = userEntity?.id;\n        if (isNullOrUndefined(currentOwnerId)) {\n          console.error('Owner ID is missing. Cannot create API key.');\n          // Potentially show an error dialog, though original only logged for this specific check.\n          // For consistency with how other errors are handled, let's show a dialog.\n          this._showErrorDialog(\n            'Error Creating API Key',\n            'Cannot create API key: User information is missing.',\n          );\n          return false;\n        }\n\n        try {\n          const createdApiKey = await firstValueFrom(\n            this.accountsService\n              .createApiKey(currentOwnerId, createRequest)\n              .pipe(takeUntilDestroyed(this.destroyRef)),\n          );\n\n          dialogRef.close(createdApiKey); // Close the current (creation) dialog\n          this._showCreatedApiKeyDialog(createdApiKey, userEntity);\n          return; // Indicate success to ModalListFormComponent\n        } catch (error) {\n          console.error('Failed to create API key:', error);\n          this._showErrorDialog(\n            'Error Creating API Key',\n            'An error occurred while creating the API key. Please try again or contact support.',\n          );\n          return false; // Keep the original creation dialog open\n        }\n      },\n      onDeleteItem: async (item: Record<string, ApiKey>) => {\n        const apiKeyId = Object.keys(item)[0];\n        const currentOwnerId = userEntity?.id;\n\n        if (isNullOrUndefined(apiKeyId)) {\n          console.error('Missing apiKeyId for deletion.');\n          // Original did not show a dialog here, just returned false.\n          // To maintain consistency with other error handling, a dialog could be added.\n          // However, sticking to minimal change for this specific console error.\n          return false;\n        }\n\n        if (isNullOrUndefined(currentOwnerId)) {\n          console.error('Owner ID is missing. Cannot delete API key.');\n          this._showErrorDialog(\n            'Error Deleting API Key',\n            'Cannot delete API key: User information is missing.',\n          );\n          return false;\n        }\n\n        return this.handleApiKeyRemoval(currentOwnerId, apiKeyId);\n      },\n    };\n    this.formFields = [\n      createModalListField(\n        'apiKeys',\n        'Keys',\n        isDefined(userEntity?.apiKeys)\n          ? Object.entries(userEntity?.apiKeys).map(([key, value]) => ({\n              [key]: value,\n            }))\n          : [],\n        {\n          layout: 'horizontal',\n          labelWidth: '1/3',\n          name: 'apiKeys',\n          props: {\n            modalConfig: this\n              .userApiKeysModalConfig as unknown as ListFieldModalConfig<unknown>,\n          },\n        },\n      ),\n    ];\n  }\n\n  private handleApiKeyRemoval(\n    currentOwnerId: string,\n    apiKeyId: string,\n  ): boolean | void | PromiseLike<boolean | void> {\n    return new Promise<boolean>((resolve) => {\n      this.confirmationService.confirm({\n        message: `Are you sure you want to delete this API key? Anyone using this key will immediately lose access.`,\n        header: 'Confirmation',\n        icon: 'pi pi-exclamation-triangle',\n        acceptButtonProps: {\n          label: 'Delete',\n        },\n        rejectButtonProps: {\n          label: 'Cancel',\n          severity: 'secondary',\n        },\n        accept: async () => {\n          try {\n            await firstValueFrom(\n              this.accountsService\n                .deleteApiKey(currentOwnerId, apiKeyId)\n                .pipe(takeUntilDestroyed(this.destroyRef)),\n            ).then(() => {\n              this.broadcastService.broadcast('entity-updated', {\n                entityType: 'user',\n                operation: 'delete',\n                entityId: currentOwnerId,\n                data: { apiKeyId },\n              });\n              resolve(true);\n            });\n          } catch (error) {\n            console.error(\n              'Failed to delete API key via custom handler:',\n              error,\n            );\n            const errorMessage = `Failed to delete API key: ${(error as Error).message || 'Unknown error'}`;\n            this._showErrorDialog(\n              'Error Deleting API Key',\n              'An error occurred. Please try again or contact support.',\n              [\n                {\n                  type: 'custom',\n                  key: 'errorMessageDisplay',\n                  template: 'errorDisplay', // Ensure this template is handled by ModalListFormComponent\n                  props: { message: errorMessage },\n                  name: 'custom',\n                },\n              ],\n            );\n            resolve(false); // Prevent default client-side deletion\n          }\n        },\n        reject: (type: ConfirmEventType) => {\n          if (\n            type === ConfirmEventType.REJECT ||\n            type === ConfirmEventType.CANCEL\n          ) {\n            resolve(false);\n          }\n        },\n      });\n    });\n  }\n\n  private _showCreatedApiKeyDialog(\n    createdApiKey: ApiKey,\n    userEntity: UserResponse | UserApiKeyCreateRequest | null,\n  ): void {\n    // Delay to ensure the creation dialog closes before opening the new one\n    setTimeout(() => {\n      const newDialogRef = this.dialogService.open(ModalListFormComponent, {\n        header: 'API Key Created Successfully',\n        width: '500px',\n        contentStyle: { 'max-height': '500px', overflow: 'auto' },\n        data: {\n          fields: [\n            createTextField(\n              'displayedKeyName',\n              'Key Name',\n              createdApiKey.name,\n              {\n                name: 'displayedKeyName',\n                disabled: true,\n              },\n            ),\n            createTextAreaField(\n              'apiTokenValue',\n              'API Key',\n              createdApiKey['key'],\n              {\n                name: 'apiTokenValue',\n                readonly: true,\n              },\n            ),\n          ],\n          actions: [\n            {\n              label: 'Copy Key & Close',\n              severity: 'primary',\n              icon: 'pi pi-copy',\n              action: () => {\n                if (isDefined(createdApiKey['key'])) {\n                  navigator.clipboard\n                    .writeText(createdApiKey['key'])\n                    .then(() =>\n                      this.broadcastService.broadcast('entity-updated', {\n                        entityType: 'user',\n                        operation: 'update',\n                        entityId: userEntity?.id,\n                        data: userEntity, // Note: userEntity might be slightly stale here regarding its own apiKeys list\n                      }),\n                    )\n                    .catch((err) =>\n                      console.error('Failed to copy API Key: ', err),\n                    );\n                }\n                newDialogRef?.close();\n              },\n            },\n          ],\n          modalTitle: 'API Key Details',\n          subHeader:\n            'Your API key is displayed below. This will only be shown to you once and cannot be recovered. Make sure to copy and safely store the value before dismissing this message.',\n          hideForm: true,\n          isDisplayMode: true,\n        },\n      });\n    }, 300);\n  }\n\n  private _showErrorDialog(\n    header: string,\n    subHeader: string,\n    fields?: FormFieldConfig[],\n  ): void {\n    // eslint-disable-next-line prefer-const\n    let dialogRefItself: DynamicDialogRef | undefined;\n\n    const dialogConfigData = {\n      actions: [\n        {\n          label: 'Close',\n          severity: 'secondary',\n          action: () => {\n            if (dialogRefItself) {\n              dialogRefItself.close();\n            }\n          },\n        },\n      ],\n      subHeader,\n      hideForm: true,\n      isDisplayMode: true,\n      fields: [] as FormFieldConfig[],\n    };\n\n    if (fields) {\n      dialogConfigData.fields = fields;\n    }\n\n    dialogRefItself = this.dialogService.open(ModalListFormComponent, {\n      header,\n      width: '400px', // Consistent width for error dialogs\n      data: dialogConfigData,\n    });\n  }\n\n  protected override submitChanges(\n    _formData: Record<string, Record<string, unknown>[]>,\n  ): void {\n    const user = this.entity();\n    if (isNullOrUndefined(user)) return;\n\n    this.broadcastService.broadcast('entity-updated', {\n      entityType: 'user',\n      operation: 'update',\n      entityId: user.id,\n      data: user,\n    });\n  }\n}\n","<div class=\"card pt-2\">\n  <div class=\"mb-4 p-2 flex justify-start items-center\">\n    <fa-icon\n      [icon]=\"faKey\"\n      class=\"!text-[2.5rem]\"\n      [ngClass]=\"{ 'icon-primary': isFormEditable() }\"\n    ></fa-icon>\n\n    <div class=\"pl-6 flex-1\">\n      <div class=\"flex justify-between items-center\">\n        <h2 class=\"text-xl font-semibold m-0\">API Keys</h2>\n        @if (!isFormEditable() && !createMode()) {\n          <div class=\"icon-light\">\n            <span\n              class=\"pi pi-pen-to-square action hover !text-2xl\"\n              [attr.aria-label]=\"'Edit API keys details'\"\n              (click)=\"onEdit()\"\n              (keydown.enter)=\"onEdit()\"\n            ></span>\n          </div>\n        }\n      </div>\n      <span\n        >Generate API keys that can be used to link this user account to third\n        party systems.</span\n      >\n    </div>\n  </div>\n\n  @if (isFormEditable() || (createMode() && formFields.length)) {\n    <app-dynamic-form\n      [fields]=\"formFields\"\n      [actions]=\"actions\"\n      [hideActions]=\"createMode()\"\n      (formSubmit)=\"onSubmit($event)\"\n      (formValidityChange)=\"onFormValidityChange($event)\"\n      (formValueChange)=\"onFormValueChange($event)\"\n    >\n    </app-dynamic-form>\n  }\n\n  @if (!isFormEditable() && !createMode()) {\n    <app-grid\n      [data]=\"userApiKeyDetails()\"\n      [columns]=\"columns\"\n      [showGridLines]=\"false\"\n      [hideHeader]=\"true\"\n      tableStyleClass=\"info-display !w-auto\"\n    ></app-grid>\n  }\n</div>\n","import { Component, computed, inject } from '@angular/core';\nimport { EntitySectionBaseComponent } from '../../base';\nimport { faBell } from '@fortawesome/free-solid-svg-icons';\n\nimport {\n  UserListItem,\n  UserCreateRequest,\n  AccountsService,\n  NotificationSettings,\n  NotificationActions,\n  UserResponse,\n} from '../../../../../api';\nimport { isDefined, isString } from '../../../../../shared/utils';\nimport {\n  createDateField,\n  createDropdownField,\n} from '../../../../../shared/models';\nimport { CommonModule } from '@angular/common';\nimport { FontAwesomeModule } from '@fortawesome/angular-fontawesome';\nimport { ButtonModule } from 'primeng/button';\nimport { DynamicFormComponent } from '../../../../../shared/components/forms/dynamic-form/dynamic-form.component';\nimport { GridComponent } from '../../../../../shared/components/grid/grid.component';\nimport { Observable } from 'rxjs';\nimport { EntityOperationRegistryService } from '../../../services/entity/entity-operation-registry.service';\n\n@Component({\n  selector: 'app-user-notify-section',\n  imports: [\n    CommonModule,\n    ButtonModule,\n    GridComponent,\n    DynamicFormComponent,\n    FontAwesomeModule,\n  ],\n  templateUrl: './user-notify-section.component.html',\n  styleUrl: './user-notify-section.component.scss',\n})\nexport class UserNotifySectionComponent extends EntitySectionBaseComponent<\n  UserListItem | UserCreateRequest\n> {\n  private readonly accountsService = inject(AccountsService);\n  private readonly operationRegistry = inject(EntityOperationRegistryService);\n\n  faBell = faBell;\n\n  readonly userNotificationDetails = computed(() => {\n    const userNotifications: NotificationSettings =\n      this.entity()?.notifySettings;\n\n    if (!isDefined(userNotifications)) {\n      return [];\n    }\n    return [\n      { key: 'Allow SMS from', value: userNotifications.smsTime?.from },\n      { key: 'Allow SMS to', value: userNotifications.smsTime?.to },\n      {\n        key: 'Low Priority',\n        value: this.formatLabel(userNotifications.actions?.low),\n      },\n      {\n        key: 'Medium Priority',\n        value: this.formatLabel(userNotifications.actions?.medium),\n      },\n      {\n        key: 'High Priority',\n        value: this.formatLabel(userNotifications.actions?.high),\n      },\n    ];\n  });\n\n  constructor() {\n    super();\n\n    // Setup initial columns\n    this.columns = [\n      { field: 'key', header: '', transform: 'uppercase' },\n      { field: 'value', header: '', transform: 'capitalize' },\n    ];\n  }\n\n  protected override updateFormFields(): void {\n    const user = this.entity();\n    this.formFields = [\n      {\n        name: 'smsTime',\n        key: 'smsTime',\n        type: 'group',\n        fields: [\n          createDateField(\n            'from',\n            'Allow SMS from',\n            user?.notifySettings?.smsTime?.from,\n            {\n              name: 'from',\n              placeholder: 'Select time',\n              props: {\n                timeOnly: true,\n                showSeconds: true,\n              },\n              style: { width: '100%' },\n            },\n          ),\n          createDateField(\n            'to',\n            'Allow SMS to',\n            user?.notifySettings?.smsTime?.to,\n            {\n              name: 'to',\n              placeholder: 'Select time',\n              props: {\n                timeOnly: true,\n                showSeconds: true,\n              },\n              style: { width: '100%' },\n            },\n          ),\n        ],\n      },\n      {\n        key: 'actions',\n        type: 'group',\n        name: 'actions',\n        fields: [\n          createDropdownField(\n            'low',\n            'Low Priority',\n            Object.values(NotificationActions.LowEnum).map((value) => ({\n              label: this.formatLabel(value),\n              value,\n            })),\n            user?.notifySettings?.actions?.low,\n            {\n              name: 'low',\n              props: {\n                appendTo: 'body',\n              },\n            },\n          ),\n          createDropdownField(\n            'medium',\n            'Medium Priority',\n            Object.values(NotificationActions.MediumEnum).map((value) => ({\n              label: this.formatLabel(value),\n              value,\n            })),\n            user?.notifySettings?.actions?.medium,\n            {\n              name: 'medium',\n              props: {\n                appendTo: 'body',\n              },\n            },\n          ),\n          createDropdownField(\n            'high',\n            'High Priority',\n            Object.values(NotificationActions.HighEnum).map((value) => ({\n              label: this.formatLabel(value),\n              value,\n            })),\n            user?.notifySettings?.actions?.high,\n            {\n              name: 'high',\n              props: {\n                appendTo: 'body',\n              },\n            },\n          ),\n        ],\n      },\n    ];\n  }\n\n  override getUpdateMethod(): (\n    id: string,\n    data: Partial<UserResponse | UserCreateRequest>,\n  ) => Observable<UserResponse> {\n    return (\n      this.operationRegistry.getOperation<\n        UserCreateRequest | UserResponse,\n        UserCreateRequest,\n        UserResponse,\n        'update'\n      >('users', 'update') ??\n      ((id, data) =>\n        this.accountsService.updateUser(id, {\n          notifySettings: data,\n        }))\n    );\n  }\n\n  formatLabel(value?: string | null): string {\n    if (!isString(value)) return '';\n\n    switch (value.toLowerCase()) {\n      case 'emailsms':\n        return 'Email & SMS';\n      case 'sms':\n        return 'SMS';\n      default:\n        return value.charAt(0).toUpperCase() + value.slice(1);\n    }\n  }\n\n  protected override transformFormData(\n    formData:\n      | Record<string, unknown>\n      | Record<string, Record<string, unknown>[]>,\n  ) {\n    const data = formData as NotificationSettings;\n\n    if (isDefined(data['smsTime'])) {\n      const smsTime = data['smsTime'] as Record<string, string>; // Type assertion\n      const from = smsTime?.['from'];\n      const to = smsTime?.['to'];\n\n      // Regular expression to check for \"HH:mm:ss\" format\n      const timeOnlyRegex = /^\\d{2}:\\d{2}:\\d{2}$/;\n\n      // Only convert if 'from' is a string and not already in \"HH:mm:ss\" format\n      if (!timeOnlyRegex.test(from)) {\n        smsTime['from'] = this.convertToTimeOnly(from);\n      }\n\n      // Only convert if 'to' is a string and not already in \"HH:mm:ss\" format\n      if (!timeOnlyRegex.test(to)) {\n        smsTime['to'] = this.convertToTimeOnly(to);\n      }\n    }\n\n    return data;\n  }\n\n  convertToTimeOnly(dateTimeString: string): string {\n    const date = new Date(dateTimeString);\n    // Check if the date is valid before trying to get hours, minutes, seconds\n    if (isNaN(date.getTime())) {\n      // dateTimeString was not a parsable date string (and not \"HH:mm:ss\" due to prior check)\n      // Return the original string or a sensible default/error.\n      // For example, returning the original string:\n      console.warn(\n        `Could not parse '${dateTimeString}' as a valid date. Returning original string.`,\n      );\n      return dateTimeString;\n      // Or, return a default time or error placeholder:\n      // return \"00:00:00\"; // Or some error indicator\n    }\n    const hours = String(date.getHours()).padStart(2, '0');\n    const minutes = String(date.getMinutes()).padStart(2, '0');\n    const seconds = String(date.getSeconds()).padStart(2, '0');\n    return `${hours}:${minutes}:${seconds}`;\n  }\n}\n","<div class=\"card pt-2\">\n  <div class=\"mb-4 p-2 flex justify-start items-center\">\n    <fa-icon\n      [icon]=\"faBell\"\n      class=\"!text-[2.5rem]\"\n      [ngClass]=\"{ 'icon-primary': isFormEditable() }\"\n    ></fa-icon>\n\n    <div class=\"pl-6 flex-1\">\n      <div class=\"flex justify-between items-center\">\n        <h2 class=\"text-xl font-semibold m-0\">Notifications</h2>\n        @if (!isFormEditable() && !createMode()) {\n          <div class=\"icon-light\">\n            <span\n              class=\"pi pi-pen-to-square action hover !text-2xl\"\n              [attr.aria-label]=\"'Edit notification details'\"\n              (click)=\"onEdit()\"\n              (keydown.enter)=\"onEdit()\"\n            ></span>\n          </div>\n        }\n      </div>\n      <span>Configure alert notification actions and allowed SMS times.</span>\n    </div>\n  </div>\n\n  @if (isFormEditable() || (createMode() && formFields.length)) {\n    <app-dynamic-form\n      [fields]=\"formFields\"\n      [actions]=\"actions\"\n      [hideActions]=\"createMode()\"\n      (formSubmit)=\"onSubmit($event)\"\n      (formValidityChange)=\"onFormValidityChange($event)\"\n      (formValueChange)=\"onFormValueChange($event)\"\n    >\n    </app-dynamic-form>\n  }\n\n  @if (!isFormEditable() && !createMode()) {\n    <app-grid\n      [data]=\"userNotificationDetails()\"\n      [columns]=\"columns\"\n      [showGridLines]=\"false\"\n      [hideHeader]=\"true\"\n      tableStyleClass=\"info-display !w-auto\"\n    ></app-grid>\n  }\n</div>\n","import {\n  Component,\n  computed,\n  inject,\n  signal,\n  OnInit,\n  input,\n  OnDestroy,\n  ChangeDetectorRef,\n  effect,\n} from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { takeUntilDestroyed } from '@angular/core/rxjs-interop';\nimport {\n  Observable,\n  Subject,\n  debounceTime,\n  firstValueFrom,\n  switchMap,\n} from 'rxjs';\n\n// PrimeNG imports\nimport { ButtonModule } from 'primeng/button';\nimport { MessageModule } from 'primeng/message';\n\n// FontAwesome\nimport { FontAwesomeModule } from '@fortawesome/angular-fontawesome';\nimport { faClipboardList } from '@fortawesome/free-solid-svg-icons';\n\n// API imports\nimport {\n  AccountsService,\n  UserListItem,\n  UserCreateRequest,\n  UserResponse,\n  UserPermissions,\n  UserClientPermissions,\n  ClientListItem,\n  ClientsService,\n} from '../../../../../api';\n\n// Shared imports\nimport { GridComponent } from '../../../../../shared/components/grid/grid.component';\nimport {\n  hasProperty,\n  isDefined,\n  isEmpty,\n  isNullOrUndefined,\n} from '../../../../../shared/utils';\n\n// Component imports\nimport { EntitySectionBaseComponent } from '../../base';\nimport { DynamicFormComponent } from '../../../../../shared/components/forms/dynamic-form/dynamic-form.component';\nimport { RequestCacheService } from '../../../../../shared/services/request-cache.service';\nimport {\n  createAssetFilterField,\n  createAutocompleteField,\n  createModalListField,\n  FormFieldConfig,\n  ListFieldModalConfig,\n} from '../../../../../shared/models';\nimport { ModalListFormComponent } from '../../../../../shared/components/forms/modal-list-form/modal-list-form.component';\nimport { Validators } from '@angular/forms';\nimport { AuthDataService } from '../../../../../core/services/auth-data.service';\nimport { UtilityService } from '../../../../../core/services/utility.service';\nimport {\n  CLIENT_SEARCH_LIMIT,\n  SEARCH_DEBOUNCE_TIME,\n} from '../../../../../core/models';\n\n@Component({\n  selector: 'app-user-client-permissions-section',\n  imports: [\n    CommonModule,\n    ButtonModule,\n    GridComponent,\n    MessageModule,\n    FontAwesomeModule,\n    DynamicFormComponent,\n  ],\n  templateUrl: './user-client-permissions-section.component.html',\n  styleUrl: './user-client-permissions-section.component.scss',\n})\nexport class UserClientPermissionsSectionComponent\n  extends EntitySectionBaseComponent<UserListItem | UserCreateRequest>\n  implements OnInit, OnDestroy\n{\n  readonly ownerId = input<string | null>(null);\n  private readonly accountsService = inject(AccountsService);\n  private readonly requestCache = inject(RequestCacheService);\n  private readonly utilityService = inject(UtilityService);\n  private readonly clientsService = inject(ClientsService);\n  private readonly authDataService = inject(AuthDataService);\n\n  private readonly cdr = inject(ChangeDetectorRef);\n  faClipboardList = faClipboardList;\n  private readonly clientNames = signal<Record<string, string>>({});\n  private clientCacheKeys: string[] = [];\n  readonly userClientPermissions = computed(() => {\n    const user = this.entity();\n    const permissions = (user as unknown as UserResponse)?.permissions?.clients;\n    const names = this.clientNames();\n\n    if (!isDefined(permissions)) {\n      return [];\n    }\n\n    const clientIds = Object.keys(permissions);\n\n    if (clientIds.length === 0) {\n      return [\n        {\n          key: 'Clients',\n          value: 'No Clients',\n        },\n      ];\n    }\n\n    if (isEmpty(names)) {\n      return [\n        {\n          key: 'Clients',\n          value: 'Loading client names...',\n        },\n      ];\n    }\n\n    // Map client IDs to names, fallback to ID if name not loaded yet\n    const clientNames = clientIds.map((id) => names[id] || id).join(', ');\n\n    return [\n      {\n        key: 'Clients',\n        value: clientNames,\n      },\n    ];\n  });\n  clientPermissionsModalConfig:\n    | ListFieldModalConfig<{ clientId: string } & UserClientPermissions>\n    | undefined;\n  clientSearchResults = signal<ClientListItem[] | undefined>([]);\n  private readonly searchSubject = new Subject<string>();\n  private readonly isLoadingClients = signal<boolean>(false);\n\n  // Track the selected client ID for the modal form\n  // This is used to pass the client ID as ownerId to the asset filter field\n  // and to disable the client autocomplete once a selection is made\n  private readonly selectedClientId = signal<string | undefined>(undefined);\n  // Force modal refresh when client changes\n  private readonly modalRefreshTrigger = signal<number>(0);\n\n  constructor() {\n    super();\n\n    // Setup initial columns\n    this.columns = [\n      { field: 'key', header: '', transform: 'uppercase' },\n      { field: 'value', header: '' },\n    ];\n\n    // React when a client gets selected to rebuild modal field configs\n    effect(() => {\n      this.selectedClientId(); // dependency tracking\n      if (this.clientPermissionsModalConfig) this.rebuildModalFields();\n    });\n  }\n\n  ngOnInit() {\n    void this.loadClientPermissions();\n    this.setupClientSearch();\n  }\n\n  override ngOnDestroy() {\n    super.ngOnDestroy();\n    // Clear all client cache entries created by this component\n    this.clientCacheKeys.forEach((key) => {\n      this.requestCache.clearCache(key);\n    });\n    this.clientCacheKeys = [];\n  }\n\n  protected override updateFormFields(): void {\n    // Reset the selected client ID and modal refresh trigger when updating form fields\n    this.selectedClientId.set(undefined);\n    this.modalRefreshTrigger.set(0);\n\n    const userPermissions: Record<string, UserClientPermissions> =\n      this.entity()?.permissions?.clients ?? {};\n    const permissionsArray = Object.entries(userPermissions).map(\n      ([clientId, permissions]) => ({\n        clientId,\n        ...permissions,\n      }),\n    );\n\n    // Create a reactive modal configuration that updates when selectedClientId changes\n    this.clientPermissionsModalConfig = {\n      modalComponent: ModalListFormComponent,\n      modalTitle: 'Client Permissions',\n      listItemFormatter: (\n        item: { clientId: string } & UserClientPermissions,\n      ) => {\n        const clientName = this.clientNames()[item.clientId] || item.clientId;\n        return {\n          id: item.clientId,\n          display: `${clientName}`,\n          icon: 'pi pi-building',\n        };\n      },\n      modalFields: (): FormFieldConfig[] => this.createModalFields(),\n    };\n\n    this.formFields = [\n      createModalListField('permissions', 'Clients', permissionsArray, {\n        name: 'permissions',\n        validations: [\n          {\n            name: 'required',\n            validator: Validators.required,\n            message: 'Client permissions are required',\n          },\n        ],\n        props: {\n          modalConfig: this\n            .clientPermissionsModalConfig as unknown as ListFieldModalConfig<unknown>,\n        },\n      }),\n    ];\n  }\n\n  private rebuildModalFields(): void {\n    // Reassign a fresh modalFields function so consumers re-evaluate\n    if (this.clientPermissionsModalConfig) {\n      this.clientPermissionsModalConfig = {\n        ...this.clientPermissionsModalConfig,\n        modalFields: () => this.createModalFields(),\n      } as typeof this.clientPermissionsModalConfig;\n      // Nudge formFields array reference (if modal component checks it)\n      this.formFields = [...this.formFields];\n      this.cdr.detectChanges();\n    }\n  }\n\n  private createModalFields(): FormFieldConfig[] {\n    const currentClientId = this.selectedClientId();\n\n    // Create the autocomplete field\n    const clientField = createAutocompleteField(\n      'client',\n      'Client',\n      '',\n      () => this.clientSearchResults() || [],\n      this.searchClient.bind(this),\n      {\n        name: 'client',\n        props: {\n          forceSelection: true,\n          field: 'name',\n          placeholder: 'Search for clients...',\n          completeOnFocus: true,\n          typeahead: true,\n          showEmptyMessage: true,\n          appendTo: 'body',\n        },\n        autocompleteLoading: () => this.isLoadingClients(), // Reactive loading state\n        hint: 'Enter a client name.',\n        events: {\n          onChange: (value: string) => {\n            this.updateSelectedClientId(value);\n            // Trigger modal refresh to update fields with new client ID\n            this.modalRefreshTrigger.update((count) => count + 1);\n            this.cdr.detectChanges();\n          },\n        },\n      },\n    );\n\n    // Set readonly if client is already selected\n    clientField.readonly = currentClientId !== undefined;\n\n    // Create the asset filter field\n    const assetFilterField = createAssetFilterField(\n      'filter',\n      'Asset Filter',\n      undefined,\n      ['asset'],\n      {\n        name: 'filter',\n        required: true,\n        validations: [\n          {\n            name: 'required',\n            validator: Validators.required,\n            message: 'Asset filter is required',\n          },\n        ],\n        props: {\n          multiSelect: true,\n          showGroupTabs: true,\n          ownerId: currentClientId, // Pass the selected client ID as ownerId\n        },\n        readonly: currentClientId === undefined, // Disable if no client selected\n      },\n    );\n\n    return [clientField, assetFilterField];\n  }\n\n  private updateSelectedClientId(value: string) {\n    let clientId: string | undefined;\n\n    try {\n      // Try to parse as JSON first (if it's a stringified object)\n      const parsedValue = JSON.parse(value);\n      if (\n        parsedValue !== null &&\n        typeof parsedValue === 'object' &&\n        'id' in parsedValue\n      ) {\n        clientId = parsedValue.id as string;\n      }\n    } catch {\n      // If parsing fails, treat value as a direct client ID or search term\n      // For autocomplete, we usually get the selected object, but handle both cases\n      if (value && value.trim() !== '') {\n        // Check if this value matches any of our search results\n        const searchResults = this.clientSearchResults();\n        const matchedClient = searchResults?.find(\n          (client) => client.id === value || client.name === value,\n        );\n        if (matchedClient) {\n          clientId = matchedClient.id;\n        }\n      }\n    }\n\n    this.selectedClientId.set(clientId);\n  }\n\n  protected override submitChanges(formData: Record<string, unknown>): void {\n    const user = this.entity();\n    if (isNullOrUndefined(user)) return;\n\n    this.accountsService\n      .updateUser(user.id, {\n        permissions: formData['permissions'] as UserPermissions,\n      })\n      .pipe(takeUntilDestroyed(this.destroyRef))\n      .subscribe({\n        next: (response) => {\n          this.isFormEditable.set(false);\n          this.broadcastService.broadcast('entity-updated', {\n            entityType: 'user',\n            operation: 'update',\n            entityId: user.id,\n            data: response,\n          });\n          void this.loadClientPermissions(); // Refresh the list\n        },\n        error: () => {\n          this.isFormEditable.set(true);\n        },\n      });\n  }\n\n  override getUpdateMethod(): (\n    id: string,\n    data: Partial<UserResponse | UserCreateRequest>,\n  ) => Observable<UserResponse> {\n    return (id, data) => this.accountsService.updateUser(id, data);\n  }\n\n  async loadClientPermissions(): Promise<void> {\n    const user = this.entity();\n    const permissions = (user as unknown as UserResponse)?.permissions?.clients;\n\n    if (!isDefined(permissions)) {\n      return;\n    }\n\n    const clientIds = Object.keys(permissions);\n    const namePromises = clientIds.map(async (clientId) => {\n      const name = await this.loadClientName(clientId);\n      return { id: clientId, name };\n    });\n\n    try {\n      const clientNamesArray = await Promise.all(namePromises);\n      const namesRecord: Record<string, string> = {};\n\n      clientNamesArray.forEach(({ id, name }) => {\n        namesRecord[id] = name;\n      });\n\n      this.clientNames.set(namesRecord);\n    } catch (error) {\n      console.error('Error loading client names:', error);\n    }\n  }\n\n  async loadClientName(clientId: string): Promise<string> {\n    if (!clientId) return Promise.resolve('Unknown Client');\n\n    const cacheKey = `client-name/${clientId}`;\n\n    // Track this cache key for cleanup\n    if (!this.clientCacheKeys.includes(cacheKey)) {\n      this.clientCacheKeys.push(cacheKey);\n    }\n\n    try {\n      const client = await this.requestCache.getOrFetchAsync(cacheKey, () =>\n        firstValueFrom(this.accountsService.getClient(clientId)),\n      );\n      return client.name ?? clientId;\n    } catch {\n      return 'Unknown Client';\n    }\n  }\n\n  private setupClientSearch(): void {\n    this.searchSubject\n      .pipe(\n        debounceTime(SEARCH_DEBOUNCE_TIME),\n        takeUntilDestroyed(this.destroyRef),\n        switchMap((searchTerm) => {\n          // Set loading to true when starting search\n          this.isLoadingClients.set(true);\n\n          const owner = this.authDataService.getUserProfile()?.owner;\n          if (!isDefined(owner) || !hasProperty(owner, 'id')) {\n            throw new Error('Owner ID not found');\n          }\n\n          const filters = {\n            state: { value: 'active', operator: '=' },\n            name: { value: `*${searchTerm}*`, operator: '=' },\n          };\n          const rqlFilter = this.utilityService.constructRqlFilter(filters);\n\n          return this.clientsService.listClients(\n            owner.id,\n            0,\n            CLIENT_SEARCH_LIMIT,\n            'name',\n            rqlFilter,\n          );\n        }),\n      )\n      .subscribe({\n        next: (data) => {\n          // Set loading to false when search completes\n          this.isLoadingClients.set(false);\n\n          if (isDefined(data) && hasProperty(data, 'items')) {\n            this.clientSearchResults.set(\n              isNullOrUndefined(data.items) ? [] : data.items,\n            );\n            this.cdr.detectChanges();\n          }\n        },\n        error: (error) => {\n          // Set loading to false on error\n          this.isLoadingClients.set(false);\n\n          console.error('Error searching clients:', error);\n          this.clientSearchResults.set([]);\n        },\n      });\n  }\n\n  searchClient(searchTerm: string) {\n    if (!searchTerm || searchTerm.trim() === '' || searchTerm.length < 3) {\n      this.clientSearchResults.set([]);\n      this.isLoadingClients.set(false);\n    } else {\n      this.searchSubject.next(searchTerm.trim());\n    }\n  }\n}\n","<div class=\"card pt-2\">\n  <div class=\"mb-4 p-2 flex justify-start items-center\">\n    <fa-icon\n      [icon]=\"faClipboardList\"\n      class=\"!text-[2.5rem]\"\n      [ngClass]=\"{ 'icon-primary': isFormEditable() }\"\n    ></fa-icon>\n\n    <div class=\"pl-6 flex-1\">\n      <div class=\"flex justify-between items-center\">\n        <h2 class=\"text-xl font-semibold m-0\">Client Permissions</h2>\n        @if (!isFormEditable() && !createMode()) {\n          <div class=\"icon-light\">\n            <span\n              class=\"pi pi-pen-to-square action hover !text-2xl\"\n              [attr.aria-label]=\"'Edit client permissions'\"\n              (click)=\"onEdit()\"\n              (keydown.enter)=\"onEdit()\"\n            ></span>\n          </div>\n        }\n      </div>\n      <span\n        >You can restrict this user to only particular clients and assets by\n        specifying them in the list below.</span\n      >\n    </div>\n  </div>\n\n  @if (isFormEditable() || (createMode() && formFields.length)) {\n    <app-dynamic-form\n      [fields]=\"formFields\"\n      [actions]=\"actions\"\n      [hideActions]=\"createMode()\"\n      (formSubmit)=\"onSubmit($event)\"\n      (formValidityChange)=\"onFormValidityChange($event)\"\n      (formValueChange)=\"onFormValueChange($event)\"\n    >\n    </app-dynamic-form>\n  }\n\n  <!-- Summary View for Read-only Mode -->\n  @if (!isFormEditable() && !createMode()) {\n    <app-grid\n      [data]=\"userClientPermissions()\"\n      [columns]=\"columns\"\n      [showGridLines]=\"false\"\n      [hideHeader]=\"true\"\n      tableStyleClass=\"info-display !w-auto\"\n    ></app-grid>\n  }\n</div>\n","import { Injectable } from '@angular/core';\nimport { AdminDetailSection } from '../models';\n\nimport { UserResponse } from '../../../api';\nimport { UserDetailsSectionComponent } from '../components/users/user-details-section/user-details-section.component';\nimport { FeedSectionComponent } from '../components/shared/feed-section/feed-section.component';\nimport { UserRolesSectionComponent } from '../components/users/user-roles-section/user-roles-section.component';\nimport { UserApiKeysSectionComponent } from '../components/users/user-api-keys-section/user-api-keys-section.component';\nimport { UserNotifySectionComponent } from '../components/users/user-notify-section/user-notify-section.component';\nimport { UserClientPermissionsSectionComponent } from '../components/users/user-client-permissions-section/user-client-permissions-section.component';\n\n@Injectable({ providedIn: 'root' })\nexport class UserSectionConfigFactory {\n  /**\n   * Create sections for user information\n   * @param user The user object to display in the section\n   * @returns An array of AdminDetailSection objects representing the user information sections\n   */\n  createUserInformationSections(\n    user: UserResponse | null,\n    ownerId: string,\n  ): AdminDetailSection[] {\n    return [\n      {\n        id: 'user-details',\n        title: 'User Details',\n        component: UserDetailsSectionComponent,\n        componentInputs: { entity: user, ownerId },\n        category: 'information',\n        order: 10,\n      },\n      {\n        id: 'user-roles',\n        title: 'User Roles',\n        component: UserRolesSectionComponent,\n        componentInputs: { entity: user },\n        category: 'information',\n        order: 20,\n      },\n      {\n        id: 'user-client-permissions',\n        title: 'User Client Permissions',\n        component: UserClientPermissionsSectionComponent,\n        componentInputs: { entity: user },\n        category: 'information',\n        order: 30,\n      },\n      {\n        id: 'user-api-keys',\n        title: 'User API Keys',\n        component: UserApiKeysSectionComponent,\n        componentInputs: { entity: user },\n        category: 'information',\n        order: 70,\n      },\n      {\n        id: 'user-notifications',\n        title: 'User Notifications',\n        component: UserNotifySectionComponent,\n        componentInputs: { entity: user },\n        category: 'information',\n        order: 80,\n      },\n    ];\n  }\n\n  /**\n   * Create sections for user changes\n   * @param user The user object to display in the section\n   * @returns An array of AdminDetailSection objects representing the user changes sections\n   */\n  createChangesSection(user: UserResponse | null): AdminDetailSection[] {\n    return [\n      {\n        id: 'user-changes',\n        title: 'Changes',\n        component: FeedSectionComponent,\n        componentInputs: {\n          entity: user,\n        },\n        category: 'feed',\n        order: 10,\n      },\n    ];\n  }\n\n  /**\n   * Create all user sections in one call\n   * @param user The user object to display in the sections\n   * @returns An array of AdminDetailSection objects representing all user sections\n   */\n  createAllUserSections(\n    user: UserResponse | null,\n    ownerId: string,\n  ): AdminDetailSection[] {\n    return [\n      ...this.createUserInformationSections(user, ownerId),\n      ...this.createChangesSection(user),\n    ];\n  }\n}\n","import { Injectable, inject } from '@angular/core';\nimport { Observable, of } from 'rxjs';\n\nimport { isNullOrUndefined } from '../../../../shared/utils';\nimport { AssetListItem, AssetResponse, EntitiesService } from '../../../../api';\nimport {\n  DataGridParams,\n  EntityDataAdapter,\n  GridResponse,\n} from '../../../../shared/models';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class AssetsDataAdapter\n  implements EntityDataAdapter<AssetListItem, AssetResponse>\n{\n  private readonly entitiesService = inject(EntitiesService);\n\n  getList(params: DataGridParams): Observable<GridResponse<AssetListItem>> {\n    const { owner, limit, offset, sortField, filters } = params;\n\n    if (isNullOrUndefined(owner)) {\n      return of({ items: [], count: 0 });\n    }\n\n    return this.entitiesService.listAssets(\n      owner,\n      offset,\n      limit,\n      sortField as string,\n      filters,\n    );\n  }\n\n  getById(id: string): Observable<AssetResponse> {\n    return this.entitiesService.getAsset(id);\n  }\n}\n","import { Injectable, inject } from '@angular/core';\nimport { Observable, of } from 'rxjs';\n\nimport { isNullOrUndefined } from '../../../../shared/utils';\nimport { EntitiesService, ZoneListItem, ZoneResponse } from '../../../../api';\nimport {\n  DataGridParams,\n  EntityDataAdapter,\n  GridResponse,\n} from '../../../../shared/models';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class GeofencesDataAdapter\n  implements EntityDataAdapter<ZoneListItem, ZoneResponse>\n{\n  private readonly entitiesService = inject(EntitiesService);\n\n  getList(params: DataGridParams): Observable<GridResponse<ZoneListItem>> {\n    const { owner, limit, offset, sortField, filters } = params;\n\n    if (isNullOrUndefined(owner)) {\n      return of({ items: [], count: 0 });\n    }\n\n    return this.entitiesService.listZones(\n      owner,\n      offset,\n      limit,\n      sortField as string,\n      filters,\n    );\n  }\n\n  getById(id: string): Observable<ZoneResponse> {\n    return this.entitiesService.getZone(id);\n  }\n}\n","import { Injectable, inject } from '@angular/core';\nimport { Observable, of } from 'rxjs';\n\nimport { isNullOrUndefined } from '../../../../shared/utils';\nimport { AlertListItem, AlertResponse, EntitiesService } from '../../../../api';\nimport {\n  DataGridParams,\n  GridDataService,\n  GridResponse,\n} from '../../../../shared/models';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class AlertsDataAdapter implements GridDataService<AlertListItem> {\n  private readonly entitiesService = inject(EntitiesService);\n\n  getList(params: DataGridParams): Observable<GridResponse<AlertListItem>> {\n    const { owner, limit, offset, sortField, filters } = params;\n\n    if (isNullOrUndefined(owner)) {\n      return of({ items: [], count: 0 });\n    }\n\n    return this.entitiesService.listAlerts(\n      owner,\n      offset,\n      limit,\n      sortField as string,\n      filters,\n    );\n  }\n\n  getById(id: string): Observable<AlertResponse> {\n    return this.entitiesService.getAlert(id);\n  }\n}\n","import { Injectable, inject } from '@angular/core';\nimport { Observable, of } from 'rxjs';\n\nimport { isNullOrUndefined } from '../../../../shared/utils';\nimport {\n  DeviceListItem,\n  DeviceResponse,\n  EntitiesService,\n} from '../../../../api';\nimport {\n  DataGridParams,\n  GridDataService,\n  GridResponse,\n} from '../../../../shared/models';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class DevicesDataAdapter implements GridDataService<DeviceListItem> {\n  private readonly entitiesService = inject(EntitiesService);\n\n  getList(params: DataGridParams): Observable<GridResponse<DeviceListItem>> {\n    const { owner, limit, offset, sortField, filters } = params;\n\n    if (isNullOrUndefined(owner)) {\n      return of({ items: [], count: 0 });\n    }\n\n    return this.entitiesService.listDevices(\n      owner,\n      offset,\n      limit,\n      sortField as string,\n      filters,\n    );\n  }\n\n  getById(id: string): Observable<DeviceResponse> {\n    return this.entitiesService.getDevice(id);\n  }\n}\n","import { Injectable, inject } from '@angular/core';\nimport { Observable, of } from 'rxjs';\n\nimport { isNullOrUndefined } from '../../../../shared/utils';\nimport {\n  AssetTagListItem,\n  AssetTagResponse,\n  EntitiesService,\n} from '../../../../api';\nimport {\n  DataGridParams,\n  EntityDataAdapter,\n  GridResponse,\n} from '../../../../shared/models';\n\n@Injectable({ providedIn: 'root' })\nexport class AssetTagsDataAdapter\n  implements EntityDataAdapter<AssetTagListItem, AssetTagResponse>\n{\n  private readonly entitiesService = inject(EntitiesService);\n\n  getList(params: DataGridParams): Observable<GridResponse<AssetTagListItem>> {\n    const { owner, limit, offset, sortField, filters } = params;\n\n    if (isNullOrUndefined(owner)) {\n      return of({ items: [], count: 0 });\n    }\n\n    return this.entitiesService.listAssetTags(\n      owner,\n      offset,\n      limit,\n      sortField as string,\n      filters,\n    );\n  }\n\n  getById(id: string): Observable<AssetTagResponse> {\n    return this.entitiesService.getAssetTag(id);\n  }\n}\n","import { Injectable, inject } from '@angular/core';\nimport { Observable } from 'rxjs';\nimport {\n  DeviceProviderListItem,\n  DeviceProviderListResponse,\n  DeviceProviderResponse,\n  DeviceProvidersService,\n} from '../../../../api';\nimport { GridDataService } from '../../../../shared/models';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class DeviceProvidersDataAdapter\n  implements GridDataService<DeviceProviderListItem>\n{\n  private readonly service = inject(DeviceProvidersService);\n\n  getList(params: {\n    owner: string;\n    offset: number;\n    page: number;\n    limit: number;\n    sortField?: string;\n    sortOrder?: number;\n    filters?: string;\n    recurse?: boolean;\n  }): Observable<DeviceProviderListResponse> {\n    return this.service.listDeviceProviders(\n      params.owner,\n      params.recurse,\n      params.offset,\n      params.limit,\n      params.sortField,\n      params.filters,\n    );\n  }\n\n  getById(id: string): Observable<DeviceProviderResponse> {\n    return this.service.getDeviceProvider(id);\n  }\n}\n","import { Injectable, inject } from '@angular/core';\nimport { Observable } from 'rxjs';\nimport {\n  EmailProviderListItem,\n  EmailProvidersService,\n  EmailProviderListResponse,\n} from '../../../../api';\nimport { GridDataService } from '../../../../shared/models';\nimport { EmailProviderResponse } from '../../../../api/model/emailProviderResponse';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class EmailProvidersDataAdapter\n  implements GridDataService<EmailProviderListItem>\n{\n  private readonly service = inject(EmailProvidersService);\n\n  getList(params: {\n    owner: string;\n    offset: number;\n    page: number;\n    limit: number;\n    sortField?: string;\n    sortOrder?: number;\n    filters?: string;\n    recurse?: boolean;\n  }): Observable<EmailProviderListResponse> {\n    return this.service.listEmailProviders(\n      params.owner,\n      params.offset,\n      params.limit,\n      params.sortField,\n      params.filters,\n    );\n  }\n\n  getById(id: string): Observable<EmailProviderResponse> {\n    return this.service.getEmailProvider(id);\n  }\n}\n","import { Injectable, inject } from '@angular/core';\nimport { Observable, of } from 'rxjs';\n\nimport { isNullOrUndefined } from '../../../../shared/utils';\nimport {\n  SimCardListItem,\n  EntitiesService,\n  SimCardResponse,\n} from '../../../../api';\nimport {\n  DataGridParams,\n  EntityDataAdapter,\n  GridResponse,\n} from '../../../../shared/models';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class SimCardsDataAdapter\n  implements EntityDataAdapter<SimCardListItem, SimCardResponse>\n{\n  private readonly entitiesService = inject(EntitiesService);\n\n  getList(params: DataGridParams): Observable<GridResponse<SimCardListItem>> {\n    const { owner, limit, offset, sortField, filters } = params;\n\n    if (isNullOrUndefined(owner)) {\n      return of({ items: [], count: 0 });\n    }\n\n    return this.entitiesService.listSimCards(\n      owner,\n      offset,\n      limit,\n      sortField as string,\n      filters,\n    );\n  }\n\n  getById(id: string): Observable<SimCardResponse> {\n    return this.entitiesService.getSimCard(id);\n  }\n}\n","import { Injectable, inject } from '@angular/core';\nimport { Observable, of } from 'rxjs';\n\nimport { isNullOrUndefined } from '../../../../shared/utils';\nimport {\n  SmsGatewayProviderListItem,\n  EntitiesService,\n  SmsGatewayProviderResponse,\n} from '../../../../api';\nimport {\n  DataGridParams,\n  GridDataService,\n  GridResponse,\n} from '../../../../shared/models';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class SmsGatewayProvidersDataAdapter\n  implements GridDataService<SmsGatewayProviderListItem>\n{\n  private readonly entitiesService = inject(EntitiesService);\n\n  getList(\n    params: DataGridParams,\n  ): Observable<GridResponse<SmsGatewayProviderListItem>> {\n    const { owner, limit, offset, sortField, filters } = params;\n\n    if (isNullOrUndefined(owner)) {\n      return of({ items: [], count: 0 });\n    }\n\n    return this.entitiesService.listSmsGatewayProviders(\n      owner,\n      offset,\n      limit,\n      sortField as string,\n      filters,\n    );\n  }\n\n  getById(id: string): Observable<SmsGatewayProviderResponse> {\n    return this.entitiesService.getSmsGatewayProvider(id);\n  }\n}\n","import { Injectable, inject } from '@angular/core';\nimport { Observable, of } from 'rxjs';\n\nimport { isNullOrUndefined } from '../../../../shared/utils';\nimport {\n  IoTypeListItem,\n  EntitiesService,\n  IoTypeResponse,\n} from '../../../../api';\nimport {\n  DataGridParams,\n  GridDataService,\n  GridResponse,\n} from '../../../../shared/models';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class IoTypesDataAdapter implements GridDataService<IoTypeListItem> {\n  private readonly entitiesService = inject(EntitiesService);\n\n  getList(params: DataGridParams): Observable<GridResponse<IoTypeListItem>> {\n    const { owner, limit, offset, sortField, filters, recurse } = params;\n\n    if (isNullOrUndefined(owner)) {\n      return of({ items: [], count: 0 });\n    }\n\n    return this.entitiesService.listIoTypes(\n      owner,\n      recurse,\n      offset,\n      limit,\n      sortField as string,\n      filters,\n    );\n  }\n\n  getById(id: string): Observable<IoTypeResponse> {\n    return this.entitiesService.getIoType(id);\n  }\n}\n","import { Injectable, inject } from '@angular/core';\nimport { Observable, of } from 'rxjs';\n\nimport { isNullOrUndefined } from '../../../../shared/utils';\nimport {\n  DeviceConfigProfileListItem,\n  DeviceConfigProfileResponse,\n  EntitiesService,\n} from '../../../../api';\nimport {\n  DataGridParams,\n  EntityDataAdapter,\n  GridResponse,\n} from '../../../../shared/models';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class DeviceConfigProfilesDataAdapter\n  implements\n    EntityDataAdapter<DeviceConfigProfileListItem, DeviceConfigProfileResponse>\n{\n  private readonly entitiesService = inject(EntitiesService);\n\n  getList(\n    params: DataGridParams,\n  ): Observable<GridResponse<DeviceConfigProfileListItem>> {\n    const { owner, limit, offset, sortField, filters, recurse } = params;\n\n    if (isNullOrUndefined(owner)) {\n      return of({ items: [], count: 0 });\n    }\n\n    return this.entitiesService.listDeviceConfigProfiles(\n      owner,\n      recurse,\n      offset,\n      limit,\n      sortField as string,\n      filters,\n    );\n  }\n\n  getById(id: string): Observable<DeviceConfigProfileResponse> {\n    return this.entitiesService.getDeviceConfigProfile(id);\n  }\n}\n","import { Injectable, inject } from '@angular/core';\nimport { Observable, of } from 'rxjs';\n\nimport { isNullOrUndefined } from '../../../../shared/utils';\nimport {\n  VendorListItem,\n  AccountsService,\n  VendorResponse,\n} from '../../../../api';\nimport {\n  DataGridParams,\n  EntityDataAdapter,\n  GridResponse,\n} from '../../../../shared/models';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class VendorsDataAdapter\n  implements EntityDataAdapter<VendorListItem, VendorResponse>\n{\n  private readonly accountsService = inject(AccountsService);\n\n  getList(params: DataGridParams): Observable<GridResponse<VendorListItem>> {\n    const { owner, limit, offset, sortField, filters, counts } = params;\n\n    if (isNullOrUndefined(owner)) {\n      return of({ items: [], count: 0 });\n    }\n\n    return this.accountsService.listVendors(\n      owner,\n      offset,\n      limit,\n      sortField as string,\n      filters,\n      counts,\n    );\n  }\n\n  getById(id: string): Observable<VendorResponse> {\n    return this.accountsService.getVendor(id);\n  }\n}\n","import { Injectable, inject } from '@angular/core';\nimport { Observable, of } from 'rxjs';\n\nimport { isNullOrUndefined } from '../../../../shared/utils';\nimport {\n  AssetRatingProfileListItem,\n  AssetRatingProfileResponse,\n  EntitiesService,\n} from '../../../../api';\nimport {\n  DataGridParams,\n  EntityDataAdapter,\n  GridResponse,\n} from '../../../../shared/models';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class AssetRatingProfilesDataAdapter\n  implements\n    EntityDataAdapter<AssetRatingProfileListItem, AssetRatingProfileResponse>\n{\n  private readonly entitiesService = inject(EntitiesService);\n\n  getList(\n    params: DataGridParams,\n  ): Observable<GridResponse<AssetRatingProfileListItem>> {\n    const { owner, limit, offset, sortField, filters } = params;\n\n    if (isNullOrUndefined(owner)) {\n      return of({ items: [], count: 0 });\n    }\n\n    return this.entitiesService.listAssetRatingProfiles(\n      owner,\n      offset,\n      limit,\n      sortField as string,\n      filters,\n    );\n  }\n\n  getById(id: string): Observable<AssetRatingProfileResponse> {\n    return this.entitiesService.getAssetRatingProfile(id);\n  }\n}\n","import { Injectable, inject } from '@angular/core';\nimport { Observable, of } from 'rxjs';\n\nimport { isNullOrUndefined } from '../../../../shared/utils';\nimport {\n  AssetStateProfileListItem,\n  AssetStateProfileResponse,\n  EntitiesService,\n} from '../../../../api';\nimport {\n  DataGridParams,\n  EntityDataAdapter,\n  GridResponse,\n} from '../../../../shared/models';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class AssetStateProfilesDataAdapter\n  implements\n    EntityDataAdapter<AssetStateProfileListItem, AssetStateProfileResponse>\n{\n  private readonly entitiesService = inject(EntitiesService);\n\n  getList(\n    params: DataGridParams,\n  ): Observable<GridResponse<AssetStateProfileListItem>> {\n    const { owner, limit, offset, sortField, filters } = params;\n\n    if (isNullOrUndefined(owner)) {\n      return of({ items: [], count: 0 });\n    }\n\n    return this.entitiesService.listAssetStateProfiles(\n      owner,\n      offset,\n      limit,\n      sortField as string,\n      filters,\n    );\n  }\n\n  getById(id: string): Observable<AssetStateProfileResponse> {\n    return this.entitiesService.getAssetStateProfile(id);\n  }\n}\n","import { Injectable, inject } from '@angular/core';\nimport { Observable, of } from 'rxjs';\n\nimport { isNullOrUndefined } from '../../../../shared/utils';\nimport {\n  OverspeedProfileListItem,\n  OverspeedProfileResponse,\n  EntitiesService,\n} from '../../../../api';\nimport {\n  DataGridParams,\n  EntityDataAdapter,\n  GridResponse,\n} from '../../../../shared/models';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class OverspeedProfilesDataAdapter\n  implements\n    EntityDataAdapter<OverspeedProfileListItem, OverspeedProfileResponse>\n{\n  private readonly entitiesService = inject(EntitiesService);\n\n  getList(\n    params: DataGridParams,\n  ): Observable<GridResponse<OverspeedProfileListItem>> {\n    const { owner, limit, offset, sortField, filters, recurse } = params;\n\n    if (isNullOrUndefined(owner)) {\n      return of({ items: [], count: 0 });\n    }\n\n    return this.entitiesService.listOverspeedProfiles(\n      owner,\n      recurse,\n      offset,\n      limit,\n      sortField as string,\n      filters,\n    );\n  }\n\n  getById(id: string): Observable<OverspeedProfileResponse> {\n    return this.entitiesService.getOverspeedProfile(id);\n  }\n}\n","import { Injectable, inject } from '@angular/core';\nimport { Observable, of } from 'rxjs';\n\nimport { isNullOrUndefined } from '../../../../shared/utils';\nimport {\n  RoadProfileListItem,\n  RoadProfileResponse,\n  EntitiesService,\n} from '../../../../api';\nimport {\n  DataGridParams,\n  EntityDataAdapter,\n  GridResponse,\n} from '../../../../shared/models';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class RoadProfilesDataAdapter\n  implements EntityDataAdapter<RoadProfileListItem, RoadProfileResponse>\n{\n  private readonly entitiesService = inject(EntitiesService);\n\n  getList(\n    params: DataGridParams,\n  ): Observable<GridResponse<RoadProfileListItem>> {\n    const { owner, limit, offset, sortField, filters, recurse } = params;\n\n    if (isNullOrUndefined(owner)) {\n      return of({ items: [], count: 0 });\n    }\n\n    return this.entitiesService.listRoadProfiles(\n      owner,\n      recurse,\n      offset,\n      limit,\n      sortField as string,\n      filters,\n    );\n  }\n\n  getById(id: string): Observable<RoadProfileResponse> {\n    return this.entitiesService.getRoadProfile(id);\n  }\n}\n","import { Injectable, inject } from '@angular/core';\nimport { Observable, of } from 'rxjs';\n\nimport { isNullOrUndefined } from '../../../../shared/utils';\nimport {\n  GeoLockProfileListItem,\n  GeoLockProfileResponse,\n  EntitiesService,\n} from '../../../../api';\nimport {\n  DataGridParams,\n  EntityDataAdapter,\n  GridResponse,\n} from '../../../../shared/models';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class GeoLockProfilesDataAdapter\n  implements EntityDataAdapter<GeoLockProfileListItem, GeoLockProfileResponse>\n{\n  private readonly entitiesService = inject(EntitiesService);\n\n  getList(\n    params: DataGridParams,\n  ): Observable<GridResponse<GeoLockProfileListItem>> {\n    const { owner, limit, offset, sortField, filters, recurse } = params;\n\n    if (isNullOrUndefined(owner)) {\n      return of({ items: [], count: 0 });\n    }\n\n    return this.entitiesService.listGeoLockProfiles(\n      owner,\n      recurse,\n      offset,\n      limit,\n      sortField as string,\n      filters,\n    );\n  }\n\n  getById(id: string): Observable<GeoLockProfileResponse> {\n    return this.entitiesService.getGeoLockProfile(id);\n  }\n}\n","import { Injectable, inject, signal } from '@angular/core';\nimport { combineLatest, EMPTY, map, Observable, of } from 'rxjs';\n\nimport { isDefined, isNullOrUndefined } from '../../../../shared/utils';\nimport {\n  EntitiesService,\n  AccountsService,\n  IdName,\n  CustomFieldDefinition,\n} from '../../../../api';\nimport { DataGridParams, EntityDataAdapter } from '../../../../shared/models';\nimport { RequestCacheService } from '../../../../shared/services/request-cache.service';\nimport { UtilityService } from '../../../../core/services/utility.service';\nimport {\n  CustomFieldResponse,\n  CUSTOM_FIELD_TYPES,\n  CUSTOM_FIELD_TYPES_MAP,\n  CustomFieldResponseList,\n} from '../../models';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class CustomFieldsDataAdapter\n  implements EntityDataAdapter<CustomFieldResponse, CustomFieldResponse>\n{\n  private readonly entitiesService = inject(EntitiesService);\n  private readonly accountsService = inject(AccountsService);\n  private readonly cacheService = inject(RequestCacheService);\n  private readonly utilityService = inject(UtilityService);\n  assetTypes = signal<IdName[]>([]);\n  types = signal<IdName[]>([]);\n\n  getList(params: DataGridParams): Observable<CustomFieldResponseList> {\n    const { owner, limit, offset, filters } = params;\n\n    if (isNullOrUndefined(owner)) {\n      return of({ items: [], count: 0, title: '', type: '', limit, offset });\n    }\n\n    return combineLatest([\n      this.accountsService.getCompany(owner),\n      this.getCachedAssetTypes(owner),\n      this.getTypes(),\n    ]).pipe(\n      map(([company, assetTypes, types]) => {\n        const items: CustomFieldResponse[] = [];\n        Object.keys(company.customFields || {}).forEach((fieldType) => {\n          (company.customFields?.[fieldType] || [])\n            .filter((x) => x['owner'] === company.type)\n            .forEach((field) => {\n              items.push(\n                this.customFieldDefinitionToCustomFieldResponse(\n                  assetTypes.items,\n                  types,\n                  owner,\n                  fieldType,\n                  field,\n                ),\n              );\n            });\n        });\n        this.assetTypes.set(assetTypes.items);\n        this.types.set(types);\n\n        return {\n          title: 'Custom Fields',\n          type: 'custom-field',\n          count: items.length,\n          limit: limit,\n          offset: offset,\n          items: this.filter(filters ?? '', items),\n        };\n      }),\n    );\n  }\n\n  getById(_id: string) {\n    const [ownerId] = _id.split('.');\n    if (!ownerId) {\n      return EMPTY;\n    }\n\n    const params: DataGridParams = {\n      owner: ownerId,\n      limit: 0, // We don't need pagination here\n      offset: 0,\n    };\n\n    return this.getList(params).pipe(\n      map((responseList) => {\n        return responseList.items.find((item) => item.id === _id);\n      }),\n      map((item) => {\n        if (!item) {\n          return {} as CustomFieldResponse;\n        }\n        return item;\n      }),\n    );\n  }\n\n  customFieldDefinitionToCustomFieldResponse(\n    entityTypes: IdName[],\n    types: IdName[],\n    ownerId: string,\n    entityType: string,\n    field: CustomFieldDefinition,\n  ): CustomFieldResponse {\n    return {\n      id: `${ownerId}.${entityType}.${field.id}`,\n      tag: field.id,\n      name: field.title,\n      required: field.required,\n      _entityType: entityTypes.find((x) => x.id === entityType),\n      type: types.find((x) => x.id === field.type),\n      values: (field.values ?? []).map((x) => x.key).join('\\n'),\n    };\n  }\n\n  getTypes(): Observable<IdName[]> {\n    return of(\n      CUSTOM_FIELD_TYPES.map((type) => ({\n        id: type,\n        name: CUSTOM_FIELD_TYPES_MAP[type],\n      })),\n    );\n  }\n\n  getCachedAssetTypes(ownerId: string): Observable<{ items: IdName[] }> {\n    const cacheKey = `assetTypes-${ownerId}`;\n    return this.cacheService.getOrFetch(cacheKey, () =>\n      this.entitiesService.listAssetTypes(ownerId),\n    );\n  }\n\n  filter(filter: string, items: CustomFieldResponse[]): CustomFieldResponse[] {\n    const matches = (f: string, item: CustomFieldResponse): boolean => {\n      const [field, match] = f.split('=');\n      if (!match) {\n        return true;\n      }\n      const value = this.getNestedValue(item, field) ?? '';\n      if (match.includes('*')) {\n        // User specified text search, be generous in matching.\n        return this.utilityService\n          .escapeRqlValue(value)\n          .toLowerCase()\n          .includes(match.replace(/\\*/g, '').toLowerCase());\n      }\n      // Chosen from predefined list, match exactly.\n      return value.toLowerCase() === match.toLowerCase();\n    };\n\n    // The filter string could look like this, we need to support logical OR filters\n    //  (entityType.id=simcard|entityType.id=asset),type.id=blah\n\n    const filters = (filter || '')\n      .split(',')\n      .filter((term) => term)\n      .map((term) => {\n        if (term.includes('|')) {\n          return term.slice(1, term.length - 1).split('|');\n        }\n        return [term];\n      });\n\n    return filters\n      .reduce(\n        (result, column) =>\n          result.filter((item) => column.some((term) => matches(term, item))),\n        items,\n      )\n      .sort((a, b) => {\n        const aName = a.name.toLowerCase();\n        const bName = b.name.toLowerCase();\n        if (aName < bName) {\n          return -1;\n        }\n        if (aName > bName) {\n          return 1;\n        }\n        return 0;\n      });\n  }\n\n  getCustomFieldResponseFromCompany(\n    company: CustomFieldResponseList,\n    id: string,\n  ): CustomFieldResponse | undefined {\n    const customField = company.items.find((x) => x.id === id);\n    if (customField) {\n      return customField;\n    }\n    return undefined;\n  }\n\n  private getNestedValue<T>(obj: T, path: string): string | undefined {\n    return path.split('.').reduce((acc, key) => {\n      if (\n        isDefined(acc) &&\n        acc !== null &&\n        typeof acc === 'object' &&\n        key in acc\n      ) {\n        return (acc as Record<string, unknown>)[key];\n      }\n      return undefined;\n    }, obj as unknown) as string | undefined;\n  }\n}\n","import { Injectable, inject } from '@angular/core';\nimport { Observable } from 'rxjs';\n\nimport { EntitiesService, CostCentreResponse } from '../../../../api';\nimport { BaseTreeAdapter } from './base-tree.adapter.service';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class CostCentresDataAdapter extends BaseTreeAdapter<\n  CostCentreResponse,\n  { items: CostCentreResponse[]; count: number }\n> {\n  private readonly entitiesService = inject(EntitiesService);\n\n  protected fetchEntities(\n    owner: string,\n    offset: number | undefined,\n    limit: number | undefined,\n    sortField: string | undefined,\n    filters: string,\n  ): Observable<{ items: CostCentreResponse[]; count: number }> {\n    return this.entitiesService.listCostCentres(\n      owner,\n      offset,\n      limit,\n      sortField,\n      filters,\n    );\n  }\n\n  getById(id: string): Observable<CostCentreResponse> {\n    return this.entitiesService.getCostCentre(id);\n  }\n}\n","import { Injectable, inject } from '@angular/core';\nimport { Observable } from 'rxjs';\n\nimport { EntitiesService, AssetGroupResponse } from '../../../../api';\nimport { BaseTreeAdapter } from './base-tree.adapter.service';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class AssetGroupsDataAdapter extends BaseTreeAdapter<\n  AssetGroupResponse,\n  { items: AssetGroupResponse[]; count: number }\n> {\n  private readonly entitiesService = inject(EntitiesService);\n\n  protected fetchEntities(\n    owner: string,\n    offset: number | undefined,\n    limit: number | undefined,\n    sortField: string | undefined,\n    filters: string,\n  ): Observable<{ items: AssetGroupResponse[]; count: number }> {\n    return this.entitiesService.listAssetGroups(\n      owner,\n      offset,\n      limit,\n      sortField,\n      filters,\n    );\n  }\n\n  getById(id: string): Observable<AssetGroupResponse> {\n    return this.entitiesService.getAssetGroup(id);\n  }\n}\n","import { Injectable, inject } from '@angular/core';\nimport { Observable } from 'rxjs';\n\nimport { EntitiesService, AssetCategoryResponse } from '../../../../api';\nimport { BaseTreeAdapter } from './base-tree.adapter.service';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class AssetCategoriesDataAdapter extends BaseTreeAdapter<\n  AssetCategoryResponse,\n  { items: AssetCategoryResponse[]; count: number }\n> {\n  private readonly entitiesService = inject(EntitiesService);\n\n  protected fetchEntities(\n    owner: string,\n    offset: number | undefined,\n    limit: number | undefined,\n    sortField: string | undefined,\n    filters: string,\n  ): Observable<{ items: AssetCategoryResponse[]; count: number }> {\n    return this.entitiesService.listAssetCategories(\n      owner,\n      offset,\n      limit,\n      sortField,\n      filters,\n    );\n  }\n\n  getById(id: string): Observable<AssetCategoryResponse> {\n    return this.entitiesService.getAssetCategory(id);\n  }\n}\n","import { Injectable, inject } from '@angular/core';\nimport { Observable } from 'rxjs';\n\nimport {\n  EntitiesService,\n  ZoneGroupListItem,\n  ZoneGroupListResponse,\n  ZoneGroupResponse,\n} from '../../../../api';\nimport { BaseTreeAdapter } from './base-tree.adapter.service';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class GeofenceGroupsDataAdapter extends BaseTreeAdapter<\n  ZoneGroupListItem,\n  ZoneGroupListResponse,\n  ZoneGroupResponse\n> {\n  private readonly entitiesService = inject(EntitiesService);\n\n  protected fetchEntities(\n    owner: string,\n    offset: number | undefined,\n    limit: number | undefined,\n    sortField: string | undefined,\n    filters: string,\n  ): Observable<ZoneGroupListResponse> {\n    return this.entitiesService.listZoneGroups(\n      owner,\n      offset,\n      limit,\n      sortField,\n      filters,\n    );\n  }\n\n  getById(id: string): Observable<ZoneGroupResponse> {\n    return this.entitiesService.getZoneGroup(id);\n  }\n}\n","import { Injectable, inject } from '@angular/core';\nimport { Observable, of } from 'rxjs';\n\nimport { isNullOrUndefined } from '../../../../shared/utils';\nimport { UserListItem, UserResponse, AccountsService } from '../../../../api';\nimport {\n  DataGridParams,\n  EntityDataAdapter,\n  GridResponse,\n} from '../../../../shared/models';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class UsersDataAdapter\n  implements EntityDataAdapter<UserListItem, UserResponse>\n{\n  private readonly accountsService = inject(AccountsService);\n\n  getList(params: DataGridParams): Observable<GridResponse<UserListItem>> {\n    const { owner, limit, offset, sortField, filters } = params;\n\n    if (isNullOrUndefined(owner)) {\n      return of({ items: [], count: 0 });\n    }\n\n    return this.accountsService.listUsers(\n      owner,\n      offset,\n      limit,\n      sortField as string,\n      filters,\n    );\n  }\n\n  getById(id: string): Observable<UserResponse> {\n    return this.accountsService.getUser(id);\n  }\n}\n","import { Injectable, inject } from '@angular/core';\nimport { Observable, of } from 'rxjs';\n\nimport { isNullOrUndefined } from '../../../../shared/utils';\nimport {\n  UserRoleListItem,\n  UserRoleResponse,\n  AccountsService,\n} from '../../../../api';\nimport {\n  DataGridParams,\n  EntityDataAdapter,\n  GridResponse,\n} from '../../../../shared/models';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class UserRolesDataAdapter\n  implements EntityDataAdapter<UserRoleListItem, UserRoleResponse>\n{\n  private readonly accountsService = inject(AccountsService);\n\n  getList(params: DataGridParams): Observable<GridResponse<UserRoleListItem>> {\n    const { owner, limit, offset, sortField, filters } = params;\n\n    if (isNullOrUndefined(owner)) {\n      return of({ items: [], count: 0 });\n    }\n\n    return this.accountsService.listUserRoles(\n      owner,\n      offset,\n      limit,\n      sortField as string,\n      filters,\n    );\n  }\n\n  getById(id: string): Observable<UserRoleResponse> {\n    return this.accountsService.getUserRole(id);\n  }\n}\n","import { Injectable, inject } from '@angular/core';\nimport { Observable, of } from 'rxjs';\n\nimport { isNullOrUndefined } from '../../../../shared/utils';\nimport { ThemeListItem, ThemeResponse, EntitiesService } from '../../../../api';\nimport {\n  DataGridParams,\n  GridDataService,\n  GridResponse,\n} from '../../../../shared/models';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class ThemesDataAdapter implements GridDataService<ThemeListItem> {\n  private readonly entitiesService = inject(EntitiesService);\n\n  getList(params: DataGridParams): Observable<GridResponse<ThemeListItem>> {\n    const { owner, limit, offset, sortField, filters, recurse } = params;\n\n    if (isNullOrUndefined(owner)) {\n      return of({ items: [], count: 0 });\n    }\n\n    return this.entitiesService.listThemes(\n      owner,\n      recurse,\n      offset,\n      limit,\n      sortField as string,\n      filters,\n    );\n  }\n\n  getById(id: string): Observable<ThemeResponse> {\n    return this.entitiesService.getTheme(id);\n  }\n}\n","import { Injectable, inject } from '@angular/core';\nimport { Observable } from 'rxjs';\n\nimport { CompanyGroupResponse, AccountsService } from '../../../../api';\nimport { BaseTreeAdapter } from './base-tree.adapter.service';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class CompanyGroupsDataAdapter extends BaseTreeAdapter<\n  CompanyGroupResponse,\n  { items: CompanyGroupResponse[]; count: number }\n> {\n  private readonly accountsService = inject(AccountsService);\n\n  protected fetchEntities(\n    owner: string,\n    offset: number | undefined,\n    limit: number | undefined,\n    sortField: string | undefined,\n    filters: string,\n  ): Observable<{ items: CompanyGroupResponse[]; count: number }> {\n    return this.accountsService.listCompanyGroups(\n      owner,\n      offset,\n      limit,\n      sortField,\n      filters,\n    );\n  }\n\n  getById(id: string): Observable<CompanyGroupResponse> {\n    return this.accountsService.getCompanyGroup(id);\n  }\n}\n","import { Injectable, inject } from '@angular/core';\nimport { Observable, of } from 'rxjs';\n\nimport { isNullOrUndefined } from '../../../../shared/utils';\nimport {\n  ClientListItem,\n  ClientResponse,\n  AccountsService,\n} from '../../../../api';\nimport {\n  DataGridParams,\n  EntityDataAdapter,\n  GridResponse,\n} from '../../../../shared/models';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class ClientsDataAdapter\n  implements EntityDataAdapter<ClientListItem, ClientResponse>\n{\n  private readonly accountsService = inject(AccountsService);\n\n  /**\n   * Retrieves a list of clients\n   * @param params Grid parameters (requires owner to be specified)\n   * @returns Observable of client list response\n   */\n  getList(params: DataGridParams): Observable<GridResponse<ClientListItem>> {\n    const { owner, limit, offset, sortField, filters, counts } = params;\n\n    if (isNullOrUndefined(owner)) {\n      return of({ items: [], count: 0 });\n    }\n\n    return this.accountsService.listClients(\n      owner,\n      offset,\n      limit,\n      sortField as string,\n      filters,\n      counts,\n    );\n  }\n\n  getById(id: string): Observable<ClientResponse> {\n    return this.accountsService.getClient(id);\n  }\n}\n","import { Injectable, inject } from '@angular/core';\nimport { Observable, of } from 'rxjs';\n\nimport { isNullOrUndefined } from '../../../../shared/utils';\nimport {\n  DistributorListItem,\n  DistributorResponse,\n  AccountsService,\n} from '../../../../api';\nimport {\n  DataGridParams,\n  EntityDataAdapter,\n  GridResponse,\n} from '../../../../shared/models';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class DistributorsDataAdapter\n  implements EntityDataAdapter<DistributorListItem, DistributorResponse>\n{\n  private readonly accountsService = inject(AccountsService);\n\n  /**\n   * Retrieves a list of distributors\n   * @param params Grid parameters (requires owner to be specified)\n   * @returns Observable of distributor list response\n   */\n  getList(\n    params: DataGridParams,\n  ): Observable<GridResponse<DistributorListItem>> {\n    const { owner, limit, offset, sortField, filters, counts } = params;\n\n    if (isNullOrUndefined(owner)) {\n      return of({ items: [], count: 0 });\n    }\n\n    return this.accountsService.listDistributors(\n      owner,\n      offset,\n      limit,\n      sortField as string,\n      filters,\n      counts,\n    );\n  }\n\n  getById(id: string): Observable<DistributorResponse> {\n    return this.accountsService.getDistributor(id);\n  }\n}\n","import {\n  Component,\n  computed,\n  effect,\n  inject,\n  OnInit,\n  signal,\n  untracked,\n} from '@angular/core';\nimport { isDefined, isNullOrUndefined } from '../../../../../shared/utils';\nimport { CommonModule } from '@angular/common';\nimport { takeUntilDestroyed } from '@angular/core/rxjs-interop';\nimport { Validators } from '@angular/forms';\nimport { ButtonModule } from 'primeng/button';\nimport {\n  AccountsService,\n  ClientResponse,\n  CustomFieldDefinition,\n  IdName,\n  VendorResponse,\n} from '../../../../../api';\nimport { DynamicFormComponent } from '../../../../../shared/components/forms/dynamic-form/dynamic-form.component';\nimport { GridComponent } from '../../../../../shared/components/grid/grid.component';\nimport {\n  createDropdownField,\n  createTextAreaField,\n  createTextField,\n} from '../../../../../shared/models';\nimport { EntitySectionBaseComponent } from '../../base';\nimport { CustomFieldResponse } from '../../../models';\nimport { CustomFieldsDataAdapter } from '../../../services/adapters';\nimport { firstValueFrom, Observable } from 'rxjs';\nimport { DynamicDialogConfig } from 'primeng/dynamicdialog';\nimport { UtilityService } from '../../../../../core/services/utility.service';\n\n@Component({\n  selector: 'app-custom-field-details-section',\n  imports: [CommonModule, ButtonModule, GridComponent, DynamicFormComponent],\n  templateUrl: './custom-field-details-section.component.html',\n  styleUrl: './custom-field-details-section.component.scss',\n})\nexport class CustomFieldDetailsSectionComponent\n  extends EntitySectionBaseComponent<\n    CustomFieldResponse | Record<string, CustomFieldDefinition[]>\n  >\n  implements OnInit\n{\n  private readonly dialogConfig = inject(DynamicDialogConfig, {\n    optional: true,\n  });\n  private readonly accountsService = inject(AccountsService);\n  private readonly utilityService = inject(UtilityService);\n  private readonly customFieldsAdapter = inject(CustomFieldsDataAdapter);\n  readonly customFieldDetails = computed(() => {\n    const customFieldDetails: CustomFieldResponse =\n      this.entity() as CustomFieldResponse;\n    if (!isDefined(customFieldDetails)) return [];\n\n    // Check if customFieldDetails is a CustomFieldResponse (has id property)\n    if (!('id' in customFieldDetails)) return [];\n\n    const [_ownerId, _entityTypeFromId, fieldId] =\n      customFieldDetails.id.split('.');\n\n    return [\n      { key: 'Id', value: fieldId ?? 'None' },\n      { key: 'Name', value: customFieldDetails.name ?? 'None' },\n      {\n        key: 'Applies To',\n        value: customFieldDetails?._entityType?.name ?? 'None',\n      },\n      {\n        key: 'Required',\n        value: customFieldDetails.required === true ? 'Yes' : 'No',\n      },\n      {\n        key: 'Type',\n        value: customFieldDetails.type?.name ?? 'None',\n      },\n    ];\n  });\n  protected readonly selectOptionsLoaded = signal<boolean>(false);\n  selectOptions: Record<string, { label: string; value: string | boolean }[]> =\n    {};\n\n  constructor() {\n    super();\n\n    // Setup initial columns\n    this.columns = [\n      { field: 'key', header: '', transform: 'uppercase' },\n      { field: 'value', header: '' },\n    ];\n\n    effect(() => {\n      const selectOptionsLoaded = this.selectOptionsLoaded();\n      if (selectOptionsLoaded) {\n        untracked(() => {\n          this.updateFormFields();\n        });\n      }\n    });\n  }\n\n  ngOnInit() {\n    this.loadSelectOptions();\n  }\n\n  private loadSelectOptions(): void {\n    const customField = this.entity() as CustomFieldResponse;\n    let ownerId: string | undefined; // Explicitly string or undefined\n\n    if (isDefined(this.dialogConfig?.data?.ownerId)) {\n      ownerId = this.dialogConfig?.data?.ownerId;\n    } else if (customField?.id && typeof customField.id === 'string') {\n      const idParts = customField.id.split('.');\n      if (idParts.length > 0) {\n        ownerId = idParts[0];\n      }\n    }\n\n    if (isNullOrUndefined(ownerId)) {\n      this.selectOptions = {};\n      this.selectOptionsLoaded.set(true);\n      this.updateFormFields();\n      return;\n    }\n\n    this.customFieldsAdapter.getCachedAssetTypes(ownerId).subscribe({\n      next: (assetTypes) => {\n        const types = ['simcard', 'assettag', 'device', 'asset', 'event'];\n        this.selectOptions = {\n          entityTypes: [\n            ...assetTypes.items,\n            ...types.map((type) => ({\n              name: this.getDisplayName(type),\n              id: type,\n            })),\n          ]\n            .map((item) => ({ label: item.name ?? '', value: item.id }))\n            .sort((a, b) => a.label.localeCompare(b.label)),\n          required: [\n            { label: 'Yes', value: true },\n            { label: 'No', value: false },\n          ],\n          types: [\n            { label: 'Text', value: 'text' },\n            { label: 'Memo', value: 'memo' },\n            { label: 'Selection', value: 'combo' },\n            { label: 'Yes/No', value: 'checkbox' },\n            { label: 'Date', value: 'date' },\n            { label: 'DateTime', value: 'datetime' },\n            { label: 'URL', value: 'url' },\n          ],\n        };\n        this.selectOptionsLoaded.set(true);\n      },\n      error: () => {\n        this.selectOptionsLoaded.set(true);\n      },\n    });\n  }\n\n  protected override updateFormFields(): void {\n    const customField = this.entity() as CustomFieldResponse;\n\n    // Default values\n    let ownerId = '';\n    let fieldId = '';\n    let name = '';\n    let entityTypeId = '';\n    let required = false;\n    let typeId = '';\n\n    // Extract values from customField if it exists\n    if (isDefined(customField) && isDefined(customField.id)) {\n      const [extractedOwnerId, _entityTypeFromId, extractedFieldId] =\n        customField.id.split('.');\n      ownerId = extractedOwnerId || '';\n      fieldId = extractedFieldId || '';\n      name = customField.name || '';\n      entityTypeId = (customField._entityType as IdName)?.id || '';\n      required = customField.required || false;\n      typeId = (customField.type as IdName)?.id || '';\n    } else if (isDefined(this.dialogConfig?.data?.ownerId)) {\n      // Use ownerId from dialog config if customField is not defined (create mode)\n      ownerId = String(this.dialogConfig?.data?.ownerId ?? '');\n    }\n\n    // Always create form fields, regardless of whether customField is defined\n    this.formFields = [\n      createTextField('ownerId', 'OwnerId', ownerId, {\n        name: 'ownerId',\n        hidden: true,\n      }),\n      createTextField('tag', 'Id', fieldId, {\n        name: 'tag',\n        validations: [\n          {\n            name: 'required',\n            validator: Validators.required,\n            message: 'Id is required',\n          },\n        ],\n      }),\n      createTextField('title', 'Name', name, {\n        name: 'title',\n        validations: [\n          {\n            name: 'required',\n            validator: Validators.required,\n            message: 'Name is required',\n          },\n        ],\n      }),\n      createDropdownField(\n        'entityType',\n        'Applies To',\n        this.selectOptions['entityTypes'] ?? [],\n        entityTypeId,\n        {\n          name: 'entityType',\n          validations: [\n            {\n              name: 'required',\n              validator: Validators.required,\n              message: 'Type is required',\n            },\n          ],\n          disabled: !this.createMode(),\n          props: {\n            appendTo: 'body',\n          },\n        },\n      ),\n      createDropdownField(\n        'required',\n        'Required',\n        this.selectOptions['required'] ?? [],\n        required,\n        {\n          name: 'required',\n          validations: [\n            {\n              name: 'required',\n              validator: Validators.required,\n              message: 'Required is required',\n            },\n          ],\n          props: {\n            appendTo: 'body',\n          },\n        },\n      ),\n      createDropdownField(\n        'type',\n        'Type',\n        this.selectOptions['types'] ?? [],\n        typeId,\n        {\n          name: 'type',\n          validations: [\n            {\n              name: 'required',\n              validator: Validators.required,\n              message: 'Type is required',\n            },\n          ],\n          props: {\n            appendTo: 'body',\n          },\n          conditional: true,\n          conditions: {\n            combo: [\n              createTextAreaField(\n                'values',\n                'Values',\n                isDefined(customField) ? customField.values : '',\n                {\n                  name: 'values',\n                  validations: [\n                    {\n                      name: 'required',\n                      validator: Validators.required,\n                      message: 'Values are required for Selection type',\n                    },\n                  ],\n                  hint: 'Enter each value on a new line',\n                  props: {\n                    rows: 5,\n                    autoResize: true,\n                  },\n                },\n              ),\n            ],\n          },\n        },\n      ),\n    ];\n  }\n\n  protected override submitChanges(\n    formData: Record<string, string | number | boolean | object>,\n  ): void {\n    const customField = this.entity();\n    if (isNullOrUndefined(customField)) return;\n\n    const data = this.transformFormData(formData);\n    const customFieldData = Object.fromEntries(\n      Object.entries({\n        id: data['tag'] as string,\n        title: data['title'] as string,\n        type: data['type'] as string,\n        required: data['required'] as boolean,\n        values: data['values'] as { key: string; value: string }[],\n      }).filter(([_, value]) => isDefined(value)),\n    );\n\n    const [companyId, entityType, id] = (customField.id as string).split('.');\n    firstValueFrom(this.accountsService.getCompany(companyId))\n      .then((company) => {\n        const customFields: Record<string, CustomFieldDefinition[]> =\n          JSON.parse(JSON.stringify(company.customFields));\n        const bucket = customFields[entityType] ?? [];\n        const idx = bucket.findIndex((x) => x.id === id);\n        if (idx > -1) {\n          bucket[idx] = {\n            ...bucket[idx],\n            ...customFieldData,\n          };\n        }\n        customFields[entityType] = bucket;\n\n        let request$: Observable<ClientResponse | VendorResponse>;\n\n        if (company.type === 'client') {\n          request$ = this.accountsService.updateClientDetails(company.id, {\n            customFields,\n          });\n        } else if (company.type === 'vendor') {\n          request$ = this.accountsService.updateVendorDetails(company.id, {\n            customFields,\n          });\n        } else {\n          console.error(\n            'Neither clientId nor vendorId found in route parameters',\n          );\n          return;\n        }\n\n        request$.pipe(takeUntilDestroyed(this.destroyRef)).subscribe({\n          next: (response: ClientResponse | VendorResponse) => {\n            this.isFormEditable.set(false);\n            this.broadcastService.broadcast('entity-updated', {\n              entityType: 'custom-field',\n              operation: 'update',\n              entityId: customField.id,\n              data: response,\n            });\n          },\n          error: (_error) => {\n            this.isFormEditable.set(true);\n            this.isSubmitting.set(false);\n          },\n        });\n      })\n      .catch(() => {});\n  }\n\n  protected override onFormValueChange(\n    formData: Record<string, string | number | object>,\n  ): void {\n    const transformedData = this.transformFormData(formData);\n\n    this.formValueChange.emit(transformedData);\n  }\n\n  protected override transformFormData(\n    formData: Record<string, string | number | boolean | object>,\n  ) {\n    const transformedData = { ...formData };\n\n    // Transform entityType ID to IdName object\n    if (\n      isDefined(transformedData['entityType']) &&\n      typeof transformedData['entityType'] === 'string'\n    ) {\n      const entityTypeOption = this.selectOptions?.['entityTypes']?.find(\n        (option) => option.value === transformedData['entityType'],\n      );\n\n      if (entityTypeOption) {\n        transformedData['entityType'] = {\n          id: entityTypeOption.value,\n          name: entityTypeOption.label,\n        };\n      }\n    }\n\n    // Transform values string to array\n    if (\n      isDefined(transformedData['values']) &&\n      typeof transformedData['values'] === 'string'\n    ) {\n      const valuesString = transformedData['values'];\n      transformedData['values'] = valuesString\n        .split('\\n')\n        .filter((line) => line.trim() !== '')\n        .map((line) => ({ key: line.trim(), value: line.trim() }));\n    }\n    return transformedData;\n  }\n\n  private getDisplayName(type: string): string {\n    const specialCases: Record<string, string> = {\n      assettag: 'Asset Tag',\n      simcard: 'SIM Card',\n    };\n\n    return specialCases[type] || this.utilityService.toTitleCase(type);\n  }\n}\n","<div class=\"card pt-2\">\n  <div class=\"mb-4 p-2 flex justify-start items-center\">\n    <span\n      class=\"pi pi-mobile !text-[2.5rem]\"\n      [ngClass]=\"{ 'icon-primary': isFormEditable() }\"\n      [attr.aria-label]=\"'mobile icon'\"\n    ></span>\n\n    <div class=\"pl-6 flex-1\">\n      <div class=\"flex justify-between items-center\">\n        <h2 class=\"text-xl font-semibold m-0\">Custom Field Details</h2>\n        @if (!isFormEditable() && !createMode()) {\n          <div class=\"icon-light\">\n            <span\n              class=\"pi pi-pen-to-square action hover !text-2xl\"\n              [attr.aria-label]=\"'Edit custom field details'\"\n              (click)=\"onEdit()\"\n              (keydown.enter)=\"onEdit()\"\n            ></span>\n          </div>\n        }\n      </div>\n      <span>Configure various details about your Custom Field.</span>\n    </div>\n  </div>\n\n  @if (isFormEditable() || (createMode() && formFields.length)) {\n    <app-dynamic-form\n      [fields]=\"formFields\"\n      [actions]=\"actions\"\n      [hideActions]=\"createMode()\"\n      (formSubmit)=\"onSubmit($event)\"\n      (formValidityChange)=\"onFormValidityChange($event)\"\n      (formValueChange)=\"onFormValueChange($event)\"\n    >\n    </app-dynamic-form>\n  }\n\n  @if (!isFormEditable() && !createMode()) {\n    <app-grid\n      [data]=\"customFieldDetails()\"\n      [columns]=\"columns\"\n      [showGridLines]=\"false\"\n      [hideHeader]=\"true\"\n      tableStyleClass=\"info-display !w-auto\"\n    ></app-grid>\n  }\n</div>\n","import { Injectable } from '@angular/core';\nimport { AdminDetailSection, CustomFieldResponse } from '../models';\nimport { CustomFieldDetailsSectionComponent } from '../components/custom-fields/custom-field-details-section/custom-field-details-section.component';\n\n@Injectable({ providedIn: 'root' })\nexport class CustomFieldSectionConfigFactory {\n  /**\n   * Create sections for customField information\n   * @param customField The customField object to display in the section\n   * @returns An array of AdminDetailSection objects representing the customField information sections\n   */\n  createCustomFieldInformationSections(\n    customField: CustomFieldResponse | null,\n  ): AdminDetailSection[] {\n    return [\n      {\n        id: 'custom-field-details',\n        title: 'CustomField Details',\n        component: CustomFieldDetailsSectionComponent,\n        componentInputs: { entity: customField },\n        category: 'information',\n        order: 10,\n      },\n    ];\n  }\n\n  /**\n   * Create all customField sections in one call\n   * @param customField The customField object to display in the sections\n   * @returns An array of AdminDetailSection objects representing all customField sections\n   */\n  createAllCustomFieldSections(\n    customField: CustomFieldResponse | null,\n  ): AdminDetailSection[] {\n    return [...this.createCustomFieldInformationSections(customField)];\n  }\n}\n","import {\n  ChangeDetectorRef,\n  Component,\n  computed,\n  effect,\n  inject,\n  input,\n  OnInit,\n  signal,\n  untracked,\n} from '@angular/core';\nimport { Validators } from '@angular/forms';\n\nimport { ButtonModule } from 'primeng/button';\nimport { InputTextModule } from 'primeng/inputtext';\n\nimport {\n  EmailProviderListItem,\n  EmailProviderCreateRequest,\n  EntitiesService,\n  EmailProviderResponse,\n  EmailProviderTypeListItem,\n} from '../../../../../api';\nimport {\n  createDropdownField,\n  createTextField,\n} from '../../../../../shared/models';\nimport { EntitySectionBaseComponent } from '../../base';\nimport { isDefined, isNullOrUndefined } from '../../../../../shared/utils';\nimport { DynamicFormComponent } from '../../../../../shared/components/forms/dynamic-form/dynamic-form.component';\nimport { GridComponent } from '../../../../../shared/components/grid/grid.component';\nimport { CommonModule } from '@angular/common';\nimport { EntityOperationRegistryService } from '../../../services/entity/entity-operation-registry.service';\nimport { Observable } from 'rxjs';\nimport { faAt } from '@fortawesome/free-solid-svg-icons';\nimport { FontAwesomeModule } from '@fortawesome/angular-fontawesome';\nimport { takeUntilDestroyed } from '@angular/core/rxjs-interop';\n\ntype EmailProviderEntity = EmailProviderListItem | EmailProviderCreateRequest;\n\n@Component({\n  selector: 'app-email-provider-details-section',\n  imports: [\n    CommonModule,\n    ButtonModule,\n    InputTextModule,\n    GridComponent,\n    DynamicFormComponent,\n    FontAwesomeModule,\n  ],\n  templateUrl: './email-provider-details-section.component.html',\n  styleUrl: './email-provider-details-section.component.scss',\n})\nexport class EmailProviderDetailsSectionComponent\n  extends EntitySectionBaseComponent<EmailProviderEntity>\n  implements OnInit\n{\n  readonly ownerId = input<string | null>(null);\n  readonly entitiesService = inject(EntitiesService);\n  private readonly operationRegistry = inject(EntityOperationRegistryService);\n\n  private readonly cdr = inject(ChangeDetectorRef);\n  protected readonly selectOptionsLoaded = signal<boolean>(false);\n\n  readonly emailProviderDetails = computed(() => {\n    const emailProviderDetails = this.entity();\n    if (!isDefined(emailProviderDetails)) return [];\n\n    return [\n      {\n        key: 'Type',\n        value: emailProviderDetails.type?.name ?? 'None',\n      },\n      { key: 'Name', value: emailProviderDetails.name },\n    ];\n  });\n  selectOptions: Record<\n    string,\n    { label: string; value: string; data: unknown }[]\n  > = {};\n  faAt = faAt;\n\n  constructor() {\n    super();\n\n    // Setup initial columns\n    this.columns = [\n      { field: 'key', header: '', transform: 'uppercase' },\n      { field: 'value', header: '' },\n    ];\n\n    effect(() => {\n      const selectOptionsLoaded = this.selectOptionsLoaded();\n      if (selectOptionsLoaded) {\n        untracked(() => {\n          this.updateFormFields();\n          this.cdr.detectChanges();\n        });\n      }\n    });\n  }\n\n  ngOnInit(): void {\n    this.loadSelectOptions();\n  }\n\n  private loadSelectOptions(): void {\n    const emailProvider = this.entity();\n    const ownerIdValue = this.ownerId();\n\n    const effectiveOwnerId = emailProvider?.owner?.id ?? ownerIdValue;\n\n    if (isNullOrUndefined(effectiveOwnerId)) {\n      this.selectOptions = {};\n      this.selectOptionsLoaded.set(true);\n      this.updateFormFields();\n    }\n\n    this.entitiesService\n      .listEmailProviderTypes(effectiveOwnerId)\n      .pipe(takeUntilDestroyed(this.destroyRef))\n      .subscribe((result) => {\n        this.selectOptions = {\n          emailProviderTypes: result.items\n            .map((item) => ({\n              label: item?.name,\n              value: item.id,\n              data: item,\n            }))\n            .sort((a, b) => a.label.localeCompare(b.label)),\n        };\n\n        this.selectOptionsLoaded.set(true);\n      });\n  }\n\n  protected override updateFormFields(): void {\n    const emailProvider = this.entity();\n    this.formFields = [\n      createDropdownField(\n        'type',\n        'Type',\n        this.selectOptions?.['emailProviderTypes'],\n        emailProvider?.type?.id,\n        {\n          name: 'type',\n          validations: [\n            {\n              name: 'required',\n              validator: Validators.required,\n              message: 'Type is required',\n            },\n          ],\n          disabled: !this.createMode(),\n          props: {\n            appendTo: 'body',\n          },\n        },\n      ),\n      createTextField('name', 'Name', emailProvider?.name, {\n        name: 'name',\n        validations: [\n          {\n            name: 'required',\n            validator: Validators.required,\n            message: 'Name is required',\n          },\n        ],\n      }),\n    ];\n  }\n\n  override getUpdateMethod(): (\n    id: string,\n    data: Partial<EmailProviderEntity>,\n  ) => Observable<EmailProviderResponse> {\n    return (\n      this.operationRegistry.getOperation<\n        EmailProviderEntity,\n        EmailProviderCreateRequest,\n        EmailProviderResponse,\n        'update'\n      >('email-provider', 'update') ??\n      ((id, data) => this.entitiesService.updateEmailProvider(id, data))\n    );\n  }\n\n  protected override onFormValueChange(\n    formData: Record<string, string | number | object>,\n  ): void {\n    const transformedData = this.transformFormData(formData);\n    this.formValueChange.emit(transformedData);\n  }\n\n  protected override transformFormData(\n    formData: Record<string, string | number | object>,\n  ): Record<string, string | number | object> {\n    const transformedData = { ...formData };\n    if (isDefined(transformedData['type'])) {\n      const emailProviderTypeId = transformedData['type'] as string;\n      const emailProviderType = this.selectOptions?.[\n        'emailProviderTypes'\n      ]?.find((option) => option.value === emailProviderTypeId);\n      if (emailProviderType) {\n        transformedData['type'] = {\n          id: emailProviderTypeId,\n          name: (emailProviderType.data as EmailProviderTypeListItem)?.name,\n        };\n      }\n    }\n\n    return transformedData;\n  }\n}\n","<div class=\"card pt-2\">\n  <div class=\"mb-4 p-2 flex justify-start items-center\">\n    <fa-icon\n      [icon]=\"faAt\"\n      class=\"!text-[2.5rem]\"\n      [ngClass]=\"{ 'icon-primary': isFormEditable() }\"\n    ></fa-icon>\n\n    <div class=\"pl-6 flex-1\">\n      <div class=\"flex justify-between items-center\">\n        <h2 class=\"text-xl font-semibold m-0\">Email Provider Details</h2>\n        @if (!isFormEditable() && !createMode()) {\n          <div class=\"icon-light\">\n            <span\n              class=\"pi pi-pen-to-square action hover !text-2xl\"\n              [attr.aria-label]=\"'Edit email provider details'\"\n              (click)=\"onEdit()\"\n              (keydown.enter)=\"onEdit()\"\n            ></span>\n          </div>\n        }\n      </div>\n      <span\n        >The following information is required in order to configure your email\n        provider.</span\n      >\n    </div>\n  </div>\n\n  @if (isFormEditable() || (createMode() && formFields.length)) {\n    <app-dynamic-form\n      [fields]=\"formFields\"\n      [actions]=\"actions\"\n      [hideActions]=\"createMode()\"\n      (formSubmit)=\"onSubmit($event)\"\n      (formValidityChange)=\"onFormValidityChange($event)\"\n      (formValueChange)=\"onFormValueChange($event)\"\n    >\n    </app-dynamic-form>\n  }\n\n  @if (!isFormEditable() && !createMode()) {\n    <app-grid\n      [data]=\"emailProviderDetails()\"\n      [columns]=\"columns\"\n      [showGridLines]=\"false\"\n      [hideHeader]=\"true\"\n      tableStyleClass=\"info-display !w-auto\"\n    ></app-grid>\n  }\n</div>\n","import { CommonModule } from '@angular/common';\nimport {\n  Component,\n  computed,\n  effect,\n  inject,\n  input,\n  signal,\n} from '@angular/core';\n\nimport { ButtonModule } from 'primeng/button';\nimport { InputTextModule } from 'primeng/inputtext';\nimport { Observable } from 'rxjs';\n\nimport {\n  EmailProviderCreateRequest,\n  EmailProviderResponse,\n  EntitiesService,\n  EmailProviderTypeResponse,\n} from '../../../../../api';\nimport { DynamicFormComponent } from '../../../../../shared/components/forms/dynamic-form/dynamic-form.component';\nimport { GridComponent } from '../../../../../shared/components/grid/grid.component';\nimport {\n  createDropdownField,\n  createNumberField,\n  createPasswordField,\n  createTextAreaField,\n  createTextField,\n  FormFieldConfig,\n  ValidationRule,\n} from '../../../../../shared/models';\nimport { isDefined, isNullOrUndefined } from '../../../../../shared/utils';\nimport { EntityOperationRegistryService } from '../../../services/entity/entity-operation-registry.service';\nimport { EntitySectionBaseComponent } from '../../base';\nimport { FormBuilderField } from '../../../../../core/models';\nimport { Validators } from '@angular/forms';\n\ntype EmailProviderEntity = EmailProviderResponse | EmailProviderCreateRequest;\n\ninterface FormField {\n  id: string;\n  title: string;\n  type: string;\n  value?: string | number;\n  defaultValue?: string | number;\n  required?: boolean;\n  description?: string;\n  min?: number;\n  max?: number;\n  values?: { key: string; value: string; fields: FormField[] }[];\n}\n\n@Component({\n  selector: 'app-email-provider-parameters-section',\n  imports: [\n    CommonModule,\n    ButtonModule,\n    InputTextModule,\n    GridComponent,\n    DynamicFormComponent,\n  ],\n  templateUrl: './email-provider-parameters-section.component.html',\n  styleUrl: './email-provider-parameters-section.component.scss',\n})\nexport class EmailProviderParametersSectionComponent extends EntitySectionBaseComponent<EmailProviderEntity> {\n  readonly ownerId = input<string | null>(null);\n  readonly emailProviderType = input<EmailProviderTypeResponse | null>(null);\n  readonly entitiesService = inject(EntitiesService);\n  private readonly operationRegistry = inject(EntityOperationRegistryService);\n\n  protected readonly isLoadingEmailType = signal<boolean>(false);\n  protected readonly customValues = signal<Record<string, string>>({});\n\n  readonly emailProviderParameters = computed(() => {\n    const emailProviderParameters = this.entity()?.parameters;\n    const emailProviderType = this.emailProviderType();\n    if (\n      isNullOrUndefined(emailProviderParameters) ||\n      isNullOrUndefined(emailProviderType)\n    )\n      return [];\n\n    const params: { groups: { fields: FormBuilderField[] }[] } = JSON.parse(\n      emailProviderType?.parameterDefinition ?? '',\n    );\n    const values: { key: string; value: string }[] = [];\n    params.groups.forEach((group) => {\n      group.fields.forEach((field: FormBuilderField) => {\n        let fieldValue = 'None';\n        if (field.type === 'password') {\n          fieldValue = '****';\n        } else {\n          const paramValue = emailProviderParameters?.[field.id];\n          if (typeof paramValue === 'object') {\n            fieldValue = JSON.stringify(paramValue);\n          } else if (paramValue !== undefined) {\n            fieldValue = paramValue as unknown as string;\n          }\n        }\n\n        values.push({\n          key: field.title,\n          value: fieldValue,\n        });\n\n        // Handle combo fields with dependent fields\n        if (field.type === 'combo' && field.values) {\n          const selectedValue = emailProviderParameters?.[\n            field.id\n          ] as unknown as string;\n          const selectedOption = field.values.find(\n            (opt) => opt.key === selectedValue,\n          );\n\n          if (selectedOption?.fields) {\n            selectedOption.fields.forEach((subField) => {\n              if (emailProviderParameters?.[subField.id] !== undefined) {\n                let fieldValue = 'None';\n                const paramValue = emailProviderParameters?.[subField.id];\n\n                if (subField.type === 'password') {\n                  fieldValue = '****';\n                } else if (typeof paramValue === 'object') {\n                  fieldValue = JSON.stringify(paramValue);\n                } else if (paramValue !== undefined) {\n                  fieldValue = paramValue as unknown as string;\n                }\n\n                values.push({\n                  key: `${subField.title}`,\n                  value: fieldValue,\n                });\n              }\n            });\n          }\n        }\n      });\n    });\n\n    return values;\n  });\n  selectOptions: Record<string, { label: string; value: string }[]> = {};\n\n  constructor() {\n    super();\n\n    // Setup initial columns\n    this.columns = [\n      { field: 'key', header: '', transform: 'uppercase' },\n      { field: 'value', header: '' },\n    ];\n\n    effect(() => {\n      const emailProviderType = this.emailProviderType();\n      if (isDefined(emailProviderType)) {\n        this.updateFormFields();\n      }\n    });\n  }\n\n  protected override updateFormFields(): void {\n    const emailProvider = this.entity();\n    const emailProviderType = this.emailProviderType();\n\n    if (!emailProviderType) {\n      return;\n    }\n\n    const params: { groups: { fields: FormField[] }[] } = JSON.parse(\n      emailProviderType?.parameterDefinition ?? '{}',\n    );\n\n    this.formFields = params.groups.reduce((acc: FormFieldConfig[], group) => {\n      const groupFields = group.fields.map((field: FormField) =>\n        this.createFormFieldConfig(field, emailProvider),\n      );\n      return [...acc, ...groupFields];\n    }, []);\n  }\n\n  private createFormField(\n    field: FormField,\n    emailProvider?: EmailProviderEntity | null,\n  ): FormFieldConfig {\n    const baseConfig = {\n      name: field.id,\n      validations: this.createValidations(field),\n      hint: field.description,\n    };\n\n    const fieldValue = emailProvider?.parameters?.[field.id];\n\n    switch (field.type) {\n      case 'memo':\n        return createTextAreaField(\n          field.id,\n          field.title,\n          fieldValue as unknown as string,\n          baseConfig,\n        );\n\n      case 'number':\n        return createNumberField(\n          field.id,\n          field.title,\n          fieldValue as unknown as number,\n          {\n            ...baseConfig,\n            props: { min: field.min, max: field.max },\n          },\n        );\n\n      case 'combo':\n        return createDropdownField(\n          field.id,\n          field.title,\n          field.values?.map((item) => ({\n            label: item.value,\n            value: item.key,\n          })) ?? [],\n          fieldValue as unknown as string,\n          {\n            ...baseConfig,\n            props: {\n              appendTo: 'body',\n            },\n            conditional: (field?.values?.length ?? 0) > 0,\n            conditions: this.createConditionalFields(field, emailProvider),\n          },\n        );\n\n      case 'password':\n        return createPasswordField(field.id, field.title, {\n          ...baseConfig,\n          props: {\n            type: 'password',\n          },\n        });\n\n      case 'url':\n        return createTextField(\n          field.id,\n          field.title,\n          fieldValue as unknown as string,\n          {\n            ...baseConfig,\n            validations: [\n              ...baseConfig.validations,\n              {\n                name: 'pattern',\n                validator: Validators.pattern(/^https?:\\/\\/.+/),\n                message: `${field.title} must be a valid URL`,\n              },\n            ],\n          },\n        );\n\n      case 'text':\n      default:\n        return createTextField(\n          field.id,\n          field.title,\n          fieldValue as unknown as string,\n          baseConfig,\n        );\n    }\n  }\n\n  private createValidations(field: FormField) {\n    const validations: ValidationRule[] = [];\n\n    if (field.required ?? false) {\n      validations.push({\n        name: 'required',\n        validator: Validators.required,\n        message: `${field.title} is required`,\n      });\n    }\n\n    if (\n      field.type === 'number' &&\n      (field.min !== undefined || field.max !== undefined)\n    ) {\n      if (field.min !== undefined) {\n        validations.push({\n          name: 'min',\n          validator: Validators.min(field.min),\n          message: `${field.title} must be at least ${field.min}`,\n        });\n      }\n      if (field.max !== undefined) {\n        validations.push({\n          name: 'max',\n          validator: Validators.max(field.max),\n          message: `${field.title} must be at most ${field.max}`,\n        });\n      }\n    }\n\n    return validations;\n  }\n\n  private createConditionalFields(\n    field: FormField,\n    emailProvider?: EmailProviderEntity | null,\n  ) {\n    if (!isDefined(field.values)) {\n      return {};\n    }\n\n    return field.values.reduce((acc, item) => {\n      if (!isDefined(item.fields)) return {};\n      return {\n        ...acc,\n        [item.key]: item.fields.map((f) =>\n          this.createFormField(f, emailProvider),\n        ),\n      };\n    }, {});\n  }\n\n  override getUpdateMethod(): (\n    id: string,\n    data: Partial<EmailProviderEntity>,\n  ) => Observable<EmailProviderResponse> {\n    return (\n      this.operationRegistry.getOperation<\n        EmailProviderEntity,\n        EmailProviderCreateRequest,\n        EmailProviderResponse,\n        'update'\n      >('email-providers', 'update') ??\n      ((id, data) => this.entitiesService.updateEmailProvider(id, data))\n    );\n  }\n\n  protected override onFormValueChange(\n    formData: Record<string, string | number | object>,\n  ): void {\n    const transformedData = { ...formData };\n\n    this.formValueChange.emit({ parameters: transformedData });\n  }\n\n  createConditionFields(fields: FormField[]): FormFieldConfig[] {\n    return fields.map((field) => {\n      return this.createFormFieldConfig(field, this.entity());\n    });\n  }\n\n  private createFormFieldConfig(\n    field: FormField,\n    emailProvider: EmailProviderEntity | null,\n  ): FormFieldConfig {\n    if (field.type === 'memo') {\n      return createTextAreaField(\n        field.id,\n        field.title,\n        emailProvider?.parameters?.[field.id] as unknown as string,\n        {\n          name: field.id,\n          validations:\n            (field.required ?? false)\n              ? [\n                  {\n                    name: 'required',\n                    validator: Validators.required,\n                    message: `${field.title} is required`,\n                  },\n                ]\n              : [],\n          hint: field.description,\n        },\n      );\n    }\n    if (field.type === 'number') {\n      return createNumberField(\n        field.id,\n        field.title,\n        emailProvider?.parameters?.[field.id] as unknown as number,\n        {\n          name: field.id,\n          validations:\n            (field.required ?? false)\n              ? [\n                  {\n                    name: 'required',\n                    validator: Validators.required,\n                    message: `${field.title} is required`,\n                  },\n                ]\n              : [],\n          hint: field.description,\n        },\n      );\n    }\n    if (field.type === 'combo' && field.values) {\n      // Handle dropdown field creation\n      const options = field.values.map((value) => ({\n        label: value.value,\n        value: value.key,\n      }));\n\n      return createDropdownField(\n        field.id,\n        field.title,\n        options,\n        (emailProvider?.parameters?.[field.id] as unknown as string) ||\n          (field.defaultValue as string),\n        {\n          name: field.id,\n          validations:\n            (field.required ?? false)\n              ? [\n                  {\n                    name: 'required',\n                    validator: Validators.required,\n                    message: `${field.title} is required`,\n                  },\n                ]\n              : [],\n          hint: field.description,\n          props: {\n            appendTo: 'body',\n          },\n          conditional: true,\n          conditions: options.reduce(\n            (acc, option) => ({\n              ...acc,\n              [option.value]: this.createConditionFields(\n                field?.values?.find((opt) => opt.key === option.value)\n                  ?.fields ?? [],\n              ),\n            }),\n            {},\n          ),\n        },\n      );\n    }\n    if (field.type === 'password') {\n      return createPasswordField(field.id, field.title, {\n        name: field.id,\n        validations:\n          (field.required ?? false)\n            ? [\n                {\n                  name: 'required',\n                  validator: Validators.required,\n                  message: `${field.title} is required`,\n                },\n              ]\n            : [],\n        hint: field.description,\n        props: {\n          type: 'password',\n        },\n      });\n    }\n\n    // Default text field\n    return createTextField(\n      field.id,\n      field.title,\n      emailProvider?.parameters?.[field.id] as unknown as string,\n      {\n        name: field.id,\n        validations:\n          (field.required ?? false)\n            ? [\n                {\n                  name: 'required',\n                  validator: Validators.required,\n                  message: `${field.title} is required`,\n                },\n              ]\n            : [],\n        hint: field.description,\n      },\n    );\n  }\n}\n","<div class=\"card pt-2\">\n  <div class=\"mb-4 p-2 flex justify-start items-center\">\n    <span\n      class=\"pi pi-wrench !text-[2.5rem]\"\n      [ngClass]=\"{ 'icon-primary': isFormEditable() }\"\n      [attr.aria-label]=\"'wrench icon'\"\n    ></span>\n\n    <div class=\"pl-6 flex-1\">\n      <div class=\"flex justify-between items-center\">\n        <h2 class=\"text-xl font-semibold m-0\">Parameters</h2>\n        @if (!isFormEditable() && !createMode()) {\n          <div class=\"icon-light\">\n            <span\n              class=\"pi pi-pen-to-square action hover !text-2xl\"\n              [attr.aria-label]=\"'Edit email parameters details'\"\n              (click)=\"onEdit()\"\n              (keydown.enter)=\"onEdit()\"\n            ></span>\n          </div>\n        }\n      </div>\n      <span\n        >Configure the following parameters that are required to communicate\n        with the email provider.</span\n      >\n    </div>\n  </div>\n\n  @if (isFormEditable() || (createMode() && formFields.length)) {\n    <app-dynamic-form\n      [fields]=\"formFields\"\n      [actions]=\"actions\"\n      [hideActions]=\"createMode()\"\n      (formSubmit)=\"onSubmit($event)\"\n      (formValidityChange)=\"onFormValidityChange($event)\"\n      (formValueChange)=\"onFormValueChange($event)\"\n    >\n    </app-dynamic-form>\n  }\n\n  @if (!isFormEditable() && !createMode()) {\n    <app-grid\n      [data]=\"emailProviderParameters()\"\n      [columns]=\"columns\"\n      [showGridLines]=\"false\"\n      [hideHeader]=\"true\"\n      tableStyleClass=\"info-display !w-auto\"\n    ></app-grid>\n  }\n</div>\n","import { Injectable } from '@angular/core';\n\nimport { EmailProviderResponse, EmailProviderTypeResponse } from '../../../api';\nimport { AdminDetailSection } from '../models';\nimport { EmailProviderDetailsSectionComponent } from '../components/email-providers/email-provider-details-section/email-provider-details-section.component';\nimport { EmailProviderParametersSectionComponent } from '../components/email-providers/email-provider-parameters-section/email-provider-parameters-section.component';\nimport { FeedSectionComponent } from '../components/shared/feed-section/feed-section.component';\n\n@Injectable({ providedIn: 'root' })\nexport class EmailProviderSectionConfigFactory {\n  /**\n   * Create sections for email provider information\n   * @param emailProvider The email provider object to display in the section\n   * @returns An array of AdminDetailSection objects representing the email provider information sections\n   */\n  createEmailProviderInformationSection(\n    emailProvider: EmailProviderResponse | null,\n    emailProviderType: EmailProviderTypeResponse | null,\n  ): AdminDetailSection[] {\n    return [\n      {\n        id: 'email-provider-details',\n        title: 'Email Config Details',\n        component: EmailProviderDetailsSectionComponent,\n        componentInputs: { entity: emailProvider },\n        category: 'information',\n        order: 10,\n      },\n      {\n        id: 'email-provider-parameters',\n        title: 'Email Config Parameters',\n        component: EmailProviderParametersSectionComponent,\n        componentInputs: {\n          entity: emailProvider,\n          entityType: 'email-provider',\n          dataPath: 'parameters',\n          injectDataAtPath: true,\n          emailProviderType,\n        },\n        category: 'information',\n        order: 20,\n      },\n    ];\n  }\n\n  /**\n   * Create sections for email provider changes\n   * @param emailProvider The email provider object to display in the section\n   * @returns An array of AdminDetailSection objects representing the email provider changes sections\n   */\n  createChangesSection(\n    emailProvider: EmailProviderResponse | null,\n  ): AdminDetailSection[] {\n    return [\n      {\n        id: 'email-provider-changes',\n        title: 'Changes',\n        component: FeedSectionComponent,\n        componentInputs: {\n          entity: emailProvider,\n        },\n        category: 'feed',\n        order: 10,\n      },\n    ];\n  }\n\n  /**\n   * Create all emailProvider sections in one call\n   * @param emailProvider The emailProvider object to display in the sections\n   * @returns An array of AdminDetailSection objects representing all emailProvider sections\n   */\n  createAllEmailProviderSections(\n    emailProvider: EmailProviderResponse | null,\n    emailProviderType: EmailProviderTypeResponse | null,\n  ): AdminDetailSection[] {\n    return [\n      ...this.createEmailProviderInformationSection(\n        emailProvider,\n        emailProviderType,\n      ),\n      ...this.createChangesSection(emailProvider),\n    ];\n  }\n}\n","import {\n  Component,\n  computed,\n  effect,\n  inject,\n  input,\n  TemplateRef,\n  ViewChild,\n} from '@angular/core';\nimport { Validators } from '@angular/forms';\nimport { CommonModule } from '@angular/common';\n\nimport { ButtonModule } from 'primeng/button';\nimport { InputTextModule } from 'primeng/inputtext';\nimport { Observable } from 'rxjs';\nimport { faPalette } from '@fortawesome/free-solid-svg-icons';\nimport { FontAwesomeModule } from '@fortawesome/angular-fontawesome';\nimport { v4 as uuidv4 } from 'uuid';\n\nimport {\n  ThemeListItem,\n  ThemeCreateRequest,\n  EntitiesService,\n  ThemeResponse,\n  ThemeCustomHTMLTag,\n} from '../../../../../api';\nimport {\n  createDropdownField,\n  createModalListField,\n  createTextAreaField,\n  createTextField,\n  FieldConfiguration,\n  FormFieldConfig,\n  ListFieldModalConfig,\n} from '../../../../../shared/models';\nimport { EntitySectionBaseComponent } from '../../base';\nimport { isDefined, isEmpty } from '../../../../../shared/utils';\nimport { DynamicFormComponent } from '../../../../../shared/components/forms/dynamic-form/dynamic-form.component';\nimport { GridComponent } from '../../../../../shared/components/grid/grid.component';\nimport { EntityOperationRegistryService } from '../../../services/entity/entity-operation-registry.service';\nimport { ModalListFormComponent } from '../../../../../shared/components/forms/modal-list-form/modal-list-form.component';\nimport { LogoTemplateContext } from '../../../models';\nimport { ApiUrlService } from '../../../../../core/services/api-url.service';\n\ntype ThemeEntity = ThemeListItem | ThemeCreateRequest;\ninterface CustomTag extends ThemeCustomHTMLTag {\n  id: string;\n}\n\n@Component({\n  selector: 'app-theme-details-section',\n  imports: [\n    CommonModule,\n    ButtonModule,\n    InputTextModule,\n    GridComponent,\n    DynamicFormComponent,\n    FontAwesomeModule,\n  ],\n  templateUrl: './theme-details-section.component.html',\n  styleUrl: './theme-details-section.component.scss',\n})\nexport class ThemeDetailsSectionComponent extends EntitySectionBaseComponent<ThemeEntity> {\n  @ViewChild('customTemplate', { static: true }) logoTemplate:\n    | TemplateRef<LogoTemplateContext>\n    | undefined;\n  readonly ownerId = input<string | null>(null);\n  readonly entitiesService = inject(EntitiesService);\n  private readonly operationRegistry = inject(EntityOperationRegistryService);\n  private readonly apiUrlService = inject(ApiUrlService);\n\n  readonly themeDetails = computed(() => {\n    const themeDetails = this.entity();\n    if (!isDefined(themeDetails)) return [];\n\n    return [\n      { key: 'Name', value: themeDetails.name },\n      {\n        key: 'Description',\n        value: themeDetails.description ?? 'None',\n      },\n      {\n        key: 'Custom CSS Link',\n        value: !isEmpty(themeDetails?.settings?.cssSrc)\n          ? themeDetails.settings.cssSrc\n          : 'None',\n      },\n      {\n        key: 'Custom Tags',\n        value:\n          (themeDetails?.customTags?.length ?? 0) > 0\n            ? themeDetails.customTags\n                .map((tag: CustomTag) => tag.name)\n                .join(', ')\n            : 'None',\n      },\n      {\n        key: 'Web Logo',\n        value: '',\n        imageUrl: `${this.apiUrlService.getCurrentApiUrl()}/entities/themes/${themeDetails.id}/logo?size=small`,\n      },\n    ];\n  });\n\n  faPalette = faPalette;\n  customHtmlTagModalConfig: ListFieldModalConfig<CustomTag> | undefined;\n\n  constructor() {\n    super();\n\n    effect(() => {\n      if (this.logoTemplate) {\n        this.columns = [\n          { field: 'key', header: '', transform: 'uppercase' },\n          { field: 'value', header: '', cellTemplate: this.logoTemplate },\n        ];\n      }\n    });\n  }\n\n  protected override updateFormFields(): void {\n    const theme = this.entity();\n\n    this.customHtmlTagModalConfig = {\n      modalComponent: ModalListFormComponent,\n      modalTitle: 'Custom HTML Tags',\n      subHeader:\n        'Enter the details for an HTML tag that will be injected into the page at your chosen location.',\n      defaultItemProvider: () => ({\n        id: uuidv4(),\n        name: '',\n        tag: 'script',\n        location: 'head',\n        attributes: '',\n        contents: '',\n      }),\n      listItemFormatter: (item: CustomTag) => this.stateItemToListItem(item),\n      modalFields: (item: CustomTag | undefined): FormFieldConfig[] => {\n        return [\n          createTextField('name', 'Name', item?.name, {\n            name: 'name',\n            validations: [\n              {\n                name: 'required',\n                validator: Validators.required,\n                message: 'Name is required',\n              },\n            ],\n          }),\n          createDropdownField(\n            'location',\n            'Location',\n            [\n              { label: 'Header', value: 'head' },\n              { label: 'Body', value: 'body' },\n            ],\n            item?.location,\n            {\n              name: 'location',\n\n              validations: [\n                {\n                  name: 'required',\n                  validator: Validators.required,\n                  message: 'Location is required',\n                },\n              ],\n            },\n          ),\n          createTextField('tag', 'Tag Type', item?.tag, {\n            name: 'tag',\n            validations: [\n              {\n                name: 'required',\n                validator: Validators.required,\n                message: 'Tag Type is required',\n              },\n            ],\n          }),\n          createTextAreaField(\n            'attributes',\n            'Tag Attributes',\n            item?.attributes,\n            {\n              name: 'attributes',\n              validations: [],\n              props: { rows: 5 },\n              hint: `A list of tag attributes, one per line, in the format: attr=\"value\"`,\n            },\n          ),\n          createTextAreaField('contents', 'Tag Contents', item?.contents, {\n            name: 'contents',\n            validations: [],\n            props: { rows: 5 },\n          }),\n        ];\n      },\n    };\n\n    this.formFields = [\n      createTextField('name', 'Name', theme?.name, {\n        name: 'name',\n        validations: [\n          {\n            name: 'required',\n            validator: Validators.required,\n            message: 'Name is required',\n          },\n        ],\n      }),\n      createTextField('description', 'Description', theme?.description, {\n        name: 'description',\n        validations: [\n          {\n            name: 'required',\n            validator: Validators.required,\n            message: 'Description is required',\n          },\n        ],\n      }),\n      {\n        name: 'settings',\n        key: 'settings',\n        type: 'group',\n        fields: [\n          createTextField(\n            'cssSrc',\n            'Custom CSS Link',\n            theme?.settings?.cssSrc,\n            {\n              name: 'cssSrc',\n              validations: [],\n            },\n          ),\n        ],\n      },\n      ...(!this.createMode()\n        ? [\n            createModalListField<CustomTag>(\n              'customTags',\n              'Custom Tags',\n              theme?.customTags ?? [],\n              {\n                name: 'customTags',\n                validations: [],\n                props: {\n                  modalConfig: this\n                    .customHtmlTagModalConfig as unknown as ListFieldModalConfig<unknown>,\n                },\n              },\n            ),\n          ]\n        : []),\n    ];\n  }\n\n  override getUpdateMethod(): (\n    id: string,\n    data: Partial<ThemeEntity>,\n  ) => Observable<ThemeResponse> {\n    return (\n      this.operationRegistry.getOperation<\n        ThemeEntity,\n        ThemeCreateRequest,\n        ThemeResponse,\n        'update'\n      >('theme', 'update') ??\n      ((id, data) => this.entitiesService.updateTheme(id, data))\n    );\n  }\n\n  stateItemToListItem(item: CustomTag): FieldConfiguration {\n    return {\n      id: item.id,\n      title: item.name,\n      icon: 'code',\n      display: '',\n    };\n  }\n}\n","<div class=\"card pt-2\">\n  <div class=\"mb-4 p-2 flex justify-start items-center\">\n    <fa-icon\n      [icon]=\"faPalette\"\n      class=\"!text-[2.5rem]\"\n      [ngClass]=\"{ 'icon-primary': isFormEditable() }\"\n    ></fa-icon>\n\n    <div class=\"pl-6 flex-1\">\n      <div class=\"flex justify-between items-center\">\n        <h2 class=\"text-xl font-semibold m-0\">Theme Details</h2>\n        @if (!isFormEditable() && !createMode()) {\n          <div class=\"icon-light\">\n            <span\n              class=\"pi pi-pen-to-square action hover !text-2xl\"\n              [attr.aria-label]=\"'Edit theme details'\"\n              (click)=\"onEdit()\"\n              (keydown.enter)=\"onEdit()\"\n            ></span>\n          </div>\n        }\n      </div>\n      <span>Give your theme a unique name and description.</span>\n    </div>\n  </div>\n\n  @if (isFormEditable() || (createMode() && formFields.length)) {\n    <app-dynamic-form\n      [fields]=\"formFields\"\n      [actions]=\"actions\"\n      [hideActions]=\"createMode()\"\n      (formSubmit)=\"onSubmit($event)\"\n      (formValidityChange)=\"onFormValidityChange($event)\"\n      (formValueChange)=\"onFormValueChange($event)\"\n    >\n    </app-dynamic-form>\n  }\n\n  @if (!isFormEditable() && !createMode()) {\n    <app-grid\n      [data]=\"themeDetails()\"\n      [columns]=\"columns\"\n      [showGridLines]=\"false\"\n      [hideHeader]=\"true\"\n      tableStyleClass=\"info-display !w-auto\"\n    ></app-grid>\n  }\n</div>\n\n<ng-template #customTemplate let-details>\n  @if (details?.imageUrl) {\n    <img\n      [src]=\"details.imageUrl\"\n      class=\"max-w-[150px]\"\n      [alt]=\"details.key || 'image'\"\n    />\n  } @else {\n    {{ details?.value }}\n  }\n</ng-template>\n","import { inject, Injectable } from '@angular/core';\nimport { UtilityService } from '../../../core/services/utility.service';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class ThemeUtilityService {\n  private readonly utilityService = inject(UtilityService);\n\n  /**\n   * Creates a single preset entry with a computed value\n   * @param type - The type of preset (e.g., 'color', 'font-size', 'spacing')\n   * @param group - The group name\n   * @param name - Optional custom name for the preset\n   * @param valueResolver - Function that computes the value for the preset\n   * @returns Record with single preset entry\n   */\n  createPreset<T>(\n    type: string,\n    group: string,\n    name: string | undefined,\n    valueResolver: (variable: string) => T,\n  ): Record<string, T> {\n    const presetName =\n      name ??\n      `${this.utilityService.toTitleCase(group.replaceAll('-', ' '))} ${this.utilityService.toTitleCase(type.replaceAll('-', ' '))}`;\n\n    return {\n      [presetName]: valueResolver(`var(--${group}-${type})`),\n    };\n  }\n\n  /**\n   * Creates multiple presets for different groups of the same type\n   * @param type - The type of preset (e.g., 'color', 'font-size', 'spacing')\n   * @param groups - Array of group names\n   * @param valueResolver - Function that computes the value for each preset\n   * @returns Record with multiple preset entries\n   */\n  createPresets<T>(\n    type: string,\n    groups: string[],\n    valueResolver: (variable: string) => T,\n  ): Record<string, T> {\n    return groups.reduce(\n      (result, group) => ({\n        ...result,\n        ...this.createPreset(type, group, undefined, valueResolver),\n      }),\n      {},\n    );\n  }\n}\n","import { Injectable, inject } from '@angular/core';\nimport {\n  THEME_OFF_WHITE,\n  THEME_OFF_BLACK,\n} from '../../../shared/models/theme-defaults';\nimport { ThemeEngine } from '../../../shared/models/theme-engine';\nimport { DEFAULT_SHADE_VALUES } from '../models';\nimport { UtilityService } from '../../../core/services/utility.service';\nimport { ThemeUtilityService } from './theme-utility.service';\n\n@Injectable({ providedIn: 'root' })\nexport class ThemeColorService {\n  private readonly themeEngine = inject(ThemeEngine);\n  private readonly utilityService = inject(UtilityService);\n  private readonly themeUtilityService = inject(ThemeUtilityService);\n\n  computeColor(variable: string): string {\n    return this.themeEngine.resolveFormula(variable);\n  }\n\n  getFontColorPresets(\n    group: string,\n    presets?: string[],\n  ): Record<string, string> {\n    return {\n      ...this.themeUtilityService.createPresets(\n        'font-color',\n        [...(presets || [])],\n        this.computeColor.bind(this),\n      ),\n      Auto: this.computeColor(\n        `var(--${group}-background-color).inverse(\"${THEME_OFF_WHITE}\", \"${THEME_OFF_BLACK}\")`,\n      ),\n      'Primary Color': this.computeColor('var(--color-primary-color)'),\n      'Primary Contrast': this.computeColor('var(--color-primary-contrast)'),\n      'Secondary Color': this.computeColor('var(--color-secondary-color)'),\n      'Secondary Contrast': this.computeColor(\n        'var(--color-secondary-contrast)',\n      ),\n      'Off Black': this.computeColor(THEME_OFF_BLACK),\n      'Off White': this.computeColor(THEME_OFF_WHITE),\n      Black: this.computeColor('#000000'),\n      White: this.computeColor('#ffffff'),\n    };\n  }\n\n  getBackgroundColorPresets(\n    presets?: string[],\n    customColors?: Record<string, string>,\n  ): Record<string, string> {\n    const groups = [...(presets || [])];\n    const backgroundShades = groups.reduce(\n      (result, grp) => ({\n        ...result,\n        ...this.themeUtilityService.createPreset(\n          'background-color',\n          grp,\n          `${this.utilityService.toTitleCase(grp)} Background`,\n          this.computeColor.bind(this),\n        ),\n        ...this.createShadeValues('lighten', grp, 'background'),\n        ...this.createShadeValues('darken', grp, 'background'),\n      }),\n      {},\n    );\n    return {\n      ...customColors,\n      ...backgroundShades,\n      /*      'Primary Color': this.computeColor('var(--color-primary-color)'),\n      'Secondary Color': this.computeColor('var(--color-secondary-color)'),\n      White: this.computeColor('#ffffff'),\n      Transparent: this.computeColor('transparent'), */\n    };\n  }\n\n  getBorderColorPresets(\n    group: string,\n    presets?: string[],\n    backgrounds?: string[],\n    customColors?: Record<string, string>,\n  ): Record<string, string> {\n    const groups = [group, ...(backgrounds || [])];\n    const backgroundShades = groups.reduce(\n      (result, grp) => ({\n        ...result,\n        ...this.themeUtilityService.createPreset(\n          'background-color',\n          grp,\n          `${this.utilityService.toTitleCase(grp)} Background`,\n          this.computeColor.bind(this),\n        ),\n        ...this.createShadeValues('lighten', grp, 'background'),\n        ...this.createShadeValues('darken', grp, 'background'),\n      }),\n      {},\n    );\n\n    return {\n      ...this.themeUtilityService.createPresets(\n        'border-color',\n        [...(presets || [])],\n        this.computeColor.bind(this),\n      ),\n      ...backgroundShades,\n      'Primary Color': this.computeColor('var(--color-primary-color)'),\n      'Secondary Color': this.computeColor('var(--color-secondary-color)'),\n      ...customColors,\n    };\n  }\n\n  createShadeValues(\n    type: 'lighten' | 'darken',\n    group: string,\n    variable: 'background' | 'font',\n    values = DEFAULT_SHADE_VALUES,\n  ): Record<string, string> {\n    return values.reduce((result: Record<string, string>, val) => {\n      const key = `${this.utilityService.toTitleCase(type)} ${this.utilityService.toTitleCase(group)} ${this.utilityService.toTitleCase(variable)} ${val * 100}%`;\n      result[key] = this.computeColor(\n        `var(--${group}-${variable}-color).${type}(${val})`,\n      );\n      return result;\n    }, {});\n  }\n\n  /**\n   * Get comprehensive color presets combining all color types for better identification\n   * @param group - The primary group context\n   * @param additionalGroups - Additional groups to include in presets\n   * @returns Record containing all available color presets\n   */\n  getAllColorPresets(\n    group: string,\n    additionalGroups: string[] = [],\n    customColors: Record<string, string> = {},\n  ): Record<string, string> {\n    const allGroups = [group, ...additionalGroups];\n    const uniqueGroups = [...new Set(allGroups)];\n\n    // Common theme colors that should always be available\n    const commonThemeColors = {\n      'Primary Color': this.computeColor('var(--color-primary-color)'),\n      'Primary Contrast': this.computeColor('var(--color-primary-contrast)'),\n      'Secondary Color': this.computeColor('var(--color-secondary-color)'),\n      'Secondary Contrast': this.computeColor(\n        'var(--color-secondary-contrast)',\n      ),\n      'Success Color': this.computeColor('var(--color-success-color)'),\n      'Success Contrast': this.computeColor('var(--color-success-contrast)'),\n      'Info Color': this.computeColor('var(--color-info-color)'),\n      'Info Contrast': this.computeColor('var(--color-info-contrast)'),\n      'Warning Color': this.computeColor('var(--color-warning-color)'),\n      'Warning Contrast': this.computeColor('var(--color-warning-contrast)'),\n      'Danger Color': this.computeColor('var(--color-danger-color)'),\n      'Danger Contrast': this.computeColor('var(--color-danger-contrast)'),\n      'Notify Color': this.computeColor('var(--color-notify-color)'),\n      'Notify Contrast': this.computeColor('var(--color-notify-contrast)'),\n      White: this.computeColor('#ffffff'),\n      Black: this.computeColor('#000000'),\n      'Off White': this.computeColor(THEME_OFF_WHITE),\n      'Off Black': this.computeColor(THEME_OFF_BLACK),\n      Transparent: this.computeColor('transparent'),\n    };\n\n    return {\n      // Font color presets\n      ...this.getFontColorPresets(group, uniqueGroups),\n\n      // Background color presets\n      ...this.getBackgroundColorPresets(uniqueGroups, {\n        ...commonThemeColors,\n        ...customColors,\n      }),\n\n      // Border color presets\n      ...this.getBorderColorPresets(group, uniqueGroups, uniqueGroups, {\n        ...commonThemeColors,\n        ...customColors,\n      }),\n\n      // Ensure common theme colors are always available\n      ...commonThemeColors,\n\n      // Custom colors provided by caller\n      ...customColors,\n    };\n  }\n  /**\n   * Determine if a value represents a color based on various detection strategies\n   * @param value - The value to check\n   * @param key - Optional key name for additional context\n   * @returns boolean indicating if the value represents a color\n   */\n  isColorValue(value: string, key?: string): boolean {\n    if (!value) return false;\n\n    const trimmedValue = value.trim();\n\n    // Check by key name if provided\n    if (\n      key !== undefined &&\n      key !== null &&\n      key.trim() !== '' &&\n      this.isColorByKeyName(key)\n    ) {\n      return true;\n    }\n\n    // Check by value format\n    return this.isColorByValueFormat(trimmedValue);\n  }\n  /**\n   * Check if a key name suggests it represents a color\n   */\n  private isColorByKeyName(key: string): boolean {\n    const keyLower = key.toLowerCase();\n\n    // Direct color-related keywords - but border needs special handling\n    const directColorKeywords = ['color', 'background', 'contrast'];\n\n    // Check for direct color keywords (excluding border for now)\n    if (directColorKeywords.some((keyword) => keyLower.includes(keyword))) {\n      return true;\n    }\n\n    // Special handling for border - only if it's specifically about color\n    if (keyLower.includes('border')) {\n      // Only consider it a color if it's specifically about border color\n      // NOT border width, border style, border radius, etc.\n      return (\n        keyLower.includes('color') ||\n        keyLower === 'border' ||\n        keyLower.endsWith(' border')\n      );\n    }\n\n    // Check for font color specifically (not just 'font')\n    if (keyLower.includes('font') && keyLower.includes('color')) {\n      return true;\n    }\n\n    // Theme color keywords (only when combined with 'color' or as standalone values)\n    const themeColorKeywords = [\n      'primary',\n      'secondary',\n      'success',\n      'info',\n      'notify',\n      'warning',\n      'danger',\n    ];\n\n    if (\n      themeColorKeywords.some((keyword) => {\n        const hasKeyword = keyLower.includes(keyword);\n        const hasColor = keyLower.includes('color');\n        const isStandaloneThemeColor =\n          keyLower === keyword || keyLower === `${keyword} color`;\n        return hasKeyword && (hasColor || isStandaloneThemeColor);\n      })\n    ) {\n      return true;\n    }\n\n    // Context-specific color keywords\n    const contextualColorKeywords = ['active', 'subnav', 'logo', 'client'];\n\n    if (\n      contextualColorKeywords.some((keyword) => {\n        const hasKeyword = keyLower.includes(keyword);\n        const hasColorContext =\n          keyLower.includes('color') ||\n          keyLower.includes('background') ||\n          (keyLower.includes('border') && keyLower.includes('color'));\n        return hasKeyword && hasColorContext;\n      })\n    ) {\n      return true;\n    }\n\n    return false;\n  }\n\n  /**\n   * Check if a value format represents a color\n   */\n  private isColorByValueFormat(value: string): boolean {\n    const colorPatterns = [\n      /^#[0-9a-fA-F]{3,8}$/, // Hex colors (#fff, #ffffff, #ffffffff)\n      /^rgb\\s*\\(/, // RGB colors\n      /^rgba\\s*\\(/, // RGBA colors\n      /^hsl\\s*\\(/, // HSL colors\n      /^hsla\\s*\\(/, // HSLA colors\n      /^(red|blue|green|yellow|purple|orange|pink|brown|black|white|gray|grey|transparent)$/i, // Named colors\n    ];\n\n    // Check basic color patterns first\n    if (colorPatterns.some((pattern) => pattern.test(value))) {\n      return true;\n    }\n\n    // More specific CSS variable checking\n    if (value.startsWith('var(--') && value.endsWith(')')) {\n      const variableName = value.slice(6, -1).toLowerCase(); // Extract variable name\n\n      // Only consider it a color if the variable name explicitly contains color-related terms\n      const colorVariablePatterns = [\n        /.*color.*/, // Contains 'color'\n        /.*background.*/, // Contains 'background'\n        /.*border.*/, // Contains 'border'\n        /.*contrast.*/, // Contains 'contrast'\n      ];\n\n      return colorVariablePatterns.some((pattern) =>\n        pattern.test(variableName),\n      );\n    }\n\n    return false;\n  }\n\n  /**\n   * Get context-aware color presets based on the key name\n   * @param key - The key name to analyze for context\n   * @param group - The primary group context\n   * @param additionalGroups - Additional groups to include\n   * @returns Contextual color presets\n   */\n  getContextualColorPresets(\n    key: string,\n    group: string,\n    additionalGroups: string[] = [],\n  ): Record<string, string> {\n    const keyLower = key.toLowerCase();\n    const allGroups = [group, ...additionalGroups];\n\n    // Determine the primary color type based on key analysis\n    if (keyLower.includes('font') || keyLower.includes('text')) {\n      return this.getFontColorPresets(group, allGroups);\n    }\n\n    if (keyLower.includes('background') || keyLower.includes('bg')) {\n      return this.getBackgroundColorPresets(allGroups);\n    }\n\n    if (keyLower.includes('border')) {\n      return this.getBorderColorPresets(group, allGroups, allGroups);\n    }\n\n    // If no specific type detected, return comprehensive presets\n    return this.getAllColorPresets(group, additionalGroups);\n  }\n}\n","import { Injectable, inject } from '@angular/core';\nimport {\n  FormFieldConfig,\n  createColorPickerField,\n  createNumberField,\n  createDropdownField,\n  FormFieldProps,\n} from '../../../shared/models';\nimport {\n  AVAILABLE_FONTS,\n  FONT_WEIGHTS,\n  FONT_TRANSFORMS,\n  DROP_SHADOW_OPTIONS,\n} from '../models';\nimport { ThemeColorService } from '../services/theme-color.service';\nimport { ThemeUtilityService } from '../services/theme-utility.service';\n\n@Injectable({ providedIn: 'root' })\nexport class ThemeFormFieldFactory {\n  private readonly colorService = inject(ThemeColorService);\n  private readonly themeUtilityService = inject(ThemeUtilityService);\n\n  createFontFamilyField(\n    id: string,\n    value: string,\n    presets?: string[],\n  ): FormFieldConfig {\n    const fontPresets =\n      Object.entries({\n        ...this.themeUtilityService.createPresets(\n          'font-family',\n          presets || [],\n          (variable) => variable,\n        ),\n      }).map(([key, val]) => ({\n        label: key,\n        value: val,\n      })) ?? [];\n    return this.createDropdownWithGrouping({\n      id,\n      label: 'Font Family',\n      options: [\n        ...fontPresets,\n        ...AVAILABLE_FONTS.map((font) => ({ label: font, value: font })),\n      ],\n      value,\n      props: { appendTo: 'body', filter: true },\n    });\n  }\n\n  createFontWeightField(id: string, value?: string): FormFieldConfig {\n    return this.createDropdownWithGrouping({\n      id,\n      label: 'Font Weight',\n      options: FONT_WEIGHTS.map((weight) => ({ label: weight, value: weight })),\n      value,\n      props: { appendTo: 'body', filter: true },\n    });\n  }\n\n  createFontTransformField(id: string, value: string): FormFieldConfig {\n    return this.createDropdownWithGrouping({\n      id,\n      label: 'Font Transform',\n      options: FONT_TRANSFORMS,\n      value,\n      props: { appendTo: 'body' },\n    });\n  }\n\n  createFontColorField(\n    id: string,\n    value: string,\n    group: string,\n    presets?: string[],\n    label = 'Font Color',\n    customColors?: Record<string, string>,\n  ): FormFieldConfig {\n    const colorPresets = this.colorService.getFontColorPresets(group, presets);\n    return this.createColorComboField(\n      id,\n      value,\n      { ...colorPresets, ...customColors },\n      label,\n    );\n  }\n\n  createBackgroundColorField(\n    id: string,\n    value: string,\n    presets?: string[],\n    label = 'Background Color',\n    customColors?: Record<string, string>,\n  ): FormFieldConfig {\n    const colorPresets = this.colorService.getBackgroundColorPresets(\n      presets,\n      customColors,\n    );\n    return this.createColorComboField(id, value, colorPresets, label);\n  }\n\n  createBorderColorField(\n    id: string,\n    value: string,\n    group: string,\n    presets?: string[],\n    backgrounds?: string[],\n    customColors?: Record<string, string>,\n  ): FormFieldConfig {\n    const colorPresets = this.colorService.getBorderColorPresets(\n      group,\n      presets,\n      backgrounds,\n      customColors,\n    );\n    return this.createColorComboField(id, value, colorPresets, 'Border Color');\n  }\n\n  createDropShadowField(\n    id: string,\n    value: string,\n    label: string,\n  ): FormFieldConfig {\n    return this.createDropdownWithGrouping({\n      id,\n      label,\n      options: DROP_SHADOW_OPTIONS,\n      value,\n      props: { appendTo: 'body' },\n    });\n  }\n\n  createColorComboField(\n    id: string,\n    value: string,\n    colors: Record<string, string>,\n    label: string,\n  ): FormFieldConfig {\n    const presets = Object.entries(colors).map(([key, val]) => ({\n      label: key,\n      value: val,\n    }));\n\n    return this.createFieldWithGrouping(id, (fieldId) =>\n      createColorPickerField(\n        fieldId,\n        label,\n        this.colorService.computeColor(value),\n        {\n          name: fieldId,\n          props: {\n            appendTo: 'body',\n            colorOptions: presets,\n          },\n        },\n      ),\n    );\n  }\n\n  createSizeNumberField(\n    id: string,\n    value: number,\n    label: string,\n    unit = 'rem',\n  ): FormFieldConfig {\n    return this.createFieldWithGrouping(id, (fieldId) =>\n      createNumberField(fieldId, label, value, {\n        name: fieldId,\n        props: {\n          appendTo: 'body',\n          suffix: unit,\n        },\n      }),\n    );\n  }\n\n  createDropdownWithGrouping(config: DropdownConfig): FormFieldConfig {\n    return this.createFieldWithGrouping(config.id, (fieldId) =>\n      createDropdownField(fieldId, config.label, config.options, config.value, {\n        name: fieldId,\n        validations: [],\n        props: config.props,\n      }),\n    );\n  }\n\n  private createFieldWithGrouping(\n    id: string,\n    fieldFactory: (id: string) => FormFieldConfig,\n  ): FormFieldConfig {\n    if (id.includes('.')) {\n      const [groupKey, fieldKey] = id.split('.', 2);\n      return {\n        key: groupKey,\n        name: groupKey,\n        type: 'group',\n        fields: [fieldFactory(fieldKey)],\n      };\n    }\n    return fieldFactory(id);\n  }\n}\n\ninterface DropdownConfig {\n  id: string;\n  label: string;\n  options: { label: string; value: string }[];\n  value?: string;\n  props?: FormFieldProps;\n}\n","import { Injectable } from '@angular/core';\nimport { FormFieldConfig } from '../../../shared/models';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class FormFieldService {\n  merge(\n    existingFields: FormFieldConfig[],\n    newFields: FormFieldConfig[],\n  ): FormFieldConfig[] {\n    if (!existingFields?.length) {\n      return this.consolidateByKey(newFields);\n    }\n\n    const consolidatedExisting = this.consolidateByKey(existingFields);\n    const consolidatedNew = this.consolidateByKey(newFields);\n\n    return this.mergeConsolidatedFields(consolidatedExisting, consolidatedNew);\n  }\n\n  private consolidateByKey(fields: FormFieldConfig[]): FormFieldConfig[] {\n    const fieldMap = new Map<string, FormFieldConfig>();\n    const fieldsWithoutKeys: FormFieldConfig[] = [];\n\n    for (const field of fields) {\n      const key = field.key || field.name;\n      if (!key) {\n        fieldsWithoutKeys.push(field);\n        continue;\n      }\n\n      if (fieldMap.has(key)) {\n        const existing = fieldMap.get(key) as FormFieldConfig;\n        fieldMap.set(key, this.mergeFields(existing, field));\n      } else {\n        fieldMap.set(key, field);\n      }\n    }\n\n    return [...fieldsWithoutKeys, ...Array.from(fieldMap.values())];\n  }\n\n  private mergeFields(\n    existing: FormFieldConfig,\n    incoming: FormFieldConfig,\n  ): FormFieldConfig {\n    if (this.isGroupField(existing) && this.isGroupField(incoming)) {\n      // Combine all fields from both groups\n      const mergedFields = [\n        ...(existing.fields || []),\n        ...(incoming.fields || []),\n      ];\n      return {\n        ...existing,\n        ...incoming,\n        fields: this.consolidateByKey(mergedFields),\n      };\n    }\n    return incoming; // New field takes precedence\n  }\n\n  private isGroupField(field: FormFieldConfig): boolean {\n    return field.type === 'group' && Array.isArray(field.fields);\n  }\n\n  private mergeConsolidatedFields(\n    existingFields: FormFieldConfig[],\n    newFields: FormFieldConfig[],\n  ): FormFieldConfig[] {\n    const existingMap = new Map(\n      existingFields.map((field) => [field.key || field.name, field]),\n    );\n\n    return newFields.map((newField) => {\n      const key = newField.key || newField.name;\n      const existing = key ? existingMap.get(key) : undefined;\n\n      return existing ? this.mergeFields(existing, newField) : newField;\n    });\n  }\n}\n","import {\n  createTextField,\n  FormFieldConfig,\n} from '../../../../shared/models/form-field.model';\nimport { EntitySectionBaseComponent } from './entity-section-base';\nimport {\n  EntitiesService,\n  ThemeResponse,\n  ThemeUpdateRequest,\n} from '../../../../api';\nimport { ThemeEngine } from '../../../../shared/models/theme-engine';\nimport { ThemeSettings } from '../../../../shared/models';\nimport { inject } from '@angular/core';\nimport { ThemeFormFieldFactory } from '../../factories/theme-form-field.factory';\nimport { FormFieldService } from '../../services/form-field.service';\nimport { EntityOperationRegistryService } from '../../services/entity/entity-operation-registry.service';\nimport { isDefined, isNullOrUndefined } from '../../../../shared/utils';\nimport { faFill } from '@fortawesome/free-solid-svg-icons';\nimport { ThemeColorService } from '../../services/theme-color.service';\nimport {\n  AVAILABLE_FONTS,\n  DROP_SHADOW_OPTIONS,\n  ICON_PACKS,\n} from '../../models/theme-form.constants';\n\ntype EditorValues = Record<string, object | string | number | boolean>;\n\nexport interface ThemeDetailConfig {\n  key: string;\n  path: readonly string[];\n  transform?: (value: unknown) => string;\n  options?: { value: string; label: string }[];\n}\n\n/**\n * Unified configuration interface for theme form fields and details display\n */\nexport interface ThemeFieldConfig {\n  /** Unique identifier for the field */\n  id: string;\n  /** Display label */\n  label: string;\n  /** Path to the value in theme settings */\n  path: readonly string[];\n  /** Field type */\n  type:\n    | 'text'\n    | 'number'\n    | 'dropdown'\n    | 'color'\n    | 'font-family'\n    | 'font-weight'\n    | 'font-transform'\n    | 'size';\n  /** Options for dropdown fields */\n  options?: { value: string; label: string }[];\n  /** Group/section for color preset context */\n  group?: string;\n  /** Preset groups for color/font fields */\n  presets?: string[];\n  /** Custom colors for color fields */\n  customColors?: Record<string, string>;\n  /** Transform function for display value */\n  transform?: (value: unknown) => string;\n  /** Additional properties for form field */\n  props?: Record<string, unknown>;\n  /** Whether this field should be included in details display */\n  includeInDetails?: boolean;\n}\n\n/**\n * Base component for theme settings sections.\n * Provides common functionality for displaying and editing theme settings.\n */\nexport abstract class ThemeSettingsSectionBase extends EntitySectionBaseComponent<ThemeResponse> {\n  faFill = faFill;\n  title = 'Theme Settings';\n  description = 'Customize your theme by tweaking the following settings.';\n\n  protected readonly themeEngine = inject(ThemeEngine);\n  protected readonly formFieldFactory = inject(ThemeFormFieldFactory);\n  protected readonly formFieldMerger = inject(FormFieldService);\n  protected readonly entitiesService = inject(EntitiesService);\n  protected readonly operationRegistry = inject(EntityOperationRegistryService);\n  protected readonly colorService = inject(ThemeColorService);\n\n  formChanges: Record<string, string | number | object> = {};\n\n  constructor(public group: string) {\n    super();\n  }\n\n  protected override updateFormFields(): void {\n    const entity = this.entity();\n    if (!entity) return;\n\n    const newFields = this.getFields(entity);\n    this.formFields = this.formFieldMerger.merge(this.formFields, newFields);\n  }\n\n  protected override onEntityLoaded(entity: ThemeResponse): void {\n    super.onEntityLoaded(entity);\n    if (entity?.settings) {\n      this.themeEngine.settingsToVariables(entity.settings);\n    }\n  }\n\n  protected isColorRow(rowData: Record<string, string>): boolean {\n    const colorKeys = ['Font Color', 'Background Color', 'Border Color'];\n    return colorKeys.includes(rowData['key']);\n  }\n\n  protected getColorLabelAndValue(variable: string): {\n    label: string;\n    value: string;\n  } {\n    const presets = {\n      ...this.colorService.getFontColorPresets(this.group),\n      ...this.colorService.getBackgroundColorPresets([]),\n      ...this.colorService.getBorderColorPresets(this.group),\n    };\n    const computedColor = this.colorService.computeColor(variable);\n    const presetKey = Object.keys(presets).find(\n      (key) => presets[key] === computedColor,\n    );\n    if (isDefined(presetKey)) {\n      return { label: presetKey, value: computedColor };\n    }\n\n    return { label: computedColor, value: computedColor };\n  }\n\n  protected onFieldValueChange(values: {\n    fieldKey: string;\n    value: string | number;\n    previousValue: string | number;\n  }): void {\n    // Split the key by dots to create nested structure\n    const keys = values.fieldKey.split('.');\n    let current = this.formChanges;\n\n    // Navigate/create the nested structure\n    for (let i = 0; i < keys.length - 1; i++) {\n      if (\n        isNullOrUndefined(current[keys[i]]) ||\n        typeof current[keys[i]] !== 'object'\n      ) {\n        current[keys[i]] = {};\n      }\n      current = current[keys[i]] as Record<string, string | number | object>;\n    }\n\n    // Set the final value\n    current[keys[keys.length - 1]] = values.value;\n  }\n\n  /**\n   * Helper method to safely access nested properties using a path array\n   */\n  protected getThemeValue(\n    themeSettings: Record<string, unknown>,\n    path: readonly string[],\n  ): unknown {\n    return path.reduce((obj: unknown, key: string) => {\n      if (\n        obj !== null &&\n        obj !== undefined &&\n        typeof obj === 'object' &&\n        key in obj\n      ) {\n        return (obj as Record<string, unknown>)[key];\n      }\n      return undefined;\n    }, themeSettings);\n  } /**\n   * Format theme value based on configuration\n   */\n  protected formatThemeValue(\n    themeSettings: Record<string, unknown>,\n    config: ThemeDetailConfig,\n  ): string {\n    const value = this.getThemeValue(themeSettings, config.path);\n\n    if (value === null || value === undefined) return 'None';\n\n    if (config.transform) {\n      return config.transform(value);\n    }\n\n    if (config.options) {\n      const option = config.options.find(\n        (opt: { value: string; label: string }) => opt.value === value,\n      );\n      return option?.label ?? 'None';\n    }\n\n    // Handle different field types with CSS variable resolution\n    if (\n      typeof value !== 'string' &&\n      typeof value !== 'number' &&\n      typeof value !== 'boolean'\n    ) {\n      return 'None';\n    }\n\n    const stringValue = String(value);\n\n    // Check if it's a CSS variable that needs resolution\n    if (stringValue.startsWith('var(')) {\n      const resolvedValue = this.themeEngine.resolveFormula(stringValue);\n      return this.formatResolvedValue(resolvedValue, config.path);\n    }\n\n    // Handle non-CSS variable values based on field context\n    return this.formatResolvedValue(stringValue, config.path);\n  }\n  /**\n   * Format a resolved value based on the field context\n   */\n  private formatResolvedValue(value: string, path: readonly string[]): string {\n    if (!value) return 'None';\n\n    const pathStr = path.join('.');\n\n    // Font family formatting\n    if (pathStr.includes('font.family')) {\n      return this.formatFontFamily(value);\n    }\n\n    // Font weight formatting\n    if (pathStr.includes('font.weight')) {\n      return this.formatFontWeight(value);\n    }\n\n    // Font transform formatting\n    if (pathStr.includes('font.transform')) {\n      return this.formatFontTransform(value);\n    }\n\n    // Icon pack formatting\n    if (pathStr.includes('icon.pack')) {\n      return this.formatIconPack(value);\n    }\n\n    // Shadow/dropdown formatting\n    if (pathStr.includes('shadow') || pathStr.includes('border.shadow')) {\n      return this.formatDropShadow(value);\n    }\n\n    // Size formatting (add units if needed)\n    if (\n      pathStr.includes('size') ||\n      pathStr.includes('width') ||\n      pathStr.includes('radius')\n    ) {\n      return this.formatSize(value);\n    }\n\n    // Default formatting for other types\n    return value;\n  }\n  /**\n   * Format font family value to readable name\n   */\n  private formatFontFamily(value: string): string {\n    // Remove quotes if present\n    const cleanValue = value.replace(/['\"]/g, '');\n\n    // Check if it's in our available fonts list\n    const availableFont = AVAILABLE_FONTS.find((font) => font === cleanValue);\n    if (availableFont) {\n      return availableFont;\n    }\n\n    // Return the cleaned value\n    return cleanValue || 'Default';\n  }\n\n  /**\n   * Format font weight value to readable name\n   */\n  private formatFontWeight(value: string): string {\n    const weightMap: Record<string, string> = {\n      '300': 'Light',\n      '400': 'Normal',\n      '500': 'Medium',\n      '600': 'Semi Bold',\n      '700': 'Bold',\n    };\n\n    return weightMap[value] ?? value ?? 'Normal';\n  }\n\n  /**\n   * Format font transform value to readable name\n   */\n  private formatFontTransform(value: string): string {\n    const transformMap: Record<string, string> = {\n      unset: 'None',\n      none: 'None',\n      capitalize: 'Title Case',\n      uppercase: 'Upper Case',\n      lowercase: 'Lower Case',\n    };\n\n    return transformMap[value] ?? value ?? 'None';\n  }\n\n  /**\n   * Format icon pack value to readable name\n   */\n  private formatIconPack(value: string): string {\n    const iconPack = ICON_PACKS.find((pack) => pack.value === value);\n    return iconPack?.label ?? value ?? 'Default';\n  }\n\n  /**\n   * Format drop shadow value to readable name\n   */\n  private formatDropShadow(value: string): string {\n    const shadowOption = DROP_SHADOW_OPTIONS.find(\n      (option) => option.value === value,\n    );\n    return shadowOption?.label ?? (value === 'none' ? 'None' : value) ?? 'None';\n  }\n\n  /**\n   * Format size value with appropriate units\n   */\n  private formatSize(value: string): string {\n    if (!value || value === '0' || value === 'none') return 'None';\n    if (value === 'auto') return 'Auto';\n    if (value === 'hidden') return 'Hidden';\n\n    // If it already has units, return as is\n    if (/\\d+(px|rem|em|%|pt)/.test(value)) {\n      return value;\n    }\n\n    // If it's just a number, assume pixels for most size fields\n    if (/^\\d+(\\.\\d+)?$/.test(value)) {\n      return `${value}px`;\n    }\n\n    return value ?? 'Unknown';\n  }\n\n  /**\n   * Safely parse a value to float\n   */\n  protected parseFloatSafely(value: unknown): number {\n    if (typeof value === 'number') return value;\n    if (typeof value === 'string') {\n      const parsed = parseFloat(value);\n      return isNaN(parsed) ? 0 : parsed;\n    }\n    return 0;\n  }\n\n  /**\n   * Create form fields from field configurations\n   */\n  protected createFormFieldsFromConfig(\n    entity: ThemeResponse,\n    fieldConfigs: ThemeFieldConfig[],\n  ): FormFieldConfig[] {\n    const themeSettings = this.themeEngine.themeSettingsMergedWithDefault(\n      entity?.settings ?? {},\n    );\n\n    return fieldConfigs.map((config) => {\n      const value = this.getThemeValue(themeSettings, config.path);\n      return this.createFormFieldFromConfig(config, value);\n    });\n  }\n\n  /**\n   * Create a single form field from configuration\n   */\n  protected createFormFieldFromConfig(\n    config: ThemeFieldConfig,\n    value: unknown,\n  ): FormFieldConfig {\n    switch (config.type) {\n      case 'dropdown':\n        return this.formFieldFactory.createDropdownWithGrouping({\n          id: config.id,\n          label: config.label,\n          options: config.options || [],\n          value: value as string,\n          props: config.props,\n        });\n\n      case 'font-family':\n        return this.formFieldFactory.createFontFamilyField(\n          config.id,\n          value as string,\n          config.presets,\n        );\n\n      case 'font-weight':\n        return this.formFieldFactory.createFontWeightField(\n          config.id,\n          value as string,\n        );\n\n      case 'font-transform':\n        return this.formFieldFactory.createFontTransformField(\n          config.id,\n          value as string,\n        );\n\n      case 'color':\n        return this.createColorFieldFromConfig(config, value as string);\n      case 'size':\n      case 'number':\n        return this.formFieldFactory.createSizeNumberField(\n          config.id,\n          this.parseFloatSafely(value),\n          config.label,\n          (config.props?.['unit'] as string) || 'rem',\n        );\n      case 'text':\n      default:\n        // For text fields, we'll use dropdown with a single option or create a custom implementation\n        return createTextField(config.id, config.label, value as string, {\n          name: config.id,\n          props: {\n            ...config.props,\n          },\n        });\n    }\n  }\n\n  /**\n   * Create color field based on configuration\n   * This method determines the type of color field to create\n   * based on the label or ID, and returns the appropriate field configuration.\n   * @param config - The configuration for the color field\n   * @param value - The initial value for the color field\n   * @return FormFieldConfig for the color field\n   */\n  protected createColorFieldFromConfig(\n    config: ThemeFieldConfig,\n    value: string,\n  ): FormFieldConfig {\n    const group = config.group ?? this.group ?? '';\n\n    // Determine color field type based on label or ID\n    const fieldType = this.determineColorFieldType(config.label, config.id);\n\n    switch (fieldType) {\n      case 'font':\n        return this.formFieldFactory.createFontColorField(\n          config.id,\n          value,\n          group,\n          config.presets,\n          config.label,\n          config.customColors,\n        );\n\n      case 'background':\n        return this.formFieldFactory.createBackgroundColorField(\n          config.id,\n          value,\n          config.presets,\n          config.label,\n          config.customColors,\n        );\n      case 'border':\n        return this.formFieldFactory.createBorderColorField(\n          config.id,\n          value,\n          group,\n          config.presets,\n          undefined,\n          config.customColors,\n        );\n      default: {\n        // Generic color field using color combo\n        const colorPresets = this.colorService.getContextualColorPresets(\n          config.id,\n          group ?? 'default',\n          ['main', 'content', 'header', 'footer', 'navigation', 'sidebar'],\n        );\n        return this.formFieldFactory.createColorComboField(\n          config.id,\n          value,\n          colorPresets,\n          config.label,\n        );\n      }\n    }\n  }\n\n  /**\n   * Determine color field type based on label or ID\n   */\n  protected determineColorFieldType(\n    label: string,\n    id: string,\n  ): 'font' | 'background' | 'border' | 'generic' {\n    const labelLower = label.toLowerCase();\n    const idLower = id.toLowerCase();\n\n    if (\n      labelLower.includes('font') ||\n      labelLower.includes('text') ||\n      idLower.includes('font') ||\n      idLower.includes('text')\n    ) {\n      return 'font';\n    }\n\n    if (labelLower.includes('background') || idLower.includes('background')) {\n      return 'background';\n    }\n\n    if (labelLower.includes('border') || idLower.includes('border')) {\n      return 'border';\n    }\n\n    return 'generic';\n  }\n\n  /**\n   * Create theme detail configurations from field configurations\n   */\n  protected createThemeDetailsFromConfig(\n    fieldConfigs: ThemeFieldConfig[],\n  ): ThemeDetailConfig[] {\n    return fieldConfigs\n      .filter((config) => config.includeInDetails !== false)\n      .map((config) => ({\n        key: config.label,\n        path: config.path,\n        transform: config.transform,\n        options: config.options,\n      }));\n  }\n\n  /**\n   * Get field configurations for this section (to be implemented by subclasses)\n   * @return Array of field configurations\n   */\n  protected abstract getFieldConfigurations(): ThemeFieldConfig[];\n\n  async mapEntityToEditor(entity: ThemeResponse): Promise<EditorValues> {\n    return this.themeEngine.themeSettingsMergedWithDefault(\n      entity.settings as ThemeSettings,\n    )[this.group];\n  }\n\n  async mapEditorToEntity(\n    entity: ThemeUpdateRequest,\n    values: EditorValues,\n  ): Promise<ThemeUpdateRequest> {\n    entity.settings = {\n      ...entity.settings,\n      [this.group]: {\n        ...entity.settings?.[this.group],\n        ...values,\n      },\n    };\n    return entity;\n  }\n\n  abstract getFields(entity: ThemeResponse): FormFieldConfig[];\n}\n","import { Component, Input, inject } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { ThemeColorService } from '../../../services/theme-color.service';\nimport { ThemeColor } from '../../../../../shared/models/theme-color';\n\ninterface RowData {\n  key: string;\n  value: string;\n}\n\n@Component({\n  selector: 'app-theme-value-display',\n  standalone: true,\n  imports: [CommonModule],\n  templateUrl: './theme-value-display.component.html',\n  styleUrl: './theme-value-display.component.scss',\n})\nexport class ThemeValueDisplayComponent {\n  @Input({ required: true }) rowData!: RowData;\n  @Input({ required: true }) group!: string;\n\n  private readonly colorService = inject(ThemeColorService);\n\n  isColorRow(): boolean {\n    return this.colorService.isColorValue(this.rowData.value, this.rowData.key);\n  }\n\n  getColorLabelAndValue(): { label: string; value: string } {\n    // Get contextual presets first for better matches\n    const contextualPresets = this.colorService.getContextualColorPresets(\n      this.rowData.key,\n      this.group,\n      ['main', 'content', 'header', 'footer', 'navigation', 'sidebar'],\n    );\n\n    // Get comprehensive presets as fallback\n    const allPresets = this.getAllColorPresets();\n\n    const computedColor = this.colorService.computeColor(this.rowData.value);\n\n    // First, try to find exact match in contextual presets\n    let presetKey = Object.keys(contextualPresets).find(\n      (key) => contextualPresets[key] === computedColor,\n    );\n\n    if (presetKey !== undefined) {\n      return { label: presetKey, value: computedColor };\n    }\n\n    // Fall back to comprehensive presets\n    presetKey = Object.keys(allPresets).find(\n      (key) => allPresets[key] === computedColor,\n    );\n\n    if (presetKey !== undefined) {\n      return { label: presetKey, value: computedColor };\n    }\n\n    // If no preset match, return the computed color\n    return { label: computedColor, value: computedColor };\n  }\n\n  /**\n   * Collect all available color presets from all sources\n   */\n  private getAllColorPresets(): Record<string, string> {\n    const additionalGroups = [\n      'main',\n      'content',\n      'header',\n      'footer',\n      'navigation',\n      'sidebar',\n    ];\n\n    return this.colorService.getAllColorPresets(this.group, additionalGroups);\n  }\n\n  getBorderColor(): string {\n    const originalColor = this.getColorLabelAndValue().value;\n    return new ThemeColor(originalColor).darken(0.2).hex();\n  }\n}\n","@if (isColorRow()) {\n  <!-- Color template -->\n  <div class=\"flex items-center gap-2\">\n    <!-- eslint-disable-next-line @angular-eslint/template/no-inline-styles -->\n    <div\n      class=\"color-swatch\"\n      [style]=\"\n        'background-color: ' +\n        getColorLabelAndValue().value +\n        '; border: 1px solid ' +\n        getBorderColor()\n      \"\n    ></div>\n    <span>{{ getColorLabelAndValue().label }}</span>\n  </div>\n} @else {\n  <!-- Default template -->\n  <span>{{ rowData.value }}</span>\n}\n","import {\n  Component,\n  computed,\n  TemplateRef,\n  ViewChild,\n  OnInit,\n} from '@angular/core';\nimport {\n  ThemeSettingsSectionBase,\n  ThemeFieldConfig,\n} from '../../base/theme-settings-section-base';\nimport { ThemeCreateRequest, ThemeResponse } from '../../../../../api';\nimport { FormFieldConfig } from '../../../../../shared/models';\nimport { DynamicFormComponent } from '../../../../../shared/components/forms/dynamic-form/dynamic-form.component';\nimport { FontAwesomeModule } from '@fortawesome/angular-fontawesome';\nimport { CommonModule } from '@angular/common';\nimport { DROP_SHADOW_OPTIONS, ICON_PACKS } from '../../../models';\nimport { Observable } from 'rxjs';\nimport { isDefined } from '../../../../../shared/utils';\nimport { GridComponent } from '../../../../../shared/components/grid/grid.component';\nimport { ThemeValueDisplayComponent } from '../theme-value-display/theme-value-display.component';\n\n// Constants for theme property paths\nconst MAIN_THEME_PATHS = {\n  FONT_FAMILY: ['main', 'font', 'family'],\n  FONT_SIZE: ['main', 'font', 'size'],\n  FONT_WEIGHT: ['main', 'font', 'weight'],\n  FONT_COLOR: ['main', 'font', 'color'],\n  BACKGROUND_COLOR: ['main', 'background', 'color'],\n  BORDER_COLOR: ['main', 'border', 'color'],\n  GUTTER_WIDTH: ['main', 'gutter', 'width'],\n  SHADOW: ['main', 'shadow'],\n  ICON_PACK: ['main', 'icon', 'pack'],\n} as const;\n\n@Component({\n  selector: 'app-theme-settings-main-section',\n  imports: [\n    DynamicFormComponent,\n    FontAwesomeModule,\n    CommonModule,\n    GridComponent,\n    ThemeValueDisplayComponent,\n  ],\n  templateUrl: './theme-settings-main-section.component.html',\n  styleUrl: './theme-settings-main-section.component.scss',\n})\nexport class ThemeSettingsMainSectionComponent\n  extends ThemeSettingsSectionBase\n  implements OnInit\n{\n  @ViewChild('valueTemplate', { static: true })\n  valueTemplate!: TemplateRef<unknown>;\n\n  readonly themeDetails = computed(() => {\n    const themeDetails = this.entity();\n    if (!isDefined(themeDetails)) return [];\n\n    const themeSettings = this.themeEngine.themeSettingsMergedWithDefault(\n      themeDetails?.settings ?? {},\n    );\n\n    const detailConfigs = this.createThemeDetailsFromConfig(\n      this.getFieldConfigurations(),\n    );\n    return detailConfigs.map((config) => ({\n      key: config.key,\n      value: this.formatThemeValue(themeSettings, config),\n    }));\n  });\n\n  constructor() {\n    super('main');\n  }\n\n  ngOnInit(): void {\n    this.initializeColumns();\n  }\n\n  private initializeColumns(): void {\n    this.columns = [\n      { field: 'key', header: '', transform: 'uppercase' },\n      {\n        field: 'value',\n        header: '',\n        cellTemplate: this.valueTemplate,\n      },\n    ];\n  }\n\n  protected getFieldConfigurations(): ThemeFieldConfig[] {\n    return [\n      {\n        id: 'font.family',\n        label: 'Font Family',\n        path: MAIN_THEME_PATHS.FONT_FAMILY,\n        type: 'font-family',\n      },\n      {\n        id: 'font.size',\n        label: 'Font Size',\n        path: MAIN_THEME_PATHS.FONT_SIZE,\n        type: 'size',\n      },\n      {\n        id: 'font.weight',\n        label: 'Font Weight',\n        path: MAIN_THEME_PATHS.FONT_WEIGHT,\n        type: 'font-weight',\n      },\n      {\n        id: 'font.color',\n        label: 'Font Color',\n        path: MAIN_THEME_PATHS.FONT_COLOR,\n        type: 'color',\n        group: 'main',\n      },\n      {\n        id: 'background.color',\n        label: 'Background Color',\n        path: MAIN_THEME_PATHS.BACKGROUND_COLOR,\n        type: 'color',\n        group: 'main',\n      },\n      {\n        id: 'border.color',\n        label: 'Border Color',\n        path: MAIN_THEME_PATHS.BORDER_COLOR,\n        type: 'color',\n        group: 'main',\n      },\n      {\n        id: 'gutter.width',\n        label: 'Gutter Size',\n        path: MAIN_THEME_PATHS.GUTTER_WIDTH,\n        type: 'size',\n      },\n      {\n        id: 'shadow',\n        label: 'Shadow',\n        path: MAIN_THEME_PATHS.SHADOW,\n        type: 'dropdown',\n        options: DROP_SHADOW_OPTIONS,\n      },\n      {\n        id: 'icon.pack',\n        label: 'Icon Pack',\n        path: MAIN_THEME_PATHS.ICON_PACK,\n        type: 'dropdown',\n        options: ICON_PACKS,\n        props: { appendTo: 'body' },\n      },\n    ];\n  }\n\n  getFields(entity: ThemeResponse): FormFieldConfig[] {\n    return this.createFormFieldsFromConfig(\n      entity,\n      this.getFieldConfigurations(),\n    );\n  }\n\n  override getUpdateMethod(): (\n    id: string,\n    data: Partial<ThemeResponse>,\n  ) => Observable<ThemeResponse> {\n    return (\n      this.operationRegistry.getOperation<\n        ThemeResponse,\n        ThemeCreateRequest,\n        ThemeResponse,\n        'update'\n      >('theme', 'update') ??\n      ((id) =>\n        this.entitiesService.updateTheme(id, {\n          settings: {\n            main: this.formChanges,\n          },\n        }))\n    );\n  }\n}\n","<div class=\"card pt-2\">\n  <div class=\"mb-4 p-2 flex justify-start items-center\">\n    <fa-icon\n      [icon]=\"faFill\"\n      class=\"!text-[2.5rem]\"\n      [ngClass]=\"{ 'icon-primary': isFormEditable() }\"\n    ></fa-icon>\n\n    <div class=\"pl-6 flex-1\">\n      <div class=\"flex justify-between items-center\">\n        <h2 class=\"text-xl font-semibold m-0\">Main</h2>\n        @if (!isFormEditable() && !createMode()) {\n          <div class=\"icon-light\">\n            <span\n              class=\"pi pi-pen-to-square action hover !text-2xl\"\n              [attr.aria-label]=\"'Edit theme details'\"\n              (click)=\"onEdit()\"\n              (keydown.enter)=\"onEdit()\"\n            ></span>\n          </div>\n        }\n      </div>\n      <span>{{ description }}</span>\n    </div>\n  </div>\n\n  @if (isFormEditable() || (createMode() && formFields.length)) {\n    <app-dynamic-form\n      [fields]=\"formFields\"\n      [actions]=\"actions\"\n      [hideActions]=\"createMode()\"\n      (formSubmit)=\"onSubmit($event)\"\n      (formValidityChange)=\"onFormValidityChange($event)\"\n      (fieldValueChange)=\"onFieldValueChange($event)\"\n    >\n    </app-dynamic-form>\n  }\n\n  @if (!isFormEditable() && !createMode()) {\n    <app-grid\n      [data]=\"themeDetails()\"\n      [columns]=\"columns\"\n      [showGridLines]=\"false\"\n      [hideHeader]=\"true\"\n      tableStyleClass=\"info-display !w-auto\"\n    ></app-grid>\n  }\n</div>\n\n<ng-template #valueTemplate let-rowData>\n  <app-theme-value-display [rowData]=\"rowData\" [group]=\"group\">\n  </app-theme-value-display>\n</ng-template>\n","import {\n  Component,\n  computed,\n  TemplateRef,\n  ViewChild,\n  OnInit,\n} from '@angular/core';\nimport { CommonModule } from '@angular/common';\n\nimport { FontAwesomeModule } from '@fortawesome/angular-fontawesome';\nimport { Observable } from 'rxjs';\n\nimport {\n  ThemeSettingsSectionBase,\n  ThemeFieldConfig,\n} from '../../base/theme-settings-section-base';\nimport { ThemeCreateRequest, ThemeResponse } from '../../../../../api';\nimport { FormFieldConfig } from '../../../../../shared/models';\nimport { DynamicFormComponent } from '../../../../../shared/components/forms/dynamic-form/dynamic-form.component';\nimport { isDefined, isEmpty } from '../../../../../shared/utils';\nimport { GridComponent } from '../../../../../shared/components/grid/grid.component';\nimport { ThemeValueDisplayComponent } from '../theme-value-display/theme-value-display.component';\n\n// Constants for theme property paths\nconst COLOR_THEME_PATHS = {\n  PRIMARY: ['color', 'primary', 'color'],\n  SECONDARY: ['color', 'secondary', 'color'],\n  SUCCESS: ['color', 'success', 'color'],\n  INFO: ['color', 'info', 'color'],\n  NOTIFY: ['color', 'notify', 'color'],\n  WARNING: ['color', 'warning', 'color'],\n  DANGER: ['color', 'danger', 'color'],\n} as const;\n\n@Component({\n  selector: 'app-theme-settings-color-section',\n  imports: [\n    DynamicFormComponent,\n    FontAwesomeModule,\n    CommonModule,\n    GridComponent,\n    ThemeValueDisplayComponent,\n  ],\n  templateUrl: './theme-settings-color-section.component.html',\n  styleUrl: './theme-settings-color-section.component.scss',\n})\nexport class ThemeSettingsColorSectionComponent\n  extends ThemeSettingsSectionBase\n  implements OnInit\n{\n  @ViewChild('valueTemplate', { static: true })\n  valueTemplate!: TemplateRef<unknown>;\n\n  readonly themeDetails = computed(() => {\n    const themeDetails = this.entity();\n    if (!isDefined(themeDetails)) return [];\n\n    const themeSettings = this.themeEngine.themeSettingsMergedWithDefault(\n      themeDetails?.settings ?? {},\n    );\n\n    const detailConfigs = this.createThemeDetailsFromConfig(\n      this.getFieldConfigurations(),\n    );\n    return detailConfigs.map((config) => ({\n      key: config.key,\n      value: this.formatThemeValue(themeSettings, config),\n    }));\n  });\n\n  constructor() {\n    super('color');\n  }\n\n  ngOnInit(): void {\n    this.initializeColumns();\n  }\n\n  private initializeColumns(): void {\n    this.columns = [\n      { field: 'key', header: '', transform: 'uppercase' },\n      {\n        field: 'value',\n        header: '',\n        cellTemplate: this.valueTemplate,\n      },\n    ];\n  }\n\n  protected getFieldConfigurations(): ThemeFieldConfig[] {\n    return [\n      {\n        id: 'primary.color',\n        label: 'Primary Color',\n        path: COLOR_THEME_PATHS.PRIMARY,\n        type: 'color',\n        group: 'color',\n      },\n      {\n        id: 'secondary.color',\n        label: 'Secondary Color',\n        path: COLOR_THEME_PATHS.SECONDARY,\n        type: 'color',\n        group: 'color',\n      },\n      {\n        id: 'success.color',\n        label: 'Success Color',\n        path: COLOR_THEME_PATHS.SUCCESS,\n        type: 'color',\n        group: 'color',\n      },\n      {\n        id: 'info.color',\n        label: 'Info Color',\n        path: COLOR_THEME_PATHS.INFO,\n        type: 'color',\n        group: 'color',\n      },\n      {\n        id: 'notify.color',\n        label: 'Notify Color',\n        path: COLOR_THEME_PATHS.NOTIFY,\n        type: 'color',\n        group: 'color',\n      },\n      {\n        id: 'warning.color',\n        label: 'Warning Color',\n        path: COLOR_THEME_PATHS.WARNING,\n        type: 'color',\n        group: 'color',\n      },\n      {\n        id: 'danger.color',\n        label: 'Danger Color',\n        path: COLOR_THEME_PATHS.DANGER,\n        type: 'color',\n        group: 'color',\n      },\n    ];\n  }\n\n  getFields(entity: ThemeResponse): FormFieldConfig[] {\n    return this.createFormFieldsFromConfig(\n      entity,\n      this.getFieldConfigurations(),\n    );\n  }\n\n  override getUpdateMethod(): (\n    id: string,\n    data: Partial<ThemeResponse>,\n  ) => Observable<ThemeResponse> {\n    return (\n      this.operationRegistry.getOperation<\n        ThemeResponse,\n        ThemeCreateRequest,\n        ThemeResponse,\n        'update'\n      >('theme', 'update') ??\n      ((id) => {\n        if (isEmpty(this.formChanges)) {\n          throw new Error('No form changes to save');\n        }\n        return this.entitiesService.updateTheme(id, {\n          settings: {\n            color: this.formChanges,\n          },\n        });\n      })\n    );\n  }\n}\n","<div class=\"card pt-2\">\n  <div class=\"mb-4 p-2 flex justify-start items-center\">\n    <fa-icon\n      [icon]=\"faFill\"\n      class=\"!text-[2.5rem]\"\n      [ngClass]=\"{ 'icon-primary': isFormEditable() }\"\n    ></fa-icon>\n\n    <div class=\"pl-6 flex-1\">\n      <div class=\"flex justify-between items-center\">\n        <h2 class=\"text-xl font-semibold m-0\">Color</h2>\n        @if (!isFormEditable() && !createMode()) {\n          <div class=\"icon-light\">\n            <span\n              class=\"pi pi-pen-to-square action hover !text-2xl\"\n              [attr.aria-label]=\"'Edit theme details'\"\n              (click)=\"onEdit()\"\n              (keydown.enter)=\"onEdit()\"\n            ></span>\n          </div>\n        }\n      </div>\n      <span>{{ description }}</span>\n    </div>\n  </div>\n\n  @if (isFormEditable() || (createMode() && formFields.length)) {\n    <app-dynamic-form\n      [fields]=\"formFields\"\n      [actions]=\"actions\"\n      [hideActions]=\"createMode()\"\n      (formSubmit)=\"onSubmit($event)\"\n      (formValidityChange)=\"onFormValidityChange($event)\"\n      (fieldValueChange)=\"onFieldValueChange($event)\"\n    >\n    </app-dynamic-form>\n  }\n\n  @if (!isFormEditable() && !createMode()) {\n    <app-grid\n      [data]=\"themeDetails()\"\n      [columns]=\"columns\"\n      [showGridLines]=\"false\"\n      [hideHeader]=\"true\"\n      tableStyleClass=\"info-display !w-auto\"\n    ></app-grid>\n  }\n</div>\n\n<ng-template #valueTemplate let-rowData>\n  <app-theme-value-display [rowData]=\"rowData\" [group]=\"group\">\n  </app-theme-value-display>\n</ng-template>\n","import {\n  Component,\n  computed,\n  TemplateRef,\n  ViewChild,\n  OnInit,\n} from '@angular/core';\nimport {\n  ThemeSettingsSectionBase,\n  ThemeFieldConfig,\n} from '../../base/theme-settings-section-base';\nimport { ThemeCreateRequest, ThemeResponse } from '../../../../../api';\nimport { FormFieldConfig } from '../../../../../shared/models';\nimport { DynamicFormComponent } from '../../../../../shared/components/forms/dynamic-form/dynamic-form.component';\nimport { FontAwesomeModule } from '@fortawesome/angular-fontawesome';\nimport { CommonModule } from '@angular/common';\nimport { DROP_SHADOW_OPTIONS } from '../../../models';\nimport { Observable } from 'rxjs';\nimport { isDefined } from '../../../../../shared/utils';\nimport { GridComponent } from '../../../../../shared/components/grid/grid.component';\nimport { ThemeValueDisplayComponent } from '../theme-value-display/theme-value-display.component';\n\n// Constants for theme property paths\nconst CONTENT_THEME_PATHS = {\n  FONT_COLOR: ['content', 'font', 'color'],\n  BACKGROUND_COLOR: ['content', 'background', 'color'],\n  BORDER_COLOR: ['content', 'border', 'color'],\n  SHADOW: ['content', 'shadow'],\n} as const;\n\n@Component({\n  selector: 'app-theme-settings-content-section',\n  imports: [\n    DynamicFormComponent,\n    FontAwesomeModule,\n    CommonModule,\n    GridComponent,\n    ThemeValueDisplayComponent,\n  ],\n  templateUrl: './theme-settings-content-section.component.html',\n  styleUrl: './theme-settings-content-section.component.scss',\n})\nexport class ThemeSettingsContentSectionComponent\n  extends ThemeSettingsSectionBase\n  implements OnInit\n{\n  @ViewChild('valueTemplate', { static: true })\n  valueTemplate!: TemplateRef<unknown>;\n\n  readonly themeDetails = computed(() => {\n    const themeDetails = this.entity();\n    if (!isDefined(themeDetails)) return [];\n\n    const themeSettings = this.themeEngine.themeSettingsMergedWithDefault(\n      themeDetails?.settings ?? {},\n    );\n\n    const detailConfigs = this.createThemeDetailsFromConfig(\n      this.getFieldConfigurations(),\n    );\n    return detailConfigs.map((config) => ({\n      key: config.key,\n      value: this.formatThemeValue(themeSettings, config),\n    }));\n  });\n\n  constructor() {\n    super('content');\n  }\n\n  ngOnInit(): void {\n    this.initializeColumns();\n  }\n\n  private initializeColumns(): void {\n    this.columns = [\n      { field: 'key', header: '', transform: 'uppercase' },\n      {\n        field: 'value',\n        header: '',\n        cellTemplate: this.valueTemplate,\n      },\n    ];\n  }\n\n  protected getFieldConfigurations(): ThemeFieldConfig[] {\n    return [\n      {\n        id: 'font.color',\n        label: 'Font Color',\n        path: CONTENT_THEME_PATHS.FONT_COLOR,\n        type: 'color',\n        group: 'content',\n        presets: ['main', 'header'],\n      },\n      {\n        id: 'background.color',\n        label: 'Background Color',\n        path: CONTENT_THEME_PATHS.BACKGROUND_COLOR,\n        type: 'color',\n        group: 'content',\n        presets: ['main'],\n      },\n      {\n        id: 'border.color',\n        label: 'Border Color',\n        path: CONTENT_THEME_PATHS.BORDER_COLOR,\n        type: 'color',\n        group: 'content',\n        presets: ['main'],\n      },\n      {\n        id: 'shadow',\n        label: 'Shadow',\n        path: CONTENT_THEME_PATHS.SHADOW,\n        type: 'dropdown',\n        options: DROP_SHADOW_OPTIONS,\n      },\n    ];\n  }\n\n  getFields(entity: ThemeResponse): FormFieldConfig[] {\n    return this.createFormFieldsFromConfig(\n      entity,\n      this.getFieldConfigurations(),\n    );\n  }\n\n  override getUpdateMethod(): (\n    id: string,\n    data: Partial<ThemeResponse>,\n  ) => Observable<ThemeResponse> {\n    return (\n      this.operationRegistry.getOperation<\n        ThemeResponse,\n        ThemeCreateRequest,\n        ThemeResponse,\n        'update'\n      >('theme', 'update') ??\n      ((id) =>\n        this.entitiesService.updateTheme(id, {\n          settings: {\n            content: this.formChanges,\n          },\n        }))\n    );\n  }\n}\n","<div class=\"card pt-2\">\n  <div class=\"mb-4 p-2 flex justify-start items-center\">\n    <fa-icon\n      [icon]=\"faFill\"\n      class=\"!text-[2.5rem]\"\n      [ngClass]=\"{ 'icon-primary': isFormEditable() }\"\n    ></fa-icon>\n\n    <div class=\"pl-6 flex-1\">\n      <div class=\"flex justify-between items-center\">\n        <h2 class=\"text-xl font-semibold m-0\">Content</h2>\n        @if (!isFormEditable() && !createMode()) {\n          <div class=\"icon-light\">\n            <span\n              class=\"pi pi-pen-to-square action hover !text-2xl\"\n              [attr.aria-label]=\"'Edit theme details'\"\n              (click)=\"onEdit()\"\n              (keydown.enter)=\"onEdit()\"\n            ></span>\n          </div>\n        }\n      </div>\n      <span>{{ description }}</span>\n    </div>\n  </div>\n\n  @if (isFormEditable() || (createMode() && formFields.length)) {\n    <app-dynamic-form\n      [fields]=\"formFields\"\n      [actions]=\"actions\"\n      [hideActions]=\"createMode()\"\n      (formSubmit)=\"onSubmit($event)\"\n      (formValidityChange)=\"onFormValidityChange($event)\"\n      (fieldValueChange)=\"onFieldValueChange($event)\"\n    >\n    </app-dynamic-form>\n  }\n\n  @if (!isFormEditable() && !createMode()) {\n    <app-grid\n      [data]=\"themeDetails()\"\n      [columns]=\"columns\"\n      [showGridLines]=\"false\"\n      [hideHeader]=\"true\"\n      tableStyleClass=\"info-display !w-auto\"\n    ></app-grid>\n  }\n</div>\n\n<ng-template #valueTemplate let-rowData>\n  <app-theme-value-display [rowData]=\"rowData\" [group]=\"group\">\n  </app-theme-value-display>\n</ng-template>\n","import {\n  Component,\n  computed,\n  TemplateRef,\n  ViewChild,\n  OnInit,\n  inject,\n} from '@angular/core';\nimport {\n  ThemeSettingsSectionBase,\n  ThemeFieldConfig,\n} from '../../base/theme-settings-section-base';\nimport { ThemeCreateRequest, ThemeResponse } from '../../../../../api';\nimport { FormFieldConfig } from '../../../../../shared/models';\nimport { DynamicFormComponent } from '../../../../../shared/components/forms/dynamic-form/dynamic-form.component';\nimport { FontAwesomeModule } from '@fortawesome/angular-fontawesome';\nimport { CommonModule } from '@angular/common';\nimport { Observable } from 'rxjs';\nimport { isDefined } from '../../../../../shared/utils';\nimport { GridComponent } from '../../../../../shared/components/grid/grid.component';\nimport { ThemeValueDisplayComponent } from '../theme-value-display/theme-value-display.component';\nimport { POSITION_OPTIONS, SIZE_OPTIONS } from '../../../models';\nimport { ThemeColorService } from '../../../services/theme-color.service';\n\n// Constants for theme property paths\nconst NAVIGATION_THEME_PATHS = {\n  SIZE: ['navigation', 'size'],\n  POSITION: ['navigation', 'position'],\n  FONT_FAMILY: ['navigation', 'font', 'family'],\n  FONT_SIZE: ['navigation', 'font', 'size'],\n  FONT_WEIGHT: ['navigation', 'font', 'weight'],\n  FONT_COLOR: ['navigation', 'font', 'color'],\n  FONT_TRANSFORM: ['navigation', 'font', 'transform'],\n  BACKGROUND_COLOR: ['navigation', 'background', 'color'],\n  BORDER_COLOR: ['navigation', 'border', 'color'],\n  BORDER_WIDTH: ['navigation', 'border', 'width'],\n  SUB_NAV_FONT_COLOR: ['navigation', 'subnav', 'font', 'color'],\n  SUB_NAV_BACKGROUND_COLOR: ['navigation', 'subnav', 'background', 'color'],\n  ACTIVE_STYLE: ['navigation', 'active', 'style'],\n  ACTIVE_FONT_COLOR: ['navigation', 'active', 'font', 'color'],\n  ACTIVE_BACKGROUND_COLOR: ['navigation', 'active', 'background', 'color'],\n  SEPARATOR_WIDTH: ['navigation', 'separator', 'width'],\n  LOGO_BACKGROUND_COLOR: ['navigation', 'logo', 'background', 'color'],\n} as const;\n\n@Component({\n  selector: 'app-theme-settings-navigation-section',\n  imports: [\n    DynamicFormComponent,\n    FontAwesomeModule,\n    CommonModule,\n    GridComponent,\n    ThemeValueDisplayComponent,\n  ],\n  templateUrl: './theme-settings-navigation-section.component.html',\n  styleUrl: './theme-settings-navigation-section.component.scss',\n})\nexport class ThemeSettingsNavigationSectionComponent\n  extends ThemeSettingsSectionBase\n  implements OnInit\n{\n  @ViewChild('valueTemplate', { static: true })\n  valueTemplate!: TemplateRef<unknown>;\n  private readonly themeColorService = inject(ThemeColorService);\n  readonly themeDetails = computed(() => {\n    const themeDetails = this.entity();\n    if (!isDefined(themeDetails)) return [];\n\n    const themeSettings = this.themeEngine.themeSettingsMergedWithDefault(\n      themeDetails?.settings ?? {},\n    );\n\n    const detailConfigs = this.createThemeDetailsFromConfig(\n      this.getFieldConfigurations(),\n    );\n    return detailConfigs.map((config) => ({\n      key: config.key,\n      value: this.formatThemeValue(themeSettings, config),\n    }));\n  });\n\n  constructor() {\n    super('navigation');\n  }\n\n  ngOnInit(): void {\n    this.initializeColumns();\n  }\n\n  private initializeColumns(): void {\n    this.columns = [\n      { field: 'key', header: '', transform: 'uppercase' },\n      {\n        field: 'value',\n        header: '',\n        cellTemplate: this.valueTemplate,\n      },\n    ];\n  }\n\n  protected getFieldConfigurations(): ThemeFieldConfig[] {\n    return [\n      {\n        id: 'size',\n        label: 'Size',\n        path: NAVIGATION_THEME_PATHS.SIZE,\n        type: 'dropdown',\n        options: SIZE_OPTIONS,\n      },\n      {\n        id: 'position',\n        label: 'Position',\n        path: NAVIGATION_THEME_PATHS.POSITION,\n        type: 'dropdown',\n        options: POSITION_OPTIONS,\n      },\n      {\n        id: 'font.family',\n        label: 'Font Family',\n        path: NAVIGATION_THEME_PATHS.FONT_FAMILY,\n        type: 'font-family',\n        presets: ['main', 'content', 'header'],\n      },\n      {\n        id: 'font.size',\n        label: 'Font Size',\n        path: NAVIGATION_THEME_PATHS.FONT_SIZE,\n        type: 'size',\n      },\n      {\n        id: 'font.weight',\n        label: 'Font Weight',\n        path: NAVIGATION_THEME_PATHS.FONT_WEIGHT,\n        type: 'font-weight',\n      },\n      {\n        id: 'font.color',\n        label: 'Font Color',\n        path: NAVIGATION_THEME_PATHS.FONT_COLOR,\n        type: 'color',\n        group: 'navigation',\n        presets: ['main', 'content', 'header'],\n      },\n      {\n        id: 'font.transform',\n        label: 'Font Case',\n        path: NAVIGATION_THEME_PATHS.FONT_TRANSFORM,\n        type: 'font-transform',\n      },\n      {\n        id: 'background.color',\n        label: 'Background Color',\n        path: NAVIGATION_THEME_PATHS.BACKGROUND_COLOR,\n        type: 'color',\n        group: 'navigation',\n        presets: ['main', 'content'],\n      },\n      {\n        id: 'border.color',\n        label: 'Border Color',\n        path: NAVIGATION_THEME_PATHS.BORDER_COLOR,\n        type: 'color',\n        group: 'navigation',\n      },\n      {\n        id: 'border.width',\n        label: 'Border Width',\n        path: NAVIGATION_THEME_PATHS.BORDER_WIDTH,\n        type: 'size',\n        props: { unit: 'px' },\n      },\n      {\n        id: 'subnav.font.color',\n        label: 'Subnav Font Color',\n        path: NAVIGATION_THEME_PATHS.SUB_NAV_FONT_COLOR,\n        type: 'color',\n        group: 'navigation',\n        presets: ['main', 'content', 'header'],\n      },\n      {\n        id: 'subnav.background.color',\n        label: 'Subnav Background',\n        path: NAVIGATION_THEME_PATHS.SUB_NAV_BACKGROUND_COLOR,\n        type: 'color',\n        group: 'navigation',\n        presets: ['main', 'content'],\n      },\n      {\n        id: 'active.style',\n        label: 'Active Style',\n        path: NAVIGATION_THEME_PATHS.ACTIVE_STYLE,\n        type: 'dropdown',\n        options: [\n          { value: 'background', label: 'Background' },\n          { value: 'left-border', label: 'Left' },\n          { value: 'right-border', label: 'Right' },\n        ],\n      },\n      {\n        id: 'active.font.color',\n        label: 'Active Font Color',\n        path: NAVIGATION_THEME_PATHS.ACTIVE_FONT_COLOR,\n        type: 'color',\n        group: 'navigation',\n        presets: ['main', 'content', 'header'],\n        customColors: { 'Primary Contrast': 'var(--color-primary-contrast)' },\n      },\n      {\n        id: 'active.background.color',\n        label: 'Active Background',\n        path: NAVIGATION_THEME_PATHS.ACTIVE_BACKGROUND_COLOR,\n        type: 'color',\n        group: 'navigation',\n        presets: ['main', 'content'],\n        customColors: {\n          Primary: this.themeColorService.computeColor(\n            'var(--color-primary-color)',\n          ),\n        },\n      },\n      {\n        id: 'separator.width',\n        label: 'Separator Width',\n        path: NAVIGATION_THEME_PATHS.SEPARATOR_WIDTH,\n        type: 'size',\n        props: { unit: 'px' },\n      },\n      {\n        id: 'logo.background.color',\n        label: 'Logo Background',\n        path: NAVIGATION_THEME_PATHS.LOGO_BACKGROUND_COLOR,\n        type: 'color',\n        group: 'navigation',\n        presets: ['navigation', 'main', 'content'],\n      },\n    ];\n  }\n\n  getFields(entity: ThemeResponse): FormFieldConfig[] {\n    return this.createFormFieldsFromConfig(\n      entity,\n      this.getFieldConfigurations(),\n    );\n  }\n\n  override getUpdateMethod(): (\n    id: string,\n    data: Partial<ThemeResponse>,\n  ) => Observable<ThemeResponse> {\n    return (\n      this.operationRegistry.getOperation<\n        ThemeResponse,\n        ThemeCreateRequest,\n        ThemeResponse,\n        'update'\n      >('theme', 'update') ??\n      ((id) =>\n        this.entitiesService.updateTheme(id, {\n          settings: {\n            navigation: this.formChanges,\n          },\n        }))\n    );\n  }\n}\n","<div class=\"card pt-2\">\n  <div class=\"mb-4 p-2 flex justify-start items-center\">\n    <fa-icon\n      [icon]=\"faFill\"\n      class=\"!text-[2.5rem]\"\n      [ngClass]=\"{ 'icon-primary': isFormEditable() }\"\n    ></fa-icon>\n\n    <div class=\"pl-6 flex-1\">\n      <div class=\"flex justify-between items-center\">\n        <h2 class=\"text-xl font-semibold m-0\">Navigation</h2>\n        @if (!isFormEditable() && !createMode()) {\n          <div class=\"icon-light\">\n            <span\n              class=\"pi pi-pen-to-square action hover !text-2xl\"\n              [attr.aria-label]=\"'Edit theme navigation details'\"\n              (click)=\"onEdit()\"\n              (keydown.enter)=\"onEdit()\"\n            ></span>\n          </div>\n        }\n      </div>\n      <span>{{ description }}</span>\n    </div>\n  </div>\n\n  @if (isFormEditable() || (createMode() && formFields.length)) {\n    <app-dynamic-form\n      [fields]=\"formFields\"\n      [actions]=\"actions\"\n      [hideActions]=\"createMode()\"\n      (formSubmit)=\"onSubmit($event)\"\n      (formValidityChange)=\"onFormValidityChange($event)\"\n      (fieldValueChange)=\"onFieldValueChange($event)\"\n    >\n    </app-dynamic-form>\n  }\n\n  @if (!isFormEditable() && !createMode()) {\n    <app-grid\n      [data]=\"themeDetails()\"\n      [columns]=\"columns\"\n      [showGridLines]=\"false\"\n      [hideHeader]=\"true\"\n      tableStyleClass=\"info-display !w-auto\"\n    ></app-grid>\n  }\n</div>\n\n<ng-template #valueTemplate let-rowData>\n  <app-theme-value-display [rowData]=\"rowData\" [group]=\"group\">\n  </app-theme-value-display>\n</ng-template>\n","import { CommonModule } from '@angular/common';\nimport {\n  OnInit,\n  Component,\n  computed,\n  inject,\n  TemplateRef,\n  ViewChild,\n} from '@angular/core';\n\nimport { FontAwesomeModule } from '@fortawesome/angular-fontawesome';\nimport { Observable } from 'rxjs';\n\nimport { ThemeResponse, ThemeCreateRequest } from '../../../../../api';\nimport { DynamicFormComponent } from '../../../../../shared/components/forms/dynamic-form/dynamic-form.component';\nimport { GridComponent } from '../../../../../shared/components/grid/grid.component';\nimport { FormFieldConfig } from '../../../../../shared/models';\nimport { ThemeColorService } from '../../../services/theme-color.service';\nimport {\n  ThemeSettingsSectionBase,\n  ThemeFieldConfig,\n} from '../../base/theme-settings-section-base';\nimport { ThemeValueDisplayComponent } from '../theme-value-display/theme-value-display.component';\nimport { isDefined } from '../../../../../shared/utils';\n\n// Constants for theme property paths\nconst TOP_NAVIGATION_THEME_PATHS = {\n  FONT_FAMILY: ['topnavigation', 'font', 'family'],\n  FONT_SIZE: ['topnavigation', 'font', 'size'],\n  FONT_WEIGHT: ['topnavigation', 'font', 'weight'],\n  FONT_COLOR: ['topnavigation', 'font', 'color'],\n  BACKGROUND_COLOR: ['topnavigation', 'background', 'color'],\n  BORDER_COLOR: ['topnavigation', 'border', 'color'],\n  BORDER_WIDTH: ['topnavigation', 'border', 'width'],\n  ACTIVE_STYLE: ['topnavigation', 'active', 'style'],\n  ACTIVE_FONT_COLOR: ['topnavigation', 'active', 'font', 'color'],\n  ACTIVE_BACKGROUND_COLOR: ['topnavigation', 'active', 'background', 'color'],\n  ACTIVE_TAB_FONT_COLOR: ['topnavigation', 'active', 'tab', 'font', 'color'],\n  ACTIVE_TAB_BACKGROUND_COLOR: [\n    'topnavigation',\n    'active',\n    'tab',\n    'background',\n    'color',\n  ],\n  ACTIVE_INDICATOR_COLOR: ['topnavigation', 'active', 'indicator', 'color'],\n  LOGO_STYLE: ['topnavigation', 'logo', 'style'],\n} as const;\n@Component({\n  selector: 'app-theme-settings-top-navigation-section',\n  imports: [\n    DynamicFormComponent,\n    FontAwesomeModule,\n    CommonModule,\n    GridComponent,\n    ThemeValueDisplayComponent,\n  ],\n  templateUrl: './theme-settings-top-navigation-section.component.html',\n  styleUrl: './theme-settings-top-navigation-section.component.scss',\n})\nexport class ThemeSettingsTopNavigationSectionComponent\n  extends ThemeSettingsSectionBase\n  implements OnInit\n{\n  @ViewChild('valueTemplate', { static: true })\n  valueTemplate!: TemplateRef<unknown>;\n  private readonly themeColorService = inject(ThemeColorService);\n  readonly themeDetails = computed(() => {\n    const themeDetails = this.entity();\n    if (!isDefined(themeDetails)) return [];\n\n    const themeSettings = this.themeEngine.themeSettingsMergedWithDefault(\n      themeDetails?.settings ?? {},\n    );\n\n    const detailConfigs = this.createThemeDetailsFromConfig(\n      this.getFieldConfigurations(),\n    );\n    return detailConfigs.map((config) => ({\n      key: config.key,\n      value: this.formatThemeValue(themeSettings, config),\n    }));\n  });\n\n  constructor() {\n    super('topnavigation');\n  }\n\n  ngOnInit(): void {\n    this.initializeColumns();\n  }\n\n  private initializeColumns(): void {\n    this.columns = [\n      { field: 'key', header: '', transform: 'uppercase' },\n      {\n        field: 'value',\n        header: '',\n        cellTemplate: this.valueTemplate,\n      },\n    ];\n  }\n\n  protected getFieldConfigurations(): ThemeFieldConfig[] {\n    return [\n      {\n        id: 'font.family',\n        label: 'Font Family',\n        path: TOP_NAVIGATION_THEME_PATHS.FONT_FAMILY,\n        type: 'font-family',\n        presets: ['main', 'content', 'header'],\n      },\n      {\n        id: 'font.size',\n        label: 'Font Size',\n        path: TOP_NAVIGATION_THEME_PATHS.FONT_SIZE,\n        type: 'size',\n      },\n      {\n        id: 'font.weight',\n        label: 'Font Weight',\n        path: TOP_NAVIGATION_THEME_PATHS.FONT_WEIGHT,\n        type: 'font-weight',\n        presets: ['main', 'content'],\n      },\n      {\n        id: 'font.color',\n        label: 'Font Color',\n        path: TOP_NAVIGATION_THEME_PATHS.FONT_COLOR,\n        type: 'color',\n        group: 'topnavigation',\n        presets: ['main', 'content', 'header'],\n      },\n      {\n        id: 'background.color',\n        label: 'Background Color',\n        path: TOP_NAVIGATION_THEME_PATHS.BACKGROUND_COLOR,\n        type: 'color',\n        group: 'topnavigation',\n        presets: ['header', 'main', 'content'],\n      },\n      {\n        id: 'border.color',\n        label: 'Border Color',\n        path: TOP_NAVIGATION_THEME_PATHS.BORDER_COLOR,\n        type: 'color',\n        group: 'topnavigation',\n      },\n      {\n        id: 'border.width',\n        label: 'Border Width',\n        path: TOP_NAVIGATION_THEME_PATHS.BORDER_WIDTH,\n        type: 'size',\n        props: { unit: 'px' },\n      },\n      {\n        id: 'active.font.color',\n        label: 'Active Font Color',\n        path: TOP_NAVIGATION_THEME_PATHS.ACTIVE_FONT_COLOR,\n        type: 'color',\n        group: 'topnavigation',\n        presets: ['topnavigation', 'main', 'content', 'header'],\n        customColors: { 'Primary Contrast': 'var(--color-primary-contrast)' },\n      },\n      {\n        id: 'active.background.color',\n        label: 'Active Background',\n        path: TOP_NAVIGATION_THEME_PATHS.ACTIVE_BACKGROUND_COLOR,\n        type: 'color',\n        group: 'topnavigation',\n        presets: ['topnavigation', 'tab', 'content'],\n        customColors: {\n          Primary: this.themeColorService.computeColor(\n            'var(--color-primary-color)',\n          ),\n        },\n      },\n      {\n        id: 'active.tab.font.color',\n        label: 'Active Tab Font Color',\n        path: TOP_NAVIGATION_THEME_PATHS.ACTIVE_TAB_FONT_COLOR,\n        type: 'color',\n        group: 'topnavigation',\n        presets: ['topnavigation', 'main', 'content', 'header'],\n        customColors: {\n          Primary: this.themeColorService.computeColor(\n            'var(--color-primary-color)',\n          ),\n        },\n      },\n      {\n        id: 'active.tab.background.color',\n        label: 'Active Tab Background',\n        path: TOP_NAVIGATION_THEME_PATHS.ACTIVE_TAB_BACKGROUND_COLOR,\n        type: 'color',\n        group: 'topnavigation',\n        presets: ['topnavigation', 'tab', 'content'],\n        customColors: {\n          Primary: this.themeColorService.computeColor(\n            'var(--color-primary-color)',\n          ),\n        },\n      },\n      {\n        id: 'active.indicator.color',\n        label: 'Active Indicator Color',\n        path: TOP_NAVIGATION_THEME_PATHS.ACTIVE_INDICATOR_COLOR,\n        type: 'color',\n        group: 'topnavigation',\n        customColors: {\n          Primary: this.themeColorService.computeColor(\n            'var(--color-primary-color)',\n          ),\n        },\n      },\n      {\n        id: 'logo.style',\n        label: 'Logo Style',\n        path: TOP_NAVIGATION_THEME_PATHS.LOGO_STYLE,\n        type: 'dropdown',\n        group: 'topnavigation',\n        options: [\n          { value: 'none', label: 'None' },\n          { value: 'left', label: 'Left' },\n          { value: 'right', label: 'Right' },\n        ],\n      },\n    ];\n  }\n\n  getFields(entity: ThemeResponse): FormFieldConfig[] {\n    return this.createFormFieldsFromConfig(\n      entity,\n      this.getFieldConfigurations(),\n    );\n  }\n\n  override getUpdateMethod(): (\n    id: string,\n    data: Partial<ThemeResponse>,\n  ) => Observable<ThemeResponse> {\n    return (\n      this.operationRegistry.getOperation<\n        ThemeResponse,\n        ThemeCreateRequest,\n        ThemeResponse,\n        'update'\n      >('theme', 'update') ??\n      ((id) =>\n        this.entitiesService.updateTheme(id, {\n          settings: {\n            topnavigation: this.formChanges,\n          },\n        }))\n    );\n  }\n}\n","<div class=\"card pt-2\">\n  <div class=\"mb-4 p-2 flex justify-start items-center\">\n    <fa-icon\n      [icon]=\"faFill\"\n      class=\"!text-[2.5rem]\"\n      [ngClass]=\"{ 'icon-primary': isFormEditable() }\"\n    ></fa-icon>\n\n    <div class=\"pl-6 flex-1\">\n      <div class=\"flex justify-between items-center\">\n        <h2 class=\"text-xl font-semibold m-0\">Top Navigation</h2>\n        @if (!isFormEditable() && !createMode()) {\n          <div class=\"icon-light\">\n            <span\n              class=\"pi pi-pen-to-square action hover !text-2xl\"\n              [attr.aria-label]=\"'Edit theme details'\"\n              (click)=\"onEdit()\"\n              (keydown.enter)=\"onEdit()\"\n            ></span>\n          </div>\n        }\n      </div>\n      <span>{{ description }}</span>\n    </div>\n  </div>\n\n  @if (isFormEditable() || (createMode() && formFields.length)) {\n    <app-dynamic-form\n      [fields]=\"formFields\"\n      [actions]=\"actions\"\n      [hideActions]=\"createMode()\"\n      (formSubmit)=\"onSubmit($event)\"\n      (formValidityChange)=\"onFormValidityChange($event)\"\n      (fieldValueChange)=\"onFieldValueChange($event)\"\n    >\n    </app-dynamic-form>\n  }\n\n  @if (!isFormEditable() && !createMode()) {\n    <app-grid\n      [data]=\"themeDetails()\"\n      [columns]=\"columns\"\n      [showGridLines]=\"false\"\n      [hideHeader]=\"true\"\n      tableStyleClass=\"info-display !w-auto\"\n    ></app-grid>\n  }\n</div>\n\n<ng-template #valueTemplate let-rowData>\n  <app-theme-value-display [rowData]=\"rowData\" [group]=\"group\">\n  </app-theme-value-display>\n</ng-template>\n","import {\n  Component,\n  computed,\n  TemplateRef,\n  ViewChild,\n  OnInit,\n} from '@angular/core';\nimport {\n  ThemeSettingsSectionBase,\n  ThemeFieldConfig,\n} from '../../base/theme-settings-section-base';\nimport { ThemeCreateRequest, ThemeResponse } from '../../../../../api';\nimport { FormFieldConfig } from '../../../../../shared/models';\nimport { DynamicFormComponent } from '../../../../../shared/components/forms/dynamic-form/dynamic-form.component';\nimport { FontAwesomeModule } from '@fortawesome/angular-fontawesome';\nimport { CommonModule } from '@angular/common';\nimport { Observable } from 'rxjs';\nimport { isDefined } from '../../../../../shared/utils';\nimport { GridComponent } from '../../../../../shared/components/grid/grid.component';\nimport { ThemeValueDisplayComponent } from '../theme-value-display/theme-value-display.component';\n\n// Constants for theme property paths\nconst HEADER_THEME_PATHS = {\n  FONT_FAMILY: ['header', 'font', 'family'],\n  FONT_SIZE: ['header', 'font', 'size'],\n  FONT_WEIGHT: ['header', 'font', 'weight'],\n  FONT_COLOR: ['header', 'font', 'color'],\n  FONT_TRANSFORM: ['header', 'font', 'transform'],\n  BACKGROUND_COLOR: ['header', 'background', 'color'],\n  BORDER_COLOR: ['header', 'border', 'color'],\n  BORDER_WIDTH: ['header', 'border', 'width'],\n} as const;\n\n@Component({\n  selector: 'app-theme-settings-header-section',\n  imports: [\n    DynamicFormComponent,\n    FontAwesomeModule,\n    CommonModule,\n    GridComponent,\n    ThemeValueDisplayComponent,\n  ],\n  templateUrl: './theme-settings-header-section.component.html',\n  styleUrl: './theme-settings-header-section.component.scss',\n})\nexport class ThemeSettingsHeaderSectionComponent\n  extends ThemeSettingsSectionBase\n  implements OnInit\n{\n  @ViewChild('valueTemplate', { static: true })\n  valueTemplate!: TemplateRef<unknown>;\n  readonly themeDetails = computed(() => {\n    const themeDetails = this.entity();\n    if (!isDefined(themeDetails)) return [];\n\n    const themeSettings = this.themeEngine.themeSettingsMergedWithDefault(\n      themeDetails?.settings ?? {},\n    );\n\n    const detailConfigs = this.createThemeDetailsFromConfig(\n      this.getFieldConfigurations(),\n    );\n    return detailConfigs.map((config) => ({\n      key: config.key,\n      value: this.formatThemeValue(themeSettings, config),\n    }));\n  });\n\n  constructor() {\n    super('header');\n  }\n\n  ngOnInit(): void {\n    this.initializeColumns();\n  }\n\n  private initializeColumns(): void {\n    this.columns = [\n      { field: 'key', header: '', transform: 'uppercase' },\n      {\n        field: 'value',\n        header: '',\n        cellTemplate: this.valueTemplate,\n      },\n    ];\n  }\n\n  protected getFieldConfigurations(): ThemeFieldConfig[] {\n    return [\n      {\n        id: 'font.family',\n        label: 'Font Family',\n        path: HEADER_THEME_PATHS.FONT_FAMILY,\n        type: 'font-family',\n        presets: ['main', 'content'],\n      },\n      {\n        id: 'font.size',\n        label: 'Font Size',\n        path: HEADER_THEME_PATHS.FONT_SIZE,\n        type: 'size',\n      },\n      {\n        id: 'font.weight',\n        label: 'Font Weight',\n        path: HEADER_THEME_PATHS.FONT_WEIGHT,\n        type: 'font-weight',\n        presets: ['main', 'content'],\n      },\n      {\n        id: 'font.color',\n        label: 'Font Color',\n        path: HEADER_THEME_PATHS.FONT_COLOR,\n        type: 'color',\n        group: 'header',\n        presets: ['main', 'content', 'header'],\n      },\n      {\n        id: 'font.transform',\n        label: 'Font Case',\n        path: HEADER_THEME_PATHS.FONT_TRANSFORM,\n        type: 'font-transform',\n      },\n      {\n        id: 'background.color',\n        label: 'Background Color',\n        path: HEADER_THEME_PATHS.BACKGROUND_COLOR,\n        type: 'color',\n        group: 'header',\n        presets: ['main', 'content'],\n      },\n      {\n        id: 'border.color',\n        label: 'Border Color',\n        path: HEADER_THEME_PATHS.BORDER_COLOR,\n        type: 'color',\n        group: 'header',\n        presets: ['main', 'content'],\n      },\n      {\n        id: 'border.width',\n        label: 'Border Width',\n        path: HEADER_THEME_PATHS.BORDER_WIDTH,\n        type: 'size',\n        props: { unit: 'px' },\n      },\n    ];\n  }\n\n  getFields(entity: ThemeResponse): FormFieldConfig[] {\n    return this.createFormFieldsFromConfig(\n      entity,\n      this.getFieldConfigurations(),\n    );\n  }\n\n  override getUpdateMethod(): (\n    id: string,\n    data: Partial<ThemeResponse>,\n  ) => Observable<ThemeResponse> {\n    return (\n      this.operationRegistry.getOperation<\n        ThemeResponse,\n        ThemeCreateRequest,\n        ThemeResponse,\n        'update'\n      >('theme', 'update') ??\n      ((id) =>\n        this.entitiesService.updateTheme(id, {\n          settings: {\n            header: this.formChanges,\n          },\n        }))\n    );\n  }\n}\n","<div class=\"card pt-2\">\n  <div class=\"mb-4 p-2 flex justify-start items-center\">\n    <fa-icon\n      [icon]=\"faFill\"\n      class=\"!text-[2.5rem]\"\n      [ngClass]=\"{ 'icon-primary': isFormEditable() }\"\n    ></fa-icon>\n\n    <div class=\"pl-6 flex-1\">\n      <div class=\"flex justify-between items-center\">\n        <h2 class=\"text-xl font-semibold m-0\">Header</h2>\n        @if (!isFormEditable() && !createMode()) {\n          <div class=\"icon-light\">\n            <span\n              class=\"pi pi-pen-to-square action hover !text-2xl\"\n              [attr.aria-label]=\"'Edit theme details'\"\n              (click)=\"onEdit()\"\n              (keydown.enter)=\"onEdit()\"\n            ></span>\n          </div>\n        }\n      </div>\n      <span>{{ description }}</span>\n    </div>\n  </div>\n\n  @if (isFormEditable() || (createMode() && formFields.length)) {\n    <app-dynamic-form\n      [fields]=\"formFields\"\n      [actions]=\"actions\"\n      [hideActions]=\"createMode()\"\n      (formSubmit)=\"onSubmit($event)\"\n      (formValidityChange)=\"onFormValidityChange($event)\"\n      (fieldValueChange)=\"onFieldValueChange($event)\"\n    >\n    </app-dynamic-form>\n  }\n\n  @if (!isFormEditable() && !createMode()) {\n    <app-grid\n      [data]=\"themeDetails()\"\n      [columns]=\"columns\"\n      [showGridLines]=\"false\"\n      [hideHeader]=\"true\"\n      tableStyleClass=\"info-display !w-auto\"\n    ></app-grid>\n  }\n</div>\n\n<ng-template #valueTemplate let-rowData>\n  <app-theme-value-display [rowData]=\"rowData\" [group]=\"group\">\n  </app-theme-value-display>\n</ng-template>\n","import {\n  Component,\n  computed,\n  TemplateRef,\n  ViewChild,\n  OnInit,\n} from '@angular/core';\nimport {\n  ThemeSettingsSectionBase,\n  ThemeFieldConfig,\n} from '../../base/theme-settings-section-base';\nimport { ThemeCreateRequest, ThemeResponse } from '../../../../../api';\nimport { FormFieldConfig } from '../../../../../shared/models';\nimport { DynamicFormComponent } from '../../../../../shared/components/forms/dynamic-form/dynamic-form.component';\nimport { FontAwesomeModule } from '@fortawesome/angular-fontawesome';\nimport { CommonModule } from '@angular/common';\nimport { Observable } from 'rxjs';\nimport { isDefined } from '../../../../../shared/utils';\nimport { GridComponent } from '../../../../../shared/components/grid/grid.component';\nimport { ThemeValueDisplayComponent } from '../theme-value-display/theme-value-display.component';\n\n// Constants for theme property paths\nconst FOOTER_THEME_PATHS = {\n  FONT_FAMILY: ['footer', 'font', 'family'],\n  FONT_SIZE: ['footer', 'font', 'size'],\n  FONT_COLOR: ['footer', 'font', 'color'],\n  BACKGROUND_COLOR: ['footer', 'background', 'color'],\n  BORDER_COLOR: ['footer', 'border', 'color'],\n} as const;\n\n@Component({\n  selector: 'app-theme-settings-footer-section',\n  imports: [\n    DynamicFormComponent,\n    FontAwesomeModule,\n    CommonModule,\n    GridComponent,\n    ThemeValueDisplayComponent,\n  ],\n  templateUrl: './theme-settings-footer-section.component.html',\n  styleUrl: './theme-settings-footer-section.component.scss',\n})\nexport class ThemeSettingsFooterSectionComponent\n  extends ThemeSettingsSectionBase\n  implements OnInit\n{\n  @ViewChild('valueTemplate', { static: true })\n  valueTemplate!: TemplateRef<unknown>;\n  readonly themeDetails = computed(() => {\n    const themeDetails = this.entity();\n    if (!isDefined(themeDetails)) return [];\n\n    const themeSettings = this.themeEngine.themeSettingsMergedWithDefault(\n      themeDetails?.settings ?? {},\n    );\n\n    const detailConfigs = this.createThemeDetailsFromConfig(\n      this.getFieldConfigurations(),\n    );\n    return detailConfigs.map((config) => ({\n      key: config.key,\n      value: this.formatThemeValue(themeSettings, config),\n    }));\n  });\n\n  constructor() {\n    super('footer');\n  }\n\n  ngOnInit(): void {\n    this.initializeColumns();\n  }\n\n  private initializeColumns(): void {\n    this.columns = [\n      { field: 'key', header: '', transform: 'uppercase' },\n      {\n        field: 'value',\n        header: '',\n        cellTemplate: this.valueTemplate,\n      },\n    ];\n  }\n\n  protected getFieldConfigurations(): ThemeFieldConfig[] {\n    return [\n      {\n        id: 'font.family',\n        label: 'Font Family',\n        path: FOOTER_THEME_PATHS.FONT_FAMILY,\n        type: 'font-family',\n        presets: ['main', 'content', 'header'],\n      },\n      {\n        id: 'font.size',\n        label: 'Font Size',\n        path: FOOTER_THEME_PATHS.FONT_SIZE,\n        type: 'size',\n      },\n      {\n        id: 'font.color',\n        label: 'Font Color',\n        path: FOOTER_THEME_PATHS.FONT_COLOR,\n        type: 'color',\n        group: 'footer',\n        presets: ['main', 'content', 'header'],\n      },\n      {\n        id: 'background.color',\n        label: 'Background Color',\n        path: FOOTER_THEME_PATHS.BACKGROUND_COLOR,\n        type: 'color',\n        group: 'footer',\n        presets: ['main', 'content'],\n      },\n      {\n        id: 'border.color',\n        label: 'Border Color',\n        path: FOOTER_THEME_PATHS.BORDER_COLOR,\n        type: 'color',\n        group: 'footer',\n      },\n    ];\n  }\n\n  getFields(entity: ThemeResponse): FormFieldConfig[] {\n    return this.createFormFieldsFromConfig(\n      entity,\n      this.getFieldConfigurations(),\n    );\n  }\n\n  override getUpdateMethod(): (\n    id: string,\n    data: Partial<ThemeResponse>,\n  ) => Observable<ThemeResponse> {\n    return (\n      this.operationRegistry.getOperation<\n        ThemeResponse,\n        ThemeCreateRequest,\n        ThemeResponse,\n        'update'\n      >('theme', 'update') ??\n      ((id) =>\n        this.entitiesService.updateTheme(id, {\n          settings: {\n            footer: this.formChanges,\n          },\n        }))\n    );\n  }\n}\n","<div class=\"card pt-2\">\n  <div class=\"mb-4 p-2 flex justify-start items-center\">\n    <fa-icon\n      [icon]=\"faFill\"\n      class=\"!text-[2.5rem]\"\n      [ngClass]=\"{ 'icon-primary': isFormEditable() }\"\n    ></fa-icon>\n\n    <div class=\"pl-6 flex-1\">\n      <div class=\"flex justify-between items-center\">\n        <h2 class=\"text-xl font-semibold m-0\">Footer</h2>\n        @if (!isFormEditable() && !createMode()) {\n          <div class=\"icon-light\">\n            <span\n              class=\"pi pi-pen-to-square action hover !text-2xl\"\n              [attr.aria-label]=\"'Edit theme details'\"\n              (click)=\"onEdit()\"\n              (keydown.enter)=\"onEdit()\"\n            ></span>\n          </div>\n        }\n      </div>\n      <span>{{ description }}</span>\n    </div>\n  </div>\n\n  @if (isFormEditable() || (createMode() && formFields.length)) {\n    <app-dynamic-form\n      [fields]=\"formFields\"\n      [actions]=\"actions\"\n      [hideActions]=\"createMode()\"\n      (formSubmit)=\"onSubmit($event)\"\n      (formValidityChange)=\"onFormValidityChange($event)\"\n      (fieldValueChange)=\"onFieldValueChange($event)\"\n    >\n    </app-dynamic-form>\n  }\n\n  @if (!isFormEditable() && !createMode()) {\n    <app-grid\n      [data]=\"themeDetails()\"\n      [columns]=\"columns\"\n      [showGridLines]=\"false\"\n      [hideHeader]=\"true\"\n      tableStyleClass=\"info-display !w-auto\"\n    ></app-grid>\n  }\n</div>\n\n<ng-template #valueTemplate let-rowData>\n  <app-theme-value-display [rowData]=\"rowData\" [group]=\"group\">\n  </app-theme-value-display>\n</ng-template>\n","import {\n  Component,\n  computed,\n  TemplateRef,\n  ViewChild,\n  OnInit,\n} from '@angular/core';\nimport {\n  ThemeSettingsSectionBase,\n  ThemeFieldConfig,\n} from '../../base/theme-settings-section-base';\nimport { ThemeCreateRequest, ThemeResponse } from '../../../../../api';\nimport { FormFieldConfig } from '../../../../../shared/models';\nimport { DynamicFormComponent } from '../../../../../shared/components/forms/dynamic-form/dynamic-form.component';\nimport { FontAwesomeModule } from '@fortawesome/angular-fontawesome';\nimport { CommonModule } from '@angular/common';\nimport { Observable } from 'rxjs';\nimport { isDefined } from '../../../../../shared/utils';\nimport { GridComponent } from '../../../../../shared/components/grid/grid.component';\nimport { ThemeValueDisplayComponent } from '../theme-value-display/theme-value-display.component';\n\n// Constants for theme property paths\nconst MODAL_THEME_PATHS = {\n  FONT_SIZE: ['modal', 'font', 'size'],\n  FONT_COLOR: ['modal', 'font', 'color'],\n  BACKGROUND_COLOR: ['modal', 'background', 'color'],\n  BORDER_COLOR: ['modal', 'border', 'color'],\n  BORDER_WIDTH: ['modal', 'border', 'width'],\n  //header\n  HEADER_FONT_SIZE: ['modal', 'header', 'font', 'size'],\n  HEADER_FONT_WEIGHT: ['modal', 'header', 'font', 'weight'],\n  HEADER_FONT_TRANSFORM: ['modal', 'header', 'font', 'transform'],\n  HEADER_FONT_COLOR: ['modal', 'header', 'font', 'color'],\n  HEADER_BACKGROUND_COLOR: ['modal', 'header', 'background', 'color'],\n  // footer\n  FOOTER_FONT_SIZE: ['modal', 'footer', 'font', 'size'],\n  FOOTER_FONT_COLOR: ['modal', 'footer', 'font', 'color'],\n  FOOTER_BACKGROUND_COLOR: ['modal', 'footer', 'background', 'color'],\n  FOOTER_BORDER_COLOR: ['modal', 'footer', 'border', 'color'],\n} as const;\n\n@Component({\n  selector: 'app-theme-settings-modal-section',\n  imports: [\n    DynamicFormComponent,\n    FontAwesomeModule,\n    CommonModule,\n    GridComponent,\n    ThemeValueDisplayComponent,\n  ],\n  templateUrl: './theme-settings-modal-section.component.html',\n  styleUrl: './theme-settings-modal-section.component.scss',\n})\nexport class ThemeSettingsModalSectionComponent\n  extends ThemeSettingsSectionBase\n  implements OnInit\n{\n  @ViewChild('valueTemplate', { static: true })\n  valueTemplate!: TemplateRef<unknown>;\n  readonly themeDetails = computed(() => {\n    const themeDetails = this.entity();\n    if (!isDefined(themeDetails)) return [];\n\n    const themeSettings = this.themeEngine.themeSettingsMergedWithDefault(\n      themeDetails?.settings ?? {},\n    );\n\n    const detailConfigs = this.createThemeDetailsFromConfig(\n      this.getFieldConfigurations(),\n    );\n    return detailConfigs.map((config) => ({\n      key: config.key,\n      value: this.formatThemeValue(themeSettings, config),\n    }));\n  });\n\n  constructor() {\n    super('modal');\n  }\n\n  ngOnInit(): void {\n    this.initializeColumns();\n  }\n\n  private initializeColumns(): void {\n    this.columns = [\n      { field: 'key', header: '', transform: 'uppercase' },\n      {\n        field: 'value',\n        header: '',\n        cellTemplate: this.valueTemplate,\n      },\n    ];\n  }\n\n  protected getFieldConfigurations(): ThemeFieldConfig[] {\n    return [\n      {\n        id: 'font.size',\n        label: 'Font Size',\n        path: MODAL_THEME_PATHS.FONT_SIZE,\n        type: 'size',\n      },\n      {\n        id: 'font.color',\n        label: 'Font Color',\n        path: MODAL_THEME_PATHS.FONT_COLOR,\n        type: 'color',\n        group: 'modal',\n        presets: ['main', 'content', 'header'],\n      },\n      {\n        id: 'background.color',\n        label: 'Background Color',\n        path: MODAL_THEME_PATHS.BACKGROUND_COLOR,\n        type: 'color',\n        group: 'modal',\n        presets: ['main', 'content'],\n      },\n      {\n        id: 'border.color',\n        label: 'Border Color',\n        path: MODAL_THEME_PATHS.BORDER_COLOR,\n        type: 'color',\n        group: 'modal',\n      },\n      {\n        id: 'border.width',\n        label: 'Border Width',\n        path: MODAL_THEME_PATHS.BORDER_WIDTH,\n        type: 'size',\n        props: { unit: 'px' },\n      },\n      {\n        id: 'header.font.size',\n        label: 'Header Font Size',\n        path: MODAL_THEME_PATHS.HEADER_FONT_SIZE,\n        type: 'size',\n        props: { unit: 'px' },\n      },\n      {\n        id: 'header.font.weight',\n        label: 'Header Font Weight',\n        path: MODAL_THEME_PATHS.HEADER_FONT_WEIGHT,\n        type: 'font-weight',\n      },\n      {\n        id: 'header.font.transform',\n        label: 'Header Font Case',\n        path: MODAL_THEME_PATHS.HEADER_FONT_TRANSFORM,\n        type: 'font-transform',\n      },\n      {\n        id: 'header.font.color',\n        label: 'Header Font Color',\n        path: MODAL_THEME_PATHS.HEADER_FONT_COLOR,\n        type: 'color',\n        group: 'modal',\n        presets: ['main', 'content', 'header'],\n      },\n      {\n        id: 'header.background.color',\n        label: 'Header Background',\n        path: MODAL_THEME_PATHS.HEADER_BACKGROUND_COLOR,\n        type: 'color',\n        group: 'modal',\n        presets: ['main', 'content'],\n      },\n      {\n        id: 'footer.font.size',\n        label: 'Footer Font Size',\n        path: MODAL_THEME_PATHS.FOOTER_FONT_SIZE,\n        type: 'size',\n        props: { unit: 'px' },\n      },\n      {\n        id: 'footer.font.color',\n        label: 'Footer Font Color',\n        path: MODAL_THEME_PATHS.FOOTER_FONT_COLOR,\n        type: 'color',\n        group: 'modal',\n        presets: ['main', 'content', 'header'],\n      },\n      {\n        id: 'footer.background.color',\n        label: 'Footer Background',\n        path: MODAL_THEME_PATHS.FOOTER_BACKGROUND_COLOR,\n        type: 'color',\n        group: 'modal',\n        presets: ['main', 'content'],\n      },\n      {\n        id: 'footer.border.color',\n        label: 'Footer Border Color',\n        path: MODAL_THEME_PATHS.FOOTER_BORDER_COLOR,\n        type: 'color',\n        group: 'modal',\n      },\n    ];\n  }\n\n  getFields(entity: ThemeResponse): FormFieldConfig[] {\n    return this.createFormFieldsFromConfig(\n      entity,\n      this.getFieldConfigurations(),\n    );\n  }\n\n  override getUpdateMethod(): (\n    id: string,\n    data: Partial<ThemeResponse>,\n  ) => Observable<ThemeResponse> {\n    return (\n      this.operationRegistry.getOperation<\n        ThemeResponse,\n        ThemeCreateRequest,\n        ThemeResponse,\n        'update'\n      >('theme', 'update') ??\n      ((id) =>\n        this.entitiesService.updateTheme(id, {\n          settings: {\n            modal: this.formChanges,\n          },\n        }))\n    );\n  }\n}\n","<div class=\"card pt-2\">\n  <div class=\"mb-4 p-2 flex justify-start items-center\">\n    <fa-icon\n      [icon]=\"faFill\"\n      class=\"!text-[2.5rem]\"\n      [ngClass]=\"{ 'icon-primary': isFormEditable() }\"\n    ></fa-icon>\n\n    <div class=\"pl-6 flex-1\">\n      <div class=\"flex justify-between items-center\">\n        <h2 class=\"text-xl font-semibold m-0\">Modal</h2>\n        @if (!isFormEditable() && !createMode()) {\n          <div class=\"icon-light\">\n            <span\n              class=\"pi pi-pen-to-square action hover !text-2xl\"\n              [attr.aria-label]=\"'Edit theme details'\"\n              (click)=\"onEdit()\"\n              (keydown.enter)=\"onEdit()\"\n            ></span>\n          </div>\n        }\n      </div>\n      <span>{{ description }}</span>\n    </div>\n  </div>\n\n  @if (isFormEditable() || (createMode() && formFields.length)) {\n    <app-dynamic-form\n      [fields]=\"formFields\"\n      [actions]=\"actions\"\n      [hideActions]=\"createMode()\"\n      (formSubmit)=\"onSubmit($event)\"\n      (formValidityChange)=\"onFormValidityChange($event)\"\n      (fieldValueChange)=\"onFieldValueChange($event)\"\n    >\n    </app-dynamic-form>\n  }\n\n  @if (!isFormEditable() && !createMode()) {\n    <app-grid\n      [data]=\"themeDetails()\"\n      [columns]=\"columns\"\n      [showGridLines]=\"false\"\n      [hideHeader]=\"true\"\n      tableStyleClass=\"info-display !w-auto\"\n    ></app-grid>\n  }\n</div>\n\n<ng-template #valueTemplate let-rowData>\n  <app-theme-value-display [rowData]=\"rowData\" [group]=\"group\">\n  </app-theme-value-display>\n</ng-template>\n","import {\n  Component,\n  computed,\n  TemplateRef,\n  ViewChild,\n  OnInit,\n} from '@angular/core';\nimport {\n  ThemeSettingsSectionBase,\n  ThemeFieldConfig,\n} from '../../base/theme-settings-section-base';\nimport { ThemeCreateRequest, ThemeResponse } from '../../../../../api';\nimport { FormFieldConfig } from '../../../../../shared/models';\nimport { DynamicFormComponent } from '../../../../../shared/components/forms/dynamic-form/dynamic-form.component';\nimport { FontAwesomeModule } from '@fortawesome/angular-fontawesome';\nimport { CommonModule } from '@angular/common';\nimport { DROP_SHADOW_OPTIONS } from '../../../models';\nimport { Observable } from 'rxjs';\nimport { isDefined } from '../../../../../shared/utils';\nimport { GridComponent } from '../../../../../shared/components/grid/grid.component';\nimport { ThemeValueDisplayComponent } from '../theme-value-display/theme-value-display.component';\n\n// Constants for theme property paths\nconst SIDEBAR_THEME_PATHS = {\n  FONT_COLOR: ['sidebar', 'font', 'color'],\n  BACKGROUND_COLOR: ['sidebar', 'background', 'color'],\n  BORDER_COLOR: ['sidebar', 'border', 'color'],\n  SHADOW: ['sidebar', 'shadow'],\n} as const;\n\n@Component({\n  selector: 'app-theme-settings-sidebar-section',\n  imports: [\n    DynamicFormComponent,\n    FontAwesomeModule,\n    CommonModule,\n    GridComponent,\n    ThemeValueDisplayComponent,\n  ],\n  templateUrl: './theme-settings-sidebar-section.component.html',\n  styleUrl: './theme-settings-sidebar-section.component.scss',\n})\nexport class ThemeSettingsSidebarSectionComponent\n  extends ThemeSettingsSectionBase\n  implements OnInit\n{\n  @ViewChild('valueTemplate', { static: true })\n  valueTemplate!: TemplateRef<unknown>;\n\n  readonly themeDetails = computed(() => {\n    const themeDetails = this.entity();\n    if (!isDefined(themeDetails)) return [];\n\n    const themeSettings = this.themeEngine.themeSettingsMergedWithDefault(\n      themeDetails?.settings ?? {},\n    );\n\n    const detailConfigs = this.createThemeDetailsFromConfig(\n      this.getFieldConfigurations(),\n    );\n    return detailConfigs.map((config) => ({\n      key: config.key,\n      value: this.formatThemeValue(themeSettings, config),\n    }));\n  });\n\n  constructor() {\n    super('sidebar');\n  }\n\n  ngOnInit(): void {\n    this.initializeColumns();\n  }\n\n  private initializeColumns(): void {\n    this.columns = [\n      { field: 'key', header: '', transform: 'uppercase' },\n      {\n        field: 'value',\n        header: '',\n        cellTemplate: this.valueTemplate,\n      },\n    ];\n  }\n\n  protected getFieldConfigurations(): ThemeFieldConfig[] {\n    return [\n      {\n        id: 'font.color',\n        label: 'Font Color',\n        path: SIDEBAR_THEME_PATHS.FONT_COLOR,\n        type: 'color',\n        group: 'sidebar',\n        presets: ['main', 'content', 'header'],\n      },\n      {\n        id: 'background.color',\n        label: 'Background Color',\n        path: SIDEBAR_THEME_PATHS.BACKGROUND_COLOR,\n        type: 'color',\n        group: 'sidebar',\n        presets: ['main', 'content'],\n      },\n      {\n        id: 'border.color',\n        label: 'Border Color',\n        path: SIDEBAR_THEME_PATHS.BORDER_COLOR,\n        type: 'color',\n        group: 'sidebar',\n        presets: ['main', 'content'],\n      },\n\n      {\n        id: 'shadow',\n        label: 'Shadow',\n        path: SIDEBAR_THEME_PATHS.SHADOW,\n        type: 'dropdown',\n        options: DROP_SHADOW_OPTIONS,\n      },\n    ];\n  }\n\n  getFields(entity: ThemeResponse): FormFieldConfig[] {\n    return this.createFormFieldsFromConfig(\n      entity,\n      this.getFieldConfigurations(),\n    );\n  }\n\n  override getUpdateMethod(): (\n    id: string,\n    data: Partial<ThemeResponse>,\n  ) => Observable<ThemeResponse> {\n    return (\n      this.operationRegistry.getOperation<\n        ThemeResponse,\n        ThemeCreateRequest,\n        ThemeResponse,\n        'update'\n      >('theme', 'update') ??\n      ((id) =>\n        this.entitiesService.updateTheme(id, {\n          settings: {\n            sidebar: this.formChanges,\n          },\n        }))\n    );\n  }\n}\n","<div class=\"card pt-2\">\n  <div class=\"mb-4 p-2 flex justify-start items-center\">\n    <fa-icon\n      [icon]=\"faFill\"\n      class=\"!text-[2.5rem]\"\n      [ngClass]=\"{ 'icon-primary': isFormEditable() }\"\n    ></fa-icon>\n\n    <div class=\"pl-6 flex-1\">\n      <div class=\"flex justify-between items-center\">\n        <h2 class=\"text-xl font-semibold m-0\">Sidebar</h2>\n        @if (!isFormEditable() && !createMode()) {\n          <div class=\"icon-light\">\n            <span\n              class=\"pi pi-pen-to-square action hover !text-2xl\"\n              [attr.aria-label]=\"'Edit theme details'\"\n              (click)=\"onEdit()\"\n              (keydown.enter)=\"onEdit()\"\n            ></span>\n          </div>\n        }\n      </div>\n      <span>{{ description }}</span>\n    </div>\n  </div>\n\n  @if (isFormEditable() || (createMode() && formFields.length)) {\n    <app-dynamic-form\n      [fields]=\"formFields\"\n      [actions]=\"actions\"\n      [hideActions]=\"createMode()\"\n      (formSubmit)=\"onSubmit($event)\"\n      (formValidityChange)=\"onFormValidityChange($event)\"\n      (fieldValueChange)=\"onFieldValueChange($event)\"\n    >\n    </app-dynamic-form>\n  }\n\n  @if (!isFormEditable() && !createMode()) {\n    <app-grid\n      [data]=\"themeDetails()\"\n      [columns]=\"columns\"\n      [showGridLines]=\"false\"\n      [hideHeader]=\"true\"\n      tableStyleClass=\"info-display !w-auto\"\n    ></app-grid>\n  }\n</div>\n\n<ng-template #valueTemplate let-rowData>\n  <app-theme-value-display [rowData]=\"rowData\" [group]=\"group\">\n  </app-theme-value-display>\n</ng-template>\n","import {\n  Component,\n  computed,\n  OnInit,\n  TemplateRef,\n  ViewChild,\n} from '@angular/core';\nimport {\n  ThemeSettingsSectionBase,\n  ThemeFieldConfig,\n} from '../../base/theme-settings-section-base';\nimport { ThemeCreateRequest, ThemeResponse } from '../../../../../api';\nimport { FormFieldConfig } from '../../../../../shared/models';\nimport { DynamicFormComponent } from '../../../../../shared/components/forms/dynamic-form/dynamic-form.component';\nimport { FontAwesomeModule } from '@fortawesome/angular-fontawesome';\nimport { CommonModule } from '@angular/common';\nimport { DROP_SHADOW_OPTIONS } from '../../../models';\nimport { Observable } from 'rxjs';\nimport { isDefined } from '../../../../../shared/utils';\nimport { GridComponent } from '../../../../../shared/components/grid/grid.component';\nimport { ThemeValueDisplayComponent } from '../theme-value-display/theme-value-display.component';\n\n// Constants for theme property paths\nconst BUTTON_THEME_PATHS = {\n  FONT_FAMILY: ['button', 'font', 'family'],\n  FONT_SIZE: ['button', 'font', 'size'],\n  FONT_WEIGHT: ['button', 'font', 'weight'],\n  FONT_TRANSFORM: ['button', 'font', 'transform'],\n  BORDER_RADIUS: ['button', 'border', 'radius'],\n  BORDER_SHADOW: ['button', 'border', 'shadow'],\n  HOVER_BORDER_SHADOW: ['button', 'hover', 'border', 'shadow'],\n  ACTIVE_BORDER_SHADOW: ['button', 'active', 'border', 'shadow'],\n} as const;\n\n@Component({\n  selector: 'app-theme-settings-button-section',\n  imports: [\n    DynamicFormComponent,\n    FontAwesomeModule,\n    CommonModule,\n    GridComponent,\n    ThemeValueDisplayComponent,\n  ],\n  templateUrl: './theme-settings-button-section.component.html',\n  styleUrl: './theme-settings-button-section.component.scss',\n})\nexport class ThemeSettingsButtonSectionComponent\n  extends ThemeSettingsSectionBase\n  implements OnInit\n{\n  @ViewChild('valueTemplate', { static: true })\n  valueTemplate!: TemplateRef<unknown>;\n\n  readonly themeDetails = computed(() => {\n    const themeDetails = this.entity();\n    if (!isDefined(themeDetails)) return [];\n\n    const themeSettings = this.themeEngine.themeSettingsMergedWithDefault(\n      themeDetails?.settings ?? {},\n    );\n\n    const detailConfigs = this.createThemeDetailsFromConfig(\n      this.getFieldConfigurations(),\n    );\n    return detailConfigs.map((config) => ({\n      key: config.key,\n      value: this.formatThemeValue(themeSettings, config),\n    }));\n  });\n\n  constructor() {\n    super('button');\n  }\n\n  ngOnInit(): void {\n    this.initializeColumns();\n  }\n\n  private initializeColumns(): void {\n    this.columns = [\n      { field: 'key', header: '', transform: 'uppercase' },\n      {\n        field: 'value',\n        header: '',\n        cellTemplate: this.valueTemplate,\n      },\n    ];\n  }\n\n  protected getFieldConfigurations(): ThemeFieldConfig[] {\n    return [\n      {\n        id: 'font.family',\n        label: 'Font Family',\n        path: BUTTON_THEME_PATHS.FONT_FAMILY,\n        type: 'font-family',\n      },\n      {\n        id: 'font.size',\n        label: 'Font Size',\n        path: BUTTON_THEME_PATHS.FONT_SIZE,\n        type: 'size',\n      },\n      {\n        id: 'font.weight',\n        label: 'Font Weight',\n        path: BUTTON_THEME_PATHS.FONT_WEIGHT,\n        type: 'font-weight',\n      },\n      {\n        id: 'border.radius',\n        label: 'Border Radius',\n        path: BUTTON_THEME_PATHS.BORDER_RADIUS,\n        type: 'size',\n        props: { unit: 'px' },\n      },\n      {\n        id: 'border.shadow',\n        label: 'Shadow',\n        path: BUTTON_THEME_PATHS.BORDER_SHADOW,\n        type: 'dropdown',\n        options: DROP_SHADOW_OPTIONS,\n      },\n      {\n        id: 'hover.border.shadow',\n        label: 'Hover Shadow',\n        path: BUTTON_THEME_PATHS.HOVER_BORDER_SHADOW,\n        type: 'dropdown',\n        options: DROP_SHADOW_OPTIONS,\n      },\n      {\n        id: 'active.border.shadow',\n        label: 'Active Shadow',\n        path: BUTTON_THEME_PATHS.ACTIVE_BORDER_SHADOW,\n        type: 'dropdown',\n        options: DROP_SHADOW_OPTIONS,\n      },\n    ];\n  }\n\n  getFields(entity: ThemeResponse): FormFieldConfig[] {\n    return this.createFormFieldsFromConfig(\n      entity,\n      this.getFieldConfigurations(),\n    );\n  }\n\n  override getUpdateMethod(): (\n    id: string,\n    data: Partial<ThemeResponse>,\n  ) => Observable<ThemeResponse> {\n    return (\n      this.operationRegistry.getOperation<\n        ThemeResponse,\n        ThemeCreateRequest,\n        ThemeResponse,\n        'update'\n      >('theme', 'update') ??\n      ((id) =>\n        this.entitiesService.updateTheme(id, {\n          settings: {\n            button: this.formChanges,\n          },\n        }))\n    );\n  }\n}\n","<div class=\"card pt-2\">\n  <div class=\"mb-4 p-2 flex justify-start items-center\">\n    <fa-icon\n      [icon]=\"faFill\"\n      class=\"!text-[2.5rem]\"\n      [ngClass]=\"{ 'icon-primary': isFormEditable() }\"\n    ></fa-icon>\n\n    <div class=\"pl-6 flex-1\">\n      <div class=\"flex justify-between items-center\">\n        <h2 class=\"text-xl font-semibold m-0\">Button</h2>\n        @if (!isFormEditable() && !createMode()) {\n          <div class=\"icon-light\">\n            <span\n              class=\"pi pi-pen-to-square action hover !text-2xl\"\n              [attr.aria-label]=\"'Edit theme details'\"\n              (click)=\"onEdit()\"\n              (keydown.enter)=\"onEdit()\"\n            ></span>\n          </div>\n        }\n      </div>\n      <span>{{ description }}</span>\n    </div>\n  </div>\n\n  @if (isFormEditable() || (createMode() && formFields.length)) {\n    <app-dynamic-form\n      [fields]=\"formFields\"\n      [actions]=\"actions\"\n      [hideActions]=\"createMode()\"\n      (formSubmit)=\"onSubmit($event)\"\n      (formValidityChange)=\"onFormValidityChange($event)\"\n      (fieldValueChange)=\"onFieldValueChange($event)\"\n    >\n    </app-dynamic-form>\n  }\n\n  @if (!isFormEditable() && !createMode()) {\n    <app-grid\n      [data]=\"themeDetails()\"\n      [columns]=\"columns\"\n      [showGridLines]=\"false\"\n      [hideHeader]=\"true\"\n      tableStyleClass=\"info-display !w-auto\"\n    ></app-grid>\n  }\n</div>\n\n<ng-template #valueTemplate let-rowData>\n  <app-theme-value-display [rowData]=\"rowData\" [group]=\"group\">\n  </app-theme-value-display>\n</ng-template>\n","import {\n  Component,\n  computed,\n  TemplateRef,\n  ViewChild,\n  OnInit,\n} from '@angular/core';\nimport {\n  ThemeSettingsSectionBase,\n  ThemeFieldConfig,\n} from '../../base/theme-settings-section-base';\nimport { ThemeCreateRequest, ThemeResponse } from '../../../../../api';\nimport { FormFieldConfig } from '../../../../../shared/models';\nimport { DynamicFormComponent } from '../../../../../shared/components/forms/dynamic-form/dynamic-form.component';\nimport { FontAwesomeModule } from '@fortawesome/angular-fontawesome';\nimport { CommonModule } from '@angular/common';\nimport { Observable } from 'rxjs';\nimport { isDefined } from '../../../../../shared/utils';\nimport { GridComponent } from '../../../../../shared/components/grid/grid.component';\nimport { ThemeValueDisplayComponent } from '../theme-value-display/theme-value-display.component';\n\n// Constants for theme property paths\nconst INPUT_THEME_PATHS = {\n  FONT_FAMILY: ['input', 'font', 'family'],\n  FONT_SIZE: ['input', 'font', 'size'],\n  FONT_WEIGHT: ['input', 'font', 'weight'],\n  FONT_COLOR: ['input', 'font', 'color'],\n  BACKGROUND_COLOR: ['input', 'background', 'color'],\n  BORDER_COLOR: ['input', 'border', 'color'],\n} as const;\n\n@Component({\n  selector: 'app-theme-settings-input-section',\n  imports: [\n    DynamicFormComponent,\n    FontAwesomeModule,\n    CommonModule,\n    GridComponent,\n    ThemeValueDisplayComponent,\n  ],\n  templateUrl: './theme-settings-input-section.component.html',\n  styleUrl: './theme-settings-input-section.component.scss',\n})\nexport class ThemeSettingsInputSectionComponent\n  extends ThemeSettingsSectionBase\n  implements OnInit\n{\n  @ViewChild('valueTemplate', { static: true })\n  valueTemplate!: TemplateRef<unknown>;\n\n  readonly themeDetails = computed(() => {\n    const themeDetails = this.entity();\n    if (!isDefined(themeDetails)) return [];\n\n    const themeSettings = this.themeEngine.themeSettingsMergedWithDefault(\n      themeDetails?.settings ?? {},\n    );\n\n    const detailConfigs = this.createThemeDetailsFromConfig(\n      this.getFieldConfigurations(),\n    );\n    return detailConfigs.map((config) => ({\n      key: config.key,\n      value: this.formatThemeValue(themeSettings, config),\n    }));\n  });\n\n  constructor() {\n    super('input');\n  }\n\n  ngOnInit(): void {\n    this.initializeColumns();\n  }\n\n  private initializeColumns(): void {\n    this.columns = [\n      { field: 'key', header: '', transform: 'uppercase' },\n      {\n        field: 'value',\n        header: '',\n        cellTemplate: this.valueTemplate,\n      },\n    ];\n  }\n\n  protected getFieldConfigurations(): ThemeFieldConfig[] {\n    return [\n      {\n        id: 'font.family',\n        label: 'Font Family',\n        path: INPUT_THEME_PATHS.FONT_FAMILY,\n        type: 'font-family',\n      },\n      {\n        id: 'font.size',\n        label: 'Font Size',\n        path: INPUT_THEME_PATHS.FONT_SIZE,\n        type: 'size',\n      },\n      {\n        id: 'font.weight',\n        label: 'Font Weight',\n        path: INPUT_THEME_PATHS.FONT_WEIGHT,\n        type: 'font-weight',\n      },\n      {\n        id: 'font.color',\n        label: 'Font Color',\n        path: INPUT_THEME_PATHS.FONT_COLOR,\n        type: 'color',\n        group: 'input',\n      },\n      {\n        id: 'background.color',\n        label: 'Background Color',\n        path: INPUT_THEME_PATHS.BACKGROUND_COLOR,\n        type: 'color',\n        group: 'input',\n      },\n      {\n        id: 'border.color',\n        label: 'Border Color',\n        path: INPUT_THEME_PATHS.BORDER_COLOR,\n        type: 'color',\n        group: 'input',\n      },\n    ];\n  }\n\n  getFields(entity: ThemeResponse): FormFieldConfig[] {\n    return this.createFormFieldsFromConfig(\n      entity,\n      this.getFieldConfigurations(),\n    );\n  }\n\n  override getUpdateMethod(): (\n    id: string,\n    data: Partial<ThemeResponse>,\n  ) => Observable<ThemeResponse> {\n    return (\n      this.operationRegistry.getOperation<\n        ThemeResponse,\n        ThemeCreateRequest,\n        ThemeResponse,\n        'update'\n      >('theme', 'update') ??\n      ((id) =>\n        this.entitiesService.updateTheme(id, {\n          settings: {\n            input: this.formChanges,\n          },\n        }))\n    );\n  }\n}\n","<div class=\"card pt-2\">\n  <div class=\"mb-4 p-2 flex justify-start items-center\">\n    <fa-icon\n      [icon]=\"faFill\"\n      class=\"!text-[2.5rem]\"\n      [ngClass]=\"{ 'icon-primary': isFormEditable() }\"\n    ></fa-icon>\n\n    <div class=\"pl-6 flex-1\">\n      <div class=\"flex justify-between items-center\">\n        <h2 class=\"text-xl font-semibold m-0\">Input</h2>\n        @if (!isFormEditable() && !createMode()) {\n          <div class=\"icon-light\">\n            <span\n              class=\"pi pi-pen-to-square action hover !text-2xl\"\n              [attr.aria-label]=\"'Edit theme details'\"\n              (click)=\"onEdit()\"\n              (keydown.enter)=\"onEdit()\"\n            ></span>\n          </div>\n        }\n      </div>\n      <span>{{ description }}</span>\n    </div>\n  </div>\n\n  @if (isFormEditable() || (createMode() && formFields.length)) {\n    <app-dynamic-form\n      [fields]=\"formFields\"\n      [actions]=\"actions\"\n      [hideActions]=\"createMode()\"\n      (formSubmit)=\"onSubmit($event)\"\n      (formValidityChange)=\"onFormValidityChange($event)\"\n      (fieldValueChange)=\"onFieldValueChange($event)\"\n    >\n    </app-dynamic-form>\n  }\n\n  @if (!isFormEditable() && !createMode()) {\n    <app-grid\n      [data]=\"themeDetails()\"\n      [columns]=\"columns\"\n      [showGridLines]=\"false\"\n      [hideHeader]=\"true\"\n      tableStyleClass=\"info-display !w-auto\"\n    ></app-grid>\n  }\n</div>\n\n<ng-template #valueTemplate let-rowData>\n  <app-theme-value-display [rowData]=\"rowData\" [group]=\"group\">\n  </app-theme-value-display>\n</ng-template>\n","import {\n  Component,\n  computed,\n  TemplateRef,\n  ViewChild,\n  OnInit,\n} from '@angular/core';\nimport {\n  ThemeSettingsSectionBase,\n  ThemeFieldConfig,\n} from '../../base/theme-settings-section-base';\nimport { ThemeCreateRequest, ThemeResponse } from '../../../../../api';\nimport { FormFieldConfig } from '../../../../../shared/models';\nimport { DynamicFormComponent } from '../../../../../shared/components/forms/dynamic-form/dynamic-form.component';\nimport { FontAwesomeModule } from '@fortawesome/angular-fontawesome';\nimport { CommonModule } from '@angular/common';\nimport { Observable } from 'rxjs';\nimport { isDefined } from '../../../../../shared/utils';\nimport { GridComponent } from '../../../../../shared/components/grid/grid.component';\nimport { ThemeValueDisplayComponent } from '../theme-value-display/theme-value-display.component';\n\n// Constants for theme property paths\nconst TAB_THEME_PATHS = {\n  FONT_FAMILY: ['tab', 'font', 'family'],\n  FONT_SIZE: ['tab', 'font', 'size'],\n  FONT_WEIGHT: ['tab', 'font', 'weight'],\n  FONT_TRANSFORM: ['tab', 'font', 'transform'],\n  FONT_COLOR: ['tab', 'font', 'color'],\n  BACKGROUND_COLOR: ['tab', 'background', 'color'],\n  BORDER_COLOR: ['tab', 'border', 'color'],\n  ACTIVE_FONT_COLOR: ['tab', 'active', 'font', 'color'],\n  ACTIVE_BACKGROUND_COLOR: ['tab', 'active', 'background', 'color'],\n  ACTIVE_INDICATOR_STYLE: ['tab', 'active', 'style'],\n  ACTIVE_INDICATOR_COLOR: ['tab', 'active', 'indicator', 'color'],\n} as const;\n\n@Component({\n  selector: 'app-theme-settings-tab-section',\n  imports: [\n    DynamicFormComponent,\n    FontAwesomeModule,\n    CommonModule,\n    GridComponent,\n    ThemeValueDisplayComponent,\n  ],\n  templateUrl: './theme-settings-tab-section.component.html',\n  styleUrl: './theme-settings-tab-section.component.scss',\n})\nexport class ThemeSettingsTabSectionComponent\n  extends ThemeSettingsSectionBase\n  implements OnInit\n{\n  @ViewChild('valueTemplate', { static: true })\n  valueTemplate!: TemplateRef<unknown>;\n  readonly themeDetails = computed(() => {\n    const themeDetails = this.entity();\n    if (!isDefined(themeDetails)) return [];\n\n    const themeSettings = this.themeEngine.themeSettingsMergedWithDefault(\n      themeDetails?.settings ?? {},\n    );\n\n    const detailConfigs = this.createThemeDetailsFromConfig(\n      this.getFieldConfigurations(),\n    );\n    return detailConfigs.map((config) => ({\n      key: config.key,\n      value: this.formatThemeValue(themeSettings, config),\n    }));\n  });\n\n  constructor() {\n    super('tab');\n  }\n\n  ngOnInit(): void {\n    this.initializeColumns();\n  }\n\n  private initializeColumns(): void {\n    this.columns = [\n      { field: 'key', header: '', transform: 'uppercase' },\n      {\n        field: 'value',\n        header: '',\n        cellTemplate: this.valueTemplate,\n      },\n    ];\n  }\n\n  protected getFieldConfigurations(): ThemeFieldConfig[] {\n    return [\n      {\n        id: 'font.family',\n        label: 'Font Family',\n        path: TAB_THEME_PATHS.FONT_FAMILY,\n        type: 'font-family',\n        presets: ['main', 'content'],\n      },\n      {\n        id: 'font.size',\n        label: 'Font Size',\n        path: TAB_THEME_PATHS.FONT_SIZE,\n        type: 'size',\n      },\n      {\n        id: 'font.weight',\n        label: 'Font Weight',\n        path: TAB_THEME_PATHS.FONT_WEIGHT,\n        type: 'font-weight',\n        presets: ['main', 'content'],\n      },\n      {\n        id: 'font.transform',\n        label: 'Font Case',\n        path: TAB_THEME_PATHS.FONT_TRANSFORM,\n        type: 'font-transform',\n      },\n      {\n        id: 'font.color',\n        label: 'Font Color',\n        path: TAB_THEME_PATHS.FONT_COLOR,\n        type: 'color',\n        group: 'tab',\n        presets: ['main', 'content', 'header'],\n      },\n      {\n        id: 'background.color',\n        label: 'Background Color',\n        path: TAB_THEME_PATHS.BACKGROUND_COLOR,\n        type: 'color',\n        group: 'tab',\n        presets: ['content', 'header'],\n      },\n      {\n        id: 'border.color',\n        label: 'Border Color',\n        path: TAB_THEME_PATHS.BORDER_COLOR,\n        type: 'color',\n        group: 'tab',\n        presets: ['tab', 'header', 'main', 'content'],\n      },\n      {\n        id: 'active.font.color',\n        label: 'Active Font',\n        path: TAB_THEME_PATHS.ACTIVE_FONT_COLOR,\n        type: 'color',\n        group: 'tab',\n        presets: ['main', 'content', 'header'],\n      },\n      {\n        id: 'active.background.color',\n        label: 'Active Background',\n        path: TAB_THEME_PATHS.ACTIVE_BACKGROUND_COLOR,\n        type: 'color',\n        group: 'tab',\n        presets: ['tab', 'content'],\n      },\n      {\n        id: 'active.style',\n        label: 'Active Style',\n        path: TAB_THEME_PATHS.ACTIVE_INDICATOR_STYLE,\n        type: 'dropdown',\n        options: [\n          { value: 'none', label: 'None' },\n          { value: 'bottom', label: 'Bottom' },\n        ],\n      },\n      {\n        id: 'active.indicator.color',\n        label: 'Active Indicator Color',\n        path: TAB_THEME_PATHS.ACTIVE_INDICATOR_COLOR,\n        type: 'color',\n        group: 'tab',\n        presets: ['tab', 'header'],\n      },\n    ];\n  }\n\n  getFields(entity: ThemeResponse): FormFieldConfig[] {\n    return this.createFormFieldsFromConfig(\n      entity,\n      this.getFieldConfigurations(),\n    );\n  }\n\n  override getUpdateMethod(): (\n    id: string,\n    data: Partial<ThemeResponse>,\n  ) => Observable<ThemeResponse> {\n    return (\n      this.operationRegistry.getOperation<\n        ThemeResponse,\n        ThemeCreateRequest,\n        ThemeResponse,\n        'update'\n      >('theme', 'update') ??\n      ((id) =>\n        this.entitiesService.updateTheme(id, {\n          settings: {\n            tab: this.formChanges,\n          },\n        }))\n    );\n  }\n}\n","<div class=\"card pt-2\">\n  <div class=\"mb-4 p-2 flex justify-start items-center\">\n    <fa-icon\n      [icon]=\"faFill\"\n      class=\"!text-[2.5rem]\"\n      [ngClass]=\"{ 'icon-primary': isFormEditable() }\"\n    ></fa-icon>\n\n    <div class=\"pl-6 flex-1\">\n      <div class=\"flex justify-between items-center\">\n        <h2 class=\"text-xl font-semibold m-0\">Tab</h2>\n        @if (!isFormEditable() && !createMode()) {\n          <div class=\"icon-light\">\n            <span\n              class=\"pi pi-pen-to-square action hover !text-2xl\"\n              [attr.aria-label]=\"'Edit theme tab details'\"\n              (click)=\"onEdit()\"\n              (keydown.enter)=\"onEdit()\"\n            ></span>\n          </div>\n        }\n      </div>\n      <span>{{ description }}</span>\n    </div>\n  </div>\n\n  @if (isFormEditable() || (createMode() && formFields.length)) {\n    <app-dynamic-form\n      [fields]=\"formFields\"\n      [actions]=\"actions\"\n      [hideActions]=\"createMode()\"\n      (formSubmit)=\"onSubmit($event)\"\n      (formValidityChange)=\"onFormValidityChange($event)\"\n      (fieldValueChange)=\"onFieldValueChange($event)\"\n    >\n    </app-dynamic-form>\n  }\n\n  @if (!isFormEditable() && !createMode()) {\n    <app-grid\n      [data]=\"themeDetails()\"\n      [columns]=\"columns\"\n      [showGridLines]=\"false\"\n      [hideHeader]=\"true\"\n      tableStyleClass=\"info-display !w-auto\"\n    ></app-grid>\n  }\n</div>\n\n<ng-template #valueTemplate let-rowData>\n  <app-theme-value-display [rowData]=\"rowData\" [group]=\"group\">\n  </app-theme-value-display>\n</ng-template>\n","import {\n  Component,\n  computed,\n  TemplateRef,\n  ViewChild,\n  inject,\n  OnInit,\n} from '@angular/core';\nimport {\n  ThemeSettingsSectionBase,\n  ThemeFieldConfig,\n} from '../../base/theme-settings-section-base';\nimport { ThemeCreateRequest, ThemeResponse } from '../../../../../api';\nimport { FormFieldConfig } from '../../../../../shared/models';\nimport { DynamicFormComponent } from '../../../../../shared/components/forms/dynamic-form/dynamic-form.component';\nimport { FontAwesomeModule } from '@fortawesome/angular-fontawesome';\nimport { CommonModule } from '@angular/common';\nimport { Observable } from 'rxjs';\nimport { isDefined } from '../../../../../shared/utils';\nimport { GridComponent } from '../../../../../shared/components/grid/grid.component';\nimport { ThemeValueDisplayComponent } from '../theme-value-display/theme-value-display.component';\nimport { ThemeColorService } from '../../../services/theme-color.service';\n\n// Constants for theme property paths\nconst ACCORDION_THEME_PATHS = {\n  FONT_FAMILY: ['accordion', 'font', 'family'],\n  FONT_SIZE: ['accordion', 'font', 'size'],\n  FONT_WEIGHT: ['accordion', 'font', 'weight'],\n  FONT_COLOR: ['accordion', 'font', 'color'],\n  FONT_TRANSFORM: ['accordion', 'font', 'transform'],\n  BACKGROUND_COLOR: ['accordion', 'background', 'color'],\n  BORDER_COLOR: ['accordion', 'border', 'color'],\n  BORDER_WIDTH: ['accordion', 'border', 'width'],\n  ACTIVE_FONT_COLOR: ['accordion', 'active', 'font', 'color'],\n  ACTIVE_BACKGROUND_COLOR: ['accordion', 'active', 'background', 'color'],\n} as const;\n\n@Component({\n  selector: 'app-theme-settings-accordion-section',\n  imports: [\n    DynamicFormComponent,\n    FontAwesomeModule,\n    CommonModule,\n    GridComponent,\n    ThemeValueDisplayComponent,\n  ],\n  templateUrl: './theme-settings-accordion-section.component.html',\n  styleUrl: './theme-settings-accordion-section.component.scss',\n})\nexport class ThemeSettingsAccordionSectionComponent\n  extends ThemeSettingsSectionBase\n  implements OnInit\n{\n  @ViewChild('valueTemplate', { static: true })\n  valueTemplate!: TemplateRef<unknown>;\n  private readonly themeColorService = inject(ThemeColorService);\n  readonly themeDetails = computed(() => {\n    const themeDetails = this.entity();\n    if (!isDefined(themeDetails)) return [];\n\n    const themeSettings = this.themeEngine.themeSettingsMergedWithDefault(\n      themeDetails?.settings ?? {},\n    );\n\n    const detailConfigs = this.createThemeDetailsFromConfig(\n      this.getFieldConfigurations(),\n    );\n    return detailConfigs.map((config) => ({\n      key: config.key,\n      value: this.formatThemeValue(themeSettings, config),\n    }));\n  });\n\n  constructor() {\n    super('accordion');\n  }\n\n  ngOnInit(): void {\n    this.initializeColumns();\n  }\n\n  private initializeColumns(): void {\n    this.columns = [\n      { field: 'key', header: '', transform: 'uppercase' },\n      {\n        field: 'value',\n        header: '',\n        cellTemplate: this.valueTemplate,\n      },\n    ];\n  }\n\n  protected getFieldConfigurations(): ThemeFieldConfig[] {\n    return [\n      {\n        id: 'font.family',\n        label: 'Font Family',\n        path: ACCORDION_THEME_PATHS.FONT_FAMILY,\n        type: 'font-family',\n        presets: ['main', 'content', 'header'],\n      },\n      {\n        id: 'font.size',\n        label: 'Font Size',\n        path: ACCORDION_THEME_PATHS.FONT_SIZE,\n        type: 'size',\n      },\n      {\n        id: 'font.weight',\n        label: 'Font Weight',\n        path: ACCORDION_THEME_PATHS.FONT_WEIGHT,\n        type: 'font-weight',\n      },\n      {\n        id: 'font.color',\n        label: 'Font Color',\n        path: ACCORDION_THEME_PATHS.FONT_COLOR,\n        type: 'color',\n        group: 'accordion',\n        presets: ['main', 'content', 'header'],\n      },\n      {\n        id: 'font.transform',\n        label: 'Font Case',\n        path: ACCORDION_THEME_PATHS.FONT_TRANSFORM,\n        type: 'font-transform',\n      },\n      {\n        id: 'background.color',\n        label: 'Background Color',\n        path: ACCORDION_THEME_PATHS.BACKGROUND_COLOR,\n        type: 'color',\n        group: 'accordion',\n        presets: ['main', 'content'],\n      },\n      {\n        id: 'border.color',\n        label: 'Border Color',\n        path: ACCORDION_THEME_PATHS.BORDER_COLOR,\n        type: 'color',\n        group: 'accordion',\n      },\n      {\n        id: 'border.width',\n        label: 'Border Width',\n        path: ACCORDION_THEME_PATHS.BORDER_WIDTH,\n        type: 'size',\n        props: { unit: 'px' },\n      },\n      {\n        id: 'active.font.color',\n        label: 'Active Font Color',\n        path: ACCORDION_THEME_PATHS.ACTIVE_FONT_COLOR,\n        type: 'color',\n        group: 'accordion',\n        presets: ['main', 'content', 'header'],\n        customColors: { 'Primary Contrast': 'var(--color-primary-contrast)' },\n      },\n      {\n        id: 'active.background.color',\n        label: 'Active Background',\n        path: ACCORDION_THEME_PATHS.ACTIVE_BACKGROUND_COLOR,\n        type: 'color',\n        group: 'accordion',\n        presets: ['main', 'content'],\n        customColors: {\n          Primary: this.themeColorService.computeColor(\n            'var(--color-primary-color)',\n          ),\n        },\n      },\n    ];\n  }\n\n  getFields(entity: ThemeResponse): FormFieldConfig[] {\n    return this.createFormFieldsFromConfig(\n      entity,\n      this.getFieldConfigurations(),\n    );\n  }\n\n  override getUpdateMethod(): (\n    id: string,\n    data: Partial<ThemeResponse>,\n  ) => Observable<ThemeResponse> {\n    return (\n      this.operationRegistry.getOperation<\n        ThemeResponse,\n        ThemeCreateRequest,\n        ThemeResponse,\n        'update'\n      >('theme', 'update') ??\n      ((id) =>\n        this.entitiesService.updateTheme(id, {\n          settings: {\n            accordion: this.formChanges,\n          },\n        }))\n    );\n  }\n}\n","<div class=\"card pt-2\">\n  <div class=\"mb-4 p-2 flex justify-start items-center\">\n    <fa-icon\n      [icon]=\"faFill\"\n      class=\"!text-[2.5rem]\"\n      [ngClass]=\"{ 'icon-primary': isFormEditable() }\"\n    ></fa-icon>\n\n    <div class=\"pl-6 flex-1\">\n      <div class=\"flex justify-between items-center\">\n        <h2 class=\"text-xl font-semibold m-0\">Accordion</h2>\n        @if (!isFormEditable() && !createMode()) {\n          <div class=\"icon-light\">\n            <span\n              class=\"pi pi-pen-to-square action hover !text-2xl\"\n              [attr.aria-label]=\"'Edit theme accordion details'\"\n              (click)=\"onEdit()\"\n              (keydown.enter)=\"onEdit()\"\n            ></span>\n          </div>\n        }\n      </div>\n      <span>{{ description }}</span>\n    </div>\n  </div>\n\n  @if (isFormEditable() || (createMode() && formFields.length)) {\n    <app-dynamic-form\n      [fields]=\"formFields\"\n      [actions]=\"actions\"\n      [hideActions]=\"createMode()\"\n      (formSubmit)=\"onSubmit($event)\"\n      (formValidityChange)=\"onFormValidityChange($event)\"\n      (fieldValueChange)=\"onFieldValueChange($event)\"\n    >\n    </app-dynamic-form>\n  }\n\n  @if (!isFormEditable() && !createMode()) {\n    <app-grid\n      [data]=\"themeDetails()\"\n      [columns]=\"columns\"\n      [showGridLines]=\"false\"\n      [hideHeader]=\"true\"\n      tableStyleClass=\"info-display !w-auto\"\n    ></app-grid>\n  }\n</div>\n\n<ng-template #valueTemplate let-rowData>\n  <app-theme-value-display [rowData]=\"rowData\" [group]=\"group\">\n  </app-theme-value-display>\n</ng-template>\n","import {\n  Component,\n  computed,\n  TemplateRef,\n  ViewChild,\n  OnInit,\n  inject,\n} from '@angular/core';\nimport {\n  ThemeSettingsSectionBase,\n  ThemeFieldConfig,\n} from '../../base/theme-settings-section-base';\nimport { ThemeCreateRequest, ThemeResponse } from '../../../../../api';\nimport { FormFieldConfig } from '../../../../../shared/models';\nimport { DynamicFormComponent } from '../../../../../shared/components/forms/dynamic-form/dynamic-form.component';\nimport { FontAwesomeModule } from '@fortawesome/angular-fontawesome';\nimport { CommonModule } from '@angular/common';\nimport { Observable } from 'rxjs';\nimport { isDefined } from '../../../../../shared/utils';\nimport { GridComponent } from '../../../../../shared/components/grid/grid.component';\nimport { ThemeValueDisplayComponent } from '../theme-value-display/theme-value-display.component';\nimport { ThemeColorService } from '../../../services/theme-color.service';\n\n// Constants for theme property paths\nconst TABLE_THEME_PATHS = {\n  BACKGROUND_COLOR: ['table', 'background', 'color'],\n  BORDER_COLOR: ['table', 'border', 'color'],\n  HEADER_FONT_SIZE: ['table', 'header', 'font', 'size'],\n  HEADER_FONT_WEIGHT: ['table', 'header', 'font', 'weight'],\n  HEADER_FONT_TRANSFORM: ['table', 'header', 'font', 'transform'],\n  HEADER_FONT_COLOR: ['table', 'header', 'font', 'color'],\n  HEADER_BACKGROUND_COLOR: ['table', 'header', 'background', 'color'],\n  ACTIVE_FONT_COLOR: ['table', 'active', 'font', 'color'],\n  ACTIVE_BACKGROUND_COLOR: ['table', 'active', 'background', 'color'],\n} as const;\n\n@Component({\n  selector: 'app-theme-settings-table-section',\n  imports: [\n    DynamicFormComponent,\n    FontAwesomeModule,\n    CommonModule,\n    GridComponent,\n    ThemeValueDisplayComponent,\n  ],\n  templateUrl: './theme-settings-table-section.component.html',\n  styleUrl: './theme-settings-table-section.component.scss',\n})\nexport class ThemeSettingsTableSectionComponent\n  extends ThemeSettingsSectionBase\n  implements OnInit\n{\n  @ViewChild('valueTemplate', { static: true })\n  valueTemplate!: TemplateRef<unknown>;\n  private readonly themeColorService = inject(ThemeColorService);\n  readonly themeDetails = computed(() => {\n    const themeDetails = this.entity();\n    if (!isDefined(themeDetails)) return [];\n\n    const themeSettings = this.themeEngine.themeSettingsMergedWithDefault(\n      themeDetails?.settings ?? {},\n    );\n\n    const detailConfigs = this.createThemeDetailsFromConfig(\n      this.getFieldConfigurations(),\n    );\n    return detailConfigs.map((config) => ({\n      key: config.key,\n      value: this.formatThemeValue(themeSettings, config),\n    }));\n  });\n\n  constructor() {\n    super('table');\n  }\n\n  ngOnInit(): void {\n    this.initializeColumns();\n  }\n\n  private initializeColumns(): void {\n    this.columns = [\n      { field: 'key', header: '', transform: 'uppercase' },\n      {\n        field: 'value',\n        header: '',\n        cellTemplate: this.valueTemplate,\n      },\n    ];\n  }\n\n  protected getFieldConfigurations(): ThemeFieldConfig[] {\n    return [\n      {\n        id: 'background.color',\n        label: 'Background Color',\n        path: TABLE_THEME_PATHS.BACKGROUND_COLOR,\n        type: 'color',\n        group: 'table',\n        presets: ['main', 'content'],\n      },\n      {\n        id: 'border.color',\n        label: 'Border Color',\n        path: TABLE_THEME_PATHS.BORDER_COLOR,\n        type: 'color',\n        group: 'table',\n      },\n      {\n        id: 'header.font.size',\n        label: 'Header Font Size',\n        path: TABLE_THEME_PATHS.HEADER_FONT_SIZE,\n        type: 'size',\n      },\n      {\n        id: 'header.font.weight',\n        label: 'Header Font Weight',\n        path: TABLE_THEME_PATHS.HEADER_FONT_WEIGHT,\n        type: 'font-weight',\n      },\n      {\n        id: 'header.font.transform',\n        label: 'Header Font Case',\n        path: TABLE_THEME_PATHS.HEADER_FONT_TRANSFORM,\n        type: 'font-transform',\n      },\n      {\n        id: 'header.font.color',\n        label: 'Header Font Color',\n        path: TABLE_THEME_PATHS.HEADER_FONT_COLOR,\n        type: 'color',\n        group: 'table',\n        presets: ['main', 'content', 'header'],\n      },\n      {\n        id: 'header.background.color',\n        label: 'Header Background',\n        path: TABLE_THEME_PATHS.HEADER_BACKGROUND_COLOR,\n        type: 'color',\n        group: 'table',\n        presets: ['main', 'content'],\n      },\n      {\n        id: 'active.font.color',\n        label: 'Active Font Color',\n        path: TABLE_THEME_PATHS.ACTIVE_FONT_COLOR,\n        type: 'color',\n        group: 'table',\n        presets: ['main', 'content', 'header'],\n        customColors: { 'Primary Contrast': 'var(--color-primary-contrast)' },\n      },\n      {\n        id: 'active.background.color',\n        label: 'Active Background',\n        path: TABLE_THEME_PATHS.ACTIVE_BACKGROUND_COLOR,\n        type: 'color',\n        group: 'table',\n        presets: ['main', 'content'],\n        customColors: {\n          Primary: this.themeColorService.computeColor(\n            'var(--color-primary-color)',\n          ),\n        },\n      },\n    ];\n  }\n\n  getFields(entity: ThemeResponse): FormFieldConfig[] {\n    return this.createFormFieldsFromConfig(\n      entity,\n      this.getFieldConfigurations(),\n    );\n  }\n\n  override getUpdateMethod(): (\n    id: string,\n    data: Partial<ThemeResponse>,\n  ) => Observable<ThemeResponse> {\n    return (\n      this.operationRegistry.getOperation<\n        ThemeResponse,\n        ThemeCreateRequest,\n        ThemeResponse,\n        'update'\n      >('theme', 'update') ??\n      ((id) =>\n        this.entitiesService.updateTheme(id, {\n          settings: {\n            table: this.formChanges,\n          },\n        }))\n    );\n  }\n}\n","<div class=\"card pt-2\">\n  <div class=\"mb-4 p-2 flex justify-start items-center\">\n    <fa-icon\n      [icon]=\"faFill\"\n      class=\"!text-[2.5rem]\"\n      [ngClass]=\"{ 'icon-primary': isFormEditable() }\"\n    ></fa-icon>\n\n    <div class=\"pl-6 flex-1\">\n      <div class=\"flex justify-between items-center\">\n        <h2 class=\"text-xl font-semibold m-0\">Table</h2>\n        @if (!isFormEditable() && !createMode()) {\n          <div class=\"icon-light\">\n            <span\n              class=\"pi pi-pen-to-square action hover !text-2xl\"\n              [attr.aria-label]=\"'Edit theme table details'\"\n              (click)=\"onEdit()\"\n              (keydown.enter)=\"onEdit()\"\n            ></span>\n          </div>\n        }\n      </div>\n      <span>{{ description }}</span>\n    </div>\n  </div>\n\n  @if (isFormEditable() || (createMode() && formFields.length)) {\n    <app-dynamic-form\n      [fields]=\"formFields\"\n      [actions]=\"actions\"\n      [hideActions]=\"createMode()\"\n      (formSubmit)=\"onSubmit($event)\"\n      (formValidityChange)=\"onFormValidityChange($event)\"\n      (fieldValueChange)=\"onFieldValueChange($event)\"\n    >\n    </app-dynamic-form>\n  }\n\n  @if (!isFormEditable() && !createMode()) {\n    <app-grid\n      [data]=\"themeDetails()\"\n      [columns]=\"columns\"\n      [showGridLines]=\"false\"\n      [hideHeader]=\"true\"\n      tableStyleClass=\"info-display !w-auto\"\n    ></app-grid>\n  }\n</div>\n\n<ng-template #valueTemplate let-rowData>\n  <app-theme-value-display [rowData]=\"rowData\" [group]=\"group\">\n  </app-theme-value-display>\n</ng-template>\n","import {\n  Component,\n  computed,\n  TemplateRef,\n  ViewChild,\n  OnInit,\n  inject,\n} from '@angular/core';\nimport {\n  ThemeSettingsSectionBase,\n  ThemeFieldConfig,\n} from '../../base/theme-settings-section-base';\nimport { ThemeCreateRequest, ThemeResponse } from '../../../../../api';\nimport { FormFieldConfig } from '../../../../../shared/models';\nimport { DynamicFormComponent } from '../../../../../shared/components/forms/dynamic-form/dynamic-form.component';\nimport { FontAwesomeModule } from '@fortawesome/angular-fontawesome';\nimport { CommonModule } from '@angular/common';\nimport { Observable } from 'rxjs';\nimport { isDefined } from '../../../../../shared/utils';\nimport { GridComponent } from '../../../../../shared/components/grid/grid.component';\nimport { ThemeValueDisplayComponent } from '../theme-value-display/theme-value-display.component';\nimport { ThemeColorService } from '../../../services/theme-color.service';\n\n// Constants for theme property paths\nconst TREE_THEME_PATHS = {\n  BACKGROUND_COLOR: ['tree', 'background', 'color'],\n  ACTIVE_FONT_COLOR: ['tree', 'active', 'font', 'color'],\n  ACTIVE_BACKGROUND_COLOR: ['tree', 'active', 'background', 'color'],\n} as const;\n\n@Component({\n  selector: 'app-theme-settings-tree-section',\n  imports: [\n    DynamicFormComponent,\n    FontAwesomeModule,\n    CommonModule,\n    GridComponent,\n    ThemeValueDisplayComponent,\n  ],\n  templateUrl: './theme-settings-tree-section.component.html',\n  styleUrl: './theme-settings-tree-section.component.scss',\n})\nexport class ThemeSettingsTreeSectionComponent\n  extends ThemeSettingsSectionBase\n  implements OnInit\n{\n  @ViewChild('valueTemplate', { static: true })\n  valueTemplate!: TemplateRef<unknown>;\n  private readonly themeColorService = inject(ThemeColorService);\n  readonly themeDetails = computed(() => {\n    const themeDetails = this.entity();\n    if (!isDefined(themeDetails)) return [];\n\n    const themeSettings = this.themeEngine.themeSettingsMergedWithDefault(\n      themeDetails?.settings ?? {},\n    );\n\n    const detailConfigs = this.createThemeDetailsFromConfig(\n      this.getFieldConfigurations(),\n    );\n    return detailConfigs.map((config) => ({\n      key: config.key,\n      value: this.formatThemeValue(themeSettings, config),\n    }));\n  });\n\n  constructor() {\n    super('tree');\n  }\n\n  ngOnInit(): void {\n    this.initializeColumns();\n  }\n\n  private initializeColumns(): void {\n    this.columns = [\n      { field: 'key', header: '', transform: 'uppercase' },\n      {\n        field: 'value',\n        header: '',\n        cellTemplate: this.valueTemplate,\n      },\n    ];\n  }\n\n  protected getFieldConfigurations(): ThemeFieldConfig[] {\n    return [\n      {\n        id: 'background.color',\n        label: 'Background Color',\n        path: TREE_THEME_PATHS.BACKGROUND_COLOR,\n        type: 'color',\n        group: 'tree',\n        presets: ['main', 'content'],\n      },\n      {\n        id: 'active.font.color',\n        label: 'Active Font Color',\n        path: TREE_THEME_PATHS.ACTIVE_FONT_COLOR,\n        type: 'color',\n        group: 'tree',\n        presets: ['main', 'content', 'header'],\n        customColors: { 'Primary Contrast': 'var(--color-primary-contrast)' },\n      },\n      {\n        id: 'active.background.color',\n        label: 'Active Background',\n        path: TREE_THEME_PATHS.ACTIVE_BACKGROUND_COLOR,\n        type: 'color',\n        group: 'tree',\n        presets: ['main', 'content'],\n        customColors: {\n          Primary: this.themeColorService.computeColor(\n            'var(--color-primary-color)',\n          ),\n        },\n      },\n    ];\n  }\n\n  getFields(entity: ThemeResponse): FormFieldConfig[] {\n    return this.createFormFieldsFromConfig(\n      entity,\n      this.getFieldConfigurations(),\n    );\n  }\n\n  override getUpdateMethod(): (\n    id: string,\n    data: Partial<ThemeResponse>,\n  ) => Observable<ThemeResponse> {\n    return (\n      this.operationRegistry.getOperation<\n        ThemeResponse,\n        ThemeCreateRequest,\n        ThemeResponse,\n        'update'\n      >('theme', 'update') ??\n      ((id) =>\n        this.entitiesService.updateTheme(id, {\n          settings: {\n            tree: this.formChanges,\n          },\n        }))\n    );\n  }\n}\n","<div class=\"card pt-2\">\n  <div class=\"mb-4 p-2 flex justify-start items-center\">\n    <fa-icon\n      [icon]=\"faFill\"\n      class=\"!text-[2.5rem]\"\n      [ngClass]=\"{ 'icon-primary': isFormEditable() }\"\n    ></fa-icon>\n\n    <div class=\"pl-6 flex-1\">\n      <div class=\"flex justify-between items-center\">\n        <h2 class=\"text-xl font-semibold m-0\">Tree</h2>\n        @if (!isFormEditable() && !createMode()) {\n          <div class=\"icon-light\">\n            <span\n              class=\"pi pi-pen-to-square action hover !text-2xl\"\n              [attr.aria-label]=\"'Edit theme tree details'\"\n              (click)=\"onEdit()\"\n              (keydown.enter)=\"onEdit()\"\n            ></span>\n          </div>\n        }\n      </div>\n      <span>{{ description }}</span>\n    </div>\n  </div>\n\n  @if (isFormEditable() || (createMode() && formFields.length)) {\n    <app-dynamic-form\n      [fields]=\"formFields\"\n      [actions]=\"actions\"\n      [hideActions]=\"createMode()\"\n      (formSubmit)=\"onSubmit($event)\"\n      (formValidityChange)=\"onFormValidityChange($event)\"\n      (fieldValueChange)=\"onFieldValueChange($event)\"\n    >\n    </app-dynamic-form>\n  }\n\n  @if (!isFormEditable() && !createMode()) {\n    <app-grid\n      [data]=\"themeDetails()\"\n      [columns]=\"columns\"\n      [showGridLines]=\"false\"\n      [hideHeader]=\"true\"\n      tableStyleClass=\"info-display !w-auto\"\n    ></app-grid>\n  }\n</div>\n\n<ng-template #valueTemplate let-rowData>\n  <app-theme-value-display [rowData]=\"rowData\" [group]=\"group\">\n  </app-theme-value-display>\n</ng-template>\n","import {\n  Component,\n  computed,\n  TemplateRef,\n  ViewChild,\n  OnInit,\n} from '@angular/core';\nimport {\n  ThemeSettingsSectionBase,\n  ThemeFieldConfig,\n} from '../../base/theme-settings-section-base';\nimport { ThemeCreateRequest, ThemeResponse } from '../../../../../api';\nimport { FormFieldConfig } from '../../../../../shared/models';\nimport { DynamicFormComponent } from '../../../../../shared/components/forms/dynamic-form/dynamic-form.component';\nimport { FontAwesomeModule } from '@fortawesome/angular-fontawesome';\nimport { CommonModule } from '@angular/common';\nimport { Observable } from 'rxjs';\nimport { isDefined } from '../../../../../shared/utils';\nimport { GridComponent } from '../../../../../shared/components/grid/grid.component';\nimport { ThemeValueDisplayComponent } from '../theme-value-display/theme-value-display.component';\n\n// Constants for theme property paths\nconst LIST_THEME_PATHS = {\n  BACKGROUND_COLOR: ['list', 'background', 'color'],\n  BORDER_COLOR: ['list', 'border', 'color'],\n  ACTIVE_FONT_COLOR: ['list', 'active', 'font', 'color'],\n  ACTIVE_BACKGROUND_COLOR: ['list', 'active', 'background', 'color'],\n} as const;\n\n@Component({\n  selector: 'app-theme-settings-list-section',\n  imports: [\n    DynamicFormComponent,\n    FontAwesomeModule,\n    CommonModule,\n    GridComponent,\n    ThemeValueDisplayComponent,\n  ],\n  templateUrl: './theme-settings-list-section.component.html',\n  styleUrl: './theme-settings-list-section.component.scss',\n})\nexport class ThemeSettingsListSectionComponent\n  extends ThemeSettingsSectionBase\n  implements OnInit\n{\n  @ViewChild('valueTemplate', { static: true })\n  valueTemplate!: TemplateRef<unknown>;\n  readonly themeDetails = computed(() => {\n    const themeDetails = this.entity();\n    if (!isDefined(themeDetails)) return [];\n\n    const themeSettings = this.themeEngine.themeSettingsMergedWithDefault(\n      themeDetails?.settings ?? {},\n    );\n\n    const detailConfigs = this.createThemeDetailsFromConfig(\n      this.getFieldConfigurations(),\n    );\n    return detailConfigs.map((config) => ({\n      key: config.key,\n      value: this.formatThemeValue(themeSettings, config),\n    }));\n  });\n\n  constructor() {\n    super('list');\n  }\n\n  ngOnInit(): void {\n    this.initializeColumns();\n  }\n\n  private initializeColumns(): void {\n    this.columns = [\n      { field: 'key', header: '', transform: 'uppercase' },\n      {\n        field: 'value',\n        header: '',\n        cellTemplate: this.valueTemplate,\n      },\n    ];\n  }\n\n  protected getFieldConfigurations(): ThemeFieldConfig[] {\n    return [\n      {\n        id: 'background.color',\n        label: 'Background Color',\n        path: LIST_THEME_PATHS.BACKGROUND_COLOR,\n        type: 'color',\n        group: 'list',\n        presets: ['content'],\n      },\n      {\n        id: 'border.color',\n        label: 'Border Color',\n        path: LIST_THEME_PATHS.BORDER_COLOR,\n        type: 'color',\n        group: 'list',\n        presets: ['main', 'content'],\n      },\n      {\n        id: 'active.font.color',\n        label: 'Active Font Color',\n        path: LIST_THEME_PATHS.ACTIVE_FONT_COLOR,\n        type: 'color',\n        group: 'list',\n        presets: ['main', 'content', 'header'],\n      },\n      {\n        id: 'active.background.color',\n        label: 'Active Background',\n        path: LIST_THEME_PATHS.ACTIVE_BACKGROUND_COLOR,\n        type: 'color',\n        group: 'list',\n        presets: ['list', 'content'],\n      },\n    ];\n  }\n\n  getFields(entity: ThemeResponse): FormFieldConfig[] {\n    return this.createFormFieldsFromConfig(\n      entity,\n      this.getFieldConfigurations(),\n    );\n  }\n\n  override getUpdateMethod(): (\n    id: string,\n    data: Partial<ThemeResponse>,\n  ) => Observable<ThemeResponse> {\n    return (\n      this.operationRegistry.getOperation<\n        ThemeResponse,\n        ThemeCreateRequest,\n        ThemeResponse,\n        'update'\n      >('theme', 'update') ??\n      ((id) =>\n        this.entitiesService.updateTheme(id, {\n          settings: {\n            list: this.formChanges,\n          },\n        }))\n    );\n  }\n}\n","<div class=\"card pt-2\">\n  <div class=\"mb-4 p-2 flex justify-start items-center\">\n    <fa-icon\n      [icon]=\"faFill\"\n      class=\"!text-[2.5rem]\"\n      [ngClass]=\"{ 'icon-primary': isFormEditable() }\"\n    ></fa-icon>\n\n    <div class=\"pl-6 flex-1\">\n      <div class=\"flex justify-between items-center\">\n        <h2 class=\"text-xl font-semibold m-0\">List</h2>\n        @if (!isFormEditable() && !createMode()) {\n          <div class=\"icon-light\">\n            <span\n              class=\"pi pi-pen-to-square action hover !text-2xl\"\n              [attr.aria-label]=\"'Edit theme list details'\"\n              (click)=\"onEdit()\"\n              (keydown.enter)=\"onEdit()\"\n            ></span>\n          </div>\n        }\n      </div>\n      <span>{{ description }}</span>\n    </div>\n  </div>\n\n  @if (isFormEditable() || (createMode() && formFields.length)) {\n    <app-dynamic-form\n      [fields]=\"formFields\"\n      [actions]=\"actions\"\n      [hideActions]=\"createMode()\"\n      (formSubmit)=\"onSubmit($event)\"\n      (formValidityChange)=\"onFormValidityChange($event)\"\n      (fieldValueChange)=\"onFieldValueChange($event)\"\n    >\n    </app-dynamic-form>\n  }\n\n  @if (!isFormEditable() && !createMode()) {\n    <app-grid\n      [data]=\"themeDetails()\"\n      [columns]=\"columns\"\n      [showGridLines]=\"false\"\n      [hideHeader]=\"true\"\n      tableStyleClass=\"info-display !w-auto\"\n    ></app-grid>\n  }\n</div>\n\n<ng-template #valueTemplate let-rowData>\n  <app-theme-value-display [rowData]=\"rowData\" [group]=\"group\">\n  </app-theme-value-display>\n</ng-template>\n","import {\n  Component,\n  computed,\n  TemplateRef,\n  ViewChild,\n  OnInit,\n} from '@angular/core';\nimport {\n  ThemeSettingsSectionBase,\n  ThemeFieldConfig,\n} from '../../base/theme-settings-section-base';\nimport { ThemeCreateRequest, ThemeResponse } from '../../../../../api';\nimport { FormFieldConfig } from '../../../../../shared/models';\nimport { DynamicFormComponent } from '../../../../../shared/components/forms/dynamic-form/dynamic-form.component';\nimport { FontAwesomeModule } from '@fortawesome/angular-fontawesome';\nimport { CommonModule } from '@angular/common';\nimport { Observable } from 'rxjs';\nimport { isDefined } from '../../../../../shared/utils';\nimport { GridComponent } from '../../../../../shared/components/grid/grid.component';\nimport { ThemeValueDisplayComponent } from '../theme-value-display/theme-value-display.component';\n\n// Constants for theme property paths\nconst FEED_THEME_PATHS = {\n  BACKGROUND_COLOR: ['feed', 'background', 'color'],\n  BORDER_COLOR: ['feed', 'border', 'color'],\n  ACTIVE_FONT_COLOR: ['feed', 'active', 'font', 'color'],\n  ACTIVE_BACKGROUND_COLOR: ['feed', 'active', 'background', 'color'],\n} as const;\n\n@Component({\n  selector: 'app-theme-settings-feed-section',\n  imports: [\n    DynamicFormComponent,\n    FontAwesomeModule,\n    CommonModule,\n    GridComponent,\n    ThemeValueDisplayComponent,\n  ],\n  templateUrl: './theme-settings-feed-section.component.html',\n  styleUrl: './theme-settings-feed-section.component.scss',\n})\nexport class ThemeSettingsFeedSectionComponent\n  extends ThemeSettingsSectionBase\n  implements OnInit\n{\n  @ViewChild('valueTemplate', { static: true })\n  valueTemplate!: TemplateRef<unknown>;\n  readonly themeDetails = computed(() => {\n    const themeDetails = this.entity();\n    if (!isDefined(themeDetails)) return [];\n\n    const themeSettings = this.themeEngine.themeSettingsMergedWithDefault(\n      themeDetails?.settings ?? {},\n    );\n\n    const detailConfigs = this.createThemeDetailsFromConfig(\n      this.getFieldConfigurations(),\n    );\n    return detailConfigs.map((config) => ({\n      key: config.key,\n      value: this.formatThemeValue(themeSettings, config),\n    }));\n  });\n\n  constructor() {\n    super('feed');\n  }\n\n  ngOnInit(): void {\n    this.initializeColumns();\n  }\n\n  private initializeColumns(): void {\n    this.columns = [\n      { field: 'key', header: '', transform: 'uppercase' },\n      {\n        field: 'value',\n        header: '',\n        cellTemplate: this.valueTemplate,\n      },\n    ];\n  }\n\n  protected getFieldConfigurations(): ThemeFieldConfig[] {\n    return [\n      {\n        id: 'background.color',\n        label: 'Background Color',\n        path: FEED_THEME_PATHS.BACKGROUND_COLOR,\n        type: 'color',\n        group: 'feed',\n        presets: ['content'],\n      },\n      {\n        id: 'border.color',\n        label: 'Border Color',\n        path: FEED_THEME_PATHS.BORDER_COLOR,\n        type: 'color',\n        group: 'feed',\n        presets: ['main', 'content'],\n      },\n      {\n        id: 'active.font.color',\n        label: 'Active Font Color',\n        path: FEED_THEME_PATHS.ACTIVE_FONT_COLOR,\n        type: 'color',\n        group: 'feed',\n        presets: ['main', 'content', 'header'],\n      },\n      {\n        id: 'active.background.color',\n        label: 'Active Background',\n        path: FEED_THEME_PATHS.ACTIVE_BACKGROUND_COLOR,\n        type: 'color',\n        group: 'feed',\n        presets: ['feed', 'content'],\n      },\n    ];\n  }\n\n  getFields(entity: ThemeResponse): FormFieldConfig[] {\n    return this.createFormFieldsFromConfig(\n      entity,\n      this.getFieldConfigurations(),\n    );\n  }\n\n  override getUpdateMethod(): (\n    id: string,\n    data: Partial<ThemeResponse>,\n  ) => Observable<ThemeResponse> {\n    return (\n      this.operationRegistry.getOperation<\n        ThemeResponse,\n        ThemeCreateRequest,\n        ThemeResponse,\n        'update'\n      >('theme', 'update') ??\n      ((id) =>\n        this.entitiesService.updateTheme(id, {\n          settings: {\n            feed: this.formChanges,\n          },\n        }))\n    );\n  }\n}\n","<div class=\"card pt-2\">\n  <div class=\"mb-4 p-2 flex justify-start items-center\">\n    <fa-icon\n      [icon]=\"faFill\"\n      class=\"!text-[2.5rem]\"\n      [ngClass]=\"{ 'icon-primary': isFormEditable() }\"\n    ></fa-icon>\n\n    <div class=\"pl-6 flex-1\">\n      <div class=\"flex justify-between items-center\">\n        <h2 class=\"text-xl font-semibold m-0\">Feed</h2>\n        @if (!isFormEditable() && !createMode()) {\n          <div class=\"icon-light\">\n            <span\n              class=\"pi pi-pen-to-square action hover !text-2xl\"\n              [attr.aria-label]=\"'Edit theme feed details'\"\n              (click)=\"onEdit()\"\n              (keydown.enter)=\"onEdit()\"\n            ></span>\n          </div>\n        }\n      </div>\n      <span>{{ description }}</span>\n    </div>\n  </div>\n\n  @if (isFormEditable() || (createMode() && formFields.length)) {\n    <app-dynamic-form\n      [fields]=\"formFields\"\n      [actions]=\"actions\"\n      [hideActions]=\"createMode()\"\n      (formSubmit)=\"onSubmit($event)\"\n      (formValidityChange)=\"onFormValidityChange($event)\"\n      (fieldValueChange)=\"onFieldValueChange($event)\"\n    >\n    </app-dynamic-form>\n  }\n\n  @if (!isFormEditable() && !createMode()) {\n    <app-grid\n      [data]=\"themeDetails()\"\n      [columns]=\"columns\"\n      [showGridLines]=\"false\"\n      [hideHeader]=\"true\"\n      tableStyleClass=\"info-display !w-auto\"\n    ></app-grid>\n  }\n</div>\n\n<ng-template #valueTemplate let-rowData>\n  <app-theme-value-display [rowData]=\"rowData\" [group]=\"group\">\n  </app-theme-value-display>\n</ng-template>\n","import {\n  Component,\n  computed,\n  TemplateRef,\n  ViewChild,\n  OnInit,\n  inject,\n} from '@angular/core';\nimport {\n  ThemeSettingsSectionBase,\n  ThemeFieldConfig,\n} from '../../base/theme-settings-section-base';\nimport { ThemeCreateRequest, ThemeResponse } from '../../../../../api';\nimport { FormFieldConfig } from '../../../../../shared/models';\nimport { DynamicFormComponent } from '../../../../../shared/components/forms/dynamic-form/dynamic-form.component';\nimport { FontAwesomeModule } from '@fortawesome/angular-fontawesome';\nimport { CommonModule } from '@angular/common';\nimport { Observable } from 'rxjs';\nimport { isDefined } from '../../../../../shared/utils';\nimport { GridComponent } from '../../../../../shared/components/grid/grid.component';\nimport { ThemeValueDisplayComponent } from '../theme-value-display/theme-value-display.component';\nimport { ThemeColorService } from '../../../services/theme-color.service';\n\n// Constants for theme property paths\nconst GRAPH_THEME_PATHS = {\n  LABEL_FONT_FAMILY: ['graph', 'label', 'font', 'family'],\n  LABEL_FONT_SIZE: ['graph', 'label', 'font', 'size'],\n  LABEL_FONT_COLOR: ['graph', 'label', 'font', 'color'],\n  PALETTE: ['graph', 'palette'],\n} as const;\n\n@Component({\n  selector: 'app-theme-settings-graph-section',\n  imports: [\n    DynamicFormComponent,\n    FontAwesomeModule,\n    CommonModule,\n    GridComponent,\n    ThemeValueDisplayComponent,\n  ],\n  templateUrl: './theme-settings-graph-section.component.html',\n  styleUrl: './theme-settings-graph-section.component.scss',\n})\nexport class ThemeSettingsGraphSectionComponent\n  extends ThemeSettingsSectionBase\n  implements OnInit\n{\n  @ViewChild('valueTemplate', { static: true })\n  valueTemplate!: TemplateRef<unknown>;\n  private readonly themeColorService = inject(ThemeColorService);\n  readonly themeDetails = computed(() => {\n    const themeDetails = this.entity();\n    if (!isDefined(themeDetails)) return [];\n\n    const themeSettings = this.themeEngine.themeSettingsMergedWithDefault(\n      themeDetails?.settings ?? {},\n    );\n\n    const detailConfigs = this.createThemeDetailsFromConfig(\n      this.getFieldConfigurations(),\n    );\n    return detailConfigs.map((config) => ({\n      key: config.key,\n      value: this.formatThemeValue(themeSettings, config),\n    }));\n  });\n\n  constructor() {\n    super('graph');\n  }\n\n  ngOnInit(): void {\n    this.initializeColumns();\n  }\n\n  private initializeColumns(): void {\n    this.columns = [\n      { field: 'key', header: '', transform: 'uppercase' },\n      {\n        field: 'value',\n        header: '',\n        cellTemplate: this.valueTemplate,\n      },\n    ];\n  }\n\n  protected getFieldConfigurations(): ThemeFieldConfig[] {\n    return [\n      {\n        id: 'label.font.family',\n        label: 'Label Font Family',\n        path: GRAPH_THEME_PATHS.LABEL_FONT_FAMILY,\n        type: 'font-family',\n        presets: ['main', 'content', 'header'],\n      },\n      {\n        id: 'label.font.size',\n        label: 'Label Font Size',\n        path: GRAPH_THEME_PATHS.LABEL_FONT_SIZE,\n        type: 'size',\n      },\n      {\n        id: 'label.font.color',\n        label: 'Label Font Color',\n        path: GRAPH_THEME_PATHS.LABEL_FONT_COLOR,\n        type: 'color',\n        group: 'graph',\n        presets: ['main', 'content', 'header'],\n      },\n      {\n        id: 'palette',\n        label: 'Palette',\n        path: GRAPH_THEME_PATHS.PALETTE,\n        type: 'dropdown',\n        group: 'graph',\n        options: [\n          {\n            label: 'Default',\n            value: 'default',\n          },\n          {\n            label: 'Dark Theme',\n            value: 'nightrider',\n          },\n        ],\n      },\n    ];\n  }\n\n  getFields(entity: ThemeResponse): FormFieldConfig[] {\n    return this.createFormFieldsFromConfig(\n      entity,\n      this.getFieldConfigurations(),\n    );\n  }\n\n  override getUpdateMethod(): (\n    id: string,\n    data: Partial<ThemeResponse>,\n  ) => Observable<ThemeResponse> {\n    return (\n      this.operationRegistry.getOperation<\n        ThemeResponse,\n        ThemeCreateRequest,\n        ThemeResponse,\n        'update'\n      >('theme', 'update') ??\n      ((id) =>\n        this.entitiesService.updateTheme(id, {\n          settings: {\n            graph: this.formChanges,\n          },\n        }))\n    );\n  }\n}\n","<div class=\"card pt-2\">\n  <div class=\"mb-4 p-2 flex justify-start items-center\">\n    <fa-icon\n      [icon]=\"faFill\"\n      class=\"!text-[2.5rem]\"\n      [ngClass]=\"{ 'icon-primary': isFormEditable() }\"\n    ></fa-icon>\n\n    <div class=\"pl-6 flex-1\">\n      <div class=\"flex justify-between items-center\">\n        <h2 class=\"text-xl font-semibold m-0\">Graph</h2>\n        @if (!isFormEditable() && !createMode()) {\n          <div class=\"icon-light\">\n            <span\n              class=\"pi pi-pen-to-square action hover !text-2xl\"\n              [attr.aria-label]=\"'Edit theme graph details'\"\n              (click)=\"onEdit()\"\n              (keydown.enter)=\"onEdit()\"\n            ></span>\n          </div>\n        }\n      </div>\n      <span>{{ description }}</span>\n    </div>\n  </div>\n\n  @if (isFormEditable() || (createMode() && formFields.length)) {\n    <app-dynamic-form\n      [fields]=\"formFields\"\n      [actions]=\"actions\"\n      [hideActions]=\"createMode()\"\n      (formSubmit)=\"onSubmit($event)\"\n      (formValidityChange)=\"onFormValidityChange($event)\"\n      (fieldValueChange)=\"onFieldValueChange($event)\"\n    >\n    </app-dynamic-form>\n  }\n\n  @if (!isFormEditable() && !createMode()) {\n    <app-grid\n      [data]=\"themeDetails()\"\n      [columns]=\"columns\"\n      [showGridLines]=\"false\"\n      [hideHeader]=\"true\"\n      tableStyleClass=\"info-display !w-auto\"\n    ></app-grid>\n  }\n</div>\n\n<ng-template #valueTemplate let-rowData>\n  <app-theme-value-display [rowData]=\"rowData\" [group]=\"group\">\n  </app-theme-value-display>\n</ng-template>\n","import {\n  Component,\n  computed,\n  TemplateRef,\n  ViewChild,\n  OnInit,\n} from '@angular/core';\nimport {\n  ThemeSettingsSectionBase,\n  ThemeFieldConfig,\n} from '../../base/theme-settings-section-base';\nimport { ThemeCreateRequest, ThemeResponse } from '../../../../../api';\nimport { FormFieldConfig } from '../../../../../shared/models';\nimport { DynamicFormComponent } from '../../../../../shared/components/forms/dynamic-form/dynamic-form.component';\nimport { FontAwesomeModule } from '@fortawesome/angular-fontawesome';\nimport { CommonModule } from '@angular/common';\nimport { Observable } from 'rxjs';\nimport { isDefined } from '../../../../../shared/utils';\nimport { GridComponent } from '../../../../../shared/components/grid/grid.component';\nimport { ThemeValueDisplayComponent } from '../theme-value-display/theme-value-display.component';\n\n// Constants for theme property paths\nconst LOADER_THEME_PATHS = {\n  STYLE: ['loader', 'style'],\n  FONT_COLOR: ['loader', 'font', 'color'],\n} as const;\n\n@Component({\n  selector: 'app-theme-settings-loader-section',\n  imports: [\n    DynamicFormComponent,\n    FontAwesomeModule,\n    CommonModule,\n    GridComponent,\n    ThemeValueDisplayComponent,\n  ],\n  templateUrl: './theme-settings-loader-section.component.html',\n  styleUrl: './theme-settings-loader-section.component.scss',\n})\nexport class ThemeSettingsLoaderSectionComponent\n  extends ThemeSettingsSectionBase\n  implements OnInit\n{\n  @ViewChild('valueTemplate', { static: true })\n  valueTemplate!: TemplateRef<unknown>;\n\n  readonly themeDetails = computed(() => {\n    const themeDetails = this.entity();\n    if (!isDefined(themeDetails)) return [];\n\n    const themeSettings = this.themeEngine.themeSettingsMergedWithDefault(\n      themeDetails?.settings ?? {},\n    );\n\n    const detailConfigs = this.createThemeDetailsFromConfig(\n      this.getFieldConfigurations(),\n    );\n    return detailConfigs.map((config) => ({\n      key: config.key,\n      value: this.formatThemeValue(themeSettings, config),\n    }));\n  });\n\n  constructor() {\n    super('loader');\n  }\n\n  ngOnInit(): void {\n    this.initializeColumns();\n  }\n\n  private initializeColumns(): void {\n    this.columns = [\n      { field: 'key', header: '', transform: 'uppercase' },\n      {\n        field: 'value',\n        header: '',\n        cellTemplate: this.valueTemplate,\n      },\n    ];\n  }\n\n  protected getFieldConfigurations(): ThemeFieldConfig[] {\n    return [\n      {\n        id: 'style',\n        label: 'Loader Style',\n        path: LOADER_THEME_PATHS.STYLE,\n        type: 'dropdown',\n        options: [\n          { label: 'Pulse', value: 'pulse' },\n          { label: 'Rainbow', value: 'rainbow' },\n          { label: 'Uneven Lines', value: 'uneven-lines' },\n          { label: 'Spinner', value: 'spinner' },\n        ],\n      },\n      {\n        id: 'font.color',\n        label: 'Font Color',\n        path: LOADER_THEME_PATHS.FONT_COLOR,\n        type: 'color',\n        group: 'loader',\n      },\n    ];\n  }\n\n  getFields(entity: ThemeResponse): FormFieldConfig[] {\n    return this.createFormFieldsFromConfig(\n      entity,\n      this.getFieldConfigurations(),\n    );\n  }\n\n  override getUpdateMethod(): (\n    id: string,\n    data: Partial<ThemeResponse>,\n  ) => Observable<ThemeResponse> {\n    return (\n      this.operationRegistry.getOperation<\n        ThemeResponse,\n        ThemeCreateRequest,\n        ThemeResponse,\n        'update'\n      >('theme', 'update') ??\n      ((id) =>\n        this.entitiesService.updateTheme(id, {\n          settings: {\n            loader: this.formChanges,\n          },\n        }))\n    );\n  }\n}\n","<div class=\"card pt-2\">\n  <div class=\"mb-4 p-2 flex justify-start items-center\">\n    <fa-icon\n      [icon]=\"faFill\"\n      class=\"!text-[2.5rem]\"\n      [ngClass]=\"{ 'icon-primary': isFormEditable() }\"\n    ></fa-icon>\n\n    <div class=\"pl-6 flex-1\">\n      <div class=\"flex justify-between items-center\">\n        <h2 class=\"text-xl font-semibold m-0\">Loader</h2>\n        @if (!isFormEditable() && !createMode()) {\n          <div class=\"icon-light\">\n            <span\n              class=\"pi pi-pen-to-square action hover !text-2xl\"\n              [attr.aria-label]=\"'Edit theme loader details'\"\n              (click)=\"onEdit()\"\n              (keydown.enter)=\"onEdit()\"\n            ></span>\n          </div>\n        }\n      </div>\n      <span>{{ description }}</span>\n    </div>\n  </div>\n\n  @if (isFormEditable() || (createMode() && formFields.length)) {\n    <app-dynamic-form\n      [fields]=\"formFields\"\n      [actions]=\"actions\"\n      [hideActions]=\"createMode()\"\n      (formSubmit)=\"onSubmit($event)\"\n      (formValidityChange)=\"onFormValidityChange($event)\"\n      (fieldValueChange)=\"onFieldValueChange($event)\"\n    >\n    </app-dynamic-form>\n  }\n\n  @if (!isFormEditable() && !createMode()) {\n    <app-grid\n      [data]=\"themeDetails()\"\n      [columns]=\"columns\"\n      [showGridLines]=\"false\"\n      [hideHeader]=\"true\"\n      tableStyleClass=\"info-display !w-auto\"\n    ></app-grid>\n  }\n</div>\n\n<ng-template #valueTemplate let-rowData>\n  <app-theme-value-display [rowData]=\"rowData\" [group]=\"group\">\n  </app-theme-value-display>\n</ng-template>\n","import { Injectable } from '@angular/core';\nimport { AdminDetailSection } from '../models';\n\nimport { ThemeResponse } from '../../../api';\nimport { ThemeDetailsSectionComponent } from '../components/themes/theme-details-section/theme-details-section.component';\nimport { FeedSectionComponent } from '../components/shared/feed-section/feed-section.component';\nimport { ThemeSettingsMainSectionComponent } from '../components/themes/theme-settings-main-section/theme-settings-main-section.component';\nimport { ThemeSettingsColorSectionComponent } from '../components/themes/theme-settings-color-section/theme-settings-color-section.component';\nimport { ThemeSettingsContentSectionComponent } from '../components/themes/theme-settings-content-section/theme-settings-content-section.component';\nimport { ThemeSettingsNavigationSectionComponent } from '../components/themes/theme-settings-navigation-section/theme-settings-navigation-section.component';\nimport { ThemeSettingsTopNavigationSectionComponent } from '../components/themes/theme-settings-top-navigation-section/theme-settings-top-navigation-section.component';\nimport { ThemeSettingsHeaderSectionComponent } from '../components/themes/theme-settings-header-section/theme-settings-header-section.component';\nimport { ThemeSettingsFooterSectionComponent } from '../components/themes/theme-settings-footer-section/theme-settings-footer-section.component';\nimport { ThemeSettingsModalSectionComponent } from '../components/themes/theme-settings-modal-section/theme-settings-modal-section.component';\nimport { ThemeSettingsSidebarSectionComponent } from '../components/themes/theme-settings-sidebar-section/theme-settings-sidebar-section.component';\nimport { ThemeSettingsButtonSectionComponent } from '../components/themes/theme-settings-button-section/theme-settings-button-section.component';\nimport { ThemeSettingsInputSectionComponent } from '../components/themes/theme-settings-input-section/theme-settings-input-section.component';\nimport { ThemeSettingsTabSectionComponent } from '../components/themes/theme-settings-tab-section/theme-settings-tab-section.component';\nimport { ThemeSettingsAccordionSectionComponent } from '../components/themes/theme-settings-accordion-section/theme-settings-accordion-section.component';\nimport { ThemeSettingsTableSectionComponent } from '../components/themes/theme-settings-table-section/theme-settings-table-section.component';\nimport { ThemeSettingsTreeSectionComponent } from '../components/themes/theme-settings-tree-section/theme-settings-tree-section.component';\nimport { ThemeSettingsListSectionComponent } from '../components/themes/theme-settings-list-section/theme-settings-list-section.component';\nimport { ThemeSettingsFeedSectionComponent } from '../components/themes/theme-settings-feed-section/theme-settings-feed-section.component';\nimport { ThemeSettingsGraphSectionComponent } from '../components/themes/theme-settings-graph-section/theme-settings-graph-section.component';\nimport { ThemeSettingsLoaderSectionComponent } from '../components/themes/theme-settings-loader-section/theme-settings-loader-section.component';\n\n@Injectable({ providedIn: 'root' })\nexport class ThemeSectionConfigFactory {\n  /**\n   * Create sections for theme information\n   * @param theme The theme object to display in the section\n   * @returns An array of AdminDetailSection objects representing the theme information sections\n   */\n  createThemeInformationSections(\n    theme: ThemeResponse | null,\n  ): AdminDetailSection[] {\n    return [\n      {\n        id: 'theme-details',\n        title: 'Theme Details',\n        component: ThemeDetailsSectionComponent,\n        componentInputs: { entity: theme },\n        category: 'information',\n        order: 10,\n      },\n      {\n        id: 'theme-main-settings',\n        title: 'Main Settings',\n        component: ThemeSettingsMainSectionComponent,\n        componentInputs: { entity: theme },\n        category: 'information',\n        order: 20,\n      },\n      {\n        id: 'theme-colors',\n        title: 'Theme Colors',\n        component: ThemeSettingsColorSectionComponent,\n        componentInputs: { entity: theme },\n        category: 'information',\n        order: 30,\n      },\n      {\n        id: 'theme-content',\n        title: 'Theme Content',\n        component: ThemeSettingsContentSectionComponent,\n        componentInputs: { entity: theme },\n        category: 'information',\n        order: 40,\n      },\n      {\n        id: 'theme-navigation',\n        title: 'Theme Navigation',\n        component: ThemeSettingsNavigationSectionComponent,\n        componentInputs: { entity: theme },\n        category: 'information',\n        order: 50,\n      },\n      {\n        id: 'theme-top-navigation',\n        title: 'Theme Top Navigation',\n        component: ThemeSettingsTopNavigationSectionComponent,\n        componentInputs: { entity: theme },\n        category: 'information',\n        order: 60,\n      },\n      {\n        id: 'theme-header',\n        title: 'Theme Header',\n        component: ThemeSettingsHeaderSectionComponent,\n        componentInputs: { entity: theme },\n        category: 'information',\n        order: 70,\n      },\n      {\n        id: 'theme-footer',\n        title: 'Theme Footer',\n        component: ThemeSettingsFooterSectionComponent,\n        componentInputs: { entity: theme },\n        category: 'information',\n        order: 80,\n      },\n      {\n        id: 'theme-modal',\n        title: 'Theme Modal',\n        component: ThemeSettingsModalSectionComponent,\n        componentInputs: { entity: theme },\n        category: 'information',\n        order: 90,\n      },\n      {\n        id: 'theme-sidebar',\n        title: 'Theme Sidebar',\n        component: ThemeSettingsSidebarSectionComponent,\n        componentInputs: { entity: theme },\n        category: 'information',\n        order: 100,\n      },\n    ];\n  }\n\n  /**\n   * Create sections for theme changes\n   * @param theme The theme object to display in the section\n   * @returns An array of AdminDetailSection objects representing the theme changes sections\n   */\n  createChangesSection(theme: ThemeResponse | null): AdminDetailSection[] {\n    return [\n      {\n        id: 'theme-changes',\n        title: 'Changes',\n        component: FeedSectionComponent,\n        componentInputs: {\n          entity: theme,\n        },\n        category: 'feed',\n        order: 10,\n      },\n    ];\n  }\n\n  createControlsSection(theme: ThemeResponse | null): AdminDetailSection[] {\n    return [\n      {\n        id: 'theme-buttons',\n        title: 'Buttons',\n        component: ThemeSettingsButtonSectionComponent,\n        componentInputs: { entity: theme },\n        category: 'controls',\n        order: 10,\n      },\n      {\n        id: 'theme-inputs',\n        title: 'Inputs',\n        component: ThemeSettingsInputSectionComponent,\n        componentInputs: { entity: theme },\n        category: 'controls',\n        order: 20,\n      },\n      {\n        id: 'theme-tabs',\n        title: 'Tabs',\n        component: ThemeSettingsTabSectionComponent,\n        componentInputs: { entity: theme },\n        category: 'controls',\n        order: 30,\n      },\n      {\n        id: 'theme-accordion',\n        title: 'Accordion',\n        component: ThemeSettingsAccordionSectionComponent,\n        componentInputs: { entity: theme },\n        category: 'controls',\n        order: 40,\n      },\n      {\n        id: 'theme-tables',\n        title: 'Tables',\n        component: ThemeSettingsTableSectionComponent,\n        componentInputs: { entity: theme },\n        category: 'controls',\n        order: 50,\n      },\n      {\n        id: 'theme-trees',\n        title: 'Trees',\n        component: ThemeSettingsTreeSectionComponent,\n        componentInputs: { entity: theme },\n        category: 'controls',\n        order: 60,\n      },\n      {\n        id: 'theme-lists',\n        title: 'Lists',\n        component: ThemeSettingsListSectionComponent,\n        componentInputs: { entity: theme },\n        category: 'controls',\n        order: 70,\n      },\n      {\n        id: 'theme-feed',\n        title: 'Feed',\n        component: ThemeSettingsFeedSectionComponent,\n        componentInputs: {\n          entity: theme,\n        },\n        category: 'controls',\n        order: 80,\n      },\n      {\n        id: 'theme-graphs',\n        title: 'Graphs',\n        component: ThemeSettingsGraphSectionComponent,\n        componentInputs: { entity: theme },\n        category: 'controls',\n        order: 90,\n      },\n      {\n        id: 'theme-loaders',\n        title: 'Loaders',\n        component: ThemeSettingsLoaderSectionComponent,\n        componentInputs: { entity: theme },\n        category: 'controls',\n        order: 100,\n      },\n    ];\n  }\n\n  /**\n   * Create all theme sections in one call\n   * @param theme The theme object to display in the sections\n   * @returns An array of AdminDetailSection objects representing all theme sections\n   */\n  createAllThemeSections(theme: ThemeResponse | null): AdminDetailSection[] {\n    return [\n      ...this.createThemeInformationSections(theme),\n      ...this.createControlsSection(theme),\n      ...this.createChangesSection(theme),\n    ];\n  }\n}\n","import { Component, computed, effect, inject, input } from '@angular/core';\nimport { Validators } from '@angular/forms';\n\nimport { ButtonModule } from 'primeng/button';\nimport { InputTextModule } from 'primeng/inputtext';\n\nimport {\n  CostCentreCreateRequest,\n  EntitiesService,\n  CostCentreResponse,\n} from '../../../../../api';\nimport {\n  AssetGroupingItem,\n  createDropdownField,\n  createTextField,\n} from '../../../../../shared/models';\nimport { EntitySectionBaseComponent } from '../../base';\nimport { isDefined } from '../../../../../shared/utils';\nimport { DynamicFormComponent } from '../../../../../shared/components/forms/dynamic-form/dynamic-form.component';\nimport { GridComponent } from '../../../../../shared/components/grid/grid.component';\nimport { CommonModule } from '@angular/common';\nimport { EntityOperationRegistryService } from '../../../services/entity/entity-operation-registry.service';\nimport { Observable } from 'rxjs';\nimport { faSitemap } from '@fortawesome/free-solid-svg-icons';\nimport { FontAwesomeModule } from '@fortawesome/angular-fontawesome';\nimport { AssetGroupingService } from '../../../../../shared/services/asset-grouping.service';\n\ntype CostCentreEntity = CostCentreResponse | CostCentreCreateRequest;\n\n@Component({\n  selector: 'app-cost-centre-details-section',\n  imports: [\n    CommonModule,\n    ButtonModule,\n    InputTextModule,\n    GridComponent,\n    DynamicFormComponent,\n    FontAwesomeModule,\n  ],\n  templateUrl: './cost-centre-details-section.component.html',\n  styleUrl: './cost-centre-details-section.component.scss',\n})\nexport class CostCentreDetailsSectionComponent extends EntitySectionBaseComponent<CostCentreEntity> {\n  readonly ownerId = input<string | null>(null);\n  readonly entitiesService = inject(EntitiesService);\n  private readonly operationRegistry = inject(EntityOperationRegistryService);\n  private readonly assetGroupingService = inject(AssetGroupingService);\n\n  readonly costCentreDetails = computed(() => {\n    const costCentreDetails = this.entity();\n    if (!isDefined(costCentreDetails)) return [];\n\n    return [{ key: 'Name', value: costCentreDetails.name }];\n  });\n\n  faSitemap = faSitemap;\n  costCentreGroups: AssetGroupingItem[] = [];\n\n  constructor() {\n    super();\n\n    // Setup initial columns\n    this.columns = [\n      { field: 'key', header: '', transform: 'uppercase' },\n      { field: 'value', header: '' },\n    ];\n\n    effect(() => {\n      const ownerId = this.entity()?.owner?.id ?? this.ownerId();\n      if (isDefined(ownerId)) {\n        this.fetchCostCentres(ownerId)\n          .then((groups) => {\n            this.costCentreGroups = groups;\n            this.updateFormFields();\n          })\n          .catch(() => {});\n      }\n    });\n  }\n\n  private fetchCostCentres(ownerId: string): Promise<AssetGroupingItem[]> {\n    return this.assetGroupingService.getCostCentres(ownerId);\n  }\n\n  protected override updateFormFields(): void {\n    const costCentre = this.entity();\n    const parentOptions = [\n      ...this.costCentreGroups.map((group) => ({\n        label: group.name,\n        value: group.id,\n      })),\n    ];\n    this.formFields = [\n      createTextField('name', 'Name', costCentre?.name, {\n        name: 'name',\n        validations: [\n          {\n            name: 'required',\n            validator: Validators.required,\n            message: 'Name is required',\n          },\n        ],\n      }),\n    ];\n\n    if (this.createMode()) {\n      this.formFields.unshift(\n        createDropdownField(\n          'parent',\n          'Parent',\n          parentOptions,\n          costCentre?.parent?.id,\n          {\n            placeholder: 'Select Parent Group',\n            validations: [\n              {\n                name: 'required',\n                validator: Validators.required,\n                message: 'Parent group is required',\n              },\n            ],\n            props: {\n              appendTo: 'body',\n            },\n          },\n        ),\n      );\n    }\n  }\n\n  override getUpdateMethod(): (\n    id: string,\n    data: Partial<CostCentreEntity>,\n  ) => Observable<CostCentreResponse> {\n    return (\n      this.operationRegistry.getOperation<\n        CostCentreEntity,\n        CostCentreCreateRequest,\n        CostCentreResponse,\n        'update'\n      >('cost-centre', 'update') ??\n      ((id, data) => this.entitiesService.updateCostCentre(id, data))\n    );\n  }\n\n  protected override onFormValueChange(\n    formData: Record<string, string | number | object | null>,\n  ): void {\n    const transformedData = this.transformFormData(formData);\n\n    this.formValueChange.emit(transformedData);\n  }\n\n  protected override transformFormData(\n    formData: Record<string, string | number | object | null>,\n  ) {\n    const transformedData = { ...formData };\n    if (isDefined(transformedData['parent'])) {\n      const parentId = transformedData['parent'] as string;\n      const parent = this.costCentreGroups?.find(\n        (option) => option.id === parentId,\n      );\n      if (parent) {\n        transformedData['parent'] = {\n          id: parent.id,\n          name: parent.name,\n        };\n      } else if (parentId === 'root') {\n        transformedData['parent'] = null; // Set to null for root\n      }\n    }\n    return transformedData;\n  }\n}\n","<div class=\"card pt-2\">\n  <div class=\"mb-4 p-2 flex justify-start items-center\">\n    <fa-icon\n      [icon]=\"faSitemap\"\n      class=\"!text-[2.5rem]\"\n      [ngClass]=\"{ 'icon-primary': isFormEditable() }\"\n    ></fa-icon>\n\n    <div class=\"pl-6 flex-1\">\n      <div class=\"flex justify-between items-center\">\n        <h2 class=\"text-xl font-semibold m-0\">Cost Centre Details</h2>\n        @if (!isFormEditable() && !createMode()) {\n          <div class=\"icon-light\">\n            <span\n              class=\"pi pi-pen-to-square action hover !text-2xl\"\n              [attr.aria-label]=\"'Edit cost centre details'\"\n              (click)=\"onEdit()\"\n              (keydown.enter)=\"onEdit()\"\n            ></span>\n          </div>\n        }\n      </div>\n      <span\n        >The following information is required in order to identify your cost\n        centre.</span\n      >\n    </div>\n  </div>\n\n  @if (isFormEditable() || (createMode() && formFields.length)) {\n    <app-dynamic-form\n      [fields]=\"formFields\"\n      [actions]=\"actions\"\n      [hideActions]=\"createMode()\"\n      (formSubmit)=\"onSubmit($event)\"\n      (formValidityChange)=\"onFormValidityChange($event)\"\n      (formValueChange)=\"onFormValueChange($event)\"\n    >\n    </app-dynamic-form>\n  }\n\n  @if (!isFormEditable() && !createMode()) {\n    <app-grid\n      [data]=\"costCentreDetails()\"\n      [columns]=\"columns\"\n      [showGridLines]=\"false\"\n      [hideHeader]=\"true\"\n      tableStyleClass=\"info-display !w-auto\"\n    ></app-grid>\n  }\n</div>\n","import {\n  AfterViewInit,\n  Component,\n  computed,\n  effect,\n  inject,\n  input,\n  signal,\n  TemplateRef,\n  ViewChild,\n} from '@angular/core';\nimport { Validators } from '@angular/forms';\nimport { CommonModule } from '@angular/common';\n\nimport { v4 as uuidv4 } from 'uuid';\nimport { Observable } from 'rxjs';\n\nimport { Contact, EntitiesService } from '../../../../../api';\nimport { UtilityService } from '../../../../../core/services/utility.service';\nimport {\n  createTextField,\n  createDropdownField,\n  FormFieldConfig,\n  createModalListField,\n  ListFieldModalConfig,\n  BaseEntity,\n} from '../../../../../shared/models';\nimport {\n  isDefined,\n  mobileValidator,\n  phoneValidator,\n} from '../../../../../shared/utils';\nimport { EntitySectionBaseComponent } from '../../base';\nimport { ModalListFormComponent } from '../../../../../shared/components/forms/modal-list-form/modal-list-form.component';\nimport { DynamicFormComponent } from '../../../../../shared/components/forms/dynamic-form/dynamic-form.component';\nimport { GridComponent } from '../../../../../shared/components/grid/grid.component';\n\ninterface Entity extends BaseEntity {\n  contacts?: Contact[];\n}\n@Component({\n  selector: 'app-contacts-section',\n  imports: [CommonModule, GridComponent, DynamicFormComponent],\n  templateUrl: './contacts-section.component.html',\n  styleUrl: './contacts-section.component.scss',\n})\nexport class ContactsSectionComponent\n  extends EntitySectionBaseComponent<Entity>\n  implements AfterViewInit\n{\n  entityId = input.required<string>();\n  @ViewChild('iconTemplate', { static: true })\n  iconTemplate: TemplateRef<unknown> | undefined;\n  private readonly entitiesService = inject(EntitiesService);\n  readonly utilityService = inject(UtilityService);\n  protected readonly selectOptionsLoaded = signal<boolean>(false);\n\n  readonly contactDetails = computed(() => {\n    const contacts = this.entity()?.contacts;\n    if (!isDefined(contacts)) return [];\n\n    return contacts.flatMap((contact) => {\n      const details = [];\n      if (isDefined(contact.name)) details.push(`Name: ${contact.name}`);\n      if (isDefined(contact.emailAddress))\n        details.push(`Email: ${contact.emailAddress}`);\n      if (isDefined(contact.phoneMobile))\n        details.push(`Mobile: ${contact.phoneMobile}`);\n      if (isDefined(contact.phoneOffice))\n        details.push(`Office: ${contact.phoneOffice}`);\n      if (isDefined(contact.notes)) details.push(`Notes: ${contact.notes}`);\n\n      const additionalInfo =\n        details.length > 0 ? `\\n${details.join('\\n')}` : '';\n      return [{ key: '', value: additionalInfo }];\n    });\n  });\n\n  contacts: Contact[] = [];\n  showModal = false;\n  contactTypes = [\n    'owner',\n    'emergency',\n    'administrative',\n    'technical',\n    'operational',\n    'management',\n  ];\n\n  constructor() {\n    super();\n\n    // React to entity changes\n    effect(() => {\n      const contacts = this.entity()?.contacts;\n      if (contacts) {\n        this.contacts = contacts;\n        this.updateFormFields();\n      }\n    });\n  }\n\n  override ngAfterViewInit(): void {\n    super.ngAfterViewInit();\n    this.columns = [\n      {\n        field: 'key',\n        header: '',\n        transform: 'uppercase',\n        cellTemplate: this.iconTemplate,\n      },\n      { field: 'value', header: '', transform: 'whitespace-pre-line' },\n    ];\n  }\n\n  protected override updateFormFields(): void {\n    const contactsModalConfig: ListFieldModalConfig<Contact> = {\n      modalComponent: ModalListFormComponent,\n      modalTitle: 'Contact Details',\n      defaultItemProvider: () => ({\n        id: uuidv4(),\n        name: '',\n        type: 'owner',\n        emailAddress: '',\n        phoneMobile: '',\n        phoneOffice: '',\n        notes: '',\n      }),\n      listItemFormatter: (item: Contact) => {\n        const details = [];\n        if (isDefined(item.name)) details.push(`Name: ${item.name}`);\n        if (isDefined(item.emailAddress))\n          details.push(`Email: ${item.emailAddress}`);\n        if (isDefined(item.phoneMobile))\n          details.push(`Mobile: ${item.phoneMobile}`);\n        if (isDefined(item.phoneOffice))\n          details.push(`Office: ${item.phoneOffice}`);\n        if (isDefined(item.notes)) details.push(`Notes: ${item.notes}`);\n\n        const additionalInfo =\n          details.length > 0 ? `\\n${details.join('\\n')}` : '';\n\n        return {\n          id: item.id,\n          display: `${this.utilityService.toTitleCase(item.type)}: ${item.name}${additionalInfo}`,\n          icon: 'pi pi-id-card',\n        };\n      },\n      modalFields: (_item: Contact | undefined): FormFieldConfig[] => {\n        return [\n          createTextField('id', 'ID', _item?.id, {\n            name: 'id',\n            hidden: true,\n          }),\n          createTextField('name', 'Name', '', {\n            name: 'name',\n            validations: [\n              {\n                name: 'required',\n                validator: Validators.required,\n                message: 'Name is required',\n              },\n            ],\n          }),\n          createDropdownField(\n            'type',\n            'Type',\n            this.contactTypes.map((type) => ({\n              label: this.utilityService.toTitleCase(type),\n              value: type,\n            })),\n            '',\n            {\n              name: 'type',\n              props: {\n                appendTo: 'body',\n              },\n            },\n          ),\n          createTextField('emailAddress', 'Email', '', {\n            name: 'emailAddress',\n            validations: [\n              {\n                name: 'email',\n                validator: Validators.email,\n                message: 'Invalid email format',\n              },\n            ],\n          }),\n          createTextField('phoneMobile', 'Mobile', '', {\n            name: 'phoneMobile',\n            validations: [\n              {\n                name: 'mobile',\n                validator: mobileValidator(),\n                message: 'Invalid mobile number (10-15 digits required)',\n              },\n            ],\n          }),\n          createTextField('phoneOffice', 'Phone', '', {\n            name: 'phoneOffice',\n            validations: [\n              {\n                name: 'phone',\n                validator: phoneValidator(),\n                message: 'Invalid phone number (7-15 digits required)',\n              },\n            ],\n          }),\n          createTextField('notes', 'Notes', '', {\n            name: 'notes',\n          }),\n        ];\n      },\n      subHeader: 'Complete the following fields describing the contact.',\n    };\n\n    this.formFields = [\n      createModalListField<Contact>('contacts', 'Contacts', this.contacts, {\n        name: 'contacts',\n        props: {\n          modalConfig:\n            contactsModalConfig as unknown as ListFieldModalConfig<unknown>,\n        },\n      }),\n    ];\n  }\n\n  override getUpdateMethod(): (\n    id: string,\n    payload: Partial<Entity>,\n  ) => Observable<unknown> {\n    if (this.entityType() === 'cost-centre') {\n      return (id, payload) =>\n        this.entitiesService.updateCostCentre(id, payload);\n    }\n\n    throw new Error(`Update for '${this.entityType()}' not yet supported`);\n  }\n\n  protected override onFormValueChange(\n    formData: Record<string, string | number | object>,\n  ): void {\n    // Emit the transformed values\n    this.formValueChange.emit({\n      contacts: formData,\n    });\n  }\n\n  onClose() {\n    this.showModal = false;\n  }\n}\n","<div class=\"card pt-2\">\n  <div class=\"mb-4 p-2 flex justify-start items-center\">\n    <span\n      class=\"pi pi-id-card !text-[2.5rem]\"\n      [ngClass]=\"{ 'icon-primary': isFormEditable() }\"\n      [attr.aria-label]=\"'id card icon'\"\n    ></span>\n\n    <div class=\"pl-6 flex-1\">\n      <div class=\"flex justify-between items-center\">\n        <h2 class=\"text-xl font-semibold m-0\">Contact Details</h2>\n        @if (!isFormEditable() && !createMode()) {\n          <div class=\"icon-light\">\n            <span\n              class=\"pi pi-pen-to-square action hover !text-2xl\"\n              [attr.aria-label]=\"'Edit contact details'\"\n              (click)=\"onEdit()\"\n              (keydown.enter)=\"onEdit()\"\n            ></span>\n          </div>\n        }\n      </div>\n      <span>Specify contact information</span>\n    </div>\n  </div>\n\n  @if (isFormEditable() || (createMode() && formFields.length)) {\n    <app-dynamic-form\n      [fields]=\"formFields\"\n      [actions]=\"actions\"\n      [hideActions]=\"createMode()\"\n      (formSubmit)=\"onSubmit($event)\"\n      (formValidityChange)=\"onFormValidityChange($event)\"\n      (formValueChange)=\"onFormValueChange($event)\"\n    >\n    </app-dynamic-form>\n  }\n\n  @if (!isFormEditable() && !createMode()) {\n    <app-grid\n      [data]=\"contactDetails()\"\n      [columns]=\"columns\"\n      [showGridLines]=\"false\"\n      [hideHeader]=\"true\"\n      tableStyleClass=\"info-display !w-auto\"\n    ></app-grid>\n  }\n</div>\n","import {\n  Component,\n  effect,\n  inject,\n  input,\n  OnInit,\n  ChangeDetectorRef,\n} from '@angular/core';\nimport { GridComponent } from '../../../../../shared/components/grid/grid.component';\nimport { map, Observable } from 'rxjs';\nimport {\n  EntitiesService,\n  AssetResponse,\n  AssetListItem,\n} from '../../../../../api';\nimport {\n  BaseEntity,\n  createDropdownField,\n  FormAction,\n} from '../../../../../shared/models';\nimport {\n  isDefined,\n  isEmpty,\n  isNullOrUndefined,\n} from '../../../../../shared/utils';\nimport { EntitySectionBaseComponent } from '../../base';\nimport { UtilityService } from '../../../../../core/services/utility.service';\nimport { TableRowSelectEvent } from 'primeng/table';\nimport { DynamicFormModalComponent } from '../../../../../shared/components/forms/dynamic-form-modal/dynamic-form-modal.component';\nimport { FormGroup } from '@angular/forms';\nimport { TooltipModule } from 'primeng/tooltip';\nimport { DEFAULT_LIST_SIZE } from '../../../../../core/models';\nimport { RequestCacheService } from '../../../../../shared/services/request-cache.service';\nimport { ConfirmationService } from 'primeng/api';\n\n@Component({\n  selector: 'app-asset-list-section',\n  imports: [GridComponent, DynamicFormModalComponent, TooltipModule],\n  templateUrl: './asset-list-section.component.html',\n  styleUrl: './asset-list-section.component.scss',\n})\nexport class AssetListSectionComponent\n  extends EntitySectionBaseComponent<BaseEntity>\n  implements OnInit\n{\n  override readonly entity = input<BaseEntity | null>(null);\n  readonly groupId = input<string | null>(null);\n  readonly groupingEntityType = input<string>('Group');\n  readonly assetLinkField = input.required<string>();\n  readonly index = input<number | null>(null);\n  readonly formatter = input<((value: unknown) => string) | null>(null);\n  readonly getGroupingEntitiesFn =\n    input.required<\n      (ownerId: string) => Promise<{ id: string; name: string }[]>\n    >();\n  readonly getAvailableAssetsFn =\n    input.required<\n      (\n        ownerId: string,\n        currentEntityId?: string,\n      ) => Promise<{ id: string; name: string }[]>\n    >();\n\n  readonly entitiesService = inject(EntitiesService);\n  private readonly utilityService = inject(UtilityService);\n  private readonly cdr = inject(ChangeDetectorRef);\n  private readonly cacheService = inject(RequestCacheService);\n  private readonly arrayLinkFields = ['categories', 'groups'];\n  private readonly confirmationService = inject(ConfirmationService);\n\n  private handleFormSubmit(form: FormGroup | undefined): void {\n    switch (this.modalType) {\n      case 'move':\n        this.handleAssetMove(form);\n        break;\n      case 'add':\n        this.handleAssetAdd(form);\n        break;\n      case 'delete':\n        if (this.selectedAsset) {\n          this.handleAssetDelete(this.selectedAsset);\n        }\n    }\n  }\n\n  private handleAssetMove(form: FormGroup | undefined): void {\n    if (isNullOrUndefined(this.selectedAsset) || isNullOrUndefined(form))\n      return;\n    const currentAssetLinkField = this.assetLinkField();\n\n    const assetId = this.selectedAsset.id;\n    const selectedGroupId = form.get('group')?.value as string | undefined;\n\n    if (isNullOrUndefined(selectedGroupId) || isEmpty(selectedGroupId)) return;\n\n    const groupObject = this.groupingOptions.find(\n      (g) => g.id === selectedGroupId,\n    );\n\n    if (groupObject) {\n      if (this.arrayLinkFields.includes(currentAssetLinkField)) {\n        this.entitiesService.getAsset(assetId).subscribe((asset) => {\n          const existingItems =\n            (asset[currentAssetLinkField] as\n              | { id: string; name: string }[]\n              | undefined) ?? [];\n          const currentEntityId = this.entity()?.id;\n\n          // Remove current entity's link and add the new one\n          const newItems = existingItems.filter(\n            (item) => item.id !== currentEntityId,\n          );\n\n          if (!newItems.some((item) => item?.id === groupObject.id)) {\n            newItems.push(groupObject);\n          }\n\n          this.updateAsset(assetId, {\n            [currentAssetLinkField]: newItems,\n          } as Partial<AssetResponse>);\n        });\n      } else {\n        const payload = { [currentAssetLinkField]: groupObject };\n        this.updateAsset(assetId, payload as Partial<AssetResponse>);\n      }\n    } else {\n      console.error('Selected group not found in grouping options list.');\n    }\n  }\n\n  private handleAssetAdd(form: FormGroup | undefined): void {\n    if (isNullOrUndefined(form)) return;\n    const currentAssetLinkField = this.assetLinkField();\n\n    const assetIdToAdd = form.get('asset')?.value as string | undefined;\n    const currentEntity = this.entity();\n    const currentEntityObject = currentEntity\n      ? { id: currentEntity.id, name: currentEntity.name }\n      : null;\n\n    if (\n      !currentEntityObject ||\n      isNullOrUndefined(currentEntityObject.id) ||\n      isEmpty(currentEntityObject.id) ||\n      isNullOrUndefined(assetIdToAdd) ||\n      isEmpty(assetIdToAdd)\n    )\n      return;\n\n    if (this.arrayLinkFields.includes(currentAssetLinkField)) {\n      this.entitiesService.getAsset(assetIdToAdd).subscribe((asset) => {\n        const newEntity = currentEntityObject;\n        const existingItems =\n          (asset[currentAssetLinkField] as\n            | ({ id: string; name?: string | null } | null)[]\n            | undefined) ?? [];\n\n        const index = this.index() ?? 0;\n\n        const newItems = [...existingItems];\n        while (newItems.length <= index) {\n          newItems.push(null);\n        }\n        newItems[index] = newEntity;\n        this.updateAsset(assetIdToAdd, {\n          [currentAssetLinkField]: newItems,\n        } as Partial<AssetResponse>);\n      });\n    } else {\n      const payload = { [currentAssetLinkField]: currentEntityObject };\n      this.updateAsset(assetIdToAdd, payload as Partial<AssetResponse>);\n    }\n  }\n\n  private handleAssetDelete(asset: AssetListItem): void {\n    if (isNullOrUndefined(asset) || isEmpty(asset.id)) return;\n\n    const currentAssetLinkField = this.assetLinkField();\n    const currentEntityId = this.entity()?.id;\n    const index = this.index();\n\n    if (isNullOrUndefined(currentEntityId) || isEmpty(currentEntityId)) return;\n\n    if (this.arrayLinkFields.includes(currentAssetLinkField)) {\n      this.entitiesService.getAsset(asset.id).subscribe((assetDetails) => {\n        const existingItems =\n          (assetDetails[currentAssetLinkField] as\n            | ({ id: string; name: string } | null)[]\n            | undefined) ?? [];\n\n        const updatedItems = existingItems.map((item) =>\n          item?.id === currentEntityId ? null : item,\n        );\n\n        // If the item wasn't found in the array but we have a specific index, set that index to null\n        if (index !== null && index >= 0) {\n          const itemFound = existingItems.some(\n            (item) => item?.id === currentEntityId,\n          );\n          if (!itemFound) {\n            // Ensure array is large enough\n            while (updatedItems.length <= index) {\n              updatedItems.push(null);\n            }\n            updatedItems[index] = null;\n          }\n        }\n\n        this.updateAsset(asset.id, {\n          [currentAssetLinkField]: updatedItems,\n        } as Partial<AssetResponse>);\n      });\n    } else {\n      this.updateAsset(asset.id, {\n        [currentAssetLinkField]: null,\n      } as Partial<AssetResponse>);\n    }\n  }\n\n  override readonly actions: FormAction[] = [\n    {\n      label: 'Cancel',\n      action: () => {\n        this.onClose();\n      },\n      severity: 'secondary',\n    },\n    {\n      label: 'Ok',\n      action: (form) => {\n        this.handleFormSubmit(form);\n      },\n      severity: 'primary',\n      disabled: (form?: FormGroup) => isNullOrUndefined(form) || form.pristine,\n    },\n  ];\n  assetList: AssetListItem[] = [];\n  selectedAsset: AssetListItem | null = null;\n  groupingOptions: { id: string; name: string }[] = [];\n  availableAssetsForLinking: { id: string; name: string }[] = [];\n\n  modalType: 'move' | 'add' | 'delete' | null = null;\n  get isModalVisible(): boolean {\n    return this.modalType !== null;\n  }\n  get modalHeader(): string {\n    switch (this.modalType) {\n      case 'move':\n        return `Move To Different ${this.groupingEntityType()}`;\n      case 'add':\n        return 'Add Asset';\n      case 'delete':\n        return 'Delete Asset';\n      default:\n        return '';\n    }\n  }\n  constructor() {\n    super();\n\n    effect(() => {\n      const ownerId = this.entity()?.owner?.id;\n      const currentGroupIdRqlPath: string | null = this.groupId();\n      const currentEntityId = this.entity()?.id;\n\n      if (\n        isNullOrUndefined(ownerId) ||\n        isNullOrUndefined(currentGroupIdRqlPath) ||\n        isNullOrUndefined(currentEntityId)\n      ) {\n        this.assetList = [];\n        this.cdr.markForCheck();\n        return;\n      }\n      const filters = {\n        state: {\n          value: 'deleted',\n          operator: '!=',\n          wrap: true,\n        },\n        [currentGroupIdRqlPath]: {\n          value: currentEntityId,\n          operator: '=',\n        },\n      };\n      const rqlFilter = this.utilityService.constructRqlFilter(filters);\n      return this.cacheService\n        .getOrFetch(\n          `assets-${ownerId}-${rqlFilter}`,\n          () => this.fetchAssets(ownerId, `${rqlFilter}/*`),\n          3000,\n        )\n        .subscribe((assets) => {\n          this.assetList = assets;\n          this.cdr.markForCheck();\n        });\n    });\n  }\n\n  ngOnInit(): void {\n    const owner = this.entity()?.owner?.id;\n    const currentEntityId = this.entity()?.id;\n\n    this.columns = [\n      {\n        field: 'name',\n        header: 'Name',\n        filter: true,\n        filterType: 'text',\n        filterMatchMode: 'contains',\n        transform: 'text-ellipsis',\n      },\n      {\n        field: this.assetLinkField(), // Placeholder, actual field on AssetListItem might vary\n        header: this.groupingEntityType() ?? 'Group', // Dynamic header\n        valueGetter: (rowData: unknown) => {\n          const formatter = this.formatter();\n          if (formatter) {\n            return formatter(rowData);\n          }\n\n          const linkField = this.assetLinkField();\n          const asset = rowData as AssetListItem;\n          const index = this.index();\n\n          if (\n            isDefined(asset) &&\n            typeof asset === 'object' &&\n            Object.hasOwn(asset, linkField)\n          ) {\n            const linkedValue = asset[linkField];\n\n            if (\n              this.arrayLinkFields.includes(linkField) &&\n              Array.isArray(linkedValue) &&\n              index !== null\n            ) {\n              const linkedEntity = linkedValue[index] as { name?: string };\n              return linkedEntity?.name ?? '';\n            } else if (!this.arrayLinkFields.includes(linkField)) {\n              const linkedEntity = linkedValue as { name?: string };\n              return linkedEntity?.name ?? '';\n            }\n          }\n          return '';\n        },\n        filter: true,\n        filterType: 'multiselect',\n        filterMatchMode: 'in',\n        filterConfig: {\n          type: 'multiselect',\n          options: [], // These options could be dynamically populated based on groupingOptions\n        },\n      },\n    ];\n\n    if (typeof owner === 'string' && owner) {\n      // Ensure owner is a non-empty string\n      const groupEntitiesFn = this.getGroupingEntitiesFn();\n      // groupEntitiesFn is a required input, so it should exist.\n      groupEntitiesFn(owner)\n        .then((groups) => {\n          this.groupingOptions = groups;\n          if (this.modalType === 'move') this.updateFormFields();\n          this.cdr.markForCheck();\n        })\n        .catch((error) => {\n          console.error(\n            `Failed to load ${this.groupingEntityType()} groups:`,\n            error,\n          );\n          this.groupingOptions = [];\n          this.cdr.markForCheck();\n        });\n\n      const availableAssetsFn = this.getAvailableAssetsFn();\n      availableAssetsFn(owner, currentEntityId)\n        .then((assets) => {\n          this.availableAssetsForLinking = assets;\n          if (this.modalType === 'add') this.updateFormFields();\n          this.cdr.markForCheck();\n        })\n        .catch((error) => {\n          console.error('Failed to load available assets for linking:', error);\n          this.availableAssetsForLinking = [];\n          this.cdr.markForCheck();\n        });\n    } else {\n      console.warn(\n        'Owner ID is not available or invalid, cannot fetch grouping entities or available assets.',\n      );\n      this.groupingOptions = [];\n      this.availableAssetsForLinking = [];\n      this.cdr.markForCheck();\n    }\n  }\n\n  fetchAssets(\n    ownerId: string,\n    filter: string | undefined,\n  ): Observable<AssetListItem[]> {\n    return this.entitiesService\n\n      .listAssets(ownerId, 0, DEFAULT_LIST_SIZE, 'name', filter)\n      .pipe(map((response) => response.items));\n  }\n\n  protected override updateFormFields(): void {\n    const groupDropdownOptions = (this.groupingOptions ?? []).map((g) => ({\n      label: g.name,\n      value: g.id,\n    }));\n\n    const assetDropdownOptions = (this.availableAssetsForLinking ?? []).map(\n      (a) => ({\n        label: a.name,\n        value: a.id,\n      }),\n    );\n\n    switch (this.modalType) {\n      case 'move':\n        this.formFields = [\n          createDropdownField(\n            'group',\n            `${this.groupingEntityType()}`,\n            groupDropdownOptions,\n            '',\n            {\n              layout: 'horizontal',\n              labelWidth: '1/3',\n              name: 'group',\n              props: {\n                appendTo: 'body',\n              },\n            },\n          ),\n        ];\n        break;\n      case 'add':\n        this.formFields = [\n          createDropdownField('asset', `Asset`, assetDropdownOptions, '', {\n            layout: 'horizontal',\n            labelWidth: '1/3',\n            name: 'asset',\n            props: {\n              appendTo: 'body',\n            },\n          }),\n        ];\n        break;\n      default:\n        this.formFields = [];\n        break;\n    }\n    this.cdr.markForCheck();\n  }\n\n  updateAsset(id: string, data: Partial<AssetResponse>) {\n    this.entitiesService.updateAsset(id, data).subscribe({\n      next: () => {\n        this.broadcastService.broadcast('entity-updated', {\n          id,\n          changes: data,\n          entityType: 'asset',\n          parentId: this.entity()?.id,\n          groupingType: this.groupingEntityType(),\n        });\n        this.modalType = null;\n\n        const ownerId = this.entity()?.owner?.id;\n        const currentGroupIdRqlPath: string | null = this.groupId();\n        const currentEntityId = this.entity()?.id;\n\n        if (\n          typeof ownerId === 'string' &&\n          ownerId &&\n          typeof currentGroupIdRqlPath === 'string' &&\n          currentGroupIdRqlPath &&\n          typeof currentEntityId === 'string' &&\n          currentEntityId\n        ) {\n          const filters = {\n            state: { value: 'deleted', operator: '!=', wrap: true },\n            [currentGroupIdRqlPath]: { value: currentEntityId, operator: '=' },\n          };\n          const rqlFilter = this.utilityService.constructRqlFilter(filters);\n          this.fetchAssets(ownerId, `${rqlFilter}/*`).subscribe((assets) => {\n            this.assetList = assets;\n            this.cdr.markForCheck();\n          });\n        }\n\n        const availableAssetsFn = this.getAvailableAssetsFn();\n        if (typeof ownerId === 'string' && ownerId) {\n          // Check ownerId is a valid string\n          availableAssetsFn(ownerId, currentEntityId)\n            .then((assets) => {\n              this.availableAssetsForLinking = assets;\n              this.cdr.markForCheck();\n            })\n            .catch((error) => {\n              console.error(\n                'Error refreshing available assets after update:',\n                error,\n              );\n            });\n        }\n        this.cdr.markForCheck();\n      },\n      error: (err) => {\n        console.error('Failed to update asset:', err);\n        // Potentially show a user-facing error message\n      },\n    });\n  }\n\n  confirmAssetMove() {\n    this.modalType = 'move';\n    this.updateFormFields();\n  }\n\n  confirmAssetAdd() {\n    this.modalType = 'add';\n    this.updateFormFields();\n  }\n\n  confirmAssetDelete() {\n    this.confirmationService.confirm({\n      message: `Are you sure you want to delete the asset \"${this.selectedAsset?.name}\"?`,\n      header: 'Confirm Delete',\n      rejectButtonProps: {\n        label: 'No',\n        severity: 'secondary',\n      },\n      accept: () => {\n        this.handleAssetDelete(this.selectedAsset as AssetListItem);\n      },\n    });\n  }\n\n  onClose() {\n    this.modalType = null;\n    this.selectedAsset = null;\n    this.updateFormFields(); // Reset form fields by rebuilding them\n  }\n\n  handleRowSelect(event: TableRowSelectEvent): void {\n    if (isEmpty(event) || isEmpty(event.data)) return;\n\n    this.selectedAsset = event.data as AssetListItem;\n  }\n\n  handleRowUnselect(): void {\n    this.selectedAsset = null;\n  }\n}\n","<div class=\"flex flex-col h-full w-full overflow-hidden\">\n  <div class=\"p-4 content-header flex-none w-full\">\n    <div class=\"flex justify-end items-center\">\n      <div class=\"flex-none flex space-x-4\">\n        <button\n          type=\"button\"\n          class=\"pi pi-plus action\"\n          [class.hover]=\"true\"\n          pTooltip=\"Add\"\n          tooltipPosition=\"bottom\"\n          aria-label=\"Add new item\"\n          (click)=\"confirmAssetAdd()\"\n        ></button>\n        <button\n          type=\"button\"\n          class=\"pi pi-trash action\"\n          [class.hover]=\"!!selectedAsset\"\n          [class.disabled]=\"!selectedAsset\"\n          pTooltip=\"Delete Asset\"\n          tooltipPosition=\"bottom\"\n          aria-label=\"Delete selected item\"\n          [disabled]=\"!selectedAsset\"\n          (click)=\"confirmAssetDelete()\"\n        ></button>\n      </div>\n    </div>\n  </div>\n\n  <div class=\"flex-1 min-h-0 w-full overflow-hidden\">\n    <app-grid\n      [data]=\"assetList\"\n      [columns]=\"columns\"\n      [pagination]=\"true\"\n      [selectionMode]=\"'single'\"\n      (rowSelect)=\"handleRowSelect($event)\"\n      (rowUnselect)=\"handleRowUnselect()\"\n    ></app-grid>\n  </div>\n</div>\n\n<app-dynamic-form-modal\n  [visible]=\"isModalVisible\"\n  [header]=\"modalHeader\"\n  [fields]=\"formFields\"\n  [actions]=\"actions\"\n  [styleClass]=\"'w-[40rem]'\"\n  (modalClose)=\"onClose()\"\n  (formSubmit)=\"onSubmit($event)\"\n>\n</app-dynamic-form-modal>\n","import {\n  Component,\n  effect,\n  inject,\n  input,\n  OnInit,\n  ChangeDetectorRef,\n} from '@angular/core';\nimport { GridComponent } from '../../../../../shared/components/grid/grid.component';\nimport { map, Observable } from 'rxjs';\nimport {\n  EntitiesService,\n  UserResponse,\n  UserListItem,\n  AccountsService,\n} from '../../../../../api';\nimport {\n  BaseEntity,\n  createDropdownField,\n  FormAction,\n} from '../../../../../shared/models';\nimport {\n  isDefined,\n  isEmpty,\n  isNullOrUndefined,\n} from '../../../../../shared/utils';\nimport { EntitySectionBaseComponent } from '../../base';\nimport { UtilityService } from '../../../../../core/services/utility.service';\nimport { TableRowSelectEvent } from 'primeng/table';\nimport { DynamicFormModalComponent } from '../../../../../shared/components/forms/dynamic-form-modal/dynamic-form-modal.component';\nimport { FormGroup } from '@angular/forms';\nimport { TooltipModule } from 'primeng/tooltip';\nimport { DEFAULT_LIST_SIZE } from '../../../../../core/models';\nimport { RequestCacheService } from '../../../../../shared/services/request-cache.service';\n\n@Component({\n  selector: 'app-user-list-section',\n  imports: [GridComponent, DynamicFormModalComponent, TooltipModule],\n  templateUrl: './user-list-section.component.html',\n  styleUrl: './user-list-section.component.scss',\n})\nexport class UserListSectionComponent\n  extends EntitySectionBaseComponent<BaseEntity>\n  implements OnInit\n{\n  override readonly entity = input<BaseEntity | null>(null);\n  readonly groupId = input<string | null>(null);\n  readonly groupingEntityType = input<string>('Group');\n  readonly userLinkField = input.required<string>();\n  readonly getGroupingEntitiesFn =\n    input.required<\n      (ownerId: string) => Promise<{ id: string; name: string }[]>\n    >();\n  readonly getAvailableUsersFn =\n    input.required<\n      (\n        ownerId: string,\n        currentEntityId?: string,\n      ) => Promise<{ id: string; name: string }[]>\n    >();\n\n  readonly entitiesService = inject(EntitiesService);\n  readonly accountsService = inject(AccountsService);\n  private readonly utilityService = inject(UtilityService);\n  private readonly cdr = inject(ChangeDetectorRef);\n  private readonly cacheService = inject(RequestCacheService);\n\n  private handleFormSubmit(form: FormGroup | undefined): void {\n    switch (this.modalType) {\n      case 'move':\n        this.handleUserMove(form);\n        break;\n      case 'add':\n        this.handleUserAdd(form);\n        break;\n    }\n  }\n\n  private handleUserMove(form: FormGroup | undefined): void {\n    if (isNullOrUndefined(this.selectedUser) || isNullOrUndefined(form)) return;\n    const currentUserLinkField = this.userLinkField();\n\n    const userId = this.selectedUser.id;\n    const selectedGroupId = form.get('group')?.value as string | undefined;\n\n    if (isNullOrUndefined(selectedGroupId) || isEmpty(selectedGroupId)) return;\n\n    const groupObject = this.groupingOptions.find(\n      (g) => g.id === selectedGroupId,\n    );\n\n    if (groupObject) {\n      const payload = { [currentUserLinkField]: groupObject };\n      this.updateUser(userId, payload as Partial<UserResponse>);\n    } else {\n      console.error('Selected group not found in grouping options list.');\n    }\n  }\n\n  private handleUserAdd(form: FormGroup | undefined): void {\n    if (isNullOrUndefined(form)) return;\n    const currentUserLinkField = this.userLinkField();\n\n    const userIdToAdd = form.get('user')?.value as string | undefined;\n    const currentEntity = this.entity();\n    const currentEntityObject = currentEntity\n      ? { id: currentEntity.id, name: currentEntity.name }\n      : null;\n\n    if (\n      !currentEntityObject ||\n      isNullOrUndefined(currentEntityObject.id) ||\n      isEmpty(currentEntityObject.id) ||\n      isNullOrUndefined(userIdToAdd) ||\n      isEmpty(userIdToAdd)\n    )\n      return;\n\n    const payload = { [currentUserLinkField]: currentEntityObject };\n    this.updateUser(userIdToAdd, payload as Partial<UserResponse>);\n  }\n\n  override readonly actions: FormAction[] = [\n    {\n      label: 'Cancel',\n      action: () => {\n        this.onClose();\n      },\n      severity: 'secondary',\n    },\n    {\n      label: 'Ok',\n      action: (form) => {\n        this.handleFormSubmit(form);\n      },\n      severity: 'primary',\n      disabled: (form?: FormGroup) => isNullOrUndefined(form) || form.pristine,\n    },\n  ];\n  userList: UserListItem[] = [];\n  selectedUser: UserListItem | null = null;\n  groupingOptions: { id: string; name: string }[] = [];\n  availableUsersForLinking: { id: string; name: string }[] = [];\n\n  modalType: 'move' | 'add' | null = null;\n  get isModalVisible(): boolean {\n    return this.modalType !== null;\n  }\n  get modalHeader(): string {\n    switch (this.modalType) {\n      case 'move':\n        return 'Move To Different Cost Centre';\n      case 'add':\n        return 'Add User';\n      default:\n        return '';\n    }\n  }\n  constructor() {\n    super();\n\n    effect(() => {\n      const ownerId = this.entity()?.owner?.id;\n      const currentGroupIdRqlPath: string | null = this.groupId();\n      const currentEntityId = this.entity()?.id;\n\n      if (\n        isNullOrUndefined(ownerId) ||\n        isNullOrUndefined(currentGroupIdRqlPath) ||\n        isNullOrUndefined(currentEntityId)\n      ) {\n        this.userList = [];\n        this.cdr.markForCheck();\n        return;\n      }\n      const filters = {\n        state: {\n          value: 'deleted',\n          operator: '!=',\n        },\n        [currentGroupIdRqlPath]: {\n          value: currentEntityId,\n          operator: '=',\n        },\n      };\n      const rqlFilter = this.utilityService.constructRqlFilter(filters);\n      return this.cacheService\n        .getOrFetch(\n          `users-${ownerId}-${rqlFilter}`,\n          () => this.fetchUsers(ownerId, rqlFilter),\n          3000,\n        )\n        .subscribe((users) => {\n          this.userList = users;\n          this.cdr.markForCheck();\n        });\n    });\n  }\n\n  ngOnInit(): void {\n    const owner = this.entity()?.owner?.id;\n    const currentEntityId = this.entity()?.id;\n\n    this.columns = [\n      {\n        field: 'name',\n        header: 'Name',\n        filter: true,\n        filterType: 'text',\n        filterMatchMode: 'contains',\n        transform: 'text-ellipsis',\n      },\n      {\n        field: this.userLinkField(), // Placeholder, actual field on UserListItem might vary\n        header: this.groupingEntityType() ?? 'Group', // Dynamic header\n        valueGetter: (rowData: unknown) => {\n          const linkField = this.userLinkField();\n          const user = rowData as UserListItem;\n          // Ensure user is an object and has the linkField property\n          if (\n            isDefined(user) &&\n            typeof user === 'object' &&\n            Object.hasOwn(user, linkField)\n          ) {\n            const linkedEntity = user[linkField] as { name?: string }; // Type assertion\n            return linkedEntity?.name ?? '';\n          }\n          return '';\n        },\n        filter: true,\n        filterType: 'multiselect',\n        filterMatchMode: 'in',\n        filterConfig: {\n          type: 'multiselect',\n          options: [], // These options could be dynamically populated based on groupingOptions\n        },\n      },\n    ];\n\n    if (typeof owner === 'string' && owner) {\n      // Ensure owner is a non-empty string\n      const groupEntitiesFn = this.getGroupingEntitiesFn();\n      // groupEntitiesFn is a required input, so it should exist.\n      groupEntitiesFn(owner)\n        .then((groups) => {\n          this.groupingOptions = groups;\n          if (this.modalType === 'move') this.updateFormFields();\n          this.cdr.markForCheck();\n        })\n        .catch((error) => {\n          console.error(\n            `Failed to load ${this.groupingEntityType()} groups:`,\n            error,\n          );\n          this.groupingOptions = [];\n          this.cdr.markForCheck();\n        });\n\n      const availableUsersFn = this.getAvailableUsersFn();\n      // availableUsersFn is a required input, so it should exist.\n      availableUsersFn(owner, currentEntityId)\n        .then((users) => {\n          this.availableUsersForLinking = users;\n          if (this.modalType === 'add') this.updateFormFields();\n          this.cdr.markForCheck();\n        })\n        .catch((error) => {\n          console.error('Failed to load available users for linking:', error);\n          this.availableUsersForLinking = [];\n          this.cdr.markForCheck();\n        });\n    } else {\n      console.warn(\n        'Owner ID is not available or invalid, cannot fetch grouping entities or available users.',\n      );\n      this.groupingOptions = [];\n      this.availableUsersForLinking = [];\n      this.cdr.markForCheck();\n    }\n  }\n\n  fetchUsers(\n    ownerId: string,\n    filter: string | undefined,\n  ): Observable<UserListItem[]> {\n    return this.accountsService\n      .listUsers(ownerId, 0, DEFAULT_LIST_SIZE, 'name', filter)\n      .pipe(map((response) => response.items));\n  }\n\n  protected override updateFormFields(): void {\n    const groupDropdownOptions = (this.groupingOptions ?? []).map((g) => ({\n      label: g.name,\n      value: g.id,\n    }));\n\n    const userDropdownOptions = (this.availableUsersForLinking ?? []).map(\n      (a) => ({\n        label: a.name,\n        value: a.id,\n      }),\n    );\n\n    switch (this.modalType) {\n      case 'move':\n        this.formFields = [\n          createDropdownField(\n            'group',\n            `${this.groupingEntityType()}`,\n            groupDropdownOptions,\n            '',\n            {\n              layout: 'horizontal',\n              labelWidth: '1/3',\n              name: 'group',\n              props: {\n                appendTo: 'body',\n              },\n            },\n          ),\n        ];\n        break;\n      case 'add':\n        this.formFields = [\n          createDropdownField('user', `User`, userDropdownOptions, '', {\n            layout: 'horizontal',\n            labelWidth: '1/3',\n            name: 'user',\n            props: {\n              appendTo: 'body',\n            },\n          }),\n        ];\n        break;\n      default:\n        this.formFields = [];\n        break;\n    }\n    this.cdr.markForCheck();\n  }\n\n  updateUser(id: string, data: Partial<UserResponse>) {\n    this.accountsService.updateUser(id, data).subscribe({\n      next: () => {\n        this.broadcastService.broadcast('entity-updated', {\n          id,\n          changes: data,\n          entityType: 'user',\n          parentId: this.entity()?.id,\n          groupingType: this.groupingEntityType(),\n        });\n        this.modalType = null;\n\n        const ownerId = this.entity()?.owner?.id;\n        const currentGroupIdRqlPath: string | null = this.groupId();\n        const currentEntityId = this.entity()?.id;\n\n        if (\n          typeof ownerId === 'string' &&\n          ownerId &&\n          typeof currentGroupIdRqlPath === 'string' &&\n          currentGroupIdRqlPath &&\n          typeof currentEntityId === 'string' &&\n          currentEntityId\n        ) {\n          const filters = {\n            state: { value: 'deleted', operator: '!=' },\n            [currentGroupIdRqlPath]: { value: currentEntityId, operator: '=' },\n          };\n          const rqlFilter = this.utilityService.constructRqlFilter(filters);\n          this.fetchUsers(ownerId, rqlFilter).subscribe((users) => {\n            this.userList = users;\n            this.cdr.markForCheck();\n          });\n        }\n\n        const availableUsersFn = this.getAvailableUsersFn();\n        if (typeof ownerId === 'string' && ownerId) {\n          // Check ownerId is a valid string\n          availableUsersFn(ownerId, currentEntityId)\n            .then((users) => {\n              this.availableUsersForLinking = users;\n              this.cdr.markForCheck();\n            })\n            .catch((error) => {\n              console.error(\n                'Error refreshing available users after update:',\n                error,\n              );\n            });\n        }\n        this.cdr.markForCheck();\n      },\n      error: (err) => {\n        console.error('Failed to update user:', err);\n        // Potentially show a user-facing error message\n      },\n    });\n  }\n\n  confirmUserMove() {\n    this.modalType = 'move';\n    this.updateFormFields();\n  }\n\n  confirmUserAdd() {\n    this.modalType = 'add';\n    this.updateFormFields();\n  }\n\n  onClose() {\n    this.modalType = null;\n    this.selectedUser = null;\n    this.updateFormFields(); // Reset form fields by rebuilding them\n  }\n\n  handleRowSelect(event: TableRowSelectEvent): void {\n    if (isEmpty(event) || isEmpty(event.data)) return;\n\n    this.selectedUser = event.data as UserListItem;\n  }\n\n  handleRowUnselect(): void {\n    this.selectedUser = null;\n  }\n}\n","<div class=\"flex flex-col h-full w-full overflow-hidden\">\n  <div class=\"p-4 content-header flex-none w-full\">\n    <div class=\"flex justify-end items-center\">\n      <div class=\"flex-none flex space-x-4\">\n        <button\n          type=\"button\"\n          class=\"pi pi-plus action hover\"\n          pTooltip=\"Add\"\n          tooltipPosition=\"bottom\"\n          aria-label=\"Add new item\"\n          (click)=\"confirmUserAdd()\"\n        ></button>\n        <button\n          type=\"button\"\n          class=\"pi pi-trash action hover\"\n          pTooltip=\"Move User\"\n          tooltipPosition=\"bottom\"\n          aria-label=\"Move selected item\"\n          [disabled]=\"!selectedUser\"\n          (click)=\"confirmUserMove()\"\n        ></button>\n      </div>\n    </div>\n  </div>\n\n  <div class=\"flex-1 min-h-0 w-full overflow-hidden\">\n    <app-grid\n      [data]=\"userList\"\n      [columns]=\"columns\"\n      [pagination]=\"true\"\n      [selectionMode]=\"'single'\"\n      (rowSelect)=\"handleRowSelect($event)\"\n      (rowUnselect)=\"handleRowUnselect()\"\n    ></app-grid>\n  </div>\n</div>\n\n<app-dynamic-form-modal\n  [visible]=\"isModalVisible\"\n  [header]=\"modalHeader\"\n  [fields]=\"formFields\"\n  [actions]=\"actions\"\n  [styleClass]=\"'w-[40rem]'\"\n  (modalClose)=\"onClose()\"\n  (formSubmit)=\"onSubmit($event)\"\n>\n</app-dynamic-form-modal>\n","import { inject, Injectable } from '@angular/core';\n\nimport {\n  AccountsService,\n  CostCentreResponse,\n  EntitiesService,\n} from '../../../api';\nimport { AdminDetailSection } from '../models';\nimport { CostCentreDetailsSectionComponent } from '../components/cost-centres/cost-centre-details-section/cost-centre-details-section.component';\nimport { FeedSectionComponent } from '../components/shared/feed-section/feed-section.component';\nimport { ContactsSectionComponent } from '../components/shared/contacts-section/contacts-section.component';\nimport { AssetListSectionComponent } from '../components/shared/asset-list-section/asset-list-section.component';\nimport { map, firstValueFrom } from 'rxjs';\nimport { AssetGroupingService } from '../../../shared/services/asset-grouping.service';\nimport { UserListSectionComponent } from '../components/shared/user-list-section/user-list-section.component';\nimport { UtilityService } from '../../../core/services/utility.service';\nimport { RequestCacheService } from '../../../shared/services/request-cache.service';\n\n@Injectable({ providedIn: 'root' })\nexport class CostCentreSectionConfigFactory {\n  private readonly assetGroupingService = inject(AssetGroupingService);\n  private readonly entitiesService = inject(EntitiesService);\n  private readonly accountsService = inject(AccountsService);\n  private readonly utilityService = inject(UtilityService);\n  private readonly cacheService = inject(RequestCacheService);\n\n  /**\n   * Create sections for cost centre information\n   * @param costCentre The cost centre object to display in the section\n   * @returns An array of AdminDetailSection objects representing the cost centre information sections\n   */\n  createCostCentreInformationSection(\n    costCentre: CostCentreResponse | null,\n  ): AdminDetailSection[] {\n    return [\n      {\n        id: 'cost-centre-details',\n        title: 'Cost Centre Details',\n        component: CostCentreDetailsSectionComponent,\n        componentInputs: { entity: costCentre },\n        category: 'information',\n        order: 10,\n      },\n      {\n        id: 'cost-centre-contacts',\n        title: 'Contacts',\n        component: ContactsSectionComponent,\n        componentInputs: { entity: costCentre, entityType: 'cost-centre' },\n        category: 'information',\n        order: 20,\n      },\n    ];\n  }\n\n  /**\n   * Create sections for cost centre changes\n   * @param costCentre The cost centre object to display in the section\n   * @returns An array of AdminDetailSection objects representing the cost centre changes sections\n   */\n  createChangesSection(\n    costCentre: CostCentreResponse | null,\n  ): AdminDetailSection[] {\n    return [\n      {\n        id: 'cost-centre-changes',\n        title: 'Changes',\n        component: FeedSectionComponent,\n        componentInputs: {\n          entity: costCentre,\n        },\n        category: 'feed',\n        order: 10,\n      },\n    ];\n  }\n\n  /**\n   * Create sections for cost centre assets\n   * @param costCentre The cost centre object to display in the section\n   * @returns An array of AdminDetailSection objects representing the cost centre assets sections\n   */\n  createAssetsSection(\n    costCentre: CostCentreResponse | null,\n  ): AdminDetailSection[] {\n    return [\n      {\n        id: 'cost-centre-assets',\n        title: 'Assets',\n        component: AssetListSectionComponent,\n        componentInputs: {\n          entity: costCentre, // The current cost centre object\n          groupId: 'costCentre.id', // RQL path to filter assets for this cost centre\n          groupingEntityType: 'Cost Centre',\n          assetLinkField: 'costCentre', // The field on AssetResponse linking to CostCentreResponse\n          getGroupingEntitiesFn: (ownerId: string) =>\n            this.assetGroupingService.getCostCentresAsTree(ownerId),\n          getAvailableAssetsFn: (ownerId: string, _currentEntityId?: string) =>\n            this.getAvailableAssets(ownerId),\n        },\n        category: 'assets',\n        order: 10,\n      },\n    ];\n  }\n\n  /**\n   * Get available assets for the given owner\n   * @param ownerId The owner ID to fetch assets for\n   * @returns Promise of simplified asset objects\n   */\n  private getAvailableAssets(ownerId: string) {\n    const filters = {\n      state: {\n        value: 'active',\n        operator: '=',\n      },\n    };\n    const rqlFilter = this.utilityService.constructRqlFilter(filters);\n    return this.cacheService.getOrFetchAsync(\n      `assets-list-${ownerId}-${rqlFilter}`,\n      () =>\n        firstValueFrom(\n          this.entitiesService\n            .listAssets(ownerId, 0, 100, 'name', rqlFilter)\n            .pipe(\n              map((res) =>\n                res.items.map((asset) => ({\n                  id: asset.id,\n                  name: asset.name,\n                })),\n              ),\n            ),\n        ),\n      300000,\n    );\n  }\n\n  /**\n   * Create sections for cost centre users\n   * @param costCentre The cost centre object to display in the section\n   * @returns An array of AdminDetailSection objects representing the cost centre users sections\n   */\n  createUsersSection(\n    costCentre: CostCentreResponse | null,\n  ): AdminDetailSection[] {\n    return [\n      {\n        id: 'cost-centre-users',\n        title: 'Users',\n        component: UserListSectionComponent,\n        componentInputs: {\n          entity: costCentre,\n          groupId: 'costCentre.id',\n          groupingEntityType: 'Cost Centre',\n          userLinkField: 'costCentre',\n          getGroupingEntitiesFn: (ownerId: string) =>\n            this.assetGroupingService.getCostCentresAsTree(ownerId),\n          getAvailableUsersFn: (ownerId: string) =>\n            firstValueFrom(\n              this.accountsService.listUsers(ownerId, 0, 100, 'name').pipe(\n                map((res) =>\n                  res.items.map((user) => ({\n                    id: user.id,\n                    name: user.name,\n                  })),\n                ),\n              ),\n            ),\n        },\n        category: 'users',\n        order: 20,\n      },\n    ];\n  }\n\n  /**\n   * Create all costCentre sections in one call\n   * @param costCentre The costCentre object to display in the sections\n   * @returns An array of AdminDetailSection objects representing all costCentre sections\n   */\n  createAllCostCentreSections(\n    costCentre: CostCentreResponse | null,\n  ): AdminDetailSection[] {\n    return [\n      ...this.createCostCentreInformationSection(costCentre),\n      ...this.createAssetsSection(costCentre),\n      ...this.createUsersSection(costCentre),\n      ...this.createChangesSection(costCentre),\n    ];\n  }\n}\n","import { Component, computed, effect, inject, input } from '@angular/core';\nimport { Validators } from '@angular/forms';\n\nimport { ButtonModule } from 'primeng/button';\nimport { InputTextModule } from 'primeng/inputtext';\n\nimport {\n  ZoneGroupCreateRequest,\n  EntitiesService,\n  ZoneGroupResponse,\n} from '../../../../../api';\nimport {\n  AssetGroupingItem,\n  createDropdownField,\n  createTextField,\n} from '../../../../../shared/models';\nimport { EntitySectionBaseComponent } from '../../base';\nimport { isDefined } from '../../../../../shared/utils';\nimport { DynamicFormComponent } from '../../../../../shared/components/forms/dynamic-form/dynamic-form.component';\nimport { GridComponent } from '../../../../../shared/components/grid/grid.component';\nimport { CommonModule } from '@angular/common';\nimport { EntityOperationRegistryService } from '../../../services/entity/entity-operation-registry.service';\nimport { Observable } from 'rxjs';\nimport { faAtlas } from '@fortawesome/free-solid-svg-icons';\nimport { FontAwesomeModule } from '@fortawesome/angular-fontawesome';\nimport { AssetGroupingService } from '../../../../../shared/services/asset-grouping.service';\n\ntype ZoneGroupEntity = ZoneGroupResponse | ZoneGroupCreateRequest;\n\n@Component({\n  selector: 'app-geofence-group-details-section',\n  imports: [\n    CommonModule,\n    ButtonModule,\n    InputTextModule,\n    GridComponent,\n    DynamicFormComponent,\n    FontAwesomeModule,\n  ],\n  templateUrl: './geofence-group-details-section.component.html',\n  styleUrl: './geofence-group-details-section.component.scss',\n})\nexport class GeofenceGroupDetailsSectionComponent extends EntitySectionBaseComponent<ZoneGroupEntity> {\n  readonly ownerId = input<string | null>(null);\n  readonly entitiesService = inject(EntitiesService);\n  private readonly operationRegistry = inject(EntityOperationRegistryService);\n  private readonly assetGroupingService = inject(AssetGroupingService);\n\n  readonly geofenceGroupDetails = computed(() => {\n    const geofenceGroupDetails = this.entity();\n    if (!isDefined(geofenceGroupDetails)) return [];\n\n    return [\n      {\n        key: 'Parent',\n        value: geofenceGroupDetails.parent?.name ?? 'Root',\n      },\n      { key: 'Name', value: geofenceGroupDetails.name },\n    ];\n  });\n\n  faAtlas = faAtlas;\n  zoneGroups: AssetGroupingItem[] = [];\n\n  constructor() {\n    super();\n\n    // Setup initial columns\n    this.columns = [\n      { field: 'key', header: '', transform: 'uppercase' },\n      { field: 'value', header: '' },\n    ];\n\n    effect(() => {\n      const ownerId = this.entity()?.owner?.id ?? this.ownerId();\n      if (isDefined(ownerId)) {\n        this.fetchZoneGroups(ownerId)\n          .then((groups) => {\n            this.zoneGroups = groups;\n            this.updateFormFields();\n          })\n          .catch(() => {});\n      }\n    });\n  }\n\n  private fetchZoneGroups(ownerId: string): Promise<AssetGroupingItem[]> {\n    return this.assetGroupingService.getZoneGroups(ownerId);\n  }\n\n  protected override updateFormFields(): void {\n    const geofenceGroup = this.entity();\n    const parentOptions = [\n      { label: 'Root', value: 'root' },\n      ...this.zoneGroups.map((group) => ({\n        label: group.name,\n        value: group.id,\n      })),\n    ];\n    this.formFields = [\n      createDropdownField(\n        'parent',\n        'Parent',\n        parentOptions,\n        geofenceGroup?.parent?.id ?? 'root',\n        {\n          placeholder: 'Select Parent Group',\n          validations: [\n            {\n              name: 'required',\n              validator: Validators.required,\n              message: 'Parent group is required',\n            },\n          ],\n          props: {\n            appendTo: 'body',\n          },\n        },\n      ),\n      createTextField('name', 'Name', geofenceGroup?.name, {\n        name: 'name',\n        validations: [\n          {\n            name: 'required',\n            validator: Validators.required,\n            message: 'Name is required',\n          },\n        ],\n      }),\n    ];\n  }\n\n  override getUpdateMethod(): (\n    id: string,\n    data: Partial<ZoneGroupEntity>,\n  ) => Observable<ZoneGroupResponse> {\n    return (\n      this.operationRegistry.getOperation<\n        ZoneGroupEntity,\n        ZoneGroupCreateRequest,\n        ZoneGroupResponse,\n        'update'\n      >('geofence-group', 'update') ??\n      ((id, data) => this.entitiesService.updateZoneGroup(id, data))\n    );\n  }\n\n  protected override onFormValueChange(\n    formData: Record<string, string | number | object | null>,\n  ): void {\n    const transformedData = this.transformFormData(formData);\n\n    this.formValueChange.emit(transformedData);\n  }\n\n  protected override transformFormData(\n    formData: Record<string, string | number | object | null>,\n  ) {\n    const transformedData = { ...formData };\n    if (isDefined(transformedData['parent'])) {\n      const parentId = transformedData['parent'] as string;\n      const parent = this.zoneGroups?.find((option) => option.id === parentId);\n      if (parent) {\n        transformedData['parent'] = {\n          id: parent.id,\n          name: parent.name,\n        };\n      } else if (parentId === 'root') {\n        transformedData['parent'] = null; // Set to null for root\n      }\n    }\n    return transformedData;\n  }\n}\n","<div class=\"card pt-2\">\n  <div class=\"mb-4 p-2 flex justify-start items-center\">\n    <fa-icon\n      [icon]=\"faAtlas\"\n      class=\"!text-[2.5rem]\"\n      [ngClass]=\"{ 'icon-primary': isFormEditable() }\"\n    ></fa-icon>\n\n    <div class=\"pl-6 flex-1\">\n      <div class=\"flex justify-between items-center\">\n        <h2 class=\"text-xl font-semibold m-0\">Geofence Group Details</h2>\n        @if (!isFormEditable() && !createMode()) {\n          <div class=\"icon-light\">\n            <span\n              class=\"pi pi-pen-to-square action hover !text-2xl\"\n              [attr.aria-label]=\"'Edit geofence group details'\"\n              (click)=\"onEdit()\"\n              (keydown.enter)=\"onEdit()\"\n            ></span>\n          </div>\n        }\n      </div>\n      <span\n        >The following information is required in order to identify your\n        geofence group.</span\n      >\n    </div>\n  </div>\n\n  @if (isFormEditable() || (createMode() && formFields.length)) {\n    <app-dynamic-form\n      [fields]=\"formFields\"\n      [actions]=\"actions\"\n      [hideActions]=\"createMode()\"\n      (formSubmit)=\"onSubmit($event)\"\n      (formValidityChange)=\"onFormValidityChange($event)\"\n      (formValueChange)=\"onFormValueChange($event)\"\n    >\n    </app-dynamic-form>\n  }\n\n  @if (!isFormEditable() && !createMode()) {\n    <app-grid\n      [data]=\"geofenceGroupDetails()\"\n      [columns]=\"columns\"\n      [showGridLines]=\"false\"\n      [hideHeader]=\"true\"\n      tableStyleClass=\"info-display !w-auto\"\n    ></app-grid>\n  }\n</div>\n","import { Injectable } from '@angular/core';\n\nimport { ZoneGroupResponse } from '../../../api';\nimport { AdminDetailSection } from '../models';\nimport { GeofenceGroupDetailsSectionComponent } from '../components/geofence-groups/geofence-group-details-section/geofence-group-details-section.component';\nimport { FeedSectionComponent } from '../components/shared/feed-section/feed-section.component';\n\n@Injectable({ providedIn: 'root' })\nexport class GeofenceGroupSectionConfigFactory {\n  /**\n   * Create sections for geofence group information\n   * @param geofenceGroup The geofence group object to display in the section\n   * @returns An array of AdminDetailSection objects representing the geofence group information sections\n   */\n  createGeofenceGroupInformationSection(\n    geofenceGroup: ZoneGroupResponse | null,\n  ): AdminDetailSection[] {\n    return [\n      {\n        id: 'geofence-group-details',\n        title: 'Geofence Group Details',\n        component: GeofenceGroupDetailsSectionComponent,\n        componentInputs: { entity: geofenceGroup },\n        category: 'information',\n        order: 10,\n      },\n    ];\n  }\n\n  /**\n   * Create sections for geofence group changes\n   * @param geofenceGroup The geofence group object to display in the section\n   * @returns An array of AdminDetailSection objects representing the geofence group changes sections\n   */\n  createChangesSection(\n    geofenceGroup: ZoneGroupResponse | null,\n  ): AdminDetailSection[] {\n    return [\n      {\n        id: 'geofence-group-changes',\n        title: 'Changes',\n        component: FeedSectionComponent,\n        componentInputs: {\n          entity: geofenceGroup,\n        },\n        category: 'feed',\n        order: 10,\n      },\n    ];\n  }\n\n  /**\n   * Create all geofenceGroup sections in one call\n   * @param geofenceGroup The geofenceGroup object to display in the sections\n   * @returns An array of AdminDetailSection objects representing all geofenceGroup sections\n   */\n  createAllGeofenceGroupSections(\n    geofenceGroup: ZoneGroupResponse | null,\n  ): AdminDetailSection[] {\n    return [\n      ...this.createGeofenceGroupInformationSection(geofenceGroup),\n      ...this.createChangesSection(geofenceGroup),\n    ];\n  }\n}\n","import { Component, computed, effect, inject, input } from '@angular/core';\nimport { Validators } from '@angular/forms';\n\nimport {\n  AssetGroupCreateRequest,\n  EntitiesService,\n  AssetGroupResponse,\n} from '../../../../../api';\nimport {\n  AssetGroupingItem,\n  createDropdownField,\n  createTextField,\n} from '../../../../../shared/models';\nimport { EntitySectionBaseComponent } from '../../base';\nimport { isDefined } from '../../../../../shared/utils';\nimport { DynamicFormComponent } from '../../../../../shared/components/forms/dynamic-form/dynamic-form.component';\nimport { GridComponent } from '../../../../../shared/components/grid/grid.component';\nimport { CommonModule } from '@angular/common';\nimport { EntityOperationRegistryService } from '../../../services/entity/entity-operation-registry.service';\nimport { Observable } from 'rxjs';\nimport { faAtlas } from '@fortawesome/free-solid-svg-icons';\nimport { FontAwesomeModule } from '@fortawesome/angular-fontawesome';\nimport { AssetGroupingService } from '../../../../../shared/services/asset-grouping.service';\n\ntype AssetGroupEntity = AssetGroupResponse | AssetGroupCreateRequest;\n\n@Component({\n  selector: 'app-asset-group-details-section',\n  imports: [\n    CommonModule,\n    GridComponent,\n    DynamicFormComponent,\n    FontAwesomeModule,\n  ],\n  templateUrl: './asset-group-details-section.component.html',\n  styleUrl: './asset-group-details-section.component.scss',\n})\nexport class AssetGroupDetailsSectionComponent extends EntitySectionBaseComponent<AssetGroupEntity> {\n  readonly ownerId = input<string | null>(null);\n  readonly entitiesService = inject(EntitiesService);\n  private readonly operationRegistry = inject(EntityOperationRegistryService);\n  private readonly assetGroupingService = inject(AssetGroupingService);\n\n  readonly assetGroupDetails = computed(() => {\n    const assetGroupDetails = this.entity();\n    if (!isDefined(assetGroupDetails)) return [];\n\n    return [\n      {\n        key: 'Parent',\n        value: assetGroupDetails.parent?.name ?? 'Root',\n      },\n      { key: 'Name', value: assetGroupDetails.name },\n    ];\n  });\n\n  faAtlas = faAtlas;\n  assetGroups: AssetGroupingItem[] = [];\n\n  constructor() {\n    super();\n\n    // Setup initial columns\n    this.columns = [\n      { field: 'key', header: '', transform: 'uppercase' },\n      { field: 'value', header: '' },\n    ];\n\n    effect(() => {\n      const ownerId = this.entity()?.owner?.id ?? this.ownerId();\n      if (isDefined(ownerId)) {\n        this.fetchAssetGroups(ownerId)\n          .then((groups) => {\n            this.assetGroups = groups;\n            this.updateFormFields();\n          })\n          .catch(() => {});\n      }\n    });\n  }\n\n  private fetchAssetGroups(ownerId: string): Promise<AssetGroupingItem[]> {\n    return this.assetGroupingService.getAssetGroups(ownerId);\n  }\n\n  protected override updateFormFields(): void {\n    const assetGroup = this.entity();\n    const parentOptions = [\n      { label: 'Root', value: 'root' },\n      ...this.assetGroups.map((group) => ({\n        label: group.name,\n        value: group.id,\n      })),\n    ];\n    this.formFields = [\n      createDropdownField(\n        'parent',\n        'Parent',\n        parentOptions,\n        assetGroup?.parent?.id ?? 'root',\n        {\n          placeholder: 'Select Parent Group',\n          validations: [\n            {\n              name: 'required',\n              validator: Validators.required,\n              message: 'Parent group is required',\n            },\n          ],\n          props: {\n            appendTo: 'body',\n          },\n        },\n      ),\n      createTextField('name', 'Name', assetGroup?.name, {\n        name: 'name',\n        validations: [\n          {\n            name: 'required',\n            validator: Validators.required,\n            message: 'Name is required',\n          },\n        ],\n      }),\n    ];\n  }\n\n  override getUpdateMethod(): (\n    id: string,\n    data: Partial<AssetGroupEntity>,\n  ) => Observable<AssetGroupResponse> {\n    return (\n      this.operationRegistry.getOperation<\n        AssetGroupEntity,\n        AssetGroupCreateRequest,\n        AssetGroupResponse,\n        'update'\n      >('asset-group', 'update') ??\n      ((id, data) => this.entitiesService.updateAssetGroup(id, data))\n    );\n  }\n\n  protected override onFormValueChange(\n    formData: Record<string, string | number | object | null>,\n  ): void {\n    const transformedData = this.transformFormData(formData);\n\n    this.formValueChange.emit(transformedData);\n  }\n\n  protected override transformFormData(\n    formData: Record<string, string | number | object | null>,\n  ) {\n    const transformedData = { ...formData };\n    if (isDefined(transformedData['parent'])) {\n      const parentId = transformedData['parent'] as string;\n      const parent = this.assetGroups?.find((option) => option.id === parentId);\n      if (parent) {\n        transformedData['parent'] = {\n          id: parent.id,\n          name: parent.name,\n        };\n      } else if (parentId === 'root') {\n        transformedData['parent'] = null; // Set to null for root\n      }\n    }\n    return transformedData;\n  }\n}\n","<div class=\"card pt-2\">\n  <div class=\"mb-4 p-2 flex justify-start items-center\">\n    <fa-icon\n      [icon]=\"faAtlas\"\n      class=\"!text-[2.5rem]\"\n      [ngClass]=\"{ 'icon-primary': isFormEditable() }\"\n    ></fa-icon>\n\n    <div class=\"pl-6 flex-1\">\n      <div class=\"flex justify-between items-center\">\n        <h2 class=\"text-xl font-semibold m-0\">Asset Group Details</h2>\n        @if (!isFormEditable() && !createMode()) {\n          <div class=\"icon-light\">\n            <span\n              class=\"pi pi-pen-to-square action hover !text-2xl\"\n              [attr.aria-label]=\"'Edit asset group details'\"\n              (click)=\"onEdit()\"\n              (keydown.enter)=\"onEdit()\"\n            ></span>\n          </div>\n        }\n      </div>\n      <span\n        >The following information is required in order to identify your asset\n        group.</span\n      >\n    </div>\n  </div>\n\n  @if (isFormEditable() || (createMode() && formFields.length)) {\n    <app-dynamic-form\n      [fields]=\"formFields\"\n      [actions]=\"actions\"\n      [hideActions]=\"createMode()\"\n      (formSubmit)=\"onSubmit($event)\"\n      (formValidityChange)=\"onFormValidityChange($event)\"\n      (formValueChange)=\"onFormValueChange($event)\"\n    >\n    </app-dynamic-form>\n  }\n\n  @if (!isFormEditable() && !createMode()) {\n    <app-grid\n      [data]=\"assetGroupDetails()\"\n      [columns]=\"columns\"\n      [showGridLines]=\"false\"\n      [hideHeader]=\"true\"\n      tableStyleClass=\"info-display !w-auto\"\n    ></app-grid>\n  }\n</div>\n","import { inject, Injectable } from '@angular/core';\n\nimport { AssetGroupResponse, EntitiesService } from '../../../api';\nimport { AdminDetailSection } from '../models';\nimport { AssetGroupDetailsSectionComponent } from '../components/asset-groups/asset-group-details-section/asset-group-details-section.component';\nimport { FeedSectionComponent } from '../components/shared/feed-section/feed-section.component';\nimport { firstValueFrom, map } from 'rxjs';\nimport { AssetGroupingService } from '../../../shared/services/asset-grouping.service';\nimport { AssetListSectionComponent } from '../components/shared/asset-list-section/asset-list-section.component';\nimport { UtilityService } from '../../../core/services/utility.service';\nimport { RequestCacheService } from '../../../shared/services/request-cache.service';\n\n@Injectable({ providedIn: 'root' })\nexport class AssetGroupSectionConfigFactory {\n  private readonly assetGroupingService = inject(AssetGroupingService);\n  private readonly entitiesService = inject(EntitiesService);\n  private readonly utilityService = inject(UtilityService);\n  private readonly cacheService = inject(RequestCacheService);\n\n  /**\n   * Create sections for asset group information\n   * @param assetGroup The asset group object to display in the section\n   * @returns An array of AdminDetailSection objects representing the asset group information sections\n   */\n  createAssetGroupInformationSection(\n    assetGroup: AssetGroupResponse | null,\n  ): AdminDetailSection[] {\n    return [\n      {\n        id: 'asset-group-details',\n        title: 'Asset Group Details',\n        component: AssetGroupDetailsSectionComponent,\n        componentInputs: { entity: assetGroup },\n        category: 'information',\n        order: 10,\n      },\n    ];\n  }\n\n  /**\n   * Create sections for asset group changes\n   * @param assetGroup The asset group object to display in the section\n   * @returns An array of AdminDetailSection objects representing the asset group changes sections\n   */\n  createChangesSection(\n    assetGroup: AssetGroupResponse | null,\n  ): AdminDetailSection[] {\n    return [\n      {\n        id: 'asset-group-changes',\n        title: 'Changes',\n        component: FeedSectionComponent,\n        componentInputs: {\n          entity: assetGroup,\n        },\n        category: 'feed',\n        order: 10,\n      },\n    ];\n  }\n\n  /**\n   * Create sections for asset group assets\n   * @param assetGroup The asset group object to display in the section\n   * @returns An array of AdminDetailSection objects representing the asset group assets sections\n   */\n  createAssetsSection(\n    assetGroup: AssetGroupResponse | null,\n  ): AdminDetailSection[] {\n    return [\n      {\n        id: 'asset-group-assets',\n        title: 'Assets',\n        component: AssetListSectionComponent,\n        componentInputs: {\n          entity: assetGroup,\n          groupId: 'groups.id',\n          groupingEntityType: 'Asset Group',\n          assetLinkField: 'groups',\n          getGroupingEntitiesFn: (ownerId: string) =>\n            this.assetGroupingService.getAssetGroupsAsTree(ownerId),\n          getAvailableAssetsFn: (ownerId: string, _currentEntityId?: string) =>\n            this.getAvailableAssets(ownerId),\n        },\n        category: 'assets',\n        order: 10,\n      },\n    ];\n  }\n\n  /**\n   * Get available assets for the given owner\n   * @param ownerId The owner ID to fetch assets for\n   * @returns Promise of simplified asset objects\n   */\n  private getAvailableAssets(ownerId: string) {\n    const filters = {\n      state: {\n        value: 'active',\n        operator: '=',\n      },\n    };\n    const rqlFilter = this.utilityService.constructRqlFilter(filters);\n    return this.cacheService.getOrFetchAsync(\n      `assets-list-${ownerId}-${rqlFilter}`,\n      () =>\n        firstValueFrom(\n          this.entitiesService\n            .listAssets(ownerId, 0, 100, 'name', rqlFilter)\n            .pipe(\n              map((res) =>\n                res.items.map((asset) => ({\n                  id: asset.id,\n                  name: asset.name,\n                })),\n              ),\n            ),\n        ),\n      300000,\n    );\n  }\n\n  /**\n   * Create all assetGroup sections in one call\n   * @param assetGroup The assetGroup object to display in the sections\n   * @returns An array of AdminDetailSection objects representing all assetGroup sections\n   */\n  createAllAssetGroupSections(\n    assetGroup: AssetGroupResponse | null,\n  ): AdminDetailSection[] {\n    return [\n      ...this.createAssetGroupInformationSection(assetGroup),\n      ...this.createAssetsSection(assetGroup),\n      ...this.createChangesSection(assetGroup),\n    ];\n  }\n}\n","import { Component, computed, effect, inject, input } from '@angular/core';\nimport { Validators } from '@angular/forms';\n\nimport {\n  AssetCategoryCreateRequest,\n  EntitiesService,\n  AssetCategoryResponse,\n} from '../../../../../api';\nimport {\n  AssetGroupingItem,\n  createDropdownField,\n  createTextField,\n} from '../../../../../shared/models';\nimport { EntitySectionBaseComponent } from '../../base';\nimport { isDefined } from '../../../../../shared/utils';\nimport { DynamicFormComponent } from '../../../../../shared/components/forms/dynamic-form/dynamic-form.component';\nimport { GridComponent } from '../../../../../shared/components/grid/grid.component';\nimport { CommonModule } from '@angular/common';\nimport { EntityOperationRegistryService } from '../../../services/entity/entity-operation-registry.service';\nimport { Observable, tap } from 'rxjs';\nimport { faSitemap } from '@fortawesome/free-solid-svg-icons';\nimport { FontAwesomeModule } from '@fortawesome/angular-fontawesome';\nimport { AssetGroupingService } from '../../../../../shared/services/asset-grouping.service';\nimport { RequestCacheService } from '../../../../../shared/services/request-cache.service';\n\ntype AssetCategoryEntity = AssetCategoryResponse | AssetCategoryCreateRequest;\n\n@Component({\n  selector: 'app-asset-category-details-section',\n  imports: [\n    CommonModule,\n    GridComponent,\n    DynamicFormComponent,\n    FontAwesomeModule,\n  ],\n  templateUrl: './asset-category-details-section.component.html',\n  styleUrl: './asset-category-details-section.component.scss',\n})\nexport class AssetCategoryDetailsSectionComponent extends EntitySectionBaseComponent<AssetCategoryEntity> {\n  readonly ownerId = input<string | null>(null);\n  readonly entitiesService = inject(EntitiesService);\n  private readonly operationRegistry = inject(EntityOperationRegistryService);\n  private readonly assetGroupingService = inject(AssetGroupingService);\n  private readonly cacheService = inject(RequestCacheService);\n\n  readonly assetCategoryDetails = computed(() => {\n    const assetCategoryDetails = this.entity();\n    if (!isDefined(assetCategoryDetails)) return [];\n\n    return [{ key: 'Name', value: assetCategoryDetails.name }];\n  });\n\n  faSitemap = faSitemap;\n  assetCategoryGroups: AssetGroupingItem[] = [];\n\n  constructor() {\n    super();\n\n    // Setup initial columns\n    this.columns = [\n      { field: 'key', header: '', transform: 'uppercase' },\n      { field: 'value', header: '' },\n    ];\n\n    effect(() => {\n      const ownerId = this.entity()?.owner?.id ?? this.ownerId();\n      const entityId = this.entity()?.id;\n      if (isDefined(ownerId)) {\n        this.fetchAssetCategories(ownerId)\n          .then((groups) => {\n            const root = AssetGroupingService.createRootNode(ownerId);\n            this.assetCategoryGroups = [\n              root,\n              ...groups.filter((group) => group.id !== entityId),\n            ];\n            this.updateFormFields();\n          })\n          .catch(() => {});\n      }\n    });\n  }\n\n  private fetchAssetCategories(ownerId: string): Promise<AssetGroupingItem[]> {\n    return this.assetGroupingService.getAssetCategories(ownerId);\n  }\n\n  protected override updateFormFields(): void {\n    const assetCategory = this.entity();\n    const parentOptions = [\n      ...this.assetCategoryGroups.map((group) => ({\n        label: group.name,\n        value: group.id,\n      })),\n    ];\n    this.formFields = [\n      createTextField('name', 'Name', assetCategory?.name, {\n        name: 'name',\n        validations: [\n          {\n            name: 'required',\n            validator: Validators.required,\n            message: 'Name is required',\n          },\n        ],\n      }),\n    ];\n\n    if (this.createMode()) {\n      this.formFields.unshift(\n        createDropdownField(\n          'parent',\n          'Parent',\n          parentOptions,\n          assetCategory?.parent?.id,\n          {\n            placeholder: 'Select Parent Group',\n            validations: [\n              {\n                name: 'required',\n                validator: Validators.required,\n                message: 'Parent group is required',\n              },\n            ],\n            props: {\n              appendTo: 'body',\n            },\n          },\n        ),\n      );\n    }\n  }\n\n  override getUpdateMethod(): (\n    id: string,\n    data: Partial<AssetCategoryEntity>,\n  ) => Observable<AssetCategoryResponse> {\n    return (\n      this.operationRegistry.getOperation<\n        AssetCategoryEntity,\n        AssetCategoryCreateRequest,\n        AssetCategoryResponse,\n        'update'\n      >('asset-category', 'update') ??\n      ((id, data) =>\n        this.entitiesService\n          .updateAssetCategory(id, this.transformFormData(data))\n          .pipe(\n            tap(() => {\n              this.cacheService.clearCacheByPattern(`asset-categories-`);\n            }),\n          ))\n    );\n  }\n\n  protected override onFormValueChange(\n    formData: Record<string, string | number | object | null>,\n  ): void {\n    const transformedData = this.transformFormData(formData);\n\n    this.formValueChange.emit(transformedData);\n  }\n\n  protected override transformFormData(\n    formData: Record<string, string | number | object | null>,\n  ) {\n    const transformedData = { ...formData };\n    if (isDefined(transformedData['parent'])) {\n      const parentId = transformedData['parent'] as string;\n      const parent = this.assetCategoryGroups?.find(\n        (option) => option.id === parentId,\n      );\n      if (parent) {\n        transformedData['parent'] = {\n          id: parent.id,\n          name: parent.name,\n        };\n      } else if (parentId === 'root') {\n        transformedData['parent'] = null; // Set to null for root\n      }\n    }\n    return transformedData;\n  }\n}\n","<div class=\"card pt-2\">\n  <div class=\"mb-4 p-2 flex justify-start items-center\">\n    <fa-icon\n      [icon]=\"faSitemap\"\n      class=\"!text-[2.5rem]\"\n      [ngClass]=\"{ 'icon-primary': isFormEditable() }\"\n    ></fa-icon>\n\n    <div class=\"pl-6 flex-1\">\n      <div class=\"flex justify-between items-center\">\n        <h2 class=\"text-xl font-semibold m-0\">Asset Category Details</h2>\n        @if (!isFormEditable() && !createMode()) {\n          <div class=\"icon-light\">\n            <span\n              class=\"pi pi-pen-to-square action hover !text-2xl\"\n              [attr.aria-label]=\"'Edit asset category details'\"\n              (click)=\"onEdit()\"\n              (keydown.enter)=\"onEdit()\"\n            ></span>\n          </div>\n        }\n      </div>\n      <span\n        >The following information is required in order to identify your cost\n        centre.</span\n      >\n    </div>\n  </div>\n\n  @if (isFormEditable() || (createMode() && formFields.length)) {\n    <app-dynamic-form\n      [fields]=\"formFields\"\n      [actions]=\"actions\"\n      [hideActions]=\"createMode()\"\n      (formSubmit)=\"onSubmit($event)\"\n      (formValidityChange)=\"onFormValidityChange($event)\"\n      (formValueChange)=\"onFormValueChange($event)\"\n    >\n    </app-dynamic-form>\n  }\n\n  @if (!isFormEditable() && !createMode()) {\n    <app-grid\n      [data]=\"assetCategoryDetails()\"\n      [columns]=\"columns\"\n      [showGridLines]=\"false\"\n      [hideHeader]=\"true\"\n      tableStyleClass=\"info-display !w-auto\"\n    ></app-grid>\n  }\n</div>\n","import { inject, Injectable } from '@angular/core';\n\nimport {\n  AccountsService,\n  AssetCategoryResponse,\n  EntitiesService,\n} from '../../../api';\nimport { AdminDetailSection } from '../models';\nimport { AssetCategoryDetailsSectionComponent } from '../components/asset-categories/asset-category-details-section/asset-category-details-section.component';\nimport { FeedSectionComponent } from '../components/shared/feed-section/feed-section.component';\nimport { ContactsSectionComponent } from '../components/shared/contacts-section/contacts-section.component';\nimport { AssetListSectionComponent } from '../components/shared/asset-list-section/asset-list-section.component';\nimport { map, firstValueFrom } from 'rxjs';\nimport { AssetGroupingService } from '../../../shared/services/asset-grouping.service';\nimport { UtilityService } from '../../../core/services/utility.service';\nimport { RequestCacheService } from '../../../shared/services/request-cache.service';\n\n@Injectable({ providedIn: 'root' })\nexport class AssetCategorySectionConfigFactory {\n  private readonly assetGroupingService = inject(AssetGroupingService);\n  private readonly entitiesService = inject(EntitiesService);\n  private readonly accountsService = inject(AccountsService);\n  private readonly utilityService = inject(UtilityService);\n  private readonly cacheService = inject(RequestCacheService);\n\n  /**\n   * Create sections for asset category information\n   * @param assetCategory The asset category object to display in the section\n   * @returns An array of AdminDetailSection objects representing the asset category information sections\n   */\n  createAssetCategoryInformationSection(\n    assetCategory: AssetCategoryResponse | null,\n  ): AdminDetailSection[] {\n    return [\n      {\n        id: 'asset-category-details',\n        title: 'Asset Category Details',\n        component: AssetCategoryDetailsSectionComponent,\n        componentInputs: { entity: assetCategory },\n        category: 'information',\n        order: 10,\n      },\n      {\n        id: 'asset-category-contacts',\n        title: 'Contacts',\n        component: ContactsSectionComponent,\n        componentInputs: {\n          entity: assetCategory,\n          entityType: 'asset-category',\n        },\n        category: 'information',\n        order: 20,\n      },\n    ];\n  }\n\n  /**\n   * Create sections for asset category changes\n   * @param assetCategory The asset category object to display in the section\n   * @returns An array of AdminDetailSection objects representing the asset category changes sections\n   */\n  createChangesSection(\n    assetCategory: AssetCategoryResponse | null,\n  ): AdminDetailSection[] {\n    return [\n      {\n        id: 'asset-category-changes',\n        title: 'Changes',\n        component: FeedSectionComponent,\n        componentInputs: {\n          entity: assetCategory,\n        },\n        category: 'feed',\n        order: 10,\n      },\n    ];\n  }\n\n  /**\n   * Create sections for asset category assets\n   * @param assetCategory The asset category object to display in the section\n   * @returns An array of AdminDetailSection objects representing the asset category assets sections\n   */\n  createAssetsSection(\n    assetCategory: AssetCategoryResponse | null,\n  ): AdminDetailSection[] {\n    return [\n      {\n        id: 'asset-category-assets',\n        title: 'Assets',\n        component: AssetListSectionComponent,\n        componentInputs: {\n          entity: assetCategory, // The current asset category object\n          groupId: 'categories.id', // RQL path to filter assets for this asset category\n          groupingEntityType: 'Asset category',\n          assetLinkField: 'categories', // The field on AssetResponse linking to AssetCategoryResponse\n          index: assetCategory?.index ?? 0, // Use the index from the asset category if available\n          getGroupingEntitiesFn: (ownerId: string) =>\n            this.assetGroupingService.getAssetCategoriesAsTree(ownerId),\n          getAvailableAssetsFn: (ownerId: string, _currentEntityId?: string) =>\n            this.getAvailableAssets(ownerId),\n        },\n        category: 'assets',\n        order: 10,\n      },\n    ];\n  }\n\n  /**\n   * Get available assets for the given owner\n   * @param ownerId The owner ID to fetch assets for\n   * @returns Promise of simplified asset objects\n   */\n  private getAvailableAssets(ownerId: string) {\n    const filters = {\n      state: {\n        value: 'active',\n        operator: '=',\n      },\n    };\n    const rqlFilter = this.utilityService.constructRqlFilter(filters);\n    return this.cacheService.getOrFetchAsync(\n      `assets-list-${ownerId}-${rqlFilter}`,\n      () =>\n        firstValueFrom(\n          this.entitiesService\n            .listAssets(ownerId, 0, 100, 'name', rqlFilter)\n            .pipe(\n              map((res) =>\n                res.items.map((asset) => ({\n                  id: asset.id,\n                  name: asset.name,\n                })),\n              ),\n            ),\n        ),\n      300000,\n    );\n  }\n\n  /**\n   * Create all assetCategory sections in one call\n   * @param assetCategory The assetCategory object to display in the sections\n   * @returns An array of AdminDetailSection objects representing all assetCategory sections\n   */\n  createAllAssetCategorySections(\n    assetCategory: AssetCategoryResponse | null,\n  ): AdminDetailSection[] {\n    return [\n      ...this.createAssetCategoryInformationSection(assetCategory),\n      ...this.createAssetsSection(assetCategory),\n      ...this.createChangesSection(assetCategory),\n    ];\n  }\n}\n","import { Injectable } from '@angular/core';\n\nimport { ClientResponse } from '../../../api';\nimport { AdminDetailSection } from '../models';\nimport { SectionConfigBuilder } from './section-config.factory';\nimport { FeatureSectionComponent } from '../components/shared/feature-section/feature-section.component';\nimport { AppFeatures } from '../../../core/models';\n\n@Injectable({ providedIn: 'root' })\nexport class ClientSectionConfigFactory {\n  /**\n   * Create all client sections in one call\n   * @param client The client object to display in the sections\n   * @returns An array of AdminDetailSection objects representing all client sections\n   */\n  createAllClientSections(\n    client: ClientResponse | null,\n    appFeatures: string[],\n  ): AdminDetailSection[] {\n    const features = appFeatures\n      .map((feature) =>\n        SectionConfigBuilder.forClient(client)\n          .addSection(\n            feature,\n            'Features',\n            FeatureSectionComponent<ClientResponse>,\n            {\n              category: 'features',\n            },\n            {\n              feature: AppFeatures[feature],\n              entityType: 'client',\n            },\n          )\n          .build(),\n      )\n      .flat();\n    return [\n      ...SectionConfigBuilder.createClientInformationSections(client),\n      ...SectionConfigBuilder.createClientSettingsSections(client),\n      ...features,\n      ...SectionConfigBuilder.createClientChangesSections(client),\n    ];\n  }\n}\n","import { Injectable } from '@angular/core';\n\nimport { VendorResponse } from '../../../api';\nimport { AdminDetailSection, AdminSectionConfiguration } from '../models';\nimport { SectionConfigBuilder } from './section-config.factory';\nimport { FlexibleSectionBuilder } from './flexible-section-builder.factory';\nimport { FeedSectionComponent } from '../components/shared/feed-section/feed-section.component';\n\n@Injectable({ providedIn: 'root' })\nexport class VendorSectionConfigFactory {\n  /**\n   * Create all vendor sections in one call (legacy approach)\n   * @param vendor The vendor object to display in the sections\n   * @returns An array of AdminDetailSection objects representing all vendor sections\n   */\n  createAllVendorSections(vendor: VendorResponse | null): AdminDetailSection[] {\n    return [\n      ...SectionConfigBuilder.createVendorInformationSections(vendor),\n      ...SectionConfigBuilder.createVendorSettingsSections(vendor),\n      ...[\n        {\n          id: 'vendor-changes',\n          title: 'Changes',\n          component: FeedSectionComponent,\n          componentInputs: {\n            entity: vendor,\n            entityType: 'vendor',\n          },\n          category: 'feed' as const,\n          order: 10,\n        },\n      ],\n    ];\n  }\n\n  /**\n   * Create all vendor sections with flexible configuration (new approach)\n   * @param vendor The vendor object to display in the sections\n   * @returns Configuration object with sections and layout\n   */\n  createFlexibleVendorConfiguration(\n    vendor: VendorResponse | null,\n  ): AdminSectionConfiguration {\n    const informationSections =\n      SectionConfigBuilder.createVendorInformationSections(vendor);\n    const settingsSections =\n      SectionConfigBuilder.createVendorSettingsSections(vendor);\n\n    return (\n      FlexibleSectionBuilder.forEntity(vendor)\n        // Add existing information sections\n        .withSections(informationSections)\n\n        // Add existing settings sections\n        .withSections(settingsSections)\n\n        // Add feed section\n        .withSection(\n          'vendor-changes',\n          'Changes',\n          FeedSectionComponent,\n          'feed',\n          10,\n          {\n            entityType: 'vendor',\n          },\n        )\n\n        // Configure layout with custom titles and order\n        .withCategory('information', 'Vendor Information', 10)\n        .withCategory('settings', 'Vendor Settings', 20)\n        .withCategory('feed', 'Recent Changes', 30)\n        .withDefaultExpanded('information')\n        .withMultipleExpansion(false)\n        .build()\n    );\n  }\n}\n","import { Injectable } from '@angular/core';\n\nimport { DistributorResponse } from '../../../api';\nimport { AdminDetailSection } from '../models';\nimport { SectionConfigBuilder } from './section-config.factory';\n\n@Injectable({ providedIn: 'root' })\nexport class DistributorSectionConfigFactory {\n  /**\n   * Create all distributor sections in one call\n   * @param distributor The distributor object to display in the sections\n   * @returns An array of AdminDetailSection objects representing all distributor sections\n   */\n  createAllDistributorSections(\n    distributor: DistributorResponse | null,\n  ): AdminDetailSection[] {\n    return [\n      ...SectionConfigBuilder.createDistributorInformationSections(distributor),\n      ...SectionConfigBuilder.createDistributorSettingsSections(distributor),\n      ...SectionConfigBuilder.createDistributorChangesSections(distributor),\n    ];\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport {\n  Component,\n  computed,\n  effect,\n  inject,\n  input,\n  signal,\n} from '@angular/core';\nimport { takeUntilDestroyed } from '@angular/core/rxjs-interop';\nimport { Validators } from '@angular/forms';\n\nimport { ButtonModule } from 'primeng/button';\nimport { MessageModule } from 'primeng/message';\nimport { v4 as uuidv4 } from 'uuid';\n\nimport {\n  AssetStateProfileListItem,\n  AssetStateProfileCreateRequest,\n  EntitiesService,\n  AssetStateItem,\n  EventFilter,\n} from '../../../../../api';\nimport { DynamicFormComponent } from '../../../../../shared/components/forms/dynamic-form/dynamic-form.component';\nimport { ModalListFormComponent } from '../../../../../shared/components/forms/modal-list-form/modal-list-form.component';\nimport { GridComponent } from '../../../../../shared/components/grid/grid.component';\nimport {\n  ListFieldModalConfig,\n  FormFieldConfig,\n  createTextField,\n  createNumberField,\n  createModalListField,\n  createEventFilterField,\n  createColorPickerField,\n  ActorNodeData,\n  EventNodeData,\n  FilterCondition,\n  TargetNodeData,\n  TreeSelectNode,\n} from '../../../../../shared/models';\nimport {\n  isDefined,\n  isEmpty,\n  isNullOrUndefined,\n} from '../../../../../shared/utils';\nimport { EntitySectionBaseComponent } from '../../base';\nimport { EventFilterService } from '../../../../../shared/services/event-filter.service';\n\n@Component({\n  selector: 'app-asset-state-profile-details-section',\n  imports: [\n    CommonModule,\n    ButtonModule,\n    GridComponent,\n    DynamicFormComponent,\n    MessageModule,\n  ],\n  templateUrl: './asset-state-profile-details-section.component.html',\n  styleUrl: './asset-state-profile-details-section.component.scss',\n})\nexport class AssetStateProfileDetailsSectionComponent extends EntitySectionBaseComponent<\n  AssetStateProfileListItem | AssetStateProfileCreateRequest\n> {\n  readonly ownerId = input<string | null>(null);\n  private readonly entitiesService = inject(EntitiesService);\n  private readonly eventFilterService = inject(EventFilterService);\n\n  readonly assetStateProfileDetails = computed(() => {\n    const assetStateProfileDetails = this.entity();\n    if (!isDefined(assetStateProfileDetails)) return [];\n\n    return [\n      { key: 'Name', value: assetStateProfileDetails.name },\n      {\n        key: 'States',\n        value: !isEmpty(assetStateProfileDetails.items)\n          ? assetStateProfileDetails.items?.map((item) => item.state).join(', ')\n          : 'None',\n      },\n    ];\n  });\n  assetStateProfileItemModalConfig:\n    | ListFieldModalConfig<AssetStateItem>\n    | undefined;\n  protected readonly warning = signal<string | null>(null);\n\n  constructor() {\n    super();\n\n    // Setup initial columns\n    this.columns = [\n      { field: 'key', header: '', transform: 'uppercase' },\n      { field: 'value', header: '' },\n    ];\n\n    effect(() => {\n      const assetStateProfileDetails = this.entity();\n      if (\n        isNullOrUndefined(assetStateProfileDetails?.items) ||\n        assetStateProfileDetails.items.length < 2\n      ) {\n        this.warning.set(\n          'At least two states are required for the asset state profile to be useful.',\n        );\n      } else {\n        this.warning.set(null);\n      }\n    });\n  }\n\n  protected override updateFormFields(): void {\n    const assetStateProfile = this.entity();\n\n    this.assetStateProfileItemModalConfig = {\n      modalComponent: ModalListFormComponent,\n      modalTitle: 'State Change Trigger',\n      defaultItemProvider: () => ({\n        id: uuidv4(),\n        state: '',\n        color: '#0000ff',\n        radius: 0,\n        filter: undefined,\n      }),\n      listItemFormatter: (item: AssetStateItem) =>\n        this.stateItemToListItem(item),\n      modalFields: (_item: AssetStateItem | undefined): FormFieldConfig[] => {\n        return [\n          createTextField('id', 'ID', _item?.id, {\n            name: 'id',\n            hidden: true,\n          }),\n          createTextField('state', 'State Name', _item?.name, {\n            name: 'state',\n            validations: [\n              {\n                name: 'required',\n                validator: Validators.required,\n                message: 'State Name is required',\n              },\n            ],\n          }),\n          createColorPickerField('color', 'State Color', undefined, {\n            name: 'color',\n            validations: [\n              {\n                name: 'required',\n                validator: Validators.required,\n                message: 'Color is required',\n              },\n            ],\n            layout: 'horizontal',\n            labelWidth: '1/3',\n          }),\n          createNumberField('radius', 'Radius', undefined, {\n            name: 'radius',\n            validations: [\n              {\n                name: 'required',\n                validator: Validators.required,\n                message: 'Max is required',\n              },\n              {\n                name: 'min',\n                validator: Validators.min(0),\n                message: 'Min must be 0 or greater',\n              },\n              {\n                name: 'max',\n                validator: Validators.max(1000),\n                message: 'Max must be 1000 or less',\n              },\n            ],\n            layout: 'horizontal',\n            labelWidth: '1/3',\n            hint: 'Defines the thickness of the trip line drawn on the map for applications where coverage is important.',\n            props: {\n              suffix: 'meters',\n            },\n          }),\n          createEventFilterField(\n            'filter',\n            'Event Filter',\n            undefined,\n            ['costcentres', 'groups', 'types', 'categories'],\n            {\n              name: 'filter',\n              required: true,\n              validations: [\n                {\n                  name: 'required',\n                  validator: Validators.required,\n                  message: 'Event filter is required',\n                },\n              ],\n            },\n          ),\n        ];\n      },\n      subHeader:\n        'Choose a state name and color, and configure the event filter to trigger this state.',\n    };\n    this.formFields = [\n      createTextField('name', 'Name', assetStateProfile?.name, {\n        name: 'name',\n        validations: [\n          {\n            name: 'required',\n            validator: Validators.required,\n            message: 'Name is required',\n          },\n        ],\n      }),\n    ];\n\n    if (!this.createMode()) {\n      this.formFields.push(\n        createModalListField<AssetStateItem>(\n          'items',\n          'States',\n          assetStateProfile?.items ?? [],\n          {\n            layout: 'horizontal',\n            labelWidth: '1/3',\n            name: 'items',\n            props: {\n              modalConfig: this\n                .assetStateProfileItemModalConfig as unknown as ListFieldModalConfig<unknown>,\n            },\n          },\n        ),\n      );\n    }\n  }\n\n  protected override submitChanges(\n    formData: Record<string, string | number>,\n  ): void {\n    const assetStateProfile = this.entity();\n    if (isNullOrUndefined(assetStateProfile)) return;\n    const transformedData = this.transformFormData(formData);\n    this.entitiesService\n      .updateAssetStateProfile(assetStateProfile.id, transformedData)\n      .pipe(takeUntilDestroyed(this.destroyRef))\n      .subscribe({\n        next: (response) => {\n          this.isFormEditable.set(false);\n          this.isSubmitting.set(false);\n          this.broadcastService.broadcast('entity-updated', {\n            entityType: 'asset-state-profile',\n            operation: 'update',\n            entityId: assetStateProfile.id,\n            data: response,\n          });\n        },\n        error: () => {\n          this.isFormEditable.set(true);\n          this.isSubmitting.set(false);\n        },\n      });\n  }\n\n  stateItemToListItem(item: AssetStateItem) {\n    return {\n      id: item.id,\n      title: item.state,\n      display: item.name,\n      icon: `tag`,\n      iconStyle: { color: item.color },\n    };\n  }\n\n  protected override onFormValueChange(\n    formData: Record<string, string | number | object | null | undefined>,\n  ): void {\n    const transformedData = this.transformFormData(formData);\n\n    this.formValueChange.emit(transformedData);\n  }\n\n  protected override transformFormData(\n    formData: Record<string, string | number | object | null | undefined>,\n  ): Record<string, string | number | object | null | undefined> {\n    const transformedData = { ...formData };\n\n    // Transform each item in the \"items\" array (normalize name/state and filter)\n    if (Array.isArray(transformedData['items'])) {\n      transformedData['items'] = (\n        transformedData['items'] as Record<string, unknown>[]\n      ).map((item) => {\n        const transformedItem: Record<string, unknown> = { ...item };\n\n        // Ensure radius is a number\n        if (isDefined(transformedItem['radius'])) {\n          const r = transformedItem['radius'];\n          transformedItem['radius'] = typeof r === 'string' ? Number(r) : r;\n        }\n\n        // Transform nested filter\n        if (isDefined(transformedItem['filter'])) {\n          const filter = transformedItem['filter'] as {\n            actor?: TreeSelectNode<ActorNodeData>;\n            action?: TreeSelectNode<EventNodeData>;\n            target?: TreeSelectNode<TargetNodeData>;\n            conditions?: FilterCondition[];\n          };\n\n          transformedItem['filter'] = {\n            ...filter,\n            actor: filter?.actor?.data,\n            action: filter?.action?.data,\n            target: filter?.target?.data,\n            conditions:\n              filter?.conditions?.map(({ id: _id, ...rest }) => rest) ?? [],\n          };\n        }\n\n        // Normalize \"state\" (form field) to API \"name\"\n        if (\n          isDefined(transformedItem['state']) &&\n          !isDefined(transformedItem['name'])\n        ) {\n          transformedItem['name'] = this.eventFilterService.getEventFilterText(\n            transformedItem['filter'] as EventFilter,\n          );\n        }\n\n        return transformedItem;\n      });\n    }\n\n    return transformedData;\n  }\n}\n","<div class=\"card pt-2\">\n  <div class=\"mb-4 p-2 flex justify-start items-center\">\n    <span\n      class=\"pi pi-lightbulb !text-[2.5rem]\"\n      [ngClass]=\"{ 'icon-primary': isFormEditable() }\"\n      [attr.aria-label]=\"'lightbulb icon'\"\n    ></span>\n\n    <div class=\"pl-6 flex-1\">\n      <div class=\"flex justify-between items-center\">\n        <h2 class=\"text-xl font-semibold m-0\">Asset State Profile Details</h2>\n        @if (!isFormEditable() && !createMode()) {\n          <div class=\"icon-light\">\n            <span\n              class=\"pi pi-pen-to-square action hover !text-2xl\"\n              [attr.aria-label]=\"'Edit asset state profile details'\"\n              (click)=\"onEdit()\"\n              (keydown.enter)=\"onEdit()\"\n            ></span>\n          </div>\n        }\n      </div>\n      <span\n        >Configure the state change triggers for your asset state profile.</span\n      >\n    </div>\n  </div>\n\n  @if (isFormEditable() || (createMode() && formFields.length)) {\n    <app-dynamic-form\n      [fields]=\"formFields\"\n      [actions]=\"actions\"\n      [hideActions]=\"createMode()\"\n      (formSubmit)=\"onSubmit($event)\"\n      (formValidityChange)=\"onFormValidityChange($event)\"\n      (formValueChange)=\"onFormValueChange($event)\"\n    >\n    </app-dynamic-form>\n  }\n\n  @if (!isFormEditable() && !createMode()) {\n    @if (warning()) {\n      <div class=\"mb-4\">\n        <p-message severity=\"warn\">\n          <span class=\"pi pi-exclamation-triangle mr-2\"></span>\n          {{ warning() }}</p-message\n        >\n      </div>\n    }\n    <app-grid\n      [data]=\"assetStateProfileDetails()\"\n      [columns]=\"columns\"\n      [showGridLines]=\"false\"\n      [hideHeader]=\"true\"\n      tableStyleClass=\"info-display !w-auto\"\n    ></app-grid>\n  }\n</div>\n","import { Injectable } from '@angular/core';\nimport { AdminDetailSection } from '../models';\n\nimport { AssetStateProfileResponse } from '../../../api';\nimport { FeedSectionComponent } from '../components/shared/feed-section/feed-section.component';\nimport { AssetStateProfileDetailsSectionComponent } from '../components/asset-state-profiles/asset-state-profile-details-section/asset-state-profile-details-section.component';\n\n@Injectable({ providedIn: 'root' })\nexport class AssetStateProfileSectionConfigFactory {\n  /**\n   * Create sections for assetStateProfile information\n   * @param assetStateProfile The assetStateProfile object to display in the section\n   * @returns An array of AdminDetailSection objects representing the assetStateProfile information sections\n   */\n  createAssetStateProfileInformationSections(\n    assetStateProfile: AssetStateProfileResponse | null,\n  ): AdminDetailSection[] {\n    return [\n      {\n        id: 'asset-state-profile-details',\n        title: 'Asset State Profile Details',\n        component: AssetStateProfileDetailsSectionComponent,\n        componentInputs: { entity: assetStateProfile },\n        category: 'information',\n        order: 10,\n      },\n    ];\n  }\n\n  /**\n   * Create sections for assetStateProfile changes\n   * @param assetStateProfile The assetStateProfile object to display in the section\n   * @returns An array of AdminDetailSection objects representing the assetStateProfile changes sections\n   */\n  createChangesSection(\n    assetStateProfile: AssetStateProfileResponse | null,\n  ): AdminDetailSection[] {\n    return [\n      {\n        id: 'asset-state-profile-changes',\n        title: 'Changes',\n        component: FeedSectionComponent,\n        componentInputs: {\n          entity: assetStateProfile,\n        },\n        category: 'feed',\n        order: 10,\n      },\n    ];\n  }\n\n  /**\n   * Create all assetStateProfile sections in one call\n   * @param assetStateProfile The assetStateProfile object to display in the sections\n   * @returns An array of AdminDetailSection objects representing all assetStateProfile sections\n   */\n  createAllAssetStateProfileSections(\n    assetStateProfile: AssetStateProfileResponse | null,\n  ): AdminDetailSection[] {\n    return [\n      ...this.createAssetStateProfileInformationSections(assetStateProfile),\n      ...this.createChangesSection(assetStateProfile),\n    ];\n  }\n}\n","import { Component, computed, effect, inject, input } from '@angular/core';\nimport { Validators } from '@angular/forms';\n\nimport { ButtonModule } from 'primeng/button';\nimport { InputTextModule } from 'primeng/inputtext';\n\nimport {\n  CompanyGroupCreateRequest,\n  EntitiesService,\n  CompanyGroupResponse,\n  AccountsService,\n  CompanyGroupListResponse,\n} from '../../../../../api';\nimport {\n  AssetGroupingItem,\n  createDropdownField,\n  createTextField,\n} from '../../../../../shared/models';\nimport { EntitySectionBaseComponent } from '../../base';\nimport { isDefined } from '../../../../../shared/utils';\nimport { DynamicFormComponent } from '../../../../../shared/components/forms/dynamic-form/dynamic-form.component';\nimport { GridComponent } from '../../../../../shared/components/grid/grid.component';\nimport { CommonModule } from '@angular/common';\nimport { EntityOperationRegistryService } from '../../../services/entity/entity-operation-registry.service';\nimport { firstValueFrom, Observable } from 'rxjs';\nimport { faFolder } from '@fortawesome/free-solid-svg-icons';\nimport { FontAwesomeModule } from '@fortawesome/angular-fontawesome';\nimport { AssetGroupingService } from '../../../../../shared/services/asset-grouping.service';\nimport { DEFAULT_SYSTEM_ID } from '../../../../../core/models';\n\ntype CompanyGroupEntity = CompanyGroupResponse | CompanyGroupCreateRequest;\n\n@Component({\n  selector: 'app-company-group-details-section',\n  imports: [\n    CommonModule,\n    ButtonModule,\n    InputTextModule,\n    GridComponent,\n    DynamicFormComponent,\n    FontAwesomeModule,\n  ],\n  templateUrl: './company-group-details-section.component.html',\n  styleUrl: './company-group-details-section.component.scss',\n})\nexport class CompanyGroupDetailsSectionComponent extends EntitySectionBaseComponent<CompanyGroupEntity> {\n  readonly ownerId = input<string | null>(null);\n  readonly entitiesService = inject(EntitiesService);\n  private readonly operationRegistry = inject(EntityOperationRegistryService);\n  private readonly accountsService = inject(AccountsService);\n\n  readonly companyGroupDetails = computed(() => {\n    const companyGroupDetails = this.entity();\n    if (!isDefined(companyGroupDetails)) return [];\n\n    return [\n      { key: 'Parent', value: companyGroupDetails.parent?.name ?? 'Root' },\n      { key: 'Name', value: companyGroupDetails.name },\n    ];\n  });\n\n  faFolder = faFolder;\n  companyGroupGroups: AssetGroupingItem[] = [];\n\n  constructor() {\n    super();\n\n    // Setup initial columns\n    this.columns = [\n      { field: 'key', header: '', transform: 'uppercase' },\n      { field: 'value', header: '' },\n    ];\n\n    effect(() => {\n      const ownerId = this.entity()?.owner?.id ?? this.ownerId();\n      if (isDefined(ownerId)) {\n        this.fetchCompanyGroups(ownerId)\n          .then((groups) => {\n            this.companyGroupGroups = AssetGroupingService.toAssetGroupingItems(\n              groups.items,\n            );\n            this.updateFormFields();\n          })\n          .catch(() => {});\n      }\n    });\n  }\n\n  private fetchCompanyGroups(\n    ownerId: string,\n  ): Promise<CompanyGroupListResponse> {\n    return firstValueFrom(this.accountsService.listCompanyGroups(ownerId));\n  }\n\n  protected override updateFormFields(): void {\n    const companyGroup = this.entity();\n    const parentOptions = [\n      { label: 'Root', value: DEFAULT_SYSTEM_ID },\n      ...this.companyGroupGroups.map((group) => ({\n        label: group.name,\n        value: group.id,\n      })),\n    ];\n    this.formFields = [\n      createDropdownField(\n        'parent',\n        'Parent',\n        parentOptions,\n        companyGroup?.parent?.id ?? DEFAULT_SYSTEM_ID,\n        {\n          placeholder: 'Select Parent Group',\n          validations: [\n            {\n              name: 'required',\n              validator: Validators.required,\n              message: 'Parent group is required',\n            },\n          ],\n          props: {\n            appendTo: 'body',\n          },\n        },\n      ),\n      createTextField('name', 'Name', companyGroup?.name, {\n        name: 'name',\n        validations: [\n          {\n            name: 'required',\n            validator: Validators.required,\n            message: 'Name is required',\n          },\n        ],\n      }),\n    ];\n  }\n\n  override getUpdateMethod(): (\n    id: string,\n    data: Partial<CompanyGroupEntity>,\n  ) => Observable<CompanyGroupResponse> {\n    return (\n      this.operationRegistry.getOperation<\n        CompanyGroupEntity,\n        CompanyGroupCreateRequest,\n        CompanyGroupResponse,\n        'update'\n      >('company-group', 'update') ??\n      ((id, data) => this.accountsService.updateCompanyGroup(id, data))\n    );\n  }\n\n  protected override onFormValueChange(\n    formData: Record<string, string | number | object | null>,\n  ): void {\n    const transformedData = this.transformFormData(formData);\n\n    this.formValueChange.emit(transformedData);\n  }\n\n  protected override transformFormData(\n    formData: Record<string, string | number | object | null>,\n  ) {\n    const transformedData = { ...formData };\n    if (isDefined(transformedData['parent'])) {\n      const parentId = transformedData['parent'] as string;\n      const parent = this.companyGroupGroups?.find(\n        (option) => option.id === parentId,\n      );\n      if (parent) {\n        transformedData['parent'] = {\n          id: parent.id,\n          name: parent.name,\n        };\n      } else if (parentId === DEFAULT_SYSTEM_ID) {\n        transformedData['parent'] = null; // Set to null for root\n      }\n    }\n    return transformedData;\n  }\n}\n","<div class=\"card pt-2\">\n  <div class=\"mb-4 p-2 flex justify-start items-center\">\n    <fa-icon\n      [icon]=\"faFolder\"\n      class=\"!text-[2.5rem]\"\n      [ngClass]=\"{ 'icon-primary': isFormEditable() }\"\n    ></fa-icon>\n\n    <div class=\"pl-6 flex-1\">\n      <div class=\"flex justify-between items-center\">\n        <h2 class=\"text-xl font-semibold m-0\">Company Group Details</h2>\n        @if (!isFormEditable() && !createMode()) {\n          <div class=\"icon-light\">\n            <span\n              class=\"pi pi-pen-to-square action hover !text-2xl\"\n              [attr.aria-label]=\"'Edit company group details'\"\n              (click)=\"onEdit()\"\n              (keydown.enter)=\"onEdit()\"\n            ></span>\n          </div>\n        }\n      </div>\n      <span\n        >The following information is required in order to identify your company\n        group.</span\n      >\n    </div>\n  </div>\n\n  @if (isFormEditable() || (createMode() && formFields.length)) {\n    <app-dynamic-form\n      [fields]=\"formFields\"\n      [actions]=\"actions\"\n      [hideActions]=\"createMode()\"\n      (formSubmit)=\"onSubmit($event)\"\n      (formValidityChange)=\"onFormValidityChange($event)\"\n      (formValueChange)=\"onFormValueChange($event)\"\n    >\n    </app-dynamic-form>\n  }\n\n  @if (!isFormEditable() && !createMode()) {\n    <app-grid\n      [data]=\"companyGroupDetails()\"\n      [columns]=\"columns\"\n      [showGridLines]=\"false\"\n      [hideHeader]=\"true\"\n      tableStyleClass=\"info-display !w-auto\"\n    ></app-grid>\n  }\n</div>\n","import { CommonModule } from '@angular/common';\nimport {\n  Component,\n  computed,\n  effect,\n  inject,\n  input,\n  signal,\n} from '@angular/core';\nimport { Validators } from '@angular/forms';\n\nimport { FontAwesomeModule } from '@fortawesome/angular-fontawesome';\nimport { faEnvelopeOpenText } from '@fortawesome/free-solid-svg-icons';\nimport { ButtonModule } from 'primeng/button';\nimport { InputTextModule } from 'primeng/inputtext';\nimport { Observable } from 'rxjs';\n\nimport {\n  CompanyGroupResponse,\n  CompanyGroupCreateRequest,\n  AccountsService,\n} from '../../../../../api';\nimport { DEFAULT_SYSTEM_ID } from '../../../../../core/models';\nimport { DynamicFormComponent } from '../../../../../shared/components/forms/dynamic-form/dynamic-form.component';\nimport { GridComponent } from '../../../../../shared/components/grid/grid.component';\nimport {\n  AssetGroupingItem,\n  createTextAreaField,\n  createTextField,\n} from '../../../../../shared/models';\nimport { EntityOperationRegistryService } from '../../../services/entity/entity-operation-registry.service';\nimport { EntitySectionBaseComponent } from '../../base';\nimport { isDefined } from '../../../../../shared/utils';\n\ntype CompanyGroupEntity = CompanyGroupResponse | CompanyGroupCreateRequest;\n\n@Component({\n  selector: 'app-company-group-email-template-section',\n  imports: [\n    CommonModule,\n    ButtonModule,\n    InputTextModule,\n    GridComponent,\n    DynamicFormComponent,\n    FontAwesomeModule,\n  ],\n  templateUrl: './company-group-email-template-section.component.html',\n  styleUrl: './company-group-email-template-section.component.scss',\n})\nexport class CompanyGroupEmailTemplateSectionComponent extends EntitySectionBaseComponent<CompanyGroupEntity> {\n  readonly ownerId = input<string | null>(null);\n  readonly emailType = input.required<\n    'user_invite' | 'user_reset' | 'forgot_password'\n  >();\n  private readonly operationRegistry = inject(EntityOperationRegistryService);\n  private readonly accountsService = inject(AccountsService);\n\n  defaults = {\n    user_invite: {\n      title: 'User Invite Email',\n      description:\n        'Customize the text that will be sent in the new user invitation email.',\n      template: { id: DEFAULT_SYSTEM_ID, name: 'Default' },\n      subject: 'Account creation at {{siteUrl}}',\n      body: \"You're receiving this email because an account was created for you at {{siteUrl}}.\\n\\nTo complete your profile and set a password, open the following link in your browser: {{resetUrl}}\\n\\nYou can safely ignore this message if you do not wish to complete the account creation process.\",\n    },\n    forgot_password: {\n      title: 'Forgot Password Email',\n      description:\n        'Customize the text that will be sent when a user resets their own password with the forgot password action.',\n      template: { id: DEFAULT_SYSTEM_ID, name: 'Default' },\n      subject: 'Password reset at {{siteUrl}}',\n      body: \"You're receiving this email because you entered your email address and clicked the forgot password link at {{siteUrl}}.\\n\\nTo reset your password, open the following link in your browser: {{resetUrl}}\\n\\nYou can safely ignore this message if you do not wish to reset your password.\",\n    },\n    user_reset: {\n      title: 'User Account Reset Email',\n      description:\n        'Customize the text that will be sent when an admin resets a user account.',\n      template: { id: DEFAULT_SYSTEM_ID, name: 'Default' },\n      subject: 'Account recovery at {{siteUrl}}',\n      body: \"You're receiving this email because your account was reset by an administrator at {{siteUrl}}.\\n\\nTo recover your account and set a new password, open the following link in your browser: {{resetUrl}}\\n\\nYou can safely ignore this message if you do not wish to recover your account.\",\n    },\n  };\n\n  readonly companyGroupDetails = computed(() => {\n    const companyGroupDetails = this.entity();\n    const defaultTemplate = this.defaults[this.emailType()];\n    if (!isDefined(companyGroupDetails)) return [];\n\n    return [\n      {\n        key: 'Subject',\n        value:\n          companyGroupDetails?.email?.templates?.[this.emailType()]?.subject ??\n          defaultTemplate.subject,\n      },\n      {\n        key: 'Body',\n        value:\n          companyGroupDetails?.email?.templates?.[this.emailType()]?.body ??\n          defaultTemplate.body,\n      },\n    ];\n  });\n  title = signal<string>('');\n  description = signal<string>('');\n\n  faEnvelopeOpenText = faEnvelopeOpenText;\n  companyGroupGroups: AssetGroupingItem[] = [];\n\n  constructor() {\n    super();\n\n    this.columns = [\n      { field: 'key', header: '', transform: 'uppercase' },\n      {\n        field: 'value',\n        header: '',\n        transform: 'whitespace-pre-wrap break-words',\n      },\n    ];\n\n    effect(() => {\n      this.title.set(this.defaults[this.emailType()].title);\n      this.description.set(this.defaults[this.emailType()].description);\n    });\n  }\n\n  protected override updateFormFields(): void {\n    const companyGroup = this.entity();\n\n    this.formFields = [\n      createTextField(\n        'subject',\n        'Subject',\n        companyGroup?.email?.templates?.[this.emailType()]?.subject ??\n          this.defaults[this.emailType()].subject,\n        {\n          name: 'subject',\n          validations: [\n            {\n              name: 'required',\n              validator: Validators.required,\n              message: 'Subject is required',\n            },\n          ],\n        },\n      ),\n      createTextAreaField(\n        'body',\n        'Body',\n        companyGroup?.email?.templates?.[this.emailType()]?.body ??\n          this.defaults[this.emailType()].body,\n        {\n          name: 'body',\n          validations: [\n            {\n              name: 'required',\n              validator: Validators.required,\n              message: 'Body is required',\n            },\n          ],\n        },\n      ),\n    ];\n  }\n\n  override getUpdateMethod(): (\n    id: string,\n    data: Partial<CompanyGroupEntity>,\n  ) => Observable<CompanyGroupResponse> {\n    return (\n      this.operationRegistry.getOperation<\n        CompanyGroupEntity,\n        CompanyGroupCreateRequest,\n        CompanyGroupResponse,\n        'update'\n      >('company-group', 'update') ??\n      ((id, data) => this.accountsService.updateCompanyGroup(id, data))\n    );\n  }\n}\n","<div class=\"card pt-2\">\n  <div class=\"mb-4 p-2 flex justify-start items-center\">\n    <fa-icon\n      [icon]=\"faEnvelopeOpenText\"\n      class=\"!text-[2.5rem]\"\n      [ngClass]=\"{ 'icon-primary': isFormEditable() }\"\n    ></fa-icon>\n\n    <div class=\"pl-6 flex-1\">\n      <div class=\"flex justify-between items-center\">\n        <h2 class=\"text-xl font-semibold m-0\">{{ title() }}</h2>\n        @if (!isFormEditable() && !createMode()) {\n          <div class=\"icon-light\">\n            <span\n              class=\"pi pi-pen-to-square action hover !text-2xl\"\n              [attr.aria-label]=\"'Edit company group details'\"\n              (click)=\"onEdit()\"\n              (keydown.enter)=\"onEdit()\"\n            ></span>\n          </div>\n        }\n      </div>\n      <span>{{ description() }}</span>\n    </div>\n  </div>\n\n  @if (isFormEditable() || (createMode() && formFields.length)) {\n    <app-dynamic-form\n      [fields]=\"formFields\"\n      [actions]=\"actions\"\n      [hideActions]=\"createMode()\"\n      (formSubmit)=\"onSubmit($event)\"\n      (formValidityChange)=\"onFormValidityChange($event)\"\n      (formValueChange)=\"onFormValueChange($event)\"\n    >\n    </app-dynamic-form>\n  }\n\n  @if (!isFormEditable() && !createMode()) {\n    <app-grid\n      [data]=\"companyGroupDetails()\"\n      [columns]=\"columns\"\n      [showGridLines]=\"false\"\n      [hideHeader]=\"true\"\n      tableStyleClass=\"info-display !w-auto\"\n    ></app-grid>\n  }\n</div>\n","import { Injectable } from '@angular/core';\n\nimport { CompanyGroupResponse } from '../../../api';\nimport { AdminDetailSection, AdminSectionConfiguration } from '../models';\nimport { FlexibleSectionBuilder } from './flexible-section-builder.factory';\nimport { CompanyGroupDetailsSectionComponent } from '../components/company-groups/company-group-details-section/company-group-details-section.component';\nimport { FeedSectionComponent } from '../components/shared/feed-section/feed-section.component';\nimport { CompanyGroupEmailTemplateSectionComponent } from '../components/company-groups/company-group-email-template-section/company-group-email-template-section.component';\nimport { FeatureSectionComponent } from '../components/shared/feature-section/feature-section.component';\nimport {\n  AppFeatures,\n  BackendFeatureSection,\n  FeatureValue,\n} from '../../../core/models';\n\n@Injectable({ providedIn: 'root' })\nexport class CompanyGroupSectionConfigFactory {\n  /**\n   * Create sections for company group information\n   * @param companyGroup The company group object to display in the section\n   * @returns An array of AdminDetailSection objects representing the company group information sections\n   */\n  createCompanyGroupInformationSection(\n    companyGroup: CompanyGroupResponse | null,\n  ): AdminDetailSection[] {\n    return [\n      {\n        id: 'company-group-details',\n        title: 'Company Group Details',\n        component: CompanyGroupDetailsSectionComponent,\n        componentInputs: { entity: companyGroup },\n        category: 'information',\n        order: 10,\n      },\n    ];\n  }\n\n  /**\n   * Create sections for company group email customization\n   * @param companyGroup The company group object to display in the section\n   * @returns An array of AdminDetailSection objects representing the company group email customization sections\n   */\n  createCompanyGroupEmailCustomizationSection(\n    companyGroup: CompanyGroupResponse | null,\n  ): AdminDetailSection[] {\n    return [\n      {\n        id: 'company-group-email-customization-user-invite',\n        title: 'User Invite Email',\n        component: CompanyGroupEmailTemplateSectionComponent,\n        componentInputs: { entity: companyGroup, emailType: 'user_invite' },\n        category: 'customization',\n        order: 10,\n      },\n      {\n        id: 'company-group-email-customization-user-reset',\n        title: 'User Reset Email',\n        component: CompanyGroupEmailTemplateSectionComponent,\n        componentInputs: { entity: companyGroup, emailType: 'user_reset' },\n        category: 'customization',\n        order: 20,\n      },\n      {\n        id: 'company-group-email-customization-forgot-password',\n        title: 'Forgot Password Email',\n        component: CompanyGroupEmailTemplateSectionComponent,\n        componentInputs: { entity: companyGroup, emailType: 'forgot_password' },\n        category: 'customization',\n        order: 30,\n      },\n    ];\n  }\n\n  /**\n   * Create sections for company group changes\n   * @param companyGroup The company group object to display in the section\n   * @returns An array of AdminDetailSection objects representing the company group changes sections\n   */\n  createChangesSection(\n    companyGroup: CompanyGroupResponse | null,\n  ): AdminDetailSection[] {\n    return [\n      {\n        id: 'company-group-changes',\n        title: 'Changes',\n        component: FeedSectionComponent,\n        componentInputs: {\n          entity: companyGroup,\n        },\n        category: 'feed',\n        order: 10,\n      },\n    ];\n  }\n\n  createFeaturesSection(\n    companyGroup: CompanyGroupResponse | null,\n    appFeatures: string[],\n  ): AdminDetailSection[] {\n    const features: AdminDetailSection[] = appFeatures.map((feature) => ({\n      id: `company-group-feature-${feature}`,\n      title: feature,\n      component: FeatureSectionComponent,\n      componentInputs: {\n        entity: companyGroup,\n        feature: AppFeatures[feature],\n        entityType: 'company-group',\n      },\n      category: 'features',\n      order: 10,\n    }));\n    return features;\n  }\n\n  createBackendSection(\n    companyGroup: CompanyGroupResponse | null,\n    backend: {\n      bucket: string;\n      sections: Record<string, BackendFeatureSection>;\n      defaults: Record<string, FeatureValue>;\n    },\n  ): AdminDetailSection[] {\n    return [\n      ...Object.keys(backend.sections).map((key) => ({\n        id: `company-group-backend-${key}`,\n        title: key,\n        component: FeatureSectionComponent,\n        componentInputs: {\n          entity: companyGroup,\n          feature: backend.sections[key],\n          entityType: 'company-group',\n        },\n        category: 'backend',\n        order: 10,\n      })),\n    ];\n  }\n\n  /**\n   * Create all companyGroup sections in one call\n   * @param companyGroup The companyGroup object to display in the sections\n   * @returns An array of AdminDetailSection objects representing all companyGroup sections\n   */\n  createAllCompanyGroupSections(\n    companyGroup: CompanyGroupResponse | null,\n    appFeatures: string[],\n    backend: {\n      bucket: string;\n      sections: Record<string, BackendFeatureSection>;\n      defaults: Record<string, FeatureValue>;\n    },\n  ): AdminDetailSection[] {\n    return [\n      ...this.createCompanyGroupInformationSection(companyGroup),\n      ...this.createFeaturesSection(companyGroup, appFeatures),\n      ...this.createBackendSection(companyGroup, backend),\n      ...this.createCompanyGroupEmailCustomizationSection(companyGroup),\n      ...this.createChangesSection(companyGroup),\n    ];\n  }\n\n  /**\n   * Create company group configuration with flexible layout and custom order\n   * Order: Information -> Applications -> Backend -> Email Customization -> Changes\n   * @param companyGroup The companyGroup object to display in the sections\n   * @param appFeatures Array of application features to display\n   * @param backend Backend configuration object\n   * @returns Configuration object with sections and custom layout\n   */\n  createFlexibleCompanyGroupConfiguration(\n    companyGroup: CompanyGroupResponse | null,\n    appFeatures: string[],\n    backend: {\n      bucket: string;\n      sections: Record<string, BackendFeatureSection>;\n      defaults: Record<string, FeatureValue>;\n    },\n  ): AdminSectionConfiguration {\n    return (\n      FlexibleSectionBuilder.forEntity(companyGroup)\n        // Information sections (order: 10)\n        .withSections(this.createCompanyGroupInformationSection(companyGroup))\n\n        // Features sections with custom category name \"Applications\" (order: 20)\n        .withSections(\n          this.createFeaturesSection(companyGroup, appFeatures).map(\n            (section) => ({\n              ...section,\n              category: 'applications',\n            }),\n          ),\n        )\n\n        // Backend sections (order: 30)\n        .withSections(this.createBackendSection(companyGroup, backend))\n\n        // Email customization sections (order: 40)\n        .withSections(\n          this.createCompanyGroupEmailCustomizationSection(companyGroup),\n        )\n\n        // Changes section (order: 50)\n        .withSections(this.createChangesSection(companyGroup))\n\n        // Configure custom category order and titles\n        .withCategory('information', 'Information', 10)\n        .withCategory('applications', 'Applications', 20) // Custom title for features\n        .withCategory('backend', 'Backend', 30)\n        .withCategory('customization', 'Email Customization', 40)\n        .withCategory('feed', 'Changes', 50)\n\n        // Set default expanded category and behavior\n        .withDefaultExpanded('information')\n        .withMultipleExpansion(false)\n        .build()\n    );\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { EventFilterService } from './event-filter.service';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class GeoFilterService extends EventFilterService {\n  override ACTION_EVENTS = {\n    geocoding: ['speed'],\n  };\n\n  override ACTION_TARGETS = {\n    zoneevent: 'zones',\n    assetstatechangeevent: 'state',\n  };\n\n  override EVENT_CONDITIONS = {\n    speedlimit: {\n      mode: { type: 'dropdown', values: ['greater', 'less', 'equals'] },\n      speed: { type: 'speed' },\n    },\n    routenumber: {\n      mode: {\n        type: 'dropdown',\n        values: [\n          'equals',\n          'starts',\n          'contains',\n          'ends',\n          'not_equals',\n          'not_starts',\n          'not_contains',\n          'not_ends',\n        ],\n      },\n      value: { type: 'value' },\n    },\n    roadname: {\n      mode: {\n        type: 'dropdown',\n        values: [\n          'equals',\n          'starts',\n          'contains',\n          'ends',\n          'not_equals',\n          'not_starts',\n          'not_contains',\n          'not_ends',\n        ],\n      },\n      value: { type: 'value' },\n    },\n    carriageway: {\n      mode: { type: 'dropdown', values: ['single', 'dual'] },\n    },\n    boundary: {\n      boundary: {\n        type: 'dropdown',\n        values: ['suburb', 'town', 'state', 'country'],\n      },\n      mode: {\n        type: 'dropdown',\n        values: [\n          'equals',\n          'starts',\n          'contains',\n          'ends',\n          'not_equals',\n          'not_starts',\n          'not_contains',\n          'not_ends',\n        ],\n      },\n      value: { type: 'value' },\n    },\n    time: {\n      mode: { type: 'dropdown', values: ['inside', 'outside'] },\n      time1: { type: 'time' },\n      time2: { type: 'time' },\n      dow: { type: 'checklist', values: ['0', '1', '2', '3', '4', '5', '6'] },\n    },\n    zone: {\n      mode: { type: 'dropdown', values: ['inside', 'outside'] },\n      zone: { type: 'dropdown', values: this.getZoneSelectionTree },\n    },\n\n    digital: {\n      input: {\n        type: 'dropdown',\n        values: () => this.getIoTargetList(['digital_input']),\n        linkedTo: 'state',\n      },\n      state: { type: 'dropdown', values: this.getIoValues },\n    },\n    state: {\n      profile: {\n        type: 'dropdown',\n        values: this.getStateTargetList,\n        linkedTo: 'state',\n      },\n      state: { type: 'dropdown', values: this.getStateValues },\n    },\n  };\n}\n","import { CommonModule } from '@angular/common';\nimport { Component, computed, inject, input } from '@angular/core';\nimport { Validators } from '@angular/forms';\n\nimport { ButtonModule } from 'primeng/button';\nimport { v4 as uuidv4 } from 'uuid';\n\nimport {\n  RoadProfileListItem,\n  RoadProfileCreateRequest,\n  EntitiesService,\n  RoadSpeedModifierEntry,\n  RoadProfileResponse,\n} from '../../../../../api';\nimport { DynamicFormComponent } from '../../../../../shared/components/forms/dynamic-form/dynamic-form.component';\nimport { GridComponent } from '../../../../../shared/components/grid/grid.component';\nimport {\n  ActorNodeData,\n  createDropdownField,\n  createEventFilterField,\n  createModalListField,\n  createNumberField,\n  createTextField,\n  EventNodeData,\n  FilterCondition,\n  FormFieldConfig,\n  ListFieldModalConfig,\n  MeasurementUnitType,\n  TargetNodeData,\n  TreeSelectNode,\n} from '../../../../../shared/models';\nimport { isDefined } from '../../../../../shared/utils';\nimport { EntitySectionBaseComponent } from '../../base';\nimport { ModalListFormComponent } from '../../../../../shared/components/forms/modal-list-form/modal-list-form.component';\nimport { MessageModule } from 'primeng/message';\nimport { MeasurementUnitsService } from '../../../../../shared/services/measurement-units/measurement-units.service';\nimport { faRoad } from '@fortawesome/free-solid-svg-icons';\nimport { FontAwesomeModule } from '@fortawesome/angular-fontawesome';\nimport { GeoFilterService } from '../../../../../shared/services/geo-filter.service';\nimport { Observable } from 'rxjs';\nimport { EntityOperationRegistryService } from '../../../services/entity/entity-operation-registry.service';\n\ntype FormValue = string | number | object | null | undefined;\n@Component({\n  selector: 'app-road-profile-details-section',\n  imports: [\n    CommonModule,\n    ButtonModule,\n    GridComponent,\n    DynamicFormComponent,\n    MessageModule,\n    FontAwesomeModule,\n  ],\n  templateUrl: './road-profile-details-section.component.html',\n  styleUrl: './road-profile-details-section.component.scss',\n})\nexport class RoadProfileDetailsSectionComponent extends EntitySectionBaseComponent<\n  RoadProfileListItem | RoadProfileCreateRequest\n> {\n  readonly ownerId = input<string | null>(null);\n  private readonly entitiesService = inject(EntitiesService);\n  private readonly measurementUnitsService = inject(MeasurementUnitsService);\n  private readonly filterService = inject(GeoFilterService);\n  private readonly operationRegistry = inject(EntityOperationRegistryService);\n\n  readonly roadProfileDetails = computed(() => {\n    const roadProfileDetails = this.entity();\n    if (!isDefined(roadProfileDetails)) return [];\n\n    return [\n      { key: 'Name', value: roadProfileDetails.name },\n      {\n        key: 'Speed Modifiers',\n        value:\n          roadProfileDetails.speedModifiers &&\n          roadProfileDetails.speedModifiers.length > 0\n            ? roadProfileDetails.speedModifiers\n                ?.map((item) => `${item.name} (${item.speed}${item.unit})`)\n                .join(', ')\n            : 'None',\n      },\n    ];\n  });\n  roadProfileSpeedModifiersModalConfig:\n    | ListFieldModalConfig<RoadSpeedModifierEntry>\n    | undefined;\n\n  faIconRoad = faRoad;\n\n  constructor() {\n    super();\n\n    // Setup initial columns\n    this.columns = [\n      { field: 'key', header: '', transform: 'uppercase' },\n      { field: 'value', header: '' },\n    ];\n  }\n\n  protected override updateFormFields(): void {\n    const roadProfile = this.entity();\n\n    this.roadProfileSpeedModifiersModalConfig = {\n      modalComponent: ModalListFormComponent,\n      modalTitle: 'Road Speed Modifier',\n      subHeader:\n        'Create a filter to match certain geographic conditions, and specify a new speed limit for your assets.',\n      defaultItemProvider: () => ({\n        id: uuidv4(),\n        name: '',\n        filter: undefined,\n        speed: 0,\n        unit: RoadSpeedModifierEntry.UnitEnum.Kmh,\n      }),\n      listItemFormatter: (item: RoadSpeedModifierEntry) => {\n        return this.stateItemToListItem(item);\n      },\n      modalFields: (\n        item: RoadSpeedModifierEntry | undefined,\n      ): FormFieldConfig[] => {\n        return [\n          createTextField('id', 'ID', item?.id, {\n            name: 'id',\n            hidden: true,\n          }),\n          createTextField('name', 'Name', item?.name, {\n            name: 'name',\n            validations: [\n              {\n                name: 'required',\n                validator: Validators.required,\n                message: 'Name is required',\n              },\n            ],\n          }),\n          createEventFilterField('filter', 'Filter', item?.filter, [], {\n            name: 'filter',\n            required: true,\n            validations: [\n              {\n                name: 'required',\n                validator: Validators.required,\n                message: 'filter is required',\n              },\n            ],\n            props: {\n              filterService: this.filterService,\n              requireActorBeforeAction: false,\n            },\n          }),\n          createNumberField('speed', 'Speed', item?.speed, {\n            name: 'speed',\n            validations: [\n              {\n                name: 'required',\n                validator: Validators.required,\n                message: 'Speed is required',\n              },\n              {\n                name: 'min',\n                validator: Validators.min(0),\n                message: 'Min must be 0 or greater',\n              },\n              {\n                name: 'max',\n                validator: Validators.max(1000),\n                message: 'Max must be 1000 or less',\n              },\n            ],\n            layout: 'horizontal',\n            labelWidth: '1/3',\n            props: {\n              suffix: this.measurementUnitsService.unit(\n                MeasurementUnitType.SPEED,\n              ),\n            },\n          }),\n          createDropdownField(\n            'unit',\n            'Unit',\n            [\n              { value: 'kmh', label: 'km/h' },\n              { value: 'mph', label: 'mph' },\n            ],\n            item?.unit,\n            {\n              name: 'unit',\n              validations: [\n                {\n                  name: 'required',\n                  validator: Validators.required,\n                  message: 'Unit is required',\n                },\n              ],\n            },\n          ),\n        ];\n      },\n    };\n    this.formFields = [\n      createTextField('name', 'Name', roadProfile?.name, {\n        name: 'name',\n        validations: [\n          {\n            name: 'required',\n            validator: Validators.required,\n            message: 'Name is required',\n          },\n        ],\n      }),\n    ];\n\n    if (!this.createMode()) {\n      this.formFields.push(\n        createModalListField<RoadSpeedModifierEntry>(\n          'speedModifiers',\n          'Speed Modifiers',\n          roadProfile?.speedModifiers ?? [],\n          {\n            layout: 'horizontal',\n            labelWidth: '1/3',\n            name: 'speedModifiers',\n            props: {\n              modalConfig: this\n                .roadProfileSpeedModifiersModalConfig as unknown as ListFieldModalConfig<unknown>,\n            },\n          },\n        ),\n      );\n    }\n  }\n\n  override getUpdateMethod(): (\n    id: string,\n    data: Partial<RoadProfileResponse | RoadProfileCreateRequest>,\n  ) => Observable<RoadProfileResponse> {\n    return (\n      this.operationRegistry.getOperation<\n        RoadProfileResponse | RoadProfileCreateRequest,\n        RoadProfileCreateRequest,\n        RoadProfileResponse,\n        'update'\n      >('road-profile', 'update') ??\n      ((id, data) => this.entitiesService.updateRoadProfile(id, data))\n    );\n  }\n\n  stateItemToListItem(item: RoadSpeedModifierEntry) {\n    return {\n      id: item.id,\n      title: `${item.name} (${item.speed}${item.unit})`,\n      display: this.filterService.getEventFilterText(item.filter),\n      icon: 'pi pi-gauge',\n    };\n  }\n\n  protected override onFormValueChange(\n    formData: Record<string, FormValue>,\n  ): void {\n    const transformedData = this.transformFormData(formData);\n\n    this.formValueChange.emit(transformedData);\n  }\n\n  protected override transformFormData(\n    formData: Record<string, unknown>,\n  ): Record<string, string | number | object | null | undefined> {\n    const transformedData = { ...formData };\n\n    if (\n      isDefined(transformedData?.['speedModifiers']) &&\n      Array.isArray(transformedData['speedModifiers'])\n    ) {\n      transformedData['speedModifiers'].forEach((element) => {\n        const filter = element.filter as {\n          actor: TreeSelectNode<ActorNodeData> | undefined;\n          action: TreeSelectNode<EventNodeData> | undefined;\n          target: TreeSelectNode<TargetNodeData> | undefined;\n          conditions: FilterCondition[];\n        };\n        element.filter = {\n          ...filter,\n          actor: filter?.['actor']?.['data'] ?? filter?.['actor'],\n          action: filter?.['action']?.['data'] ?? filter?.['action'],\n          target: filter?.['target']?.['data'] ?? filter?.['target'],\n          conditions: filter?.['conditions']?.map((condition) => {\n            const { id: _, ...rest } = condition;\n            return rest;\n          }),\n        };\n      });\n    }\n\n    return transformedData as Record<\n      string,\n      string | number | object | null | undefined\n    >;\n  }\n}\n","<div class=\"card pt-2\">\n  <div class=\"mb-4 p-2 flex justify-start items-center\">\n    <fa-icon\n      [icon]=\"faIconRoad\"\n      class=\"!text-[2.5rem]\"\n      [ngClass]=\"{ 'icon-primary': isFormEditable() }\"\n    ></fa-icon>\n\n    <div class=\"pl-6 flex-1\">\n      <div class=\"flex justify-between items-center\">\n        <h2 class=\"text-xl font-semibold m-0\">Road Profile Details</h2>\n        @if (!isFormEditable() && !createMode()) {\n          <div class=\"icon-light\">\n            <span\n              class=\"pi pi-pen-to-square action hover !text-2xl\"\n              [attr.aria-label]=\"'Edit road profile details'\"\n              (click)=\"onEdit()\"\n              (keydown.enter)=\"onEdit()\"\n            ></span>\n          </div>\n        }\n      </div>\n      <span\n        >Configure the road modifiers that you want to apply to this profile\n        below.</span\n      >\n    </div>\n  </div>\n\n  @if (isFormEditable() || (createMode() && formFields.length)) {\n    <app-dynamic-form\n      [fields]=\"formFields\"\n      [actions]=\"actions\"\n      [hideActions]=\"createMode()\"\n      (formSubmit)=\"onSubmit($event)\"\n      (formValidityChange)=\"onFormValidityChange($event)\"\n      (formValueChange)=\"onFormValueChange($event)\"\n    >\n    </app-dynamic-form>\n  }\n\n  @if (!isFormEditable() && !createMode()) {\n    <app-grid\n      [data]=\"roadProfileDetails()\"\n      [columns]=\"columns\"\n      [showGridLines]=\"false\"\n      [hideHeader]=\"true\"\n      tableStyleClass=\"info-display !w-auto\"\n    ></app-grid>\n  }\n</div>\n","import { Injectable } from '@angular/core';\nimport { AdminDetailSection } from '../models';\n\nimport { RoadProfileResponse } from '../../../api';\nimport { RoadProfileDetailsSectionComponent } from '../components/road-profiles/road-profile-details-section/road-profile-details-section.component';\nimport { FeedSectionComponent } from '../components/shared/feed-section/feed-section.component';\n\n@Injectable({ providedIn: 'root' })\nexport class RoadProfileSectionConfigFactory {\n  /**\n   * Create sections for roadProfile information\n   * @param roadProfile The roadProfile object to display in the section\n   * @returns An array of AdminDetailSection objects representing the roadProfile information sections\n   */\n  createRoadProfileInformationSections(\n    roadProfile: RoadProfileResponse | null,\n  ): AdminDetailSection[] {\n    return [\n      {\n        id: 'road-profile-details',\n        title: 'Road Profile Details',\n        component: RoadProfileDetailsSectionComponent,\n        componentInputs: { entity: roadProfile },\n        category: 'information',\n        order: 10,\n      },\n    ];\n  }\n\n  /**\n   * Create sections for roadProfile changes\n   * @param roadProfile The roadProfile object to display in the section\n   * @returns An array of AdminDetailSection objects representing the roadProfile changes sections\n   */\n  createChangesSection(\n    roadProfile: RoadProfileResponse | null,\n  ): AdminDetailSection[] {\n    return [\n      {\n        id: 'road-profile-changes',\n        title: 'Changes',\n        component: FeedSectionComponent,\n        componentInputs: {\n          entity: roadProfile,\n        },\n        category: 'feed',\n        order: 10,\n      },\n    ];\n  }\n\n  /**\n   * Create all roadProfile sections in one call\n   * @param roadProfile The roadProfile object to display in the sections\n   * @returns An array of AdminDetailSection objects representing all roadProfile sections\n   */\n  createAllRoadProfileSections(\n    roadProfile: RoadProfileResponse | null,\n  ): AdminDetailSection[] {\n    return [\n      ...this.createRoadProfileInformationSections(roadProfile),\n      ...this.createChangesSection(roadProfile),\n    ];\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport {\n  Component,\n  computed,\n  effect,\n  inject,\n  input,\n  OnInit,\n  signal,\n} from '@angular/core';\nimport { takeUntilDestroyed } from '@angular/core/rxjs-interop';\n\nimport { Validators } from '@angular/forms';\nimport { ButtonModule } from 'primeng/button';\nimport { MessageModule } from 'primeng/message';\nimport { v4 as uuidv4 } from 'uuid';\n\nimport {\n  GeoLockProfileListItem,\n  GeoLockProfileCreateRequest,\n  EntitiesService,\n  GeoLockTimeItem,\n} from '../../../../../api';\nimport { DynamicFormComponent } from '../../../../../shared/components/forms/dynamic-form/dynamic-form.component';\nimport { ModalListFormComponent } from '../../../../../shared/components/forms/modal-list-form/modal-list-form.component';\nimport { GridComponent } from '../../../../../shared/components/grid/grid.component';\nimport {\n  ListFieldModalConfig,\n  FormFieldConfig,\n  createTextField,\n  createNumberField,\n  createModalListField,\n  MeasurementUnitType,\n  createDateField,\n  createDropdownField,\n  createListboxField,\n} from '../../../../../shared/models';\nimport {\n  isDefined,\n  isEmpty,\n  isNullOrUndefined,\n} from '../../../../../shared/utils';\nimport { EntitySectionBaseComponent } from '../../base';\nimport { MeasurementUnitsService } from '../../../../../shared/services/measurement-units/measurement-units.service';\nimport { HttpClient } from '@angular/common/http';\nimport { AuthDataService } from '../../../../../core/services/auth-data.service';\nimport { WEEKDAY_OPTIONS } from '../../../models';\n\ntype FormDataType = Record<string, string | number | object | null | undefined>;\n\n@Component({\n  selector: 'app-geo-lock-profile-details-section',\n  imports: [\n    CommonModule,\n    ButtonModule,\n    GridComponent,\n    DynamicFormComponent,\n    MessageModule,\n  ],\n  templateUrl: './geo-lock-profile-details-section.component.html',\n  styleUrl: './geo-lock-profile-details-section.component.scss',\n})\nexport class GeoLockProfileDetailsSectionComponent\n  extends EntitySectionBaseComponent<\n    GeoLockProfileListItem | GeoLockProfileCreateRequest\n  >\n  implements OnInit\n{\n  readonly ownerId = input<string | null>(null);\n  private readonly entitiesService = inject(EntitiesService);\n  private readonly measurementUnitsService = inject(MeasurementUnitsService);\n  private readonly http = inject(HttpClient);\n  private readonly authDataService = inject(AuthDataService);\n\n  readonly geoLockProfileDetails = computed(() => {\n    const geoLockProfileDetails = this.entity();\n    if (!isDefined(geoLockProfileDetails)) return [];\n\n    return [\n      { key: 'Name', value: geoLockProfileDetails.name },\n      {\n        key: 'Radius',\n        value: isDefined(geoLockProfileDetails.radiusKm)\n          ? `${this.measurementUnitsService.fromBackend(\n              MeasurementUnitType.DISTANCE,\n              geoLockProfileDetails.radiusKm,\n              2,\n            )} ${this.measurementUnitsService.getUnitConfig(\n              MeasurementUnitType.DISTANCE,\n            )}`\n          : 'None',\n      },\n      {\n        key: 'Times',\n        value: isEmpty(geoLockProfileDetails.times)\n          ? 'None'\n          : (geoLockProfileDetails.times ?? [])\n              .map((time) => {\n                const listItem = this.stateItemToListItem(time);\n                return `${listItem?.title} - (${listItem?.display})`;\n              })\n              .join('\\n'),\n      },\n    ];\n  });\n  geoLockProfileItemModalConfig:\n    | ListFieldModalConfig<GeoLockTimeItem>\n    | undefined;\n  protected readonly warning = signal<string | null>(null);\n  timezones: { label: string; value: string }[] = [];\n\n  constructor() {\n    super();\n\n    // Setup initial columns\n    this.columns = [\n      { field: 'key', header: '', transform: 'uppercase' },\n      { field: 'value', header: '', transform: 'whitespace-pre-line' },\n    ];\n\n    effect(() => {\n      const geoLockProfileDetails = this.entity();\n      if (\n        isNullOrUndefined(geoLockProfileDetails?.times) ||\n        geoLockProfileDetails.times.length < 1\n      ) {\n        this.warning.set(\n          'At least one time entry is required for the geo lock profile to be useful.',\n        );\n      } else {\n        this.warning.set(null);\n      }\n    });\n  }\n\n  ngOnInit(): void {\n    this.loadTimezones();\n  }\n\n  private loadTimezones(): void {\n    this.http\n      .get<{ id: string; name: string }[]>('/assets/docs/timezones.json')\n      .pipe(takeUntilDestroyed(this.destroyRef))\n      .subscribe((data) => {\n        this.timezones = data\n          .map((tz) => ({ label: tz.id, value: tz.id }))\n          .sort((a, b) => a.label.localeCompare(b.label));\n        this.updateFormFields();\n      });\n  }\n\n  protected override updateFormFields(): void {\n    const geoLockProfile = this.entity();\n\n    this.geoLockProfileItemModalConfig = {\n      modalComponent: ModalListFormComponent,\n      modalTitle: 'Geo lock Times',\n      defaultItemProvider: () =>\n        ({\n          id: uuidv4(),\n          from: '00:00',\n          to: '23:59',\n          timeZoneId: this.authDataService.getUserProfile()?.timeZoneId ?? '',\n          days: ['0', '1', '2', '3', '4', '5', '6'],\n        }) as unknown as GeoLockTimeItem,\n      listItemFormatter: (item: GeoLockTimeItem) =>\n        this.stateItemToListItem(item),\n      modalFields: (item: GeoLockTimeItem | undefined): FormFieldConfig[] => {\n        return [\n          createTextField('id', 'ID', item?.id, {\n            name: 'id',\n            hidden: true,\n          }),\n          createDateField('from', 'From', '', {\n            name: 'from',\n            placeholder: 'Select time',\n            props: {\n              timeOnly: true,\n              showSeconds: true,\n            },\n            style: { width: '100%' },\n          }),\n          createDateField('to', 'To', '', {\n            name: 'to',\n            placeholder: 'Select time',\n            props: {\n              timeOnly: true,\n              showSeconds: true,\n            },\n            style: { width: '100%' },\n          }),\n          createDropdownField('timeZoneId', 'Time Zone', this.timezones, '', {\n            layout: 'horizontal',\n            labelWidth: '1/3',\n            placeholder: 'Select timezone',\n            name: 'timeZone',\n            props: {\n              appendTo: 'body',\n            },\n          }),\n          createListboxField('days', 'Days', [], WEEKDAY_OPTIONS, {\n            name: 'days',\n            validations: [\n              {\n                name: 'required',\n                validator: Validators.required,\n                message: 'Weekdays is required',\n              },\n            ],\n            props: {\n              checkmark: true,\n              multiple: true,\n            },\n          }),\n        ];\n      },\n      subHeader:\n        'Configure the days of the week and times in which the lock is active.',\n    };\n    this.formFields = [\n      createTextField('name', 'Name', geoLockProfile?.name, {\n        name: 'name',\n        validations: [\n          {\n            name: 'required',\n            validator: Validators.required,\n            message: 'Name is required',\n          },\n        ],\n      }),\n      createNumberField(\n        'radiusKm',\n        'Radius',\n        isDefined(geoLockProfile?.radiusKm)\n          ? this.measurementUnitsService.fromBackend(\n              MeasurementUnitType.DISTANCE,\n              geoLockProfile?.radiusKm ?? 0,\n              2,\n            )\n          : undefined,\n        {\n          name: 'radiusKm',\n          validations: [\n            {\n              name: 'required',\n              validator: Validators.required,\n              message: 'Radius is required',\n            },\n          ],\n          props: {\n            suffix: this.measurementUnitsService.getUnitConfig(\n              MeasurementUnitType.DISTANCE,\n            ),\n          },\n        },\n      ),\n    ];\n\n    if (!this.createMode()) {\n      this.formFields.push(\n        createModalListField<GeoLockTimeItem>(\n          'times',\n          'Geo Lock Times',\n          geoLockProfile?.times ?? [],\n          {\n            layout: 'horizontal',\n            labelWidth: '1/3',\n            name: 'times',\n            props: {\n              modalConfig: this\n                .geoLockProfileItemModalConfig as unknown as ListFieldModalConfig<unknown>,\n            },\n          },\n        ),\n      );\n    }\n  }\n\n  protected override submitChanges(\n    formData: Record<string, string | number>,\n  ): void {\n    const geoLockProfile = this.entity();\n    if (isNullOrUndefined(geoLockProfile)) return;\n    const transformedData = this.transformFormData(formData);\n    this.entitiesService\n      .updateGeoLockProfile(geoLockProfile.id, transformedData)\n      .pipe(takeUntilDestroyed(this.destroyRef))\n      .subscribe({\n        next: (response) => {\n          this.isFormEditable.set(false);\n          this.isSubmitting.set(false);\n          this.broadcastService.broadcast('entity-updated', {\n            entityType: 'geo-lock-profile',\n            operation: 'update',\n            entityId: geoLockProfile.id,\n            data: response,\n          });\n        },\n        error: () => {\n          this.isFormEditable.set(true);\n          this.isSubmitting.set(false);\n        },\n      });\n  }\n\n  stateItemToListItem(item: GeoLockTimeItem) {\n    return {\n      id: item.id,\n      title: item.from && item.to ? `${item.from} to ${item.to}` : '',\n      display: isDefined(item.days)\n        ? item.days\n            ?.map(\n              (day) =>\n                WEEKDAY_OPTIONS.find((option) => option.value === String(day))\n                  ?.label ?? day,\n            )\n            .join(', ')\n        : '',\n      icon: `clock`,\n    };\n  }\n\n  protected override onFormValueChange(formData: FormDataType): void {\n    const transformedData = this.transformFormData(formData);\n\n    this.formValueChange.emit(transformedData);\n  }\n\n  protected override transformFormData(formData: FormDataType): FormDataType {\n    const transformedData = { ...formData };\n\n    if (Array.isArray(transformedData['times'])) {\n      transformedData['times'] = (\n        transformedData['times'] as GeoLockTimeItem[]\n      ).map((item) => ({\n        id: item.id,\n        from: item.from.split(':').length === 2 ? `${item.from}:00` : item.from,\n        to: item.to.split(':').length === 2 ? `${item.to}:00` : item.to,\n        timeZoneId: item.timeZoneId,\n        days: item.days,\n      }));\n    }\n\n    if (isDefined(formData['radiusKm']) && formData['radiusKm'] !== '') {\n      transformedData['radiusKm'] = this.measurementUnitsService.toBackend(\n        MeasurementUnitType.DISTANCE,\n        Number(formData['radiusKm']),\n      );\n    }\n\n    return transformedData;\n  }\n}\n","<div class=\"card pt-2\">\n  <div class=\"mb-4 p-2 flex justify-start items-center\">\n    <span\n      class=\"pi pi-lock !text-[2.5rem]\"\n      [ngClass]=\"{ 'icon-primary': isFormEditable() }\"\n      [attr.aria-label]=\"'lock icon'\"\n    ></span>\n\n    <div class=\"pl-6 flex-1\">\n      <div class=\"flex justify-between items-center\">\n        <h2 class=\"text-xl font-semibold m-0\">Geo Lock Profile Details</h2>\n        @if (!isFormEditable() && !createMode()) {\n          <div class=\"icon-light\">\n            <span\n              class=\"pi pi-pen-to-square action hover !text-2xl\"\n              [attr.aria-label]=\"'Edit geo lock profile details'\"\n              (click)=\"onEdit()\"\n              (keydown.enter)=\"onEdit()\"\n            ></span>\n          </div>\n        }\n      </div>\n      <span\n        >Configure the state change triggers for your geo lock profile.</span\n      >\n    </div>\n  </div>\n\n  @if (isFormEditable() || (createMode() && formFields.length)) {\n    <app-dynamic-form\n      [fields]=\"formFields\"\n      [actions]=\"actions\"\n      [hideActions]=\"createMode()\"\n      (formSubmit)=\"onSubmit($event)\"\n      (formValidityChange)=\"onFormValidityChange($event)\"\n      (formValueChange)=\"onFormValueChange($event)\"\n    >\n    </app-dynamic-form>\n  }\n\n  @if (!isFormEditable() && !createMode()) {\n    @if (warning()) {\n      <div class=\"mb-4\">\n        <p-message severity=\"warn\">\n          <span class=\"pi pi-exclamation-triangle mr-2\"></span>\n          {{ warning() }}</p-message\n        >\n      </div>\n    }\n    <app-grid\n      [data]=\"geoLockProfileDetails()\"\n      [columns]=\"columns\"\n      [showGridLines]=\"false\"\n      [hideHeader]=\"true\"\n      tableStyleClass=\"info-display !w-auto\"\n    ></app-grid>\n  }\n</div>\n","import { Injectable } from '@angular/core';\nimport { AdminDetailSection } from '../models';\n\nimport { GeoLockProfileResponse } from '../../../api';\nimport { FeedSectionComponent } from '../components/shared/feed-section/feed-section.component';\nimport { GeoLockProfileDetailsSectionComponent } from '../components/geo-lock-profiles/geo-lock-profile-details-section/geo-lock-profile-details-section.component';\n\n@Injectable({ providedIn: 'root' })\nexport class GeoLockProfileSectionConfigFactory {\n  /**\n   * Create sections for geoLockProfile information\n   * @param geoLockProfile The geoLockProfile object to display in the section\n   * @returns An array of AdminDetailSection objects representing the geoLockProfile information sections\n   */\n  createGeoLockProfileInformationSections(\n    geoLockProfile: GeoLockProfileResponse | null,\n  ): AdminDetailSection[] {\n    return [\n      {\n        id: 'geo-lock-profile-details',\n        title: 'Geo Lock Profile Details',\n        component: GeoLockProfileDetailsSectionComponent,\n        componentInputs: { entity: geoLockProfile },\n        category: 'information',\n        order: 10,\n      },\n    ];\n  }\n\n  /**\n   * Create sections for geoLockProfile changes\n   * @param geoLockProfile The geoLockProfile object to display in the section\n   * @returns An array of AdminDetailSection objects representing the geoLockProfile changes sections\n   */\n  createChangesSection(\n    geoLockProfile: GeoLockProfileResponse | null,\n  ): AdminDetailSection[] {\n    return [\n      {\n        id: 'geo-lock-profile-changes',\n        title: 'Changes',\n        component: FeedSectionComponent,\n        componentInputs: {\n          entity: geoLockProfile,\n        },\n        category: 'feed',\n        order: 10,\n      },\n    ];\n  }\n\n  /**\n   * Create all geoLockProfile sections in one call\n   * @param geoLockProfile The geoLockProfile object to display in the sections\n   * @returns An array of AdminDetailSection objects representing all geoLockProfile sections\n   */\n  createAllGeoLockProfileSections(\n    geoLockProfile: GeoLockProfileResponse | null,\n  ): AdminDetailSection[] {\n    return [\n      ...this.createGeoLockProfileInformationSections(geoLockProfile),\n      ...this.createChangesSection(geoLockProfile),\n    ];\n  }\n}\n","import {\n  Component,\n  computed,\n  effect,\n  inject,\n  input,\n  OnInit,\n} from '@angular/core';\nimport { DeviceTypeResponse, DeviceTypesService } from '../../../../../api';\nimport { EntitySectionBaseComponent } from '../../base';\nimport { isNullOrUndefined, isDefined } from '../../../../../shared/utils';\nimport { EntityOperationRegistryService } from '../../../services/entity/entity-operation-registry.service';\nimport { tap, firstValueFrom } from 'rxjs';\nimport { Validators } from '@angular/forms';\nimport { DynamicFormComponent } from '../../../../../shared/components/forms/dynamic-form/dynamic-form.component';\nimport { GridComponent } from '../../../../../shared/components/grid/grid.component';\nimport {\n  createModalListField,\n  createTextField,\n  createToggleSwitchField,\n  createNumberField,\n  FormFieldConfig,\n  ListFieldModalConfig,\n} from '../../../../../shared/models';\nimport { ModalListFormComponent } from '../../../../../shared/components/forms/modal-list-form/modal-list-form.component';\nimport { ConfirmationService } from 'primeng/api';\n\ninterface IOInputItem {\n  name: string;\n  optional: boolean;\n  // Digital output specific fields\n  canPulse?: boolean;\n  canToggle?: boolean;\n  maxPulseSeconds?: number;\n  minPulseSeconds?: number;\n}\n\ninterface IOTypeConfig {\n  additionalFields: string[];\n  getDefaultValues: () => Partial<IOInputItem>;\n  getModalFields: (item: IOInputItem | undefined) => FormFieldConfig[];\n  addPropertiesToDisplayText: (item: IOInputItem, parts: string[]) => void;\n  addPropertiesToSaveObject: (item: IOInputItem, inputObject: Record<string, unknown>) => void;\n  addPropertiesToItem: (item: Record<string, unknown>, baseItem: IOInputItem) => void;\n}\n\n@Component({\n  selector: 'app-device-types-io-section',\n  imports: [DynamicFormComponent, GridComponent],\n  templateUrl: './device-types-io-section.component.html',\n  styleUrl: './device-types-io-section.component.scss',\n})\nexport class DeviceTypesIoSectionComponent\n  extends EntitySectionBaseComponent<DeviceTypeResponse>\n  implements OnInit\n{\n  private readonly ioTypeConfigs: Record<string, IOTypeConfig> = {\n    digital_output: {\n      additionalFields: ['canPulse', 'canToggle', 'maxPulseSeconds', 'minPulseSeconds'],\n      getDefaultValues: () => ({\n        canPulse: false,\n        canToggle: true,\n        maxPulseSeconds: 0,\n        minPulseSeconds: 0,\n      }),\n      getModalFields: (item: IOInputItem | undefined) => [\n        createToggleSwitchField(\n          'canToggle',\n          'Can Toggle',\n          item?.canToggle ?? true,\n          {\n            hint: 'When enabled, this output can be toggled on/off.',\n            props: {\n              layout: 'horizontal',\n              labelWidth: '1/3',\n              onLabel: 'Yes',\n              offLabel: 'No',\n            },\n          },\n        ),\n        createToggleSwitchField(\n          'canPulse',\n          'Can Pulse',\n          item?.canPulse ?? false,\n          {\n            hint: 'When enabled, this output can pulse for a specified duration.',\n            props: {\n              layout: 'horizontal',\n              labelWidth: '1/3',\n              onLabel: 'Yes',\n              offLabel: 'No',\n            },\n          },\n        ),\n        createNumberField(\n          'minPulseSeconds',\n          'Min Pulse Seconds',\n          item?.minPulseSeconds ?? 0,\n          {\n            hint: 'Minimum pulse duration in seconds.',\n            props: {\n              layout: 'horizontal',\n              labelWidth: '1/3',\n              min: 0,\n              step: 1,\n            },\n          },\n        ),\n        createNumberField(\n          'maxPulseSeconds',\n          'Max Pulse Seconds',\n          item?.maxPulseSeconds ?? 0,\n          {\n            hint: 'Maximum pulse duration in seconds.',\n            props: {\n              layout: 'horizontal',\n              labelWidth: '1/3',\n              min: 0,\n              step: 1,\n            },\n          },\n        ),\n      ],\n      addPropertiesToDisplayText: (item: IOInputItem, parts: string[]) => {\n        this.addToggleProperty(item, parts);\n        this.addPulseProperty(item, parts);\n        this.addPulseDurationProperty(item, parts);\n      },\n      addPropertiesToSaveObject: (item: IOInputItem, inputObject: Record<string, unknown>) => {\n        if (item.canPulse !== undefined) {\n          inputObject['canPulse'] = item.canPulse;\n        }\n        if (item.canToggle !== undefined) {\n          inputObject['canToggle'] = item.canToggle;\n        }\n        if (item.maxPulseSeconds !== undefined) {\n          inputObject['maxPulseSeconds'] = item.maxPulseSeconds;\n        }\n        if (item.minPulseSeconds !== undefined) {\n          inputObject['minPulseSeconds'] = item.minPulseSeconds;\n        }\n      },\n      addPropertiesToItem: (item: Record<string, unknown>, baseItem: IOInputItem) => {\n        if (item['canPulse'] !== undefined) {\n          baseItem.canPulse = Boolean(item['canPulse']);\n        }\n        if (item['canToggle'] !== undefined) {\n          baseItem.canToggle = Boolean(item['canToggle']);\n        }\n        if (item['maxPulseSeconds'] !== undefined) {\n          baseItem.maxPulseSeconds = Number(item['maxPulseSeconds']);\n        }\n        if (item['minPulseSeconds'] !== undefined) {\n          baseItem.minPulseSeconds = Number(item['minPulseSeconds']);\n        }\n      },\n    },\n    // Add more I/O types here as needed\n  };\n  constructor() {\n    super();\n\n    // Update columns dynamically when data changes\n    effect(() => {\n      this.columns = this.dynamicColumns();\n    });\n\n    effect(() => {\n      const entity = this.entity();\n      if (entity && !this.createMode()) {\n        this.updateFormFields();\n      }\n    });\n  }\n\n  private readonly operationRegistry = inject(EntityOperationRegistryService);\n  private readonly deviceTypesService = inject(DeviceTypesService);\n  private readonly confirmationService = inject(ConfirmationService);\n\n  override entity = input<DeviceTypeResponse | null>(null);\n\n  // Configuration inputs\n  ioTypeKey = input.required<string>(); // 'digital_input', 'digital_output', etc.\n  displayTitle = input.required<string>(); // 'Digital Inputs', 'Digital Outputs', etc.\n  description = input.required<string>(); // Description text\n  icon = input<string>('pi pi-microchip'); // Icon class\n  iconType = input<string>('primeng'); // 'primeng' or 'svg'\n\n  ioInputModalConfig: ListFieldModalConfig<IOInputItem> | undefined;\n\n  private readonly defaultIOConfig: IOTypeConfig = {\n    additionalFields: [],\n    getDefaultValues: () => ({}),\n    getModalFields: () => [],\n    addPropertiesToDisplayText: () => {},\n    addPropertiesToSaveObject: () => {},\n    addPropertiesToItem: () => {},\n  };\n\n  private getCurrentIOConfig(): IOTypeConfig {\n    return this.ioTypeConfigs[this.ioTypeKey()] ?? this.defaultIOConfig;\n  }\n\n  // Generic computed property that works for any I/O type\n  readonly ioTypeDetails = computed(() => {\n    const deviceType = this.entity();\n    const ioCapabilities = deviceType?.ioCapabilities;\n    const ioTypeData =\n      ioCapabilities?.[this.ioTypeKey() as keyof typeof ioCapabilities];\n\n    if (isNullOrUndefined(ioTypeData)) return [];\n\n    return Object.entries(ioTypeData as Record<string, unknown>).map(\n      ([name, properties]) => {\n        const propertiesObj = properties as Record<string, unknown>;\n        const optional = isDefined(propertiesObj?.['optional'])\n          ? Boolean(propertiesObj['optional'])\n          : false;\n\n        // Create a flattened object with all properties\n        const result: Record<string, unknown> = {\n          name,\n          status: optional ? 'Optional' : 'Required',\n        };\n\n        // Add all other properties dynamically\n        if (isDefined(propertiesObj)) {\n          for (const [key, value] of Object.entries(propertiesObj)) {\n            if (key !== 'optional') {\n              // Skip optional since we handle it as status\n              result[key] = value;\n            }\n          }\n        }\n\n        return result;\n      },\n    );\n  });\n\n  readonly hasData = computed(() => {\n    return this.ioTypeDetails().length > 0;\n  });\n\n  // Convert ioTypeDetails to IOInputItem format for the modal\n  readonly ioInputItems = computed(() => {\n    return this.ioTypeDetails().map((item) => {\n      const baseItem: IOInputItem = {\n        name: item['name'] as string,\n        optional: item['status'] === 'Optional',\n      };\n\n      this.getCurrentIOConfig().addPropertiesToItem(item, baseItem);\n\n      return baseItem;\n    });\n  });\n\n  // Dynamically generate columns based on available properties\n  readonly dynamicColumns = computed(() => {\n    const data = this.ioTypeDetails();\n    if (data.length === 0) return [];\n\n    // Start with name and status columns\n    const columns = [\n      { field: 'name', header: 'Name' },\n      { field: 'status', header: 'Required/Optional' },\n    ];\n\n    // Collect all unique property keys from all items\n    const allKeys = new Set<string>();\n    for (const item of data) {\n      for (const key of Object.keys(item)) {\n        if (key !== 'name' && key !== 'status') {\n          allKeys.add(key);\n        }\n      }\n    }\n\n    // Add columns for each unique property\n    for (const key of Array.from(allKeys).sort((a, b) => a.localeCompare(b))) {\n      columns.push({\n        field: key,\n        header: this.formatColumnHeader(key),\n      });\n    }\n\n    return columns;\n  });\n\n  private formatColumnHeader(key: string): string {\n    // Convert camelCase or snake_case to Title Case\n    return key\n      .replaceAll(/([A-Z])/g, ' $1') // Add space before capitals\n      .replaceAll('_', ' ') // Replace underscores with spaces\n      .toLowerCase()\n      .split(' ')\n      .map((word) => word.charAt(0).toUpperCase() + word.slice(1))\n      .join(' ');\n  }\n\n  protected override updateFormFields(): void {\n    this.ioInputModalConfig = {\n      modalComponent: ModalListFormComponent,\n      modalTitle: `Add ${this.displayTitle().toLowerCase().slice(0, -1)}`,\n      defaultItemProvider: () => this.getDefaultItem(),\n      listItemFormatter: (item: IOInputItem) => ({\n        id: item.name,\n        title: item.name,\n        display: this.formatDisplayText(item),\n        icon: this.icon(),\n      }),\n      modalFields: (item: IOInputItem | undefined): FormFieldConfig[] => {\n        return this.getModalFields(item);\n      },\n      onSubmit: async (item: IOInputItem) => {\n        // Validate the item\n        if (!item.name?.trim()) {\n          return false;\n        }\n\n        return true; // Close modal\n      },\n      onDeleteItem: async (item: IOInputItem) => {\n        return new Promise<boolean>((resolve) => {\n          this.confirmationService.confirm({\n            header: 'Confirmation',\n            message: `Are you sure you want to delete \"${item.name}\"?`,\n            closable: true,\n            closeOnEscape: true,\n            icon: 'pi pi-exclamation-triangle',\n            rejectButtonProps: {\n              label: 'Cancel',\n              severity: 'secondary',\n              outlined: true,\n            },\n            acceptButtonProps: {\n              label: 'Delete',\n              severity: 'danger',\n            },\n            accept: async () => {\n              await this.deleteIOInput(item.name);\n              resolve(true); // Allow default deletion\n            },\n            reject: () => {\n              resolve(false); // Cancel deletion\n            },\n          });\n        });\n      },\n      subHeader: '',\n      showEditButton: true,\n    };\n\n    this.formFields = [\n      createModalListField<IOInputItem>(\n        'ioInputs',\n        this.displayTitle(),\n        this.ioInputItems(),\n        {\n          layout: 'horizontal',\n          labelWidth: '1/3',\n          name: 'ioInputs',\n          props: {\n            modalConfig: this\n              .ioInputModalConfig as unknown as ListFieldModalConfig<unknown>,\n          },\n        },\n      ),\n    ];\n  }\n\n  private formatDisplayText(item: IOInputItem): string {\n    const parts: string[] = [];\n\n    // Add required/optional status\n    parts.push(item.optional ? 'Optional' : 'Required');\n\n    // Add I/O type specific properties\n    this.getCurrentIOConfig().addPropertiesToDisplayText(item, parts);\n\n    return parts.join(', ');\n  }\n\n  private addToggleProperty(item: IOInputItem, parts: string[]): void {\n    if (item.canToggle !== undefined) {\n      parts.push(`Toggle: ${item.canToggle ? 'Yes' : 'No'}`);\n    }\n  }\n\n  private addPulseProperty(item: IOInputItem, parts: string[]): void {\n    if (item.canPulse !== undefined) {\n      parts.push(`Pulse: ${item.canPulse ? 'Yes' : 'No'}`);\n    }\n  }\n\n  private addPulseDurationProperty(item: IOInputItem, parts: string[]): void {\n    if (!this.shouldShowPulseDuration(item)) {\n      return;\n    }\n\n    const min = item.minPulseSeconds ?? 0;\n    const max = item.maxPulseSeconds ?? 0;\n\n    if (min === max) {\n      parts.push(`Duration: ${min}s`);\n    } else {\n      parts.push(`Duration: ${min}-${max}s`);\n    }\n  }\n\n  private shouldShowPulseDuration(item: IOInputItem): boolean {\n    return (\n      item.canPulse === true &&\n      (isDefined(item.minPulseSeconds) || isDefined(item.maxPulseSeconds))\n    );\n  }\n\n  private getDefaultItem(): IOInputItem {\n    const baseItem: IOInputItem = { name: '', optional: false };\n    const defaults = this.getCurrentIOConfig().getDefaultValues();\n    return { ...baseItem, ...defaults };\n  }\n\n  private getModalFields(item: IOInputItem | undefined): FormFieldConfig[] {\n    const fields: FormFieldConfig[] = [\n      createTextField('name', 'Input Name', item?.name ?? '', {\n        required: true,\n        placeholder: 'Enter input name...',\n        validations: [\n          {\n            name: 'required',\n            validator: Validators.required,\n            message: 'Input name is required',\n          },\n        ],\n      }),\n      createToggleSwitchField('optional', 'Optional', item?.optional ?? false, {\n        hint: 'When enabled, this input is optional. When disabled, this input is required.',\n        props: {\n          layout: 'horizontal',\n          labelWidth: '1/3',\n          onLabel: 'Optional',\n          offLabel: 'Required',\n        },\n      }),\n    ];\n\n    // Add I/O type specific fields\n    fields.push(...this.getCurrentIOConfig().getModalFields(item));\n\n    return fields;\n  }\n\n\n  private async deleteIOInput(inputName: string): Promise<void> {\n    const entity = this.entity();\n    if (!entity?.ioCapabilities) return;\n\n    const ioTypeKey = this.ioTypeKey() as keyof typeof entity.ioCapabilities;\n    const currentInputs = {\n      ...(entity.ioCapabilities[ioTypeKey] as Record<string, unknown>),\n    };\n\n    delete currentInputs[inputName];\n\n    const updatedEntity = {\n      ...entity,\n      ioCapabilities: {\n        ...entity.ioCapabilities,\n        [ioTypeKey]: currentInputs,\n      },\n    };\n\n    // Save to backend\n    const updateMethod = this.getUpdateMethod();\n    if (updatedEntity.id && isDefined(updateMethod)) {\n      await firstValueFrom(updateMethod(updatedEntity.id, updatedEntity));\n    }\n  }\n\n  protected override getUpdateMethod() {\n    return (\n      this.operationRegistry.getOperation('device-types', 'update') ??\n      ((id, data) =>\n        this.deviceTypesService.updateDeviceType(id, data).pipe(\n          tap((response) => {\n            this.entityChange.emit(response);\n            this.broadcastService.broadcast('entity-updated', {\n              entityType: 'device-types',\n              operation: 'update',\n              entityId: response.id,\n              data: response,\n            });\n          }),\n        ))\n    );\n  }\n\n  ngOnInit(): void {\n    this.updateFormFields();\n  }\n}\n","<div class=\"pt-2 card\">\n  <div class=\"flex justify-start items-center p-2 mb-4\">\n    @if (iconType() === 'svg') {\n      <svg\n        class=\"custom-icon-svg w-[2.5rem] h-[2.5rem]\"\n        [attr.aria-label]=\"displayTitle() + ' icon'\"\n      >\n        <use [attr.href]=\"'assets/sprites/sprite.svg#' + icon()\"></use>\n      </svg>\n    } @else {\n      <span\n        [class]=\"icon() + ' !text-[2.5rem]'\"\n        [attr.aria-label]=\"displayTitle() + ' icon'\"\n      ></span>\n    }\n\n    <div class=\"flex-1 pl-6\">\n      <div class=\"flex justify-between items-center\">\n        <h2 class=\"m-0 text-xl font-semibold\">{{ displayTitle() }}</h2>\n        @if (!isFormEditable() && !createMode()) {\n          <div class=\"icon-light\">\n            <span\n              class=\"pi pi-pen-to-square action hover !text-2xl\"\n              [attr.aria-label]=\"'Edit ' + displayTitle().toLowerCase()\"\n              (click)=\"onEdit()\"\n              (keydown.enter)=\"onEdit()\"\n            ></span>\n          </div>\n        }\n      </div>\n      <span>{{ description() }}</span>\n    </div>\n  </div>\n\n  @if (isFormEditable()) {\n    <!-- Dynamic Form for edit mode only -->\n    <app-dynamic-form\n      [fields]=\"formFields\"\n      [actions]=\"actions\"\n      (formValueChange)=\"onFormValueChange($event)\"\n      (formValidityChange)=\"onFormValidityChange($event)\"\n    >\n    </app-dynamic-form>\n  }\n\n  @if (!isFormEditable() && !createMode()) {\n    <div class=\"io-capabilities-container\">\n      @if (hasData()) {\n        <app-grid\n          [data]=\"ioTypeDetails()\"\n          [columns]=\"columns\"\n          [showGridLines]=\"false\"\n          [hideHeader]=\"false\"\n          tableStyleClass=\"info-display !w-auto\"\n        ></app-grid>\n      } @else {\n        <div class=\"no-io-message\">\n          <i class=\"pi pi-info-circle\"></i>\n          <p>\n            No {{ displayTitle().toLowerCase() }} are currently configured for\n            this device type.\n          </p>\n        </div>\n      }\n    </div>\n  }\n</div>\n","import {\n  Component,\n  computed,\n  effect,\n  inject,\n  input,\n  OnInit,\n  ViewChild,\n  TemplateRef,\n  AfterViewInit,\n} from '@angular/core';\nimport { DeviceTypeResponse, DeviceTypesService } from '../../../../../api';\nimport { EntitySectionBaseComponent } from '../../base';\nimport { isNullOrUndefined, isDefined } from '../../../../../shared/utils';\nimport { EntityOperationRegistryService } from '../../../services/entity/entity-operation-registry.service';\nimport { tap } from 'rxjs';\nimport { createTextField, GridColumn } from '../../../../../shared/models';\nimport { GridComponent } from '../../../../../shared/components/grid/grid.component';\nimport { AccordionModule } from 'primeng/accordion';\n\n@Component({\n  selector: 'app-device-types-accessories-section',\n  imports: [GridComponent, AccordionModule],\n  templateUrl: './device-types-accessories-section.component.html',\n  styleUrl: './device-types-accessories-section.component.scss',\n})\nexport class DeviceTypesAccessoriesSectionComponent\n  extends EntitySectionBaseComponent<DeviceTypeResponse>\n  implements OnInit, AfterViewInit\n{\n  constructor() {\n    super();\n\n    // Grid columns for view mode\n    this.columns = [\n      { field: 'key', header: 'Property' },\n      { field: 'value', header: 'Value' },\n    ];\n\n    // Column definitions for each grid\n    this.ioCapabilitiesColumns = [\n      { field: 'type', header: 'Type' },\n      { field: 'details', header: 'Available Inputs' },\n    ];\n\n    this.settingsDefinitionColumns = [\n      { field: 'setting', header: 'Setting' },\n      { field: 'value', header: 'Value' },\n    ];\n\n    this.featuresColumns = [\n      { field: 'feature', header: 'Feature' },\n      { field: 'value', header: 'Value' },\n      { field: 'type', header: 'Type' },\n      { field: 'enabled', header: 'Enabled' },\n    ];\n\n    effect(() => {\n      const entity = this.entity();\n      if (entity && !this.createMode()) {\n        this.updateFormFields();\n      }\n    });\n  }\n\n  private readonly operationRegistry = inject(EntityOperationRegistryService);\n  private readonly deviceTypesService = inject(DeviceTypesService);\n\n  @ViewChild('actionsTemplate', { static: true })\n  actionsTemplate!: TemplateRef<unknown>;\n\n  override entity = input<DeviceTypeResponse | null>(null);\n\n  // Column definitions for grids\n  ioCapabilitiesColumns: GridColumn[] = [];\n  settingsDefinitionColumns: { field: string; header: string }[] = [];\n  featuresColumns: { field: string; header: string }[] = [];\n\n  // Configuration inputs\n  accessoryKey = input.required<string>(); // The accessory key (e.g., 'mritagreader')\n  displayTitle = input.required<string>(); // Display name (e.g., 'MRI Tag Reader')\n\n  // Get the specific accessory data\n  readonly accessoryData = computed(() => {\n    const deviceType = this.entity();\n    const accessories = deviceType?.accessories;\n    const key = this.accessoryKey();\n\n    if (isNullOrUndefined(accessories) || !key) return null;\n\n    return accessories[key] ?? null;\n  });\n\n  // Display accessory details in a simple grid format\n  readonly accessoryDetails = computed(() => {\n    const accessory = this.accessoryData();\n    if (isNullOrUndefined(accessory)) return [];\n\n    const details = [\n      {\n        key: 'Name',\n        value:\n          isDefined(accessory.name) && accessory.name.trim() !== ''\n            ? accessory.name\n            : 'Unnamed Accessory',\n      },\n    ];\n\n    // Settings definition\n    if (isDefined(accessory.settingsDefinition)) {\n      details.push({\n        key: 'Settings Definition',\n        value:\n          isDefined(accessory.settingsDefinition) &&\n          accessory.settingsDefinition.trim() !== ''\n            ? 'Configured'\n            : 'Not configured',\n      });\n    } else {\n      details.push({ key: 'Settings Definition', value: 'None' });\n    }\n\n    // I/O Capabilities summary\n    if (isDefined(accessory.ioCapabilities)) {\n      const ioSummary = this.getIOCapabilitiesSummary(accessory.ioCapabilities);\n      details.push({\n        key: 'I/O Capabilities',\n        value: ioSummary || 'None configured',\n      });\n    } else {\n      details.push({ key: 'I/O Capabilities', value: 'None' });\n    }\n\n    // Features summary\n    if (isDefined(accessory.features)) {\n      const featureCount = Object.keys(accessory.features).length;\n      const featureNames = Object.keys(accessory.features).join(', ');\n      details.push({\n        key: 'Features',\n        value:\n          featureCount > 0\n            ? `${featureCount} features: ${featureNames}`\n            : 'None',\n      });\n    } else {\n      details.push({ key: 'Features', value: 'None' });\n    }\n\n    return details;\n  });\n\n  readonly hasData = computed(() => {\n    return this.accessoryData() !== null;\n  });\n\n  // IO Capabilities grid data\n  readonly ioCapabilitiesGridData = computed(() => {\n    const accessory = this.accessoryData();\n    if (isNullOrUndefined(accessory?.ioCapabilities)) return [];\n\n    const ioCapabilities = accessory.ioCapabilities as Record<string, unknown>;\n    const result: { type: string; details: string }[] = [];\n\n    const ioTypes = [\n      { key: 'digital_input', label: 'Digital Input' },\n      { key: 'digital_output', label: 'Digital Output' },\n      { key: 'analog_input', label: 'Analog Input' },\n      { key: 'temperature_input', label: 'Temperature Input' },\n      { key: 'can_input', label: 'CAN Input' },\n      { key: 'counter_input', label: 'Counter Input' },\n      { key: 'camera_input', label: 'Camera Input' },\n      { key: 'value_input', label: 'Value Input' },\n    ];\n\n    for (const ioType of ioTypes) {\n      const ioData = ioCapabilities[ioType.key] as Record<string, unknown>;\n      if (isDefined(ioData)) {\n        const count = Object.keys(ioData).length;\n        if (count > 0) {\n          const details = Object.keys(ioData).join(', ');\n          result.push({\n            type: ioType.label,\n            details: details,\n          });\n        }\n      }\n    }\n\n    return result;\n  });\n\n  readonly hasIoCapabilities = computed(() => {\n    return this.ioCapabilitiesGridData().length > 0;\n  });\n\n  // Settings Definition grid data\n  readonly settingsDefinitionGridData = computed(() => {\n    const accessory = this.accessoryData();\n    if (isNullOrUndefined(accessory?.settingsDefinition)) return [];\n\n    try {\n      const settingsJson = JSON.parse(String(accessory.settingsDefinition));\n      return Object.entries(settingsJson).map(([key, value]) => ({\n        setting: key,\n        value:\n          typeof value === 'object' && value !== null\n            ? (() => {\n                try {\n                  return JSON.stringify(value);\n                } catch {\n                  return '[object Object]';\n                }\n              })()\n            : String(value),\n      }));\n    } catch {\n      return [\n        {\n          setting: 'Raw Definition',\n          value: String(accessory.settingsDefinition),\n          type: 'string',\n        },\n      ];\n    }\n  });\n\n  // Individual field grid data - creates a grid for each field\n  readonly settingsFieldsGridData = computed(() => {\n    const accessory = this.accessoryData();\n    if (isNullOrUndefined(accessory?.settingsDefinition)) return [];\n\n    try {\n      const settingsJson = JSON.parse(String(accessory.settingsDefinition));\n      const fields = settingsJson.fields;\n\n      if (!isDefined(fields) || typeof fields !== 'object') return [];\n\n      return Object.entries(fields).map(([fieldKey, fieldValue]) => ({\n        fieldKey,\n        fieldTitle:\n          isDefined((fieldValue as Record<string, unknown>)?.['id']) &&\n          isDefined((fieldValue as Record<string, unknown>)?.['title'])\n            ? `${(fieldValue as Record<string, unknown>)?.['title']}(${(fieldValue as Record<string, unknown>)?.['id']})`\n            : fieldKey.charAt(0).toUpperCase() +\n              fieldKey.slice(1).replaceAll(/([A-Z])/g, ' $1'),\n        gridData:\n          typeof fieldValue === 'object' && fieldValue !== null\n            ? Object.entries(fieldValue as Record<string, unknown>).map(\n                ([key, value]) => ({\n                  property: key,\n                  value:\n                    typeof value === 'object' && value !== null\n                      ? JSON.stringify(value)\n                      : String(value),\n                }),\n              )\n            : [{ property: 'Value', value: String(fieldValue) }],\n      }));\n    } catch {\n      return [];\n    }\n  });\n\n  // Columns for field grids\n  readonly fieldGridColumns = [\n    { field: 'property', header: 'Property' },\n    { field: 'value', header: 'Value' },\n  ];\n\n  readonly hasSettingsDefinition = computed(() => {\n    return this.settingsDefinitionGridData().length > 0;\n  });\n\n  // Features grid data\n  readonly featuresGridData = computed(() => {\n    const accessory = this.accessoryData();\n    if (isNullOrUndefined(accessory?.features)) return [];\n\n    const features = accessory.features as Record<string, unknown>;\n    return Object.entries(features).map(([key, value]) => ({\n      feature: key,\n      value:\n        typeof value === 'object' && value !== null\n          ? JSON.stringify(value, null, 2)\n          : String(value),\n      type: typeof value,\n      enabled: Boolean(value),\n    }));\n  });\n\n  readonly hasFeatures = computed(() => {\n    return this.featuresGridData().length > 0;\n  });\n\n  private getIOCapabilitiesSummary(\n    ioCapabilities: Record<string, unknown>,\n  ): string {\n    if (!isDefined(ioCapabilities)) return '';\n\n    const ioTypes = [\n      { key: 'digital_input', label: 'Digital In' },\n      { key: 'digital_output', label: 'Digital Out' },\n      { key: 'analog_input', label: 'Analog In' },\n      { key: 'temperature_input', label: 'Temp In' },\n      { key: 'can_input', label: 'CAN In' },\n      { key: 'counter_input', label: 'Counter In' },\n      { key: 'camera_input', label: 'Camera In' },\n      { key: 'value_input', label: 'Value In' },\n    ];\n\n    const summary = [];\n    for (const ioType of ioTypes) {\n      const count = Object.keys(ioCapabilities[ioType.key] ?? {}).length;\n      if (count > 0) {\n        summary.push(`${count} ${ioType.label}`);\n      }\n    }\n\n    return summary.join(', ');\n  }\n\n  protected override updateFormFields(): void {\n    const accessory = this.accessoryData();\n\n    this.formFields = [\n      createTextField('name', 'Accessory Name', accessory?.name ?? ''),\n      createTextField(\n        'settingsDefinition',\n        'Settings Definition',\n        accessory?.settingsDefinition ?? '',\n      ),\n    ];\n  }\n\n  protected override getUpdateMethod() {\n    return (\n      this.operationRegistry.getOperation('device-types', 'update') ??\n      ((id, data) =>\n        this.deviceTypesService.updateDeviceType(id, data).pipe(\n          tap((response) => {\n            this.entityChange.emit(response);\n            this.broadcastService.broadcast('entity-updated', {\n              entityType: 'device-types',\n              operation: 'update',\n              entityId: response.id,\n              data: response,\n            });\n          }),\n        ))\n    );\n  }\n\n  ngOnInit(): void {\n    this.updateFormFields();\n  }\n\n  onCancel(): void {\n    this.cancelEdit();\n  }\n\n  onSave(): void {\n    const formGroup = this.getFormGroup();\n    if (formGroup) {\n      this.onSubmit(formGroup);\n    }\n  }\n\n  readonly getActiveValues = computed(() => {\n    const activeValues: string[] = [];\n\n    if (this.hasIoCapabilities()) {\n      activeValues.push('io-capabilities');\n    }\n\n    if (this.hasSettingsDefinition()) {\n      activeValues.push('settings-definition');\n    }\n\n    if (this.hasFeatures()) {\n      activeValues.push('features');\n    }\n\n    return activeValues;\n  });\n}\n","<div class=\"pt-2 card\">\n  <div class=\"flex justify-start items-center p-2 mb-4\">\n    <span\n      class=\"pi pi-cog !text-[2.5rem]\"\n      [attr.aria-label]=\"displayTitle() + ' icon'\"\n    ></span>\n\n    <div class=\"flex-1 pl-6\">\n      <div class=\"flex justify-between items-center\">\n        <h2 class=\"m-0 text-xl font-semibold\">{{ displayTitle() }}</h2>\n        @if (!isFormEditable() && !createMode()) {\n          <div class=\"icon-light\">\n            <button\n              class=\"pi pi-pen-to-square action hover !text-2xl\"\n              [attr.aria-label]=\"'Edit ' + displayTitle().toLowerCase()\"\n              (click)=\"onEdit()\"\n              (keydown.enter)=\"onEdit()\"\n              (keydown.space)=\"onEdit(); $event.preventDefault()\"\n            ></button>\n          </div>\n        }\n        @if (isFormEditable()) {\n          <div class=\"flex gap-2\">\n            <button\n              class=\"px-4 py-2\"\n              [attr.aria-label]=\"\n                'Cancel editing ' + displayTitle().toLowerCase()\n              \"\n              (click)=\"onCancel()\"\n              (keydown.enter)=\"onCancel()\"\n              (keydown.space)=\"onCancel(); $event.preventDefault()\"\n            >\n              Cancel\n            </button>\n            <button\n              class=\"px-4 py-2\"\n              [attr.aria-label]=\"'Save ' + displayTitle().toLowerCase()\"\n              (click)=\"onSave()\"\n              (keydown.enter)=\"onSave()\"\n              (keydown.space)=\"onSave(); $event.preventDefault()\"\n            >\n              Save\n            </button>\n          </div>\n        }\n      </div>\n      <span\n        >Configure {{ displayTitle().toLowerCase() }} accessory settings and\n        capabilities.</span\n      >\n    </div>\n  </div>\n\n  <div class=\"ml-16 accessory-container\">\n    @if (hasData()) {\n      @if (hasIoCapabilities() || hasSettingsDefinition() || hasFeatures()) {\n        <p-accordion\n          [multiple]=\"isFormEditable()\"\n          [value]=\"isFormEditable() ? getActiveValues() : []\"\n        >\n          @if (hasIoCapabilities()) {\n            <p-accordion-panel value=\"io-capabilities\">\n              <p-accordion-header>IO Capabilities</p-accordion-header>\n              <p-accordion-content>\n                <app-grid\n                  [data]=\"ioCapabilitiesGridData()\"\n                  [columns]=\"ioCapabilitiesColumns\"\n                  [showGridLines]=\"false\"\n                  [hideHeader]=\"false\"\n                  tableStyleClass=\"info-display !w-auto\"\n                ></app-grid>\n              </p-accordion-content>\n            </p-accordion-panel>\n          }\n\n          @if (hasSettingsDefinition()) {\n            <p-accordion-panel value=\"settings-definition\">\n              <p-accordion-header>Settings Definition</p-accordion-header>\n              <p-accordion-content class=\"ml-8\">\n                @for (field of settingsFieldsGridData(); track field.fieldKey) {\n                  <div class=\"mb-4 field-section\">\n                    <h4 class=\"mb-2 font-medium field-title\">\n                      {{ field.fieldTitle }}\n                    </h4>\n                    <app-grid\n                      [data]=\"field.gridData\"\n                      [columns]=\"fieldGridColumns\"\n                      [showGridLines]=\"false\"\n                      [hideHeader]=\"false\"\n                      tableStyleClass=\"info-display !w-auto field-grid\"\n                    ></app-grid>\n                  </div>\n                }\n              </p-accordion-content>\n            </p-accordion-panel>\n          }\n\n          @if (hasFeatures()) {\n            <p-accordion-panel value=\"features\">\n              <p-accordion-header>Features</p-accordion-header>\n              <p-accordion-content>\n                <app-grid\n                  [data]=\"featuresGridData()\"\n                  [columns]=\"featuresColumns\"\n                  [showGridLines]=\"false\"\n                  [hideHeader]=\"false\"\n                  tableStyleClass=\"info-display !w-auto\"\n                ></app-grid>\n              </p-accordion-content>\n            </p-accordion-panel>\n          }\n        </p-accordion>\n      } @else {\n        <div class=\"flex gap-2 items-center no-accessory-content-message\">\n          <i class=\"pi pi-info-circle\"></i>\n          <p>\n            No IO capabilities, features, or settings have been configured for\n            this {{ displayTitle() }} accessory.\n          </p>\n        </div>\n      }\n    } @else {\n      <div class=\"no-accessory-message\">\n        <i class=\"pi pi-info-circle\"></i>\n        <p>No data available for {{ displayTitle().toLowerCase() }}.</p>\n      </div>\n    }\n  </div>\n</div>\n","import {\n  Component,\n  computed,\n  OnInit,\n  inject,\n  effect,\n  input,\n} from '@angular/core';\nimport { DeviceTypeResponse } from '../../../../../api/model/deviceTypeResponse';\nimport { EntitySectionBaseComponent } from '../../base';\nimport { isNullOrUndefined, isDefined } from '../../../../../shared/utils';\nimport {\n  createModalListField,\n  createTextField,\n  FormFieldConfig,\n} from '../../../../../shared/models';\nimport { EntityOperationRegistryService } from '../../../services/entity/entity-operation-registry.service';\nimport { DeviceTypesService } from '../../../../../api';\nimport { firstValueFrom, tap } from 'rxjs';\nimport { Validators } from '@angular/forms';\nimport { ToastService } from '../../../../../core/services/toast.service';\nimport { DynamicFormComponent } from '../../../../../shared/components/forms/dynamic-form/dynamic-form.component';\nimport { GridComponent } from '../../../../../shared/components/grid/grid.component';\nimport { ModalListFormComponent } from '../../../../../shared/components/forms/modal-list-form/modal-list-form.component';\n\ninterface FeatureItem {\n  key: string;\n  label: string;\n  enabled: boolean;\n}\n\n@Component({\n  selector: 'app-device-types-features-section',\n  imports: [DynamicFormComponent, GridComponent],\n  templateUrl: './device-types-features-section.component.html',\n  styleUrl: './device-types-features-section.component.scss',\n})\nexport class DeviceTypesFeaturesSectionComponent\n  extends EntitySectionBaseComponent<DeviceTypeResponse>\n  implements OnInit\n{\n  private readonly operationRegistry = inject(EntityOperationRegistryService);\n  private readonly deviceTypesService = inject(DeviceTypesService);\n  private readonly toastService = inject(ToastService);\n\n  constructor() {\n    super();\n    // Grid columns for view mode - display features as comma-separated list\n    this.columns = [\n      { field: 'key', header: 'Property' },\n      { field: 'value', header: 'Value' },\n    ];\n\n    effect(() => {\n      const entity = this.entity();\n      if (entity && !this.createMode()) {\n        this.updateFormFields();\n      }\n    });\n  }\n\n  override entity = input<DeviceTypeResponse | null>(null);\n\n  // Common device features\n  readonly commonFeatures = [\n    { key: 'remote_output_control', label: 'Remote Output Control' },\n    { key: 'voice_calls', label: 'Voice Calls' },\n    { key: 'firmware_updates', label: 'Firmware Updates' },\n    { key: 'camera_support', label: 'Camera Support' },\n    { key: 'geofencing', label: 'Geofencing' },\n    { key: 'driver_identification', label: 'Driver Identification' },\n    { key: 'harsh_driving_detection', label: 'Harsh Driving Detection' },\n    { key: 'maintenance_alerts', label: 'Maintenance Alerts' },\n    { key: 'fuel_monitoring', label: 'Fuel Monitoring' },\n    { key: 'temperature_monitoring', label: 'Temperature Monitoring' },\n  ];\n\n  // Display features as a simple grid with comma-separated list\n  readonly featuresDisplay = computed(() => {\n    const deviceType = this.entity();\n    const features = deviceType?.features;\n    if (isNullOrUndefined(features)) {\n      return [{ key: 'Features', value: 'No features configured' }];\n    }\n\n    const featureNames = Object.keys(features)\n      .map((key) => this.getFeatureDisplayName(key))\n      .join(', ');\n\n    return [\n      {\n        key: 'Features',\n        value: featureNames || 'No features configured',\n      },\n    ];\n  });\n\n  getFeatureDisplayName(key: string): string {\n    const commonFeature = this.commonFeatures.find((f) => f.key === key);\n    return commonFeature\n      ? commonFeature.label\n      : key.replaceAll('_', ' ').replaceAll(/\\b\\w/g, (l) => l.toUpperCase());\n  }\n\n  // Get currently enabled features as list for modal\n  readonly currentFeaturesList = computed(() => {\n    const features = this.entity()?.features || {};\n    return Object.keys(features).map((key) => ({\n      key,\n      label: this.getFeatureDisplayName(key),\n      enabled: true,\n    }));\n  });\n\n  protected override updateFormFields(): void {\n    this.formFields = [\n      createModalListField<FeatureItem>(\n        'features',\n        'Features',\n        this.currentFeaturesList(),\n        {\n          modalConfig: {\n            modalComponent: ModalListFormComponent,\n            modalTitle: () => 'Add Feature',\n            modalFields: (item: FeatureItem | undefined) =>\n              this.getModalFields(item),\n            listItemFormatter: (item) => ({\n              id: item.key,\n              title: item.label,\n              display: item.key,\n              icon: 'pi-cog',\n            }),\n            defaultItemProvider: () => ({ key: '', label: '', enabled: true }),\n            onSubmit: async (item) => {\n              if (!item.key?.trim()) {\n                return false;\n              }\n\n              // Check for duplicates\n              const existing = this.currentFeaturesList().find(\n                (existing) => existing.key === item.key,\n              );\n              if (existing) {\n                alert('This feature is already enabled.');\n                return false;\n              }\n\n              await this.saveFeature(item);\n              return true;\n            },\n            onDeleteItem: async (item) => {\n              const confirmed = confirm(\n                `Are you sure you want to disable \"${item.label}\"?`,\n              );\n              if (confirmed) {\n                await this.deleteFeature(item.key);\n                return true;\n              }\n              return false;\n            },\n          },\n        },\n      ),\n    ];\n  }\n\n  private getModalFields(item: FeatureItem | undefined): FormFieldConfig[] {\n    return [\n      createTextField('key', 'Feature Key', item?.key ?? '', {\n        required: true,\n        placeholder: 'Enter feature key...',\n        validations: [\n          {\n            name: 'required',\n            validator: Validators.required,\n            message: 'Feature key is required',\n          },\n        ],\n      }),\n      createTextField('label', 'Feature Label', item?.label ?? '', {\n        required: true,\n        placeholder: 'Enter feature display name...',\n        validations: [\n          {\n            name: 'required',\n            validator: Validators.required,\n            message: 'Feature label is required',\n          },\n        ],\n      }),\n    ];\n  }\n\n  private async saveFeature(featureItem: FeatureItem): Promise<void> {\n    const entity = this.entity();\n    if (!entity) return;\n\n    const updatedFeatures = {\n      ...entity.features,\n      [featureItem.key]: { settings: {} },\n    };\n\n    const updatedEntity = {\n      features: updatedFeatures,\n    };\n\n    const updateMethod = this.getUpdateMethod();\n    if (entity.id && isDefined(updateMethod)) {\n      try {\n        await firstValueFrom(updateMethod(entity.id, updatedEntity));\n      } catch (error) {\n        this.toastService.showError(\n          'Save Failed',\n          'Failed to save feature. Please try again.',\n        );\n        throw error;\n      }\n    }\n  }\n\n  private async deleteFeature(featureKey: string): Promise<void> {\n    const entity = this.entity();\n    if (!entity?.features) return;\n\n    const updatedFeatures = { ...entity.features };\n    delete updatedFeatures[featureKey];\n\n    const updatedEntity = {\n      ...entity,\n      features: updatedFeatures,\n    };\n\n    const updateMethod = this.getUpdateMethod();\n    if (updatedEntity.id && isDefined(updateMethod)) {\n      try {\n        await firstValueFrom(updateMethod(entity.id, updatedEntity));\n      } catch (error) {\n        console.error('Failed to delete feature:', error);\n        this.toastService.showError(\n          'Delete Failed',\n          'Failed to delete feature. Please try again.',\n        );\n        throw error;\n      }\n    }\n  }\n\n  protected override getUpdateMethod() {\n    return (\n      this.operationRegistry.getOperation('device-types', 'update') ??\n      ((id, data) =>\n        this.deviceTypesService.updateDeviceType(id, data).pipe(\n          tap((response) => {\n            this.entityChange.emit(response);\n            this.broadcastService.broadcast('entity-updated', {\n              entityType: 'device-types',\n              operation: 'update',\n              entityId: response.id,\n              data: response,\n            });\n          }),\n        ))\n    );\n  }\n\n  ngOnInit(): void {\n    this.updateFormFields();\n  }\n}\n","<div class=\"pt-2 card\">\n  <div class=\"flex justify-start items-center p-2 mb-4\">\n    <span\n      class=\"pi pi-cog !text-[2.5rem]\"\n      [attr.aria-label]=\"'Features icon'\"\n    ></span>\n\n    <div class=\"flex-1 pl-6\">\n      <div class=\"flex justify-between items-center\">\n        <h2 class=\"m-0 text-xl font-semibold\">Features</h2>\n        @if (!isFormEditable() && !createMode()) {\n          <div class=\"icon-light\">\n            <span\n              class=\"pi pi-pen-to-square action hover !text-2xl\"\n              [attr.aria-label]=\"'Edit features'\"\n              (click)=\"onEdit()\"\n              (keydown.enter)=\"onEdit()\"\n            ></span>\n          </div>\n        }\n      </div>\n      <span\n        >Enable/disable device features like remote control, voice calls, camera\n        support, etc.</span\n      >\n    </div>\n  </div>\n\n  @if (isFormEditable() || (createMode() && formFields.length)) {\n    <app-dynamic-form\n      [fields]=\"formFields\"\n      [actions]=\"actions\"\n      [hideActions]=\"createMode()\"\n      (formSubmit)=\"onSubmit($event)\"\n      (formValidityChange)=\"onFormValidityChange($event)\"\n      (formValueChange)=\"onFormValueChange($event)\"\n    >\n    </app-dynamic-form>\n  }\n\n  @if (!isFormEditable() && !createMode()) {\n    <app-grid\n      [data]=\"featuresDisplay()\"\n      [columns]=\"columns\"\n      [showGridLines]=\"false\"\n      [hideHeader]=\"true\"\n      tableStyleClass=\"info-display !w-auto\"\n    ></app-grid>\n  }\n</div>\n","import {\n  Component,\n  computed,\n  effect,\n  inject,\n  input,\n  OnInit,\n} from '@angular/core';\nimport { DeviceTypeResponse, DeviceTypesService } from '../../../../../api';\nimport { EntitySectionBaseComponent } from '../../base';\nimport { isNullOrUndefined, isDefined } from '../../../../../shared/utils';\nimport { EntityOperationRegistryService } from '../../../services/entity/entity-operation-registry.service';\nimport { tap } from 'rxjs';\nimport {\n  createTextField,\n  createToggleSwitchField,\n} from '../../../../../shared/models';\nimport { GridComponent } from '../../../../../shared/components/grid/grid.component';\nimport { DynamicFormComponent } from '../../../../../shared/components/forms/dynamic-form/dynamic-form.component';\nimport { ToastService } from '../../../../../core/services/toast.service';\n\n@Component({\n  selector: 'app-device-types-settings-definition-section',\n  imports: [GridComponent, DynamicFormComponent],\n  templateUrl: './device-types-settings-definition-section.component.html',\n  styleUrl: './device-types-settings-definition-section.component.scss',\n})\nexport class DeviceTypesSettingsDefinitionSectionComponent\n  extends EntitySectionBaseComponent<DeviceTypeResponse>\n  implements OnInit\n{\n  constructor() {\n    super();\n\n    // Grid columns for view mode\n    this.columns = [\n      { field: 'key', header: 'Property' },\n      { field: 'value', header: 'Value' },\n    ];\n\n    effect(() => {\n      const entity = this.entity();\n      if (entity && !this.createMode()) {\n        this.updateFormFields();\n      }\n    });\n  }\n\n  private readonly operationRegistry = inject(EntityOperationRegistryService);\n  private readonly deviceTypesService = inject(DeviceTypesService);\n  private readonly toastService = inject(ToastService);\n\n  override entity = input<DeviceTypeResponse | null>(null);\n\n  // Configuration inputs\n  fieldId = input.required<string>(); // The field id (e.g., 'loggingTime')\n  displayTitle = input.required<string>(); // Display name (e.g., 'Logging Time')\n\n  // Get the parsed settings definition\n  readonly parsedDefinition = computed(() => {\n    const entity = this.entity();\n    const definition = entity?.settingsDefinition;\n    if (isNullOrUndefined(definition) || definition.trim() === '') return null;\n\n    try {\n      const parsed = JSON.parse(definition);\n      return parsed;\n    } catch {\n      return null;\n    }\n  });\n\n  // Get the specific field data\n  readonly fieldData = computed(() => {\n    const parsed = this.parsedDefinition();\n    const fieldId = this.fieldId();\n\n    if (isNullOrUndefined(parsed) || !fieldId) return null;\n\n    // Navigate through the structure to find the field\n    if (isDefined(parsed['groups']) && Array.isArray(parsed['groups'])) {\n      for (const group of parsed['groups']) {\n        if (isDefined(group['fields']) && Array.isArray(group['fields'])) {\n          const field = group['fields'].find(\n            (f: Record<string, unknown>) => f['id'] === fieldId,\n          );\n          if (isDefined(field)) return field;\n        }\n      }\n    }\n\n    return null;\n  });\n\n  // Display field details in a simple grid format\n  readonly fieldDetails = computed(() => {\n    const field = this.fieldData();\n    if (isNullOrUndefined(field)) return [];\n\n    const details = [\n      { key: 'ID', value: field['id'] ?? 'Unknown' },\n      { key: 'Title', value: field['title'] ?? 'Untitled Field' },\n      { key: 'Type', value: field['type'] ?? 'text' },\n    ];\n\n    if (\n      isDefined(field['unit']) &&\n      typeof field['unit'] === 'string' &&\n      field['unit'].trim() !== ''\n    ) {\n      details.push({ key: 'Unit', value: field['unit'] });\n    }\n\n    if (isDefined(field['min'])) {\n      details.push({ key: 'Minimum Value', value: field['min'].toString() });\n    }\n\n    if (isDefined(field['max'])) {\n      details.push({ key: 'Maximum Value', value: field['max'].toString() });\n    }\n\n    if (isDefined(field['width'])) {\n      details.push({ key: 'Width', value: field['width'].toString() });\n    }\n\n    if (isDefined(field['defaultValue'])) {\n      details.push({\n        key: 'Default Value',\n        value: field['defaultValue'].toString(),\n      });\n    }\n\n    if (\n      isDefined(field['placeholder']) &&\n      typeof field['placeholder'] === 'string' &&\n      field['placeholder'].trim() !== ''\n    ) {\n      details.push({ key: 'Placeholder', value: field['placeholder'] });\n    }\n\n    if (\n      isDefined(field['description']) &&\n      typeof field['description'] === 'string' &&\n      field['description'].trim() !== ''\n    ) {\n      details.push({ key: 'Description', value: field['description'] });\n    }\n\n    if (isDefined(field['required'])) {\n      details.push({\n        key: 'Required',\n        value: field['required'] === true ? 'Yes' : 'No',\n      });\n    }\n\n    return details;\n  });\n\n  readonly hasData = computed(() => {\n    return this.fieldData() !== null;\n  });\n\n  protected override updateFormFields(): void {\n    const field = this.fieldData();\n    if (isNullOrUndefined(field)) {\n      this.formFields = [];\n      return;\n    }\n\n    // Dynamically create form fields based on what's displayed in the grid\n    this.formFields = [];\n\n    if (isDefined(field['title'])) {\n      this.formFields.push(\n        createTextField('title', 'Title', field['title']?.toString() ?? ''),\n      );\n    }\n\n    if (isDefined(field['type'])) {\n      this.formFields.push(\n        createTextField('type', 'Type', field['type']?.toString() ?? ''),\n      );\n    }\n\n    if (isDefined(field['unit'])) {\n      this.formFields.push(\n        createTextField('unit', 'Unit', field['unit']?.toString() ?? ''),\n      );\n    }\n\n    if (isDefined(field['min'])) {\n      this.formFields.push(\n        createTextField('min', 'Minimum Value', field['min']?.toString() ?? ''),\n      );\n    }\n\n    if (isDefined(field['max'])) {\n      this.formFields.push(\n        createTextField('max', 'Maximum Value', field['max']?.toString() ?? ''),\n      );\n    }\n\n    if (isDefined(field['width'])) {\n      this.formFields.push(\n        createTextField('width', 'Width', field['width']?.toString() ?? ''),\n      );\n    }\n\n    if (isDefined(field['defaultValue'])) {\n      this.formFields.push(\n        createTextField(\n          'defaultValue',\n          'Default Value',\n          field['defaultValue']?.toString() ?? '',\n        ),\n      );\n    }\n\n    if (isDefined(field['placeholder'])) {\n      this.formFields.push(\n        createTextField(\n          'placeholder',\n          'Placeholder',\n          field['placeholder']?.toString() ?? '',\n        ),\n      );\n    }\n\n    if (isDefined(field['description'])) {\n      this.formFields.push(\n        createTextField(\n          'description',\n          'Description',\n          field['description']?.toString() ?? '',\n        ),\n      );\n    }\n\n    if (isDefined(field['required'])) {\n      this.formFields.push(\n        createToggleSwitchField(\n          'required',\n          'Required',\n          field['required'] === true,\n        ),\n      );\n    }\n  }\n\n  protected override onSubmit(formGroup: {\n    value: Record<string, unknown>;\n  }): void {\n    const entity = this.entity();\n    const fieldId = this.fieldId();\n    const formData = formGroup.value;\n\n    if (!this.isValidSubmission(entity, fieldId)) {\n      return;\n    }\n\n    const parsedDefinition = this.parseSettingsDefinition(entity);\n    if (!parsedDefinition) {\n      return;\n    }\n\n    const updated = this.updateFieldInDefinition(\n      parsedDefinition,\n      fieldId,\n      formData,\n    );\n    if (updated) {\n      this.saveUpdatedDefinition(entity.id, parsedDefinition);\n    }\n  }\n\n  private isValidSubmission(\n    entity: DeviceTypeResponse | null,\n    fieldId: string,\n  ): entity is DeviceTypeResponse {\n    return !(\n      isNullOrUndefined(entity?.id) ||\n      isNullOrUndefined(fieldId) ||\n      fieldId.trim() === ''\n    );\n  }\n\n  private parseSettingsDefinition(\n    entity: DeviceTypeResponse,\n  ): Record<string, unknown> | null {\n    try {\n      const settingsDefinition = entity.settingsDefinition;\n      if (\n        isNullOrUndefined(settingsDefinition) ||\n        settingsDefinition.trim() === ''\n      ) {\n        return {};\n      }\n      return JSON.parse(settingsDefinition);\n    } catch {\n      console.error('Failed to parse settings definition');\n      return null;\n    }\n  }\n\n  private updateFieldInDefinition(\n    parsedDefinition: Record<string, unknown>,\n    fieldId: string,\n    formData: Record<string, unknown>,\n  ): boolean {\n    if (!this.hasValidGroups(parsedDefinition)) {\n      return false;\n    }\n\n    const groups = parsedDefinition['groups'] as Record<string, unknown>[];\n\n    for (const group of groups) {\n      if (this.updateFieldInGroup(group, fieldId, formData)) {\n        return true;\n      }\n    }\n\n    return false;\n  }\n\n  private hasValidGroups(parsedDefinition: Record<string, unknown>): boolean {\n    return (\n      isDefined(parsedDefinition['groups']) &&\n      Array.isArray(parsedDefinition['groups'])\n    );\n  }\n\n  private updateFieldInGroup(\n    group: Record<string, unknown>,\n    fieldId: string,\n    formData: Record<string, unknown>,\n  ): boolean {\n    if (!this.isValidGroup(group)) {\n      return false;\n    }\n\n    const fields = group['fields'] as Record<string, unknown>[];\n    const fieldIndex = fields.findIndex(\n      (f: Record<string, unknown>) => f['id'] === fieldId,\n    );\n\n    if (fieldIndex === -1) {\n      return false;\n    }\n\n    const updatedField = this.applyFormDataToField(\n      fields[fieldIndex],\n      formData,\n    );\n    fields[fieldIndex] = updatedField;\n    return true;\n  }\n\n  private isValidGroup(group: Record<string, unknown>): boolean {\n    return (\n      isDefined(group) &&\n      typeof group === 'object' &&\n      isDefined(group['fields']) &&\n      Array.isArray(group['fields'])\n    );\n  }\n\n  private applyFormDataToField(\n    originalField: Record<string, unknown>,\n    formData: Record<string, unknown>,\n  ): Record<string, unknown> {\n    const updatedField = { ...originalField };\n\n    for (const [key, value] of Object.entries(formData)) {\n      if (key !== 'id') {\n        updatedField[key] = this.convertFormValue(key, value);\n      }\n    }\n\n    return updatedField;\n  }\n\n  private convertFormValue(key: string, value: unknown): unknown {\n    if (this.isNumericField(key)) {\n      const numValue = Number(value);\n      return Number.isNaN(numValue) ? value : numValue;\n    }\n\n    if (key === 'required') {\n      return value === 'true' || value === true;\n    }\n\n    return value;\n  }\n\n  private isNumericField(key: string): boolean {\n    return ['min', 'max', 'width', 'defaultValue'].includes(key);\n  }\n\n  private saveUpdatedDefinition(\n    entityId: string,\n    parsedDefinition: Record<string, unknown>,\n  ): void {\n    const updateData = {\n      settingsDefinition: JSON.stringify(parsedDefinition),\n    };\n\n    this.getUpdateMethod()(entityId, updateData).subscribe({\n      next: (response) => {\n        this.isFormEditable.set(false);\n        this.entityChange.emit(response as DeviceTypeResponse);\n      },\n      error: (error) => {\n        console.error('Failed to update settings field:', error);\n        this.toastService.showError(\n          'Update Failed',\n          'Failed to update settings field',\n        );\n      },\n    });\n  }\n\n  protected override getUpdateMethod() {\n    return (\n      this.operationRegistry.getOperation('device-types', 'update') ??\n      ((id, data) =>\n        this.deviceTypesService.updateDeviceType(id, data).pipe(\n          tap((response) => {\n            this.entityChange.emit(response);\n            this.broadcastService.broadcast('entity-updated', {\n              entityType: 'device-types',\n              operation: 'update',\n              entityId: response.id,\n              data: response,\n            });\n          }),\n        ))\n    );\n  }\n\n  ngOnInit(): void {\n    this.updateFormFields();\n  }\n}\n","<div class=\"pt-2 card\">\n  <div class=\"flex justify-start items-center p-2 mb-4\">\n    <span\n      class=\"pi pi-cog !text-[2.5rem]\"\n      [attr.aria-label]=\"displayTitle() + ' icon'\"\n    ></span>\n\n    <div class=\"flex-1 pl-6\">\n      <div class=\"flex justify-between items-center\">\n        <h2 class=\"m-0 text-xl font-semibold\">{{ displayTitle() }}</h2>\n        @if (!isFormEditable() && !createMode()) {\n          <div class=\"icon-light\">\n            <button\n              class=\"pi pi-pen-to-square action hover !text-2xl\"\n              [attr.aria-label]=\"'Edit ' + displayTitle().toLowerCase()\"\n              (click)=\"onEdit()\"\n              (keydown.enter)=\"onEdit()\"\n              (keydown.space)=\"onEdit(); $event.preventDefault()\"\n              tabIndex=\"0\"\n            ></button>\n          </div>\n        }\n      </div>\n      <span\n        >Configure {{ displayTitle().toLowerCase() }} field settings and\n        properties.</span\n      >\n    </div>\n  </div>\n\n  @if (isFormEditable()) {\n    <!-- Dynamic Form for edit mode only -->\n    <app-dynamic-form\n      [fields]=\"formFields\"\n      [actions]=\"actions\"\n      (formValueChange)=\"onFormValueChange($event)\"\n      (formValidityChange)=\"onFormValidityChange($event)\"\n    >\n    </app-dynamic-form>\n  }\n\n  @if (!isFormEditable() && !createMode()) {\n    <div class=\"settings-field-container\">\n      @if (hasData()) {\n        <app-grid\n          [data]=\"fieldDetails()\"\n          [columns]=\"columns\"\n          [showGridLines]=\"false\"\n          [hideHeader]=\"true\"\n          tableStyleClass=\"info-display !w-auto\"\n        ></app-grid>\n      } @else {\n        <div class=\"no-field-message\">\n          <i class=\"pi pi-info-circle\"></i>\n          <p>No data available for {{ displayTitle().toLowerCase() }}.</p>\n        </div>\n      }\n    </div>\n  }\n</div>\n","import { Injectable } from '@angular/core';\n\nimport { DeviceTypeResponse } from '../../../api';\nimport { AdminDetailSection } from '../models';\nimport { isDefined } from '../../../shared/utils';\nimport { FeatureSectionComponent } from '../components/shared/feature-section/feature-section.component';\nimport { FeedSectionComponent } from '../components/shared/feed-section/feed-section.component';\nimport { DeviceTypesInformationSectionComponent } from '../components/device-types/device-types-information-section/device-types-information-section.component';\nimport { DeviceTypesIoSectionComponent } from '../components/device-types/device-types-io-section/device-types-io-section.component';\nimport { DeviceTypesAccessoriesSectionComponent } from '../components/device-types/device-types-accessories-section/device-types-accessories-section.component';\nimport { DeviceTypesFeaturesSectionComponent } from '../components/device-types/device-types-features-section/device-types-features-section.component';\nimport { DeviceTypesSettingsDefinitionSectionComponent } from '../components/device-types/device-types-settings-definition-section/device-types-settings-definition-section.component';\nimport { isNullOrUndefined } from '../../../shared/utils/type-guards';\n\n@Injectable({ providedIn: 'root' })\nexport class DeviceTypesSectionConfigFactory {\n  /**\n   * Create sections for device type information\n   * @param deviceType The device type object to display in the section\n   * @returns An array of AdminDetailSection objects representing the device type information sections\n   */\n  createDeviceTypeInformationSections(\n    deviceType: DeviceTypeResponse | null,\n  ): AdminDetailSection[] {\n    return [\n      {\n        id: 'device-type-details',\n        title: 'Device Type Details',\n        component: DeviceTypesInformationSectionComponent,\n        componentInputs: {\n          entity: deviceType,\n        },\n        category: 'information',\n        order: 10,\n      },\n    ];\n  }\n\n  /**\n   * Create sections for device type features\n   * @param deviceType The device type object to display in the section\n   * @returns An array of AdminDetailSection objects representing the device type features sections\n   */\n  createDeviceTypeFeaturesSection(\n    deviceType: DeviceTypeResponse | null,\n  ): AdminDetailSection[] {\n    if (!deviceType?.features) {\n      return [];\n    }\n\n    return [\n      {\n        id: 'device-type-features',\n        title: 'Features',\n        component: FeatureSectionComponent,\n        componentInputs: {\n          entity: deviceType,\n          entityType: 'device-types',\n          features: Object.entries(deviceType.features).map(\n            ([key, feature]) => ({\n              ...feature,\n              key,\n            }),\n          ),\n        },\n        category: 'features',\n        order: 10,\n      },\n    ];\n  }\n\n  /**\n   * Create sections for device type changes\n   * @param deviceType The device type object to display in the section\n   * @returns An array of AdminDetailSection objects representing the device type changes sections\n   */\n  createChangesSection(\n    deviceType: DeviceTypeResponse | null,\n  ): AdminDetailSection[] {\n    return [\n      {\n        id: 'device-type-changes',\n        title: 'Changes',\n        component: FeedSectionComponent,\n        componentInputs: {\n          entity: deviceType,\n        },\n        category: 'feed',\n        order: 10,\n      },\n    ];\n  }\n\n  createIOCapabilitiesSections(\n    deviceType: DeviceTypeResponse | null,\n  ): AdminDetailSection[] {\n    const ioTypes = [\n      {\n        key: 'digital_input',\n        title: 'Digital Inputs',\n        description:\n          'Configure digital input capabilities for this device type.',\n        icon: 'pi pi-arrow-left',\n        iconType: 'primeng',\n      },\n      {\n        key: 'digital_output',\n        title: 'Digital Outputs',\n        description:\n          'Configure digital output capabilities for this device type.',\n        icon: 'pi pi-arrow-right',\n        iconType: 'primeng',\n      },\n      {\n        key: 'analog_input',\n        title: 'Analog Inputs',\n        description:\n          'Configure analog input capabilities for this device type.',\n        icon: 'gauge-simple-high-solid',\n        iconType: 'svg',\n      },\n      {\n        key: 'temperature_input',\n        title: 'Temperature Sensors',\n        description:\n          'Configure temperature sensor capabilities for this device type.',\n        icon: 'temperature-half-solid',\n        iconType: 'svg',\n      },\n      {\n        key: 'can_input',\n        title: 'CAN Inputs',\n        description: 'Configure CAN input capabilities for this device type.',\n        icon: 'oil-can-solid',\n        iconType: 'svg',\n      },\n      {\n        key: 'counter_input',\n        title: 'Counter Inputs',\n        description:\n          'Configure counter input capabilities for this device type.',\n        icon: 'pi pi-clock',\n        iconType: 'primeng',\n      },\n      {\n        key: 'camera_input',\n        title: 'Camera Inputs',\n        description:\n          'Configure camera input capabilities for this device type.',\n        icon: 'pi pi-camera',\n        iconType: 'primeng',\n      },\n      {\n        key: 'value_input',\n        title: 'Value Inputs',\n        description: 'Configure value input capabilities for this device type.',\n        icon: 'pi pi-list-check',\n        iconType: 'primeng',\n      },\n    ];\n\n    const sections: AdminDetailSection[] = [];\n\n    for (const [index, ioType] of ioTypes.entries()) {\n      // Only add section if data exists\n      const ioData =\n        deviceType?.ioCapabilities?.[\n          ioType.key as keyof typeof deviceType.ioCapabilities\n        ];\n      if (\n        isDefined(ioData) &&\n        Object.keys(ioData as Record<string, unknown>).length > 0\n      ) {\n        sections.push({\n          id: `io-${ioType.key}`,\n          title: ioType.title,\n          component: DeviceTypesIoSectionComponent,\n          componentInputs: {\n            entity: deviceType,\n            entityType: 'device-types',\n            ioTypeKey: ioType.key,\n            displayTitle: ioType.title,\n            description: ioType.description,\n            icon: ioType.icon,\n            iconType: ioType.iconType,\n          },\n          category: 'io',\n          order: (index + 1) * 10 + 20,\n        });\n      }\n    }\n\n    return sections;\n  }\n\n  createAccessoriesSection(\n    deviceType: DeviceTypeResponse | null,\n  ): AdminDetailSection[] {\n    if (!deviceType?.accessories) {\n      return [];\n    }\n\n    const sections: AdminDetailSection[] = [];\n    const accessories = Object.entries(deviceType.accessories);\n\n    for (const [index, [key, accessory]] of accessories.entries()) {\n      const displayTitle =\n        isDefined(accessory.name) && accessory.name.trim() !== ''\n          ? accessory.name\n          : key\n              .replaceAll('_', ' ')\n              .replaceAll(/\\b\\w/g, (l) => l.toUpperCase());\n\n      sections.push({\n        id: `accessory-${key}`,\n        title: displayTitle,\n        component: DeviceTypesAccessoriesSectionComponent,\n        componentInputs: {\n          entity: deviceType,\n          entityType: 'device-types',\n          accessoryKey: key,\n          displayTitle: displayTitle,\n        },\n        category: 'accessories',\n        order: (index + 1) * 10 + 20, // Start at 30, increment by 10\n      });\n    }\n\n    return sections;\n  }\n\n  createFeaturesSection(\n    deviceType: DeviceTypeResponse | null,\n  ): AdminDetailSection[] {\n    return [\n      {\n        id: 'device-type-features',\n        title: 'Features',\n        component: DeviceTypesFeaturesSectionComponent,\n        componentInputs: {\n          entity: deviceType,\n          entityType: 'device-types',\n        },\n        category: 'features',\n        order: 25, // After accessories (20)\n      },\n    ];\n  }\n\n  createSettingsFieldsSections(\n    deviceType: DeviceTypeResponse | null,\n  ): AdminDetailSection[] {\n    const parsedDefinition = this.parseSettingsDefinition(deviceType);\n    if (!parsedDefinition) {\n      return [];\n    }\n\n    const groups = this.extractGroupsFromDefinition(parsedDefinition);\n    return this.buildSectionsFromGroups(groups, deviceType);\n  }\n\n  private parseSettingsDefinition(\n    deviceType: DeviceTypeResponse | null,\n  ): Record<string, unknown> | null {\n    if (\n      isNullOrUndefined(deviceType?.settingsDefinition) ||\n      deviceType.settingsDefinition.trim() === ''\n    ) {\n      return null;\n    }\n\n    try {\n      return JSON.parse(deviceType.settingsDefinition);\n    } catch {\n      return null;\n    }\n  }\n\n  private extractGroupsFromDefinition(\n    parsedDefinition: Record<string, unknown>,\n  ): Record<string, unknown>[] {\n    if (\n      !isDefined(parsedDefinition['groups']) ||\n      !Array.isArray(parsedDefinition['groups'])\n    ) {\n      return [];\n    }\n\n    return parsedDefinition['groups'] as Record<string, unknown>[];\n  }\n\n  private buildSectionsFromGroups(\n    groups: Record<string, unknown>[],\n    deviceType: DeviceTypeResponse | null,\n  ): AdminDetailSection[] {\n    const sections: AdminDetailSection[] = [];\n\n    for (const group of groups) {\n      const groupSections = this.buildSectionsFromGroup(\n        group,\n        deviceType,\n        sections.length,\n      );\n      sections.push(...groupSections);\n    }\n\n    return sections;\n  }\n\n  private buildSectionsFromGroup(\n    group: Record<string, unknown>,\n    deviceType: DeviceTypeResponse | null,\n    currentSectionCount: number,\n  ): AdminDetailSection[] {\n    if (!this.isValidGroup(group)) {\n      return [];\n    }\n\n    const fields = group['fields'] as Record<string, unknown>[];\n    return fields.map((field, index) =>\n      this.createFieldSection(field, deviceType, currentSectionCount + index),\n    );\n  }\n\n  private isValidGroup(group: Record<string, unknown>): boolean {\n    return (\n      isDefined(group) &&\n      typeof group === 'object' &&\n      isDefined(group['fields']) &&\n      Array.isArray(group['fields'])\n    );\n  }\n\n  private createFieldSection(\n    field: Record<string, unknown>,\n    deviceType: DeviceTypeResponse | null,\n    index: number,\n  ): AdminDetailSection {\n    const fieldId = this.extractFieldId(field);\n    const fieldTitle = this.extractFieldTitle(field);\n    const displayTitle = fieldTitle || fieldId || 'Unknown Field';\n\n    return {\n      id: `settings-field-${fieldId}`,\n      title: displayTitle,\n      component: DeviceTypesSettingsDefinitionSectionComponent,\n      componentInputs: {\n        entity: deviceType,\n        entityType: 'device-types',\n        fieldId: fieldId,\n        displayTitle: displayTitle,\n      },\n      category: 'settings',\n      order: (index + 1) * 10 + 20,\n    };\n  }\n\n  private extractFieldId(field: Record<string, unknown>): string {\n    return isDefined(field['id']) && typeof field['id'] === 'string'\n      ? field['id']\n      : 'unknown';\n  }\n\n  private extractFieldTitle(field: Record<string, unknown>): string {\n    return isDefined(field['title']) && typeof field['title'] === 'string'\n      ? field['title']\n      : this.extractFieldId(field);\n  }\n\n  /**\n   * Create all device type sections in one call\n   * @param deviceType The device type object to display in the sections\n   * @returns An array of AdminDetailSection objects representing all device type sections\n   */\n  createAllDeviceTypeSections(\n    deviceType: DeviceTypeResponse | null,\n  ): AdminDetailSection[] {\n    return [\n      ...this.createDeviceTypeInformationSections(deviceType),\n      ...this.createSettingsFieldsSections(deviceType),\n      ...this.createIOCapabilitiesSections(deviceType),\n      ...this.createAccessoriesSection(deviceType),\n      ...this.createFeaturesSection(deviceType),\n      ...this.createChangesSection(deviceType),\n    ];\n  }\n}\n"],"mappings":"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","names":["_c0","item","_c0","_c0","_c0","_c0","_c0","_c0","_c0","_c0","_forTrack0","alert","_c0","_c0","_c0","_c0","_c0","input","_c0","_c1","_c0","_c1","_c2","_forTrack0","field","_c0","_c0","_c0","_c0","_c0","_c0","map","_c0","_c0","_c0","fieldValue","_c0","typeValue","_c0","_c0","_c0","alert","alert","_c0","_c0","_c0","_c0","_c0","_c0","_c0","_c0","_c0","_c0","fieldValue","_c0","_c1","_c1","_c1","_c1","_c1","_c1","_c1","_c1","_c1","_c1","_c1","_c1","_c1","_c1","_c1","_c1","_c1","_c1","_c1","_c1","_c0","_c1","_c0","_c0","_c0","_c0","_c0","_c0","_c0","_c0","_forTrack0","_c1","existing"],"x_google_ignoreList":[126]}