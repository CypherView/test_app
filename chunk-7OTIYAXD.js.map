{
  "version": 3,
  "sources": ["src/app/features/administration/services/entity/entity-url-parser.service.ts", "src/app/features/administration/services/entity/entity-url-management.service.ts", "src/app/features/administration/services/entity/entity-details-url.service.ts", "src/app/features/administration/services/entity/entity-details.service.ts"],
  "sourcesContent": ["import { Injectable, inject } from '@angular/core';\nimport { Router } from '@angular/router';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class EntityUrlParserService {\n  private readonly router = inject(Router);\n\n  // Default configuration\n  private config = {\n    routeDepth: 3, // How many segments define a \"parent\" route\n  };\n\n  /**\n   * Configure service options\n   */\n  configure(options: Partial<typeof this.config>): void {\n    this.config = { ...this.config, ...options };\n  }\n\n  /**\n   * Extract the base route without query params\n   * Example: /administration/assets/list → /administration/assets/list\n   * @param url - The URL to extract the base route from\n   * @returns The base route without query params\n   */\n  getBaseRoute(url: string): string {\n    const baseUrl = url.split('?')[0];\n    const regex = /^(\\/[^/]+\\/[^/]+\\/[^/]+)/;\n    const mainSectionMatch = regex.exec(baseUrl);\n    return mainSectionMatch ? mainSectionMatch[1] : baseUrl;\n  }\n\n  /**\n   * Check if two routes belong to the same parent section\n   * Example: /administration/assets/list and /administration/assets/details are same parent\n   * @param route1 - The first route to compare\n   * @param route2 - The second route to compare\n   * @returns True if the routes belong to the same parent section, false otherwise\n   */\n  isSameParentRoute(route1: string, route2: string): boolean {\n    const segments = this.config.routeDepth;\n    const pattern = `^(${'/[^/]+'.repeat(segments)})`;\n    const parentSegmentRegex = new RegExp(pattern);\n\n    const parent1 = route1 ? parentSegmentRegex.exec(route1)?.[1] : undefined;\n    const parent2 = route2 ? parentSegmentRegex.exec(route2)?.[1] : undefined;\n\n    return parent1 === parent2;\n  }\n\n  /**\n   * Get grid type from URL based on pattern matching\n   * Example: /administration/assets → \"assets\"\n   * @param url - The URL to extract the grid type from\n   * @returns The extracted grid type\n   */\n  getGridTypeFromUrl(url: string = this.router.url): string {\n    // Use pattern matching to extract grid type\n    const patterns = [\n      { regex: /\\/hardware\\/([^/?]+)/, groupIndex: 1 },\n      { regex: /\\/profiles\\/([^/?]+)/, groupIndex: 1 },\n      { regex: /\\/providers\\/([^/?]+)/, groupIndex: 1 },\n      { regex: /\\/([^/]+)\\/([^/?]+)$/, groupIndex: 2 },\n    ];\n\n    for (const pattern of patterns) {\n      const match = url.match(pattern.regex);\n      if (match && match.length > pattern.groupIndex) {\n        return match[pattern.groupIndex];\n      }\n    }\n\n    return '';\n  }\n\n  /**\n   * Extract entity details from query params\n   * @param queryParams - The query parameters to extract details from\n   * @param paramNames - The parameter names to use for extraction\n   * @returns The extracted entity details\n   */\n  extractEntityDetailsFromUrl(\n    queryParams: Record<string, string>,\n    paramNames = { id: 'details', type: 'type' },\n  ): { id?: string; type?: string } {\n    return {\n      id: queryParams[paramNames.id],\n      type: queryParams[paramNames.type],\n    };\n  }\n\n  /**\n   * Determine if a URL parameter indicates an entity details view\n   * @param url - The URL to check\n   * @param paramNames - The parameter names to use for checking\n   * @returns True if the URL indicates an entity details view, false otherwise\n   */\n  isEntityDetailsUrl(\n    url: string,\n    paramNames = { id: 'details', type: 'type' },\n  ): boolean {\n    const queryParams = new URLSearchParams(url.split('?')[1] || '');\n    return queryParams.has(paramNames.id) && queryParams.has(paramNames.type);\n  }\n}\n", "import { Injectable, inject } from '@angular/core';\nimport { Location } from '@angular/common';\nimport { Router } from '@angular/router';\nimport { isNullOrUndefined } from '../../../../shared/utils';\nimport { EntityUrlParserService } from './entity-url-parser.service';\nimport { BaseEntity } from '../../../../shared/models';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class EntityUrlManagementService {\n  private readonly router = inject(Router);\n  private readonly location = inject(Location);\n  private readonly urlParser = inject(EntityUrlParserService);\n\n  // Default configuration - can be injected or provided as options\n  private config = {\n    paramNames: {\n      id: 'details',\n      type: 'type',\n    },\n  };\n\n  /**\n   * Configure service options\n   */\n  configure(options: Partial<typeof this.config>): void {\n    this.config = { ...this.config, ...options };\n  }\n\n  /**\n   * This method updates the URL to include the ID and type of the entity\n   * for the details panel.\n   * This is useful for sharing links or bookmarking specific entity details.\n   * @param item - The entity item to update the URL for\n   */\n  async updateUrlForDetails(item: BaseEntity): Promise<void> {\n    try {\n      if (isNullOrUndefined(item) || isNullOrUndefined(item['id'])) return;\n\n      // Extract current URL parts\n      const currentUrl = this.router.url;\n      const [baseUrl, queryString] = currentUrl.split('?');\n\n      // Create new query params\n      const queryParams = new URLSearchParams(queryString || '');\n      queryParams.set(this.config.paramNames.id, String(item['id']));\n      queryParams.set(\n        this.config.paramNames.type,\n        item['entityType']?.toString() ??\n          this.urlParser.getGridTypeFromUrl(this.router.url),\n      );\n\n      // Update URL without navigation\n      this.location.replaceState(baseUrl, queryParams.toString());\n    } catch (error) {\n      console.error('Error updating URL for details:', error);\n    }\n  }\n\n  /**\n   * Clean up URL parameters related to details\n   */\n  cleanUpUrlParams(): void {\n    const currentUrl = this.router.url;\n    const urlParts = currentUrl.split('?');\n    const baseUrl = urlParts[0];\n    const queryParams = new URLSearchParams(urlParts[1] || '');\n\n    // Remove details params unconditionally\n    queryParams.delete(this.config.paramNames.id);\n    queryParams.delete(this.config.paramNames.type);\n\n    const remainingParams = queryParams.toString();\n    const newUrl = remainingParams ? `${baseUrl}?${remainingParams}` : baseUrl;\n\n    // Always update the URL, even if it matches the current one\n    this.location.replaceState(newUrl);\n  }\n\n  /**\n   * Generate a URL with entity details parameters\n   * Useful for creating links to specific entities\n   * @param baseUrl - The base URL to append the query parameters to\n   * @param entityId - The ID of the entity\n   * @param entityType - The type of the entity\n   * @returns The generated URL with entity details parameters\n   */\n  generateEntityDetailsUrl(\n    baseUrl: string,\n    entityId: string,\n    entityType: string,\n  ): string {\n    const queryParams = new URLSearchParams();\n    queryParams.set(this.config.paramNames.id, entityId);\n    queryParams.set(this.config.paramNames.type, entityType);\n\n    return `${baseUrl}?${queryParams.toString()}`;\n  }\n\n  /**\n   * Check if current URL has entity details parameters\n   * @param queryParams - The query parameters to check\n   * @returns True if the URL has entity details parameters, false otherwise\n   */\n  hasEntityDetailsParams(queryParams: Record<string, string>): boolean {\n    return !!(\n      queryParams[this.config.paramNames.id] &&\n      queryParams[this.config.paramNames.type]\n    );\n  }\n}\n", "import { Injectable, inject, DestroyRef, signal } from '@angular/core';\nimport { takeUntilDestroyed } from '@angular/core/rxjs-interop';\nimport { Router, ActivatedRoute, NavigationEnd } from '@angular/router';\nimport { debounceTime, filter, Subject } from 'rxjs';\n\nimport { isDefined } from '../../../../shared/utils';\nimport { GenericDetailsContainerComponent } from '../../components/generic-details-container/generic-details-container.component';\nimport { BroadcastEventMessageService } from '../broadcast-event-messages.service';\nimport { EntityDetailsLoaderService } from './entity-details-loader.service';\nimport { EntityDetailsStateService } from './entity-details.state.service';\nimport { EntityUrlParserService } from './entity-url-parser.service';\nimport { EntityUrlManagementService } from './entity-url-management.service';\nimport { BaseEntity } from '../../../../shared/models';\n\n@Injectable({ providedIn: 'root' })\nexport class DetailsUrlService {\n  private readonly router = inject(Router);\n  private readonly activatedRoute = inject(ActivatedRoute);\n  private readonly stateService = inject(EntityDetailsStateService);\n  private readonly loaderService = inject(EntityDetailsLoaderService);\n  private readonly broadcastService = inject(BroadcastEventMessageService);\n  private readonly destroyRef = inject(DestroyRef);\n\n  // Inject our new focused services\n  private readonly urlParser = inject(EntityUrlParserService);\n  private readonly urlManager = inject(EntityUrlManagementService);\n\n  private readonly urlCheckSubject = new Subject<void>();\n  private readonly currentGridType = signal<string | null>(null);\n  private readonly currentRoute = signal<string>('');\n  private readonly initialized = signal<boolean>(false);\n\n  private config = {\n    paramNames: {\n      id: 'details',\n      type: 'type',\n    },\n    processingDelay: 100,\n  };\n\n  constructor() {\n    // Listen for entity deletions to clean up the URL parameters\n    this.broadcastService\n      .on('entity-deleted')\n      .pipe(takeUntilDestroyed(this.destroyRef))\n      .subscribe(() => {\n        this.urlManager.cleanUpUrlParams();\n      });\n  }\n\n  /**\n   * Configure all related services\n   * @param options - Partial configuration object\n   * @example\n   * service.configure({\n   *  paramNames: {\n   *   id: 'details',\n   *   type: 'type',\n   *  },\n   *  processingDelay: 100,\n   * });\n   *\n   * @returns void\n   */\n  configure(options: Partial<typeof this.config>): void {\n    this.config = { ...this.config, ...options };\n\n    // Pass configuration to other services\n    this.urlManager.configure({ paramNames: this.config.paramNames });\n    this.urlParser.configure({ routeDepth: 3 });\n  }\n\n  /**\n   * Initialize URL handling and listeners\n   */\n  initialize(): void {\n    // Setup debounced URL checking\n    this.urlCheckSubject\n      .pipe(\n        debounceTime(this.config.processingDelay),\n        takeUntilDestroyed(this.destroyRef),\n      )\n      .subscribe(() => {\n        this.processUrlCheck();\n      });\n\n    // Initialize signal values\n    this.currentRoute.set(this.urlParser.getBaseRoute(this.router.url));\n    this.currentGridType.set(this.urlParser.getGridTypeFromUrl());\n    this.initialized.set(true);\n\n    // Check for URL parameters on initial load\n    this.checkUrlForDetailsPanel();\n\n    // Set up listeners\n    this.setupBroadcastListener();\n    this.setupRouteListeners();\n\n    // Explicitly check URL parameters on first navigation\n    if (this.router.url.includes('?')) {\n      this.checkUrlForDetailsPanel();\n    }\n  }\n\n  /**\n   * Set up broadcast listener for grid selection\n   */\n  private setupBroadcastListener(): void {\n    this.broadcastService\n      .on('grid-item-selected')\n      .pipe(takeUntilDestroyed(this.destroyRef))\n      .subscribe((data) => {\n        // First load the full entity details\n        if (\n          isDefined(data.item) &&\n          isDefined(data.item.id) &&\n          isDefined(data.item.entityType)\n        ) {\n          // Set loading state\n          this.stateService.isLoading.set(true);\n\n          // Load full entity details\n          this.loaderService.loadEntityDetails(\n            String(data.item.entityType),\n            String(data.item.id),\n          );\n        } else {\n          // If we don't have the necessary data, just open with what we have\n          this.stateService.openDetailsPanel(\n            data.item,\n            data.componentType ?? GenericDetailsContainerComponent,\n          );\n        }\n\n        // Update URL using the specialized service\n        this.urlManager.updateUrlForDetails(data.item).catch(() => {});\n      });\n\n    this.broadcastService\n      .on('tree-item-selected')\n      .pipe(takeUntilDestroyed(this.destroyRef))\n      .subscribe((data) => {\n        // First load the full entity details\n        if (\n          isDefined(data.item) &&\n          isDefined(data.item.id) &&\n          isDefined(data.item.entityType)\n        ) {\n          // Set loading state\n          this.stateService.isLoading.set(true);\n\n          // Load full entity details\n          this.loaderService.loadEntityDetails(\n            String(data.item.entityType),\n            String(data.item.id),\n          );\n        } else {\n          // If we don't have the necessary data, just open with what we have\n          this.stateService.openDetailsPanel(\n            data.item,\n            data.componentType ?? GenericDetailsContainerComponent,\n          );\n        }\n\n        // Update URL using the specialized service\n        this.urlManager.updateUrlForDetails(data.item).catch(() => {});\n      });\n  }\n\n  /**\n   * Set up route change listeners\n   */\n  private setupRouteListeners(): void {\n    let previousUrl = this.router.url;\n\n    this.router.events\n      .pipe(\n        filter((event) => event instanceof NavigationEnd),\n        takeUntilDestroyed(this.destroyRef),\n      )\n      .subscribe((event) => {\n        const currentUrl = event.url;\n\n        // Handle route change\n        this.handleRouteChange(previousUrl, currentUrl);\n\n        // Check for grid type changes\n        const currentGridType = this.urlParser.getGridTypeFromUrl();\n\n        // Close panel if grid type changed and not in same parent route\n        if (\n          this.currentGridType() !== null &&\n          this.currentGridType() !== currentGridType &&\n          !this.urlParser.isSameParentRoute(\n            this.currentRoute(),\n            this.router.url,\n          ) &&\n          this.stateService.showPanel()\n        ) {\n          this.closeDetailsPanel();\n        }\n\n        // Update current grid type and route\n        this.currentGridType.set(currentGridType);\n        this.currentRoute.set(this.urlParser.getBaseRoute(this.router.url));\n\n        // Check URL for details panel\n        this.checkUrlForDetailsPanel();\n\n        previousUrl = currentUrl;\n      });\n  }\n\n  /**\n   * Trigger a check of URL parameters for the details panel\n   */\n  private checkUrlForDetailsPanel(): void {\n    this.urlCheckSubject.next();\n  }\n\n  /**\n   * Process the URL check after debouncing\n   */\n  private processUrlCheck(): void {\n    try {\n      const queryParams = this.activatedRoute.snapshot.queryParams;\n      const entityId = queryParams[this.config.paramNames.id];\n      const entityType = queryParams[this.config.paramNames.type];\n\n      if (isDefined(entityId) && isDefined(entityType)) {\n        this.loaderService.loadEntityDetails(entityType, entityId);\n      } else if (this.stateService.showPanel()) {\n        if (this.initialized()) {\n          this.closeDetailsPanel();\n        }\n      }\n    } catch (error) {\n      console.error('Error checking URL for details panel:', error);\n    }\n  }\n\n  /**\n   * Update URL with details panel state\n   */\n  async updateUrlForDetails(item: BaseEntity): Promise<void> {\n    return this.urlManager.updateUrlForDetails(item);\n  }\n\n  /**\n   * Close details panel and clean up URL\n   */\n  closeDetailsPanel(): void {\n    if (!this.stateService.showPanel()) return;\n\n    // Clean up URL params using the URL management service\n    this.urlManager.cleanUpUrlParams();\n\n    // Close the panel UI\n    this.stateService.closeDetailsPanel();\n\n    // Broadcast that the details panel has been closed\n    this.broadcastService.broadcast('details-panel-closed', {\n      reason: 'panel closed',\n    });\n  }\n\n  /**\n   * Handle route change while preserving details state\n   */\n  handleRouteChange(previousUrl: string, currentUrl: string): void {\n    const previousBase = this.urlParser.getBaseRoute(previousUrl);\n    const currentBase = this.urlParser.getBaseRoute(currentUrl);\n\n    // If we're navigating within the same base route, preserve details state\n    if (previousBase === currentBase) {\n      // Don't close details panel, just check for details params\n      this.checkUrlForDetailsPanel();\n    } else {\n      // If we're navigating to a different section, close the panel\n      this.closeDetailsPanel();\n    }\n  }\n\n  /**\n   * Synchronize details panel state with URL query parameters\n   */\n  syncDetailsStateWithUrl(): void {\n    const currentUrl = this.router.url;\n    const item = this.stateService.selectedItem();\n\n    if (this.stateService.showPanel() && item) {\n      // Panel is open, ensure URL has the correct parameters\n      if (!currentUrl.includes('details=') || !currentUrl.includes('type=')) {\n        this.updateUrlForDetails(item).catch(() => {});\n      }\n    } else if (!this.stateService.showPanel()) {\n      // Panel is closed, ensure URL doesn't have details parameters\n      if (currentUrl.includes('details=') || currentUrl.includes('type=')) {\n        this.closeDetailsPanel();\n      }\n    }\n  }\n}\n", "import { Injectable, inject, Type } from '@angular/core';\nimport { DetailsUrlService } from './entity-details-url.service';\nimport { EntityDetailsStateService } from './entity-details.state.service';\nimport { BaseEntity } from '../../../../shared/models';\n\n@Injectable({ providedIn: 'root' })\nexport class EntityDetailsService {\n  private readonly stateService = inject(EntityDetailsStateService);\n  private readonly urlService = inject(DetailsUrlService);\n\n  // Expose signals from state service\n  readonly showPanel = this.stateService.showPanel;\n  readonly selectedItem = this.stateService.selectedItem;\n  readonly detailsComponent = this.stateService.detailsComponent;\n  readonly detailsInputs = this.stateService.detailsInputs;\n  readonly isLoading = this.stateService.isLoading;\n  readonly isSoftRefreshing = this.stateService.isSoftRefreshing;\n\n  constructor() {\n    // Initialize URL handling\n    this.urlService.initialize();\n  }\n\n  /**\n   * Open the details panel with the specified item and component\n   */\n  openDetailsPanel(\n    item: BaseEntity,\n    componentType: Type<unknown> | null,\n  ): void {\n    this.stateService.openDetailsPanel(item, componentType);\n    this.urlService.updateUrlForDetails(item).catch(() => {});\n  }\n\n  /**\n   * Close the details panel and clean up URL\n   */\n  closeDetailsPanel(): void {\n    this.urlService.closeDetailsPanel();\n  }\n\n  /**\n   * Get display title for the currently selected item\n   */\n  getSelectedItemTitle(): string {\n    return this.stateService.getSelectedItemTitle();\n  }\n\n  /**\n   * Get the type of the currently selected item\n   */\n  getSelectedItemType(): string {\n    return this.stateService.getSelectedItemType();\n  }\n\n  /**\n   * Get the ID of the currently selected item\n   */\n  getSelectedItemId(): string {\n    return this.stateService.getSelectedItemId();\n  }\n\n  /**\n   * Soft refresh the currently selected item without affecting accordion states\n   * This method preserves UI state while updating entity data\n   */\n  softRefreshSelectedItem(updatedItem?: BaseEntity): void {\n    // The state service now handles its own lifecycle completely\n    this.stateService.softRefreshSelectedItem(updatedItem);\n  }\n\n  /**\n   * Synchronize details panel state with URL query parameters\n   * Call this when URL might be out of sync with panel state\n   */\n  syncDetailsStateWithUrl(): void {\n    this.urlService.syncDetailsStateWithUrl();\n  }\n}\n"],
  "mappings": "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",
  "names": []
}
