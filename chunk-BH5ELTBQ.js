import {
  DeviceTypesInformationSectionComponent,
  Divider,
  DividerModule,
  DynamicFormModalComponent,
  EntityOperationRegistryService,
  EntitySectionBaseComponent,
  FeatureSectionComponent,
  FeedSectionComponent,
  ModalListFormComponent,
  Panel,
  PanelModule,
  SectionConfigBuilder,
  TypedEntitySectionBaseComponent,
  UnsavedChangesService,
  faAt,
  faAtlas,
  faBell,
  faClipboardList,
  faComments,
  faEnvelopeOpenText,
  faFill,
  faFolder,
  faKey,
  faPalette,
  faPassport,
  faPlug,
  faRoad,
  faSitemap,
  faUser,
  faUserLock,
  v4_default
} from "./chunk-YYLSGSHD.js";
import {
  Card,
  CardModule
} from "./chunk-YEDIYOUK.js";
import {
  Accordion,
  AccordionContent,
  AccordionHeader,
  AccordionModule,
  AccordionPanel,
  AssetGroupingService,
  ConfirmDialog,
  DataViewModule,
  DynamicFormComponent,
  EventFilterService,
  RequestCacheService,
  UtilsService
} from "./chunk-OOKU4RXS.js";
import {
  Message,
  MessageModule
} from "./chunk-3UBAK53C.js";
import {
  Menu,
  MenuModule,
  THEME_OFF_BLACK,
  THEME_OFF_WHITE,
  ThemeColor,
  ThemeDataService,
  ThemeEngine,
  ToastModule
} from "./chunk-CY2OJQDM.js";
import {
  FaIconComponent,
  FontAwesomeModule
} from "./chunk-GMWSGY3X.js";
import {
  ToastService
} from "./chunk-LWAGH4EB.js";
import {
  ApiSchemaService,
  ClientDataService,
  DialogService,
  DynamicDialogConfig,
  GridComponent,
  MeasurementUnitType,
  MeasurementUnitsService,
  MultiSelectModule,
  createAssetFilterField,
  createAutocompleteField,
  createColorPickerField,
  createDateField,
  createDropdownField,
  createEventFilterField,
  createIconSelectorField,
  createListboxField,
  createModalListField,
  createMultiselectField,
  createNumberField,
  createPasswordField,
  createTextAreaField,
  createTextField,
  createToggleSwitchField,
  createTreeSelectField,
  createTreeSplitButtonListField,
  require_lodash
} from "./chunk-XUQM2QOP.js";
import {
  AVAILABLE_FONTS,
  CUSTOM_FIELD_TYPES,
  CUSTOM_FIELD_TYPES_MAP,
  ChipModule,
  DAY_OF_MONTH_OPTIONS,
  DEFAULT_SHADE_VALUES,
  DROP_SHADOW_OPTIONS,
  FONT_TRANSFORMS,
  FONT_WEIGHTS,
  ICON_PACKS,
  IO_TYPE_MAP,
  LEGACY_RIGHTS,
  MONTH_OPTIONS,
  POSITION_OPTIONS,
  ProgressSpinner,
  ProgressSpinnerModule,
  ReminderType,
  SIZE_OPTIONS,
  UtilityService,
  WEEKDAY_OPTIONS
} from "./chunk-YDIEJ3ZD.js";
import {
  takeUntilDestroyed
} from "./chunk-7PPW7MEH.js";
import {
  Button,
  ButtonModule,
  ConfirmEventType,
  ConfirmationService,
  FormsModule,
  InputTextModule,
  MessageService,
  NgControlStatus,
  NgModel,
  PrimeTemplate,
  ReactiveFormsModule,
  Select,
  SelectModule,
  Tooltip,
  TooltipModule,
  Validators
} from "./chunk-LKPIGFER.js";
import {
  BroadcastEventMessageService
} from "./chunk-AQP2DD2C.js";
import {
  AdminStateService,
  AuthDataService
} from "./chunk-QGD2WQZD.js";
import {
  AccountsService,
  ApiUrlService,
  AppFeatures,
  AppListsTranslations,
  CLIENT_SEARCH_LIMIT,
  COLORS,
  ClientResponse,
  ClientsService,
  DEFAULT_LIST_SIZE,
  DEFAULT_SYSTEM_ID,
  DeviceBitmapConfiguration,
  DeviceProvidersService,
  DeviceTypesService,
  DistributorResponse,
  EmailProvidersService,
  EntitiesService,
  IoTypeListItem,
  LocalStorageService,
  NotificationActions,
  RoadSpeedModifierEntry,
  SEARCH_DEBOUNCE_TIME,
  VendorResponse,
  ZoneListItem,
  enumToSelectOptionValues,
  environment,
  getAllRouteParams,
  getBackendFeatureDefaults,
  hasProperty,
  isDefined,
  isEmpty,
  isNullOrUndefined,
  isNumber,
  isString,
  mobileValidator,
  phoneValidator,
  setNestedProperty
} from "./chunk-UOL47JT7.js";
import {
  ActivatedRoute,
  CommonModule,
  HttpClient,
  LowerCasePipe,
  NgClass,
  NgComponentOutlet,
  Router,
  isPlatformBrowser
} from "./chunk-W5MMOG3B.js";
import {
  BehaviorSubject,
  ChangeDetectionStrategy,
  ChangeDetectorRef,
  Component,
  ContentChildren,
  DestroyRef,
  Directive,
  EMPTY,
  ElementRef,
  EventEmitter,
  Injectable,
  InjectionToken,
  Injector,
  Input,
  NgModule,
  NgZone,
  Observable,
  Output,
  PLATFORM_ID,
  Subject,
  Subscription,
  ViewChild,
  ViewEncapsulation,
  afterNextRender,
  catchError,
  combineLatest,
  computed,
  debounceTime,
  defer,
  distinctUntilChanged,
  effect,
  finalize,
  firstValueFrom,
  forkJoin,
  inject,
  input,
  map,
  model,
  of,
  output,
  resource,
  setClassMetadata,
  signal,
  switchMap,
  take,
  takeUntil,
  tap,
  untracked,
  ɵsetClassDebugInfo,
  ɵɵInheritDefinitionFeature,
  ɵɵNgOnChangesFeature,
  ɵɵProvidersFeature,
  ɵɵadvance,
  ɵɵattribute,
  ɵɵclassMap,
  ɵɵclassProp,
  ɵɵconditional,
  ɵɵconditionalCreate,
  ɵɵcontentQuery,
  ɵɵdefineComponent,
  ɵɵdefineDirective,
  ɵɵdefineInjectable,
  ɵɵdefineInjector,
  ɵɵdefineNgModule,
  ɵɵdomElement,
  ɵɵdomElementEnd,
  ɵɵdomElementStart,
  ɵɵelement,
  ɵɵelementContainer,
  ɵɵelementEnd,
  ɵɵelementStart,
  ɵɵgetCurrentView,
  ɵɵgetInheritedFactory,
  ɵɵlistener,
  ɵɵloadQuery,
  ɵɵnamespaceHTML,
  ɵɵnamespaceSVG,
  ɵɵnextContext,
  ɵɵpipe,
  ɵɵpipeBind1,
  ɵɵprojection,
  ɵɵprojectionDef,
  ɵɵproperty,
  ɵɵpureFunction0,
  ɵɵpureFunction1,
  ɵɵpureFunction2,
  ɵɵqueryRefresh,
  ɵɵreference,
  ɵɵrepeater,
  ɵɵrepeaterCreate,
  ɵɵrepeaterTrackByIdentity,
  ɵɵrepeaterTrackByIndex,
  ɵɵresetView,
  ɵɵrestoreView,
  ɵɵsanitizeUrl,
  ɵɵstyleMap,
  ɵɵtemplate,
  ɵɵtemplateRefExtractor,
  ɵɵtext,
  ɵɵtextInterpolate,
  ɵɵtextInterpolate1,
  ɵɵviewQuery
} from "./chunk-Q56RWZOJ.js";
import {
  __objRest,
  __spreadProps,
  __spreadValues,
  __toESM
} from "./chunk-KWSTWQNB.js";

// src/app/features/administration/services/adapters/base-tree.adapter.service.ts
var BaseTreeAdapter = class {
  /**
   * Fetches a list of entities based on the provided parameters.
   * This method transforms the flat list of entities into a hierarchical structure.
   *
   * @param params - The parameters for fetching the entity list
   * @return Observable containing the hierarchical TreeNode structure and other metadata
   */
  getList(params) {
    const { owner, limit, offset, sortField, filters } = params;
    if (isNullOrUndefined(owner)) {
      return of({ nodes: [], items: [], count: 0, limit: 0 });
    }
    return this.fetchEntities(owner, offset, limit, sortField, filters).pipe(map((response) => {
      const nodes = this.buildEntityTree(response.items);
      return {
        nodes,
        items: response.items,
        count: response.count,
        limit: limit || 0
      };
    }));
  }
  /**
   * Converts flat entity data into hierarchical TreeNode structure
   * This method builds a tree structure from a flat list of entities.
   * It handles circular references, missing parents, and owner relationships.
   *
   * @param items - Flat list of entities to be converted into a tree structure
   * @returns Hierarchical TreeNode structure for TreeTable
   */
  buildEntityTree(items) {
    if (!items?.length)
      return [];
    const nodeMap = /* @__PURE__ */ new Map();
    const ownerRootMap = /* @__PURE__ */ new Map();
    const missingParentMap = /* @__PURE__ */ new Map();
    const circularRefs = /* @__PURE__ */ new Set();
    items.forEach((item) => {
      if (isDefined(item.owner?.id) && item.id === item.owner.id) {
        ownerRootMap.set(item.owner.id, item.id);
      }
      if (item.parent?.id === item.id) {
        circularRefs.add(item.id);
        console.warn(`Self-reference detected for entity ${item.id} (${item.name})`);
      }
    });
    items.forEach((item) => {
      nodeMap.set(item.id, {
        key: item.id,
        data: item,
        children: [],
        leaf: true
      });
    });
    const rootNodes = [];
    const attached = /* @__PURE__ */ new Set();
    items.forEach((item) => this.processTreeNode(item, nodeMap, ownerRootMap, missingParentMap, circularRefs, rootNodes, attached));
    this.sortNodesByName(rootNodes);
    return rootNodes;
  }
  /**
   * Processes each tree node and attaches it to its parent or root node
   * Handles circular references and missing parents.
   *
   * @param item - The entity item to process
   * @param nodeMap - Map of all nodes by ID
   * @param ownerRootMap - Map of owner IDs to root node IDs
   * @param missingParentMap - Map for missing parent nodes
   * @param circularRefs - Set of circular references
   * @param rootNodes - Array of root nodes
   * @param attached - Set of already attached node keys
   * @returns void
   */
  processTreeNode(item, nodeMap, ownerRootMap, missingParentMap, circularRefs, rootNodes, attached) {
    const currentNode = nodeMap.get(item.id);
    if (!currentNode)
      return;
    if (circularRefs.has(item.id)) {
      this.attachToOwnerOrRoot(item, currentNode, ownerRootMap, nodeMap, rootNodes, attached);
      return;
    }
    if (item.owner?.id === item.id && !attached.has(item.id)) {
      rootNodes.push(currentNode);
      attached.add(item.id);
      return;
    }
    if (isDefined(item.parent?.id) && !circularRefs.has(item.id)) {
      this.attachToParent(item, currentNode, nodeMap, missingParentMap, ownerRootMap, rootNodes, attached);
      return;
    }
    this.attachToOwnerOrRoot(item, currentNode, ownerRootMap, nodeMap, rootNodes, attached);
  }
  /**
   * Attaches the current node to its parent node
   * If the parent is missing, it creates a placeholder node for it.
   * @param item - The entity item to process
   * @param currentNode - The current node being processed
   * @param nodeMap - Map of all nodes by ID
   * @param missingParentMap - Map for missing parent nodes
   * @param ownerRootMap - Map of owner IDs to root node IDs
   * @param rootNodes - Array of root nodes
   * @param attached - Set of already attached node keys
   * @returns void
   */
  attachToParent(item, currentNode, nodeMap, missingParentMap, ownerRootMap, rootNodes, attached) {
    let parentNode = isDefined(item.parent) ? nodeMap.get(item.parent.id) : void 0;
    parentNode ??= this.createMissingParentNode(item, missingParentMap, ownerRootMap, nodeMap, rootNodes, attached);
    if (!attached.has(item.id) && isDefined(parentNode.children)) {
      parentNode.children.push(currentNode);
      parentNode.leaf = false;
      attached.add(item.id);
    }
  }
  /**
   * Creates a placeholder node for a missing parent entity
   * This method is called when a parent node is not found in the map.
   * It creates a new node with a unique key and default data.
   *
   * @param item - The entity item for which the parent is missing
   * @param missingParentMap - Map for missing parent nodes
   * @param ownerRootMap - Map of owner IDs to root node IDs
   * @param nodeMap - Map of all nodes by ID
   * @param rootNodes - Array of root nodes
   * @param attached - Set of already attached node keys
   * @returns The created placeholder node for the missing parent
   */
  createMissingParentNode(item, missingParentMap, ownerRootMap, nodeMap, rootNodes, attached) {
    let parentNode = isDefined(item.parent) ? missingParentMap.get(item.parent.id) : void 0;
    if (!parentNode) {
      const parentId = item?.parent?.id;
      const parentKey = `missing-${parentId}`;
      const entityData = this.createMissingEntityData(parentId, item?.parent?.name, item.owner);
      parentNode = {
        key: parentKey,
        data: entityData,
        children: [],
        leaf: false,
        styleClass: "missing-parent-node"
      };
      missingParentMap.set(parentId ?? "", parentNode);
      this.attachNodeToOwnerOrRoot(parentKey, parentNode, item.owner?.id, ownerRootMap, nodeMap, rootNodes, attached);
    }
    return parentNode;
  }
  /**
   * Attaches the current node to its owner or to root nodes
   * This method is called when the node cannot be attached to a parent.
   * It checks if the node has an owner and tries to attach it to the owner's root node.
   * If not, it adds the node to the root nodes array.
   * @param item - The entity item to process
   * @param currentNode - The current node being processed
   * @param ownerRootMap - Map of owner IDs to root node IDs
   * @param nodeMap - Map of all nodes by ID
   * @param rootNodes - Array of root nodes
   * @param attached - Set of already attached node keys
   * @returns void
   * */
  attachToOwnerOrRoot(item, currentNode, ownerRootMap, nodeMap, rootNodes, attached) {
    this.attachNodeToOwnerOrRoot(item.id, currentNode, item.owner?.id, ownerRootMap, nodeMap, rootNodes, attached);
  }
  /**
   * Shared utility method to attach a node to its owner or to root nodes
   * @param nodeKey - Unique identifier of the node
   * @param node - The node to attach
   * @param ownerId - ID of the owner (if any)
   * @param ownerRootMap - Map of owner IDs to root node IDs
   * @param nodeMap - Map of all nodes by ID
   * @param rootNodes - Array of root nodes
   * @param attached - Set of already attached node keys
   * @returns true if node was attached, false otherwise
   */
  attachNodeToOwnerOrRoot(nodeKey, node, ownerId, ownerRootMap, nodeMap, rootNodes, attached) {
    if (attached.has(nodeKey)) {
      return false;
    }
    if (isDefined(ownerId) && ownerRootMap.has(ownerId) && nodeKey !== ownerId) {
      const rootNodeId = ownerRootMap.get(ownerId);
      const ownerNode = isDefined(rootNodeId) ? nodeMap.get(rootNodeId) : null;
      if (isDefined(ownerNode?.children)) {
        ownerNode.children.push(node);
        ownerNode.leaf = false;
        attached.add(nodeKey);
        return true;
      }
    }
    rootNodes.push(node);
    attached.add(nodeKey);
    return true;
  }
  /**
   * Creates data for a missing parent entity
   * Override this method in derived classes to customize the missing parent structure
   * @param parentId - ID of the missing parent
   * @param parentName - Name of the missing parent, if available
   * @param ownerInfo - Owner information to inherit
   * @returns Partial entity data for the missing parent
   */
  createMissingEntityData(parentId, parentName, ownerInfo) {
    return {
      id: parentId,
      name: parentName ?? "Unknown",
      owner: ownerInfo,
      parent: null
    };
  }
  /**
   * Sorts the nodes by their name property in a case-insensitive manner
   * This method is called recursively for all child nodes.
   * @param nodes - Array of TreeNode objects to be sorted
   * @return void
   */
  sortNodesByName(nodes) {
    nodes.sort((a, b) => {
      const nameA = a.data?.name?.toLowerCase() ?? "";
      const nameB = b.data?.name?.toLowerCase() ?? "";
      return nameA.localeCompare(nameB);
    });
    nodes.forEach((node) => {
      if (isDefined(node.children) && !isEmpty(node.children)) {
        this.sortNodesByName(node.children);
      }
    });
  }
};

// src/app/features/administration/services/adapters/device-types.adapter.service.ts
var DeviceTypesDataAdapter = class _DeviceTypesDataAdapter extends BaseTreeAdapter {
  deviceTypesService = inject(DeviceTypesService);
  fetchEntities(owner, offset, limit, sortField, filters) {
    return this.deviceTypesService.listDeviceTypes(
      owner,
      true,
      // recurse to get all levels
      offset,
      limit,
      sortField,
      filters
    );
  }
  getById(id) {
    return this.deviceTypesService.getDeviceType(id);
  }
  static \u0275fac = /* @__PURE__ */ (() => {
    let \u0275DeviceTypesDataAdapter_BaseFactory;
    return function DeviceTypesDataAdapter_Factory(__ngFactoryType__) {
      return (\u0275DeviceTypesDataAdapter_BaseFactory || (\u0275DeviceTypesDataAdapter_BaseFactory = \u0275\u0275getInheritedFactory(_DeviceTypesDataAdapter)))(__ngFactoryType__ || _DeviceTypesDataAdapter);
    };
  })();
  static \u0275prov = /* @__PURE__ */ \u0275\u0275defineInjectable({ token: _DeviceTypesDataAdapter, factory: _DeviceTypesDataAdapter.\u0275fac, providedIn: "root" });
};
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(DeviceTypesDataAdapter, [{
    type: Injectable,
    args: [{
      providedIn: "root"
    }]
  }], null, null);
})();

// src/app/features/administration/factories/flexible-section-builder.factory.ts
var FlexibleSectionBuilder = class _FlexibleSectionBuilder {
  entity;
  sections = [];
  categories = [];
  defaultExpandedCategory;
  allowMultipleExpanded = false;
  showCategoryIcons = false;
  constructor(entity = null) {
    this.entity = entity;
    this.withDefaultCategories();
  }
  /**
   * Add a section to the builder
   */
  withSection(id, title, component, category = "information", order = 10, additionalInputs = {}) {
    this.sections.push({
      id,
      title,
      component,
      category,
      order,
      componentInputs: __spreadValues({
        entity: this.entity
      }, additionalInputs)
    });
    return this;
  }
  /**
   * Add a section with full configuration options
   */
  withAdvancedSection(section) {
    this.sections.push(__spreadProps(__spreadValues({}, section), {
      componentInputs: __spreadValues({
        entity: this.entity
      }, section.componentInputs || {})
    }));
    return this;
  }
  /**
   * Define or override a category
   */
  withCategory(key, label, order, options) {
    const existingIndex = this.categories.findIndex((c) => c.key === key);
    const category = __spreadValues({
      key,
      label,
      order
    }, options);
    if (existingIndex >= 0) {
      this.categories[existingIndex] = category;
    } else {
      this.categories.push(category);
    }
    return this;
  }
  /**
   * Remove a category
   */
  withoutCategory(key) {
    this.categories = this.categories.filter((c) => c.key !== key);
    return this;
  }
  /**
   * Set the default expanded category
   */
  withDefaultExpanded(categoryKey) {
    this.defaultExpandedCategory = categoryKey;
    return this;
  }
  /**
   * Allow multiple accordion panels to be expanded simultaneously
   */
  withMultipleExpansion(allow = true) {
    this.allowMultipleExpanded = allow;
    return this;
  }
  /**
   * Show category icons in the accordion headers
   */
  withCategoryIcons(show = true) {
    this.showCategoryIcons = show;
    return this;
  }
  /**
   * Add multiple sections at once
   */
  withSections(sections) {
    sections.forEach((section) => {
      this.sections.push(__spreadProps(__spreadValues({}, section), {
        componentInputs: __spreadValues({
          entity: this.entity
        }, section.componentInputs || {})
      }));
    });
    return this;
  }
  /**
   * Add default categories commonly used across entities
   */
  withDefaultCategories() {
    this.categories = [
      { key: "information", label: "Information", order: 10 },
      { key: "settings", label: "Settings", order: 20 },
      { key: "events", label: "Events", order: 30 },
      { key: "statistics", label: "Statistics", order: 40 },
      { key: "io", label: "IO", order: 50 },
      { key: "accessories", label: "Accessories", order: 60 },
      { key: "controls", label: "Controls", order: 70 },
      { key: "assets", label: "Assets", order: 80 },
      { key: "users", label: "Users", order: 90 },
      { key: "features", label: "Features", order: 100 },
      { key: "customization", label: "Email Customization", order: 110 },
      { key: "feed", label: "Changes", order: 120 },
      { key: "backend", label: "Backend", order: 130 },
      { key: "custom", label: "Custom", order: 140 }
    ];
    return this;
  }
  /**
   * Build the final configuration
   */
  build() {
    const usedCategories = this.categories.filter((category) => this.sections.some((section) => section.category === category.key));
    const layout = {
      categories: usedCategories.sort((a, b) => a.order - b.order),
      defaultExpandedCategory: this.defaultExpandedCategory,
      allowMultipleExpanded: this.allowMultipleExpanded,
      showCategoryIcons: this.showCategoryIcons
    };
    return {
      sections: this.sections,
      layout
    };
  }
  /**
   * Legacy method to just return sections (for backward compatibility)
   */
  buildSections() {
    return this.sections;
  }
  /**
   * Create a builder for a specific entity type
   */
  static forEntity(entity) {
    return new _FlexibleSectionBuilder(entity);
  }
};

// src/app/features/administration/components/generic-details-container/generic-details-container.component.ts
function GenericDetailsContainerComponent_Conditional_5_Template(rf, ctx) {
  if (rf & 1) {
    \u0275\u0275elementStart(0, "div", 4);
    \u0275\u0275element(1, "p-progressSpinner");
    \u0275\u0275elementEnd();
  }
}
function GenericDetailsContainerComponent_Conditional_6_Conditional_2_ng_template_1_Template(rf, ctx) {
  if (rf & 1) {
    \u0275\u0275elementStart(0, "span", 12);
    \u0275\u0275text(1, "Information");
    \u0275\u0275elementEnd();
  }
}
function GenericDetailsContainerComponent_Conditional_6_Conditional_2_ng_template_2_For_1_Conditional_1_Template(rf, ctx) {
  if (rf & 1) {
    \u0275\u0275elementStart(0, "h3", 14);
    \u0275\u0275text(1);
    \u0275\u0275elementEnd();
  }
  if (rf & 2) {
    const section_r1 = \u0275\u0275nextContext().$implicit;
    \u0275\u0275advance();
    \u0275\u0275textInterpolate1(" ", section_r1.title, " ");
  }
}
function GenericDetailsContainerComponent_Conditional_6_Conditional_2_ng_template_2_For_1_ng_container_2_Template(rf, ctx) {
  if (rf & 1) {
    \u0275\u0275elementContainer(0);
  }
}
function GenericDetailsContainerComponent_Conditional_6_Conditional_2_ng_template_2_For_1_Conditional_3_Template(rf, ctx) {
  if (rf & 1) {
    \u0275\u0275element(0, "p-divider");
  }
}
function GenericDetailsContainerComponent_Conditional_6_Conditional_2_ng_template_2_For_1_Template(rf, ctx) {
  if (rf & 1) {
    \u0275\u0275elementStart(0, "div", 13);
    \u0275\u0275conditionalCreate(1, GenericDetailsContainerComponent_Conditional_6_Conditional_2_ng_template_2_For_1_Conditional_1_Template, 2, 1, "h3", 14);
    \u0275\u0275template(2, GenericDetailsContainerComponent_Conditional_6_Conditional_2_ng_template_2_For_1_ng_container_2_Template, 1, 0, "ng-container", 15);
    \u0275\u0275elementEnd();
    \u0275\u0275conditionalCreate(3, GenericDetailsContainerComponent_Conditional_6_Conditional_2_ng_template_2_For_1_Conditional_3_Template, 1, 0, "p-divider");
  }
  if (rf & 2) {
    const section_r1 = ctx.$implicit;
    const \u0275$index_30_r2 = ctx.$index;
    const \u0275$count_30_r3 = ctx.$count;
    const ctx_r3 = \u0275\u0275nextContext(4);
    \u0275\u0275advance();
    \u0275\u0275conditional(section_r1.title ? 1 : -1);
    \u0275\u0275advance();
    \u0275\u0275property("ngComponentOutlet", section_r1.component)("ngComponentOutletInputs", ctx_r3.getSectionInputs(section_r1));
    \u0275\u0275advance();
    \u0275\u0275conditional(!(\u0275$index_30_r2 === \u0275$count_30_r3 - 1) ? 3 : -1);
  }
}
function GenericDetailsContainerComponent_Conditional_6_Conditional_2_ng_template_2_Template(rf, ctx) {
  if (rf & 1) {
    \u0275\u0275repeaterCreate(0, GenericDetailsContainerComponent_Conditional_6_Conditional_2_ng_template_2_For_1_Template, 4, 4, null, null, \u0275\u0275repeaterTrackByIdentity);
  }
  if (rf & 2) {
    const ctx_r3 = \u0275\u0275nextContext(3);
    \u0275\u0275repeater(ctx_r3.informationSections());
  }
}
function GenericDetailsContainerComponent_Conditional_6_Conditional_2_Template(rf, ctx) {
  if (rf & 1) {
    \u0275\u0275elementStart(0, "p-accordion-panel", 6);
    \u0275\u0275template(1, GenericDetailsContainerComponent_Conditional_6_Conditional_2_ng_template_1_Template, 2, 0, "ng-template", 10)(2, GenericDetailsContainerComponent_Conditional_6_Conditional_2_ng_template_2_Template, 2, 0, "ng-template", 11);
    \u0275\u0275elementEnd();
  }
}
function GenericDetailsContainerComponent_Conditional_6_Conditional_3_ng_template_1_Template(rf, ctx) {
  if (rf & 1) {
    \u0275\u0275elementStart(0, "span", 12);
    \u0275\u0275text(1, "Settings");
    \u0275\u0275elementEnd();
  }
}
function GenericDetailsContainerComponent_Conditional_6_Conditional_3_ng_template_2_For_1_Conditional_1_Template(rf, ctx) {
  if (rf & 1) {
    \u0275\u0275elementStart(0, "h3", 14);
    \u0275\u0275text(1);
    \u0275\u0275elementEnd();
  }
  if (rf & 2) {
    const section_r5 = \u0275\u0275nextContext().$implicit;
    \u0275\u0275advance();
    \u0275\u0275textInterpolate1(" ", section_r5.title, " ");
  }
}
function GenericDetailsContainerComponent_Conditional_6_Conditional_3_ng_template_2_For_1_ng_container_2_Template(rf, ctx) {
  if (rf & 1) {
    \u0275\u0275elementContainer(0);
  }
}
function GenericDetailsContainerComponent_Conditional_6_Conditional_3_ng_template_2_For_1_Conditional_3_Template(rf, ctx) {
  if (rf & 1) {
    \u0275\u0275element(0, "p-divider");
  }
}
function GenericDetailsContainerComponent_Conditional_6_Conditional_3_ng_template_2_For_1_Template(rf, ctx) {
  if (rf & 1) {
    \u0275\u0275elementStart(0, "div", 13);
    \u0275\u0275conditionalCreate(1, GenericDetailsContainerComponent_Conditional_6_Conditional_3_ng_template_2_For_1_Conditional_1_Template, 2, 1, "h3", 14);
    \u0275\u0275template(2, GenericDetailsContainerComponent_Conditional_6_Conditional_3_ng_template_2_For_1_ng_container_2_Template, 1, 0, "ng-container", 15);
    \u0275\u0275elementEnd();
    \u0275\u0275conditionalCreate(3, GenericDetailsContainerComponent_Conditional_6_Conditional_3_ng_template_2_For_1_Conditional_3_Template, 1, 0, "p-divider");
  }
  if (rf & 2) {
    const section_r5 = ctx.$implicit;
    const \u0275$index_54_r6 = ctx.$index;
    const \u0275$count_54_r7 = ctx.$count;
    const ctx_r3 = \u0275\u0275nextContext(4);
    \u0275\u0275advance();
    \u0275\u0275conditional(section_r5.title ? 1 : -1);
    \u0275\u0275advance();
    \u0275\u0275property("ngComponentOutlet", section_r5.component)("ngComponentOutletInputs", ctx_r3.getSectionInputs(section_r5));
    \u0275\u0275advance();
    \u0275\u0275conditional(!(\u0275$index_54_r6 === \u0275$count_54_r7 - 1) ? 3 : -1);
  }
}
function GenericDetailsContainerComponent_Conditional_6_Conditional_3_ng_template_2_Template(rf, ctx) {
  if (rf & 1) {
    \u0275\u0275repeaterCreate(0, GenericDetailsContainerComponent_Conditional_6_Conditional_3_ng_template_2_For_1_Template, 4, 4, null, null, \u0275\u0275repeaterTrackByIdentity);
  }
  if (rf & 2) {
    const ctx_r3 = \u0275\u0275nextContext(3);
    \u0275\u0275repeater(ctx_r3.settingsSections());
  }
}
function GenericDetailsContainerComponent_Conditional_6_Conditional_3_Template(rf, ctx) {
  if (rf & 1) {
    \u0275\u0275elementStart(0, "p-accordion-panel", 7);
    \u0275\u0275template(1, GenericDetailsContainerComponent_Conditional_6_Conditional_3_ng_template_1_Template, 2, 0, "ng-template", 10)(2, GenericDetailsContainerComponent_Conditional_6_Conditional_3_ng_template_2_Template, 2, 0, "ng-template", 11);
    \u0275\u0275elementEnd();
  }
}
function GenericDetailsContainerComponent_Conditional_6_Conditional_4_ng_template_1_Template(rf, ctx) {
  if (rf & 1) {
    \u0275\u0275elementStart(0, "span", 12);
    \u0275\u0275text(1, "Statistics");
    \u0275\u0275elementEnd();
  }
}
function GenericDetailsContainerComponent_Conditional_6_Conditional_4_ng_template_2_For_1_Conditional_1_Template(rf, ctx) {
  if (rf & 1) {
    \u0275\u0275elementStart(0, "h3", 14);
    \u0275\u0275text(1);
    \u0275\u0275elementEnd();
  }
  if (rf & 2) {
    const section_r8 = \u0275\u0275nextContext().$implicit;
    \u0275\u0275advance();
    \u0275\u0275textInterpolate1(" ", section_r8.title, " ");
  }
}
function GenericDetailsContainerComponent_Conditional_6_Conditional_4_ng_template_2_For_1_ng_container_2_Template(rf, ctx) {
  if (rf & 1) {
    \u0275\u0275elementContainer(0);
  }
}
function GenericDetailsContainerComponent_Conditional_6_Conditional_4_ng_template_2_For_1_Conditional_3_Template(rf, ctx) {
  if (rf & 1) {
    \u0275\u0275element(0, "p-divider");
  }
}
function GenericDetailsContainerComponent_Conditional_6_Conditional_4_ng_template_2_For_1_Template(rf, ctx) {
  if (rf & 1) {
    \u0275\u0275elementStart(0, "div", 13);
    \u0275\u0275conditionalCreate(1, GenericDetailsContainerComponent_Conditional_6_Conditional_4_ng_template_2_For_1_Conditional_1_Template, 2, 1, "h3", 14);
    \u0275\u0275template(2, GenericDetailsContainerComponent_Conditional_6_Conditional_4_ng_template_2_For_1_ng_container_2_Template, 1, 0, "ng-container", 15);
    \u0275\u0275elementEnd();
    \u0275\u0275conditionalCreate(3, GenericDetailsContainerComponent_Conditional_6_Conditional_4_ng_template_2_For_1_Conditional_3_Template, 1, 0, "p-divider");
  }
  if (rf & 2) {
    const section_r8 = ctx.$implicit;
    const \u0275$index_78_r9 = ctx.$index;
    const \u0275$count_78_r10 = ctx.$count;
    const ctx_r3 = \u0275\u0275nextContext(4);
    \u0275\u0275advance();
    \u0275\u0275conditional(section_r8.title ? 1 : -1);
    \u0275\u0275advance();
    \u0275\u0275property("ngComponentOutlet", section_r8.component)("ngComponentOutletInputs", ctx_r3.getSectionInputs(section_r8));
    \u0275\u0275advance();
    \u0275\u0275conditional(!(\u0275$index_78_r9 === \u0275$count_78_r10 - 1) ? 3 : -1);
  }
}
function GenericDetailsContainerComponent_Conditional_6_Conditional_4_ng_template_2_Template(rf, ctx) {
  if (rf & 1) {
    \u0275\u0275repeaterCreate(0, GenericDetailsContainerComponent_Conditional_6_Conditional_4_ng_template_2_For_1_Template, 4, 4, null, null, \u0275\u0275repeaterTrackByIdentity);
  }
  if (rf & 2) {
    const ctx_r3 = \u0275\u0275nextContext(3);
    \u0275\u0275repeater(ctx_r3.statisticsSections());
  }
}
function GenericDetailsContainerComponent_Conditional_6_Conditional_4_Template(rf, ctx) {
  if (rf & 1) {
    \u0275\u0275elementStart(0, "p-accordion-panel", 8);
    \u0275\u0275template(1, GenericDetailsContainerComponent_Conditional_6_Conditional_4_ng_template_1_Template, 2, 0, "ng-template", 10)(2, GenericDetailsContainerComponent_Conditional_6_Conditional_4_ng_template_2_Template, 2, 0, "ng-template", 11);
    \u0275\u0275elementEnd();
  }
}
function GenericDetailsContainerComponent_Conditional_6_Conditional_5_ng_template_1_Template(rf, ctx) {
  if (rf & 1) {
    \u0275\u0275elementStart(0, "span", 12);
    \u0275\u0275text(1, "Custom");
    \u0275\u0275elementEnd();
  }
}
function GenericDetailsContainerComponent_Conditional_6_Conditional_5_ng_template_2_For_1_Conditional_1_Template(rf, ctx) {
  if (rf & 1) {
    \u0275\u0275elementStart(0, "h3", 14);
    \u0275\u0275text(1);
    \u0275\u0275elementEnd();
  }
  if (rf & 2) {
    const section_r11 = \u0275\u0275nextContext().$implicit;
    \u0275\u0275advance();
    \u0275\u0275textInterpolate1(" ", section_r11.title, " ");
  }
}
function GenericDetailsContainerComponent_Conditional_6_Conditional_5_ng_template_2_For_1_ng_container_2_Template(rf, ctx) {
  if (rf & 1) {
    \u0275\u0275elementContainer(0);
  }
}
function GenericDetailsContainerComponent_Conditional_6_Conditional_5_ng_template_2_For_1_Conditional_3_Template(rf, ctx) {
  if (rf & 1) {
    \u0275\u0275element(0, "p-divider");
  }
}
function GenericDetailsContainerComponent_Conditional_6_Conditional_5_ng_template_2_For_1_Template(rf, ctx) {
  if (rf & 1) {
    \u0275\u0275elementStart(0, "div", 13);
    \u0275\u0275conditionalCreate(1, GenericDetailsContainerComponent_Conditional_6_Conditional_5_ng_template_2_For_1_Conditional_1_Template, 2, 1, "h3", 14);
    \u0275\u0275template(2, GenericDetailsContainerComponent_Conditional_6_Conditional_5_ng_template_2_For_1_ng_container_2_Template, 1, 0, "ng-container", 15);
    \u0275\u0275elementEnd();
    \u0275\u0275conditionalCreate(3, GenericDetailsContainerComponent_Conditional_6_Conditional_5_ng_template_2_For_1_Conditional_3_Template, 1, 0, "p-divider");
  }
  if (rf & 2) {
    const section_r11 = ctx.$implicit;
    const \u0275$index_102_r12 = ctx.$index;
    const \u0275$count_102_r13 = ctx.$count;
    const ctx_r3 = \u0275\u0275nextContext(4);
    \u0275\u0275advance();
    \u0275\u0275conditional(section_r11.title ? 1 : -1);
    \u0275\u0275advance();
    \u0275\u0275property("ngComponentOutlet", section_r11.component)("ngComponentOutletInputs", ctx_r3.getSectionInputs(section_r11));
    \u0275\u0275advance();
    \u0275\u0275conditional(!(\u0275$index_102_r12 === \u0275$count_102_r13 - 1) ? 3 : -1);
  }
}
function GenericDetailsContainerComponent_Conditional_6_Conditional_5_ng_template_2_Template(rf, ctx) {
  if (rf & 1) {
    \u0275\u0275repeaterCreate(0, GenericDetailsContainerComponent_Conditional_6_Conditional_5_ng_template_2_For_1_Template, 4, 4, null, null, \u0275\u0275repeaterTrackByIdentity);
  }
  if (rf & 2) {
    const ctx_r3 = \u0275\u0275nextContext(3);
    \u0275\u0275repeater(ctx_r3.customSections());
  }
}
function GenericDetailsContainerComponent_Conditional_6_Conditional_5_Template(rf, ctx) {
  if (rf & 1) {
    \u0275\u0275elementStart(0, "p-accordion-panel", 9);
    \u0275\u0275template(1, GenericDetailsContainerComponent_Conditional_6_Conditional_5_ng_template_1_Template, 2, 0, "ng-template", 10)(2, GenericDetailsContainerComponent_Conditional_6_Conditional_5_ng_template_2_Template, 2, 0, "ng-template", 11);
    \u0275\u0275elementEnd();
  }
}
function GenericDetailsContainerComponent_Conditional_6_Template(rf, ctx) {
  if (rf & 1) {
    \u0275\u0275elementStart(0, "div")(1, "p-accordion", 5);
    \u0275\u0275conditionalCreate(2, GenericDetailsContainerComponent_Conditional_6_Conditional_2_Template, 3, 0, "p-accordion-panel", 6);
    \u0275\u0275conditionalCreate(3, GenericDetailsContainerComponent_Conditional_6_Conditional_3_Template, 3, 0, "p-accordion-panel", 7);
    \u0275\u0275conditionalCreate(4, GenericDetailsContainerComponent_Conditional_6_Conditional_4_Template, 3, 0, "p-accordion-panel", 8);
    \u0275\u0275conditionalCreate(5, GenericDetailsContainerComponent_Conditional_6_Conditional_5_Template, 3, 0, "p-accordion-panel", 9);
    \u0275\u0275elementEnd()();
  }
  if (rf & 2) {
    const ctx_r3 = \u0275\u0275nextContext();
    \u0275\u0275advance();
    \u0275\u0275property("multiple", true);
    \u0275\u0275advance();
    \u0275\u0275conditional(ctx_r3.hasInformationSections() ? 2 : -1);
    \u0275\u0275advance();
    \u0275\u0275conditional(ctx_r3.hasSettingsSections() ? 3 : -1);
    \u0275\u0275advance();
    \u0275\u0275conditional(ctx_r3.hasStatisticsSections() ? 4 : -1);
    \u0275\u0275advance();
    \u0275\u0275conditional(ctx_r3.hasCustomSections() ? 5 : -1);
  }
}
var GenericDetailsContainerComponent = class _GenericDetailsContainerComponent {
  entity = input({}, ...ngDevMode ? [{ debugName: "entity" }] : []);
  entityType = input("", ...ngDevMode ? [{ debugName: "entityType" }] : []);
  detailsFactory = inject(DetailsComponentFactory);
  isLoading = signal(false, ...ngDevMode ? [{ debugName: "isLoading" }] : []);
  currentMode = signal("view", ...ngDevMode ? [{ debugName: "currentMode" }] : []);
  activeIndexes = [0];
  // Default to first panel open
  displayedSections = computed(() => {
    const config = this.getEntityConfig();
    if (!config?.sections)
      return [];
    return config.sections.filter((section) => {
      if (typeof section.visible === "function") {
        return section.visible(this.entity());
      }
      return section.visible !== false;
    }).sort((a, b) => (a.order ?? 0) - (b.order ?? 0));
  }, ...ngDevMode ? [{ debugName: "displayedSections" }] : []);
  // Computed properties for sections by category
  informationSections = computed(() => this.displayedSections().filter((s) => s.category === "information"), ...ngDevMode ? [{ debugName: "informationSections" }] : []);
  settingsSections = computed(() => this.displayedSections().filter((s) => s.category === "settings"), ...ngDevMode ? [{ debugName: "settingsSections" }] : []);
  statisticsSections = computed(() => this.displayedSections().filter((s) => s.category === "statistics"), ...ngDevMode ? [{ debugName: "statisticsSections" }] : []);
  customSections = computed(() => this.displayedSections().filter((s) => s.category === "custom"), ...ngDevMode ? [{ debugName: "customSections" }] : []);
  // Computed properties for category visibility
  hasInformationSections = computed(() => this.informationSections().length > 0, ...ngDevMode ? [{ debugName: "hasInformationSections" }] : []);
  hasSettingsSections = computed(() => this.settingsSections().length > 0, ...ngDevMode ? [{ debugName: "hasSettingsSections" }] : []);
  hasStatisticsSections = computed(() => this.statisticsSections().length > 0, ...ngDevMode ? [{ debugName: "hasStatisticsSections" }] : []);
  hasCustomSections = computed(() => this.customSections().length > 0, ...ngDevMode ? [{ debugName: "hasCustomSections" }] : []);
  canToggleMode = computed(() => {
    const config = this.getEntityConfig();
    return config?.allowModeToggle !== false;
  }, ...ngDevMode ? [{ debugName: "canToggleMode" }] : []);
  ngOnInit() {
    const config = this.getEntityConfig();
    if (config?.defaultMode) {
      this.currentMode.set(config.defaultMode);
    }
    this.loadEntityDetails();
  }
  loadEntityDetails() {
    const id = this.entity()?.["id"];
    const type = this.entityType();
    if (isNullOrUndefined(id) || isNullOrUndefined(type))
      return;
    if (this.hasFullDetails())
      return;
    this.isLoading.set(true);
    setTimeout(() => {
      this.isLoading.set(false);
    }, 500);
  }
  hasFullDetails() {
    return true;
  }
  getEntityConfig() {
    return this.detailsFactory.getEntityConfig(this.entityType());
  }
  getSectionInputs(section) {
    return {
      entity: this.entity(),
      mode: this.currentMode(),
      options: {
        title: section.title,
        readonly: section.readonly ?? false,
        expanded: section.expanded,
        category: section.category,
        order: section.order
      }
    };
  }
  toggleMode() {
    this.currentMode.set(this.currentMode() === "view" ? "edit" : "view");
  }
  static \u0275fac = function GenericDetailsContainerComponent_Factory(__ngFactoryType__) {
    return new (__ngFactoryType__ || _GenericDetailsContainerComponent)();
  };
  static \u0275cmp = /* @__PURE__ */ \u0275\u0275defineComponent({ type: _GenericDetailsContainerComponent, selectors: [["app-generic-details-container"]], inputs: { entity: [1, "entity"], entityType: [1, "entityType"] }, decls: 7, vars: 3, consts: [[1, "p-3", "bg-surface-card", "rounded-md", "shadow-sm", "h-full", "overflow-auto"], [1, "flex", "justify-between", "items-center", "mb-4"], [1, "text-xl", "font-semibold"], [1, "text-sm", "text-surface-600", "ml-2"], [1, "flex", "justify-center", "items-center", "p-5"], [3, "multiple"], ["header", "INFORMATION", "styleClass", "mb-2"], ["header", "SETTINGS", "styleClass", "mb-2"], ["header", "STATISTICS", "styleClass", "mb-2"], ["header", "CUSTOM", "styleClass", "mb-2"], ["pTemplate", "header"], ["pTemplate", "content"], [1, "uppercase"], [1, "section-container"], [1, "section-title"], [4, "ngComponentOutlet", "ngComponentOutletInputs"]], template: function GenericDetailsContainerComponent_Template(rf, ctx) {
    if (rf & 1) {
      \u0275\u0275elementStart(0, "div", 0)(1, "div", 1)(2, "h2", 2)(3, "span", 3);
      \u0275\u0275text(4);
      \u0275\u0275elementEnd()()();
      \u0275\u0275conditionalCreate(5, GenericDetailsContainerComponent_Conditional_5_Template, 2, 0, "div", 4);
      \u0275\u0275conditionalCreate(6, GenericDetailsContainerComponent_Conditional_6_Template, 6, 5, "div");
      \u0275\u0275elementEnd();
    }
    if (rf & 2) {
      \u0275\u0275advance(4);
      \u0275\u0275textInterpolate(ctx.entityType());
      \u0275\u0275advance();
      \u0275\u0275conditional(ctx.isLoading() ? 5 : -1);
      \u0275\u0275advance();
      \u0275\u0275conditional(ctx.entity() && !ctx.isLoading() ? 6 : -1);
    }
  }, dependencies: [
    CommonModule,
    NgComponentOutlet,
    AccordionModule,
    Accordion,
    PrimeTemplate,
    AccordionPanel,
    DividerModule,
    Divider,
    ButtonModule,
    TooltipModule,
    ProgressSpinnerModule,
    ProgressSpinner
  ], styles: ["\n\n[_nghost-%COMP%] {\n  display: block;\n  height: 100%;\n}\n[_nghost-%COMP%]     .p-accordion .p-accordion-header-link {\n  font-weight: 500;\n}\n[_nghost-%COMP%]     .p-accordion .p-accordion-header-link:focus {\n  --tw-shadow: 0 0 #0000;\n  --tw-shadow-colored: 0 0 #0000;\n  box-shadow:\n    var(--tw-ring-offset-shadow, 0 0 #0000),\n    var(--tw-ring-shadow, 0 0 #0000),\n    var(--tw-shadow);\n}\n[_nghost-%COMP%]     .p-accordion .p-accordion-header-text {\n  font-weight: 600;\n}\n[_nghost-%COMP%]     .p-accordion .p-accordion-content {\n  padding-top: 1rem;\n  padding-bottom: 1rem;\n  padding-left: 0px;\n  padding-right: 0px;\n}\n[_nghost-%COMP%]     .p-divider {\n  margin-top: 1rem;\n  margin-bottom: 1rem;\n}\n[_nghost-%COMP%]     .section-container {\n  padding-top: 0.5rem;\n  padding-bottom: 0.5rem;\n}\n.section-title[_ngcontent-%COMP%] {\n  margin-bottom: 0.75rem;\n  border-bottom-width: 1px;\n  --tw-border-opacity: 1;\n  border-color: color-mix(in srgb, var(--p-surface-200) calc(100% * var(--tw-border-opacity)), transparent);\n  padding-bottom: 0.25rem;\n  font-size: 1.125rem;\n  line-height: 1.75rem;\n  font-weight: 500;\n}\n/*# sourceMappingURL=generic-details-container.component.css.map */"], changeDetection: 0 });
};
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(GenericDetailsContainerComponent, [{
    type: Component,
    args: [{ selector: "app-generic-details-container", imports: [
      CommonModule,
      AccordionModule,
      DividerModule,
      ButtonModule,
      TooltipModule,
      ProgressSpinnerModule
    ], changeDetection: ChangeDetectionStrategy.OnPush, template: '<div class="p-3 bg-surface-card rounded-md shadow-sm h-full overflow-auto">\n  <!-- Header with edit/view toggle -->\n  <div class="flex justify-between items-center mb-4">\n    <h2 class="text-xl font-semibold">\n      <span class="text-sm text-surface-600 ml-2">{{ entityType() }}</span>\n    </h2>\n  </div>\n\n  <!-- Loading state -->\n  @if (isLoading()) {\n    <div class="flex justify-center items-center p-5">\n      <p-progressSpinner></p-progressSpinner>\n    </div>\n  }\n\n  <!-- Content with accordion sections -->\n  @if (entity() && !isLoading()) {\n    <div>\n      <p-accordion [multiple]="true">\n        <!-- Information sections -->\n        @if (hasInformationSections()) {\n          <p-accordion-panel header="INFORMATION" styleClass="mb-2">\n            <ng-template pTemplate="header">\n              <span class="uppercase">Information</span>\n            </ng-template>\n            <ng-template pTemplate="content">\n              @for (\n                section of informationSections();\n                track section;\n                let last = $last\n              ) {\n                <div class="section-container">\n                  @if (section.title) {\n                    <h3 class="section-title">\n                      {{ section.title }}\n                    </h3>\n                  }\n                  <ng-container\n                    *ngComponentOutlet="\n                      section.component;\n                      inputs: getSectionInputs(section)\n                    "\n                  >\n                  </ng-container>\n                </div>\n                @if (!last) {\n                  <p-divider></p-divider>\n                }\n              }\n            </ng-template>\n          </p-accordion-panel>\n        }\n        <!-- Settings sections -->\n        @if (hasSettingsSections()) {\n          <p-accordion-panel header="SETTINGS" styleClass="mb-2">\n            <ng-template pTemplate="header">\n              <span class="uppercase">Settings</span>\n            </ng-template>\n            <ng-template pTemplate="content">\n              @for (\n                section of settingsSections();\n                track section;\n                let last = $last\n              ) {\n                <div class="section-container">\n                  @if (section.title) {\n                    <h3 class="section-title">\n                      {{ section.title }}\n                    </h3>\n                  }\n                  <ng-container\n                    *ngComponentOutlet="\n                      section.component;\n                      inputs: getSectionInputs(section)\n                    "\n                  >\n                  </ng-container>\n                </div>\n                @if (!last) {\n                  <p-divider></p-divider>\n                }\n              }\n            </ng-template>\n          </p-accordion-panel>\n        }\n        <!-- Statistics sections -->\n        @if (hasStatisticsSections()) {\n          <p-accordion-panel header="STATISTICS" styleClass="mb-2">\n            <ng-template pTemplate="header">\n              <span class="uppercase">Statistics</span>\n            </ng-template>\n            <ng-template pTemplate="content">\n              @for (\n                section of statisticsSections();\n                track section;\n                let last = $last\n              ) {\n                <div class="section-container">\n                  @if (section.title) {\n                    <h3 class="section-title">\n                      {{ section.title }}\n                    </h3>\n                  }\n                  <ng-container\n                    *ngComponentOutlet="\n                      section.component;\n                      inputs: getSectionInputs(section)\n                    "\n                  >\n                  </ng-container>\n                </div>\n                @if (!last) {\n                  <p-divider></p-divider>\n                }\n              }\n            </ng-template>\n          </p-accordion-panel>\n        }\n        <!-- Custom sections -->\n        @if (hasCustomSections()) {\n          <p-accordion-panel header="CUSTOM" styleClass="mb-2">\n            <ng-template pTemplate="header">\n              <span class="uppercase">Custom</span>\n            </ng-template>\n            <ng-template pTemplate="content">\n              @for (\n                section of customSections();\n                track section;\n                let last = $last\n              ) {\n                <div class="section-container">\n                  @if (section.title) {\n                    <h3 class="section-title">\n                      {{ section.title }}\n                    </h3>\n                  }\n                  <ng-container\n                    *ngComponentOutlet="\n                      section.component;\n                      inputs: getSectionInputs(section)\n                    "\n                  >\n                  </ng-container>\n                </div>\n                @if (!last) {\n                  <p-divider></p-divider>\n                }\n              }\n            </ng-template>\n          </p-accordion-panel>\n        }\n      </p-accordion>\n    </div>\n  }\n</div>\n', styles: ["/* src/app/features/administration/components/generic-details-container/generic-details-container.component.scss */\n:host {\n  display: block;\n  height: 100%;\n}\n:host ::ng-deep .p-accordion .p-accordion-header-link {\n  font-weight: 500;\n}\n:host ::ng-deep .p-accordion .p-accordion-header-link:focus {\n  --tw-shadow: 0 0 #0000;\n  --tw-shadow-colored: 0 0 #0000;\n  box-shadow:\n    var(--tw-ring-offset-shadow, 0 0 #0000),\n    var(--tw-ring-shadow, 0 0 #0000),\n    var(--tw-shadow);\n}\n:host ::ng-deep .p-accordion .p-accordion-header-text {\n  font-weight: 600;\n}\n:host ::ng-deep .p-accordion .p-accordion-content {\n  padding-top: 1rem;\n  padding-bottom: 1rem;\n  padding-left: 0px;\n  padding-right: 0px;\n}\n:host ::ng-deep .p-divider {\n  margin-top: 1rem;\n  margin-bottom: 1rem;\n}\n:host ::ng-deep .section-container {\n  padding-top: 0.5rem;\n  padding-bottom: 0.5rem;\n}\n.section-title {\n  margin-bottom: 0.75rem;\n  border-bottom-width: 1px;\n  --tw-border-opacity: 1;\n  border-color: color-mix(in srgb, var(--p-surface-200) calc(100% * var(--tw-border-opacity)), transparent);\n  padding-bottom: 0.25rem;\n  font-size: 1.125rem;\n  line-height: 1.75rem;\n  font-weight: 500;\n}\n/*# sourceMappingURL=generic-details-container.component.css.map */\n"] }]
  }], null, { entity: [{ type: Input, args: [{ isSignal: true, alias: "entity", required: false }] }], entityType: [{ type: Input, args: [{ isSignal: true, alias: "entityType", required: false }] }] });
})();
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && \u0275setClassDebugInfo(GenericDetailsContainerComponent, { className: "GenericDetailsContainerComponent", filePath: "src/app/features/administration/components/generic-details-container/generic-details-container.component.ts", lineNumber: 35 });
})();

// src/app/features/administration/components/assets/asset-details-section/asset-details-section.component.ts
var _c0 = (a0) => ({ "icon-primary": a0 });
function AssetDetailsSectionComponent_Conditional_8_Template(rf, ctx) {
  if (rf & 1) {
    const _r1 = \u0275\u0275getCurrentView();
    \u0275\u0275elementStart(0, "div", 6)(1, "span", 9);
    \u0275\u0275listener("click", function AssetDetailsSectionComponent_Conditional_8_Template_span_click_1_listener() {
      \u0275\u0275restoreView(_r1);
      const ctx_r1 = \u0275\u0275nextContext();
      return \u0275\u0275resetView(ctx_r1.onEdit());
    })("keydown.enter", function AssetDetailsSectionComponent_Conditional_8_Template_span_keydown_enter_1_listener() {
      \u0275\u0275restoreView(_r1);
      const ctx_r1 = \u0275\u0275nextContext();
      return \u0275\u0275resetView(ctx_r1.onEdit());
    });
    \u0275\u0275elementEnd()();
  }
  if (rf & 2) {
    \u0275\u0275advance();
    \u0275\u0275attribute("aria-label", "Edit asset details");
  }
}
function AssetDetailsSectionComponent_Conditional_11_Template(rf, ctx) {
  if (rf & 1) {
    const _r3 = \u0275\u0275getCurrentView();
    \u0275\u0275elementStart(0, "app-dynamic-form", 10);
    \u0275\u0275listener("formSubmit", function AssetDetailsSectionComponent_Conditional_11_Template_app_dynamic_form_formSubmit_0_listener($event) {
      \u0275\u0275restoreView(_r3);
      const ctx_r1 = \u0275\u0275nextContext();
      return \u0275\u0275resetView(ctx_r1.onSubmit($event));
    })("formValidityChange", function AssetDetailsSectionComponent_Conditional_11_Template_app_dynamic_form_formValidityChange_0_listener($event) {
      \u0275\u0275restoreView(_r3);
      const ctx_r1 = \u0275\u0275nextContext();
      return \u0275\u0275resetView(ctx_r1.onFormValidityChange($event));
    })("formValueChange", function AssetDetailsSectionComponent_Conditional_11_Template_app_dynamic_form_formValueChange_0_listener($event) {
      \u0275\u0275restoreView(_r3);
      const ctx_r1 = \u0275\u0275nextContext();
      return \u0275\u0275resetView(ctx_r1.onFormValueChange($event));
    });
    \u0275\u0275elementEnd();
  }
  if (rf & 2) {
    const ctx_r1 = \u0275\u0275nextContext();
    \u0275\u0275property("fields", ctx_r1.formFields)("actions", ctx_r1.actions)("hideActions", ctx_r1.createMode());
  }
}
function AssetDetailsSectionComponent_Conditional_12_Template(rf, ctx) {
  if (rf & 1) {
    \u0275\u0275element(0, "app-grid", 8);
  }
  if (rf & 2) {
    const ctx_r1 = \u0275\u0275nextContext();
    \u0275\u0275property("data", ctx_r1.assetDetails())("columns", ctx_r1.columns)("showGridLines", false)("hideHeader", true);
  }
}
var AssetDetailsSectionComponent = class _AssetDetailsSectionComponent extends EntitySectionBaseComponent {
  ownerId = input(null, ...ngDevMode ? [{ debugName: "ownerId" }] : []);
  entitiesService = inject(EntitiesService);
  utilityService = inject(UtilityService);
  assetGroupingService = inject(AssetGroupingService);
  cdr = inject(ChangeDetectorRef);
  selectOptionsLoaded = signal(false, ...ngDevMode ? [{ debugName: "selectOptionsLoaded" }] : []);
  assetTypes = [];
  selectOptions = {};
  colors = [...COLORS].sort((a, b) => a.localeCompare(b)).map((color) => ({
    label: this.utilityService.toTitleCase(color),
    value: color
  }));
  assetDetails = computed(() => {
    const assetDetails = this.entity();
    if (!isDefined(assetDetails))
      return [];
    return [
      {
        key: "Name",
        value: assetDetails.name
      },
      {
        key: "Tags",
        value: !isEmpty(assetDetails.tags) ? assetDetails?.tags?.map((tag) => tag).join(", ") : "None"
      },
      {
        key: "Type",
        value: isDefined(assetDetails.assetType) ? assetDetails.assetType.name : "Unknown"
      },
      {
        key: "Color",
        value: isDefined(assetDetails.color) ? this.utilityService.toTitleCase(assetDetails.color) : "None"
      },
      {
        key: "Cost Centre",
        value: isDefined(assetDetails.costCentre) ? assetDetails.costCentre.name : "None"
      },
      {
        key: "Groups",
        value: !isEmpty(assetDetails.groups) ? assetDetails.groups.map((group) => group.name).join(", ") : ""
      },
      {
        key: "Asset Tag",
        value: assetDetails.assetTag ?? "None"
      },
      {
        key: "Icon Name",
        value: assetDetails.mapIconName ?? "Default"
      }
    ];
  }, ...ngDevMode ? [{ debugName: "assetDetails" }] : []);
  assetTagsSearchResults = signal(void 0, ...ngDevMode ? [{ debugName: "assetTagsSearchResults" }] : []);
  searchSubject = new Subject();
  constructor() {
    super();
    this.columns = [
      { field: "key", header: "", transform: "uppercase" },
      { field: "value", header: "" }
    ];
    effect(() => {
      const entity = this.entity();
      if (entity && !this.createMode()) {
        this.updateFormFields();
      }
    });
  }
  ngOnInit() {
    this.setUpAssetTagsSearch();
    this.loadSelectOptions();
  }
  loadSelectOptions() {
    const asset = this.entity();
    const ownerIdValue = this.ownerId();
    const effectiveOwnerId = asset?.owner?.id ?? ownerIdValue;
    if (isNullOrUndefined(effectiveOwnerId)) {
      this.selectOptions = {};
      this.selectOptionsLoaded.set(true);
      this.updateFormFields();
      return;
    }
    Promise.all([
      this.assetGroupingService.getAssetTypes(effectiveOwnerId),
      firstValueFrom(this.entitiesService.listCostCentres(effectiveOwnerId)),
      this.assetGroupingService.getAssetGroupsAsTree(effectiveOwnerId)
    ]).then(([assetTypes, costCentres, assetGroups]) => {
      this.selectOptions = {
        assetTypes: assetTypes.map((item) => ({
          label: item.name ?? "",
          value: item.id
        })).sort((a, b) => a.label.localeCompare(b.label)),
        costCentres: costCentres.items.map((costCentre) => ({
          label: costCentre.name ?? "",
          value: costCentre.id
        })).sort((a, b) => a.label.localeCompare(b.label)),
        groups: assetGroups
      };
      this.selectOptionsLoaded.set(true);
      this.updateFormFields();
    }).catch(() => {
      this.selectOptionsLoaded.set(false);
    });
  }
  setUpAssetTagsSearch() {
    this.searchSubject.pipe(debounceTime(SEARCH_DEBOUNCE_TIME), takeUntilDestroyed(this.destroyRef), switchMap((searchTerm) => {
      const owner = this.entity()?.owner;
      if (isNullOrUndefined(owner?.id)) {
        return of({ items: [] });
      }
      const filters = {
        state: { value: "active", operator: "=" },
        name: { value: `*${searchTerm}*`, operator: "=" }
      };
      const rqlFilter = this.utilityService.constructRqlFilter(filters);
      return this.entitiesService.listAssetTags(owner.id, 0, 10, "name", rqlFilter).pipe(catchError(() => {
        return of({ items: [] });
      }));
    })).subscribe({
      next: (data) => {
        if (isDefined(data) && hasProperty(data, "items")) {
          this.assetTagsSearchResults.set(isNullOrUndefined(data.items) ? [] : data.items);
        }
      },
      error: (error) => {
        console.error("Error searching asset tags:", error);
        this.assetTagsSearchResults.set([]);
      }
    });
  }
  updateFormFields() {
    const asset = this.entity();
    this.formFields = [
      createTextField("name", "Name", asset?.name, {
        name: "name",
        validations: [
          {
            name: "required",
            validator: Validators.required,
            message: "Name is required"
          }
        ]
      }),
      createDropdownField("mapIconName", "Icon Name", [
        { label: "Default", value: "Default" },
        { label: "Airplane", value: "Airplane" },
        { label: "Ambulance (small)", value: "Ambulance (small)" },
        { label: "Ambulance", value: "Ambulance" },
        { label: "Boat", value: "Boat" },
        { label: "Bus", value: "Bus" },
        { label: "Car", value: "Car" },
        { label: "Cement Mixer", value: "Cement Mixer" },
        { label: "Container", value: "Container" },
        { label: "Dump Truck", value: "Dump Truck" },
        { label: "Excavator", value: "Excavator" },
        { label: "Haul Truck", value: "Haul Truck" },
        { label: "Lawn Mower", value: "Lawn Mower" },
        { label: "Man", value: "Man" },
        { label: "Motorcycle", value: "Motorcycle" },
        { label: "Parcel", value: "Parcel" },
        { label: "Pickup Truck", value: "Pickup Truck" },
        { label: "School Bus (small)", value: "School Bus (small)" },
        { label: "School Bus", value: "School Bus" },
        { label: "Tractor", value: "Tractor" },
        { label: "Trailer", value: "Trailer" },
        { label: "Truck (small)", value: "Truck (small)" },
        { label: "Truck", value: "Truck" },
        { label: "Van (small)", value: "Van (small)" },
        { label: "Van", value: "Van" }
      ], asset?.mapIconName ?? "Default", {
        validations: [
          {
            name: "required",
            validator: Validators.required,
            message: "Icon name is required"
          }
        ],
        props: {
          appendTo: "body"
        }
      }),
      createAutocompleteField("tags", "Tags", [], [], () => {
      }, {
        layout: "horizontal",
        labelWidth: "1/3",
        name: "tags",
        placeholder: "Enter tags ...",
        props: {
          appendTo: "body",
          typeahead: false,
          multiple: true,
          dropdown: false
        }
      }),
      createDropdownField("assetType", "Type", this.selectOptions?.["assetTypes"] ?? [], asset?.assetType?.id, {
        layout: "horizontal",
        labelWidth: "1/3",
        name: "assetType",
        props: {
          appendTo: "body"
        },
        validations: [
          {
            name: "required",
            validator: Validators.required,
            message: "Asset type is required"
          }
        ]
      }),
      createDropdownField("color", "Color", this.colors, asset?.color, {
        layout: "horizontal",
        labelWidth: "1/3",
        name: "color",
        props: {
          appendTo: "body"
        },
        validations: [
          {
            name: "required",
            validator: Validators.required,
            message: "Color is required"
          }
        ]
      }),
      createDropdownField("costCentre", "Cost Centre", this.selectOptions?.["costCentres"] ?? [], asset?.costCentre?.id, {
        layout: "horizontal",
        labelWidth: "1/3",
        name: "costCentre",
        props: {
          appendTo: "body"
        },
        validations: [
          {
            name: "required",
            validator: Validators.required,
            message: "Cost centre is required"
          }
        ]
      }),
      createTreeSelectField("groups", "Groups", this.getSelectedGroupNodes(asset?.groups, this.selectOptions?.["groups"]), this.selectOptions?.["groups"] ?? [], {
        layout: "horizontal",
        labelWidth: "1/3",
        name: "groups",
        props: {
          appendTo: "body",
          placeholder: "Select Group",
          multiple: true,
          showClear: true,
          selectionMode: "checkbox",
          filter: true
        },
        validations: [
          {
            name: "required",
            validator: Validators.required,
            message: "At least one group is required"
          }
        ]
      }),
      createAutocompleteField("assetTag", "Asset Tag", typeof asset?.assetTag === "string" ? asset.assetTag : void 0, () => this.assetTagsSearchResults() ?? [], this.searchAssetTag.bind(this), {
        layout: "horizontal",
        labelWidth: "1/3",
        name: "assetTag",
        props: {
          appendTo: "body",
          showClear: true,
          multiple: false,
          field: "name",
          completeOnFocus: false,
          typeahead: true,
          showEmptyMessage: true,
          emptyMessage: "No asset tags found"
        }
      })
    ];
    this.cdr.detectChanges();
  }
  submitChanges(formData) {
    const asset = this.entity();
    if (isNullOrUndefined(asset))
      return;
    this.entitiesService.updateAsset(asset.id, this.transformData(formData)).pipe(takeUntilDestroyed(this.destroyRef)).subscribe({
      next: () => {
        this.isFormEditable.set(false);
        this.isSubmitting.set(false);
        this.broadcastService.broadcast("entity-updated", {
          entityType: "asset",
          entityId: asset.id
        });
      },
      error: () => {
        this.isFormEditable.set(true);
        this.isSubmitting.set(false);
      }
    });
  }
  onFormValueChange(formData) {
    const transformedData = this.transformData(formData);
    this.formValueChange.emit(transformedData);
  }
  getSelectedGroupNodes(assetGroups, treeOptions) {
    if (!assetGroups || !treeOptions)
      return [];
    const selectedNodes = [];
    const findNodeById = (nodes, id) => {
      for (const node of nodes) {
        if (node.id === id) {
          return node;
        }
        if (node.children && node.children.length > 0) {
          const found = findNodeById(node.children, id);
          if (found)
            return found;
        }
      }
      return void 0;
    };
    assetGroups.forEach((group) => {
      const foundNode = findNodeById(treeOptions, group.id);
      if (foundNode) {
        selectedNodes.push(foundNode);
      }
    });
    return selectedNodes;
  }
  transformData(formData) {
    const transformedData = __spreadValues({}, formData);
    if (isDefined(transformedData["assetType"]) && typeof transformedData["assetType"] === "string") {
      const assetTypeOption = this.selectOptions?.["assetTypes"]?.find((option) => option.value === transformedData["assetType"]);
      if (assetTypeOption) {
        transformedData["assetType"] = {
          id: assetTypeOption.value,
          name: assetTypeOption.label
        };
      }
    }
    if (isDefined(transformedData["costCentre"]) && typeof transformedData["costCentre"] === "string") {
      const costCentreOption = this.selectOptions?.["costCentres"]?.find((option) => option.value === transformedData["costCentre"]);
      if (costCentreOption) {
        transformedData["costCentre"] = {
          id: costCentreOption.value,
          name: costCentreOption.label
        };
      }
    }
    if (Array.isArray(transformedData["groups"])) {
      const findGroupInTree = (nodes, targetId) => {
        for (const node of nodes) {
          if (node.id === targetId) {
            return node;
          }
          if (node.children && node.children.length > 0) {
            const found = findGroupInTree(node.children, targetId);
            if (found)
              return found;
          }
        }
        return void 0;
      };
      transformedData["groups"] = transformedData["groups"].map((group) => {
        const groupId = typeof group === "object" && isDefined(group.id) ? group.id : group;
        const groupOption = findGroupInTree(this.selectOptions?.["groups"] ?? [], groupId);
        return groupOption ? {
          id: groupOption.id,
          name: groupOption.label
        } : void 0;
      }).filter((group) => isDefined(group));
    }
    if (transformedData["assetTag"] === "") {
      transformedData["assetTag"] = null;
    }
    return transformedData;
  }
  searchAssetTag(searchTerm) {
    this.assetTagsSearchResults.set(void 0);
    this.searchSubject.next(searchTerm);
  }
  static \u0275fac = function AssetDetailsSectionComponent_Factory(__ngFactoryType__) {
    return new (__ngFactoryType__ || _AssetDetailsSectionComponent)();
  };
  static \u0275cmp = /* @__PURE__ */ \u0275\u0275defineComponent({ type: _AssetDetailsSectionComponent, selectors: [["app-asset-details-section"]], inputs: { ownerId: [1, "ownerId"] }, features: [\u0275\u0275InheritDefinitionFeature], decls: 13, vars: 8, consts: [[1, "card", "pt-2"], [1, "mb-4", "p-2", "flex", "justify-start", "items-center"], [1, "custom-icon-svg", "w-[2.5rem]", "h-[2.5rem]", 3, "ngClass"], [1, "pl-6", "flex-1"], [1, "flex", "justify-between", "items-center"], [1, "text-xl", "font-semibold", "m-0"], [1, "icon-light"], [3, "fields", "actions", "hideActions"], ["tableStyleClass", "info-display !w-auto", 3, "data", "columns", "showGridLines", "hideHeader"], [1, "pi", "pi-pen-to-square", "action", "hover", "!text-2xl", 3, "click", "keydown.enter"], [3, "formSubmit", "formValidityChange", "formValueChange", "fields", "actions", "hideActions"]], template: function AssetDetailsSectionComponent_Template(rf, ctx) {
    if (rf & 1) {
      \u0275\u0275elementStart(0, "div", 0)(1, "div", 1);
      \u0275\u0275namespaceSVG();
      \u0275\u0275elementStart(2, "svg", 2);
      \u0275\u0275element(3, "use");
      \u0275\u0275elementEnd();
      \u0275\u0275namespaceHTML();
      \u0275\u0275elementStart(4, "div", 3)(5, "div", 4)(6, "h2", 5);
      \u0275\u0275text(7, "Asset Details");
      \u0275\u0275elementEnd();
      \u0275\u0275conditionalCreate(8, AssetDetailsSectionComponent_Conditional_8_Template, 2, 1, "div", 6);
      \u0275\u0275elementEnd();
      \u0275\u0275elementStart(9, "span");
      \u0275\u0275text(10, "The following information is required to identify your asset.");
      \u0275\u0275elementEnd()()();
      \u0275\u0275conditionalCreate(11, AssetDetailsSectionComponent_Conditional_11_Template, 1, 3, "app-dynamic-form", 7);
      \u0275\u0275conditionalCreate(12, AssetDetailsSectionComponent_Conditional_12_Template, 1, 4, "app-grid", 8);
      \u0275\u0275elementEnd();
    }
    if (rf & 2) {
      \u0275\u0275advance(2);
      \u0275\u0275property("ngClass", \u0275\u0275pureFunction1(6, _c0, ctx.isFormEditable()));
      \u0275\u0275attribute("aria-label", "Truck moving icon");
      \u0275\u0275advance();
      \u0275\u0275attribute("href", "assets/sprites/sprite.svg#truck-moving-solid");
      \u0275\u0275advance(5);
      \u0275\u0275conditional(!ctx.isFormEditable() && !ctx.createMode() ? 8 : -1);
      \u0275\u0275advance(3);
      \u0275\u0275conditional(ctx.isFormEditable() || ctx.createMode() && ctx.formFields.length ? 11 : -1);
      \u0275\u0275advance();
      \u0275\u0275conditional(!ctx.isFormEditable() && !ctx.createMode() ? 12 : -1);
    }
  }, dependencies: [
    CommonModule,
    NgClass,
    ReactiveFormsModule,
    ButtonModule,
    InputTextModule,
    ChipModule,
    GridComponent,
    DynamicFormComponent
  ], encapsulation: 2 });
};
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(AssetDetailsSectionComponent, [{
    type: Component,
    args: [{ selector: "app-asset-details-section", imports: [
      CommonModule,
      ReactiveFormsModule,
      ButtonModule,
      InputTextModule,
      ChipModule,
      GridComponent,
      DynamicFormComponent
    ], template: `<div class="card pt-2">
  <div class="mb-4 p-2 flex justify-start items-center">
    <svg
      class="custom-icon-svg w-[2.5rem] h-[2.5rem]"
      [ngClass]="{ 'icon-primary': isFormEditable() }"
      [attr.aria-label]="'Truck moving icon'"
    >
      <use [attr.href]="'assets/sprites/sprite.svg#truck-moving-solid'"></use>
    </svg>

    <div class="pl-6 flex-1">
      <div class="flex justify-between items-center">
        <h2 class="text-xl font-semibold m-0">Asset Details</h2>
        @if (!isFormEditable() && !createMode()) {
          <div class="icon-light">
            <span
              class="pi pi-pen-to-square action hover !text-2xl"
              [attr.aria-label]="'Edit asset details'"
              (click)="onEdit()"
              (keydown.enter)="onEdit()"
            ></span>
          </div>
        }
      </div>
      <span>The following information is required to identify your asset.</span>
    </div>
  </div>

  @if (isFormEditable() || (createMode() && formFields.length)) {
    <app-dynamic-form
      [fields]="formFields"
      [actions]="actions"
      [hideActions]="createMode()"
      (formSubmit)="onSubmit($event)"
      (formValidityChange)="onFormValidityChange($event)"
      (formValueChange)="onFormValueChange($event)"
    >
    </app-dynamic-form>
  }

  @if (!isFormEditable() && !createMode()) {
    <app-grid
      [data]="assetDetails()"
      [columns]="columns"
      [showGridLines]="false"
      [hideHeader]="true"
      tableStyleClass="info-display !w-auto"
    ></app-grid>
  }
</div>
` }]
  }], () => [], { ownerId: [{ type: Input, args: [{ isSignal: true, alias: "ownerId", required: false }] }] });
})();
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && \u0275setClassDebugInfo(AssetDetailsSectionComponent, { className: "AssetDetailsSectionComponent", filePath: "src/app/features/administration/components/assets/asset-details-section/asset-details-section.component.ts", lineNumber: 68 });
})();

// src/app/shared/services/cache-invalidation.service.ts
var CacheInvalidationService = class _CacheInvalidationService {
  requestCache = inject(RequestCacheService);
  assetGroupingService = inject(AssetGroupingService);
  broadcastService = inject(BroadcastEventMessageService);
  constructor() {
    this.broadcastService.on("entity-updated").subscribe((event) => {
      this.handleEntityUpdate(event);
    });
  }
  handleEntityUpdate(event) {
    const { entityType, operation } = event;
    switch (entityType) {
      case "assetCategory":
        this.clearAssetCategoryCaches();
        break;
      case "assetGroup":
        this.clearAssetGroupCaches();
        break;
      case "costCentre":
        this.clearCostCentreCaches();
        break;
      case "asset":
        if (operation === "create" || operation === "update") {
          this.clearAssetCategoryCaches();
        }
        break;
    }
  }
  /**
   * Clear asset category caches
   */
  clearAssetCategoryCaches() {
    this.requestCache.clearCacheByPattern("assetCategories-");
    this.assetGroupingService.clear();
  }
  /**
   * Clear asset group caches
   */
  clearAssetGroupCaches() {
    this.requestCache.clearCacheByPattern("assetGroups-");
    this.assetGroupingService.clear();
  }
  /**
   * Clear cost centre caches
   */
  clearCostCentreCaches() {
    this.requestCache.clearCacheByPattern("costCentres-");
    this.assetGroupingService.clear();
  }
  /**
   * Clear all caches for a specific client
   */
  clearClientCaches(clientId) {
    this.requestCache.clearClientCache(clientId);
    this.assetGroupingService.clear();
  }
  /**
   * Clear all caches (useful when user changes context)
   */
  clearAllCaches() {
    this.requestCache.clearCache();
    this.assetGroupingService.clear();
  }
  /**
   * Force refresh of asset categories for a specific client
   */
  refreshAssetCategories(clientId) {
    this.requestCache.clearCacheByPattern(`assetCategories-${clientId}`);
  }
  static \u0275fac = function CacheInvalidationService_Factory(__ngFactoryType__) {
    return new (__ngFactoryType__ || _CacheInvalidationService)();
  };
  static \u0275prov = /* @__PURE__ */ \u0275\u0275defineInjectable({ token: _CacheInvalidationService, factory: _CacheInvalidationService.\u0275fac, providedIn: "root" });
};
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(CacheInvalidationService, [{
    type: Injectable,
    args: [{
      providedIn: "root"
    }]
  }], () => [], null);
})();

// src/app/features/administration/components/assets/asset-categories-section/asset-categories-section.component.ts
var _c02 = (a0) => ({ "icon-primary": a0 });
function AssetCategoriesSectionComponent_Conditional_8_Template(rf, ctx) {
  if (rf & 1) {
    const _r1 = \u0275\u0275getCurrentView();
    \u0275\u0275elementStart(0, "div", 6)(1, "span", 9);
    \u0275\u0275listener("click", function AssetCategoriesSectionComponent_Conditional_8_Template_span_click_1_listener() {
      \u0275\u0275restoreView(_r1);
      const ctx_r1 = \u0275\u0275nextContext();
      return \u0275\u0275resetView(ctx_r1.onEdit());
    })("keydown.enter", function AssetCategoriesSectionComponent_Conditional_8_Template_span_keydown_enter_1_listener() {
      \u0275\u0275restoreView(_r1);
      const ctx_r1 = \u0275\u0275nextContext();
      return \u0275\u0275resetView(ctx_r1.onEdit());
    });
    \u0275\u0275elementEnd()();
  }
  if (rf & 2) {
    \u0275\u0275advance();
    \u0275\u0275attribute("aria-label", "Edit asset details");
  }
}
function AssetCategoriesSectionComponent_Conditional_11_Template(rf, ctx) {
  if (rf & 1) {
    const _r3 = \u0275\u0275getCurrentView();
    \u0275\u0275elementStart(0, "app-dynamic-form", 10);
    \u0275\u0275listener("formSubmit", function AssetCategoriesSectionComponent_Conditional_11_Template_app_dynamic_form_formSubmit_0_listener($event) {
      \u0275\u0275restoreView(_r3);
      const ctx_r1 = \u0275\u0275nextContext();
      return \u0275\u0275resetView(ctx_r1.onSubmit($event));
    })("formValidityChange", function AssetCategoriesSectionComponent_Conditional_11_Template_app_dynamic_form_formValidityChange_0_listener($event) {
      \u0275\u0275restoreView(_r3);
      const ctx_r1 = \u0275\u0275nextContext();
      return \u0275\u0275resetView(ctx_r1.onFormValidityChange($event));
    })("formValueChange", function AssetCategoriesSectionComponent_Conditional_11_Template_app_dynamic_form_formValueChange_0_listener($event) {
      \u0275\u0275restoreView(_r3);
      const ctx_r1 = \u0275\u0275nextContext();
      return \u0275\u0275resetView(ctx_r1.onFormValueChange($event));
    });
    \u0275\u0275elementEnd();
  }
  if (rf & 2) {
    const ctx_r1 = \u0275\u0275nextContext();
    \u0275\u0275property("fields", ctx_r1.formFields)("actions", ctx_r1.actions)("hideActions", ctx_r1.createMode());
  }
}
function AssetCategoriesSectionComponent_Conditional_12_Template(rf, ctx) {
  if (rf & 1) {
    \u0275\u0275element(0, "app-grid", 8);
  }
  if (rf & 2) {
    const ctx_r1 = \u0275\u0275nextContext();
    \u0275\u0275property("data", ctx_r1.assetDetails())("columns", ctx_r1.columns)("showGridLines", false)("hideHeader", true);
  }
}
var AssetCategoriesSectionComponent = class _AssetCategoriesSectionComponent extends EntitySectionBaseComponent {
  ownerId = input(null, ...ngDevMode ? [{ debugName: "ownerId" }] : []);
  entitiesService = inject(EntitiesService);
  assetGroupingService = inject(AssetGroupingService);
  cacheInvalidationService = inject(CacheInvalidationService);
  cdr = inject(ChangeDetectorRef);
  selectOptionsLoaded = signal(false, ...ngDevMode ? [{ debugName: "selectOptionsLoaded" }] : []);
  selectOptions = {};
  assetDetails = computed(() => {
    const assetDetails = this.entity();
    if (!isDefined(assetDetails))
      return [];
    return [
      {
        key: "Department",
        value: isEmpty(assetDetails.categories) ? "None" : (assetDetails?.categories ?? []).filter((category) => isDefined(category)).map((category) => category?.name).join(", ")
      }
    ];
  }, ...ngDevMode ? [{ debugName: "assetDetails" }] : []);
  assetCategories = [];
  constructor() {
    super();
    this.columns = [
      { field: "key", header: "", transform: "uppercase" },
      { field: "value", header: "" }
    ];
    effect(() => {
      if (this.selectOptionsLoaded()) {
        this.updateFormFields();
      }
    });
  }
  ngOnInit() {
    this.loadSelectOptions();
  }
  loadSelectOptions() {
    const asset = this.entity();
    const ownerIdValue = this.ownerId();
    const effectiveOwnerId = asset?.owner?.id ?? ownerIdValue;
    if (!isDefined(effectiveOwnerId)) {
      this.selectOptions = {};
      this.selectOptionsLoaded.set(true);
      return;
    }
    const shouldRefreshCache = this.createMode();
    if (shouldRefreshCache) {
      this.cacheInvalidationService.refreshAssetCategories(effectiveOwnerId);
    }
    this.assetGroupingService.getAssetCategories(effectiveOwnerId).then((assetCategories) => {
      this.assetCategories = assetCategories;
      this.selectOptions = {
        assetCategories: assetCategories.map((item) => ({
          label: item.name ?? "",
          value: item.id
        })).sort((a, b) => a.label.localeCompare(b.label))
      };
      this.selectOptionsLoaded.set(true);
    }).catch(() => {
      this.selectOptions = {};
      this.selectOptionsLoaded.set(true);
    });
  }
  updateFormFields() {
    const assetDetails = this.entity();
    this.formFields = [];
    this.assetCategories.filter((category) => category?.parent === DEFAULT_SYSTEM_ID).forEach((category) => {
      const items = this.assetCategories.filter((cat) => cat.index === category.index && cat.parent !== DEFAULT_SYSTEM_ID);
      const options = items.map((item) => ({
        label: item.name ?? "",
        value: item.id
      }));
      this.formFields.push(createDropdownField(`category${category.index}`, category.name, options, assetDetails?.categories && isDefined(category.index) ? assetDetails?.categories[category.index]?.id ?? "" : "", {
        layout: "horizontal",
        labelWidth: "1/3",
        name: `category${category.index}`,
        props: {
          appendTo: "body"
        }
      }));
    });
    this.cdr.detectChanges();
  }
  submitChanges(formData) {
    const asset = this.entity();
    if (isNullOrUndefined(asset))
      return;
    this.entitiesService.updateAsset(asset.id, this.transformFormData(formData)).pipe(takeUntilDestroyed(this.destroyRef)).subscribe({
      next: () => {
        this.isFormEditable.set(false);
        this.isSubmitting.set(false);
        this.broadcastService.broadcast("entity-updated", {
          entityType: "asset",
          operation: "update",
          entityId: asset.id
        });
      },
      error: () => {
        this.isFormEditable.set(true);
        this.isSubmitting.set(false);
      }
    });
  }
  onFormValueChange(formData) {
    const transformedData = this.transformFormData(formData);
    this.formValueChange.emit(transformedData);
  }
  // Iterate through form fields by their names (e.g., 'category0', 'category1')
  transformFormData(formData) {
    const transformedData = {
      categories: []
    };
    const parentCategories = this.assetCategories.filter((category) => category?.parent === DEFAULT_SYSTEM_ID);
    parentCategories.forEach((parentCategory) => {
      const fieldName = `category${parentCategory.index}`;
      const value = formData[fieldName];
      let category;
      if (isDefined(value) && isString(value)) {
        category = this.assetCategories.find((cat) => cat.id === value);
      }
      category ??= parentCategory;
      if (isDefined(category)) {
        transformedData.categories[parentCategory.index ?? 0] = {
          id: category.id,
          name: category.name
        };
      }
    });
    return transformedData;
  }
  static \u0275fac = function AssetCategoriesSectionComponent_Factory(__ngFactoryType__) {
    return new (__ngFactoryType__ || _AssetCategoriesSectionComponent)();
  };
  static \u0275cmp = /* @__PURE__ */ \u0275\u0275defineComponent({ type: _AssetCategoriesSectionComponent, selectors: [["app-asset-categories-section"]], inputs: { ownerId: [1, "ownerId"] }, features: [\u0275\u0275InheritDefinitionFeature], decls: 13, vars: 8, consts: [[1, "card", "pt-2"], [1, "mb-4", "p-2", "flex", "justify-start", "items-center"], [1, "custom-icon-svg", "w-[2.5rem]", "h-[2.5rem]", 3, "ngClass"], [1, "pl-6", "flex-1"], [1, "flex", "justify-between", "items-center"], [1, "text-xl", "font-semibold", "m-0"], [1, "icon-light"], [3, "fields", "actions", "hideActions"], ["tableStyleClass", "info-display !w-auto", 3, "data", "columns", "showGridLines", "hideHeader"], [1, "pi", "pi-pen-to-square", "action", "hover", "!text-2xl", 3, "click", "keydown.enter"], [3, "formSubmit", "formValidityChange", "formValueChange", "fields", "actions", "hideActions"]], template: function AssetCategoriesSectionComponent_Template(rf, ctx) {
    if (rf & 1) {
      \u0275\u0275elementStart(0, "div", 0)(1, "div", 1);
      \u0275\u0275namespaceSVG();
      \u0275\u0275elementStart(2, "svg", 2);
      \u0275\u0275element(3, "use");
      \u0275\u0275elementEnd();
      \u0275\u0275namespaceHTML();
      \u0275\u0275elementStart(4, "div", 3)(5, "div", 4)(6, "h2", 5);
      \u0275\u0275text(7, "Categories");
      \u0275\u0275elementEnd();
      \u0275\u0275conditionalCreate(8, AssetCategoriesSectionComponent_Conditional_8_Template, 2, 1, "div", 6);
      \u0275\u0275elementEnd();
      \u0275\u0275elementStart(9, "span");
      \u0275\u0275text(10, "Assets can belong to a number of user defined categories.");
      \u0275\u0275elementEnd()()();
      \u0275\u0275conditionalCreate(11, AssetCategoriesSectionComponent_Conditional_11_Template, 1, 3, "app-dynamic-form", 7);
      \u0275\u0275conditionalCreate(12, AssetCategoriesSectionComponent_Conditional_12_Template, 1, 4, "app-grid", 8);
      \u0275\u0275elementEnd();
    }
    if (rf & 2) {
      \u0275\u0275advance(2);
      \u0275\u0275property("ngClass", \u0275\u0275pureFunction1(6, _c02, ctx.isFormEditable()));
      \u0275\u0275attribute("aria-label", "Site map icon");
      \u0275\u0275advance();
      \u0275\u0275attribute("href", "assets/sprites/sprite.svg#sitemap-solid");
      \u0275\u0275advance(5);
      \u0275\u0275conditional(!ctx.isFormEditable() && !ctx.createMode() ? 8 : -1);
      \u0275\u0275advance(3);
      \u0275\u0275conditional(ctx.isFormEditable() || ctx.createMode() ? 11 : -1);
      \u0275\u0275advance();
      \u0275\u0275conditional(!ctx.isFormEditable() && !ctx.createMode() ? 12 : -1);
    }
  }, dependencies: [
    CommonModule,
    NgClass,
    ReactiveFormsModule,
    ButtonModule,
    GridComponent,
    DynamicFormComponent
  ], encapsulation: 2 });
};
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(AssetCategoriesSectionComponent, [{
    type: Component,
    args: [{ selector: "app-asset-categories-section", imports: [
      CommonModule,
      ReactiveFormsModule,
      ButtonModule,
      GridComponent,
      DynamicFormComponent
    ], template: `<div class="card pt-2">
  <div class="mb-4 p-2 flex justify-start items-center">
    <svg
      class="custom-icon-svg w-[2.5rem] h-[2.5rem]"
      [ngClass]="{ 'icon-primary': isFormEditable() }"
      [attr.aria-label]="'Site map icon'"
    >
      <use [attr.href]="'assets/sprites/sprite.svg#sitemap-solid'"></use>
    </svg>

    <div class="pl-6 flex-1">
      <div class="flex justify-between items-center">
        <h2 class="text-xl font-semibold m-0">Categories</h2>
        @if (!isFormEditable() && !createMode()) {
          <div class="icon-light">
            <span
              class="pi pi-pen-to-square action hover !text-2xl"
              [attr.aria-label]="'Edit asset details'"
              (click)="onEdit()"
              (keydown.enter)="onEdit()"
            ></span>
          </div>
        }
      </div>
      <span>Assets can belong to a number of user defined categories.</span>
    </div>
  </div>
  @if (isFormEditable() || createMode()) {
    <app-dynamic-form
      [fields]="formFields"
      [actions]="actions"
      [hideActions]="createMode()"
      (formSubmit)="onSubmit($event)"
      (formValidityChange)="onFormValidityChange($event)"
      (formValueChange)="onFormValueChange($event)"
    >
    </app-dynamic-form>
  }

  @if (!isFormEditable() && !createMode()) {
    <app-grid
      [data]="assetDetails()"
      [columns]="columns"
      [showGridLines]="false"
      [hideHeader]="true"
      tableStyleClass="info-display !w-auto"
    ></app-grid>
  }
</div>
` }]
  }], () => [], { ownerId: [{ type: Input, args: [{ isSignal: true, alias: "ownerId", required: false }] }] });
})();
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && \u0275setClassDebugInfo(AssetCategoriesSectionComponent, { className: "AssetCategoriesSectionComponent", filePath: "src/app/features/administration/components/assets/asset-categories-section/asset-categories-section.component.ts", lineNumber: 51 });
})();

// src/app/features/administration/components/assets/asset-contacts-section/asset-contacts-section.component.ts
var _c03 = ["iconTemplate"];
var _c1 = (a0) => ({ "icon-primary": a0 });
var _forTrack0 = ($index, $item) => $item.id;
function AssetContactsSectionComponent_Conditional_7_Template(rf, ctx) {
  if (rf & 1) {
    const _r1 = \u0275\u0275getCurrentView();
    \u0275\u0275elementStart(0, "div", 6)(1, "span", 10);
    \u0275\u0275listener("click", function AssetContactsSectionComponent_Conditional_7_Template_span_click_1_listener() {
      \u0275\u0275restoreView(_r1);
      const ctx_r1 = \u0275\u0275nextContext();
      return \u0275\u0275resetView(ctx_r1.onEdit());
    })("keydown.enter", function AssetContactsSectionComponent_Conditional_7_Template_span_keydown_enter_1_listener() {
      \u0275\u0275restoreView(_r1);
      const ctx_r1 = \u0275\u0275nextContext();
      return \u0275\u0275resetView(ctx_r1.onEdit());
    });
    \u0275\u0275elementEnd()();
  }
  if (rf & 2) {
    \u0275\u0275advance();
    \u0275\u0275attribute("aria-label", "Edit asset contacts.");
  }
}
function AssetContactsSectionComponent_Conditional_10_Conditional_2_Template(rf, ctx) {
  if (rf & 1) {
    \u0275\u0275elementStart(0, "div", 12)(1, "p");
    \u0275\u0275text(2, 'No contacts added yet. Click "Add" to create a contact.');
    \u0275\u0275elementEnd()();
  }
}
function AssetContactsSectionComponent_Conditional_10_For_4_Conditional_8_Template(rf, ctx) {
  if (rf & 1) {
    \u0275\u0275elementStart(0, "div", 24)(1, "div", 25);
    \u0275\u0275element(2, "i", 26);
    \u0275\u0275elementEnd();
    \u0275\u0275elementStart(3, "span", 27);
    \u0275\u0275text(4);
    \u0275\u0275elementEnd()();
  }
  if (rf & 2) {
    const contact_r6 = \u0275\u0275nextContext().$implicit;
    \u0275\u0275advance(4);
    \u0275\u0275textInterpolate(contact_r6.phoneMobile);
  }
}
function AssetContactsSectionComponent_Conditional_10_For_4_Conditional_9_Template(rf, ctx) {
  if (rf & 1) {
    \u0275\u0275elementStart(0, "div", 24)(1, "div", 25);
    \u0275\u0275element(2, "i", 28);
    \u0275\u0275elementEnd();
    \u0275\u0275elementStart(3, "span", 27);
    \u0275\u0275text(4);
    \u0275\u0275elementEnd()();
  }
  if (rf & 2) {
    const contact_r6 = \u0275\u0275nextContext().$implicit;
    \u0275\u0275advance(4);
    \u0275\u0275textInterpolate(contact_r6 == null ? null : contact_r6.emailAddress);
  }
}
function AssetContactsSectionComponent_Conditional_10_For_4_Conditional_10_Template(rf, ctx) {
  if (rf & 1) {
    \u0275\u0275elementStart(0, "div", 24)(1, "div", 25);
    \u0275\u0275element(2, "i", 29);
    \u0275\u0275elementEnd();
    \u0275\u0275elementStart(3, "span", 27);
    \u0275\u0275text(4);
    \u0275\u0275elementEnd()();
  }
  if (rf & 2) {
    const contact_r6 = \u0275\u0275nextContext().$implicit;
    \u0275\u0275advance(4);
    \u0275\u0275textInterpolate(contact_r6 == null ? null : contact_r6.phoneOffice);
  }
}
function AssetContactsSectionComponent_Conditional_10_For_4_Conditional_11_Template(rf, ctx) {
  if (rf & 1) {
    \u0275\u0275elementStart(0, "div", 24)(1, "div", 25);
    \u0275\u0275element(2, "i", 30);
    \u0275\u0275elementEnd();
    \u0275\u0275elementStart(3, "span", 27);
    \u0275\u0275text(4);
    \u0275\u0275elementEnd()();
  }
  if (rf & 2) {
    const contact_r6 = \u0275\u0275nextContext().$implicit;
    \u0275\u0275advance(4);
    \u0275\u0275textInterpolate(contact_r6 == null ? null : contact_r6.notes);
  }
}
function AssetContactsSectionComponent_Conditional_10_For_4_Template(rf, ctx) {
  if (rf & 1) {
    const _r4 = \u0275\u0275getCurrentView();
    \u0275\u0275elementStart(0, "p-panel", 13)(1, "div", 19)(2, "span", 20);
    \u0275\u0275text(3);
    \u0275\u0275elementEnd();
    \u0275\u0275elementStart(4, "span", 21);
    \u0275\u0275text(5);
    \u0275\u0275elementEnd();
    \u0275\u0275elementStart(6, "div", 22)(7, "button", 23);
    \u0275\u0275listener("click", function AssetContactsSectionComponent_Conditional_10_For_4_Template_button_click_7_listener() {
      const \u0275$index_33_r5 = \u0275\u0275restoreView(_r4).$index;
      const ctx_r1 = \u0275\u0275nextContext(2);
      return \u0275\u0275resetView(ctx_r1.deleteContact(\u0275$index_33_r5));
    });
    \u0275\u0275elementEnd()()();
    \u0275\u0275conditionalCreate(8, AssetContactsSectionComponent_Conditional_10_For_4_Conditional_8_Template, 5, 1, "div", 24);
    \u0275\u0275conditionalCreate(9, AssetContactsSectionComponent_Conditional_10_For_4_Conditional_9_Template, 5, 1, "div", 24);
    \u0275\u0275conditionalCreate(10, AssetContactsSectionComponent_Conditional_10_For_4_Conditional_10_Template, 5, 1, "div", 24);
    \u0275\u0275conditionalCreate(11, AssetContactsSectionComponent_Conditional_10_For_4_Conditional_11_Template, 5, 1, "div", 24);
    \u0275\u0275elementEnd();
  }
  if (rf & 2) {
    const contact_r6 = ctx.$implicit;
    const ctx_r1 = \u0275\u0275nextContext(2);
    \u0275\u0275advance(3);
    \u0275\u0275textInterpolate(ctx_r1.utilityService.toTitleCase(contact_r6.type));
    \u0275\u0275advance(2);
    \u0275\u0275textInterpolate(contact_r6.name);
    \u0275\u0275advance(2);
    \u0275\u0275attribute("aria-label", "Delete Contact");
    \u0275\u0275advance();
    \u0275\u0275conditional(contact_r6.phoneMobile ? 8 : -1);
    \u0275\u0275advance();
    \u0275\u0275conditional((contact_r6 == null ? null : contact_r6.emailAddress) ? 9 : -1);
    \u0275\u0275advance();
    \u0275\u0275conditional((contact_r6 == null ? null : contact_r6.phoneOffice) ? 10 : -1);
    \u0275\u0275advance();
    \u0275\u0275conditional((contact_r6 == null ? null : contact_r6.notes) ? 11 : -1);
  }
}
function AssetContactsSectionComponent_Conditional_10_Template(rf, ctx) {
  if (rf & 1) {
    const _r3 = \u0275\u0275getCurrentView();
    \u0275\u0275elementStart(0, "div", 7)(1, "div", 11);
    \u0275\u0275conditionalCreate(2, AssetContactsSectionComponent_Conditional_10_Conditional_2_Template, 3, 0, "div", 12);
    \u0275\u0275repeaterCreate(3, AssetContactsSectionComponent_Conditional_10_For_4_Template, 12, 7, "p-panel", 13, _forTrack0);
    \u0275\u0275elementStart(5, "div", 14)(6, "p-button", 15);
    \u0275\u0275listener("onClick", function AssetContactsSectionComponent_Conditional_10_Template_p_button_onClick_6_listener() {
      \u0275\u0275restoreView(_r3);
      const ctx_r1 = \u0275\u0275nextContext();
      return \u0275\u0275resetView(ctx_r1.addContact());
    });
    \u0275\u0275elementEnd()();
    \u0275\u0275elementStart(7, "div", 16)(8, "p-button", 17);
    \u0275\u0275listener("onClick", function AssetContactsSectionComponent_Conditional_10_Template_p_button_onClick_8_listener() {
      \u0275\u0275restoreView(_r3);
      const ctx_r1 = \u0275\u0275nextContext();
      return \u0275\u0275resetView(ctx_r1.cancelEdit());
    });
    \u0275\u0275elementEnd();
    \u0275\u0275elementStart(9, "p-button", 18);
    \u0275\u0275listener("onClick", function AssetContactsSectionComponent_Conditional_10_Template_p_button_onClick_9_listener() {
      \u0275\u0275restoreView(_r3);
      const ctx_r1 = \u0275\u0275nextContext();
      return \u0275\u0275resetView(ctx_r1.submitChanges({}));
    });
    \u0275\u0275elementEnd()()()();
  }
  if (rf & 2) {
    const ctx_r1 = \u0275\u0275nextContext();
    \u0275\u0275advance(2);
    \u0275\u0275conditional(ctx_r1.contacts().length === 0 ? 2 : -1);
    \u0275\u0275advance();
    \u0275\u0275repeater(ctx_r1.contacts());
    \u0275\u0275advance(6);
    \u0275\u0275property("loading", ctx_r1.isSubmitting())("disabled", !ctx_r1.hasFormChanges);
  }
}
function AssetContactsSectionComponent_Conditional_11_Conditional_1_Template(rf, ctx) {
  if (rf & 1) {
    \u0275\u0275elementStart(0, "div", 12)(1, "p");
    \u0275\u0275text(2, "No contacts added to this asset.");
    \u0275\u0275elementEnd()();
  }
}
function AssetContactsSectionComponent_Conditional_11_Conditional_2_For_1_Conditional_6_Template(rf, ctx) {
  if (rf & 1) {
    \u0275\u0275elementStart(0, "div", 24)(1, "div", 25);
    \u0275\u0275element(2, "i", 26);
    \u0275\u0275elementEnd();
    \u0275\u0275elementStart(3, "span", 27);
    \u0275\u0275text(4);
    \u0275\u0275elementEnd()();
  }
  if (rf & 2) {
    const contact_r7 = \u0275\u0275nextContext().$implicit;
    \u0275\u0275advance(4);
    \u0275\u0275textInterpolate(contact_r7.phoneMobile);
  }
}
function AssetContactsSectionComponent_Conditional_11_Conditional_2_For_1_Conditional_7_Template(rf, ctx) {
  if (rf & 1) {
    \u0275\u0275elementStart(0, "div", 24)(1, "div", 25);
    \u0275\u0275element(2, "i", 28);
    \u0275\u0275elementEnd();
    \u0275\u0275elementStart(3, "span", 27);
    \u0275\u0275text(4);
    \u0275\u0275elementEnd()();
  }
  if (rf & 2) {
    const contact_r7 = \u0275\u0275nextContext().$implicit;
    \u0275\u0275advance(4);
    \u0275\u0275textInterpolate(contact_r7.emailAddress);
  }
}
function AssetContactsSectionComponent_Conditional_11_Conditional_2_For_1_Conditional_8_Template(rf, ctx) {
  if (rf & 1) {
    \u0275\u0275elementStart(0, "div", 24)(1, "div", 25);
    \u0275\u0275element(2, "i", 29);
    \u0275\u0275elementEnd();
    \u0275\u0275elementStart(3, "span", 27);
    \u0275\u0275text(4);
    \u0275\u0275elementEnd()();
  }
  if (rf & 2) {
    const contact_r7 = \u0275\u0275nextContext().$implicit;
    \u0275\u0275advance(4);
    \u0275\u0275textInterpolate(contact_r7.phoneOffice);
  }
}
function AssetContactsSectionComponent_Conditional_11_Conditional_2_For_1_Conditional_9_Template(rf, ctx) {
  if (rf & 1) {
    \u0275\u0275elementStart(0, "div", 24)(1, "div", 25);
    \u0275\u0275element(2, "i", 30);
    \u0275\u0275elementEnd();
    \u0275\u0275elementStart(3, "span", 32);
    \u0275\u0275text(4);
    \u0275\u0275elementEnd()();
  }
  if (rf & 2) {
    const contact_r7 = \u0275\u0275nextContext().$implicit;
    \u0275\u0275advance(4);
    \u0275\u0275textInterpolate(contact_r7.notes);
  }
}
function AssetContactsSectionComponent_Conditional_11_Conditional_2_For_1_Conditional_10_Template(rf, ctx) {
  if (rf & 1) {
    \u0275\u0275element(0, "p-divider", 33);
  }
}
function AssetContactsSectionComponent_Conditional_11_Conditional_2_For_1_Template(rf, ctx) {
  if (rf & 1) {
    \u0275\u0275elementStart(0, "div", 31)(1, "div", 19)(2, "div", 20);
    \u0275\u0275text(3);
    \u0275\u0275elementEnd();
    \u0275\u0275elementStart(4, "span", 32);
    \u0275\u0275text(5);
    \u0275\u0275elementEnd()();
    \u0275\u0275conditionalCreate(6, AssetContactsSectionComponent_Conditional_11_Conditional_2_For_1_Conditional_6_Template, 5, 1, "div", 24);
    \u0275\u0275conditionalCreate(7, AssetContactsSectionComponent_Conditional_11_Conditional_2_For_1_Conditional_7_Template, 5, 1, "div", 24);
    \u0275\u0275conditionalCreate(8, AssetContactsSectionComponent_Conditional_11_Conditional_2_For_1_Conditional_8_Template, 5, 1, "div", 24);
    \u0275\u0275conditionalCreate(9, AssetContactsSectionComponent_Conditional_11_Conditional_2_For_1_Conditional_9_Template, 5, 1, "div", 24);
    \u0275\u0275conditionalCreate(10, AssetContactsSectionComponent_Conditional_11_Conditional_2_For_1_Conditional_10_Template, 1, 0, "p-divider", 33);
    \u0275\u0275elementEnd();
  }
  if (rf & 2) {
    const contact_r7 = ctx.$implicit;
    const \u0275$index_108_r8 = ctx.$index;
    const \u0275$count_108_r9 = ctx.$count;
    const ctx_r1 = \u0275\u0275nextContext(3);
    \u0275\u0275advance(3);
    \u0275\u0275textInterpolate1(" ", ctx_r1.utilityService.toTitleCase(contact_r7.type), " ");
    \u0275\u0275advance(2);
    \u0275\u0275textInterpolate(contact_r7.name);
    \u0275\u0275advance();
    \u0275\u0275conditional(contact_r7.phoneMobile ? 6 : -1);
    \u0275\u0275advance();
    \u0275\u0275conditional(contact_r7.emailAddress ? 7 : -1);
    \u0275\u0275advance();
    \u0275\u0275conditional(contact_r7.phoneOffice ? 8 : -1);
    \u0275\u0275advance();
    \u0275\u0275conditional(contact_r7.notes ? 9 : -1);
    \u0275\u0275advance();
    \u0275\u0275conditional(!(\u0275$index_108_r8 === \u0275$count_108_r9 - 1) ? 10 : -1);
  }
}
function AssetContactsSectionComponent_Conditional_11_Conditional_2_Template(rf, ctx) {
  if (rf & 1) {
    \u0275\u0275repeaterCreate(0, AssetContactsSectionComponent_Conditional_11_Conditional_2_For_1_Template, 11, 7, "div", 31, _forTrack0);
  }
  if (rf & 2) {
    const ctx_r1 = \u0275\u0275nextContext(2);
    \u0275\u0275repeater(ctx_r1.contacts());
  }
}
function AssetContactsSectionComponent_Conditional_11_Template(rf, ctx) {
  if (rf & 1) {
    \u0275\u0275elementStart(0, "div", 8);
    \u0275\u0275conditionalCreate(1, AssetContactsSectionComponent_Conditional_11_Conditional_1_Template, 3, 0, "div", 12)(2, AssetContactsSectionComponent_Conditional_11_Conditional_2_Template, 2, 0);
    \u0275\u0275elementEnd();
  }
  if (rf & 2) {
    const ctx_r1 = \u0275\u0275nextContext();
    \u0275\u0275advance();
    \u0275\u0275conditional(ctx_r1.contacts().length === 0 ? 1 : 2);
  }
}
var AssetContactsSectionComponent = class _AssetContactsSectionComponent extends EntitySectionBaseComponent {
  iconTemplate;
  entitiesService = inject(EntitiesService);
  utilityService = inject(UtilityService);
  selectOptionsLoaded = signal(false, ...ngDevMode ? [{ debugName: "selectOptionsLoaded" }] : []);
  assetContacts = computed(() => {
    const assetContacts = this.entity()?.contacts;
    if (!isDefined(assetContacts))
      return [];
    return assetContacts.flatMap((contact) => {
      return [
        { key: contact.type, value: contact.name },
        {
          key: "mobile",
          value: contact.phoneMobile,
          icon: "pi pi-mobile"
        }
      ];
    });
  }, ...ngDevMode ? [{ debugName: "assetContacts" }] : []);
  // State management
  contacts = signal([], ...ngDevMode ? [{ debugName: "contacts" }] : []);
  originalContacts = [];
  // Backup for reverting changes - will be reassigned in onEnterEditMode
  showModal = signal(false, ...ngDevMode ? [{ debugName: "showModal" }] : []);
  editingContact = signal(null, ...ngDevMode ? [{ debugName: "editingContact" }] : []);
  editingContactIndex = signal(-1, ...ngDevMode ? [{ debugName: "editingContactIndex" }] : []);
  modalHeader = computed(() => this.editingContact() ? "Edit Contact" : "Add Contact", ...ngDevMode ? [{ debugName: "modalHeader" }] : []);
  contactTypes = [
    "owner",
    "emergency",
    "administrative",
    "technical",
    "operational",
    "management"
  ];
  // Modal form actions
  actions = [
    {
      label: "Cancel",
      action: () => {
        this.closeModal();
      },
      severity: "secondary"
    },
    {
      label: "OK",
      action: (formData) => {
        this.saveContact(formData);
      },
      severity: "primary",
      disabled: (form) => {
        if (isNullOrUndefined(form))
          return true;
        return form.invalid;
      }
    }
  ];
  constructor() {
    super();
    effect(() => {
      const assetContacts = this.entity()?.contacts;
      if (assetContacts) {
        this.contacts.set([...assetContacts]);
        this.updateFormFields();
      }
    });
  }
  /**
   * Override onEnterEditMode to backup current contacts
   */
  onEnterEditMode() {
    super.onEnterEditMode();
    this.originalContacts = [...this.contacts()];
  }
  /**
   * Override cancelEdit to restore original contacts
   */
  cancelEdit() {
    this.contacts.set([...this.originalContacts]);
    super.cancelEdit();
  }
  ngAfterViewInit() {
    super.ngAfterViewInit();
    this.columns = [
      {
        field: "key",
        header: "",
        transform: "uppercase",
        cellTemplate: this.iconTemplate
      },
      { field: "value", header: "" }
    ];
  }
  updateFormFields() {
    const editingContact = this.editingContact();
    this.formFields = [
      createTextField("id", "ID", editingContact?.id ?? "", {
        name: "id",
        hidden: true
      }),
      createTextField("name", "Name", editingContact?.name ?? "", {
        name: "name",
        validations: [
          {
            name: "required",
            validator: Validators.required,
            message: "Name is required"
          }
        ]
      }),
      createDropdownField("type", "Type", this.contactTypes.map((type) => ({
        label: this.utilityService.toTitleCase(type),
        value: type
      })), editingContact?.type ?? "owner", {
        name: "type",
        props: {
          appendTo: "body"
        },
        validations: [
          {
            name: "required",
            validator: Validators.required,
            message: "Type is required"
          }
        ]
      }),
      createTextField("emailAddress", "Email", editingContact?.emailAddress ?? "", {
        name: "emailAddress",
        validations: [
          {
            name: "email",
            validator: Validators.email,
            message: "Invalid email format"
          }
        ]
      }),
      createTextField("phoneMobile", "Mobile", editingContact?.phoneMobile ?? "", {
        name: "phoneMobile",
        validations: [
          {
            name: "mobile",
            validator: mobileValidator(),
            message: "Invalid mobile number (10-15 digits required)"
          }
        ]
      }),
      createTextField("phoneOffice", "Phone", editingContact?.phoneOffice ?? "", {
        name: "phoneOffice",
        validations: [
          {
            name: "phone",
            validator: phoneValidator(),
            message: "Invalid phone number (7-15 digits required)"
          }
        ]
      }),
      createTextField("notes", "Notes", editingContact?.notes ?? "", {
        name: "notes"
      })
    ];
  }
  /**
   * Open modal to add a new contact
   */
  addContact() {
    this.editingContact.set(null);
    this.editingContactIndex.set(-1);
    this.updateFormFields();
    this.showModal.set(true);
  }
  /**
   * Open modal to edit an existing contact
   */
  editContact(contact, index) {
    this.editingContact.set(__spreadValues({}, contact));
    this.editingContactIndex.set(index);
    this.updateFormFields();
    this.showModal.set(true);
  }
  /**
   * Delete a contact
   */
  deleteContact(index) {
    const currentContacts = [...this.contacts()];
    currentContacts.splice(index, 1);
    this.contacts.set(currentContacts);
    this.markFormAsDirty();
  }
  /**
   * Save contact (add or edit)
   */
  saveContact(formGroup) {
    if (formGroup.invalid)
      return;
    const formValue = formGroup.value;
    const currentContacts = [...this.contacts()];
    const index = this.editingContactIndex();
    if (index >= 0) {
      currentContacts[index] = formValue;
    } else {
      if (!formValue.id) {
        formValue.id = crypto.randomUUID();
      }
      currentContacts.push(formValue);
    }
    this.contacts.set(currentContacts);
    this.markFormAsDirty();
    this.closeModal();
  }
  /**
   * Close the modal
   */
  closeModal() {
    this.showModal.set(false);
    this.editingContact.set(null);
    this.editingContactIndex.set(-1);
  }
  /**
   * Mark the parent form as dirty to enable save button
   */
  markFormAsDirty() {
    this.hasFormChanges = true;
  }
  /**
   * Show success message
   */
  showSuccessMessage(message) {
    this.messageService.add({
      severity: "success",
      summary: "Success",
      detail: message,
      life: 3e3
    });
  }
  /**
   * Show error message
   */
  showErrorMessage(error) {
    const errorMessage = error instanceof Error ? error.message : "An error occurred";
    this.messageService.add({
      severity: "error",
      summary: "Error",
      detail: errorMessage,
      life: 5e3
    });
  }
  submitChanges(_formData) {
    const asset = this.entity();
    if (isNullOrUndefined(asset))
      return;
    const payload = {
      contacts: this.contacts()
    };
    this.isSubmitting.set(true);
    this.entitiesService.updateAsset(asset.id, payload).pipe(takeUntilDestroyed(this.destroyRef)).subscribe({
      next: () => {
        this.isFormEditable.set(false);
        this.isSubmitting.set(false);
        this.clearUnsavedChanges();
        this.originalContacts = [...this.contacts()];
        this.showSuccessMessage("Contacts updated successfully");
        this.broadcastService.broadcast("entity-updated", {
          entityType: "asset",
          entityId: asset.id
        });
      },
      error: (error) => {
        this.isFormEditable.set(true);
        this.isSubmitting.set(false);
        this.showErrorMessage(error);
      }
    });
  }
  onClose() {
    this.closeModal();
  }
  static \u0275fac = function AssetContactsSectionComponent_Factory(__ngFactoryType__) {
    return new (__ngFactoryType__ || _AssetContactsSectionComponent)();
  };
  static \u0275cmp = /* @__PURE__ */ \u0275\u0275defineComponent({ type: _AssetContactsSectionComponent, selectors: [["app-asset-contacts-section"]], viewQuery: function AssetContactsSectionComponent_Query(rf, ctx) {
    if (rf & 1) {
      \u0275\u0275viewQuery(_c03, 7);
    }
    if (rf & 2) {
      let _t;
      \u0275\u0275queryRefresh(_t = \u0275\u0275loadQuery()) && (ctx.iconTemplate = _t.first);
    }
  }, features: [\u0275\u0275InheritDefinitionFeature], decls: 13, vars: 11, consts: [[1, "asset-contacts-section", "card", "pt-2"], [1, "section-header", "mb-4", "p-2", "flex", "justify-start", "items-center"], [1, "pi", "pi-id-card", "!text-[2.5rem]", 3, "ngClass"], [1, "pl-6", "flex-1"], [1, "flex", "justify-between", "items-center"], [1, "text-xl", "font-semibold", "m-0"], [1, "icon-light"], [1, "edit-contacts", "p-field", "p-2"], [1, "view-contacts", "p-2"], [3, "modalClose", "visible", "header", "fields", "actions", "styleClass"], [1, "pi", "pi-pen-to-square", "action", "hover", "!text-2xl", 3, "click", "keydown.enter"], [1, "flex", "flex-col", "justify-end", "w-full"], [1, "empty-contacts", "text-center", "p-4"], [1, "mb-3"], [1, "add-contact-button", "text-right", "mt-3", "mb-4"], ["severity", "secondary", "label", "Add Contact", "icon", "pi pi-plus", 3, "onClick"], [1, "action-buttons", "flex", "justify-end", "gap-2", "mt-4"], ["type", "button", "label", "Cancel", "severity", "secondary", 3, "onClick"], ["type", "button", "label", "Save", "severity", "primary", 3, "onClick", "loading", "disabled"], [1, "grid", "grid-cols-5", "gap-4"], [1, "font-semibold", "mb-2", "col-span-1", "text-right"], [1, "col-span-3"], [1, "icon-light", "col-span-1", "text-right", "flex", "gap-2", "justify-end"], ["type", "button", 1, "pi", "pi-trash", "action", "hover", "!text-xl", "cursor-pointer", "bg-transparent", "border-0", "p-0", 3, "click"], [1, "grid", "grid-cols-5", "gap-4", "mt-2"], [1, "col-span-1", "text-right"], [1, "pi", "pi-mobile", "!text-[1.25rem]"], [1, "col-span-4", "text-link"], [1, "pi", "pi-envelope", "!text-[1.25rem]"], [1, "pi", "pi-phone", "!text-[1.25rem]"], [1, "pi", "pi-comment", "!text-[1.25rem]"], [1, "contact-item", "p-3"], [1, "col-span-4"], ["styleClass", "my-3"]], template: function AssetContactsSectionComponent_Template(rf, ctx) {
    if (rf & 1) {
      \u0275\u0275elementStart(0, "div", 0)(1, "div", 1);
      \u0275\u0275element(2, "span", 2);
      \u0275\u0275elementStart(3, "div", 3)(4, "div", 4)(5, "h2", 5);
      \u0275\u0275text(6, "Contacts");
      \u0275\u0275elementEnd();
      \u0275\u0275conditionalCreate(7, AssetContactsSectionComponent_Conditional_7_Template, 2, 1, "div", 6);
      \u0275\u0275elementEnd();
      \u0275\u0275elementStart(8, "span");
      \u0275\u0275text(9, "Specify contact information specific to this asset.");
      \u0275\u0275elementEnd()()();
      \u0275\u0275conditionalCreate(10, AssetContactsSectionComponent_Conditional_10_Template, 10, 3, "div", 7)(11, AssetContactsSectionComponent_Conditional_11_Template, 3, 1, "div", 8);
      \u0275\u0275elementEnd();
      \u0275\u0275elementStart(12, "app-dynamic-form-modal", 9);
      \u0275\u0275listener("modalClose", function AssetContactsSectionComponent_Template_app_dynamic_form_modal_modalClose_12_listener() {
        return ctx.onClose();
      });
      \u0275\u0275elementEnd();
    }
    if (rf & 2) {
      \u0275\u0275advance(2);
      \u0275\u0275property("ngClass", \u0275\u0275pureFunction1(9, _c1, ctx.isFormEditable()));
      \u0275\u0275attribute("aria-label", "id card icon");
      \u0275\u0275advance(5);
      \u0275\u0275conditional(!ctx.isFormEditable() ? 7 : -1);
      \u0275\u0275advance(3);
      \u0275\u0275conditional(ctx.isFormEditable() ? 10 : 11);
      \u0275\u0275advance(2);
      \u0275\u0275property("visible", ctx.showModal())("header", ctx.modalHeader())("fields", ctx.formFields)("actions", ctx.actions)("styleClass", "w-[40rem]");
    }
  }, dependencies: [
    CommonModule,
    NgClass,
    ReactiveFormsModule,
    ButtonModule,
    Button,
    DynamicFormModalComponent,
    DataViewModule,
    PanelModule,
    Panel,
    DividerModule,
    Divider
  ], encapsulation: 2 });
};
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(AssetContactsSectionComponent, [{
    type: Component,
    args: [{ selector: "app-asset-contacts-section", imports: [
      CommonModule,
      ReactiveFormsModule,
      ButtonModule,
      DynamicFormModalComponent,
      DataViewModule,
      PanelModule,
      DividerModule
    ], template: `<div class="asset-contacts-section card pt-2">
  <!-- Header Section -->
  <div class="section-header mb-4 p-2 flex justify-start items-center">
    <span
      class="pi pi-id-card !text-[2.5rem]"
      [ngClass]="{ 'icon-primary': isFormEditable() }"
      [attr.aria-label]="'id card icon'"
    ></span>

    <div class="pl-6 flex-1">
      <div class="flex justify-between items-center">
        <h2 class="text-xl font-semibold m-0">Contacts</h2>
        @if (!isFormEditable()) {
          <div class="icon-light">
            <span
              class="pi pi-pen-to-square action hover !text-2xl"
              [attr.aria-label]="'Edit asset contacts.'"
              (click)="onEdit()"
              (keydown.enter)="onEdit()"
            ></span>
          </div>
        }
      </div>
      <span>Specify contact information specific to this asset.</span>
    </div>
  </div>

  <!-- Edit Mode -->
  @if (isFormEditable()) {
    <div class="edit-contacts p-field p-2">
      <div class="flex flex-col justify-end w-full">
        <!-- No Contacts Placeholder -->
        @if (contacts().length === 0) {
          <div class="empty-contacts text-center p-4">
            <p>No contacts added yet. Click "Add" to create a contact.</p>
          </div>
        }

        <!-- Contacts List -->
        @for (contact of contacts(); track contact.id; let i = $index) {
          <p-panel class="mb-3">
            <div class="grid grid-cols-5 gap-4">
              <span class="font-semibold mb-2 col-span-1 text-right">{{
                utilityService.toTitleCase(contact.type)
              }}</span>
              <span class="col-span-3">{{ contact.name }}</span>
              <div
                class="icon-light col-span-1 text-right flex gap-2 justify-end"
              >
                <button
                  type="button"
                  class="pi pi-trash action hover !text-xl cursor-pointer bg-transparent border-0 p-0"
                  [attr.aria-label]="'Delete Contact'"
                  (click)="deleteContact(i)"
                ></button>
              </div>
            </div>

            <!-- Mobile Phone -->
            @if (contact.phoneMobile) {
              <div class="grid grid-cols-5 gap-4 mt-2">
                <div class="col-span-1 text-right">
                  <i class="pi pi-mobile !text-[1.25rem]"></i>
                </div>
                <span class="col-span-4 text-link">{{
                  contact.phoneMobile
                }}</span>
              </div>
            }

            <!-- Email -->
            @if (contact?.emailAddress) {
              <div class="grid grid-cols-5 gap-4 mt-2">
                <div class="col-span-1 text-right">
                  <i class="pi pi-envelope !text-[1.25rem]"></i>
                </div>
                <span class="col-span-4 text-link">{{
                  contact?.emailAddress
                }}</span>
              </div>
            }

            <!-- Phone -->
            @if (contact?.phoneOffice) {
              <div class="grid grid-cols-5 gap-4 mt-2">
                <div class="col-span-1 text-right">
                  <i class="pi pi-phone !text-[1.25rem]"></i>
                </div>
                <span class="col-span-4 text-link">{{
                  contact?.phoneOffice
                }}</span>
              </div>
            }

            <!-- Notes -->
            @if (contact?.notes) {
              <div class="grid grid-cols-5 gap-4 mt-2">
                <div class="col-span-1 text-right">
                  <i class="pi pi-comment !text-[1.25rem]"></i>
                </div>
                <span class="col-span-4 text-link">{{ contact?.notes }}</span>
              </div>
            }
          </p-panel>
        }

        <!-- Add Button -->
        <div class="add-contact-button text-right mt-3 mb-4">
          <p-button
            (onClick)="addContact()"
            severity="secondary"
            label="Add Contact"
            icon="pi pi-plus"
          />
        </div>

        <!-- Action Buttons -->
        <div class="action-buttons flex justify-end gap-2 mt-4">
          <p-button
            type="button"
            label="Cancel"
            severity="secondary"
            (onClick)="cancelEdit()"
          />

          <p-button
            type="button"
            label="Save"
            severity="primary"
            [loading]="isSubmitting()"
            [disabled]="!hasFormChanges"
            (onClick)="submitChanges({})"
          />
        </div>
      </div>
    </div>
  }
  <!-- View Mode -->
  @else {
    <div class="view-contacts p-2">
      @if (contacts().length === 0) {
        <div class="empty-contacts text-center p-4">
          <p>No contacts added to this asset.</p>
        </div>
      } @else {
        @for (contact of contacts(); track contact.id; let last = $last) {
          <div class="contact-item p-3">
            <!-- Contact Header -->
            <div class="grid grid-cols-5 gap-4">
              <div class="font-semibold mb-2 col-span-1 text-right">
                {{ utilityService.toTitleCase(contact.type) }}
              </div>

              <span class="col-span-4">{{ contact.name }}</span>
            </div>

            <!-- Mobile Phone -->
            @if (contact.phoneMobile) {
              <div class="grid grid-cols-5 gap-4 mt-2">
                <div class="col-span-1 text-right">
                  <i class="pi pi-mobile !text-[1.25rem]"></i>
                </div>
                <span class="col-span-4 text-link">{{
                  contact.phoneMobile
                }}</span>
              </div>
            }

            <!-- Email -->
            @if (contact.emailAddress) {
              <div class="grid grid-cols-5 gap-4 mt-2">
                <div class="col-span-1 text-right">
                  <i class="pi pi-envelope !text-[1.25rem]"></i>
                </div>
                <span class="col-span-4 text-link">{{
                  contact.emailAddress
                }}</span>
              </div>
            }

            <!-- Phone -->
            @if (contact.phoneOffice) {
              <div class="grid grid-cols-5 gap-4 mt-2">
                <div class="col-span-1 text-right">
                  <i class="pi pi-phone !text-[1.25rem]"></i>
                </div>
                <span class="col-span-4 text-link">{{
                  contact.phoneOffice
                }}</span>
              </div>
            }

            <!-- Notes -->
            @if (contact.notes) {
              <div class="grid grid-cols-5 gap-4 mt-2">
                <div class="col-span-1 text-right">
                  <i class="pi pi-comment !text-[1.25rem]"></i>
                </div>
                <span class="col-span-4">{{ contact.notes }}</span>
              </div>
            }

            @if (!last) {
              <p-divider styleClass="my-3" />
            }
          </div>
        }
      }
    </div>
  }
</div>

<!-- Add/Edit Contact Modal -->
<app-dynamic-form-modal
  [visible]="showModal()"
  [header]="modalHeader()"
  [fields]="formFields"
  [actions]="actions"
  [styleClass]="'w-[40rem]'"
  (modalClose)="onClose()"
>
</app-dynamic-form-modal>
` }]
  }], () => [], { iconTemplate: [{
    type: ViewChild,
    args: ["iconTemplate", { static: true }]
  }] });
})();
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && \u0275setClassDebugInfo(AssetContactsSectionComponent, { className: "AssetContactsSectionComponent", filePath: "src/app/features/administration/components/assets/asset-contacts-section/asset-contacts-section.component.ts", lineNumber: 50 });
})();

// src/app/features/administration/components/assets/asset-profiles-section/asset-profiles-section.component.ts
var import_lodash = __toESM(require_lodash());

// src/app/features/administration/utils/form-to-request-mapper.ts
var FormToRequestMapper = class {
  mapping;
  constructor(mapping) {
    this.mapping = mapping;
  }
  transform(formData) {
    const result = {};
    for (const [formField, config] of Object.entries(this.mapping)) {
      const formValue = formData[formField];
      if (!isDefined(formValue) && config.required !== true) {
        continue;
      }
      if (config.validate && !config.validate(formValue)) {
        throw new Error(`Validation failed for field: ${formField}`);
      }
      const finalValue = config.transform ? config.transform(formValue) : formValue;
      result[config.requestProperty] = finalValue;
    }
    return result;
  }
};

// src/app/features/administration/components/assets/asset-profiles-section/asset-profiles-section.component.ts
var _c04 = (a0) => ({ "icon-primary": a0 });
function AssetProfilesSectionComponent_Conditional_7_Template(rf, ctx) {
  if (rf & 1) {
    const _r1 = \u0275\u0275getCurrentView();
    \u0275\u0275elementStart(0, "div", 6)(1, "span", 9);
    \u0275\u0275listener("click", function AssetProfilesSectionComponent_Conditional_7_Template_span_click_1_listener() {
      \u0275\u0275restoreView(_r1);
      const ctx_r1 = \u0275\u0275nextContext();
      return \u0275\u0275resetView(ctx_r1.onEdit());
    })("keydown.enter", function AssetProfilesSectionComponent_Conditional_7_Template_span_keydown_enter_1_listener() {
      \u0275\u0275restoreView(_r1);
      const ctx_r1 = \u0275\u0275nextContext();
      return \u0275\u0275resetView(ctx_r1.onEdit());
    });
    \u0275\u0275elementEnd()();
  }
  if (rf & 2) {
    \u0275\u0275advance();
    \u0275\u0275attribute("aria-label", "Edit asset profiles");
  }
}
function AssetProfilesSectionComponent_Conditional_10_Template(rf, ctx) {
  if (rf & 1) {
    const _r3 = \u0275\u0275getCurrentView();
    \u0275\u0275elementStart(0, "app-dynamic-form", 10);
    \u0275\u0275listener("formSubmit", function AssetProfilesSectionComponent_Conditional_10_Template_app_dynamic_form_formSubmit_0_listener($event) {
      \u0275\u0275restoreView(_r3);
      const ctx_r1 = \u0275\u0275nextContext();
      return \u0275\u0275resetView(ctx_r1.onSubmit($event));
    });
    \u0275\u0275elementEnd();
  }
  if (rf & 2) {
    const ctx_r1 = \u0275\u0275nextContext();
    \u0275\u0275property("fields", ctx_r1.formFields)("actions", ctx_r1.actions);
  }
}
function AssetProfilesSectionComponent_Conditional_11_Template(rf, ctx) {
  if (rf & 1) {
    \u0275\u0275element(0, "app-grid", 8);
  }
  if (rf & 2) {
    const ctx_r1 = \u0275\u0275nextContext();
    \u0275\u0275property("data", ctx_r1.assetDetails())("columns", ctx_r1.columns)("showGridLines", false)("hideHeader", true);
  }
}
var AssetProfilesSectionComponent = class _AssetProfilesSectionComponent extends TypedEntitySectionBaseComponent {
  entitiesService = inject(EntitiesService);
  utilityService = inject(UtilityService);
  selectOptionsLoaded = signal(false, ...ngDevMode ? [{ debugName: "selectOptionsLoaded" }] : []);
  selectOptions = {};
  assetDetails = computed(() => {
    const assetDetails = this.entity();
    if (!isDefined(assetDetails))
      return [];
    return [
      {
        key: "Asset Rating",
        value: assetDetails.ratingProfile?.name ?? "None"
      },
      {
        key: "Asset State",
        value: !(0, import_lodash.isEmpty)(assetDetails.assetStateProfiles) ? assetDetails.assetStateProfiles?.map((state) => state.name).join(", ") : "None"
      },
      {
        key: "Road Profile",
        value: assetDetails.roadProfile?.name ?? "None"
      },
      {
        key: "Geo Lock Profile",
        value: assetDetails.geoLockProfile?.name ?? "None"
      }
    ];
  }, ...ngDevMode ? [{ debugName: "assetDetails" }] : []);
  searchAssetRatingSubject = new Subject();
  assetRatingSuggestions = signal([], ...ngDevMode ? [{ debugName: "assetRatingSuggestions" }] : []);
  requestMapper;
  constructor() {
    super();
    this.columns = [
      { field: "key", header: "", transform: "uppercase" },
      { field: "value", header: "" }
    ];
    effect(() => {
      const assetDetails = this.entity();
      if (assetDetails && this.selectOptionsLoaded()) {
        this.initializeRequestMapper();
        this.updateFormFields();
      }
    });
  }
  ngOnInit() {
    this.loadSelectOptions();
    this.setupSearchAssetRating();
  }
  loadSelectOptions() {
    const asset = this.entity();
    if (!isDefined(asset) || !isString(asset.id)) {
      this.selectOptions = {};
      this.selectOptionsLoaded.set(true);
      return;
    }
    combineLatest([
      this.entitiesService.listGeoLockProfiles(asset.owner.id, true, 0, 100, "name", "state=active"),
      this.entitiesService.listRoadProfiles(asset.owner.id, true, 0, 100, "name", "state=active"),
      this.entitiesService.listAssetStateProfiles(asset.owner.id)
    ]).pipe(takeUntilDestroyed(this.destroyRef), catchError(() => {
      return of([{ items: [] }, { items: [] }, { items: [] }]);
    })).subscribe(([geoLockProfiles, roadProfiles, assetStateProfiles]) => {
      const noneOption = { label: "None", value: DEFAULT_SYSTEM_ID };
      this.selectOptions = {
        geoLockProfiles: [
          noneOption,
          ...geoLockProfiles.items.map((item) => ({
            label: item.name ?? "",
            value: item.id
          })).sort((a, b) => a.label.localeCompare(b.label))
        ],
        roadProfiles: [
          noneOption,
          ...roadProfiles.items.map((item) => ({
            label: item.name ?? "",
            value: item.id
          })).sort((a, b) => a.label.localeCompare(b.label))
        ],
        assetStateProfiles: assetStateProfiles.items.map((item) => ({
          label: item.name ?? "",
          value: item.id
        })).sort((a, b) => a.label.localeCompare(b.label))
      };
      this.selectOptionsLoaded.set(true);
    });
  }
  setupSearchAssetRating() {
    this.searchAssetRatingSubject.pipe(debounceTime(300), takeUntilDestroyed(this.destroyRef), switchMap((searchTerm) => {
      if (searchTerm === null || searchTerm === void 0) {
        return of({
          count: 0,
          offset: 0,
          limit: DEFAULT_LIST_SIZE,
          items: []
        });
      }
      const filters = {
        state: { value: "active", operator: "=" },
        name: { value: `*${searchTerm}*`, operator: "=" }
      };
      const rqlFilter = this.utilityService.constructRqlFilter(filters);
      return this.entitiesService.listAssetRatingProfiles(this.entity()?.owner.id ?? "", 0, 10, "name", rqlFilter);
    })).subscribe((response) => {
      this.assetRatingSuggestions.set(response.items);
    });
  }
  searchAssetRating(searchTerm) {
    if (searchTerm === null || searchTerm === void 0) {
      this.assetRatingSuggestions.set([]);
      return;
    }
    this.searchAssetRatingSubject.next(searchTerm);
  }
  initializeRequestMapper() {
    this.requestMapper = new FormToRequestMapper({
      ratingProfile: {
        requestProperty: "ratingProfile",
        transform: (value) => {
          const profile = value;
          return {
            id: profile.id,
            name: profile.name
          };
        }
      },
      assetStateProfiles: {
        requestProperty: "assetStateProfiles",
        transform: (value) => {
          const profiles = value.map((profile) => {
            const item = this.selectOptions?.["assetStateProfiles"]?.find((item2) => item2.value === profile.id);
            return {
              id: item?.value,
              name: item?.label
            };
          });
          return profiles;
        }
      },
      roadProfile: {
        requestProperty: "roadProfile",
        transform: (value) => {
          const item = this.selectOptions?.["roadProfiles"]?.find((item2) => item2.value === value);
          return {
            id: item?.value,
            name: item?.label
          };
        }
      },
      geoLockProfile: {
        requestProperty: "geoLockProfile",
        transform: (value) => {
          const item = this.selectOptions?.["geoLockProfiles"]?.find((item2) => item2.value === value);
          return {
            id: item?.value,
            name: item?.label
          };
        }
      }
    });
  }
  updateFormFields() {
    const asset = this.entity();
    this.formFields = [
      createAutocompleteField("ratingProfile", "Asset Rating", asset?.ratingProfile?.name, () => this.assetRatingSuggestions(), this.searchAssetRating.bind(this), {
        layout: "horizontal",
        labelWidth: "1/3",
        name: "ratingProfile",
        props: {
          appendTo: "body",
          showClear: true,
          multiple: false,
          field: "name",
          completeOnFocus: false,
          typeahead: true,
          showEmptyMessage: true,
          forceSelection: true
        }
      }),
      createMultiselectField("assetStateProfiles", "Asset State", asset?.assetStateProfiles ?? [], this.selectOptions?.["assetStateProfiles"] ?? [], {
        layout: "horizontal",
        labelWidth: "1/3",
        name: "assetStateProfiles",
        props: {
          appendTo: "body",
          multiple: true,
          showClear: true
        }
      }),
      createDropdownField("roadProfile", "Road Profile", this.selectOptions?.["roadProfiles"] ?? [], asset?.roadProfile?.id, {
        layout: "horizontal",
        labelWidth: "1/3",
        name: "roadProfile",
        props: {
          appendTo: "body"
        }
      }),
      createDropdownField("geoLockProfile", "Geo Lock Profile", this.selectOptions?.["geoLockProfiles"] ?? [], asset?.geoLockProfile?.id, {
        layout: "horizontal",
        labelWidth: "1/3",
        name: "geoLockProfile",
        props: {
          appendTo: "body"
        }
      })
    ];
  }
  getUpdateMethod() {
    return (id, data) => this.entitiesService.updateAsset(id, data);
  }
  transformFormData(formData) {
    if (!this.requestMapper) {
      throw new Error("Request mapper not initialized");
    }
    try {
      const normalizedFormData = Array.isArray(formData) ? formData.reduce((acc, item) => __spreadValues(__spreadValues({}, acc), item), {}) : formData;
      const partialRequest = this.requestMapper.transform(normalizedFormData);
      const updateRequest = {};
      for (const key in partialRequest) {
        if (Object.hasOwn(partialRequest, key)) {
          const value = partialRequest[key];
          if (value !== void 0 && value !== null) {
            updateRequest[key] = value;
          }
        }
      }
      return updateRequest;
    } catch (error) {
      console.error("Form data transformation failed:", error);
      throw error;
    }
  }
  static \u0275fac = function AssetProfilesSectionComponent_Factory(__ngFactoryType__) {
    return new (__ngFactoryType__ || _AssetProfilesSectionComponent)();
  };
  static \u0275cmp = /* @__PURE__ */ \u0275\u0275defineComponent({ type: _AssetProfilesSectionComponent, selectors: [["app-asset-profiles-section"]], features: [\u0275\u0275InheritDefinitionFeature], decls: 12, vars: 6, consts: [[1, "card", "pt-2"], [1, "mb-4", "p-2", "flex", "justify-start", "items-center"], [1, "pi", "pi-verified", "!text-[2.5rem]", 3, "ngClass"], [1, "pl-6", "flex-1"], [1, "flex", "justify-between", "items-center"], [1, "text-xl", "font-semibold", "m-0"], [1, "icon-light"], [3, "fields", "actions"], ["tableStyleClass", "info-display !w-auto", 3, "data", "columns", "showGridLines", "hideHeader"], [1, "pi", "pi-pen-to-square", "action", "hover", "!text-2xl", 3, "click", "keydown.enter"], [3, "formSubmit", "fields", "actions"]], template: function AssetProfilesSectionComponent_Template(rf, ctx) {
    if (rf & 1) {
      \u0275\u0275elementStart(0, "div", 0)(1, "div", 1);
      \u0275\u0275element(2, "span", 2);
      \u0275\u0275elementStart(3, "div", 3)(4, "div", 4)(5, "h2", 5);
      \u0275\u0275text(6, "Profiles");
      \u0275\u0275elementEnd();
      \u0275\u0275conditionalCreate(7, AssetProfilesSectionComponent_Conditional_7_Template, 2, 1, "div", 6);
      \u0275\u0275elementEnd();
      \u0275\u0275elementStart(8, "span");
      \u0275\u0275text(9, " Profiles Select from the following profiles.");
      \u0275\u0275elementEnd()()();
      \u0275\u0275conditionalCreate(10, AssetProfilesSectionComponent_Conditional_10_Template, 1, 2, "app-dynamic-form", 7)(11, AssetProfilesSectionComponent_Conditional_11_Template, 1, 4, "app-grid", 8);
      \u0275\u0275elementEnd();
    }
    if (rf & 2) {
      \u0275\u0275advance(2);
      \u0275\u0275property("ngClass", \u0275\u0275pureFunction1(4, _c04, ctx.isFormEditable()));
      \u0275\u0275attribute("aria-label", "verified icon");
      \u0275\u0275advance(5);
      \u0275\u0275conditional(!ctx.isFormEditable() ? 7 : -1);
      \u0275\u0275advance(3);
      \u0275\u0275conditional(ctx.isFormEditable() ? 10 : 11);
    }
  }, dependencies: [CommonModule, NgClass, GridComponent, DynamicFormComponent], encapsulation: 2 });
};
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(AssetProfilesSectionComponent, [{
    type: Component,
    args: [{ selector: "app-asset-profiles-section", imports: [CommonModule, GridComponent, DynamicFormComponent], template: `<div class="card pt-2">
  <div class="mb-4 p-2 flex justify-start items-center">
    <span
      class="pi pi-verified !text-[2.5rem]"
      [ngClass]="{ 'icon-primary': isFormEditable() }"
      [attr.aria-label]="'verified icon'"
    ></span>

    <div class="pl-6 flex-1">
      <div class="flex justify-between items-center">
        <h2 class="text-xl font-semibold m-0">Profiles</h2>
        @if (!isFormEditable()) {
          <div class="icon-light">
            <span
              class="pi pi-pen-to-square action hover !text-2xl"
              [attr.aria-label]="'Edit asset profiles'"
              (click)="onEdit()"
              (keydown.enter)="onEdit()"
            ></span>
          </div>
        }
      </div>
      <span> Profiles Select from the following profiles.</span>
    </div>
  </div>
  @if (isFormEditable()) {
    <app-dynamic-form
      [fields]="formFields"
      [actions]="actions"
      (formSubmit)="onSubmit($event)"
    >
    </app-dynamic-form>
  } @else {
    <app-grid
      [data]="assetDetails()"
      [columns]="columns"
      [showGridLines]="false"
      [hideHeader]="true"
      tableStyleClass="info-display !w-auto"
    ></app-grid>
  }
</div>
` }]
  }], () => [], null);
})();
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && \u0275setClassDebugInfo(AssetProfilesSectionComponent, { className: "AssetProfilesSectionComponent", filePath: "src/app/features/administration/components/assets/asset-profiles-section/asset-profiles-section.component.ts", lineNumber: 53 });
})();

// src/app/features/administration/components/assets/asset-sharing-section/asset-sharing-section.component.ts
var _c05 = (a0) => ({ "icon-primary": a0 });
function AssetSharingSectionComponent_Conditional_7_Template(rf, ctx) {
  if (rf & 1) {
    const _r1 = \u0275\u0275getCurrentView();
    \u0275\u0275elementStart(0, "div", 6)(1, "span", 13);
    \u0275\u0275listener("click", function AssetSharingSectionComponent_Conditional_7_Template_span_click_1_listener() {
      \u0275\u0275restoreView(_r1);
      const ctx_r1 = \u0275\u0275nextContext();
      return \u0275\u0275resetView(ctx_r1.onEdit());
    })("keydown.enter", function AssetSharingSectionComponent_Conditional_7_Template_span_keydown_enter_1_listener() {
      \u0275\u0275restoreView(_r1);
      const ctx_r1 = \u0275\u0275nextContext();
      return \u0275\u0275resetView(ctx_r1.onEdit());
    });
    \u0275\u0275elementEnd()();
  }
}
function AssetSharingSectionComponent_Conditional_10_Conditional_5_Template(rf, ctx) {
  if (rf & 1) {
    \u0275\u0275element(0, "p-panel");
  }
}
function AssetSharingSectionComponent_Conditional_10_For_7_Template(rf, ctx) {
  if (rf & 1) {
    const _r4 = \u0275\u0275getCurrentView();
    \u0275\u0275elementStart(0, "p-panel")(1, "div", 21)(2, "div")(3, "span", 22);
    \u0275\u0275text(4);
    \u0275\u0275elementEnd()();
    \u0275\u0275elementStart(5, "div", 6)(6, "span", 23);
    \u0275\u0275listener("click", function AssetSharingSectionComponent_Conditional_10_For_7_Template_span_click_6_listener() {
      const item_r5 = \u0275\u0275restoreView(_r4).$implicit;
      const ctx_r1 = \u0275\u0275nextContext(2);
      return \u0275\u0275resetView(ctx_r1.removeClientFromSharedList(item_r5));
    })("keydown.enter", function AssetSharingSectionComponent_Conditional_10_For_7_Template_span_keydown_enter_6_listener() {
      const item_r5 = \u0275\u0275restoreView(_r4).$implicit;
      const ctx_r1 = \u0275\u0275nextContext(2);
      return \u0275\u0275resetView(ctx_r1.removeClientFromSharedList(item_r5));
    });
    \u0275\u0275elementEnd()()()();
  }
  if (rf & 2) {
    const item_r5 = ctx.$implicit;
    \u0275\u0275advance(4);
    \u0275\u0275textInterpolate1(" ", item_r5.name);
    \u0275\u0275advance(2);
    \u0275\u0275attribute("aria-label", "Delete Item");
  }
}
function AssetSharingSectionComponent_Conditional_10_Template(rf, ctx) {
  if (rf & 1) {
    const _r3 = \u0275\u0275getCurrentView();
    \u0275\u0275elementStart(0, "div", 7)(1, "label", 14);
    \u0275\u0275text(2, "Shared With");
    \u0275\u0275elementEnd();
    \u0275\u0275elementStart(3, "div", 15)(4, "div", 16);
    \u0275\u0275conditionalCreate(5, AssetSharingSectionComponent_Conditional_10_Conditional_5_Template, 1, 0, "p-panel");
    \u0275\u0275repeaterCreate(6, AssetSharingSectionComponent_Conditional_10_For_7_Template, 7, 2, "p-panel", null, \u0275\u0275repeaterTrackByIdentity);
    \u0275\u0275elementStart(8, "p-button", 17);
    \u0275\u0275listener("onClick", function AssetSharingSectionComponent_Conditional_10_Template_p_button_onClick_8_listener() {
      \u0275\u0275restoreView(_r3);
      const ctx_r1 = \u0275\u0275nextContext();
      return \u0275\u0275resetView(ctx_r1.openAddEntityModal());
    });
    \u0275\u0275elementEnd();
    \u0275\u0275elementStart(9, "div", 18)(10, "p-button", 19);
    \u0275\u0275listener("onClick", function AssetSharingSectionComponent_Conditional_10_Template_p_button_onClick_10_listener() {
      \u0275\u0275restoreView(_r3);
      const ctx_r1 = \u0275\u0275nextContext();
      return \u0275\u0275resetView(ctx_r1.isFormEditable.set(false));
    });
    \u0275\u0275elementEnd();
    \u0275\u0275elementStart(11, "p-button", 20);
    \u0275\u0275listener("onClick", function AssetSharingSectionComponent_Conditional_10_Template_p_button_onClick_11_listener() {
      \u0275\u0275restoreView(_r3);
      const ctx_r1 = \u0275\u0275nextContext();
      return \u0275\u0275resetView(ctx_r1.submitChanges({}));
    });
    \u0275\u0275elementEnd()()()()();
  }
  if (rf & 2) {
    const ctx_r1 = \u0275\u0275nextContext();
    \u0275\u0275advance(5);
    \u0275\u0275conditional(ctx_r1.sharedWith.length === 0 ? 5 : -1);
    \u0275\u0275advance();
    \u0275\u0275repeater(ctx_r1.sharedWith);
    \u0275\u0275advance(5);
    \u0275\u0275property("disabled", true);
  }
}
function AssetSharingSectionComponent_Conditional_11_Template(rf, ctx) {
  if (rf & 1) {
    \u0275\u0275element(0, "app-grid", 8);
  }
  if (rf & 2) {
    const ctx_r1 = \u0275\u0275nextContext();
    \u0275\u0275property("data", ctx_r1.assetSharedWith())("columns", ctx_r1.columns)("showGridLines", false)("hideHeader", true);
  }
}
function AssetSharingSectionComponent_Conditional_14_Template(rf, ctx) {
  if (rf & 1) {
    \u0275\u0275elementStart(0, "div", 11);
    \u0275\u0275element(1, "i", 24);
    \u0275\u0275elementStart(2, "span");
    \u0275\u0275text(3, "Searching for client...");
    \u0275\u0275elementEnd()();
  }
}
function AssetSharingSectionComponent_Conditional_15_Template(rf, ctx) {
  if (rf & 1) {
    \u0275\u0275elementStart(0, "div", 11)(1, "div", 25)(2, "div", 26);
    \u0275\u0275text(3, "Client Found:");
    \u0275\u0275elementEnd();
    \u0275\u0275elementStart(4, "div", 27)(5, "span");
    \u0275\u0275text(6);
    \u0275\u0275elementEnd()()()();
  }
  if (rf & 2) {
    let tmp_1_0;
    const ctx_r1 = \u0275\u0275nextContext();
    \u0275\u0275advance(6);
    \u0275\u0275textInterpolate((tmp_1_0 = ctx_r1.selectedClient()) == null ? null : tmp_1_0.name);
  }
}
function AssetSharingSectionComponent_Conditional_16_Template(rf, ctx) {
  if (rf & 1) {
    \u0275\u0275elementStart(0, "p", 12);
    \u0275\u0275text(1, " Enter the PIN number for the company you would like to share this asset with. If you do not know the PIN code, contact the company in question and ask for their PIN. ");
    \u0275\u0275elementEnd();
  }
}
var AssetSharingSectionComponent = class _AssetSharingSectionComponent extends EntitySectionBaseComponent {
  entitiesService = inject(EntitiesService);
  utilityService = inject(UtilityService);
  accountsService = inject(AccountsService);
  confirmationService = inject(ConfirmationService);
  // UI state signals
  showModal = signal(false, ...ngDevMode ? [{ debugName: "showModal" }] : []);
  isSearchingClient = signal(false, ...ngDevMode ? [{ debugName: "isSearchingClient" }] : []);
  // Data signals
  selectedClient = signal(null, ...ngDevMode ? [{ debugName: "selectedClient" }] : []);
  searchClientSubject = new Subject();
  assetSharedWith = computed(() => {
    const assetSharedWith = this.entity()?.sharedWith;
    if (isNullOrUndefined(assetSharedWith))
      return [];
    return [
      {
        key: "Shared With",
        value: assetSharedWith.map((sharedWith) => sharedWith.name).join(", ")
      }
    ];
  }, ...ngDevMode ? [{ debugName: "assetSharedWith" }] : []);
  actions = [
    {
      label: "Cancel",
      action: () => {
        this.onClose();
      },
      severity: "secondary"
    },
    {
      label: "Ok",
      action: () => {
        const selectedClientValue = this.selectedClient();
        if (selectedClientValue) {
          this.addClientToSharedList(selectedClientValue);
        }
      },
      severity: "primary",
      // Only enable when a client is found
      disabled: () => this.selectedClient() === null
    }
  ];
  sharedWith = [];
  constructor() {
    super();
    this.columns = [
      {
        field: "key",
        header: "",
        transform: "uppercase"
      },
      { field: "value", header: "" }
    ];
    effect(() => {
      const assetSharedWith = this.entity()?.sharedWith;
      if (assetSharedWith) {
        this.sharedWith = assetSharedWith;
        this.updateFormFields();
      }
    });
  }
  ngOnInit() {
    this.setupSearchClient();
  }
  setupSearchClient() {
    this.searchClientSubject.pipe(debounceTime(300), distinctUntilChanged(), takeUntilDestroyed(this.destroyRef), switchMap((searchTerm) => {
      if (isNullOrUndefined(searchTerm)) {
        this.isSearchingClient.set(false);
        return EMPTY;
      }
      return this.accountsService.getClientByPin(searchTerm).pipe(catchError(() => {
        this.selectedClient.set(null);
        this.isSearchingClient.set(false);
        this.form?.get("pin")?.updateValueAndValidity();
        return EMPTY;
      }));
    })).subscribe({
      next: (response) => {
        this.isSearchingClient.set(false);
        if (!isEmpty(response)) {
          this.selectedClient.set(response);
        } else {
          this.selectedClient.set(null);
        }
        this.form?.get("pin")?.updateValueAndValidity();
      },
      error: () => {
        this.isSearchingClient.set(false);
        this.selectedClient.set(null);
        this.form?.get("pin")?.updateValueAndValidity();
      }
    });
  }
  searchClient(searchTerm) {
    if (isNullOrUndefined(searchTerm)) {
      this.selectedClient.set(null);
      this.isSearchingClient.set(false);
      return;
    }
    this.isSearchingClient.set(true);
    this.searchClientSubject.next(searchTerm);
  }
  updateFormFields() {
    this.formFields = [
      createTextField("pin", "PIN", "", {
        name: "pin",
        validations: [
          {
            name: "required",
            validator: Validators.required,
            message: "PIN is required"
          },
          {
            name: "minlength",
            validator: Validators.minLength(3),
            message: "PIN must be at least 3 characters"
          },
          {
            name: "clientNotFound",
            validator: (control) => {
              const value = control.value;
              if (isNullOrUndefined(value) || value.length < 3) {
                return null;
              }
              if (this.isSearchingClient()) {
                return null;
              }
              return this.selectedClient() === null ? { clientNotFound: true } : null;
            },
            message: "No client found for this PIN"
          }
        ],
        events: {
          onChange: (value) => {
            if (value && value.length >= 3) {
              this.searchClient(value);
            } else {
              this.selectedClient.set(null);
            }
          }
        }
      })
    ];
  }
  /**
   * Open modal to add shared entity
   */
  openAddEntityModal() {
    this.selectedClient.set(null);
    this.updateFormFields();
    this.showModal.set(true);
  }
  /**
   * Add client to shared entities list
   */
  addClientToSharedList(client) {
    const isDuplicate = this.sharedWith.some((item) => item.id === client.id);
    if (isDuplicate) {
      this.messageService.add({
        severity: "warn",
        summary: "Already Shared",
        detail: `Asset is already shared with ${client.name}`
      });
      return;
    }
    this.sharedWith = [...this.sharedWith, client];
    this.onClose();
  }
  submitChanges(_formData) {
    const asset = this.entity();
    if (!asset)
      return;
    this.entitiesService.updateAsset(asset.id, {
      sharedWith: this.sharedWith
    }).pipe(takeUntilDestroyed(this.destroyRef), catchError((error) => {
      this.isLoading.set(false);
      this.messageService.add({
        severity: "error",
        summary: "Error",
        detail: "Failed to update sharing settings"
      });
      console.error("Failed to update shared entities", error);
      return EMPTY;
    })).subscribe({
      next: (updatedAsset) => {
        this.isLoading.set(false);
        this.sharedWith = updatedAsset.sharedWith || [];
      }
    });
  }
  onClose() {
    this.showModal.set(false);
    this.selectedClient.set(null);
  }
  removeClientFromSharedList(client) {
    this.confirmationService.confirm({
      message: `Are you sure you want to remove sharing with ${client.name}?`,
      accept: () => {
        this.sharedWith = this.sharedWith.filter((item) => item.id !== client.id);
      }
    });
  }
  static \u0275fac = function AssetSharingSectionComponent_Factory(__ngFactoryType__) {
    return new (__ngFactoryType__ || _AssetSharingSectionComponent)();
  };
  static \u0275cmp = /* @__PURE__ */ \u0275\u0275defineComponent({ type: _AssetSharingSectionComponent, selectors: [["app-asset-sharing-section"]], features: [\u0275\u0275ProvidersFeature([MessageService, ConfirmationService]), \u0275\u0275InheritDefinitionFeature], decls: 18, vars: 10, consts: [[1, "card", "pt-2"], [1, "section-header", "mb-4", "p-2", "flex", "justify-start", "items-center"], ["aria-label", "share icon", 1, "pi", "pi-share-alt", "!text-[2.5rem]", 3, "ngClass"], [1, "pl-6", "flex-1"], [1, "flex", "justify-between", "items-center"], [1, "text-xl", "font-semibold", "m-0"], [1, "icon-light"], [1, "p-field", "p-2", "flex", "align-items-center", "gap-2"], ["tableStyleClass", "info-display !w-auto", 3, "data", "columns", "showGridLines", "hideHeader"], ["header", "Share Asset", 3, "modalClose", "formSubmit", "visible", "fields", "actions", "styleClass"], ["formHeader", ""], [1, "mt-2", "mb-4"], [1, "mt-2", "mb-4", "muted"], ["aria-label", "Edit asset sharing", 1, "pi", "pi-pen-to-square", "action", "hover", "!text-2xl", 3, "click", "keydown.enter"], ["for", "logo", 1, "w-1/3", "flex-shrink-0"], [1, "flex", "flex-col", "justify-end", "w-full"], [1, "flex-grow-1", "flex", "flex-col"], ["severity", "secondary", "label", "Add", 1, "self-end", "p-2", 3, "onClick"], [1, "flex", "justify-end", "gap-2", "mt-4"], ["type", "button", "label", "Cancel", "severity", "secondary", 3, "onClick"], ["type", "submit", "label", "Save", "severity", "primary", 3, "onClick", "disabled"], [1, "flex", "flex-row", "justify-between"], [1, "px-4"], [1, "pi", "pi-trash", "action", "hover", "!text-xl", 3, "click", "keydown.enter"], [1, "pi", "pi-spinner", "pi-spin"], [1, "flex", "flex-column", "gap-2"], [1, "text-xl", "muted"], [1, "flex", "justify-content-between"]], template: function AssetSharingSectionComponent_Template(rf, ctx) {
    if (rf & 1) {
      \u0275\u0275elementStart(0, "div", 0)(1, "div", 1);
      \u0275\u0275element(2, "span", 2);
      \u0275\u0275elementStart(3, "div", 3)(4, "div", 4)(5, "h2", 5);
      \u0275\u0275text(6, "Sharing");
      \u0275\u0275elementEnd();
      \u0275\u0275conditionalCreate(7, AssetSharingSectionComponent_Conditional_7_Template, 2, 0, "div", 6);
      \u0275\u0275elementEnd();
      \u0275\u0275elementStart(8, "span");
      \u0275\u0275text(9, "Add companies you'd like to share this asset with below.");
      \u0275\u0275elementEnd()()();
      \u0275\u0275conditionalCreate(10, AssetSharingSectionComponent_Conditional_10_Template, 12, 2, "div", 7)(11, AssetSharingSectionComponent_Conditional_11_Template, 1, 4, "app-grid", 8);
      \u0275\u0275elementEnd();
      \u0275\u0275elementStart(12, "app-dynamic-form-modal", 9);
      \u0275\u0275listener("modalClose", function AssetSharingSectionComponent_Template_app_dynamic_form_modal_modalClose_12_listener() {
        return ctx.onClose();
      })("formSubmit", function AssetSharingSectionComponent_Template_app_dynamic_form_modal_formSubmit_12_listener($event) {
        return ctx.onSubmit($event);
      });
      \u0275\u0275elementStart(13, "div", 10);
      \u0275\u0275conditionalCreate(14, AssetSharingSectionComponent_Conditional_14_Template, 4, 0, "div", 11)(15, AssetSharingSectionComponent_Conditional_15_Template, 7, 1, "div", 11)(16, AssetSharingSectionComponent_Conditional_16_Template, 2, 0, "p", 12);
      \u0275\u0275elementEnd()();
      \u0275\u0275element(17, "p-confirmdialog");
    }
    if (rf & 2) {
      \u0275\u0275advance(2);
      \u0275\u0275property("ngClass", \u0275\u0275pureFunction1(8, _c05, ctx.isFormEditable()));
      \u0275\u0275advance(5);
      \u0275\u0275conditional(!ctx.isFormEditable() ? 7 : -1);
      \u0275\u0275advance(3);
      \u0275\u0275conditional(ctx.isFormEditable() ? 10 : 11);
      \u0275\u0275advance(2);
      \u0275\u0275property("visible", ctx.showModal())("fields", ctx.formFields)("actions", ctx.actions)("styleClass", "w-[40rem]");
      \u0275\u0275advance(2);
      \u0275\u0275conditional(ctx.isLoading() ? 14 : ctx.selectedClient() ? 15 : 16);
    }
  }, dependencies: [
    CommonModule,
    NgClass,
    ReactiveFormsModule,
    ButtonModule,
    Button,
    InputTextModule,
    DynamicFormModalComponent,
    DataViewModule,
    PanelModule,
    Panel,
    DividerModule,
    GridComponent,
    ToastModule,
    ConfirmDialog
  ], encapsulation: 2 });
};
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(AssetSharingSectionComponent, [{
    type: Component,
    args: [{ selector: "app-asset-sharing-section", imports: [
      CommonModule,
      ReactiveFormsModule,
      ButtonModule,
      InputTextModule,
      DynamicFormModalComponent,
      DataViewModule,
      PanelModule,
      DividerModule,
      GridComponent,
      ToastModule,
      ConfirmDialog
    ], providers: [MessageService, ConfirmationService], template: `<div class="card pt-2">
  <!-- Header Section -->
  <div class="section-header mb-4 p-2 flex justify-start items-center">
    <span
      class="pi pi-share-alt !text-[2.5rem]"
      [ngClass]="{ 'icon-primary': isFormEditable() }"
      aria-label="share icon"
    ></span>

    <div class="pl-6 flex-1">
      <div class="flex justify-between items-center">
        <h2 class="text-xl font-semibold m-0">Sharing</h2>
        @if (!isFormEditable()) {
          <div class="icon-light">
            <span
              class="pi pi-pen-to-square action hover !text-2xl"
              aria-label="Edit asset sharing"
              (click)="onEdit()"
              (keydown.enter)="onEdit()"
            ></span>
          </div>
        }
      </div>
      <span>Add companies you'd like to share this asset with below.</span>
    </div>
  </div>

  <!-- Edit Mode -->
  @if (isFormEditable()) {
    <div class="p-field p-2 flex align-items-center gap-2">
      <label for="logo" class="w-1/3 flex-shrink-0">Shared With</label>
      <div class="flex flex-col justify-end w-full">
        <div class="flex-grow-1 flex flex-col">
          @if (sharedWith.length === 0) {
            <p-panel />
          }

          @for (item of sharedWith; track item) {
            <p-panel>
              <div class="flex flex-row justify-between">
                <div>
                  <span class="px-4"> {{ item.name }}</span>
                </div>

                <div class="icon-light">
                  <span
                    class="pi pi-trash action hover !text-xl"
                    [attr.aria-label]="'Delete Item'"
                    (click)="removeClientFromSharedList(item)"
                    (keydown.enter)="removeClientFromSharedList(item)"
                  ></span>
                </div>
              </div>
            </p-panel>
          }

          <p-button
            (onClick)="openAddEntityModal()"
            severity="secondary"
            label="Add"
            class="self-end p-2"
          />

          <div class="flex justify-end gap-2 mt-4">
            <p-button
              type="button"
              label="Cancel"
              severity="secondary"
              (onClick)="isFormEditable.set(false)"
            />

            <p-button
              type="submit"
              label="Save"
              severity="primary"
              [disabled]="true"
              (onClick)="submitChanges({})"
            />
          </div>
        </div>
      </div>
    </div>
  }
  <!-- View Mode -->
  @else {
    <app-grid
      [data]="assetSharedWith()"
      [columns]="columns"
      [showGridLines]="false"
      [hideHeader]="true"
      tableStyleClass="info-display !w-auto"
    ></app-grid>
  }
</div>

<!-- Add/Edit Shared With Modal -->
<app-dynamic-form-modal
  [visible]="showModal()"
  header="Share Asset"
  [fields]="formFields"
  [actions]="actions"
  [styleClass]="'w-[40rem]'"
  (modalClose)="onClose()"
  (formSubmit)="onSubmit($event)"
>
  <div formHeader>
    @if (isLoading()) {
      <div class="mt-2 mb-4">
        <i class="pi pi-spinner pi-spin"></i>
        <span>Searching for client...</span>
      </div>
    } @else if (selectedClient()) {
      <div class="mt-2 mb-4">
        <div class="flex flex-column gap-2">
          <div class="text-xl muted">Client Found:</div>
          <div class="flex justify-content-between">
            <span>{{ selectedClient()?.name }}</span>
          </div>
        </div>
      </div>
    } @else {
      <p class="mt-2 mb-4 muted">
        Enter the PIN number for the company you would like to share this asset
        with. If you do not know the PIN code, contact the company in question
        and ask for their PIN.
      </p>
    }
  </div>
</app-dynamic-form-modal>

<p-confirmdialog />
` }]
  }], () => [], null);
})();
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && \u0275setClassDebugInfo(AssetSharingSectionComponent, { className: "AssetSharingSectionComponent", filePath: "src/app/features/administration/components/assets/asset-sharing-section/asset-sharing-section.component.ts", lineNumber: 62 });
})();

// src/app/features/administration/components/assets/asset-event-triggers-section/asset-event-triggers-section.component.ts
var _c06 = (a0) => ({ "icon-primary": a0 });
function AssetEventTriggersSectionComponent_Conditional_7_Template(rf, ctx) {
  if (rf & 1) {
    const _r1 = \u0275\u0275getCurrentView();
    \u0275\u0275elementStart(0, "div", 6)(1, "span", 9);
    \u0275\u0275listener("click", function AssetEventTriggersSectionComponent_Conditional_7_Template_span_click_1_listener() {
      \u0275\u0275restoreView(_r1);
      const ctx_r1 = \u0275\u0275nextContext();
      return \u0275\u0275resetView(ctx_r1.onEdit());
    })("keydown.enter", function AssetEventTriggersSectionComponent_Conditional_7_Template_span_keydown_enter_1_listener() {
      \u0275\u0275restoreView(_r1);
      const ctx_r1 = \u0275\u0275nextContext();
      return \u0275\u0275resetView(ctx_r1.onEdit());
    });
    \u0275\u0275elementEnd()();
  }
}
function AssetEventTriggersSectionComponent_Conditional_10_Template(rf, ctx) {
  if (rf & 1) {
    const _r3 = \u0275\u0275getCurrentView();
    \u0275\u0275elementStart(0, "app-dynamic-form", 10);
    \u0275\u0275listener("formSubmit", function AssetEventTriggersSectionComponent_Conditional_10_Template_app_dynamic_form_formSubmit_0_listener($event) {
      \u0275\u0275restoreView(_r3);
      const ctx_r1 = \u0275\u0275nextContext();
      return \u0275\u0275resetView(ctx_r1.onSubmit($event));
    });
    \u0275\u0275elementEnd();
  }
  if (rf & 2) {
    const ctx_r1 = \u0275\u0275nextContext();
    \u0275\u0275property("fields", ctx_r1.formFields)("actions", ctx_r1.actions);
  }
}
function AssetEventTriggersSectionComponent_Conditional_11_Template(rf, ctx) {
  if (rf & 1) {
    \u0275\u0275element(0, "app-grid", 8);
  }
  if (rf & 2) {
    const ctx_r1 = \u0275\u0275nextContext();
    \u0275\u0275property("data", ctx_r1.assetEventTriggers())("columns", ctx_r1.columns)("showGridLines", false)("hideHeader", true);
  }
}
var AssetEventTriggersSectionComponent = class _AssetEventTriggersSectionComponent extends EntitySectionBaseComponent {
  entitiesService = inject(EntitiesService);
  measurementUnitsService = inject(MeasurementUnitsService);
  selectOptionsLoaded = signal(false, ...ngDevMode ? [{ debugName: "selectOptionsLoaded" }] : []);
  selectOptions = {};
  assetEventTriggers = computed(() => {
    const asset = this.entity();
    const assetEventTriggers = asset?.parameters;
    if (isNullOrUndefined(assetEventTriggers))
      return [];
    return [
      {
        key: "Max Speed",
        value: isDefined(assetEventTriggers.overspeed) ? this.measurementUnitsService.format(assetEventTriggers.overspeed, MeasurementUnitType.SPEED).format : "None"
      },
      {
        key: "Overspeed Profile",
        value: isDefined(asset?.overspeedProfile) ? asset?.overspeedProfile?.name : "None"
      },
      {
        key: "Speed Tolerance",
        value: isDefined(assetEventTriggers.overspeedTolerance) ? `${assetEventTriggers.overspeedTolerance}%` : "None"
      },
      {
        key: "Excessive Idle",
        value: isDefined(assetEventTriggers.excessiveIdle) ? `${assetEventTriggers.excessiveIdle} minutes` : "None"
      },
      {
        key: "Max Trip Distance",
        value: isDefined(assetEventTriggers.maxTripDistance) ? `${this.measurementUnitsService.format(assetEventTriggers.maxTripDistance, MeasurementUnitType.DISTANCE).value} ${this.measurementUnitsService.unit(MeasurementUnitType.DISTANCE)}` : "None"
      },
      {
        key: "Max Trip Time",
        value: isDefined(assetEventTriggers.maxTripTime) ? `${assetEventTriggers.maxTripTime} minutes` : "None"
      },
      {
        key: "Max inactive time",
        value: isDefined(assetEventTriggers.maxInactiveTime) ? `${assetEventTriggers.maxInactiveTime} minutes` : "None"
      }
    ];
  }, ...ngDevMode ? [{ debugName: "assetEventTriggers" }] : []);
  constructor() {
    super();
    this.columns = [
      { field: "key", header: "", transform: "uppercase" },
      { field: "value", header: "" }
    ];
    effect(() => {
      const assetEventTriggers = this.entity();
      if (assetEventTriggers && this.selectOptionsLoaded()) {
        this.updateFormFields();
      }
    });
  }
  ngOnInit() {
    this.loadSelectOptions();
  }
  loadSelectOptions() {
    const asset = this.entity();
    if (!isDefined(asset) || !isString(asset.id)) {
      this.selectOptions = {};
      this.selectOptionsLoaded.set(true);
      this.updateFormFields();
      return;
    }
    this.entitiesService.listOverspeedProfiles(asset.owner.id).pipe(takeUntilDestroyed(this.destroyRef)).subscribe((response) => {
      this.selectOptions = {
        overspeedProfiles: response.items.map((item) => ({
          label: item.name ?? "",
          value: item.id
        })).sort((a, b) => a.label.localeCompare(b.label))
      };
      this.selectOptionsLoaded.set(true);
    });
  }
  updateFormFields() {
    const asset = this.entity();
    this.formFields = [
      createNumberField("overspeed", "Max Speed", asset?.parameters?.overspeed !== void 0 && asset?.parameters?.overspeed !== null ? this.measurementUnitsService.fromBackend(MeasurementUnitType.SPEED, asset.parameters.overspeed) : void 0, {
        layout: "horizontal",
        labelWidth: "1/3",
        name: "overspeed",
        props: {
          suffix: this.measurementUnitsService.unitSymbol(MeasurementUnitType.SPEED)
        }
      }),
      createDropdownField("overspeedProfile", "Overspeed Profile", this.selectOptions["overspeedProfiles"], asset?.overspeedProfile?.id ?? void 0, {
        layout: "horizontal",
        labelWidth: "1/3",
        name: "overspeedProfile",
        props: {
          placeholder: "Select Overspeed Profile",
          filter: true,
          showClear: true,
          clearButtonAriaLabel: "Clear selection"
        }
      }),
      createNumberField("overspeedTolerance", "Speed Tolerance", asset?.parameters?.overspeedTolerance ?? void 0, {
        layout: "horizontal",
        labelWidth: "1/3",
        name: "overspeedTolerance",
        props: {
          suffix: "%"
        }
      }),
      createNumberField("excessiveIdle", "Excessive Idle", asset?.parameters?.excessiveIdle ?? void 0, {
        layout: "horizontal",
        labelWidth: "1/3",
        name: "excessiveIdle",
        props: {
          suffix: "minutes"
        }
      }),
      createNumberField("maxTripDistance", "Max Trip Distance", asset?.parameters?.maxTripDistance !== void 0 && asset?.parameters?.maxTripDistance !== null ? this.measurementUnitsService.fromBackend(MeasurementUnitType.DISTANCE, asset.parameters.maxTripDistance) : void 0, {
        layout: "horizontal",
        labelWidth: "1/3",
        name: "maxTripDistance",
        props: {
          suffix: this.measurementUnitsService.unit(MeasurementUnitType.DISTANCE)
        }
      }),
      createNumberField("maxTripTime", "Max Trip Time", asset?.parameters?.maxTripTime ?? void 0, {
        layout: "horizontal",
        labelWidth: "1/3",
        name: "maxTripTime",
        props: {
          suffix: "minutes"
        }
      }),
      createNumberField("maxInactiveTime", "Max inactive time", asset?.parameters?.maxInactiveTime ?? void 0, {
        layout: "horizontal",
        labelWidth: "1/3",
        name: "maxInactiveTime",
        props: {
          suffix: "minutes"
        }
      })
    ];
  }
  submitChanges(formData) {
    const asset = this.entity();
    if (isNullOrUndefined(asset))
      return;
    const _a = formData, { overspeedProfile } = _a, rawParameters = __objRest(_a, ["overspeedProfile"]);
    const parameters = {};
    for (const [key, value] of Object.entries(rawParameters)) {
      if (value !== void 0 && value !== null && value !== "") {
        switch (key) {
          case "overspeed":
            parameters[key] = this.measurementUnitsService.toBackend(MeasurementUnitType.SPEED, value);
            break;
          case "maxTripDistance":
            parameters[key] = this.measurementUnitsService.toBackend(MeasurementUnitType.DISTANCE, value);
            break;
          default:
            parameters[key] = value;
            break;
        }
      }
    }
    const updatePayload = { parameters };
    if (overspeedProfile !== void 0) {
      const selectedProfile = this.selectOptions["overspeedProfiles"]?.find((option) => option.value === overspeedProfile);
      updatePayload.overspeedProfile = selectedProfile ? {
        id: selectedProfile.value,
        name: selectedProfile.label
      } : void 0;
    }
    this.handleEntityUpdate(this.entitiesService.updateAsset(asset.id, updatePayload).pipe(takeUntilDestroyed(this.destroyRef)), "Asset Event triggers updated successfully");
  }
  static \u0275fac = function AssetEventTriggersSectionComponent_Factory(__ngFactoryType__) {
    return new (__ngFactoryType__ || _AssetEventTriggersSectionComponent)();
  };
  static \u0275cmp = /* @__PURE__ */ \u0275\u0275defineComponent({ type: _AssetEventTriggersSectionComponent, selectors: [["app-asset-event-triggers-section"]], features: [\u0275\u0275InheritDefinitionFeature], decls: 12, vars: 6, consts: [[1, "card", "pt-2"], [1, "mb-4", "p-2", "flex", "justify-start", "items-center"], [1, "pi", "pi-gauge", "!text-[2.5rem]", 3, "ngClass"], [1, "pl-6", "flex-1"], [1, "flex", "justify-between", "items-center"], [1, "text-xl", "font-semibold", "m-0"], [1, "icon-light"], [3, "fields", "actions"], ["tableStyleClass", "info-display !w-auto", 3, "data", "columns", "showGridLines", "hideHeader"], ["aria-label", "Edit event triggers", 1, "pi", "pi-pen-to-square", "action", "hover", "!text-2xl", 3, "click", "keydown.enter"], [3, "formSubmit", "fields", "actions"]], template: function AssetEventTriggersSectionComponent_Template(rf, ctx) {
    if (rf & 1) {
      \u0275\u0275elementStart(0, "div", 0)(1, "div", 1);
      \u0275\u0275element(2, "span", 2);
      \u0275\u0275elementStart(3, "div", 3)(4, "div", 4)(5, "h2", 5);
      \u0275\u0275text(6, "Event Triggers");
      \u0275\u0275elementEnd();
      \u0275\u0275conditionalCreate(7, AssetEventTriggersSectionComponent_Conditional_7_Template, 2, 0, "div", 6);
      \u0275\u0275elementEnd();
      \u0275\u0275elementStart(8, "span");
      \u0275\u0275text(9, "Define when speed, idle and trip limit events will be generated for this asset.");
      \u0275\u0275elementEnd()()();
      \u0275\u0275conditionalCreate(10, AssetEventTriggersSectionComponent_Conditional_10_Template, 1, 2, "app-dynamic-form", 7)(11, AssetEventTriggersSectionComponent_Conditional_11_Template, 1, 4, "app-grid", 8);
      \u0275\u0275elementEnd();
    }
    if (rf & 2) {
      \u0275\u0275advance(2);
      \u0275\u0275property("ngClass", \u0275\u0275pureFunction1(4, _c06, ctx.isFormEditable()));
      \u0275\u0275attribute("aria-label", "id card icon");
      \u0275\u0275advance(5);
      \u0275\u0275conditional(!ctx.isFormEditable() ? 7 : -1);
      \u0275\u0275advance(3);
      \u0275\u0275conditional(ctx.isFormEditable() ? 10 : 11);
    }
  }, dependencies: [
    CommonModule,
    NgClass,
    ReactiveFormsModule,
    ButtonModule,
    InputTextModule,
    ChipModule,
    GridComponent,
    DynamicFormComponent
  ], encapsulation: 2 });
};
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(AssetEventTriggersSectionComponent, [{
    type: Component,
    args: [{ selector: "app-asset-event-triggers-section", imports: [
      CommonModule,
      ReactiveFormsModule,
      ButtonModule,
      InputTextModule,
      ChipModule,
      GridComponent,
      DynamicFormComponent
    ], template: `<div class="card pt-2">
  <div class="mb-4 p-2 flex justify-start items-center">
    <span
      class="pi pi-gauge !text-[2.5rem]"
      [ngClass]="{ 'icon-primary': isFormEditable() }"
      [attr.aria-label]="'id card icon'"
    ></span>

    <div class="pl-6 flex-1">
      <div class="flex justify-between items-center">
        <h2 class="text-xl font-semibold m-0">Event Triggers</h2>
        @if (!isFormEditable()) {
          <div class="icon-light">
            <span
              class="pi pi-pen-to-square action hover !text-2xl"
              aria-label="Edit event triggers"
              (click)="onEdit()"
              (keydown.enter)="onEdit()"
            ></span>
          </div>
        }
      </div>
      <span
        >Define when speed, idle and trip limit events will be generated for
        this asset.</span
      >
    </div>
  </div>
  @if (isFormEditable()) {
    <app-dynamic-form
      [fields]="formFields"
      [actions]="actions"
      (formSubmit)="onSubmit($event)"
    >
    </app-dynamic-form>
  } @else {
    <app-grid
      [data]="assetEventTriggers()"
      [columns]="columns"
      [showGridLines]="false"
      [hideHeader]="true"
      tableStyleClass="info-display !w-auto"
    ></app-grid>
  }
</div>
` }]
  }], () => [], null);
})();
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && \u0275setClassDebugInfo(AssetEventTriggersSectionComponent, { className: "AssetEventTriggersSectionComponent", filePath: "src/app/features/administration/components/assets/asset-event-triggers-section/asset-event-triggers-section.component.ts", lineNumber: 46 });
})();

// src/app/features/administration/components/assets/asset-reminders-section/asset-reminders-section.component.ts
var _c07 = ["addReminderMenu"];
var _c12 = ["addReminderBtn"];
var _c2 = (a0) => ({ "icon-primary": a0 });
function AssetRemindersSectionComponent_Conditional_7_Template(rf, ctx) {
  if (rf & 1) {
    const _r1 = \u0275\u0275getCurrentView();
    \u0275\u0275elementStart(0, "div", 8)(1, "span", 12);
    \u0275\u0275listener("click", function AssetRemindersSectionComponent_Conditional_7_Template_span_click_1_listener() {
      \u0275\u0275restoreView(_r1);
      const ctx_r1 = \u0275\u0275nextContext();
      return \u0275\u0275resetView(ctx_r1.onEdit());
    })("keydown.enter", function AssetRemindersSectionComponent_Conditional_7_Template_span_keydown_enter_1_listener() {
      \u0275\u0275restoreView(_r1);
      const ctx_r1 = \u0275\u0275nextContext();
      return \u0275\u0275resetView(ctx_r1.onEdit());
    });
    \u0275\u0275elementEnd()();
  }
  if (rf & 2) {
    \u0275\u0275advance();
    \u0275\u0275attribute("aria-label", "Edit reminders");
  }
}
function AssetRemindersSectionComponent_Conditional_10_Conditional_5_Template(rf, ctx) {
  if (rf & 1) {
    \u0275\u0275element(0, "p-card");
  }
}
function AssetRemindersSectionComponent_Conditional_10_For_7_Template(rf, ctx) {
  if (rf & 1) {
    const _r4 = \u0275\u0275getCurrentView();
    \u0275\u0275elementStart(0, "p-card", 16)(1, "div", 23)(2, "div")(3, "span", 24);
    \u0275\u0275text(4);
    \u0275\u0275elementEnd()();
    \u0275\u0275elementStart(5, "div", 8)(6, "span", 25);
    \u0275\u0275listener("click", function AssetRemindersSectionComponent_Conditional_10_For_7_Template_span_click_6_listener() {
      const item_r5 = \u0275\u0275restoreView(_r4).$implicit;
      const ctx_r1 = \u0275\u0275nextContext(2);
      return \u0275\u0275resetView(ctx_r1.deleteReminder(item_r5));
    })("keydown.enter", function AssetRemindersSectionComponent_Conditional_10_For_7_Template_span_keydown_enter_6_listener() {
      const item_r5 = \u0275\u0275restoreView(_r4).$implicit;
      const ctx_r1 = \u0275\u0275nextContext(2);
      return \u0275\u0275resetView(ctx_r1.deleteReminder(item_r5));
    });
    \u0275\u0275elementEnd()()()();
  }
  if (rf & 2) {
    const item_r5 = ctx.$implicit;
    \u0275\u0275advance(4);
    \u0275\u0275textInterpolate1(" ", item_r5 == null ? null : item_r5["name"]);
  }
}
function AssetRemindersSectionComponent_Conditional_10_Template(rf, ctx) {
  if (rf & 1) {
    const _r3 = \u0275\u0275getCurrentView();
    \u0275\u0275elementStart(0, "div", 9)(1, "label", 13);
    \u0275\u0275text(2, "Reminders");
    \u0275\u0275elementEnd();
    \u0275\u0275elementStart(3, "div", 14)(4, "div", 15);
    \u0275\u0275conditionalCreate(5, AssetRemindersSectionComponent_Conditional_10_Conditional_5_Template, 1, 0, "p-card");
    \u0275\u0275repeaterCreate(6, AssetRemindersSectionComponent_Conditional_10_For_7_Template, 7, 1, "p-card", 16, \u0275\u0275repeaterTrackByIdentity);
    \u0275\u0275elementStart(8, "div", 17)(9, "p-button", 18, 0);
    \u0275\u0275listener("onClick", function AssetRemindersSectionComponent_Conditional_10_Template_p_button_onClick_9_listener($event) {
      \u0275\u0275restoreView(_r3);
      const addReminderMenu_r6 = \u0275\u0275reference(12);
      return \u0275\u0275resetView(addReminderMenu_r6.toggle($event));
    });
    \u0275\u0275elementEnd();
    \u0275\u0275elementStart(11, "p-menu", 19, 1);
    \u0275\u0275listener("onShow", function AssetRemindersSectionComponent_Conditional_10_Template_p_menu_onShow_11_listener() {
      \u0275\u0275restoreView(_r3);
      const ctx_r1 = \u0275\u0275nextContext();
      return \u0275\u0275resetView(ctx_r1.onAddReminderMenuShow());
    });
    \u0275\u0275elementEnd()();
    \u0275\u0275elementStart(13, "div", 20)(14, "p-button", 21);
    \u0275\u0275listener("onClick", function AssetRemindersSectionComponent_Conditional_10_Template_p_button_onClick_14_listener() {
      \u0275\u0275restoreView(_r3);
      const ctx_r1 = \u0275\u0275nextContext();
      return \u0275\u0275resetView(ctx_r1.onCancel());
    });
    \u0275\u0275elementEnd();
    \u0275\u0275elementStart(15, "p-button", 22);
    \u0275\u0275listener("onClick", function AssetRemindersSectionComponent_Conditional_10_Template_p_button_onClick_15_listener() {
      \u0275\u0275restoreView(_r3);
      const ctx_r1 = \u0275\u0275nextContext();
      return \u0275\u0275resetView(ctx_r1.saveAllChanges());
    });
    \u0275\u0275elementEnd()()()()();
  }
  if (rf & 2) {
    const ctx_r1 = \u0275\u0275nextContext();
    \u0275\u0275advance(5);
    \u0275\u0275conditional(ctx_r1.sortedReminders().length === 0 ? 5 : -1);
    \u0275\u0275advance();
    \u0275\u0275repeater(ctx_r1.sortedReminders());
    \u0275\u0275advance(5);
    \u0275\u0275property("popup", true)("model", ctx_r1.reminderOptions);
    \u0275\u0275advance(4);
    \u0275\u0275property("loading", ctx_r1.isLoadingAsset())("disabled", !ctx_r1.hasChanges());
  }
}
function AssetRemindersSectionComponent_Conditional_11_Template(rf, ctx) {
  if (rf & 1) {
    \u0275\u0275element(0, "app-grid", 10);
  }
  if (rf & 2) {
    const ctx_r1 = \u0275\u0275nextContext();
    \u0275\u0275property("data", ctx_r1.reminders())("columns", ctx_r1.columns)("showGridLines", false)("hideHeader", true);
  }
}
function AssetRemindersSectionComponent_Conditional_12_Template(rf, ctx) {
  if (rf & 1) {
    const _r7 = \u0275\u0275getCurrentView();
    \u0275\u0275elementStart(0, "app-dynamic-form-modal", 26);
    \u0275\u0275listener("modalClose", function AssetRemindersSectionComponent_Conditional_12_Template_app_dynamic_form_modal_modalClose_0_listener() {
      \u0275\u0275restoreView(_r7);
      const ctx_r1 = \u0275\u0275nextContext();
      return \u0275\u0275resetView(ctx_r1.showReminderModal.set(false));
    })("formSubmit", function AssetRemindersSectionComponent_Conditional_12_Template_app_dynamic_form_modal_formSubmit_0_listener($event) {
      \u0275\u0275restoreView(_r7);
      const ctx_r1 = \u0275\u0275nextContext();
      return \u0275\u0275resetView(ctx_r1.onReminderSubmit($event));
    });
    \u0275\u0275elementStart(1, "div", 27)(2, "p", 28);
    \u0275\u0275text(3);
    \u0275\u0275elementEnd()()();
  }
  if (rf & 2) {
    const ctx_r1 = \u0275\u0275nextContext();
    \u0275\u0275property("visible", ctx_r1.showReminderModal())("header", ctx_r1.currentModalTitle())("fields", ctx_r1.formFields)("actions", ctx_r1.actions)("styleClass", "w-[40rem]");
    \u0275\u0275advance(3);
    \u0275\u0275textInterpolate1(" ", ctx_r1.formHeader, " ");
  }
}
var AssetRemindersSectionComponent = class _AssetRemindersSectionComponent extends EntitySectionBaseComponent {
  addReminderMenu;
  addReminderBtn;
  entitiesService = inject(EntitiesService);
  http = inject(HttpClient);
  authDataService = inject(AuthDataService);
  // Signals - properly declare isLoadingAsset
  isLoadingAsset = signal(false, ...ngDevMode ? [{ debugName: "isLoadingAsset" }] : []);
  remindersData = signal([], ...ngDevMode ? [{ debugName: "remindersData" }] : []);
  // Modal controls
  showReminderModal = signal(false, ...ngDevMode ? [{ debugName: "showReminderModal" }] : []);
  currentModalTitle = signal("Add Reminder", ...ngDevMode ? [{ debugName: "currentModalTitle" }] : []);
  currentReminderType = signal(null, ...ngDevMode ? [{ debugName: "currentReminderType" }] : []);
  newReminders = signal([], ...ngDevMode ? [{ debugName: "newReminders" }] : []);
  deletedReminderIds = signal([], ...ngDevMode ? [{ debugName: "deletedReminderIds" }] : []);
  // Track the currently loaded asset ID to prevent duplicate loads
  loadedAssetId = null;
  // Split button menu items
  reminderOptions = [
    {
      label: "Odometer Reminder",
      command: () => this.openReminderModal(ReminderType.ODOMETER)
    },
    {
      label: "Engine Hours Reminder",
      command: () => this.openReminderModal(ReminderType.ENGINE_HOURS)
    },
    {
      label: "Time Based Reminder",
      command: () => this.openReminderModal(ReminderType.TIME_BASED)
    }
  ];
  // Computed properties
  reminders = computed(() => {
    const remindersList = this.remindersData();
    return [
      {
        key: "Reminders",
        value: isEmpty(remindersList) ? "None" : remindersList.map((reminder) => reminder.name).join(", ")
      }
    ];
  }, ...ngDevMode ? [{ debugName: "reminders" }] : []);
  // Sorted reminders for the list view
  sortedReminders = computed(() => {
    const combined = [
      ...this.remindersData().filter((r) => !this.deletedReminderIds().includes(r.id ?? "")),
      ...this.newReminders().filter((r) => !this.deletedReminderIds().includes(r["id"] ?? ""))
    ];
    return combined.sort((a, b) => {
      const dateA = a["modifiedDate"] ?? (isDefined(a["id"]?.startsWith("temp-") ?? false) ? Date.now() : 0);
      const dateB = b["modifiedDate"] ?? (isDefined(b["id"]?.startsWith("temp-") ?? false) ? Date.now() : 0);
      const timeA = typeof dateA === "string" ? new Date(dateA).getTime() : Number(dateA);
      const timeB = typeof dateB === "string" ? new Date(dateB).getTime() : Number(dateB);
      return timeB - timeA;
    });
  }, ...ngDevMode ? [{ debugName: "sortedReminders" }] : []);
  // Check if there are changes to save
  hasChanges = computed(() => {
    return this.newReminders().length > 0 || this.deletedReminderIds().length > 0;
  }, ...ngDevMode ? [{ debugName: "hasChanges" }] : []);
  actions = [
    {
      label: "Cancel",
      action: () => {
        this.showReminderModal.set(false);
        this.resetModal();
      },
      severity: "secondary"
    },
    {
      label: "Ok",
      action: (formData) => {
        this.onReminderSubmit(formData.value);
      },
      severity: "primary",
      disabled: (form) => {
        return (form?.invalid ?? false) || (form?.dirty ?? false) && !(form?.touched ?? false) || this.isLoadingAsset();
      }
    }
  ];
  timezones = [];
  formHeader = "";
  constructor() {
    super();
    this.columns = [
      { field: "key", header: "", transform: "uppercase" },
      { field: "value", header: "" }
    ];
    effect(() => {
      const asset = this.entity();
      if (isDefined(asset?.id) && isDefined(asset?.owner?.id)) {
        if (asset.id !== this.loadedAssetId) {
          this.loadReminders(asset);
        }
      } else {
        this.remindersData.set([]);
        this.loadedAssetId = null;
        this.resetChanges();
      }
    });
  }
  ngOnInit() {
    this.loadTimezones();
  }
  onAddReminderMenuShow() {
    queueMicrotask(() => {
      const overlay = this.addReminderMenu?.container;
      const btnEl = this.addReminderBtn?.nativeElement;
      if (isNullOrUndefined(overlay) || isNullOrUndefined(btnEl))
        return;
      const btnRect = btnEl.getBoundingClientRect();
      const overlayRect = overlay.getBoundingClientRect();
      const rightPadding = 0;
      const left = btnRect.right - overlayRect.width - rightPadding;
      overlay.style.left = `${left}px`;
      overlay.style.top = `${btnRect.bottom}px`;
      overlay.style.transformOrigin = "top right";
    });
  }
  loadReminders(asset) {
    if (this.isLoadingAsset())
      return;
    this.loadedAssetId = asset.id;
    this.isLoadingAsset.set(true);
    this.entitiesService.listReminders(asset.owner.id, asset.id).pipe(takeUntilDestroyed(this.destroyRef), catchError(() => {
      this.isLoadingAsset.set(false);
      return of({ items: [], count: 0 });
    })).subscribe({
      next: (response) => {
        const reminders = response.items ?? [];
        this.remindersData.set(reminders);
        this.isLoadingAsset.set(false);
        this.resetChanges();
      }
    });
  }
  /**
   * Load timezones from JSON file
   */
  loadTimezones() {
    this.http.get("/assets/docs/timezones.json").subscribe((data) => {
      this.timezones = data.map((tz) => ({ label: tz.id, value: tz.id })).sort((a, b) => a.label.localeCompare(b.label));
    });
  }
  /**
   * Create reset counter options based on type
   * @param type - The reminder type
   * @returns Array of options for the dropdown
   */
  createResetCounterOptions(type) {
    return Array.from({ length: 8 }, (_, i) => ({
      label: `${type}_cnt_${i + 1}`,
      value: i + 1
    }));
  }
  /**
   * Create reset configuration based on type
   * @param resetType - The type of reset (daily, weekly, monthly)
   * @param resetCounterOptions - Options for the reset counter
   * @returns FormFieldConfig for the reset configuration
   */
  createResetConfig(resetType, resetCounterOptions) {
    const config = [
      {
        name: "reset",
        key: "reset",
        type: "group",
        fields: [
          // This will be populated based on reset type
        ]
      },
      createDropdownField("timeZoneId", "Timezone", this.timezones, this.authDataService.getUserProfile()?.timeZoneId, {
        layout: "horizontal",
        labelWidth: "1/3",
        placeholder: "Select timezone",
        name: "timeZoneId",
        props: {
          appendTo: "body"
        }
      })
    ];
    const resetGroup = config[0];
    switch (resetType) {
      case "daily":
        resetGroup.fields = [
          {
            name: "daily",
            key: "daily",
            type: "group",
            fields: [
              createNumberField("recurrence", "Every", 1, {
                name: "recurrence",
                validations: [
                  {
                    name: "required",
                    validator: Validators.required,
                    message: "Recurrence is required"
                  }
                ],
                props: { suffix: "Days" }
              })
            ]
          },
          createDropdownField("counter", "Reset Counter", resetCounterOptions, resetCounterOptions[0].value, {
            name: "counter",
            validations: [
              {
                name: "required",
                validator: Validators.required,
                message: "Counter is required"
              }
            ],
            props: { appendTo: "body" }
          }),
          {
            name: "trigger",
            key: "trigger",
            type: "group",
            fields: [
              createDateField("start", "Starting at", /* @__PURE__ */ new Date(), {
                name: "start",
                validations: [
                  {
                    name: "required",
                    validator: Validators.required,
                    message: "Starting date is required"
                  }
                ],
                props: {
                  appendTo: "body",
                  showTime: true,
                  showSeconds: true,
                  dateFormat: "yy/mm/dd"
                }
              })
            ]
          }
        ];
        break;
      case "weekly":
        resetGroup.fields = [
          {
            name: "weekly",
            key: "weekly",
            type: "group",
            fields: [
              createListboxField("days", "Weekdays", [], WEEKDAY_OPTIONS, {
                name: "days",
                validations: [
                  {
                    name: "required",
                    validator: Validators.required,
                    message: "Weekdays is required"
                  }
                ],
                props: {
                  checkmark: true,
                  multiple: true
                }
              })
            ]
          },
          createDropdownField("counter", "Reset Counter Value", resetCounterOptions, resetCounterOptions[0].value, {
            name: "counter",
            props: { appendTo: "body" },
            validations: [
              {
                name: "required",
                validator: Validators.required,
                message: "Counter is required"
              }
            ]
          })
        ];
        break;
      case "monthly":
        resetGroup.fields = [
          {
            name: "monthly",
            key: "monthly",
            type: "group",
            fields: [
              createListboxField("months", "Months", [], MONTH_OPTIONS, {
                name: "months",
                validations: [
                  {
                    name: "required",
                    validator: Validators.required,
                    message: "Months is required"
                  }
                ],
                props: {
                  checkmark: true,
                  multiple: true
                }
              }),
              createDropdownField("day", "Day ", DAY_OF_MONTH_OPTIONS, DAY_OF_MONTH_OPTIONS[0].value, {
                name: "day",
                validations: [
                  {
                    name: "required",
                    validator: Validators.required,
                    message: "Day of month is required"
                  }
                ],
                props: { appendTo: "body" }
              })
            ]
          },
          createDropdownField("counter", "Reset Counter", resetCounterOptions, resetCounterOptions[0].value, {
            name: "counter",
            props: { appendTo: "body" },
            validations: [
              {
                name: "required",
                validator: Validators.required,
                message: "Counter is required"
              }
            ]
          })
        ];
        break;
    }
    return config;
  }
  /**
   * Create a dropdown field for reset type
   * @param type - The reminder type
   * @returns FormFieldConfig for the dropdown
   */
  createResetTypeDropdown(type) {
    const resetCounterOptions = this.createResetCounterOptions(type);
    return createDropdownField("resetType", "Reset", [
      { label: "After each reminder", value: "none" },
      { label: "Daily", value: "daily" },
      { label: "Weekly", value: "weekly" },
      { label: "Monthly", value: "monthly" }
    ], "none", {
      name: "resetType",
      conditional: true,
      conditions: {
        none: [
          {
            name: "trigger",
            key: "trigger",
            type: "group",
            fields: [
              createTextField("start", "Starting at", "", {
                name: "start",
                validations: [
                  {
                    name: "required",
                    validator: Validators.required,
                    message: "Starting date is required"
                  }
                ],
                hint: type === ReminderType.ENGINE_HOURS ? "Set the hours to start reminders from" : "Set the odometer value to start reminders from"
              })
            ]
          }
        ],
        daily: this.createResetConfig("daily", resetCounterOptions),
        weekly: this.createResetConfig("weekly", resetCounterOptions),
        monthly: this.createResetConfig("monthly", resetCounterOptions)
      },
      props: {
        appendTo: "body"
      }
    });
  }
  /**
   * Create a base reminder form with common fields
   * @param name - The name of the reminder
   * @param modeOptions - Dropdown options for mode selection
   * @param onceFieldCreator - Function to create the once field
   * @param repeatingFieldsCreator - Function to create the repeating fields
   * @returns Array of FormFieldConfig for the form
   */
  createBaseReminderForm(name, modeOptions, onceFieldCreator, repeatingFieldsCreator) {
    return [
      createTextField("name", "Name", name, {
        name: "name",
        validations: [
          {
            name: "required",
            validator: Validators.required,
            message: "Name is required"
          }
        ]
      }),
      createDropdownField("mode", "Mode", modeOptions, "once", {
        name: "mode",
        conditional: true,
        conditions: {
          once: [onceFieldCreator()],
          repeating: repeatingFieldsCreator()
        },
        props: {
          appendTo: "body"
        }
      })
    ];
  }
  /**
   * Open modal for adding a new reminder of specified type
   */
  openReminderModal(type) {
    this.currentReminderType.set(type);
    this.currentModalTitle.set(`Add ${this.getReminderTypeDisplay(type)} Reminder`);
    this.updateFormFields();
    switch (type) {
      case ReminderType.ODOMETER:
        this.formHeader = "Odometer reminders will create an event (and optional alert) when the specified odometer value is reached.";
        break;
      case ReminderType.ENGINE_HOURS:
        this.formHeader = "Engine hours reminders will create an event (and optional alert) when the specified engine hours value is reached.";
        break;
      case ReminderType.TIME_BASED:
        this.formHeader = "Time based reminders will create an event (and optional alert) when the specified date and time is reached.";
    }
    this.showReminderModal.set(true);
  }
  /**
   * Reset the modal state
   */
  resetModal() {
    this.currentReminderType.set(null);
    this.formFields = [];
  }
  /**
   * Update form fields based on reminder type
   */
  updateFormFields() {
    const type = this.currentReminderType();
    if (type === ReminderType.TIME_BASED) {
      this.formFields = this.createBaseReminderForm(
        "Time Based Reminder",
        [
          { label: "At specific date/time", value: "once" },
          { label: "Every X days", value: "repeating" }
        ],
        // Once field creator
        () => {
          return {
            name: "trigger",
            key: "trigger",
            type: "group",
            fields: [
              createDateField("value", "Date", "", {
                name: "value",
                validations: [
                  {
                    name: "required",
                    validator: Validators.required,
                    message: "Starting date is required"
                  }
                ],
                props: {
                  appendTo: "body",
                  showTime: true,
                  showSeconds: true,
                  dateFormat: "yy/mm/dd"
                }
              })
            ]
          };
        },
        // Repeating fields creator
        () => [
          {
            name: "trigger",
            key: "trigger",
            type: "group",
            fields: [
              createNumberField("value", "Days", 1, {
                name: "value",
                validations: [
                  {
                    name: "required",
                    validator: Validators.required,
                    message: "Days is required"
                  }
                ]
              }),
              createDateField("start", "Starting at", /* @__PURE__ */ new Date(), {
                name: "start",
                validations: [
                  {
                    name: "required",
                    validator: Validators.required,
                    message: "Starting date is required"
                  }
                ],
                props: {
                  appendTo: "body",
                  showTime: true,
                  showSeconds: true,
                  dateFormat: "yy/mm/dd"
                }
              })
            ]
          }
        ]
      );
    } else if (type === ReminderType.ODOMETER) {
      this.formFields = this.createBaseReminderForm(
        "Odometer Reminder",
        [
          { label: "At specific odometer", value: "once" },
          { label: "Every X kilometers", value: "repeating" }
        ],
        // Once field creator
        () => {
          return {
            name: "trigger",
            key: "trigger",
            type: "group",
            fields: [
              createNumberField("value", "Odometer", void 0, {
                name: "value",
                validations: [
                  {
                    name: "required",
                    validator: Validators.required,
                    message: "Odometer is required"
                  }
                ]
              })
            ]
          };
        },
        // Repeating fields creator
        () => [
          createNumberField("kilometres", "Kilometres", void 0, {
            name: "kilometres",
            validations: [
              {
                name: "required",
                validator: Validators.required,
                message: "Kilometres is required"
              }
            ]
          }),
          this.createResetTypeDropdown(type)
        ]
      );
    } else if (type === ReminderType.ENGINE_HOURS) {
      this.formFields = this.createBaseReminderForm(
        "Engine Hours Reminder",
        [
          { label: "At specific hours", value: "once" },
          { label: "Every X hours", value: "repeating" }
        ],
        // Once field creator
        () => {
          return {
            name: "trigger",
            key: "trigger",
            type: "group",
            fields: [
              createNumberField("value", "Engine Hours", void 0, {
                name: "value",
                validations: [
                  {
                    name: "required",
                    validator: Validators.required,
                    message: "Engine hours is required"
                  }
                ]
              })
            ]
          };
        },
        // Repeating fields creator
        () => [
          {
            name: "trigger",
            key: "trigger",
            type: "group",
            fields: [
              createNumberField("value", "Hours", void 0, {
                name: "value",
                validations: [
                  {
                    name: "required",
                    validator: Validators.required,
                    message: "Hours is required"
                  }
                ]
              })
            ]
          },
          this.createResetTypeDropdown(type)
        ]
      );
    }
  }
  /**
   * Get display name for reminder type
   */
  getReminderTypeDisplay(type) {
    switch (type) {
      case ReminderType.ODOMETER:
        return "Odometer";
      case ReminderType.ENGINE_HOURS:
        return "Engine Hours";
      case ReminderType.TIME_BASED:
        return "Time Based";
      default:
        return "Unknown Type";
    }
  }
  /**
   * Handle reminder submission from modal
   */
  onReminderSubmit(reminder) {
    const entity = this.entity();
    if (isNullOrUndefined(entity?.id))
      return;
    const newReminder = {
      name: reminder.name,
      target: {
        type: "asset",
        id: entity.id,
        name: entity.name
      },
      type: this.currentReminderType(),
      mode: reminder.mode,
      timeZoneId: reminder.timeZoneId ?? this.authDataService.getUserProfile()?.timeZoneId,
      trigger: reminder.trigger ? __spreadProps(__spreadValues({}, reminder.trigger), { value: `${reminder.trigger.value}` }) : void 0,
      reset: reminder.reset ?? {
        type: "none",
        counter: 1,
        daily: { recurrence: 1 },
        weekly: {
          days: [...Array(7).keys()].map((x) => x)
        },
        monthly: {
          months: [...Array(12).keys()].map((x) => ++x),
          // index starts at 1
          day: 1
        }
      },
      ownerId: entity?.owner.id,
      enabled: reminder.mode !== "once"
    };
    this.newReminders.set([...this.newReminders(), newReminder]);
    this.showReminderModal.set(false);
    this.resetModal();
  }
  /**
   * Delete a reminder
   */
  deleteReminder(reminder) {
    if (isNullOrUndefined(reminder.id)) {
      this.newReminders.set(this.newReminders().filter((r) => r !== reminder));
    } else if (isDefined(reminder.id)) {
      this.deletedReminderIds.set([...this.deletedReminderIds(), reminder.id]);
    }
    this.messageService.add({
      severity: "info",
      summary: "Reminder Deleted",
      detail: `Reminder "${reminder.name}" has been marked for deletion.`
    });
  }
  /**
   * Reset all tracked changes
   */
  resetChanges() {
    this.newReminders.set([]);
    this.deletedReminderIds.set([]);
  }
  /**
   * Save all changes (create and delete)
   */
  saveAllChanges() {
    const asset = this.entity();
    if (isNullOrUndefined(asset?.id))
      return;
    this.isLoadingAsset.set(true);
    const createObservables = this.newReminders().map((reminder) => {
      const reminderData = __spreadProps(__spreadValues({}, reminder), {
        ownerId: asset.owner.id
      });
      return this.entitiesService.createReminder(reminderData);
    });
    const deleteObservables = this.deletedReminderIds().map((id) => {
      return this.entitiesService.deleteReminder(id);
    });
    forkJoin({
      creates: !isEmpty(createObservables) ? forkJoin(createObservables) : of(null),
      deletes: !isEmpty(deleteObservables) ? forkJoin(deleteObservables) : of(null)
    }).pipe(takeUntilDestroyed(this.destroyRef), finalize(() => this.isLoadingAsset.set(false)), catchError(() => {
      this.messageService.add({
        severity: "error",
        summary: "Error",
        detail: "Failed to save reminders"
      });
      return of(null);
    })).subscribe({
      next: () => {
        this.messageService.add({
          severity: "success",
          summary: "Success",
          detail: "Reminders updated successfully"
        });
        this.loadedAssetId = null;
        this.loadReminders(asset);
        this.isFormEditable.set(false);
        this.isSubmitting.set(false);
        this.broadcastService.broadcast("entity-updated", {
          entityType: "asset",
          entityId: asset.id
        });
      },
      error: () => {
        this.isFormEditable.set(true);
        this.isSubmitting.set(false);
      }
    });
  }
  submitChanges(_formData) {
    this.saveAllChanges();
  }
  onCancel() {
    this.isFormEditable.set(false);
    this.resetChanges();
  }
  static \u0275fac = function AssetRemindersSectionComponent_Factory(__ngFactoryType__) {
    return new (__ngFactoryType__ || _AssetRemindersSectionComponent)();
  };
  static \u0275cmp = /* @__PURE__ */ \u0275\u0275defineComponent({ type: _AssetRemindersSectionComponent, selectors: [["app-asset-reminders-section"]], viewQuery: function AssetRemindersSectionComponent_Query(rf, ctx) {
    if (rf & 1) {
      \u0275\u0275viewQuery(_c07, 5);
      \u0275\u0275viewQuery(_c12, 5, ElementRef);
    }
    if (rf & 2) {
      let _t;
      \u0275\u0275queryRefresh(_t = \u0275\u0275loadQuery()) && (ctx.addReminderMenu = _t.first);
      \u0275\u0275queryRefresh(_t = \u0275\u0275loadQuery()) && (ctx.addReminderBtn = _t.first);
    }
  }, features: [\u0275\u0275InheritDefinitionFeature], decls: 13, vars: 6, consts: [["addReminderBtn", ""], ["addReminderMenu", ""], [1, "card", "pt-2"], [1, "mb-4", "p-2", "flex", "justify-start", "items-center"], ["aria-label", "share icon", 1, "pi", "pi-clock", "!text-[2.5rem]", 3, "ngClass"], [1, "pl-6", "flex-1"], [1, "flex", "justify-between", "items-center"], [1, "text-xl", "font-semibold", "m-0"], [1, "icon-light"], [1, "p-field", "p-2", "flex", "align-items-center", "gap-2"], ["tableStyleClass", "info-display !w-auto", 3, "data", "columns", "showGridLines", "hideHeader"], [3, "visible", "header", "fields", "actions", "styleClass"], [1, "pi", "pi-pen-to-square", "action", "hover", "!text-2xl", 3, "click", "keydown.enter"], ["for", "", 1, "w-1/3", "flex-shrink-0"], [1, "flex", "flex-col", "justify-end", "w-full"], [1, "flex-grow-1", "flex", "flex-col"], ["styleClass", "mb-2"], [1, "w-full", "flex", "justify-end", "pt-2"], ["label", "Add Reminder", "severity", "secondary", "styleClass", "p-2", "icon", "pi pi-chevron-down", "iconPos", "right", 3, "onClick"], ["appendTo", "body", "styleClass", "origin-top-right", 3, "onShow", "popup", "model"], [1, "flex", "justify-end", "gap-2", "mt-4"], ["type", "button", "label", "Cancel", "severity", "secondary", 3, "onClick"], ["type", "submit", "label", "Save", "severity", "primary", 3, "onClick", "loading", "disabled"], [1, "flex", "flex-row", "justify-between"], [1, "px-4"], ["aria-label", "'Delete Reminder'", 1, "pi", "pi-trash", "action", "hover", "!text-xl", 3, "click", "keydown.enter"], [3, "modalClose", "formSubmit", "visible", "header", "fields", "actions", "styleClass"], ["formHeader", ""], [1, "mt-2", "mb-4", "muted"]], template: function AssetRemindersSectionComponent_Template(rf, ctx) {
    if (rf & 1) {
      \u0275\u0275elementStart(0, "div", 2)(1, "div", 3);
      \u0275\u0275element(2, "span", 4);
      \u0275\u0275elementStart(3, "div", 5)(4, "div", 6)(5, "h2", 7);
      \u0275\u0275text(6, "Reminders");
      \u0275\u0275elementEnd();
      \u0275\u0275conditionalCreate(7, AssetRemindersSectionComponent_Conditional_7_Template, 2, 1, "div", 8);
      \u0275\u0275elementEnd();
      \u0275\u0275elementStart(8, "span");
      \u0275\u0275text(9, "Set reminders on asset.");
      \u0275\u0275elementEnd()()();
      \u0275\u0275conditionalCreate(10, AssetRemindersSectionComponent_Conditional_10_Template, 16, 5, "div", 9)(11, AssetRemindersSectionComponent_Conditional_11_Template, 1, 4, "app-grid", 10);
      \u0275\u0275elementEnd();
      \u0275\u0275conditionalCreate(12, AssetRemindersSectionComponent_Conditional_12_Template, 4, 6, "app-dynamic-form-modal", 11);
    }
    if (rf & 2) {
      \u0275\u0275advance(2);
      \u0275\u0275property("ngClass", \u0275\u0275pureFunction1(4, _c2, ctx.isFormEditable()));
      \u0275\u0275advance(5);
      \u0275\u0275conditional(!ctx.isFormEditable() ? 7 : -1);
      \u0275\u0275advance(3);
      \u0275\u0275conditional(ctx.isFormEditable() ? 10 : 11);
      \u0275\u0275advance(2);
      \u0275\u0275conditional(ctx.showReminderModal() ? 12 : -1);
    }
  }, dependencies: [
    CommonModule,
    NgClass,
    ButtonModule,
    Button,
    InputTextModule,
    GridComponent,
    DynamicFormModalComponent,
    MenuModule,
    Menu,
    DataViewModule,
    CardModule,
    Card
  ], encapsulation: 2 });
};
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(AssetRemindersSectionComponent, [{
    type: Component,
    args: [{ selector: "app-asset-reminders-section", imports: [
      CommonModule,
      ButtonModule,
      InputTextModule,
      GridComponent,
      DynamicFormModalComponent,
      MenuModule,
      DataViewModule,
      CardModule
    ], template: `<div class="card pt-2">
  <div class="mb-4 p-2 flex justify-start items-center">
    <span
      class="pi pi-clock !text-[2.5rem]"
      [ngClass]="{ 'icon-primary': isFormEditable() }"
      aria-label="share icon"
    ></span>

    <div class="pl-6 flex-1">
      <div class="flex justify-between items-center">
        <h2 class="text-xl font-semibold m-0">Reminders</h2>
        @if (!isFormEditable()) {
          <div class="icon-light">
            <span
              class="pi pi-pen-to-square action hover !text-2xl"
              [attr.aria-label]="'Edit reminders'"
              (click)="onEdit()"
              (keydown.enter)="onEdit()"
            ></span>
          </div>
        }
      </div>
      <span>Set reminders on asset.</span>
    </div>
  </div>

  <!-- Edit Mode -->
  @if (isFormEditable()) {
    <div class="p-field p-2 flex align-items-center gap-2">
      <label for="" class="w-1/3 flex-shrink-0">Reminders</label>
      <div class="flex flex-col justify-end w-full">
        <div class="flex-grow-1 flex flex-col">
          @if (sortedReminders().length === 0) {
            <p-card />
          }

          @for (item of sortedReminders(); track item) {
            <p-card styleClass="mb-2">
              <div class="flex flex-row justify-between">
                <div>
                  <span class="px-4"> {{ item?.['name'] }}</span>
                </div>

                <div class="icon-light">
                  <span
                    class="pi pi-trash action hover !text-xl"
                    aria-label="'Delete Reminder'"
                    (click)="deleteReminder(item)"
                    (keydown.enter)="deleteReminder(item)"
                  ></span>
                </div>
              </div>
            </p-card>
          }

          <div class="w-full flex justify-end pt-2">
            <p-button
              #addReminderBtn
              label="Add Reminder"
              severity="secondary"
              styleClass="p-2"
              icon="pi pi-chevron-down"
              iconPos="right"
              (onClick)="addReminderMenu.toggle($event)"
            ></p-button>
            <p-menu
              #addReminderMenu
              [popup]="true"
              [model]="reminderOptions"
              appendTo="body"
              (onShow)="onAddReminderMenuShow()"
              styleClass="origin-top-right"
            ></p-menu>
          </div>

          <div class="flex justify-end gap-2 mt-4">
            <p-button
              type="button"
              label="Cancel"
              severity="secondary"
              (onClick)="onCancel()"
            />

            <p-button
              type="submit"
              label="Save"
              severity="primary"
              [loading]="isLoadingAsset()"
              [disabled]="!hasChanges()"
              (onClick)="saveAllChanges()"
            />
          </div>
        </div>
      </div>
    </div>
  }
  <!-- View Mode -->
  @else {
    <app-grid
      [data]="reminders()"
      [columns]="columns"
      [showGridLines]="false"
      [hideHeader]="true"
      tableStyleClass="info-display !w-auto"
    ></app-grid>
  }
</div>

<!-- Add/Edit Shared With Modal -->
@if (showReminderModal()) {
  <app-dynamic-form-modal
    [visible]="showReminderModal()"
    [header]="currentModalTitle()"
    [fields]="formFields"
    [actions]="actions"
    [styleClass]="'w-[40rem]'"
    (modalClose)="showReminderModal.set(false)"
    (formSubmit)="onReminderSubmit($event)"
  >
    <div formHeader>
      <p class="mt-2 mb-4 muted">
        {{ formHeader }}
      </p>
    </div>
  </app-dynamic-form-modal>
}
` }]
  }], () => [], { addReminderMenu: [{
    type: ViewChild,
    args: ["addReminderMenu"]
  }], addReminderBtn: [{
    type: ViewChild,
    args: ["addReminderBtn", { read: ElementRef }]
  }] });
})();
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && \u0275setClassDebugInfo(AssetRemindersSectionComponent, { className: "AssetRemindersSectionComponent", filePath: "src/app/features/administration/components/assets/asset-reminders-section/asset-reminders-section.component.ts", lineNumber: 71 });
})();

// src/app/features/administration/components/assets/asset-analog-triggers-section/asset-analog-triggers-section.component.ts
var _c08 = (a0) => ({ "icon-primary": a0 });
function AssetAnalogTriggersSectionComponent_Conditional_7_Template(rf, ctx) {
  if (rf & 1) {
    const _r1 = \u0275\u0275getCurrentView();
    \u0275\u0275elementStart(0, "div", 6)(1, "span", 9);
    \u0275\u0275listener("click", function AssetAnalogTriggersSectionComponent_Conditional_7_Template_span_click_1_listener() {
      \u0275\u0275restoreView(_r1);
      const ctx_r1 = \u0275\u0275nextContext();
      return \u0275\u0275resetView(ctx_r1.onEdit());
    })("keydown.enter", function AssetAnalogTriggersSectionComponent_Conditional_7_Template_span_keydown_enter_1_listener() {
      \u0275\u0275restoreView(_r1);
      const ctx_r1 = \u0275\u0275nextContext();
      return \u0275\u0275resetView(ctx_r1.onEdit());
    });
    \u0275\u0275elementEnd()();
  }
}
function AssetAnalogTriggersSectionComponent_Conditional_10_Conditional_5_Template(rf, ctx) {
  if (rf & 1) {
    \u0275\u0275element(0, "p-card", 14);
  }
}
function AssetAnalogTriggersSectionComponent_Conditional_10_For_7_Template(rf, ctx) {
  if (rf & 1) {
    const _r4 = \u0275\u0275getCurrentView();
    \u0275\u0275elementStart(0, "p-card", 14)(1, "div", 20);
    \u0275\u0275element(2, "span", 21);
    \u0275\u0275elementStart(3, "div", 22)(4, "span");
    \u0275\u0275text(5);
    \u0275\u0275elementEnd();
    \u0275\u0275elementStart(6, "div", 23)(7, "p");
    \u0275\u0275text(8);
    \u0275\u0275elementEnd()()();
    \u0275\u0275elementStart(9, "div", 6)(10, "span", 24);
    \u0275\u0275listener("click", function AssetAnalogTriggersSectionComponent_Conditional_10_For_7_Template_span_click_10_listener() {
      const item_r5 = \u0275\u0275restoreView(_r4).$implicit;
      const ctx_r1 = \u0275\u0275nextContext(2);
      return \u0275\u0275resetView(ctx_r1.deleteAnalogTrigger(item_r5));
    })("keydown.enter", function AssetAnalogTriggersSectionComponent_Conditional_10_For_7_Template_span_keydown_enter_10_listener() {
      const item_r5 = \u0275\u0275restoreView(_r4).$implicit;
      const ctx_r1 = \u0275\u0275nextContext(2);
      return \u0275\u0275resetView(ctx_r1.deleteAnalogTrigger(item_r5));
    });
    \u0275\u0275elementEnd()()()();
  }
  if (rf & 2) {
    const item_r5 = ctx.$implicit;
    \u0275\u0275advance(2);
    \u0275\u0275attribute("aria-label", "pulse icon");
    \u0275\u0275advance(3);
    \u0275\u0275textInterpolate1(" ", item_r5.name, " ");
    \u0275\u0275advance(3);
    \u0275\u0275textInterpolate(item_r5.description);
  }
}
function AssetAnalogTriggersSectionComponent_Conditional_10_Conditional_15_Template(rf, ctx) {
  if (rf & 1) {
    \u0275\u0275element(0, "p-card", 14);
  }
}
function AssetAnalogTriggersSectionComponent_Conditional_10_For_17_Template(rf, ctx) {
  if (rf & 1) {
    const _r6 = \u0275\u0275getCurrentView();
    \u0275\u0275elementStart(0, "p-card", 14)(1, "div", 20);
    \u0275\u0275namespaceSVG();
    \u0275\u0275elementStart(2, "svg", 25);
    \u0275\u0275element(3, "use");
    \u0275\u0275elementEnd();
    \u0275\u0275namespaceHTML();
    \u0275\u0275elementStart(4, "div", 22)(5, "span");
    \u0275\u0275text(6);
    \u0275\u0275elementEnd();
    \u0275\u0275elementStart(7, "div", 23)(8, "p");
    \u0275\u0275text(9);
    \u0275\u0275elementEnd()()();
    \u0275\u0275elementStart(10, "div", 6)(11, "span", 26);
    \u0275\u0275listener("click", function AssetAnalogTriggersSectionComponent_Conditional_10_For_17_Template_span_click_11_listener() {
      const item_r7 = \u0275\u0275restoreView(_r6).$implicit;
      const ctx_r1 = \u0275\u0275nextContext(2);
      return \u0275\u0275resetView(ctx_r1.deleteTemperatureTrigger(item_r7));
    })("keydown.enter", function AssetAnalogTriggersSectionComponent_Conditional_10_For_17_Template_span_keydown_enter_11_listener() {
      const item_r7 = \u0275\u0275restoreView(_r6).$implicit;
      const ctx_r1 = \u0275\u0275nextContext(2);
      return \u0275\u0275resetView(ctx_r1.deleteTemperatureTrigger(item_r7));
    });
    \u0275\u0275elementEnd()()()();
  }
  if (rf & 2) {
    const item_r7 = ctx.$implicit;
    \u0275\u0275advance(3);
    \u0275\u0275attribute("href", "assets/sprites/sprite.svg#temperature-half-solid");
    \u0275\u0275advance(3);
    \u0275\u0275textInterpolate1(" ", item_r7.name, " ");
    \u0275\u0275advance(3);
    \u0275\u0275textInterpolate(item_r7.description);
  }
}
function AssetAnalogTriggersSectionComponent_Conditional_10_Template(rf, ctx) {
  if (rf & 1) {
    const _r3 = \u0275\u0275getCurrentView();
    \u0275\u0275elementStart(0, "div", 10)(1, "label", 11);
    \u0275\u0275text(2, "Analogs");
    \u0275\u0275elementEnd();
    \u0275\u0275elementStart(3, "div", 12)(4, "div", 13);
    \u0275\u0275conditionalCreate(5, AssetAnalogTriggersSectionComponent_Conditional_10_Conditional_5_Template, 1, 0, "p-card", 14);
    \u0275\u0275repeaterCreate(6, AssetAnalogTriggersSectionComponent_Conditional_10_For_7_Template, 11, 3, "p-card", 14, \u0275\u0275repeaterTrackByIndex);
    \u0275\u0275elementStart(8, "div", 15)(9, "p-button", 16);
    \u0275\u0275listener("onClick", function AssetAnalogTriggersSectionComponent_Conditional_10_Template_p_button_onClick_9_listener() {
      \u0275\u0275restoreView(_r3);
      const ctx_r1 = \u0275\u0275nextContext();
      return \u0275\u0275resetView(ctx_r1.openAnalogModal());
    });
    \u0275\u0275elementEnd()()()()();
    \u0275\u0275elementStart(10, "div", 10)(11, "label", 11);
    \u0275\u0275text(12, "Temperatures");
    \u0275\u0275elementEnd();
    \u0275\u0275elementStart(13, "div", 12)(14, "div", 13);
    \u0275\u0275conditionalCreate(15, AssetAnalogTriggersSectionComponent_Conditional_10_Conditional_15_Template, 1, 0, "p-card", 14);
    \u0275\u0275repeaterCreate(16, AssetAnalogTriggersSectionComponent_Conditional_10_For_17_Template, 12, 3, "p-card", 14, \u0275\u0275repeaterTrackByIndex);
    \u0275\u0275elementStart(18, "div", 15)(19, "p-button", 16);
    \u0275\u0275listener("onClick", function AssetAnalogTriggersSectionComponent_Conditional_10_Template_p_button_onClick_19_listener() {
      \u0275\u0275restoreView(_r3);
      const ctx_r1 = \u0275\u0275nextContext();
      return \u0275\u0275resetView(ctx_r1.openTemperatureModal());
    });
    \u0275\u0275elementEnd()()()()();
    \u0275\u0275elementStart(20, "div", 17)(21, "p-button", 18);
    \u0275\u0275listener("onClick", function AssetAnalogTriggersSectionComponent_Conditional_10_Template_p_button_onClick_21_listener() {
      \u0275\u0275restoreView(_r3);
      const ctx_r1 = \u0275\u0275nextContext();
      ctx_r1.isFormEditable.set(false);
      return \u0275\u0275resetView(ctx_r1.cancelEdit());
    });
    \u0275\u0275elementEnd();
    \u0275\u0275elementStart(22, "p-button", 19);
    \u0275\u0275listener("onClick", function AssetAnalogTriggersSectionComponent_Conditional_10_Template_p_button_onClick_22_listener() {
      \u0275\u0275restoreView(_r3);
      const ctx_r1 = \u0275\u0275nextContext();
      return \u0275\u0275resetView(ctx_r1.submitChanges());
    });
    \u0275\u0275elementEnd()();
  }
  if (rf & 2) {
    const ctx_r1 = \u0275\u0275nextContext();
    \u0275\u0275advance(5);
    \u0275\u0275conditional(ctx_r1.analogTriggers().length === 0 ? 5 : -1);
    \u0275\u0275advance();
    \u0275\u0275repeater(ctx_r1.analogTriggers());
    \u0275\u0275advance(9);
    \u0275\u0275conditional(ctx_r1.analogTriggers().length === 0 ? 15 : -1);
    \u0275\u0275advance();
    \u0275\u0275repeater(ctx_r1.temperatureTriggers());
    \u0275\u0275advance(6);
    \u0275\u0275property("loading", ctx_r1.isSubmitting());
  }
}
function AssetAnalogTriggersSectionComponent_Conditional_11_Template(rf, ctx) {
  if (rf & 1) {
    \u0275\u0275element(0, "app-grid", 7);
  }
  if (rf & 2) {
    const ctx_r1 = \u0275\u0275nextContext();
    \u0275\u0275property("data", ctx_r1.assetAnalogAndTemperatureTriggersList())("columns", ctx_r1.columns)("showGridLines", false)("hideHeader", true);
  }
}
function AssetAnalogTriggersSectionComponent_Conditional_12_Template(rf, ctx) {
  if (rf & 1) {
    const _r8 = \u0275\u0275getCurrentView();
    \u0275\u0275elementStart(0, "app-dynamic-form-modal", 27);
    \u0275\u0275listener("modalClose", function AssetAnalogTriggersSectionComponent_Conditional_12_Template_app_dynamic_form_modal_modalClose_0_listener() {
      \u0275\u0275restoreView(_r8);
      const ctx_r1 = \u0275\u0275nextContext();
      return \u0275\u0275resetView(ctx_r1.onClose());
    });
    \u0275\u0275elementEnd();
  }
  if (rf & 2) {
    const ctx_r1 = \u0275\u0275nextContext();
    \u0275\u0275property("visible", ctx_r1.showModal)("header", ctx_r1.modalTitle)("fields", ctx_r1.formFields)("actions", ctx_r1.actions)("styleClass", "w-[40rem]");
  }
}
var AssetAnalogTriggersSectionComponent = class _AssetAnalogTriggersSectionComponent extends EntitySectionBaseComponent {
  entitiesService = inject(EntitiesService);
  measurementUnitsService = inject(MeasurementUnitsService);
  utilityService = inject(UtilityService);
  apiSchemaService = inject(ApiSchemaService);
  currentModalType = null;
  selectOptionsLoaded = signal(false, ...ngDevMode ? [{ debugName: "selectOptionsLoaded" }] : []);
  selectOptions = {};
  analogTriggers = signal([], ...ngDevMode ? [{ debugName: "analogTriggers" }] : []);
  temperatureTriggers = signal([], ...ngDevMode ? [{ debugName: "temperatureTriggers" }] : []);
  assetAnalogAndTemperatureTriggersList = computed(() => {
    return [
      {
        key: "Analogs",
        value: this.analogTriggers().length > 0 ? this.analogTriggers().map((analog) => analog.name).join(", ") : "None"
      },
      {
        key: "Temperature",
        value: this.temperatureTriggers().length > 0 ? this.temperatureTriggers().map((temp) => temp.name).join(", ") : "None"
      }
    ];
  }, ...ngDevMode ? [{ debugName: "assetAnalogAndTemperatureTriggersList" }] : []);
  actions = [
    {
      label: "Cancel",
      action: () => {
        this.showModal = false;
      },
      severity: "secondary"
    },
    {
      label: "Ok",
      action: (form) => {
        if (form.valid) {
          const formData = form.value;
          let ioTypeName = "";
          if (this.currentModalType === "analog") {
            const selectedOption = this.selectOptions?.["analogInputTypes"]?.find((opt) => opt.value === formData.id);
            ioTypeName = selectedOption?.label ?? "";
            formData.ioType = selectedOption?.type ?? "";
            formData.name = formData.name ?? ioTypeName;
          } else if (this.currentModalType === "temperature") {
            const selectedOption = this.selectOptions?.["temperatureInputTypes"]?.find((opt) => opt.value === formData.id);
            ioTypeName = selectedOption?.label ?? "";
            formData.ioType = selectedOption?.type ?? "";
            formData.name = formData.name ?? ioTypeName;
          }
          const newItem = {
            id: formData.id,
            data: formData,
            name: ioTypeName,
            description: this.generateDescription(formData)
          };
          if (this.currentModalType === "analog") {
            this.analogTriggers.update((triggers) => [...triggers, newItem]);
          } else if (this.currentModalType === "temperature") {
            this.temperatureTriggers.update((triggers) => [
              ...triggers,
              newItem
            ]);
          }
          this.showModal = false;
        }
      },
      severity: "primary",
      disabled: (form) => !(form?.valid ?? false) || (form?.pristine ?? true)
    }
  ];
  showModal = false;
  ioTypes = [];
  modalTitle = "";
  constructor() {
    super();
    this.columns = [
      { field: "key", header: "", transform: "uppercase" },
      { field: "value", header: "" }
    ];
    effect(() => {
      const asset = this.entity();
      if (asset) {
        const analogList = (asset.parameters?.analogs || []).map((analog) => this.analogToListItem(analog));
        const temperatureList = (asset.parameters?.temperatures || []).map((temp) => this.temperatureToListItem(temp));
        this.analogTriggers.set(analogList);
        this.temperatureTriggers.set(temperatureList);
      }
    });
  }
  ngOnInit() {
    this.loadSelectOptions();
  }
  generateDescription(data) {
    return `Range of ${data.minRange} to ${data.maxRange} with a debounce of ${data.rangeDebounce} positions`;
  }
  loadSelectOptions() {
    const asset = this.entity();
    if (!isDefined(asset) || !isString(asset.id)) {
      return;
    }
    combineLatest([
      this.loadIOTypes(asset.owner.id, ["analog_input", "can_input"]),
      this.loadIOTypes(asset.owner.id, ["temperature_input"])
    ]).pipe(takeUntilDestroyed(this.destroyRef)).subscribe(([ioTypes, temperatureIoTypes]) => {
      this.selectOptions = {
        analogInputTypes: ioTypes.items.map((item) => ({
          label: item.name ?? "",
          value: item.id,
          type: this.apiSchemaService.getEntityType(item, "iotype") ?? ""
        })).sort((a, b) => a.label.localeCompare(b.label)),
        temperatureInputTypes: temperatureIoTypes.items.map((item) => ({
          label: item.name ?? "",
          value: item.id,
          type: this.apiSchemaService.getEntityType(item, "iotype") ?? ""
        })).sort((a, b) => a.label.localeCompare(b.label))
      };
      this.selectOptionsLoaded.set(true);
    });
  }
  loadIOTypes(owner, types) {
    const typePropertyKey = this.apiSchemaService.getTypePropertyKey("Iotype");
    const filters = isEmpty(types) ? {
      state: {
        value: "active",
        operator: "in"
      }
    } : {
      state: {
        value: "active",
        operator: "="
      },
      [typePropertyKey]: {
        value: types,
        operator: "in"
      }
    };
    return this.entitiesService.listIoTypes(owner, true, 0, DEFAULT_LIST_SIZE, "name", this.utilityService.constructRqlFilter(filters)).pipe(takeUntilDestroyed(this.destroyRef));
  }
  updateFormFields() {
  }
  submitChanges() {
    const asset = this.entity();
    if (isNullOrUndefined(asset))
      return;
    this.isSubmitting.set(true);
    this.handleEntityUpdate(this.entitiesService.updateAsset(asset.id, {
      parameters: {
        analogs: this.analogTriggers().map((item) => item.data),
        temperatures: this.temperatureTriggers().map((item) => item.data)
      }
    }).pipe(takeUntilDestroyed(this.destroyRef), finalize(() => this.isSubmitting.set(false))), "Asset Analog triggers updated successfully");
  }
  updateAnalogFormFields() {
    this.formFields = [
      createDropdownField("id", "Analog Input", this.selectOptions?.["analogInputTypes"] ?? [], "", {
        layout: "horizontal",
        labelWidth: "1/3",
        name: "id",
        props: {
          appendTo: "body"
        }
      }),
      createNumberField("minRange", "Min Range", 0, {
        layout: "horizontal",
        labelWidth: "1/3",
        name: "minRange"
      }),
      createNumberField("maxRange", "Max Range", 100, {
        layout: "horizontal",
        labelWidth: "1/3",
        name: "maxRange"
      }),
      createNumberField("rangeDebounce", "Range Debounce", 0, {
        layout: "horizontal",
        labelWidth: "1/3",
        name: "rangeDebounce"
      }),
      createNumberField("decValue", "Drop Amount", 0, {
        layout: "horizontal",
        labelWidth: "1/3",
        name: "decValue"
      }),
      createNumberField("incValue", "Increase Amount", 0, {
        layout: "horizontal",
        labelWidth: "1/3",
        name: "incValue"
      })
    ];
  }
  updateTemperatureFormFields() {
    this.formFields = [
      createDropdownField("id", "Temperature Input", this.selectOptions?.["temperatureInputTypes"] ?? [], "", {
        layout: "horizontal",
        labelWidth: "1/3",
        name: "id",
        props: {
          appendTo: "body"
        }
      }),
      createNumberField("minRange", "Min Range", 0, {
        layout: "horizontal",
        labelWidth: "1/3",
        name: "minRange",
        props: {
          suffix: this.measurementUnitsService.unitSymbol(MeasurementUnitType.TEMPERATURE)
        }
      }),
      createNumberField("maxRange", "Max Range", 100, {
        layout: "horizontal",
        labelWidth: "1/3",
        name: "maxRange",
        props: {
          suffix: this.measurementUnitsService.unitSymbol(MeasurementUnitType.TEMPERATURE)
        }
      }),
      createNumberField("rangeDebounce", "Range Debounce", 0, {
        layout: "horizontal",
        labelWidth: "1/3",
        name: "rangeDebounce"
      })
    ];
  }
  onClose() {
    this.showModal = false;
  }
  getDescription(analog) {
    return `Range of ${analog.minRange} to ${analog.maxRange} with a debounce of ${analog.rangeDebounce} positions`;
  }
  analogToListItem(analog) {
    return {
      id: analog.id,
      name: analog.name,
      description: this.getDescription(analog),
      data: analog
    };
  }
  temperatureToListItem(temp) {
    return {
      id: temp.id,
      name: temp.name,
      description: this.getDescription(temp),
      data: temp
    };
  }
  openAnalogModal() {
    this.currentModalType = "analog";
    this.modalTitle = "Analog Event Trigger";
    this.updateAnalogFormFields();
    this.showModal = true;
  }
  openTemperatureModal() {
    this.currentModalType = "temperature";
    this.modalTitle = "Temperature Event Trigger";
    this.updateTemperatureFormFields();
    this.showModal = true;
  }
  deleteAnalogTrigger(item) {
    this.analogTriggers.update((triggers) => triggers.filter((trigger) => trigger !== item));
  }
  deleteTemperatureTrigger(item) {
    this.temperatureTriggers.update((triggers) => triggers.filter((trigger) => trigger !== item));
  }
  cancelEdit() {
    const asset = this.entity();
    if (asset) {
      const analogList = (asset.parameters?.analogs || []).map((analog) => this.analogToListItem(analog));
      const temperatureList = (asset.parameters?.temperatures || []).map((temp) => this.temperatureToListItem(temp));
      this.analogTriggers.set(analogList);
      this.temperatureTriggers.set(temperatureList);
    }
  }
  static \u0275fac = function AssetAnalogTriggersSectionComponent_Factory(__ngFactoryType__) {
    return new (__ngFactoryType__ || _AssetAnalogTriggersSectionComponent)();
  };
  static \u0275cmp = /* @__PURE__ */ \u0275\u0275defineComponent({ type: _AssetAnalogTriggersSectionComponent, selectors: [["app-asset-analog-triggers-section"]], features: [\u0275\u0275InheritDefinitionFeature], decls: 13, vars: 7, consts: [[1, "card", "pt-2"], [1, "mb-4", "p-2", "flex", "justify-start", "items-center"], [1, "pi", "pi-wave-pulse", "!text-[2.5rem]", 3, "ngClass"], [1, "pl-6", "flex-1"], [1, "flex", "justify-between", "items-center"], [1, "text-xl", "font-semibold", "m-0"], [1, "icon-light"], ["tableStyleClass", "info-display !w-auto", 3, "data", "columns", "showGridLines", "hideHeader"], [3, "visible", "header", "fields", "actions", "styleClass"], ["aria-label", "Edit analog triggers", 1, "pi", "pi-pen-to-square", "action", "hover", "!text-2xl", 3, "click", "keydown.enter"], [1, "p-field", "p-2", "flex", "align-items-center", "gap-2"], ["for", "", 1, "w-1/3", "flex-shrink-0"], [1, "flex", "flex-col", "justify-end", "w-full"], [1, "flex-grow-1", "flex", "flex-col"], ["styleClass", "!rounded-none !border !border-solid card-border"], [1, "text-right", "mt-3", "mb-4"], ["severity", "secondary", "label", "Add", 3, "onClick"], [1, "flex", "justify-end", "gap-2", "mt-4"], ["type", "button", "label", "Cancel", "severity", "secondary", 3, "onClick"], ["type", "submit", "label", "Save", "severity", "primary", 3, "onClick", "loading"], [1, "flex", "flex-row", "justify-between", "items-center", "gap-2"], [1, "pi", "pi-wave-pulse", "!text-xl"], [1, "flex-1", "flex", "flex-col", "justify-content-center"], [1, "text-base", "muted"], ["aria-label", "'Delete Analog Trigger'", 1, "pi", "pi-trash", "action", "hover", "!text-xl", 3, "click", "keydown.enter"], ["aria-label", "temperature icon", 1, "custom-icon-svg", "w-[1.25rem]", "h-[1.25rem]"], ["aria-label", "'Delete Temperature Trigger'", 1, "pi", "pi-trash", "action", "hover", "!text-xl", 3, "click", "keydown.enter"], [3, "modalClose", "visible", "header", "fields", "actions", "styleClass"]], template: function AssetAnalogTriggersSectionComponent_Template(rf, ctx) {
    if (rf & 1) {
      \u0275\u0275elementStart(0, "div", 0)(1, "div", 1);
      \u0275\u0275element(2, "span", 2);
      \u0275\u0275elementStart(3, "div", 3)(4, "div", 4)(5, "h2", 5);
      \u0275\u0275text(6, "Analog Triggers");
      \u0275\u0275elementEnd();
      \u0275\u0275conditionalCreate(7, AssetAnalogTriggersSectionComponent_Conditional_7_Template, 2, 0, "div", 6);
      \u0275\u0275elementEnd();
      \u0275\u0275elementStart(8, "span");
      \u0275\u0275text(9, "Define when speed, idle and trip limit analogs will be generated for this asset.");
      \u0275\u0275elementEnd()()();
      \u0275\u0275conditionalCreate(10, AssetAnalogTriggersSectionComponent_Conditional_10_Template, 23, 3)(11, AssetAnalogTriggersSectionComponent_Conditional_11_Template, 1, 4, "app-grid", 7);
      \u0275\u0275elementEnd();
      \u0275\u0275conditionalCreate(12, AssetAnalogTriggersSectionComponent_Conditional_12_Template, 1, 5, "app-dynamic-form-modal", 8);
    }
    if (rf & 2) {
      \u0275\u0275advance(2);
      \u0275\u0275property("ngClass", \u0275\u0275pureFunction1(5, _c08, ctx.isFormEditable()));
      \u0275\u0275attribute("aria-label", "pulse icon");
      \u0275\u0275advance(5);
      \u0275\u0275conditional(!ctx.isFormEditable() ? 7 : -1);
      \u0275\u0275advance(3);
      \u0275\u0275conditional(ctx.isFormEditable() ? 10 : 11);
      \u0275\u0275advance(2);
      \u0275\u0275conditional(ctx.showModal ? 12 : -1);
    }
  }, dependencies: [
    CommonModule,
    NgClass,
    ReactiveFormsModule,
    ButtonModule,
    Button,
    GridComponent,
    DynamicFormModalComponent,
    CardModule,
    Card
  ], encapsulation: 2 });
};
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(AssetAnalogTriggersSectionComponent, [{
    type: Component,
    args: [{ selector: "app-asset-analog-triggers-section", imports: [
      CommonModule,
      ReactiveFormsModule,
      ButtonModule,
      GridComponent,
      DynamicFormModalComponent,
      CardModule
    ], template: `<div class="card pt-2">
  <div class="mb-4 p-2 flex justify-start items-center">
    <span
      class="pi pi-wave-pulse !text-[2.5rem]"
      [ngClass]="{ 'icon-primary': isFormEditable() }"
      [attr.aria-label]="'pulse icon'"
    ></span>

    <div class="pl-6 flex-1">
      <div class="flex justify-between items-center">
        <h2 class="text-xl font-semibold m-0">Analog Triggers</h2>
        @if (!isFormEditable()) {
          <div class="icon-light">
            <span
              class="pi pi-pen-to-square action hover !text-2xl"
              aria-label="Edit analog triggers"
              (click)="onEdit()"
              (keydown.enter)="onEdit()"
            ></span>
          </div>
        }
      </div>
      <span
        >Define when speed, idle and trip limit analogs will be generated for
        this asset.</span
      >
    </div>
  </div>
  <!-- Edit Mode -->
  @if (isFormEditable()) {
    <div class="p-field p-2 flex align-items-center gap-2">
      <label for="" class="w-1/3 flex-shrink-0">Analogs</label>
      <div class="flex flex-col justify-end w-full">
        <div class="flex-grow-1 flex flex-col">
          @if (analogTriggers().length === 0) {
            <p-card
              styleClass="!rounded-none !border !border-solid card-border"
            />
          }

          @for (item of analogTriggers(); track $index) {
            <p-card
              styleClass="!rounded-none !border !border-solid card-border"
            >
              <div class="flex flex-row justify-between items-center gap-2">
                <span
                  class="pi pi-wave-pulse !text-xl"
                  [attr.aria-label]="'pulse icon'"
                ></span>
                <div class="flex-1 flex flex-col justify-content-center">
                  <span> {{ item.name }} </span>
                  <div class="text-base muted">
                    <p>{{ item.description }}</p>
                  </div>
                </div>

                <div class="icon-light">
                  <span
                    class="pi pi-trash action hover !text-xl"
                    aria-label="'Delete Analog Trigger'"
                    (click)="deleteAnalogTrigger(item)"
                    (keydown.enter)="deleteAnalogTrigger(item)"
                  ></span>
                </div>
              </div>
            </p-card>
          }

          <div class="text-right mt-3 mb-4">
            <p-button
              (onClick)="openAnalogModal()"
              severity="secondary"
              label="Add"
            />
          </div>
        </div>
      </div>
    </div>

    <div class="p-field p-2 flex align-items-center gap-2">
      <label for="" class="w-1/3 flex-shrink-0">Temperatures</label>
      <div class="flex flex-col justify-end w-full">
        <div class="flex-grow-1 flex flex-col">
          @if (analogTriggers().length === 0) {
            <p-card
              styleClass="!rounded-none !border !border-solid card-border"
            />
          }

          @for (item of temperatureTriggers(); track $index) {
            <p-card
              styleClass="!rounded-none !border !border-solid card-border"
            >
              <div class="flex flex-row justify-between items-center gap-2">
                <svg
                  class="custom-icon-svg w-[1.25rem] h-[1.25rem]"
                  aria-label="temperature icon"
                >
                  <use
                    [attr.href]="
                      'assets/sprites/sprite.svg#temperature-half-solid'
                    "
                  ></use>
                </svg>
                <div class="flex-1 flex flex-col justify-content-center">
                  <span> {{ item.name }} </span>
                  <div class="text-base muted">
                    <p>{{ item.description }}</p>
                  </div>
                </div>

                <div class="icon-light">
                  <span
                    class="pi pi-trash action hover !text-xl"
                    aria-label="'Delete Temperature Trigger'"
                    (click)="deleteTemperatureTrigger(item)"
                    (keydown.enter)="deleteTemperatureTrigger(item)"
                  ></span>
                </div>
              </div>
            </p-card>
          }

          <div class="text-right mt-3 mb-4">
            <p-button
              (onClick)="openTemperatureModal()"
              severity="secondary"
              label="Add"
            />
          </div>
        </div>
      </div>
    </div>
    <div class="flex justify-end gap-2 mt-4">
      <p-button
        type="button"
        label="Cancel"
        severity="secondary"
        (onClick)="isFormEditable.set(false); cancelEdit()"
      />

      <p-button
        type="submit"
        label="Save"
        severity="primary"
        [loading]="isSubmitting()"
        (onClick)="submitChanges()"
      />
    </div>
  }
  <!-- View Mode -->
  @else {
    <app-grid
      [data]="assetAnalogAndTemperatureTriggersList()"
      [columns]="columns"
      [showGridLines]="false"
      [hideHeader]="true"
      tableStyleClass="info-display !w-auto"
    ></app-grid>
  }
</div>

<!-- Add/Edit Shared With Modal -->
@if (showModal) {
  <app-dynamic-form-modal
    [visible]="showModal"
    [header]="modalTitle"
    [fields]="formFields"
    [actions]="actions"
    [styleClass]="'w-[40rem]'"
    (modalClose)="onClose()"
  >
  </app-dynamic-form-modal>
}
` }]
  }], () => [], null);
})();
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && \u0275setClassDebugInfo(AssetAnalogTriggersSectionComponent, { className: "AssetAnalogTriggersSectionComponent", filePath: "src/app/features/administration/components/assets/asset-analog-triggers-section/asset-analog-triggers-section.component.ts", lineNumber: 59 });
})();

// src/app/features/administration/components/assets/asset-curfew-events-section/asset-curfew-events-section.component.ts
var _c09 = (a0) => ({ "icon-primary": a0 });
function AssetCurfewEventsSectionComponent_Conditional_7_Template(rf, ctx) {
  if (rf & 1) {
    const _r1 = \u0275\u0275getCurrentView();
    \u0275\u0275elementStart(0, "div", 6)(1, "span", 9);
    \u0275\u0275listener("click", function AssetCurfewEventsSectionComponent_Conditional_7_Template_span_click_1_listener() {
      \u0275\u0275restoreView(_r1);
      const ctx_r1 = \u0275\u0275nextContext();
      return \u0275\u0275resetView(ctx_r1.onEdit());
    })("keydown.enter", function AssetCurfewEventsSectionComponent_Conditional_7_Template_span_keydown_enter_1_listener() {
      \u0275\u0275restoreView(_r1);
      const ctx_r1 = \u0275\u0275nextContext();
      return \u0275\u0275resetView(ctx_r1.onEdit());
    });
    \u0275\u0275elementEnd()();
  }
}
function AssetCurfewEventsSectionComponent_Conditional_10_Template(rf, ctx) {
  if (rf & 1) {
    const _r3 = \u0275\u0275getCurrentView();
    \u0275\u0275elementStart(0, "app-dynamic-form", 10);
    \u0275\u0275listener("formSubmit", function AssetCurfewEventsSectionComponent_Conditional_10_Template_app_dynamic_form_formSubmit_0_listener($event) {
      \u0275\u0275restoreView(_r3);
      const ctx_r1 = \u0275\u0275nextContext();
      return \u0275\u0275resetView(ctx_r1.onSubmit($event));
    });
    \u0275\u0275elementEnd();
  }
  if (rf & 2) {
    const ctx_r1 = \u0275\u0275nextContext();
    \u0275\u0275property("fields", ctx_r1.formFields)("actions", ctx_r1.actions);
  }
}
function AssetCurfewEventsSectionComponent_Conditional_11_Template(rf, ctx) {
  if (rf & 1) {
    \u0275\u0275element(0, "app-grid", 8);
  }
  if (rf & 2) {
    const ctx_r1 = \u0275\u0275nextContext();
    \u0275\u0275property("data", ctx_r1.assetCurfewEvents())("columns", ctx_r1.columns)("showGridLines", false)("hideHeader", true);
  }
}
var AssetCurfewEventsSectionComponent = class _AssetCurfewEventsSectionComponent extends EntitySectionBaseComponent {
  http = inject(HttpClient);
  entitiesService = inject(EntitiesService);
  measurementUnitsService = inject(MeasurementUnitsService);
  utilityService = inject(UtilityService);
  operationRegistry = inject(EntityOperationRegistryService);
  authDataService = inject(AuthDataService);
  timezones = [];
  selectOptionsLoaded = signal(false, ...ngDevMode ? [{ debugName: "selectOptionsLoaded" }] : []);
  selectOptions = {};
  assetCurfewEvents = computed(() => {
    const asset = this.entity();
    const assetCurfewEvents = asset?.parameters?.curfews;
    if (isNullOrUndefined(assetCurfewEvents))
      return [];
    return [
      {
        key: "Working Hours",
        value: assetCurfewEvents.map((event) => `${event.from} - ${event.to}`).join(", ")
      }
    ];
  }, ...ngDevMode ? [{ debugName: "assetCurfewEvents" }] : []);
  showModal = false;
  ioTypes = [];
  modalTitle = "";
  constructor() {
    super();
    this.columns = [
      { field: "key", header: "", transform: "uppercase" },
      { field: "value", header: "" }
    ];
  }
  ngOnInit() {
    this.loadTimezones();
  }
  generateDescription(data) {
    return `Range of ${data.minRange} to ${data.maxRange} with a debounce of ${data.rangeDebounce} positions`;
  }
  loadTimezones() {
    this.http.get("/assets/docs/timezones.json").subscribe((data) => {
      this.timezones = data.map((tz) => ({ label: tz.id, value: tz.id })).sort((a, b) => a.label.localeCompare(b.label));
      this.updateFormFields();
    });
  }
  updateFormFields() {
    const assetCurfewModalConfig = {
      modalComponent: ModalListFormComponent,
      modalTitle: "External Tab",
      defaultItemProvider: () => ({
        id: v4_default(),
        from: "00:00",
        to: "23:59",
        timeZoneId: this.authDataService.getUserProfile()?.timeZoneId ?? "",
        days: WEEKDAY_OPTIONS.map((day) => day.value)
      }),
      listItemFormatter: (item) => {
        const tabItem = item;
        return {
          id: tabItem.id,
          title: `${tabItem.from} - ${tabItem.to}`,
          display: `Between ${tabItem.from} and ${tabItem.to} on ${this.utilityService.getWeekdaysString(tabItem.days)}`,
          icon: "clock"
        };
      },
      modalFields: (_item) => {
        return [
          createTextField("id", "ID", _item?.id, {
            name: "id",
            hidden: true
          }),
          createDateField("from", "From", "", {
            name: "from",
            placeholder: "Select time",
            props: {
              timeOnly: true,
              showSeconds: false
            },
            style: { width: "100%" }
          }),
          createDateField("to", "To", "", {
            name: "to",
            placeholder: "Select time",
            props: {
              timeOnly: true,
              showSeconds: false
            },
            style: { width: "100%" }
          }),
          createDropdownField("timeZoneId", "Time Zone", this.timezones, "", {
            layout: "horizontal",
            labelWidth: "1/3",
            placeholder: "Select timezone",
            name: "timeZone",
            props: {
              appendTo: "body"
            }
          }),
          createListboxField("days", "Weekdays", [], WEEKDAY_OPTIONS, {
            name: "days",
            validations: [
              {
                name: "required",
                validator: Validators.required,
                message: "Days is required"
              }
            ],
            props: {
              checkmark: true,
              multiple: true
            }
          })
        ];
      },
      subHeader: AppListsTranslations["MODALS"]["EXTERNAL-TABS"]["DESC"]
    };
    this.formFields = [
      createModalListField("curfews", "Working Hours", this.entity()?.parameters?.curfews ?? [], {
        layout: "horizontal",
        labelWidth: "1/3",
        name: "curfews",
        props: {
          modalConfig: assetCurfewModalConfig
        }
      })
    ];
  }
  getUpdateMethod() {
    return this.operationRegistry.getOperation("asset", "update") ?? ((id, data) => this.entitiesService.updateAsset(id, {
      parameters: data
    }));
  }
  updateAnalogFormFields() {
    this.formFields = [
      createDropdownField("id", "Analog Input", this.selectOptions?.["analogInputTypes"] ?? [], "", {
        layout: "horizontal",
        labelWidth: "1/3",
        name: "id",
        props: {
          appendTo: "body"
        }
      }),
      createNumberField("minRange", "Min Range", 0, {
        layout: "horizontal",
        labelWidth: "1/3",
        name: "minRange"
      }),
      createNumberField("maxRange", "Max Range", 100, {
        layout: "horizontal",
        labelWidth: "1/3",
        name: "maxRange"
      }),
      createNumberField("rangeDebounce", "Range Debounce", 0, {
        layout: "horizontal",
        labelWidth: "1/3",
        name: "rangeDebounce"
      }),
      createNumberField("decValue", "Drop Amount", 0, {
        layout: "horizontal",
        labelWidth: "1/3",
        name: "decValue"
      }),
      createNumberField("incValue", "Increase Amount", 0, {
        layout: "horizontal",
        labelWidth: "1/3",
        name: "incValue"
      })
    ];
  }
  updateTemperatureFormFields() {
    this.formFields = [
      createDropdownField("id", "Temperature Input", this.selectOptions?.["temperatureInputTypes"] ?? [], "", {
        layout: "horizontal",
        labelWidth: "1/3",
        name: "id",
        props: {
          appendTo: "body"
        }
      }),
      createNumberField("minRange", "Min Range", 0, {
        layout: "horizontal",
        labelWidth: "1/3",
        name: "minRange",
        props: {
          suffix: this.measurementUnitsService.unitSymbol(MeasurementUnitType.TEMPERATURE)
        }
      }),
      createNumberField("maxRange", "Max Range", 100, {
        layout: "horizontal",
        labelWidth: "1/3",
        name: "maxRange",
        props: {
          suffix: this.measurementUnitsService.unitSymbol(MeasurementUnitType.TEMPERATURE)
        }
      }),
      createNumberField("rangeDebounce", "Range Debounce", 0, {
        layout: "horizontal",
        labelWidth: "1/3",
        name: "rangeDebounce"
      })
    ];
  }
  onClose() {
    this.showModal = false;
  }
  getDescription(analog) {
    return `Range of ${analog.minRange} to ${analog.maxRange} with a debounce of ${analog.rangeDebounce} positions`;
  }
  static \u0275fac = function AssetCurfewEventsSectionComponent_Factory(__ngFactoryType__) {
    return new (__ngFactoryType__ || _AssetCurfewEventsSectionComponent)();
  };
  static \u0275cmp = /* @__PURE__ */ \u0275\u0275defineComponent({ type: _AssetCurfewEventsSectionComponent, selectors: [["app-asset-curfew-events-section"]], features: [\u0275\u0275InheritDefinitionFeature], decls: 12, vars: 6, consts: [[1, "card", "pt-2"], [1, "mb-4", "p-2", "flex", "justify-start", "items-center"], [1, "pi", "pi-clock", "!text-[2.5rem]", 3, "ngClass"], [1, "pl-6", "flex-1"], [1, "flex", "justify-between", "items-center"], [1, "text-xl", "font-semibold", "m-0"], [1, "icon-light"], [3, "fields", "actions"], ["tableStyleClass", "info-display !w-auto", 3, "data", "columns", "showGridLines", "hideHeader"], ["aria-label", "Edit working hours", 1, "pi", "pi-pen-to-square", "action", "hover", "!text-2xl", 3, "click", "keydown.enter"], [3, "formSubmit", "fields", "actions"]], template: function AssetCurfewEventsSectionComponent_Template(rf, ctx) {
    if (rf & 1) {
      \u0275\u0275elementStart(0, "div", 0)(1, "div", 1);
      \u0275\u0275element(2, "span", 2);
      \u0275\u0275elementStart(3, "div", 3)(4, "div", 4)(5, "h2", 5);
      \u0275\u0275text(6, "Working Hours");
      \u0275\u0275elementEnd();
      \u0275\u0275conditionalCreate(7, AssetCurfewEventsSectionComponent_Conditional_7_Template, 2, 0, "div", 6);
      \u0275\u0275elementEnd();
      \u0275\u0275elementStart(8, "span");
      \u0275\u0275text(9, "Define the working hours of this asset in order to generate curfew violation events. ");
      \u0275\u0275elementEnd()()();
      \u0275\u0275conditionalCreate(10, AssetCurfewEventsSectionComponent_Conditional_10_Template, 1, 2, "app-dynamic-form", 7)(11, AssetCurfewEventsSectionComponent_Conditional_11_Template, 1, 4, "app-grid", 8);
      \u0275\u0275elementEnd();
    }
    if (rf & 2) {
      \u0275\u0275advance(2);
      \u0275\u0275property("ngClass", \u0275\u0275pureFunction1(4, _c09, ctx.isFormEditable()));
      \u0275\u0275attribute("aria-label", "clock icon");
      \u0275\u0275advance(5);
      \u0275\u0275conditional(!ctx.isFormEditable() ? 7 : -1);
      \u0275\u0275advance(3);
      \u0275\u0275conditional(ctx.isFormEditable() ? 10 : 11);
    }
  }, dependencies: [
    CommonModule,
    NgClass,
    ReactiveFormsModule,
    ButtonModule,
    GridComponent,
    DynamicFormComponent,
    CardModule
  ], encapsulation: 2 });
};
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(AssetCurfewEventsSectionComponent, [{
    type: Component,
    args: [{ selector: "app-asset-curfew-events-section", imports: [
      CommonModule,
      ReactiveFormsModule,
      ButtonModule,
      GridComponent,
      DynamicFormComponent,
      CardModule
    ], template: `<div class="card pt-2">
  <div class="mb-4 p-2 flex justify-start items-center">
    <span
      class="pi pi-clock !text-[2.5rem]"
      [ngClass]="{ 'icon-primary': isFormEditable() }"
      [attr.aria-label]="'clock icon'"
    ></span>

    <div class="pl-6 flex-1">
      <div class="flex justify-between items-center">
        <h2 class="text-xl font-semibold m-0">Working Hours</h2>
        @if (!isFormEditable()) {
          <div class="icon-light">
            <span
              class="pi pi-pen-to-square action hover !text-2xl"
              aria-label="Edit working hours"
              (click)="onEdit()"
              (keydown.enter)="onEdit()"
            ></span>
          </div>
        }
      </div>
      <span
        >Define the working hours of this asset in order to generate curfew
        violation events.
      </span>
    </div>
  </div>
  @if (isFormEditable()) {
    <app-dynamic-form
      [fields]="formFields"
      [actions]="actions"
      (formSubmit)="onSubmit($event)"
    >
    </app-dynamic-form>
  } @else {
    <app-grid
      [data]="assetCurfewEvents()"
      [columns]="columns"
      [showGridLines]="false"
      [hideHeader]="true"
      tableStyleClass="info-display !w-auto"
    ></app-grid>
  }
</div>
` }]
  }], () => [], null);
})();
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && \u0275setClassDebugInfo(AssetCurfewEventsSectionComponent, { className: "AssetCurfewEventsSectionComponent", filePath: "src/app/features/administration/components/assets/asset-curfew-events-section/asset-curfew-events-section.component.ts", lineNumber: 57 });
})();

// src/app/features/administration/components/assets/asset-labels-section/asset-labels-section.component.ts
var _c010 = (a0) => ({ "icon-primary": a0 });
function AssetLabelsSectionComponent_Conditional_7_Template(rf, ctx) {
  if (rf & 1) {
    const _r1 = \u0275\u0275getCurrentView();
    \u0275\u0275elementStart(0, "div", 6)(1, "span", 9);
    \u0275\u0275listener("click", function AssetLabelsSectionComponent_Conditional_7_Template_span_click_1_listener() {
      \u0275\u0275restoreView(_r1);
      const ctx_r1 = \u0275\u0275nextContext();
      return \u0275\u0275resetView(ctx_r1.onEdit());
    })("keydown.enter", function AssetLabelsSectionComponent_Conditional_7_Template_span_keydown_enter_1_listener() {
      \u0275\u0275restoreView(_r1);
      const ctx_r1 = \u0275\u0275nextContext();
      return \u0275\u0275resetView(ctx_r1.onEdit());
    });
    \u0275\u0275elementEnd()();
  }
  if (rf & 2) {
    \u0275\u0275advance();
    \u0275\u0275attribute("aria-label", "Edit asset default labels");
  }
}
function AssetLabelsSectionComponent_Conditional_10_Template(rf, ctx) {
  if (rf & 1) {
    const _r3 = \u0275\u0275getCurrentView();
    \u0275\u0275elementStart(0, "app-dynamic-form", 10);
    \u0275\u0275listener("formSubmit", function AssetLabelsSectionComponent_Conditional_10_Template_app_dynamic_form_formSubmit_0_listener($event) {
      \u0275\u0275restoreView(_r3);
      const ctx_r1 = \u0275\u0275nextContext();
      return \u0275\u0275resetView(ctx_r1.onSubmit($event));
    });
    \u0275\u0275elementEnd();
  }
  if (rf & 2) {
    const ctx_r1 = \u0275\u0275nextContext();
    \u0275\u0275property("fields", ctx_r1.formFields)("actions", ctx_r1.actions);
  }
}
function AssetLabelsSectionComponent_Conditional_11_Template(rf, ctx) {
  if (rf & 1) {
    \u0275\u0275element(0, "app-grid", 8);
  }
  if (rf & 2) {
    const ctx_r1 = \u0275\u0275nextContext();
    \u0275\u0275property("data", ctx_r1.assetDetails())("columns", ctx_r1.columns)("showGridLines", false)("hideHeader", true);
  }
}
var AssetLabelsSectionComponent = class _AssetLabelsSectionComponent extends EntitySectionBaseComponent {
  entitiesService = inject(EntitiesService);
  utilityService = inject(UtilityService);
  assetDetails = computed(() => {
    const assetDetails = this.entity();
    const availableLabels = this.labels();
    if (!isDefined(assetDetails))
      return [];
    const mappedTripLabels = (assetDetails.defaultTripLabels || []).map((value) => {
      const [rootLabel, subLabel] = value.split("/");
      const label1 = availableLabels.find((x) => x.label === rootLabel);
      let label2;
      if (label1?.values) {
        label2 = label1.values.find((x) => x.label === subLabel);
      }
      const name = label1 ? [label1.name, label2?.name].filter((x) => isDefined(x)).join(": ") : value;
      return {
        id: value,
        name
      };
    });
    return [
      {
        key: "Default Trip Labels",
        value: mappedTripLabels.map((l) => l.name).join(", ") || "None"
        // Display names, join if multiple
      }
    ];
  }, ...ngDevMode ? [{ debugName: "assetDetails" }] : []);
  searchDefaultLabelsSubject = new Subject();
  defaultLabelsSuggestions = signal([], ...ngDevMode ? [{ debugName: "defaultLabelsSuggestions" }] : []);
  labels = signal([], ...ngDevMode ? [{ debugName: "labels" }] : []);
  constructor() {
    super();
    this.columns = [
      { field: "key", header: "", transform: "uppercase" },
      { field: "value", header: "" }
    ];
  }
  ngOnInit() {
    this.loadLabels();
    this.setupSearchDefaultLabels();
    this.updateFormFields();
  }
  loadLabels() {
    const asset = this.entity();
    if (!isDefined(asset) || !isString(asset.id)) {
      this.labels.set([]);
      return;
    }
    this.entitiesService.listLabels(asset.owner.id, true, 0, DEFAULT_LIST_SIZE, "name", "state=active").pipe(takeUntilDestroyed(this.destroyRef)).subscribe((response) => {
      this.labels.set(response.items);
    });
  }
  setupSearchDefaultLabels() {
    this.searchDefaultLabelsSubject.pipe(debounceTime(300), takeUntilDestroyed(this.destroyRef), switchMap((searchTerm) => {
      if (isNullOrUndefined(searchTerm)) {
        return of({
          count: 0,
          offset: 0,
          limit: DEFAULT_LIST_SIZE,
          items: []
        });
      }
      const filters = {
        state: { value: "active", operator: "=" },
        name: { value: `*${searchTerm}*`, operator: "=" }
      };
      const rqlFilter = this.utilityService.constructRqlFilter(filters);
      return this.entitiesService.listLabels(this.entity()?.owner.id ?? "", true, 0, 10, "name", rqlFilter);
    })).subscribe((response) => {
      this.defaultLabelsSuggestions.set(response.items);
    });
  }
  searchDefaultLabels(searchTerm) {
    if (isNullOrUndefined(searchTerm)) {
      this.defaultLabelsSuggestions.set([]);
      return;
    }
    this.defaultLabelsSuggestions.set(void 0);
    this.searchDefaultLabelsSubject.next(searchTerm);
  }
  updateFormFields() {
    const asset = this.entity();
    this.formFields = [
      createAutocompleteField("defaultLabels", "Asset Rating", asset?.ratingProfile?.name, this.defaultLabelsSuggestions(), this.searchDefaultLabels.bind(this), {
        layout: "horizontal",
        labelWidth: "1/3",
        name: "defaultLabels",
        props: {
          appendTo: "body",
          multiple: false,
          field: "name",
          typeahead: true,
          showEmptyMessage: true,
          emptyMessage: "No labels found",
          completeOnFocus: false
        }
      })
    ];
  }
  submitChanges(formData) {
    const asset = this.entity();
    if (isNullOrUndefined(asset))
      return;
    this.entitiesService.updateAsset(asset.id, formData).pipe(takeUntilDestroyed(this.destroyRef)).subscribe({
      next: () => {
        this.isFormEditable.set(false);
        this.isSubmitting.set(false);
        this.broadcastService.broadcast("entity-updated", {
          entityType: "asset",
          entityId: asset.id
        });
      },
      error: () => {
        this.isFormEditable.set(true);
        this.isSubmitting.set(false);
      }
    });
  }
  searchLabel(query) {
    if (isEmpty(query)) {
      this.labels.set(this.labels());
      return;
    }
    const filteredLabels = this.labels().filter((label) => ((label.name?.toLowerCase().includes(query.toLowerCase()) ?? false) || label.label?.toLowerCase().includes(query.toLowerCase())) ?? false);
    this.labels.set(filteredLabels);
  }
  static \u0275fac = function AssetLabelsSectionComponent_Factory(__ngFactoryType__) {
    return new (__ngFactoryType__ || _AssetLabelsSectionComponent)();
  };
  static \u0275cmp = /* @__PURE__ */ \u0275\u0275defineComponent({ type: _AssetLabelsSectionComponent, selectors: [["app-asset-labels-section"]], features: [\u0275\u0275InheritDefinitionFeature], decls: 12, vars: 6, consts: [[1, "card", "pt-2"], [1, "mb-4", "p-2", "flex", "justify-start", "items-center"], [1, "pi", "pi-tag", "!text-[2.5rem]", 3, "ngClass"], [1, "pl-6", "flex-1"], [1, "flex", "justify-between", "items-center"], [1, "text-xl", "font-semibold", "m-0"], [1, "icon-light"], [3, "fields", "actions"], ["tableStyleClass", "info-display !w-auto", 3, "data", "columns", "showGridLines", "hideHeader"], [1, "pi", "pi-pen-to-square", "action", "hover", "!text-2xl", 3, "click", "keydown.enter"], [3, "formSubmit", "fields", "actions"]], template: function AssetLabelsSectionComponent_Template(rf, ctx) {
    if (rf & 1) {
      \u0275\u0275elementStart(0, "div", 0)(1, "div", 1);
      \u0275\u0275element(2, "span", 2);
      \u0275\u0275elementStart(3, "div", 3)(4, "div", 4)(5, "h2", 5);
      \u0275\u0275text(6, "Default Labels");
      \u0275\u0275elementEnd();
      \u0275\u0275conditionalCreate(7, AssetLabelsSectionComponent_Conditional_7_Template, 2, 1, "div", 6);
      \u0275\u0275elementEnd();
      \u0275\u0275elementStart(8, "span");
      \u0275\u0275text(9, "Configure labels that will be applied to data from this asset by default.");
      \u0275\u0275elementEnd()()();
      \u0275\u0275conditionalCreate(10, AssetLabelsSectionComponent_Conditional_10_Template, 1, 2, "app-dynamic-form", 7)(11, AssetLabelsSectionComponent_Conditional_11_Template, 1, 4, "app-grid", 8);
      \u0275\u0275elementEnd();
    }
    if (rf & 2) {
      \u0275\u0275advance(2);
      \u0275\u0275property("ngClass", \u0275\u0275pureFunction1(4, _c010, ctx.isFormEditable()));
      \u0275\u0275attribute("aria-label", "tag icon");
      \u0275\u0275advance(5);
      \u0275\u0275conditional(!ctx.isFormEditable() ? 7 : -1);
      \u0275\u0275advance(3);
      \u0275\u0275conditional(ctx.isFormEditable() ? 10 : 11);
    }
  }, dependencies: [CommonModule, NgClass, ButtonModule, GridComponent, DynamicFormComponent], encapsulation: 2 });
};
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(AssetLabelsSectionComponent, [{
    type: Component,
    args: [{ selector: "app-asset-labels-section", imports: [CommonModule, ButtonModule, GridComponent, DynamicFormComponent], template: `<div class="card pt-2">
  <div class="mb-4 p-2 flex justify-start items-center">
    <span
      class="pi pi-tag !text-[2.5rem]"
      [ngClass]="{ 'icon-primary': isFormEditable() }"
      [attr.aria-label]="'tag icon'"
    ></span>

    <div class="pl-6 flex-1">
      <div class="flex justify-between items-center">
        <h2 class="text-xl font-semibold m-0">Default Labels</h2>
        @if (!isFormEditable()) {
          <div class="icon-light">
            <span
              class="pi pi-pen-to-square action hover !text-2xl"
              [attr.aria-label]="'Edit asset default labels'"
              (click)="onEdit()"
              (keydown.enter)="onEdit()"
            ></span>
          </div>
        }
      </div>
      <span
        >Configure labels that will be applied to data from this asset by
        default.</span
      >
    </div>
  </div>
  @if (isFormEditable()) {
    <app-dynamic-form
      [fields]="formFields"
      [actions]="actions"
      (formSubmit)="onSubmit($event)"
    >
    </app-dynamic-form>
  } @else {
    <app-grid
      [data]="assetDetails()"
      [columns]="columns"
      [showGridLines]="false"
      [hideHeader]="true"
      tableStyleClass="info-display !w-auto"
    ></app-grid>
  }
</div>
` }]
  }], () => [], null);
})();
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && \u0275setClassDebugInfo(AssetLabelsSectionComponent, { className: "AssetLabelsSectionComponent", filePath: "src/app/features/administration/components/assets/asset-labels-section/asset-labels-section.component.ts", lineNumber: 33 });
})();

// src/app/features/administration/components/assets/asset-counter-type-section/asset-counter-type-section.component.ts
var _c011 = (a0) => ({ "icon-primary": a0 });
function AssetCounterTypeSectionComponent_Conditional_7_Template(rf, ctx) {
  if (rf & 1) {
    const _r1 = \u0275\u0275getCurrentView();
    \u0275\u0275elementStart(0, "div", 6)(1, "span", 9);
    \u0275\u0275listener("click", function AssetCounterTypeSectionComponent_Conditional_7_Template_span_click_1_listener() {
      \u0275\u0275restoreView(_r1);
      const ctx_r1 = \u0275\u0275nextContext();
      return \u0275\u0275resetView(ctx_r1.onEdit());
    })("keydown.enter", function AssetCounterTypeSectionComponent_Conditional_7_Template_span_keydown_enter_1_listener() {
      \u0275\u0275restoreView(_r1);
      const ctx_r1 = \u0275\u0275nextContext();
      return \u0275\u0275resetView(ctx_r1.onEdit());
    });
    \u0275\u0275elementEnd()();
  }
  if (rf & 2) {
    \u0275\u0275advance();
    \u0275\u0275attribute("aria-label", "Edit");
  }
}
function AssetCounterTypeSectionComponent_Conditional_11_Template(rf, ctx) {
  if (rf & 1) {
    const _r3 = \u0275\u0275getCurrentView();
    \u0275\u0275elementStart(0, "app-dynamic-form", 10);
    \u0275\u0275listener("formSubmit", function AssetCounterTypeSectionComponent_Conditional_11_Template_app_dynamic_form_formSubmit_0_listener($event) {
      \u0275\u0275restoreView(_r3);
      const ctx_r1 = \u0275\u0275nextContext();
      return \u0275\u0275resetView(ctx_r1.onSubmit($event));
    });
    \u0275\u0275elementEnd();
  }
  if (rf & 2) {
    const ctx_r1 = \u0275\u0275nextContext();
    \u0275\u0275property("fields", ctx_r1.formFields)("actions", ctx_r1.actions);
  }
}
function AssetCounterTypeSectionComponent_Conditional_12_Template(rf, ctx) {
  if (rf & 1) {
    \u0275\u0275element(0, "app-grid", 8);
  }
  if (rf & 2) {
    const ctx_r1 = \u0275\u0275nextContext();
    \u0275\u0275property("data", ctx_r1.assetDetails())("columns", ctx_r1.columns)("showGridLines", false)("hideHeader", true);
  }
}
var AssetCounterTypeSectionComponent = class _AssetCounterTypeSectionComponent extends EntitySectionBaseComponent {
  counterType = input("hours", ...ngDevMode ? [{ debugName: "counterType" }] : []);
  entitiesService = inject(EntitiesService);
  measurementsService = inject(MeasurementUnitsService);
  assetLocation = signal(null, ...ngDevMode ? [{ debugName: "assetLocation" }] : []);
  formatDateString(dateString) {
    if (!isDefined(dateString))
      return "";
    try {
      const date = new Date(dateString);
      if (Number.isNaN(date.getTime())) {
        return "Invalid Date";
      }
      return date.toLocaleDateString(void 0, {
        weekday: "long",
        day: "numeric",
        month: "long"
      });
    } catch (e) {
      console.error("Error parsing date:", e);
      return "Invalid Date";
    }
  }
  formatCounterValue(value) {
    if (this.counterType() === "odometer") {
      return this.measurementsService.fromBackend(MeasurementUnitType.DISTANCE, value, 1);
    }
    if (this.counterType() === "hours") {
      return Math.round(value * 10) / 10;
    }
    return value;
  }
  getCounterLabel() {
    return this.counterType() === "odometer" ? "Odometer" : "Engine Hours";
  }
  assetDetails = computed(() => {
    const assetDetails = this.entity();
    if (!isDefined(assetDetails))
      return [];
    const location = this.assetLocation();
    if (isEmpty(location?.["counters"]))
      return [];
    const rawValue = location?.["counters"]?.[this.counterType()] ?? 0;
    const value = this.formatCounterValue(rawValue);
    const formattedDate = this.formatDateString(location?.["date"]);
    return [
      {
        key: this.getCounterLabel(),
        value
      },
      {
        key: "Date",
        value: formattedDate
      }
    ];
  }, ...ngDevMode ? [{ debugName: "assetDetails" }] : []);
  title = computed(() => this.counterType() === "odometer" ? "Odometer" : "Engine Hours", ...ngDevMode ? [{ debugName: "title" }] : []);
  constructor() {
    super();
    this.columns = [
      { field: "key", header: "", transform: "uppercase" },
      { field: "value", header: "" }
    ];
    let previousEntityId;
    effect(() => {
      const assetDetails = this.entity();
      const currentEntityId = assetDetails?.id;
      if (isDefined(currentEntityId) && currentEntityId !== previousEntityId) {
        previousEntityId = currentEntityId;
        this.loadAssetLocation(currentEntityId);
      }
    });
    effect(() => {
      const assetDetails = this.entity();
      const location = this.assetLocation();
      if (assetDetails && location) {
        this.updateFormFields();
      }
    });
  }
  loadAssetLocation(assetId) {
    this.assetLocation.set(null);
    this.entitiesService.getAssetLocation(assetId).pipe(takeUntilDestroyed(this.destroyRef)).subscribe((location) => {
      this.assetLocation.set(location);
    });
  }
  updateFormFields() {
    const location = this.assetLocation();
    let value = location?.["counters"]?.[this.counterType()] ?? 0;
    const dateString = location?.["date"];
    const initialDateValue = isDefined(dateString) ? new Date(dateString) : null;
    if (this.counterType() === "odometer") {
      value = this.measurementsService.fromBackend(MeasurementUnitType.DISTANCE, value, 1);
    }
    if (this.counterType() === "hours") {
      value = Math.round(value * 10) / 10;
    }
    this.formFields = [
      createNumberField("value", this.counterType() === "odometer" ? "Odometer" : "Engine Hours", value, {
        name: "value",
        props: {
          suffix: this.counterType() === "odometer" ? this.measurementsService.getUnitConfig(MeasurementUnitType.DISTANCE) : "hours"
        }
      }),
      createDateField("date", "Date", initialDateValue, {
        name: "date",
        props: {
          showTime: true,
          timeOnly: false,
          dateFormat: "mm/dd/yy",
          hourFormat: "24",
          showIcon: true,
          appendTo: "body"
        }
      })
    ];
  }
  submitChanges(formData) {
    const asset = this.entity();
    if (isNullOrUndefined(asset))
      return;
    this.entitiesService.updateAsset(asset.id, this.transformFormData(formData)).pipe(takeUntilDestroyed(this.destroyRef), finalize(() => this.isSubmitting.set(false))).subscribe({
      next: () => {
        this.isFormEditable.set(false);
        this.broadcastService.broadcast("entity-updated", {
          entityType: "asset",
          entityId: asset.id
        });
      },
      error: () => {
        this.isFormEditable.set(true);
      }
    });
  }
  onFormValueChange(formData) {
    const transformedData = this.transformFormData(formData);
    this.formValueChange.emit(transformedData);
  }
  transformFormData(formData) {
    const transformedData = __spreadValues({}, formData);
    if (isDefined(transformedData["value"])) {
      if (this.counterType() === "odometer") {
        transformedData["value"] = this.measurementsService.toBackend(MeasurementUnitType.DISTANCE, Number(transformedData["value"]), 1);
      }
      if (this.counterType() === "hours") {
        transformedData["value"] = Math.round(Number(transformedData["value"]) * 10) / 10;
      }
    }
    return transformedData;
  }
  static \u0275fac = function AssetCounterTypeSectionComponent_Factory(__ngFactoryType__) {
    return new (__ngFactoryType__ || _AssetCounterTypeSectionComponent)();
  };
  static \u0275cmp = /* @__PURE__ */ \u0275\u0275defineComponent({ type: _AssetCounterTypeSectionComponent, selectors: [["app-asset-counter-type-section"]], inputs: { counterType: [1, "counterType"] }, features: [\u0275\u0275InheritDefinitionFeature], decls: 13, vars: 10, consts: [[1, "card", "pt-2"], [1, "mb-4", "p-2", "flex", "justify-start", "items-center"], [1, "pi", "pi-tag", "!text-[2.5rem]", 3, "ngClass"], [1, "pl-6", "flex-1"], [1, "flex", "justify-between", "items-center"], [1, "text-xl", "font-semibold", "m-0"], [1, "icon-light"], [3, "fields", "actions"], ["tableStyleClass", "info-display !w-auto", 3, "data", "columns", "showGridLines", "hideHeader"], [1, "pi", "pi-pen-to-square", "action", "hover", "!text-2xl", 3, "click", "keydown.enter"], [3, "formSubmit", "fields", "actions"]], template: function AssetCounterTypeSectionComponent_Template(rf, ctx) {
    if (rf & 1) {
      \u0275\u0275elementStart(0, "div", 0)(1, "div", 1);
      \u0275\u0275element(2, "span", 2);
      \u0275\u0275elementStart(3, "div", 3)(4, "div", 4)(5, "h2", 5);
      \u0275\u0275text(6);
      \u0275\u0275elementEnd();
      \u0275\u0275conditionalCreate(7, AssetCounterTypeSectionComponent_Conditional_7_Template, 2, 1, "div", 6);
      \u0275\u0275elementEnd();
      \u0275\u0275elementStart(8, "span");
      \u0275\u0275text(9);
      \u0275\u0275pipe(10, "lowercase");
      \u0275\u0275elementEnd()()();
      \u0275\u0275conditionalCreate(11, AssetCounterTypeSectionComponent_Conditional_11_Template, 1, 2, "app-dynamic-form", 7)(12, AssetCounterTypeSectionComponent_Conditional_12_Template, 1, 4, "app-grid", 8);
      \u0275\u0275elementEnd();
    }
    if (rf & 2) {
      \u0275\u0275advance(2);
      \u0275\u0275property("ngClass", \u0275\u0275pureFunction1(8, _c011, ctx.isFormEditable()));
      \u0275\u0275attribute("aria-label", "tag icon");
      \u0275\u0275advance(4);
      \u0275\u0275textInterpolate(ctx.title());
      \u0275\u0275advance();
      \u0275\u0275conditional(!ctx.isFormEditable() ? 7 : -1);
      \u0275\u0275advance(2);
      \u0275\u0275textInterpolate1("Adjust the ", \u0275\u0275pipeBind1(10, 6, ctx.title()), " below");
      \u0275\u0275advance(2);
      \u0275\u0275conditional(ctx.isFormEditable() ? 11 : 12);
    }
  }, dependencies: [CommonModule, NgClass, ButtonModule, GridComponent, DynamicFormComponent, LowerCasePipe], encapsulation: 2 });
};
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(AssetCounterTypeSectionComponent, [{
    type: Component,
    args: [{ selector: "app-asset-counter-type-section", imports: [CommonModule, ButtonModule, GridComponent, DynamicFormComponent], template: `<div class="card pt-2">
  <div class="mb-4 p-2 flex justify-start items-center">
    <span
      class="pi pi-tag !text-[2.5rem]"
      [ngClass]="{ 'icon-primary': isFormEditable() }"
      [attr.aria-label]="'tag icon'"
    ></span>

    <div class="pl-6 flex-1">
      <div class="flex justify-between items-center">
        <h2 class="text-xl font-semibold m-0">{{ title() }}</h2>
        @if (!isFormEditable()) {
          <div class="icon-light">
            <span
              class="pi pi-pen-to-square action hover !text-2xl"
              [attr.aria-label]="'Edit'"
              (click)="onEdit()"
              (keydown.enter)="onEdit()"
            ></span>
          </div>
        }
      </div>
      <span>Adjust the {{ title() | lowercase }} below</span>
    </div>
  </div>
  @if (isFormEditable()) {
    <app-dynamic-form
      [fields]="formFields"
      [actions]="actions"
      (formSubmit)="onSubmit($event)"
    >
    </app-dynamic-form>
  } @else {
    <app-grid
      [data]="assetDetails()"
      [columns]="columns"
      [showGridLines]="false"
      [hideHeader]="true"
      tableStyleClass="info-display !w-auto"
    ></app-grid>
  }
</div>
` }]
  }], () => [], { counterType: [{ type: Input, args: [{ isSignal: true, alias: "counterType", required: false }] }] });
})();
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && \u0275setClassDebugInfo(AssetCounterTypeSectionComponent, { className: "AssetCounterTypeSectionComponent", filePath: "src/app/features/administration/components/assets/asset-counter-type-section/asset-counter-type-section.component.ts", lineNumber: 40 });
})();

// src/app/features/administration/components/shared/info-section/info-section.component.ts
var _c012 = (a0) => ({ "icon-primary": a0 });
function InfoSectionComponent_Conditional_8_Template(rf, ctx) {
  if (rf & 1) {
    const _r1 = \u0275\u0275getCurrentView();
    \u0275\u0275elementStart(0, "div", 6)(1, "span", 9);
    \u0275\u0275listener("click", function InfoSectionComponent_Conditional_8_Template_span_click_1_listener() {
      \u0275\u0275restoreView(_r1);
      const ctx_r1 = \u0275\u0275nextContext();
      return \u0275\u0275resetView(ctx_r1.onEdit());
    })("keydown.enter", function InfoSectionComponent_Conditional_8_Template_span_keydown_enter_1_listener() {
      \u0275\u0275restoreView(_r1);
      const ctx_r1 = \u0275\u0275nextContext();
      return \u0275\u0275resetView(ctx_r1.onEdit());
    });
    \u0275\u0275elementEnd()();
  }
  if (rf & 2) {
    \u0275\u0275advance();
    \u0275\u0275attribute("aria-label", "Edit entity details");
  }
}
function InfoSectionComponent_Conditional_11_Template(rf, ctx) {
  if (rf & 1) {
    const _r3 = \u0275\u0275getCurrentView();
    \u0275\u0275elementStart(0, "app-dynamic-form", 10);
    \u0275\u0275listener("formSubmit", function InfoSectionComponent_Conditional_11_Template_app_dynamic_form_formSubmit_0_listener($event) {
      \u0275\u0275restoreView(_r3);
      const ctx_r1 = \u0275\u0275nextContext();
      return \u0275\u0275resetView(ctx_r1.onSubmit($event));
    })("formValidityChange", function InfoSectionComponent_Conditional_11_Template_app_dynamic_form_formValidityChange_0_listener($event) {
      \u0275\u0275restoreView(_r3);
      const ctx_r1 = \u0275\u0275nextContext();
      return \u0275\u0275resetView(ctx_r1.onFormValidityChange($event));
    })("formValueChange", function InfoSectionComponent_Conditional_11_Template_app_dynamic_form_formValueChange_0_listener($event) {
      \u0275\u0275restoreView(_r3);
      const ctx_r1 = \u0275\u0275nextContext();
      return \u0275\u0275resetView(ctx_r1.onFormValueChange($event));
    });
    \u0275\u0275elementEnd();
  }
  if (rf & 2) {
    const ctx_r1 = \u0275\u0275nextContext();
    \u0275\u0275property("fields", ctx_r1.formFields)("actions", ctx_r1.actions)("hideActions", ctx_r1.createMode());
  }
}
function InfoSectionComponent_Conditional_12_Template(rf, ctx) {
  if (rf & 1) {
    \u0275\u0275element(0, "app-grid", 8);
  }
  if (rf & 2) {
    const ctx_r1 = \u0275\u0275nextContext();
    \u0275\u0275property("data", ctx_r1.entityDetails())("columns", ctx_r1.columns)("showGridLines", false)("hideHeader", true);
  }
}
var InfoSectionComponent = class _InfoSectionComponent extends EntitySectionBaseComponent {
  entitiesService = inject(EntitiesService);
  adminStateService = inject(AdminStateService);
  cacheService = inject(RequestCacheService);
  accountsService = inject(AccountsService);
  cdr = inject(ChangeDetectorRef);
  customFieldsResource = resource({
    params: () => ({ request: this.adminStateService.selectedClient()?.id }),
    loader: ({ params }) => {
      const clientId = params.request;
      if (isNullOrUndefined(clientId)) {
        return firstValueFrom(of([]));
      }
      return firstValueFrom(this.cacheService.getOrFetch(`custom-fields-${clientId}`, () => this.accountsService.getClient(clientId)).pipe(map((client) => {
        const entityDetails = this.entity();
        return [
          ...client?.customFields?.[this.entityType()] ?? [],
          ...(entityDetails?.assetType && client?.customFields?.[entityDetails.assetType.id]) ?? []
        ];
      })));
    }
  });
  entityCustomFields = signal([], ...ngDevMode ? [{ debugName: "entityCustomFields" }] : []);
  entityDetails = computed(() => {
    const entityDetails = this.entity();
    const selectedClient = this.adminStateService.selectedClient();
    if (isNullOrUndefined(entityDetails) || isNullOrUndefined(selectedClient)) {
      return [];
    }
    return this.entityCustomFields().map((field) => ({
      key: field["title"],
      value: entityDetails["fields"]?.[field["id"]] ?? "None"
    }));
  }, ...ngDevMode ? [{ debugName: "entityDetails" }] : []);
  constructor() {
    super();
    this.columns = [
      { field: "key", header: "", transform: "uppercase" },
      { field: "value", header: "" }
    ];
    effect(() => {
      const customFields = this.customFieldsResource.value();
      const entityDetails = this.entity();
      if (customFields && entityDetails) {
        this.entityCustomFields.set(customFields);
        untracked(() => {
          this.updateFormFields();
          this.cdr.detectChanges();
        });
      }
    });
  }
  updateFormFields() {
    const entity = this.entity();
    this.formFields = this.entityCustomFields().map((field) => this.createFormField(field, entity));
  }
  createFormField(field, entity) {
    const fieldValue = entity?.fields?.[field["id"]];
    const formattedValue = this.formatFieldValue(fieldValue);
    switch (field["type"]) {
      case "number":
        return this.createNumberFieldConfig(field, formattedValue);
      case "combo":
        return this.createDropdownFieldConfig(field, formattedValue);
      case "memo":
        return this.createTextAreaFieldConfig(field, formattedValue);
      case "checkbox":
        return this.createToggleSwitchFieldConfig(field, formattedValue);
      case "date":
        return this.createDateFieldConfig(field, entity, false);
      case "datetime":
        return this.createDateFieldConfig(field, entity, true);
      default:
        return this.createTextFieldConfig(field, formattedValue);
    }
  }
  formatFieldValue(fieldValue) {
    if (!isDefined(fieldValue)) {
      return "";
    }
    return typeof fieldValue === "object" ? JSON.stringify(fieldValue) : fieldValue;
  }
  getFieldValidations(field) {
    return field["required"] ? [
      {
        name: "required",
        validator: Validators.required,
        message: `${field["title"]} is required`
      }
    ] : [];
  }
  createNumberFieldConfig(field, formattedValue) {
    return createNumberField(String(field["id"]), String(field["title"]), formattedValue, {
      name: String(field["id"]),
      validations: this.getFieldValidations(field)
    });
  }
  createDropdownFieldConfig(field, formattedValue) {
    return createDropdownField(String(field["id"]), String(field["title"]), field.values?.map((value) => ({
      label: String(value.key),
      value: String(value.value)
    })) ?? [], formattedValue, {
      name: String(field["id"]),
      validations: this.getFieldValidations(field)
    });
  }
  createTextAreaFieldConfig(field, formattedValue) {
    return createTextAreaField(String(field?.id), String(field["title"]), formattedValue, {
      name: String(field?.id),
      validations: this.getFieldValidations(field),
      hint: field["description"]
    });
  }
  createToggleSwitchFieldConfig(field, formattedValue) {
    return createToggleSwitchField(field.id, field.title, formattedValue, {
      name: field.id,
      validations: this.getFieldValidations(field),
      hint: field["description"]
    });
  }
  createDateFieldConfig(field, entity, showTime) {
    return createDateField(field.id, field.title, entity?.fields?.[field.id], {
      name: field.id,
      validations: this.getFieldValidations(field),
      hint: field["hint"],
      props: {
        showTime,
        timeOnly: false,
        dateFormat: "mm/dd/yy",
        hourFormat: "24",
        showIcon: true,
        appendTo: "body"
      }
    });
  }
  createTextFieldConfig(field, formattedValue) {
    return createTextField(String(field["id"]), String(field["title"]), formattedValue, {
      name: String(field["id"]),
      validations: this.getFieldValidations(field)
    });
  }
  getUpdateMethod() {
    switch (this.entityType()) {
      case "asset":
        return (id, payload) => this.entitiesService.updateAsset(id, {
          fields: payload
        });
      case "simcard":
        return (id, payload) => this.entitiesService.updateSimCard(id, {
          fields: payload
        });
      case "device":
        return (id, payload) => this.entitiesService.updateDevice(id, {
          fields: payload
        });
      case "assettag":
        return (id, payload) => this.entitiesService.updateAssetTag(id, payload);
      default:
        throw new Error(`Update for '${this.entityType()}' not yet supported`);
    }
  }
  onFormValueChange(formData) {
    const transformedData = { fields: formData };
    this.formValueChange.emit(transformedData);
  }
  static \u0275fac = function InfoSectionComponent_Factory(__ngFactoryType__) {
    return new (__ngFactoryType__ || _InfoSectionComponent)();
  };
  static \u0275cmp = /* @__PURE__ */ \u0275\u0275defineComponent({ type: _InfoSectionComponent, selectors: [["app-info-section"]], features: [\u0275\u0275InheritDefinitionFeature], decls: 13, vars: 8, consts: [[1, "card", "pt-2"], [1, "mb-4", "p-2", "flex", "justify-start", "items-center"], [1, "custom-icon-svg", "w-[2.5rem]", "h-[2.5rem]", 3, "ngClass"], [1, "pl-6", "flex-1"], [1, "flex", "justify-between", "items-center"], [1, "text-xl", "font-semibold", "m-0"], [1, "icon-light"], [3, "fields", "actions", "hideActions"], ["tableStyleClass", "info-display !w-auto", 3, "data", "columns", "showGridLines", "hideHeader"], [1, "pi", "pi-pen-to-square", "action", "hover", "!text-2xl", 3, "click", "keydown.enter"], [3, "formSubmit", "formValidityChange", "formValueChange", "fields", "actions", "hideActions"]], template: function InfoSectionComponent_Template(rf, ctx) {
    if (rf & 1) {
      \u0275\u0275elementStart(0, "div", 0)(1, "div", 1);
      \u0275\u0275namespaceSVG();
      \u0275\u0275elementStart(2, "svg", 2);
      \u0275\u0275element(3, "use");
      \u0275\u0275elementEnd();
      \u0275\u0275namespaceHTML();
      \u0275\u0275elementStart(4, "div", 3)(5, "div", 4)(6, "h2", 5);
      \u0275\u0275text(7, "Information");
      \u0275\u0275elementEnd();
      \u0275\u0275conditionalCreate(8, InfoSectionComponent_Conditional_8_Template, 2, 1, "div", 6);
      \u0275\u0275elementEnd();
      \u0275\u0275elementStart(9, "span");
      \u0275\u0275text(10, "The following supplemental information is required.");
      \u0275\u0275elementEnd()()();
      \u0275\u0275conditionalCreate(11, InfoSectionComponent_Conditional_11_Template, 1, 3, "app-dynamic-form", 7);
      \u0275\u0275conditionalCreate(12, InfoSectionComponent_Conditional_12_Template, 1, 4, "app-grid", 8);
      \u0275\u0275elementEnd();
    }
    if (rf & 2) {
      \u0275\u0275advance(2);
      \u0275\u0275property("ngClass", \u0275\u0275pureFunction1(6, _c012, ctx.isFormEditable()));
      \u0275\u0275attribute("aria-label", "Book open icon");
      \u0275\u0275advance();
      \u0275\u0275attribute("href", "assets/sprites/sprite.svg#book-open-solid");
      \u0275\u0275advance(5);
      \u0275\u0275conditional(!ctx.isFormEditable() && !ctx.createMode() ? 8 : -1);
      \u0275\u0275advance(3);
      \u0275\u0275conditional(ctx.isFormEditable() || ctx.createMode() && ctx.formFields.length ? 11 : -1);
      \u0275\u0275advance();
      \u0275\u0275conditional(!ctx.isFormEditable() && !ctx.createMode() ? 12 : -1);
    }
  }, dependencies: [CommonModule, NgClass, ButtonModule, GridComponent, DynamicFormComponent], encapsulation: 2 });
};
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(InfoSectionComponent, [{
    type: Component,
    args: [{ selector: "app-info-section", imports: [CommonModule, ButtonModule, GridComponent, DynamicFormComponent], template: `<div class="card pt-2">
  <div class="mb-4 p-2 flex justify-start items-center">
    <svg
      class="custom-icon-svg w-[2.5rem] h-[2.5rem]"
      [ngClass]="{ 'icon-primary': isFormEditable() }"
      [attr.aria-label]="'Book open icon'"
    >
      <use [attr.href]="'assets/sprites/sprite.svg#book-open-solid'"></use>
    </svg>

    <div class="pl-6 flex-1">
      <div class="flex justify-between items-center">
        <h2 class="text-xl font-semibold m-0">Information</h2>
        @if (!isFormEditable() && !createMode()) {
          <div class="icon-light">
            <span
              class="pi pi-pen-to-square action hover !text-2xl"
              [attr.aria-label]="'Edit entity details'"
              (click)="onEdit()"
              (keydown.enter)="onEdit()"
            ></span>
          </div>
        }
      </div>
      <span>The following supplemental information is required.</span>
    </div>
  </div>
  @if (isFormEditable() || (createMode() && formFields.length)) {
    <app-dynamic-form
      [fields]="formFields"
      [actions]="actions"
      [hideActions]="createMode()"
      (formSubmit)="onSubmit($event)"
      (formValidityChange)="onFormValidityChange($event)"
      (formValueChange)="onFormValueChange($event)"
    >
    </app-dynamic-form>
  }
  @if (!isFormEditable() && !createMode()) {
    <app-grid
      [data]="entityDetails()"
      [columns]="columns"
      [showGridLines]="false"
      [hideHeader]="true"
      tableStyleClass="info-display !w-auto"
    ></app-grid>
  }
</div>
` }]
  }], () => [], null);
})();
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && \u0275setClassDebugInfo(InfoSectionComponent, { className: "InfoSectionComponent", filePath: "src/app/features/administration/components/shared/info-section/info-section.component.ts", lineNumber: 55 });
})();

// src/app/features/administration/factories/asset-section-config.factory.ts
var AssetSectionConfigFactory = class _AssetSectionConfigFactory {
  /**
   * Create sections for asset information
   */
  createAssetInformationSections(asset) {
    return [
      {
        id: "asset-details",
        title: "Asset Details",
        component: AssetDetailsSectionComponent,
        componentInputs: { entity: asset },
        category: "information",
        order: 10
      },
      {
        id: "asset-categories",
        title: "Categories",
        component: AssetCategoriesSectionComponent,
        componentInputs: { entity: asset },
        category: "information",
        order: 20
      },
      {
        id: "asset-information",
        title: "Asset Information",
        component: InfoSectionComponent,
        componentInputs: {
          entity: asset,
          dataPath: "customFields",
          entityType: "asset"
        },
        category: "information",
        order: 30
      },
      {
        id: "asset-contacts",
        title: "Contacts",
        component: AssetContactsSectionComponent,
        componentInputs: { entity: asset },
        category: "information",
        order: 40
      }
    ];
  }
  /**
   * Create sections for asset settings
   */
  createAssetSettingsSections(asset) {
    return [
      {
        id: "profiles",
        title: "Profiles",
        component: AssetProfilesSectionComponent,
        componentInputs: { entity: asset },
        category: "settings",
        order: 10
      },
      {
        id: "asset-sharing",
        title: "Sharing",
        component: AssetSharingSectionComponent,
        componentInputs: { entity: asset },
        category: "settings",
        order: 20
      },
      {
        id: "asset-odometer",
        title: "Odometer",
        component: AssetCounterTypeSectionComponent,
        componentInputs: { entity: asset, counterType: "odometer" },
        category: "settings",
        order: 30
      },
      {
        id: "asset-hours",
        title: "Engine Hours",
        component: AssetCounterTypeSectionComponent,
        componentInputs: { entity: asset, counterType: "hours" },
        category: "settings",
        order: 40
      },
      {
        id: "asset-reminders",
        title: "Reminders",
        component: AssetRemindersSectionComponent,
        componentInputs: { entity: asset },
        category: "settings",
        order: 50
      },
      {
        id: "asset-default-labels",
        title: "Default Labels",
        component: AssetLabelsSectionComponent,
        componentInputs: { entity: asset },
        category: "settings",
        order: 60
      }
    ];
  }
  /**
   * Create sections for asset events
   */
  createAssetEventsSections(asset) {
    return [
      {
        id: "asset-event-triggers",
        title: "Event Triggers",
        component: AssetEventTriggersSectionComponent,
        componentInputs: { entity: asset },
        category: "events",
        order: 10
      },
      {
        id: "asset-curfew-events",
        title: "Working Hours",
        component: AssetCurfewEventsSectionComponent,
        componentInputs: { entity: asset },
        category: "events",
        order: 20
      },
      {
        id: "asset-analog-triggers",
        title: "Analog Triggers",
        component: AssetAnalogTriggersSectionComponent,
        componentInputs: { entity: asset },
        category: "events",
        order: 30
      }
      /*      {
        id: 'asset-zone-triggers',
        title: 'Geographic Triggers',
        component: AssetZonesSectionComponent,
        componentInputs: { entity: asset },
        category: 'events',
        order: 40,
      }, */
    ];
  }
  /**
   * Create sections for asset changes
   * @param asset The asset object to display in the section
   * @returns An array of AdminDetailSection objects representing the asset changes sections
   */
  createChangesSection(asset) {
    return [
      {
        id: "asset-changes",
        title: "Changes",
        component: FeedSectionComponent,
        componentInputs: {
          entity: asset
        },
        category: "feed",
        order: 10
      }
    ];
  }
  /**
   * Create all asset sections in one call
   */
  createAllAssetSections(asset) {
    return [
      ...this.createAssetInformationSections(asset),
      ...this.createAssetSettingsSections(asset),
      ...this.createAssetEventsSections(asset),
      ...this.createChangesSection(asset)
    ];
  }
  static \u0275fac = function AssetSectionConfigFactory_Factory(__ngFactoryType__) {
    return new (__ngFactoryType__ || _AssetSectionConfigFactory)();
  };
  static \u0275prov = /* @__PURE__ */ \u0275\u0275defineInjectable({ token: _AssetSectionConfigFactory, factory: _AssetSectionConfigFactory.\u0275fac, providedIn: "root" });
};
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(AssetSectionConfigFactory, [{
    type: Injectable,
    args: [{
      providedIn: "root"
    }]
  }], null, null);
})();

// src/app/features/administration/components/details-accordion-container/details-accordion-container.component.ts
var _forTrack02 = ($index, $item) => $item.key;
var _forTrack1 = ($index, $item) => $item.id;
function DetailsAccordionContainerComponent_For_3_For_6_ng_container_0_Template(rf, ctx) {
  if (rf & 1) {
    \u0275\u0275elementContainer(0);
  }
}
function DetailsAccordionContainerComponent_For_3_For_6_Conditional_1_Template(rf, ctx) {
  if (rf & 1) {
    \u0275\u0275element(0, "p-divider");
  }
}
function DetailsAccordionContainerComponent_For_3_For_6_Template(rf, ctx) {
  if (rf & 1) {
    \u0275\u0275template(0, DetailsAccordionContainerComponent_For_3_For_6_ng_container_0_Template, 1, 0, "ng-container", 4);
    \u0275\u0275conditionalCreate(1, DetailsAccordionContainerComponent_For_3_For_6_Conditional_1_Template, 1, 0, "p-divider");
  }
  if (rf & 2) {
    const section_r1 = ctx.$implicit;
    const \u0275$index_15_r2 = ctx.$index;
    const \u0275$count_15_r3 = ctx.$count;
    const ctx_r3 = \u0275\u0275nextContext(2);
    \u0275\u0275property("ngComponentOutlet", section_r1.component)("ngComponentOutletInputs", ctx_r3.getSectionInputs(section_r1));
    \u0275\u0275advance();
    \u0275\u0275conditional(!(\u0275$index_15_r2 === \u0275$count_15_r3 - 1) ? 1 : -1);
  }
}
function DetailsAccordionContainerComponent_For_3_Template(rf, ctx) {
  if (rf & 1) {
    \u0275\u0275elementStart(0, "p-accordion-panel", 2)(1, "p-accordion-header")(2, "span", 3);
    \u0275\u0275text(3);
    \u0275\u0275elementEnd()();
    \u0275\u0275elementStart(4, "p-accordion-content");
    \u0275\u0275repeaterCreate(5, DetailsAccordionContainerComponent_For_3_For_6_Template, 2, 3, null, null, _forTrack1);
    \u0275\u0275elementEnd()();
  }
  if (rf & 2) {
    const category_r5 = ctx.$implicit;
    const ctx_r3 = \u0275\u0275nextContext();
    \u0275\u0275property("value", category_r5.key);
    \u0275\u0275advance(3);
    \u0275\u0275textInterpolate(category_r5.label);
    \u0275\u0275advance(2);
    \u0275\u0275repeater(ctx_r3.getSections(category_r5.key));
  }
}
var DetailsAccordionContainerComponent = class _DetailsAccordionContainerComponent {
  sections = input([], ...ngDevMode ? [{ debugName: "sections" }] : []);
  entity = input(null, ...ngDevMode ? [{ debugName: "entity" }] : []);
  title = input("Details", ...ngDevMode ? [{ debugName: "title" }] : []);
  subtitle = input("", ...ngDevMode ? [{ debugName: "subtitle" }] : []);
  allowModeToggle = input(true, ...ngDevMode ? [{ debugName: "allowModeToggle" }] : []);
  initialMode = input("view", ...ngDevMode ? [{ debugName: "initialMode" }] : []);
  layout = input(null, ...ngDevMode ? [{ debugName: "layout" }] : []);
  entityChange = output();
  // Services
  unsavedChangesService = inject(UnsavedChangesService);
  // Accordion state management to preserve expansion state during data updates
  accordionValue = signal("information", ...ngDevMode ? [{ debugName: "accordionValue" }] : []);
  _sectionInputsCache = /* @__PURE__ */ new Map();
  constructor() {
    effect(() => {
      this.entity();
      const sections = this.sections();
      this._clearStaleCache(sections);
    });
    effect(() => {
      const layout = this.layout();
      const defaultCategory = layout?.defaultExpandedCategory;
      if (isDefined(defaultCategory) && defaultCategory.trim() !== "") {
        this.accordionValue.set(defaultCategory);
      }
    });
  }
  /**
   * Clear cache entries for sections that no longer exist
   */
  _clearStaleCache(currentSections) {
    const currentSectionIds = new Set(currentSections.map((s) => s.id));
    const cacheKeys = Array.from(this._sectionInputsCache.keys());
    for (const key of cacheKeys) {
      const sectionId = key.replace("_inputs", "");
      if (!currentSectionIds.has(sectionId)) {
        this._sectionInputsCache.delete(key);
      }
    }
  }
  /**
   * Handle accordion panel open/close events
   */
  async handleAccordionChange(value) {
    const canProceed = await this.unsavedChangesService.checkUnsavedChanges();
    if (canProceed) {
      this.accordionValue.set(value);
    }
  }
  // Computed properties for sections by category
  informationSections = computed(() => this.visibleSections().filter((s) => s.category === "information" || isNullOrUndefined(s.category)).sort((a, b) => (a.order ?? 0) - (b.order ?? 0)), ...ngDevMode ? [{ debugName: "informationSections" }] : []);
  settingsSections = computed(() => this.visibleSections().filter((s) => s.category === "settings").sort((a, b) => (a.order ?? 0) - (b.order ?? 0)), ...ngDevMode ? [{ debugName: "settingsSections" }] : []);
  statisticsSections = computed(() => this.visibleSections().filter((s) => s.category === "statistics").sort((a, b) => (a.order ?? 0) - (b.order ?? 0)), ...ngDevMode ? [{ debugName: "statisticsSections" }] : []);
  eventsSections = computed(() => this.visibleSections().filter((s) => s.category === "events").sort((a, b) => (a.order ?? 0) - (b.order ?? 0)), ...ngDevMode ? [{ debugName: "eventsSections" }] : []);
  customSections = computed(() => this.visibleSections().filter((s) => s.category === "custom").sort((a, b) => (a.order ?? 0) - (b.order ?? 0)), ...ngDevMode ? [{ debugName: "customSections" }] : []);
  ioSections = computed(() => this.visibleSections().filter((s) => s.category === "io").sort((a, b) => (a.order ?? 0) - (b.order ?? 0)), ...ngDevMode ? [{ debugName: "ioSections" }] : []);
  accessoriesSections = computed(() => this.visibleSections().filter((s) => s.category === "accessories").sort((a, b) => (a.order ?? 0) - (b.order ?? 0)), ...ngDevMode ? [{ debugName: "accessoriesSections" }] : []);
  feedSections = computed(() => this.visibleSections().filter((s) => s.category === "feed").sort((a, b) => (a.order ?? 0) - (b.order ?? 0)), ...ngDevMode ? [{ debugName: "feedSections" }] : []);
  controlsSections = computed(() => this.visibleSections().filter((s) => s.category === "controls").sort((a, b) => (a.order ?? 0) - (b.order ?? 0)), ...ngDevMode ? [{ debugName: "controlsSections" }] : []);
  assetsSections = computed(() => this.visibleSections().filter((s) => s.category === "assets").sort((a, b) => (a.order ?? 0) - (b.order ?? 0)), ...ngDevMode ? [{ debugName: "assetsSections" }] : []);
  usersSections = computed(() => this.visibleSections().filter((s) => s.category === "users").sort((a, b) => (a.order ?? 0) - (b.order ?? 0)), ...ngDevMode ? [{ debugName: "usersSections" }] : []);
  featureSections = computed(() => this.visibleSections().filter((s) => s.category === "features").sort((a, b) => (a.order ?? 0) - (b.order ?? 0)), ...ngDevMode ? [{ debugName: "featureSections" }] : []);
  customizationSections = computed(() => this.visibleSections().filter((s) => s.category === "customization").sort((a, b) => (a.order ?? 0) - (b.order ?? 0)), ...ngDevMode ? [{ debugName: "customizationSections" }] : []);
  backendSections = computed(() => this.visibleSections().filter((s) => s.category === "backend").sort((a, b) => (a.order ?? 0) - (b.order ?? 0)), ...ngDevMode ? [{ debugName: "backendSections" }] : []);
  visibleSections = computed(() => {
    return this.sections().filter((section) => {
      if (typeof section.visible === "function") {
        return section.visible(this.entity()) === true;
      }
      return section.visible !== false;
    });
  }, ...ngDevMode ? [{ debugName: "visibleSections" }] : []);
  // Computed property for sorted categories based on layout configuration
  sortedCategories = computed(() => {
    const layout = this.layout();
    if (layout?.categories) {
      return layout.categories.filter((category) => {
        if (typeof category.visible === "function") {
          return category.visible(this.entity());
        }
        if (typeof category.visible === "boolean") {
          return category.visible;
        }
        return this.hasSections(category.key);
      }).sort((a, b) => a.order - b.order);
    }
    return this.defaultSectionTypes().filter((type) => this.hasSections(type.key));
  }, ...ngDevMode ? [{ debugName: "sortedCategories" }] : []);
  // Default section types as computed property for fallback
  defaultSectionTypes = computed(() => [
    { key: "information", label: "Information", order: 10 },
    { key: "settings", label: "Settings", order: 20 },
    { key: "events", label: "Events", order: 30 },
    { key: "statistics", label: "Statistics", order: 40 },
    { key: "io", label: "IO", order: 50 },
    { key: "accessories", label: "Accessories", order: 60 },
    { key: "controls", label: "Controls", order: 70 },
    { key: "assets", label: "Assets", order: 80 },
    { key: "users", label: "Users", order: 90 },
    { key: "features", label: "Features", order: 100 },
    { key: "customization", label: "Email Customization", order: 110 },
    { key: "feed", label: "Changes", order: 120 },
    { key: "backend", label: "Backend", order: 130 },
    { key: "custom", label: "Custom", order: 140 }
  ], ...ngDevMode ? [{ debugName: "defaultSectionTypes" }] : []);
  // Generic method to get sections by type
  getSections(type) {
    switch (type) {
      case "information":
        return this.informationSections();
      case "settings":
        return this.settingsSections();
      case "events":
        return this.eventsSections();
      case "statistics":
        return this.statisticsSections();
      case "io":
        return this.ioSections();
      case "accessories":
        return this.accessoriesSections();
      case "controls":
        return this.controlsSections();
      case "feed":
        return this.feedSections();
      case "custom":
        return this.customSections();
      case "assets":
        return this.assetsSections();
      case "users":
        return this.usersSections();
      case "features":
        return this.featureSections();
      case "customization":
        return this.customizationSections();
      case "backend":
        return this.backendSections();
      default:
        return [];
    }
  }
  // Generic method to check if a section type has items
  hasSections(type) {
    const sections = this.getSections(type);
    return isDefined(sections) && sections.length > 0;
  }
  getSectionInputs(section) {
    const key = `${section.id}_inputs`;
    const currentInputs = __spreadProps(__spreadValues({}, section.componentInputs), {
      onEntityChange: (updatedEntity) => {
        this.entityChange.emit(updatedEntity);
      }
    });
    const cachedInputs = this._sectionInputsCache.get(key);
    if (!cachedInputs || this._hasInputsChanged(cachedInputs, currentInputs)) {
      this._sectionInputsCache.set(key, currentInputs);
      return currentInputs;
    }
    return cachedInputs;
  }
  _hasInputsChanged(oldInputs, newInputs) {
    const oldKeys = Object.keys(oldInputs).filter((k) => k !== "onEntityChange");
    const newKeys = Object.keys(newInputs).filter((k) => k !== "onEntityChange");
    if (oldKeys.length !== newKeys.length)
      return true;
    return oldKeys.some((key) => oldInputs[key] !== newInputs[key]);
  }
  static \u0275fac = function DetailsAccordionContainerComponent_Factory(__ngFactoryType__) {
    return new (__ngFactoryType__ || _DetailsAccordionContainerComponent)();
  };
  static \u0275cmp = /* @__PURE__ */ \u0275\u0275defineComponent({ type: _DetailsAccordionContainerComponent, selectors: [["app-details-accordion-container"]], inputs: { sections: [1, "sections"], entity: [1, "entity"], title: [1, "title"], subtitle: [1, "subtitle"], allowModeToggle: [1, "allowModeToggle"], initialMode: [1, "initialMode"], layout: [1, "layout"] }, outputs: { entityChange: "entityChange" }, decls: 4, vars: 2, consts: [[1, "p-3", "bg-surface-card", "rounded-md", "shadow-sm", "h-full", "overflow-auto"], [3, "valueChange", "value", "multiple"], [3, "value"], [1, "uppercase"], [4, "ngComponentOutlet", "ngComponentOutletInputs"]], template: function DetailsAccordionContainerComponent_Template(rf, ctx) {
    if (rf & 1) {
      \u0275\u0275elementStart(0, "div", 0)(1, "p-accordion", 1);
      \u0275\u0275listener("valueChange", function DetailsAccordionContainerComponent_Template_p_accordion_valueChange_1_listener($event) {
        return ctx.handleAccordionChange($event);
      });
      \u0275\u0275repeaterCreate(2, DetailsAccordionContainerComponent_For_3_Template, 7, 2, "p-accordion-panel", 2, _forTrack02);
      \u0275\u0275elementEnd()();
    }
    if (rf & 2) {
      let tmp_1_0;
      \u0275\u0275advance();
      \u0275\u0275property("value", ctx.accordionValue())("multiple", ((tmp_1_0 = ctx.layout()) == null ? null : tmp_1_0.allowMultipleExpanded) ?? false);
      \u0275\u0275advance();
      \u0275\u0275repeater(ctx.sortedCategories());
    }
  }, dependencies: [
    CommonModule,
    NgComponentOutlet,
    AccordionModule,
    Accordion,
    AccordionPanel,
    AccordionHeader,
    AccordionContent,
    DividerModule,
    Divider,
    ButtonModule,
    TooltipModule
  ], encapsulation: 2, changeDetection: 0 });
};
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(DetailsAccordionContainerComponent, [{
    type: Component,
    args: [{ selector: "app-details-accordion-container", imports: [
      CommonModule,
      AccordionModule,
      DividerModule,
      ButtonModule,
      TooltipModule
    ], changeDetection: ChangeDetectionStrategy.OnPush, template: '<!-- details-accordion-container.component.html -->\n<div class="p-3 bg-surface-card rounded-md shadow-sm h-full overflow-auto">\n  <p-accordion\n    [value]="accordionValue()"\n    (valueChange)="handleAccordionChange($event)"\n    [multiple]="layout()?.allowMultipleExpanded ?? false"\n  >\n    <!-- Loop through all section types -->\n    @for (category of sortedCategories(); track category.key) {\n      <p-accordion-panel [value]="category.key">\n        <p-accordion-header>\n          <span class="uppercase">{{ category.label }}</span>\n        </p-accordion-header>\n        <p-accordion-content>\n          @for (\n            section of getSections(category.key);\n            track section.id;\n            let last = $last\n          ) {\n            <ng-container\n              *ngComponentOutlet="\n                section.component;\n                inputs: getSectionInputs(section)\n              "\n            ></ng-container>\n            @if (!last) {\n              <p-divider />\n            }\n          }\n        </p-accordion-content>\n      </p-accordion-panel>\n    }\n  </p-accordion>\n</div>\n' }]
  }], () => [], { sections: [{ type: Input, args: [{ isSignal: true, alias: "sections", required: false }] }], entity: [{ type: Input, args: [{ isSignal: true, alias: "entity", required: false }] }], title: [{ type: Input, args: [{ isSignal: true, alias: "title", required: false }] }], subtitle: [{ type: Input, args: [{ isSignal: true, alias: "subtitle", required: false }] }], allowModeToggle: [{ type: Input, args: [{ isSignal: true, alias: "allowModeToggle", required: false }] }], initialMode: [{ type: Input, args: [{ isSignal: true, alias: "initialMode", required: false }] }], layout: [{ type: Input, args: [{ isSignal: true, alias: "layout", required: false }] }], entityChange: [{ type: Output, args: ["entityChange"] }] });
})();
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && \u0275setClassDebugInfo(DetailsAccordionContainerComponent, { className: "DetailsAccordionContainerComponent", filePath: "src/app/features/administration/components/details-accordion-container/details-accordion-container.component.ts", lineNumber: 33 });
})();

// src/app/features/administration/services/entity/entity-details.state.service.ts
var EntityDetailsStateService = class _EntityDetailsStateService {
  // State signals
  showPanel = signal(false, ...ngDevMode ? [{ debugName: "showPanel" }] : []);
  selectedItem = signal(null, ...ngDevMode ? [{ debugName: "selectedItem" }] : []);
  detailsComponent = signal(null, ...ngDevMode ? [{ debugName: "detailsComponent" }] : []);
  detailsInputs = signal({}, ...ngDevMode ? [{ debugName: "detailsInputs" }] : []);
  isLoading = signal(false, ...ngDevMode ? [{ debugName: "isLoading" }] : []);
  detailsFactory = inject(DetailsComponentFactory);
  broadcastService = inject(BroadcastEventMessageService);
  destroyRef = inject(DestroyRef);
  router = inject(Router);
  injector = inject(Injector);
  selectedItemTitle = computed(() => {
    const item = this.selectedItem();
    if (isNullOrUndefined(item)) {
      return "Details";
    }
    if (isDefined(item["name"]) && isString(item["name"])) {
      return item["name"];
    }
    if (isDefined(item["entityType"]) && isString(item["entityType"])) {
      const formattedType = this.formatEntityType(item["entityType"]);
      return `${formattedType} Details`;
    }
    return "Item Details";
  }, ...ngDevMode ? [{ debugName: "selectedItemTitle" }] : []);
  selectedItemType = computed(() => {
    const item = this.selectedItem();
    return item ? String(item["entityType"]) : "";
  }, ...ngDevMode ? [{ debugName: "selectedItemType" }] : []);
  selectedItemId = computed(() => {
    const item = this.selectedItem();
    return item ? String(item["id"]) : "";
  }, ...ngDevMode ? [{ debugName: "selectedItemId" }] : []);
  // Keep existing methods for backward compatibility
  getSelectedItemTitle() {
    return this.selectedItemTitle();
  }
  getSelectedItemType() {
    return this.selectedItemType();
  }
  getSelectedItemId() {
    return this.selectedItemId();
  }
  constructor() {
    this.broadcastService.on("entity-updated").pipe(takeUntilDestroyed(this.destroyRef)).subscribe((event) => {
      const current = this.selectedItem();
      if (current && current.id === event["data"]?.id) {
        this.refreshSelectedItem(event["data"]);
      }
    });
    this.broadcastService.on("entity-deleted").pipe(takeUntilDestroyed(this.destroyRef)).subscribe((event) => {
      const current = this.selectedItem();
      const eventPayload = event;
      if (current && current.id === eventPayload.entityId) {
        this.closeDetailsPanel();
      }
    });
  }
  /**
   * Refreshes the currently selected item by fetching updated data
   */
  refreshSelectedItem(data) {
    const item = this.selectedItem();
    if (!item)
      return;
    this.selectedItem.set(data);
  }
  /**
   * Soft refresh that updates entity data without affecting UI state like accordion expansion
   * This preserves the current accordion states when refreshing data
   */
  softRefreshSelectedItem(_updatedData) {
    const currentItem = this.selectedItem();
    if (!currentItem)
      return;
    this.isLoading.set(true);
    const entityType = this.selectedItemType();
    const entityId = this.selectedItemId();
    if (entityType && entityId) {
      import("./chunk-ZXMF52GG.js").then(({ EntityDetailsLoaderService }) => {
        const loaderService = this.injector.get(EntityDetailsLoaderService);
        loaderService.softLoadEntityDetailsObservable(entityType, entityId).pipe(takeUntilDestroyed(this.destroyRef)).subscribe({
          next: (completeEntity) => {
            if (isDefined(completeEntity)) {
              this.selectedItem.set(completeEntity);
              const currentInputs = this.detailsInputs();
              if (isDefined(currentInputs)) {
                currentInputs["entity"] = completeEntity;
                this.detailsInputs.set(currentInputs);
              } else {
                this.detailsInputs.set({ entity: completeEntity });
              }
            }
            this.isLoading.set(false);
          },
          error: () => this.isLoading.set(false)
        });
      }).catch(() => this.isLoading.set(false));
    } else {
      this.isLoading.set(false);
    }
  }
  /**
   * Computed property to track if we're doing a soft refresh
   * (loading while an item is selected - shows subtle indicator instead of full loader)
   */
  isSoftRefreshing = computed(() => this.isLoading() && this.selectedItem() !== null, ...ngDevMode ? [{ debugName: "isSoftRefreshing" }] : []);
  /**
   * Opens the details panel with the specified item and component
   */
  openDetailsPanel(item, componentType) {
    this.selectedItem.set(item);
    const component = componentType || this.detailsFactory.getDetailsComponent(String(item["entityType"]));
    this.detailsComponent.set(component);
    this.detailsInputs.set({ entity: item });
    this.showPanel.set(true);
  }
  /**
   * Closes the details panel (UI state only)
   */
  closeDetailsPanel() {
    this.showPanel.set(false);
    this.selectedItem.set(null);
    this.detailsComponent.set(null);
    this.detailsInputs.set({});
  }
  /**
   * Format entity type string for display
   * @param type Raw entity type string
   * @returns Formatted entity type
   */
  formatEntityType(type) {
    if (!type)
      return "Item";
    return type.replace(/[-_]/g, " ").replace(/\w\S*/g, (word) => {
      return word.charAt(0).toUpperCase() + word.substring(1).toLowerCase();
    });
  }
  updateEntity(updatedEntity) {
    const updatedCopy = __spreadValues({}, updatedEntity);
    this.selectedItem.set(updatedCopy);
    this.detailsInputs.set({ entity: updatedCopy });
    if (this.isLoading()) {
      this.isLoading.set(false);
    }
  }
  static \u0275fac = function EntityDetailsStateService_Factory(__ngFactoryType__) {
    return new (__ngFactoryType__ || _EntityDetailsStateService)();
  };
  static \u0275prov = /* @__PURE__ */ \u0275\u0275defineInjectable({ token: _EntityDetailsStateService, factory: _EntityDetailsStateService.\u0275fac, providedIn: "root" });
};
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(EntityDetailsStateService, [{
    type: Injectable,
    args: [{ providedIn: "root" }]
  }], () => [], null);
})();

// src/app/features/administration/components/assets/asset-details-container/asset-details-container.component.ts
function AssetDetailsContainerComponent_Conditional_0_Conditional_0_Template(rf, ctx) {
  if (rf & 1) {
    const _r1 = \u0275\u0275getCurrentView();
    \u0275\u0275elementStart(0, "app-details-accordion-container", 2);
    \u0275\u0275listener("entityChange", function AssetDetailsContainerComponent_Conditional_0_Conditional_0_Template_app_details_accordion_container_entityChange_0_listener($event) {
      \u0275\u0275restoreView(_r1);
      const ctx_r1 = \u0275\u0275nextContext(2);
      return \u0275\u0275resetView(ctx_r1.onEntityChange($event));
    });
    \u0275\u0275elementEnd();
  }
  if (rf & 2) {
    let tmp_4_0;
    const ctx_r1 = \u0275\u0275nextContext(2);
    \u0275\u0275property("sections", ctx_r1.sections())("entity", ctx_r1.fullAsset())("title", ((tmp_4_0 = ctx_r1.fullAsset()) == null ? null : tmp_4_0.name) || "Asset Details")("allowModeToggle", true);
  }
}
function AssetDetailsContainerComponent_Conditional_0_Conditional_1_Template(rf, ctx) {
  if (rf & 1) {
    \u0275\u0275elementStart(0, "div", 1);
    \u0275\u0275element(1, "p-message", 3);
    \u0275\u0275elementEnd();
  }
}
function AssetDetailsContainerComponent_Conditional_0_Template(rf, ctx) {
  if (rf & 1) {
    \u0275\u0275conditionalCreate(0, AssetDetailsContainerComponent_Conditional_0_Conditional_0_Template, 1, 4, "app-details-accordion-container", 0)(1, AssetDetailsContainerComponent_Conditional_0_Conditional_1_Template, 2, 0, "div", 1);
  }
  if (rf & 2) {
    const ctx_r1 = \u0275\u0275nextContext();
    \u0275\u0275conditional(ctx_r1.fullAsset() ? 0 : 1);
  }
}
var AssetDetailsContainerComponent = class _AssetDetailsContainerComponent {
  entity = input(null, ...ngDevMode ? [{ debugName: "entity" }] : []);
  assetSectionFactory = inject(AssetSectionConfigFactory);
  entityDetailsState = inject(EntityDetailsStateService);
  isLoading = computed(() => this.entityDetailsState.isLoading(), ...ngDevMode ? [{ debugName: "isLoading" }] : []);
  isSoftRefreshing = computed(() => this.entityDetailsState.isSoftRefreshing(), ...ngDevMode ? [{ debugName: "isSoftRefreshing" }] : []);
  isInitialLoading = computed(() => this.isLoading() && !this.isSoftRefreshing() && !this.fullAsset(), ...ngDevMode ? [{ debugName: "isInitialLoading" }] : []);
  fullAsset = computed(() => {
    const entityDetails = this.entityDetailsState.selectedItem();
    if (!entityDetails) {
      return null;
    }
    return entityDetails;
  }, ...ngDevMode ? [{ debugName: "fullAsset" }] : []);
  sections = computed(() => {
    const asset = this.fullAsset();
    if (!asset)
      return [];
    return this.assetSectionFactory.createAllAssetSections(asset);
  }, ...ngDevMode ? [{ debugName: "sections" }] : []);
  error = signal(null, ...ngDevMode ? [{ debugName: "error" }] : []);
  onEntityChange(entity) {
    this.entityDetailsState.updateEntity(entity);
    this.error.set(null);
  }
  static \u0275fac = function AssetDetailsContainerComponent_Factory(__ngFactoryType__) {
    return new (__ngFactoryType__ || _AssetDetailsContainerComponent)();
  };
  static \u0275cmp = /* @__PURE__ */ \u0275\u0275defineComponent({ type: _AssetDetailsContainerComponent, selectors: [["app-asset-details-container"]], inputs: { entity: [1, "entity"] }, decls: 1, vars: 1, consts: [["subtitle", "Asset", "initialMode", "view", 3, "sections", "entity", "title", "allowModeToggle"], [1, "p-4"], ["subtitle", "Asset", "initialMode", "view", 3, "entityChange", "sections", "entity", "title", "allowModeToggle"], ["severity", "info", "text", "No asset details available."]], template: function AssetDetailsContainerComponent_Template(rf, ctx) {
    if (rf & 1) {
      \u0275\u0275conditionalCreate(0, AssetDetailsContainerComponent_Conditional_0_Template, 2, 1);
    }
    if (rf & 2) {
      \u0275\u0275conditional(!ctx.isInitialLoading() && !ctx.error() ? 0 : -1);
    }
  }, dependencies: [
    DetailsAccordionContainerComponent,
    ProgressSpinnerModule,
    MessageModule,
    Message
  ], encapsulation: 2 });
};
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(AssetDetailsContainerComponent, [{
    type: Component,
    args: [{ selector: "app-asset-details-container", imports: [
      DetailsAccordionContainerComponent,
      ProgressSpinnerModule,
      MessageModule
    ], template: `@if (!isInitialLoading() && !error()) {
  @if (fullAsset()) {
    <app-details-accordion-container
      [sections]="sections()"
      [entity]="fullAsset()"
      [title]="fullAsset()?.name || 'Asset Details'"
      subtitle="Asset"
      [allowModeToggle]="true"
      (entityChange)="onEntityChange($event)"
      initialMode="view"
    ></app-details-accordion-container>
  } @else {
    <div class="p-4">
      <p-message severity="info" text="No asset details available."></p-message>
    </div>
  }
}
` }]
  }], null, { entity: [{ type: Input, args: [{ isSignal: true, alias: "entity", required: false }] }] });
})();
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && \u0275setClassDebugInfo(AssetDetailsContainerComponent, { className: "AssetDetailsContainerComponent", filePath: "src/app/features/administration/components/assets/asset-details-container/asset-details-container.component.ts", lineNumber: 19 });
})();

// src/app/features/administration/components/sim-cards/sim-card-details-container/sim-card-details-container.component.ts
function SimCardDetailsContainerComponent_Conditional_0_Conditional_0_Template(rf, ctx) {
  if (rf & 1) {
    const _r1 = \u0275\u0275getCurrentView();
    \u0275\u0275elementStart(0, "app-details-accordion-container", 2);
    \u0275\u0275listener("entityChange", function SimCardDetailsContainerComponent_Conditional_0_Conditional_0_Template_app_details_accordion_container_entityChange_0_listener($event) {
      \u0275\u0275restoreView(_r1);
      const ctx_r1 = \u0275\u0275nextContext(2);
      return \u0275\u0275resetView(ctx_r1.onEntityChange($event));
    });
    \u0275\u0275elementEnd();
  }
  if (rf & 2) {
    let tmp_4_0;
    const ctx_r1 = \u0275\u0275nextContext(2);
    \u0275\u0275property("sections", ctx_r1.sections())("entity", ctx_r1.fullSimCard())("title", ((tmp_4_0 = ctx_r1.fullSimCard()) == null ? null : tmp_4_0.name) || "Sim Card Details")("allowModeToggle", true);
  }
}
function SimCardDetailsContainerComponent_Conditional_0_Conditional_1_Template(rf, ctx) {
  if (rf & 1) {
    \u0275\u0275elementStart(0, "div", 1);
    \u0275\u0275element(1, "p-message", 3);
    \u0275\u0275elementEnd();
  }
}
function SimCardDetailsContainerComponent_Conditional_0_Template(rf, ctx) {
  if (rf & 1) {
    \u0275\u0275conditionalCreate(0, SimCardDetailsContainerComponent_Conditional_0_Conditional_0_Template, 1, 4, "app-details-accordion-container", 0)(1, SimCardDetailsContainerComponent_Conditional_0_Conditional_1_Template, 2, 0, "div", 1);
  }
  if (rf & 2) {
    const ctx_r1 = \u0275\u0275nextContext();
    \u0275\u0275conditional(ctx_r1.fullSimCard() ? 0 : 1);
  }
}
var SimCardDetailsContainerComponent = class _SimCardDetailsContainerComponent {
  entity = input(null, ...ngDevMode ? [{ debugName: "entity" }] : []);
  simCardSectionFactory = inject(SimCardSectionConfigFactory);
  entityDetailsState = inject(EntityDetailsStateService);
  isLoading = computed(() => this.entityDetailsState.isLoading(), ...ngDevMode ? [{ debugName: "isLoading" }] : []);
  isSoftRefreshing = computed(() => this.entityDetailsState.isSoftRefreshing(), ...ngDevMode ? [{ debugName: "isSoftRefreshing" }] : []);
  isInitialLoading = computed(() => this.isLoading() && !this.isSoftRefreshing() && !this.fullSimCard(), ...ngDevMode ? [{ debugName: "isInitialLoading" }] : []);
  fullSimCard = computed(() => {
    const entityDetails = this.entityDetailsState.selectedItem();
    if (!entityDetails) {
      return null;
    }
    return entityDetails;
  }, ...ngDevMode ? [{ debugName: "fullSimCard" }] : []);
  sections = computed(() => {
    const simCard = this.fullSimCard();
    if (!simCard)
      return [];
    return this.simCardSectionFactory.createAllSimCardSections(simCard);
  }, ...ngDevMode ? [{ debugName: "sections" }] : []);
  error = signal(null, ...ngDevMode ? [{ debugName: "error" }] : []);
  onEntityChange(entity) {
    this.entityDetailsState.updateEntity(entity);
    this.error.set(null);
  }
  static \u0275fac = function SimCardDetailsContainerComponent_Factory(__ngFactoryType__) {
    return new (__ngFactoryType__ || _SimCardDetailsContainerComponent)();
  };
  static \u0275cmp = /* @__PURE__ */ \u0275\u0275defineComponent({ type: _SimCardDetailsContainerComponent, selectors: [["app-sim-card-details-container"]], inputs: { entity: [1, "entity"] }, decls: 1, vars: 1, consts: [["subtitle", "Sim Card", "initialMode", "view", 3, "sections", "entity", "title", "allowModeToggle"], [1, "p-4"], ["subtitle", "Sim Card", "initialMode", "view", 3, "entityChange", "sections", "entity", "title", "allowModeToggle"], ["severity", "info", "text", "No sim card details available."]], template: function SimCardDetailsContainerComponent_Template(rf, ctx) {
    if (rf & 1) {
      \u0275\u0275conditionalCreate(0, SimCardDetailsContainerComponent_Conditional_0_Template, 2, 1);
    }
    if (rf & 2) {
      \u0275\u0275conditional(!ctx.isInitialLoading() && !ctx.error() ? 0 : -1);
    }
  }, dependencies: [
    DetailsAccordionContainerComponent,
    ProgressSpinnerModule,
    MessageModule,
    Message
  ], encapsulation: 2 });
};
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(SimCardDetailsContainerComponent, [{
    type: Component,
    args: [{ selector: "app-sim-card-details-container", imports: [
      DetailsAccordionContainerComponent,
      ProgressSpinnerModule,
      MessageModule
    ], template: `@if (!isInitialLoading() && !error()) {
  @if (fullSimCard()) {
    <app-details-accordion-container
      [sections]="sections()"
      [entity]="fullSimCard()"
      [title]="fullSimCard()?.name || 'Sim Card Details'"
      subtitle="Sim Card"
      [allowModeToggle]="true"
      (entityChange)="onEntityChange($event)"
      initialMode="view"
    ></app-details-accordion-container>
  } @else {
    <div class="p-4">
      <p-message
        severity="info"
        text="No sim card details available."
      ></p-message>
    </div>
  }
}
` }]
  }], null, { entity: [{ type: Input, args: [{ isSignal: true, alias: "entity", required: false }] }] });
})();
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && \u0275setClassDebugInfo(SimCardDetailsContainerComponent, { className: "SimCardDetailsContainerComponent", filePath: "src/app/features/administration/components/sim-cards/sim-card-details-container/sim-card-details-container.component.ts", lineNumber: 19 });
})();

// src/app/features/administration/components/asset-tags/asset-tag-details-container/asset-tag-details-container.component.ts
function AssetTagDetailsContainerComponent_Conditional_0_Conditional_0_Template(rf, ctx) {
  if (rf & 1) {
    const _r1 = \u0275\u0275getCurrentView();
    \u0275\u0275elementStart(0, "app-details-accordion-container", 2);
    \u0275\u0275listener("entityChange", function AssetTagDetailsContainerComponent_Conditional_0_Conditional_0_Template_app_details_accordion_container_entityChange_0_listener($event) {
      \u0275\u0275restoreView(_r1);
      const ctx_r1 = \u0275\u0275nextContext(2);
      return \u0275\u0275resetView(ctx_r1.onEntityChange($event));
    });
    \u0275\u0275elementEnd();
  }
  if (rf & 2) {
    let tmp_4_0;
    const ctx_r1 = \u0275\u0275nextContext(2);
    \u0275\u0275property("sections", ctx_r1.sections())("entity", ctx_r1.fullAssetTag())("title", ((tmp_4_0 = ctx_r1.fullAssetTag()) == null ? null : tmp_4_0.name) || "Asset Tag Details")("allowModeToggle", true);
  }
}
function AssetTagDetailsContainerComponent_Conditional_0_Conditional_1_Template(rf, ctx) {
  if (rf & 1) {
    \u0275\u0275elementStart(0, "div", 1);
    \u0275\u0275element(1, "p-message", 3);
    \u0275\u0275elementEnd();
  }
}
function AssetTagDetailsContainerComponent_Conditional_0_Template(rf, ctx) {
  if (rf & 1) {
    \u0275\u0275conditionalCreate(0, AssetTagDetailsContainerComponent_Conditional_0_Conditional_0_Template, 1, 4, "app-details-accordion-container", 0)(1, AssetTagDetailsContainerComponent_Conditional_0_Conditional_1_Template, 2, 0, "div", 1);
  }
  if (rf & 2) {
    const ctx_r1 = \u0275\u0275nextContext();
    \u0275\u0275conditional(ctx_r1.fullAssetTag() ? 0 : 1);
  }
}
var AssetTagDetailsContainerComponent = class _AssetTagDetailsContainerComponent {
  entity = input(null, ...ngDevMode ? [{ debugName: "entity" }] : []);
  assetTagSectionFactory = inject(AssetTagSectionConfigFactory);
  entityDetailsState = inject(EntityDetailsStateService);
  isLoading = computed(() => this.entityDetailsState.isLoading(), ...ngDevMode ? [{ debugName: "isLoading" }] : []);
  isSoftRefreshing = computed(() => this.entityDetailsState.isSoftRefreshing(), ...ngDevMode ? [{ debugName: "isSoftRefreshing" }] : []);
  isInitialLoading = computed(() => this.isLoading() && !this.isSoftRefreshing() && !this.fullAssetTag(), ...ngDevMode ? [{ debugName: "isInitialLoading" }] : []);
  fullAssetTag = computed(() => {
    const entityDetails = this.entityDetailsState.selectedItem();
    if (!entityDetails) {
      return null;
    }
    return entityDetails;
  }, ...ngDevMode ? [{ debugName: "fullAssetTag" }] : []);
  sections = computed(() => {
    const assetTag = this.fullAssetTag();
    if (!assetTag)
      return [];
    return this.assetTagSectionFactory.createAllAssetTagSections(assetTag);
  }, ...ngDevMode ? [{ debugName: "sections" }] : []);
  error = signal(null, ...ngDevMode ? [{ debugName: "error" }] : []);
  onEntityChange(entity) {
    this.entityDetailsState.updateEntity(entity);
    this.error.set(null);
  }
  static \u0275fac = function AssetTagDetailsContainerComponent_Factory(__ngFactoryType__) {
    return new (__ngFactoryType__ || _AssetTagDetailsContainerComponent)();
  };
  static \u0275cmp = /* @__PURE__ */ \u0275\u0275defineComponent({ type: _AssetTagDetailsContainerComponent, selectors: [["app-asset-tag-details-container"]], inputs: { entity: [1, "entity"] }, decls: 1, vars: 1, consts: [["subtitle", "Asset Tag", "initialMode", "view", 3, "sections", "entity", "title", "allowModeToggle"], [1, "p-4"], ["subtitle", "Asset Tag", "initialMode", "view", 3, "entityChange", "sections", "entity", "title", "allowModeToggle"], ["severity", "info", "text", "No asset tag details available."]], template: function AssetTagDetailsContainerComponent_Template(rf, ctx) {
    if (rf & 1) {
      \u0275\u0275conditionalCreate(0, AssetTagDetailsContainerComponent_Conditional_0_Template, 2, 1);
    }
    if (rf & 2) {
      \u0275\u0275conditional(!ctx.isInitialLoading() && !ctx.error() ? 0 : -1);
    }
  }, dependencies: [
    DetailsAccordionContainerComponent,
    ProgressSpinnerModule,
    MessageModule,
    Message
  ], encapsulation: 2 });
};
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(AssetTagDetailsContainerComponent, [{
    type: Component,
    args: [{ selector: "app-asset-tag-details-container", imports: [
      DetailsAccordionContainerComponent,
      ProgressSpinnerModule,
      MessageModule
    ], template: `@if (!isInitialLoading() && !error()) {
  @if (fullAssetTag()) {
    <app-details-accordion-container
      [sections]="sections()"
      [entity]="fullAssetTag()"
      [title]="fullAssetTag()?.name || 'Asset Tag Details'"
      subtitle="Asset Tag"
      [allowModeToggle]="true"
      (entityChange)="onEntityChange($event)"
      initialMode="view"
    ></app-details-accordion-container>
  } @else {
    <div class="p-4">
      <p-message
        severity="info"
        text="No asset tag details available."
      ></p-message>
    </div>
  }
}
` }]
  }], null, { entity: [{ type: Input, args: [{ isSignal: true, alias: "entity", required: false }] }] });
})();
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && \u0275setClassDebugInfo(AssetTagDetailsContainerComponent, { className: "AssetTagDetailsContainerComponent", filePath: "src/app/features/administration/components/asset-tags/asset-tag-details-container/asset-tag-details-container.component.ts", lineNumber: 19 });
})();

// src/app/features/administration/components/device-config-profiles/device-config-profile-details-container/device-config-profile-details-container.component.ts
function DeviceConfigProfileDetailsContainerComponent_Conditional_0_Conditional_0_Template(rf, ctx) {
  if (rf & 1) {
    const _r1 = \u0275\u0275getCurrentView();
    \u0275\u0275elementStart(0, "app-details-accordion-container", 2);
    \u0275\u0275listener("entityChange", function DeviceConfigProfileDetailsContainerComponent_Conditional_0_Conditional_0_Template_app_details_accordion_container_entityChange_0_listener($event) {
      \u0275\u0275restoreView(_r1);
      const ctx_r1 = \u0275\u0275nextContext(2);
      return \u0275\u0275resetView(ctx_r1.onEntityChange($event));
    });
    \u0275\u0275elementEnd();
  }
  if (rf & 2) {
    let tmp_4_0;
    const ctx_r1 = \u0275\u0275nextContext(2);
    \u0275\u0275property("sections", ctx_r1.sections())("entity", ctx_r1.fullDeviceConfigProfile())("title", ((tmp_4_0 = ctx_r1.fullDeviceConfigProfile()) == null ? null : tmp_4_0.name) || "Device Config Profile Details")("allowModeToggle", true);
  }
}
function DeviceConfigProfileDetailsContainerComponent_Conditional_0_Conditional_1_Template(rf, ctx) {
  if (rf & 1) {
    \u0275\u0275elementStart(0, "div", 1);
    \u0275\u0275element(1, "p-message", 3);
    \u0275\u0275elementEnd();
  }
}
function DeviceConfigProfileDetailsContainerComponent_Conditional_0_Template(rf, ctx) {
  if (rf & 1) {
    \u0275\u0275conditionalCreate(0, DeviceConfigProfileDetailsContainerComponent_Conditional_0_Conditional_0_Template, 1, 4, "app-details-accordion-container", 0)(1, DeviceConfigProfileDetailsContainerComponent_Conditional_0_Conditional_1_Template, 2, 0, "div", 1);
  }
  if (rf & 2) {
    const ctx_r1 = \u0275\u0275nextContext();
    \u0275\u0275conditional(ctx_r1.fullDeviceConfigProfile() ? 0 : 1);
  }
}
var DeviceConfigProfileDetailsContainerComponent = class _DeviceConfigProfileDetailsContainerComponent {
  entity = input(null, ...ngDevMode ? [{ debugName: "entity" }] : []);
  deviceConfigProfileSectionFactory = inject(DeviceConfigProfileSectionConfigFactory);
  entityDetailsState = inject(EntityDetailsStateService);
  entitiesService = inject(EntitiesService);
  operationRegistry = inject(EntityOperationRegistryService);
  cacheService = inject(RequestCacheService);
  isLoading = computed(() => this.entityDetailsState.isLoading(), ...ngDevMode ? [{ debugName: "isLoading" }] : []);
  isSoftRefreshing = computed(() => this.entityDetailsState.isSoftRefreshing(), ...ngDevMode ? [{ debugName: "isSoftRefreshing" }] : []);
  isInitialLoading = computed(() => this.isLoading() && !this.isSoftRefreshing() && !this.fullDeviceConfigProfile(), ...ngDevMode ? [{ debugName: "isInitialLoading" }] : []);
  fullDeviceConfigProfile = computed(() => {
    const entityDetails = this.entityDetailsState.selectedItem();
    if (!entityDetails) {
      return null;
    }
    return entityDetails;
  }, ...ngDevMode ? [{ debugName: "fullDeviceConfigProfile" }] : []);
  sections = computed(() => {
    const deviceConfigProfile = this.fullDeviceConfigProfile();
    const deviceType = this.deviceType();
    const ioTypes = this.ioTypes();
    if (!(deviceConfigProfile || deviceType || isDefined(ioTypes)))
      return [];
    return this.deviceConfigProfileSectionFactory.createAllDeviceConfigProfileSections(deviceConfigProfile, this.deviceTypeAccessories(), deviceType, ioTypes);
  }, ...ngDevMode ? [{ debugName: "sections" }] : []);
  error = signal(null, ...ngDevMode ? [{ debugName: "error" }] : []);
  deviceTypeAccessories = signal(void 0, ...ngDevMode ? [{ debugName: "deviceTypeAccessories" }] : []);
  deviceType = signal(null, ...ngDevMode ? [{ debugName: "deviceType" }] : []);
  ioTypes = signal([], ...ngDevMode ? [{ debugName: "ioTypes" }] : []);
  constructor() {
    this.operationRegistry.registerEntityOperations("device-config-profile", {
      update: (id, data) => this.entitiesService.updateDeviceConfigProfile(id, data),
      create: (data) => this.entitiesService.createDeviceConfigProfile(data),
      get: (id) => this.entitiesService.getDeviceConfigProfile(id)
    });
    this.operationRegistry.registerEntityOperations("device", {
      update: (id, data) => this.entitiesService.updateDeviceConfigProfile(id, data),
      create: (_data) => EMPTY,
      get: (_id) => EMPTY
    });
    effect(() => {
      const deviceConfigProfile = this.fullDeviceConfigProfile();
      if (deviceConfigProfile) {
        this.loadDeviceType(deviceConfigProfile.deviceType?.id ?? "").catch((error) => {
          this.error.set(error.message);
        });
        this.loadIoTypes().catch((error) => {
          this.error.set(error.message);
        });
      }
    });
  }
  onEntityChange(entity) {
    this.entityDetailsState.updateEntity(entity);
    this.error.set(null);
  }
  async loadDeviceType(deviceTypeId) {
    const ownerId = this.entity()?.owner?.id;
    if (!deviceTypeId || isNullOrUndefined(ownerId))
      return;
    await this.cacheService.getOrFetchAsync(`deviceType-${deviceTypeId}-${ownerId}`, () => firstValueFrom(this.entitiesService.getDeviceType(deviceTypeId, ownerId)), 3e5).then((deviceType) => {
      this.deviceType.set(deviceType);
      this.deviceTypeAccessories.set(deviceType.accessories);
    });
  }
  async loadIoTypes() {
    const ownerId = this.entity()?.owner?.id;
    if (isNullOrUndefined(ownerId))
      return;
    await this.cacheService.getOrFetchAsync(`ioTypes-${ownerId}`, () => firstValueFrom(this.entitiesService.listIoTypes(ownerId, true, 0, 300)), 3e5).then((response) => {
      this.ioTypes.set(response.items);
    });
  }
  static \u0275fac = function DeviceConfigProfileDetailsContainerComponent_Factory(__ngFactoryType__) {
    return new (__ngFactoryType__ || _DeviceConfigProfileDetailsContainerComponent)();
  };
  static \u0275cmp = /* @__PURE__ */ \u0275\u0275defineComponent({ type: _DeviceConfigProfileDetailsContainerComponent, selectors: [["app-device-config-profile-details-container"]], inputs: { entity: [1, "entity"] }, decls: 1, vars: 1, consts: [["subtitle", "Device Config Profile", "initialMode", "view", 3, "sections", "entity", "title", "allowModeToggle"], [1, "p-4"], ["subtitle", "Device Config Profile", "initialMode", "view", 3, "entityChange", "sections", "entity", "title", "allowModeToggle"], ["severity", "info", "text", "No device config profile details available."]], template: function DeviceConfigProfileDetailsContainerComponent_Template(rf, ctx) {
    if (rf & 1) {
      \u0275\u0275conditionalCreate(0, DeviceConfigProfileDetailsContainerComponent_Conditional_0_Template, 2, 1);
    }
    if (rf & 2) {
      \u0275\u0275conditional(!ctx.isInitialLoading() && !ctx.error() ? 0 : -1);
    }
  }, dependencies: [
    DetailsAccordionContainerComponent,
    ProgressSpinnerModule,
    MessageModule,
    Message
  ], encapsulation: 2 });
};
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(DeviceConfigProfileDetailsContainerComponent, [{
    type: Component,
    args: [{ selector: "app-device-config-profile-details-container", imports: [
      DetailsAccordionContainerComponent,
      ProgressSpinnerModule,
      MessageModule
    ], template: `@if (!isInitialLoading() && !error()) {
  @if (fullDeviceConfigProfile()) {
    <app-details-accordion-container
      [sections]="sections()"
      [entity]="fullDeviceConfigProfile()"
      [title]="
        fullDeviceConfigProfile()?.name || 'Device Config Profile Details'
      "
      subtitle="Device Config Profile"
      [allowModeToggle]="true"
      (entityChange)="onEntityChange($event)"
      initialMode="view"
    ></app-details-accordion-container>
  } @else {
    <div class="p-4">
      <p-message
        severity="info"
        text="No device config profile details available."
      ></p-message>
    </div>
  }
}
` }]
  }], () => [], { entity: [{ type: Input, args: [{ isSignal: true, alias: "entity", required: false }] }] });
})();
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && \u0275setClassDebugInfo(DeviceConfigProfileDetailsContainerComponent, { className: "DeviceConfigProfileDetailsContainerComponent", filePath: "src/app/features/administration/components/device-config-profiles/device-config-profile-details-container/device-config-profile-details-container.component.ts", lineNumber: 40 });
})();

// src/app/features/administration/components/device/device-details-container/device-details-container.component.ts
function DeviceDetailsContainerComponent_Conditional_0_Conditional_0_Template(rf, ctx) {
  if (rf & 1) {
    const _r1 = \u0275\u0275getCurrentView();
    \u0275\u0275elementStart(0, "app-details-accordion-container", 2);
    \u0275\u0275listener("entityChange", function DeviceDetailsContainerComponent_Conditional_0_Conditional_0_Template_app_details_accordion_container_entityChange_0_listener($event) {
      \u0275\u0275restoreView(_r1);
      const ctx_r1 = \u0275\u0275nextContext(2);
      return \u0275\u0275resetView(ctx_r1.onEntityChange($event));
    });
    \u0275\u0275elementEnd();
  }
  if (rf & 2) {
    let tmp_4_0;
    const ctx_r1 = \u0275\u0275nextContext(2);
    \u0275\u0275property("sections", ctx_r1.sections())("entity", ctx_r1.fullDevice())("title", ((tmp_4_0 = ctx_r1.fullDevice()) == null ? null : tmp_4_0.name) || "Device Details")("allowModeToggle", true);
  }
}
function DeviceDetailsContainerComponent_Conditional_0_Conditional_1_Template(rf, ctx) {
  if (rf & 1) {
    \u0275\u0275elementStart(0, "div", 1);
    \u0275\u0275element(1, "p-message", 3);
    \u0275\u0275elementEnd();
  }
}
function DeviceDetailsContainerComponent_Conditional_0_Template(rf, ctx) {
  if (rf & 1) {
    \u0275\u0275conditionalCreate(0, DeviceDetailsContainerComponent_Conditional_0_Conditional_0_Template, 1, 4, "app-details-accordion-container", 0)(1, DeviceDetailsContainerComponent_Conditional_0_Conditional_1_Template, 2, 0, "div", 1);
  }
  if (rf & 2) {
    const ctx_r1 = \u0275\u0275nextContext();
    \u0275\u0275conditional(ctx_r1.fullDevice() ? 0 : 1);
  }
}
var DeviceDetailsContainerComponent = class _DeviceDetailsContainerComponent {
  entity = input(null, ...ngDevMode ? [{ debugName: "entity" }] : []);
  deviceSectionFactory = inject(DeviceSectionConfigFactory);
  entityDetailsState = inject(EntityDetailsStateService);
  entitiesService = inject(EntitiesService);
  operationRegistry = inject(EntityOperationRegistryService);
  cacheService = inject(RequestCacheService);
  broadcastService = inject(BroadcastEventMessageService);
  toastService = inject(ToastService);
  destroyRef = inject(DestroyRef);
  isLoading = computed(() => this.entityDetailsState.isLoading(), ...ngDevMode ? [{ debugName: "isLoading" }] : []);
  isSoftRefreshing = computed(() => this.entityDetailsState.isSoftRefreshing(), ...ngDevMode ? [{ debugName: "isSoftRefreshing" }] : []);
  isInitialLoading = computed(() => this.isLoading() && !this.isSoftRefreshing() && !this.fullDevice(), ...ngDevMode ? [{ debugName: "isInitialLoading" }] : []);
  fullDevice = computed(() => {
    const entityDetails = this.entityDetailsState.selectedItem();
    if (!entityDetails) {
      return null;
    }
    return entityDetails;
  }, ...ngDevMode ? [{ debugName: "fullDevice" }] : []);
  sections = computed(() => {
    const device = this.fullDevice();
    const deviceType = this.deviceType();
    const ioTypes = this.ioTypes();
    if (!(device || deviceType || isDefined(ioTypes)))
      return [];
    return this.deviceSectionFactory.createAllDeviceSections(device, this.deviceTypeAccessories(), deviceType, ioTypes);
  }, ...ngDevMode ? [{ debugName: "sections" }] : []);
  error = signal(null, ...ngDevMode ? [{ debugName: "error" }] : []);
  deviceTypeAccessories = signal(void 0, ...ngDevMode ? [{ debugName: "deviceTypeAccessories" }] : []);
  deviceType = signal(null, ...ngDevMode ? [{ debugName: "deviceType" }] : []);
  ioTypes = signal([], ...ngDevMode ? [{ debugName: "ioTypes" }] : []);
  isEntityUpdatedMessage(message) {
    return isDefined(message) && message !== null && typeof message === "object" && "entityType" in message && "data" in message && message.entityType === "device";
  }
  constructor() {
    this.operationRegistry.registerEntityOperations("device", {
      update: (id, data) => this.entitiesService.updateDevice(id, data),
      create: (data) => this.entitiesService.createDevice(data),
      get: (id) => this.entitiesService.getDevice(id)
    });
    effect(() => {
      const device = this.fullDevice();
      if (device) {
        this.loadDeviceType(device.deviceType?.id ?? "").catch((error) => {
          this.error.set(error.message);
        });
        this.loadIoTypes().catch((error) => {
          this.error.set(error.message);
        });
      }
    });
  }
  ngOnInit() {
    this.broadcastService.on("entity-updated").pipe(takeUntilDestroyed(this.destroyRef)).subscribe((message) => {
      if (this.isEntityUpdatedMessage(message)) {
        this.toastService.showSuccess("Success", "Device updated successfully");
        this.onEntityChange(message.data);
      }
    });
  }
  onEntityChange(entity) {
    this.entityDetailsState.updateEntity(entity);
    this.error.set(null);
  }
  async loadDeviceType(deviceTypeId) {
    const ownerId = this.entity()?.owner?.id;
    if (!deviceTypeId || isNullOrUndefined(ownerId))
      return;
    await this.cacheService.getOrFetchAsync(`deviceType-${deviceTypeId}-${ownerId}`, () => firstValueFrom(this.entitiesService.getDeviceType(deviceTypeId, ownerId)), 3e5).then((deviceType) => {
      this.deviceType.set(deviceType);
      this.deviceTypeAccessories.set(deviceType.accessories);
    });
  }
  async loadIoTypes() {
    const ownerId = this.entity()?.owner?.id;
    if (isNullOrUndefined(ownerId))
      return;
    await this.cacheService.getOrFetchAsync(`ioTypes-${ownerId}`, () => firstValueFrom(this.entitiesService.listIoTypes(ownerId, true, 0, 300)), 3e5).then((response) => {
      this.ioTypes.set(response.items);
    });
  }
  static \u0275fac = function DeviceDetailsContainerComponent_Factory(__ngFactoryType__) {
    return new (__ngFactoryType__ || _DeviceDetailsContainerComponent)();
  };
  static \u0275cmp = /* @__PURE__ */ \u0275\u0275defineComponent({ type: _DeviceDetailsContainerComponent, selectors: [["app-device-details-container"]], inputs: { entity: [1, "entity"] }, decls: 1, vars: 1, consts: [["subtitle", "Device", "initialMode", "view", 3, "sections", "entity", "title", "allowModeToggle"], [1, "p-4"], ["subtitle", "Device", "initialMode", "view", 3, "entityChange", "sections", "entity", "title", "allowModeToggle"], ["severity", "info", "text", "No device details available."]], template: function DeviceDetailsContainerComponent_Template(rf, ctx) {
    if (rf & 1) {
      \u0275\u0275conditionalCreate(0, DeviceDetailsContainerComponent_Conditional_0_Template, 2, 1);
    }
    if (rf & 2) {
      \u0275\u0275conditional(!ctx.isInitialLoading() && !ctx.error() ? 0 : -1);
    }
  }, dependencies: [
    DetailsAccordionContainerComponent,
    ProgressSpinnerModule,
    MessageModule,
    Message
  ], encapsulation: 2 });
};
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(DeviceDetailsContainerComponent, [{
    type: Component,
    args: [{ selector: "app-device-details-container", imports: [
      DetailsAccordionContainerComponent,
      ProgressSpinnerModule,
      MessageModule
    ], template: `@if (!isInitialLoading() && !error()) {
  @if (fullDevice()) {
    <app-details-accordion-container
      [sections]="sections()"
      [entity]="fullDevice()"
      [title]="fullDevice()?.name || 'Device Details'"
      subtitle="Device"
      [allowModeToggle]="true"
      (entityChange)="onEntityChange($event)"
      initialMode="view"
    ></app-details-accordion-container>
  } @else {
    <div class="p-4">
      <p-message
        severity="info"
        text="No device details available."
      ></p-message>
    </div>
  }
}
` }]
  }], () => [], { entity: [{ type: Input, args: [{ isSignal: true, alias: "entity", required: false }] }] });
})();
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && \u0275setClassDebugInfo(DeviceDetailsContainerComponent, { className: "DeviceDetailsContainerComponent", filePath: "src/app/features/administration/components/device/device-details-container/device-details-container.component.ts", lineNumber: 49 });
})();

// src/app/features/administration/components/geofences/geofence-details-container/geofence-details-container.component.ts
function GeofenceDetailsContainerComponent_Conditional_0_Conditional_0_Template(rf, ctx) {
  if (rf & 1) {
    const _r1 = \u0275\u0275getCurrentView();
    \u0275\u0275elementStart(0, "app-details-accordion-container", 2);
    \u0275\u0275listener("entityChange", function GeofenceDetailsContainerComponent_Conditional_0_Conditional_0_Template_app_details_accordion_container_entityChange_0_listener($event) {
      \u0275\u0275restoreView(_r1);
      const ctx_r1 = \u0275\u0275nextContext(2);
      return \u0275\u0275resetView(ctx_r1.onEntityChange($event));
    });
    \u0275\u0275elementEnd();
  }
  if (rf & 2) {
    let tmp_4_0;
    const ctx_r1 = \u0275\u0275nextContext(2);
    \u0275\u0275property("sections", ctx_r1.sections())("entity", ctx_r1.fullGeofence())("title", ((tmp_4_0 = ctx_r1.fullGeofence()) == null ? null : tmp_4_0.name) || "Geofence Details")("allowModeToggle", true);
  }
}
function GeofenceDetailsContainerComponent_Conditional_0_Conditional_1_Template(rf, ctx) {
  if (rf & 1) {
    \u0275\u0275elementStart(0, "div", 1);
    \u0275\u0275element(1, "p-message", 3);
    \u0275\u0275elementEnd();
  }
}
function GeofenceDetailsContainerComponent_Conditional_0_Template(rf, ctx) {
  if (rf & 1) {
    \u0275\u0275conditionalCreate(0, GeofenceDetailsContainerComponent_Conditional_0_Conditional_0_Template, 1, 4, "app-details-accordion-container", 0)(1, GeofenceDetailsContainerComponent_Conditional_0_Conditional_1_Template, 2, 0, "div", 1);
  }
  if (rf & 2) {
    const ctx_r1 = \u0275\u0275nextContext();
    \u0275\u0275conditional(ctx_r1.fullGeofence() ? 0 : 1);
  }
}
var GeofenceDetailsContainerComponent = class _GeofenceDetailsContainerComponent {
  entity = input(null, ...ngDevMode ? [{ debugName: "entity" }] : []);
  geofenceSectionFactory = inject(GeofenceSectionConfigFactory);
  entityDetailsState = inject(EntityDetailsStateService);
  isLoading = computed(() => this.entityDetailsState.isLoading(), ...ngDevMode ? [{ debugName: "isLoading" }] : []);
  isSoftRefreshing = computed(() => this.entityDetailsState.isSoftRefreshing(), ...ngDevMode ? [{ debugName: "isSoftRefreshing" }] : []);
  isInitialLoading = computed(() => this.isLoading() && !this.isSoftRefreshing() && !this.fullGeofence(), ...ngDevMode ? [{ debugName: "isInitialLoading" }] : []);
  fullGeofence = computed(() => {
    const entityDetails = this.entityDetailsState.selectedItem();
    if (!entityDetails) {
      return null;
    }
    return entityDetails;
  }, ...ngDevMode ? [{ debugName: "fullGeofence" }] : []);
  sections = computed(() => {
    const geofence = this.fullGeofence();
    if (!geofence)
      return [];
    return this.geofenceSectionFactory.createAllGeofenceSections(geofence);
  }, ...ngDevMode ? [{ debugName: "sections" }] : []);
  error = signal(null, ...ngDevMode ? [{ debugName: "error" }] : []);
  onEntityChange(entity) {
    this.entityDetailsState.updateEntity(entity);
    this.error.set(null);
  }
  static \u0275fac = function GeofenceDetailsContainerComponent_Factory(__ngFactoryType__) {
    return new (__ngFactoryType__ || _GeofenceDetailsContainerComponent)();
  };
  static \u0275cmp = /* @__PURE__ */ \u0275\u0275defineComponent({ type: _GeofenceDetailsContainerComponent, selectors: [["app-geofence-details-container"]], inputs: { entity: [1, "entity"] }, decls: 1, vars: 1, consts: [["subtitle", "Geofence", "initialMode", "view", 3, "sections", "entity", "title", "allowModeToggle"], [1, "p-4"], ["subtitle", "Geofence", "initialMode", "view", 3, "entityChange", "sections", "entity", "title", "allowModeToggle"], ["severity", "info", "text", "No geofence details available."]], template: function GeofenceDetailsContainerComponent_Template(rf, ctx) {
    if (rf & 1) {
      \u0275\u0275conditionalCreate(0, GeofenceDetailsContainerComponent_Conditional_0_Template, 2, 1);
    }
    if (rf & 2) {
      \u0275\u0275conditional(!ctx.isInitialLoading() && !ctx.error() ? 0 : -1);
    }
  }, dependencies: [
    DetailsAccordionContainerComponent,
    ProgressSpinnerModule,
    MessageModule,
    Message
  ], encapsulation: 2 });
};
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(GeofenceDetailsContainerComponent, [{
    type: Component,
    args: [{ selector: "app-geofence-details-container", imports: [
      DetailsAccordionContainerComponent,
      ProgressSpinnerModule,
      MessageModule
    ], template: `@if (!isInitialLoading() && !error()) {
  @if (fullGeofence()) {
    <app-details-accordion-container
      [sections]="sections()"
      [entity]="fullGeofence()"
      [title]="fullGeofence()?.name || 'Geofence Details'"
      subtitle="Geofence"
      [allowModeToggle]="true"
      (entityChange)="onEntityChange($event)"
      initialMode="view"
    ></app-details-accordion-container>
  } @else {
    <div class="p-4">
      <p-message
        severity="info"
        text="No geofence details available."
      ></p-message>
    </div>
  }
}
` }]
  }], null, { entity: [{ type: Input, args: [{ isSignal: true, alias: "entity", required: false }] }] });
})();
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && \u0275setClassDebugInfo(GeofenceDetailsContainerComponent, { className: "GeofenceDetailsContainerComponent", filePath: "src/app/features/administration/components/geofences/geofence-details-container/geofence-details-container.component.ts", lineNumber: 19 });
})();

// src/app/features/administration/components/device-providers/device-provider-details-container/device-provider-details-container.component.ts
function DeviceProviderDetailsContainerComponent_Conditional_0_Conditional_0_Template(rf, ctx) {
  if (rf & 1) {
    const _r1 = \u0275\u0275getCurrentView();
    \u0275\u0275elementStart(0, "app-details-accordion-container", 2);
    \u0275\u0275listener("entityChange", function DeviceProviderDetailsContainerComponent_Conditional_0_Conditional_0_Template_app_details_accordion_container_entityChange_0_listener($event) {
      \u0275\u0275restoreView(_r1);
      const ctx_r1 = \u0275\u0275nextContext(2);
      return \u0275\u0275resetView(ctx_r1.onEntityChange($event));
    });
    \u0275\u0275elementEnd();
  }
  if (rf & 2) {
    let tmp_4_0;
    const ctx_r1 = \u0275\u0275nextContext(2);
    \u0275\u0275property("sections", ctx_r1.sections())("entity", ctx_r1.fullDeviceProvider())("title", ((tmp_4_0 = ctx_r1.fullDeviceProvider()) == null ? null : tmp_4_0.name) || "Device Provider Details")("allowModeToggle", true);
  }
}
function DeviceProviderDetailsContainerComponent_Conditional_0_Conditional_1_Template(rf, ctx) {
  if (rf & 1) {
    \u0275\u0275elementStart(0, "div", 1);
    \u0275\u0275element(1, "p-message", 3);
    \u0275\u0275elementEnd();
  }
}
function DeviceProviderDetailsContainerComponent_Conditional_0_Template(rf, ctx) {
  if (rf & 1) {
    \u0275\u0275conditionalCreate(0, DeviceProviderDetailsContainerComponent_Conditional_0_Conditional_0_Template, 1, 4, "app-details-accordion-container", 0)(1, DeviceProviderDetailsContainerComponent_Conditional_0_Conditional_1_Template, 2, 0, "div", 1);
  }
  if (rf & 2) {
    const ctx_r1 = \u0275\u0275nextContext();
    \u0275\u0275conditional(ctx_r1.fullDeviceProvider() ? 0 : 1);
  }
}
var DeviceProviderDetailsContainerComponent = class _DeviceProviderDetailsContainerComponent {
  entity = input(null, ...ngDevMode ? [{ debugName: "entity" }] : []);
  deviceProviderSectionFactory = inject(DeviceProviderSectionConfigFactory);
  entityDetailsState = inject(EntityDetailsStateService);
  entitiesService = inject(EntitiesService);
  operationRegistry = inject(EntityOperationRegistryService);
  cacheService = inject(RequestCacheService);
  isLoading = computed(() => this.entityDetailsState.isLoading(), ...ngDevMode ? [{ debugName: "isLoading" }] : []);
  isSoftRefreshing = computed(() => this.entityDetailsState.isSoftRefreshing(), ...ngDevMode ? [{ debugName: "isSoftRefreshing" }] : []);
  isInitialLoading = computed(() => this.isLoading() && !this.isSoftRefreshing() && !this.fullDeviceProvider(), ...ngDevMode ? [{ debugName: "isInitialLoading" }] : []);
  fullDeviceProvider = computed(() => {
    const entityDetails = this.entityDetailsState.selectedItem();
    if (!entityDetails) {
      return null;
    }
    return entityDetails;
  }, ...ngDevMode ? [{ debugName: "fullDeviceProvider" }] : []);
  sections = computed(() => {
    const deviceProvider = this.fullDeviceProvider();
    const deviceProviderType = this.deviceProviderType();
    if (!(deviceProvider || isDefined(deviceProviderType)))
      return [];
    return this.deviceProviderSectionFactory.createAllDeviceProviderSections(deviceProvider, deviceProviderType);
  }, ...ngDevMode ? [{ debugName: "sections" }] : []);
  error = signal(null, ...ngDevMode ? [{ debugName: "error" }] : []);
  deviceProviderType = signal(null, ...ngDevMode ? [{ debugName: "deviceProviderType" }] : []);
  constructor() {
    this.operationRegistry.registerEntityOperations("device-provider", {
      update: (id, data) => this.entitiesService.updateDeviceProvider(id, data),
      create: (data) => this.entitiesService.createDeviceProvider(data),
      get: (id) => this.entitiesService.getDeviceProvider(id)
    });
    effect(() => {
      const deviceProvider = this.fullDeviceProvider();
      if (isDefined(deviceProvider?.deviceProviderType?.id)) {
        this.loadDeviceProviderType(deviceProvider?.deviceProviderType?.id ?? "").catch((error) => {
          this.error.set(error.message);
        });
      }
    });
  }
  onEntityChange(entity) {
    this.entityDetailsState.updateEntity(entity);
    this.error.set(null);
  }
  async loadDeviceProviderType(deviceProviderTypeId) {
    await this.cacheService.getOrFetchAsync(`deviceProviderType-${deviceProviderTypeId}`, () => firstValueFrom(this.entitiesService.getDeviceProviderType(deviceProviderTypeId)), 3e5).then((response) => {
      this.deviceProviderType.set(response);
    });
  }
  static \u0275fac = function DeviceProviderDetailsContainerComponent_Factory(__ngFactoryType__) {
    return new (__ngFactoryType__ || _DeviceProviderDetailsContainerComponent)();
  };
  static \u0275cmp = /* @__PURE__ */ \u0275\u0275defineComponent({ type: _DeviceProviderDetailsContainerComponent, selectors: [["app-device-provider-details-container"]], inputs: { entity: [1, "entity"] }, decls: 1, vars: 1, consts: [["subtitle", "Device Provider", "initialMode", "view", 3, "sections", "entity", "title", "allowModeToggle"], [1, "p-4"], ["subtitle", "Device Provider", "initialMode", "view", 3, "entityChange", "sections", "entity", "title", "allowModeToggle"], ["severity", "info", "text", "No device provider details available."]], template: function DeviceProviderDetailsContainerComponent_Template(rf, ctx) {
    if (rf & 1) {
      \u0275\u0275conditionalCreate(0, DeviceProviderDetailsContainerComponent_Conditional_0_Template, 2, 1);
    }
    if (rf & 2) {
      \u0275\u0275conditional(!ctx.isInitialLoading() && !ctx.error() ? 0 : -1);
    }
  }, dependencies: [
    DetailsAccordionContainerComponent,
    ProgressSpinnerModule,
    MessageModule,
    Message
  ], encapsulation: 2 });
};
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(DeviceProviderDetailsContainerComponent, [{
    type: Component,
    args: [{ selector: "app-device-provider-details-container", imports: [
      DetailsAccordionContainerComponent,
      ProgressSpinnerModule,
      MessageModule
    ], template: `@if (!isInitialLoading() && !error()) {
  @if (fullDeviceProvider()) {
    <app-details-accordion-container
      [sections]="sections()"
      [entity]="fullDeviceProvider()"
      [title]="fullDeviceProvider()?.name || 'Device Provider Details'"
      subtitle="Device Provider"
      [allowModeToggle]="true"
      (entityChange)="onEntityChange($event)"
      initialMode="view"
    ></app-details-accordion-container>
  } @else {
    <div class="p-4">
      <p-message
        severity="info"
        text="No device provider details available."
      ></p-message>
    </div>
  }
}
` }]
  }], () => [], { entity: [{ type: Input, args: [{ isSignal: true, alias: "entity", required: false }] }] });
})();
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && \u0275setClassDebugInfo(DeviceProviderDetailsContainerComponent, { className: "DeviceProviderDetailsContainerComponent", filePath: "src/app/features/administration/components/device-providers/device-provider-details-container/device-provider-details-container.component.ts", lineNumber: 38 });
})();

// src/app/features/administration/components/sms-gateway-providers/sms-gateway-provider-details-container/sms-gateway-provider-details-container.component.ts
function SmsGatewayProviderDetailsContainerComponent_Conditional_0_Conditional_0_Template(rf, ctx) {
  if (rf & 1) {
    const _r1 = \u0275\u0275getCurrentView();
    \u0275\u0275elementStart(0, "app-details-accordion-container", 2);
    \u0275\u0275listener("entityChange", function SmsGatewayProviderDetailsContainerComponent_Conditional_0_Conditional_0_Template_app_details_accordion_container_entityChange_0_listener($event) {
      \u0275\u0275restoreView(_r1);
      const ctx_r1 = \u0275\u0275nextContext(2);
      return \u0275\u0275resetView(ctx_r1.onEntityChange($event));
    });
    \u0275\u0275elementEnd();
  }
  if (rf & 2) {
    let tmp_4_0;
    const ctx_r1 = \u0275\u0275nextContext(2);
    \u0275\u0275property("sections", ctx_r1.sections())("entity", ctx_r1.fullSmsGatewayProvider())("title", ((tmp_4_0 = ctx_r1.fullSmsGatewayProvider()) == null ? null : tmp_4_0.name) || "SMS Gateway Provider Details")("allowModeToggle", true);
  }
}
function SmsGatewayProviderDetailsContainerComponent_Conditional_0_Conditional_1_Template(rf, ctx) {
  if (rf & 1) {
    \u0275\u0275elementStart(0, "div", 1);
    \u0275\u0275element(1, "p-message", 3);
    \u0275\u0275elementEnd();
  }
}
function SmsGatewayProviderDetailsContainerComponent_Conditional_0_Template(rf, ctx) {
  if (rf & 1) {
    \u0275\u0275conditionalCreate(0, SmsGatewayProviderDetailsContainerComponent_Conditional_0_Conditional_0_Template, 1, 4, "app-details-accordion-container", 0)(1, SmsGatewayProviderDetailsContainerComponent_Conditional_0_Conditional_1_Template, 2, 0, "div", 1);
  }
  if (rf & 2) {
    const ctx_r1 = \u0275\u0275nextContext();
    \u0275\u0275conditional(ctx_r1.fullSmsGatewayProvider() ? 0 : 1);
  }
}
var SmsGatewayProviderDetailsContainerComponent = class _SmsGatewayProviderDetailsContainerComponent {
  entity = input(null, ...ngDevMode ? [{ debugName: "entity" }] : []);
  smsGatewayProviderSectionFactory = inject(SmsGatewayProviderSectionConfigFactory);
  entityDetailsState = inject(EntityDetailsStateService);
  entitiesService = inject(EntitiesService);
  operationRegistry = inject(EntityOperationRegistryService);
  cacheService = inject(RequestCacheService);
  apiSchemaService = inject(ApiSchemaService);
  entityName = "smsgatewayprovider";
  isLoading = computed(() => this.entityDetailsState.isLoading(), ...ngDevMode ? [{ debugName: "isLoading" }] : []);
  isSoftRefreshing = computed(() => this.entityDetailsState.isSoftRefreshing(), ...ngDevMode ? [{ debugName: "isSoftRefreshing" }] : []);
  isInitialLoading = computed(() => this.isLoading() && !this.isSoftRefreshing() && !this.fullSmsGatewayProvider(), ...ngDevMode ? [{ debugName: "isInitialLoading" }] : []);
  fullSmsGatewayProvider = computed(() => {
    const entityDetails = this.entityDetailsState.selectedItem();
    if (!entityDetails) {
      return null;
    }
    return entityDetails;
  }, ...ngDevMode ? [{ debugName: "fullSmsGatewayProvider" }] : []);
  sections = computed(() => {
    const smsGatewayProvider = this.fullSmsGatewayProvider();
    const smsGatewayProviderType = this.smsGatewayProviderType();
    if (!(smsGatewayProvider || isDefined(smsGatewayProviderType)))
      return [];
    return this.smsGatewayProviderSectionFactory.createAllSmsGatewayProviderSections(smsGatewayProvider, smsGatewayProviderType);
  }, ...ngDevMode ? [{ debugName: "sections" }] : []);
  error = signal(null, ...ngDevMode ? [{ debugName: "error" }] : []);
  smsGatewayProviderType = signal(null, ...ngDevMode ? [{ debugName: "smsGatewayProviderType" }] : []);
  constructor() {
    this.operationRegistry.registerEntityOperations("sms-gateway-provider", {
      update: (id, data) => this.entitiesService.updateSmsGatewayProvider(id, data),
      create: (data) => this.entitiesService.createSmsGatewayProvider(data),
      get: (id) => this.entitiesService.getSmsGatewayProvider(id)
    });
    effect(() => {
      const smsGatewayProvider = this.fullSmsGatewayProvider();
      let typeIdToLoad = null;
      if (smsGatewayProvider) {
        const typeObject = this.apiSchemaService.getEntityType(smsGatewayProvider, this.entityName);
        typeIdToLoad = typeObject?.id;
      }
      if (isDefined(typeIdToLoad) && typeIdToLoad !== "") {
        this.loadSmsGatewayProviderType(typeIdToLoad).catch((error) => {
          this.error.set(error.message ?? "Failed to load SMS gateway provider type");
        });
      } else if (smsGatewayProvider && (isNullOrUndefined(typeIdToLoad) || typeIdToLoad === "")) {
        this.smsGatewayProviderType.set(null);
      }
    });
  }
  onEntityChange(entity) {
    this.entityDetailsState.updateEntity(entity);
    this.error.set(null);
  }
  async loadSmsGatewayProviderType(smsGatewayProviderTypeId) {
    if (!smsGatewayProviderTypeId) {
      this.smsGatewayProviderType.set(null);
      return;
    }
    await this.cacheService.getOrFetchAsync(`smsGatewayProviderType-${smsGatewayProviderTypeId}`, () => firstValueFrom(this.entitiesService.getSmsGatewayProviderType(smsGatewayProviderTypeId)), 3e5).then((response) => {
      this.smsGatewayProviderType.set(response);
    });
  }
  static \u0275fac = function SmsGatewayProviderDetailsContainerComponent_Factory(__ngFactoryType__) {
    return new (__ngFactoryType__ || _SmsGatewayProviderDetailsContainerComponent)();
  };
  static \u0275cmp = /* @__PURE__ */ \u0275\u0275defineComponent({ type: _SmsGatewayProviderDetailsContainerComponent, selectors: [["app-sms-gateway-provider-details-container"]], inputs: { entity: [1, "entity"] }, decls: 1, vars: 1, consts: [["subtitle", "SMS Gateway Provider", "initialMode", "view", 3, "sections", "entity", "title", "allowModeToggle"], [1, "p-4"], ["subtitle", "SMS Gateway Provider", "initialMode", "view", 3, "entityChange", "sections", "entity", "title", "allowModeToggle"], ["severity", "info", "text", "No SMS gateway provider details available."]], template: function SmsGatewayProviderDetailsContainerComponent_Template(rf, ctx) {
    if (rf & 1) {
      \u0275\u0275conditionalCreate(0, SmsGatewayProviderDetailsContainerComponent_Conditional_0_Template, 2, 1);
    }
    if (rf & 2) {
      \u0275\u0275conditional(!ctx.isInitialLoading() && !ctx.error() ? 0 : -1);
    }
  }, dependencies: [
    DetailsAccordionContainerComponent,
    ProgressSpinnerModule,
    MessageModule,
    Message
  ], encapsulation: 2 });
};
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(SmsGatewayProviderDetailsContainerComponent, [{
    type: Component,
    args: [{ selector: "app-sms-gateway-provider-details-container", imports: [
      DetailsAccordionContainerComponent,
      ProgressSpinnerModule,
      MessageModule
    ], template: `@if (!isInitialLoading() && !error()) {
  @if (fullSmsGatewayProvider()) {
    <app-details-accordion-container
      [sections]="sections()"
      [entity]="fullSmsGatewayProvider()"
      [title]="fullSmsGatewayProvider()?.name || 'SMS Gateway Provider Details'"
      subtitle="SMS Gateway Provider"
      [allowModeToggle]="true"
      (entityChange)="onEntityChange($event)"
      initialMode="view"
    ></app-details-accordion-container>
  } @else {
    <div class="p-4">
      <p-message
        severity="info"
        text="No SMS gateway provider details available."
      ></p-message>
    </div>
  }
}
` }]
  }], () => [], { entity: [{ type: Input, args: [{ isSignal: true, alias: "entity", required: false }] }] });
})();
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && \u0275setClassDebugInfo(SmsGatewayProviderDetailsContainerComponent, { className: "SmsGatewayProviderDetailsContainerComponent", filePath: "src/app/features/administration/components/sms-gateway-providers/sms-gateway-provider-details-container/sms-gateway-provider-details-container.component.ts", lineNumber: 41 });
})();

// src/app/features/administration/components/io-types/io-type-details-container/io-type-details-container.component.ts
function IoTypeDetailsContainerComponent_Conditional_0_Conditional_0_Template(rf, ctx) {
  if (rf & 1) {
    const _r1 = \u0275\u0275getCurrentView();
    \u0275\u0275elementStart(0, "app-details-accordion-container", 2);
    \u0275\u0275listener("entityChange", function IoTypeDetailsContainerComponent_Conditional_0_Conditional_0_Template_app_details_accordion_container_entityChange_0_listener($event) {
      \u0275\u0275restoreView(_r1);
      const ctx_r1 = \u0275\u0275nextContext(2);
      return \u0275\u0275resetView(ctx_r1.onEntityChange($event));
    });
    \u0275\u0275elementEnd();
  }
  if (rf & 2) {
    let tmp_4_0;
    const ctx_r1 = \u0275\u0275nextContext(2);
    \u0275\u0275property("sections", ctx_r1.sections())("entity", ctx_r1.fullIoType())("title", ((tmp_4_0 = ctx_r1.fullIoType()) == null ? null : tmp_4_0.name) || "IO Type Details")("allowModeToggle", true);
  }
}
function IoTypeDetailsContainerComponent_Conditional_0_Conditional_1_Template(rf, ctx) {
  if (rf & 1) {
    \u0275\u0275elementStart(0, "div", 1);
    \u0275\u0275element(1, "p-message", 3);
    \u0275\u0275elementEnd();
  }
}
function IoTypeDetailsContainerComponent_Conditional_0_Template(rf, ctx) {
  if (rf & 1) {
    \u0275\u0275conditionalCreate(0, IoTypeDetailsContainerComponent_Conditional_0_Conditional_0_Template, 1, 4, "app-details-accordion-container", 0)(1, IoTypeDetailsContainerComponent_Conditional_0_Conditional_1_Template, 2, 0, "div", 1);
  }
  if (rf & 2) {
    const ctx_r1 = \u0275\u0275nextContext();
    \u0275\u0275conditional(ctx_r1.fullIoType() ? 0 : 1);
  }
}
var IoTypeDetailsContainerComponent = class _IoTypeDetailsContainerComponent {
  entity = input(null, ...ngDevMode ? [{ debugName: "entity" }] : []);
  ioTypeSectionFactory = inject(IoTypeSectionConfigFactory);
  entityDetailsState = inject(EntityDetailsStateService);
  broadcastService = inject(BroadcastEventMessageService);
  toastService = inject(ToastService);
  destroyRef = inject(DestroyRef);
  isLoading = computed(() => this.entityDetailsState.isLoading(), ...ngDevMode ? [{ debugName: "isLoading" }] : []);
  isSoftRefreshing = computed(() => this.entityDetailsState.isSoftRefreshing(), ...ngDevMode ? [{ debugName: "isSoftRefreshing" }] : []);
  isInitialLoading = computed(() => this.isLoading() && !this.isSoftRefreshing() && !this.fullIoType(), ...ngDevMode ? [{ debugName: "isInitialLoading" }] : []);
  fullIoType = computed(() => {
    const entityDetails = this.entityDetailsState.selectedItem();
    if (!entityDetails) {
      return null;
    }
    return entityDetails;
  }, ...ngDevMode ? [{ debugName: "fullIoType" }] : []);
  sections = computed(() => {
    const ioType = this.fullIoType();
    if (!ioType)
      return [];
    return this.ioTypeSectionFactory.createAllIoTypeSections(ioType);
  }, ...ngDevMode ? [{ debugName: "sections" }] : []);
  error = signal(null, ...ngDevMode ? [{ debugName: "error" }] : []);
  isEntityUpdatedMessage(message) {
    return isDefined(message) && message !== null && typeof message === "object" && "entityType" in message && "data" in message && message.entityType === "iotype";
  }
  onEntityChange(entity) {
    this.entityDetailsState.updateEntity(entity);
    this.error.set(null);
  }
  ngOnInit() {
    this.broadcastService.on("entity-updated").pipe(takeUntilDestroyed(this.destroyRef)).subscribe((message) => {
      if (this.isEntityUpdatedMessage(message)) {
        this.toastService.showSuccess("Success", "IO Type updated successfully");
        this.onEntityChange(message.data);
      }
    });
  }
  static \u0275fac = function IoTypeDetailsContainerComponent_Factory(__ngFactoryType__) {
    return new (__ngFactoryType__ || _IoTypeDetailsContainerComponent)();
  };
  static \u0275cmp = /* @__PURE__ */ \u0275\u0275defineComponent({ type: _IoTypeDetailsContainerComponent, selectors: [["app-io-type-details-container"]], inputs: { entity: [1, "entity"] }, decls: 1, vars: 1, consts: [["subtitle", "IO Type", "initialMode", "view", 3, "sections", "entity", "title", "allowModeToggle"], [1, "p-4"], ["subtitle", "IO Type", "initialMode", "view", 3, "entityChange", "sections", "entity", "title", "allowModeToggle"], ["severity", "info", "text", "No IO type details available."]], template: function IoTypeDetailsContainerComponent_Template(rf, ctx) {
    if (rf & 1) {
      \u0275\u0275conditionalCreate(0, IoTypeDetailsContainerComponent_Conditional_0_Template, 2, 1);
    }
    if (rf & 2) {
      \u0275\u0275conditional(!ctx.isInitialLoading() && !ctx.error() ? 0 : -1);
    }
  }, dependencies: [
    DetailsAccordionContainerComponent,
    ProgressSpinnerModule,
    MessageModule,
    Message
  ], encapsulation: 2 });
};
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(IoTypeDetailsContainerComponent, [{
    type: Component,
    args: [{ selector: "app-io-type-details-container", imports: [
      DetailsAccordionContainerComponent,
      ProgressSpinnerModule,
      MessageModule
    ], template: `@if (!isInitialLoading() && !error()) {
  @if (fullIoType()) {
    <app-details-accordion-container
      [sections]="sections()"
      [entity]="fullIoType()"
      [title]="fullIoType()?.name || 'IO Type Details'"
      subtitle="IO Type"
      [allowModeToggle]="true"
      (entityChange)="onEntityChange($event)"
      initialMode="view"
    ></app-details-accordion-container>
  } @else {
    <div class="p-4">
      <p-message
        severity="info"
        text="No IO type details available."
      ></p-message>
    </div>
  }
}
` }]
  }], null, { entity: [{ type: Input, args: [{ isSignal: true, alias: "entity", required: false }] }] });
})();
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && \u0275setClassDebugInfo(IoTypeDetailsContainerComponent, { className: "IoTypeDetailsContainerComponent", filePath: "src/app/features/administration/components/io-types/io-type-details-container/io-type-details-container.component.ts", lineNumber: 35 });
})();

// src/app/features/administration/components/overspeed-profiles/overspeed-profile-details-container/overspeed-profile-details-container.component.ts
function OverspeedProfileDetailsContainerComponent_Conditional_0_Conditional_0_Template(rf, ctx) {
  if (rf & 1) {
    const _r1 = \u0275\u0275getCurrentView();
    \u0275\u0275elementStart(0, "app-details-accordion-container", 2);
    \u0275\u0275listener("entityChange", function OverspeedProfileDetailsContainerComponent_Conditional_0_Conditional_0_Template_app_details_accordion_container_entityChange_0_listener($event) {
      \u0275\u0275restoreView(_r1);
      const ctx_r1 = \u0275\u0275nextContext(2);
      return \u0275\u0275resetView(ctx_r1.onEntityChange($event));
    });
    \u0275\u0275elementEnd();
  }
  if (rf & 2) {
    let tmp_4_0;
    const ctx_r1 = \u0275\u0275nextContext(2);
    \u0275\u0275property("sections", ctx_r1.sections())("entity", ctx_r1.fullOverspeedProfile())("title", ((tmp_4_0 = ctx_r1.fullOverspeedProfile()) == null ? null : tmp_4_0.name) || "Overspeed Profile Details")("allowModeToggle", true);
  }
}
function OverspeedProfileDetailsContainerComponent_Conditional_0_Conditional_1_Template(rf, ctx) {
  if (rf & 1) {
    \u0275\u0275elementStart(0, "div", 1);
    \u0275\u0275element(1, "p-message", 3);
    \u0275\u0275elementEnd();
  }
}
function OverspeedProfileDetailsContainerComponent_Conditional_0_Template(rf, ctx) {
  if (rf & 1) {
    \u0275\u0275conditionalCreate(0, OverspeedProfileDetailsContainerComponent_Conditional_0_Conditional_0_Template, 1, 4, "app-details-accordion-container", 0)(1, OverspeedProfileDetailsContainerComponent_Conditional_0_Conditional_1_Template, 2, 0, "div", 1);
  }
  if (rf & 2) {
    const ctx_r1 = \u0275\u0275nextContext();
    \u0275\u0275conditional(ctx_r1.fullOverspeedProfile() ? 0 : 1);
  }
}
var OverspeedProfileDetailsContainerComponent = class _OverspeedProfileDetailsContainerComponent {
  entity = input(null, ...ngDevMode ? [{ debugName: "entity" }] : []);
  overspeedProfileSectionFactory = inject(OverspeedProfileSectionConfigFactory);
  entityDetailsState = inject(EntityDetailsStateService);
  isLoading = computed(() => this.entityDetailsState.isLoading(), ...ngDevMode ? [{ debugName: "isLoading" }] : []);
  isSoftRefreshing = computed(() => this.entityDetailsState.isSoftRefreshing(), ...ngDevMode ? [{ debugName: "isSoftRefreshing" }] : []);
  isInitialLoading = computed(() => this.isLoading() && !this.isSoftRefreshing() && !this.fullOverspeedProfile(), ...ngDevMode ? [{ debugName: "isInitialLoading" }] : []);
  fullOverspeedProfile = computed(() => {
    const entityDetails = this.entityDetailsState.selectedItem();
    if (!entityDetails) {
      return null;
    }
    return entityDetails;
  }, ...ngDevMode ? [{ debugName: "fullOverspeedProfile" }] : []);
  sections = computed(() => {
    const overspeedProfile = this.fullOverspeedProfile();
    if (!overspeedProfile)
      return [];
    return this.overspeedProfileSectionFactory.createAllOverspeedProfileSections(overspeedProfile);
  }, ...ngDevMode ? [{ debugName: "sections" }] : []);
  error = signal(null, ...ngDevMode ? [{ debugName: "error" }] : []);
  onEntityChange(entity) {
    this.entityDetailsState.updateEntity(entity);
    this.error.set(null);
  }
  static \u0275fac = function OverspeedProfileDetailsContainerComponent_Factory(__ngFactoryType__) {
    return new (__ngFactoryType__ || _OverspeedProfileDetailsContainerComponent)();
  };
  static \u0275cmp = /* @__PURE__ */ \u0275\u0275defineComponent({ type: _OverspeedProfileDetailsContainerComponent, selectors: [["app-overspeed-profile-details-container"]], inputs: { entity: [1, "entity"] }, decls: 1, vars: 1, consts: [["subtitle", "Overspeed Profile", "initialMode", "view", 3, "sections", "entity", "title", "allowModeToggle"], [1, "p-4"], ["subtitle", "Overspeed Profile", "initialMode", "view", 3, "entityChange", "sections", "entity", "title", "allowModeToggle"], ["severity", "info", "text", "No overspeed profile details available."]], template: function OverspeedProfileDetailsContainerComponent_Template(rf, ctx) {
    if (rf & 1) {
      \u0275\u0275conditionalCreate(0, OverspeedProfileDetailsContainerComponent_Conditional_0_Template, 2, 1);
    }
    if (rf & 2) {
      \u0275\u0275conditional(!ctx.isInitialLoading() && !ctx.error() ? 0 : -1);
    }
  }, dependencies: [
    DetailsAccordionContainerComponent,
    ProgressSpinnerModule,
    MessageModule,
    Message
  ], encapsulation: 2 });
};
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(OverspeedProfileDetailsContainerComponent, [{
    type: Component,
    args: [{ selector: "app-overspeed-profile-details-container", imports: [
      DetailsAccordionContainerComponent,
      ProgressSpinnerModule,
      MessageModule
    ], template: `@if (!isInitialLoading() && !error()) {
  @if (fullOverspeedProfile()) {
    <app-details-accordion-container
      [sections]="sections()"
      [entity]="fullOverspeedProfile()"
      [title]="fullOverspeedProfile()?.name || 'Overspeed Profile Details'"
      subtitle="Overspeed Profile"
      [allowModeToggle]="true"
      (entityChange)="onEntityChange($event)"
      initialMode="view"
    ></app-details-accordion-container>
  } @else {
    <div class="p-4">
      <p-message
        severity="info"
        text="No overspeed profile details available."
      ></p-message>
    </div>
  }
}
` }]
  }], null, { entity: [{ type: Input, args: [{ isSignal: true, alias: "entity", required: false }] }] });
})();
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && \u0275setClassDebugInfo(OverspeedProfileDetailsContainerComponent, { className: "OverspeedProfileDetailsContainerComponent", filePath: "src/app/features/administration/components/overspeed-profiles/overspeed-profile-details-container/overspeed-profile-details-container.component.ts", lineNumber: 23 });
})();

// src/app/features/administration/components/alerts/alert-details-container/alert-details-container.component.ts
function AlertDetailsContainerComponent_Conditional_0_Conditional_0_Template(rf, ctx) {
  if (rf & 1) {
    const _r1 = \u0275\u0275getCurrentView();
    \u0275\u0275elementStart(0, "app-details-accordion-container", 2);
    \u0275\u0275listener("entityChange", function AlertDetailsContainerComponent_Conditional_0_Conditional_0_Template_app_details_accordion_container_entityChange_0_listener($event) {
      \u0275\u0275restoreView(_r1);
      const ctx_r1 = \u0275\u0275nextContext(2);
      return \u0275\u0275resetView(ctx_r1.onEntityChange($event));
    });
    \u0275\u0275elementEnd();
  }
  if (rf & 2) {
    let tmp_4_0;
    const ctx_r1 = \u0275\u0275nextContext(2);
    \u0275\u0275property("sections", ctx_r1.sections())("entity", ctx_r1.fullAlert())("title", ((tmp_4_0 = ctx_r1.fullAlert()) == null ? null : tmp_4_0.name) || "Alert Details")("allowModeToggle", true);
  }
}
function AlertDetailsContainerComponent_Conditional_0_Conditional_1_Template(rf, ctx) {
  if (rf & 1) {
    \u0275\u0275elementStart(0, "div", 1);
    \u0275\u0275element(1, "p-message", 3);
    \u0275\u0275elementEnd();
  }
}
function AlertDetailsContainerComponent_Conditional_0_Template(rf, ctx) {
  if (rf & 1) {
    \u0275\u0275conditionalCreate(0, AlertDetailsContainerComponent_Conditional_0_Conditional_0_Template, 1, 4, "app-details-accordion-container", 0)(1, AlertDetailsContainerComponent_Conditional_0_Conditional_1_Template, 2, 0, "div", 1);
  }
  if (rf & 2) {
    const ctx_r1 = \u0275\u0275nextContext();
    \u0275\u0275conditional(ctx_r1.fullAlert() ? 0 : 1);
  }
}
var AlertDetailsContainerComponent = class _AlertDetailsContainerComponent {
  entity = input(null, ...ngDevMode ? [{ debugName: "entity" }] : []);
  alertSectionFactory = inject(AlertSectionConfigFactory);
  entityDetailsState = inject(EntityDetailsStateService);
  entitiesService = inject(EntitiesService);
  operationRegistry = inject(EntityOperationRegistryService);
  broadcastService = inject(BroadcastEventMessageService);
  toastService = inject(ToastService);
  destroyRef = inject(DestroyRef);
  isLoading = computed(() => this.entityDetailsState.isLoading(), ...ngDevMode ? [{ debugName: "isLoading" }] : []);
  isSoftRefreshing = computed(() => this.entityDetailsState.isSoftRefreshing(), ...ngDevMode ? [{ debugName: "isSoftRefreshing" }] : []);
  isInitialLoading = computed(() => this.isLoading() && !this.isSoftRefreshing() && !this.fullAlert(), ...ngDevMode ? [{ debugName: "isInitialLoading" }] : []);
  fullAlert = computed(() => {
    const entityDetails = this.entityDetailsState.selectedItem();
    if (isNullOrUndefined(entityDetails)) {
      return null;
    }
    return entityDetails;
  }, ...ngDevMode ? [{ debugName: "fullAlert" }] : []);
  sections = computed(() => {
    const alert2 = this.fullAlert();
    if (isNullOrUndefined(alert2))
      return [];
    return this.alertSectionFactory.createAllAlertSections(alert2);
  }, ...ngDevMode ? [{ debugName: "sections" }] : []);
  error = signal(null, ...ngDevMode ? [{ debugName: "error" }] : []);
  isEntityUpdatedMessage(message) {
    return isDefined(message) && message !== null && typeof message === "object" && "entityType" in message && "data" in message && message.entityType === "alert";
  }
  constructor() {
    this.operationRegistry.registerEntityOperations("alert", {
      update: (id, data) => this.entitiesService.updateAlert(id, data),
      create: (data) => this.entitiesService.createAlert(data),
      get: (id) => this.entitiesService.getAlert(id)
    });
  }
  ngOnInit() {
    this.broadcastService.on("entity-updated").pipe(takeUntilDestroyed(this.destroyRef)).subscribe((message) => {
      if (this.isEntityUpdatedMessage(message)) {
        this.toastService.showSuccess("Success", "Alert updated successfully");
        this.onEntityChange(message.data);
      }
    });
  }
  onEntityChange(entity) {
    this.entityDetailsState.updateEntity(entity);
    this.error.set(null);
  }
  static \u0275fac = function AlertDetailsContainerComponent_Factory(__ngFactoryType__) {
    return new (__ngFactoryType__ || _AlertDetailsContainerComponent)();
  };
  static \u0275cmp = /* @__PURE__ */ \u0275\u0275defineComponent({ type: _AlertDetailsContainerComponent, selectors: [["app-alert-details-container"]], inputs: { entity: [1, "entity"] }, decls: 1, vars: 1, consts: [["subtitle", "Alert", "initialMode", "view", 3, "sections", "entity", "title", "allowModeToggle"], [1, "p-4"], ["subtitle", "Alert", "initialMode", "view", 3, "entityChange", "sections", "entity", "title", "allowModeToggle"], ["severity", "info", "text", "No alert details available."]], template: function AlertDetailsContainerComponent_Template(rf, ctx) {
    if (rf & 1) {
      \u0275\u0275conditionalCreate(0, AlertDetailsContainerComponent_Conditional_0_Template, 2, 1);
    }
    if (rf & 2) {
      \u0275\u0275conditional(!ctx.isInitialLoading() && !ctx.error() ? 0 : -1);
    }
  }, dependencies: [
    DetailsAccordionContainerComponent,
    ProgressSpinnerModule,
    MessageModule,
    Message
  ], encapsulation: 2 });
};
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(AlertDetailsContainerComponent, [{
    type: Component,
    args: [{ selector: "app-alert-details-container", imports: [
      DetailsAccordionContainerComponent,
      ProgressSpinnerModule,
      MessageModule
    ], template: `@if (!isInitialLoading() && !error()) {
  @if (fullAlert()) {
    <app-details-accordion-container
      [sections]="sections()"
      [entity]="fullAlert()"
      [title]="fullAlert()?.name || 'Alert Details'"
      subtitle="Alert"
      [allowModeToggle]="true"
      (entityChange)="onEntityChange($event)"
      initialMode="view"
    ></app-details-accordion-container>
  } @else {
    <div class="p-4">
      <p-message severity="info" text="No alert details available."></p-message>
    </div>
  }
}
` }]
  }], () => [], { entity: [{ type: Input, args: [{ isSignal: true, alias: "entity", required: false }] }] });
})();
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && \u0275setClassDebugInfo(AlertDetailsContainerComponent, { className: "AlertDetailsContainerComponent", filePath: "src/app/features/administration/components/alerts/alert-details-container/alert-details-container.component.ts", lineNumber: 43 });
})();

// src/app/features/administration/components/user-roles/user-role-details-container/user-role-details-container.component.ts
function UserRoleDetailsContainerComponent_Conditional_0_Conditional_0_Template(rf, ctx) {
  if (rf & 1) {
    const _r1 = \u0275\u0275getCurrentView();
    \u0275\u0275elementStart(0, "app-details-accordion-container", 2);
    \u0275\u0275listener("entityChange", function UserRoleDetailsContainerComponent_Conditional_0_Conditional_0_Template_app_details_accordion_container_entityChange_0_listener($event) {
      \u0275\u0275restoreView(_r1);
      const ctx_r1 = \u0275\u0275nextContext(2);
      return \u0275\u0275resetView(ctx_r1.onEntityChange($event));
    });
    \u0275\u0275elementEnd();
  }
  if (rf & 2) {
    let tmp_4_0;
    const ctx_r1 = \u0275\u0275nextContext(2);
    \u0275\u0275property("sections", ctx_r1.sections())("entity", ctx_r1.fullUserRole())("title", ((tmp_4_0 = ctx_r1.fullUserRole()) == null ? null : tmp_4_0.name) || "User Role Details")("allowModeToggle", true);
  }
}
function UserRoleDetailsContainerComponent_Conditional_0_Conditional_1_Template(rf, ctx) {
  if (rf & 1) {
    \u0275\u0275elementStart(0, "div", 1);
    \u0275\u0275element(1, "p-message", 3);
    \u0275\u0275elementEnd();
  }
}
function UserRoleDetailsContainerComponent_Conditional_0_Template(rf, ctx) {
  if (rf & 1) {
    \u0275\u0275conditionalCreate(0, UserRoleDetailsContainerComponent_Conditional_0_Conditional_0_Template, 1, 4, "app-details-accordion-container", 0)(1, UserRoleDetailsContainerComponent_Conditional_0_Conditional_1_Template, 2, 0, "div", 1);
  }
  if (rf & 2) {
    const ctx_r1 = \u0275\u0275nextContext();
    \u0275\u0275conditional(ctx_r1.fullUserRole() ? 0 : 1);
  }
}
var UserRoleDetailsContainerComponent = class _UserRoleDetailsContainerComponent {
  entity = input(null, ...ngDevMode ? [{ debugName: "entity" }] : []);
  userRoleSectionFactory = inject(UserRoleSectionConfigFactory);
  entityDetailsState = inject(EntityDetailsStateService);
  isLoading = computed(() => this.entityDetailsState.isLoading(), ...ngDevMode ? [{ debugName: "isLoading" }] : []);
  isSoftRefreshing = computed(() => this.entityDetailsState.isSoftRefreshing(), ...ngDevMode ? [{ debugName: "isSoftRefreshing" }] : []);
  isInitialLoading = computed(() => this.isLoading() && !this.isSoftRefreshing() && !this.fullUserRole(), ...ngDevMode ? [{ debugName: "isInitialLoading" }] : []);
  fullUserRole = computed(() => {
    const entityDetails = this.entityDetailsState.selectedItem();
    if (!entityDetails) {
      return null;
    }
    return entityDetails;
  }, ...ngDevMode ? [{ debugName: "fullUserRole" }] : []);
  sections = computed(() => {
    const userRole = this.fullUserRole();
    if (!userRole)
      return [];
    return this.userRoleSectionFactory.createAllUserRoleSections(userRole);
  }, ...ngDevMode ? [{ debugName: "sections" }] : []);
  error = signal(null, ...ngDevMode ? [{ debugName: "error" }] : []);
  onEntityChange(entity) {
    this.entityDetailsState.updateEntity(entity);
    this.error.set(null);
  }
  static \u0275fac = function UserRoleDetailsContainerComponent_Factory(__ngFactoryType__) {
    return new (__ngFactoryType__ || _UserRoleDetailsContainerComponent)();
  };
  static \u0275cmp = /* @__PURE__ */ \u0275\u0275defineComponent({ type: _UserRoleDetailsContainerComponent, selectors: [["app-user-role-details-container"]], inputs: { entity: [1, "entity"] }, decls: 1, vars: 1, consts: [["subtitle", "User Role", "initialMode", "view", 3, "sections", "entity", "title", "allowModeToggle"], [1, "p-4"], ["subtitle", "User Role", "initialMode", "view", 3, "entityChange", "sections", "entity", "title", "allowModeToggle"], ["severity", "info", "text", "No user role details available."]], template: function UserRoleDetailsContainerComponent_Template(rf, ctx) {
    if (rf & 1) {
      \u0275\u0275conditionalCreate(0, UserRoleDetailsContainerComponent_Conditional_0_Template, 2, 1);
    }
    if (rf & 2) {
      \u0275\u0275conditional(!ctx.isInitialLoading() && !ctx.error() ? 0 : -1);
    }
  }, dependencies: [
    DetailsAccordionContainerComponent,
    ProgressSpinnerModule,
    MessageModule,
    Message
  ], encapsulation: 2 });
};
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(UserRoleDetailsContainerComponent, [{
    type: Component,
    args: [{ selector: "app-user-role-details-container", imports: [
      DetailsAccordionContainerComponent,
      ProgressSpinnerModule,
      MessageModule
    ], template: `@if (!isInitialLoading() && !error()) {
  @if (fullUserRole()) {
    <app-details-accordion-container
      [sections]="sections()"
      [entity]="fullUserRole()"
      [title]="fullUserRole()?.name || 'User Role Details'"
      subtitle="User Role"
      [allowModeToggle]="true"
      (entityChange)="onEntityChange($event)"
      initialMode="view"
    ></app-details-accordion-container>
  } @else {
    <div class="p-4">
      <p-message
        severity="info"
        text="No user role details available."
      ></p-message>
    </div>
  }
}
` }]
  }], null, { entity: [{ type: Input, args: [{ isSignal: true, alias: "entity", required: false }] }] });
})();
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && \u0275setClassDebugInfo(UserRoleDetailsContainerComponent, { className: "UserRoleDetailsContainerComponent", filePath: "src/app/features/administration/components/user-roles/user-role-details-container/user-role-details-container.component.ts", lineNumber: 20 });
})();

// src/app/features/administration/components/users/user-details-container/user-details-container.component.ts
function UserDetailsContainerComponent_Conditional_0_Conditional_0_Template(rf, ctx) {
  if (rf & 1) {
    const _r1 = \u0275\u0275getCurrentView();
    \u0275\u0275elementStart(0, "app-details-accordion-container", 2);
    \u0275\u0275listener("entityChange", function UserDetailsContainerComponent_Conditional_0_Conditional_0_Template_app_details_accordion_container_entityChange_0_listener($event) {
      \u0275\u0275restoreView(_r1);
      const ctx_r1 = \u0275\u0275nextContext(2);
      return \u0275\u0275resetView(ctx_r1.onEntityChange($event));
    });
    \u0275\u0275elementEnd();
  }
  if (rf & 2) {
    let tmp_4_0;
    const ctx_r1 = \u0275\u0275nextContext(2);
    \u0275\u0275property("sections", ctx_r1.sections())("entity", ctx_r1.fullUser())("title", ((tmp_4_0 = ctx_r1.fullUser()) == null ? null : tmp_4_0.name) || "User Details")("allowModeToggle", true);
  }
}
function UserDetailsContainerComponent_Conditional_0_Conditional_1_Template(rf, ctx) {
  if (rf & 1) {
    \u0275\u0275elementStart(0, "div", 1);
    \u0275\u0275element(1, "p-message", 3);
    \u0275\u0275elementEnd();
  }
}
function UserDetailsContainerComponent_Conditional_0_Template(rf, ctx) {
  if (rf & 1) {
    \u0275\u0275conditionalCreate(0, UserDetailsContainerComponent_Conditional_0_Conditional_0_Template, 1, 4, "app-details-accordion-container", 0)(1, UserDetailsContainerComponent_Conditional_0_Conditional_1_Template, 2, 0, "div", 1);
  }
  if (rf & 2) {
    const ctx_r1 = \u0275\u0275nextContext();
    \u0275\u0275conditional(ctx_r1.fullUser() ? 0 : 1);
  }
}
var UserDetailsContainerComponent = class _UserDetailsContainerComponent {
  entity = input(null, ...ngDevMode ? [{ debugName: "entity" }] : []);
  userSectionFactory = inject(UserSectionConfigFactory);
  entityDetailsState = inject(EntityDetailsStateService);
  activatedRoute = inject(ActivatedRoute);
  isLoading = computed(() => this.entityDetailsState.isLoading(), ...ngDevMode ? [{ debugName: "isLoading" }] : []);
  isSoftRefreshing = computed(() => this.entityDetailsState.isSoftRefreshing(), ...ngDevMode ? [{ debugName: "isSoftRefreshing" }] : []);
  isInitialLoading = computed(() => this.isLoading() && !this.isSoftRefreshing() && !this.fullUser(), ...ngDevMode ? [{ debugName: "isInitialLoading" }] : []);
  fullUser = computed(() => {
    const entityDetails = this.entityDetailsState.selectedItem();
    if (!entityDetails) {
      return null;
    }
    return entityDetails;
  }, ...ngDevMode ? [{ debugName: "fullUser" }] : []);
  sections = computed(() => {
    const user = this.fullUser();
    if (!user)
      return [];
    const routeParams = this.getRouteParams();
    const ownerId = routeParams["clientId"] ?? routeParams["vendorId"] ?? routeParams["distributorId"] ?? "none";
    return this.userSectionFactory.createAllUserSections(user, `${ownerId}`);
  }, ...ngDevMode ? [{ debugName: "sections" }] : []);
  error = signal(null, ...ngDevMode ? [{ debugName: "error" }] : []);
  onEntityChange(entity) {
    this.entityDetailsState.updateEntity(entity);
    this.error.set(null);
  }
  getRouteParams() {
    let rootRoute = this.activatedRoute;
    while (rootRoute.parent) {
      rootRoute = rootRoute.parent;
    }
    const allParams = {};
    this.collectParamsFromRoute(rootRoute, allParams);
    return allParams;
  }
  collectParamsFromRoute(route, allParams) {
    Object.assign(allParams, route.snapshot.params);
    route.children.forEach((childRoute) => {
      this.collectParamsFromRoute(childRoute, allParams);
    });
  }
  static \u0275fac = function UserDetailsContainerComponent_Factory(__ngFactoryType__) {
    return new (__ngFactoryType__ || _UserDetailsContainerComponent)();
  };
  static \u0275cmp = /* @__PURE__ */ \u0275\u0275defineComponent({ type: _UserDetailsContainerComponent, selectors: [["app-user-details-container"]], inputs: { entity: [1, "entity"] }, decls: 1, vars: 1, consts: [["subtitle", "User", "initialMode", "view", 3, "sections", "entity", "title", "allowModeToggle"], [1, "p-4"], ["subtitle", "User", "initialMode", "view", 3, "entityChange", "sections", "entity", "title", "allowModeToggle"], ["severity", "info", "text", "No user details available."]], template: function UserDetailsContainerComponent_Template(rf, ctx) {
    if (rf & 1) {
      \u0275\u0275conditionalCreate(0, UserDetailsContainerComponent_Conditional_0_Template, 2, 1);
    }
    if (rf & 2) {
      \u0275\u0275conditional(!ctx.isInitialLoading() && !ctx.error() ? 0 : -1);
    }
  }, dependencies: [
    DetailsAccordionContainerComponent,
    ProgressSpinnerModule,
    MessageModule,
    Message
  ], encapsulation: 2 });
};
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(UserDetailsContainerComponent, [{
    type: Component,
    args: [{ selector: "app-user-details-container", imports: [
      DetailsAccordionContainerComponent,
      ProgressSpinnerModule,
      MessageModule
    ], template: `@if (!isInitialLoading() && !error()) {
  @if (fullUser()) {
    <app-details-accordion-container
      [sections]="sections()"
      [entity]="fullUser()"
      [title]="fullUser()?.name || 'User Details'"
      subtitle="User"
      [allowModeToggle]="true"
      (entityChange)="onEntityChange($event)"
      initialMode="view"
    ></app-details-accordion-container>
  } @else {
    <div class="p-4">
      <p-message severity="info" text="No user details available."></p-message>
    </div>
  }
}
` }]
  }], null, { entity: [{ type: Input, args: [{ isSignal: true, alias: "entity", required: false }] }] });
})();
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && \u0275setClassDebugInfo(UserDetailsContainerComponent, { className: "UserDetailsContainerComponent", filePath: "src/app/features/administration/components/users/user-details-container/user-details-container.component.ts", lineNumber: 21 });
})();

// src/app/features/administration/components/custom-fields/custom-field-details-container/custom-field-details-container.component.ts
function CustomFieldDetailsContainerComponent_Conditional_0_Conditional_0_Template(rf, ctx) {
  if (rf & 1) {
    const _r1 = \u0275\u0275getCurrentView();
    \u0275\u0275elementStart(0, "app-details-accordion-container", 2);
    \u0275\u0275listener("entityChange", function CustomFieldDetailsContainerComponent_Conditional_0_Conditional_0_Template_app_details_accordion_container_entityChange_0_listener($event) {
      \u0275\u0275restoreView(_r1);
      const ctx_r1 = \u0275\u0275nextContext(2);
      return \u0275\u0275resetView(ctx_r1.onEntityChange($event));
    });
    \u0275\u0275elementEnd();
  }
  if (rf & 2) {
    let tmp_4_0;
    const ctx_r1 = \u0275\u0275nextContext(2);
    \u0275\u0275property("sections", ctx_r1.sections())("entity", ctx_r1.fullCustomField())("title", ((tmp_4_0 = ctx_r1.fullCustomField()) == null ? null : tmp_4_0.name) || "Custom Field Details")("allowModeToggle", true);
  }
}
function CustomFieldDetailsContainerComponent_Conditional_0_Conditional_1_Template(rf, ctx) {
  if (rf & 1) {
    \u0275\u0275elementStart(0, "div", 1);
    \u0275\u0275element(1, "p-message", 3);
    \u0275\u0275elementEnd();
  }
}
function CustomFieldDetailsContainerComponent_Conditional_0_Template(rf, ctx) {
  if (rf & 1) {
    \u0275\u0275conditionalCreate(0, CustomFieldDetailsContainerComponent_Conditional_0_Conditional_0_Template, 1, 4, "app-details-accordion-container", 0)(1, CustomFieldDetailsContainerComponent_Conditional_0_Conditional_1_Template, 2, 0, "div", 1);
  }
  if (rf & 2) {
    const ctx_r1 = \u0275\u0275nextContext();
    \u0275\u0275conditional(ctx_r1.fullCustomField() ? 0 : 1);
  }
}
var CustomFieldDetailsContainerComponent = class _CustomFieldDetailsContainerComponent {
  entity = input(null, ...ngDevMode ? [{ debugName: "entity" }] : []);
  customFieldSectionFactory = inject(CustomFieldSectionConfigFactory);
  entityDetailsState = inject(EntityDetailsStateService);
  isLoading = computed(() => this.entityDetailsState.isLoading(), ...ngDevMode ? [{ debugName: "isLoading" }] : []);
  isSoftRefreshing = computed(() => this.entityDetailsState.isSoftRefreshing(), ...ngDevMode ? [{ debugName: "isSoftRefreshing" }] : []);
  isInitialLoading = computed(() => this.isLoading() && !this.isSoftRefreshing() && !this.fullCustomField(), ...ngDevMode ? [{ debugName: "isInitialLoading" }] : []);
  fullCustomField = computed(() => {
    const entityDetails = this.entityDetailsState.selectedItem();
    if (!entityDetails) {
      return null;
    }
    return entityDetails;
  }, ...ngDevMode ? [{ debugName: "fullCustomField" }] : []);
  sections = computed(() => {
    const customField = this.fullCustomField();
    if (!customField)
      return [];
    return this.customFieldSectionFactory.createAllCustomFieldSections(customField);
  }, ...ngDevMode ? [{ debugName: "sections" }] : []);
  error = signal(null, ...ngDevMode ? [{ debugName: "error" }] : []);
  onEntityChange(entity) {
    this.entityDetailsState.updateEntity(entity);
    this.error.set(null);
  }
  static \u0275fac = function CustomFieldDetailsContainerComponent_Factory(__ngFactoryType__) {
    return new (__ngFactoryType__ || _CustomFieldDetailsContainerComponent)();
  };
  static \u0275cmp = /* @__PURE__ */ \u0275\u0275defineComponent({ type: _CustomFieldDetailsContainerComponent, selectors: [["app-custom-field-details-container"]], inputs: { entity: [1, "entity"] }, decls: 1, vars: 1, consts: [["subtitle", "Custom Field", "initialMode", "view", 3, "sections", "entity", "title", "allowModeToggle"], [1, "p-4"], ["subtitle", "Custom Field", "initialMode", "view", 3, "entityChange", "sections", "entity", "title", "allowModeToggle"], ["severity", "info", "text", "No custom field details available."]], template: function CustomFieldDetailsContainerComponent_Template(rf, ctx) {
    if (rf & 1) {
      \u0275\u0275conditionalCreate(0, CustomFieldDetailsContainerComponent_Conditional_0_Template, 2, 1);
    }
    if (rf & 2) {
      \u0275\u0275conditional(!ctx.isInitialLoading() && !ctx.error() ? 0 : -1);
    }
  }, dependencies: [
    DetailsAccordionContainerComponent,
    ProgressSpinnerModule,
    MessageModule,
    Message
  ], encapsulation: 2 });
};
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(CustomFieldDetailsContainerComponent, [{
    type: Component,
    args: [{ selector: "app-custom-field-details-container", imports: [
      DetailsAccordionContainerComponent,
      ProgressSpinnerModule,
      MessageModule
    ], template: `@if (!isInitialLoading() && !error()) {
  @if (fullCustomField()) {
    <app-details-accordion-container
      [sections]="sections()"
      [entity]="fullCustomField()"
      [title]="fullCustomField()?.name || 'Custom Field Details'"
      subtitle="Custom Field"
      [allowModeToggle]="true"
      (entityChange)="onEntityChange($event)"
      initialMode="view"
    ></app-details-accordion-container>
  } @else {
    <div class="p-4">
      <p-message
        severity="info"
        text="No custom field details available."
      ></p-message>
    </div>
  }
}
` }]
  }], null, { entity: [{ type: Input, args: [{ isSignal: true, alias: "entity", required: false }] }] });
})();
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && \u0275setClassDebugInfo(CustomFieldDetailsContainerComponent, { className: "CustomFieldDetailsContainerComponent", filePath: "src/app/features/administration/components/custom-fields/custom-field-details-container/custom-field-details-container.component.ts", lineNumber: 19 });
})();

// src/app/features/administration/components/email-providers/email-provider-details-container/email-provider-details-container.component.ts
function EmailProviderDetailsContainerComponent_Conditional_0_Conditional_0_Template(rf, ctx) {
  if (rf & 1) {
    const _r1 = \u0275\u0275getCurrentView();
    \u0275\u0275elementStart(0, "app-details-accordion-container", 2);
    \u0275\u0275listener("entityChange", function EmailProviderDetailsContainerComponent_Conditional_0_Conditional_0_Template_app_details_accordion_container_entityChange_0_listener($event) {
      \u0275\u0275restoreView(_r1);
      const ctx_r1 = \u0275\u0275nextContext(2);
      return \u0275\u0275resetView(ctx_r1.onEntityChange($event));
    });
    \u0275\u0275elementEnd();
  }
  if (rf & 2) {
    let tmp_4_0;
    const ctx_r1 = \u0275\u0275nextContext(2);
    \u0275\u0275property("sections", ctx_r1.sections())("entity", ctx_r1.fullEmailProvider())("title", ((tmp_4_0 = ctx_r1.fullEmailProvider()) == null ? null : tmp_4_0.name) || "Email Provider Details")("allowModeToggle", true);
  }
}
function EmailProviderDetailsContainerComponent_Conditional_0_Conditional_1_Template(rf, ctx) {
  if (rf & 1) {
    \u0275\u0275elementStart(0, "div", 1);
    \u0275\u0275element(1, "p-message", 3);
    \u0275\u0275elementEnd();
  }
}
function EmailProviderDetailsContainerComponent_Conditional_0_Template(rf, ctx) {
  if (rf & 1) {
    \u0275\u0275conditionalCreate(0, EmailProviderDetailsContainerComponent_Conditional_0_Conditional_0_Template, 1, 4, "app-details-accordion-container", 0)(1, EmailProviderDetailsContainerComponent_Conditional_0_Conditional_1_Template, 2, 0, "div", 1);
  }
  if (rf & 2) {
    const ctx_r1 = \u0275\u0275nextContext();
    \u0275\u0275conditional(ctx_r1.fullEmailProvider() ? 0 : 1);
  }
}
var EmailProviderDetailsContainerComponent = class _EmailProviderDetailsContainerComponent {
  entity = input(null, ...ngDevMode ? [{ debugName: "entity" }] : []);
  emailProviderSectionFactory = inject(EmailProviderSectionConfigFactory);
  entityDetailsState = inject(EntityDetailsStateService);
  entitiesService = inject(EntitiesService);
  operationRegistry = inject(EntityOperationRegistryService);
  cacheService = inject(RequestCacheService);
  apiSchemaService = inject(ApiSchemaService);
  entityName = "EmailProvider";
  isLoading = computed(() => this.entityDetailsState.isLoading(), ...ngDevMode ? [{ debugName: "isLoading" }] : []);
  isSoftRefreshing = computed(() => this.entityDetailsState.isSoftRefreshing(), ...ngDevMode ? [{ debugName: "isSoftRefreshing" }] : []);
  isInitialLoading = computed(() => this.isLoading() && !this.isSoftRefreshing() && !this.fullEmailProvider(), ...ngDevMode ? [{ debugName: "isInitialLoading" }] : []);
  fullEmailProvider = computed(() => {
    const entityDetails = this.entityDetailsState.selectedItem();
    if (!entityDetails) {
      return null;
    }
    return entityDetails;
  }, ...ngDevMode ? [{ debugName: "fullEmailProvider" }] : []);
  sections = computed(() => {
    const emailProvider = this.fullEmailProvider();
    const emailProviderType = this.emailProviderType();
    if (!(emailProvider || isDefined(emailProviderType)))
      return [];
    return this.emailProviderSectionFactory.createAllEmailProviderSections(emailProvider, emailProviderType);
  }, ...ngDevMode ? [{ debugName: "sections" }] : []);
  error = signal(null, ...ngDevMode ? [{ debugName: "error" }] : []);
  emailProviderType = signal(null, ...ngDevMode ? [{ debugName: "emailProviderType" }] : []);
  constructor() {
    this.operationRegistry.registerEntityOperations("email-provider", {
      update: (id, data) => this.entitiesService.updateEmailProvider(id, data),
      create: (data) => this.entitiesService.createEmailProvider(data),
      get: (id) => this.entitiesService.getEmailProvider(id)
    });
    effect(() => {
      const emailProvider = this.fullEmailProvider();
      let typeIdToLoad = null;
      if (emailProvider) {
        typeIdToLoad = this.apiSchemaService.getEntityType(emailProvider, this.entityName)?.id;
      }
      if (isDefined(typeIdToLoad) && typeIdToLoad !== "") {
        this.loadEmailProviderType(typeIdToLoad).catch((error) => {
          this.error.set(error.message);
        });
      } else {
        this.emailProviderType.set(null);
      }
    });
  }
  onEntityChange(entity) {
    this.entityDetailsState.updateEntity(entity);
    this.error.set(null);
  }
  async loadEmailProviderType(emailProviderTypeId) {
    if (!emailProviderTypeId) {
      this.emailProviderType.set(null);
      return;
    }
    await this.cacheService.getOrFetchAsync(`emailProviderType-${emailProviderTypeId}`, () => firstValueFrom(this.entitiesService.getEmailProviderType(emailProviderTypeId)), 3e5).then((response) => {
      this.emailProviderType.set(response);
    });
  }
  static \u0275fac = function EmailProviderDetailsContainerComponent_Factory(__ngFactoryType__) {
    return new (__ngFactoryType__ || _EmailProviderDetailsContainerComponent)();
  };
  static \u0275cmp = /* @__PURE__ */ \u0275\u0275defineComponent({ type: _EmailProviderDetailsContainerComponent, selectors: [["app-email-provider-details-container"]], inputs: { entity: [1, "entity"] }, decls: 1, vars: 1, consts: [["subtitle", "Email Provider", "initialMode", "view", 3, "sections", "entity", "title", "allowModeToggle"], [1, "p-4"], ["subtitle", "Email Provider", "initialMode", "view", 3, "entityChange", "sections", "entity", "title", "allowModeToggle"], ["severity", "info", "text", "No email provider details available."]], template: function EmailProviderDetailsContainerComponent_Template(rf, ctx) {
    if (rf & 1) {
      \u0275\u0275conditionalCreate(0, EmailProviderDetailsContainerComponent_Conditional_0_Template, 2, 1);
    }
    if (rf & 2) {
      \u0275\u0275conditional(!ctx.isInitialLoading() && !ctx.error() ? 0 : -1);
    }
  }, dependencies: [
    DetailsAccordionContainerComponent,
    ProgressSpinnerModule,
    MessageModule,
    Message
  ], encapsulation: 2 });
};
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(EmailProviderDetailsContainerComponent, [{
    type: Component,
    args: [{ selector: "app-email-provider-details-container", imports: [
      DetailsAccordionContainerComponent,
      ProgressSpinnerModule,
      MessageModule
    ], template: `@if (!isInitialLoading() && !error()) {
  @if (fullEmailProvider()) {
    <app-details-accordion-container
      [sections]="sections()"
      [entity]="fullEmailProvider()"
      [title]="fullEmailProvider()?.name || 'Email Provider Details'"
      subtitle="Email Provider"
      [allowModeToggle]="true"
      (entityChange)="onEntityChange($event)"
      initialMode="view"
    ></app-details-accordion-container>
  } @else {
    <div class="p-4">
      <p-message
        severity="info"
        text="No email provider details available."
      ></p-message>
    </div>
  }
}
` }]
  }], () => [], { entity: [{ type: Input, args: [{ isSignal: true, alias: "entity", required: false }] }] });
})();
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && \u0275setClassDebugInfo(EmailProviderDetailsContainerComponent, { className: "EmailProviderDetailsContainerComponent", filePath: "src/app/features/administration/components/email-providers/email-provider-details-container/email-provider-details-container.component.ts", lineNumber: 40 });
})();

// src/app/features/administration/components/themes/theme-details-container/theme-details-container.component.ts
function ThemeDetailsContainerComponent_Conditional_0_Conditional_0_Template(rf, ctx) {
  if (rf & 1) {
    const _r1 = \u0275\u0275getCurrentView();
    \u0275\u0275elementStart(0, "app-details-accordion-container", 2);
    \u0275\u0275listener("entityChange", function ThemeDetailsContainerComponent_Conditional_0_Conditional_0_Template_app_details_accordion_container_entityChange_0_listener($event) {
      \u0275\u0275restoreView(_r1);
      const ctx_r1 = \u0275\u0275nextContext(2);
      return \u0275\u0275resetView(ctx_r1.onEntityChange($event));
    });
    \u0275\u0275elementEnd();
  }
  if (rf & 2) {
    let tmp_4_0;
    const ctx_r1 = \u0275\u0275nextContext(2);
    \u0275\u0275property("sections", ctx_r1.sections())("entity", ctx_r1.fullTheme())("title", ((tmp_4_0 = ctx_r1.fullTheme()) == null ? null : tmp_4_0.name) || "Theme Details")("allowModeToggle", true);
  }
}
function ThemeDetailsContainerComponent_Conditional_0_Conditional_1_Template(rf, ctx) {
  if (rf & 1) {
    \u0275\u0275elementStart(0, "div", 1);
    \u0275\u0275element(1, "p-message", 3);
    \u0275\u0275elementEnd();
  }
}
function ThemeDetailsContainerComponent_Conditional_0_Template(rf, ctx) {
  if (rf & 1) {
    \u0275\u0275conditionalCreate(0, ThemeDetailsContainerComponent_Conditional_0_Conditional_0_Template, 1, 4, "app-details-accordion-container", 0)(1, ThemeDetailsContainerComponent_Conditional_0_Conditional_1_Template, 2, 0, "div", 1);
  }
  if (rf & 2) {
    const ctx_r1 = \u0275\u0275nextContext();
    \u0275\u0275conditional(ctx_r1.fullTheme() ? 0 : 1);
  }
}
var ThemeDetailsContainerComponent = class _ThemeDetailsContainerComponent {
  entity = input(null, ...ngDevMode ? [{ debugName: "entity" }] : []);
  themeSectionFactory = inject(ThemeSectionConfigFactory);
  entityDetailsState = inject(EntityDetailsStateService);
  themeService = inject(ThemeDataService);
  isLoading = computed(() => this.entityDetailsState.isLoading(), ...ngDevMode ? [{ debugName: "isLoading" }] : []);
  isSoftRefreshing = computed(() => this.entityDetailsState.isSoftRefreshing(), ...ngDevMode ? [{ debugName: "isSoftRefreshing" }] : []);
  isInitialLoading = computed(() => this.isLoading() && !this.isSoftRefreshing() && !this.fullTheme(), ...ngDevMode ? [{ debugName: "isInitialLoading" }] : []);
  fullTheme = computed(() => {
    const entityDetails = this.entityDetailsState.selectedItem();
    if (!entityDetails) {
      return null;
    }
    return entityDetails;
  }, ...ngDevMode ? [{ debugName: "fullTheme" }] : []);
  sections = computed(() => {
    const theme = this.fullTheme();
    if (!theme)
      return [];
    return this.themeSectionFactory.createAllThemeSections(theme);
  }, ...ngDevMode ? [{ debugName: "sections" }] : []);
  error = signal(null, ...ngDevMode ? [{ debugName: "error" }] : []);
  onEntityChange(entity) {
    this.entityDetailsState.updateEntity(entity);
    this.error.set(null);
  }
  constructor() {
    effect(() => {
      const entity = this.entity();
      if (isDefined(entity)) {
        this.themeService.setTheme(entity);
      }
    });
  }
  static \u0275fac = function ThemeDetailsContainerComponent_Factory(__ngFactoryType__) {
    return new (__ngFactoryType__ || _ThemeDetailsContainerComponent)();
  };
  static \u0275cmp = /* @__PURE__ */ \u0275\u0275defineComponent({ type: _ThemeDetailsContainerComponent, selectors: [["app-theme-details-container"]], inputs: { entity: [1, "entity"] }, decls: 1, vars: 1, consts: [["subtitle", "Theme", "initialMode", "view", 3, "sections", "entity", "title", "allowModeToggle"], [1, "p-4"], ["subtitle", "Theme", "initialMode", "view", 3, "entityChange", "sections", "entity", "title", "allowModeToggle"], ["severity", "info", "text", "No theme details available."]], template: function ThemeDetailsContainerComponent_Template(rf, ctx) {
    if (rf & 1) {
      \u0275\u0275conditionalCreate(0, ThemeDetailsContainerComponent_Conditional_0_Template, 2, 1);
    }
    if (rf & 2) {
      \u0275\u0275conditional(!ctx.isInitialLoading() && !ctx.error() ? 0 : -1);
    }
  }, dependencies: [
    DetailsAccordionContainerComponent,
    ProgressSpinnerModule,
    MessageModule,
    Message
  ], encapsulation: 2 });
};
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(ThemeDetailsContainerComponent, [{
    type: Component,
    args: [{ selector: "app-theme-details-container", imports: [
      DetailsAccordionContainerComponent,
      ProgressSpinnerModule,
      MessageModule
    ], template: `@if (!isInitialLoading() && !error()) {
  @if (fullTheme()) {
    <app-details-accordion-container
      [sections]="sections()"
      [entity]="fullTheme()"
      [title]="fullTheme()?.name || 'Theme Details'"
      subtitle="Theme"
      [allowModeToggle]="true"
      (entityChange)="onEntityChange($event)"
      initialMode="view"
    ></app-details-accordion-container>
  } @else {
    <div class="p-4">
      <p-message severity="info" text="No theme details available."></p-message>
    </div>
  }
}
` }]
  }], () => [], { entity: [{ type: Input, args: [{ isSignal: true, alias: "entity", required: false }] }] });
})();
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && \u0275setClassDebugInfo(ThemeDetailsContainerComponent, { className: "ThemeDetailsContainerComponent", filePath: "src/app/features/administration/components/themes/theme-details-container/theme-details-container.component.ts", lineNumber: 29 });
})();

// src/app/features/administration/components/cost-centres/cost-centre-details-container/cost-centre-details-container.component.ts
function CostCentreDetailsContainerComponent_Conditional_0_Conditional_0_Template(rf, ctx) {
  if (rf & 1) {
    const _r1 = \u0275\u0275getCurrentView();
    \u0275\u0275elementStart(0, "app-details-accordion-container", 2);
    \u0275\u0275listener("entityChange", function CostCentreDetailsContainerComponent_Conditional_0_Conditional_0_Template_app_details_accordion_container_entityChange_0_listener($event) {
      \u0275\u0275restoreView(_r1);
      const ctx_r1 = \u0275\u0275nextContext(2);
      return \u0275\u0275resetView(ctx_r1.onEntityChange($event));
    });
    \u0275\u0275elementEnd();
  }
  if (rf & 2) {
    let tmp_4_0;
    const ctx_r1 = \u0275\u0275nextContext(2);
    \u0275\u0275property("sections", ctx_r1.sections())("entity", ctx_r1.fullCostCentre())("title", ((tmp_4_0 = ctx_r1.fullCostCentre()) == null ? null : tmp_4_0.name) || "Cost Centre Details")("allowModeToggle", true);
  }
}
function CostCentreDetailsContainerComponent_Conditional_0_Conditional_1_Template(rf, ctx) {
  if (rf & 1) {
    \u0275\u0275elementStart(0, "div", 1);
    \u0275\u0275element(1, "p-message", 3);
    \u0275\u0275elementEnd();
  }
}
function CostCentreDetailsContainerComponent_Conditional_0_Template(rf, ctx) {
  if (rf & 1) {
    \u0275\u0275conditionalCreate(0, CostCentreDetailsContainerComponent_Conditional_0_Conditional_0_Template, 1, 4, "app-details-accordion-container", 0)(1, CostCentreDetailsContainerComponent_Conditional_0_Conditional_1_Template, 2, 0, "div", 1);
  }
  if (rf & 2) {
    const ctx_r1 = \u0275\u0275nextContext();
    \u0275\u0275conditional(ctx_r1.fullCostCentre() ? 0 : 1);
  }
}
var CostCentreDetailsContainerComponent = class _CostCentreDetailsContainerComponent {
  entity = input(null, ...ngDevMode ? [{ debugName: "entity" }] : []);
  costCentreSectionFactory = inject(CostCentreSectionConfigFactory);
  entityDetailsState = inject(EntityDetailsStateService);
  entitiesService = inject(EntitiesService);
  operationRegistry = inject(EntityOperationRegistryService);
  isLoading = computed(() => this.entityDetailsState.isLoading(), ...ngDevMode ? [{ debugName: "isLoading" }] : []);
  isSoftRefreshing = computed(() => this.entityDetailsState.isSoftRefreshing(), ...ngDevMode ? [{ debugName: "isSoftRefreshing" }] : []);
  isInitialLoading = computed(() => this.isLoading() && !this.isSoftRefreshing() && !this.fullCostCentre(), ...ngDevMode ? [{ debugName: "isInitialLoading" }] : []);
  fullCostCentre = computed(() => {
    const entityDetails = this.entityDetailsState.selectedItem();
    if (!entityDetails) {
      return null;
    }
    return entityDetails;
  }, ...ngDevMode ? [{ debugName: "fullCostCentre" }] : []);
  sections = computed(() => {
    const costCentre = this.fullCostCentre();
    if (!costCentre)
      return [];
    return this.costCentreSectionFactory.createAllCostCentreSections(costCentre);
  }, ...ngDevMode ? [{ debugName: "sections" }] : []);
  error = signal(null, ...ngDevMode ? [{ debugName: "error" }] : []);
  constructor() {
    this.operationRegistry.registerEntityOperations("cost-centre", {
      update: (id, data) => this.entitiesService.updateCostCentre(id, data),
      create: (data) => this.entitiesService.createCostCentre(data),
      get: (id) => this.entitiesService.getCostCentre(id)
    });
  }
  onEntityChange(entity) {
    this.entityDetailsState.updateEntity(entity);
    this.error.set(null);
  }
  static \u0275fac = function CostCentreDetailsContainerComponent_Factory(__ngFactoryType__) {
    return new (__ngFactoryType__ || _CostCentreDetailsContainerComponent)();
  };
  static \u0275cmp = /* @__PURE__ */ \u0275\u0275defineComponent({ type: _CostCentreDetailsContainerComponent, selectors: [["app-cost-centre-details-container"]], inputs: { entity: [1, "entity"] }, decls: 1, vars: 1, consts: [["subtitle", "Cost Centre", "initialMode", "view", 3, "sections", "entity", "title", "allowModeToggle"], [1, "p-4"], ["subtitle", "Cost Centre", "initialMode", "view", 3, "entityChange", "sections", "entity", "title", "allowModeToggle"], ["severity", "info", "text", "No cost centre details available."]], template: function CostCentreDetailsContainerComponent_Template(rf, ctx) {
    if (rf & 1) {
      \u0275\u0275conditionalCreate(0, CostCentreDetailsContainerComponent_Conditional_0_Template, 2, 1);
    }
    if (rf & 2) {
      \u0275\u0275conditional(!ctx.isInitialLoading() && !ctx.error() ? 0 : -1);
    }
  }, dependencies: [
    DetailsAccordionContainerComponent,
    ProgressSpinnerModule,
    MessageModule,
    Message
  ], encapsulation: 2 });
};
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(CostCentreDetailsContainerComponent, [{
    type: Component,
    args: [{ selector: "app-cost-centre-details-container", imports: [
      DetailsAccordionContainerComponent,
      ProgressSpinnerModule,
      MessageModule
    ], template: `@if (!isInitialLoading() && !error()) {
  @if (fullCostCentre()) {
    <app-details-accordion-container
      [sections]="sections()"
      [entity]="fullCostCentre()"
      [title]="fullCostCentre()?.name || 'Cost Centre Details'"
      subtitle="Cost Centre"
      [allowModeToggle]="true"
      (entityChange)="onEntityChange($event)"
      initialMode="view"
    ></app-details-accordion-container>
  } @else {
    <div class="p-4">
      <p-message
        severity="info"
        text="No cost centre details available."
      ></p-message>
    </div>
  }
}
` }]
  }], () => [], { entity: [{ type: Input, args: [{ isSignal: true, alias: "entity", required: false }] }] });
})();
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && \u0275setClassDebugInfo(CostCentreDetailsContainerComponent, { className: "CostCentreDetailsContainerComponent", filePath: "src/app/features/administration/components/cost-centres/cost-centre-details-container/cost-centre-details-container.component.ts", lineNumber: 26 });
})();

// src/app/features/administration/components/geofence-groups/geofence-group-details-container/geofence-group-details-container.component.ts
function GeofenceGroupDetailsContainerComponent_Conditional_0_Conditional_0_Template(rf, ctx) {
  if (rf & 1) {
    const _r1 = \u0275\u0275getCurrentView();
    \u0275\u0275elementStart(0, "app-details-accordion-container", 2);
    \u0275\u0275listener("entityChange", function GeofenceGroupDetailsContainerComponent_Conditional_0_Conditional_0_Template_app_details_accordion_container_entityChange_0_listener($event) {
      \u0275\u0275restoreView(_r1);
      const ctx_r1 = \u0275\u0275nextContext(2);
      return \u0275\u0275resetView(ctx_r1.onEntityChange($event));
    });
    \u0275\u0275elementEnd();
  }
  if (rf & 2) {
    let tmp_4_0;
    const ctx_r1 = \u0275\u0275nextContext(2);
    \u0275\u0275property("sections", ctx_r1.sections())("entity", ctx_r1.fullGeofenceGroup())("title", ((tmp_4_0 = ctx_r1.fullGeofenceGroup()) == null ? null : tmp_4_0.name) || "Geofence Group Details")("allowModeToggle", true);
  }
}
function GeofenceGroupDetailsContainerComponent_Conditional_0_Conditional_1_Template(rf, ctx) {
  if (rf & 1) {
    \u0275\u0275elementStart(0, "div", 1);
    \u0275\u0275element(1, "p-message", 3);
    \u0275\u0275elementEnd();
  }
}
function GeofenceGroupDetailsContainerComponent_Conditional_0_Template(rf, ctx) {
  if (rf & 1) {
    \u0275\u0275conditionalCreate(0, GeofenceGroupDetailsContainerComponent_Conditional_0_Conditional_0_Template, 1, 4, "app-details-accordion-container", 0)(1, GeofenceGroupDetailsContainerComponent_Conditional_0_Conditional_1_Template, 2, 0, "div", 1);
  }
  if (rf & 2) {
    const ctx_r1 = \u0275\u0275nextContext();
    \u0275\u0275conditional(ctx_r1.fullGeofenceGroup() ? 0 : 1);
  }
}
var GeofenceGroupDetailsContainerComponent = class _GeofenceGroupDetailsContainerComponent {
  entity = input(null, ...ngDevMode ? [{ debugName: "entity" }] : []);
  geofenceGroupSectionFactory = inject(GeofenceGroupSectionConfigFactory);
  entityDetailsState = inject(EntityDetailsStateService);
  entitiesService = inject(EntitiesService);
  operationRegistry = inject(EntityOperationRegistryService);
  isLoading = computed(() => this.entityDetailsState.isLoading(), ...ngDevMode ? [{ debugName: "isLoading" }] : []);
  isSoftRefreshing = computed(() => this.entityDetailsState.isSoftRefreshing(), ...ngDevMode ? [{ debugName: "isSoftRefreshing" }] : []);
  isInitialLoading = computed(() => this.isLoading() && !this.isSoftRefreshing() && !this.fullGeofenceGroup(), ...ngDevMode ? [{ debugName: "isInitialLoading" }] : []);
  fullGeofenceGroup = computed(() => {
    const entityDetails = this.entityDetailsState.selectedItem();
    if (!entityDetails) {
      return null;
    }
    return entityDetails;
  }, ...ngDevMode ? [{ debugName: "fullGeofenceGroup" }] : []);
  sections = computed(() => {
    const geofenceGroup = this.fullGeofenceGroup();
    if (!geofenceGroup)
      return [];
    return this.geofenceGroupSectionFactory.createAllGeofenceGroupSections(geofenceGroup);
  }, ...ngDevMode ? [{ debugName: "sections" }] : []);
  error = signal(null, ...ngDevMode ? [{ debugName: "error" }] : []);
  constructor() {
    this.operationRegistry.registerEntityOperations("geofence-group", {
      update: (id, data) => this.entitiesService.updateZoneGroup(id, data),
      create: (data) => this.entitiesService.createZoneGroup(data),
      get: (id) => this.entitiesService.getZoneGroup(id)
    });
  }
  onEntityChange(entity) {
    this.entityDetailsState.updateEntity(entity);
    this.error.set(null);
  }
  static \u0275fac = function GeofenceGroupDetailsContainerComponent_Factory(__ngFactoryType__) {
    return new (__ngFactoryType__ || _GeofenceGroupDetailsContainerComponent)();
  };
  static \u0275cmp = /* @__PURE__ */ \u0275\u0275defineComponent({ type: _GeofenceGroupDetailsContainerComponent, selectors: [["app-geofence-group-details-container"]], inputs: { entity: [1, "entity"] }, decls: 1, vars: 1, consts: [["subtitle", "Geofence Group", "initialMode", "view", 3, "sections", "entity", "title", "allowModeToggle"], [1, "p-4"], ["subtitle", "Geofence Group", "initialMode", "view", 3, "entityChange", "sections", "entity", "title", "allowModeToggle"], ["severity", "info", "text", "No geofence group details available."]], template: function GeofenceGroupDetailsContainerComponent_Template(rf, ctx) {
    if (rf & 1) {
      \u0275\u0275conditionalCreate(0, GeofenceGroupDetailsContainerComponent_Conditional_0_Template, 2, 1);
    }
    if (rf & 2) {
      \u0275\u0275conditional(!ctx.isInitialLoading() && !ctx.error() ? 0 : -1);
    }
  }, dependencies: [
    DetailsAccordionContainerComponent,
    ProgressSpinnerModule,
    MessageModule,
    Message
  ], encapsulation: 2 });
};
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(GeofenceGroupDetailsContainerComponent, [{
    type: Component,
    args: [{ selector: "app-geofence-group-details-container", imports: [
      DetailsAccordionContainerComponent,
      ProgressSpinnerModule,
      MessageModule
    ], template: `@if (!isInitialLoading() && !error()) {
  @if (fullGeofenceGroup()) {
    <app-details-accordion-container
      [sections]="sections()"
      [entity]="fullGeofenceGroup()"
      [title]="fullGeofenceGroup()?.name || 'Geofence Group Details'"
      subtitle="Geofence Group"
      [allowModeToggle]="true"
      (entityChange)="onEntityChange($event)"
      initialMode="view"
    ></app-details-accordion-container>
  } @else {
    <div class="p-4">
      <p-message
        severity="info"
        text="No geofence group details available."
      ></p-message>
    </div>
  }
}
` }]
  }], () => [], { entity: [{ type: Input, args: [{ isSignal: true, alias: "entity", required: false }] }] });
})();
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && \u0275setClassDebugInfo(GeofenceGroupDetailsContainerComponent, { className: "GeofenceGroupDetailsContainerComponent", filePath: "src/app/features/administration/components/geofence-groups/geofence-group-details-container/geofence-group-details-container.component.ts", lineNumber: 26 });
})();

// src/app/features/administration/components/asset-groups/asset-group-details-container/asset-group-details-container.component.ts
function AssetGroupDetailsContainerComponent_Conditional_0_Conditional_0_Template(rf, ctx) {
  if (rf & 1) {
    const _r1 = \u0275\u0275getCurrentView();
    \u0275\u0275elementStart(0, "app-details-accordion-container", 2);
    \u0275\u0275listener("entityChange", function AssetGroupDetailsContainerComponent_Conditional_0_Conditional_0_Template_app_details_accordion_container_entityChange_0_listener($event) {
      \u0275\u0275restoreView(_r1);
      const ctx_r1 = \u0275\u0275nextContext(2);
      return \u0275\u0275resetView(ctx_r1.onEntityChange($event));
    });
    \u0275\u0275elementEnd();
  }
  if (rf & 2) {
    let tmp_4_0;
    const ctx_r1 = \u0275\u0275nextContext(2);
    \u0275\u0275property("sections", ctx_r1.sections())("entity", ctx_r1.fullAssetGroup())("title", ((tmp_4_0 = ctx_r1.fullAssetGroup()) == null ? null : tmp_4_0.name) || "Asset Group Details")("allowModeToggle", true);
  }
}
function AssetGroupDetailsContainerComponent_Conditional_0_Conditional_1_Template(rf, ctx) {
  if (rf & 1) {
    \u0275\u0275elementStart(0, "div", 1);
    \u0275\u0275element(1, "p-message", 3);
    \u0275\u0275elementEnd();
  }
}
function AssetGroupDetailsContainerComponent_Conditional_0_Template(rf, ctx) {
  if (rf & 1) {
    \u0275\u0275conditionalCreate(0, AssetGroupDetailsContainerComponent_Conditional_0_Conditional_0_Template, 1, 4, "app-details-accordion-container", 0)(1, AssetGroupDetailsContainerComponent_Conditional_0_Conditional_1_Template, 2, 0, "div", 1);
  }
  if (rf & 2) {
    const ctx_r1 = \u0275\u0275nextContext();
    \u0275\u0275conditional(ctx_r1.fullAssetGroup() ? 0 : 1);
  }
}
var AssetGroupDetailsContainerComponent = class _AssetGroupDetailsContainerComponent {
  entity = input(null, ...ngDevMode ? [{ debugName: "entity" }] : []);
  assetGroupSectionFactory = inject(AssetGroupSectionConfigFactory);
  entityDetailsState = inject(EntityDetailsStateService);
  entitiesService = inject(EntitiesService);
  operationRegistry = inject(EntityOperationRegistryService);
  isLoading = computed(() => this.entityDetailsState.isLoading(), ...ngDevMode ? [{ debugName: "isLoading" }] : []);
  isSoftRefreshing = computed(() => this.entityDetailsState.isSoftRefreshing(), ...ngDevMode ? [{ debugName: "isSoftRefreshing" }] : []);
  isInitialLoading = computed(() => this.isLoading() && !this.isSoftRefreshing() && !this.fullAssetGroup(), ...ngDevMode ? [{ debugName: "isInitialLoading" }] : []);
  fullAssetGroup = computed(() => {
    const entityDetails = this.entityDetailsState.selectedItem();
    if (!entityDetails) {
      return null;
    }
    return entityDetails;
  }, ...ngDevMode ? [{ debugName: "fullAssetGroup" }] : []);
  sections = computed(() => {
    const assetGroup = this.fullAssetGroup();
    if (!assetGroup)
      return [];
    return this.assetGroupSectionFactory.createAllAssetGroupSections(assetGroup);
  }, ...ngDevMode ? [{ debugName: "sections" }] : []);
  error = signal(null, ...ngDevMode ? [{ debugName: "error" }] : []);
  constructor() {
    this.operationRegistry.registerEntityOperations("asset-group", {
      update: (id, data) => this.entitiesService.updateAssetGroup(id, data),
      create: (data) => this.entitiesService.createAssetGroup(data),
      get: (id) => this.entitiesService.getAssetGroup(id)
    });
  }
  onEntityChange(entity) {
    this.entityDetailsState.updateEntity(entity);
    this.error.set(null);
  }
  static \u0275fac = function AssetGroupDetailsContainerComponent_Factory(__ngFactoryType__) {
    return new (__ngFactoryType__ || _AssetGroupDetailsContainerComponent)();
  };
  static \u0275cmp = /* @__PURE__ */ \u0275\u0275defineComponent({ type: _AssetGroupDetailsContainerComponent, selectors: [["app-asset-group-details-container"]], inputs: { entity: [1, "entity"] }, decls: 1, vars: 1, consts: [["subtitle", "Asset Group", "initialMode", "view", 3, "sections", "entity", "title", "allowModeToggle"], [1, "p-4"], ["subtitle", "Asset Group", "initialMode", "view", 3, "entityChange", "sections", "entity", "title", "allowModeToggle"], ["severity", "info", "text", "No asset group details available."]], template: function AssetGroupDetailsContainerComponent_Template(rf, ctx) {
    if (rf & 1) {
      \u0275\u0275conditionalCreate(0, AssetGroupDetailsContainerComponent_Conditional_0_Template, 2, 1);
    }
    if (rf & 2) {
      \u0275\u0275conditional(!ctx.isInitialLoading() && !ctx.error() ? 0 : -1);
    }
  }, dependencies: [
    DetailsAccordionContainerComponent,
    ProgressSpinnerModule,
    MessageModule,
    Message
  ], encapsulation: 2 });
};
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(AssetGroupDetailsContainerComponent, [{
    type: Component,
    args: [{ selector: "app-asset-group-details-container", imports: [
      DetailsAccordionContainerComponent,
      ProgressSpinnerModule,
      MessageModule
    ], template: `@if (!isInitialLoading() && !error()) {
  @if (fullAssetGroup()) {
    <app-details-accordion-container
      [sections]="sections()"
      [entity]="fullAssetGroup()"
      [title]="fullAssetGroup()?.name || 'Asset Group Details'"
      subtitle="Asset Group"
      [allowModeToggle]="true"
      (entityChange)="onEntityChange($event)"
      initialMode="view"
    ></app-details-accordion-container>
  } @else {
    <div class="p-4">
      <p-message
        severity="info"
        text="No asset group details available."
      ></p-message>
    </div>
  }
}
` }]
  }], () => [], { entity: [{ type: Input, args: [{ isSignal: true, alias: "entity", required: false }] }] });
})();
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && \u0275setClassDebugInfo(AssetGroupDetailsContainerComponent, { className: "AssetGroupDetailsContainerComponent", filePath: "src/app/features/administration/components/asset-groups/asset-group-details-container/asset-group-details-container.component.ts", lineNumber: 26 });
})();

// src/app/features/administration/components/asset-categories/asset-category-details-container/asset-category-details-container.component.ts
function AssetCategoryDetailsContainerComponent_Conditional_0_Conditional_0_Template(rf, ctx) {
  if (rf & 1) {
    const _r1 = \u0275\u0275getCurrentView();
    \u0275\u0275elementStart(0, "app-details-accordion-container", 2);
    \u0275\u0275listener("entityChange", function AssetCategoryDetailsContainerComponent_Conditional_0_Conditional_0_Template_app_details_accordion_container_entityChange_0_listener($event) {
      \u0275\u0275restoreView(_r1);
      const ctx_r1 = \u0275\u0275nextContext(2);
      return \u0275\u0275resetView(ctx_r1.onEntityChange($event));
    });
    \u0275\u0275elementEnd();
  }
  if (rf & 2) {
    let tmp_4_0;
    const ctx_r1 = \u0275\u0275nextContext(2);
    \u0275\u0275property("sections", ctx_r1.sections())("entity", ctx_r1.fullAssetCategory())("title", ((tmp_4_0 = ctx_r1.fullAssetCategory()) == null ? null : tmp_4_0.name) || "Asset Category Details")("allowModeToggle", true);
  }
}
function AssetCategoryDetailsContainerComponent_Conditional_0_Conditional_1_Template(rf, ctx) {
  if (rf & 1) {
    \u0275\u0275elementStart(0, "div", 1);
    \u0275\u0275element(1, "p-message", 3);
    \u0275\u0275elementEnd();
  }
}
function AssetCategoryDetailsContainerComponent_Conditional_0_Template(rf, ctx) {
  if (rf & 1) {
    \u0275\u0275conditionalCreate(0, AssetCategoryDetailsContainerComponent_Conditional_0_Conditional_0_Template, 1, 4, "app-details-accordion-container", 0)(1, AssetCategoryDetailsContainerComponent_Conditional_0_Conditional_1_Template, 2, 0, "div", 1);
  }
  if (rf & 2) {
    const ctx_r1 = \u0275\u0275nextContext();
    \u0275\u0275conditional(ctx_r1.fullAssetCategory() ? 0 : 1);
  }
}
var AssetCategoryDetailsContainerComponent = class _AssetCategoryDetailsContainerComponent {
  entity = input(null, ...ngDevMode ? [{ debugName: "entity" }] : []);
  assetCategorySectionFactory = inject(AssetCategorySectionConfigFactory);
  entityDetailsState = inject(EntityDetailsStateService);
  entitiesService = inject(EntitiesService);
  operationRegistry = inject(EntityOperationRegistryService);
  broadcastService = inject(BroadcastEventMessageService);
  toastService = inject(ToastService);
  destroyRef = inject(DestroyRef);
  isLoading = computed(() => this.entityDetailsState.isLoading(), ...ngDevMode ? [{ debugName: "isLoading" }] : []);
  isSoftRefreshing = computed(() => this.entityDetailsState.isSoftRefreshing(), ...ngDevMode ? [{ debugName: "isSoftRefreshing" }] : []);
  isInitialLoading = computed(() => this.isLoading() && !this.isSoftRefreshing() && !this.fullAssetCategory(), ...ngDevMode ? [{ debugName: "isInitialLoading" }] : []);
  fullAssetCategory = computed(() => {
    const entityDetails = this.entityDetailsState.selectedItem();
    if (!entityDetails) {
      return null;
    }
    return entityDetails;
  }, ...ngDevMode ? [{ debugName: "fullAssetCategory" }] : []);
  sections = computed(() => {
    const assetCategory = this.fullAssetCategory();
    if (!assetCategory)
      return [];
    return this.assetCategorySectionFactory.createAllAssetCategorySections(assetCategory);
  }, ...ngDevMode ? [{ debugName: "sections" }] : []);
  error = signal(null, ...ngDevMode ? [{ debugName: "error" }] : []);
  isEntityUpdatedMessage(message) {
    return isDefined(message) && message !== null && typeof message === "object" && "entityType" in message && "data" in message && message.entityType === "asset-category";
  }
  constructor() {
    this.operationRegistry.registerEntityOperations("asset-category", {
      update: (id, data) => this.entitiesService.updateAssetCategory(id, data),
      create: (data) => this.entitiesService.createAssetCategory(data),
      get: (id) => this.entitiesService.getAssetCategory(id)
    });
  }
  ngOnInit() {
    this.broadcastService.on("entity-updated").pipe(takeUntilDestroyed(this.destroyRef)).subscribe((message) => {
      if (this.isEntityUpdatedMessage(message)) {
        this.toastService.showSuccess("Success", "Asset category updated successfully");
        this.onEntityChange(message.data);
      }
    });
  }
  onEntityChange(entity) {
    this.entityDetailsState.updateEntity(entity);
    this.error.set(null);
  }
  static \u0275fac = function AssetCategoryDetailsContainerComponent_Factory(__ngFactoryType__) {
    return new (__ngFactoryType__ || _AssetCategoryDetailsContainerComponent)();
  };
  static \u0275cmp = /* @__PURE__ */ \u0275\u0275defineComponent({ type: _AssetCategoryDetailsContainerComponent, selectors: [["app-asset-category-details-container"]], inputs: { entity: [1, "entity"] }, decls: 1, vars: 1, consts: [["subtitle", "Asset Category", "initialMode", "view", 3, "sections", "entity", "title", "allowModeToggle"], [1, "p-4"], ["subtitle", "Asset Category", "initialMode", "view", 3, "entityChange", "sections", "entity", "title", "allowModeToggle"], ["severity", "info", "text", "No asset category details available."]], template: function AssetCategoryDetailsContainerComponent_Template(rf, ctx) {
    if (rf & 1) {
      \u0275\u0275conditionalCreate(0, AssetCategoryDetailsContainerComponent_Conditional_0_Template, 2, 1);
    }
    if (rf & 2) {
      \u0275\u0275conditional(!ctx.isInitialLoading() && !ctx.error() ? 0 : -1);
    }
  }, dependencies: [
    DetailsAccordionContainerComponent,
    ProgressSpinnerModule,
    MessageModule,
    Message
  ], encapsulation: 2 });
};
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(AssetCategoryDetailsContainerComponent, [{
    type: Component,
    args: [{ selector: "app-asset-category-details-container", imports: [
      DetailsAccordionContainerComponent,
      ProgressSpinnerModule,
      MessageModule
    ], template: `@if (!isInitialLoading() && !error()) {
  @if (fullAssetCategory()) {
    <app-details-accordion-container
      [sections]="sections()"
      [entity]="fullAssetCategory()"
      [title]="fullAssetCategory()?.name || 'Asset Category Details'"
      subtitle="Asset Category"
      [allowModeToggle]="true"
      (entityChange)="onEntityChange($event)"
      initialMode="view"
    ></app-details-accordion-container>
  } @else {
    <div class="p-4">
      <p-message
        severity="info"
        text="No asset category details available."
      ></p-message>
    </div>
  }
}
` }]
  }], () => [], { entity: [{ type: Input, args: [{ isSignal: true, alias: "entity", required: false }] }] });
})();
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && \u0275setClassDebugInfo(AssetCategoryDetailsContainerComponent, { className: "AssetCategoryDetailsContainerComponent", filePath: "src/app/features/administration/components/asset-categories/asset-category-details-container/asset-category-details-container.component.ts", lineNumber: 42 });
})();

// src/app/features/administration/components/vendor-clients/vendor-client-details-container/vendor-client-details-container.component.ts
function VendorClientDetailsContainerComponent_Conditional_0_Conditional_0_Template(rf, ctx) {
  if (rf & 1) {
    const _r1 = \u0275\u0275getCurrentView();
    \u0275\u0275elementStart(0, "app-details-accordion-container", 2);
    \u0275\u0275listener("entityChange", function VendorClientDetailsContainerComponent_Conditional_0_Conditional_0_Template_app_details_accordion_container_entityChange_0_listener($event) {
      \u0275\u0275restoreView(_r1);
      const ctx_r1 = \u0275\u0275nextContext(2);
      return \u0275\u0275resetView(ctx_r1.onEntityChange($event));
    });
    \u0275\u0275elementEnd();
  }
  if (rf & 2) {
    let tmp_4_0;
    const ctx_r1 = \u0275\u0275nextContext(2);
    \u0275\u0275property("sections", ctx_r1.sections())("entity", ctx_r1.fullClient())("title", ((tmp_4_0 = ctx_r1.fullClient()) == null ? null : tmp_4_0.name) || "Client Details")("allowModeToggle", true);
  }
}
function VendorClientDetailsContainerComponent_Conditional_0_Conditional_1_Template(rf, ctx) {
  if (rf & 1) {
    \u0275\u0275elementStart(0, "div", 1);
    \u0275\u0275element(1, "p-message", 3);
    \u0275\u0275elementEnd();
  }
}
function VendorClientDetailsContainerComponent_Conditional_0_Template(rf, ctx) {
  if (rf & 1) {
    \u0275\u0275conditionalCreate(0, VendorClientDetailsContainerComponent_Conditional_0_Conditional_0_Template, 1, 4, "app-details-accordion-container", 0)(1, VendorClientDetailsContainerComponent_Conditional_0_Conditional_1_Template, 2, 0, "div", 1);
  }
  if (rf & 2) {
    const ctx_r1 = \u0275\u0275nextContext();
    \u0275\u0275conditional(ctx_r1.fullClient() ? 0 : 1);
  }
}
var VendorClientDetailsContainerComponent = class _VendorClientDetailsContainerComponent {
  entity = input(null, ...ngDevMode ? [{ debugName: "entity" }] : []);
  clientSectionFactory = inject(ClientSectionConfigFactory);
  entityDetailsState = inject(EntityDetailsStateService);
  accountsService = inject(AccountsService);
  operationRegistry = inject(EntityOperationRegistryService);
  authDataService = inject(AuthDataService);
  broadcastService = inject(BroadcastEventMessageService);
  destroyRef = inject(DestroyRef);
  isLoading = computed(() => this.entityDetailsState.isLoading(), ...ngDevMode ? [{ debugName: "isLoading" }] : []);
  isSoftRefreshing = computed(() => this.entityDetailsState.isSoftRefreshing(), ...ngDevMode ? [{ debugName: "isSoftRefreshing" }] : []);
  isInitialLoading = computed(() => this.isLoading() && !this.isSoftRefreshing() && !this.fullClient(), ...ngDevMode ? [{ debugName: "isInitialLoading" }] : []);
  fullClient = computed(() => {
    const entityDetails = this.entityDetailsState.selectedItem();
    if (isNullOrUndefined(entityDetails)) {
      return null;
    }
    return entityDetails;
  }, ...ngDevMode ? [{ debugName: "fullClient" }] : []);
  sections = computed(() => {
    const client = this.fullClient();
    if (isNullOrUndefined(client))
      return [];
    if (this.authDataService.getUserProfile()?.owner?.type !== "client") {
      let appFeatures = Object.keys(AppFeatures);
      const useFlags = this.authDataService.flags;
      if (isNullOrUndefined(useFlags.assetPerformanceEnabled())) {
        appFeatures = appFeatures.filter((feature) => feature !== "page-assetperformance");
      }
      if (isNullOrUndefined(useFlags.deviceHealthEnabled())) {
        appFeatures = appFeatures.filter((feature) => feature !== "page-devicehealth");
      }
      return this.clientSectionFactory.createAllClientSections(client, appFeatures);
    }
    return [];
  }, ...ngDevMode ? [{ debugName: "sections" }] : []);
  error = signal(null, ...ngDevMode ? [{ debugName: "error" }] : []);
  isEntityUpdatedMessage(message) {
    return isDefined(message) && message !== null && typeof message === "object" && "entityType" in message && "data" in message && message.entityType === "client";
  }
  constructor() {
    this.operationRegistry.registerEntityOperations("client", {
      update: (id, data) => this.accountsService.updateClient(id, data),
      create: (data) => this.accountsService.createClient(data),
      get: (id) => this.accountsService.getClient(id)
    });
  }
  ngOnInit() {
    this.broadcastService.on("entity-updated").pipe(takeUntilDestroyed(this.destroyRef)).subscribe((message) => {
      if (this.isEntityUpdatedMessage(message)) {
        const operation = message.data.state === ClientResponse.StateEnum.Deleted ? "delete" : "update";
        this.broadcastService.broadcast("tree-refresh-required", {
          entityType: "client",
          operation,
          entityId: message.data.id,
          vendorId: message.data.owner.id,
          distributorId: message.data.owner?.["owner"]?.id,
          // Add distributor context
          state: message.data.state
        });
      }
    });
  }
  onEntityChange(entity) {
    this.entityDetailsState.updateEntity(entity);
    this.error.set(null);
  }
  static \u0275fac = function VendorClientDetailsContainerComponent_Factory(__ngFactoryType__) {
    return new (__ngFactoryType__ || _VendorClientDetailsContainerComponent)();
  };
  static \u0275cmp = /* @__PURE__ */ \u0275\u0275defineComponent({ type: _VendorClientDetailsContainerComponent, selectors: [["app-vendor-client-details-container"]], inputs: { entity: [1, "entity"] }, decls: 1, vars: 1, consts: [["subtitle", "Client", "initialMode", "view", 3, "sections", "entity", "title", "allowModeToggle"], [1, "p-4"], ["subtitle", "Client", "initialMode", "view", 3, "entityChange", "sections", "entity", "title", "allowModeToggle"], ["severity", "info", "text", "No client details available."]], template: function VendorClientDetailsContainerComponent_Template(rf, ctx) {
    if (rf & 1) {
      \u0275\u0275conditionalCreate(0, VendorClientDetailsContainerComponent_Conditional_0_Template, 2, 1);
    }
    if (rf & 2) {
      \u0275\u0275conditional(!ctx.isInitialLoading() && !ctx.error() ? 0 : -1);
    }
  }, dependencies: [
    DetailsAccordionContainerComponent,
    ProgressSpinnerModule,
    MessageModule,
    Message
  ], encapsulation: 2 });
};
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(VendorClientDetailsContainerComponent, [{
    type: Component,
    args: [{ selector: "app-vendor-client-details-container", imports: [
      DetailsAccordionContainerComponent,
      ProgressSpinnerModule,
      MessageModule
    ], template: `@if (!isInitialLoading() && !error()) {
  @if (fullClient()) {
    <app-details-accordion-container
      [sections]="sections()"
      [entity]="fullClient()"
      [title]="fullClient()?.name || 'Client Details'"
      subtitle="Client"
      [allowModeToggle]="true"
      (entityChange)="onEntityChange($event)"
      initialMode="view"
    ></app-details-accordion-container>
  } @else {
    <div class="p-4">
      <p-message
        severity="info"
        text="No client details available."
      ></p-message>
    </div>
  }
}
` }]
  }], () => [], { entity: [{ type: Input, args: [{ isSignal: true, alias: "entity", required: false }] }] });
})();
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && \u0275setClassDebugInfo(VendorClientDetailsContainerComponent, { className: "VendorClientDetailsContainerComponent", filePath: "src/app/features/administration/components/vendor-clients/vendor-client-details-container/vendor-client-details-container.component.ts", lineNumber: 44 });
})();

// src/app/features/administration/components/distributor-vendors/distributor-vendor-details-container/distributor-vendor-details-container.component.ts
function DistributorVendorDetailsContainerComponent_Conditional_0_Conditional_0_Template(rf, ctx) {
  if (rf & 1) {
    const _r1 = \u0275\u0275getCurrentView();
    \u0275\u0275elementStart(0, "app-details-accordion-container", 2);
    \u0275\u0275listener("entityChange", function DistributorVendorDetailsContainerComponent_Conditional_0_Conditional_0_Template_app_details_accordion_container_entityChange_0_listener($event) {
      \u0275\u0275restoreView(_r1);
      const ctx_r1 = \u0275\u0275nextContext(2);
      return \u0275\u0275resetView(ctx_r1.onEntityChange($event));
    });
    \u0275\u0275elementEnd();
  }
  if (rf & 2) {
    let tmp_5_0;
    const ctx_r1 = \u0275\u0275nextContext(2);
    \u0275\u0275property("sections", ctx_r1.flexibleConfiguration().sections)("layout", ctx_r1.flexibleConfiguration().layout)("entity", ctx_r1.fullVendor())("title", ((tmp_5_0 = ctx_r1.fullVendor()) == null ? null : tmp_5_0.name) || "Vendor Details")("allowModeToggle", true);
  }
}
function DistributorVendorDetailsContainerComponent_Conditional_0_Conditional_1_Template(rf, ctx) {
  if (rf & 1) {
    \u0275\u0275elementStart(0, "div", 1);
    \u0275\u0275element(1, "p-message", 3);
    \u0275\u0275elementEnd();
  }
}
function DistributorVendorDetailsContainerComponent_Conditional_0_Template(rf, ctx) {
  if (rf & 1) {
    \u0275\u0275conditionalCreate(0, DistributorVendorDetailsContainerComponent_Conditional_0_Conditional_0_Template, 1, 5, "app-details-accordion-container", 0)(1, DistributorVendorDetailsContainerComponent_Conditional_0_Conditional_1_Template, 2, 0, "div", 1);
  }
  if (rf & 2) {
    const ctx_r1 = \u0275\u0275nextContext();
    \u0275\u0275conditional(ctx_r1.fullVendor() ? 0 : 1);
  }
}
var DistributorVendorDetailsContainerComponent = class _DistributorVendorDetailsContainerComponent {
  entity = input(null, ...ngDevMode ? [{ debugName: "entity" }] : []);
  vendorSectionFactory = inject(VendorSectionConfigFactory);
  entityDetailsState = inject(EntityDetailsStateService);
  accountsService = inject(AccountsService);
  operationRegistry = inject(EntityOperationRegistryService);
  broadcastService = inject(BroadcastEventMessageService);
  destroyRef = inject(DestroyRef);
  isLoading = computed(() => this.entityDetailsState.isLoading(), ...ngDevMode ? [{ debugName: "isLoading" }] : []);
  isSoftRefreshing = computed(() => this.entityDetailsState.isSoftRefreshing(), ...ngDevMode ? [{ debugName: "isSoftRefreshing" }] : []);
  isInitialLoading = computed(() => this.isLoading() && !this.isSoftRefreshing() && !this.fullVendor(), ...ngDevMode ? [{ debugName: "isInitialLoading" }] : []);
  fullVendor = computed(() => {
    const entityDetails = this.entityDetailsState.selectedItem();
    if (isNullOrUndefined(entityDetails)) {
      return null;
    }
    return entityDetails;
  }, ...ngDevMode ? [{ debugName: "fullVendor" }] : []);
  flexibleConfiguration = computed(() => {
    const vendor = this.fullVendor();
    if (isNullOrUndefined(vendor)) {
      return { sections: [], layout: { categories: [] } };
    }
    return this.vendorSectionFactory.createFlexibleVendorConfiguration(vendor);
  }, ...ngDevMode ? [{ debugName: "flexibleConfiguration" }] : []);
  error = signal(null, ...ngDevMode ? [{ debugName: "error" }] : []);
  useFlexibleApproach = signal(false, ...ngDevMode ? [{ debugName: "useFlexibleApproach" }] : []);
  // Toggle for demo purposes
  isEntityUpdatedMessage(message) {
    return isDefined(message) && message !== null && typeof message === "object" && "entityType" in message && "data" in message && message.entityType === "vendor";
  }
  constructor() {
    this.operationRegistry.registerEntityOperations("vendor", {
      update: (id, data) => this.accountsService.updateVendor(id, data),
      create: (data) => this.accountsService.createVendor(data),
      get: (id) => this.accountsService.getVendor(id)
    });
  }
  ngOnInit() {
    this.broadcastService.on("entity-updated").pipe(takeUntilDestroyed(this.destroyRef)).subscribe((message) => {
      if (this.isEntityUpdatedMessage(message)) {
        const isDeleted = message.data.state === VendorResponse.StateEnum.Deleted;
        this.broadcastService.broadcast("tree-refresh-required", __spreadValues({
          entityType: "vendor",
          operation: isDeleted ? "delete" : "update",
          entityId: message.data.id,
          distributorId: message.data.owner.id
        }, isDeleted ? {} : { state: message.data.state }));
      }
    });
  }
  onEntityChange(entity) {
    this.entityDetailsState.updateEntity(entity);
    this.error.set(null);
  }
  static \u0275fac = function DistributorVendorDetailsContainerComponent_Factory(__ngFactoryType__) {
    return new (__ngFactoryType__ || _DistributorVendorDetailsContainerComponent)();
  };
  static \u0275cmp = /* @__PURE__ */ \u0275\u0275defineComponent({ type: _DistributorVendorDetailsContainerComponent, selectors: [["app-distributor-vendor-details-container"]], inputs: { entity: [1, "entity"] }, decls: 1, vars: 1, consts: [["subtitle", "Vendor (Flexible Configuration)", "initialMode", "view", 3, "sections", "layout", "entity", "title", "allowModeToggle"], [1, "p-4"], ["subtitle", "Vendor (Flexible Configuration)", "initialMode", "view", 3, "entityChange", "sections", "layout", "entity", "title", "allowModeToggle"], ["severity", "info", "text", "No vendor details available."]], template: function DistributorVendorDetailsContainerComponent_Template(rf, ctx) {
    if (rf & 1) {
      \u0275\u0275conditionalCreate(0, DistributorVendorDetailsContainerComponent_Conditional_0_Template, 2, 1);
    }
    if (rf & 2) {
      \u0275\u0275conditional(!ctx.isInitialLoading() && !ctx.error() ? 0 : -1);
    }
  }, dependencies: [
    DetailsAccordionContainerComponent,
    ProgressSpinnerModule,
    MessageModule,
    Message
  ], encapsulation: 2 });
};
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(DistributorVendorDetailsContainerComponent, [{
    type: Component,
    args: [{ selector: "app-distributor-vendor-details-container", imports: [
      DetailsAccordionContainerComponent,
      ProgressSpinnerModule,
      MessageModule
    ], template: `@if (!isInitialLoading() && !error()) {
  @if (fullVendor()) {
    <app-details-accordion-container
      [sections]="flexibleConfiguration().sections"
      [layout]="flexibleConfiguration().layout"
      [entity]="fullVendor()"
      [title]="fullVendor()?.name || 'Vendor Details'"
      subtitle="Vendor (Flexible Configuration)"
      [allowModeToggle]="true"
      (entityChange)="onEntityChange($event)"
      initialMode="view"
    ></app-details-accordion-container>
  } @else {
    <div class="p-4">
      <p-message
        severity="info"
        text="No vendor details available."
      ></p-message>
    </div>
  }
}
` }]
  }], () => [], { entity: [{ type: Input, args: [{ isSignal: true, alias: "entity", required: false }] }] });
})();
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && \u0275setClassDebugInfo(DistributorVendorDetailsContainerComponent, { className: "DistributorVendorDetailsContainerComponent", filePath: "src/app/features/administration/components/distributor-vendors/distributor-vendor-details-container/distributor-vendor-details-container.component.ts", lineNumber: 42 });
})();

// src/app/features/administration/components/asset-rating-profiles/asset-rating-profile-details-section/asset-rating-profile-details-section.component.ts
var _c013 = (a0) => ({ "icon-primary": a0 });
function AssetRatingProfileDetailsSectionComponent_Conditional_7_Template(rf, ctx) {
  if (rf & 1) {
    const _r1 = \u0275\u0275getCurrentView();
    \u0275\u0275elementStart(0, "div", 6)(1, "span", 8);
    \u0275\u0275listener("click", function AssetRatingProfileDetailsSectionComponent_Conditional_7_Template_span_click_1_listener() {
      \u0275\u0275restoreView(_r1);
      const ctx_r1 = \u0275\u0275nextContext();
      return \u0275\u0275resetView(ctx_r1.onEdit());
    })("keydown.enter", function AssetRatingProfileDetailsSectionComponent_Conditional_7_Template_span_keydown_enter_1_listener() {
      \u0275\u0275restoreView(_r1);
      const ctx_r1 = \u0275\u0275nextContext();
      return \u0275\u0275resetView(ctx_r1.onEdit());
    });
    \u0275\u0275elementEnd()();
  }
  if (rf & 2) {
    \u0275\u0275advance();
    \u0275\u0275attribute("aria-label", "Edit asset rating profile details");
  }
}
function AssetRatingProfileDetailsSectionComponent_Conditional_10_Template(rf, ctx) {
  if (rf & 1) {
    const _r3 = \u0275\u0275getCurrentView();
    \u0275\u0275elementStart(0, "app-dynamic-form", 9);
    \u0275\u0275listener("formSubmit", function AssetRatingProfileDetailsSectionComponent_Conditional_10_Template_app_dynamic_form_formSubmit_0_listener($event) {
      \u0275\u0275restoreView(_r3);
      const ctx_r1 = \u0275\u0275nextContext();
      return \u0275\u0275resetView(ctx_r1.onSubmit($event));
    })("formValidityChange", function AssetRatingProfileDetailsSectionComponent_Conditional_10_Template_app_dynamic_form_formValidityChange_0_listener($event) {
      \u0275\u0275restoreView(_r3);
      const ctx_r1 = \u0275\u0275nextContext();
      return \u0275\u0275resetView(ctx_r1.onFormValidityChange($event));
    })("formValueChange", function AssetRatingProfileDetailsSectionComponent_Conditional_10_Template_app_dynamic_form_formValueChange_0_listener($event) {
      \u0275\u0275restoreView(_r3);
      const ctx_r1 = \u0275\u0275nextContext();
      return \u0275\u0275resetView(ctx_r1.onFormValueChange($event));
    });
    \u0275\u0275elementEnd();
  }
  if (rf & 2) {
    const ctx_r1 = \u0275\u0275nextContext();
    \u0275\u0275property("fields", ctx_r1.formFields)("actions", ctx_r1.actions)("hideActions", ctx_r1.createMode());
  }
}
function AssetRatingProfileDetailsSectionComponent_Conditional_11_Conditional_0_Template(rf, ctx) {
  if (rf & 1) {
    \u0275\u0275elementStart(0, "div", 10)(1, "p-message", 12);
    \u0275\u0275element(2, "span", 13);
    \u0275\u0275text(3);
    \u0275\u0275elementEnd()();
  }
  if (rf & 2) {
    const ctx_r1 = \u0275\u0275nextContext(2);
    \u0275\u0275advance(3);
    \u0275\u0275textInterpolate1(" ", ctx_r1.warning());
  }
}
function AssetRatingProfileDetailsSectionComponent_Conditional_11_Template(rf, ctx) {
  if (rf & 1) {
    \u0275\u0275conditionalCreate(0, AssetRatingProfileDetailsSectionComponent_Conditional_11_Conditional_0_Template, 4, 1, "div", 10);
    \u0275\u0275element(1, "app-grid", 11);
  }
  if (rf & 2) {
    const ctx_r1 = \u0275\u0275nextContext();
    \u0275\u0275conditional(ctx_r1.warning() ? 0 : -1);
    \u0275\u0275advance();
    \u0275\u0275property("data", ctx_r1.assetRatingProfileDetails())("columns", ctx_r1.columns)("showGridLines", false)("hideHeader", true);
  }
}
var AssetRatingProfileDetailsSectionComponent = class _AssetRatingProfileDetailsSectionComponent extends EntitySectionBaseComponent {
  ownerId = input(null, ...ngDevMode ? [{ debugName: "ownerId" }] : []);
  entitiesService = inject(EntitiesService);
  eventFilterService = inject(EventFilterService);
  assetRatingProfileDetails = computed(() => {
    const assetRatingProfileDetails = this.entity();
    if (!isDefined(assetRatingProfileDetails))
      return [];
    return [
      { key: "Name", value: assetRatingProfileDetails.name },
      {
        key: "Penalties",
        value: isEmpty(assetRatingProfileDetails.items) ? "None" : assetRatingProfileDetails.items?.map((item) => item.name).join(", ")
      }
    ];
  }, ...ngDevMode ? [{ debugName: "assetRatingProfileDetails" }] : []);
  assetRatingProfilePenaltyModalConfig;
  warning = signal(null, ...ngDevMode ? [{ debugName: "warning" }] : []);
  constructor() {
    super();
    this.columns = [
      { field: "key", header: "", transform: "uppercase" },
      { field: "value", header: "" }
    ];
    effect(() => {
      const assetRatingProfileDetails = this.entity();
      if (isNullOrUndefined(assetRatingProfileDetails?.items) || assetRatingProfileDetails.items.length < 1) {
        this.warning.set("At least one penalty is required for the asset rating profile to be useful.");
      } else {
        this.warning.set(null);
      }
    });
  }
  updateFormFields() {
    const assetRatingProfile = this.entity();
    this.assetRatingProfilePenaltyModalConfig = {
      modalComponent: ModalListFormComponent,
      modalTitle: "Rating Penalty",
      defaultItemProvider: () => ({
        id: v4_default(),
        name: "",
        max: 100,
        offset: void 0,
        penalty: 1,
        cost: void 0
      }),
      listItemFormatter: (item) => this.stateItemToListItem(item),
      modalFields: (_item) => {
        return [
          createTextField("id", "ID", _item?.id, {
            name: "id",
            hidden: true
          }),
          createTextField("name", "Name", _item?.name, {
            name: "name",
            validations: [
              {
                name: "required",
                validator: Validators.required,
                message: "Name is required"
              }
            ]
          }),
          createNumberField("penalty", "Penalty", void 0, {
            name: "penalty",
            validations: [
              {
                name: "required",
                validator: Validators.required,
                message: "Penalty is required"
              },
              {
                name: "min",
                validator: Validators.min(1),
                message: "Min must be 1 or greater"
              },
              {
                name: "max",
                validator: Validators.max(100),
                message: "Max must be 100 or less"
              }
            ],
            layout: "horizontal",
            labelWidth: "1/3"
          }),
          createNumberField("max", "Max", void 0, {
            name: "max",
            validations: [
              {
                name: "required",
                validator: Validators.required,
                message: "Max is required"
              },
              {
                name: "min",
                validator: Validators.min(1),
                message: "Min must be 1 or greater"
              },
              {
                name: "max",
                validator: Validators.max(100),
                message: "Max must be 100 or less"
              }
            ],
            layout: "horizontal",
            labelWidth: "1/3"
          }),
          createNumberField("cost", "Cost", void 0, {
            name: "cost",
            validations: [
              {
                name: "required",
                validator: Validators.required,
                message: "Cost is required"
              },
              {
                name: "min",
                validator: Validators.min(0),
                message: "Min must be 0 or greater"
              },
              {
                name: "max",
                validator: Validators.max(1e6),
                message: "Max must be 1000000 or less"
              }
            ],
            layout: "horizontal",
            labelWidth: "1/3"
          }),
          createEventFilterField("filter", "Event Filter", void 0, ["costcentres", "groups", "types"], {
            name: "filter",
            required: true,
            validations: [
              {
                name: "required",
                validator: Validators.required,
                message: "Event filter is required"
              }
            ]
          })
        ];
      },
      subHeader: "Choose penalty severity and configure the event filter to trigger this penalty."
    };
    this.formFields = [
      createTextField("name", "Name", assetRatingProfile?.name, {
        name: "name",
        validations: [
          {
            name: "required",
            validator: Validators.required,
            message: "Name is required"
          }
        ]
      })
    ];
    if (!this.createMode()) {
      this.formFields.push(createModalListField("items", "Penalties", assetRatingProfile?.items ?? [], {
        layout: "horizontal",
        labelWidth: "1/3",
        name: "items",
        props: {
          modalConfig: this.assetRatingProfilePenaltyModalConfig
        }
      }));
    }
  }
  submitChanges(formData) {
    const assetRatingProfile = this.entity();
    if (isNullOrUndefined(assetRatingProfile))
      return;
    this.entitiesService.updateAssetRatingProfile(assetRatingProfile.id, this.transformFormData(formData)).pipe(takeUntilDestroyed(this.destroyRef)).subscribe({
      next: (response) => {
        this.isFormEditable.set(false);
        this.isSubmitting.set(false);
        this.broadcastService.broadcast("entity-updated", {
          entityType: "asset-rating-profile",
          operation: "update",
          entityId: assetRatingProfile.id,
          data: response
        });
      },
      error: () => {
        this.isFormEditable.set(true);
        this.isSubmitting.set(false);
      }
    });
  }
  stateItemToListItem(item) {
    const costString = item.cost ? `, cost ${item.cost}` : "";
    const display = `${item.penalty} (${item.max} max${costString})`;
    return {
      id: item.id,
      title: item.name,
      display,
      icon: "pi pi-star"
    };
  }
  onFormValueChange(formData) {
    const transformedData = this.transformFormData(formData);
    this.formValueChange.emit(transformedData);
  }
  transformFormData(formData) {
    const transformedData = __spreadValues({}, formData);
    if (Array.isArray(transformedData["items"])) {
      transformedData["items"] = transformedData["items"].map((item) => {
        const transformedItem = __spreadValues({}, item);
        if (isDefined(transformedItem["filter"])) {
          const filter = transformedItem["filter"];
          transformedItem["filter"] = __spreadProps(__spreadValues({}, filter), {
            actor: filter?.actor?.data,
            action: filter?.action?.data,
            target: filter?.target?.data,
            conditions: filter?.conditions?.map((_a) => {
              var _b = _a, { id: _id } = _b, rest = __objRest(_b, ["id"]);
              return rest;
            }) ?? []
          });
        }
        return transformedItem;
      });
    }
    return transformedData;
  }
  static \u0275fac = function AssetRatingProfileDetailsSectionComponent_Factory(__ngFactoryType__) {
    return new (__ngFactoryType__ || _AssetRatingProfileDetailsSectionComponent)();
  };
  static \u0275cmp = /* @__PURE__ */ \u0275\u0275defineComponent({ type: _AssetRatingProfileDetailsSectionComponent, selectors: [["app-asset-rating-profile-details-section"]], inputs: { ownerId: [1, "ownerId"] }, features: [\u0275\u0275InheritDefinitionFeature], decls: 12, vars: 7, consts: [[1, "card", "pt-2"], [1, "mb-4", "p-2", "flex", "justify-start", "items-center"], [1, "pi", "pi-star", "!text-[2.5rem]", 3, "ngClass"], [1, "pl-6", "flex-1"], [1, "flex", "justify-between", "items-center"], [1, "text-xl", "font-semibold", "m-0"], [1, "icon-light"], [3, "fields", "actions", "hideActions"], [1, "pi", "pi-pen-to-square", "action", "hover", "!text-2xl", 3, "click", "keydown.enter"], [3, "formSubmit", "formValidityChange", "formValueChange", "fields", "actions", "hideActions"], [1, "mb-4"], ["tableStyleClass", "info-display !w-auto", 3, "data", "columns", "showGridLines", "hideHeader"], ["severity", "warn"], [1, "pi", "pi-exclamation-triangle", "mr-2"]], template: function AssetRatingProfileDetailsSectionComponent_Template(rf, ctx) {
    if (rf & 1) {
      \u0275\u0275elementStart(0, "div", 0)(1, "div", 1);
      \u0275\u0275element(2, "span", 2);
      \u0275\u0275elementStart(3, "div", 3)(4, "div", 4)(5, "h2", 5);
      \u0275\u0275text(6, "Asset Rating Profile Details");
      \u0275\u0275elementEnd();
      \u0275\u0275conditionalCreate(7, AssetRatingProfileDetailsSectionComponent_Conditional_7_Template, 2, 1, "div", 6);
      \u0275\u0275elementEnd();
      \u0275\u0275elementStart(8, "span");
      \u0275\u0275text(9, "Configure the rating penalties for your asset rating profile");
      \u0275\u0275elementEnd()()();
      \u0275\u0275conditionalCreate(10, AssetRatingProfileDetailsSectionComponent_Conditional_10_Template, 1, 3, "app-dynamic-form", 7);
      \u0275\u0275conditionalCreate(11, AssetRatingProfileDetailsSectionComponent_Conditional_11_Template, 2, 5);
      \u0275\u0275elementEnd();
    }
    if (rf & 2) {
      \u0275\u0275advance(2);
      \u0275\u0275property("ngClass", \u0275\u0275pureFunction1(5, _c013, ctx.isFormEditable()));
      \u0275\u0275attribute("aria-label", "star icon");
      \u0275\u0275advance(5);
      \u0275\u0275conditional(!ctx.isFormEditable() && !ctx.createMode() ? 7 : -1);
      \u0275\u0275advance(3);
      \u0275\u0275conditional(ctx.isFormEditable() || ctx.createMode() && ctx.formFields.length ? 10 : -1);
      \u0275\u0275advance();
      \u0275\u0275conditional(!ctx.isFormEditable() && !ctx.createMode() ? 11 : -1);
    }
  }, dependencies: [
    CommonModule,
    NgClass,
    ButtonModule,
    GridComponent,
    DynamicFormComponent,
    MessageModule,
    Message
  ], encapsulation: 2 });
};
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(AssetRatingProfileDetailsSectionComponent, [{
    type: Component,
    args: [{ selector: "app-asset-rating-profile-details-section", imports: [
      CommonModule,
      ButtonModule,
      GridComponent,
      DynamicFormComponent,
      MessageModule
    ], template: `<div class="card pt-2">
  <div class="mb-4 p-2 flex justify-start items-center">
    <span
      class="pi pi-star !text-[2.5rem]"
      [ngClass]="{ 'icon-primary': isFormEditable() }"
      [attr.aria-label]="'star icon'"
    ></span>

    <div class="pl-6 flex-1">
      <div class="flex justify-between items-center">
        <h2 class="text-xl font-semibold m-0">Asset Rating Profile Details</h2>
        @if (!isFormEditable() && !createMode()) {
          <div class="icon-light">
            <span
              class="pi pi-pen-to-square action hover !text-2xl"
              [attr.aria-label]="'Edit asset rating profile details'"
              (click)="onEdit()"
              (keydown.enter)="onEdit()"
            ></span>
          </div>
        }
      </div>
      <span>Configure the rating penalties for your asset rating profile</span>
    </div>
  </div>

  @if (isFormEditable() || (createMode() && formFields.length)) {
    <app-dynamic-form
      [fields]="formFields"
      [actions]="actions"
      [hideActions]="createMode()"
      (formSubmit)="onSubmit($event)"
      (formValidityChange)="onFormValidityChange($event)"
      (formValueChange)="onFormValueChange($event)"
    >
    </app-dynamic-form>
  }

  @if (!isFormEditable() && !createMode()) {
    @if (warning()) {
      <div class="mb-4">
        <p-message severity="warn">
          <span class="pi pi-exclamation-triangle mr-2"></span>
          {{ warning() }}</p-message
        >
      </div>
    }
    <app-grid
      [data]="assetRatingProfileDetails()"
      [columns]="columns"
      [showGridLines]="false"
      [hideHeader]="true"
      tableStyleClass="info-display !w-auto"
    ></app-grid>
  }
</div>
` }]
  }], () => [], { ownerId: [{ type: Input, args: [{ isSignal: true, alias: "ownerId", required: false }] }] });
})();
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && \u0275setClassDebugInfo(AssetRatingProfileDetailsSectionComponent, { className: "AssetRatingProfileDetailsSectionComponent", filePath: "src/app/features/administration/components/asset-rating-profiles/asset-rating-profile-details-section/asset-rating-profile-details-section.component.ts", lineNumber: 60 });
})();

// src/app/features/administration/factories/asset-rating-profile-section-config.factory.ts
var AssetRatingProfileSectionConfigFactory = class _AssetRatingProfileSectionConfigFactory {
  /**
   * Create sections for assetRatingProfile information
   * @param assetRatingProfile The assetRatingProfile object to display in the section
   * @returns An array of AdminDetailSection objects representing the assetRatingProfile information sections
   */
  createAssetRatingProfileInformationSections(assetRatingProfile) {
    return [
      {
        id: "asset-rating-profile-details",
        title: "Asset Rating Profile Details",
        component: AssetRatingProfileDetailsSectionComponent,
        componentInputs: { entity: assetRatingProfile },
        category: "information",
        order: 10
      }
    ];
  }
  /**
   * Create sections for assetRatingProfile changes
   * @param assetRatingProfile The assetRatingProfile object to display in the section
   * @returns An array of AdminDetailSection objects representing the assetRatingProfile changes sections
   */
  createChangesSection(assetRatingProfile) {
    return [
      {
        id: "asset-rating-profile-changes",
        title: "Changes",
        component: FeedSectionComponent,
        componentInputs: {
          entity: assetRatingProfile
        },
        category: "feed",
        order: 10
      }
    ];
  }
  /**
   * Create all assetRatingProfile sections in one call
   * @param assetRatingProfile The assetRatingProfile object to display in the sections
   * @returns An array of AdminDetailSection objects representing all assetRatingProfile sections
   */
  createAllAssetRatingProfileSections(assetRatingProfile) {
    return [
      ...this.createAssetRatingProfileInformationSections(assetRatingProfile),
      ...this.createChangesSection(assetRatingProfile)
    ];
  }
  static \u0275fac = function AssetRatingProfileSectionConfigFactory_Factory(__ngFactoryType__) {
    return new (__ngFactoryType__ || _AssetRatingProfileSectionConfigFactory)();
  };
  static \u0275prov = /* @__PURE__ */ \u0275\u0275defineInjectable({ token: _AssetRatingProfileSectionConfigFactory, factory: _AssetRatingProfileSectionConfigFactory.\u0275fac, providedIn: "root" });
};
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(AssetRatingProfileSectionConfigFactory, [{
    type: Injectable,
    args: [{ providedIn: "root" }]
  }], null, null);
})();

// src/app/features/administration/components/asset-rating-profiles/asset-rating-profile-details-container/asset-rating-profile-details-container.component.ts
function AssetRatingProfileDetailsContainerComponent_Conditional_0_Conditional_0_Template(rf, ctx) {
  if (rf & 1) {
    const _r1 = \u0275\u0275getCurrentView();
    \u0275\u0275elementStart(0, "app-details-accordion-container", 2);
    \u0275\u0275listener("entityChange", function AssetRatingProfileDetailsContainerComponent_Conditional_0_Conditional_0_Template_app_details_accordion_container_entityChange_0_listener($event) {
      \u0275\u0275restoreView(_r1);
      const ctx_r1 = \u0275\u0275nextContext(2);
      return \u0275\u0275resetView(ctx_r1.onEntityChange($event));
    });
    \u0275\u0275elementEnd();
  }
  if (rf & 2) {
    let tmp_4_0;
    const ctx_r1 = \u0275\u0275nextContext(2);
    \u0275\u0275property("sections", ctx_r1.sections())("entity", ctx_r1.fullAssetRatingProfile())("title", ((tmp_4_0 = ctx_r1.fullAssetRatingProfile()) == null ? null : tmp_4_0.name) || "Asset Rating Profile Details")("allowModeToggle", true);
  }
}
function AssetRatingProfileDetailsContainerComponent_Conditional_0_Conditional_1_Template(rf, ctx) {
  if (rf & 1) {
    \u0275\u0275elementStart(0, "div", 1);
    \u0275\u0275element(1, "p-message", 3);
    \u0275\u0275elementEnd();
  }
}
function AssetRatingProfileDetailsContainerComponent_Conditional_0_Template(rf, ctx) {
  if (rf & 1) {
    \u0275\u0275conditionalCreate(0, AssetRatingProfileDetailsContainerComponent_Conditional_0_Conditional_0_Template, 1, 4, "app-details-accordion-container", 0)(1, AssetRatingProfileDetailsContainerComponent_Conditional_0_Conditional_1_Template, 2, 0, "div", 1);
  }
  if (rf & 2) {
    const ctx_r1 = \u0275\u0275nextContext();
    \u0275\u0275conditional(ctx_r1.fullAssetRatingProfile() ? 0 : 1);
  }
}
var AssetRatingProfileDetailsContainerComponent = class _AssetRatingProfileDetailsContainerComponent {
  entity = input(null, ...ngDevMode ? [{ debugName: "entity" }] : []);
  assetRatingProfileSectionFactory = inject(AssetRatingProfileSectionConfigFactory);
  entityDetailsState = inject(EntityDetailsStateService);
  isLoading = computed(() => this.entityDetailsState.isLoading(), ...ngDevMode ? [{ debugName: "isLoading" }] : []);
  fullAssetRatingProfile = computed(() => {
    const entityDetails = this.entityDetailsState.selectedItem();
    if (!entityDetails) {
      return null;
    }
    return entityDetails;
  }, ...ngDevMode ? [{ debugName: "fullAssetRatingProfile" }] : []);
  sections = computed(() => {
    const assetRatingProfile = this.fullAssetRatingProfile();
    if (!assetRatingProfile)
      return [];
    return this.assetRatingProfileSectionFactory.createAllAssetRatingProfileSections(assetRatingProfile);
  }, ...ngDevMode ? [{ debugName: "sections" }] : []);
  error = signal(null, ...ngDevMode ? [{ debugName: "error" }] : []);
  onEntityChange(entity) {
    this.entityDetailsState.updateEntity(entity);
    this.error.set(null);
  }
  static \u0275fac = function AssetRatingProfileDetailsContainerComponent_Factory(__ngFactoryType__) {
    return new (__ngFactoryType__ || _AssetRatingProfileDetailsContainerComponent)();
  };
  static \u0275cmp = /* @__PURE__ */ \u0275\u0275defineComponent({ type: _AssetRatingProfileDetailsContainerComponent, selectors: [["app-asset-rating-profile-details-container"]], inputs: { entity: [1, "entity"] }, decls: 1, vars: 1, consts: [["subtitle", "Asset Rating Profile", "initialMode", "view", 3, "sections", "entity", "title", "allowModeToggle"], [1, "p-4"], ["subtitle", "Asset Rating Profile", "initialMode", "view", 3, "entityChange", "sections", "entity", "title", "allowModeToggle"], ["severity", "info", "text", "No asset rating profile details available."]], template: function AssetRatingProfileDetailsContainerComponent_Template(rf, ctx) {
    if (rf & 1) {
      \u0275\u0275conditionalCreate(0, AssetRatingProfileDetailsContainerComponent_Conditional_0_Template, 2, 1);
    }
    if (rf & 2) {
      \u0275\u0275conditional(!ctx.isLoading() && !ctx.error() ? 0 : -1);
    }
  }, dependencies: [
    DetailsAccordionContainerComponent,
    ProgressSpinnerModule,
    MessageModule,
    Message
  ], encapsulation: 2 });
};
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(AssetRatingProfileDetailsContainerComponent, [{
    type: Component,
    args: [{ selector: "app-asset-rating-profile-details-container", imports: [
      DetailsAccordionContainerComponent,
      ProgressSpinnerModule,
      MessageModule
    ], template: `@if (!isLoading() && !error()) {
  @if (fullAssetRatingProfile()) {
    <app-details-accordion-container
      [sections]="sections()"
      [entity]="fullAssetRatingProfile()"
      [title]="fullAssetRatingProfile()?.name || 'Asset Rating Profile Details'"
      subtitle="Asset Rating Profile"
      [allowModeToggle]="true"
      (entityChange)="onEntityChange($event)"
      initialMode="view"
    ></app-details-accordion-container>
  } @else {
    <div class="p-4">
      <p-message
        severity="info"
        text="No asset rating profile details available."
      ></p-message>
    </div>
  }
}
` }]
  }], null, { entity: [{ type: Input, args: [{ isSignal: true, alias: "entity", required: false }] }] });
})();
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && \u0275setClassDebugInfo(AssetRatingProfileDetailsContainerComponent, { className: "AssetRatingProfileDetailsContainerComponent", filePath: "src/app/features/administration/components/asset-rating-profiles/asset-rating-profile-details-container/asset-rating-profile-details-container.component.ts", lineNumber: 22 });
})();

// src/app/features/administration/components/super-admin-distributors/super-admin-distributors-details-container/super-admin-distributors-details-container.component.ts
function SuperAdminDistributorsDetailsContainerComponent_Conditional_0_Conditional_0_Template(rf, ctx) {
  if (rf & 1) {
    const _r1 = \u0275\u0275getCurrentView();
    \u0275\u0275elementStart(0, "app-details-accordion-container", 2);
    \u0275\u0275listener("entityChange", function SuperAdminDistributorsDetailsContainerComponent_Conditional_0_Conditional_0_Template_app_details_accordion_container_entityChange_0_listener($event) {
      \u0275\u0275restoreView(_r1);
      const ctx_r1 = \u0275\u0275nextContext(2);
      return \u0275\u0275resetView(ctx_r1.onEntityChange($event));
    });
    \u0275\u0275elementEnd();
  }
  if (rf & 2) {
    let tmp_4_0;
    const ctx_r1 = \u0275\u0275nextContext(2);
    \u0275\u0275property("sections", ctx_r1.sections())("entity", ctx_r1.fullDistributor())("title", ((tmp_4_0 = ctx_r1.fullDistributor()) == null ? null : tmp_4_0.name) || "Distributor Details")("allowModeToggle", true);
  }
}
function SuperAdminDistributorsDetailsContainerComponent_Conditional_0_Conditional_1_Template(rf, ctx) {
  if (rf & 1) {
    \u0275\u0275elementStart(0, "div", 1);
    \u0275\u0275element(1, "p-message", 3);
    \u0275\u0275elementEnd();
  }
}
function SuperAdminDistributorsDetailsContainerComponent_Conditional_0_Template(rf, ctx) {
  if (rf & 1) {
    \u0275\u0275conditionalCreate(0, SuperAdminDistributorsDetailsContainerComponent_Conditional_0_Conditional_0_Template, 1, 4, "app-details-accordion-container", 0)(1, SuperAdminDistributorsDetailsContainerComponent_Conditional_0_Conditional_1_Template, 2, 0, "div", 1);
  }
  if (rf & 2) {
    const ctx_r1 = \u0275\u0275nextContext();
    \u0275\u0275conditional(ctx_r1.fullDistributor() ? 0 : 1);
  }
}
var SuperAdminDistributorsDetailsContainerComponent = class _SuperAdminDistributorsDetailsContainerComponent {
  entity = input(null, ...ngDevMode ? [{ debugName: "entity" }] : []);
  distributorSectionFactory = inject(DistributorSectionConfigFactory);
  entityDetailsState = inject(EntityDetailsStateService);
  accountsService = inject(AccountsService);
  operationRegistry = inject(EntityOperationRegistryService);
  broadcastService = inject(BroadcastEventMessageService);
  toastService = inject(ToastService);
  destroyRef = inject(DestroyRef);
  isLoading = computed(() => this.entityDetailsState.isLoading(), ...ngDevMode ? [{ debugName: "isLoading" }] : []);
  isSoftRefreshing = computed(() => this.entityDetailsState.isSoftRefreshing(), ...ngDevMode ? [{ debugName: "isSoftRefreshing" }] : []);
  isInitialLoading = computed(() => this.isLoading() && !this.isSoftRefreshing() && !this.fullDistributor(), ...ngDevMode ? [{ debugName: "isInitialLoading" }] : []);
  fullDistributor = computed(() => {
    const entityDetails = this.entityDetailsState.selectedItem();
    if (isNullOrUndefined(entityDetails)) {
      return null;
    }
    return entityDetails;
  }, ...ngDevMode ? [{ debugName: "fullDistributor" }] : []);
  sections = computed(() => {
    const distributor = this.fullDistributor();
    if (isNullOrUndefined(distributor))
      return [];
    return this.distributorSectionFactory.createAllDistributorSections(distributor);
  }, ...ngDevMode ? [{ debugName: "sections" }] : []);
  error = signal(null, ...ngDevMode ? [{ debugName: "error" }] : []);
  isEntityUpdatedMessage(message) {
    return isDefined(message) && message !== null && typeof message === "object" && "entityType" in message && "data" in message && message.entityType === "distributor";
  }
  constructor() {
    this.operationRegistry.registerEntityOperations("distributor", {
      update: (id, data) => this.accountsService.updateDistributor(id, data),
      create: (data) => this.accountsService.createDistributor(data),
      get: (id) => this.accountsService.getDistributor(id)
    });
  }
  ngOnInit() {
    this.broadcastService.on("entity-updated").pipe(takeUntilDestroyed(this.destroyRef)).subscribe((message) => {
      if (this.isEntityUpdatedMessage(message)) {
        this.toastService.showSuccess("Success", "Distributor updated successfully");
        this.onEntityChange(message.data);
        const operation = message.data.state === DistributorResponse.StateEnum.Deleted ? "delete" : "update";
        this.broadcastService.broadcast("tree-refresh-required", {
          entityType: "distributor",
          operation,
          entityId: message.data.id,
          state: message.data.state
        });
      }
    });
  }
  onEntityChange(entity) {
    this.entityDetailsState.updateEntity(entity);
    this.error.set(null);
  }
  static \u0275fac = function SuperAdminDistributorsDetailsContainerComponent_Factory(__ngFactoryType__) {
    return new (__ngFactoryType__ || _SuperAdminDistributorsDetailsContainerComponent)();
  };
  static \u0275cmp = /* @__PURE__ */ \u0275\u0275defineComponent({ type: _SuperAdminDistributorsDetailsContainerComponent, selectors: [["app-super-admin-distributors-details-container"]], inputs: { entity: [1, "entity"] }, decls: 1, vars: 1, consts: [["subtitle", "Distributor", "initialMode", "view", 3, "sections", "entity", "title", "allowModeToggle"], [1, "p-4"], ["subtitle", "Distributor", "initialMode", "view", 3, "entityChange", "sections", "entity", "title", "allowModeToggle"], ["severity", "info", "text", "No distributor details available."]], template: function SuperAdminDistributorsDetailsContainerComponent_Template(rf, ctx) {
    if (rf & 1) {
      \u0275\u0275conditionalCreate(0, SuperAdminDistributorsDetailsContainerComponent_Conditional_0_Template, 2, 1);
    }
    if (rf & 2) {
      \u0275\u0275conditional(!ctx.isInitialLoading() && !ctx.error() ? 0 : -1);
    }
  }, dependencies: [
    DetailsAccordionContainerComponent,
    ProgressSpinnerModule,
    MessageModule,
    Message
  ], encapsulation: 2 });
};
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(SuperAdminDistributorsDetailsContainerComponent, [{
    type: Component,
    args: [{ selector: "app-super-admin-distributors-details-container", imports: [
      DetailsAccordionContainerComponent,
      ProgressSpinnerModule,
      MessageModule
    ], template: `@if (!isInitialLoading() && !error()) {
  @if (fullDistributor()) {
    <app-details-accordion-container
      [sections]="sections()"
      [entity]="fullDistributor()"
      [title]="fullDistributor()?.name || 'Distributor Details'"
      subtitle="Distributor"
      [allowModeToggle]="true"
      (entityChange)="onEntityChange($event)"
      initialMode="view"
    ></app-details-accordion-container>
  } @else {
    <div class="p-4">
      <p-message
        severity="info"
        text="No distributor details available."
      ></p-message>
    </div>
  }
}
` }]
  }], () => [], { entity: [{ type: Input, args: [{ isSignal: true, alias: "entity", required: false }] }] });
})();
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && \u0275setClassDebugInfo(SuperAdminDistributorsDetailsContainerComponent, { className: "SuperAdminDistributorsDetailsContainerComponent", filePath: "src/app/features/administration/components/super-admin-distributors/super-admin-distributors-details-container/super-admin-distributors-details-container.component.ts", lineNumber: 41 });
})();

// src/app/features/administration/components/asset-state-profiles/asset-state-profile-details-container/asset-state-profile-details-container.component.ts
function AssetStateProfileDetailsContainerComponent_Conditional_0_Conditional_0_Template(rf, ctx) {
  if (rf & 1) {
    const _r1 = \u0275\u0275getCurrentView();
    \u0275\u0275elementStart(0, "app-details-accordion-container", 2);
    \u0275\u0275listener("entityChange", function AssetStateProfileDetailsContainerComponent_Conditional_0_Conditional_0_Template_app_details_accordion_container_entityChange_0_listener($event) {
      \u0275\u0275restoreView(_r1);
      const ctx_r1 = \u0275\u0275nextContext(2);
      return \u0275\u0275resetView(ctx_r1.onEntityChange($event));
    });
    \u0275\u0275elementEnd();
  }
  if (rf & 2) {
    let tmp_4_0;
    const ctx_r1 = \u0275\u0275nextContext(2);
    \u0275\u0275property("sections", ctx_r1.sections())("entity", ctx_r1.fullAssetStateProfile())("title", ((tmp_4_0 = ctx_r1.fullAssetStateProfile()) == null ? null : tmp_4_0.name) || "Asset State Profile Details")("allowModeToggle", true);
  }
}
function AssetStateProfileDetailsContainerComponent_Conditional_0_Conditional_1_Template(rf, ctx) {
  if (rf & 1) {
    \u0275\u0275elementStart(0, "div", 1);
    \u0275\u0275element(1, "p-message", 3);
    \u0275\u0275elementEnd();
  }
}
function AssetStateProfileDetailsContainerComponent_Conditional_0_Template(rf, ctx) {
  if (rf & 1) {
    \u0275\u0275conditionalCreate(0, AssetStateProfileDetailsContainerComponent_Conditional_0_Conditional_0_Template, 1, 4, "app-details-accordion-container", 0)(1, AssetStateProfileDetailsContainerComponent_Conditional_0_Conditional_1_Template, 2, 0, "div", 1);
  }
  if (rf & 2) {
    const ctx_r1 = \u0275\u0275nextContext();
    \u0275\u0275conditional(ctx_r1.fullAssetStateProfile() ? 0 : 1);
  }
}
var AssetStateProfileDetailsContainerComponent = class _AssetStateProfileDetailsContainerComponent {
  entity = input(null, ...ngDevMode ? [{ debugName: "entity" }] : []);
  assetStateProfileSectionFactory = inject(AssetStateProfileSectionConfigFactory);
  entityDetailsState = inject(EntityDetailsStateService);
  isLoading = computed(() => this.entityDetailsState.isLoading(), ...ngDevMode ? [{ debugName: "isLoading" }] : []);
  fullAssetStateProfile = computed(() => {
    const entityDetails = this.entityDetailsState.selectedItem();
    if (!entityDetails) {
      return null;
    }
    return entityDetails;
  }, ...ngDevMode ? [{ debugName: "fullAssetStateProfile" }] : []);
  sections = computed(() => {
    const assetStateProfile = this.fullAssetStateProfile();
    if (!assetStateProfile)
      return [];
    return this.assetStateProfileSectionFactory.createAllAssetStateProfileSections(assetStateProfile);
  }, ...ngDevMode ? [{ debugName: "sections" }] : []);
  error = signal(null, ...ngDevMode ? [{ debugName: "error" }] : []);
  onEntityChange(entity) {
    this.entityDetailsState.updateEntity(entity);
    this.error.set(null);
  }
  static \u0275fac = function AssetStateProfileDetailsContainerComponent_Factory(__ngFactoryType__) {
    return new (__ngFactoryType__ || _AssetStateProfileDetailsContainerComponent)();
  };
  static \u0275cmp = /* @__PURE__ */ \u0275\u0275defineComponent({ type: _AssetStateProfileDetailsContainerComponent, selectors: [["app-asset-state-profile-details-container"]], inputs: { entity: [1, "entity"] }, decls: 1, vars: 1, consts: [["subtitle", "Asset State Profile", "initialMode", "view", 3, "sections", "entity", "title", "allowModeToggle"], [1, "p-4"], ["subtitle", "Asset State Profile", "initialMode", "view", 3, "entityChange", "sections", "entity", "title", "allowModeToggle"], ["severity", "info", "text", "No asset state profile details available."]], template: function AssetStateProfileDetailsContainerComponent_Template(rf, ctx) {
    if (rf & 1) {
      \u0275\u0275conditionalCreate(0, AssetStateProfileDetailsContainerComponent_Conditional_0_Template, 2, 1);
    }
    if (rf & 2) {
      \u0275\u0275conditional(!ctx.isLoading() && !ctx.error() ? 0 : -1);
    }
  }, dependencies: [
    DetailsAccordionContainerComponent,
    ProgressSpinnerModule,
    MessageModule,
    Message
  ], encapsulation: 2 });
};
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(AssetStateProfileDetailsContainerComponent, [{
    type: Component,
    args: [{ selector: "app-asset-state-profile-details-container", imports: [
      DetailsAccordionContainerComponent,
      ProgressSpinnerModule,
      MessageModule
    ], template: `@if (!isLoading() && !error()) {
  @if (fullAssetStateProfile()) {
    <app-details-accordion-container
      [sections]="sections()"
      [entity]="fullAssetStateProfile()"
      [title]="fullAssetStateProfile()?.name || 'Asset State Profile Details'"
      subtitle="Asset State Profile"
      [allowModeToggle]="true"
      (entityChange)="onEntityChange($event)"
      initialMode="view"
    ></app-details-accordion-container>
  } @else {
    <div class="p-4">
      <p-message
        severity="info"
        text="No asset state profile details available."
      ></p-message>
    </div>
  }
}
` }]
  }], null, { entity: [{ type: Input, args: [{ isSignal: true, alias: "entity", required: false }] }] });
})();
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && \u0275setClassDebugInfo(AssetStateProfileDetailsContainerComponent, { className: "AssetStateProfileDetailsContainerComponent", filePath: "src/app/features/administration/components/asset-state-profiles/asset-state-profile-details-container/asset-state-profile-details-container.component.ts", lineNumber: 22 });
})();

// src/app/features/administration/components/company-groups/company-group-details-container/company-group-details-container.component.ts
function CompanyGroupDetailsContainerComponent_Conditional_0_Conditional_0_Template(rf, ctx) {
  if (rf & 1) {
    const _r1 = \u0275\u0275getCurrentView();
    \u0275\u0275elementStart(0, "app-details-accordion-container", 2);
    \u0275\u0275listener("entityChange", function CompanyGroupDetailsContainerComponent_Conditional_0_Conditional_0_Template_app_details_accordion_container_entityChange_0_listener($event) {
      \u0275\u0275restoreView(_r1);
      const ctx_r1 = \u0275\u0275nextContext(2);
      return \u0275\u0275resetView(ctx_r1.onEntityChange($event));
    });
    \u0275\u0275elementEnd();
  }
  if (rf & 2) {
    let tmp_5_0;
    const ctx_r1 = \u0275\u0275nextContext(2);
    \u0275\u0275property("sections", ctx_r1.flexibleConfiguration().sections)("layout", ctx_r1.flexibleConfiguration().layout)("entity", ctx_r1.fullCompanyGroup())("title", ((tmp_5_0 = ctx_r1.fullCompanyGroup()) == null ? null : tmp_5_0.name) || "Company Group Details")("allowModeToggle", true);
  }
}
function CompanyGroupDetailsContainerComponent_Conditional_0_Conditional_1_Template(rf, ctx) {
  if (rf & 1) {
    \u0275\u0275elementStart(0, "div", 1);
    \u0275\u0275element(1, "p-message", 3);
    \u0275\u0275elementEnd();
  }
}
function CompanyGroupDetailsContainerComponent_Conditional_0_Template(rf, ctx) {
  if (rf & 1) {
    \u0275\u0275conditionalCreate(0, CompanyGroupDetailsContainerComponent_Conditional_0_Conditional_0_Template, 1, 5, "app-details-accordion-container", 0)(1, CompanyGroupDetailsContainerComponent_Conditional_0_Conditional_1_Template, 2, 0, "div", 1);
  }
  if (rf & 2) {
    const ctx_r1 = \u0275\u0275nextContext();
    \u0275\u0275conditional(ctx_r1.fullCompanyGroup() ? 0 : 1);
  }
}
var CompanyGroupDetailsContainerComponent = class _CompanyGroupDetailsContainerComponent {
  entity = input(null, ...ngDevMode ? [{ debugName: "entity" }] : []);
  companyGroupSectionFactory = inject(CompanyGroupSectionConfigFactory);
  entityDetailsState = inject(EntityDetailsStateService);
  operationRegistry = inject(EntityOperationRegistryService);
  accountsService = inject(AccountsService);
  authDataService = inject(AuthDataService);
  isLoading = computed(() => this.entityDetailsState.isLoading(), ...ngDevMode ? [{ debugName: "isLoading" }] : []);
  isSoftRefreshing = computed(() => this.entityDetailsState.isSoftRefreshing(), ...ngDevMode ? [{ debugName: "isSoftRefreshing" }] : []);
  isInitialLoading = computed(() => this.isLoading() && !this.isSoftRefreshing() && !this.fullCompanyGroup(), ...ngDevMode ? [{ debugName: "isInitialLoading" }] : []);
  fullCompanyGroup = computed(() => {
    const entityDetails = this.entityDetailsState.selectedItem();
    if (!entityDetails) {
      return null;
    }
    return entityDetails;
  }, ...ngDevMode ? [{ debugName: "fullCompanyGroup" }] : []);
  flexibleConfiguration = computed(() => {
    const companyGroup = this.fullCompanyGroup();
    if (!companyGroup) {
      return { sections: [], layout: { categories: [] } };
    }
    if (this.authDataService.getUserProfile()?.owner?.type !== "client") {
      let appFeatures = Object.keys(AppFeatures);
      const backend = getBackendFeatureDefaults(this.authDataService.getUserProfile()?.owner?.type ?? "");
      const useFlags = this.authDataService.flags;
      if (isNullOrUndefined(useFlags.assetPerformanceEnabled())) {
        appFeatures = appFeatures.filter((feature) => feature !== "page-assetperformance");
      }
      if (isNullOrUndefined(useFlags.deviceHealthEnabled())) {
        appFeatures = appFeatures.filter((feature) => feature !== "page-devicehealth");
      }
      return this.companyGroupSectionFactory.createFlexibleCompanyGroupConfiguration(companyGroup, appFeatures, backend);
    }
    return { sections: [], layout: { categories: [] } };
  }, ...ngDevMode ? [{ debugName: "flexibleConfiguration" }] : []);
  error = signal(null, ...ngDevMode ? [{ debugName: "error" }] : []);
  constructor() {
    this.operationRegistry.registerEntityOperations("company-group", {
      update: (id, data) => this.accountsService.updateCompanyGroup(id, data),
      create: (data) => this.accountsService.createCompanyGroup(data),
      get: (id) => this.accountsService.getCompanyGroup(id)
    });
  }
  onEntityChange(entity) {
    this.entityDetailsState.updateEntity(entity);
    this.error.set(null);
  }
  static \u0275fac = function CompanyGroupDetailsContainerComponent_Factory(__ngFactoryType__) {
    return new (__ngFactoryType__ || _CompanyGroupDetailsContainerComponent)();
  };
  static \u0275cmp = /* @__PURE__ */ \u0275\u0275defineComponent({ type: _CompanyGroupDetailsContainerComponent, selectors: [["app-company-group-details-container"]], inputs: { entity: [1, "entity"] }, decls: 1, vars: 1, consts: [["subtitle", "Company Group (Custom Order & Titles)", "initialMode", "view", 3, "sections", "layout", "entity", "title", "allowModeToggle"], [1, "p-4"], ["subtitle", "Company Group (Custom Order & Titles)", "initialMode", "view", 3, "entityChange", "sections", "layout", "entity", "title", "allowModeToggle"], ["severity", "info", "text", "No company group details available."]], template: function CompanyGroupDetailsContainerComponent_Template(rf, ctx) {
    if (rf & 1) {
      \u0275\u0275conditionalCreate(0, CompanyGroupDetailsContainerComponent_Conditional_0_Template, 2, 1);
    }
    if (rf & 2) {
      \u0275\u0275conditional(!ctx.isInitialLoading() && !ctx.error() ? 0 : -1);
    }
  }, dependencies: [
    DetailsAccordionContainerComponent,
    ProgressSpinnerModule,
    MessageModule,
    Message
  ], encapsulation: 2 });
};
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(CompanyGroupDetailsContainerComponent, [{
    type: Component,
    args: [{ selector: "app-company-group-details-container", imports: [
      DetailsAccordionContainerComponent,
      ProgressSpinnerModule,
      MessageModule
    ], template: `@if (!isInitialLoading() && !error()) {
  @if (fullCompanyGroup()) {
    <app-details-accordion-container
      [sections]="flexibleConfiguration().sections"
      [layout]="flexibleConfiguration().layout"
      [entity]="fullCompanyGroup()"
      [title]="fullCompanyGroup()?.name || 'Company Group Details'"
      subtitle="Company Group (Custom Order & Titles)"
      [allowModeToggle]="true"
      (entityChange)="onEntityChange($event)"
      initialMode="view"
    ></app-details-accordion-container>
  } @else {
    <div class="p-4">
      <p-message
        severity="info"
        text="No company group details available."
      ></p-message>
    </div>
  }
}
` }]
  }], () => [], { entity: [{ type: Input, args: [{ isSignal: true, alias: "entity", required: false }] }] });
})();
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && \u0275setClassDebugInfo(CompanyGroupDetailsContainerComponent, { className: "CompanyGroupDetailsContainerComponent", filePath: "src/app/features/administration/components/company-groups/company-group-details-container/company-group-details-container.component.ts", lineNumber: 32 });
})();

// src/app/features/administration/components/road-profiles/road-profile-details-container/road-profile-details-container.component.ts
function RoadProfileDetailsContainerComponent_Conditional_0_Conditional_0_Template(rf, ctx) {
  if (rf & 1) {
    const _r1 = \u0275\u0275getCurrentView();
    \u0275\u0275elementStart(0, "app-details-accordion-container", 2);
    \u0275\u0275listener("entityChange", function RoadProfileDetailsContainerComponent_Conditional_0_Conditional_0_Template_app_details_accordion_container_entityChange_0_listener($event) {
      \u0275\u0275restoreView(_r1);
      const ctx_r1 = \u0275\u0275nextContext(2);
      return \u0275\u0275resetView(ctx_r1.onEntityChange($event));
    });
    \u0275\u0275elementEnd();
  }
  if (rf & 2) {
    let tmp_4_0;
    const ctx_r1 = \u0275\u0275nextContext(2);
    \u0275\u0275property("sections", ctx_r1.sections())("entity", ctx_r1.fullRoadProfile())("title", ((tmp_4_0 = ctx_r1.fullRoadProfile()) == null ? null : tmp_4_0.name) || "Road Profile Details")("allowModeToggle", true);
  }
}
function RoadProfileDetailsContainerComponent_Conditional_0_Conditional_1_Template(rf, ctx) {
  if (rf & 1) {
    \u0275\u0275elementStart(0, "div", 1);
    \u0275\u0275element(1, "p-message", 3);
    \u0275\u0275elementEnd();
  }
}
function RoadProfileDetailsContainerComponent_Conditional_0_Template(rf, ctx) {
  if (rf & 1) {
    \u0275\u0275conditionalCreate(0, RoadProfileDetailsContainerComponent_Conditional_0_Conditional_0_Template, 1, 4, "app-details-accordion-container", 0)(1, RoadProfileDetailsContainerComponent_Conditional_0_Conditional_1_Template, 2, 0, "div", 1);
  }
  if (rf & 2) {
    const ctx_r1 = \u0275\u0275nextContext();
    \u0275\u0275conditional(ctx_r1.fullRoadProfile() ? 0 : 1);
  }
}
var RoadProfileDetailsContainerComponent = class _RoadProfileDetailsContainerComponent {
  entity = input(null, ...ngDevMode ? [{ debugName: "entity" }] : []);
  roadProfileSectionFactory = inject(RoadProfileSectionConfigFactory);
  entityDetailsState = inject(EntityDetailsStateService);
  isLoading = computed(() => this.entityDetailsState.isLoading(), ...ngDevMode ? [{ debugName: "isLoading" }] : []);
  isSoftRefreshing = computed(() => this.entityDetailsState.isSoftRefreshing(), ...ngDevMode ? [{ debugName: "isSoftRefreshing" }] : []);
  isInitialLoading = computed(() => this.isLoading() && !this.isSoftRefreshing() && !this.fullRoadProfile(), ...ngDevMode ? [{ debugName: "isInitialLoading" }] : []);
  fullRoadProfile = computed(() => {
    const entityDetails = this.entityDetailsState.selectedItem();
    if (!entityDetails) {
      return null;
    }
    return entityDetails;
  }, ...ngDevMode ? [{ debugName: "fullRoadProfile" }] : []);
  sections = computed(() => {
    const roadProfile = this.fullRoadProfile();
    if (!roadProfile)
      return [];
    return this.roadProfileSectionFactory.createAllRoadProfileSections(roadProfile);
  }, ...ngDevMode ? [{ debugName: "sections" }] : []);
  error = signal(null, ...ngDevMode ? [{ debugName: "error" }] : []);
  onEntityChange(entity) {
    this.entityDetailsState.updateEntity(entity);
    this.error.set(null);
  }
  static \u0275fac = function RoadProfileDetailsContainerComponent_Factory(__ngFactoryType__) {
    return new (__ngFactoryType__ || _RoadProfileDetailsContainerComponent)();
  };
  static \u0275cmp = /* @__PURE__ */ \u0275\u0275defineComponent({ type: _RoadProfileDetailsContainerComponent, selectors: [["app-road-profile-details-container"]], inputs: { entity: [1, "entity"] }, decls: 1, vars: 1, consts: [["subtitle", "Road Profile", "initialMode", "view", 3, "sections", "entity", "title", "allowModeToggle"], [1, "p-4"], ["subtitle", "Road Profile", "initialMode", "view", 3, "entityChange", "sections", "entity", "title", "allowModeToggle"], ["severity", "info", "text", "No road profile details available."]], template: function RoadProfileDetailsContainerComponent_Template(rf, ctx) {
    if (rf & 1) {
      \u0275\u0275conditionalCreate(0, RoadProfileDetailsContainerComponent_Conditional_0_Template, 2, 1);
    }
    if (rf & 2) {
      \u0275\u0275conditional(!ctx.isInitialLoading() && !ctx.error() ? 0 : -1);
    }
  }, dependencies: [
    DetailsAccordionContainerComponent,
    ProgressSpinnerModule,
    MessageModule,
    Message
  ], encapsulation: 2 });
};
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(RoadProfileDetailsContainerComponent, [{
    type: Component,
    args: [{ selector: "app-road-profile-details-container", imports: [
      DetailsAccordionContainerComponent,
      ProgressSpinnerModule,
      MessageModule
    ], template: `@if (!isInitialLoading() && !error()) {
  @if (fullRoadProfile()) {
    <app-details-accordion-container
      [sections]="sections()"
      [entity]="fullRoadProfile()"
      [title]="fullRoadProfile()?.name || 'Road Profile Details'"
      subtitle="Road Profile"
      [allowModeToggle]="true"
      (entityChange)="onEntityChange($event)"
      initialMode="view"
    ></app-details-accordion-container>
  } @else {
    <div class="p-4">
      <p-message
        severity="info"
        text="No road profile details available."
      ></p-message>
    </div>
  }
}
` }]
  }], null, { entity: [{ type: Input, args: [{ isSignal: true, alias: "entity", required: false }] }] });
})();
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && \u0275setClassDebugInfo(RoadProfileDetailsContainerComponent, { className: "RoadProfileDetailsContainerComponent", filePath: "src/app/features/administration/components/road-profiles/road-profile-details-container/road-profile-details-container.component.ts", lineNumber: 20 });
})();

// src/app/features/administration/components/geo-lock-profiles/geo-lock-profile-details-container/geo-lock-profile-details-container.component.ts
function GeoLockProfileDetailsContainerComponent_Conditional_0_Conditional_0_Template(rf, ctx) {
  if (rf & 1) {
    const _r1 = \u0275\u0275getCurrentView();
    \u0275\u0275elementStart(0, "app-details-accordion-container", 2);
    \u0275\u0275listener("entityChange", function GeoLockProfileDetailsContainerComponent_Conditional_0_Conditional_0_Template_app_details_accordion_container_entityChange_0_listener($event) {
      \u0275\u0275restoreView(_r1);
      const ctx_r1 = \u0275\u0275nextContext(2);
      return \u0275\u0275resetView(ctx_r1.onEntityChange($event));
    });
    \u0275\u0275elementEnd();
  }
  if (rf & 2) {
    let tmp_4_0;
    const ctx_r1 = \u0275\u0275nextContext(2);
    \u0275\u0275property("sections", ctx_r1.sections())("entity", ctx_r1.fullGeoLockProfile())("title", ((tmp_4_0 = ctx_r1.fullGeoLockProfile()) == null ? null : tmp_4_0.name) || "Geo Lock Profile Details")("allowModeToggle", true);
  }
}
function GeoLockProfileDetailsContainerComponent_Conditional_0_Conditional_1_Template(rf, ctx) {
  if (rf & 1) {
    \u0275\u0275elementStart(0, "div", 1);
    \u0275\u0275element(1, "p-message", 3);
    \u0275\u0275elementEnd();
  }
}
function GeoLockProfileDetailsContainerComponent_Conditional_0_Template(rf, ctx) {
  if (rf & 1) {
    \u0275\u0275conditionalCreate(0, GeoLockProfileDetailsContainerComponent_Conditional_0_Conditional_0_Template, 1, 4, "app-details-accordion-container", 0)(1, GeoLockProfileDetailsContainerComponent_Conditional_0_Conditional_1_Template, 2, 0, "div", 1);
  }
  if (rf & 2) {
    const ctx_r1 = \u0275\u0275nextContext();
    \u0275\u0275conditional(ctx_r1.fullGeoLockProfile() ? 0 : 1);
  }
}
var GeoLockProfileDetailsContainerComponent = class _GeoLockProfileDetailsContainerComponent {
  entity = input(null, ...ngDevMode ? [{ debugName: "entity" }] : []);
  geoLockProfileSectionFactory = inject(GeoLockProfileSectionConfigFactory);
  entityDetailsState = inject(EntityDetailsStateService);
  isLoading = computed(() => this.entityDetailsState.isLoading(), ...ngDevMode ? [{ debugName: "isLoading" }] : []);
  fullGeoLockProfile = computed(() => {
    const entityDetails = this.entityDetailsState.selectedItem();
    if (!entityDetails) {
      return null;
    }
    return entityDetails;
  }, ...ngDevMode ? [{ debugName: "fullGeoLockProfile" }] : []);
  sections = computed(() => {
    const geoLockProfile = this.fullGeoLockProfile();
    if (!geoLockProfile)
      return [];
    return this.geoLockProfileSectionFactory.createAllGeoLockProfileSections(geoLockProfile);
  }, ...ngDevMode ? [{ debugName: "sections" }] : []);
  error = signal(null, ...ngDevMode ? [{ debugName: "error" }] : []);
  onEntityChange(entity) {
    this.entityDetailsState.updateEntity(entity);
    this.error.set(null);
  }
  static \u0275fac = function GeoLockProfileDetailsContainerComponent_Factory(__ngFactoryType__) {
    return new (__ngFactoryType__ || _GeoLockProfileDetailsContainerComponent)();
  };
  static \u0275cmp = /* @__PURE__ */ \u0275\u0275defineComponent({ type: _GeoLockProfileDetailsContainerComponent, selectors: [["app-geo-lock-profile-details-container"]], inputs: { entity: [1, "entity"] }, decls: 1, vars: 1, consts: [["subtitle", "Geo Lock Profile", "initialMode", "view", 3, "sections", "entity", "title", "allowModeToggle"], [1, "p-4"], ["subtitle", "Geo Lock Profile", "initialMode", "view", 3, "entityChange", "sections", "entity", "title", "allowModeToggle"], ["severity", "info", "text", "No geo lock profile details available."]], template: function GeoLockProfileDetailsContainerComponent_Template(rf, ctx) {
    if (rf & 1) {
      \u0275\u0275conditionalCreate(0, GeoLockProfileDetailsContainerComponent_Conditional_0_Template, 2, 1);
    }
    if (rf & 2) {
      \u0275\u0275conditional(!ctx.isLoading() && !ctx.error() ? 0 : -1);
    }
  }, dependencies: [
    DetailsAccordionContainerComponent,
    ProgressSpinnerModule,
    MessageModule,
    Message
  ], encapsulation: 2 });
};
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(GeoLockProfileDetailsContainerComponent, [{
    type: Component,
    args: [{ selector: "app-geo-lock-profile-details-container", imports: [
      DetailsAccordionContainerComponent,
      ProgressSpinnerModule,
      MessageModule
    ], template: `@if (!isLoading() && !error()) {
  @if (fullGeoLockProfile()) {
    <app-details-accordion-container
      [sections]="sections()"
      [entity]="fullGeoLockProfile()"
      [title]="fullGeoLockProfile()?.name || 'Geo Lock Profile Details'"
      subtitle="Geo Lock Profile"
      [allowModeToggle]="true"
      (entityChange)="onEntityChange($event)"
      initialMode="view"
    ></app-details-accordion-container>
  } @else {
    <div class="p-4">
      <p-message
        severity="info"
        text="No geo lock profile details available."
      ></p-message>
    </div>
  }
}
` }]
  }], null, { entity: [{ type: Input, args: [{ isSignal: true, alias: "entity", required: false }] }] });
})();
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && \u0275setClassDebugInfo(GeoLockProfileDetailsContainerComponent, { className: "GeoLockProfileDetailsContainerComponent", filePath: "src/app/features/administration/components/geo-lock-profiles/geo-lock-profile-details-container/geo-lock-profile-details-container.component.ts", lineNumber: 24 });
})();

// src/app/features/administration/components/device-types/device-types-details-container/device-types-details-container.component.ts
function DeviceTypesDetailsContainerComponent_Conditional_0_Conditional_0_Template(rf, ctx) {
  if (rf & 1) {
    const _r1 = \u0275\u0275getCurrentView();
    \u0275\u0275elementStart(0, "app-details-accordion-container", 2);
    \u0275\u0275listener("entityChange", function DeviceTypesDetailsContainerComponent_Conditional_0_Conditional_0_Template_app_details_accordion_container_entityChange_0_listener($event) {
      \u0275\u0275restoreView(_r1);
      const ctx_r1 = \u0275\u0275nextContext(2);
      return \u0275\u0275resetView(ctx_r1.onEntityChange($event));
    });
    \u0275\u0275elementEnd();
  }
  if (rf & 2) {
    let tmp_4_0;
    const ctx_r1 = \u0275\u0275nextContext(2);
    \u0275\u0275property("sections", ctx_r1.sections())("entity", ctx_r1.fullDeviceType())("title", ((tmp_4_0 = ctx_r1.fullDeviceType()) == null ? null : tmp_4_0.name) || "Device Type Details")("allowModeToggle", true);
  }
}
function DeviceTypesDetailsContainerComponent_Conditional_0_Conditional_1_Template(rf, ctx) {
  if (rf & 1) {
    \u0275\u0275elementStart(0, "div", 1);
    \u0275\u0275element(1, "p-message", 3);
    \u0275\u0275elementEnd();
  }
}
function DeviceTypesDetailsContainerComponent_Conditional_0_Template(rf, ctx) {
  if (rf & 1) {
    \u0275\u0275conditionalCreate(0, DeviceTypesDetailsContainerComponent_Conditional_0_Conditional_0_Template, 1, 4, "app-details-accordion-container", 0)(1, DeviceTypesDetailsContainerComponent_Conditional_0_Conditional_1_Template, 2, 0, "div", 1);
  }
  if (rf & 2) {
    const ctx_r1 = \u0275\u0275nextContext();
    \u0275\u0275conditional(ctx_r1.fullDeviceType() ? 0 : 1);
  }
}
var DeviceTypesDetailsContainerComponent = class _DeviceTypesDetailsContainerComponent {
  constructor() {
    this.operationRegistry.registerEntityOperations("device-types", {
      update: (id, data) => this.deviceTypesService.updateDeviceType(id, data),
      create: (data) => this.deviceTypesService.createDeviceType(data),
      get: (id) => this.deviceTypesService.getDeviceType(id)
    });
  }
  entity = input(null, ...ngDevMode ? [{ debugName: "entity" }] : []);
  entityDetailsState = inject(EntityDetailsStateService);
  deviceTypesSectionFactory = inject(DeviceTypesSectionConfigFactory);
  operationRegistry = inject(EntityOperationRegistryService);
  broadcastService = inject(BroadcastEventMessageService);
  toastService = inject(ToastService);
  destroyRef = inject(DestroyRef);
  deviceTypesService = inject(DeviceTypesService);
  isLoading = computed(() => this.entityDetailsState.isLoading(), ...ngDevMode ? [{ debugName: "isLoading" }] : []);
  isSoftRefreshing = computed(() => this.entityDetailsState.isSoftRefreshing(), ...ngDevMode ? [{ debugName: "isSoftRefreshing" }] : []);
  isInitialLoading = computed(() => this.isLoading() && !this.isSoftRefreshing() && !this.fullDeviceType(), ...ngDevMode ? [{ debugName: "isInitialLoading" }] : []);
  fullDeviceType = computed(() => {
    const entityDetails = this.entityDetailsState.selectedItem();
    if (isNullOrUndefined(entityDetails))
      return null;
    return entityDetails;
  }, ...ngDevMode ? [{ debugName: "fullDeviceType" }] : []);
  sections = computed(() => {
    const fullDeviceType = this.fullDeviceType();
    if (!fullDeviceType)
      return [];
    return this.deviceTypesSectionFactory.createAllDeviceTypeSections(fullDeviceType);
  }, ...ngDevMode ? [{ debugName: "sections" }] : []);
  error = signal(null, ...ngDevMode ? [{ debugName: "error" }] : []);
  isEntityUpdatedMessage(message) {
    return isDefined(message) && message !== null && typeof message === "object" && "entityType" in message && "data" in message && message.entityType === "device-types";
  }
  ngOnInit() {
    this.broadcastService.on("entity-updated").pipe(takeUntilDestroyed(this.destroyRef)).subscribe((message) => {
      if (this.isEntityUpdatedMessage(message)) {
        this.toastService.showSuccess("Success", "Device Type updated successfully");
        this.onEntityChange(message.data);
      }
    });
  }
  onEntityChange(entity) {
    this.entityDetailsState.updateEntity(entity);
    this.error.set(null);
  }
  static \u0275fac = function DeviceTypesDetailsContainerComponent_Factory(__ngFactoryType__) {
    return new (__ngFactoryType__ || _DeviceTypesDetailsContainerComponent)();
  };
  static \u0275cmp = /* @__PURE__ */ \u0275\u0275defineComponent({ type: _DeviceTypesDetailsContainerComponent, selectors: [["app-device-types-details-container"]], inputs: { entity: [1, "entity"] }, decls: 1, vars: 1, consts: [["subtitle", "Device Type", "initialMode", "view", 3, "sections", "entity", "title", "allowModeToggle"], [1, "p-4"], ["subtitle", "Device Type", "initialMode", "view", 3, "entityChange", "sections", "entity", "title", "allowModeToggle"], ["severity", "info", "text", "No device type details available."]], template: function DeviceTypesDetailsContainerComponent_Template(rf, ctx) {
    if (rf & 1) {
      \u0275\u0275conditionalCreate(0, DeviceTypesDetailsContainerComponent_Conditional_0_Template, 2, 1);
    }
    if (rf & 2) {
      \u0275\u0275conditional(!ctx.isInitialLoading() && !ctx.error() ? 0 : -1);
    }
  }, dependencies: [DetailsAccordionContainerComponent, MessageModule, Message], encapsulation: 2 });
};
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(DeviceTypesDetailsContainerComponent, [{
    type: Component,
    args: [{ selector: "app-device-types-details-container", imports: [DetailsAccordionContainerComponent, MessageModule], template: `@if (!isInitialLoading() && !error()) {
  @if (fullDeviceType()) {
    <app-details-accordion-container
      [sections]="sections()"
      [entity]="fullDeviceType()"
      [title]="fullDeviceType()?.name || 'Device Type Details'"
      subtitle="Device Type"
      [allowModeToggle]="true"
      (entityChange)="onEntityChange($event)"
      initialMode="view"
    ></app-details-accordion-container>
  } @else {
    <div class="p-4">
      <p-message
        severity="info"
        text="No device type details available."
      ></p-message>
    </div>
  }
}
` }]
  }], () => [], { entity: [{ type: Input, args: [{ isSignal: true, alias: "entity", required: false }] }] });
})();
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && \u0275setClassDebugInfo(DeviceTypesDetailsContainerComponent, { className: "DeviceTypesDetailsContainerComponent", filePath: "src/app/features/administration/components/device-types/device-types-details-container/device-types-details-container.component.ts", lineNumber: 36 });
})();

// src/app/features/administration/factories/details-config.factory.ts
var DetailsComponentFactory = class _DetailsComponentFactory {
  componentRegistry = {};
  configRegistry = {};
  entityTypeMapping = {
    "client-assets": "asset",
    "client-sim-cards": "simcard",
    "client-alerts": "alert",
    "client-asset-tags": "asset-tag",
    "client-hardware-devices": "device",
    "client-geofences": "geofence",
    "client-io-types": "io-type",
    "client-sms-gateway-providers": "sms-gateway-provider",
    "client-device-providers": "device-provider",
    "client-device-config-profiles": "device-config-profile",
    "client-overspeed-profiles": "overspeed-profile",
    "client-user-roles": "user-role",
    "client-users": "user",
    "client-custom-fields": "custom-field",
    "client-cost-centres": "cost-centre",
    "client-geofence-groups": "geofence-group",
    "client-asset-groups": "asset-group",
    "client-asset-categories": "asset-category",
    "client-asset-rating-profiles": "asset-rating-profile",
    "client-asset-state-profiles": "asset-state-profile",
    "client-road-profiles": "road-profile",
    "client-geo-lock-profiles": "geo-lock-profile",
    "vendor-io-types": "io-type",
    "vendor-overspeed-profiles": "overspeed-profile",
    "vendor-device-config-profiles": "device-config-profile",
    "vendor-sms-gateway-providers": "sms-gateway-provider",
    "vendor-custom-fields": "custom-field",
    "vendor-email-providers": "email-provider",
    "vendor-users": "user",
    "vendor-user-roles": "user-role",
    "vendor-clients": "client",
    "vendor-themes": "theme",
    "vendor-company-groups": "company-group",
    "vendor-road-profiles": "road-profile",
    "distributor-device-providers": "device-provider",
    "distributor-overspeed-profiles": "overspeed-profile",
    "distributor-road-profiles": "road-profile",
    "distributor-themes": "theme",
    "distributor-users": "user",
    "distributor-user-roles": "user-role",
    "distributor-company-groups": "company-group",
    "distributor-vendors": "vendor",
    "super-admin-distributors": "distributor",
    "super-admin-device-types": "device-types",
    "system-users": "user",
    "system-user-roles": "user-role"
    // ... Add more mappings as needed
  };
  constructor() {
    this.registerDefaultComponents();
  }
  /**
   * Register default components
   */
  registerDefaultComponents() {
    this.registerComponent("asset", AssetDetailsContainerComponent);
    this.registerComponent("simcard", SimCardDetailsContainerComponent);
    this.registerComponent("asset-tag", AssetTagDetailsContainerComponent);
    this.registerComponent("device-config-profile", DeviceConfigProfileDetailsContainerComponent);
    this.registerComponent("device", DeviceDetailsContainerComponent);
    this.registerComponent("geofence", GeofenceDetailsContainerComponent);
    this.registerComponent("device-provider", DeviceProviderDetailsContainerComponent);
    this.registerComponent("sms-gateway-provider", SmsGatewayProviderDetailsContainerComponent);
    this.registerComponent("io-type", IoTypeDetailsContainerComponent);
    this.registerComponent("overspeed-profile", OverspeedProfileDetailsContainerComponent);
    this.registerComponent("alert", AlertDetailsContainerComponent);
    this.registerComponent("user-role", UserRoleDetailsContainerComponent);
    this.registerComponent("user", UserDetailsContainerComponent);
    this.registerComponent("custom-field", CustomFieldDetailsContainerComponent);
    this.registerComponent("theme", ThemeDetailsContainerComponent);
    this.registerComponent("cost-centre", CostCentreDetailsContainerComponent);
    this.registerComponent("geofence-group", GeofenceGroupDetailsContainerComponent);
    this.registerComponent("asset-group", AssetGroupDetailsContainerComponent);
    this.registerComponent("asset-category", AssetCategoryDetailsContainerComponent);
    this.registerComponent("email-provider", EmailProviderDetailsContainerComponent);
    this.registerComponent("client", VendorClientDetailsContainerComponent);
    this.registerComponent("vendor", DistributorVendorDetailsContainerComponent);
    this.registerComponent("asset-rating-profile", AssetRatingProfileDetailsContainerComponent);
    this.registerComponent("distributor", SuperAdminDistributorsDetailsContainerComponent);
    this.registerComponent("asset-state-profile", AssetStateProfileDetailsContainerComponent);
    this.registerComponent("company-group", CompanyGroupDetailsContainerComponent);
    this.registerComponent("road-profile", RoadProfileDetailsContainerComponent);
    this.registerComponent("geo-lock-profile", GeoLockProfileDetailsContainerComponent);
    this.registerComponent("device-types", DeviceTypesDetailsContainerComponent);
  }
  /**
   * Register a component for an entity type
   */
  registerComponent(entityType, component) {
    this.componentRegistry[entityType.toLowerCase()] = component;
  }
  /**
   * Register a configuration for an entity type
   */
  registerEntityConfig(entityType, config) {
    this.configRegistry[entityType.toLowerCase()] = config;
  }
  /**
   * Get the appropriate details component for an entity type
   */
  getDetailsComponent(entityType) {
    if (!entityType)
      return GenericDetailsContainerComponent;
    const normalizedType = entityType.toLowerCase();
    return this.componentRegistry[normalizedType] ?? GenericDetailsContainerComponent;
  }
  /**
   * Get the configuration for an entity type
   */
  getEntityConfig(entityType) {
    if (!entityType)
      return void 0;
    const normalizedType = entityType.toLowerCase();
    return this.configRegistry[normalizedType];
  }
  /**
   * Extract entity type from ActivatedRoute
   * @param route The ActivatedRoute containing route parameters
   * @param paramName The name of the parameter containing the entity type (default: 'type')
   * @returns The entity type as a lowercase string, or empty string if not found
   */
  getEntityTypeFromRoute(route, paramName = "type") {
    if (typeof route === "string") {
      return this.normalizeEntityType(route);
    }
    let entityType = "";
    route.params.pipe(take(1)).subscribe((params) => {
      if (isDefined(params) && isDefined(params[paramName])) {
        entityType = this.normalizeEntityType(params[paramName]);
      }
    });
    if (!entityType) {
      route.queryParams.pipe(take(1)).subscribe((queryParams) => {
        if (isDefined(queryParams) && isDefined(queryParams[paramName])) {
          entityType = this.normalizeEntityType(queryParams[paramName]);
        }
      });
    }
    if (!entityType) {
      const routeData = route.snapshot.data;
      if (isDefined(routeData) && isDefined(routeData[paramName])) {
        entityType = this.normalizeEntityType(routeData[paramName]);
      }
    }
    return entityType;
  }
  /**
   * Normalize entity type using the mapping or by converting to lowercase
   * @param rawType The raw entity type from the route
   * @returns The normalized entity type
   */
  normalizeEntityType(rawType) {
    if (!rawType)
      return "";
    const normalizedType = rawType.toLowerCase();
    return this.entityTypeMapping[normalizedType] || normalizedType;
  }
  /**
   * Register a mapping between a route parameter value and an entity type
   * @param routeValue The value found in route parameters
   * @param entityType The internal entity type to map to
   */
  registerEntityTypeMapping(routeValue, entityType) {
    this.entityTypeMapping[routeValue.toLowerCase()] = entityType.toLowerCase();
  }
  /**
   * Get the mapping for a route parameter value
   * @param routeValue The value found in route parameters
   * @returns The mapped entity type, or the original value if no mapping exists
   */
  getEntityTypeMapping(routeValue) {
    const normalizedValue = routeValue.toLowerCase();
    return this.entityTypeMapping[normalizedValue] || normalizedValue;
  }
  static \u0275fac = function DetailsComponentFactory_Factory(__ngFactoryType__) {
    return new (__ngFactoryType__ || _DetailsComponentFactory)();
  };
  static \u0275prov = /* @__PURE__ */ \u0275\u0275defineInjectable({ token: _DetailsComponentFactory, factory: _DetailsComponentFactory.\u0275fac, providedIn: "root" });
};
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(DetailsComponentFactory, [{
    type: Injectable,
    args: [{ providedIn: "root" }]
  }], () => [], null);
})();

// src/app/features/administration/components/sim-cards/sim-card-details-section/sim-card-details-section.component.ts
var _c014 = (a0) => ({ "icon-primary": a0 });
function SimCardDetailsSectionComponent_Conditional_7_Template(rf, ctx) {
  if (rf & 1) {
    const _r1 = \u0275\u0275getCurrentView();
    \u0275\u0275elementStart(0, "div", 6)(1, "span", 9);
    \u0275\u0275listener("click", function SimCardDetailsSectionComponent_Conditional_7_Template_span_click_1_listener() {
      \u0275\u0275restoreView(_r1);
      const ctx_r1 = \u0275\u0275nextContext();
      return \u0275\u0275resetView(ctx_r1.onEdit());
    })("keydown.enter", function SimCardDetailsSectionComponent_Conditional_7_Template_span_keydown_enter_1_listener() {
      \u0275\u0275restoreView(_r1);
      const ctx_r1 = \u0275\u0275nextContext();
      return \u0275\u0275resetView(ctx_r1.onEdit());
    });
    \u0275\u0275elementEnd()();
  }
  if (rf & 2) {
    \u0275\u0275advance();
    \u0275\u0275attribute("aria-label", "Edit sim card details");
  }
}
function SimCardDetailsSectionComponent_Conditional_10_Template(rf, ctx) {
  if (rf & 1) {
    const _r3 = \u0275\u0275getCurrentView();
    \u0275\u0275elementStart(0, "app-dynamic-form", 10);
    \u0275\u0275listener("formSubmit", function SimCardDetailsSectionComponent_Conditional_10_Template_app_dynamic_form_formSubmit_0_listener($event) {
      \u0275\u0275restoreView(_r3);
      const ctx_r1 = \u0275\u0275nextContext();
      return \u0275\u0275resetView(ctx_r1.onSubmit($event));
    })("formValidityChange", function SimCardDetailsSectionComponent_Conditional_10_Template_app_dynamic_form_formValidityChange_0_listener($event) {
      \u0275\u0275restoreView(_r3);
      const ctx_r1 = \u0275\u0275nextContext();
      return \u0275\u0275resetView(ctx_r1.onFormValidityChange($event));
    })("formValueChange", function SimCardDetailsSectionComponent_Conditional_10_Template_app_dynamic_form_formValueChange_0_listener($event) {
      \u0275\u0275restoreView(_r3);
      const ctx_r1 = \u0275\u0275nextContext();
      return \u0275\u0275resetView(ctx_r1.onFormValueChange($event));
    });
    \u0275\u0275elementEnd();
  }
  if (rf & 2) {
    const ctx_r1 = \u0275\u0275nextContext();
    \u0275\u0275property("fields", ctx_r1.formFields)("actions", ctx_r1.actions)("hideActions", ctx_r1.createMode());
  }
}
function SimCardDetailsSectionComponent_Conditional_11_Template(rf, ctx) {
  if (rf & 1) {
    \u0275\u0275element(0, "app-grid", 8);
  }
  if (rf & 2) {
    const ctx_r1 = \u0275\u0275nextContext();
    \u0275\u0275property("data", ctx_r1.simCardDetails())("columns", ctx_r1.columns)("showGridLines", false)("hideHeader", true);
  }
}
var SimCardDetailsSectionComponent = class _SimCardDetailsSectionComponent extends EntitySectionBaseComponent {
  ownerId = input(null, ...ngDevMode ? [{ debugName: "ownerId" }] : []);
  entitiesService = inject(EntitiesService);
  simCardDetails = computed(() => {
    const simCardDetails = this.entity();
    if (!isDefined(simCardDetails))
      return [];
    return [
      { key: "Serial Number", value: simCardDetails.name },
      { key: "Network", value: simCardDetails.networkName },
      { key: "Number", value: simCardDetails.number },
      { key: "Description", value: simCardDetails.description }
    ];
  }, ...ngDevMode ? [{ debugName: "simCardDetails" }] : []);
  constructor() {
    super();
    this.columns = [
      { field: "key", header: "", transform: "uppercase" },
      { field: "value", header: "" }
    ];
  }
  updateFormFields() {
    const simCard = this.entity();
    this.formFields = [
      createTextField("name", "Serial Number", simCard?.name, {
        name: "name",
        validations: [
          {
            name: "required",
            validator: Validators.required,
            message: "Serial Number is required"
          }
        ]
      }),
      createTextField("networkName", "Network", simCard?.networkName, {
        name: "networkName",
        validations: [
          {
            name: "required",
            validator: Validators.required,
            message: "Network is required"
          }
        ]
      }),
      createTextField("number", "Number", simCard?.number, {
        name: "number",
        validations: [
          {
            name: "required",
            validator: Validators.required,
            message: "Number is required"
          }
        ]
      }),
      createTextField("description", "Description", simCard?.description, {
        name: "description",
        validations: []
      })
    ];
  }
  submitChanges(formData) {
    const simCard = this.entity();
    if (isNullOrUndefined(simCard))
      return;
    this.entitiesService.updateSimCard(simCard.id, formData).pipe(takeUntilDestroyed(this.destroyRef)).subscribe({
      next: (response) => {
        this.isFormEditable.set(false);
        this.broadcastService.broadcast("entity-updated", {
          entityType: "simcard",
          operation: "update",
          entityId: simCard.id,
          data: response
        });
      },
      error: () => {
        this.isFormEditable.set(true);
      }
    });
  }
  static \u0275fac = function SimCardDetailsSectionComponent_Factory(__ngFactoryType__) {
    return new (__ngFactoryType__ || _SimCardDetailsSectionComponent)();
  };
  static \u0275cmp = /* @__PURE__ */ \u0275\u0275defineComponent({ type: _SimCardDetailsSectionComponent, selectors: [["app-sim-card-details-section"]], inputs: { ownerId: [1, "ownerId"] }, features: [\u0275\u0275InheritDefinitionFeature], decls: 12, vars: 7, consts: [[1, "card", "pt-2"], [1, "mb-4", "p-2", "flex", "justify-start", "items-center"], [1, "pi", "pi-mobile", "!text-[2.5rem]", 3, "ngClass"], [1, "pl-6", "flex-1"], [1, "flex", "justify-between", "items-center"], [1, "text-xl", "font-semibold", "m-0"], [1, "icon-light"], [3, "fields", "actions", "hideActions"], ["tableStyleClass", "info-display !w-auto", 3, "data", "columns", "showGridLines", "hideHeader"], [1, "pi", "pi-pen-to-square", "action", "hover", "!text-2xl", 3, "click", "keydown.enter"], [3, "formSubmit", "formValidityChange", "formValueChange", "fields", "actions", "hideActions"]], template: function SimCardDetailsSectionComponent_Template(rf, ctx) {
    if (rf & 1) {
      \u0275\u0275elementStart(0, "div", 0)(1, "div", 1);
      \u0275\u0275element(2, "span", 2);
      \u0275\u0275elementStart(3, "div", 3)(4, "div", 4)(5, "h2", 5);
      \u0275\u0275text(6, "SIM Card Details");
      \u0275\u0275elementEnd();
      \u0275\u0275conditionalCreate(7, SimCardDetailsSectionComponent_Conditional_7_Template, 2, 1, "div", 6);
      \u0275\u0275elementEnd();
      \u0275\u0275elementStart(8, "span");
      \u0275\u0275text(9, "Configure various details about your SIM card.");
      \u0275\u0275elementEnd()()();
      \u0275\u0275conditionalCreate(10, SimCardDetailsSectionComponent_Conditional_10_Template, 1, 3, "app-dynamic-form", 7);
      \u0275\u0275conditionalCreate(11, SimCardDetailsSectionComponent_Conditional_11_Template, 1, 4, "app-grid", 8);
      \u0275\u0275elementEnd();
    }
    if (rf & 2) {
      \u0275\u0275advance(2);
      \u0275\u0275property("ngClass", \u0275\u0275pureFunction1(5, _c014, ctx.isFormEditable()));
      \u0275\u0275attribute("aria-label", "mobile icon");
      \u0275\u0275advance(5);
      \u0275\u0275conditional(!ctx.isFormEditable() && !ctx.createMode() ? 7 : -1);
      \u0275\u0275advance(3);
      \u0275\u0275conditional(ctx.isFormEditable() || ctx.createMode() && ctx.formFields.length ? 10 : -1);
      \u0275\u0275advance();
      \u0275\u0275conditional(!ctx.isFormEditable() && !ctx.createMode() ? 11 : -1);
    }
  }, dependencies: [CommonModule, NgClass, ButtonModule, GridComponent, DynamicFormComponent], encapsulation: 2 });
};
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(SimCardDetailsSectionComponent, [{
    type: Component,
    args: [{ selector: "app-sim-card-details-section", imports: [CommonModule, ButtonModule, GridComponent, DynamicFormComponent], template: `<div class="card pt-2">
  <div class="mb-4 p-2 flex justify-start items-center">
    <span
      class="pi pi-mobile !text-[2.5rem]"
      [ngClass]="{ 'icon-primary': isFormEditable() }"
      [attr.aria-label]="'mobile icon'"
    ></span>

    <div class="pl-6 flex-1">
      <div class="flex justify-between items-center">
        <h2 class="text-xl font-semibold m-0">SIM Card Details</h2>
        @if (!isFormEditable() && !createMode()) {
          <div class="icon-light">
            <span
              class="pi pi-pen-to-square action hover !text-2xl"
              [attr.aria-label]="'Edit sim card details'"
              (click)="onEdit()"
              (keydown.enter)="onEdit()"
            ></span>
          </div>
        }
      </div>
      <span>Configure various details about your SIM card.</span>
    </div>
  </div>

  @if (isFormEditable() || (createMode() && formFields.length)) {
    <app-dynamic-form
      [fields]="formFields"
      [actions]="actions"
      [hideActions]="createMode()"
      (formSubmit)="onSubmit($event)"
      (formValidityChange)="onFormValidityChange($event)"
      (formValueChange)="onFormValueChange($event)"
    >
    </app-dynamic-form>
  }

  @if (!isFormEditable() && !createMode()) {
    <app-grid
      [data]="simCardDetails()"
      [columns]="columns"
      [showGridLines]="false"
      [hideHeader]="true"
      tableStyleClass="info-display !w-auto"
    ></app-grid>
  }
</div>
` }]
  }], () => [], { ownerId: [{ type: Input, args: [{ isSignal: true, alias: "ownerId", required: false }] }] });
})();
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && \u0275setClassDebugInfo(SimCardDetailsSectionComponent, { className: "SimCardDetailsSectionComponent", filePath: "src/app/features/administration/components/sim-cards/sim-card-details-section/sim-card-details-section.component.ts", lineNumber: 24 });
})();

// src/app/features/administration/factories/sim-card-section-config.factory.ts
var SimCardSectionConfigFactory = class _SimCardSectionConfigFactory {
  /**
   * Create sections for simCard information
   * @param simCard The simCard object to display in the section
   * @returns An array of AdminDetailSection objects representing the simCard information sections
   */
  createSimCardInformationSections(simCard) {
    return [
      {
        id: "sim-card-details",
        title: "Sim Card Details",
        component: SimCardDetailsSectionComponent,
        componentInputs: { entity: simCard },
        category: "information",
        order: 10
      }
    ];
  }
  /**
   * Create sections for simCard changes
   * @param simCard The simCard object to display in the section
   * @returns An array of AdminDetailSection objects representing the simCard changes sections
   */
  createChangesSection(simCard) {
    return [
      {
        id: "sim-card-changes",
        title: "Changes",
        component: FeedSectionComponent,
        componentInputs: {
          entity: simCard
        },
        category: "feed",
        order: 10
      }
    ];
  }
  /**
   * Create all simCard sections in one call
   * @param simCard The simCard object to display in the sections
   * @returns An array of AdminDetailSection objects representing all simCard sections
   */
  createAllSimCardSections(simCard) {
    return [
      ...this.createSimCardInformationSections(simCard),
      ...this.createChangesSection(simCard)
    ];
  }
  static \u0275fac = function SimCardSectionConfigFactory_Factory(__ngFactoryType__) {
    return new (__ngFactoryType__ || _SimCardSectionConfigFactory)();
  };
  static \u0275prov = /* @__PURE__ */ \u0275\u0275defineInjectable({ token: _SimCardSectionConfigFactory, factory: _SimCardSectionConfigFactory.\u0275fac, providedIn: "root" });
};
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(SimCardSectionConfigFactory, [{
    type: Injectable,
    args: [{ providedIn: "root" }]
  }], null, null);
})();

// src/app/features/administration/components/asset-tags/asset-tag-details-section/asset-tag-details-section.component.ts
var _c015 = (a0) => ({ "icon-primary": a0 });
function AssetTagDetailsSectionComponent_Conditional_7_Template(rf, ctx) {
  if (rf & 1) {
    const _r1 = \u0275\u0275getCurrentView();
    \u0275\u0275elementStart(0, "div", 6)(1, "span", 9);
    \u0275\u0275listener("click", function AssetTagDetailsSectionComponent_Conditional_7_Template_span_click_1_listener() {
      \u0275\u0275restoreView(_r1);
      const ctx_r1 = \u0275\u0275nextContext();
      return \u0275\u0275resetView(ctx_r1.onEdit());
    })("keydown.enter", function AssetTagDetailsSectionComponent_Conditional_7_Template_span_keydown_enter_1_listener() {
      \u0275\u0275restoreView(_r1);
      const ctx_r1 = \u0275\u0275nextContext();
      return \u0275\u0275resetView(ctx_r1.onEdit());
    });
    \u0275\u0275elementEnd()();
  }
  if (rf & 2) {
    \u0275\u0275advance();
    \u0275\u0275attribute("aria-label", "Edit asset tag details");
  }
}
function AssetTagDetailsSectionComponent_Conditional_10_Template(rf, ctx) {
  if (rf & 1) {
    const _r3 = \u0275\u0275getCurrentView();
    \u0275\u0275elementStart(0, "app-dynamic-form", 10);
    \u0275\u0275listener("formSubmit", function AssetTagDetailsSectionComponent_Conditional_10_Template_app_dynamic_form_formSubmit_0_listener($event) {
      \u0275\u0275restoreView(_r3);
      const ctx_r1 = \u0275\u0275nextContext();
      return \u0275\u0275resetView(ctx_r1.onSubmit($event));
    })("formValidityChange", function AssetTagDetailsSectionComponent_Conditional_10_Template_app_dynamic_form_formValidityChange_0_listener($event) {
      \u0275\u0275restoreView(_r3);
      const ctx_r1 = \u0275\u0275nextContext();
      return \u0275\u0275resetView(ctx_r1.onFormValidityChange($event));
    })("formValueChange", function AssetTagDetailsSectionComponent_Conditional_10_Template_app_dynamic_form_formValueChange_0_listener($event) {
      \u0275\u0275restoreView(_r3);
      const ctx_r1 = \u0275\u0275nextContext();
      return \u0275\u0275resetView(ctx_r1.onFormValueChange($event));
    });
    \u0275\u0275elementEnd();
  }
  if (rf & 2) {
    const ctx_r1 = \u0275\u0275nextContext();
    \u0275\u0275property("fields", ctx_r1.formFields)("actions", ctx_r1.actions)("hideActions", ctx_r1.createMode());
  }
}
function AssetTagDetailsSectionComponent_Conditional_11_Template(rf, ctx) {
  if (rf & 1) {
    \u0275\u0275element(0, "app-grid", 8);
  }
  if (rf & 2) {
    const ctx_r1 = \u0275\u0275nextContext();
    \u0275\u0275property("data", ctx_r1.assetTagDetails())("columns", ctx_r1.columns)("showGridLines", false)("hideHeader", true);
  }
}
var AssetTagDetailsSectionComponent = class _AssetTagDetailsSectionComponent extends EntitySectionBaseComponent {
  ownerId = input(null, ...ngDevMode ? [{ debugName: "ownerId" }] : []);
  entitiesService = inject(EntitiesService);
  cdr = inject(ChangeDetectorRef);
  selectOptionsLoaded = signal(false, ...ngDevMode ? [{ debugName: "selectOptionsLoaded" }] : []);
  assetTagDetails = computed(() => {
    const assetTagDetails = this.entity();
    if (!isDefined(assetTagDetails))
      return [];
    return [
      { key: "Name", value: assetTagDetails.name },
      { key: "Serial Number", value: assetTagDetails.serialNumber ?? "None" },
      { key: "Tag Type", value: assetTagDetails.assetTagType?.name ?? "None" },
      { key: "Mode", value: assetTagDetails.mode ?? "None" }
    ];
  }, ...ngDevMode ? [{ debugName: "assetTagDetails" }] : []);
  selectOptions = {};
  constructor() {
    super();
    this.columns = [
      { field: "key", header: "", transform: "uppercase" },
      { field: "value", header: "" }
    ];
    effect(() => {
      const selectOptionsLoaded = this.selectOptionsLoaded();
      if (selectOptionsLoaded) {
        untracked(() => {
          this.updateFormFields();
          this.cdr.detectChanges();
        });
      }
    });
  }
  ngOnInit() {
    this.loadSelectOptions();
  }
  loadSelectOptions() {
    const asset = this.entity();
    const ownerIdValue = this.ownerId();
    const effectiveOwnerId = asset?.owner?.id ?? ownerIdValue;
    if (isNullOrUndefined(effectiveOwnerId)) {
      this.selectOptions = {};
      this.selectOptionsLoaded.set(true);
      this.updateFormFields();
      return;
    }
    this.entitiesService.listAssetTagTypes(effectiveOwnerId).pipe(takeUntilDestroyed(this.destroyRef)).subscribe((result) => {
      this.selectOptions = {
        assetTagTypes: result.items.map((item) => ({ label: item.name ?? "", value: item.id })).sort((a, b) => a.label.localeCompare(b.label))
      };
      this.selectOptionsLoaded.set(true);
    });
  }
  updateFormFields() {
    const assetTag = this.entity();
    this.formFields = [
      createTextField("name", "Name", assetTag?.name, {
        name: "name",
        validations: [
          {
            name: "required",
            validator: Validators.required,
            message: "Name is required"
          }
        ]
      }),
      createTextField("serialNumber", "Serial Number", assetTag?.serialNumber, {
        name: "serialNumber",
        validations: [
          {
            name: "required",
            validator: Validators.required,
            message: "Serial Number is required"
          }
        ]
      }),
      createDropdownField("assetTagType", "Tag Type", this.selectOptions?.["assetTagTypes"] ?? [], assetTag?.assetTagType?.id, {
        name: "assetTagType",
        validations: [
          {
            name: "required",
            validator: Validators.required,
            message: "Tag Type is required"
          }
        ],
        props: {
          appendTo: "body"
        }
      }),
      createDropdownField("mode", "Mode", [
        { label: "Fixed", value: "fixed" },
        { label: "Movable", value: "movable" },
        { label: "Stock", value: "stock" }
      ], assetTag?.mode, {
        name: "mode",
        validations: [
          {
            name: "required",
            validator: Validators.required,
            message: "Mode is required"
          }
        ],
        props: {
          appendTo: "body"
        }
      })
    ];
  }
  submitChanges(formData) {
    const assetTag = this.entity();
    if (isNullOrUndefined(assetTag))
      return;
    const updatedData = __spreadValues({}, formData);
    if (isDefined(updatedData["assetTagType"])) {
      const tagTypeId = updatedData["assetTagType"];
      const tagType = this.selectOptions?.["assetTagTypes"]?.find((option) => option.value === tagTypeId);
      if (tagType) {
        updatedData["assetTagType"] = {
          id: tagTypeId,
          name: tagType.label
        };
      } else {
        const existingTagType = assetTag.assetTagType;
        updatedData["assetTagType"] = {
          id: tagTypeId,
          name: existingTagType?.name ?? "Unknown Tag Type"
        };
      }
    }
    this.entitiesService.updateAssetTag(assetTag.id, updatedData).pipe(takeUntilDestroyed(this.destroyRef), finalize(() => this.isSubmitting.set(false))).subscribe({
      next: (response) => {
        this.isFormEditable.set(false);
        this.broadcastService.broadcast("entity-updated", {
          entityType: "asset-tag",
          operation: "update",
          entityId: assetTag.id,
          data: response
        });
      },
      error: () => {
        this.isFormEditable.set(true);
      }
    });
  }
  onFormValueChange(formData) {
    const transformedData = __spreadValues({}, formData);
    if (isDefined(transformedData["assetTagType"])) {
      const tagTypeId = transformedData["assetTagType"];
      const tagType = this.selectOptions?.["assetTagTypes"]?.find((option) => option.value === tagTypeId);
      if (tagType) {
        transformedData["assetTagType"] = {
          id: tagTypeId,
          name: tagType.label
        };
      }
    }
    this.formValueChange.emit(transformedData);
  }
  static \u0275fac = function AssetTagDetailsSectionComponent_Factory(__ngFactoryType__) {
    return new (__ngFactoryType__ || _AssetTagDetailsSectionComponent)();
  };
  static \u0275cmp = /* @__PURE__ */ \u0275\u0275defineComponent({ type: _AssetTagDetailsSectionComponent, selectors: [["app-asset-tag-details-section"]], inputs: { ownerId: [1, "ownerId"] }, features: [\u0275\u0275InheritDefinitionFeature], decls: 12, vars: 7, consts: [[1, "card", "pt-2"], [1, "mb-4", "p-2", "flex", "justify-start", "items-center"], [1, "pi", "pi-tags", "!text-[2.5rem]", 3, "ngClass"], [1, "pl-6", "flex-1"], [1, "flex", "justify-between", "items-center"], [1, "text-xl", "font-semibold", "m-0"], [1, "icon-light"], [3, "fields", "actions", "hideActions"], ["tableStyleClass", "info-display !w-auto", 3, "data", "columns", "showGridLines", "hideHeader"], [1, "pi", "pi-pen-to-square", "action", "hover", "!text-2xl", 3, "click", "keydown.enter"], [3, "formSubmit", "formValidityChange", "formValueChange", "fields", "actions", "hideActions"]], template: function AssetTagDetailsSectionComponent_Template(rf, ctx) {
    if (rf & 1) {
      \u0275\u0275elementStart(0, "div", 0)(1, "div", 1);
      \u0275\u0275element(2, "span", 2);
      \u0275\u0275elementStart(3, "div", 3)(4, "div", 4)(5, "h2", 5);
      \u0275\u0275text(6, "Asset Tag Details");
      \u0275\u0275elementEnd();
      \u0275\u0275conditionalCreate(7, AssetTagDetailsSectionComponent_Conditional_7_Template, 2, 1, "div", 6);
      \u0275\u0275elementEnd();
      \u0275\u0275elementStart(8, "span");
      \u0275\u0275text(9, "The following information is required in order to identify your asset tag.");
      \u0275\u0275elementEnd()()();
      \u0275\u0275conditionalCreate(10, AssetTagDetailsSectionComponent_Conditional_10_Template, 1, 3, "app-dynamic-form", 7);
      \u0275\u0275conditionalCreate(11, AssetTagDetailsSectionComponent_Conditional_11_Template, 1, 4, "app-grid", 8);
      \u0275\u0275elementEnd();
    }
    if (rf & 2) {
      \u0275\u0275advance(2);
      \u0275\u0275property("ngClass", \u0275\u0275pureFunction1(5, _c015, ctx.isFormEditable()));
      \u0275\u0275attribute("aria-label", "tags icon");
      \u0275\u0275advance(5);
      \u0275\u0275conditional(!ctx.isFormEditable() && !ctx.createMode() ? 7 : -1);
      \u0275\u0275advance(3);
      \u0275\u0275conditional(ctx.isFormEditable() || ctx.createMode() && ctx.formFields.length ? 10 : -1);
      \u0275\u0275advance();
      \u0275\u0275conditional(!ctx.isFormEditable() && !ctx.createMode() ? 11 : -1);
    }
  }, dependencies: [
    CommonModule,
    NgClass,
    ReactiveFormsModule,
    GridComponent,
    DynamicFormComponent
  ], encapsulation: 2 });
};
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(AssetTagDetailsSectionComponent, [{
    type: Component,
    args: [{ selector: "app-asset-tag-details-section", imports: [
      CommonModule,
      ReactiveFormsModule,
      GridComponent,
      DynamicFormComponent
    ], template: `<div class="card pt-2">
  <div class="mb-4 p-2 flex justify-start items-center">
    <span
      class="pi pi-tags !text-[2.5rem]"
      [ngClass]="{ 'icon-primary': isFormEditable() }"
      [attr.aria-label]="'tags icon'"
    ></span>

    <div class="pl-6 flex-1">
      <div class="flex justify-between items-center">
        <h2 class="text-xl font-semibold m-0">Asset Tag Details</h2>
        @if (!isFormEditable() && !createMode()) {
          <div class="icon-light">
            <span
              class="pi pi-pen-to-square action hover !text-2xl"
              [attr.aria-label]="'Edit asset tag details'"
              (click)="onEdit()"
              (keydown.enter)="onEdit()"
            ></span>
          </div>
        }
      </div>
      <span
        >The following information is required in order to identify your asset
        tag.</span
      >
    </div>
  </div>

  @if (isFormEditable() || (createMode() && formFields.length)) {
    <app-dynamic-form
      [fields]="formFields"
      [actions]="actions"
      [hideActions]="createMode()"
      (formSubmit)="onSubmit($event)"
      (formValidityChange)="onFormValidityChange($event)"
      (formValueChange)="onFormValueChange($event)"
    >
    </app-dynamic-form>
  }

  @if (!isFormEditable() && !createMode()) {
    <app-grid
      [data]="assetTagDetails()"
      [columns]="columns"
      [showGridLines]="false"
      [hideHeader]="true"
      tableStyleClass="info-display !w-auto"
    ></app-grid>
  }
</div>
` }]
  }], () => [], { ownerId: [{ type: Input, args: [{ isSignal: true, alias: "ownerId", required: false }] }] });
})();
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && \u0275setClassDebugInfo(AssetTagDetailsSectionComponent, { className: "AssetTagDetailsSectionComponent", filePath: "src/app/features/administration/components/asset-tags/asset-tag-details-section/asset-tag-details-section.component.ts", lineNumber: 43 });
})();

// src/app/features/administration/factories/asset-tag-section-config.factory.ts
var AssetTagSectionConfigFactory = class _AssetTagSectionConfigFactory {
  /**
   * Create sections for assetTag information
   * @param assetTag The assetTag object to display in the section
   * @returns An array of AdminDetailSection objects representing the assetTag information sections
   */
  createAssetTagInformationSections(assetTag) {
    return [
      {
        id: "assetTag-details",
        title: "Asset Tag Details",
        component: AssetTagDetailsSectionComponent,
        componentInputs: { entity: assetTag },
        category: "information",
        order: 10
      }
    ];
  }
  /**
   * Create sections for assetTag changes
   * @param assetTag The assetTag object to display in the section
   * @returns An array of AdminDetailSection objects representing the assetTag changes sections
   */
  createChangesSection(assetTag) {
    return [
      {
        id: "asset-tag-changes",
        title: "Changes",
        component: FeedSectionComponent,
        componentInputs: {
          entity: assetTag
        },
        category: "feed",
        order: 10
      }
    ];
  }
  /**
   * Create all assetTag sections in one call
   * @param assetTag The assetTag object to display in the sections
   * @returns An array of AdminDetailSection objects representing all assetTag sections
   */
  createAllAssetTagSections(assetTag) {
    return [
      ...this.createAssetTagInformationSections(assetTag),
      ...this.createChangesSection(assetTag)
    ];
  }
  static \u0275fac = function AssetTagSectionConfigFactory_Factory(__ngFactoryType__) {
    return new (__ngFactoryType__ || _AssetTagSectionConfigFactory)();
  };
  static \u0275prov = /* @__PURE__ */ \u0275\u0275defineInjectable({ token: _AssetTagSectionConfigFactory, factory: _AssetTagSectionConfigFactory.\u0275fac, providedIn: "root" });
};
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(AssetTagSectionConfigFactory, [{
    type: Injectable,
    args: [{ providedIn: "root" }]
  }], null, null);
})();

// src/app/features/administration/components/device-config-profiles/device-config-profile-details-section/device-config-profile-details-section.component.ts
var _c016 = (a0) => ({ "icon-primary": a0 });
function DeviceConfigProfileDetailsSectionComponent_Conditional_7_Template(rf, ctx) {
  if (rf & 1) {
    const _r1 = \u0275\u0275getCurrentView();
    \u0275\u0275elementStart(0, "div", 6)(1, "span", 9);
    \u0275\u0275listener("click", function DeviceConfigProfileDetailsSectionComponent_Conditional_7_Template_span_click_1_listener() {
      \u0275\u0275restoreView(_r1);
      const ctx_r1 = \u0275\u0275nextContext();
      return \u0275\u0275resetView(ctx_r1.onEdit());
    })("keydown.enter", function DeviceConfigProfileDetailsSectionComponent_Conditional_7_Template_span_keydown_enter_1_listener() {
      \u0275\u0275restoreView(_r1);
      const ctx_r1 = \u0275\u0275nextContext();
      return \u0275\u0275resetView(ctx_r1.onEdit());
    });
    \u0275\u0275elementEnd()();
  }
  if (rf & 2) {
    \u0275\u0275advance();
    \u0275\u0275attribute("aria-label", "Edit device config profile details");
  }
}
function DeviceConfigProfileDetailsSectionComponent_Conditional_10_Template(rf, ctx) {
  if (rf & 1) {
    const _r3 = \u0275\u0275getCurrentView();
    \u0275\u0275elementStart(0, "app-dynamic-form", 10);
    \u0275\u0275listener("formSubmit", function DeviceConfigProfileDetailsSectionComponent_Conditional_10_Template_app_dynamic_form_formSubmit_0_listener($event) {
      \u0275\u0275restoreView(_r3);
      const ctx_r1 = \u0275\u0275nextContext();
      return \u0275\u0275resetView(ctx_r1.onSubmit($event));
    })("formValidityChange", function DeviceConfigProfileDetailsSectionComponent_Conditional_10_Template_app_dynamic_form_formValidityChange_0_listener($event) {
      \u0275\u0275restoreView(_r3);
      const ctx_r1 = \u0275\u0275nextContext();
      return \u0275\u0275resetView(ctx_r1.onFormValidityChange($event));
    })("formValueChange", function DeviceConfigProfileDetailsSectionComponent_Conditional_10_Template_app_dynamic_form_formValueChange_0_listener($event) {
      \u0275\u0275restoreView(_r3);
      const ctx_r1 = \u0275\u0275nextContext();
      return \u0275\u0275resetView(ctx_r1.onFormValueChange($event));
    });
    \u0275\u0275elementEnd();
  }
  if (rf & 2) {
    const ctx_r1 = \u0275\u0275nextContext();
    \u0275\u0275property("fields", ctx_r1.formFields)("actions", ctx_r1.actions)("hideActions", ctx_r1.createMode());
  }
}
function DeviceConfigProfileDetailsSectionComponent_Conditional_11_Template(rf, ctx) {
  if (rf & 1) {
    \u0275\u0275element(0, "app-grid", 8);
  }
  if (rf & 2) {
    const ctx_r1 = \u0275\u0275nextContext();
    \u0275\u0275property("data", ctx_r1.deviceConfigProfileDetails())("columns", ctx_r1.columns)("showGridLines", false)("hideHeader", true);
  }
}
var DeviceConfigProfileDetailsSectionComponent = class _DeviceConfigProfileDetailsSectionComponent extends EntitySectionBaseComponent {
  ownerId = input(null, ...ngDevMode ? [{ debugName: "ownerId" }] : []);
  entitiesService = inject(EntitiesService);
  operationRegistry = inject(EntityOperationRegistryService);
  cdr = inject(ChangeDetectorRef);
  selectOptionsLoaded = signal(false, ...ngDevMode ? [{ debugName: "selectOptionsLoaded" }] : []);
  deviceConfigProfileDetails = computed(() => {
    const deviceConfigProfileDetails = this.entity();
    if (!isDefined(deviceConfigProfileDetails))
      return [];
    return [
      { key: "Name", value: deviceConfigProfileDetails.name },
      {
        key: "Device Type",
        value: deviceConfigProfileDetails.deviceType?.name ?? "None"
      }
    ];
  }, ...ngDevMode ? [{ debugName: "deviceConfigProfileDetails" }] : []);
  selectOptions = {};
  constructor() {
    super();
    this.columns = [
      { field: "key", header: "", transform: "uppercase" },
      { field: "value", header: "" }
    ];
    effect(() => {
      const selectOptionsLoaded = this.selectOptionsLoaded();
      if (selectOptionsLoaded) {
        untracked(() => {
          this.updateFormFields();
          this.cdr.detectChanges();
        });
      }
    });
  }
  ngOnInit() {
    this.loadSelectOptions();
  }
  loadSelectOptions() {
    const deviceConfigProfile = this.entity();
    const ownerIdValue = this.ownerId();
    const effectiveOwnerId = deviceConfigProfile?.owner?.id ?? ownerIdValue;
    if (isNullOrUndefined(effectiveOwnerId)) {
      this.selectOptions = {};
      this.selectOptionsLoaded.set(true);
      this.updateFormFields();
      return;
    }
    this.entitiesService.listDeviceTypes(effectiveOwnerId).pipe(takeUntilDestroyed(this.destroyRef)).subscribe((result) => {
      this.selectOptions = {
        deviceTypes: result.items.filter((deviceType) => deviceType.state === "active" && (!this.createMode() || isDefined(deviceType.parent) && deviceType.owner.id === effectiveOwnerId)).map((item) => ({
          label: `${item?.parent?.name} - ${item?.name}`,
          value: item.id,
          data: item
        })).sort((a, b) => a.label.localeCompare(b.label))
      };
      this.selectOptionsLoaded.set(true);
    });
  }
  updateFormFields() {
    const deviceConfigProfile = this.entity();
    this.formFields = [
      createTextField("name", "Name", deviceConfigProfile?.name, {
        name: "name",
        validations: [
          {
            name: "required",
            validator: Validators.required,
            message: "Name is required"
          }
        ]
      }),
      createDropdownField("deviceType", "Device Type", this.selectOptions?.["deviceTypes"], deviceConfigProfile?.deviceType?.id, {
        name: "deviceType",
        validations: [
          {
            name: "required",
            validator: Validators.required,
            message: "Device Type is required"
          }
        ],
        disabled: !this.createMode(),
        props: {
          appendTo: "body"
        }
      })
    ];
  }
  getUpdateMethod() {
    return this.operationRegistry.getOperation("device-config-profile", "update") ?? ((id, data) => this.entitiesService.updateDeviceConfigProfile(id, data));
  }
  onFormValueChange(formData) {
    const transformedData = this.transformFormData(formData);
    this.formValueChange.emit(transformedData);
  }
  transformFormData(formData) {
    const transformedData = __spreadValues({}, formData);
    if (isDefined(transformedData["deviceType"])) {
      const tagTypeId = transformedData["deviceType"];
      const tagType = this.selectOptions?.["deviceTypes"]?.find((option) => option.value === tagTypeId);
      if (tagType) {
        transformedData["deviceType"] = {
          id: tagTypeId,
          name: tagType.data?.name
        };
      }
    }
    return transformedData;
  }
  static \u0275fac = function DeviceConfigProfileDetailsSectionComponent_Factory(__ngFactoryType__) {
    return new (__ngFactoryType__ || _DeviceConfigProfileDetailsSectionComponent)();
  };
  static \u0275cmp = /* @__PURE__ */ \u0275\u0275defineComponent({ type: _DeviceConfigProfileDetailsSectionComponent, selectors: [["app-device-config-profile-details-section"]], inputs: { ownerId: [1, "ownerId"] }, features: [\u0275\u0275InheritDefinitionFeature], decls: 12, vars: 7, consts: [[1, "card", "pt-2"], [1, "mb-4", "p-2", "flex", "justify-start", "items-center"], [1, "pi", "pi-microchip", "!text-[2.5rem]", 3, "ngClass"], [1, "pl-6", "flex-1"], [1, "flex", "justify-between", "items-center"], [1, "text-xl", "font-semibold", "m-0"], [1, "icon-light"], [3, "fields", "actions", "hideActions"], ["tableStyleClass", "info-display !w-auto", 3, "data", "columns", "showGridLines", "hideHeader"], [1, "pi", "pi-pen-to-square", "action", "hover", "!text-2xl", 3, "click", "keydown.enter"], [3, "formSubmit", "formValidityChange", "formValueChange", "fields", "actions", "hideActions"]], template: function DeviceConfigProfileDetailsSectionComponent_Template(rf, ctx) {
    if (rf & 1) {
      \u0275\u0275elementStart(0, "div", 0)(1, "div", 1);
      \u0275\u0275element(2, "span", 2);
      \u0275\u0275elementStart(3, "div", 3)(4, "div", 4)(5, "h2", 5);
      \u0275\u0275text(6, "Device Config Profile Details");
      \u0275\u0275elementEnd();
      \u0275\u0275conditionalCreate(7, DeviceConfigProfileDetailsSectionComponent_Conditional_7_Template, 2, 1, "div", 6);
      \u0275\u0275elementEnd();
      \u0275\u0275elementStart(8, "span");
      \u0275\u0275text(9, "Configure your device configuration profile.");
      \u0275\u0275elementEnd()()();
      \u0275\u0275conditionalCreate(10, DeviceConfigProfileDetailsSectionComponent_Conditional_10_Template, 1, 3, "app-dynamic-form", 7);
      \u0275\u0275conditionalCreate(11, DeviceConfigProfileDetailsSectionComponent_Conditional_11_Template, 1, 4, "app-grid", 8);
      \u0275\u0275elementEnd();
    }
    if (rf & 2) {
      \u0275\u0275advance(2);
      \u0275\u0275property("ngClass", \u0275\u0275pureFunction1(5, _c016, ctx.isFormEditable()));
      \u0275\u0275attribute("aria-label", "microchip icon");
      \u0275\u0275advance(5);
      \u0275\u0275conditional(!ctx.isFormEditable() && !ctx.createMode() ? 7 : -1);
      \u0275\u0275advance(3);
      \u0275\u0275conditional(ctx.isFormEditable() || ctx.createMode() && ctx.formFields.length ? 10 : -1);
      \u0275\u0275advance();
      \u0275\u0275conditional(!ctx.isFormEditable() && !ctx.createMode() ? 11 : -1);
    }
  }, dependencies: [
    CommonModule,
    NgClass,
    ButtonModule,
    InputTextModule,
    GridComponent,
    DynamicFormComponent
  ], encapsulation: 2 });
};
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(DeviceConfigProfileDetailsSectionComponent, [{
    type: Component,
    args: [{ selector: "app-device-config-profile-details-section", imports: [
      CommonModule,
      ButtonModule,
      InputTextModule,
      GridComponent,
      DynamicFormComponent
    ], template: `<div class="card pt-2">
  <div class="mb-4 p-2 flex justify-start items-center">
    <span
      class="pi pi-microchip !text-[2.5rem]"
      [ngClass]="{ 'icon-primary': isFormEditable() }"
      [attr.aria-label]="'microchip icon'"
    ></span>

    <div class="pl-6 flex-1">
      <div class="flex justify-between items-center">
        <h2 class="text-xl font-semibold m-0">Device Config Profile Details</h2>
        @if (!isFormEditable() && !createMode()) {
          <div class="icon-light">
            <span
              class="pi pi-pen-to-square action hover !text-2xl"
              [attr.aria-label]="'Edit device config profile details'"
              (click)="onEdit()"
              (keydown.enter)="onEdit()"
            ></span>
          </div>
        }
      </div>
      <span>Configure your device configuration profile.</span>
    </div>
  </div>

  @if (isFormEditable() || (createMode() && formFields.length)) {
    <app-dynamic-form
      [fields]="formFields"
      [actions]="actions"
      [hideActions]="createMode()"
      (formSubmit)="onSubmit($event)"
      (formValidityChange)="onFormValidityChange($event)"
      (formValueChange)="onFormValueChange($event)"
    >
    </app-dynamic-form>
  }

  @if (!isFormEditable() && !createMode()) {
    <app-grid
      [data]="deviceConfigProfileDetails()"
      [columns]="columns"
      [showGridLines]="false"
      [hideHeader]="true"
      tableStyleClass="info-display !w-auto"
    ></app-grid>
  }
</div>
` }]
  }], () => [], { ownerId: [{ type: Input, args: [{ isSignal: true, alias: "ownerId", required: false }] }] });
})();
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && \u0275setClassDebugInfo(DeviceConfigProfileDetailsSectionComponent, { className: "DeviceConfigProfileDetailsSectionComponent", filePath: "src/app/features/administration/components/device-config-profiles/device-config-profile-details-section/device-config-profile-details-section.component.ts", lineNumber: 53 });
})();

// src/app/features/administration/components/device/device-parameters-section/device-parameters-section.component.ts
var _c017 = (a0) => ({ "icon-primary": a0 });
function DeviceParametersSectionComponent_Conditional_7_Template(rf, ctx) {
  if (rf & 1) {
    const _r1 = \u0275\u0275getCurrentView();
    \u0275\u0275elementStart(0, "div", 6)(1, "span", 10);
    \u0275\u0275listener("click", function DeviceParametersSectionComponent_Conditional_7_Template_span_click_1_listener() {
      \u0275\u0275restoreView(_r1);
      const ctx_r1 = \u0275\u0275nextContext();
      return \u0275\u0275resetView(ctx_r1.onEdit());
    })("keydown.enter", function DeviceParametersSectionComponent_Conditional_7_Template_span_keydown_enter_1_listener() {
      \u0275\u0275restoreView(_r1);
      const ctx_r1 = \u0275\u0275nextContext();
      return \u0275\u0275resetView(ctx_r1.onEdit());
    });
    \u0275\u0275elementEnd()();
  }
  if (rf & 2) {
    \u0275\u0275advance();
    \u0275\u0275attribute("aria-label", "Edit device parameters details");
  }
}
function DeviceParametersSectionComponent_Conditional_10_Template(rf, ctx) {
  if (rf & 1) {
    const _r3 = \u0275\u0275getCurrentView();
    \u0275\u0275elementStart(0, "app-dynamic-form", 11);
    \u0275\u0275listener("formSubmit", function DeviceParametersSectionComponent_Conditional_10_Template_app_dynamic_form_formSubmit_0_listener($event) {
      \u0275\u0275restoreView(_r3);
      const ctx_r1 = \u0275\u0275nextContext();
      return \u0275\u0275resetView(ctx_r1.onSubmit($event));
    })("formValidityChange", function DeviceParametersSectionComponent_Conditional_10_Template_app_dynamic_form_formValidityChange_0_listener($event) {
      \u0275\u0275restoreView(_r3);
      const ctx_r1 = \u0275\u0275nextContext();
      return \u0275\u0275resetView(ctx_r1.onFormValidityChange($event));
    })("formValueChange", function DeviceParametersSectionComponent_Conditional_10_Template_app_dynamic_form_formValueChange_0_listener($event) {
      \u0275\u0275restoreView(_r3);
      const ctx_r1 = \u0275\u0275nextContext();
      return \u0275\u0275resetView(ctx_r1.onFormValueChange($event));
    });
    \u0275\u0275elementEnd();
  }
  if (rf & 2) {
    const ctx_r1 = \u0275\u0275nextContext();
    \u0275\u0275property("fields", ctx_r1.formFields)("actions", ctx_r1.actions)("hideActions", ctx_r1.createMode());
  }
}
function DeviceParametersSectionComponent_Conditional_11_Template(rf, ctx) {
  if (rf & 1) {
    \u0275\u0275element(0, "app-grid", 8);
  }
  if (rf & 2) {
    const ctx_r1 = \u0275\u0275nextContext();
    \u0275\u0275property("data", ctx_r1.deviceDeviceParameters())("columns", ctx_r1.columns)("showGridLines", false)("hideHeader", true);
  }
}
function DeviceParametersSectionComponent_Conditional_12_Template(rf, ctx) {
  if (rf & 1) {
    const _r4 = \u0275\u0275getCurrentView();
    \u0275\u0275elementStart(0, "app-dynamic-form-modal", 12);
    \u0275\u0275listener("modalClose", function DeviceParametersSectionComponent_Conditional_12_Template_app_dynamic_form_modal_modalClose_0_listener() {
      \u0275\u0275restoreView(_r4);
      const ctx_r1 = \u0275\u0275nextContext();
      return \u0275\u0275resetView(ctx_r1.onClose());
    });
    \u0275\u0275elementStart(1, "div", 13)(2, "p", 14);
    \u0275\u0275text(3, " Enter the name of the custom input you'd like to use below. ");
    \u0275\u0275elementEnd()()();
  }
  if (rf & 2) {
    const ctx_r1 = \u0275\u0275nextContext();
    \u0275\u0275property("visible", ctx_r1.isCustomInputModalOpen)("fields", ctx_r1.customInputFormFields)("actions", ctx_r1.modalActions)("styleClass", "w-[40rem]");
  }
}
var DeviceParametersSectionComponent = class _DeviceParametersSectionComponent extends EntitySectionBaseComponent {
  ownerId = input(null, ...ngDevMode ? [{ debugName: "ownerId" }] : []);
  deviceType = input.required(...ngDevMode ? [{ debugName: "deviceType" }] : []);
  entitiesService = inject(EntitiesService);
  operationRegistry = inject(EntityOperationRegistryService);
  cdr = inject(ChangeDetectorRef);
  customValues = signal({}, ...ngDevMode ? [{ debugName: "customValues" }] : []);
  deviceDeviceParameters = computed(() => {
    const deviceDeviceParameters = this.entity()?.parameters;
    if (!isDefined(deviceDeviceParameters))
      return [];
    return [
      {
        key: "Active Input",
        value: isEmpty(deviceDeviceParameters.active_input) ? "None" : deviceDeviceParameters.active_input
      },
      {
        key: "Hours Input",
        value: isEmpty(deviceDeviceParameters.hours_input) ? "None" : deviceDeviceParameters.hours_input
      },
      {
        key: "Idling Input",
        value: isEmpty(deviceDeviceParameters.idling_input) ? "None" : deviceDeviceParameters.idling_input
      },
      {
        key: "Invert Idling Input",
        value: deviceDeviceParameters.idling_input_invert ?? false ? "Yes" : "No"
      }
    ];
  }, ...ngDevMode ? [{ debugName: "deviceDeviceParameters" }] : []);
  isCustomInputModalOpen = false;
  customInputFormFields = [];
  currentEditField = null;
  modalActions = [
    {
      label: "Cancel",
      action: () => this.onClose(),
      severity: "secondary"
    },
    {
      label: "Save",
      action: (formGroup) => {
        this.onSaveCustomInput(formGroup);
      },
      severity: "primary"
    }
  ];
  constructor() {
    super();
    this.columns = [
      { field: "key", header: "", transform: "uppercase" },
      { field: "value", header: "" }
    ];
    effect(() => {
      const deviceType = this.deviceType();
      if (isDefined(deviceType)) {
        untracked(() => {
          this.updateFormFields();
        });
      }
    });
  }
  getIOOptions(ioCapabilities, currentValue) {
    const options = [];
    if (isDefined(ioCapabilities?.digital_input)) {
      Object.keys(ioCapabilities.digital_input).forEach((key) => {
        let label = key;
        if (key === "ignition") {
          label = "Ignition Wire";
        } else if (key === "movement") {
          label = "Movement Detection";
        }
        options.push({ label, value: key });
      });
    }
    if (isDefined(ioCapabilities?.digital_output)) {
      Object.keys(ioCapabilities.digital_output).forEach((key) => {
        options.push({ label: key, value: key });
      });
    }
    options.sort((a, b) => a.label.localeCompare(b.label));
    if (isDefined(currentValue) && !options.some((o) => o.value === currentValue) && !["", "none", "emulate", "speed"].includes(currentValue)) {
      options.push({ label: currentValue, value: currentValue });
    }
    options.push({ label: "Custom...", value: "_custom_" });
    return options;
  }
  updateFormFields() {
    const device = this.entity();
    const deviceTypeData = this.deviceType();
    const parameters = device?.parameters || {};
    const activeInputOptions = this.getIOOptions(deviceTypeData?.ioCapabilities, parameters.active_input);
    const hoursInputOptions = this.getIOOptions(deviceTypeData?.ioCapabilities, parameters.hours_input);
    const idlingInputOptions = this.getIOOptions(deviceTypeData?.ioCapabilities, parameters.idling_input);
    this.formFields = [
      createDropdownField("active_input", "Active Input", [
        { label: "None", value: "" },
        { label: "Emulate", value: "emulate" },
        ...activeInputOptions
      ], parameters.active_input, {
        name: "active_input",
        props: {
          appendTo: "body"
        },
        events: {
          onChange: (event) => {
            if (event === "_custom_") {
              this.openCustomInputModal("active_input");
            }
          }
        }
      }),
      createDropdownField("hours_input", "Hours Input", [
        { label: "None", value: "" },
        { label: "Emulate", value: "emulate" },
        ...hoursInputOptions
      ], parameters.hours_input, {
        name: "hours_input",
        props: {
          appendTo: "body"
        },
        events: {
          onChange: (event) => {
            if (event === "_custom_") {
              this.openCustomInputModal("hours_input");
            }
          }
        }
      }),
      createDropdownField("idling_input", "Idling Input", [{ label: "Speed", value: "speed" }, ...idlingInputOptions], parameters.idling_input, {
        name: "idling_input",
        props: {
          appendTo: "body"
        },
        events: {
          onChange: (event) => {
            if (event === "_custom_") {
              this.openCustomInputModal("idling_input");
            }
          }
        }
      }),
      createDropdownField("idling_input_invert", "Invert Idling Input", [
        { label: "Yes", value: true },
        { label: "No", value: false }
      ], parameters.idling_input_invert, {
        name: "idling_input_invert",
        props: {
          appendTo: "body"
        }
      })
    ];
    this.cdr.detectChanges();
  }
  getUpdateMethod() {
    return this.operationRegistry.getOperation("device", "update") ?? ((id, data) => this.entitiesService.updateDevice(id, data));
  }
  openCustomInputModal(fieldName) {
    this.currentEditField = fieldName;
    const currentValue = this.entity()?.parameters?.[fieldName] ?? "";
    this.customInputFormFields = [
      createTextField("custom_input", "Input", currentValue, {
        name: "custom_input"
      })
    ];
    this.isCustomInputModalOpen = true;
  }
  onClose() {
    this.isCustomInputModalOpen = false;
    this.currentEditField = null;
  }
  onSaveCustomInput(formGroup) {
    const customValue = formGroup.get("custom_input")?.value;
    if (isDefined(customValue) && isDefined(this.currentEditField)) {
      const currentEntity = this.entity();
      if (currentEntity?.parameters) {
        currentEntity.parameters[this.currentEditField] = customValue;
      }
      const customValues = this.customValues();
      this.customValues.set(__spreadProps(__spreadValues({}, customValues), {
        [this.currentEditField]: customValue
      }));
      const currentFormGroup = this.getFormGroup();
      const formState = {};
      const dirtyFields = /* @__PURE__ */ new Set();
      const touchedFields = /* @__PURE__ */ new Set();
      if (currentFormGroup) {
        Object.keys(currentFormGroup.controls).forEach((key) => {
          const control = currentFormGroup.get(key);
          if (control) {
            formState[key] = control.value;
            if (control.dirty)
              dirtyFields.add(key);
            if (control.touched)
              touchedFields.add(key);
          }
        });
      }
      formState[this.currentEditField] = customValue;
      dirtyFields.add(this.currentEditField);
      touchedFields.add(this.currentEditField);
      this.updateFormFields();
      setTimeout(() => {
        const newFormGroup = this.getFormGroup();
        if (newFormGroup) {
          Object.keys(formState).forEach((key) => {
            const control = newFormGroup.get(key);
            if (control) {
              control.setValue(formState[key], { emitEvent: false });
              if (dirtyFields.has(key)) {
                control.markAsDirty();
              }
              if (touchedFields.has(key)) {
                control.markAsTouched();
              }
            }
          });
          newFormGroup.updateValueAndValidity();
        }
        this.cdr.detectChanges();
      }, 0);
      this.isCustomInputModalOpen = false;
      this.currentEditField = null;
    }
  }
  transformFormData(formData) {
    if (this.injectDataAtPath()) {
      const result = {};
      setNestedProperty(result, this.dataPath(), formData);
      return result;
    } else {
      return formData;
    }
  }
  static \u0275fac = function DeviceParametersSectionComponent_Factory(__ngFactoryType__) {
    return new (__ngFactoryType__ || _DeviceParametersSectionComponent)();
  };
  static \u0275cmp = /* @__PURE__ */ \u0275\u0275defineComponent({ type: _DeviceParametersSectionComponent, selectors: [["app-device-parameters-section"]], inputs: { ownerId: [1, "ownerId"], deviceType: [1, "deviceType"] }, features: [\u0275\u0275InheritDefinitionFeature], decls: 13, vars: 8, consts: [[1, "card", "pt-2"], [1, "mb-4", "p-2", "flex", "justify-start", "items-center"], [1, "pi", "pi-wrench", "!text-[2.5rem]", 3, "ngClass"], [1, "pl-6", "flex-1"], [1, "flex", "justify-between", "items-center"], [1, "text-xl", "font-semibold", "m-0"], [1, "icon-light"], [3, "fields", "actions", "hideActions"], ["tableStyleClass", "info-display !w-auto", 3, "data", "columns", "showGridLines", "hideHeader"], ["header", "Custom Input", 3, "visible", "fields", "actions", "styleClass"], [1, "pi", "pi-pen-to-square", "action", "hover", "!text-2xl", 3, "click", "keydown.enter"], [3, "formSubmit", "formValidityChange", "formValueChange", "fields", "actions", "hideActions"], ["header", "Custom Input", 3, "modalClose", "visible", "fields", "actions", "styleClass"], ["formHeader", ""], [1, "mt-2", "mb-4", "muted"]], template: function DeviceParametersSectionComponent_Template(rf, ctx) {
    if (rf & 1) {
      \u0275\u0275elementStart(0, "div", 0)(1, "div", 1);
      \u0275\u0275element(2, "span", 2);
      \u0275\u0275elementStart(3, "div", 3)(4, "div", 4)(5, "h2", 5);
      \u0275\u0275text(6, "Device Parameters");
      \u0275\u0275elementEnd();
      \u0275\u0275conditionalCreate(7, DeviceParametersSectionComponent_Conditional_7_Template, 2, 1, "div", 6);
      \u0275\u0275elementEnd();
      \u0275\u0275elementStart(8, "span");
      \u0275\u0275text(9, "Configure various device parameters below.");
      \u0275\u0275elementEnd()()();
      \u0275\u0275conditionalCreate(10, DeviceParametersSectionComponent_Conditional_10_Template, 1, 3, "app-dynamic-form", 7);
      \u0275\u0275conditionalCreate(11, DeviceParametersSectionComponent_Conditional_11_Template, 1, 4, "app-grid", 8);
      \u0275\u0275elementEnd();
      \u0275\u0275conditionalCreate(12, DeviceParametersSectionComponent_Conditional_12_Template, 4, 4, "app-dynamic-form-modal", 9);
    }
    if (rf & 2) {
      \u0275\u0275advance(2);
      \u0275\u0275property("ngClass", \u0275\u0275pureFunction1(6, _c017, ctx.isFormEditable()));
      \u0275\u0275attribute("aria-label", "wrench icon");
      \u0275\u0275advance(5);
      \u0275\u0275conditional(!ctx.isFormEditable() && !ctx.createMode() ? 7 : -1);
      \u0275\u0275advance(3);
      \u0275\u0275conditional(ctx.isFormEditable() || ctx.createMode() && ctx.formFields.length ? 10 : -1);
      \u0275\u0275advance();
      \u0275\u0275conditional(!ctx.isFormEditable() && !ctx.createMode() ? 11 : -1);
      \u0275\u0275advance();
      \u0275\u0275conditional(ctx.isCustomInputModalOpen ? 12 : -1);
    }
  }, dependencies: [
    CommonModule,
    NgClass,
    ButtonModule,
    InputTextModule,
    GridComponent,
    DynamicFormComponent,
    DynamicFormModalComponent
  ], encapsulation: 2 });
};
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(DeviceParametersSectionComponent, [{
    type: Component,
    args: [{ selector: "app-device-parameters-section", imports: [
      CommonModule,
      ButtonModule,
      InputTextModule,
      GridComponent,
      DynamicFormComponent,
      DynamicFormModalComponent
    ], template: `<div class="card pt-2">
  <div class="mb-4 p-2 flex justify-start items-center">
    <span
      class="pi pi-wrench !text-[2.5rem]"
      [ngClass]="{ 'icon-primary': isFormEditable() }"
      [attr.aria-label]="'wrench icon'"
    ></span>

    <div class="pl-6 flex-1">
      <div class="flex justify-between items-center">
        <h2 class="text-xl font-semibold m-0">Device Parameters</h2>
        @if (!isFormEditable() && !createMode()) {
          <div class="icon-light">
            <span
              class="pi pi-pen-to-square action hover !text-2xl"
              [attr.aria-label]="'Edit device parameters details'"
              (click)="onEdit()"
              (keydown.enter)="onEdit()"
            ></span>
          </div>
        }
      </div>
      <span>Configure various device parameters below.</span>
    </div>
  </div>

  @if (isFormEditable() || (createMode() && formFields.length)) {
    <app-dynamic-form
      [fields]="formFields"
      [actions]="actions"
      [hideActions]="createMode()"
      (formSubmit)="onSubmit($event)"
      (formValidityChange)="onFormValidityChange($event)"
      (formValueChange)="onFormValueChange($event)"
    >
    </app-dynamic-form>
  }

  @if (!isFormEditable() && !createMode()) {
    <app-grid
      [data]="deviceDeviceParameters()"
      [columns]="columns"
      [showGridLines]="false"
      [hideHeader]="true"
      tableStyleClass="info-display !w-auto"
    ></app-grid>
  }
</div>

@if (isCustomInputModalOpen) {
  <app-dynamic-form-modal
    [visible]="isCustomInputModalOpen"
    header="Custom Input"
    [fields]="customInputFormFields"
    [actions]="modalActions"
    [styleClass]="'w-[40rem]'"
    (modalClose)="onClose()"
  >
    <div formHeader>
      <p class="mt-2 mb-4 muted">
        Enter the name of the custom input you'd like to use below.
      </p>
    </div>
  </app-dynamic-form-modal>
}
` }]
  }], () => [], { ownerId: [{ type: Input, args: [{ isSignal: true, alias: "ownerId", required: false }] }], deviceType: [{ type: Input, args: [{ isSignal: true, alias: "deviceType", required: true }] }] });
})();
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && \u0275setClassDebugInfo(DeviceParametersSectionComponent, { className: "DeviceParametersSectionComponent", filePath: "src/app/features/administration/components/device/device-parameters-section/device-parameters-section.component.ts", lineNumber: 58 });
})();

// src/app/features/administration/helpers/io-devices.helper.ts
function getIoKeys(deviceType, device, includeOptional = true, ioTypes = [
  "analog_input",
  "digital_input",
  "digital_output",
  "can_input",
  "counter_input",
  "temperature_input",
  "value_input",
  "camera_input"
]) {
  if (!deviceType) {
    return [];
  }
  const collectedIos = [];
  const processIOCapabilities = (ioProperties) => {
    const ios = Object.keys(ioProperties);
    for (const io of ios) {
      if (includeOptional || !(ioProperties[io].optional ?? false)) {
        collectedIos.push(io);
      }
    }
  };
  for (const ioType of ioTypes) {
    const typeCapabilities = deviceType.ioCapabilities?.[ioType] ?? {};
    processIOCapabilities(typeCapabilities);
    if (device?.accessories) {
      Object.keys(device.accessories).forEach((accessoryId) => {
        const accessoryCapabilities = deviceType.accessories?.[accessoryId]?.ioCapabilities?.[ioType] ?? {};
        processIOCapabilities(accessoryCapabilities);
      });
    }
  }
  const bitmaps = device?.parameters?.bitmaps || [];
  const bitmapTargets = bitmaps.filter((bitmap) => ioTypes.includes(bitmap.target_type)).map((bitmap) => bitmap.target_input);
  collectedIos.push(...bitmapTargets);
  const result = [...new Set(collectedIos)].sort((a, b) => a.localeCompare(b));
  return result;
}
function getDeviceIOWhitelist(deviceType, device, ioType, currentInputId) {
  const allInputs = getIoKeys(deviceType, device, true, [ioType]);
  const defaultInputs = getIoKeys(deviceType, device, false, [ioType]);
  const customInputs = [];
  const ioConfig = device?.parameters?.io?.[ioType];
  if (isDefined(ioConfig) && isDefined(currentInputId)) {
    const currentInputConfig = ioConfig[currentInputId];
    if (isDefined(currentInputConfig?.input) && !allInputs.includes(currentInputConfig.input)) {
      customInputs.push(currentInputConfig.input);
    }
    Object.keys(ioConfig).forEach((key) => {
      if (key.startsWith("custom_") && key.endsWith(`_${currentInputId}`)) {
        const calibration = ioConfig[key];
        if (isDefined(calibration?.input) && !customInputs.includes(calibration.input)) {
          customInputs.push(calibration.input);
        }
      }
    });
  } else if (isDefined(ioConfig) && !isDefined(currentInputId)) {
    for (const key of Object.keys(ioConfig)) {
      const inputConfig = ioConfig[key];
      const inputName = inputConfig?.input;
      if (isDefined(inputName) && !allInputs.includes(inputName)) {
        customInputs.push(inputName);
      }
    }
  }
  const whitelist = device?.parameters?.io_whitelist || [];
  if (whitelist.length > 0) {
    return [
      ...allInputs.filter((input2) => whitelist.includes(input2)),
      ...customInputs
    ];
  } else {
    return [...defaultInputs, ...customInputs];
  }
}
function getDefaultCalibration(ioType) {
  switch (ioType) {
    case "analog_input":
      return {
        input: "",
        minVolts: 0,
        maxVolts: 100,
        minValue: 0,
        maxValue: 100
      };
    case "can_input":
      return { input: "", minValue: 0, maxValue: 100, multiplier: 1 };
    case "counter_input":
      return { input: "", multiplier: 1 };
    case "digital_input":
      return { input: "", invert: false };
    case "digital_output":
      return { input: "", invert: false, pulsed: false };
    case "camera_input":
      return { input: "", enableLiveStream: false };
    default:
      return { input: "" };
  }
}
function addCalibrationParams(calibration, ioType, formGroup) {
  switch (ioType) {
    case "analog_input":
      calibration.minVolts = Number(formGroup.get("minVolts")?.value ?? 0);
      calibration.maxVolts = Number(formGroup.get("maxVolts")?.value ?? 100);
      calibration.minValue = Number(formGroup.get("minValue")?.value ?? 0);
      calibration.maxValue = Number(formGroup.get("maxValue")?.value ?? 100);
      break;
    case "can_input":
      calibration.minValue = Number(formGroup.get("minValue")?.value ?? 0);
      calibration.maxValue = Number(formGroup.get("maxValue")?.value ?? 100);
      calibration.multiplier = Number(formGroup.get("multiplier")?.value ?? 1);
      break;
    case "counter_input":
      calibration.multiplier = Number(formGroup.get("multiplier")?.value ?? 1);
      break;
    case "digital_input":
      calibration.invert = Boolean(formGroup.get("invert")?.value ?? false);
      break;
    case "digital_output":
      calibration.invert = Boolean(formGroup.get("invert")?.value ?? false);
      calibration.pulsed = Boolean(formGroup.get("pulsed")?.value ?? false);
      break;
    case "camera_input":
      calibration.enableLiveStream = Boolean(formGroup.get("enableLiveStream")?.value ?? false);
      break;
  }
}
function getIoTypeDisplayName(ioType, ioTypeMap) {
  return ioTypeMap[ioType] ?? ioType;
}
function clearIOConfiguration(ioValues, ioType, inputName) {
  if (isDefined(ioValues[ioType]?.[inputName])) {
    delete ioValues[ioType][inputName];
    if (Object.keys(ioValues[ioType]).length === 0) {
      delete ioValues[ioType];
    }
  }
  return __spreadValues({}, ioValues);
}
function updateIOValues(device) {
  return device?.parameters?.io ? __spreadValues({}, device.parameters.io) : {};
}
var commonFields = {
  input: createTextField("input", "Input Name", "", {
    name: "input",
    validations: [
      {
        name: "required",
        validator: Validators.required,
        message: "Input name is required"
      }
    ]
  }),
  minVolts: createNumberField("minVolts", "Min Volts", 0, {
    name: "minVolts",
    validations: [
      {
        name: "required",
        validator: Validators.required,
        message: "Minimum volts is required"
      },
      {
        name: "min",
        validator: Validators.min(-2e6),
        message: "Minimum volts must be greater than or equal to -20000000"
      },
      {
        name: "max",
        validator: Validators.max(2e6),
        message: "Minimum volts must be less than or equal to 20000000"
      }
    ],
    props: { suffix: "volts" }
  }),
  maxVolts: createNumberField("maxVolts", "Max Volts", 100, {
    name: "maxVolts",
    validations: [
      {
        name: "required",
        validator: Validators.required,
        message: "Maximum volts is required"
      },
      {
        name: "min",
        validator: Validators.min(-2e6),
        message: "Maximum volts must be greater than or equal to -20000000"
      },
      {
        name: "max",
        validator: Validators.max(2e6),
        message: "Maximum volts must be less than or equal to 20000000"
      }
    ],
    props: { suffix: "volts" }
  }),
  minValue: createNumberField("minValue", "Min Value", 0, {
    name: "minValue",
    validations: [
      {
        name: "required",
        validator: Validators.required,
        message: "Minimum value is required"
      }
    ]
  }),
  maxValue: createNumberField("maxValue", "Max Value", 100, {
    name: "maxValue",
    validations: [
      {
        name: "required",
        validator: Validators.required,
        message: "Maximum value is required"
      }
    ]
  }),
  invert: createDropdownField("invert", "Invert Signal", [
    { label: "No", value: false },
    { label: "Yes", value: true }
  ], false, {
    name: "invert",
    props: { appendTo: "body" }
  }),
  pulsed: createDropdownField("pulsed", "Pulsed Output", [
    { label: "No", value: false },
    { label: "Yes", value: true }
  ], false, {
    name: "pulsed",
    props: { appendTo: "body" }
  }),
  multiplier: createNumberField("multiplier", "Multiplier", 1, {
    name: "multiplier"
  }),
  enableLiveStream: createDropdownField("enableLiveStream", "Enable Live Stream", [
    { label: "No", value: false },
    { label: "Yes", value: true }
  ], false, {
    name: "enableLiveStream",
    props: { appendTo: "body" }
  })
};
function generateFormFields(ioType, calibration, deviceType, unit) {
  const fieldGenerators = {
    analog_input: () => [
      __spreadProps(__spreadValues({}, commonFields["input"]), { value: calibration.input }),
      __spreadProps(__spreadValues({}, commonFields["minVolts"]), { value: calibration.minVolts }),
      __spreadProps(__spreadValues({}, commonFields["maxVolts"]), { value: calibration.maxVolts }),
      __spreadProps(__spreadValues({}, commonFields["minValue"]), {
        value: calibration.minValue,
        props: { suffix: unit }
      }),
      __spreadProps(__spreadValues({}, commonFields["maxValue"]), {
        value: calibration.maxValue,
        props: { suffix: unit }
      })
    ],
    digital_input: () => [
      __spreadProps(__spreadValues({}, commonFields["input"]), { value: calibration.input }),
      __spreadProps(__spreadValues({}, commonFields["invert"]), { value: calibration.invert })
    ],
    digital_output: () => [
      __spreadProps(__spreadValues({}, commonFields["input"]), { value: calibration.input }),
      __spreadProps(__spreadValues({}, commonFields["invert"]), { value: calibration.invert }),
      __spreadProps(__spreadValues({}, commonFields["pulsed"]), { value: calibration.pulsed })
    ],
    can_input: () => [
      __spreadProps(__spreadValues({}, commonFields["input"]), { value: calibration.input }),
      __spreadProps(__spreadValues({}, commonFields["minValue"]), {
        value: calibration.minValue,
        props: { suffix: unit }
      }),
      __spreadProps(__spreadValues({}, commonFields["maxValue"]), {
        value: calibration.maxValue,
        props: { suffix: unit }
      }),
      __spreadProps(__spreadValues({}, commonFields["multiplier"]), { value: calibration.multiplier })
    ],
    counter_input: () => [
      __spreadProps(__spreadValues({}, commonFields["input"]), { value: calibration.input }),
      __spreadProps(__spreadValues({}, commonFields["multiplier"]), { value: calibration.multiplier })
    ],
    camera_input: () => {
      const hasLiveStreamCapability = deviceType?.accessories && Object.values(deviceType.accessories).some((accessory) => accessory.features?.["video_live_stream"] && accessory.ioCapabilities?.camera_input?.[calibration.input]);
      return hasLiveStreamCapability ?? false ? [
        __spreadProps(__spreadValues({}, commonFields["input"]), { value: calibration.input }),
        __spreadProps(__spreadValues({}, commonFields["enableLiveStream"]), {
          value: calibration.enableLiveStream
        })
      ] : [__spreadProps(__spreadValues({}, commonFields["input"]), { value: calibration.input })];
    },
    value_input: () => [__spreadProps(__spreadValues({}, commonFields["input"]), { value: calibration.input })],
    temperature_input: () => [
      __spreadProps(__spreadValues({}, commonFields["input"]), { value: calibration.input })
    ]
  };
  return fieldGenerators[ioType]?.() ?? [];
}
function formatIoSummary(ioTypes, ioValues, currentIoType) {
  return ioTypes.map((ioType) => ({
    key: ioType.name ?? "",
    value: ioValues[currentIoType]?.[ioType.id]?.input ?? "None"
  }));
}
function processInputChanges(currentIoType, originalIoType) {
  const ioTypeChanges = {};
  let hasChanges = false;
  for (const inputId in currentIoType) {
    const currentInput = currentIoType[inputId];
    const originalInput = originalIoType[inputId];
    if (isNullOrUndefined(originalInput) || JSON.stringify(currentInput) !== JSON.stringify(originalInput)) {
      ioTypeChanges[inputId] = currentInput;
      hasChanges = true;
    }
  }
  return [ioTypeChanges, hasChanges];
}
function processRemovedInputs(originalIoType, currentIoType, ioTypeChanges) {
  let hasChanges = false;
  for (const inputId in originalIoType) {
    if (!(inputId in currentIoType)) {
      ioTypeChanges[inputId] = null;
      hasChanges = true;
    }
  }
  return hasChanges;
}
function calculateIoChanges(currentValues, originalValues) {
  const changes = {};
  if (!originalValues)
    return changes;
  for (const ioType in currentValues) {
    const currentIoType = currentValues[ioType];
    const originalIoType = originalValues[ioType] ?? {};
    const [ioTypeChanges, changesFound] = processInputChanges(currentIoType, originalIoType);
    const removedFound = processRemovedInputs(originalIoType, currentIoType, ioTypeChanges);
    if (changesFound || removedFound) {
      changes[ioType] = ioTypeChanges;
    }
  }
  for (const ioType in originalValues) {
    if (!(ioType in currentValues)) {
      changes[ioType] = null;
    }
  }
  return changes;
}

// src/app/features/administration/components/device/device-io-whitelist-section/device-io-whitelist-section.component.ts
var _c018 = (a0) => ({ "icon-primary": a0 });
function DeviceIoWhitelistSectionComponent_Conditional_7_Template(rf, ctx) {
  if (rf & 1) {
    const _r1 = \u0275\u0275getCurrentView();
    \u0275\u0275elementStart(0, "div", 6)(1, "span", 9);
    \u0275\u0275listener("click", function DeviceIoWhitelistSectionComponent_Conditional_7_Template_span_click_1_listener() {
      \u0275\u0275restoreView(_r1);
      const ctx_r1 = \u0275\u0275nextContext();
      return \u0275\u0275resetView(ctx_r1.onEdit());
    })("keydown.enter", function DeviceIoWhitelistSectionComponent_Conditional_7_Template_span_keydown_enter_1_listener() {
      \u0275\u0275restoreView(_r1);
      const ctx_r1 = \u0275\u0275nextContext();
      return \u0275\u0275resetView(ctx_r1.onEdit());
    });
    \u0275\u0275elementEnd()();
  }
  if (rf & 2) {
    \u0275\u0275advance();
    \u0275\u0275attribute("aria-label", "Edit device parameters details");
  }
}
function DeviceIoWhitelistSectionComponent_Conditional_10_Template(rf, ctx) {
  if (rf & 1) {
    const _r3 = \u0275\u0275getCurrentView();
    \u0275\u0275elementStart(0, "app-dynamic-form", 10);
    \u0275\u0275listener("formSubmit", function DeviceIoWhitelistSectionComponent_Conditional_10_Template_app_dynamic_form_formSubmit_0_listener($event) {
      \u0275\u0275restoreView(_r3);
      const ctx_r1 = \u0275\u0275nextContext();
      return \u0275\u0275resetView(ctx_r1.onSubmit($event));
    })("formValidityChange", function DeviceIoWhitelistSectionComponent_Conditional_10_Template_app_dynamic_form_formValidityChange_0_listener($event) {
      \u0275\u0275restoreView(_r3);
      const ctx_r1 = \u0275\u0275nextContext();
      return \u0275\u0275resetView(ctx_r1.onFormValidityChange($event));
    })("formValueChange", function DeviceIoWhitelistSectionComponent_Conditional_10_Template_app_dynamic_form_formValueChange_0_listener($event) {
      \u0275\u0275restoreView(_r3);
      const ctx_r1 = \u0275\u0275nextContext();
      return \u0275\u0275resetView(ctx_r1.onFormValueChange($event));
    });
    \u0275\u0275elementEnd();
  }
  if (rf & 2) {
    const ctx_r1 = \u0275\u0275nextContext();
    \u0275\u0275property("fields", ctx_r1.formFields)("actions", ctx_r1.actions)("hideActions", ctx_r1.createMode());
  }
}
function DeviceIoWhitelistSectionComponent_Conditional_11_Template(rf, ctx) {
  if (rf & 1) {
    \u0275\u0275element(0, "app-grid", 8);
  }
  if (rf & 2) {
    const ctx_r1 = \u0275\u0275nextContext();
    \u0275\u0275property("data", ctx_r1.ioWhitelistDisplay())("columns", ctx_r1.columns)("showGridLines", false)("hideHeader", true);
  }
}
var DeviceIoWhitelistSectionComponent = class _DeviceIoWhitelistSectionComponent extends EntitySectionBaseComponent {
  ownerId = input(null, ...ngDevMode ? [{ debugName: "ownerId" }] : []);
  deviceType = input.required(...ngDevMode ? [{ debugName: "deviceType" }] : []);
  entitiesService = inject(EntitiesService);
  operationRegistry = inject(EntityOperationRegistryService);
  ioWhitelistDisplay = computed(() => {
    const params = this.entity()?.parameters;
    if (isNullOrUndefined(params?.io_whitelist))
      return [];
    const result = [
      {
        key: "Selection",
        value: isEmpty(params.io_whitelist) ? "Default" : "Custom"
      }
    ];
    if (!isEmpty(params.io_whitelist)) {
      result.push({
        key: "Inputs",
        value: params.io_whitelist.join(", ")
      });
    }
    return result;
  }, ...ngDevMode ? [{ debugName: "ioWhitelistDisplay" }] : []);
  constructor() {
    super();
    this.columns = [
      { field: "key", header: "Mode", transform: "uppercase" },
      { field: "value", header: "Configuration" }
    ];
    effect(() => {
      const deviceType = this.deviceType();
      const entity = this.entity();
      if (isDefined(deviceType) && isDefined(entity)) {
        untracked(() => {
          this.updateFormFields();
        });
      }
    });
  }
  updateFormFields() {
    const device = this.entity();
    const deviceTypeData = this.deviceType();
    const parameters = device?.parameters || {};
    const allIOKeys = getIoKeys(deviceTypeData, device, true);
    const hasWhitelist = Array.isArray(parameters.io_whitelist) && parameters.io_whitelist.length > 0;
    const currentMode = hasWhitelist ? "custom" : "default";
    const currentWhitelist = hasWhitelist ? parameters.io_whitelist || [] : getIoKeys(deviceTypeData, device, false);
    this.formFields = [
      createDropdownField("mode", "Selection Mode", [
        { label: "Default", value: "default" },
        { label: "Custom", value: "custom" }
      ], currentMode, {
        name: "mode",
        props: {
          appendTo: "body"
        },
        conditional: true,
        conditions: {
          default: [],
          // No additional fields for default mode
          custom: [
            createListboxField("whitelist", "Inputs", currentWhitelist, allIOKeys.map((io) => ({ label: io, value: io })), {
              name: "whitelist",
              props: {
                appendTo: "body",
                multiple: true,
                filter: true,
                filterPlaceholder: "Search I/O",
                optionLabel: "label",
                style: { height: "250px" }
              }
            })
          ]
        }
      })
    ];
  }
  getUpdateMethod() {
    return this.operationRegistry.getOperation("device", "update") ?? ((id, data) => this.entitiesService.updateDevice(id, data));
  }
  onSubmit(formGroup) {
    if (isNullOrUndefined(this.entity()) || !formGroup.valid)
      return;
    this.isSubmitting.set(true);
    const formData = {};
    Object.keys(formGroup.controls).forEach((key) => {
      const control = formGroup.controls[key];
      formData[key] = control.value;
    });
    if (Object.keys(formData).length === 0) {
      this.isFormEditable.set(false);
      this.isSubmitting.set(false);
      return;
    }
    this.submitChanges(formData);
  }
  transformFormData(formData) {
    const mode = formData["mode"];
    const whitelist = formData["whitelist"] ?? [];
    const result = {};
    const updatedData = {
      io_whitelist: mode === "custom" ? whitelist : null
    };
    if (this.injectDataAtPath()) {
      setNestedProperty(result, this.dataPath(), updatedData);
    } else {
      Object.assign(result, updatedData);
    }
    return result;
  }
  static \u0275fac = function DeviceIoWhitelistSectionComponent_Factory(__ngFactoryType__) {
    return new (__ngFactoryType__ || _DeviceIoWhitelistSectionComponent)();
  };
  static \u0275cmp = /* @__PURE__ */ \u0275\u0275defineComponent({ type: _DeviceIoWhitelistSectionComponent, selectors: [["app-device-io-whitelist-section"]], inputs: { ownerId: [1, "ownerId"], deviceType: [1, "deviceType"] }, features: [\u0275\u0275InheritDefinitionFeature], decls: 12, vars: 7, consts: [[1, "card", "pt-2"], [1, "mb-4", "p-2", "flex", "justify-start", "items-center"], [1, "pi", "pi-list-check", "!text-[2.5rem]", 3, "ngClass"], [1, "pl-6", "flex-1"], [1, "flex", "justify-between", "items-center"], [1, "text-xl", "font-semibold", "m-0"], [1, "icon-light"], [3, "fields", "actions", "hideActions"], ["tableStyleClass", "info-display !w-auto", 3, "data", "columns", "showGridLines", "hideHeader"], [1, "pi", "pi-pen-to-square", "action", "hover", "!text-2xl", 3, "click", "keydown.enter"], [3, "formSubmit", "formValidityChange", "formValueChange", "fields", "actions", "hideActions"]], template: function DeviceIoWhitelistSectionComponent_Template(rf, ctx) {
    if (rf & 1) {
      \u0275\u0275elementStart(0, "div", 0)(1, "div", 1);
      \u0275\u0275element(2, "span", 2);
      \u0275\u0275elementStart(3, "div", 3)(4, "div", 4)(5, "h2", 5);
      \u0275\u0275text(6, "IO Selection");
      \u0275\u0275elementEnd();
      \u0275\u0275conditionalCreate(7, DeviceIoWhitelistSectionComponent_Conditional_7_Template, 2, 1, "div", 6);
      \u0275\u0275elementEnd();
      \u0275\u0275elementStart(8, "span");
      \u0275\u0275text(9, "Select which of the various inputs and outputs available on the device you would like to have captured and persisted.");
      \u0275\u0275elementEnd()()();
      \u0275\u0275conditionalCreate(10, DeviceIoWhitelistSectionComponent_Conditional_10_Template, 1, 3, "app-dynamic-form", 7);
      \u0275\u0275conditionalCreate(11, DeviceIoWhitelistSectionComponent_Conditional_11_Template, 1, 4, "app-grid", 8);
      \u0275\u0275elementEnd();
    }
    if (rf & 2) {
      \u0275\u0275advance(2);
      \u0275\u0275property("ngClass", \u0275\u0275pureFunction1(5, _c018, ctx.isFormEditable()));
      \u0275\u0275attribute("aria-label", "list icon");
      \u0275\u0275advance(5);
      \u0275\u0275conditional(!ctx.isFormEditable() && !ctx.createMode() ? 7 : -1);
      \u0275\u0275advance(3);
      \u0275\u0275conditional(ctx.isFormEditable() || ctx.createMode() && ctx.formFields.length ? 10 : -1);
      \u0275\u0275advance();
      \u0275\u0275conditional(!ctx.isFormEditable() && !ctx.createMode() ? 11 : -1);
    }
  }, dependencies: [CommonModule, NgClass, ButtonModule, GridComponent, DynamicFormComponent], encapsulation: 2 });
};
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(DeviceIoWhitelistSectionComponent, [{
    type: Component,
    args: [{ selector: "app-device-io-whitelist-section", imports: [CommonModule, ButtonModule, GridComponent, DynamicFormComponent], template: `<div class="card pt-2">
  <div class="mb-4 p-2 flex justify-start items-center">
    <span
      class="pi pi-list-check !text-[2.5rem]"
      [ngClass]="{ 'icon-primary': isFormEditable() }"
      [attr.aria-label]="'list icon'"
    ></span>

    <div class="pl-6 flex-1">
      <div class="flex justify-between items-center">
        <h2 class="text-xl font-semibold m-0">IO Selection</h2>
        @if (!isFormEditable() && !createMode()) {
          <div class="icon-light">
            <span
              class="pi pi-pen-to-square action hover !text-2xl"
              [attr.aria-label]="'Edit device parameters details'"
              (click)="onEdit()"
              (keydown.enter)="onEdit()"
            ></span>
          </div>
        }
      </div>
      <span
        >Select which of the various inputs and outputs available on the device
        you would like to have captured and persisted.</span
      >
    </div>
  </div>

  @if (isFormEditable() || (createMode() && formFields.length)) {
    <app-dynamic-form
      [fields]="formFields"
      [actions]="actions"
      [hideActions]="createMode()"
      (formSubmit)="onSubmit($event)"
      (formValidityChange)="onFormValidityChange($event)"
      (formValueChange)="onFormValueChange($event)"
    >
    </app-dynamic-form>
  }

  @if (!isFormEditable() && !createMode()) {
    <app-grid
      [data]="ioWhitelistDisplay()"
      [columns]="columns"
      [showGridLines]="false"
      [hideHeader]="true"
      tableStyleClass="info-display !w-auto"
    ></app-grid>
  }
</div>
` }]
  }], () => [], { ownerId: [{ type: Input, args: [{ isSignal: true, alias: "ownerId", required: false }] }], deviceType: [{ type: Input, args: [{ isSignal: true, alias: "deviceType", required: true }] }] });
})();
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && \u0275setClassDebugInfo(DeviceIoWhitelistSectionComponent, { className: "DeviceIoWhitelistSectionComponent", filePath: "src/app/features/administration/components/device/device-io-whitelist-section/device-io-whitelist-section.component.ts", lineNumber: 44 });
})();

// src/app/features/administration/components/device/device-bitmap-section/device-bitmap-section.component.ts
var _c019 = ["iconTemplate"];
var _c13 = (a0) => ({ "icon-primary": a0 });
function DeviceBitmapSectionComponent_Conditional_8_Template(rf, ctx) {
  if (rf & 1) {
    const _r1 = \u0275\u0275getCurrentView();
    \u0275\u0275elementStart(0, "div", 6)(1, "span", 12);
    \u0275\u0275listener("click", function DeviceBitmapSectionComponent_Conditional_8_Template_span_click_1_listener() {
      \u0275\u0275restoreView(_r1);
      const ctx_r1 = \u0275\u0275nextContext();
      return \u0275\u0275resetView(ctx_r1.onEdit());
    })("keydown.enter", function DeviceBitmapSectionComponent_Conditional_8_Template_span_keydown_enter_1_listener() {
      \u0275\u0275restoreView(_r1);
      const ctx_r1 = \u0275\u0275nextContext();
      return \u0275\u0275resetView(ctx_r1.onEdit());
    });
    \u0275\u0275elementEnd()();
  }
  if (rf & 2) {
    \u0275\u0275advance();
    \u0275\u0275attribute("aria-label", "Edit bitmapped IO properties.");
  }
}
function DeviceBitmapSectionComponent_Conditional_11_Conditional_2_Template(rf, ctx) {
  if (rf & 1) {
    \u0275\u0275elementStart(0, "div", 14)(1, "p");
    \u0275\u0275text(2, 'No bitmaps added yet. Click "Add" to create a bitmap.');
    \u0275\u0275elementEnd()();
  }
}
function DeviceBitmapSectionComponent_Conditional_11_Conditional_3_For_5_Template(rf, ctx) {
  if (rf & 1) {
    const _r4 = \u0275\u0275getCurrentView();
    \u0275\u0275elementStart(0, "p-panel", 23)(1, "div", 24)(2, "div", 25);
    \u0275\u0275namespaceSVG();
    \u0275\u0275elementStart(3, "svg", 26);
    \u0275\u0275element(4, "use");
    \u0275\u0275elementEnd();
    \u0275\u0275namespaceHTML();
    \u0275\u0275elementStart(5, "div", 27)(6, "span");
    \u0275\u0275text(7);
    \u0275\u0275elementEnd();
    \u0275\u0275elementStart(8, "span", 28);
    \u0275\u0275text(9);
    \u0275\u0275elementEnd()()();
    \u0275\u0275elementStart(10, "div", 29)(11, "span", 30);
    \u0275\u0275listener("click", function DeviceBitmapSectionComponent_Conditional_11_Conditional_3_For_5_Template_span_click_11_listener() {
      const $index_r5 = \u0275\u0275restoreView(_r4).$index;
      const ctx_r1 = \u0275\u0275nextContext(3);
      return \u0275\u0275resetView(ctx_r1.removeBitmap($index_r5));
    })("keydown.enter", function DeviceBitmapSectionComponent_Conditional_11_Conditional_3_For_5_Template_span_keydown_enter_11_listener() {
      const $index_r5 = \u0275\u0275restoreView(_r4).$index;
      const ctx_r1 = \u0275\u0275nextContext(3);
      return \u0275\u0275resetView(ctx_r1.removeBitmap($index_r5));
    });
    \u0275\u0275elementEnd()()()();
  }
  if (rf & 2) {
    const bitmap_r6 = ctx.$implicit;
    const ctx_r1 = \u0275\u0275nextContext(3);
    \u0275\u0275property("showHeader", false);
    \u0275\u0275advance(3);
    \u0275\u0275attribute("aria-label", "square binary icon");
    \u0275\u0275advance();
    \u0275\u0275attribute("href", "assets/sprites/sprite.svg#square-binary-solid");
    \u0275\u0275advance(3);
    \u0275\u0275textInterpolate(bitmap_r6.target_input);
    \u0275\u0275advance(2);
    \u0275\u0275textInterpolate(ctx_r1.getBitMapDescription(bitmap_r6));
    \u0275\u0275advance(2);
    \u0275\u0275attribute("aria-label", "Delete Bitmap");
  }
}
function DeviceBitmapSectionComponent_Conditional_11_Conditional_3_Template(rf, ctx) {
  if (rf & 1) {
    \u0275\u0275elementStart(0, "div", 15)(1, "span", 21);
    \u0275\u0275text(2, "Inputs");
    \u0275\u0275elementEnd();
    \u0275\u0275elementStart(3, "div", 22);
    \u0275\u0275repeaterCreate(4, DeviceBitmapSectionComponent_Conditional_11_Conditional_3_For_5_Template, 12, 6, "p-panel", 23, \u0275\u0275repeaterTrackByIndex);
    \u0275\u0275elementEnd()();
  }
  if (rf & 2) {
    const ctx_r1 = \u0275\u0275nextContext(2);
    \u0275\u0275advance(4);
    \u0275\u0275repeater(ctx_r1.bitmaps);
  }
}
function DeviceBitmapSectionComponent_Conditional_11_Template(rf, ctx) {
  if (rf & 1) {
    const _r3 = \u0275\u0275getCurrentView();
    \u0275\u0275elementStart(0, "div", 7)(1, "div", 13);
    \u0275\u0275conditionalCreate(2, DeviceBitmapSectionComponent_Conditional_11_Conditional_2_Template, 3, 0, "div", 14)(3, DeviceBitmapSectionComponent_Conditional_11_Conditional_3_Template, 6, 0, "div", 15);
    \u0275\u0275elementStart(4, "div", 16)(5, "p-button", 17);
    \u0275\u0275listener("onClick", function DeviceBitmapSectionComponent_Conditional_11_Template_p_button_onClick_5_listener() {
      \u0275\u0275restoreView(_r3);
      const ctx_r1 = \u0275\u0275nextContext();
      return \u0275\u0275resetView(ctx_r1.addBitmap());
    });
    \u0275\u0275elementEnd()();
    \u0275\u0275elementStart(6, "div", 18)(7, "p-button", 19);
    \u0275\u0275listener("onClick", function DeviceBitmapSectionComponent_Conditional_11_Template_p_button_onClick_7_listener() {
      \u0275\u0275restoreView(_r3);
      const ctx_r1 = \u0275\u0275nextContext();
      return \u0275\u0275resetView(ctx_r1.isFormEditable.set(false));
    });
    \u0275\u0275elementEnd();
    \u0275\u0275elementStart(8, "p-button", 20);
    \u0275\u0275listener("onClick", function DeviceBitmapSectionComponent_Conditional_11_Template_p_button_onClick_8_listener() {
      \u0275\u0275restoreView(_r3);
      const ctx_r1 = \u0275\u0275nextContext();
      return \u0275\u0275resetView(ctx_r1.submitChanges({ bitmaps: ctx_r1.bitmaps }));
    });
    \u0275\u0275elementEnd()()()();
  }
  if (rf & 2) {
    const ctx_r1 = \u0275\u0275nextContext();
    \u0275\u0275advance(2);
    \u0275\u0275conditional(ctx_r1.bitmaps.length === 0 ? 2 : 3);
  }
}
function DeviceBitmapSectionComponent_Conditional_12_Template(rf, ctx) {
  if (rf & 1) {
    \u0275\u0275element(0, "app-grid", 8);
  }
  if (rf & 2) {
    const ctx_r1 = \u0275\u0275nextContext();
    \u0275\u0275property("data", ctx_r1.deviceBitmaps())("columns", ctx_r1.columns)("showGridLines", false)("hideHeader", true);
  }
}
var DeviceBitmapSectionComponent = class _DeviceBitmapSectionComponent extends EntitySectionBaseComponent {
  iconTemplate;
  utilityService = inject(UtilityService);
  operationRegistry = inject(EntityOperationRegistryService);
  entitiesService = inject(EntitiesService);
  deviceBitmaps = computed(() => {
    const deviceBitmaps = this.entity()?.parameters?.bitmaps;
    if (!isDefined(deviceBitmaps))
      return [];
    return [
      {
        key: "Inputs",
        value: deviceBitmaps?.length > 0 ? deviceBitmaps.map((bitmap) => bitmap.target_input).join(", ") : "None"
      }
    ];
  }, ...ngDevMode ? [{ debugName: "deviceBitmaps" }] : []);
  actions = [
    {
      label: "Cancel",
      action: () => {
        this.showModal = false;
      },
      severity: "secondary"
    },
    {
      label: "Ok",
      action: (formGroup) => {
        if (formGroup.valid) {
          const newBitmap = {
            target_input: formGroup.get("target_input")?.value,
            target_type: formGroup.get("target_type")?.value,
            source_input: formGroup.get("source_input")?.value,
            bitshift: Number(formGroup.get("bitshift")?.value ?? 0),
            bitmask: parseInt((formGroup.get("bitmask")?.value ?? "").startsWith("0x") ? formGroup.get("bitmask")?.value.slice(2) : formGroup.get("bitmask")?.value, 16)
          };
          this.bitmaps = [...this.bitmaps, newBitmap];
          this.showModal = false;
        }
      },
      severity: "primary",
      disabled: (form) => {
        if (isNullOrUndefined(form))
          return true;
        return form.pristine || form.invalid;
      }
    }
  ];
  bitmaps = [];
  showModal = false;
  bitmapTypes = [
    "owner",
    "emergency",
    "administrative",
    "technical",
    "operational",
    "management"
  ];
  constructor() {
    super();
    effect(() => {
      const deviceBitmaps = this.entity()?.parameters?.bitmaps;
      if (deviceBitmaps) {
        this.bitmaps = [...deviceBitmaps];
        untracked(() => {
          this.updateFormFields();
        });
      }
    });
  }
  ngAfterViewInit() {
    super.ngAfterViewInit();
    this.columns = [
      {
        field: "key",
        header: "",
        transform: "uppercase",
        cellTemplate: this.iconTemplate
      },
      { field: "value", header: "" }
    ];
  }
  updateFormFields() {
    this.formFields = [
      createTextField("target_input", "Target Input", "", {
        name: "target_input",
        validations: [
          {
            name: "required",
            validator: Validators.required,
            message: "Target Input is required"
          }
        ]
      }),
      createDropdownField("target_type", "Target Type", enumToSelectOptionValues(DeviceBitmapConfiguration.TargetTypeEnum), "", {
        name: "target_type",
        validations: [
          {
            name: "required",
            validator: Validators.required,
            message: "Target Type is required"
          }
        ],
        props: {
          appendTo: "body"
        }
      }),
      createTextField("source_input", "Source Input", "", {
        name: "source_input",
        validations: [
          {
            name: "required",
            validator: Validators.required,
            message: "Source Input is required"
          }
        ]
      }),
      createNumberField("bitshift", "Bitshift", 0, {
        name: "bitshift",
        validations: [
          {
            name: "required",
            validator: Validators.required,
            message: "Bitshift is required"
          }
        ],
        hint: "Number of bits the source input value will be shifted to the right"
      }),
      createTextField("bitmask", "Bitmask", "0x1", {
        name: "bitmask",
        validations: [
          {
            name: "required",
            validator: Validators.required,
            message: "Bitmask is required"
          }
        ],
        hint: "Bitmask to be applied to the value after shifting, in hex format (i.e. 0x01)"
      })
    ];
  }
  getUpdateMethod() {
    return this.operationRegistry.getOperation("device", "update") ?? ((id, data) => this.entitiesService.updateDevice(id, data));
  }
  onClose() {
    this.showModal = false;
  }
  getBitMapDescription(bitmap) {
    return `(${bitmap.source_input} >> ${(bitmap.bitshift || 0).toString()}) & 0x${(bitmap.bitmask || 1).toString(16)}`;
  }
  addBitmap() {
    this.updateFormFields();
    this.showModal = true;
  }
  removeBitmap(index) {
    this.bitmaps = this.bitmaps.filter((_, i) => i !== index);
  }
  static \u0275fac = function DeviceBitmapSectionComponent_Factory(__ngFactoryType__) {
    return new (__ngFactoryType__ || _DeviceBitmapSectionComponent)();
  };
  static \u0275cmp = /* @__PURE__ */ \u0275\u0275defineComponent({ type: _DeviceBitmapSectionComponent, selectors: [["app-device-bitmap-section"]], viewQuery: function DeviceBitmapSectionComponent_Query(rf, ctx) {
    if (rf & 1) {
      \u0275\u0275viewQuery(_c019, 7);
    }
    if (rf & 2) {
      let _t;
      \u0275\u0275queryRefresh(_t = \u0275\u0275loadQuery()) && (ctx.iconTemplate = _t.first);
    }
  }, features: [\u0275\u0275InheritDefinitionFeature], decls: 17, vars: 12, consts: [[1, "card", "pt-2"], [1, "section-header", "mb-4", "p-2", "flex", "justify-start", "items-center"], [1, "custom-icon-svg", "w-[2.5rem]", "h-[2.5rem]", 3, "ngClass"], [1, "pl-6", "flex-1"], [1, "flex", "justify-between", "items-center"], [1, "text-xl", "font-semibold", "m-0"], [1, "icon-light"], [1, "edit-bitmaps", "p-field", "p-2"], ["tableStyleClass", "info-display !w-auto", 3, "data", "columns", "showGridLines", "hideHeader"], ["header", "Bitmapped IO Properties", 3, "modalClose", "formSubmit", "visible", "fields", "actions", "styleClass"], ["formHeader", ""], [1, "mt-2", "mb-4", "muted"], [1, "pi", "pi-pen-to-square", "action", "hover", "!text-2xl", 3, "click", "keydown.enter"], [1, "flex", "flex-col", "justify-end", "w-full"], [1, "empty-bitmaps", "text-center", "p-4", "text-surface-500"], [1, "grid", "grid-cols-5", "gap-4", "mt-2"], [1, "add-bitmap-button", "text-right", "mt-3", "mb-4"], ["severity", "secondary", "label", "Add", 3, "onClick"], [1, "action-buttons", "flex", "justify-end", "gap-2", "mt-4"], ["type", "button", "label", "Cancel", "severity", "secondary", 3, "onClick"], ["type", "submit", "label", "Save", "severity", "primary", 3, "onClick"], [1, "font-semibold", "mb-2", "col-span-2"], [1, "col-span-3"], ["styleClass", "mb-3", 3, "showHeader"], [1, "flex", "items-center", "justify-between", "mt-4"], [1, "flex", "flex-row", "gap-2", "items-center"], [1, "custom-icon-svg", "w-[1.25rem]", "h-[1.25rem]"], [1, "flex", "flex-col"], [1, "muted"], [1, "icon-light", "col-span-1", "text-right"], [1, "pi", "pi-trash", "action", "hover", "!text-xl", 3, "click", "keydown.enter"]], template: function DeviceBitmapSectionComponent_Template(rf, ctx) {
    if (rf & 1) {
      \u0275\u0275elementStart(0, "div", 0)(1, "div", 1);
      \u0275\u0275namespaceSVG();
      \u0275\u0275elementStart(2, "svg", 2);
      \u0275\u0275element(3, "use");
      \u0275\u0275elementEnd();
      \u0275\u0275namespaceHTML();
      \u0275\u0275elementStart(4, "div", 3)(5, "div", 4)(6, "h2", 5);
      \u0275\u0275text(7, "Bitmapped IO");
      \u0275\u0275elementEnd();
      \u0275\u0275conditionalCreate(8, DeviceBitmapSectionComponent_Conditional_8_Template, 2, 1, "div", 6);
      \u0275\u0275elementEnd();
      \u0275\u0275elementStart(9, "span");
      \u0275\u0275text(10, "You can create new inputs from composite values using I/O bitmaps. Configure these below.");
      \u0275\u0275elementEnd()()();
      \u0275\u0275conditionalCreate(11, DeviceBitmapSectionComponent_Conditional_11_Template, 9, 1, "div", 7);
      \u0275\u0275conditionalCreate(12, DeviceBitmapSectionComponent_Conditional_12_Template, 1, 4, "app-grid", 8);
      \u0275\u0275elementEnd();
      \u0275\u0275elementStart(13, "app-dynamic-form-modal", 9);
      \u0275\u0275listener("modalClose", function DeviceBitmapSectionComponent_Template_app_dynamic_form_modal_modalClose_13_listener() {
        return ctx.onClose();
      })("formSubmit", function DeviceBitmapSectionComponent_Template_app_dynamic_form_modal_formSubmit_13_listener($event) {
        return ctx.onSubmit($event);
      });
      \u0275\u0275elementStart(14, "div", 10)(15, "p", 11);
      \u0275\u0275text(16, " Specify the details for your new bitmapped input. ");
      \u0275\u0275elementEnd()()();
    }
    if (rf & 2) {
      \u0275\u0275advance(2);
      \u0275\u0275property("ngClass", \u0275\u0275pureFunction1(10, _c13, ctx.isFormEditable()));
      \u0275\u0275attribute("aria-label", "square binary icon");
      \u0275\u0275advance();
      \u0275\u0275attribute("href", "assets/sprites/sprite.svg#square-binary-solid");
      \u0275\u0275advance(5);
      \u0275\u0275conditional(!ctx.isFormEditable() ? 8 : -1);
      \u0275\u0275advance(3);
      \u0275\u0275conditional(ctx.isFormEditable() ? 11 : -1);
      \u0275\u0275advance();
      \u0275\u0275conditional(!ctx.isFormEditable() && !ctx.createMode() ? 12 : -1);
      \u0275\u0275advance();
      \u0275\u0275property("visible", ctx.showModal)("fields", ctx.formFields)("actions", ctx.actions)("styleClass", "w-[40rem]");
    }
  }, dependencies: [
    CommonModule,
    NgClass,
    ReactiveFormsModule,
    ButtonModule,
    Button,
    InputTextModule,
    DynamicFormModalComponent,
    DataViewModule,
    PanelModule,
    Panel,
    DividerModule,
    GridComponent
  ], encapsulation: 2 });
};
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(DeviceBitmapSectionComponent, [{
    type: Component,
    args: [{ selector: "app-device-bitmap-section", imports: [
      CommonModule,
      ReactiveFormsModule,
      ButtonModule,
      InputTextModule,
      DynamicFormModalComponent,
      DataViewModule,
      PanelModule,
      DividerModule,
      GridComponent
    ], template: `<div class="card pt-2">
  <!-- Header Section -->
  <div class="section-header mb-4 p-2 flex justify-start items-center">
    <svg
      class="custom-icon-svg w-[2.5rem] h-[2.5rem]"
      [ngClass]="{ 'icon-primary': isFormEditable() }"
      [attr.aria-label]="'square binary icon'"
    >
      <use [attr.href]="'assets/sprites/sprite.svg#square-binary-solid'"></use>
    </svg>

    <div class="pl-6 flex-1">
      <div class="flex justify-between items-center">
        <h2 class="text-xl font-semibold m-0">Bitmapped IO</h2>
        @if (!isFormEditable()) {
          <div class="icon-light">
            <span
              class="pi pi-pen-to-square action hover !text-2xl"
              [attr.aria-label]="'Edit bitmapped IO properties.'"
              (click)="onEdit()"
              (keydown.enter)="onEdit()"
            ></span>
          </div>
        }
      </div>
      <span
        >You can create new inputs from composite values using I/O bitmaps.
        Configure these below.</span
      >
    </div>
  </div>

  <!-- Edit Mode -->
  @if (isFormEditable()) {
    <div class="edit-bitmaps p-field p-2">
      <div class="flex flex-col justify-end w-full">
        <!-- No Bitmaps Placeholder -->
        @if (bitmaps.length === 0) {
          <div class="empty-bitmaps text-center p-4 text-surface-500">
            <p>No bitmaps added yet. Click "Add" to create a bitmap.</p>
          </div>
        } @else {
          <div class="grid grid-cols-5 gap-4 mt-2">
            <span class="font-semibold mb-2 col-span-2">Inputs</span>
            <!-- Bitmaps List -->
            <div class="col-span-3">
              @for (bitmap of bitmaps; track $index) {
                <p-panel styleClass="mb-3" [showHeader]="false">
                  <div class="flex items-center justify-between mt-4">
                    <div class="flex flex-row gap-2 items-center">
                      <svg
                        class="custom-icon-svg w-[1.25rem] h-[1.25rem]"
                        [attr.aria-label]="'square binary icon'"
                      >
                        <use
                          [attr.href]="
                            'assets/sprites/sprite.svg#square-binary-solid'
                          "
                        ></use>
                      </svg>
                      <div class="flex flex-col">
                        <span>{{ bitmap.target_input }}</span>
                        <span class="muted">{{
                          getBitMapDescription(bitmap)
                        }}</span>
                      </div>
                    </div>
                    <div class="icon-light col-span-1 text-right">
                      <span
                        class="pi pi-trash action hover !text-xl"
                        [attr.aria-label]="'Delete Bitmap'"
                        (click)="removeBitmap($index)"
                        (keydown.enter)="removeBitmap($index)"
                      ></span>
                    </div>
                  </div>
                </p-panel>
              }
            </div>
          </div>
        }

        <!-- Add Button -->
        <div class="add-bitmap-button text-right mt-3 mb-4">
          <p-button (onClick)="addBitmap()" severity="secondary" label="Add" />
        </div>

        <!-- Action Buttons -->
        <div class="action-buttons flex justify-end gap-2 mt-4">
          <p-button
            type="button"
            label="Cancel"
            severity="secondary"
            (onClick)="isFormEditable.set(false)"
          />

          <p-button
            type="submit"
            label="Save"
            severity="primary"
            (onClick)="
              submitChanges({
                bitmaps: bitmaps,
              })
            "
          />
        </div>
      </div>
    </div>
  }
  <!-- View Mode -->

  @if (!isFormEditable() && !createMode()) {
    <app-grid
      [data]="deviceBitmaps()"
      [columns]="columns"
      [showGridLines]="false"
      [hideHeader]="true"
      tableStyleClass="info-display !w-auto"
    ></app-grid>
  }
</div>

<!-- Add/Edit Bitmap Modal -->
<app-dynamic-form-modal
  [visible]="showModal"
  header="Bitmapped IO Properties"
  [fields]="formFields"
  [actions]="actions"
  [styleClass]="'w-[40rem]'"
  (modalClose)="onClose()"
  (formSubmit)="onSubmit($event)"
>
  <div formHeader>
    <p class="mt-2 mb-4 muted">
      Specify the details for your new bitmapped input.
    </p>
  </div>
</app-dynamic-form-modal>
` }]
  }], () => [], { iconTemplate: [{
    type: ViewChild,
    args: ["iconTemplate", { static: true }]
  }] });
})();
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && \u0275setClassDebugInfo(DeviceBitmapSectionComponent, { className: "DeviceBitmapSectionComponent", filePath: "src/app/features/administration/components/device/device-bitmap-section/device-bitmap-section.component.ts", lineNumber: 61 });
})();

// src/app/features/administration/components/device/device-io-section/device-io-section.component.ts
var _c020 = (a0) => ({ "icon-primary": a0 });
var _c14 = (a0) => ({ "text-primary": a0 });
var _c22 = (a0, a1) => ({ "text-primary": a0, "text-surface-300": a1 });
var _forTrack03 = ($index, $item) => $item.id;
function DeviceIOSectionComponent_Conditional_2_Template(rf, ctx) {
  if (rf & 1) {
    \u0275\u0275namespaceSVG();
    \u0275\u0275elementStart(0, "svg", 2);
    \u0275\u0275element(1, "use");
    \u0275\u0275elementEnd();
  }
  if (rf & 2) {
    const ctx_r0 = \u0275\u0275nextContext();
    \u0275\u0275property("ngClass", \u0275\u0275pureFunction1(3, _c020, ctx_r0.isFormEditable()));
    \u0275\u0275attribute("aria-label", "input/output icon");
    \u0275\u0275advance();
    \u0275\u0275attribute("href", "assets/sprites/sprite.svg#" + ctx_r0.iconName());
  }
}
function DeviceIOSectionComponent_Conditional_3_Template(rf, ctx) {
  if (rf & 1) {
    \u0275\u0275element(0, "i", 11);
  }
  if (rf & 2) {
    const ctx_r0 = \u0275\u0275nextContext();
    \u0275\u0275classMap(ctx_r0.iconName() + " !text-[2.5rem]");
    \u0275\u0275property("ngClass", \u0275\u0275pureFunction1(4, _c14, ctx_r0.isFormEditable()));
    \u0275\u0275attribute("aria-label", "input/output icon");
  }
}
function DeviceIOSectionComponent_Conditional_8_Template(rf, ctx) {
  if (rf & 1) {
    const _r2 = \u0275\u0275getCurrentView();
    \u0275\u0275elementStart(0, "div", 7)(1, "span", 12);
    \u0275\u0275listener("click", function DeviceIOSectionComponent_Conditional_8_Template_span_click_1_listener() {
      \u0275\u0275restoreView(_r2);
      const ctx_r0 = \u0275\u0275nextContext();
      return \u0275\u0275resetView(ctx_r0.onEdit());
    })("keydown.enter", function DeviceIOSectionComponent_Conditional_8_Template_span_keydown_enter_1_listener() {
      \u0275\u0275restoreView(_r2);
      const ctx_r0 = \u0275\u0275nextContext();
      return \u0275\u0275resetView(ctx_r0.onEdit());
    });
    \u0275\u0275elementEnd()();
  }
  if (rf & 2) {
    const ctx_r0 = \u0275\u0275nextContext();
    \u0275\u0275advance();
    \u0275\u0275attribute("aria-label", "Edit " + ctx_r0.getDisplayName(ctx_r0.ioType()));
  }
}
function DeviceIOSectionComponent_Conditional_11_For_3_Template(rf, ctx) {
  if (rf & 1) {
    const _r4 = \u0275\u0275getCurrentView();
    \u0275\u0275elementStart(0, "div", 14)(1, "span", 18);
    \u0275\u0275text(2);
    \u0275\u0275elementEnd();
    \u0275\u0275elementStart(3, "div", 19)(4, "p-select", 20);
    \u0275\u0275listener("onChange", function DeviceIOSectionComponent_Conditional_11_For_3_Template_p_select_onChange_4_listener($event) {
      const type_r5 = \u0275\u0275restoreView(_r4).$implicit;
      const ctx_r0 = \u0275\u0275nextContext(2);
      return \u0275\u0275resetView(ctx_r0.handleConfigChange($event, type_r5.id || "", type_r5.name, type_r5.unit));
    });
    \u0275\u0275elementEnd();
    \u0275\u0275elementStart(5, "button", 21);
    \u0275\u0275listener("click", function DeviceIOSectionComponent_Conditional_11_For_3_Template_button_click_5_listener() {
      let tmp_12_0;
      const type_r5 = \u0275\u0275restoreView(_r4).$implicit;
      const ctx_r0 = \u0275\u0275nextContext(2);
      return \u0275\u0275resetView(ctx_r0.openCalibrationModal(type_r5.id, (tmp_12_0 = ctx_r0.ioValues()[ctx_r0.ioType()]) == null ? null : tmp_12_0[type_r5.id || ""], type_r5.name, type_r5.unit));
    });
    \u0275\u0275element(6, "i", 22);
    \u0275\u0275elementEnd()()();
  }
  if (rf & 2) {
    let tmp_15_0;
    let tmp_17_0;
    const type_r5 = ctx.$implicit;
    const ctx_r0 = \u0275\u0275nextContext(2);
    \u0275\u0275advance(2);
    \u0275\u0275textInterpolate(type_r5.name);
    \u0275\u0275advance(2);
    \u0275\u0275property("options", ctx_r0.getLookupValues(type_r5.id || ""))("ngModel", ctx_r0.getSelectedConfigOption(type_r5.id || ""))("appendTo", "body");
    \u0275\u0275advance();
    \u0275\u0275property("disabled", !((tmp_15_0 = ctx_r0.ioValues()[ctx_r0.ioType()]) == null ? null : tmp_15_0[type_r5.id || ""]));
    \u0275\u0275attribute("aria-label", "Configure " + type_r5.name);
    \u0275\u0275advance();
    \u0275\u0275property("ngClass", \u0275\u0275pureFunction2(7, _c22, (tmp_17_0 = ctx_r0.ioValues()[ctx_r0.ioType()]) == null ? null : tmp_17_0[type_r5.id || ""], !((tmp_17_0 = ctx_r0.ioValues()[ctx_r0.ioType()]) == null ? null : tmp_17_0[type_r5.id || ""])));
  }
}
function DeviceIOSectionComponent_Conditional_11_Template(rf, ctx) {
  if (rf & 1) {
    const _r3 = \u0275\u0275getCurrentView();
    \u0275\u0275elementStart(0, "div", 8)(1, "div", 13);
    \u0275\u0275repeaterCreate(2, DeviceIOSectionComponent_Conditional_11_For_3_Template, 7, 10, "div", 14, _forTrack03);
    \u0275\u0275elementStart(4, "div", 15)(5, "p-button", 16);
    \u0275\u0275listener("onClick", function DeviceIOSectionComponent_Conditional_11_Template_p_button_onClick_5_listener() {
      \u0275\u0275restoreView(_r3);
      const ctx_r0 = \u0275\u0275nextContext();
      return \u0275\u0275resetView(ctx_r0.cancelIoEdit());
    });
    \u0275\u0275elementEnd();
    \u0275\u0275elementStart(6, "p-button", 17);
    \u0275\u0275listener("onClick", function DeviceIOSectionComponent_Conditional_11_Template_p_button_onClick_6_listener() {
      \u0275\u0275restoreView(_r3);
      const ctx_r0 = \u0275\u0275nextContext();
      return \u0275\u0275resetView(ctx_r0.saveIOChanges());
    });
    \u0275\u0275elementEnd()()()();
  }
  if (rf & 2) {
    const ctx_r0 = \u0275\u0275nextContext();
    \u0275\u0275advance(2);
    \u0275\u0275repeater(ctx_r0.filteredIoTypes());
    \u0275\u0275advance(4);
    \u0275\u0275property("loading", ctx_r0.isSubmitting());
  }
}
function DeviceIOSectionComponent_Conditional_12_Template(rf, ctx) {
  if (rf & 1) {
    \u0275\u0275element(0, "app-grid", 9);
  }
  if (rf & 2) {
    const ctx_r0 = \u0275\u0275nextContext();
    \u0275\u0275property("data", ctx_r0.ioSummary())("columns", ctx_r0.columns)("showGridLines", false)("hideHeader", true);
  }
}
function DeviceIOSectionComponent_Conditional_13_Template(rf, ctx) {
  if (rf & 1) {
    const _r6 = \u0275\u0275getCurrentView();
    \u0275\u0275elementStart(0, "app-dynamic-form-modal", 23);
    \u0275\u0275listener("modalClose", function DeviceIOSectionComponent_Conditional_13_Template_app_dynamic_form_modal_modalClose_0_listener() {
      \u0275\u0275restoreView(_r6);
      const ctx_r0 = \u0275\u0275nextContext();
      return \u0275\u0275resetView(ctx_r0.showModal.set(false));
    });
    \u0275\u0275elementStart(1, "div", 24)(2, "p", 25);
    \u0275\u0275text(3, " Configure calibration settings for your IO ");
    \u0275\u0275elementEnd()()();
  }
  if (rf & 2) {
    const ctx_r0 = \u0275\u0275nextContext();
    \u0275\u0275property("header", (ctx_r0.selectedInputName() || "Input") + " calibration")("fields", ctx_r0.formFields)("actions", ctx_r0.actions)("styleClass", "w-[40rem]")("visible", ctx_r0.showModal());
  }
}
var DeviceIOSectionComponent = class _DeviceIOSectionComponent extends EntitySectionBaseComponent {
  ioType = input.required(...ngDevMode ? [{ debugName: "ioType" }] : []);
  deviceType = input.required(...ngDevMode ? [{ debugName: "deviceType" }] : []);
  ioTypes = input.required(...ngDevMode ? [{ debugName: "ioTypes" }] : []);
  iconType = input.required(...ngDevMode ? [{ debugName: "iconType" }] : []);
  iconName = input.required(...ngDevMode ? [{ debugName: "iconName" }] : []);
  utilityService = inject(UtilityService);
  entitiesService = inject(EntitiesService);
  operationRegistry = inject(EntityOperationRegistryService);
  apiSchemaService = inject(ApiSchemaService);
  // Modal-related signals
  selectedInputName = signal(null, ...ngDevMode ? [{ debugName: "selectedInputName" }] : []);
  selectedInputId = signal("", ...ngDevMode ? [{ debugName: "selectedInputId" }] : []);
  selectedInputUnit = signal(void 0, ...ngDevMode ? [{ debugName: "selectedInputUnit" }] : []);
  calibrationData = signal(null, ...ngDevMode ? [{ debugName: "calibrationData" }] : []);
  showModal = signal(false, ...ngDevMode ? [{ debugName: "showModal" }] : []);
  // Track the original input ID when creating custom calibrations
  originalInputIdForCustom = signal("", ...ngDevMode ? [{ debugName: "originalInputIdForCustom" }] : []);
  // Device-related signals
  ioValues = signal({}, ...ngDevMode ? [{ debugName: "ioValues" }] : []);
  // IO type mapping
  ioTypeMap = IO_TYPE_MAP;
  // Modal actions
  actions = [
    {
      label: "Cancel",
      action: () => {
        this.showModal.set(false);
      },
      severity: "secondary"
    },
    {
      label: "Ok",
      action: (formGroup) => {
        if (formGroup.valid) {
          this.applyCalibration(formGroup);
        }
      },
      severity: "primary",
      disabled: (form) => isNullOrUndefined(form)
    }
  ];
  // Summary of I/O configuration for view mode
  ioSummary = computed(() => formatIoSummary(this.filteredIoTypes(), this.ioValues(), this.ioType()), ...ngDevMode ? [{ debugName: "ioSummary" }] : []);
  filteredIoTypes = computed(() => {
    const currentIoType = this.ioType();
    return this.ioTypes().filter((x) => {
      const typeValue = this.apiSchemaService.getEntityType(x, "iotype");
      return x.state === "active" && typeValue === currentIoType;
    }).sort((a, b) => (a.name ?? "").localeCompare(b.name ?? ""));
  }, ...ngDevMode ? [{ debugName: "filteredIoTypes" }] : []);
  getDisplayName = (ioType) => getIoTypeDisplayName(ioType, this.ioTypeMap);
  originalIoValues = null;
  constructor() {
    super();
    this.columns = [
      { field: "key", header: "Mode", transform: "uppercase" },
      { field: "value", header: "Configuration" }
    ];
    effect(() => {
      const device = this.entity();
      if (device) {
        this.ioValues.set(JSON.parse(JSON.stringify(updateIOValues(device))));
      }
    });
  }
  getUpdateMethod() {
    return this.operationRegistry.getOperation("device", "update") ?? ((id, data) => this.entitiesService.updateDevice(id, data));
  }
  transformFormData(formData) {
    const result = {};
    if (this.injectDataAtPath()) {
      setNestedProperty(result, this.dataPath(), formData);
    } else {
      Object.assign(result, formData);
    }
    return result;
  }
  getSelectedConfigOption(inputId) {
    const currentIoType = this.ioType();
    if (isNullOrUndefined(currentIoType)) {
      return "none";
    }
    const ioConfig = this.ioValues()[currentIoType]?.[inputId];
    if (isDefined(ioConfig)) {
      return ioConfig.input ?? inputId;
    }
    const device = this.entity();
    const defaultValue = device?.parameters?.["default_inputs"]?.[currentIoType]?.[inputId];
    if (isDefined(defaultValue)) {
      return defaultValue;
    }
    return "none";
  }
  // #region Modal related methods
  updateFormFields() {
    const calibration = this.calibrationData();
    const currentIoType = this.ioType();
    if (!calibration)
      return;
    this.formFields = generateFormFields(currentIoType, calibration, this.deviceType(), this.selectedInputUnit());
  }
  openCalibrationModal(inputId, currentValue, typeName, unit) {
    const currentIoType = this.ioType();
    if (isNullOrUndefined(currentIoType)) {
      return;
    }
    this.selectedInputName.set(typeName ?? "");
    this.selectedInputId.set(inputId);
    this.selectedInputUnit.set(unit ?? void 0);
    const isCustomInput = inputId === "_custom_";
    let calibrationData = currentValue;
    if (isNullOrUndefined(calibrationData)) {
      calibrationData = getDefaultCalibration(currentIoType);
    }
    if (isCustomInput) {
      calibrationData.input = "";
    } else {
      calibrationData.input = calibrationData.input ?? inputId;
    }
    this.calibrationData.set(calibrationData);
    this.updateFormFields();
    this.showModal.set(true);
  }
  applyCalibration(formGroup) {
    const currentIoType = this.ioType();
    const selectedInputId = this.selectedInputId();
    if (isNullOrUndefined(selectedInputId))
      return;
    const newInputName = formGroup.get("input")?.value;
    const isCustomInput = selectedInputId === "_custom_";
    if (isCustomInput) {
      const actualInputId = this.originalInputIdForCustom();
      const newCalibration = {
        input: newInputName
      };
      addCalibrationParams(newCalibration, currentIoType, formGroup);
      const currentValues = this.ioValues();
      if (isNullOrUndefined(currentValues[currentIoType])) {
        currentValues[currentIoType] = {};
      }
      currentValues[currentIoType][actualInputId] = __spreadValues({}, newCalibration);
      this.ioValues.set(__spreadValues({}, currentValues));
    } else {
      const newCalibration = {
        input: newInputName
      };
      addCalibrationParams(newCalibration, currentIoType, formGroup);
      const currentValues = this.ioValues();
      if (isNullOrUndefined(currentValues[currentIoType])) {
        currentValues[currentIoType] = {};
      }
      if (isDefined(currentValues[currentIoType][selectedInputId])) {
        currentValues[currentIoType][selectedInputId] = __spreadValues(__spreadValues({}, currentValues[currentIoType][selectedInputId]), newCalibration);
      } else {
        currentValues[currentIoType][selectedInputId] = newCalibration;
      }
      this.ioValues.set(__spreadValues({}, currentValues));
    }
    this.showModal.set(false);
  }
  //#endregion
  //#region  State management methods
  async onEdit() {
    await super.onEdit();
    this.originalIoValues = JSON.parse(JSON.stringify(this.ioValues()));
  }
  cancelIoEdit() {
    if (this.originalIoValues) {
      this.ioValues.set(__spreadValues({}, this.originalIoValues));
    }
    this.clearUnsavedChanges();
    this.isFormEditable.set(false);
  }
  getIoChanges() {
    return calculateIoChanges(this.ioValues(), this.originalIoValues);
  }
  saveIOChanges() {
    const changes = this.getIoChanges();
    this.submitChanges({ parameters: { io: changes } });
  }
  //#endregion
  //#region IO related methods
  handleConfigChange(event, inputId, typeName, unit) {
    const selectedValue = event.value;
    const currentIoType = this.ioType();
    if (isNullOrUndefined(currentIoType)) {
      return;
    }
    if (selectedValue === "none") {
      this.ioValues.set(clearIOConfiguration(this.ioValues(), this.ioType(), inputId));
      return;
    }
    if (selectedValue === "_custom_") {
      this.originalInputIdForCustom.set(inputId);
      this.openCalibrationModal("_custom_", null, typeName, unit);
      return;
    }
    this.handleInputSelection(selectedValue, inputId, typeName, unit, currentIoType);
  }
  handleInputSelection(selectedValue, inputId, typeName, unit, currentIoType) {
    const currentValues = this.ioValues();
    const existingCustomConfig = this.findCustomConfigForValue(selectedValue, inputId, currentIoType);
    const isCustomCalibration = isDefined(existingCustomConfig);
    let currentConfig = currentValues[currentIoType]?.[inputId];
    if (isNullOrUndefined(currentConfig)) {
      currentConfig = getDefaultCalibration(currentIoType);
      currentConfig.input = selectedValue;
      if (isNullOrUndefined(currentValues[currentIoType])) {
        currentValues[currentIoType] = {};
      }
      currentValues[currentIoType][inputId] = currentConfig;
    } else if (currentConfig.input !== selectedValue) {
      if (isCustomCalibration && isDefined(existingCustomConfig)) {
        currentConfig = __spreadValues({}, existingCustomConfig);
      } else {
        currentConfig.input = selectedValue;
      }
      currentValues[currentIoType][inputId] = __spreadValues({}, currentConfig);
    }
    this.ioValues.set(__spreadValues({}, currentValues));
    if (!isCustomCalibration && selectedValue !== inputId) {
      this.openCalibrationModal(inputId, currentConfig, typeName, unit);
    }
  }
  findCustomConfigForValue(selectedValue, inputId, currentIoType) {
    const currentValues = this.ioValues();
    const currentTypeValues = currentValues[currentIoType];
    if (!isDefined(currentTypeValues)) {
      return null;
    }
    for (const key of Object.keys(currentTypeValues)) {
      if (key.startsWith("custom_") && key.endsWith(`_${inputId}`)) {
        const calibration = currentTypeValues[key];
        if (calibration?.input === selectedValue) {
          return calibration;
        }
      }
    }
    return null;
  }
  getLookupValues(inputId) {
    const deviceType = this.deviceType();
    const currentIoType = this.ioType();
    const device = this.entity();
    if (isNullOrUndefined(currentIoType) || !deviceType || !device) {
      return [{ label: "None", value: "none" }];
    }
    const inputs = getDeviceIOWhitelist(deviceType, device, currentIoType, inputId);
    const inputSpecificCustomInputs = [];
    if (isDefined(inputId)) {
      const ioValues = this.ioValues();
      const currentTypeValues = ioValues[currentIoType];
      if (isDefined(currentTypeValues)) {
        Object.keys(currentTypeValues).forEach((key) => {
          if (key === inputId) {
            const calibration = currentTypeValues[key];
            if (isDefined(calibration?.input) && !inputSpecificCustomInputs.includes(calibration.input)) {
              inputSpecificCustomInputs.push(calibration.input);
            }
          }
        });
      }
    }
    const allCustomInputs = [...inputSpecificCustomInputs];
    return [
      { label: "None", value: "none" },
      ...inputs.map((key) => ({ label: key, value: key })).sort((a, b) => a.label.localeCompare(b.label)),
      ...allCustomInputs.filter((x) => !inputs.includes(x)).map((key) => ({ label: key, value: key })),
      { label: "Custom...", value: "_custom_" }
    ];
  }
  getIoKeys(deviceType) {
    if (!deviceType)
      return [];
    const currentIoType = this.ioType();
    const device = this.entity();
    return getIoKeys(deviceType, device, true, [currentIoType]);
  }
  static \u0275fac = function DeviceIOSectionComponent_Factory(__ngFactoryType__) {
    return new (__ngFactoryType__ || _DeviceIOSectionComponent)();
  };
  static \u0275cmp = /* @__PURE__ */ \u0275\u0275defineComponent({ type: _DeviceIOSectionComponent, selectors: [["app-device-io-section"]], inputs: { ioType: [1, "ioType"], deviceType: [1, "deviceType"], ioTypes: [1, "ioTypes"], iconType: [1, "iconType"], iconName: [1, "iconName"] }, features: [\u0275\u0275InheritDefinitionFeature], decls: 14, vars: 7, consts: [[1, "card", "pt-2"], [1, "section-header", "mb-4", "p-2", "flex", "justify-start", "items-center"], [1, "custom-icon-svg", "w-[2.5rem]", "h-[2.5rem]", 3, "ngClass"], [3, "class", "ngClass"], [1, "pl-6", "flex-1"], [1, "flex", "justify-between", "items-center"], [1, "text-xl", "font-semibold", "m-0"], [1, "icon-light"], [1, "io-config", "p-field", "p-2"], ["tableStyleClass", "info-display !w-auto", 3, "data", "columns", "showGridLines", "hideHeader"], [3, "header", "fields", "actions", "styleClass", "visible"], [3, "ngClass"], [1, "pi", "pi-pen-to-square", "action", "hover", "!text-2xl", 3, "click", "keydown.enter"], [1, "flex", "flex-col", "justify-end", "w-full"], [1, "p-field", "flex", "align-items-center", "gap-2", "mb-3"], [1, "action-buttons", "flex", "justify-end", "gap-2", "mt-4"], ["type", "button", "label", "Cancel", "severity", "secondary", 3, "onClick"], ["type", "submit", "label", "Save", "severity", "primary", 3, "onClick", "loading"], [1, "form-label", "p-2", "flex-shrink-0", "w-1/3"], [1, "flex", "flex-row", "w-full", "flex-grow-1"], ["styleClass", "w-full", "placeholder", "Select configuration", 3, "onChange", "options", "ngModel", "appendTo"], ["type", "button", 1, "ml-2", "p-2", "flex", "items-center", "justify-center", "rounded-md", "hover:bg-surface-100", 3, "click", "disabled"], [1, "pi", "pi-cog", 3, "ngClass"], [3, "modalClose", "header", "fields", "actions", "styleClass", "visible"], ["formHeader", ""], [1, "mt-2", "mb-4", "text-surface-600"]], template: function DeviceIOSectionComponent_Template(rf, ctx) {
    if (rf & 1) {
      \u0275\u0275elementStart(0, "div", 0)(1, "div", 1);
      \u0275\u0275conditionalCreate(2, DeviceIOSectionComponent_Conditional_2_Template, 2, 5, ":svg:svg", 2)(3, DeviceIOSectionComponent_Conditional_3_Template, 1, 6, "i", 3);
      \u0275\u0275elementStart(4, "div", 4)(5, "div", 5)(6, "h2", 6);
      \u0275\u0275text(7);
      \u0275\u0275elementEnd();
      \u0275\u0275conditionalCreate(8, DeviceIOSectionComponent_Conditional_8_Template, 2, 1, "div", 7);
      \u0275\u0275elementEnd();
      \u0275\u0275elementStart(9, "span");
      \u0275\u0275text(10);
      \u0275\u0275elementEnd()()();
      \u0275\u0275conditionalCreate(11, DeviceIOSectionComponent_Conditional_11_Template, 7, 1, "div", 8);
      \u0275\u0275conditionalCreate(12, DeviceIOSectionComponent_Conditional_12_Template, 1, 4, "app-grid", 9);
      \u0275\u0275elementEnd();
      \u0275\u0275conditionalCreate(13, DeviceIOSectionComponent_Conditional_13_Template, 4, 5, "app-dynamic-form-modal", 10);
    }
    if (rf & 2) {
      \u0275\u0275advance(2);
      \u0275\u0275conditional(ctx.iconType() === "svg" ? 2 : 3);
      \u0275\u0275advance(5);
      \u0275\u0275textInterpolate1(" ", ctx.getDisplayName(ctx.ioType()), " ");
      \u0275\u0275advance();
      \u0275\u0275conditional(!ctx.isFormEditable() ? 8 : -1);
      \u0275\u0275advance(2);
      \u0275\u0275textInterpolate1("Configure ", ctx.getDisplayName(ctx.ioType()).toLowerCase(), " with calibration settings");
      \u0275\u0275advance();
      \u0275\u0275conditional(ctx.isFormEditable() ? 11 : -1);
      \u0275\u0275advance();
      \u0275\u0275conditional(!ctx.isFormEditable() && !ctx.createMode() ? 12 : -1);
      \u0275\u0275advance();
      \u0275\u0275conditional(ctx.showModal() ? 13 : -1);
    }
  }, dependencies: [
    CommonModule,
    NgClass,
    ReactiveFormsModule,
    NgControlStatus,
    ButtonModule,
    Button,
    InputTextModule,
    PanelModule,
    DynamicFormModalComponent,
    GridComponent,
    FormsModule,
    NgModel,
    SelectModule,
    Select
  ], styles: ["\n\n.io-calibration-summary[_ngcontent-%COMP%] {\n  display: flex;\n  flex-wrap: wrap;\n  gap: 0.5rem;\n}\n.io-calibration-summary[_ngcontent-%COMP%]   span[_ngcontent-%COMP%] {\n  background-color: var(--surface-100);\n  padding: 0.25rem 0.5rem;\n  border-radius: 4px;\n}\n.io-actions[_ngcontent-%COMP%] {\n  display: flex;\n  align-items: center;\n}\n.io-actions[_ngcontent-%COMP%]   .action[_ngcontent-%COMP%] {\n  cursor: pointer;\n  color: var(--primary-color);\n  transition: color 0.2s;\n}\n.io-actions[_ngcontent-%COMP%]   .action[_ngcontent-%COMP%]:hover {\n  color: var(--primary-600);\n}\n[_nghost-%COMP%]     .p-tabview .p-tabview-nav li.p-highlight .p-tabview-nav-link {\n  border-color: var(--primary-color);\n  color: var(--primary-color);\n}\n[_nghost-%COMP%]     .p-panel .p-panel-header {\n  padding: 0.75rem 1.25rem;\n  background-color: var(--surface-50);\n}\n[_nghost-%COMP%]     .p-panel .p-panel-content {\n  padding: 1rem 1.25rem;\n}\n/*# sourceMappingURL=device-io-section.component.css.map */"] });
};
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(DeviceIOSectionComponent, [{
    type: Component,
    args: [{ selector: "app-device-io-section", imports: [
      CommonModule,
      ReactiveFormsModule,
      ButtonModule,
      InputTextModule,
      PanelModule,
      DynamicFormModalComponent,
      GridComponent,
      FormsModule,
      SelectModule
    ], template: `<div class="card pt-2">
  <!-- Header Section -->
  <div class="section-header mb-4 p-2 flex justify-start items-center">
    @if (iconType() === 'svg') {
      <svg
        class="custom-icon-svg w-[2.5rem] h-[2.5rem]"
        [ngClass]="{ 'icon-primary': isFormEditable() }"
        [attr.aria-label]="'input/output icon'"
      >
        <use [attr.href]="'assets/sprites/sprite.svg#' + iconName()"></use>
      </svg>
    } @else {
      <i
        [class]="iconName() + ' !text-[2.5rem]'"
        [ngClass]="{ 'text-primary': isFormEditable() }"
        [attr.aria-label]="'input/output icon'"
      ></i>
    }

    <div class="pl-6 flex-1">
      <div class="flex justify-between items-center">
        <h2 class="text-xl font-semibold m-0">
          {{ getDisplayName(ioType()) }}
        </h2>
        @if (!isFormEditable()) {
          <div class="icon-light">
            <span
              class="pi pi-pen-to-square action hover !text-2xl"
              [attr.aria-label]="'Edit ' + getDisplayName(ioType())"
              (click)="onEdit()"
              (keydown.enter)="onEdit()"
            ></span>
          </div>
        }
      </div>
      <span
        >Configure {{ getDisplayName(ioType()).toLowerCase() }} with calibration
        settings</span
      >
    </div>
  </div>

  <!-- Edit Mode -->
  @if (isFormEditable()) {
    <div class="io-config p-field p-2">
      <div class="flex flex-col justify-end w-full">
        <!-- Inputs List -->
        @for (type of filteredIoTypes(); track type.id) {
          <div class="p-field flex align-items-center gap-2 mb-3">
            <span class="form-label p-2 flex-shrink-0 w-1/3">{{
              type.name
            }}</span>
            <div class="flex flex-row w-full flex-grow-1">
              <p-select
                [options]="getLookupValues(type.id || '')"
                [ngModel]="getSelectedConfigOption(type.id || '')"
                (onChange)="
                  handleConfigChange(
                    $event,
                    type.id || '',
                    type.name,
                    type.unit
                  )
                "
                styleClass="w-full"
                [appendTo]="'body'"
                placeholder="Select configuration"
              ></p-select>

              <button
                type="button"
                class="ml-2 p-2 flex items-center justify-center rounded-md hover:bg-surface-100"
                [attr.aria-label]="'Configure ' + type.name"
                (click)="
                  openCalibrationModal(
                    type.id,
                    ioValues()[ioType()]?.[type.id || ''],
                    type.name,
                    type.unit
                  )
                "
                [disabled]="!ioValues()[ioType()]?.[type.id || '']"
              >
                <i
                  class="pi pi-cog"
                  [ngClass]="{
                    'text-primary': ioValues()[ioType()]?.[type.id || ''],
                    'text-surface-300': !ioValues()[ioType()]?.[type.id || ''],
                  }"
                ></i>
              </button>
            </div>
          </div>
        }

        <!-- Action Buttons -->
        <div class="action-buttons flex justify-end gap-2 mt-4">
          <p-button
            type="button"
            label="Cancel"
            severity="secondary"
            (onClick)="cancelIoEdit()"
          />

          <p-button
            type="submit"
            label="Save"
            severity="primary"
            [loading]="isSubmitting()"
            (onClick)="saveIOChanges()"
          />
        </div>
      </div>
    </div>
  }

  <!-- View Mode -->
  @if (!isFormEditable() && !createMode()) {
    <app-grid
      [data]="ioSummary()"
      [columns]="columns"
      [showGridLines]="false"
      [hideHeader]="true"
      tableStyleClass="info-display !w-auto"
    ></app-grid>
  }
</div>

<!-- Calibration Modal -->
@if (showModal()) {
  <app-dynamic-form-modal
    [header]="(selectedInputName() || 'Input') + ' calibration'"
    [fields]="formFields"
    [actions]="actions"
    [styleClass]="'w-[40rem]'"
    [visible]="showModal()"
    (modalClose)="showModal.set(false)"
  >
    <div formHeader>
      <p class="mt-2 mb-4 text-surface-600">
        Configure calibration settings for your IO
      </p>
    </div>
  </app-dynamic-form-modal>
}
`, styles: ["/* src/app/features/administration/components/device/device-io-section/device-io-section.component.scss */\n.io-calibration-summary {\n  display: flex;\n  flex-wrap: wrap;\n  gap: 0.5rem;\n}\n.io-calibration-summary span {\n  background-color: var(--surface-100);\n  padding: 0.25rem 0.5rem;\n  border-radius: 4px;\n}\n.io-actions {\n  display: flex;\n  align-items: center;\n}\n.io-actions .action {\n  cursor: pointer;\n  color: var(--primary-color);\n  transition: color 0.2s;\n}\n.io-actions .action:hover {\n  color: var(--primary-600);\n}\n:host ::ng-deep .p-tabview .p-tabview-nav li.p-highlight .p-tabview-nav-link {\n  border-color: var(--primary-color);\n  color: var(--primary-color);\n}\n:host ::ng-deep .p-panel .p-panel-header {\n  padding: 0.75rem 1.25rem;\n  background-color: var(--surface-50);\n}\n:host ::ng-deep .p-panel .p-panel-content {\n  padding: 1rem 1.25rem;\n}\n/*# sourceMappingURL=device-io-section.component.css.map */\n"] }]
  }], () => [], { ioType: [{ type: Input, args: [{ isSignal: true, alias: "ioType", required: true }] }], deviceType: [{ type: Input, args: [{ isSignal: true, alias: "deviceType", required: true }] }], ioTypes: [{ type: Input, args: [{ isSignal: true, alias: "ioTypes", required: true }] }], iconType: [{ type: Input, args: [{ isSignal: true, alias: "iconType", required: true }] }], iconName: [{ type: Input, args: [{ isSignal: true, alias: "iconName", required: true }] }] });
})();
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && \u0275setClassDebugInfo(DeviceIOSectionComponent, { className: "DeviceIOSectionComponent", filePath: "src/app/features/administration/components/device/device-io-section/device-io-section.component.ts", lineNumber: 72 });
})();

// src/app/features/administration/components/device/device-accessory-section/device-accessory-section.component.ts
var _c021 = (a0) => ({ "icon-primary": a0 });
function DeviceAccessorySectionComponent_Conditional_7_Template(rf, ctx) {
  if (rf & 1) {
    const _r1 = \u0275\u0275getCurrentView();
    \u0275\u0275elementStart(0, "div", 6)(1, "span", 9);
    \u0275\u0275listener("click", function DeviceAccessorySectionComponent_Conditional_7_Template_span_click_1_listener() {
      \u0275\u0275restoreView(_r1);
      const ctx_r1 = \u0275\u0275nextContext();
      return \u0275\u0275resetView(ctx_r1.onEdit());
    })("keydown.enter", function DeviceAccessorySectionComponent_Conditional_7_Template_span_keydown_enter_1_listener() {
      \u0275\u0275restoreView(_r1);
      const ctx_r1 = \u0275\u0275nextContext();
      return \u0275\u0275resetView(ctx_r1.onEdit());
    });
    \u0275\u0275elementEnd()();
  }
  if (rf & 2) {
    \u0275\u0275advance();
    \u0275\u0275attribute("aria-label", "Edit device accessories details");
  }
}
function DeviceAccessorySectionComponent_Conditional_10_Template(rf, ctx) {
  if (rf & 1) {
    const _r3 = \u0275\u0275getCurrentView();
    \u0275\u0275elementStart(0, "app-dynamic-form", 10);
    \u0275\u0275listener("formSubmit", function DeviceAccessorySectionComponent_Conditional_10_Template_app_dynamic_form_formSubmit_0_listener($event) {
      \u0275\u0275restoreView(_r3);
      const ctx_r1 = \u0275\u0275nextContext();
      return \u0275\u0275resetView(ctx_r1.onSubmit($event));
    })("formValidityChange", function DeviceAccessorySectionComponent_Conditional_10_Template_app_dynamic_form_formValidityChange_0_listener($event) {
      \u0275\u0275restoreView(_r3);
      const ctx_r1 = \u0275\u0275nextContext();
      return \u0275\u0275resetView(ctx_r1.onFormValidityChange($event));
    })("formValueChange", function DeviceAccessorySectionComponent_Conditional_10_Template_app_dynamic_form_formValueChange_0_listener($event) {
      \u0275\u0275restoreView(_r3);
      const ctx_r1 = \u0275\u0275nextContext();
      return \u0275\u0275resetView(ctx_r1.onFormValueChange($event));
    });
    \u0275\u0275elementEnd();
  }
  if (rf & 2) {
    const ctx_r1 = \u0275\u0275nextContext();
    \u0275\u0275property("fields", ctx_r1.formFields)("actions", ctx_r1.actions)("hideActions", ctx_r1.createMode());
  }
}
function DeviceAccessorySectionComponent_Conditional_11_Template(rf, ctx) {
  if (rf & 1) {
    \u0275\u0275element(0, "app-grid", 8);
  }
  if (rf & 2) {
    const ctx_r1 = \u0275\u0275nextContext();
    \u0275\u0275property("data", ctx_r1.accessoriesDisplay())("columns", ctx_r1.columns)("showGridLines", false)("hideHeader", true);
  }
}
var DeviceAccessorySectionComponent = class _DeviceAccessorySectionComponent extends EntitySectionBaseComponent {
  sectionHeader = input("Device Accessory Configuration", ...ngDevMode ? [{ debugName: "sectionHeader" }] : []);
  deviceTypeAccessory = input.required(...ngDevMode ? [{ debugName: "deviceTypeAccessory" }] : []);
  accessoryId = input.required(...ngDevMode ? [{ debugName: "accessoryId" }] : []);
  ownerId = input(null, ...ngDevMode ? [{ debugName: "ownerId" }] : []);
  entitiesService = inject(EntitiesService);
  operationRegistry = inject(EntityOperationRegistryService);
  accessoriesDisplay = computed(() => {
    const accessories = this.entity()?.accessories;
    const accessory = accessories?.[this.accessoryId()];
    const subfields = this.parsedSettingsDefinition();
    if (!accessory) {
      return [{ key: "Enabled", value: "No" }];
    }
    return this.mapSettingsToKeyValuePairs(accessory.settings ?? {}, subfields);
  }, ...ngDevMode ? [{ debugName: "accessoriesDisplay" }] : []);
  ngOnInit() {
    this.updateFormFields();
    this.columns = [
      {
        field: "key",
        header: "",
        transform: "uppercase"
      },
      { field: "value", header: "" }
    ];
  }
  mapSettingsToKeyValuePairs(settings, subfields) {
    return Object.entries(settings).map(([key, value]) => {
      const field = subfields.find((field2) => field2.id === key);
      return {
        key: field?.title ?? key,
        value: field ? this.formatFieldValue(value, field) : String(value ?? "N/A")
      };
    });
  }
  formatFieldValue(value, field) {
    if (value === "true")
      return "Yes";
    if (value === "false")
      return "No";
    if (field.type === "combo" && field.values) {
      return field.values.find((v) => v.key === String(value))?.value ?? "N/A";
    }
    return String(value ?? "N/A");
  }
  parsedSettingsDefinition = computed(() => {
    const deviceTypeAccessory = this.deviceTypeAccessory();
    return isDefined(deviceTypeAccessory?.settingsDefinition) ? structuredClone(JSON.parse(deviceTypeAccessory.settingsDefinition))?.fields ?? [] : [];
  }, ...ngDevMode ? [{ debugName: "parsedSettingsDefinition" }] : []);
  updateFormFields() {
    const device = this.entity();
    const deviceTypeAccessory = this.deviceTypeAccessory();
    const subfields = isDefined(deviceTypeAccessory?.settingsDefinition) ? structuredClone(JSON.parse(deviceTypeAccessory.settingsDefinition))?.fields : [];
    const customFields = subfields.map((field) => {
      if (field.type === "combo") {
        return createDropdownField(field.id, field.title, (field.values ?? []).map((value) => ({
          label: value.value,
          value: value.key
        })), device?.accessories?.[this.accessoryId()]?.settings?.[field.id] ?? "", {
          name: field.id,
          validations: field.required ?? false ? [
            {
              name: "required",
              validator: Validators.required,
              message: `${field.title} is required`
            }
          ] : [],
          props: {
            appendTo: "body"
          }
        });
      }
      return createTextField(field.id, field.title, device?.accessories?.[this.accessoryId()]?.settings?.[field.id] ?? "", {
        name: field.id,
        validations: field.required ?? false ? [
          {
            name: "required",
            validator: Validators.required,
            message: `${field.title} is required`
          }
        ] : []
      });
    });
    this.formFields = [
      createDropdownField("enabled", "Enabled", [
        { label: "Yes", value: true },
        { label: "No", value: false }
      ], true, {
        name: "enabled",
        props: {
          appendTo: "body"
        }
      }),
      ...customFields
    ];
  }
  getUpdateMethod() {
    return this.operationRegistry.getOperation("device", "update") ?? ((id, data) => this.entitiesService.updateDevice(id, data));
  }
  static \u0275fac = /* @__PURE__ */ (() => {
    let \u0275DeviceAccessorySectionComponent_BaseFactory;
    return function DeviceAccessorySectionComponent_Factory(__ngFactoryType__) {
      return (\u0275DeviceAccessorySectionComponent_BaseFactory || (\u0275DeviceAccessorySectionComponent_BaseFactory = \u0275\u0275getInheritedFactory(_DeviceAccessorySectionComponent)))(__ngFactoryType__ || _DeviceAccessorySectionComponent);
    };
  })();
  static \u0275cmp = /* @__PURE__ */ \u0275\u0275defineComponent({ type: _DeviceAccessorySectionComponent, selectors: [["app-device-accessory-section"]], inputs: { sectionHeader: [1, "sectionHeader"], deviceTypeAccessory: [1, "deviceTypeAccessory"], accessoryId: [1, "accessoryId"], ownerId: [1, "ownerId"] }, features: [\u0275\u0275InheritDefinitionFeature], decls: 12, vars: 8, consts: [[1, "card", "pt-2"], [1, "mb-4", "p-2", "flex", "justify-start", "items-center"], [1, "pi", "pi-cog", "!text-[2.5rem]", 3, "ngClass"], [1, "pl-6", "flex-1"], [1, "flex", "justify-between", "items-center"], [1, "text-xl", "font-semibold", "m-0"], [1, "icon-light"], [3, "fields", "actions", "hideActions"], ["tableStyleClass", "info-display !w-auto", 3, "data", "columns", "showGridLines", "hideHeader"], [1, "pi", "pi-pen-to-square", "action", "hover", "!text-2xl", 3, "click", "keydown.enter"], [3, "formSubmit", "formValidityChange", "formValueChange", "fields", "actions", "hideActions"]], template: function DeviceAccessorySectionComponent_Template(rf, ctx) {
    if (rf & 1) {
      \u0275\u0275elementStart(0, "div", 0)(1, "div", 1);
      \u0275\u0275element(2, "span", 2);
      \u0275\u0275elementStart(3, "div", 3)(4, "div", 4)(5, "h2", 5);
      \u0275\u0275text(6);
      \u0275\u0275elementEnd();
      \u0275\u0275conditionalCreate(7, DeviceAccessorySectionComponent_Conditional_7_Template, 2, 1, "div", 6);
      \u0275\u0275elementEnd();
      \u0275\u0275elementStart(8, "span");
      \u0275\u0275text(9, "Enable and configure this accessory below.");
      \u0275\u0275elementEnd()()();
      \u0275\u0275conditionalCreate(10, DeviceAccessorySectionComponent_Conditional_10_Template, 1, 3, "app-dynamic-form", 7);
      \u0275\u0275conditionalCreate(11, DeviceAccessorySectionComponent_Conditional_11_Template, 1, 4, "app-grid", 8);
      \u0275\u0275elementEnd();
    }
    if (rf & 2) {
      \u0275\u0275advance(2);
      \u0275\u0275property("ngClass", \u0275\u0275pureFunction1(6, _c021, ctx.isFormEditable()));
      \u0275\u0275attribute("aria-label", "cog icon");
      \u0275\u0275advance(4);
      \u0275\u0275textInterpolate(ctx.sectionHeader());
      \u0275\u0275advance();
      \u0275\u0275conditional(!ctx.isFormEditable() && !ctx.createMode() ? 7 : -1);
      \u0275\u0275advance(3);
      \u0275\u0275conditional(ctx.isFormEditable() || ctx.createMode() && ctx.formFields.length ? 10 : -1);
      \u0275\u0275advance();
      \u0275\u0275conditional(!ctx.isFormEditable() && !ctx.createMode() ? 11 : -1);
    }
  }, dependencies: [CommonModule, NgClass, ButtonModule, GridComponent, DynamicFormComponent], encapsulation: 2 });
};
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(DeviceAccessorySectionComponent, [{
    type: Component,
    args: [{ selector: "app-device-accessory-section", imports: [CommonModule, ButtonModule, GridComponent, DynamicFormComponent], template: `<div class="card pt-2">
  <div class="mb-4 p-2 flex justify-start items-center">
    <span
      class="pi pi-cog !text-[2.5rem]"
      [ngClass]="{ 'icon-primary': isFormEditable() }"
      [attr.aria-label]="'cog icon'"
    ></span>

    <div class="pl-6 flex-1">
      <div class="flex justify-between items-center">
        <h2 class="text-xl font-semibold m-0">{{ sectionHeader() }}</h2>
        @if (!isFormEditable() && !createMode()) {
          <div class="icon-light">
            <span
              class="pi pi-pen-to-square action hover !text-2xl"
              [attr.aria-label]="'Edit device accessories details'"
              (click)="onEdit()"
              (keydown.enter)="onEdit()"
            ></span>
          </div>
        }
      </div>
      <span>Enable and configure this accessory below.</span>
    </div>
  </div>

  @if (isFormEditable() || (createMode() && formFields.length)) {
    <app-dynamic-form
      [fields]="formFields"
      [actions]="actions"
      [hideActions]="createMode()"
      (formSubmit)="onSubmit($event)"
      (formValidityChange)="onFormValidityChange($event)"
      (formValueChange)="onFormValueChange($event)"
    >
    </app-dynamic-form>
  }

  @if (!isFormEditable() && !createMode()) {
    <app-grid
      [data]="accessoriesDisplay()"
      [columns]="columns"
      [showGridLines]="false"
      [hideHeader]="true"
      tableStyleClass="info-display !w-auto"
    ></app-grid>
  }
</div>
` }]
  }], null, { sectionHeader: [{ type: Input, args: [{ isSignal: true, alias: "sectionHeader", required: false }] }], deviceTypeAccessory: [{ type: Input, args: [{ isSignal: true, alias: "deviceTypeAccessory", required: true }] }], accessoryId: [{ type: Input, args: [{ isSignal: true, alias: "accessoryId", required: true }] }], ownerId: [{ type: Input, args: [{ isSignal: true, alias: "ownerId", required: false }] }] });
})();
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && \u0275setClassDebugInfo(DeviceAccessorySectionComponent, { className: "DeviceAccessorySectionComponent", filePath: "src/app/features/administration/components/device/device-accessory-section/device-accessory-section.component.ts", lineNumber: 52 });
})();

// src/app/features/administration/factories/device-config-profiles-config.factory.ts
var DeviceConfigProfileSectionConfigFactory = class _DeviceConfigProfileSectionConfigFactory {
  /**
   * Create sections for device config profile information
   * @param deviceConfigProfile The device config profile object to display in the section
   * @returns An array of AdminDetailSection objects representing the device config profile information sections
   */
  createDeviceConfigProfileInformationSection(deviceConfigProfile, deviceType) {
    return [
      {
        id: "device-config-profile-details",
        title: "Device Config Details",
        component: DeviceConfigProfileDetailsSectionComponent,
        componentInputs: { entity: deviceConfigProfile },
        category: "information",
        order: 10
      },
      {
        id: "device-config-profile-parameters",
        title: "Device Config Parameters",
        component: DeviceParametersSectionComponent,
        componentInputs: {
          entity: deviceConfigProfile,
          entityType: "device-config-profile",
          dataPath: "parameters",
          injectDataAtPath: true,
          deviceType
        },
        category: "information",
        order: 20
      }
    ];
  }
  /**
   * Create sections for device config profile IO
   * @param deviceConfigProfile The device config profile object to display in the section
   * @returns An array of AdminDetailSection objects representing the device config profile IO sections
   */
  createDeviceConfigProfileIOSection(deviceConfigProfile, deviceType, ioTypes) {
    return [
      {
        id: "device-config-profile-io-selection",
        title: "IO Selection",
        component: DeviceIoWhitelistSectionComponent,
        componentInputs: {
          entity: deviceConfigProfile,
          entityType: "device-config-profile",
          dataPath: "parameters",
          injectDataAtPath: true,
          deviceType
        },
        category: "io",
        order: 10
      },
      {
        id: "device-config-profile-bitmapped-io",
        title: "Bitmapped IO",
        component: DeviceBitmapSectionComponent,
        componentInputs: {
          entity: deviceConfigProfile,
          entityType: "device-config-profile",
          dataPath: "parameters.io",
          injectDataAtPath: true
        },
        category: "io",
        order: 20
      },
      {
        id: "device-config-profile-analog-inputs",
        title: "Analog Inputs",
        component: DeviceIOSectionComponent,
        componentInputs: {
          entity: deviceConfigProfile,
          entityType: "device-config-profile",
          dataPath: "parameters.io",
          injectDataAtPath: true,
          ioType: "analog_input",
          iconType: "svg",
          iconName: "gauge-simple-high-solid",
          deviceType,
          ioTypes
        },
        category: "io",
        order: 30
      },
      {
        id: "device-config-profile-camera-inputs",
        title: "Camera Inputs",
        component: DeviceIOSectionComponent,
        componentInputs: {
          entity: deviceConfigProfile,
          entityType: "device-config-profile",
          dataPath: "parameters.io",
          injectDataAtPath: true,
          ioType: "camera_input",
          iconType: "primeng",
          iconName: "pi pi-camera",
          deviceType,
          ioTypes
        },
        category: "io",
        order: 40
      },
      {
        id: "device-config-profile-can-bus-inputs",
        title: "CAN Bus Inputs",
        component: DeviceIOSectionComponent,
        componentInputs: {
          entity: deviceConfigProfile,
          entityType: "device-config-profile",
          dataPath: "parameters.io",
          injectDataAtPath: true,
          ioType: "can_input",
          iconType: "svg",
          iconName: "oil-can-solid",
          deviceType,
          ioTypes
        },
        category: "io",
        order: 50
      },
      {
        id: "device-config-profile-counter-inputs",
        title: "Counter Inputs",
        component: DeviceIOSectionComponent,
        componentInputs: {
          entity: deviceConfigProfile,
          entityType: "device-config-profile",
          dataPath: "parameters.io",
          injectDataAtPath: true,
          ioType: "counter_input",
          iconType: "primeng",
          iconName: "pi pi-clock",
          deviceType,
          ioTypes
        },
        category: "io",
        order: 60
      },
      {
        id: "device-config-profile-digital-inputs",
        title: "Digital Inputs",
        component: DeviceIOSectionComponent,
        componentInputs: {
          entity: deviceConfigProfile,
          entityType: "device-config-profile",
          dataPath: "parameters.io",
          injectDataAtPath: true,
          ioType: "digital_input",
          iconType: "primeng",
          iconName: "pi pi-arrow-left",
          deviceType,
          ioTypes
        },
        category: "io",
        order: 70
      },
      {
        id: "device-config-profile-digital-outputs",
        title: "Digital Outputs",
        component: DeviceIOSectionComponent,
        componentInputs: {
          entity: deviceConfigProfile,
          entityType: "device-config-profile",
          dataPath: "parameters.io",
          injectDataAtPath: true,
          ioType: "digital_output",
          iconType: "primeng",
          iconName: "pi pi-arrow-right",
          deviceType,
          ioTypes
        },
        category: "io",
        order: 80
      },
      {
        id: "device-config-profile-temperature-inputs",
        title: "Temperature Inputs",
        component: DeviceIOSectionComponent,
        componentInputs: {
          entity: deviceConfigProfile,
          entityType: "device-config-profile",
          dataPath: "parameters.io",
          injectDataAtPath: true,
          ioType: "temperature_input",
          iconType: "svg",
          iconName: "temperature-half-solid",
          deviceType,
          ioTypes
        },
        category: "io",
        order: 90
      },
      {
        id: "device-config-profile-value-inputs",
        title: "Value Inputs",
        component: DeviceIOSectionComponent,
        componentInputs: {
          entity: deviceConfigProfile,
          entityType: "device-config-profile",
          dataPath: "parameters.io",
          injectDataAtPath: true,
          ioType: "value_input",
          iconType: "primeng",
          iconName: "pi pi-list-check",
          deviceType,
          ioTypes
        },
        category: "io",
        order: 100
      }
    ];
  }
  createDeviceConfigProfileAccessoriesSection(deviceConfigProfile, deviceTypeAccessories) {
    if (!deviceConfigProfile)
      return [];
    const sections = [];
    Object.entries(deviceConfigProfile?.accessories ?? {}).forEach(([key]) => {
      sections.push({
        id: `device-config-profile-accessory-${key}`,
        title: deviceTypeAccessories?.[key]?.name ?? key,
        component: DeviceAccessorySectionComponent,
        componentInputs: {
          entity: deviceConfigProfile,
          entityType: "device-config-profile",
          dataPath: `accessories.${key}`,
          injectDataAtPath: true,
          deviceTypeAccessory: deviceTypeAccessories?.[key],
          accessoryId: key,
          sectionHeader: deviceTypeAccessories?.[key]?.name ?? key
        },
        category: "accessories",
        order: 10 + Number(key)
      });
    });
    return sections;
  }
  /**
   * Create all deviceConfigProfile sections in one call
   * @param deviceConfigProfile The deviceConfigProfile object to display in the sections
   * @returns An array of AdminDetailSection objects representing all deviceConfigProfile sections
   */
  createAllDeviceConfigProfileSections(deviceConfigProfile, deviceTypeAccessories, deviceType, ioTypes) {
    return [
      ...this.createDeviceConfigProfileInformationSection(deviceConfigProfile, deviceType),
      ...this.createDeviceConfigProfileIOSection(deviceConfigProfile, deviceType, ioTypes),
      ...this.createDeviceConfigProfileAccessoriesSection(deviceConfigProfile, deviceTypeAccessories)
    ];
  }
  static \u0275fac = function DeviceConfigProfileSectionConfigFactory_Factory(__ngFactoryType__) {
    return new (__ngFactoryType__ || _DeviceConfigProfileSectionConfigFactory)();
  };
  static \u0275prov = /* @__PURE__ */ \u0275\u0275defineInjectable({ token: _DeviceConfigProfileSectionConfigFactory, factory: _DeviceConfigProfileSectionConfigFactory.\u0275fac, providedIn: "root" });
};
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(DeviceConfigProfileSectionConfigFactory, [{
    type: Injectable,
    args: [{ providedIn: "root" }]
  }], null, null);
})();

// src/app/features/administration/components/device/device-details-section/device-details-section.component.ts
var _c022 = (a0) => ({ "icon-primary": a0 });
function DeviceDetailsSectionComponent_Conditional_7_Template(rf, ctx) {
  if (rf & 1) {
    const _r1 = \u0275\u0275getCurrentView();
    \u0275\u0275elementStart(0, "div", 6)(1, "span", 9);
    \u0275\u0275listener("click", function DeviceDetailsSectionComponent_Conditional_7_Template_span_click_1_listener() {
      \u0275\u0275restoreView(_r1);
      const ctx_r1 = \u0275\u0275nextContext();
      return \u0275\u0275resetView(ctx_r1.onEdit());
    })("keydown.enter", function DeviceDetailsSectionComponent_Conditional_7_Template_span_keydown_enter_1_listener() {
      \u0275\u0275restoreView(_r1);
      const ctx_r1 = \u0275\u0275nextContext();
      return \u0275\u0275resetView(ctx_r1.onEdit());
    });
    \u0275\u0275elementEnd()();
  }
  if (rf & 2) {
    \u0275\u0275advance();
    \u0275\u0275attribute("aria-label", "Edit device details");
  }
}
function DeviceDetailsSectionComponent_Conditional_10_Template(rf, ctx) {
  if (rf & 1) {
    const _r3 = \u0275\u0275getCurrentView();
    \u0275\u0275elementStart(0, "app-dynamic-form", 10);
    \u0275\u0275listener("formSubmit", function DeviceDetailsSectionComponent_Conditional_10_Template_app_dynamic_form_formSubmit_0_listener($event) {
      \u0275\u0275restoreView(_r3);
      const ctx_r1 = \u0275\u0275nextContext();
      return \u0275\u0275resetView(ctx_r1.onSubmit($event));
    })("formValidityChange", function DeviceDetailsSectionComponent_Conditional_10_Template_app_dynamic_form_formValidityChange_0_listener($event) {
      \u0275\u0275restoreView(_r3);
      const ctx_r1 = \u0275\u0275nextContext();
      return \u0275\u0275resetView(ctx_r1.onFormValidityChange($event));
    })("formValueChange", function DeviceDetailsSectionComponent_Conditional_10_Template_app_dynamic_form_formValueChange_0_listener($event) {
      \u0275\u0275restoreView(_r3);
      const ctx_r1 = \u0275\u0275nextContext();
      return \u0275\u0275resetView(ctx_r1.onFormValueChange($event));
    });
    \u0275\u0275elementEnd();
  }
  if (rf & 2) {
    const ctx_r1 = \u0275\u0275nextContext();
    \u0275\u0275property("fields", ctx_r1.formFields)("actions", ctx_r1.actions)("hideActions", ctx_r1.createMode());
  }
}
function DeviceDetailsSectionComponent_Conditional_11_Template(rf, ctx) {
  if (rf & 1) {
    \u0275\u0275element(0, "app-grid", 8);
  }
  if (rf & 2) {
    const ctx_r1 = \u0275\u0275nextContext();
    \u0275\u0275property("data", ctx_r1.detailsDisplay())("columns", ctx_r1.columns)("showGridLines", false)("hideHeader", true);
  }
}
var DeviceDetailsSectionComponent = class _DeviceDetailsSectionComponent extends EntitySectionBaseComponent {
  sectionHeader = input("Device Details", ...ngDevMode ? [{ debugName: "sectionHeader" }] : []);
  ownerId = input(null, ...ngDevMode ? [{ debugName: "ownerId" }] : []);
  entitiesService = inject(EntitiesService);
  operationRegistry = inject(EntityOperationRegistryService);
  clientDataService = inject(ClientDataService);
  adminState = inject(AdminStateService);
  accountsService = inject(AccountsService);
  cdr = inject(ChangeDetectorRef);
  requestCache = inject(RequestCacheService);
  selectOptionsLoaded = signal(false, ...ngDevMode ? [{ debugName: "selectOptionsLoaded" }] : []);
  route = inject(ActivatedRoute);
  detailsDisplay = computed(() => {
    const details = __spreadValues({}, this.entity());
    if (isNullOrUndefined(details)) {
      return [];
    }
    if (isNullOrUndefined(details.configProfile)) {
      details.configProfile = {
        id: DEFAULT_SYSTEM_ID,
        name: "Manually Configured"
      };
    }
    return [
      {
        key: "Serial Number",
        value: details.name ?? "None"
      },
      {
        key: "Device Type",
        value: details.deviceType?.name ?? "None"
      },
      {
        key: "Configuration",
        value: details.configProfile?.name ?? "None"
      }
    ];
  }, ...ngDevMode ? [{ debugName: "detailsDisplay" }] : []);
  selectOptions = {};
  constructor() {
    super();
    this.columns = [
      { field: "key", header: "", transform: "uppercase" },
      { field: "value", header: "" }
    ];
    effect(() => {
      const selectOptionsLoaded = this.selectOptionsLoaded();
      if (selectOptionsLoaded) {
        untracked(() => {
          this.updateFormFields();
          this.cdr.detectChanges();
        });
      }
    });
  }
  ngOnInit() {
    this.loadSelectOptions();
  }
  loadSelectOptions() {
    const device = this.entity();
    const ownerIdValue = this.ownerId();
    const effectiveOwnerId = device?.owner?.id ?? ownerIdValue;
    if (isNullOrUndefined(effectiveOwnerId)) {
      this.selectOptions = {
        deviceTypes: [],
        deviceProviders: [],
        deviceConfigProfiles: []
      };
      this.selectOptionsLoaded.set(true);
      this.updateFormFields();
      return;
    }
    const cacheTTL = 3e5;
    combineLatest([
      this.requestCache.getOrFetch(`device-types-${effectiveOwnerId}`, () => this.entitiesService.listDeviceTypes(effectiveOwnerId), cacheTTL),
      this.requestCache.getOrFetch(`device-providers-${effectiveOwnerId}-true`, () => this.entitiesService.listDeviceProviders(effectiveOwnerId, true), cacheTTL),
      this.requestCache.getOrFetch(`device-config-profiles-${effectiveOwnerId}-true`, () => this.entitiesService.listDeviceConfigProfiles(effectiveOwnerId, true), cacheTTL),
      defer(() => this.getAvailableRootDeviceTypeIdsForClient().catch(() => []))
    ]).pipe(takeUntilDestroyed(this.destroyRef)).subscribe(([deviceTypes, deviceProviders, deviceConfigProfiles, availableDeviceTypeIds]) => {
      const filteredDeviceTypes = deviceTypes.items.filter((deviceType) => deviceType.state === "active" && isDefined(deviceType.parent) && (deviceType.owner.id === effectiveOwnerId || availableDeviceTypeIds.length === 0 || availableDeviceTypeIds.includes(deviceType.parent.id)));
      this.selectOptions = {
        deviceTypes: filteredDeviceTypes.map((item) => ({
          label: `${item?.parent?.name} - ${item?.name}`,
          value: item.id,
          data: item
        })).sort((a, b) => a.label.localeCompare(b.label)),
        deviceProviders: deviceProviders.items.map((item) => ({
          label: item.name ?? "",
          value: item.id
        })),
        deviceConfigProfiles: deviceConfigProfiles.items.map((item) => ({
          label: item.name ?? "",
          value: item.id,
          data: item
        }))
      };
      this.selectOptionsLoaded.set(true);
    });
  }
  getConfigProfiles(deviceTypeId) {
    const device = this.entity();
    return [
      {
        label: "Manually Configured",
        value: DEFAULT_SYSTEM_ID
      },
      ...(this.selectOptions["deviceConfigProfiles"] ?? []).filter((x) => {
        const profile = x.data;
        return (profile.state === "active" || profile.id === device?.configProfile?.id) && profile?.deviceType?.id === deviceTypeId;
      }).map((x) => {
        const profile = x.data;
        return {
          label: profile.name ?? "",
          value: profile.id
        };
      })
    ];
  }
  updateFormFields() {
    const device = this.entity();
    this.formFields = [
      createTextField("name", "Serial Number", device?.name ?? "", {
        name: "name",
        validations: [
          {
            name: "required",
            validator: Validators.required,
            message: "Serial Number is required"
          },
          {
            name: "pattern",
            validator: Validators.pattern(/^[a-zA-Z0-9]+$/),
            message: "Serial Number must be alphanumeric"
          }
        ]
      }),
      createDropdownField("deviceType", "Device Type", this.selectOptions["deviceTypes"] ?? [], device?.deviceType?.id ?? "", {
        name: "deviceType",
        validations: [
          {
            name: "required",
            validator: Validators.required,
            message: "Device Type is required"
          }
        ],
        props: {
          appendTo: "body"
        },
        events: {
          onChange: (value) => {
            const configProfileField = this.formFields.find((field) => field.key === "configProfile");
            if (configProfileField) {
              configProfileField.options = this.getConfigProfiles(value);
              this.form?.patchValue({ configProfile: DEFAULT_SYSTEM_ID });
            }
          }
        }
      }),
      createDropdownField("configProfile", "Configuration Profile", this.getConfigProfiles(device?.deviceType?.id), device?.configProfile?.id ?? DEFAULT_SYSTEM_ID, {
        name: "configProfile",
        props: {
          appendTo: "body"
        }
      })
    ];
    if (this.createMode() && this.selectOptions["deviceProviders"]?.length > 0) {
      this.formFields.push(createDropdownField("provider", "Device Provider", this.selectOptions["deviceProviders"] ?? [], device?.provider?.id ?? "", {
        name: "provider",
        validations: [
          {
            name: "required",
            validator: Validators.required,
            message: "Device Provider is required"
          }
        ],
        props: {
          appendTo: "body"
        }
      }));
    }
  }
  getUpdateMethod() {
    return this.operationRegistry.getOperation("device", "update") ?? ((id, data) => this.entitiesService.updateDevice(id, data));
  }
  async getAvailableRootDeviceTypeIdsForClient() {
    const routeParams = getAllRouteParams(this.route.snapshot);
    const clientId = routeParams["clientId"];
    if (isNullOrUndefined(clientId)) {
      const client = this.adminState.selectedClient();
      if (isNullOrUndefined(client?.id))
        return [];
      return this.getAvailableDeviceTypesForClient(client.id);
    }
    return this.getAvailableDeviceTypesForClient(clientId);
  }
  async getAvailableDeviceTypesForClient(clientId) {
    try {
      const adminClient = this.adminState.selectedClient();
      if (adminClient?.id === clientId && isDefined(adminClient.availableDeviceTypes)) {
        return this.extractAvailableDeviceTypeIds(adminClient);
      }
      const client = await this.requestCache.getOrFetchAsync(`client-${clientId}`, () => firstValueFrom(this.accountsService.getClient(clientId)), 3e5);
      return this.extractAvailableDeviceTypeIds(client);
    } catch (error) {
      console.error("Error fetching client device types:", error);
      return [];
    }
  }
  async extractAvailableDeviceTypeIds(client) {
    let available = (client.availableDeviceTypes || []).map((x) => x.id);
    if (available.length === 0 && isDefined(client.owner?.id)) {
      const ownerId = client.owner.id;
      const vendor = await this.requestCache.getOrFetchAsync(`vendor-${ownerId}`, () => firstValueFrom(this.accountsService.getVendor(ownerId)), 3e5);
      available = (vendor.availableDeviceTypes ?? []).map((x) => x.id);
    }
    return available;
  }
  onFormValueChange(formData) {
    const transformedData = this.transformFormData(formData);
    this.formValueChange.emit(transformedData);
  }
  transformFormData(formData) {
    const transformedData = __spreadValues({}, formData);
    if (isDefined(transformedData["deviceType"]) && typeof transformedData["deviceType"] === "string") {
      const deviceTypeOption = this.selectOptions?.["deviceTypes"]?.find((option) => option.value === transformedData["deviceType"]);
      if (deviceTypeOption) {
        transformedData["deviceType"] = {
          id: deviceTypeOption.value,
          name: deviceTypeOption.label
        };
      }
    }
    if (isDefined(transformedData["configProfile"]) && typeof transformedData["configProfile"] === "string") {
      const configProfileOption = this.selectOptions?.["deviceConfigProfiles"]?.concat({
        label: "Manually Configured",
        value: DEFAULT_SYSTEM_ID
      })?.find((option) => option.value === transformedData["configProfile"]);
      if (configProfileOption) {
        transformedData["configProfile"] = {
          id: configProfileOption.value,
          name: configProfileOption.label
        };
      }
    }
    if (isDefined(transformedData["provider"]) && typeof transformedData["provider"] === "string") {
      const providerOption = this.selectOptions?.["deviceProviders"]?.find((option) => option.value === transformedData["provider"]);
      if (providerOption) {
        transformedData["provider"] = {
          id: providerOption.value,
          name: providerOption.label
        };
      }
    }
    return transformedData;
  }
  static \u0275fac = function DeviceDetailsSectionComponent_Factory(__ngFactoryType__) {
    return new (__ngFactoryType__ || _DeviceDetailsSectionComponent)();
  };
  static \u0275cmp = /* @__PURE__ */ \u0275\u0275defineComponent({ type: _DeviceDetailsSectionComponent, selectors: [["app-device-details-section"]], inputs: { sectionHeader: [1, "sectionHeader"], ownerId: [1, "ownerId"] }, features: [\u0275\u0275InheritDefinitionFeature], decls: 12, vars: 8, consts: [[1, "card", "pt-2"], [1, "mb-4", "p-2", "flex", "justify-start", "items-center"], [1, "pi", "pi-microchip", "!text-[2.5rem]", 3, "ngClass"], [1, "pl-6", "flex-1"], [1, "flex", "justify-between", "items-center"], [1, "text-xl", "font-semibold", "m-0"], [1, "icon-light"], [3, "fields", "actions", "hideActions"], ["tableStyleClass", "info-display !w-auto", 3, "data", "columns", "showGridLines", "hideHeader"], [1, "pi", "pi-pen-to-square", "action", "hover", "!text-2xl", 3, "click", "keydown.enter"], [3, "formSubmit", "formValidityChange", "formValueChange", "fields", "actions", "hideActions"]], template: function DeviceDetailsSectionComponent_Template(rf, ctx) {
    if (rf & 1) {
      \u0275\u0275elementStart(0, "div", 0)(1, "div", 1);
      \u0275\u0275element(2, "span", 2);
      \u0275\u0275elementStart(3, "div", 3)(4, "div", 4)(5, "h2", 5);
      \u0275\u0275text(6);
      \u0275\u0275elementEnd();
      \u0275\u0275conditionalCreate(7, DeviceDetailsSectionComponent_Conditional_7_Template, 2, 1, "div", 6);
      \u0275\u0275elementEnd();
      \u0275\u0275elementStart(8, "span");
      \u0275\u0275text(9, "Configure various details about your device.");
      \u0275\u0275elementEnd()()();
      \u0275\u0275conditionalCreate(10, DeviceDetailsSectionComponent_Conditional_10_Template, 1, 3, "app-dynamic-form", 7);
      \u0275\u0275conditionalCreate(11, DeviceDetailsSectionComponent_Conditional_11_Template, 1, 4, "app-grid", 8);
      \u0275\u0275elementEnd();
    }
    if (rf & 2) {
      \u0275\u0275advance(2);
      \u0275\u0275property("ngClass", \u0275\u0275pureFunction1(6, _c022, ctx.isFormEditable()));
      \u0275\u0275attribute("aria-label", "microchip icon");
      \u0275\u0275advance(4);
      \u0275\u0275textInterpolate(ctx.sectionHeader());
      \u0275\u0275advance();
      \u0275\u0275conditional(!ctx.isFormEditable() && !ctx.createMode() ? 7 : -1);
      \u0275\u0275advance(3);
      \u0275\u0275conditional(ctx.isFormEditable() || ctx.createMode() && ctx.formFields.length ? 10 : -1);
      \u0275\u0275advance();
      \u0275\u0275conditional(!ctx.isFormEditable() && !ctx.createMode() ? 11 : -1);
    }
  }, dependencies: [CommonModule, NgClass, ButtonModule, GridComponent, DynamicFormComponent], encapsulation: 2 });
};
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(DeviceDetailsSectionComponent, [{
    type: Component,
    args: [{ selector: "app-device-details-section", imports: [CommonModule, ButtonModule, GridComponent, DynamicFormComponent], template: `<div class="card pt-2">
  <div class="mb-4 p-2 flex justify-start items-center">
    <span
      class="pi pi-microchip !text-[2.5rem]"
      [ngClass]="{ 'icon-primary': isFormEditable() }"
      [attr.aria-label]="'microchip icon'"
    ></span>

    <div class="pl-6 flex-1">
      <div class="flex justify-between items-center">
        <h2 class="text-xl font-semibold m-0">{{ sectionHeader() }}</h2>
        @if (!isFormEditable() && !createMode()) {
          <div class="icon-light">
            <span
              class="pi pi-pen-to-square action hover !text-2xl"
              [attr.aria-label]="'Edit device details'"
              (click)="onEdit()"
              (keydown.enter)="onEdit()"
            ></span>
          </div>
        }
      </div>
      <span>Configure various details about your device.</span>
    </div>
  </div>

  @if (isFormEditable() || (createMode() && formFields.length)) {
    <app-dynamic-form
      [fields]="formFields"
      [actions]="actions"
      [hideActions]="createMode()"
      (formSubmit)="onSubmit($event)"
      (formValidityChange)="onFormValidityChange($event)"
      (formValueChange)="onFormValueChange($event)"
    >
    </app-dynamic-form>
  }

  @if (!isFormEditable() && !createMode()) {
    <app-grid
      [data]="detailsDisplay()"
      [columns]="columns"
      [showGridLines]="false"
      [hideHeader]="true"
      tableStyleClass="info-display !w-auto"
    ></app-grid>
  }
</div>
` }]
  }], () => [], { sectionHeader: [{ type: Input, args: [{ isSignal: true, alias: "sectionHeader", required: false }] }], ownerId: [{ type: Input, args: [{ isSignal: true, alias: "ownerId", required: false }] }] });
})();
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && \u0275setClassDebugInfo(DeviceDetailsSectionComponent, { className: "DeviceDetailsSectionComponent", filePath: "src/app/features/administration/components/device/device-details-section/device-details-section.component.ts", lineNumber: 53 });
})();

// src/app/features/administration/components/device/device-linked-section/device-linked-section.component.ts
var _c023 = (a0) => ({ "icon-primary": a0 });
function DeviceLinkedSectionComponent_Conditional_7_Template(rf, ctx) {
  if (rf & 1) {
    const _r1 = \u0275\u0275getCurrentView();
    \u0275\u0275elementStart(0, "div", 6)(1, "span", 8);
    \u0275\u0275listener("click", function DeviceLinkedSectionComponent_Conditional_7_Template_span_click_1_listener() {
      \u0275\u0275restoreView(_r1);
      const ctx_r1 = \u0275\u0275nextContext();
      return \u0275\u0275resetView(ctx_r1.onEdit());
    })("keydown.enter", function DeviceLinkedSectionComponent_Conditional_7_Template_span_keydown_enter_1_listener() {
      \u0275\u0275restoreView(_r1);
      const ctx_r1 = \u0275\u0275nextContext();
      return \u0275\u0275resetView(ctx_r1.onEdit());
    });
    \u0275\u0275elementEnd()();
  }
  if (rf & 2) {
    \u0275\u0275advance();
    \u0275\u0275attribute("aria-label", "Edit linked entities details");
  }
}
function DeviceLinkedSectionComponent_Conditional_10_Template(rf, ctx) {
  if (rf & 1) {
    const _r3 = \u0275\u0275getCurrentView();
    \u0275\u0275elementStart(0, "app-dynamic-form", 9);
    \u0275\u0275listener("formSubmit", function DeviceLinkedSectionComponent_Conditional_10_Template_app_dynamic_form_formSubmit_0_listener($event) {
      \u0275\u0275restoreView(_r3);
      const ctx_r1 = \u0275\u0275nextContext();
      return \u0275\u0275resetView(ctx_r1.onSubmit($event));
    })("formValidityChange", function DeviceLinkedSectionComponent_Conditional_10_Template_app_dynamic_form_formValidityChange_0_listener($event) {
      \u0275\u0275restoreView(_r3);
      const ctx_r1 = \u0275\u0275nextContext();
      return \u0275\u0275resetView(ctx_r1.onFormValidityChange($event));
    })("formValueChange", function DeviceLinkedSectionComponent_Conditional_10_Template_app_dynamic_form_formValueChange_0_listener($event) {
      \u0275\u0275restoreView(_r3);
      const ctx_r1 = \u0275\u0275nextContext();
      return \u0275\u0275resetView(ctx_r1.onFormValueChange($event));
    });
    \u0275\u0275elementEnd();
  }
  if (rf & 2) {
    const ctx_r1 = \u0275\u0275nextContext();
    \u0275\u0275property("fields", ctx_r1.formFields)("actions", ctx_r1.actions)("hideActions", ctx_r1.createMode());
  }
}
function DeviceLinkedSectionComponent_Conditional_11_Conditional_0_Template(rf, ctx) {
  if (rf & 1) {
    \u0275\u0275elementStart(0, "div", 10)(1, "p-message", 12);
    \u0275\u0275element(2, "span", 13);
    \u0275\u0275text(3);
    \u0275\u0275elementEnd()();
  }
  if (rf & 2) {
    const ctx_r1 = \u0275\u0275nextContext(2);
    \u0275\u0275advance(3);
    \u0275\u0275textInterpolate1(" ", ctx_r1.warning());
  }
}
function DeviceLinkedSectionComponent_Conditional_11_Template(rf, ctx) {
  if (rf & 1) {
    \u0275\u0275conditionalCreate(0, DeviceLinkedSectionComponent_Conditional_11_Conditional_0_Template, 4, 1, "div", 10);
    \u0275\u0275element(1, "app-grid", 11);
  }
  if (rf & 2) {
    const ctx_r1 = \u0275\u0275nextContext();
    \u0275\u0275conditional(ctx_r1.warning() ? 0 : -1);
    \u0275\u0275advance();
    \u0275\u0275property("data", ctx_r1.deviceLinkedDetails())("columns", ctx_r1.columns)("showGridLines", false)("hideHeader", true);
  }
}
var DeviceLinkedSectionComponent = class _DeviceLinkedSectionComponent extends EntitySectionBaseComponent {
  ownerId = input(null, ...ngDevMode ? [{ debugName: "ownerId" }] : []);
  entitiesService = inject(EntitiesService);
  operationRegistry = inject(EntityOperationRegistryService);
  utilityService = inject(UtilityService);
  deviceLinkedDetails = computed(() => {
    const deviceDetails = this.entity();
    if (!isDefined(deviceDetails))
      return [];
    return [
      { key: "Sim Card", value: deviceDetails.simcard?.name ?? "None" },
      {
        key: "Asset",
        value: deviceDetails.asset?.name ?? "None"
      }
    ];
  }, ...ngDevMode ? [{ debugName: "deviceLinkedDetails" }] : []);
  searchSIMCardsSubject = new BehaviorSubject(null);
  searchAssetsSubject = new BehaviorSubject(null);
  simCardSuggestions = signal([], ...ngDevMode ? [{ debugName: "simCardSuggestions" }] : []);
  assetSuggestions = signal([], ...ngDevMode ? [{ debugName: "assetSuggestions" }] : []);
  warning = signal(null, ...ngDevMode ? [{ debugName: "warning" }] : []);
  constructor() {
    super();
    this.columns = [
      { field: "key", header: "", transform: "uppercase" },
      { field: "value", header: "" }
    ];
    effect(() => {
      const deviceDetails = this.entity();
      if (!isDefined(deviceDetails))
        return;
      if (deviceDetails.asset) {
        this.checkAssetDevices(deviceDetails);
      }
    });
  }
  ngOnInit() {
    this.setupSearch(this.searchSIMCardsSubject, this.simCardSuggestions, this.entitiesService.listSimCards.bind(this.entitiesService), { state: "active" });
    this.setupSearch(this.searchAssetsSubject, this.assetSuggestions, this.entitiesService.listAssets.bind(this.entitiesService), { state: "active" });
  }
  checkAssetDevices(deviceDetails) {
    if (deviceDetails?.asset) {
      this.entitiesService.getAsset(deviceDetails.asset.id).subscribe((asset) => {
        if (asset.devices && asset.devices.length > 1) {
          this.warning.set(`Multiple Devices assigned to linked Asset`);
        } else {
          this.warning.set(null);
        }
      });
    } else {
      this.warning.set(null);
    }
  }
  setupSearch(subject, suggestionSignal, listMethod, filters) {
    subject.pipe(debounceTime(300), takeUntilDestroyed(this.destroyRef), switchMap((searchTerm) => {
      if (isNullOrUndefined(searchTerm)) {
        return of({ items: [] });
      }
      const rqlFilter = this.utilityService.constructRqlFilter(__spreadProps(__spreadValues({}, filters), {
        name: { value: `*${searchTerm}*`, operator: "=" }
      }));
      return listMethod(this.entity()?.owner.id ?? "", 0, 10, "name", rqlFilter);
    })).subscribe((response) => {
      suggestionSignal.set(response.items);
    });
  }
  searchSIMCards(searchTerm) {
    const trimmedSearchTerm = searchTerm?.trim() ?? "";
    if (isNullOrUndefined(searchTerm) || trimmedSearchTerm === this.searchSIMCardsSubject.getValue()) {
      return this.simCardSuggestions.set([...this.simCardSuggestions()]);
    }
    this.searchSIMCardsSubject.next(trimmedSearchTerm);
  }
  searchAssets(searchTerm) {
    const trimmedSearchTerm = searchTerm?.trim() ?? "";
    if (isNullOrUndefined(searchTerm) || trimmedSearchTerm === this.searchAssetsSubject.getValue()) {
      return this.assetSuggestions.set([...this.assetSuggestions()]);
    }
    this.searchAssetsSubject.next(trimmedSearchTerm);
  }
  updateFormFields() {
    const device = this.entity();
    if (device?.simcard) {
      this.simCardSuggestions.set([
        { id: device.simcard.id, name: device.simcard.name }
      ]);
    }
    if (device?.asset) {
      this.assetSuggestions.set([
        { id: device.asset.id, name: device.asset.name }
      ]);
    }
    this.formFields = [
      createAutocompleteField("simcard", "SIM Card", device?.simcard?.name, () => this.simCardSuggestions(), this.searchSIMCards.bind(this), {
        layout: "horizontal",
        labelWidth: "1/3",
        name: "simcard",
        props: {
          appendTo: "body",
          showClear: true,
          multiple: false,
          field: "name",
          completeOnFocus: false,
          typeahead: true,
          showEmptyMessage: true
        }
      }),
      createAutocompleteField("asset", "Asset", device?.asset?.name, () => this.assetSuggestions(), this.searchAssets.bind(this), {
        layout: "horizontal",
        labelWidth: "1/3",
        name: "asset",
        props: {
          appendTo: "body",
          showClear: true,
          multiple: false,
          field: "name",
          completeOnFocus: false,
          typeahead: true,
          showEmptyMessage: true
        }
      })
    ];
  }
  getUpdateMethod() {
    return this.operationRegistry.getOperation("device-config-profile", "update") ?? ((id, data) => this.entitiesService.updateDevice(id, data));
  }
  transformFormData(formData) {
    const transformedData = __spreadValues({}, formData);
    if (isDefined(transformedData["simcard"])) {
      transformedData["simcard"] = {
        id: transformedData?.simcard?.id,
        name: transformedData["simcard"]?.name
      };
    }
    if (isDefined(transformedData["asset"])) {
      transformedData["asset"] = {
        id: transformedData["asset"]?.id,
        name: transformedData["asset"]?.name
      };
    }
    return transformedData;
  }
  static \u0275fac = function DeviceLinkedSectionComponent_Factory(__ngFactoryType__) {
    return new (__ngFactoryType__ || _DeviceLinkedSectionComponent)();
  };
  static \u0275cmp = /* @__PURE__ */ \u0275\u0275defineComponent({ type: _DeviceLinkedSectionComponent, selectors: [["app-device-linked-section"]], inputs: { ownerId: [1, "ownerId"] }, features: [\u0275\u0275InheritDefinitionFeature], decls: 12, vars: 7, consts: [[1, "card", "pt-2"], [1, "mb-4", "p-2", "flex", "justify-start", "items-center"], [1, "pi", "pi-link", "!text-[2.5rem]", 3, "ngClass"], [1, "pl-6", "flex-1"], [1, "flex", "justify-between", "items-center"], [1, "text-xl", "font-semibold", "m-0"], [1, "icon-light"], [3, "fields", "actions", "hideActions"], [1, "pi", "pi-pen-to-square", "action", "hover", "!text-2xl", 3, "click", "keydown.enter"], [3, "formSubmit", "formValidityChange", "formValueChange", "fields", "actions", "hideActions"], [1, "mb-4"], ["tableStyleClass", "info-display !w-auto", 3, "data", "columns", "showGridLines", "hideHeader"], ["severity", "warn"], [1, "pi", "pi-exclamation-triangle", "mr-2"]], template: function DeviceLinkedSectionComponent_Template(rf, ctx) {
    if (rf & 1) {
      \u0275\u0275elementStart(0, "div", 0)(1, "div", 1);
      \u0275\u0275element(2, "span", 2);
      \u0275\u0275elementStart(3, "div", 3)(4, "div", 4)(5, "h2", 5);
      \u0275\u0275text(6, "Linked Entities");
      \u0275\u0275elementEnd();
      \u0275\u0275conditionalCreate(7, DeviceLinkedSectionComponent_Conditional_7_Template, 2, 1, "div", 6);
      \u0275\u0275elementEnd();
      \u0275\u0275elementStart(8, "span");
      \u0275\u0275text(9, "The following supplemental information is required.");
      \u0275\u0275elementEnd()()();
      \u0275\u0275conditionalCreate(10, DeviceLinkedSectionComponent_Conditional_10_Template, 1, 3, "app-dynamic-form", 7);
      \u0275\u0275conditionalCreate(11, DeviceLinkedSectionComponent_Conditional_11_Template, 2, 5);
      \u0275\u0275elementEnd();
    }
    if (rf & 2) {
      \u0275\u0275advance(2);
      \u0275\u0275property("ngClass", \u0275\u0275pureFunction1(5, _c023, ctx.isFormEditable()));
      \u0275\u0275attribute("aria-label", "link icon");
      \u0275\u0275advance(5);
      \u0275\u0275conditional(!ctx.isFormEditable() && !ctx.createMode() ? 7 : -1);
      \u0275\u0275advance(3);
      \u0275\u0275conditional(ctx.isFormEditable() || ctx.createMode() && ctx.formFields.length ? 10 : -1);
      \u0275\u0275advance();
      \u0275\u0275conditional(!ctx.isFormEditable() && !ctx.createMode() ? 11 : -1);
    }
  }, dependencies: [
    CommonModule,
    NgClass,
    ButtonModule,
    InputTextModule,
    GridComponent,
    DynamicFormComponent,
    MessageModule,
    Message
  ], encapsulation: 2 });
};
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(DeviceLinkedSectionComponent, [{
    type: Component,
    args: [{ selector: "app-device-linked-section", imports: [
      CommonModule,
      ButtonModule,
      InputTextModule,
      GridComponent,
      DynamicFormComponent,
      MessageModule
    ], template: `<div class="card pt-2">
  <div class="mb-4 p-2 flex justify-start items-center">
    <span
      class="pi pi-link !text-[2.5rem]"
      [ngClass]="{ 'icon-primary': isFormEditable() }"
      [attr.aria-label]="'link icon'"
    ></span>

    <div class="pl-6 flex-1">
      <div class="flex justify-between items-center">
        <h2 class="text-xl font-semibold m-0">Linked Entities</h2>
        @if (!isFormEditable() && !createMode()) {
          <div class="icon-light">
            <span
              class="pi pi-pen-to-square action hover !text-2xl"
              [attr.aria-label]="'Edit linked entities details'"
              (click)="onEdit()"
              (keydown.enter)="onEdit()"
            ></span>
          </div>
        }
      </div>
      <span>The following supplemental information is required.</span>
    </div>
  </div>

  @if (isFormEditable() || (createMode() && formFields.length)) {
    <app-dynamic-form
      [fields]="formFields"
      [actions]="actions"
      [hideActions]="createMode()"
      (formSubmit)="onSubmit($event)"
      (formValidityChange)="onFormValidityChange($event)"
      (formValueChange)="onFormValueChange($event)"
    >
    </app-dynamic-form>
  }

  @if (!isFormEditable() && !createMode()) {
    @if (warning()) {
      <div class="mb-4">
        <p-message severity="warn">
          <span class="pi pi-exclamation-triangle mr-2"></span>
          {{ warning() }}</p-message
        >
      </div>
    }
    <app-grid
      [data]="deviceLinkedDetails()"
      [columns]="columns"
      [showGridLines]="false"
      [hideHeader]="true"
      tableStyleClass="info-display !w-auto"
    ></app-grid>
  }
</div>
` }]
  }], () => [], { ownerId: [{ type: Input, args: [{ isSignal: true, alias: "ownerId", required: false }] }] });
})();
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && \u0275setClassDebugInfo(DeviceLinkedSectionComponent, { className: "DeviceLinkedSectionComponent", filePath: "src/app/features/administration/components/device/device-linked-section/device-linked-section.component.ts", lineNumber: 49 });
})();

// src/app/features/administration/components/shared/form-section/form-section.component.ts
var _c024 = (a0) => ({ "icon-primary": a0 });
function FormSectionComponent_Conditional_7_Template(rf, ctx) {
  if (rf & 1) {
    const _r1 = \u0275\u0275getCurrentView();
    \u0275\u0275elementStart(0, "div", 6)(1, "span", 9);
    \u0275\u0275listener("click", function FormSectionComponent_Conditional_7_Template_span_click_1_listener() {
      \u0275\u0275restoreView(_r1);
      const ctx_r1 = \u0275\u0275nextContext();
      return \u0275\u0275resetView(ctx_r1.onEdit());
    })("keydown.enter", function FormSectionComponent_Conditional_7_Template_span_keydown_enter_1_listener() {
      \u0275\u0275restoreView(_r1);
      const ctx_r1 = \u0275\u0275nextContext();
      return \u0275\u0275resetView(ctx_r1.onEdit());
    });
    \u0275\u0275elementEnd()();
  }
  if (rf & 2) {
    \u0275\u0275advance();
    \u0275\u0275attribute("aria-label", "Edit entity details");
  }
}
function FormSectionComponent_Conditional_8_Template(rf, ctx) {
  if (rf & 1) {
    const _r3 = \u0275\u0275getCurrentView();
    \u0275\u0275elementStart(0, "app-dynamic-form", 10);
    \u0275\u0275listener("formSubmit", function FormSectionComponent_Conditional_8_Template_app_dynamic_form_formSubmit_0_listener($event) {
      \u0275\u0275restoreView(_r3);
      const ctx_r1 = \u0275\u0275nextContext();
      return \u0275\u0275resetView(ctx_r1.onSubmit($event));
    });
    \u0275\u0275elementEnd();
  }
  if (rf & 2) {
    const ctx_r1 = \u0275\u0275nextContext();
    \u0275\u0275property("fields", ctx_r1.formFields)("actions", ctx_r1.actions);
  }
}
function FormSectionComponent_Conditional_9_Template(rf, ctx) {
  if (rf & 1) {
    \u0275\u0275element(0, "app-grid", 8);
  }
  if (rf & 2) {
    const ctx_r1 = \u0275\u0275nextContext();
    \u0275\u0275property("data", ctx_r1.entityDetails())("columns", ctx_r1.columns)("showGridLines", false)("hideHeader", true);
  }
}
var FormSectionComponent = class _FormSectionComponent extends EntitySectionBaseComponent {
  valuesKey = input.required(...ngDevMode ? [{ debugName: "valuesKey" }] : []);
  formConfig = input.required(...ngDevMode ? [{ debugName: "formConfig" }] : []);
  entitiesService = inject(EntitiesService);
  adminStateService = inject(AdminStateService);
  entityCustomFields = signal([], ...ngDevMode ? [{ debugName: "entityCustomFields" }] : []);
  entityDetails = computed(() => {
    const entityDetails = this.entity();
    const formConfig = this.formConfig();
    if (isNullOrUndefined(entityDetails) || isNullOrUndefined(formConfig))
      return [];
    const values = entityDetails[this.valuesKey()] ?? {};
    return formConfig.fields.map((field) => ({
      key: field.title,
      value: values[field.id] ?? "None"
    }));
  }, ...ngDevMode ? [{ debugName: "entityDetails" }] : []);
  constructor() {
    super();
    this.columns = [
      { field: "key", header: "", transform: "uppercase" },
      { field: "value", header: "" }
    ];
  }
  updateFormFields() {
    const entityDetails = this.entity();
    const formConfig = this.formConfig();
    const values = entityDetails?.[this.valuesKey()] ?? {};
    this.formFields = formConfig.fields.map((field) => {
      switch (field.type) {
        case "text":
          return createTextField(field.id, field.title, values[field.id] ?? field.value?.toString() ?? field.defaultValue?.toString(), {
            validations: field.required ?? false ? [
              {
                name: "required",
                validator: Validators.required,
                message: `${field.title} is required`
              }
            ] : [],
            hint: field.description
          });
        case "number": {
          const validations = [];
          if (field.required ?? false) {
            validations.push({
              name: "required",
              validator: Validators.required,
              message: `${field.title} is required`
            });
          }
          if (isNumber(field.min)) {
            validations.push({
              name: "min",
              validator: Validators.min(field.min),
              message: `Value must be greater than ${field.min}`
            });
          }
          if (isNumber(field.max)) {
            validations.push({
              name: "max",
              validator: Validators.max(field.max),
              message: `Value must be less than ${field.max}`
            });
          }
          return createNumberField(field.id, field.title, values[field.id] ?? field.value ?? field.defaultValue, {
            validations,
            hint: field.description
          });
        }
        default:
          return void 0;
      }
    }).filter((field) => field !== void 0);
  }
  getUpdateMethod() {
    switch (this.entityType()) {
      case "asset":
        return (id, payload) => this.entitiesService.updateAsset(id, payload);
      case "simcard":
        return (id, payload) => this.entitiesService.updateSimCard(id, payload);
      case "device":
        return (id, payload) => this.entitiesService.updateDevice(id, payload);
      case "assettag":
        return (id, payload) => this.entitiesService.updateAssetTag(id, payload);
      default:
        throw new Error(`Update for '${this.entityType}' not yet supported`);
    }
  }
  static \u0275fac = function FormSectionComponent_Factory(__ngFactoryType__) {
    return new (__ngFactoryType__ || _FormSectionComponent)();
  };
  static \u0275cmp = /* @__PURE__ */ \u0275\u0275defineComponent({ type: _FormSectionComponent, selectors: [["app-form-section"]], inputs: { valuesKey: [1, "valuesKey"], formConfig: [1, "formConfig"] }, features: [\u0275\u0275InheritDefinitionFeature], decls: 10, vars: 7, consts: [[1, "card", "pt-2"], [1, "mb-4", "p-2", "flex", "justify-start", "items-center"], [1, "pi", "pi-sliders-v", "!text-[2.5rem]", 3, "ngClass"], [1, "pl-6", "flex-1"], [1, "flex", "justify-between", "items-center"], [1, "text-xl", "font-semibold", "m-0"], [1, "icon-light"], [3, "fields", "actions"], ["tableStyleClass", "info-display !w-auto", 3, "data", "columns", "showGridLines", "hideHeader"], [1, "pi", "pi-pen-to-square", "action", "hover", "!text-2xl", 3, "click", "keydown.enter"], [3, "formSubmit", "fields", "actions"]], template: function FormSectionComponent_Template(rf, ctx) {
    if (rf & 1) {
      \u0275\u0275elementStart(0, "div", 0)(1, "div", 1);
      \u0275\u0275element(2, "span", 2);
      \u0275\u0275elementStart(3, "div", 3)(4, "div", 4)(5, "h2", 5);
      \u0275\u0275text(6);
      \u0275\u0275elementEnd();
      \u0275\u0275conditionalCreate(7, FormSectionComponent_Conditional_7_Template, 2, 1, "div", 6);
      \u0275\u0275elementEnd()()();
      \u0275\u0275conditionalCreate(8, FormSectionComponent_Conditional_8_Template, 1, 2, "app-dynamic-form", 7)(9, FormSectionComponent_Conditional_9_Template, 1, 4, "app-grid", 8);
      \u0275\u0275elementEnd();
    }
    if (rf & 2) {
      \u0275\u0275advance(2);
      \u0275\u0275property("ngClass", \u0275\u0275pureFunction1(5, _c024, ctx.isFormEditable()));
      \u0275\u0275attribute("aria-label", "sliders vertical icon");
      \u0275\u0275advance(4);
      \u0275\u0275textInterpolate(ctx.formConfig()["name"]);
      \u0275\u0275advance();
      \u0275\u0275conditional(!ctx.isFormEditable() ? 7 : -1);
      \u0275\u0275advance();
      \u0275\u0275conditional(ctx.isFormEditable() ? 8 : 9);
    }
  }, dependencies: [CommonModule, NgClass, ButtonModule, GridComponent, DynamicFormComponent], encapsulation: 2 });
};
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(FormSectionComponent, [{
    type: Component,
    args: [{ selector: "app-form-section", imports: [CommonModule, ButtonModule, GridComponent, DynamicFormComponent], template: `<div class="card pt-2">
  <div class="mb-4 p-2 flex justify-start items-center">
    <span
      class="pi pi-sliders-v !text-[2.5rem]"
      [ngClass]="{ 'icon-primary': isFormEditable() }"
      [attr.aria-label]="'sliders vertical icon'"
    ></span>

    <div class="pl-6 flex-1">
      <div class="flex justify-between items-center">
        <h2 class="text-xl font-semibold m-0">{{ formConfig()['name'] }}</h2>
        @if (!isFormEditable()) {
          <div class="icon-light">
            <span
              class="pi pi-pen-to-square action hover !text-2xl"
              [attr.aria-label]="'Edit entity details'"
              (click)="onEdit()"
              (keydown.enter)="onEdit()"
            ></span>
          </div>
        }
      </div>
    </div>
  </div>
  @if (isFormEditable()) {
    <app-dynamic-form
      [fields]="formFields"
      [actions]="actions"
      (formSubmit)="onSubmit($event)"
    >
    </app-dynamic-form>
  } @else {
    <app-grid
      [data]="entityDetails()"
      [columns]="columns"
      [showGridLines]="false"
      [hideHeader]="true"
      tableStyleClass="info-display !w-auto"
    ></app-grid>
  }
</div>
` }]
  }], () => [], { valuesKey: [{ type: Input, args: [{ isSignal: true, alias: "valuesKey", required: true }] }], formConfig: [{ type: Input, args: [{ isSignal: true, alias: "formConfig", required: true }] }] });
})();
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && \u0275setClassDebugInfo(FormSectionComponent, { className: "FormSectionComponent", filePath: "src/app/features/administration/components/shared/form-section/form-section.component.ts", lineNumber: 46 });
})();

// src/app/features/administration/factories/device-config.factory.ts
var DeviceSectionConfigFactory = class _DeviceSectionConfigFactory {
  /**
   * Create sections for device information
   * @param device The device object to display in the section
   * @returns An array of AdminDetailSection objects representing the device information sections
   */
  createDeviceInformationSection(device) {
    return [
      {
        id: "device-details",
        title: "Device Config Details",
        component: DeviceDetailsSectionComponent,
        componentInputs: { entity: device },
        category: "information",
        order: 10
      },
      {
        id: "device-information",
        title: "Device Information",
        component: InfoSectionComponent,
        componentInputs: {
          entity: device,
          dataPath: "device_information",
          entityType: "device"
        },
        category: "information",
        order: 20
      },
      {
        id: "device-linked-entities",
        title: "Linked Entities",
        component: DeviceLinkedSectionComponent,
        componentInputs: {
          entity: device,
          entityType: "device",
          dataPath: "linked_entities"
        },
        category: "information",
        order: 30
      }
    ];
  }
  /**
   * Create sections for device IO
   * @param device The device object to display in the section
   * @returns An array of AdminDetailSection objects representing the device IO sections
   */
  createDeviceIOSection(device, deviceType, ioTypes) {
    return [
      {
        id: "device-io-selection",
        title: "IO Selection",
        component: DeviceIoWhitelistSectionComponent,
        componentInputs: {
          entity: device,
          entityType: "device",
          deviceType,
          injectDataAtPath: true,
          dataPath: "parameters"
        },
        category: "io",
        order: 10
      },
      {
        id: "device-bitmapped-io",
        title: "Bitmapped IO",
        component: DeviceBitmapSectionComponent,
        componentInputs: {
          entity: device,
          entityType: "device"
        },
        category: "io",
        order: 20
      },
      {
        id: "device-analog-inputs",
        title: "Analog Inputs",
        component: DeviceIOSectionComponent,
        componentInputs: {
          entity: device,
          entityType: "device",
          ioType: "analog_input",
          iconType: "svg",
          iconName: "gauge-simple-high-solid",
          deviceType,
          ioTypes
        },
        category: "io",
        order: 30
      },
      {
        id: "device-camera-inputs",
        title: "Camera Inputs",
        component: DeviceIOSectionComponent,
        componentInputs: {
          entity: device,
          entityType: "device",
          ioType: "camera_input",
          iconType: "primeng",
          iconName: "pi pi-camera",
          deviceType,
          ioTypes
        },
        category: "io",
        order: 40
      },
      {
        id: "device-can-bus-inputs",
        title: "CAN Bus Inputs",
        component: DeviceIOSectionComponent,
        componentInputs: {
          entity: device,
          entityType: "device",
          ioType: "can_input",
          iconType: "svg",
          iconName: "oil-can-solid",
          deviceType,
          ioTypes
        },
        category: "io",
        order: 50
      },
      {
        id: "device-counter-inputs",
        title: "Counter Inputs",
        component: DeviceIOSectionComponent,
        componentInputs: {
          entity: device,
          entityType: "device",
          ioType: "counter_input",
          iconType: "primeng",
          iconName: "pi pi-clock",
          deviceType,
          ioTypes
        },
        category: "io",
        order: 60
      },
      {
        id: "device-digital-inputs",
        title: "Digital Inputs",
        component: DeviceIOSectionComponent,
        componentInputs: {
          entity: device,
          entityType: "device",
          ioType: "digital_input",
          iconType: "primeng",
          iconName: "pi pi-arrow-left",
          deviceType,
          ioTypes
        },
        category: "io",
        order: 70
      },
      {
        id: "device-digital-outputs",
        title: "Digital Outputs",
        component: DeviceIOSectionComponent,
        componentInputs: {
          entity: device,
          entityType: "device",
          ioType: "digital_output",
          iconType: "primeng",
          iconName: "pi pi-arrow-right",
          deviceType,
          ioTypes
        },
        category: "io",
        order: 80
      },
      {
        id: "device-temperature-inputs",
        title: "Temperature Inputs",
        component: DeviceIOSectionComponent,
        componentInputs: {
          entity: device,
          entityType: "device",
          ioType: "temperature_input",
          iconType: "svg",
          iconName: "temperature-half-solid",
          deviceType,
          ioTypes
        },
        category: "io",
        order: 90
      },
      {
        id: "device-value-inputs",
        title: "Value Inputs",
        component: DeviceIOSectionComponent,
        componentInputs: {
          entity: device,
          entityType: "device",
          ioType: "value_input",
          iconType: "primeng",
          iconName: "pi pi-list-check",
          deviceType,
          ioTypes
        },
        category: "io",
        order: 100
      }
    ];
  }
  /**
   * Create sections for device accessories
   * @param device The device object to display in the section
   * @returns An array of AdminDetailSection objects representing the device accessories sections
   */
  createDeviceAccessoriesSection(device, deviceTypeAccessories) {
    if (!device)
      return [];
    const sections = [];
    Object.entries(deviceTypeAccessories ?? {}).forEach(([key]) => {
      sections.push({
        id: `device-accessory-${key}`,
        title: deviceTypeAccessories?.[key]?.name ?? key,
        component: DeviceAccessorySectionComponent,
        componentInputs: {
          entity: device,
          entityType: "device",
          dataPath: `accessories.${key}`,
          deviceTypeAccessory: deviceTypeAccessories?.[key],
          accessoryId: key,
          sectionHeader: deviceTypeAccessories?.[key]?.name ?? key
        },
        category: "accessories",
        order: 10 + Number(key)
      });
    });
    return sections;
  }
  /**
   * Create sections for device settings
   * @param device The device object to display in the section
   * @returns An array of AdminDetailSection objects representing the device settings sections
   */
  createSettingsSection(device, deviceType) {
    let custom = [];
    if (isDefined(deviceType?.settingsDefinition)) {
      try {
        const def = JSON.parse(deviceType.settingsDefinition);
        custom = def.groups.map((group) => ({
          id: group.id,
          title: group.title,
          component: FormSectionComponent,
          componentInputs: {
            entity: device,
            formConfig: group,
            entityType: "device",
            valuesKey: "settings"
          },
          category: "settings",
          order: 10 + Number(group.id)
        }));
      } catch (err) {
        console.warn("Invalid device type settings definition", deviceType.settingsDefinition);
        console.error(err);
      }
    }
    return [
      {
        id: "device-parameters",
        title: "Device Config Parameters",
        component: DeviceParametersSectionComponent,
        componentInputs: {
          entity: device,
          entityType: "device",
          dataPath: "parameters",
          injectDataAtPath: true,
          deviceType
        },
        category: "settings",
        order: 10
      },
      ...custom
    ];
  }
  /**
   * Create sections for device changes
   * @param device The device object to display in the section
   * @returns An array of AdminDetailSection objects representing the device changes sections
   */
  createChangesSection(device) {
    return [
      {
        id: "device-changes",
        title: "Changes",
        component: FeedSectionComponent,
        componentInputs: {
          entity: device
        },
        category: "feed",
        order: 10
      }
    ];
  }
  /**
   * Create all device sections in one call
   * @param device The device object to display in the sections
   * @returns An array of AdminDetailSection objects representing all device sections
   */
  createAllDeviceSections(device, deviceTypeAccessories, deviceType, ioTypes) {
    const sections = [...this.createDeviceInformationSection(device)];
    const hasConfigProfile = isDefined(device?.configProfile?.id) && device?.configProfile?.id !== DEFAULT_SYSTEM_ID;
    if (!hasConfigProfile) {
      sections.push(...this.createSettingsSection(device, deviceType));
      sections.push(...this.createDeviceIOSection(device, deviceType, ioTypes));
      if (deviceType?.accessories && Object.keys(deviceType?.accessories)?.length > 0) {
        sections.push(...this.createDeviceAccessoriesSection(device, deviceTypeAccessories));
      }
    }
    sections.push(...this.createChangesSection(device));
    return sections;
  }
  static \u0275fac = function DeviceSectionConfigFactory_Factory(__ngFactoryType__) {
    return new (__ngFactoryType__ || _DeviceSectionConfigFactory)();
  };
  static \u0275prov = /* @__PURE__ */ \u0275\u0275defineInjectable({ token: _DeviceSectionConfigFactory, factory: _DeviceSectionConfigFactory.\u0275fac, providedIn: "root" });
};
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(DeviceSectionConfigFactory, [{
    type: Injectable,
    args: [{ providedIn: "root" }]
  }], null, null);
})();

// src/app/features/administration/components/geofences/geofence-details-section/geofence-details-section.component.ts
var _c025 = (a0) => ({ "icon-primary": a0 });
function GeofenceDetailsSectionComponent_Conditional_7_Template(rf, ctx) {
  if (rf & 1) {
    const _r1 = \u0275\u0275getCurrentView();
    \u0275\u0275elementStart(0, "div", 6)(1, "span", 9);
    \u0275\u0275listener("click", function GeofenceDetailsSectionComponent_Conditional_7_Template_span_click_1_listener() {
      \u0275\u0275restoreView(_r1);
      const ctx_r1 = \u0275\u0275nextContext();
      return \u0275\u0275resetView(ctx_r1.onEdit());
    })("keydown.enter", function GeofenceDetailsSectionComponent_Conditional_7_Template_span_keydown_enter_1_listener() {
      \u0275\u0275restoreView(_r1);
      const ctx_r1 = \u0275\u0275nextContext();
      return \u0275\u0275resetView(ctx_r1.onEdit());
    });
    \u0275\u0275elementEnd()();
  }
  if (rf & 2) {
    \u0275\u0275advance();
    \u0275\u0275attribute("aria-label", "Edit geofence details");
  }
}
function GeofenceDetailsSectionComponent_Conditional_10_Template(rf, ctx) {
  if (rf & 1) {
    const _r3 = \u0275\u0275getCurrentView();
    \u0275\u0275elementStart(0, "app-dynamic-form", 10);
    \u0275\u0275listener("formSubmit", function GeofenceDetailsSectionComponent_Conditional_10_Template_app_dynamic_form_formSubmit_0_listener($event) {
      \u0275\u0275restoreView(_r3);
      const ctx_r1 = \u0275\u0275nextContext();
      return \u0275\u0275resetView(ctx_r1.onSubmit($event));
    })("formValidityChange", function GeofenceDetailsSectionComponent_Conditional_10_Template_app_dynamic_form_formValidityChange_0_listener($event) {
      \u0275\u0275restoreView(_r3);
      const ctx_r1 = \u0275\u0275nextContext();
      return \u0275\u0275resetView(ctx_r1.onFormValidityChange($event));
    })("formValueChange", function GeofenceDetailsSectionComponent_Conditional_10_Template_app_dynamic_form_formValueChange_0_listener($event) {
      \u0275\u0275restoreView(_r3);
      const ctx_r1 = \u0275\u0275nextContext();
      return \u0275\u0275resetView(ctx_r1.onFormValueChange($event));
    });
    \u0275\u0275elementEnd();
  }
  if (rf & 2) {
    const ctx_r1 = \u0275\u0275nextContext();
    \u0275\u0275property("fields", ctx_r1.formFields)("actions", ctx_r1.actions)("hideActions", ctx_r1.createMode());
  }
}
function GeofenceDetailsSectionComponent_Conditional_11_Template(rf, ctx) {
  if (rf & 1) {
    \u0275\u0275element(0, "app-grid", 8);
  }
  if (rf & 2) {
    const ctx_r1 = \u0275\u0275nextContext();
    \u0275\u0275property("data", ctx_r1.geofenceDetails())("columns", ctx_r1.columns)("showGridLines", false)("hideHeader", true);
  }
}
var GeofenceDetailsSectionComponent = class _GeofenceDetailsSectionComponent extends TypedEntitySectionBaseComponent {
  ownerId = input(null, ...ngDevMode ? [{ debugName: "ownerId" }] : []);
  entitiesService = inject(EntitiesService);
  assetGroupService = inject(AssetGroupingService);
  measurementUnitsService = inject(MeasurementUnitsService);
  operationRegistry = inject(EntityOperationRegistryService);
  utilityService = inject(UtilityService);
  geofenceDetails = computed(() => {
    const geofenceDetails = this.entity();
    if (!isDefined(geofenceDetails))
      return [];
    return [
      { key: "Name", value: geofenceDetails.name },
      {
        key: "Type",
        value: this.utilityService.toTitleCase(geofenceDetails.zoneType ?? "")
      },
      { key: "Cost Centre", value: geofenceDetails.costCentre?.name ?? "None" },
      { key: "Group", value: geofenceDetails.group?.name ?? "None" },
      {
        key: "Speed Limit",
        value: isDefined(geofenceDetails.speed) && geofenceDetails.speed > 0 ? this.measurementUnitsService.format(geofenceDetails.speed, MeasurementUnitType.SPEED).format : "None"
      },
      {
        key: "Proximity Warning",
        value: isDefined(geofenceDetails.radius) && geofenceDetails.radius > 0 ? this.measurementUnitsService.format(geofenceDetails.radius, MeasurementUnitType.DISTANCE).format : "None"
      }
    ];
  }, ...ngDevMode ? [{ debugName: "geofenceDetails" }] : []);
  zoneGroups = [];
  costCenters = [];
  requestMapper;
  constructor() {
    super();
    this.columns = [
      { field: "key", header: "", transform: "uppercase" },
      { field: "value", header: "" }
    ];
    effect(() => {
      const geofence = this.entity();
      if (isDefined(geofence)) {
        const dataLoadPromises = [];
        const costCentresPromise = this.loadCostCentres(geofence["ownerId"]).catch(() => {
          console.error("Failed to load cost centres");
        });
        dataLoadPromises.push(costCentresPromise);
        const zoneGroupsPromise = this.assetGroupService.getZoneGroupsAsTree(geofence["ownerId"]).then((res) => {
          this.zoneGroups = res;
        }).catch(() => {
          console.error("Failed to load zone groups");
        });
        dataLoadPromises.push(zoneGroupsPromise);
        Promise.all(dataLoadPromises).then(() => {
          this.initializeRequestMapper();
          this.updateFormFields();
        }).catch(() => {
        });
      }
    });
  }
  async loadCostCentres(ownerId) {
    const costCentreTree = await this.assetGroupService.getCostCentresAsTree(ownerId);
    this.costCenters = costCentreTree;
  }
  initializeRequestMapper() {
    this.requestMapper = new FormToRequestMapper({
      name: {
        requestProperty: "name",
        validate: (value) => typeof value === "string" && value.length > 0
      },
      zoneType: {
        requestProperty: "zoneType",
        validate: (value) => typeof value === "string" && value.length > 0
      },
      costCentre: {
        requestProperty: "costCentre",
        transform: (value) => {
          const item = this.assetGroupService.findInTree(this.costCenters, `${value.id}`);
          return item ? { id: item.id, name: item.name } : void 0;
        }
      },
      group: {
        requestProperty: "group",
        transform: (value) => {
          const item = this.assetGroupService.findInTree(this.zoneGroups, value.id);
          return item ? { id: item.id, name: item.name } : void 0;
        }
      },
      speed: {
        requestProperty: "speed",
        transform: (value) => {
          if (typeof value !== "number")
            return void 0;
          return this.measurementUnitsService.toBackend(MeasurementUnitType.SPEED, value);
        }
      },
      radius: {
        requestProperty: "radius",
        transform: (value) => {
          if (typeof value !== "number")
            return void 0;
          return this.measurementUnitsService.toBackend(MeasurementUnitType.DISTANCE, value);
        }
      }
    });
  }
  updateFormFields() {
    const geofence = this.entity();
    this.formFields = [
      createTextField("name", "Name", geofence?.name, {
        name: "name",
        validations: [
          {
            name: "required",
            validator: Validators.required,
            message: "Name is required"
          }
        ]
      }),
      createDropdownField("zoneType", "Type", enumToSelectOptionValues(ZoneListItem.ZoneTypeEnum).map((item) => {
        if (item.label === "Nogo") {
          item.label = "No Go";
        }
        if (item.label === "Keepin") {
          item.label = "Keep In";
        }
        return item;
      }), geofence?.zoneType, {
        name: "zoneType",
        validations: [
          {
            name: "required",
            validator: Validators.required,
            message: "Type is required"
          }
        ],
        props: {
          appendTo: "body"
        }
      }),
      createTreeSelectField("costCentre", "Cost Centre", geofence?.costCentre ? {
        id: geofence.costCentre.id,
        label: geofence.costCentre.name,
        data: geofence.costCentre
      } : null, this.costCenters, {
        name: "costCentre",
        validations: [
          {
            name: "required",
            validator: Validators.required,
            message: "Cost centre is required"
          }
        ],
        props: {
          appendTo: "body",
          placeholder: "Select Cost Centre",
          multiple: false,
          showClear: true,
          selectionMode: "single",
          filter: true
        }
      }),
      createTreeSelectField("group", "Group", geofence?.group ? {
        id: geofence.group.id,
        label: geofence.group.name,
        data: geofence.group
      } : null, this.zoneGroups, {
        name: "group",
        validations: [
          {
            name: "required",
            validator: Validators.required,
            message: "Group is required"
          }
        ],
        props: {
          appendTo: "body",
          placeholder: "Select Group",
          multiple: false,
          showClear: true,
          selectionMode: "single",
          filter: true
        }
      }),
      createNumberField("speed", "Speed Limit", this.measurementUnitsService.fromBackend(MeasurementUnitType.SPEED, geofence?.speed ?? 0), {
        name: "speed",
        props: {
          appendTo: "body",
          placeholder: "Enter Speed Limit",
          showClear: true,
          suffix: this.measurementUnitsService.unitSymbol(MeasurementUnitType.SPEED)
        }
      }),
      createNumberField("radius", "Proximity Warning", this.measurementUnitsService.fromBackend(MeasurementUnitType.DISTANCE, geofence?.radius ?? 0), {
        name: "radius",
        props: {
          appendTo: "body",
          placeholder: "Enter Proximity Warning",
          showClear: true,
          suffix: this.measurementUnitsService.unitSymbol(MeasurementUnitType.DISTANCE)
        }
      })
    ];
  }
  getUpdateMethod() {
    return this.operationRegistry.getOperation("zone", "update") ?? ((id, data) => this.entitiesService.updateZone(id, data));
  }
  onFormValueChange(formData) {
    try {
      const transformedData = this.transformFormData(formData);
      this.formValueChange.emit(transformedData);
    } catch (error) {
      console.warn("Form data transformation failed:", error);
      this.formValueChange.emit(formData);
    }
  }
  transformFormData(formData) {
    if (!this.requestMapper) {
      return {};
    }
    try {
      const normalizedFormData = Array.isArray(formData) ? formData.reduce((acc, item) => __spreadValues(__spreadValues({}, acc), item), {}) : formData;
      const partialRequest = this.requestMapper.transform(normalizedFormData);
      const updateRequest = {};
      if ("name" in partialRequest) {
        updateRequest.name = partialRequest.name;
      }
      if ("zoneType" in partialRequest) {
        updateRequest.zoneType = partialRequest.zoneType;
      }
      if ("costCentre" in partialRequest) {
        updateRequest.costCentre = partialRequest.costCentre;
      }
      if ("group" in partialRequest) {
        updateRequest.group = partialRequest.group;
      }
      if ("speed" in partialRequest) {
        updateRequest.speed = partialRequest.speed;
      }
      if ("radius" in partialRequest) {
        updateRequest.radius = partialRequest.radius;
      }
      return updateRequest;
    } catch (error) {
      console.error("Form data transformation failed:", error);
      throw error;
    }
  }
  static \u0275fac = function GeofenceDetailsSectionComponent_Factory(__ngFactoryType__) {
    return new (__ngFactoryType__ || _GeofenceDetailsSectionComponent)();
  };
  static \u0275cmp = /* @__PURE__ */ \u0275\u0275defineComponent({ type: _GeofenceDetailsSectionComponent, selectors: [["app-geofence-details-section"]], inputs: { ownerId: [1, "ownerId"] }, features: [\u0275\u0275InheritDefinitionFeature], decls: 12, vars: 7, consts: [[1, "card", "pt-2"], [1, "mb-4", "p-2", "flex", "justify-start", "items-center"], [1, "pi", "pi-map", "!text-[2.5rem]", 3, "ngClass"], [1, "pl-6", "flex-1"], [1, "flex", "justify-between", "items-center"], [1, "text-xl", "font-semibold", "m-0"], [1, "icon-light"], [3, "fields", "actions", "hideActions"], ["tableStyleClass", "info-display !w-auto", 3, "data", "columns", "showGridLines", "hideHeader"], [1, "pi", "pi-pen-to-square", "action", "hover", "!text-2xl", 3, "click", "keydown.enter"], [3, "formSubmit", "formValidityChange", "formValueChange", "fields", "actions", "hideActions"]], template: function GeofenceDetailsSectionComponent_Template(rf, ctx) {
    if (rf & 1) {
      \u0275\u0275elementStart(0, "div", 0)(1, "div", 1);
      \u0275\u0275element(2, "span", 2);
      \u0275\u0275elementStart(3, "div", 3)(4, "div", 4)(5, "h2", 5);
      \u0275\u0275text(6, "Geofence Details");
      \u0275\u0275elementEnd();
      \u0275\u0275conditionalCreate(7, GeofenceDetailsSectionComponent_Conditional_7_Template, 2, 1, "div", 6);
      \u0275\u0275elementEnd();
      \u0275\u0275elementStart(8, "span");
      \u0275\u0275text(9, "Configure various details about your Geofence.");
      \u0275\u0275elementEnd()()();
      \u0275\u0275conditionalCreate(10, GeofenceDetailsSectionComponent_Conditional_10_Template, 1, 3, "app-dynamic-form", 7);
      \u0275\u0275conditionalCreate(11, GeofenceDetailsSectionComponent_Conditional_11_Template, 1, 4, "app-grid", 8);
      \u0275\u0275elementEnd();
    }
    if (rf & 2) {
      \u0275\u0275advance(2);
      \u0275\u0275property("ngClass", \u0275\u0275pureFunction1(5, _c025, ctx.isFormEditable()));
      \u0275\u0275attribute("aria-label", "map icon");
      \u0275\u0275advance(5);
      \u0275\u0275conditional(!ctx.isFormEditable() && !ctx.createMode() ? 7 : -1);
      \u0275\u0275advance(3);
      \u0275\u0275conditional(ctx.isFormEditable() || ctx.createMode() && ctx.formFields.length ? 10 : -1);
      \u0275\u0275advance();
      \u0275\u0275conditional(!ctx.isFormEditable() && !ctx.createMode() ? 11 : -1);
    }
  }, dependencies: [
    CommonModule,
    NgClass,
    ButtonModule,
    InputTextModule,
    GridComponent,
    DynamicFormComponent
  ], encapsulation: 2 });
};
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(GeofenceDetailsSectionComponent, [{
    type: Component,
    args: [{ selector: "app-geofence-details-section", imports: [
      CommonModule,
      ButtonModule,
      InputTextModule,
      GridComponent,
      DynamicFormComponent
    ], template: `<div class="card pt-2">
  <div class="mb-4 p-2 flex justify-start items-center">
    <span
      class="pi pi-map !text-[2.5rem]"
      [ngClass]="{ 'icon-primary': isFormEditable() }"
      [attr.aria-label]="'map icon'"
    ></span>

    <div class="pl-6 flex-1">
      <div class="flex justify-between items-center">
        <h2 class="text-xl font-semibold m-0">Geofence Details</h2>
        @if (!isFormEditable() && !createMode()) {
          <div class="icon-light">
            <span
              class="pi pi-pen-to-square action hover !text-2xl"
              [attr.aria-label]="'Edit geofence details'"
              (click)="onEdit()"
              (keydown.enter)="onEdit()"
            ></span>
          </div>
        }
      </div>
      <span>Configure various details about your Geofence.</span>
    </div>
  </div>

  @if (isFormEditable() || (createMode() && formFields.length)) {
    <app-dynamic-form
      [fields]="formFields"
      [actions]="actions"
      [hideActions]="createMode()"
      (formSubmit)="onSubmit($event)"
      (formValidityChange)="onFormValidityChange($event)"
      (formValueChange)="onFormValueChange($event)"
    >
    </app-dynamic-form>
  }

  @if (!isFormEditable() && !createMode()) {
    <app-grid
      [data]="geofenceDetails()"
      [columns]="columns"
      [showGridLines]="false"
      [hideHeader]="true"
      tableStyleClass="info-display !w-auto"
    ></app-grid>
  }
</div>
` }]
  }], () => [], { ownerId: [{ type: Input, args: [{ isSignal: true, alias: "ownerId", required: false }] }] });
})();
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && \u0275setClassDebugInfo(GeofenceDetailsSectionComponent, { className: "GeofenceDetailsSectionComponent", filePath: "src/app/features/administration/components/geofences/geofence-details-section/geofence-details-section.component.ts", lineNumber: 52 });
})();

// node_modules/@angular/google-maps/fesm2022/google-maps.mjs
var _c026 = ["*"];
var MapEventManager = class {
  _ngZone;
  /** Pending listeners that were added before the target was set. */
  _pending = [];
  _listeners = [];
  _targetStream = new BehaviorSubject(void 0);
  /** Clears all currently-registered event listeners. */
  _clearListeners() {
    for (const listener of this._listeners) {
      listener.remove();
    }
    this._listeners = [];
  }
  constructor(_ngZone) {
    this._ngZone = _ngZone;
  }
  /** Gets an observable that adds an event listener to the map when a consumer subscribes to it. */
  getLazyEmitter(name) {
    return this._targetStream.pipe(switchMap((target) => {
      const observable = new Observable((observer) => {
        if (!target) {
          this._pending.push({
            observable,
            observer
          });
          return void 0;
        }
        const listener = target.addListener(name, (event) => {
          this._ngZone.run(() => observer.next(event));
        });
        if (!listener) {
          observer.complete();
          return void 0;
        }
        this._listeners.push(listener);
        return () => listener.remove();
      });
      return observable;
    }));
  }
  /** Sets the current target that the manager should bind events to. */
  setTarget(target) {
    const currentTarget = this._targetStream.value;
    if (target === currentTarget) {
      return;
    }
    if (currentTarget) {
      this._clearListeners();
      this._pending = [];
    }
    this._targetStream.next(target);
    this._pending.forEach((subscriber) => subscriber.observable.subscribe(subscriber.observer));
    this._pending = [];
  }
  /** Destroys the manager and clears the event listeners. */
  destroy() {
    this._clearListeners();
    this._pending = [];
    this._targetStream.complete();
  }
};
var DEFAULT_OPTIONS = {
  center: {
    lat: 37.421995,
    lng: -122.084092
  },
  zoom: 17,
  // Note: the type conversion here isn't necessary for our CI, but it resolves a g3 failure.
  mapTypeId: "roadmap"
};
var DEFAULT_HEIGHT = "500px";
var DEFAULT_WIDTH = "500px";
var GoogleMap = class _GoogleMap {
  _elementRef = inject(ElementRef);
  _ngZone = inject(NgZone);
  _eventManager = new MapEventManager(inject(NgZone));
  _mapEl;
  _existingAuthFailureCallback;
  /**
   * The underlying google.maps.Map object
   *
   * See developers.google.com/maps/documentation/javascript/reference/map#Map
   */
  googleMap;
  /** Whether we're currently rendering inside a browser. */
  _isBrowser;
  /** Height of the map. Set this to `null` if you'd like to control the height through CSS. */
  height = DEFAULT_HEIGHT;
  /** Width of the map. Set this to `null` if you'd like to control the width through CSS. */
  width = DEFAULT_WIDTH;
  /**
   * The Map ID of the map. This parameter cannot be set or changed after a map is instantiated.
   * See: https://developers.google.com/maps/documentation/javascript/reference/map#MapOptions.mapId
   */
  mapId;
  /**
   * Type of map that should be rendered. E.g. hybrid map, terrain map etc.
   * See: https://developers.google.com/maps/documentation/javascript/reference/map#MapTypeId
   */
  mapTypeId;
  set center(center) {
    this._center = center;
  }
  _center;
  set zoom(zoom) {
    this._zoom = zoom;
  }
  _zoom;
  set options(options) {
    this._options = options || DEFAULT_OPTIONS;
  }
  _options = DEFAULT_OPTIONS;
  /** Event emitted when the map is initialized. */
  mapInitialized = new EventEmitter();
  /**
   * See
   * https://developers.google.com/maps/documentation/javascript/events#auth-errors
   */
  authFailure = new EventEmitter();
  /**
   * See
   * https://developers.google.com/maps/documentation/javascript/reference/map#Map.bounds_changed
   */
  boundsChanged = this._eventManager.getLazyEmitter("bounds_changed");
  /**
   * See
   * https://developers.google.com/maps/documentation/javascript/reference/map#Map.center_changed
   */
  centerChanged = this._eventManager.getLazyEmitter("center_changed");
  /**
   * See
   * https://developers.google.com/maps/documentation/javascript/reference/map#Map.click
   */
  mapClick = this._eventManager.getLazyEmitter("click");
  /**
   * See
   * https://developers.google.com/maps/documentation/javascript/reference/map#Map.dblclick
   */
  mapDblclick = this._eventManager.getLazyEmitter("dblclick");
  /**
   * See
   * https://developers.google.com/maps/documentation/javascript/reference/map#Map.drag
   */
  mapDrag = this._eventManager.getLazyEmitter("drag");
  /**
   * See
   * https://developers.google.com/maps/documentation/javascript/reference/map#Map.dragend
   */
  mapDragend = this._eventManager.getLazyEmitter("dragend");
  /**
   * See
   * https://developers.google.com/maps/documentation/javascript/reference/map#Map.dragstart
   */
  mapDragstart = this._eventManager.getLazyEmitter("dragstart");
  /**
   * See
   * https://developers.google.com/maps/documentation/javascript/reference/map#Map.heading_changed
   */
  headingChanged = this._eventManager.getLazyEmitter("heading_changed");
  /**
   * See
   * https://developers.google.com/maps/documentation/javascript/reference/map#Map.idle
   */
  idle = this._eventManager.getLazyEmitter("idle");
  /**
   * See
   * https://developers.google.com/maps/documentation/javascript/reference/map#Map.maptypeid_changed
   */
  maptypeidChanged = this._eventManager.getLazyEmitter("maptypeid_changed");
  /**
   * See
   * https://developers.google.com/maps/documentation/javascript/reference/map#Map.mousemove
   */
  mapMousemove = this._eventManager.getLazyEmitter("mousemove");
  /**
   * See
   * https://developers.google.com/maps/documentation/javascript/reference/map#Map.mouseout
   */
  mapMouseout = this._eventManager.getLazyEmitter("mouseout");
  /**
   * See
   * https://developers.google.com/maps/documentation/javascript/reference/map#Map.mouseover
   */
  mapMouseover = this._eventManager.getLazyEmitter("mouseover");
  /**
   * See
   * developers.google.com/maps/documentation/javascript/reference/map#Map.projection_changed
   */
  projectionChanged = this._eventManager.getLazyEmitter("projection_changed");
  /**
   * See
   * https://developers.google.com/maps/documentation/javascript/reference/map#Map.rightclick
   */
  mapRightclick = this._eventManager.getLazyEmitter("rightclick");
  /**
   * See
   * https://developers.google.com/maps/documentation/javascript/reference/map#Map.tilesloaded
   */
  tilesloaded = this._eventManager.getLazyEmitter("tilesloaded");
  /**
   * See
   * https://developers.google.com/maps/documentation/javascript/reference/map#Map.tilt_changed
   */
  tiltChanged = this._eventManager.getLazyEmitter("tilt_changed");
  /**
   * See
   * https://developers.google.com/maps/documentation/javascript/reference/map#Map.zoom_changed
   */
  zoomChanged = this._eventManager.getLazyEmitter("zoom_changed");
  constructor() {
    const platformId = inject(PLATFORM_ID);
    this._isBrowser = isPlatformBrowser(platformId);
    if (this._isBrowser) {
      const googleMapsWindow = window;
      if (!googleMapsWindow.google && (typeof ngDevMode === "undefined" || ngDevMode)) {
        throw Error("Namespace google not found, cannot construct embedded google map. Please install the Google Maps JavaScript API: https://developers.google.com/maps/documentation/javascript/tutorial#Loading_the_Maps_API");
      }
      this._existingAuthFailureCallback = googleMapsWindow.gm_authFailure;
      googleMapsWindow.gm_authFailure = () => {
        if (this._existingAuthFailureCallback) {
          this._existingAuthFailureCallback();
        }
        this.authFailure.emit();
      };
    }
  }
  ngOnChanges(changes) {
    if (changes["height"] || changes["width"]) {
      this._setSize();
    }
    const googleMap = this.googleMap;
    if (googleMap) {
      if (changes["options"]) {
        googleMap.setOptions(this._combineOptions());
      }
      if (changes["center"] && this._center) {
        googleMap.setCenter(this._center);
      }
      if (changes["zoom"] && this._zoom != null) {
        googleMap.setZoom(this._zoom);
      }
      if (changes["mapTypeId"] && this.mapTypeId) {
        googleMap.setMapTypeId(this.mapTypeId);
      }
    }
  }
  ngOnInit() {
    if (this._isBrowser) {
      this._mapEl = this._elementRef.nativeElement.querySelector(".map-container");
      this._setSize();
      if (google.maps.Map) {
        this._initialize(google.maps.Map);
      } else {
        this._ngZone.runOutsideAngular(() => {
          google.maps.importLibrary("maps").then((lib) => this._initialize(lib.Map));
        });
      }
    }
  }
  _initialize(mapConstructor) {
    this._ngZone.runOutsideAngular(() => {
      this.googleMap = new mapConstructor(this._mapEl, this._combineOptions());
      this._eventManager.setTarget(this.googleMap);
      this.mapInitialized.emit(this.googleMap);
    });
  }
  ngOnDestroy() {
    this.mapInitialized.complete();
    this._eventManager.destroy();
    if (this._isBrowser) {
      const googleMapsWindow = window;
      googleMapsWindow.gm_authFailure = this._existingAuthFailureCallback;
    }
  }
  /**
   * See
   * https://developers.google.com/maps/documentation/javascript/reference/map#Map.fitBounds
   */
  fitBounds(bounds, padding) {
    this._assertInitialized();
    this.googleMap.fitBounds(bounds, padding);
  }
  /**
   * See
   * https://developers.google.com/maps/documentation/javascript/reference/map#Map.panBy
   */
  panBy(x, y) {
    this._assertInitialized();
    this.googleMap.panBy(x, y);
  }
  /**
   * See
   * https://developers.google.com/maps/documentation/javascript/reference/map#Map.panTo
   */
  panTo(latLng) {
    this._assertInitialized();
    this.googleMap.panTo(latLng);
  }
  /**
   * See
   * https://developers.google.com/maps/documentation/javascript/reference/map#Map.panToBounds
   */
  panToBounds(latLngBounds, padding) {
    this._assertInitialized();
    this.googleMap.panToBounds(latLngBounds, padding);
  }
  /**
   * See
   * https://developers.google.com/maps/documentation/javascript/reference/map#Map.getBounds
   */
  getBounds() {
    this._assertInitialized();
    return this.googleMap.getBounds() || null;
  }
  /**
   * See
   * https://developers.google.com/maps/documentation/javascript/reference/map#Map.getCenter
   */
  getCenter() {
    this._assertInitialized();
    return this.googleMap.getCenter();
  }
  /**
   * See
   * https://developers.google.com/maps/documentation/javascript/reference/map#Map.getClickableIcons
   */
  getClickableIcons() {
    this._assertInitialized();
    return this.googleMap.getClickableIcons();
  }
  /**
   * See
   * https://developers.google.com/maps/documentation/javascript/reference/map#Map.getHeading
   */
  getHeading() {
    this._assertInitialized();
    return this.googleMap.getHeading();
  }
  /**
   * See
   * https://developers.google.com/maps/documentation/javascript/reference/map#Map.getMapTypeId
   */
  getMapTypeId() {
    this._assertInitialized();
    return this.googleMap.getMapTypeId();
  }
  /**
   * See
   * https://developers.google.com/maps/documentation/javascript/reference/map#Map.getProjection
   */
  getProjection() {
    this._assertInitialized();
    return this.googleMap.getProjection() || null;
  }
  /**
   * See
   * https://developers.google.com/maps/documentation/javascript/reference/map#Map.getStreetView
   */
  getStreetView() {
    this._assertInitialized();
    return this.googleMap.getStreetView();
  }
  /**
   * See
   * https://developers.google.com/maps/documentation/javascript/reference/map#Map.getTilt
   */
  getTilt() {
    this._assertInitialized();
    return this.googleMap.getTilt();
  }
  /**
   * See
   * https://developers.google.com/maps/documentation/javascript/reference/map#Map.getZoom
   */
  getZoom() {
    this._assertInitialized();
    return this.googleMap.getZoom();
  }
  /**
   * See
   * https://developers.google.com/maps/documentation/javascript/reference/map#Map.controls
   */
  get controls() {
    this._assertInitialized();
    return this.googleMap.controls;
  }
  /**
   * See
   * https://developers.google.com/maps/documentation/javascript/reference/map#Map.data
   */
  get data() {
    this._assertInitialized();
    return this.googleMap.data;
  }
  /**
   * See
   * https://developers.google.com/maps/documentation/javascript/reference/map#Map.mapTypes
   */
  get mapTypes() {
    this._assertInitialized();
    return this.googleMap.mapTypes;
  }
  /**
   * See
   * https://developers.google.com/maps/documentation/javascript/reference/map#Map.overlayMapTypes
   */
  get overlayMapTypes() {
    this._assertInitialized();
    return this.googleMap.overlayMapTypes;
  }
  /** Returns a promise that resolves when the map has been initialized. */
  _resolveMap() {
    return this.googleMap ? Promise.resolve(this.googleMap) : this.mapInitialized.pipe(take(1)).toPromise();
  }
  _setSize() {
    if (this._mapEl) {
      const styles = this._mapEl.style;
      styles.height = this.height === null ? "" : coerceCssPixelValue(this.height) || DEFAULT_HEIGHT;
      styles.width = this.width === null ? "" : coerceCssPixelValue(this.width) || DEFAULT_WIDTH;
    }
  }
  /** Combines the center and zoom and the other map options into a single object */
  _combineOptions() {
    const options = this._options || {};
    return __spreadProps(__spreadValues({}, options), {
      // It's important that we set **some** kind of `center` and `zoom`, otherwise
      // Google Maps will render a blank rectangle which looks broken.
      center: this._center || options.center || DEFAULT_OPTIONS.center,
      zoom: this._zoom ?? options.zoom ?? DEFAULT_OPTIONS.zoom,
      // Passing in an undefined `mapTypeId` seems to break tile loading
      // so make sure that we have some kind of default (see #22082).
      mapTypeId: this.mapTypeId || options.mapTypeId || DEFAULT_OPTIONS.mapTypeId,
      mapId: this.mapId || options.mapId
    });
  }
  /** Asserts that the map has been initialized. */
  _assertInitialized() {
    if (!this.googleMap && (typeof ngDevMode === "undefined" || ngDevMode)) {
      throw Error("Cannot access Google Map information before the API has been initialized. Please wait for the API to load before trying to interact with it.");
    }
  }
  static \u0275fac = function GoogleMap_Factory(__ngFactoryType__) {
    return new (__ngFactoryType__ || _GoogleMap)();
  };
  static \u0275cmp = /* @__PURE__ */ \u0275\u0275defineComponent({
    type: _GoogleMap,
    selectors: [["google-map"]],
    inputs: {
      height: "height",
      width: "width",
      mapId: "mapId",
      mapTypeId: "mapTypeId",
      center: "center",
      zoom: "zoom",
      options: "options"
    },
    outputs: {
      mapInitialized: "mapInitialized",
      authFailure: "authFailure",
      boundsChanged: "boundsChanged",
      centerChanged: "centerChanged",
      mapClick: "mapClick",
      mapDblclick: "mapDblclick",
      mapDrag: "mapDrag",
      mapDragend: "mapDragend",
      mapDragstart: "mapDragstart",
      headingChanged: "headingChanged",
      idle: "idle",
      maptypeidChanged: "maptypeidChanged",
      mapMousemove: "mapMousemove",
      mapMouseout: "mapMouseout",
      mapMouseover: "mapMouseover",
      projectionChanged: "projectionChanged",
      mapRightclick: "mapRightclick",
      tilesloaded: "tilesloaded",
      tiltChanged: "tiltChanged",
      zoomChanged: "zoomChanged"
    },
    exportAs: ["googleMap"],
    features: [\u0275\u0275NgOnChangesFeature],
    ngContentSelectors: _c026,
    decls: 2,
    vars: 0,
    consts: [[1, "map-container"]],
    template: function GoogleMap_Template(rf, ctx) {
      if (rf & 1) {
        \u0275\u0275projectionDef();
        \u0275\u0275domElement(0, "div", 0);
        \u0275\u0275projection(1);
      }
    },
    encapsulation: 2,
    changeDetection: 0
  });
};
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(GoogleMap, [{
    type: Component,
    args: [{
      selector: "google-map",
      exportAs: "googleMap",
      changeDetection: ChangeDetectionStrategy.OnPush,
      template: '<div class="map-container"></div><ng-content />',
      encapsulation: ViewEncapsulation.None
    }]
  }], () => [], {
    height: [{
      type: Input
    }],
    width: [{
      type: Input
    }],
    mapId: [{
      type: Input
    }],
    mapTypeId: [{
      type: Input
    }],
    center: [{
      type: Input
    }],
    zoom: [{
      type: Input
    }],
    options: [{
      type: Input
    }],
    mapInitialized: [{
      type: Output
    }],
    authFailure: [{
      type: Output
    }],
    boundsChanged: [{
      type: Output
    }],
    centerChanged: [{
      type: Output
    }],
    mapClick: [{
      type: Output
    }],
    mapDblclick: [{
      type: Output
    }],
    mapDrag: [{
      type: Output
    }],
    mapDragend: [{
      type: Output
    }],
    mapDragstart: [{
      type: Output
    }],
    headingChanged: [{
      type: Output
    }],
    idle: [{
      type: Output
    }],
    maptypeidChanged: [{
      type: Output
    }],
    mapMousemove: [{
      type: Output
    }],
    mapMouseout: [{
      type: Output
    }],
    mapMouseover: [{
      type: Output
    }],
    projectionChanged: [{
      type: Output
    }],
    mapRightclick: [{
      type: Output
    }],
    tilesloaded: [{
      type: Output
    }],
    tiltChanged: [{
      type: Output
    }],
    zoomChanged: [{
      type: Output
    }]
  });
})();
var cssUnitsPattern = /([A-Za-z%]+)$/;
function coerceCssPixelValue(value) {
  if (value == null) {
    return "";
  }
  return cssUnitsPattern.test(value) ? value : `${value}px`;
}
var MapBaseLayer = class _MapBaseLayer {
  _map = inject(GoogleMap);
  _ngZone = inject(NgZone);
  constructor() {
  }
  ngOnInit() {
    if (this._map._isBrowser) {
      this._ngZone.runOutsideAngular(() => {
        this._initializeObject();
      });
      this._assertInitialized();
      this._setMap();
    }
  }
  ngOnDestroy() {
    this._unsetMap();
  }
  _assertInitialized() {
    if (!this._map.googleMap) {
      throw Error("Cannot access Google Map information before the API has been initialized. Please wait for the API to load before trying to interact with it.");
    }
  }
  _initializeObject() {
  }
  _setMap() {
  }
  _unsetMap() {
  }
  static \u0275fac = function MapBaseLayer_Factory(__ngFactoryType__) {
    return new (__ngFactoryType__ || _MapBaseLayer)();
  };
  static \u0275dir = /* @__PURE__ */ \u0275\u0275defineDirective({
    type: _MapBaseLayer,
    selectors: [["map-base-layer"]],
    exportAs: ["mapBaseLayer"]
  });
};
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(MapBaseLayer, [{
    type: Directive,
    args: [{
      selector: "map-base-layer",
      exportAs: "mapBaseLayer"
    }]
  }], () => [], null);
})();
var MapBicyclingLayer = class _MapBicyclingLayer {
  _map = inject(GoogleMap);
  _zone = inject(NgZone);
  /**
   * The underlying google.maps.BicyclingLayer object.
   *
   * See developers.google.com/maps/documentation/javascript/reference/map#BicyclingLayer
   */
  bicyclingLayer;
  /** Event emitted when the bicycling layer is initialized. */
  bicyclingLayerInitialized = new EventEmitter();
  ngOnInit() {
    if (this._map._isBrowser) {
      if (google.maps.BicyclingLayer && this._map.googleMap) {
        this._initialize(this._map.googleMap, google.maps.BicyclingLayer);
      } else {
        this._zone.runOutsideAngular(() => {
          Promise.all([this._map._resolveMap(), google.maps.importLibrary("maps")]).then(([map2, lib]) => {
            this._initialize(map2, lib.BicyclingLayer);
          });
        });
      }
    }
  }
  _initialize(map2, layerConstructor) {
    this._zone.runOutsideAngular(() => {
      this.bicyclingLayer = new layerConstructor();
      this.bicyclingLayerInitialized.emit(this.bicyclingLayer);
      this._assertLayerInitialized();
      this.bicyclingLayer.setMap(map2);
    });
  }
  ngOnDestroy() {
    this.bicyclingLayer?.setMap(null);
  }
  _assertLayerInitialized() {
    if (!this.bicyclingLayer) {
      throw Error("Cannot interact with a Google Map Bicycling Layer before it has been initialized. Please wait for the Transit Layer to load before trying to interact with it.");
    }
  }
  static \u0275fac = function MapBicyclingLayer_Factory(__ngFactoryType__) {
    return new (__ngFactoryType__ || _MapBicyclingLayer)();
  };
  static \u0275dir = /* @__PURE__ */ \u0275\u0275defineDirective({
    type: _MapBicyclingLayer,
    selectors: [["map-bicycling-layer"]],
    outputs: {
      bicyclingLayerInitialized: "bicyclingLayerInitialized"
    },
    exportAs: ["mapBicyclingLayer"]
  });
};
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(MapBicyclingLayer, [{
    type: Directive,
    args: [{
      selector: "map-bicycling-layer",
      exportAs: "mapBicyclingLayer"
    }]
  }], null, {
    bicyclingLayerInitialized: [{
      type: Output
    }]
  });
})();
var MapCircle = class _MapCircle {
  _map = inject(GoogleMap);
  _ngZone = inject(NgZone);
  _eventManager = new MapEventManager(inject(NgZone));
  _options = new BehaviorSubject({});
  _center = new BehaviorSubject(void 0);
  _radius = new BehaviorSubject(void 0);
  _destroyed = new Subject();
  /**
   * Underlying google.maps.Circle object.
   *
   * @see developers.google.com/maps/documentation/javascript/reference/polygon#Circle
   */
  circle;
  // initialized in ngOnInit
  set options(options) {
    this._options.next(options || {});
  }
  set center(center) {
    this._center.next(center);
  }
  set radius(radius) {
    this._radius.next(radius);
  }
  /**
   * @see
   * developers.google.com/maps/documentation/javascript/reference/polygon#Circle.center_changed
   */
  centerChanged = this._eventManager.getLazyEmitter("center_changed");
  /**
   * @see
   * developers.google.com/maps/documentation/javascript/reference/polygon#Circle.click
   */
  circleClick = this._eventManager.getLazyEmitter("click");
  /**
   * @see
   * developers.google.com/maps/documentation/javascript/reference/polygon#Circle.dblclick
   */
  circleDblclick = this._eventManager.getLazyEmitter("dblclick");
  /**
   * @see
   * developers.google.com/maps/documentation/javascript/reference/polygon#Circle.drag
   */
  circleDrag = this._eventManager.getLazyEmitter("drag");
  /**
   * @see
   * developers.google.com/maps/documentation/javascript/reference/polygon#Circle.dragend
   */
  circleDragend = this._eventManager.getLazyEmitter("dragend");
  /**
   * @see
   * developers.google.com/maps/documentation/javascript/reference/polygon#Circle.dragstart
   */
  circleDragstart = this._eventManager.getLazyEmitter("dragstart");
  /**
   * @see
   * developers.google.com/maps/documentation/javascript/reference/polygon#Circle.mousedown
   */
  circleMousedown = this._eventManager.getLazyEmitter("mousedown");
  /**
   * @see
   * developers.google.com/maps/documentation/javascript/reference/polygon#Circle.mousemove
   */
  circleMousemove = this._eventManager.getLazyEmitter("mousemove");
  /**
   * @see
   * developers.google.com/maps/documentation/javascript/reference/polygon#Circle.mouseout
   */
  circleMouseout = this._eventManager.getLazyEmitter("mouseout");
  /**
   * @see
   * developers.google.com/maps/documentation/javascript/reference/polygon#Circle.mouseover
   */
  circleMouseover = this._eventManager.getLazyEmitter("mouseover");
  /**
   * @see
   * developers.google.com/maps/documentation/javascript/reference/polygon#Circle.mouseup
   */
  circleMouseup = this._eventManager.getLazyEmitter("mouseup");
  /**
   * @see
   * developers.google.com/maps/documentation/javascript/reference/polygon#Circle.radius_changed
   */
  radiusChanged = this._eventManager.getLazyEmitter("radius_changed");
  /**
   * @see
   * developers.google.com/maps/documentation/javascript/reference/polygon#Circle.rightclick
   */
  circleRightclick = this._eventManager.getLazyEmitter("rightclick");
  /** Event emitted when the circle is initialized. */
  circleInitialized = new EventEmitter();
  constructor() {
  }
  ngOnInit() {
    if (!this._map._isBrowser) {
      return;
    }
    this._combineOptions().pipe(take(1)).subscribe((options) => {
      if (google.maps.Circle && this._map.googleMap) {
        this._initialize(this._map.googleMap, google.maps.Circle, options);
      } else {
        this._ngZone.runOutsideAngular(() => {
          Promise.all([this._map._resolveMap(), google.maps.importLibrary("maps")]).then(([map2, lib]) => {
            this._initialize(map2, lib.Circle, options);
          });
        });
      }
    });
  }
  _initialize(map2, circleConstructor, options) {
    this._ngZone.runOutsideAngular(() => {
      this.circle = new circleConstructor(options);
      this._assertInitialized();
      this.circle.setMap(map2);
      this._eventManager.setTarget(this.circle);
      this.circleInitialized.emit(this.circle);
      this._watchForOptionsChanges();
      this._watchForCenterChanges();
      this._watchForRadiusChanges();
    });
  }
  ngOnDestroy() {
    this._eventManager.destroy();
    this._destroyed.next();
    this._destroyed.complete();
    this.circle?.setMap(null);
  }
  /**
   * @see
   * developers.google.com/maps/documentation/javascript/reference/polygon#Circle.getBounds
   */
  getBounds() {
    this._assertInitialized();
    return this.circle.getBounds();
  }
  /**
   * @see
   * developers.google.com/maps/documentation/javascript/reference/polygon#Circle.getCenter
   */
  getCenter() {
    this._assertInitialized();
    return this.circle.getCenter();
  }
  /**
   * @see
   * developers.google.com/maps/documentation/javascript/reference/polygon#Circle.getDraggable
   */
  getDraggable() {
    this._assertInitialized();
    return this.circle.getDraggable();
  }
  /**
   * @see
   * developers.google.com/maps/documentation/javascript/reference/polygon#Circle.getEditable
   */
  getEditable() {
    this._assertInitialized();
    return this.circle.getEditable();
  }
  /**
   * @see
   * developers.google.com/maps/documentation/javascript/reference/polygon#Circle.getRadius
   */
  getRadius() {
    this._assertInitialized();
    return this.circle.getRadius();
  }
  /**
   * @see
   * developers.google.com/maps/documentation/javascript/reference/polygon#Circle.getVisible
   */
  getVisible() {
    this._assertInitialized();
    return this.circle.getVisible();
  }
  _combineOptions() {
    return combineLatest([this._options, this._center, this._radius]).pipe(map(([options, center, radius]) => {
      const combinedOptions = __spreadProps(__spreadValues({}, options), {
        center: center || options.center,
        radius: radius !== void 0 ? radius : options.radius
      });
      return combinedOptions;
    }));
  }
  _watchForOptionsChanges() {
    this._options.pipe(takeUntil(this._destroyed)).subscribe((options) => {
      this._assertInitialized();
      this.circle.setOptions(options);
    });
  }
  _watchForCenterChanges() {
    this._center.pipe(takeUntil(this._destroyed)).subscribe((center) => {
      if (center) {
        this._assertInitialized();
        this.circle.setCenter(center);
      }
    });
  }
  _watchForRadiusChanges() {
    this._radius.pipe(takeUntil(this._destroyed)).subscribe((radius) => {
      if (radius !== void 0) {
        this._assertInitialized();
        this.circle.setRadius(radius);
      }
    });
  }
  _assertInitialized() {
    if (typeof ngDevMode === "undefined" || ngDevMode) {
      if (!this.circle) {
        throw Error("Cannot interact with a Google Map Circle before it has been initialized. Please wait for the Circle to load before trying to interact with it.");
      }
    }
  }
  static \u0275fac = function MapCircle_Factory(__ngFactoryType__) {
    return new (__ngFactoryType__ || _MapCircle)();
  };
  static \u0275dir = /* @__PURE__ */ \u0275\u0275defineDirective({
    type: _MapCircle,
    selectors: [["map-circle"]],
    inputs: {
      options: "options",
      center: "center",
      radius: "radius"
    },
    outputs: {
      centerChanged: "centerChanged",
      circleClick: "circleClick",
      circleDblclick: "circleDblclick",
      circleDrag: "circleDrag",
      circleDragend: "circleDragend",
      circleDragstart: "circleDragstart",
      circleMousedown: "circleMousedown",
      circleMousemove: "circleMousemove",
      circleMouseout: "circleMouseout",
      circleMouseover: "circleMouseover",
      circleMouseup: "circleMouseup",
      radiusChanged: "radiusChanged",
      circleRightclick: "circleRightclick",
      circleInitialized: "circleInitialized"
    },
    exportAs: ["mapCircle"]
  });
};
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(MapCircle, [{
    type: Directive,
    args: [{
      selector: "map-circle",
      exportAs: "mapCircle"
    }]
  }], () => [], {
    options: [{
      type: Input
    }],
    center: [{
      type: Input
    }],
    radius: [{
      type: Input
    }],
    centerChanged: [{
      type: Output
    }],
    circleClick: [{
      type: Output
    }],
    circleDblclick: [{
      type: Output
    }],
    circleDrag: [{
      type: Output
    }],
    circleDragend: [{
      type: Output
    }],
    circleDragstart: [{
      type: Output
    }],
    circleMousedown: [{
      type: Output
    }],
    circleMousemove: [{
      type: Output
    }],
    circleMouseout: [{
      type: Output
    }],
    circleMouseover: [{
      type: Output
    }],
    circleMouseup: [{
      type: Output
    }],
    radiusChanged: [{
      type: Output
    }],
    circleRightclick: [{
      type: Output
    }],
    circleInitialized: [{
      type: Output
    }]
  });
})();
var MapDirectionsRenderer = class _MapDirectionsRenderer {
  _googleMap = inject(GoogleMap);
  _ngZone = inject(NgZone);
  _eventManager = new MapEventManager(inject(NgZone));
  /**
   * See developers.google.com/maps/documentation/javascript/reference/directions
   * #DirectionsRendererOptions.directions
   */
  set directions(directions) {
    this._directions = directions;
  }
  _directions;
  /**
   * See developers.google.com/maps/documentation/javascript/reference/directions
   * #DirectionsRendererOptions
   */
  set options(options) {
    this._options = options;
  }
  _options;
  /**
   * See developers.google.com/maps/documentation/javascript/reference/directions
   * #DirectionsRenderer.directions_changed
   */
  directionsChanged = this._eventManager.getLazyEmitter("directions_changed");
  /** Event emitted when the directions renderer is initialized. */
  directionsRendererInitialized = new EventEmitter();
  /** The underlying google.maps.DirectionsRenderer object. */
  directionsRenderer;
  constructor() {
  }
  ngOnInit() {
    if (this._googleMap._isBrowser) {
      if (google.maps.DirectionsRenderer && this._googleMap.googleMap) {
        this._initialize(this._googleMap.googleMap, google.maps.DirectionsRenderer);
      } else {
        this._ngZone.runOutsideAngular(() => {
          Promise.all([this._googleMap._resolveMap(), google.maps.importLibrary("routes")]).then(([map2, lib]) => {
            this._initialize(map2, lib.DirectionsRenderer);
          });
        });
      }
    }
  }
  _initialize(map2, rendererConstructor) {
    this._ngZone.runOutsideAngular(() => {
      this.directionsRenderer = new rendererConstructor(this._combineOptions());
      this._assertInitialized();
      this.directionsRenderer.setMap(map2);
      this._eventManager.setTarget(this.directionsRenderer);
      this.directionsRendererInitialized.emit(this.directionsRenderer);
    });
  }
  ngOnChanges(changes) {
    if (this.directionsRenderer) {
      if (changes["options"]) {
        this.directionsRenderer.setOptions(this._combineOptions());
      }
      if (changes["directions"] && this._directions !== void 0) {
        this.directionsRenderer.setDirections(this._directions);
      }
    }
  }
  ngOnDestroy() {
    this._eventManager.destroy();
    this.directionsRenderer?.setMap(null);
  }
  /**
   * See developers.google.com/maps/documentation/javascript/reference/directions
   * #DirectionsRenderer.getDirections
   */
  getDirections() {
    this._assertInitialized();
    return this.directionsRenderer.getDirections();
  }
  /**
   * See developers.google.com/maps/documentation/javascript/reference/directions
   * #DirectionsRenderer.getPanel
   */
  getPanel() {
    this._assertInitialized();
    return this.directionsRenderer.getPanel();
  }
  /**
   * See developers.google.com/maps/documentation/javascript/reference/directions
   * #DirectionsRenderer.getRouteIndex
   */
  getRouteIndex() {
    this._assertInitialized();
    return this.directionsRenderer.getRouteIndex();
  }
  _combineOptions() {
    const options = this._options || {};
    return __spreadProps(__spreadValues({}, options), {
      directions: this._directions || options.directions,
      map: this._googleMap.googleMap
    });
  }
  _assertInitialized() {
    if (typeof ngDevMode === "undefined" || ngDevMode) {
      if (!this.directionsRenderer) {
        throw Error("Cannot interact with a Google Map Directions Renderer before it has been initialized. Please wait for the Directions Renderer to load before trying to interact with it.");
      }
    }
  }
  static \u0275fac = function MapDirectionsRenderer_Factory(__ngFactoryType__) {
    return new (__ngFactoryType__ || _MapDirectionsRenderer)();
  };
  static \u0275dir = /* @__PURE__ */ \u0275\u0275defineDirective({
    type: _MapDirectionsRenderer,
    selectors: [["map-directions-renderer"]],
    inputs: {
      directions: "directions",
      options: "options"
    },
    outputs: {
      directionsChanged: "directionsChanged",
      directionsRendererInitialized: "directionsRendererInitialized"
    },
    exportAs: ["mapDirectionsRenderer"],
    features: [\u0275\u0275NgOnChangesFeature]
  });
};
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(MapDirectionsRenderer, [{
    type: Directive,
    args: [{
      selector: "map-directions-renderer",
      exportAs: "mapDirectionsRenderer"
    }]
  }], () => [], {
    directions: [{
      type: Input
    }],
    options: [{
      type: Input
    }],
    directionsChanged: [{
      type: Output
    }],
    directionsRendererInitialized: [{
      type: Output
    }]
  });
})();
var MapGroundOverlay = class _MapGroundOverlay {
  _map = inject(GoogleMap);
  _ngZone = inject(NgZone);
  _eventManager = new MapEventManager(inject(NgZone));
  _opacity = new BehaviorSubject(1);
  _url = new BehaviorSubject("");
  _bounds = new BehaviorSubject(void 0);
  _destroyed = new Subject();
  _hasWatchers;
  /**
   * The underlying google.maps.GroundOverlay object.
   *
   * See developers.google.com/maps/documentation/javascript/reference/image-overlay#GroundOverlay
   */
  groundOverlay;
  /** URL of the image that will be shown in the overlay. */
  set url(url) {
    this._url.next(url);
  }
  /** Bounds for the overlay. */
  get bounds() {
    return this._bounds.value;
  }
  set bounds(bounds) {
    this._bounds.next(bounds);
  }
  /** Whether the overlay is clickable */
  clickable = false;
  /** Opacity of the overlay. */
  set opacity(opacity) {
    this._opacity.next(opacity);
  }
  /**
   * See
   * developers.google.com/maps/documentation/javascript/reference/image-overlay#GroundOverlay.click
   */
  mapClick = this._eventManager.getLazyEmitter("click");
  /**
   * See
   * developers.google.com/maps/documentation/javascript/reference/image-overlay
   * #GroundOverlay.dblclick
   */
  mapDblclick = this._eventManager.getLazyEmitter("dblclick");
  /** Event emitted when the ground overlay is initialized. */
  groundOverlayInitialized = new EventEmitter();
  constructor() {
  }
  ngOnInit() {
    if (this._map._isBrowser) {
      this._bounds.pipe(takeUntil(this._destroyed)).subscribe((bounds) => {
        if (this.groundOverlay) {
          this.groundOverlay.setMap(null);
          this.groundOverlay = void 0;
        }
        if (!bounds) {
          return;
        }
        if (google.maps.GroundOverlay && this._map.googleMap) {
          this._initialize(this._map.googleMap, google.maps.GroundOverlay, bounds);
        } else {
          this._ngZone.runOutsideAngular(() => {
            Promise.all([this._map._resolveMap(), google.maps.importLibrary("maps")]).then(([map2, lib]) => {
              this._initialize(map2, lib.GroundOverlay, bounds);
            });
          });
        }
      });
    }
  }
  _initialize(map2, overlayConstructor, bounds) {
    this._ngZone.runOutsideAngular(() => {
      this.groundOverlay = new overlayConstructor(this._url.getValue(), bounds, {
        clickable: this.clickable,
        opacity: this._opacity.value
      });
      this._assertInitialized();
      this.groundOverlay.setMap(map2);
      this._eventManager.setTarget(this.groundOverlay);
      this.groundOverlayInitialized.emit(this.groundOverlay);
      if (!this._hasWatchers) {
        this._hasWatchers = true;
        this._watchForOpacityChanges();
        this._watchForUrlChanges();
      }
    });
  }
  ngOnDestroy() {
    this._eventManager.destroy();
    this._destroyed.next();
    this._destroyed.complete();
    this.groundOverlay?.setMap(null);
  }
  /**
   * See
   * developers.google.com/maps/documentation/javascript/reference/image-overlay
   * #GroundOverlay.getBounds
   */
  getBounds() {
    this._assertInitialized();
    return this.groundOverlay.getBounds();
  }
  /**
   * See
   * developers.google.com/maps/documentation/javascript/reference/image-overlay
   * #GroundOverlay.getOpacity
   */
  getOpacity() {
    this._assertInitialized();
    return this.groundOverlay.getOpacity();
  }
  /**
   * See
   * developers.google.com/maps/documentation/javascript/reference/image-overlay
   * #GroundOverlay.getUrl
   */
  getUrl() {
    this._assertInitialized();
    return this.groundOverlay.getUrl();
  }
  _watchForOpacityChanges() {
    this._opacity.pipe(takeUntil(this._destroyed)).subscribe((opacity) => {
      if (opacity != null) {
        this.groundOverlay?.setOpacity(opacity);
      }
    });
  }
  _watchForUrlChanges() {
    this._url.pipe(takeUntil(this._destroyed)).subscribe((url) => {
      const overlay = this.groundOverlay;
      if (overlay) {
        overlay.set("url", url);
        overlay.setMap(null);
        overlay.setMap(this._map.googleMap);
      }
    });
  }
  _assertInitialized() {
    if (typeof ngDevMode === "undefined" || ngDevMode) {
      if (!this.groundOverlay) {
        throw Error("Cannot interact with a Google Map GroundOverlay before it has been initialized. Please wait for the GroundOverlay to load before trying to interact with it.");
      }
    }
  }
  static \u0275fac = function MapGroundOverlay_Factory(__ngFactoryType__) {
    return new (__ngFactoryType__ || _MapGroundOverlay)();
  };
  static \u0275dir = /* @__PURE__ */ \u0275\u0275defineDirective({
    type: _MapGroundOverlay,
    selectors: [["map-ground-overlay"]],
    inputs: {
      url: "url",
      bounds: "bounds",
      clickable: "clickable",
      opacity: "opacity"
    },
    outputs: {
      mapClick: "mapClick",
      mapDblclick: "mapDblclick",
      groundOverlayInitialized: "groundOverlayInitialized"
    },
    exportAs: ["mapGroundOverlay"]
  });
};
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(MapGroundOverlay, [{
    type: Directive,
    args: [{
      selector: "map-ground-overlay",
      exportAs: "mapGroundOverlay"
    }]
  }], () => [], {
    url: [{
      type: Input
    }],
    bounds: [{
      type: Input
    }],
    clickable: [{
      type: Input
    }],
    opacity: [{
      type: Input
    }],
    mapClick: [{
      type: Output
    }],
    mapDblclick: [{
      type: Output
    }],
    groundOverlayInitialized: [{
      type: Output
    }]
  });
})();
var MapInfoWindow = class _MapInfoWindow {
  _googleMap = inject(GoogleMap);
  _elementRef = inject(ElementRef);
  _ngZone = inject(NgZone);
  _eventManager = new MapEventManager(inject(NgZone));
  _options = new BehaviorSubject({});
  _position = new BehaviorSubject(void 0);
  _destroy = new Subject();
  /**
   * Underlying google.maps.InfoWindow
   *
   * See developers.google.com/maps/documentation/javascript/reference/info-window#InfoWindow
   */
  infoWindow;
  set options(options) {
    this._options.next(options || {});
  }
  set position(position) {
    this._position.next(position);
  }
  /**
   * See
   * developers.google.com/maps/documentation/javascript/reference/info-window#InfoWindow.closeclick
   */
  closeclick = this._eventManager.getLazyEmitter("closeclick");
  /**
   * See
   * developers.google.com/maps/documentation/javascript/reference/info-window
   * #InfoWindow.content_changed
   */
  contentChanged = this._eventManager.getLazyEmitter("content_changed");
  /**
   * See
   * developers.google.com/maps/documentation/javascript/reference/info-window#InfoWindow.domready
   */
  domready = this._eventManager.getLazyEmitter("domready");
  /**
   * See
   * developers.google.com/maps/documentation/javascript/reference/info-window
   * #InfoWindow.position_changed
   */
  positionChanged = this._eventManager.getLazyEmitter("position_changed");
  /**
   * See
   * developers.google.com/maps/documentation/javascript/reference/info-window
   * #InfoWindow.zindex_changed
   */
  zindexChanged = this._eventManager.getLazyEmitter("zindex_changed");
  /** Event emitted when the info window is initialized. */
  infoWindowInitialized = new EventEmitter();
  constructor() {
  }
  ngOnInit() {
    if (this._googleMap._isBrowser) {
      this._combineOptions().pipe(take(1)).subscribe((options) => {
        if (google.maps.InfoWindow) {
          this._initialize(google.maps.InfoWindow, options);
        } else {
          this._ngZone.runOutsideAngular(() => {
            google.maps.importLibrary("maps").then((lib) => {
              this._initialize(lib.InfoWindow, options);
            });
          });
        }
      });
    }
  }
  _initialize(infoWindowConstructor, options) {
    this._ngZone.runOutsideAngular(() => {
      this.infoWindow = new infoWindowConstructor(options);
      this._eventManager.setTarget(this.infoWindow);
      this.infoWindowInitialized.emit(this.infoWindow);
      this._watchForOptionsChanges();
      this._watchForPositionChanges();
    });
  }
  ngOnDestroy() {
    this._eventManager.destroy();
    this._destroy.next();
    this._destroy.complete();
    if (this.infoWindow) {
      this.close();
    }
  }
  /**
   * See developers.google.com/maps/documentation/javascript/reference/info-window#InfoWindow.close
   */
  close() {
    this._assertInitialized();
    this.infoWindow.close();
  }
  /**
   * See
   * developers.google.com/maps/documentation/javascript/reference/info-window#InfoWindow.getContent
   */
  getContent() {
    this._assertInitialized();
    return this.infoWindow.getContent() || null;
  }
  /**
   * See
   * developers.google.com/maps/documentation/javascript/reference/info-window
   * #InfoWindow.getPosition
   */
  getPosition() {
    this._assertInitialized();
    return this.infoWindow.getPosition() || null;
  }
  /**
   * See
   * developers.google.com/maps/documentation/javascript/reference/info-window#InfoWindow.getZIndex
   */
  getZIndex() {
    this._assertInitialized();
    return this.infoWindow.getZIndex();
  }
  /**
   * Opens the MapInfoWindow using the provided AdvancedMarkerElement.
   * @deprecated Use the `open` method instead.
   * @breaking-change 20.0.0
   */
  openAdvancedMarkerElement(advancedMarkerElement, content) {
    this.open({
      getAnchor: () => advancedMarkerElement
    }, void 0, content);
  }
  /**
   * Opens the MapInfoWindow using the provided anchor. If the anchor is not set,
   * then the position property of the options input is used instead.
   */
  open(anchor, shouldFocus, content) {
    this._assertInitialized();
    if ((typeof ngDevMode === "undefined" || ngDevMode) && anchor && !anchor.getAnchor) {
      throw new Error("Specified anchor does not implement the `getAnchor` method. It cannot be used to open an info window.");
    }
    const anchorObject = anchor ? anchor.getAnchor() : void 0;
    if (this.infoWindow.get("anchor") !== anchorObject || !anchorObject) {
      this._elementRef.nativeElement.style.display = content ? "none" : "";
      if (content) {
        this.infoWindow.setContent(content);
      }
      this.infoWindow.open({
        map: this._googleMap.googleMap,
        anchor: anchorObject,
        shouldFocus
      });
    }
  }
  _combineOptions() {
    return combineLatest([this._options, this._position]).pipe(map(([options, position]) => {
      const combinedOptions = __spreadProps(__spreadValues({}, options), {
        position: position || options.position,
        content: this._elementRef.nativeElement
      });
      return combinedOptions;
    }));
  }
  _watchForOptionsChanges() {
    this._options.pipe(takeUntil(this._destroy)).subscribe((options) => {
      this._assertInitialized();
      this.infoWindow.setOptions(options);
    });
  }
  _watchForPositionChanges() {
    this._position.pipe(takeUntil(this._destroy)).subscribe((position) => {
      if (position) {
        this._assertInitialized();
        this.infoWindow.setPosition(position);
      }
    });
  }
  _assertInitialized() {
    if (typeof ngDevMode === "undefined" || ngDevMode) {
      if (!this.infoWindow) {
        throw Error("Cannot interact with a Google Map Info Window before it has been initialized. Please wait for the Info Window to load before trying to interact with it.");
      }
    }
  }
  static \u0275fac = function MapInfoWindow_Factory(__ngFactoryType__) {
    return new (__ngFactoryType__ || _MapInfoWindow)();
  };
  static \u0275dir = /* @__PURE__ */ \u0275\u0275defineDirective({
    type: _MapInfoWindow,
    selectors: [["map-info-window"]],
    hostAttrs: [2, "display", "none"],
    inputs: {
      options: "options",
      position: "position"
    },
    outputs: {
      closeclick: "closeclick",
      contentChanged: "contentChanged",
      domready: "domready",
      positionChanged: "positionChanged",
      zindexChanged: "zindexChanged",
      infoWindowInitialized: "infoWindowInitialized"
    },
    exportAs: ["mapInfoWindow"]
  });
};
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(MapInfoWindow, [{
    type: Directive,
    args: [{
      selector: "map-info-window",
      exportAs: "mapInfoWindow",
      host: {
        "style": "display: none"
      }
    }]
  }], () => [], {
    options: [{
      type: Input
    }],
    position: [{
      type: Input
    }],
    closeclick: [{
      type: Output
    }],
    contentChanged: [{
      type: Output
    }],
    domready: [{
      type: Output
    }],
    positionChanged: [{
      type: Output
    }],
    zindexChanged: [{
      type: Output
    }],
    infoWindowInitialized: [{
      type: Output
    }]
  });
})();
var MapKmlLayer = class _MapKmlLayer {
  _map = inject(GoogleMap);
  _ngZone = inject(NgZone);
  _eventManager = new MapEventManager(inject(NgZone));
  _options = new BehaviorSubject({});
  _url = new BehaviorSubject("");
  _destroyed = new Subject();
  /**
   * The underlying google.maps.KmlLayer object.
   *
   * See developers.google.com/maps/documentation/javascript/reference/kml#KmlLayer
   */
  kmlLayer;
  set options(options) {
    this._options.next(options || {});
  }
  set url(url) {
    this._url.next(url);
  }
  /**
   * See developers.google.com/maps/documentation/javascript/reference/kml#KmlLayer.click
   */
  kmlClick = this._eventManager.getLazyEmitter("click");
  /**
   * See
   * developers.google.com/maps/documentation/javascript/reference/kml
   * #KmlLayer.defaultviewport_changed
   */
  defaultviewportChanged = this._eventManager.getLazyEmitter("defaultviewport_changed");
  /**
   * See developers.google.com/maps/documentation/javascript/reference/kml#KmlLayer.status_changed
   */
  statusChanged = this._eventManager.getLazyEmitter("status_changed");
  /** Event emitted when the KML layer is initialized. */
  kmlLayerInitialized = new EventEmitter();
  constructor() {
  }
  ngOnInit() {
    if (this._map._isBrowser) {
      this._combineOptions().pipe(take(1)).subscribe((options) => {
        if (google.maps.KmlLayer && this._map.googleMap) {
          this._initialize(this._map.googleMap, google.maps.KmlLayer, options);
        } else {
          this._ngZone.runOutsideAngular(() => {
            Promise.all([this._map._resolveMap(), google.maps.importLibrary("maps")]).then(([map2, lib]) => {
              this._initialize(map2, lib.KmlLayer, options);
            });
          });
        }
      });
    }
  }
  _initialize(map2, layerConstructor, options) {
    this._ngZone.runOutsideAngular(() => {
      this.kmlLayer = new layerConstructor(options);
      this._assertInitialized();
      this.kmlLayer.setMap(map2);
      this._eventManager.setTarget(this.kmlLayer);
      this.kmlLayerInitialized.emit(this.kmlLayer);
      this._watchForOptionsChanges();
      this._watchForUrlChanges();
    });
  }
  ngOnDestroy() {
    this._eventManager.destroy();
    this._destroyed.next();
    this._destroyed.complete();
    this.kmlLayer?.setMap(null);
  }
  /**
   * See
   * developers.google.com/maps/documentation/javascript/reference/kml#KmlLayer.getDefaultViewport
   */
  getDefaultViewport() {
    this._assertInitialized();
    return this.kmlLayer.getDefaultViewport();
  }
  /**
   * See developers.google.com/maps/documentation/javascript/reference/kml#KmlLayer.getMetadata
   */
  getMetadata() {
    this._assertInitialized();
    return this.kmlLayer.getMetadata();
  }
  /**
   * See developers.google.com/maps/documentation/javascript/reference/kml#KmlLayer.getStatus
   */
  getStatus() {
    this._assertInitialized();
    return this.kmlLayer.getStatus();
  }
  /**
   * See developers.google.com/maps/documentation/javascript/reference/kml#KmlLayer.getUrl
   */
  getUrl() {
    this._assertInitialized();
    return this.kmlLayer.getUrl();
  }
  /**
   * See developers.google.com/maps/documentation/javascript/reference/kml#KmlLayer.getZIndex
   */
  getZIndex() {
    this._assertInitialized();
    return this.kmlLayer.getZIndex();
  }
  _combineOptions() {
    return combineLatest([this._options, this._url]).pipe(map(([options, url]) => {
      const combinedOptions = __spreadProps(__spreadValues({}, options), {
        url: url || options.url
      });
      return combinedOptions;
    }));
  }
  _watchForOptionsChanges() {
    this._options.pipe(takeUntil(this._destroyed)).subscribe((options) => {
      if (this.kmlLayer) {
        this._assertInitialized();
        this.kmlLayer.setOptions(options);
      }
    });
  }
  _watchForUrlChanges() {
    this._url.pipe(takeUntil(this._destroyed)).subscribe((url) => {
      if (url && this.kmlLayer) {
        this._assertInitialized();
        this.kmlLayer.setUrl(url);
      }
    });
  }
  _assertInitialized() {
    if (typeof ngDevMode === "undefined" || ngDevMode) {
      if (!this.kmlLayer) {
        throw Error("Cannot interact with a Google Map KmlLayer before it has been initialized. Please wait for the KmlLayer to load before trying to interact with it.");
      }
    }
  }
  static \u0275fac = function MapKmlLayer_Factory(__ngFactoryType__) {
    return new (__ngFactoryType__ || _MapKmlLayer)();
  };
  static \u0275dir = /* @__PURE__ */ \u0275\u0275defineDirective({
    type: _MapKmlLayer,
    selectors: [["map-kml-layer"]],
    inputs: {
      options: "options",
      url: "url"
    },
    outputs: {
      kmlClick: "kmlClick",
      defaultviewportChanged: "defaultviewportChanged",
      statusChanged: "statusChanged",
      kmlLayerInitialized: "kmlLayerInitialized"
    },
    exportAs: ["mapKmlLayer"]
  });
};
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(MapKmlLayer, [{
    type: Directive,
    args: [{
      selector: "map-kml-layer",
      exportAs: "mapKmlLayer"
    }]
  }], () => [], {
    options: [{
      type: Input
    }],
    url: [{
      type: Input
    }],
    kmlClick: [{
      type: Output
    }],
    defaultviewportChanged: [{
      type: Output
    }],
    statusChanged: [{
      type: Output
    }],
    kmlLayerInitialized: [{
      type: Output
    }]
  });
})();
var MAP_MARKER = new InjectionToken("MAP_MARKER");
var DEFAULT_MARKER_OPTIONS$1 = {
  position: {
    lat: 37.421995,
    lng: -122.084092
  }
};
var MapMarker = class _MapMarker {
  _googleMap = inject(GoogleMap);
  _ngZone = inject(NgZone);
  _eventManager = new MapEventManager(inject(NgZone));
  /**
   * Title of the marker.
   * See: developers.google.com/maps/documentation/javascript/reference/marker#MarkerOptions.title
   */
  set title(title) {
    this._title = title;
  }
  _title;
  /**
   * Position of the marker. See:
   * developers.google.com/maps/documentation/javascript/reference/marker#MarkerOptions.position
   */
  set position(position) {
    this._position = position;
  }
  _position;
  /**
   * Label for the marker.
   * See: developers.google.com/maps/documentation/javascript/reference/marker#MarkerOptions.label
   */
  set label(label) {
    this._label = label;
  }
  _label;
  /**
   * Whether the marker is clickable. See:
   * developers.google.com/maps/documentation/javascript/reference/marker#MarkerOptions.clickable
   */
  set clickable(clickable) {
    this._clickable = clickable;
  }
  _clickable;
  /**
   * Options used to configure the marker.
   * See: developers.google.com/maps/documentation/javascript/reference/marker#MarkerOptions
   */
  set options(options) {
    this._options = options;
  }
  _options;
  /**
   * Icon to be used for the marker.
   * See: https://developers.google.com/maps/documentation/javascript/reference/marker#Icon
   */
  set icon(icon) {
    this._icon = icon;
  }
  _icon;
  /**
   * Whether the marker is visible.
   * See: developers.google.com/maps/documentation/javascript/reference/marker#MarkerOptions.visible
   */
  set visible(value) {
    this._visible = value;
  }
  _visible;
  /**
   * See
   * developers.google.com/maps/documentation/javascript/reference/marker#Marker.animation_changed
   */
  animationChanged = this._eventManager.getLazyEmitter("animation_changed");
  /**
   * See
   * developers.google.com/maps/documentation/javascript/reference/marker#Marker.click
   */
  mapClick = this._eventManager.getLazyEmitter("click");
  /**
   * See
   * developers.google.com/maps/documentation/javascript/reference/marker#Marker.clickable_changed
   */
  clickableChanged = this._eventManager.getLazyEmitter("clickable_changed");
  /**
   * See
   * developers.google.com/maps/documentation/javascript/reference/marker#Marker.cursor_changed
   */
  cursorChanged = this._eventManager.getLazyEmitter("cursor_changed");
  /**
   * See
   * developers.google.com/maps/documentation/javascript/reference/marker#Marker.dblclick
   */
  mapDblclick = this._eventManager.getLazyEmitter("dblclick");
  /**
   * See
   * developers.google.com/maps/documentation/javascript/reference/marker#Marker.drag
   */
  mapDrag = this._eventManager.getLazyEmitter("drag");
  /**
   * See
   * developers.google.com/maps/documentation/javascript/reference/marker#Marker.dragend
   */
  mapDragend = this._eventManager.getLazyEmitter("dragend");
  /**
   * See
   * developers.google.com/maps/documentation/javascript/reference/marker#Marker.draggable_changed
   */
  draggableChanged = this._eventManager.getLazyEmitter("draggable_changed");
  /**
   * See
   * developers.google.com/maps/documentation/javascript/reference/marker#Marker.dragstart
   */
  mapDragstart = this._eventManager.getLazyEmitter("dragstart");
  /**
   * See
   * developers.google.com/maps/documentation/javascript/reference/marker#Marker.flat_changed
   */
  flatChanged = this._eventManager.getLazyEmitter("flat_changed");
  /**
   * See
   * developers.google.com/maps/documentation/javascript/reference/marker#Marker.icon_changed
   */
  iconChanged = this._eventManager.getLazyEmitter("icon_changed");
  /**
   * See
   * developers.google.com/maps/documentation/javascript/reference/marker#Marker.mousedown
   */
  mapMousedown = this._eventManager.getLazyEmitter("mousedown");
  /**
   * See
   * developers.google.com/maps/documentation/javascript/reference/marker#Marker.mouseout
   */
  mapMouseout = this._eventManager.getLazyEmitter("mouseout");
  /**
   * See
   * developers.google.com/maps/documentation/javascript/reference/marker#Marker.mouseover
   */
  mapMouseover = this._eventManager.getLazyEmitter("mouseover");
  /**
   * See
   * developers.google.com/maps/documentation/javascript/reference/marker#Marker.mouseup
   */
  mapMouseup = this._eventManager.getLazyEmitter("mouseup");
  /**
   * See
   * developers.google.com/maps/documentation/javascript/reference/marker#Marker.position_changed
   */
  positionChanged = this._eventManager.getLazyEmitter("position_changed");
  /**
   * See
   * developers.google.com/maps/documentation/javascript/reference/marker#Marker.rightclick
   */
  mapRightclick = this._eventManager.getLazyEmitter("rightclick");
  /**
   * See
   * developers.google.com/maps/documentation/javascript/reference/marker#Marker.shape_changed
   */
  shapeChanged = this._eventManager.getLazyEmitter("shape_changed");
  /**
   * See
   * developers.google.com/maps/documentation/javascript/reference/marker#Marker.title_changed
   */
  titleChanged = this._eventManager.getLazyEmitter("title_changed");
  /**
   * See
   * developers.google.com/maps/documentation/javascript/reference/marker#Marker.visible_changed
   */
  visibleChanged = this._eventManager.getLazyEmitter("visible_changed");
  /**
   * See
   * developers.google.com/maps/documentation/javascript/reference/marker#Marker.zindex_changed
   */
  zindexChanged = this._eventManager.getLazyEmitter("zindex_changed");
  /** Event emitted when the marker is initialized. */
  markerInitialized = new EventEmitter();
  /**
   * The underlying google.maps.Marker object.
   *
   * See developers.google.com/maps/documentation/javascript/reference/marker#Marker
   */
  marker;
  constructor() {
  }
  ngOnInit() {
    if (!this._googleMap._isBrowser) {
      return;
    }
    if (google.maps.Marker && this._googleMap.googleMap) {
      this._initialize(this._googleMap.googleMap, google.maps.Marker);
    } else {
      this._ngZone.runOutsideAngular(() => {
        Promise.all([this._googleMap._resolveMap(), google.maps.importLibrary("marker")]).then(([map2, lib]) => {
          this._initialize(map2, lib.Marker);
        });
      });
    }
  }
  _initialize(map2, markerConstructor) {
    this._ngZone.runOutsideAngular(() => {
      this.marker = new markerConstructor(this._combineOptions());
      this._assertInitialized();
      this.marker.setMap(map2);
      this._eventManager.setTarget(this.marker);
      this.markerInitialized.next(this.marker);
    });
  }
  ngOnChanges(changes) {
    const {
      marker,
      _title,
      _position,
      _label,
      _clickable,
      _icon,
      _visible
    } = this;
    if (marker) {
      if (changes["options"]) {
        marker.setOptions(this._combineOptions());
      }
      if (changes["title"] && _title !== void 0) {
        marker.setTitle(_title);
      }
      if (changes["position"] && _position) {
        marker.setPosition(_position);
      }
      if (changes["label"] && _label !== void 0) {
        marker.setLabel(_label);
      }
      if (changes["clickable"] && _clickable !== void 0) {
        marker.setClickable(_clickable);
      }
      if (changes["icon"] && _icon) {
        marker.setIcon(_icon);
      }
      if (changes["visible"] && _visible !== void 0) {
        marker.setVisible(_visible);
      }
    }
  }
  ngOnDestroy() {
    this.markerInitialized.complete();
    this._eventManager.destroy();
    this.marker?.setMap(null);
  }
  /**
   * See
   * developers.google.com/maps/documentation/javascript/reference/marker#Marker.getAnimation
   */
  getAnimation() {
    this._assertInitialized();
    return this.marker.getAnimation() || null;
  }
  /**
   * See
   * developers.google.com/maps/documentation/javascript/reference/marker#Marker.getClickable
   */
  getClickable() {
    this._assertInitialized();
    return this.marker.getClickable();
  }
  /**
   * See
   * developers.google.com/maps/documentation/javascript/reference/marker#Marker.getCursor
   */
  getCursor() {
    this._assertInitialized();
    return this.marker.getCursor() || null;
  }
  /**
   * See
   * developers.google.com/maps/documentation/javascript/reference/marker#Marker.getDraggable
   */
  getDraggable() {
    this._assertInitialized();
    return !!this.marker.getDraggable();
  }
  /**
   * See
   * developers.google.com/maps/documentation/javascript/reference/marker#Marker.getIcon
   */
  getIcon() {
    this._assertInitialized();
    return this.marker.getIcon() || null;
  }
  /**
   * See
   * developers.google.com/maps/documentation/javascript/reference/marker#Marker.getLabel
   */
  getLabel() {
    this._assertInitialized();
    return this.marker.getLabel() || null;
  }
  /**
   * See
   * developers.google.com/maps/documentation/javascript/reference/marker#Marker.getOpacity
   */
  getOpacity() {
    this._assertInitialized();
    return this.marker.getOpacity() || null;
  }
  /**
   * See
   * developers.google.com/maps/documentation/javascript/reference/marker#Marker.getPosition
   */
  getPosition() {
    this._assertInitialized();
    return this.marker.getPosition() || null;
  }
  /**
   * See
   * developers.google.com/maps/documentation/javascript/reference/marker#Marker.getShape
   */
  getShape() {
    this._assertInitialized();
    return this.marker.getShape() || null;
  }
  /**
   * See
   * developers.google.com/maps/documentation/javascript/reference/marker#Marker.getTitle
   */
  getTitle() {
    this._assertInitialized();
    return this.marker.getTitle() || null;
  }
  /**
   * See
   * developers.google.com/maps/documentation/javascript/reference/marker#Marker.getVisible
   */
  getVisible() {
    this._assertInitialized();
    return this.marker.getVisible();
  }
  /**
   * See
   * developers.google.com/maps/documentation/javascript/reference/marker#Marker.getZIndex
   */
  getZIndex() {
    this._assertInitialized();
    return this.marker.getZIndex() || null;
  }
  /** Gets the anchor point that can be used to attach other Google Maps objects. */
  getAnchor() {
    this._assertInitialized();
    return this.marker;
  }
  /** Returns a promise that resolves when the marker has been initialized. */
  _resolveMarker() {
    return this.marker ? Promise.resolve(this.marker) : this.markerInitialized.pipe(take(1)).toPromise();
  }
  /** Creates a combined options object using the passed-in options and the individual inputs. */
  _combineOptions() {
    const options = this._options || DEFAULT_MARKER_OPTIONS$1;
    return __spreadProps(__spreadValues({}, options), {
      title: this._title || options.title,
      position: this._position || options.position,
      label: this._label || options.label,
      clickable: this._clickable ?? options.clickable,
      map: this._googleMap.googleMap,
      icon: this._icon || options.icon,
      visible: this._visible ?? options.visible
    });
  }
  _assertInitialized() {
    if (typeof ngDevMode === "undefined" || ngDevMode) {
      if (!this.marker) {
        throw Error("Cannot interact with a Google Map Marker before it has been initialized. Please wait for the Marker to load before trying to interact with it.");
      }
    }
  }
  static \u0275fac = function MapMarker_Factory(__ngFactoryType__) {
    return new (__ngFactoryType__ || _MapMarker)();
  };
  static \u0275dir = /* @__PURE__ */ \u0275\u0275defineDirective({
    type: _MapMarker,
    selectors: [["map-marker"]],
    inputs: {
      title: "title",
      position: "position",
      label: "label",
      clickable: "clickable",
      options: "options",
      icon: "icon",
      visible: "visible"
    },
    outputs: {
      animationChanged: "animationChanged",
      mapClick: "mapClick",
      clickableChanged: "clickableChanged",
      cursorChanged: "cursorChanged",
      mapDblclick: "mapDblclick",
      mapDrag: "mapDrag",
      mapDragend: "mapDragend",
      draggableChanged: "draggableChanged",
      mapDragstart: "mapDragstart",
      flatChanged: "flatChanged",
      iconChanged: "iconChanged",
      mapMousedown: "mapMousedown",
      mapMouseout: "mapMouseout",
      mapMouseover: "mapMouseover",
      mapMouseup: "mapMouseup",
      positionChanged: "positionChanged",
      mapRightclick: "mapRightclick",
      shapeChanged: "shapeChanged",
      titleChanged: "titleChanged",
      visibleChanged: "visibleChanged",
      zindexChanged: "zindexChanged",
      markerInitialized: "markerInitialized"
    },
    exportAs: ["mapMarker"],
    features: [\u0275\u0275ProvidersFeature([{
      provide: MAP_MARKER,
      useExisting: _MapMarker
    }]), \u0275\u0275NgOnChangesFeature]
  });
};
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(MapMarker, [{
    type: Directive,
    args: [{
      selector: "map-marker",
      exportAs: "mapMarker",
      providers: [{
        provide: MAP_MARKER,
        useExisting: MapMarker
      }]
    }]
  }], () => [], {
    title: [{
      type: Input
    }],
    position: [{
      type: Input
    }],
    label: [{
      type: Input
    }],
    clickable: [{
      type: Input
    }],
    options: [{
      type: Input
    }],
    icon: [{
      type: Input
    }],
    visible: [{
      type: Input
    }],
    animationChanged: [{
      type: Output
    }],
    mapClick: [{
      type: Output
    }],
    clickableChanged: [{
      type: Output
    }],
    cursorChanged: [{
      type: Output
    }],
    mapDblclick: [{
      type: Output
    }],
    mapDrag: [{
      type: Output
    }],
    mapDragend: [{
      type: Output
    }],
    draggableChanged: [{
      type: Output
    }],
    mapDragstart: [{
      type: Output
    }],
    flatChanged: [{
      type: Output
    }],
    iconChanged: [{
      type: Output
    }],
    mapMousedown: [{
      type: Output
    }],
    mapMouseout: [{
      type: Output
    }],
    mapMouseover: [{
      type: Output
    }],
    mapMouseup: [{
      type: Output
    }],
    positionChanged: [{
      type: Output
    }],
    mapRightclick: [{
      type: Output
    }],
    shapeChanged: [{
      type: Output
    }],
    titleChanged: [{
      type: Output
    }],
    visibleChanged: [{
      type: Output
    }],
    zindexChanged: [{
      type: Output
    }],
    markerInitialized: [{
      type: Output
    }]
  });
})();
var DEFAULT_CLUSTERER_OPTIONS = {};
var DeprecatedMapMarkerClusterer = class _DeprecatedMapMarkerClusterer {
  _googleMap = inject(GoogleMap);
  _ngZone = inject(NgZone);
  _currentMarkers = /* @__PURE__ */ new Set();
  _eventManager = new MapEventManager(inject(NgZone));
  _destroy = new Subject();
  /** Whether the clusterer is allowed to be initialized. */
  _canInitialize = this._googleMap._isBrowser;
  ariaLabelFn = () => "";
  set averageCenter(averageCenter) {
    this._averageCenter = averageCenter;
  }
  _averageCenter;
  batchSize;
  set batchSizeIE(batchSizeIE) {
    this._batchSizeIE = batchSizeIE;
  }
  _batchSizeIE;
  set calculator(calculator) {
    this._calculator = calculator;
  }
  _calculator;
  set clusterClass(clusterClass) {
    this._clusterClass = clusterClass;
  }
  _clusterClass;
  set enableRetinaIcons(enableRetinaIcons) {
    this._enableRetinaIcons = enableRetinaIcons;
  }
  _enableRetinaIcons;
  set gridSize(gridSize) {
    this._gridSize = gridSize;
  }
  _gridSize;
  set ignoreHidden(ignoreHidden) {
    this._ignoreHidden = ignoreHidden;
  }
  _ignoreHidden;
  set imageExtension(imageExtension) {
    this._imageExtension = imageExtension;
  }
  _imageExtension;
  set imagePath(imagePath) {
    this._imagePath = imagePath;
  }
  _imagePath;
  set imageSizes(imageSizes) {
    this._imageSizes = imageSizes;
  }
  _imageSizes;
  set maxZoom(maxZoom) {
    this._maxZoom = maxZoom;
  }
  _maxZoom;
  set minimumClusterSize(minimumClusterSize) {
    this._minimumClusterSize = minimumClusterSize;
  }
  _minimumClusterSize;
  set styles(styles) {
    this._styles = styles;
  }
  _styles;
  set title(title) {
    this._title = title;
  }
  _title;
  set zIndex(zIndex) {
    this._zIndex = zIndex;
  }
  _zIndex;
  set zoomOnClick(zoomOnClick) {
    this._zoomOnClick = zoomOnClick;
  }
  _zoomOnClick;
  set options(options) {
    this._options = options;
  }
  _options;
  /**
   * See
   * googlemaps.github.io/v3-utility-library/modules/
   * _google_markerclustererplus.html#clusteringbegin
   */
  clusteringbegin = this._eventManager.getLazyEmitter("clusteringbegin");
  /**
   * See
   * googlemaps.github.io/v3-utility-library/modules/_google_markerclustererplus.html#clusteringend
   */
  clusteringend = this._eventManager.getLazyEmitter("clusteringend");
  /** Emits when a cluster has been clicked. */
  clusterClick = this._eventManager.getLazyEmitter("click");
  _markers;
  /**
   * The underlying MarkerClusterer object.
   *
   * See
   * googlemaps.github.io/v3-utility-library/classes/
   * _google_markerclustererplus.markerclusterer.html
   */
  markerClusterer;
  /** Event emitted when the clusterer is initialized. */
  markerClustererInitialized = new EventEmitter();
  constructor() {
  }
  ngOnInit() {
    if (this._canInitialize) {
      this._ngZone.runOutsideAngular(() => {
        this._googleMap._resolveMap().then((map2) => {
          if (typeof MarkerClusterer !== "function" && (typeof ngDevMode === "undefined" || ngDevMode)) {
            throw Error("MarkerClusterer class not found, cannot construct a marker cluster. Please install the MarkerClustererPlus library: https://github.com/googlemaps/js-markerclustererplus");
          }
          this.markerClusterer = this._ngZone.runOutsideAngular(() => {
            return new MarkerClusterer(map2, [], this._combineOptions());
          });
          this._assertInitialized();
          this._eventManager.setTarget(this.markerClusterer);
          this.markerClustererInitialized.emit(this.markerClusterer);
        });
      });
    }
  }
  ngAfterContentInit() {
    if (this._canInitialize) {
      if (this.markerClusterer) {
        this._watchForMarkerChanges();
      } else {
        this.markerClustererInitialized.pipe(take(1), takeUntil(this._destroy)).subscribe(() => this._watchForMarkerChanges());
      }
    }
  }
  ngOnChanges(changes) {
    const {
      markerClusterer: clusterer,
      ariaLabelFn,
      _averageCenter,
      _batchSizeIE,
      _calculator,
      _styles,
      _clusterClass,
      _enableRetinaIcons,
      _gridSize,
      _ignoreHidden,
      _imageExtension,
      _imagePath,
      _imageSizes,
      _maxZoom,
      _minimumClusterSize,
      _title,
      _zIndex,
      _zoomOnClick
    } = this;
    if (clusterer) {
      if (changes["options"]) {
        clusterer.setOptions(this._combineOptions());
      }
      if (changes["ariaLabelFn"]) {
        clusterer.ariaLabelFn = ariaLabelFn;
      }
      if (changes["averageCenter"] && _averageCenter !== void 0) {
        clusterer.setAverageCenter(_averageCenter);
      }
      if (changes["batchSizeIE"] && _batchSizeIE !== void 0) {
        clusterer.setBatchSizeIE(_batchSizeIE);
      }
      if (changes["calculator"] && !!_calculator) {
        clusterer.setCalculator(_calculator);
      }
      if (changes["clusterClass"] && _clusterClass !== void 0) {
        clusterer.setClusterClass(_clusterClass);
      }
      if (changes["enableRetinaIcons"] && _enableRetinaIcons !== void 0) {
        clusterer.setEnableRetinaIcons(_enableRetinaIcons);
      }
      if (changes["gridSize"] && _gridSize !== void 0) {
        clusterer.setGridSize(_gridSize);
      }
      if (changes["ignoreHidden"] && _ignoreHidden !== void 0) {
        clusterer.setIgnoreHidden(_ignoreHidden);
      }
      if (changes["imageExtension"] && _imageExtension !== void 0) {
        clusterer.setImageExtension(_imageExtension);
      }
      if (changes["imagePath"] && _imagePath !== void 0) {
        clusterer.setImagePath(_imagePath);
      }
      if (changes["imageSizes"] && _imageSizes) {
        clusterer.setImageSizes(_imageSizes);
      }
      if (changes["maxZoom"] && _maxZoom !== void 0) {
        clusterer.setMaxZoom(_maxZoom);
      }
      if (changes["minimumClusterSize"] && _minimumClusterSize !== void 0) {
        clusterer.setMinimumClusterSize(_minimumClusterSize);
      }
      if (changes["styles"] && _styles) {
        clusterer.setStyles(_styles);
      }
      if (changes["title"] && _title !== void 0) {
        clusterer.setTitle(_title);
      }
      if (changes["zIndex"] && _zIndex !== void 0) {
        clusterer.setZIndex(_zIndex);
      }
      if (changes["zoomOnClick"] && _zoomOnClick !== void 0) {
        clusterer.setZoomOnClick(_zoomOnClick);
      }
    }
  }
  ngOnDestroy() {
    this._destroy.next();
    this._destroy.complete();
    this._eventManager.destroy();
    this.markerClusterer?.setMap(null);
  }
  fitMapToMarkers(padding) {
    this._assertInitialized();
    this.markerClusterer.fitMapToMarkers(padding);
  }
  getAverageCenter() {
    this._assertInitialized();
    return this.markerClusterer.getAverageCenter();
  }
  getBatchSizeIE() {
    this._assertInitialized();
    return this.markerClusterer.getBatchSizeIE();
  }
  getCalculator() {
    this._assertInitialized();
    return this.markerClusterer.getCalculator();
  }
  getClusterClass() {
    this._assertInitialized();
    return this.markerClusterer.getClusterClass();
  }
  getClusters() {
    this._assertInitialized();
    return this.markerClusterer.getClusters();
  }
  getEnableRetinaIcons() {
    this._assertInitialized();
    return this.markerClusterer.getEnableRetinaIcons();
  }
  getGridSize() {
    this._assertInitialized();
    return this.markerClusterer.getGridSize();
  }
  getIgnoreHidden() {
    this._assertInitialized();
    return this.markerClusterer.getIgnoreHidden();
  }
  getImageExtension() {
    this._assertInitialized();
    return this.markerClusterer.getImageExtension();
  }
  getImagePath() {
    this._assertInitialized();
    return this.markerClusterer.getImagePath();
  }
  getImageSizes() {
    this._assertInitialized();
    return this.markerClusterer.getImageSizes();
  }
  getMaxZoom() {
    this._assertInitialized();
    return this.markerClusterer.getMaxZoom();
  }
  getMinimumClusterSize() {
    this._assertInitialized();
    return this.markerClusterer.getMinimumClusterSize();
  }
  getStyles() {
    this._assertInitialized();
    return this.markerClusterer.getStyles();
  }
  getTitle() {
    this._assertInitialized();
    return this.markerClusterer.getTitle();
  }
  getTotalClusters() {
    this._assertInitialized();
    return this.markerClusterer.getTotalClusters();
  }
  getTotalMarkers() {
    this._assertInitialized();
    return this.markerClusterer.getTotalMarkers();
  }
  getZIndex() {
    this._assertInitialized();
    return this.markerClusterer.getZIndex();
  }
  getZoomOnClick() {
    this._assertInitialized();
    return this.markerClusterer.getZoomOnClick();
  }
  _combineOptions() {
    const options = this._options || DEFAULT_CLUSTERER_OPTIONS;
    return __spreadProps(__spreadValues({}, options), {
      ariaLabelFn: this.ariaLabelFn ?? options.ariaLabelFn,
      averageCenter: this._averageCenter ?? options.averageCenter,
      batchSize: this.batchSize ?? options.batchSize,
      batchSizeIE: this._batchSizeIE ?? options.batchSizeIE,
      calculator: this._calculator ?? options.calculator,
      clusterClass: this._clusterClass ?? options.clusterClass,
      enableRetinaIcons: this._enableRetinaIcons ?? options.enableRetinaIcons,
      gridSize: this._gridSize ?? options.gridSize,
      ignoreHidden: this._ignoreHidden ?? options.ignoreHidden,
      imageExtension: this._imageExtension ?? options.imageExtension,
      imagePath: this._imagePath ?? options.imagePath,
      imageSizes: this._imageSizes ?? options.imageSizes,
      maxZoom: this._maxZoom ?? options.maxZoom,
      minimumClusterSize: this._minimumClusterSize ?? options.minimumClusterSize,
      styles: this._styles ?? options.styles,
      title: this._title ?? options.title,
      zIndex: this._zIndex ?? options.zIndex,
      zoomOnClick: this._zoomOnClick ?? options.zoomOnClick
    });
  }
  _watchForMarkerChanges() {
    this._assertInitialized();
    this._ngZone.runOutsideAngular(() => {
      this._getInternalMarkers(this._markers).then((markers) => {
        const initialMarkers = [];
        for (const marker of markers) {
          this._currentMarkers.add(marker);
          initialMarkers.push(marker);
        }
        this.markerClusterer.addMarkers(initialMarkers);
      });
    });
    this._markers.changes.pipe(takeUntil(this._destroy)).subscribe((markerComponents) => {
      this._assertInitialized();
      this._ngZone.runOutsideAngular(() => {
        this._getInternalMarkers(markerComponents).then((markers) => {
          const newMarkers = new Set(markers);
          const markersToAdd = [];
          const markersToRemove = [];
          for (const marker of Array.from(newMarkers)) {
            if (!this._currentMarkers.has(marker)) {
              this._currentMarkers.add(marker);
              markersToAdd.push(marker);
            }
          }
          for (const marker of Array.from(this._currentMarkers)) {
            if (!newMarkers.has(marker)) {
              markersToRemove.push(marker);
            }
          }
          this.markerClusterer.addMarkers(markersToAdd, true);
          this.markerClusterer.removeMarkers(markersToRemove, true);
          this.markerClusterer.repaint();
          for (const marker of markersToRemove) {
            this._currentMarkers.delete(marker);
          }
        });
      });
    });
  }
  _getInternalMarkers(markers) {
    return Promise.all(markers.map((markerComponent) => markerComponent._resolveMarker()));
  }
  _assertInitialized() {
    if (typeof ngDevMode === "undefined" || ngDevMode) {
      if (!this.markerClusterer) {
        throw Error("Cannot interact with a MarkerClusterer before it has been initialized. Please wait for the MarkerClusterer to load before trying to interact with it.");
      }
    }
  }
  static \u0275fac = function DeprecatedMapMarkerClusterer_Factory(__ngFactoryType__) {
    return new (__ngFactoryType__ || _DeprecatedMapMarkerClusterer)();
  };
  static \u0275cmp = /* @__PURE__ */ \u0275\u0275defineComponent({
    type: _DeprecatedMapMarkerClusterer,
    selectors: [["deprecated-map-marker-clusterer"]],
    contentQueries: function DeprecatedMapMarkerClusterer_ContentQueries(rf, ctx, dirIndex) {
      if (rf & 1) {
        \u0275\u0275contentQuery(dirIndex, MapMarker, 5);
      }
      if (rf & 2) {
        let _t;
        \u0275\u0275queryRefresh(_t = \u0275\u0275loadQuery()) && (ctx._markers = _t);
      }
    },
    inputs: {
      ariaLabelFn: "ariaLabelFn",
      averageCenter: "averageCenter",
      batchSize: "batchSize",
      batchSizeIE: "batchSizeIE",
      calculator: "calculator",
      clusterClass: "clusterClass",
      enableRetinaIcons: "enableRetinaIcons",
      gridSize: "gridSize",
      ignoreHidden: "ignoreHidden",
      imageExtension: "imageExtension",
      imagePath: "imagePath",
      imageSizes: "imageSizes",
      maxZoom: "maxZoom",
      minimumClusterSize: "minimumClusterSize",
      styles: "styles",
      title: "title",
      zIndex: "zIndex",
      zoomOnClick: "zoomOnClick",
      options: "options"
    },
    outputs: {
      clusteringbegin: "clusteringbegin",
      clusteringend: "clusteringend",
      clusterClick: "clusterClick",
      markerClustererInitialized: "markerClustererInitialized"
    },
    exportAs: ["mapMarkerClusterer"],
    features: [\u0275\u0275NgOnChangesFeature],
    ngContentSelectors: _c026,
    decls: 1,
    vars: 0,
    template: function DeprecatedMapMarkerClusterer_Template(rf, ctx) {
      if (rf & 1) {
        \u0275\u0275projectionDef();
        \u0275\u0275projection(0);
      }
    },
    encapsulation: 2,
    changeDetection: 0
  });
};
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(DeprecatedMapMarkerClusterer, [{
    type: Component,
    args: [{
      selector: "deprecated-map-marker-clusterer",
      exportAs: "mapMarkerClusterer",
      changeDetection: ChangeDetectionStrategy.OnPush,
      template: "<ng-content/>",
      encapsulation: ViewEncapsulation.None
    }]
  }], () => [], {
    ariaLabelFn: [{
      type: Input
    }],
    averageCenter: [{
      type: Input
    }],
    batchSize: [{
      type: Input
    }],
    batchSizeIE: [{
      type: Input
    }],
    calculator: [{
      type: Input
    }],
    clusterClass: [{
      type: Input
    }],
    enableRetinaIcons: [{
      type: Input
    }],
    gridSize: [{
      type: Input
    }],
    ignoreHidden: [{
      type: Input
    }],
    imageExtension: [{
      type: Input
    }],
    imagePath: [{
      type: Input
    }],
    imageSizes: [{
      type: Input
    }],
    maxZoom: [{
      type: Input
    }],
    minimumClusterSize: [{
      type: Input
    }],
    styles: [{
      type: Input
    }],
    title: [{
      type: Input
    }],
    zIndex: [{
      type: Input
    }],
    zoomOnClick: [{
      type: Input
    }],
    options: [{
      type: Input
    }],
    clusteringbegin: [{
      type: Output
    }],
    clusteringend: [{
      type: Output
    }],
    clusterClick: [{
      type: Output
    }],
    _markers: [{
      type: ContentChildren,
      args: [MapMarker, {
        descendants: true
      }]
    }],
    markerClustererInitialized: [{
      type: Output
    }]
  });
})();
var MapPolygon = class _MapPolygon {
  _map = inject(GoogleMap);
  _ngZone = inject(NgZone);
  _eventManager = new MapEventManager(inject(NgZone));
  _options = new BehaviorSubject({});
  _paths = new BehaviorSubject(void 0);
  _destroyed = new Subject();
  /**
   * The underlying google.maps.Polygon object.
   *
   * See developers.google.com/maps/documentation/javascript/reference/polygon#Polygon
   */
  polygon;
  set options(options) {
    this._options.next(options || {});
  }
  set paths(paths) {
    this._paths.next(paths);
  }
  /**
   * See developers.google.com/maps/documentation/javascript/reference/polygon#Polygon.click
   */
  polygonClick = this._eventManager.getLazyEmitter("click");
  /**
   * See developers.google.com/maps/documentation/javascript/reference/polygon#Polygon.dblclick
   */
  polygonDblclick = this._eventManager.getLazyEmitter("dblclick");
  /**
   * See developers.google.com/maps/documentation/javascript/reference/polygon#Polygon.drag
   */
  polygonDrag = this._eventManager.getLazyEmitter("drag");
  /**
   * See developers.google.com/maps/documentation/javascript/reference/polygon#Polygon.dragend
   */
  polygonDragend = this._eventManager.getLazyEmitter("dragend");
  /**
   * See developers.google.com/maps/documentation/javascript/reference/polygon#Polygon.dragstart
   */
  polygonDragstart = this._eventManager.getLazyEmitter("dragstart");
  /**
   * See developers.google.com/maps/documentation/javascript/reference/polygon#Polygon.mousedown
   */
  polygonMousedown = this._eventManager.getLazyEmitter("mousedown");
  /**
   * See developers.google.com/maps/documentation/javascript/reference/polygon#Polygon.mousemove
   */
  polygonMousemove = this._eventManager.getLazyEmitter("mousemove");
  /**
   * See developers.google.com/maps/documentation/javascript/reference/polygon#Polygon.mouseout
   */
  polygonMouseout = this._eventManager.getLazyEmitter("mouseout");
  /**
   * See developers.google.com/maps/documentation/javascript/reference/polygon#Polygon.mouseover
   */
  polygonMouseover = this._eventManager.getLazyEmitter("mouseover");
  /**
   * See developers.google.com/maps/documentation/javascript/reference/polygon#Polygon.mouseup
   */
  polygonMouseup = this._eventManager.getLazyEmitter("mouseup");
  /**
   * See developers.google.com/maps/documentation/javascript/reference/polygon#Polygon.rightclick
   */
  polygonRightclick = this._eventManager.getLazyEmitter("rightclick");
  /** Event emitted when the polygon is initialized. */
  polygonInitialized = new EventEmitter();
  constructor() {
  }
  ngOnInit() {
    if (this._map._isBrowser) {
      this._combineOptions().pipe(take(1)).subscribe((options) => {
        if (google.maps.Polygon && this._map.googleMap) {
          this._initialize(this._map.googleMap, google.maps.Polygon, options);
        } else {
          this._ngZone.runOutsideAngular(() => {
            Promise.all([this._map._resolveMap(), google.maps.importLibrary("maps")]).then(([map2, lib]) => {
              this._initialize(map2, lib.Polygon, options);
            });
          });
        }
      });
    }
  }
  _initialize(map2, polygonConstructor, options) {
    this._ngZone.runOutsideAngular(() => {
      this.polygon = new polygonConstructor(options);
      this._assertInitialized();
      this.polygon.setMap(map2);
      this._eventManager.setTarget(this.polygon);
      this.polygonInitialized.emit(this.polygon);
      this._watchForOptionsChanges();
      this._watchForPathChanges();
    });
  }
  ngOnDestroy() {
    this._eventManager.destroy();
    this._destroyed.next();
    this._destroyed.complete();
    this.polygon?.setMap(null);
  }
  /**
   * See
   * developers.google.com/maps/documentation/javascript/reference/polygon#Polygon.getDraggable
   */
  getDraggable() {
    this._assertInitialized();
    return this.polygon.getDraggable();
  }
  /**
   * See developers.google.com/maps/documentation/javascript/reference/polygon#Polygon.getEditable
   */
  getEditable() {
    this._assertInitialized();
    return this.polygon.getEditable();
  }
  /**
   * See developers.google.com/maps/documentation/javascript/reference/polygon#Polygon.getPath
   */
  getPath() {
    this._assertInitialized();
    return this.polygon.getPath();
  }
  /**
   * See developers.google.com/maps/documentation/javascript/reference/polygon#Polygon.getPaths
   */
  getPaths() {
    this._assertInitialized();
    return this.polygon.getPaths();
  }
  /**
   * See developers.google.com/maps/documentation/javascript/reference/polygon#Polygon.getVisible
   */
  getVisible() {
    this._assertInitialized();
    return this.polygon.getVisible();
  }
  _combineOptions() {
    return combineLatest([this._options, this._paths]).pipe(map(([options, paths]) => {
      const combinedOptions = __spreadProps(__spreadValues({}, options), {
        paths: paths || options.paths
      });
      return combinedOptions;
    }));
  }
  _watchForOptionsChanges() {
    this._options.pipe(takeUntil(this._destroyed)).subscribe((options) => {
      this._assertInitialized();
      this.polygon.setOptions(options);
    });
  }
  _watchForPathChanges() {
    this._paths.pipe(takeUntil(this._destroyed)).subscribe((paths) => {
      if (paths) {
        this._assertInitialized();
        this.polygon.setPaths(paths);
      }
    });
  }
  _assertInitialized() {
    if (typeof ngDevMode === "undefined" || ngDevMode) {
      if (!this.polygon) {
        throw Error("Cannot interact with a Google Map Polygon before it has been initialized. Please wait for the Polygon to load before trying to interact with it.");
      }
    }
  }
  static \u0275fac = function MapPolygon_Factory(__ngFactoryType__) {
    return new (__ngFactoryType__ || _MapPolygon)();
  };
  static \u0275dir = /* @__PURE__ */ \u0275\u0275defineDirective({
    type: _MapPolygon,
    selectors: [["map-polygon"]],
    inputs: {
      options: "options",
      paths: "paths"
    },
    outputs: {
      polygonClick: "polygonClick",
      polygonDblclick: "polygonDblclick",
      polygonDrag: "polygonDrag",
      polygonDragend: "polygonDragend",
      polygonDragstart: "polygonDragstart",
      polygonMousedown: "polygonMousedown",
      polygonMousemove: "polygonMousemove",
      polygonMouseout: "polygonMouseout",
      polygonMouseover: "polygonMouseover",
      polygonMouseup: "polygonMouseup",
      polygonRightclick: "polygonRightclick",
      polygonInitialized: "polygonInitialized"
    },
    exportAs: ["mapPolygon"]
  });
};
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(MapPolygon, [{
    type: Directive,
    args: [{
      selector: "map-polygon",
      exportAs: "mapPolygon"
    }]
  }], () => [], {
    options: [{
      type: Input
    }],
    paths: [{
      type: Input
    }],
    polygonClick: [{
      type: Output
    }],
    polygonDblclick: [{
      type: Output
    }],
    polygonDrag: [{
      type: Output
    }],
    polygonDragend: [{
      type: Output
    }],
    polygonDragstart: [{
      type: Output
    }],
    polygonMousedown: [{
      type: Output
    }],
    polygonMousemove: [{
      type: Output
    }],
    polygonMouseout: [{
      type: Output
    }],
    polygonMouseover: [{
      type: Output
    }],
    polygonMouseup: [{
      type: Output
    }],
    polygonRightclick: [{
      type: Output
    }],
    polygonInitialized: [{
      type: Output
    }]
  });
})();
var MapPolyline = class _MapPolyline {
  _map = inject(GoogleMap);
  _ngZone = inject(NgZone);
  _eventManager = new MapEventManager(inject(NgZone));
  _options = new BehaviorSubject({});
  _path = new BehaviorSubject(void 0);
  _destroyed = new Subject();
  /**
   * The underlying google.maps.Polyline object.
   *
   * See developers.google.com/maps/documentation/javascript/reference/polygon#Polyline
   */
  polyline;
  set options(options) {
    this._options.next(options || {});
  }
  set path(path) {
    this._path.next(path);
  }
  /**
   * See developers.google.com/maps/documentation/javascript/reference/polygon#Polyline.click
   */
  polylineClick = this._eventManager.getLazyEmitter("click");
  /**
   * See developers.google.com/maps/documentation/javascript/reference/polygon#Polyline.dblclick
   */
  polylineDblclick = this._eventManager.getLazyEmitter("dblclick");
  /**
   * See developers.google.com/maps/documentation/javascript/reference/polygon#Polyline.drag
   */
  polylineDrag = this._eventManager.getLazyEmitter("drag");
  /**
   * See developers.google.com/maps/documentation/javascript/reference/polygon#Polyline.dragend
   */
  polylineDragend = this._eventManager.getLazyEmitter("dragend");
  /**
   * See developers.google.com/maps/documentation/javascript/reference/polygon#Polyline.dragstart
   */
  polylineDragstart = this._eventManager.getLazyEmitter("dragstart");
  /**
   * See developers.google.com/maps/documentation/javascript/reference/polygon#Polyline.mousedown
   */
  polylineMousedown = this._eventManager.getLazyEmitter("mousedown");
  /**
   * See developers.google.com/maps/documentation/javascript/reference/polygon#Polyline.mousemove
   */
  polylineMousemove = this._eventManager.getLazyEmitter("mousemove");
  /**
   * See developers.google.com/maps/documentation/javascript/reference/polygon#Polyline.mouseout
   */
  polylineMouseout = this._eventManager.getLazyEmitter("mouseout");
  /**
   * See developers.google.com/maps/documentation/javascript/reference/polygon#Polyline.mouseover
   */
  polylineMouseover = this._eventManager.getLazyEmitter("mouseover");
  /**
   * See developers.google.com/maps/documentation/javascript/reference/polygon#Polyline.mouseup
   */
  polylineMouseup = this._eventManager.getLazyEmitter("mouseup");
  /**
   * See developers.google.com/maps/documentation/javascript/reference/polygon#Polyline.rightclick
   */
  polylineRightclick = this._eventManager.getLazyEmitter("rightclick");
  /** Event emitted when the polyline is initialized. */
  polylineInitialized = new EventEmitter();
  constructor() {
  }
  ngOnInit() {
    if (this._map._isBrowser) {
      this._combineOptions().pipe(take(1)).subscribe((options) => {
        if (google.maps.Polyline && this._map.googleMap) {
          this._initialize(this._map.googleMap, google.maps.Polyline, options);
        } else {
          this._ngZone.runOutsideAngular(() => {
            Promise.all([this._map._resolveMap(), google.maps.importLibrary("maps")]).then(([map2, lib]) => {
              this._initialize(map2, lib.Polyline, options);
            });
          });
        }
      });
    }
  }
  _initialize(map2, polylineConstructor, options) {
    this._ngZone.runOutsideAngular(() => {
      this.polyline = new polylineConstructor(options);
      this._assertInitialized();
      this.polyline.setMap(map2);
      this._eventManager.setTarget(this.polyline);
      this.polylineInitialized.emit(this.polyline);
      this._watchForOptionsChanges();
      this._watchForPathChanges();
    });
  }
  ngOnDestroy() {
    this._eventManager.destroy();
    this._destroyed.next();
    this._destroyed.complete();
    this.polyline?.setMap(null);
  }
  /**
   * See
   * developers.google.com/maps/documentation/javascript/reference/polygon#Polyline.getDraggable
   */
  getDraggable() {
    this._assertInitialized();
    return this.polyline.getDraggable();
  }
  /**
   * See developers.google.com/maps/documentation/javascript/reference/polygon#Polyline.getEditable
   */
  getEditable() {
    this._assertInitialized();
    return this.polyline.getEditable();
  }
  /**
   * See developers.google.com/maps/documentation/javascript/reference/polygon#Polyline.getPath
   */
  getPath() {
    this._assertInitialized();
    return this.polyline.getPath();
  }
  /**
   * See developers.google.com/maps/documentation/javascript/reference/polygon#Polyline.getVisible
   */
  getVisible() {
    this._assertInitialized();
    return this.polyline.getVisible();
  }
  _combineOptions() {
    return combineLatest([this._options, this._path]).pipe(map(([options, path]) => {
      const combinedOptions = __spreadProps(__spreadValues({}, options), {
        path: path || options.path
      });
      return combinedOptions;
    }));
  }
  _watchForOptionsChanges() {
    this._options.pipe(takeUntil(this._destroyed)).subscribe((options) => {
      this._assertInitialized();
      this.polyline.setOptions(options);
    });
  }
  _watchForPathChanges() {
    this._path.pipe(takeUntil(this._destroyed)).subscribe((path) => {
      if (path) {
        this._assertInitialized();
        this.polyline.setPath(path);
      }
    });
  }
  _assertInitialized() {
    if (typeof ngDevMode === "undefined" || ngDevMode) {
      if (!this.polyline) {
        throw Error("Cannot interact with a Google Map Polyline before it has been initialized. Please wait for the Polyline to load before trying to interact with it.");
      }
    }
  }
  static \u0275fac = function MapPolyline_Factory(__ngFactoryType__) {
    return new (__ngFactoryType__ || _MapPolyline)();
  };
  static \u0275dir = /* @__PURE__ */ \u0275\u0275defineDirective({
    type: _MapPolyline,
    selectors: [["map-polyline"]],
    inputs: {
      options: "options",
      path: "path"
    },
    outputs: {
      polylineClick: "polylineClick",
      polylineDblclick: "polylineDblclick",
      polylineDrag: "polylineDrag",
      polylineDragend: "polylineDragend",
      polylineDragstart: "polylineDragstart",
      polylineMousedown: "polylineMousedown",
      polylineMousemove: "polylineMousemove",
      polylineMouseout: "polylineMouseout",
      polylineMouseover: "polylineMouseover",
      polylineMouseup: "polylineMouseup",
      polylineRightclick: "polylineRightclick",
      polylineInitialized: "polylineInitialized"
    },
    exportAs: ["mapPolyline"]
  });
};
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(MapPolyline, [{
    type: Directive,
    args: [{
      selector: "map-polyline",
      exportAs: "mapPolyline"
    }]
  }], () => [], {
    options: [{
      type: Input
    }],
    path: [{
      type: Input
    }],
    polylineClick: [{
      type: Output
    }],
    polylineDblclick: [{
      type: Output
    }],
    polylineDrag: [{
      type: Output
    }],
    polylineDragend: [{
      type: Output
    }],
    polylineDragstart: [{
      type: Output
    }],
    polylineMousedown: [{
      type: Output
    }],
    polylineMousemove: [{
      type: Output
    }],
    polylineMouseout: [{
      type: Output
    }],
    polylineMouseover: [{
      type: Output
    }],
    polylineMouseup: [{
      type: Output
    }],
    polylineRightclick: [{
      type: Output
    }],
    polylineInitialized: [{
      type: Output
    }]
  });
})();
var MapRectangle = class _MapRectangle {
  _map = inject(GoogleMap);
  _ngZone = inject(NgZone);
  _eventManager = new MapEventManager(inject(NgZone));
  _options = new BehaviorSubject({});
  _bounds = new BehaviorSubject(void 0);
  _destroyed = new Subject();
  /**
   * The underlying google.maps.Rectangle object.
   *
   * See developers.google.com/maps/documentation/javascript/reference/polygon#Rectangle
   */
  rectangle;
  set options(options) {
    this._options.next(options || {});
  }
  set bounds(bounds) {
    this._bounds.next(bounds);
  }
  /**
   * See
   * developers.google.com/maps/documentation/javascript/reference/polygon#Rectangle.boundsChanged
   */
  boundsChanged = this._eventManager.getLazyEmitter("bounds_changed");
  /**
   * See
   * developers.google.com/maps/documentation/javascript/reference/polygon#Rectangle.click
   */
  rectangleClick = this._eventManager.getLazyEmitter("click");
  /**
   * See
   * developers.google.com/maps/documentation/javascript/reference/polygon#Rectangle.dblclick
   */
  rectangleDblclick = this._eventManager.getLazyEmitter("dblclick");
  /**
   * See
   * developers.google.com/maps/documentation/javascript/reference/polygon#Rectangle.drag
   */
  rectangleDrag = this._eventManager.getLazyEmitter("drag");
  /**
   * See
   * developers.google.com/maps/documentation/javascript/reference/polygon#Rectangle.dragend
   */
  rectangleDragend = this._eventManager.getLazyEmitter("dragend");
  /**
   * See
   * developers.google.com/maps/documentation/javascript/reference/polygon#Rectangle.dragstart
   */
  rectangleDragstart = this._eventManager.getLazyEmitter("dragstart");
  /**
   * See
   * developers.google.com/maps/documentation/javascript/reference/polygon#Rectangle.mousedown
   */
  rectangleMousedown = this._eventManager.getLazyEmitter("mousedown");
  /**
   * See
   * developers.google.com/maps/documentation/javascript/reference/polygon#Rectangle.mousemove
   */
  rectangleMousemove = this._eventManager.getLazyEmitter("mousemove");
  /**
   * See
   * developers.google.com/maps/documentation/javascript/reference/polygon#Rectangle.mouseout
   */
  rectangleMouseout = this._eventManager.getLazyEmitter("mouseout");
  /**
   * See
   * developers.google.com/maps/documentation/javascript/reference/polygon#Rectangle.mouseover
   */
  rectangleMouseover = this._eventManager.getLazyEmitter("mouseover");
  /**
   * See
   * developers.google.com/maps/documentation/javascript/reference/polygon#Rectangle.mouseup
   */
  rectangleMouseup = this._eventManager.getLazyEmitter("mouseup");
  /**
   * See
   * developers.google.com/maps/documentation/javascript/reference/polygon#Rectangle.rightclick
   */
  rectangleRightclick = this._eventManager.getLazyEmitter("rightclick");
  /** Event emitted when the rectangle is initialized. */
  rectangleInitialized = new EventEmitter();
  constructor() {
  }
  ngOnInit() {
    if (this._map._isBrowser) {
      this._combineOptions().pipe(take(1)).subscribe((options) => {
        if (google.maps.Rectangle && this._map.googleMap) {
          this._initialize(this._map.googleMap, google.maps.Rectangle, options);
        } else {
          this._ngZone.runOutsideAngular(() => {
            Promise.all([this._map._resolveMap(), google.maps.importLibrary("maps")]).then(([map2, lib]) => {
              this._initialize(map2, lib.Rectangle, options);
            });
          });
        }
      });
    }
  }
  _initialize(map2, rectangleConstructor, options) {
    this._ngZone.runOutsideAngular(() => {
      this.rectangle = new rectangleConstructor(options);
      this._assertInitialized();
      this.rectangle.setMap(map2);
      this._eventManager.setTarget(this.rectangle);
      this.rectangleInitialized.emit(this.rectangle);
      this._watchForOptionsChanges();
      this._watchForBoundsChanges();
    });
  }
  ngOnDestroy() {
    this._eventManager.destroy();
    this._destroyed.next();
    this._destroyed.complete();
    this.rectangle?.setMap(null);
  }
  /**
   * See
   * developers.google.com/maps/documentation/javascript/reference/polygon#Rectangle.getBounds
   */
  getBounds() {
    this._assertInitialized();
    return this.rectangle.getBounds();
  }
  /**
   * See
   * developers.google.com/maps/documentation/javascript/reference/polygon#Rectangle.getDraggable
   */
  getDraggable() {
    this._assertInitialized();
    return this.rectangle.getDraggable();
  }
  /**
   * See
   * developers.google.com/maps/documentation/javascript/reference/polygon#Rectangle.getEditable
   */
  getEditable() {
    this._assertInitialized();
    return this.rectangle.getEditable();
  }
  /**
   * See
   * developers.google.com/maps/documentation/javascript/reference/polygon#Rectangle.getVisible
   */
  getVisible() {
    this._assertInitialized();
    return this.rectangle.getVisible();
  }
  _combineOptions() {
    return combineLatest([this._options, this._bounds]).pipe(map(([options, bounds]) => {
      const combinedOptions = __spreadProps(__spreadValues({}, options), {
        bounds: bounds || options.bounds
      });
      return combinedOptions;
    }));
  }
  _watchForOptionsChanges() {
    this._options.pipe(takeUntil(this._destroyed)).subscribe((options) => {
      this._assertInitialized();
      this.rectangle.setOptions(options);
    });
  }
  _watchForBoundsChanges() {
    this._bounds.pipe(takeUntil(this._destroyed)).subscribe((bounds) => {
      if (bounds) {
        this._assertInitialized();
        this.rectangle.setBounds(bounds);
      }
    });
  }
  _assertInitialized() {
    if (typeof ngDevMode === "undefined" || ngDevMode) {
      if (!this.rectangle) {
        throw Error("Cannot interact with a Google Map Rectangle before it has been initialized. Please wait for the Rectangle to load before trying to interact with it.");
      }
    }
  }
  static \u0275fac = function MapRectangle_Factory(__ngFactoryType__) {
    return new (__ngFactoryType__ || _MapRectangle)();
  };
  static \u0275dir = /* @__PURE__ */ \u0275\u0275defineDirective({
    type: _MapRectangle,
    selectors: [["map-rectangle"]],
    inputs: {
      options: "options",
      bounds: "bounds"
    },
    outputs: {
      boundsChanged: "boundsChanged",
      rectangleClick: "rectangleClick",
      rectangleDblclick: "rectangleDblclick",
      rectangleDrag: "rectangleDrag",
      rectangleDragend: "rectangleDragend",
      rectangleDragstart: "rectangleDragstart",
      rectangleMousedown: "rectangleMousedown",
      rectangleMousemove: "rectangleMousemove",
      rectangleMouseout: "rectangleMouseout",
      rectangleMouseover: "rectangleMouseover",
      rectangleMouseup: "rectangleMouseup",
      rectangleRightclick: "rectangleRightclick",
      rectangleInitialized: "rectangleInitialized"
    },
    exportAs: ["mapRectangle"]
  });
};
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(MapRectangle, [{
    type: Directive,
    args: [{
      selector: "map-rectangle",
      exportAs: "mapRectangle"
    }]
  }], () => [], {
    options: [{
      type: Input
    }],
    bounds: [{
      type: Input
    }],
    boundsChanged: [{
      type: Output
    }],
    rectangleClick: [{
      type: Output
    }],
    rectangleDblclick: [{
      type: Output
    }],
    rectangleDrag: [{
      type: Output
    }],
    rectangleDragend: [{
      type: Output
    }],
    rectangleDragstart: [{
      type: Output
    }],
    rectangleMousedown: [{
      type: Output
    }],
    rectangleMousemove: [{
      type: Output
    }],
    rectangleMouseout: [{
      type: Output
    }],
    rectangleMouseover: [{
      type: Output
    }],
    rectangleMouseup: [{
      type: Output
    }],
    rectangleRightclick: [{
      type: Output
    }],
    rectangleInitialized: [{
      type: Output
    }]
  });
})();
var MapTrafficLayer = class _MapTrafficLayer {
  _map = inject(GoogleMap);
  _ngZone = inject(NgZone);
  _autoRefresh = new BehaviorSubject(true);
  _destroyed = new Subject();
  /**
   * The underlying google.maps.TrafficLayer object.
   *
   * See developers.google.com/maps/documentation/javascript/reference/map#TrafficLayer
   */
  trafficLayer;
  /**
   * Whether the traffic layer refreshes with updated information automatically.
   */
  set autoRefresh(autoRefresh) {
    this._autoRefresh.next(autoRefresh);
  }
  /** Event emitted when the traffic layer is initialized. */
  trafficLayerInitialized = new EventEmitter();
  constructor() {
  }
  ngOnInit() {
    if (this._map._isBrowser) {
      this._combineOptions().pipe(take(1)).subscribe((options) => {
        if (google.maps.TrafficLayer && this._map.googleMap) {
          this._initialize(this._map.googleMap, google.maps.TrafficLayer, options);
        } else {
          this._ngZone.runOutsideAngular(() => {
            Promise.all([this._map._resolveMap(), google.maps.importLibrary("maps")]).then(([map2, lib]) => {
              this._initialize(map2, lib.TrafficLayer, options);
            });
          });
        }
      });
    }
  }
  _initialize(map2, layerConstructor, options) {
    this._ngZone.runOutsideAngular(() => {
      this.trafficLayer = new layerConstructor(options);
      this._assertInitialized();
      this.trafficLayer.setMap(map2);
      this.trafficLayerInitialized.emit(this.trafficLayer);
      this._watchForAutoRefreshChanges();
    });
  }
  ngOnDestroy() {
    this._destroyed.next();
    this._destroyed.complete();
    this.trafficLayer?.setMap(null);
  }
  _combineOptions() {
    return this._autoRefresh.pipe(map((autoRefresh) => {
      const combinedOptions = {
        autoRefresh
      };
      return combinedOptions;
    }));
  }
  _watchForAutoRefreshChanges() {
    this._combineOptions().pipe(takeUntil(this._destroyed)).subscribe((options) => {
      this._assertInitialized();
      this.trafficLayer.setOptions(options);
    });
  }
  _assertInitialized() {
    if (!this.trafficLayer) {
      throw Error("Cannot interact with a Google Map Traffic Layer before it has been initialized. Please wait for the Traffic Layer to load before trying to interact with it.");
    }
  }
  static \u0275fac = function MapTrafficLayer_Factory(__ngFactoryType__) {
    return new (__ngFactoryType__ || _MapTrafficLayer)();
  };
  static \u0275dir = /* @__PURE__ */ \u0275\u0275defineDirective({
    type: _MapTrafficLayer,
    selectors: [["map-traffic-layer"]],
    inputs: {
      autoRefresh: "autoRefresh"
    },
    outputs: {
      trafficLayerInitialized: "trafficLayerInitialized"
    },
    exportAs: ["mapTrafficLayer"]
  });
};
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(MapTrafficLayer, [{
    type: Directive,
    args: [{
      selector: "map-traffic-layer",
      exportAs: "mapTrafficLayer"
    }]
  }], () => [], {
    autoRefresh: [{
      type: Input
    }],
    trafficLayerInitialized: [{
      type: Output
    }]
  });
})();
var MapTransitLayer = class _MapTransitLayer {
  _map = inject(GoogleMap);
  _zone = inject(NgZone);
  /**
   * The underlying google.maps.TransitLayer object.
   *
   * See developers.google.com/maps/documentation/javascript/reference/map#TransitLayer
   */
  transitLayer;
  /** Event emitted when the transit layer is initialized. */
  transitLayerInitialized = new EventEmitter();
  ngOnInit() {
    if (this._map._isBrowser) {
      if (google.maps.TransitLayer && this._map.googleMap) {
        this._initialize(this._map.googleMap, google.maps.TransitLayer);
      } else {
        this._zone.runOutsideAngular(() => {
          Promise.all([this._map._resolveMap(), google.maps.importLibrary("maps")]).then(([map2, lib]) => {
            this._initialize(map2, lib.TransitLayer);
          });
        });
      }
    }
  }
  _initialize(map2, layerConstructor) {
    this._zone.runOutsideAngular(() => {
      this.transitLayer = new layerConstructor();
      this.transitLayerInitialized.emit(this.transitLayer);
      this._assertLayerInitialized();
      this.transitLayer.setMap(map2);
    });
  }
  ngOnDestroy() {
    this.transitLayer?.setMap(null);
  }
  _assertLayerInitialized() {
    if (!this.transitLayer) {
      throw Error("Cannot interact with a Google Map Transit Layer before it has been initialized. Please wait for the Transit Layer to load before trying to interact with it.");
    }
  }
  static \u0275fac = function MapTransitLayer_Factory(__ngFactoryType__) {
    return new (__ngFactoryType__ || _MapTransitLayer)();
  };
  static \u0275dir = /* @__PURE__ */ \u0275\u0275defineDirective({
    type: _MapTransitLayer,
    selectors: [["map-transit-layer"]],
    outputs: {
      transitLayerInitialized: "transitLayerInitialized"
    },
    exportAs: ["mapTransitLayer"]
  });
};
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(MapTransitLayer, [{
    type: Directive,
    args: [{
      selector: "map-transit-layer",
      exportAs: "mapTransitLayer"
    }]
  }], null, {
    transitLayerInitialized: [{
      type: Output
    }]
  });
})();
var MapHeatmapLayer = class _MapHeatmapLayer {
  _googleMap = inject(GoogleMap);
  _ngZone = inject(NgZone);
  /**
   * Data shown on the heatmap.
   * See: https://developers.google.com/maps/documentation/javascript/reference/visualization
   */
  set data(data) {
    this._data = data;
  }
  _data;
  /**
   * Options used to configure the heatmap. See:
   * developers.google.com/maps/documentation/javascript/reference/visualization#HeatmapLayerOptions
   */
  set options(options) {
    this._options = options;
  }
  _options;
  /**
   * The underlying google.maps.visualization.HeatmapLayer object.
   *
   * See: https://developers.google.com/maps/documentation/javascript/reference/visualization
   */
  heatmap;
  /** Event emitted when the heatmap is initialized. */
  heatmapInitialized = new EventEmitter();
  constructor() {
  }
  ngOnInit() {
    if (this._googleMap._isBrowser) {
      if (!window.google?.maps?.visualization && !window.google?.maps.importLibrary && (typeof ngDevMode === "undefined" || ngDevMode)) {
        throw Error('Namespace `google.maps.visualization` not found, cannot construct heatmap. Please install the Google Maps JavaScript API with the "visualization" library: https://developers.google.com/maps/documentation/javascript/visualization');
      }
      if (google.maps.visualization?.HeatmapLayer && this._googleMap.googleMap) {
        this._initialize(this._googleMap.googleMap, google.maps.visualization.HeatmapLayer);
      } else {
        this._ngZone.runOutsideAngular(() => {
          Promise.all([this._googleMap._resolveMap(), google.maps.importLibrary("visualization")]).then(([map2, lib]) => {
            this._initialize(map2, lib.HeatmapLayer);
          });
        });
      }
    }
  }
  _initialize(map2, heatmapConstructor) {
    this._ngZone.runOutsideAngular(() => {
      this.heatmap = new heatmapConstructor(this._combineOptions());
      this._assertInitialized();
      this.heatmap.setMap(map2);
      this.heatmapInitialized.emit(this.heatmap);
    });
  }
  ngOnChanges(changes) {
    const {
      _data,
      heatmap
    } = this;
    if (heatmap) {
      if (changes["options"]) {
        heatmap.setOptions(this._combineOptions());
      }
      if (changes["data"] && _data !== void 0) {
        heatmap.setData(this._normalizeData(_data));
      }
    }
  }
  ngOnDestroy() {
    this.heatmap?.setMap(null);
  }
  /**
   * Gets the data that is currently shown on the heatmap.
   * See: developers.google.com/maps/documentation/javascript/reference/visualization#HeatmapLayer
   */
  getData() {
    this._assertInitialized();
    return this.heatmap.getData();
  }
  /** Creates a combined options object using the passed-in options and the individual inputs. */
  _combineOptions() {
    const options = this._options || {};
    return __spreadProps(__spreadValues({}, options), {
      data: this._normalizeData(this._data || options.data || []),
      map: this._googleMap.googleMap
    });
  }
  /**
   * Most Google Maps APIs support both `LatLng` objects and `LatLngLiteral`. The latter is more
   * convenient to write out, because the Google Maps API doesn't have to have been loaded in order
   * to construct them. The `HeatmapLayer` appears to be an exception that only allows a `LatLng`
   * object, or it throws a runtime error. Since it's more convenient and we expect that Angular
   * users will load the API asynchronously, we allow them to pass in a `LatLngLiteral` and we
   * convert it to a `LatLng` object before passing it off to Google Maps.
   */
  _normalizeData(data) {
    const result = [];
    data.forEach((item) => {
      result.push(isLatLngLiteral(item) ? new google.maps.LatLng(item.lat, item.lng) : item);
    });
    return result;
  }
  /** Asserts that the heatmap object has been initialized. */
  _assertInitialized() {
    if (typeof ngDevMode === "undefined" || ngDevMode) {
      if (!this.heatmap) {
        throw Error("Cannot interact with a Google Map HeatmapLayer before it has been initialized. Please wait for the heatmap to load before trying to interact with it.");
      }
    }
  }
  static \u0275fac = function MapHeatmapLayer_Factory(__ngFactoryType__) {
    return new (__ngFactoryType__ || _MapHeatmapLayer)();
  };
  static \u0275dir = /* @__PURE__ */ \u0275\u0275defineDirective({
    type: _MapHeatmapLayer,
    selectors: [["map-heatmap-layer"]],
    inputs: {
      data: "data",
      options: "options"
    },
    outputs: {
      heatmapInitialized: "heatmapInitialized"
    },
    exportAs: ["mapHeatmapLayer"],
    features: [\u0275\u0275NgOnChangesFeature]
  });
};
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(MapHeatmapLayer, [{
    type: Directive,
    args: [{
      selector: "map-heatmap-layer",
      exportAs: "mapHeatmapLayer"
    }]
  }], () => [], {
    data: [{
      type: Input
    }],
    options: [{
      type: Input
    }],
    heatmapInitialized: [{
      type: Output
    }]
  });
})();
function isLatLngLiteral(value) {
  return value && typeof value.lat === "number" && typeof value.lng === "number";
}
var DEFAULT_MARKER_OPTIONS = {
  position: {
    lat: 37.221995,
    lng: -122.184092
  }
};
var MapAdvancedMarker = class _MapAdvancedMarker {
  _googleMap = inject(GoogleMap);
  _ngZone = inject(NgZone);
  _eventManager = new MapEventManager(inject(NgZone));
  /**
   * Rollover text. If provided, an accessibility text (e.g. for use with screen readers) will be added to the AdvancedMarkerElement with the provided value.
   * See: https://developers.google.com/maps/documentation/javascript/reference/advanced-markers#AdvancedMarkerElementOptions.title
   */
  set title(title) {
    this._title = title;
  }
  _title;
  /**
   * Sets the AdvancedMarkerElement's position. An AdvancedMarkerElement may be constructed without a position, but will not be displayed until its position is provided - for example, by a user's actions or choices. An AdvancedMarkerElement's position can be provided by setting AdvancedMarkerElement.position if not provided at the construction.
   * Note: AdvancedMarkerElement with altitude is only supported on vector maps.
   * https://developers.google.com/maps/documentation/javascript/reference/advanced-markers#AdvancedMarkerElementOptions.position
   */
  set position(position) {
    this._position = position;
  }
  _position;
  /**
   * The DOM Element backing the visual of an AdvancedMarkerElement.
   * Note: AdvancedMarkerElement does not clone the passed-in DOM element. Once the DOM element is passed to an AdvancedMarkerElement, passing the same DOM element to another AdvancedMarkerElement will move the DOM element and cause the previous AdvancedMarkerElement to look empty.
   * See: https://developers.google.com/maps/documentation/javascript/reference/advanced-markers#AdvancedMarkerElementOptions.content
   */
  set content(content) {
    this._content = content;
  }
  _content;
  /**
   * If true, the AdvancedMarkerElement can be dragged.
   * Note: AdvancedMarkerElement with altitude is not draggable.
   * https://developers.google.com/maps/documentation/javascript/reference/advanced-markers#AdvancedMarkerElementOptions.gmpDraggable
   */
  set gmpDraggable(draggable) {
    this._draggable = draggable;
  }
  _draggable;
  /**
   * Options for constructing an AdvancedMarkerElement.
   * https://developers.google.com/maps/documentation/javascript/reference/advanced-markers#AdvancedMarkerElementOptions
   */
  set options(options) {
    this._options = options;
  }
  _options;
  /**
   * AdvancedMarkerElements on the map are prioritized by zIndex, with higher values indicating higher display.
   * https://developers.google.com/maps/documentation/javascript/reference/advanced-markers#AdvancedMarkerElementOptions.zIndex
   */
  set zIndex(zIndex) {
    this._zIndex = zIndex;
  }
  _zIndex;
  /**
   * This event is fired when the AdvancedMarkerElement element is clicked.
   * https://developers.google.com/maps/documentation/javascript/reference/advanced-markers#AdvancedMarkerElement.click
   */
  mapClick = this._eventManager.getLazyEmitter("click");
  /**
   * This event is fired when the AdvancedMarkerElement is double-clicked.
   */
  mapDblclick = this._eventManager.getLazyEmitter("dblclick");
  /**
   * This event is fired when the mouse moves out of the AdvancedMarkerElement.
   */
  mapMouseout = this._eventManager.getLazyEmitter("mouseout");
  /**
   * This event is fired when the mouse moves over the AdvancedMarkerElement.
   */
  mapMouseover = this._eventManager.getLazyEmitter("mouseover");
  /**
   * This event is fired when the mouse button is released over the AdvancedMarkerElement.
   */
  mapMouseup = this._eventManager.getLazyEmitter("mouseup");
  /**
   * This event is fired when the AdvancedMarkerElement is right-clicked.
   */
  mapRightclick = this._eventManager.getLazyEmitter("rightclick");
  /**
   * This event is repeatedly fired while the user drags the AdvancedMarkerElement.
   * https://developers.google.com/maps/documentation/javascript/reference/advanced-markers#AdvancedMarkerElement.drag
   */
  mapDrag = this._eventManager.getLazyEmitter("drag");
  /**
   * This event is fired when the user stops dragging the AdvancedMarkerElement.
   * https://developers.google.com/maps/documentation/javascript/reference/advanced-markers#AdvancedMarkerElement.dragend
   */
  mapDragend = this._eventManager.getLazyEmitter("dragend");
  /**
   * This event is fired when the user starts dragging the AdvancedMarkerElement.
   * https://developers.google.com/maps/documentation/javascript/reference/advanced-markers#AdvancedMarkerElement.dragstart
   */
  mapDragstart = this._eventManager.getLazyEmitter("dragstart");
  /** Event emitted when the marker is initialized. */
  markerInitialized = new EventEmitter();
  /**
   * The underlying google.maps.marker.AdvancedMarkerElement object.
   *
   * See developers.google.com/maps/documentation/javascript/reference/advanced-markers#AdvancedMarkerElement
   */
  advancedMarker;
  constructor() {
  }
  ngOnInit() {
    if (!this._googleMap._isBrowser) {
      return;
    }
    if (google.maps.marker?.AdvancedMarkerElement && this._googleMap.googleMap) {
      this._initialize(this._googleMap.googleMap, google.maps.marker.AdvancedMarkerElement);
    } else {
      this._ngZone.runOutsideAngular(() => {
        Promise.all([this._googleMap._resolveMap(), google.maps.importLibrary("marker")]).then(([map2, lib]) => {
          this._initialize(map2, lib.AdvancedMarkerElement);
        });
      });
    }
  }
  _initialize(map2, advancedMarkerConstructor) {
    this._ngZone.runOutsideAngular(() => {
      this.advancedMarker = new advancedMarkerConstructor(this._combineOptions());
      this._assertInitialized();
      this.advancedMarker.map = map2;
      this._eventManager.setTarget(this.advancedMarker);
      this.markerInitialized.next(this.advancedMarker);
    });
  }
  ngOnChanges(changes) {
    const {
      advancedMarker,
      _content,
      _position,
      _title,
      _draggable,
      _zIndex
    } = this;
    if (advancedMarker) {
      if (changes["title"]) {
        advancedMarker.title = _title;
      }
      if (changes["gmpDraggable"]) {
        advancedMarker.gmpDraggable = _draggable;
      }
      if (changes["content"]) {
        advancedMarker.content = _content;
      }
      if (changes["position"]) {
        advancedMarker.position = _position;
      }
      if (changes["zIndex"]) {
        advancedMarker.zIndex = _zIndex;
      }
    }
  }
  ngOnDestroy() {
    this.markerInitialized.complete();
    this._eventManager.destroy();
    if (this.advancedMarker) {
      this.advancedMarker.map = null;
    }
  }
  getAnchor() {
    this._assertInitialized();
    return this.advancedMarker;
  }
  /** Returns a promise that resolves when the marker has been initialized. */
  _resolveMarker() {
    return this.advancedMarker ? Promise.resolve(this.advancedMarker) : this.markerInitialized.pipe(take(1)).toPromise();
  }
  /** Creates a combined options object using the passed-in options and the individual inputs. */
  _combineOptions() {
    const options = this._options || DEFAULT_MARKER_OPTIONS;
    return __spreadProps(__spreadValues({}, options), {
      title: this._title || options.title,
      position: this._position || options.position,
      content: this._content || options.content,
      zIndex: this._zIndex ?? options.zIndex,
      gmpDraggable: this._draggable ?? options.gmpDraggable,
      map: this._googleMap.googleMap
    });
  }
  /** Asserts that the map has been initialized. */
  _assertInitialized() {
    if (typeof ngDevMode === "undefined" || ngDevMode) {
      if (!this.advancedMarker) {
        throw Error("Cannot interact with a Google Map Marker before it has been initialized. Please wait for the Marker to load before trying to interact with it.");
      }
    }
  }
  static \u0275fac = function MapAdvancedMarker_Factory(__ngFactoryType__) {
    return new (__ngFactoryType__ || _MapAdvancedMarker)();
  };
  static \u0275dir = /* @__PURE__ */ \u0275\u0275defineDirective({
    type: _MapAdvancedMarker,
    selectors: [["map-advanced-marker"]],
    inputs: {
      title: "title",
      position: "position",
      content: "content",
      gmpDraggable: "gmpDraggable",
      options: "options",
      zIndex: "zIndex"
    },
    outputs: {
      mapClick: "mapClick",
      mapDblclick: "mapDblclick",
      mapMouseout: "mapMouseout",
      mapMouseover: "mapMouseover",
      mapMouseup: "mapMouseup",
      mapRightclick: "mapRightclick",
      mapDrag: "mapDrag",
      mapDragend: "mapDragend",
      mapDragstart: "mapDragstart",
      markerInitialized: "markerInitialized"
    },
    exportAs: ["mapAdvancedMarker"],
    features: [\u0275\u0275ProvidersFeature([{
      provide: MAP_MARKER,
      useExisting: _MapAdvancedMarker
    }]), \u0275\u0275NgOnChangesFeature]
  });
};
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(MapAdvancedMarker, [{
    type: Directive,
    args: [{
      selector: "map-advanced-marker",
      exportAs: "mapAdvancedMarker",
      providers: [{
        provide: MAP_MARKER,
        useExisting: MapAdvancedMarker
      }]
    }]
  }], () => [], {
    title: [{
      type: Input
    }],
    position: [{
      type: Input
    }],
    content: [{
      type: Input
    }],
    gmpDraggable: [{
      type: Input
    }],
    options: [{
      type: Input
    }],
    zIndex: [{
      type: Input
    }],
    mapClick: [{
      type: Output
    }],
    mapDblclick: [{
      type: Output
    }],
    mapMouseout: [{
      type: Output
    }],
    mapMouseover: [{
      type: Output
    }],
    mapMouseup: [{
      type: Output
    }],
    mapRightclick: [{
      type: Output
    }],
    mapDrag: [{
      type: Output
    }],
    mapDragend: [{
      type: Output
    }],
    mapDragstart: [{
      type: Output
    }],
    markerInitialized: [{
      type: Output
    }]
  });
})();
var MapMarkerClusterer = class _MapMarkerClusterer {
  _googleMap = inject(GoogleMap);
  _ngZone = inject(NgZone);
  _currentMarkers = /* @__PURE__ */ new Set();
  _closestMapEventManager = new MapEventManager(this._ngZone);
  _markersSubscription = Subscription.EMPTY;
  /** Whether the clusterer is allowed to be initialized. */
  _canInitialize = this._googleMap._isBrowser;
  /**
   * Used to customize how the marker cluster is rendered.
   * See https://googlemaps.github.io/js-markerclusterer/interfaces/Renderer.html.
   */
  renderer;
  /**
   * Algorithm used to cluster the markers.
   * See https://googlemaps.github.io/js-markerclusterer/interfaces/Algorithm.html.
   */
  algorithm;
  /** Emits when clustering has started. */
  clusteringbegin = this._closestMapEventManager.getLazyEmitter("clusteringbegin");
  /** Emits when clustering is done. */
  clusteringend = this._closestMapEventManager.getLazyEmitter("clusteringend");
  /** Emits when a cluster has been clicked. */
  clusterClick = new EventEmitter();
  /** Event emitted when the marker clusterer is initialized. */
  markerClustererInitialized = new EventEmitter();
  _markers;
  /** Underlying MarkerClusterer object used to interact with Google Maps. */
  markerClusterer;
  async ngOnInit() {
    if (this._canInitialize) {
      await this._createCluster();
      this._closestMapEventManager.setTarget(this._googleMap.googleMap);
    }
  }
  async ngOnChanges(changes) {
    const change = changes["renderer"] || changes["algorithm"];
    if (this.markerClusterer && change && !change.isFirstChange()) {
      await this._createCluster();
    }
  }
  ngOnDestroy() {
    this._markersSubscription.unsubscribe();
    this._closestMapEventManager.destroy();
    this._destroyCluster();
  }
  async _createCluster() {
    if (!markerClusterer?.MarkerClusterer && (typeof ngDevMode === "undefined" || ngDevMode)) {
      throw Error("MarkerClusterer class not found, cannot construct a marker cluster. Please install the MarkerClusterer library: https://github.com/googlemaps/js-markerclusterer");
    }
    const map2 = await this._googleMap._resolveMap();
    this._destroyCluster();
    this._ngZone.runOutsideAngular(() => {
      this.markerClusterer = new markerClusterer.MarkerClusterer({
        map: map2,
        renderer: this.renderer,
        algorithm: this.algorithm,
        onClusterClick: (event, cluster, map3) => {
          if (this.clusterClick.observers.length) {
            this._ngZone.run(() => this.clusterClick.emit(cluster));
          } else {
            markerClusterer.defaultOnClusterClickHandler(event, cluster, map3);
          }
        }
      });
      this.markerClustererInitialized.emit(this.markerClusterer);
    });
    await this._watchForMarkerChanges();
  }
  async _watchForMarkerChanges() {
    this._assertInitialized();
    const initialMarkers = [];
    const markers = await this._getInternalMarkers(this._markers.toArray());
    for (const marker of markers) {
      this._currentMarkers.add(marker);
      initialMarkers.push(marker);
    }
    this.markerClusterer.addMarkers(initialMarkers);
    this._markersSubscription.unsubscribe();
    this._markersSubscription = this._markers.changes.subscribe(async (markerComponents) => {
      this._assertInitialized();
      const newMarkers = new Set(await this._getInternalMarkers(markerComponents));
      const markersToAdd = [];
      const markersToRemove = [];
      for (const marker of Array.from(newMarkers)) {
        if (!this._currentMarkers.has(marker)) {
          this._currentMarkers.add(marker);
          markersToAdd.push(marker);
        }
      }
      for (const marker of Array.from(this._currentMarkers)) {
        if (!newMarkers.has(marker)) {
          markersToRemove.push(marker);
        }
      }
      this.markerClusterer.addMarkers(markersToAdd, true);
      this.markerClusterer.removeMarkers(markersToRemove, true);
      this.markerClusterer.render();
      for (const marker of markersToRemove) {
        this._currentMarkers.delete(marker);
      }
    });
  }
  _destroyCluster() {
    this.markerClusterer?.onRemove();
    this.markerClusterer = void 0;
  }
  _getInternalMarkers(markers) {
    return Promise.all(markers.map((marker) => marker._resolveMarker()));
  }
  _assertInitialized() {
    if (typeof ngDevMode === "undefined" || ngDevMode) {
      if (!this._googleMap.googleMap) {
        throw Error("Cannot access Google Map information before the API has been initialized. Please wait for the API to load before trying to interact with it.");
      }
      if (!this.markerClusterer) {
        throw Error("Cannot interact with a MarkerClusterer before it has been initialized. Please wait for the MarkerClusterer to load before trying to interact with it.");
      }
    }
  }
  static \u0275fac = function MapMarkerClusterer_Factory(__ngFactoryType__) {
    return new (__ngFactoryType__ || _MapMarkerClusterer)();
  };
  static \u0275cmp = /* @__PURE__ */ \u0275\u0275defineComponent({
    type: _MapMarkerClusterer,
    selectors: [["map-marker-clusterer"]],
    contentQueries: function MapMarkerClusterer_ContentQueries(rf, ctx, dirIndex) {
      if (rf & 1) {
        \u0275\u0275contentQuery(dirIndex, MAP_MARKER, 5);
      }
      if (rf & 2) {
        let _t;
        \u0275\u0275queryRefresh(_t = \u0275\u0275loadQuery()) && (ctx._markers = _t);
      }
    },
    inputs: {
      renderer: "renderer",
      algorithm: "algorithm"
    },
    outputs: {
      clusteringbegin: "clusteringbegin",
      clusteringend: "clusteringend",
      clusterClick: "clusterClick",
      markerClustererInitialized: "markerClustererInitialized"
    },
    exportAs: ["mapMarkerClusterer"],
    features: [\u0275\u0275NgOnChangesFeature],
    ngContentSelectors: _c026,
    decls: 1,
    vars: 0,
    template: function MapMarkerClusterer_Template(rf, ctx) {
      if (rf & 1) {
        \u0275\u0275projectionDef();
        \u0275\u0275projection(0);
      }
    },
    encapsulation: 2,
    changeDetection: 0
  });
};
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(MapMarkerClusterer, [{
    type: Component,
    args: [{
      selector: "map-marker-clusterer",
      exportAs: "mapMarkerClusterer",
      changeDetection: ChangeDetectionStrategy.OnPush,
      template: "<ng-content/>",
      encapsulation: ViewEncapsulation.None
    }]
  }], null, {
    renderer: [{
      type: Input
    }],
    algorithm: [{
      type: Input
    }],
    clusteringbegin: [{
      type: Output
    }],
    clusteringend: [{
      type: Output
    }],
    clusterClick: [{
      type: Output
    }],
    markerClustererInitialized: [{
      type: Output
    }],
    _markers: [{
      type: ContentChildren,
      args: [MAP_MARKER, {
        descendants: true
      }]
    }]
  });
})();
var COMPONENTS = [GoogleMap, MapBaseLayer, MapBicyclingLayer, MapCircle, MapDirectionsRenderer, MapGroundOverlay, MapHeatmapLayer, MapInfoWindow, MapKmlLayer, MapMarker, MapAdvancedMarker, DeprecatedMapMarkerClusterer, MapPolygon, MapPolyline, MapRectangle, MapTrafficLayer, MapTransitLayer, MapMarkerClusterer];
var GoogleMapsModule = class _GoogleMapsModule {
  static \u0275fac = function GoogleMapsModule_Factory(__ngFactoryType__) {
    return new (__ngFactoryType__ || _GoogleMapsModule)();
  };
  static \u0275mod = /* @__PURE__ */ \u0275\u0275defineNgModule({
    type: _GoogleMapsModule,
    imports: [GoogleMap, MapBaseLayer, MapBicyclingLayer, MapCircle, MapDirectionsRenderer, MapGroundOverlay, MapHeatmapLayer, MapInfoWindow, MapKmlLayer, MapMarker, MapAdvancedMarker, DeprecatedMapMarkerClusterer, MapPolygon, MapPolyline, MapRectangle, MapTrafficLayer, MapTransitLayer, MapMarkerClusterer],
    exports: [GoogleMap, MapBaseLayer, MapBicyclingLayer, MapCircle, MapDirectionsRenderer, MapGroundOverlay, MapHeatmapLayer, MapInfoWindow, MapKmlLayer, MapMarker, MapAdvancedMarker, DeprecatedMapMarkerClusterer, MapPolygon, MapPolyline, MapRectangle, MapTrafficLayer, MapTransitLayer, MapMarkerClusterer]
  });
  static \u0275inj = /* @__PURE__ */ \u0275\u0275defineInjector({});
};
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(GoogleMapsModule, [{
    type: NgModule,
    args: [{
      imports: COMPONENTS,
      exports: COMPONENTS
    }]
  }], null, null);
})();
var MapDirectionsService = class _MapDirectionsService {
  _ngZone = inject(NgZone);
  _directionsService;
  constructor() {
  }
  /**
   * See
   * developers.google.com/maps/documentation/javascript/reference/directions
   * #DirectionsService.route
   */
  route(request) {
    return new Observable((observer) => {
      this._getService().then((service) => {
        service.route(request, (result, status) => {
          this._ngZone.run(() => {
            observer.next({
              result: result || void 0,
              status
            });
            observer.complete();
          });
        });
      });
    });
  }
  _getService() {
    if (!this._directionsService) {
      if (google.maps.DirectionsService) {
        this._directionsService = new google.maps.DirectionsService();
      } else {
        return google.maps.importLibrary("routes").then((lib) => {
          this._directionsService = new lib.DirectionsService();
          return this._directionsService;
        });
      }
    }
    return Promise.resolve(this._directionsService);
  }
  static \u0275fac = function MapDirectionsService_Factory(__ngFactoryType__) {
    return new (__ngFactoryType__ || _MapDirectionsService)();
  };
  static \u0275prov = /* @__PURE__ */ \u0275\u0275defineInjectable({
    token: _MapDirectionsService,
    factory: _MapDirectionsService.\u0275fac,
    providedIn: "root"
  });
};
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(MapDirectionsService, [{
    type: Injectable,
    args: [{
      providedIn: "root"
    }]
  }], () => [], null);
})();
var MapGeocoder = class _MapGeocoder {
  _ngZone = inject(NgZone);
  _geocoder;
  constructor() {
  }
  /**
   * See developers.google.com/maps/documentation/javascript/reference/geocoder#Geocoder.geocode
   */
  geocode(request) {
    return new Observable((observer) => {
      this._getGeocoder().then((geocoder) => {
        geocoder.geocode(request, (results, status) => {
          this._ngZone.run(() => {
            observer.next({
              results: results || [],
              status
            });
            observer.complete();
          });
        });
      });
    });
  }
  _getGeocoder() {
    if (!this._geocoder) {
      if (google.maps.Geocoder) {
        this._geocoder = new google.maps.Geocoder();
      } else {
        return google.maps.importLibrary("geocoding").then((lib) => {
          this._geocoder = new lib.Geocoder();
          return this._geocoder;
        });
      }
    }
    return Promise.resolve(this._geocoder);
  }
  static \u0275fac = function MapGeocoder_Factory(__ngFactoryType__) {
    return new (__ngFactoryType__ || _MapGeocoder)();
  };
  static \u0275prov = /* @__PURE__ */ \u0275\u0275defineInjectable({
    token: _MapGeocoder,
    factory: _MapGeocoder.\u0275fac,
    providedIn: "root"
  });
};
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(MapGeocoder, [{
    type: Injectable,
    args: [{
      providedIn: "root"
    }]
  }], () => [], null);
})();

// src/app/shared/services/google-maps-loader.service.ts
var GoogleMapsLoaderService = class _GoogleMapsLoaderService {
  apiKey = "";
  librariesLoaded = {};
  constructor() {
  }
  setApiKey(key) {
    this.apiKey = key;
  }
  /**
   * Load Google Maps API with specified libraries
   * @param libraries Optional array of Google Maps libraries to load
   * @returns Promise that resolves when the API is loaded
   */
  loadGoogleMaps(libraries = []) {
    if (typeof google !== "undefined" && isDefined(google?.maps) && libraries.every((lib) => this.librariesLoaded[lib])) {
      return Promise.resolve();
    }
    if (window.googleMapsInitialized) {
      return window.googleMapsInitialized;
    }
    const existingScript = document.querySelector('script[src^="https://maps.googleapis.com/maps/api/js"]');
    if (existingScript) {
      window.googleMapsInitialized = window.googleMapsInitialized ?? new Promise((resolve) => {
        if (typeof google !== "undefined" && isDefined(google.maps)) {
          resolve();
        } else {
          window.googleMapsCallback = () => {
            resolve();
            delete window.googleMapsCallback;
          };
        }
      });
      return window.googleMapsInitialized;
    }
    const promise = new Promise((resolve, reject) => {
      window.googleMapsCallback = () => {
        libraries.forEach((lib) => this.librariesLoaded[lib] = true);
        resolve();
        delete window.googleMapsCallback;
      };
      try {
        const script = document.createElement("script");
        const libraryParam = libraries.length ? `&libraries=${libraries.join(",")}` : "";
        script.src = `https://maps.googleapis.com/maps/api/js?key=${this.apiKey}${libraryParam}&callback=googleMapsCallback&loading=async`;
        script.async = true;
        script.defer = true;
        script.onerror = () => reject(new Error("Failed to load Google Maps API"));
        document.head.appendChild(script);
      } catch (error) {
        reject(error instanceof Error ? error : new Error(String(error)));
      }
    });
    window.googleMapsInitialized = promise;
    return promise;
  }
  static \u0275fac = function GoogleMapsLoaderService_Factory(__ngFactoryType__) {
    return new (__ngFactoryType__ || _GoogleMapsLoaderService)();
  };
  static \u0275prov = /* @__PURE__ */ \u0275\u0275defineInjectable({ token: _GoogleMapsLoaderService, factory: _GoogleMapsLoaderService.\u0275fac, providedIn: "root" });
};
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(GoogleMapsLoaderService, [{
    type: Injectable,
    args: [{
      providedIn: "root"
    }]
  }], () => [], null);
})();

// src/app/shared/components/maps/google-map/google-map.component.ts
var _c027 = ["mapContainer"];
var GoogleMapComponent = class _GoogleMapComponent {
  ngZone = inject(NgZone);
  googleMapsLoader = inject(GoogleMapsLoaderService);
  mapContainer;
  // Input signals with properly typed generics
  apiKey = input(environment.googleMapsApiKey, ...ngDevMode ? [{ debugName: "apiKey" }] : []);
  center = input({ lat: 40.7128, lng: -74.006 }, ...ngDevMode ? [{ debugName: "center" }] : []);
  // Default: New York
  zoom = input(12, ...ngDevMode ? [{ debugName: "zoom" }] : []);
  mapTypeId = input("roadmap", ...ngDevMode ? [{ debugName: "mapTypeId" }] : []);
  markers = model([], ...ngDevMode ? [{ debugName: "markers" }] : []);
  useAdvancedMarkers = input(true, ...ngDevMode ? [{ debugName: "useAdvancedMarkers" }] : []);
  // Toggle between legacy markers and advanced markers
  polygons = model([], ...ngDevMode ? [{ debugName: "polygons" }] : []);
  class = input("w-full h-[500px]", ...ngDevMode ? [{ debugName: "class" }] : []);
  enableTrafficLayer = input(false, ...ngDevMode ? [{ debugName: "enableTrafficLayer" }] : []);
  clickableMarkers = input(true, ...ngDevMode ? [{ debugName: "clickableMarkers" }] : []);
  fitBoundsToMarkers = input(false, ...ngDevMode ? [{ debugName: "fitBoundsToMarkers" }] : []);
  // Output events with properly typed generics
  mapClick = output();
  markerClick = output();
  mapLoaded = output();
  boundsChanged = output();
  centerChanged = output();
  markerDragEnd = output();
  polygonChanged = output();
  map;
  legacyMarkers = [];
  advancedMarkers = [];
  googlePolygons = [];
  infoWindow = null;
  isMapInitialized = signal(false, ...ngDevMode ? [{ debugName: "isMapInitialized" }] : []);
  trafficLayer;
  polygonEventListeners = [];
  boundsChangedTimeout = null;
  constructor() {
    effect(() => {
      if (!this.isMapInitialized())
        return;
      this.map.setCenter(this.center());
      this.map.setZoom(this.zoom());
    });
    effect(() => {
      if (!this.isMapInitialized())
        return;
      this.updateMarkers();
    });
    effect(() => {
      if (!this.isMapInitialized())
        return;
      this.updatePolygons();
    });
    effect(() => {
      if (!this.isMapInitialized())
        return;
      this.toggleTrafficLayer();
      this.map.setMapTypeId(this.mapTypeId());
    });
  }
  ngAfterViewInit() {
    if (this.apiKey()) {
      this.googleMapsLoader.setApiKey(this.apiKey());
    }
    this.googleMapsLoader.loadGoogleMaps(["geometry"]).then(() => {
      this.initializeMap();
    }).catch((error) => {
      console.error("Error loading Google Maps API:", error);
    });
  }
  ngOnDestroy() {
    this.polygonEventListeners.forEach((listener) => google.maps.event.removeListener(listener));
    this.polygonEventListeners = [];
    this.clearMarkers();
    this.googlePolygons.forEach((polygon) => polygon.setMap(null));
    this.googlePolygons = [];
    if (this.trafficLayer) {
      this.trafficLayer.setMap(null);
      this.trafficLayer = void 0;
    }
    if (this.infoWindow) {
      this.infoWindow.close();
      this.infoWindow = null;
    }
    if (isDefined(this.map)) {
      google.maps.event.clearInstanceListeners(this.map);
    }
  }
  initializeMap(retryCount = 0) {
    if (isNullOrUndefined(this.mapContainer)) {
      if (retryCount < 5) {
        setTimeout(() => this.initializeMap(retryCount + 1), 100);
      } else {
        console.error("Map container not found after multiple attempts.");
      }
      return;
    }
    const mapOptions = {
      center: this.center(),
      zoom: this.zoom(),
      mapTypeId: this.mapTypeId(),
      streetViewControl: true,
      mapTypeControl: true,
      fullscreenControl: true,
      zoomControl: true
    };
    this.map = new google.maps.Map(this.mapContainer.nativeElement, mapOptions);
    this.infoWindow = new google.maps.InfoWindow();
    this.isMapInitialized.set(true);
    this.map.addListener("click", (event) => {
      this.ngZone.run(() => this.mapClick.emit(event));
    });
    this.map.addListener("bounds_changed", () => {
      if (this.boundsChangedTimeout !== null) {
        window.clearTimeout(this.boundsChangedTimeout);
      }
      this.boundsChangedTimeout = window.setTimeout(() => {
        this.ngZone.run(() => {
          const bounds = this.map.getBounds();
          if (bounds) {
            this.boundsChanged.emit(bounds);
          }
        });
      }, 100);
    });
    if (this.enableTrafficLayer()) {
      this.toggleTrafficLayer();
    }
    this.updateMarkers();
    this.updatePolygons();
    this.ngZone.run(() => this.mapLoaded.emit(this.map));
  }
  updateMarkers() {
    this.clearMarkers();
    const currentMarkers = this.markers();
    if (isDefined(currentMarkers) && currentMarkers.length > 0) {
      const bounds = new google.maps.LatLngBounds();
      currentMarkers.forEach((markerData) => {
        bounds.extend(markerData.position);
        if (this.useAdvancedMarkers() && isDefined(google.maps.marker.AdvancedMarkerElement)) {
          this.createAdvancedMarker(markerData, bounds);
        } else {
          this.createLegacyMarker(markerData, bounds);
        }
      });
      if (this.fitBoundsToMarkers() && currentMarkers.length > 0) {
        this.map.fitBounds(bounds);
      }
    }
  }
  createAdvancedMarker(markerData, bounds) {
    if (isNullOrUndefined(google.maps.marker) || isNullOrUndefined(google.maps.marker.AdvancedMarkerElement)) {
      console.warn("Advanced Marker Element is not available. Falling back to legacy marker.");
      this.createLegacyMarker(markerData, bounds);
      return;
    }
    let pinElement;
    if (isDefined(markerData.title)) {
      pinElement = new google.maps.marker.PinElement({
        glyph: markerData.title.charAt(0).toUpperCase(),
        glyphColor: "white",
        background: isDefined(markerData.icon) && typeof markerData.icon === "string" ? markerData.icon : "#1E88E5"
        // Default blue color if no icon color is provided
      });
    }
    const markerOptions = {
      map: this.map,
      position: markerData.position,
      title: markerData.title,
      content: pinElement || void 0
    };
    if (isDefined(markerData.draggable)) {
      markerOptions.gmpDraggable = true;
    }
    const advancedMarker = new google.maps.marker.AdvancedMarkerElement(markerOptions);
    this.advancedMarkers.push(advancedMarker);
    if (this.clickableMarkers()) {
      advancedMarker.addListener("click", () => {
        this.ngZone.run(() => {
          if (isDefined(markerData.infoContent) && this.infoWindow) {
            this.infoWindow.setContent(markerData.infoContent);
            this.infoWindow.open(this.map, advancedMarker);
          }
          this.markerClick.emit({
            marker: advancedMarker,
            customData: markerData.customData
          });
        });
      });
    }
    if (isDefined(markerData.draggable)) {
      advancedMarker.addListener("dragend", () => {
        this.ngZone.run(() => {
          const position = advancedMarker.position;
          if (isDefined(position)) {
            this.markerDragEnd.emit({
              marker: advancedMarker,
              position: {
                lat: position.lat,
                lng: position.lng
              },
              customData: markerData.customData
            });
          }
        });
      });
    }
  }
  createLegacyMarker(markerData, _bounds) {
    const markerOptions = {
      position: markerData.position,
      map: this.map,
      title: markerData.title ?? "",
      icon: isString(markerData.icon) ? markerData.icon : void 0,
      draggable: markerData.draggable ?? false
    };
    const marker = new google.maps.Marker(markerOptions);
    this.legacyMarkers.push(marker);
    if (this.clickableMarkers()) {
      marker.addListener("click", () => {
        this.ngZone.run(() => {
          if (isDefined(markerData.infoContent) && this.infoWindow) {
            this.infoWindow.setContent(markerData.infoContent);
            this.infoWindow.open(this.map, marker);
          }
          this.markerClick.emit({
            marker,
            customData: markerData.customData
          });
        });
      });
    }
    if (isDefined(markerData.draggable)) {
      marker.addListener("dragend", () => {
        this.ngZone.run(() => {
          const position = marker.getPosition();
          if (position) {
            this.markerDragEnd.emit({
              marker,
              position: {
                lat: position.lat(),
                lng: position.lng()
              },
              customData: markerData.customData
            });
          }
        });
      });
    }
  }
  clearMarkers() {
    this.legacyMarkers.forEach((marker) => marker.setMap(null));
    this.legacyMarkers = [];
    this.advancedMarkers.forEach((marker) => {
      marker.map = null;
    });
    this.advancedMarkers = [];
  }
  updatePolygons() {
    this.clearPolygons();
    const currentPolygons = this.polygons();
    if (isDefined(currentPolygons) && currentPolygons.length > 0) {
      currentPolygons.forEach((polygonData) => {
        const polygon = new google.maps.Polygon({
          paths: polygonData.paths,
          strokeColor: polygonData.strokeColor ?? "#FF0000",
          strokeOpacity: polygonData.strokeOpacity ?? 0.8,
          strokeWeight: polygonData.strokeWeight ?? 2,
          fillColor: polygonData.fillColor ?? "#FF0000",
          fillOpacity: polygonData.fillOpacity ?? 0.35,
          editable: polygonData.editable ?? false,
          draggable: polygonData.draggable ?? false,
          map: this.map
        });
        this.googlePolygons.push(polygon);
        const listener = polygon.addListener("mouseup", () => {
          this.ngZone.run(() => {
            const path = polygon.getPath();
            const paths = [];
            for (let i = 0; i < path.getLength(); i++) {
              const point = path.getAt(i);
              paths.push({
                lat: point.lat(),
                lng: point.lng()
              });
            }
            this.polygonChanged.emit({
              polygon,
              paths,
              customData: polygonData.customData
            });
          });
        });
        this.polygonEventListeners.push(listener);
      });
    }
  }
  clearPolygons() {
    this.polygonEventListeners.forEach((listener) => google.maps.event.removeListener(listener));
    this.polygonEventListeners = [];
    this.googlePolygons.forEach((polygon) => polygon.setMap(null));
    this.googlePolygons = [];
  }
  toggleTrafficLayer() {
    if (this.enableTrafficLayer()) {
      this.trafficLayer ??= new google.maps.TrafficLayer();
      this.trafficLayer.setMap(this.map);
    } else if (this.trafficLayer) {
      this.trafficLayer.setMap(null);
    }
  }
  // Public methods that can be called from parent components
  resizeMap() {
    if (this.isMapInitialized()) {
      google.maps.event.trigger(this.map, "resize");
    }
  }
  panTo(position) {
    if (this.isMapInitialized()) {
      this.map.panTo(position);
    }
  }
  setZoom(zoom, preventExtreme = true) {
    if (!this.isMapInitialized())
      return;
    let finalZoom = zoom;
    if (preventExtreme) {
      finalZoom = Math.max(3, Math.min(19, zoom));
    }
    this.map.setZoom(finalZoom);
  }
  clearAllMarkers() {
    if (this.isMapInitialized()) {
      this.clearMarkers();
    }
  }
  fitBounds() {
    if (!this.isMapInitialized() || this.legacyMarkers.length === 0 && this.advancedMarkers.length === 0)
      return;
    const bounds = new google.maps.LatLngBounds();
    this.legacyMarkers.forEach((marker) => {
      const position = marker.getPosition();
      if (position)
        bounds.extend(position);
    });
    this.advancedMarkers.forEach((marker) => {
      const position = marker.position;
      if (position)
        bounds.extend(position);
    });
    this.map.fitBounds(bounds);
  }
  updatePolygonPaths(index, paths) {
    if (this.isMapInitialized() && isDefined(this.polygons()[index])) {
      if (isDefined(this.googlePolygons[index])) {
        this.googlePolygons[index].setPaths(paths);
      }
    }
  }
  setPolygonEditable(index, editable) {
    if (this.isMapInitialized() && isDefined(this.polygons()[index])) {
      this.googlePolygons[index].setEditable(editable);
    }
  }
  setPolygonDraggable(index, draggable) {
    if (this.isMapInitialized() && isDefined(this.polygons()[index])) {
      this.googlePolygons[index].setDraggable(draggable);
    }
  }
  removePolygon(index) {
    if (this.isMapInitialized() && isDefined(this.polygons()[index])) {
      this.googlePolygons[index].setMap(null);
      this.googlePolygons.splice(index, 1);
    }
  }
  clearAllPolygons() {
    if (this.isMapInitialized()) {
      this.clearPolygons();
    }
  }
  static \u0275fac = function GoogleMapComponent_Factory(__ngFactoryType__) {
    return new (__ngFactoryType__ || _GoogleMapComponent)();
  };
  static \u0275cmp = /* @__PURE__ */ \u0275\u0275defineComponent({ type: _GoogleMapComponent, selectors: [["app-google-map"]], viewQuery: function GoogleMapComponent_Query(rf, ctx) {
    if (rf & 1) {
      \u0275\u0275viewQuery(_c027, 5);
    }
    if (rf & 2) {
      let _t;
      \u0275\u0275queryRefresh(_t = \u0275\u0275loadQuery()) && (ctx.mapContainer = _t.first);
    }
  }, inputs: { apiKey: [1, "apiKey"], center: [1, "center"], zoom: [1, "zoom"], mapTypeId: [1, "mapTypeId"], markers: [1, "markers"], useAdvancedMarkers: [1, "useAdvancedMarkers"], polygons: [1, "polygons"], class: [1, "class"], enableTrafficLayer: [1, "enableTrafficLayer"], clickableMarkers: [1, "clickableMarkers"], fitBoundsToMarkers: [1, "fitBoundsToMarkers"] }, outputs: { markers: "markersChange", polygons: "polygonsChange", mapClick: "mapClick", markerClick: "markerClick", mapLoaded: "mapLoaded", boundsChanged: "boundsChanged", centerChanged: "centerChanged", markerDragEnd: "markerDragEnd", polygonChanged: "polygonChanged" }, decls: 3, vars: 1, consts: [["mapContainer", ""], [1, "google-map-container"], [1, "map-container", 3, "ngClass"]], template: function GoogleMapComponent_Template(rf, ctx) {
    if (rf & 1) {
      \u0275\u0275elementStart(0, "div", 1);
      \u0275\u0275element(1, "div", 2, 0);
      \u0275\u0275elementEnd();
    }
    if (rf & 2) {
      \u0275\u0275advance();
      \u0275\u0275property("ngClass", ctx.class());
    }
  }, dependencies: [CommonModule, NgClass, GoogleMapsModule], styles: ["\n\n.google-map-container[_ngcontent-%COMP%] {\n  display: block;\n  width: 100%;\n}\n.google-map-container[_ngcontent-%COMP%]   .map-container[_ngcontent-%COMP%] {\n  border-radius: 0.5rem;\n  box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);\n}\n/*# sourceMappingURL=google-map.component.css.map */"] });
};
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(GoogleMapComponent, [{
    type: Component,
    args: [{ selector: "app-google-map", standalone: true, imports: [CommonModule, GoogleMapsModule], template: '<div class="google-map-container">\n  <div #mapContainer class="map-container" [ngClass]="class()"></div>\n</div>\n', styles: ["/* src/app/shared/components/maps/google-map/google-map.component.scss */\n.google-map-container {\n  display: block;\n  width: 100%;\n}\n.google-map-container .map-container {\n  border-radius: 0.5rem;\n  box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);\n}\n/*# sourceMappingURL=google-map.component.css.map */\n"] }]
  }], () => [], { mapContainer: [{
    type: ViewChild,
    args: ["mapContainer"]
  }], apiKey: [{ type: Input, args: [{ isSignal: true, alias: "apiKey", required: false }] }], center: [{ type: Input, args: [{ isSignal: true, alias: "center", required: false }] }], zoom: [{ type: Input, args: [{ isSignal: true, alias: "zoom", required: false }] }], mapTypeId: [{ type: Input, args: [{ isSignal: true, alias: "mapTypeId", required: false }] }], markers: [{ type: Input, args: [{ isSignal: true, alias: "markers", required: false }] }, { type: Output, args: ["markersChange"] }], useAdvancedMarkers: [{ type: Input, args: [{ isSignal: true, alias: "useAdvancedMarkers", required: false }] }], polygons: [{ type: Input, args: [{ isSignal: true, alias: "polygons", required: false }] }, { type: Output, args: ["polygonsChange"] }], class: [{ type: Input, args: [{ isSignal: true, alias: "class", required: false }] }], enableTrafficLayer: [{ type: Input, args: [{ isSignal: true, alias: "enableTrafficLayer", required: false }] }], clickableMarkers: [{ type: Input, args: [{ isSignal: true, alias: "clickableMarkers", required: false }] }], fitBoundsToMarkers: [{ type: Input, args: [{ isSignal: true, alias: "fitBoundsToMarkers", required: false }] }], mapClick: [{ type: Output, args: ["mapClick"] }], markerClick: [{ type: Output, args: ["markerClick"] }], mapLoaded: [{ type: Output, args: ["mapLoaded"] }], boundsChanged: [{ type: Output, args: ["boundsChanged"] }], centerChanged: [{ type: Output, args: ["centerChanged"] }], markerDragEnd: [{ type: Output, args: ["markerDragEnd"] }], polygonChanged: [{ type: Output, args: ["polygonChanged"] }] });
})();
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && \u0275setClassDebugInfo(GoogleMapComponent, { className: "GoogleMapComponent", filePath: "src/app/shared/components/maps/google-map/google-map.component.ts", lineNumber: 56 });
})();

// src/app/shared/components/maps/google-maps-zone/google-maps-zone.component.ts
var _c028 = ["map"];
function GoogleMapsZoneComponent_Conditional_4_Template(rf, ctx) {
  if (rf & 1) {
    \u0275\u0275elementStart(0, "div", 4);
    \u0275\u0275text(1);
    \u0275\u0275elementEnd();
  }
  if (rf & 2) {
    const ctx_r1 = \u0275\u0275nextContext();
    \u0275\u0275advance();
    \u0275\u0275textInterpolate1(" ", ctx_r1.errorMessage, " ");
  }
}
function GoogleMapsZoneComponent_Conditional_5_Conditional_1_Template(rf, ctx) {
  if (rf & 1) {
    const _r3 = \u0275\u0275getCurrentView();
    \u0275\u0275elementStart(0, "button", 9);
    \u0275\u0275listener("click", function GoogleMapsZoneComponent_Conditional_5_Conditional_1_Template_button_click_0_listener() {
      \u0275\u0275restoreView(_r3);
      const ctx_r1 = \u0275\u0275nextContext(2);
      return \u0275\u0275resetView(ctx_r1.startEditing());
    });
    \u0275\u0275text(1, " Edit Zone ");
    \u0275\u0275elementEnd();
  }
}
function GoogleMapsZoneComponent_Conditional_5_Conditional_2_Template(rf, ctx) {
  if (rf & 1) {
    const _r4 = \u0275\u0275getCurrentView();
    \u0275\u0275elementStart(0, "button", 10);
    \u0275\u0275listener("click", function GoogleMapsZoneComponent_Conditional_5_Conditional_2_Template_button_click_0_listener() {
      \u0275\u0275restoreView(_r4);
      const ctx_r1 = \u0275\u0275nextContext(2);
      return \u0275\u0275resetView(ctx_r1.saveZone());
    });
    \u0275\u0275text(1, " Save Changes ");
    \u0275\u0275elementEnd();
  }
}
function GoogleMapsZoneComponent_Conditional_5_Conditional_3_Template(rf, ctx) {
  if (rf & 1) {
    const _r5 = \u0275\u0275getCurrentView();
    \u0275\u0275elementStart(0, "button", 11);
    \u0275\u0275listener("click", function GoogleMapsZoneComponent_Conditional_5_Conditional_3_Template_button_click_0_listener() {
      \u0275\u0275restoreView(_r5);
      const ctx_r1 = \u0275\u0275nextContext(2);
      return \u0275\u0275resetView(ctx_r1.stopEditing());
    });
    \u0275\u0275text(1, " Cancel ");
    \u0275\u0275elementEnd();
  }
}
function GoogleMapsZoneComponent_Conditional_5_Template(rf, ctx) {
  if (rf & 1) {
    \u0275\u0275elementStart(0, "div", 5);
    \u0275\u0275conditionalCreate(1, GoogleMapsZoneComponent_Conditional_5_Conditional_1_Template, 2, 0, "button", 6);
    \u0275\u0275conditionalCreate(2, GoogleMapsZoneComponent_Conditional_5_Conditional_2_Template, 2, 0, "button", 7);
    \u0275\u0275conditionalCreate(3, GoogleMapsZoneComponent_Conditional_5_Conditional_3_Template, 2, 0, "button", 8);
    \u0275\u0275elementEnd();
  }
  if (rf & 2) {
    const ctx_r1 = \u0275\u0275nextContext();
    \u0275\u0275advance();
    \u0275\u0275conditional(!ctx_r1.editable() ? 1 : -1);
    \u0275\u0275advance();
    \u0275\u0275conditional(ctx_r1.editable() ? 2 : -1);
    \u0275\u0275advance();
    \u0275\u0275conditional(ctx_r1.editable() ? 3 : -1);
  }
}
var GoogleMapsZoneComponent = class _GoogleMapsZoneComponent {
  entity = input.required(...ngDevMode ? [{ debugName: "entity" }] : []);
  editable = model(false, ...ngDevMode ? [{ debugName: "editable" }] : []);
  onEditing = output();
  onSaving = output();
  onSaved = output();
  map;
  entitiesService = inject(EntitiesService);
  changeDetectorRef = inject(ChangeDetectorRef);
  errorMessage = null;
  zonePolygon = null;
  routePolyline = null;
  polygonChangedCleanup;
  routeEventListeners = [];
  center = signal({ lat: 40.7128, lng: -74.006 }, ...ngDevMode ? [{ debugName: "center" }] : []);
  fitBoundsTimeout;
  constructor() {
    const isMapInitialized = signal(false, ...ngDevMode ? [{ debugName: "isMapInitialized" }] : []);
    effect(() => {
      const currentEntity = this.entity();
      const mapIsReady = isMapInitialized();
      if (isDefined(currentEntity?.points) && currentEntity.points.length > 0) {
        const Lng = currentEntity.points.reduce((sum, p) => sum + p.x, 0) / currentEntity.points.length;
        const Lat = currentEntity.points.reduce((sum, p) => sum + p.y, 0) / currentEntity.points.length;
        this.center.set({ lat: Lat, lng: Lng });
      }
      if (mapIsReady && isDefined(currentEntity)) {
        setTimeout(() => {
          if (this.entity() !== currentEntity) {
            return;
          }
          this.loadZone();
          if (isDefined(currentEntity.points) && currentEntity.points.length > 0) {
            const paths = currentEntity.points.map((p) => ({
              lat: p.y,
              lng: p.x
            }));
            clearTimeout(this.fitBoundsTimeout);
            this.fitBoundsTimeout = setTimeout(() => {
              if (this.entity() === currentEntity) {
                this.fitZoneToViewport(paths, currentEntity);
              }
            }, 200);
          }
          this.setupPolygonChangeSubscription(currentEntity);
        }, 100);
      }
    });
    afterNextRender(() => {
      if (isDefined(this.map)) {
        if (this.map.isMapInitialized()) {
          isMapInitialized.set(true);
        }
        this.map.mapLoaded.subscribe(() => {
          isMapInitialized.set(true);
        });
      }
    });
    effect(() => {
      const entity = this.entity();
      if (isDefined(this.map) && isDefined(entity)) {
        if (entity.zoneType === "route") {
          this.updateRouteEditableStatus();
        } else if (this.zonePolygon) {
          this.updatePolygonEditableStatus();
        }
      }
    });
  }
  // Helper method to set up polygon change subscription
  setupPolygonChangeSubscription(entity) {
    if (entity?.zoneType !== "route") {
      if (this.polygonChangedCleanup) {
        this.polygonChangedCleanup.unsubscribe();
        this.polygonChangedCleanup = void 0;
      }
      this.polygonChangedCleanup = this.map.polygonChanged.subscribe((event) => {
        if (isDefined(entity) && event.customData?.id === entity.id) {
          const updatedZone = __spreadProps(__spreadValues({}, entity), {
            points: event.paths.map((path) => ({
              x: path.lng,
              y: path.lat
            }))
          });
          this.onSaved.emit(updatedZone);
        }
      });
    }
  }
  ngOnDestroy() {
    this.clearRouteListeners();
    if (this.routePolyline) {
      this.routePolyline.setMap(null);
      this.routePolyline = null;
    }
    if (this.polygonChangedCleanup) {
      this.polygonChangedCleanup.unsubscribe();
      this.polygonChangedCleanup = void 0;
    }
    if (isDefined(this.fitBoundsTimeout)) {
      clearTimeout(this.fitBoundsTimeout);
    }
  }
  /**
   * Loads the zone onto the map
   */
  loadZone() {
    const entity = this.entity();
    if (isNullOrUndefined(this.map) || !this.map.isMapInitialized() || isNullOrUndefined(entity)) {
      return;
    }
    this.clearMapElements();
    const paths = (entity.points ?? []).map((p) => ({ lat: p.y, lng: p.x }));
    if (entity.zoneType === "route") {
      this.displayRoute(paths);
    } else {
      let color = "";
      switch (entity.zoneType) {
        case "nogo":
          color = "#FF0000";
          break;
        case "keepin":
          color = "#4CAF50";
          break;
        default:
          color = "#1E88E5";
          break;
      }
      this.zonePolygon = {
        paths,
        editable: this.editable(),
        draggable: this.editable(),
        fillOpacity: 0.35,
        strokeWeight: 2,
        customData: { entityType: "zone", entityId: entity.id },
        fillColor: color,
        strokeColor: color
      };
      if (this.zonePolygon.paths.length > 0) {
        this.map.polygons.set([this.zonePolygon]);
      } else {
        this.map.polygons.set([]);
      }
    }
  }
  /**
   * Automatically fit the zone to the viewport with appropriate zoom
   */
  fitZoneToViewport(paths, _entity) {
    if (isNullOrUndefined(this.map?.map) || typeof google === "undefined" || paths.length === 0)
      return;
    try {
      const bounds = new google.maps.LatLngBounds();
      paths.forEach((point) => bounds.extend(point));
      const area = this.calculateArea(paths);
      let padding = 50;
      if (area < 0.01) {
        padding = 100;
      } else if (area > 10) {
        padding = 10;
      }
      const center = bounds.getCenter();
      if (isDefined(center)) {
        this.center.set({
          lat: center.lat(),
          lng: center.lng()
        });
      }
      if (isDefined(this.fitBoundsTimeout)) {
        clearTimeout(this.fitBoundsTimeout);
      }
      this.fitBoundsTimeout = setTimeout(() => {
        const newBounds = new google.maps.LatLngBounds();
        paths.forEach((point) => newBounds.extend(point));
        this.map.map.fitBounds(newBounds, padding);
        if (paths.length === 1 || area < 1e-4) {
          setTimeout(() => {
            const currentZoom = this.map.map.getZoom() ?? 0;
            if (currentZoom > 18) {
              this.map.setZoom(18);
            }
          }, 150);
        }
        if (area > 1e3) {
          setTimeout(() => {
            const currentZoom = this.map.map.getZoom() ?? 0;
            if (currentZoom < 5) {
              this.map.setZoom(5);
            }
          }, 150);
        }
        this.changeDetectorRef.markForCheck();
      }, 50);
    } catch (err) {
      console.error("Error fitting bounds:", err);
    }
  }
  /**
   * Calculate approximate area of polygon/route in square kilometers
   */
  calculateArea(paths) {
    if (paths.length < 3)
      return 0;
    try {
      if (typeof google !== "undefined") {
        const googlePaths = paths.map((p) => new google.maps.LatLng(p.lat, p.lng));
        return google.maps.geometry.spherical.computeArea(googlePaths) / 1e6;
      } else {
        let minLat = paths[0].lat, maxLat = paths[0].lat;
        let minLng = paths[0].lng, maxLng = paths[0].lng;
        paths.forEach((p) => {
          minLat = Math.min(minLat, p.lat);
          maxLat = Math.max(maxLat, p.lat);
          minLng = Math.min(minLng, p.lng);
          maxLng = Math.max(maxLng, p.lng);
        });
        const latDiff = maxLat - minLat;
        const lngDiff = maxLng - minLng;
        return latDiff * lngDiff * 111 * 111;
      }
    } catch (err) {
      console.error("Error calculating area:", err);
      return 0;
    }
  }
  /**
   * Clears existing map elements (polygons, polylines)
   */
  clearMapElements() {
    if (this.zonePolygon) {
      try {
        const currentPolygons = this.map.polygons() ?? [];
        const filteredPolygons = currentPolygons.filter((p) => p.customData?.id !== this.entity()?.id);
        this.map.polygons.set(filteredPolygons);
        this.zonePolygon = null;
      } catch (err) {
        console.error("Error clearing polygon:", err);
      }
    }
    if (this.routePolyline) {
      try {
        this.routePolyline.setMap(null);
        this.routePolyline = null;
      } catch (err) {
        console.error("Error clearing polyline:", err);
      }
    }
  }
  /**
   * Displays a route as a polyline
   */
  displayRoute(paths) {
    if (typeof google === "undefined") {
      return;
    }
    this.clearRouteListeners();
    try {
      this.routePolyline = new google.maps.Polyline({
        path: paths,
        geodesic: true,
        strokeColor: "#4CAF50",
        // Green for routes
        strokeOpacity: 1,
        strokeWeight: 4,
        editable: this.editable(),
        map: this.map.map
      });
      const clickListener = this.routePolyline.addListener("click", () => {
      });
      this.routeEventListeners.push(clickListener);
      if (this.editable()) {
        const setListener = google.maps.event.addListener(this.routePolyline.getPath(), "set_at", () => this.handleRoutePathChanged());
        this.routeEventListeners.push(setListener);
        const insertListener = google.maps.event.addListener(this.routePolyline.getPath(), "insert_at", () => this.handleRoutePathChanged());
        this.routeEventListeners.push(insertListener);
        const removeListener = google.maps.event.addListener(this.routePolyline.getPath(), "remove_at", () => this.handleRoutePathChanged());
        this.routeEventListeners.push(removeListener);
      }
    } catch (err) {
      console.error("Failed to display route:", err);
      this.errorMessage = `Failed to display route: ${err instanceof Error ? err.message : "Unknown error"}`;
    }
  }
  clearRouteListeners() {
    if (this.routeEventListeners.length > 0) {
      this.routeEventListeners.forEach((listener) => google.maps.event.removeListener(listener));
      this.routeEventListeners = [];
    }
  }
  /**
   * Handles route path changes when edited
   */
  handleRoutePathChanged() {
    if (!this.routePolyline)
      return;
    const path = this.routePolyline.getPath();
    const points = [];
    for (let i = 0; i < path.getLength(); i++) {
      const point = path.getAt(i);
      points.push({
        x: point.lng(),
        y: point.lat()
      });
    }
    const updatedZone = __spreadProps(__spreadValues({}, this.entity()), {
      points
    });
    this.onSaving.emit(true);
    this.onSaved.emit(updatedZone);
  }
  /**
   * Updates the polyline editable status
   */
  updateRouteEditableStatus() {
    if (isNullOrUndefined(this.map) || isNullOrUndefined(this.routePolyline))
      return;
    const editable = this.editable();
    this.routePolyline.setEditable(editable);
    this.routePolyline.setOptions({
      draggable: editable,
      editable
    });
  }
  /**
   * Displays a zone as a polygon
   */
  displayPolygon(paths) {
    let strokeColor = "#1E88E5";
    let fillColor = "#1E88E5";
    const entity = this.entity();
    if (entity.zoneType === "nogo") {
      strokeColor = "#FF0000";
      fillColor = "#FF0000";
    } else if (entity.zoneType === "keepin") {
      strokeColor = "#4CAF50";
      fillColor = "#4CAF50";
    }
    this.zonePolygon = {
      paths,
      strokeColor,
      strokeOpacity: 0.8,
      strokeWeight: 2,
      fillColor,
      fillOpacity: 0.35,
      editable: this.editable(),
      draggable: this.editable(),
      customData: {
        id: entity.id,
        name: entity.name ?? ""
      }
    };
    const currentPolygons = this.map.polygons() ?? [];
    const filteredPolygons = currentPolygons.filter((p) => p.customData?.id !== entity.id);
    this.map.polygons.set([...filteredPolygons, this.zonePolygon]);
    setTimeout(() => {
      this.changeDetectorRef.markForCheck();
    }, 0);
  }
  /**
   * Updates the polygon editable and draggable status based on the editable input
   */
  updatePolygonEditableStatus() {
    if (isNullOrUndefined(this.map) || isNullOrUndefined(this.zonePolygon)) {
      return;
    }
    const currentPolygons = this.map.polygons() ?? [];
    const index = currentPolygons.findIndex((p) => p.customData?.id === this.entity().id);
    if (index !== -1) {
      const updatedPolygon = __spreadProps(__spreadValues({}, currentPolygons[index]), {
        editable: this.editable(),
        draggable: this.editable()
      });
      const updatedPolygons = [...currentPolygons];
      updatedPolygons[index] = updatedPolygon;
      this.map.polygons.set(updatedPolygons);
      this.zonePolygon = updatedPolygon;
      if (isDefined(this.map.googlePolygons) && this.map.googlePolygons.length > index) {
        this.map.googlePolygons[index].setEditable(this.editable());
        this.map.googlePolygons[index].setDraggable(this.editable());
      }
    }
  }
  /**
   * Saves the current state of the zone
   */
  async saveZone() {
    const entity = this.entity();
    if (isNullOrUndefined(entity)) {
      return;
    }
    try {
      this.onSaving.emit(true);
      const points = [];
      if (entity.zoneType === "route" && this.routePolyline) {
        const path = this.routePolyline.getPath();
        for (let i = 0; i < path.getLength(); i++) {
          const point = path.getAt(i);
          points.push({
            x: point.lng(),
            y: point.lat()
          });
        }
      } else if (this.zonePolygon) {
        const currentPolygon = this.map.googlePolygons?.find((_, index) => this.map.polygons()[index].customData?.id === this.entity().id);
        if (!currentPolygon) {
          throw new Error("Polygon not found");
        }
        const path = currentPolygon.getPath();
        for (let i = 0; i < path.getLength(); i++) {
          const point = path.getAt(i);
          points.push({
            x: point.lng(),
            y: point.lat()
          });
        }
      } else {
        throw new Error("No polygon or route data found");
      }
      const updateRequest = {
        points
      };
      const updatedZone = await firstValueFrom(this.entitiesService.updateZone(entity.id, updateRequest));
      this.onSaved.emit(updatedZone);
    } catch (error) {
      this.showError(error);
    }
  }
  /**
   * Starts editing mode
   */
  startEditing() {
    if (!this.editable()) {
      this.editable.set(true);
      if (this.entity()?.zoneType === "route") {
        this.updateRouteEditableStatus();
      } else {
        this.updatePolygonEditableStatus();
      }
      this.onEditing.emit(true);
    }
  }
  /**
   * Stops editing mode
   */
  stopEditing() {
    if (this.editable()) {
      this.editable.set(false);
      if (this.entity()?.zoneType === "route") {
        this.updateRouteEditableStatus();
      } else {
        this.updatePolygonEditableStatus();
      }
      this.onEditing.emit(false);
    }
  }
  /**
   * Helper method to display errors
   */
  showError(error) {
    this.errorMessage = error?.message ?? "An error occurred while saving the zone";
    this.changeDetectorRef.markForCheck();
  }
  /**
   * Handles polygon change events from the map
   */
  onPolygonChanged(event) {
    if (event.customData?.id === this.entity()?.id) {
      this.zonePolygon = __spreadProps(__spreadValues({}, this.zonePolygon), {
        paths: event.paths
      });
    }
  }
  static \u0275fac = function GoogleMapsZoneComponent_Factory(__ngFactoryType__) {
    return new (__ngFactoryType__ || _GoogleMapsZoneComponent)();
  };
  static \u0275cmp = /* @__PURE__ */ \u0275\u0275defineComponent({ type: _GoogleMapsZoneComponent, selectors: [["app-google-maps-zone"]], viewQuery: function GoogleMapsZoneComponent_Query(rf, ctx) {
    if (rf & 1) {
      \u0275\u0275viewQuery(_c028, 5);
    }
    if (rf & 2) {
      let _t;
      \u0275\u0275queryRefresh(_t = \u0275\u0275loadQuery()) && (ctx.map = _t.first);
    }
  }, inputs: { entity: [1, "entity"], editable: [1, "editable"] }, outputs: { editable: "editableChange", onEditing: "onEditing", onSaving: "onSaving", onSaved: "onSaved" }, decls: 6, vars: 5, consts: [["map", ""], [1, "google-maps-zone-container"], [1, "map-container"], [3, "polygonChanged", "center"], [1, "error-message", "mt-2", "p-2", "bg-red-100", "text-red-700", "rounded"], [1, "actions", "mt-3"], [1, "edit-btn", "bg-blue-600", "hover:bg-blue-700", "text-white", "py-2", "px-4", "rounded"], [1, "save-btn", "bg-green-600", "hover:bg-green-700", "text-white", "py-2", "px-4", "rounded", "mr-2"], [1, "cancel-btn", "bg-gray-600", "hover:bg-gray-700", "text-white", "py-2", "px-4", "rounded"], [1, "edit-btn", "bg-blue-600", "hover:bg-blue-700", "text-white", "py-2", "px-4", "rounded", 3, "click"], [1, "save-btn", "bg-green-600", "hover:bg-green-700", "text-white", "py-2", "px-4", "rounded", "mr-2", 3, "click"], [1, "cancel-btn", "bg-gray-600", "hover:bg-gray-700", "text-white", "py-2", "px-4", "rounded", 3, "click"]], template: function GoogleMapsZoneComponent_Template(rf, ctx) {
    if (rf & 1) {
      const _r1 = \u0275\u0275getCurrentView();
      \u0275\u0275elementStart(0, "div", 1)(1, "div", 2)(2, "app-google-map", 3, 0);
      \u0275\u0275listener("polygonChanged", function GoogleMapsZoneComponent_Template_app_google_map_polygonChanged_2_listener($event) {
        \u0275\u0275restoreView(_r1);
        return \u0275\u0275resetView(ctx.onPolygonChanged($event));
      });
      \u0275\u0275elementEnd()();
      \u0275\u0275conditionalCreate(4, GoogleMapsZoneComponent_Conditional_4_Template, 2, 1, "div", 4);
      \u0275\u0275conditionalCreate(5, GoogleMapsZoneComponent_Conditional_5_Template, 4, 3, "div", 5);
      \u0275\u0275elementEnd();
    }
    if (rf & 2) {
      \u0275\u0275advance(2);
      \u0275\u0275classMap("h-[400px] w-full");
      \u0275\u0275property("center", ctx.center());
      \u0275\u0275advance(2);
      \u0275\u0275conditional(ctx.errorMessage ? 4 : -1);
      \u0275\u0275advance();
      \u0275\u0275conditional(ctx.entity() ? 5 : -1);
    }
  }, dependencies: [GoogleMapComponent], styles: ["\n\n.google-maps-container[_ngcontent-%COMP%] {\n  width: 100%;\n  height: 100%;\n  min-height: 400px;\n}\n[_nghost-%COMP%] {\n  display: block;\n  width: 100%;\n  height: 100%;\n}\n.google-maps-zone-container[_ngcontent-%COMP%] {\n  display: flex;\n  flex-direction: column;\n  width: 100%;\n}\n.google-maps-zone-container[_ngcontent-%COMP%]   .map-container[_ngcontent-%COMP%] {\n  width: 100%;\n  border: 1px solid #e0e0e0;\n  border-radius: 4px;\n  overflow: hidden;\n}\n.google-maps-zone-container[_ngcontent-%COMP%]   .error-message[_ngcontent-%COMP%] {\n  margin-top: 8px;\n  margin-bottom: 8px;\n}\n.google-maps-zone-container[_ngcontent-%COMP%]   .actions[_ngcontent-%COMP%] {\n  margin-top: 16px;\n  display: flex;\n}\n.google-maps-zone-container[_ngcontent-%COMP%]   .actions[_ngcontent-%COMP%]   button[_ngcontent-%COMP%] {\n  transition: background-color 0.2s;\n}\n.google-maps-zone-container[_ngcontent-%COMP%]   .actions[_ngcontent-%COMP%]   button[_ngcontent-%COMP%]:not(:last-child) {\n  margin-right: 8px;\n}\n/*# sourceMappingURL=google-maps-zone.component.css.map */"] });
};
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(GoogleMapsZoneComponent, [{
    type: Component,
    args: [{ selector: "app-google-maps-zone", standalone: true, imports: [GoogleMapComponent], template: `<div class="google-maps-zone-container">
  <div class="map-container">
    <app-google-map
      #map
      [class]="'h-[400px] w-full'"
      [center]="center()"
      (polygonChanged)="onPolygonChanged($event)"
    >
    </app-google-map>
  </div>

  @if (errorMessage) {
    <div class="error-message mt-2 p-2 bg-red-100 text-red-700 rounded">
      {{ errorMessage }}
    </div>
  }

  @if (entity()) {
    <div class="actions mt-3">
      @if (!editable()) {
        <button
          class="edit-btn bg-blue-600 hover:bg-blue-700 text-white py-2 px-4 rounded"
          (click)="startEditing()"
        >
          Edit Zone
        </button>
      }
      @if (editable()) {
        <button
          class="save-btn bg-green-600 hover:bg-green-700 text-white py-2 px-4 rounded mr-2"
          (click)="saveZone()"
        >
          Save Changes
        </button>
      }
      @if (editable()) {
        <button
          class="cancel-btn bg-gray-600 hover:bg-gray-700 text-white py-2 px-4 rounded"
          (click)="stopEditing()"
        >
          Cancel
        </button>
      }
    </div>
  }
</div>
`, styles: ["/* src/app/shared/components/maps/google-maps-zone/google-maps-zone.component.scss */\n.google-maps-container {\n  width: 100%;\n  height: 100%;\n  min-height: 400px;\n}\n:host {\n  display: block;\n  width: 100%;\n  height: 100%;\n}\n.google-maps-zone-container {\n  display: flex;\n  flex-direction: column;\n  width: 100%;\n}\n.google-maps-zone-container .map-container {\n  width: 100%;\n  border: 1px solid #e0e0e0;\n  border-radius: 4px;\n  overflow: hidden;\n}\n.google-maps-zone-container .error-message {\n  margin-top: 8px;\n  margin-bottom: 8px;\n}\n.google-maps-zone-container .actions {\n  margin-top: 16px;\n  display: flex;\n}\n.google-maps-zone-container .actions button {\n  transition: background-color 0.2s;\n}\n.google-maps-zone-container .actions button:not(:last-child) {\n  margin-right: 8px;\n}\n/*# sourceMappingURL=google-maps-zone.component.css.map */\n"] }]
  }], () => [], { entity: [{ type: Input, args: [{ isSignal: true, alias: "entity", required: true }] }], editable: [{ type: Input, args: [{ isSignal: true, alias: "editable", required: false }] }, { type: Output, args: ["editableChange"] }], onEditing: [{ type: Output, args: ["onEditing"] }], onSaving: [{ type: Output, args: ["onSaving"] }], onSaved: [{ type: Output, args: ["onSaved"] }], map: [{
    type: ViewChild,
    args: ["map"]
  }] });
})();
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && \u0275setClassDebugInfo(GoogleMapsZoneComponent, { className: "GoogleMapsZoneComponent", filePath: "src/app/shared/components/maps/google-maps-zone/google-maps-zone.component.ts", lineNumber: 45 });
})();

// src/app/features/administration/components/geofences/geofence-map-section/geofence-map-section.component.ts
var GeofenceMapSectionComponent = class _GeofenceMapSectionComponent extends EntitySectionBaseComponent {
  entitiesService = inject(EntitiesService);
  updateFormFields() {
  }
  submitChanges(formData) {
    const geofence = this.entity();
    if (isNullOrUndefined(geofence))
      return;
    this.entitiesService.updateZone(geofence.id, formData).pipe(takeUntilDestroyed(this.destroyRef)).subscribe({
      next: (response) => {
        this.isFormEditable.set(false);
        this.broadcastService.broadcast("entity-updated", {
          entityType: "geofence",
          operation: "update",
          entityId: geofence.id,
          data: response
        });
      },
      error: () => {
        this.isFormEditable.set(true);
      }
    });
  }
  static \u0275fac = /* @__PURE__ */ (() => {
    let \u0275GeofenceMapSectionComponent_BaseFactory;
    return function GeofenceMapSectionComponent_Factory(__ngFactoryType__) {
      return (\u0275GeofenceMapSectionComponent_BaseFactory || (\u0275GeofenceMapSectionComponent_BaseFactory = \u0275\u0275getInheritedFactory(_GeofenceMapSectionComponent)))(__ngFactoryType__ || _GeofenceMapSectionComponent);
    };
  })();
  static \u0275cmp = /* @__PURE__ */ \u0275\u0275defineComponent({ type: _GeofenceMapSectionComponent, selectors: [["app-geofence-map-section"]], features: [\u0275\u0275InheritDefinitionFeature], decls: 1, vars: 1, consts: [[3, "onSaved", "entity"]], template: function GeofenceMapSectionComponent_Template(rf, ctx) {
    if (rf & 1) {
      \u0275\u0275elementStart(0, "app-google-maps-zone", 0);
      \u0275\u0275listener("onSaved", function GeofenceMapSectionComponent_Template_app_google_maps_zone_onSaved_0_listener($event) {
        return ctx.submitChanges($event);
      });
      \u0275\u0275elementEnd();
    }
    if (rf & 2) {
      \u0275\u0275property("entity", ctx.entity());
    }
  }, dependencies: [GoogleMapsZoneComponent], encapsulation: 2 });
};
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(GeofenceMapSectionComponent, [{
    type: Component,
    args: [{ selector: "app-geofence-map-section", imports: [GoogleMapsZoneComponent], template: '<app-google-maps-zone [entity]="entity()!" (onSaved)="submitChanges($event)">\n</app-google-maps-zone>\n' }]
  }], null, null);
})();
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && \u0275setClassDebugInfo(GeofenceMapSectionComponent, { className: "GeofenceMapSectionComponent", filePath: "src/app/features/administration/components/geofences/geofence-map-section/geofence-map-section.component.ts", lineNumber: 18 });
})();

// src/app/features/administration/factories/geofence-section-config.factory.ts
var GeofenceSectionConfigFactory = class _GeofenceSectionConfigFactory {
  /**
   * Create sections for geofence information
   * @param geofence The geofence object to display in the section
   * @returns An array of AdminDetailSection objects representing the geofence information sections
   */
  createGeofenceInformationSections(geofence) {
    return [
      {
        id: "geofence-details",
        title: "Geofence Details",
        component: GeofenceDetailsSectionComponent,
        componentInputs: { entity: geofence },
        category: "information",
        order: 10
      },
      {
        id: "geofence-map",
        title: "Geofence Map",
        component: GeofenceMapSectionComponent,
        componentInputs: { entity: geofence },
        category: "information",
        order: 20
      }
    ];
  }
  /**
   * Create sections for geofence changes
   * @param geofence The geofence object to display in the section
   * @returns An array of AdminDetailSection objects representing the geofence changes sections
   */
  createChangesSection(geofence) {
    return [
      {
        id: "geofence-changes",
        title: "Changes",
        component: FeedSectionComponent,
        componentInputs: {
          entity: geofence
        },
        category: "feed",
        order: 10
      }
    ];
  }
  /**
   * Create all geofence sections in one call
   * @param geofence The geofence object to display in the sections
   * @returns An array of AdminDetailSection objects representing all geofence sections
   */
  createAllGeofenceSections(geofence) {
    return [
      ...this.createGeofenceInformationSections(geofence),
      ...this.createChangesSection(geofence)
    ];
  }
  static \u0275fac = function GeofenceSectionConfigFactory_Factory(__ngFactoryType__) {
    return new (__ngFactoryType__ || _GeofenceSectionConfigFactory)();
  };
  static \u0275prov = /* @__PURE__ */ \u0275\u0275defineInjectable({ token: _GeofenceSectionConfigFactory, factory: _GeofenceSectionConfigFactory.\u0275fac, providedIn: "root" });
};
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(GeofenceSectionConfigFactory, [{
    type: Injectable,
    args: [{ providedIn: "root" }]
  }], null, null);
})();

// src/app/features/administration/components/device-providers/device-provider-details-section/device-provider-details-section.component.ts
var _c029 = (a0) => ({ "icon-primary": a0 });
function DeviceProviderDetailsSectionComponent_Conditional_7_Template(rf, ctx) {
  if (rf & 1) {
    const _r1 = \u0275\u0275getCurrentView();
    \u0275\u0275elementStart(0, "div", 6)(1, "span", 9);
    \u0275\u0275listener("click", function DeviceProviderDetailsSectionComponent_Conditional_7_Template_span_click_1_listener() {
      \u0275\u0275restoreView(_r1);
      const ctx_r1 = \u0275\u0275nextContext();
      return \u0275\u0275resetView(ctx_r1.onEdit());
    })("keydown.enter", function DeviceProviderDetailsSectionComponent_Conditional_7_Template_span_keydown_enter_1_listener() {
      \u0275\u0275restoreView(_r1);
      const ctx_r1 = \u0275\u0275nextContext();
      return \u0275\u0275resetView(ctx_r1.onEdit());
    });
    \u0275\u0275elementEnd()();
  }
  if (rf & 2) {
    \u0275\u0275advance();
    \u0275\u0275attribute("aria-label", "Edit device provider details");
  }
}
function DeviceProviderDetailsSectionComponent_Conditional_10_Template(rf, ctx) {
  if (rf & 1) {
    const _r3 = \u0275\u0275getCurrentView();
    \u0275\u0275elementStart(0, "app-dynamic-form", 10);
    \u0275\u0275listener("formSubmit", function DeviceProviderDetailsSectionComponent_Conditional_10_Template_app_dynamic_form_formSubmit_0_listener($event) {
      \u0275\u0275restoreView(_r3);
      const ctx_r1 = \u0275\u0275nextContext();
      return \u0275\u0275resetView(ctx_r1.onSubmit($event));
    })("formValidityChange", function DeviceProviderDetailsSectionComponent_Conditional_10_Template_app_dynamic_form_formValidityChange_0_listener($event) {
      \u0275\u0275restoreView(_r3);
      const ctx_r1 = \u0275\u0275nextContext();
      return \u0275\u0275resetView(ctx_r1.onFormValidityChange($event));
    })("formValueChange", function DeviceProviderDetailsSectionComponent_Conditional_10_Template_app_dynamic_form_formValueChange_0_listener($event) {
      \u0275\u0275restoreView(_r3);
      const ctx_r1 = \u0275\u0275nextContext();
      return \u0275\u0275resetView(ctx_r1.onFormValueChange($event));
    });
    \u0275\u0275elementEnd();
  }
  if (rf & 2) {
    const ctx_r1 = \u0275\u0275nextContext();
    \u0275\u0275property("fields", ctx_r1.formFields)("actions", ctx_r1.actions)("hideActions", ctx_r1.createMode());
  }
}
function DeviceProviderDetailsSectionComponent_Conditional_11_Template(rf, ctx) {
  if (rf & 1) {
    \u0275\u0275element(0, "app-grid", 8);
  }
  if (rf & 2) {
    const ctx_r1 = \u0275\u0275nextContext();
    \u0275\u0275property("data", ctx_r1.deviceProviderDetails())("columns", ctx_r1.columns)("showGridLines", false)("hideHeader", true);
  }
}
var DeviceProviderDetailsSectionComponent = class _DeviceProviderDetailsSectionComponent extends EntitySectionBaseComponent {
  ownerId = input(null, ...ngDevMode ? [{ debugName: "ownerId" }] : []);
  entitiesService = inject(EntitiesService);
  operationRegistry = inject(EntityOperationRegistryService);
  cdr = inject(ChangeDetectorRef);
  selectOptionsLoaded = signal(false, ...ngDevMode ? [{ debugName: "selectOptionsLoaded" }] : []);
  deviceProviderDetails = computed(() => {
    const deviceProviderDetails = this.entity();
    if (!isDefined(deviceProviderDetails))
      return [];
    return [
      {
        key: "Type",
        value: deviceProviderDetails.deviceProviderType?.name ?? "None"
      },
      { key: "Name", value: deviceProviderDetails.name }
    ];
  }, ...ngDevMode ? [{ debugName: "deviceProviderDetails" }] : []);
  selectOptions = {};
  faPlug = faPlug;
  constructor() {
    super();
    this.columns = [
      { field: "key", header: "", transform: "uppercase" },
      { field: "value", header: "" }
    ];
    effect(() => {
      const selectOptionsLoaded = this.selectOptionsLoaded();
      if (selectOptionsLoaded) {
        untracked(() => {
          this.updateFormFields();
          this.cdr.detectChanges();
        });
      }
    });
  }
  ngOnInit() {
    this.loadSelectOptions();
  }
  loadSelectOptions() {
    const deviceProvider = this.entity();
    const ownerIdValue = this.ownerId();
    const effectiveOwnerId = deviceProvider?.owner?.id ?? ownerIdValue;
    if (isNullOrUndefined(effectiveOwnerId)) {
      this.selectOptions = {};
      this.selectOptionsLoaded.set(true);
      this.updateFormFields();
    }
    this.entitiesService.listDeviceProviderTypes(effectiveOwnerId).pipe(takeUntilDestroyed(this.destroyRef)).subscribe((result) => {
      this.selectOptions = {
        deviceProviderTypes: result.items.map((item) => ({
          label: item?.name,
          value: item.id,
          data: item
        })).sort((a, b) => a.label.localeCompare(b.label))
      };
      this.selectOptionsLoaded.set(true);
    });
  }
  updateFormFields() {
    const deviceProvider = this.entity();
    this.formFields = [
      createDropdownField("deviceProviderType", "Type", this.selectOptions?.["deviceProviderTypes"], deviceProvider?.deviceProviderType?.id, {
        name: "deviceProviderType",
        validations: [
          {
            name: "required",
            validator: Validators.required,
            message: "Type is required"
          }
        ],
        disabled: !this.createMode(),
        props: {
          appendTo: "body"
        }
      }),
      createTextField("name", "Name", deviceProvider?.name, {
        name: "name",
        validations: [
          {
            name: "required",
            validator: Validators.required,
            message: "Name is required"
          }
        ]
      })
    ];
  }
  getUpdateMethod() {
    return this.operationRegistry.getOperation("device-provider", "update") ?? ((id, data) => this.entitiesService.updateDeviceProvider(id, data));
  }
  onFormValueChange(formData) {
    const transformedData = __spreadValues({}, formData);
    if (isDefined(transformedData["deviceProviderType"])) {
      const deviceProviderTypeId = transformedData["deviceProviderType"];
      const deviceProviderType = this.selectOptions?.["deviceProviderTypes"]?.find((option) => option.value === deviceProviderTypeId);
      if (deviceProviderType) {
        transformedData["deviceProviderType"] = {
          id: deviceProviderTypeId,
          name: deviceProviderType.data?.name
        };
      }
    }
    this.formValueChange.emit(transformedData);
  }
  static \u0275fac = function DeviceProviderDetailsSectionComponent_Factory(__ngFactoryType__) {
    return new (__ngFactoryType__ || _DeviceProviderDetailsSectionComponent)();
  };
  static \u0275cmp = /* @__PURE__ */ \u0275\u0275defineComponent({ type: _DeviceProviderDetailsSectionComponent, selectors: [["app-device-provider-details-section"]], inputs: { ownerId: [1, "ownerId"] }, features: [\u0275\u0275InheritDefinitionFeature], decls: 12, vars: 7, consts: [[1, "card", "pt-2"], [1, "mb-4", "p-2", "flex", "justify-start", "items-center"], [1, "!text-[2.5rem]", 3, "icon", "ngClass"], [1, "pl-6", "flex-1"], [1, "flex", "justify-between", "items-center"], [1, "text-xl", "font-semibold", "m-0"], [1, "icon-light"], [3, "fields", "actions", "hideActions"], ["tableStyleClass", "info-display !w-auto", 3, "data", "columns", "showGridLines", "hideHeader"], [1, "pi", "pi-pen-to-square", "action", "hover", "!text-2xl", 3, "click", "keydown.enter"], [3, "formSubmit", "formValidityChange", "formValueChange", "fields", "actions", "hideActions"]], template: function DeviceProviderDetailsSectionComponent_Template(rf, ctx) {
    if (rf & 1) {
      \u0275\u0275elementStart(0, "div", 0)(1, "div", 1);
      \u0275\u0275element(2, "fa-icon", 2);
      \u0275\u0275elementStart(3, "div", 3)(4, "div", 4)(5, "h2", 5);
      \u0275\u0275text(6, "Device Provider Details");
      \u0275\u0275elementEnd();
      \u0275\u0275conditionalCreate(7, DeviceProviderDetailsSectionComponent_Conditional_7_Template, 2, 1, "div", 6);
      \u0275\u0275elementEnd();
      \u0275\u0275elementStart(8, "span");
      \u0275\u0275text(9, "The following information is required in order to configure your device provider.");
      \u0275\u0275elementEnd()()();
      \u0275\u0275conditionalCreate(10, DeviceProviderDetailsSectionComponent_Conditional_10_Template, 1, 3, "app-dynamic-form", 7);
      \u0275\u0275conditionalCreate(11, DeviceProviderDetailsSectionComponent_Conditional_11_Template, 1, 4, "app-grid", 8);
      \u0275\u0275elementEnd();
    }
    if (rf & 2) {
      \u0275\u0275advance(2);
      \u0275\u0275property("icon", ctx.faPlug)("ngClass", \u0275\u0275pureFunction1(5, _c029, ctx.isFormEditable()));
      \u0275\u0275advance(5);
      \u0275\u0275conditional(!ctx.isFormEditable() && !ctx.createMode() ? 7 : -1);
      \u0275\u0275advance(3);
      \u0275\u0275conditional(ctx.isFormEditable() || ctx.createMode() && ctx.formFields.length ? 10 : -1);
      \u0275\u0275advance();
      \u0275\u0275conditional(!ctx.isFormEditable() && !ctx.createMode() ? 11 : -1);
    }
  }, dependencies: [
    CommonModule,
    NgClass,
    ButtonModule,
    InputTextModule,
    GridComponent,
    DynamicFormComponent,
    FontAwesomeModule,
    FaIconComponent
  ], encapsulation: 2 });
};
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(DeviceProviderDetailsSectionComponent, [{
    type: Component,
    args: [{ selector: "app-device-provider-details-section", imports: [
      CommonModule,
      ButtonModule,
      InputTextModule,
      GridComponent,
      DynamicFormComponent,
      FontAwesomeModule
    ], template: `<div class="card pt-2">
  <div class="mb-4 p-2 flex justify-start items-center">
    <fa-icon
      [icon]="faPlug"
      class="!text-[2.5rem]"
      [ngClass]="{ 'icon-primary': isFormEditable() }"
    ></fa-icon>

    <div class="pl-6 flex-1">
      <div class="flex justify-between items-center">
        <h2 class="text-xl font-semibold m-0">Device Provider Details</h2>
        @if (!isFormEditable() && !createMode()) {
          <div class="icon-light">
            <span
              class="pi pi-pen-to-square action hover !text-2xl"
              [attr.aria-label]="'Edit device provider details'"
              (click)="onEdit()"
              (keydown.enter)="onEdit()"
            ></span>
          </div>
        }
      </div>
      <span
        >The following information is required in order to configure your device
        provider.</span
      >
    </div>
  </div>

  @if (isFormEditable() || (createMode() && formFields.length)) {
    <app-dynamic-form
      [fields]="formFields"
      [actions]="actions"
      [hideActions]="createMode()"
      (formSubmit)="onSubmit($event)"
      (formValidityChange)="onFormValidityChange($event)"
      (formValueChange)="onFormValueChange($event)"
    >
    </app-dynamic-form>
  }

  @if (!isFormEditable() && !createMode()) {
    <app-grid
      [data]="deviceProviderDetails()"
      [columns]="columns"
      [showGridLines]="false"
      [hideHeader]="true"
      tableStyleClass="info-display !w-auto"
    ></app-grid>
  }
</div>
` }]
  }], () => [], { ownerId: [{ type: Input, args: [{ isSignal: true, alias: "ownerId", required: false }] }] });
})();
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && \u0275setClassDebugInfo(DeviceProviderDetailsSectionComponent, { className: "DeviceProviderDetailsSectionComponent", filePath: "src/app/features/administration/components/device-providers/device-provider-details-section/device-provider-details-section.component.ts", lineNumber: 56 });
})();

// src/app/features/administration/components/device-providers/device-provider-parameters-section/device-provider-parameters-section.component.ts
var _c030 = (a0) => ({ "icon-primary": a0 });
function DeviceProviderParametersSectionComponent_Conditional_7_Template(rf, ctx) {
  if (rf & 1) {
    const _r1 = \u0275\u0275getCurrentView();
    \u0275\u0275elementStart(0, "div", 6)(1, "span", 9);
    \u0275\u0275listener("click", function DeviceProviderParametersSectionComponent_Conditional_7_Template_span_click_1_listener() {
      \u0275\u0275restoreView(_r1);
      const ctx_r1 = \u0275\u0275nextContext();
      return \u0275\u0275resetView(ctx_r1.onEdit());
    })("keydown.enter", function DeviceProviderParametersSectionComponent_Conditional_7_Template_span_keydown_enter_1_listener() {
      \u0275\u0275restoreView(_r1);
      const ctx_r1 = \u0275\u0275nextContext();
      return \u0275\u0275resetView(ctx_r1.onEdit());
    });
    \u0275\u0275elementEnd()();
  }
  if (rf & 2) {
    \u0275\u0275advance();
    \u0275\u0275attribute("aria-label", "Edit device parameters details");
  }
}
function DeviceProviderParametersSectionComponent_Conditional_10_Template(rf, ctx) {
  if (rf & 1) {
    const _r3 = \u0275\u0275getCurrentView();
    \u0275\u0275elementStart(0, "app-dynamic-form", 10);
    \u0275\u0275listener("formSubmit", function DeviceProviderParametersSectionComponent_Conditional_10_Template_app_dynamic_form_formSubmit_0_listener($event) {
      \u0275\u0275restoreView(_r3);
      const ctx_r1 = \u0275\u0275nextContext();
      return \u0275\u0275resetView(ctx_r1.onSubmit($event));
    })("formValidityChange", function DeviceProviderParametersSectionComponent_Conditional_10_Template_app_dynamic_form_formValidityChange_0_listener($event) {
      \u0275\u0275restoreView(_r3);
      const ctx_r1 = \u0275\u0275nextContext();
      return \u0275\u0275resetView(ctx_r1.onFormValidityChange($event));
    })("formValueChange", function DeviceProviderParametersSectionComponent_Conditional_10_Template_app_dynamic_form_formValueChange_0_listener($event) {
      \u0275\u0275restoreView(_r3);
      const ctx_r1 = \u0275\u0275nextContext();
      return \u0275\u0275resetView(ctx_r1.onFormValueChange($event));
    });
    \u0275\u0275elementEnd();
  }
  if (rf & 2) {
    const ctx_r1 = \u0275\u0275nextContext();
    \u0275\u0275property("fields", ctx_r1.formFields)("actions", ctx_r1.actions)("hideActions", ctx_r1.createMode());
  }
}
function DeviceProviderParametersSectionComponent_Conditional_11_Template(rf, ctx) {
  if (rf & 1) {
    \u0275\u0275element(0, "app-grid", 8);
  }
  if (rf & 2) {
    const ctx_r1 = \u0275\u0275nextContext();
    \u0275\u0275property("data", ctx_r1.deviceProviderDeviceParameters())("columns", ctx_r1.columns)("showGridLines", false)("hideHeader", true);
  }
}
var DeviceProviderParametersSectionComponent = class _DeviceProviderParametersSectionComponent extends EntitySectionBaseComponent {
  ownerId = input(null, ...ngDevMode ? [{ debugName: "ownerId" }] : []);
  deviceProviderType = input(null, ...ngDevMode ? [{ debugName: "deviceProviderType" }] : []);
  entitiesService = inject(EntitiesService);
  operationRegistry = inject(EntityOperationRegistryService);
  isLoadingDeviceType = signal(false, ...ngDevMode ? [{ debugName: "isLoadingDeviceType" }] : []);
  deviceType = signal(null, ...ngDevMode ? [{ debugName: "deviceType" }] : []);
  customValues = signal({}, ...ngDevMode ? [{ debugName: "customValues" }] : []);
  deviceProviderDeviceParameters = computed(() => {
    const deviceProviderDeviceParameters = this.entity()?.parameters;
    const deviceProviderType = this.deviceProviderType();
    if (isNullOrUndefined(deviceProviderDeviceParameters) || isNullOrUndefined(deviceProviderType))
      return [];
    const params = JSON.parse(deviceProviderType.parameters);
    const values = [];
    params.groups.forEach((group) => {
      group.fields.forEach((field) => {
        values.push({
          key: field.title,
          value: typeof deviceProviderDeviceParameters?.[field.id] === "object" ? JSON.stringify(deviceProviderDeviceParameters?.[field.id]) : deviceProviderDeviceParameters?.[field.id] ?? "None"
        });
      });
    });
    return values;
  }, ...ngDevMode ? [{ debugName: "deviceProviderDeviceParameters" }] : []);
  selectOptions = {};
  constructor() {
    super();
    this.columns = [
      { field: "key", header: "", transform: "uppercase" },
      { field: "value", header: "" }
    ];
    effect(() => {
      const deviceProviderType = this.deviceProviderType();
      if (deviceProviderType) {
        this.updateFormFields();
      }
    });
  }
  updateFormFields() {
    const deviceProvider = this.entity();
    const deviceProviderType = this.deviceProviderType();
    if (!deviceProviderType) {
      return;
    }
    const params = JSON.parse(deviceProviderType.parameters);
    const fields = params.groups.reduce((acc, group) => {
      const groupFields = group.fields.map((field) => {
        if (field.type === "memo") {
          return createTextAreaField(field.id, field.title, deviceProvider?.parameters?.[field.id], {
            name: field.id,
            validations: field.required ?? false ? [
              {
                name: "required",
                validator: Validators.required,
                message: `${field.title} is required`
              }
            ] : [],
            hint: field.description
          });
        }
        if (field.type === "number") {
          return createNumberField(field.id, field.title, deviceProvider?.parameters?.[field.id], {
            name: field.id,
            validations: field.required ?? false ? [
              {
                name: "required",
                validator: Validators.required,
                message: `${field.title} is required`
              }
            ] : [],
            hint: field.description
          });
        }
        return createTextField(field.id, field.title, deviceProvider?.parameters?.[field.id], {
          name: field.id,
          validations: field.required ?? false ? [
            {
              name: "required",
              validator: Validators.required,
              message: `${field.title} is required`
            }
          ] : [],
          hint: field.description
        });
      });
      return [...acc, ...groupFields];
    }, []);
    this.formFields = [
      {
        key: "parameters",
        name: "parameters",
        type: "group",
        fields
      }
    ];
  }
  getUpdateMethod() {
    return this.operationRegistry.getOperation("device-providers", "update") ?? ((id, data) => this.entitiesService.updateDeviceProvider(id, data));
  }
  static \u0275fac = function DeviceProviderParametersSectionComponent_Factory(__ngFactoryType__) {
    return new (__ngFactoryType__ || _DeviceProviderParametersSectionComponent)();
  };
  static \u0275cmp = /* @__PURE__ */ \u0275\u0275defineComponent({ type: _DeviceProviderParametersSectionComponent, selectors: [["app-device-provider-parameters-section"]], inputs: { ownerId: [1, "ownerId"], deviceProviderType: [1, "deviceProviderType"] }, features: [\u0275\u0275InheritDefinitionFeature], decls: 12, vars: 7, consts: [[1, "card", "pt-2"], [1, "mb-4", "p-2", "flex", "justify-start", "items-center"], [1, "pi", "pi-wrench", "!text-[2.5rem]", 3, "ngClass"], [1, "pl-6", "flex-1"], [1, "flex", "justify-between", "items-center"], [1, "text-xl", "font-semibold", "m-0"], [1, "icon-light"], [3, "fields", "actions", "hideActions"], ["tableStyleClass", "info-display !w-auto", 3, "data", "columns", "showGridLines", "hideHeader"], [1, "pi", "pi-pen-to-square", "action", "hover", "!text-2xl", 3, "click", "keydown.enter"], [3, "formSubmit", "formValidityChange", "formValueChange", "fields", "actions", "hideActions"]], template: function DeviceProviderParametersSectionComponent_Template(rf, ctx) {
    if (rf & 1) {
      \u0275\u0275elementStart(0, "div", 0)(1, "div", 1);
      \u0275\u0275element(2, "span", 2);
      \u0275\u0275elementStart(3, "div", 3)(4, "div", 4)(5, "h2", 5);
      \u0275\u0275text(6, "Parameters");
      \u0275\u0275elementEnd();
      \u0275\u0275conditionalCreate(7, DeviceProviderParametersSectionComponent_Conditional_7_Template, 2, 1, "div", 6);
      \u0275\u0275elementEnd();
      \u0275\u0275elementStart(8, "span");
      \u0275\u0275text(9, "Configure the following parameters that are required to communicate with the up-stream provider.");
      \u0275\u0275elementEnd()()();
      \u0275\u0275conditionalCreate(10, DeviceProviderParametersSectionComponent_Conditional_10_Template, 1, 3, "app-dynamic-form", 7);
      \u0275\u0275conditionalCreate(11, DeviceProviderParametersSectionComponent_Conditional_11_Template, 1, 4, "app-grid", 8);
      \u0275\u0275elementEnd();
    }
    if (rf & 2) {
      \u0275\u0275advance(2);
      \u0275\u0275property("ngClass", \u0275\u0275pureFunction1(5, _c030, ctx.isFormEditable()));
      \u0275\u0275attribute("aria-label", "wrench icon");
      \u0275\u0275advance(5);
      \u0275\u0275conditional(!ctx.isFormEditable() && !ctx.createMode() ? 7 : -1);
      \u0275\u0275advance(3);
      \u0275\u0275conditional(ctx.isFormEditable() || ctx.createMode() && ctx.formFields.length ? 10 : -1);
      \u0275\u0275advance();
      \u0275\u0275conditional(!ctx.isFormEditable() && !ctx.createMode() ? 11 : -1);
    }
  }, dependencies: [
    CommonModule,
    NgClass,
    ButtonModule,
    InputTextModule,
    GridComponent,
    DynamicFormComponent
  ], encapsulation: 2 });
};
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(DeviceProviderParametersSectionComponent, [{
    type: Component,
    args: [{ selector: "app-device-provider-parameters-section", imports: [
      CommonModule,
      ButtonModule,
      InputTextModule,
      GridComponent,
      DynamicFormComponent
    ], template: `<div class="card pt-2">
  <div class="mb-4 p-2 flex justify-start items-center">
    <span
      class="pi pi-wrench !text-[2.5rem]"
      [ngClass]="{ 'icon-primary': isFormEditable() }"
      [attr.aria-label]="'wrench icon'"
    ></span>

    <div class="pl-6 flex-1">
      <div class="flex justify-between items-center">
        <h2 class="text-xl font-semibold m-0">Parameters</h2>
        @if (!isFormEditable() && !createMode()) {
          <div class="icon-light">
            <span
              class="pi pi-pen-to-square action hover !text-2xl"
              [attr.aria-label]="'Edit device parameters details'"
              (click)="onEdit()"
              (keydown.enter)="onEdit()"
            ></span>
          </div>
        }
      </div>
      <span
        >Configure the following parameters that are required to communicate
        with the up-stream provider.</span
      >
    </div>
  </div>

  @if (isFormEditable() || (createMode() && formFields.length)) {
    <app-dynamic-form
      [fields]="formFields"
      [actions]="actions"
      [hideActions]="createMode()"
      (formSubmit)="onSubmit($event)"
      (formValidityChange)="onFormValidityChange($event)"
      (formValueChange)="onFormValueChange($event)"
    >
    </app-dynamic-form>
  }

  @if (!isFormEditable() && !createMode()) {
    <app-grid
      [data]="deviceProviderDeviceParameters()"
      [columns]="columns"
      [showGridLines]="false"
      [hideHeader]="true"
      tableStyleClass="info-display !w-auto"
    ></app-grid>
  }
</div>
` }]
  }], () => [], { ownerId: [{ type: Input, args: [{ isSignal: true, alias: "ownerId", required: false }] }], deviceProviderType: [{ type: Input, args: [{ isSignal: true, alias: "deviceProviderType", required: false }] }] });
})();
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && \u0275setClassDebugInfo(DeviceProviderParametersSectionComponent, { className: "DeviceProviderParametersSectionComponent", filePath: "src/app/features/administration/components/device-providers/device-provider-parameters-section/device-provider-parameters-section.component.ts", lineNumber: 64 });
})();

// src/app/features/administration/factories/device-providers-config.factory.ts
var DeviceProviderSectionConfigFactory = class _DeviceProviderSectionConfigFactory {
  /**
   * Create sections for device provider information
   * @param deviceProvider The device provider object to display in the section
   * @returns An array of AdminDetailSection objects representing the device provider information sections
   */
  createDeviceProviderInformationSection(deviceProvider, deviceProviderType) {
    return [
      {
        id: "device-provider-details",
        title: "Device Config Details",
        component: DeviceProviderDetailsSectionComponent,
        componentInputs: { entity: deviceProvider },
        category: "information",
        order: 10
      },
      {
        id: "device-provider-parameters",
        title: "Device Config Parameters",
        component: DeviceProviderParametersSectionComponent,
        componentInputs: {
          entity: deviceProvider,
          entityType: "device-provider",
          dataPath: "parameters",
          injectDataAtPath: true,
          deviceProviderType
        },
        category: "information",
        order: 20
      }
    ];
  }
  /**
   * Create sections for device provider changes
   * @param deviceProvider The device provider object to display in the section
   * @returns An array of AdminDetailSection objects representing the device provider changes sections
   */
  createChangesSection(deviceProvider) {
    return [
      {
        id: "device-provider-changes",
        title: "Changes",
        component: FeedSectionComponent,
        componentInputs: {
          entity: deviceProvider
        },
        category: "feed",
        order: 10
      }
    ];
  }
  /**
   * Create all deviceProvider sections in one call
   * @param deviceProvider The deviceProvider object to display in the sections
   * @returns An array of AdminDetailSection objects representing all deviceProvider sections
   */
  createAllDeviceProviderSections(deviceProvider, deviceProviderType) {
    return [
      ...this.createDeviceProviderInformationSection(deviceProvider, deviceProviderType),
      ...this.createChangesSection(deviceProvider)
    ];
  }
  static \u0275fac = function DeviceProviderSectionConfigFactory_Factory(__ngFactoryType__) {
    return new (__ngFactoryType__ || _DeviceProviderSectionConfigFactory)();
  };
  static \u0275prov = /* @__PURE__ */ \u0275\u0275defineInjectable({ token: _DeviceProviderSectionConfigFactory, factory: _DeviceProviderSectionConfigFactory.\u0275fac, providedIn: "root" });
};
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(DeviceProviderSectionConfigFactory, [{
    type: Injectable,
    args: [{ providedIn: "root" }]
  }], null, null);
})();

// src/app/features/administration/components/sms-gateway-providers/sms-gateway-provider-details-section/sms-gateway-provider-details-section.component.ts
var _c031 = (a0) => ({ "icon-primary": a0 });
function SmsGatewayProviderDetailsSectionComponent_Conditional_7_Template(rf, ctx) {
  if (rf & 1) {
    const _r1 = \u0275\u0275getCurrentView();
    \u0275\u0275elementStart(0, "div", 6)(1, "span", 9);
    \u0275\u0275listener("click", function SmsGatewayProviderDetailsSectionComponent_Conditional_7_Template_span_click_1_listener() {
      \u0275\u0275restoreView(_r1);
      const ctx_r1 = \u0275\u0275nextContext();
      return \u0275\u0275resetView(ctx_r1.onEdit());
    })("keydown.enter", function SmsGatewayProviderDetailsSectionComponent_Conditional_7_Template_span_keydown_enter_1_listener() {
      \u0275\u0275restoreView(_r1);
      const ctx_r1 = \u0275\u0275nextContext();
      return \u0275\u0275resetView(ctx_r1.onEdit());
    });
    \u0275\u0275elementEnd()();
  }
  if (rf & 2) {
    \u0275\u0275advance();
    \u0275\u0275attribute("aria-label", "Edit sms gateway provider details");
  }
}
function SmsGatewayProviderDetailsSectionComponent_Conditional_10_Template(rf, ctx) {
  if (rf & 1) {
    const _r3 = \u0275\u0275getCurrentView();
    \u0275\u0275elementStart(0, "app-dynamic-form", 10);
    \u0275\u0275listener("formSubmit", function SmsGatewayProviderDetailsSectionComponent_Conditional_10_Template_app_dynamic_form_formSubmit_0_listener($event) {
      \u0275\u0275restoreView(_r3);
      const ctx_r1 = \u0275\u0275nextContext();
      return \u0275\u0275resetView(ctx_r1.onSubmit($event));
    })("formValidityChange", function SmsGatewayProviderDetailsSectionComponent_Conditional_10_Template_app_dynamic_form_formValidityChange_0_listener($event) {
      \u0275\u0275restoreView(_r3);
      const ctx_r1 = \u0275\u0275nextContext();
      return \u0275\u0275resetView(ctx_r1.onFormValidityChange($event));
    })("formValueChange", function SmsGatewayProviderDetailsSectionComponent_Conditional_10_Template_app_dynamic_form_formValueChange_0_listener($event) {
      \u0275\u0275restoreView(_r3);
      const ctx_r1 = \u0275\u0275nextContext();
      return \u0275\u0275resetView(ctx_r1.onFormValueChange($event));
    });
    \u0275\u0275elementEnd();
  }
  if (rf & 2) {
    const ctx_r1 = \u0275\u0275nextContext();
    \u0275\u0275property("fields", ctx_r1.formFields)("actions", ctx_r1.actions)("hideActions", ctx_r1.createMode());
  }
}
function SmsGatewayProviderDetailsSectionComponent_Conditional_11_Template(rf, ctx) {
  if (rf & 1) {
    \u0275\u0275element(0, "app-grid", 8);
  }
  if (rf & 2) {
    const ctx_r1 = \u0275\u0275nextContext();
    \u0275\u0275property("data", ctx_r1.smsGatewayProviderDetails())("columns", ctx_r1.columns)("showGridLines", false)("hideHeader", true);
  }
}
var SmsGatewayProviderDetailsSectionComponent = class _SmsGatewayProviderDetailsSectionComponent extends TypedEntitySectionBaseComponent {
  ownerId = input(null, ...ngDevMode ? [{ debugName: "ownerId" }] : []);
  entitiesService = inject(EntitiesService);
  operationRegistry = inject(EntityOperationRegistryService);
  apiSchemaService = inject(ApiSchemaService);
  cdr = inject(ChangeDetectorRef);
  selectOptionsLoaded = signal(false, ...ngDevMode ? [{ debugName: "selectOptionsLoaded" }] : []);
  entityName = "smsgatewayprovider";
  selectOptions = {};
  faComments = faComments;
  smsGatewayProviderDetails = computed(() => {
    const entity = this.entity();
    if (!isDefined(entity))
      return [];
    const typeObject = this.apiSchemaService.getEntityType(entity, this.entityName);
    return [
      {
        key: "Type",
        value: typeObject?.name ?? "None"
      },
      { key: "Name", value: entity.name }
    ];
  }, ...ngDevMode ? [{ debugName: "smsGatewayProviderDetails" }] : []);
  requestMapper;
  constructor() {
    super();
    this.columns = [
      { field: "key", header: "", transform: "uppercase" },
      { field: "value", header: "" }
    ];
    effect(() => {
      const selectOptionsLoaded = this.selectOptionsLoaded();
      if (selectOptionsLoaded) {
        this.initializeRequestMapper();
        untracked(() => {
          this.updateFormFields();
          this.cdr.detectChanges();
        });
      }
    });
  }
  ngOnInit() {
    this.loadSelectOptions();
  }
  loadSelectOptions() {
    const smsGatewayProvider = this.entity();
    const ownerIdValue = this.ownerId();
    const effectiveOwnerId = smsGatewayProvider?.owner?.id ?? ownerIdValue;
    if (isNullOrUndefined(effectiveOwnerId)) {
      this.selectOptions = {};
      this.selectOptionsLoaded.set(true);
      this.updateFormFields();
      return;
    }
    this.entitiesService.listSmsGatewayProviderTypes(effectiveOwnerId).pipe(takeUntilDestroyed(this.destroyRef)).subscribe((result) => {
      this.selectOptions = {
        smsGatewayProviderTypes: result.items.map((item) => ({
          label: item?.name,
          value: item.id,
          data: item
        })).sort((a, b) => a.label.localeCompare(b.label))
      };
      this.selectOptionsLoaded.set(true);
    });
  }
  initializeRequestMapper() {
    this.requestMapper = new FormToRequestMapper({
      name: {
        requestProperty: "name",
        transform: (value) => value
      },
      [this.apiSchemaService.getTypePropertyKey(this.entityName)]: {
        requestProperty: this.apiSchemaService.getTypePropertyKey(this.entityName),
        transform: (value) => {
          const selectedType = this.selectOptions?.["smsGatewayProviderTypes"]?.find((option) => option.value === value);
          return selectedType ? { id: selectedType.value, name: selectedType.label } : null;
        }
      }
    });
  }
  updateFormFields() {
    const smsGatewayProvider = this.entity();
    const typeObject = this.apiSchemaService.getEntityType(smsGatewayProvider, this.entityName);
    this.formFields = [
      createDropdownField(this.apiSchemaService.getTypePropertyKey(this.entityName), "Type", this.selectOptions?.["smsGatewayProviderTypes"], typeObject?.id ?? null, {
        name: this.apiSchemaService.getTypePropertyKey(this.entityName),
        validations: [
          {
            name: "required",
            validator: Validators.required,
            message: "Type is required"
          }
        ],
        disabled: !this.createMode() && !this.apiSchemaService.usesModernSchema() && isDefined(typeObject) && isDefined(typeObject?.id),
        props: {
          appendTo: "body"
        }
      }),
      createTextField("name", "Name", smsGatewayProvider?.name ?? "", {
        name: "name",
        validations: [
          {
            name: "required",
            validator: Validators.required,
            message: "Name is required"
          }
        ]
      })
    ];
  }
  getUpdateMethod() {
    return this.operationRegistry.getOperation("sms-gateway-provider", "update") ?? ((id, data) => this.entitiesService.updateSmsGatewayProvider(id, data));
  }
  onFormValueChange(formData) {
    try {
      const transformedData = this.transformFormData(formData);
      this.formValueChange.emit(transformedData);
    } catch (error) {
      console.warn("Form data transformation failed:", error);
      this.formValueChange.emit(formData);
    }
  }
  transformFormData(formData) {
    if (!this.requestMapper) {
      return {};
    }
    try {
      const normalizedFormData = Array.isArray(formData) ? formData.reduce((acc, item) => __spreadValues(__spreadValues({}, acc), item), {}) : formData;
      const partialRequest = this.requestMapper.transform(normalizedFormData);
      const updateRequest = {};
      for (const key in partialRequest) {
        if (partialRequest[key] !== void 0) {
          updateRequest[key] = partialRequest[key];
        }
      }
      return updateRequest;
    } catch (error) {
      console.error("Error transforming form data:", error);
      throw error;
    }
  }
  static \u0275fac = function SmsGatewayProviderDetailsSectionComponent_Factory(__ngFactoryType__) {
    return new (__ngFactoryType__ || _SmsGatewayProviderDetailsSectionComponent)();
  };
  static \u0275cmp = /* @__PURE__ */ \u0275\u0275defineComponent({ type: _SmsGatewayProviderDetailsSectionComponent, selectors: [["app-sms-gateway-provider-details-section"]], inputs: { ownerId: [1, "ownerId"] }, features: [\u0275\u0275InheritDefinitionFeature], decls: 12, vars: 7, consts: [[1, "card", "pt-2"], [1, "mb-4", "p-2", "flex", "justify-start", "items-center"], [1, "!text-[2.5rem]", 3, "icon", "ngClass"], [1, "pl-6", "flex-1"], [1, "flex", "justify-between", "items-center"], [1, "text-xl", "font-semibold", "m-0"], [1, "icon-light"], [3, "fields", "actions", "hideActions"], ["tableStyleClass", "info-display !w-auto", 3, "data", "columns", "showGridLines", "hideHeader"], [1, "pi", "pi-pen-to-square", "action", "hover", "!text-2xl", 3, "click", "keydown.enter"], [3, "formSubmit", "formValidityChange", "formValueChange", "fields", "actions", "hideActions"]], template: function SmsGatewayProviderDetailsSectionComponent_Template(rf, ctx) {
    if (rf & 1) {
      \u0275\u0275elementStart(0, "div", 0)(1, "div", 1);
      \u0275\u0275element(2, "fa-icon", 2);
      \u0275\u0275elementStart(3, "div", 3)(4, "div", 4)(5, "h2", 5);
      \u0275\u0275text(6, "SMS Gateway Provider Details");
      \u0275\u0275elementEnd();
      \u0275\u0275conditionalCreate(7, SmsGatewayProviderDetailsSectionComponent_Conditional_7_Template, 2, 1, "div", 6);
      \u0275\u0275elementEnd();
      \u0275\u0275elementStart(8, "span");
      \u0275\u0275text(9, "The following information is required in order to configure your SMS gateway provider.");
      \u0275\u0275elementEnd()()();
      \u0275\u0275conditionalCreate(10, SmsGatewayProviderDetailsSectionComponent_Conditional_10_Template, 1, 3, "app-dynamic-form", 7);
      \u0275\u0275conditionalCreate(11, SmsGatewayProviderDetailsSectionComponent_Conditional_11_Template, 1, 4, "app-grid", 8);
      \u0275\u0275elementEnd();
    }
    if (rf & 2) {
      \u0275\u0275advance(2);
      \u0275\u0275property("icon", ctx.faComments)("ngClass", \u0275\u0275pureFunction1(5, _c031, ctx.isFormEditable()));
      \u0275\u0275advance(5);
      \u0275\u0275conditional(!ctx.isFormEditable() && !ctx.createMode() ? 7 : -1);
      \u0275\u0275advance(3);
      \u0275\u0275conditional(ctx.isFormEditable() || ctx.createMode() && ctx.formFields.length ? 10 : -1);
      \u0275\u0275advance();
      \u0275\u0275conditional(!ctx.isFormEditable() && !ctx.createMode() ? 11 : -1);
    }
  }, dependencies: [
    CommonModule,
    NgClass,
    ButtonModule,
    InputTextModule,
    GridComponent,
    DynamicFormComponent,
    FontAwesomeModule,
    FaIconComponent
  ], encapsulation: 2 });
};
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(SmsGatewayProviderDetailsSectionComponent, [{
    type: Component,
    args: [{ selector: "app-sms-gateway-provider-details-section", imports: [
      CommonModule,
      ButtonModule,
      InputTextModule,
      GridComponent,
      DynamicFormComponent,
      FontAwesomeModule
    ], template: `<div class="card pt-2">
  <div class="mb-4 p-2 flex justify-start items-center">
    <fa-icon
      [icon]="faComments"
      class="!text-[2.5rem]"
      [ngClass]="{ 'icon-primary': isFormEditable() }"
    ></fa-icon>

    <div class="pl-6 flex-1">
      <div class="flex justify-between items-center">
        <h2 class="text-xl font-semibold m-0">SMS Gateway Provider Details</h2>
        @if (!isFormEditable() && !createMode()) {
          <div class="icon-light">
            <span
              class="pi pi-pen-to-square action hover !text-2xl"
              [attr.aria-label]="'Edit sms gateway provider details'"
              (click)="onEdit()"
              (keydown.enter)="onEdit()"
            ></span>
          </div>
        }
      </div>
      <span
        >The following information is required in order to configure your SMS
        gateway provider.</span
      >
    </div>
  </div>

  @if (isFormEditable() || (createMode() && formFields.length)) {
    <app-dynamic-form
      [fields]="formFields"
      [actions]="actions"
      [hideActions]="createMode()"
      (formSubmit)="onSubmit($event)"
      (formValidityChange)="onFormValidityChange($event)"
      (formValueChange)="onFormValueChange($event)"
    >
    </app-dynamic-form>
  }

  @if (!isFormEditable() && !createMode()) {
    <app-grid
      [data]="smsGatewayProviderDetails()"
      [columns]="columns"
      [showGridLines]="false"
      [hideHeader]="true"
      tableStyleClass="info-display !w-auto"
    ></app-grid>
  }
</div>
` }]
  }], () => [], { ownerId: [{ type: Input, args: [{ isSignal: true, alias: "ownerId", required: false }] }] });
})();
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && \u0275setClassDebugInfo(SmsGatewayProviderDetailsSectionComponent, { className: "SmsGatewayProviderDetailsSectionComponent", filePath: "src/app/features/administration/components/sms-gateway-providers/sms-gateway-provider-details-section/sms-gateway-provider-details-section.component.ts", lineNumber: 67 });
})();

// src/app/features/administration/components/sms-gateway-providers/sms-gateway-provider-parameters-section/sms-gateway-provider-parameters-section.component.ts
var _c032 = (a0) => ({ "icon-primary": a0 });
function SmsGatewayProviderParametersSectionComponent_Conditional_7_Template(rf, ctx) {
  if (rf & 1) {
    const _r1 = \u0275\u0275getCurrentView();
    \u0275\u0275elementStart(0, "div", 6)(1, "span", 9);
    \u0275\u0275listener("click", function SmsGatewayProviderParametersSectionComponent_Conditional_7_Template_span_click_1_listener() {
      \u0275\u0275restoreView(_r1);
      const ctx_r1 = \u0275\u0275nextContext();
      return \u0275\u0275resetView(ctx_r1.onEdit());
    })("keydown.enter", function SmsGatewayProviderParametersSectionComponent_Conditional_7_Template_span_keydown_enter_1_listener() {
      \u0275\u0275restoreView(_r1);
      const ctx_r1 = \u0275\u0275nextContext();
      return \u0275\u0275resetView(ctx_r1.onEdit());
    });
    \u0275\u0275elementEnd()();
  }
  if (rf & 2) {
    \u0275\u0275advance();
    \u0275\u0275attribute("aria-label", "Edit device parameters details");
  }
}
function SmsGatewayProviderParametersSectionComponent_Conditional_10_Template(rf, ctx) {
  if (rf & 1) {
    const _r3 = \u0275\u0275getCurrentView();
    \u0275\u0275elementStart(0, "app-dynamic-form", 10);
    \u0275\u0275listener("formSubmit", function SmsGatewayProviderParametersSectionComponent_Conditional_10_Template_app_dynamic_form_formSubmit_0_listener($event) {
      \u0275\u0275restoreView(_r3);
      const ctx_r1 = \u0275\u0275nextContext();
      return \u0275\u0275resetView(ctx_r1.onSubmit($event));
    })("formValidityChange", function SmsGatewayProviderParametersSectionComponent_Conditional_10_Template_app_dynamic_form_formValidityChange_0_listener($event) {
      \u0275\u0275restoreView(_r3);
      const ctx_r1 = \u0275\u0275nextContext();
      return \u0275\u0275resetView(ctx_r1.onFormValidityChange($event));
    })("formValueChange", function SmsGatewayProviderParametersSectionComponent_Conditional_10_Template_app_dynamic_form_formValueChange_0_listener($event) {
      \u0275\u0275restoreView(_r3);
      const ctx_r1 = \u0275\u0275nextContext();
      return \u0275\u0275resetView(ctx_r1.onFormValueChange($event));
    });
    \u0275\u0275elementEnd();
  }
  if (rf & 2) {
    const ctx_r1 = \u0275\u0275nextContext();
    \u0275\u0275property("fields", ctx_r1.formFields)("actions", ctx_r1.actions)("hideActions", ctx_r1.createMode());
  }
}
function SmsGatewayProviderParametersSectionComponent_Conditional_11_Template(rf, ctx) {
  if (rf & 1) {
    \u0275\u0275element(0, "app-grid", 8);
  }
  if (rf & 2) {
    const ctx_r1 = \u0275\u0275nextContext();
    \u0275\u0275property("data", ctx_r1.smsGatewayProviderDeviceParameters())("columns", ctx_r1.columns)("showGridLines", false)("hideHeader", true);
  }
}
var SmsGatewayProviderParametersSectionComponent = class _SmsGatewayProviderParametersSectionComponent extends EntitySectionBaseComponent {
  ownerId = input(null, ...ngDevMode ? [{ debugName: "ownerId" }] : []);
  smsGatewayProviderType = input(null, ...ngDevMode ? [{ debugName: "smsGatewayProviderType" }] : []);
  entitiesService = inject(EntitiesService);
  operationRegistry = inject(EntityOperationRegistryService);
  smsGatewayProviderDeviceParameters = computed(() => {
    const smsGatewayProviderDeviceParameters = this.entity()?.parameters;
    const smsGatewayProviderType = this.smsGatewayProviderType();
    if (isNullOrUndefined(smsGatewayProviderDeviceParameters) || isNullOrUndefined(smsGatewayProviderType))
      return [];
    const parameterDefinition = smsGatewayProviderType.parameterDefinition ?? '{"groups":[]}';
    const params = JSON.parse(parameterDefinition);
    const values = [];
    params.groups.forEach((group) => {
      group.fields.forEach((field) => {
        let fieldValue = "None";
        if (field.type === "password") {
          fieldValue = "****";
        } else {
          const paramValue = smsGatewayProviderDeviceParameters?.[field.id];
          if (typeof paramValue === "object") {
            fieldValue = JSON.stringify(paramValue);
          } else if (paramValue !== void 0) {
            fieldValue = paramValue;
          }
        }
        values.push({
          key: field.title,
          value: fieldValue
        });
        if (field.type === "combo" && field.values) {
          const selectedValue = smsGatewayProviderDeviceParameters?.[field.id];
          const selectedOption = field.values.find((opt) => opt.key === selectedValue);
          if (selectedOption?.fields) {
            selectedOption.fields.forEach((subField) => {
              if (smsGatewayProviderDeviceParameters?.[subField.id] !== void 0) {
                let fieldValue2 = "None";
                const paramValue = smsGatewayProviderDeviceParameters?.[subField.id];
                if (subField.type === "password") {
                  fieldValue2 = "****";
                } else if (typeof paramValue === "object") {
                  fieldValue2 = JSON.stringify(paramValue);
                } else if (paramValue !== void 0) {
                  fieldValue2 = paramValue;
                }
                values.push({
                  key: `${subField.title}`,
                  value: fieldValue2
                });
              }
            });
          }
        }
      });
    });
    return values;
  }, ...ngDevMode ? [{ debugName: "smsGatewayProviderDeviceParameters" }] : []);
  constructor() {
    super();
    this.columns = [
      { field: "key", header: "", transform: "uppercase" },
      { field: "value", header: "" }
    ];
    effect(() => {
      const smsGatewayProviderType = this.smsGatewayProviderType();
      if (smsGatewayProviderType) {
        this.updateFormFields();
      }
    });
  }
  updateFormFields() {
    const smsGatewayProvider = this.entity();
    const smsGatewayProviderType = this.smsGatewayProviderType();
    if (!smsGatewayProviderType) {
      return;
    }
    const parameterDefinition = smsGatewayProviderType.parameterDefinition ?? '{"groups":[]}';
    const params = JSON.parse(parameterDefinition);
    const fields = params.groups.reduce((acc, group) => {
      const groupFields = group.fields.flatMap((field) => {
        const baseField = this.createFormFieldConfig(field, smsGatewayProvider);
        return [baseField];
      });
      return [...acc, ...groupFields];
    }, []);
    this.formFields = fields;
  }
  createFormFieldConfig(field, smsGatewayProvider) {
    if (field.type === "memo") {
      return createTextAreaField(field.id, field.title, smsGatewayProvider?.parameters?.[field.id], {
        name: field.id,
        validations: field.required ?? false ? [
          {
            name: "required",
            validator: Validators.required,
            message: `${field.title} is required`
          }
        ] : [],
        hint: field.description
      });
    }
    if (field.type === "number") {
      return createNumberField(field.id, field.title, smsGatewayProvider?.parameters?.[field.id], {
        name: field.id,
        validations: field.required ?? false ? [
          {
            name: "required",
            validator: Validators.required,
            message: `${field.title} is required`
          }
        ] : [],
        hint: field.description
      });
    }
    if (field.type === "combo" && field.values) {
      const options = field.values.map((value) => ({
        label: value.value,
        value: value.key
      }));
      return createDropdownField(field.id, field.title, options, smsGatewayProvider?.parameters?.[field.id] || field.defaultValue, {
        name: field.id,
        validations: field.required ?? false ? [
          {
            name: "required",
            validator: Validators.required,
            message: `${field.title} is required`
          }
        ] : [],
        hint: field.description,
        props: {
          appendTo: "body"
        },
        conditional: true,
        conditions: options.reduce((acc, option) => __spreadProps(__spreadValues({}, acc), {
          [option.value]: this.createConditionFields(field?.values?.find((opt) => opt.key === option.value)?.fields ?? [])
        }), {})
      });
    }
    if (field.type === "password") {
      return createPasswordField(field.id, field.title, {
        name: field.id,
        validations: field.required ?? false ? [
          {
            name: "required",
            validator: Validators.required,
            message: `${field.title} is required`
          }
        ] : [],
        hint: field.description,
        props: {
          type: "password"
        }
      });
    }
    return createTextField(field.id, field.title, smsGatewayProvider?.parameters?.[field.id], {
      name: field.id,
      validations: field.required ?? false ? [
        {
          name: "required",
          validator: Validators.required,
          message: `${field.title} is required`
        }
      ] : [],
      hint: field.description
    });
  }
  getUpdateMethod() {
    return this.operationRegistry.getOperation("sms-gateway-providers", "update") ?? ((id, data) => this.entitiesService.updateSmsGatewayProvider(id, {
      parameters: data
    }));
  }
  createConditionFields(fields) {
    return fields.map((field) => {
      return this.createFormFieldConfig(field, this.entity());
    });
  }
  static \u0275fac = function SmsGatewayProviderParametersSectionComponent_Factory(__ngFactoryType__) {
    return new (__ngFactoryType__ || _SmsGatewayProviderParametersSectionComponent)();
  };
  static \u0275cmp = /* @__PURE__ */ \u0275\u0275defineComponent({ type: _SmsGatewayProviderParametersSectionComponent, selectors: [["app-sms-gateway-provider-parameters-section"]], inputs: { ownerId: [1, "ownerId"], smsGatewayProviderType: [1, "smsGatewayProviderType"] }, features: [\u0275\u0275InheritDefinitionFeature], decls: 12, vars: 7, consts: [[1, "card", "pt-2"], [1, "mb-4", "p-2", "flex", "justify-start", "items-center"], [1, "pi", "pi-wrench", "!text-[2.5rem]", 3, "ngClass"], [1, "pl-6", "flex-1"], [1, "flex", "justify-between", "items-center"], [1, "text-xl", "font-semibold", "m-0"], [1, "icon-light"], [3, "fields", "actions", "hideActions"], ["tableStyleClass", "info-display !w-auto", 3, "data", "columns", "showGridLines", "hideHeader"], [1, "pi", "pi-pen-to-square", "action", "hover", "!text-2xl", 3, "click", "keydown.enter"], [3, "formSubmit", "formValidityChange", "formValueChange", "fields", "actions", "hideActions"]], template: function SmsGatewayProviderParametersSectionComponent_Template(rf, ctx) {
    if (rf & 1) {
      \u0275\u0275elementStart(0, "div", 0)(1, "div", 1);
      \u0275\u0275element(2, "span", 2);
      \u0275\u0275elementStart(3, "div", 3)(4, "div", 4)(5, "h2", 5);
      \u0275\u0275text(6, "Parameters");
      \u0275\u0275elementEnd();
      \u0275\u0275conditionalCreate(7, SmsGatewayProviderParametersSectionComponent_Conditional_7_Template, 2, 1, "div", 6);
      \u0275\u0275elementEnd();
      \u0275\u0275elementStart(8, "span");
      \u0275\u0275text(9, "Configure the following parameters that are required to communicate with the up-stream provider.");
      \u0275\u0275elementEnd()()();
      \u0275\u0275conditionalCreate(10, SmsGatewayProviderParametersSectionComponent_Conditional_10_Template, 1, 3, "app-dynamic-form", 7);
      \u0275\u0275conditionalCreate(11, SmsGatewayProviderParametersSectionComponent_Conditional_11_Template, 1, 4, "app-grid", 8);
      \u0275\u0275elementEnd();
    }
    if (rf & 2) {
      \u0275\u0275advance(2);
      \u0275\u0275property("ngClass", \u0275\u0275pureFunction1(5, _c032, ctx.isFormEditable()));
      \u0275\u0275attribute("aria-label", "wrench icon");
      \u0275\u0275advance(5);
      \u0275\u0275conditional(!ctx.isFormEditable() && !ctx.createMode() ? 7 : -1);
      \u0275\u0275advance(3);
      \u0275\u0275conditional(ctx.isFormEditable() || ctx.createMode() && ctx.formFields.length ? 10 : -1);
      \u0275\u0275advance();
      \u0275\u0275conditional(!ctx.isFormEditable() && !ctx.createMode() ? 11 : -1);
    }
  }, dependencies: [
    CommonModule,
    NgClass,
    ButtonModule,
    InputTextModule,
    GridComponent,
    DynamicFormComponent
  ], encapsulation: 2 });
};
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(SmsGatewayProviderParametersSectionComponent, [{
    type: Component,
    args: [{ selector: "app-sms-gateway-provider-parameters-section", imports: [
      CommonModule,
      ButtonModule,
      InputTextModule,
      GridComponent,
      DynamicFormComponent
    ], template: `<div class="card pt-2">
  <div class="mb-4 p-2 flex justify-start items-center">
    <span
      class="pi pi-wrench !text-[2.5rem]"
      [ngClass]="{ 'icon-primary': isFormEditable() }"
      [attr.aria-label]="'wrench icon'"
    ></span>

    <div class="pl-6 flex-1">
      <div class="flex justify-between items-center">
        <h2 class="text-xl font-semibold m-0">Parameters</h2>
        @if (!isFormEditable() && !createMode()) {
          <div class="icon-light">
            <span
              class="pi pi-pen-to-square action hover !text-2xl"
              [attr.aria-label]="'Edit device parameters details'"
              (click)="onEdit()"
              (keydown.enter)="onEdit()"
            ></span>
          </div>
        }
      </div>
      <span
        >Configure the following parameters that are required to communicate
        with the up-stream provider.</span
      >
    </div>
  </div>

  @if (isFormEditable() || (createMode() && formFields.length)) {
    <app-dynamic-form
      [fields]="formFields"
      [actions]="actions"
      [hideActions]="createMode()"
      (formSubmit)="onSubmit($event)"
      (formValidityChange)="onFormValidityChange($event)"
      (formValueChange)="onFormValueChange($event)"
    >
    </app-dynamic-form>
  }

  @if (!isFormEditable() && !createMode()) {
    <app-grid
      [data]="smsGatewayProviderDeviceParameters()"
      [columns]="columns"
      [showGridLines]="false"
      [hideHeader]="true"
      tableStyleClass="info-display !w-auto"
    ></app-grid>
  }
</div>
` }]
  }], () => [], { ownerId: [{ type: Input, args: [{ isSignal: true, alias: "ownerId", required: false }] }], smsGatewayProviderType: [{ type: Input, args: [{ isSignal: true, alias: "smsGatewayProviderType", required: false }] }] });
})();
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && \u0275setClassDebugInfo(SmsGatewayProviderParametersSectionComponent, { className: "SmsGatewayProviderParametersSectionComponent", filePath: "src/app/features/administration/components/sms-gateway-providers/sms-gateway-provider-parameters-section/sms-gateway-provider-parameters-section.component.ts", lineNumber: 64 });
})();

// src/app/features/administration/factories/sms-gateway-provider-section-config.factory.ts
var SmsGatewayProviderSectionConfigFactory = class _SmsGatewayProviderSectionConfigFactory {
  /**
   * Create sections for sms gateway provider information
   * @param smsGatewayProvider The sms gateway provider object to display in the section
   * @returns An array of AdminDetailSection objects representing the sms gateway provider information sections
   */
  createSmsGatewayProviderInformationSection(smsGatewayProvider, smsGatewayProviderType) {
    return [
      {
        id: "sms-gateway-provider-details",
        title: "Device Config Details",
        component: SmsGatewayProviderDetailsSectionComponent,
        componentInputs: { entity: smsGatewayProvider },
        category: "information",
        order: 10
      },
      {
        id: "sms-gateway-provider-parameters",
        title: "Device Config Parameters",
        component: SmsGatewayProviderParametersSectionComponent,
        componentInputs: {
          entity: smsGatewayProvider,
          entityType: "sms-gateway-provider",
          dataPath: "parameters",
          injectDataAtPath: true,
          smsGatewayProviderType
        },
        category: "information",
        order: 20
      }
    ];
  }
  /**
   * Create sections for sms gateway provider changes
   * @param smsGatewayProvider The sms gateway provider object to display in the section
   * @returns An array of AdminDetailSection objects representing the sms gateway provider changes sections
   */
  createChangesSection(smsGatewayProvider) {
    return [
      {
        id: "sms-gateway-provider-changes",
        title: "Changes",
        component: FeedSectionComponent,
        componentInputs: {
          entity: smsGatewayProvider
        },
        category: "feed",
        order: 10
      }
    ];
  }
  /**
   * Create all smsGatewayProvider sections in one call
   * @param smsGatewayProvider The smsGatewayProvider object to display in the sections
   * @returns An array of AdminDetailSection objects representing all smsGatewayProvider sections
   */
  createAllSmsGatewayProviderSections(smsGatewayProvider, smsGatewayProviderType) {
    return [
      ...this.createSmsGatewayProviderInformationSection(smsGatewayProvider, smsGatewayProviderType),
      ...this.createChangesSection(smsGatewayProvider)
    ];
  }
  static \u0275fac = function SmsGatewayProviderSectionConfigFactory_Factory(__ngFactoryType__) {
    return new (__ngFactoryType__ || _SmsGatewayProviderSectionConfigFactory)();
  };
  static \u0275prov = /* @__PURE__ */ \u0275\u0275defineInjectable({ token: _SmsGatewayProviderSectionConfigFactory, factory: _SmsGatewayProviderSectionConfigFactory.\u0275fac, providedIn: "root" });
};
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(SmsGatewayProviderSectionConfigFactory, [{
    type: Injectable,
    args: [{ providedIn: "root" }]
  }], null, null);
})();

// src/app/features/administration/components/io-types/io-type-details-section/io-type-details-section.component.ts
var _c033 = (a0) => ({ "icon-primary": a0 });
function IoTypeDetailsSectionComponent_Conditional_7_Template(rf, ctx) {
  if (rf & 1) {
    const _r1 = \u0275\u0275getCurrentView();
    \u0275\u0275elementStart(0, "div", 6)(1, "span", 9);
    \u0275\u0275listener("click", function IoTypeDetailsSectionComponent_Conditional_7_Template_span_click_1_listener() {
      \u0275\u0275restoreView(_r1);
      const ctx_r1 = \u0275\u0275nextContext();
      return \u0275\u0275resetView(ctx_r1.onEdit());
    })("keydown.enter", function IoTypeDetailsSectionComponent_Conditional_7_Template_span_keydown_enter_1_listener() {
      \u0275\u0275restoreView(_r1);
      const ctx_r1 = \u0275\u0275nextContext();
      return \u0275\u0275resetView(ctx_r1.onEdit());
    });
    \u0275\u0275elementEnd()();
  }
  if (rf & 2) {
    \u0275\u0275advance();
    \u0275\u0275attribute("aria-label", "Edit io type details");
  }
}
function IoTypeDetailsSectionComponent_Conditional_10_Template(rf, ctx) {
  if (rf & 1) {
    const _r3 = \u0275\u0275getCurrentView();
    \u0275\u0275elementStart(0, "app-dynamic-form", 10);
    \u0275\u0275listener("formSubmit", function IoTypeDetailsSectionComponent_Conditional_10_Template_app_dynamic_form_formSubmit_0_listener($event) {
      \u0275\u0275restoreView(_r3);
      const ctx_r1 = \u0275\u0275nextContext();
      return \u0275\u0275resetView(ctx_r1.onSubmit($event));
    })("formValidityChange", function IoTypeDetailsSectionComponent_Conditional_10_Template_app_dynamic_form_formValidityChange_0_listener($event) {
      \u0275\u0275restoreView(_r3);
      const ctx_r1 = \u0275\u0275nextContext();
      return \u0275\u0275resetView(ctx_r1.onFormValidityChange($event));
    })("formValueChange", function IoTypeDetailsSectionComponent_Conditional_10_Template_app_dynamic_form_formValueChange_0_listener($event) {
      \u0275\u0275restoreView(_r3);
      const ctx_r1 = \u0275\u0275nextContext();
      return \u0275\u0275resetView(ctx_r1.onFormValueChange($event));
    });
    \u0275\u0275elementEnd();
  }
  if (rf & 2) {
    const ctx_r1 = \u0275\u0275nextContext();
    \u0275\u0275property("fields", ctx_r1.formFields)("actions", ctx_r1.actions)("hideActions", ctx_r1.createMode());
  }
}
function IoTypeDetailsSectionComponent_Conditional_11_Template(rf, ctx) {
  if (rf & 1) {
    \u0275\u0275element(0, "app-grid", 8);
  }
  if (rf & 2) {
    const ctx_r1 = \u0275\u0275nextContext();
    \u0275\u0275property("data", ctx_r1.ioTypeDetails())("columns", ctx_r1.columns)("showGridLines", false)("hideHeader", true);
  }
}
var IoTypeDetailsSectionComponent = class _IoTypeDetailsSectionComponent extends EntitySectionBaseComponent {
  ownerId = input(null, ...ngDevMode ? [{ debugName: "ownerId" }] : []);
  entitiesService = inject(EntitiesService);
  utilityService = inject(UtilityService);
  apiSchemaService = inject(ApiSchemaService);
  typeOptions = [
    { key: "digital_input", label: "Digital Input" },
    { key: "digital_output", label: "Digital Output" },
    { key: "analog_input", label: "Analog Input" },
    { key: "temperature_input", label: "Temperature Input" },
    {
      key: "can_input",
      label: "CAN Input"
    },
    {
      key: "counter_input",
      label: "Counter Input"
    },
    { key: "camera_input", label: "Camera Input" },
    { key: "value_input", label: "Value Input" }
  ];
  smoothingOptions = [
    { label: "None", value: "none" },
    { label: "Moving Average (5 samples)", value: "moving_average_5" },
    { label: "Moving Average (10 samples)", value: "moving_average_10" },
    { label: "Moving Average (20 samples)", value: "moving_average_20" }
  ];
  rateTypeOptions = [
    { value: "none", label: "None" },
    { value: "val_per_km", label: "Value Per Kilometer" },
    { value: "km_per_val", label: "Kilometer Per Value" },
    { value: "val_per_mile", label: "Value Per Mile" },
    { value: "mile_per_val", label: "Miles Per Value" },
    { value: "val_per_hour", label: "Value Per Hour" },
    { value: "hour_per_val", label: "Hours Per Value" }
  ];
  ioTypeDetails = computed(() => {
    const ioTypeDetails = this.entity();
    if (!isDefined(ioTypeDetails))
      return [];
    const typeValue = this.apiSchemaService.getEntityType(ioTypeDetails, "Iotype");
    const result = {
      name: ioTypeDetails.name,
      type: typeValue,
      active: ioTypeDetails.text ? ioTypeDetails.text.active ?? null : null,
      inactive: ioTypeDetails.text ? ioTypeDetails.text.inactive ?? null : null,
      smoothingType: ioTypeDetails.smoothingType,
      unit: ioTypeDetails.unit,
      rateUnit: ioTypeDetails.rate?.unit,
      rateMultiplier: ioTypeDetails.rate?.multiplier,
      rateType: ioTypeDetails.rate?.type,
      lookups: ioTypeDetails.lookups
    };
    Object.keys(result).forEach((key) => (result[key] === void 0 || result[key] === null) && delete result[key]);
    return Object.keys(result).map((key) => {
      if (key === "rateType") {
        return {
          key: this.utilityService.decamelize(key),
          value: this.utilityService.decamelize(result[key])
        };
      }
      if (key === "type") {
        return {
          key: this.utilityService.decamelize(key),
          value: this.typeOptions.find((type) => type.key === result[key])?.label
        };
      }
      if (key === "smoothingType") {
        const typeValue2 = this.apiSchemaService.getEntityType(result, "IoTypeListItem");
        if (typeValue2 === IoTypeListItem.TypeEnum.AnalogInput || typeValue2 === IoTypeListItem.TypeEnum.TemperatureInput || typeValue2 === IoTypeListItem.TypeEnum.CanInput) {
          return {
            key: "Filter",
            value: this.smoothingOptions.find((smoothing) => smoothing.value === result[key])?.label
          };
        }
        return;
      }
      return {
        key: this.utilityService.decamelize(key),
        value: result[key]
      };
    });
  }, ...ngDevMode ? [{ debugName: "ioTypeDetails" }] : []);
  constructor() {
    super();
    this.columns = [
      { field: "key", header: "", transform: "uppercase" },
      { field: "value", header: "", transform: "capitalize" }
    ];
    effect(() => {
      const ioTypeDetails = this.ioTypeDetails();
      if (ioTypeDetails.length > 0 && !this.createMode()) {
        this.updateFormFields();
      }
    });
  }
  updateFormFields() {
    const ioType = this.entity();
    const typeValue = ioType ? this.apiSchemaService.getEntityType(ioType, "Iotype") : null;
    this.formFields = [
      createTextField("name", "Name", ioType?.name, {
        name: "name",
        validations: [
          {
            name: "required",
            validator: Validators.required,
            message: "Name is required"
          }
        ]
      }),
      createDropdownField("type", "Type", this.typeOptions.map((option) => ({
        label: option.label,
        value: option.key
      })), typeValue, {
        name: "type",
        validations: [
          {
            name: "required",
            validator: Validators.required,
            message: "Type is required"
          }
        ],
        conditional: true,
        conditions: {
          digital_input: [
            createTextField("active", "Active Text", ioType?.text?.active, {
              name: "active",
              validations: [
                {
                  name: "required",
                  validator: Validators.required,
                  message: "Active Text is required"
                }
              ]
            }),
            createTextField("inactive", "Inactive Text", ioType?.text?.inactive, {
              name: "inactive",
              validations: [
                {
                  name: "required",
                  validator: Validators.required,
                  message: "Inactive Text is required"
                }
              ]
            })
          ],
          digital_output: [
            createTextField("active", "Active Text", ioType?.text?.active, {
              name: "active",
              validations: [
                {
                  name: "required",
                  validator: Validators.required,
                  message: "Active Text is required"
                }
              ]
            }),
            createTextField("inactive", "Inactive Text", ioType?.text?.inactive, {
              name: "inactive",
              validations: [
                {
                  name: "required",
                  validator: Validators.required,
                  message: "Inactive Text is required"
                }
              ]
            })
          ],
          analog_input: [
            createTextField("unit", "Unit", ioType?.unit, {
              name: "unit",
              validations: [
                {
                  name: "required",
                  validator: Validators.required,
                  message: "Unit is required"
                }
              ]
            }),
            createDropdownField("smoothingType", "Smoothing Type", this.smoothingOptions, ioType?.smoothingType, {
              name: "smoothingType",
              validations: [
                {
                  name: "required",
                  validator: Validators.required,
                  message: "Smoothing Type is required"
                }
              ],
              props: {
                appendTo: "body"
              }
            })
          ],
          temperature_input: [
            createDropdownField("smoothingType", "Smoothing Type", this.smoothingOptions, ioType?.smoothingType, {
              name: "smoothingType",
              validations: [
                {
                  name: "required",
                  validator: Validators.required,
                  message: "Smoothing Type is required"
                }
              ],
              props: {
                appendTo: "body"
              }
            })
          ],
          can_input: [
            createTextField("active", "Active Text", ioType?.text?.active, {
              name: "active",
              validations: [
                {
                  name: "required",
                  validator: Validators.required,
                  message: "Active Text is required"
                }
              ]
            }),
            createTextField("inactive", "Inactive Text", ioType?.text?.inactive, {
              name: "inactive",
              validations: [
                {
                  name: "required",
                  validator: Validators.required,
                  message: "Inactive Text is required"
                }
              ]
            }),
            createTextField("unit", "Unit", ioType?.unit, {
              name: "unit",
              validations: [
                {
                  name: "required",
                  validator: Validators.required,
                  message: "Unit is required"
                }
              ]
            }),
            createDropdownField("smoothingType", "Smoothing Type", this.smoothingOptions, ioType?.smoothingType, {
              name: "smoothingType",
              validations: [
                {
                  name: "required",
                  validator: Validators.required,
                  message: "Smoothing Type is required"
                }
              ],
              props: {
                appendTo: "body"
              }
            })
          ],
          counter_input: [
            createTextField("unit", "Unit", ioType?.unit, {
              name: "unit",
              validations: [
                {
                  name: "required",
                  validator: Validators.required,
                  message: "Unit is required"
                }
              ]
            }),
            createDropdownField("rateType", "Rate Type", this.rateTypeOptions, ioType?.rate?.type, {
              name: "rateType",
              validations: [
                {
                  name: "required",
                  validator: Validators.required,
                  message: "Rate Type is required"
                }
              ],
              props: {
                appendTo: "body"
              }
            }),
            createNumberField("rateMultiplier", "Rate Multiplier", ioType?.rate?.multiplier ?? void 0, {
              name: "rateMultiplier",
              validations: [
                {
                  name: "required",
                  validator: Validators.required,
                  message: "Rate Multiplier is required"
                }
              ]
            }),
            createTextField("rateUnit", "Rate Unit", ioType?.rate?.unit, {
              name: "rateUnit",
              validations: [
                {
                  name: "required",
                  validator: Validators.required,
                  message: "Unit is required"
                }
              ]
            })
          ],
          camera_input: [],
          value_input: [
            createTextAreaField("lookups", "Lookups", "", {
              name: "lookups",
              validations: [
                {
                  name: "required",
                  validator: Validators.required,
                  message: "Lookups are required"
                }
              ],
              hint: 'Paste values in CSV format, i.e. "key","value"'
            })
          ]
        },
        props: {
          appendTo: "body"
        },
        disabled: !this.createMode()
      })
    ];
  }
  submitChanges(formData) {
    const ioType = this.entity();
    if (isNullOrUndefined(ioType))
      return;
    const transformedData = this.transformFormData(formData);
    this.entitiesService.updateIoType(ioType.id, transformedData).pipe(takeUntilDestroyed(this.destroyRef)).subscribe({
      next: (response) => {
        this.isFormEditable.set(false);
        this.isSubmitting.set(false);
        this.broadcastService.broadcast("entity-updated", {
          entityType: "iotype",
          operation: "update",
          entityId: ioType.id,
          data: response
        });
      },
      error: () => {
        this.isFormEditable.set(true);
        this.isSubmitting.set(false);
      }
    });
  }
  processTextProperty(data, property, textKey) {
    if (!isDefined(data[property]))
      return;
    if (isNullOrUndefined(data["text"])) {
      data["text"] = {};
    }
    if (typeof data[property] === "string") {
      data["text"][textKey] = data[property].trim();
    }
    delete data[property];
  }
  processRateProperty(data, property, rateKey, isNumeric = false) {
    if (!isDefined(data[property]))
      return;
    if (isNullOrUndefined(data["rate"])) {
      data["rate"] = {};
    }
    const isCorrectType = isNumeric ? typeof data[property] === "number" : typeof data[property] === "string";
    if (isCorrectType) {
      const value = isNumeric ? data[property] : data[property].trim();
      data["rate"][rateKey] = value;
    }
    delete data[property];
  }
  onFormValueChange(formData) {
    const transformedData = this.transformFormData(formData);
    this.formValueChange.emit(transformedData);
  }
  transformFormData(formData) {
    const transformedData = __spreadValues({}, formData);
    if (typeof transformedData["type"] === "string") {
      this.apiSchemaService.setEntityType(transformedData, "IoType", transformedData["type"]);
      const typePropertyName = this.apiSchemaService.getTypePropertyKey("iotype");
      if (typePropertyName !== "type" && "type" in transformedData) {
        delete transformedData["type"];
      }
    }
    this.processTextProperty(transformedData, "active", "active");
    this.processTextProperty(transformedData, "inactive", "inactive");
    this.processRateProperty(transformedData, "rateType", "type");
    this.processRateProperty(transformedData, "rateMultiplier", "multiplier", true);
    this.processRateProperty(transformedData, "rateUnit", "unit");
    return transformedData;
  }
  static \u0275fac = function IoTypeDetailsSectionComponent_Factory(__ngFactoryType__) {
    return new (__ngFactoryType__ || _IoTypeDetailsSectionComponent)();
  };
  static \u0275cmp = /* @__PURE__ */ \u0275\u0275defineComponent({ type: _IoTypeDetailsSectionComponent, selectors: [["app-io-type-details-section"]], inputs: { ownerId: [1, "ownerId"] }, features: [\u0275\u0275InheritDefinitionFeature], decls: 12, vars: 7, consts: [[1, "card", "pt-2"], [1, "mb-4", "p-2", "flex", "justify-start", "items-center"], [1, "pi", "pi-arrow-right-arrow-left", "!text-[2.5rem]", 3, "ngClass"], [1, "pl-6", "flex-1"], [1, "flex", "justify-between", "items-center"], [1, "text-xl", "font-semibold", "m-0"], [1, "icon-light"], [3, "fields", "actions", "hideActions"], ["tableStyleClass", "info-display !w-auto", 3, "data", "columns", "showGridLines", "hideHeader"], [1, "pi", "pi-pen-to-square", "action", "hover", "!text-2xl", 3, "click", "keydown.enter"], [3, "formSubmit", "formValidityChange", "formValueChange", "fields", "actions", "hideActions"]], template: function IoTypeDetailsSectionComponent_Template(rf, ctx) {
    if (rf & 1) {
      \u0275\u0275elementStart(0, "div", 0)(1, "div", 1);
      \u0275\u0275element(2, "span", 2);
      \u0275\u0275elementStart(3, "div", 3)(4, "div", 4)(5, "h2", 5);
      \u0275\u0275text(6, "IO Type Details");
      \u0275\u0275elementEnd();
      \u0275\u0275conditionalCreate(7, IoTypeDetailsSectionComponent_Conditional_7_Template, 2, 1, "div", 6);
      \u0275\u0275elementEnd();
      \u0275\u0275elementStart(8, "span");
      \u0275\u0275text(9, "The following information is required in order to configure your I/O type.");
      \u0275\u0275elementEnd()()();
      \u0275\u0275conditionalCreate(10, IoTypeDetailsSectionComponent_Conditional_10_Template, 1, 3, "app-dynamic-form", 7);
      \u0275\u0275conditionalCreate(11, IoTypeDetailsSectionComponent_Conditional_11_Template, 1, 4, "app-grid", 8);
      \u0275\u0275elementEnd();
    }
    if (rf & 2) {
      \u0275\u0275advance(2);
      \u0275\u0275property("ngClass", \u0275\u0275pureFunction1(5, _c033, ctx.isFormEditable()));
      \u0275\u0275attribute("aria-label", "arrow-right-arrow-left icon");
      \u0275\u0275advance(5);
      \u0275\u0275conditional(!ctx.isFormEditable() && !ctx.createMode() ? 7 : -1);
      \u0275\u0275advance(3);
      \u0275\u0275conditional(ctx.isFormEditable() || ctx.createMode() && ctx.formFields.length ? 10 : -1);
      \u0275\u0275advance();
      \u0275\u0275conditional(!ctx.isFormEditable() && !ctx.createMode() ? 11 : -1);
    }
  }, dependencies: [
    CommonModule,
    NgClass,
    ButtonModule,
    InputTextModule,
    GridComponent,
    DynamicFormComponent,
    FontAwesomeModule
  ], encapsulation: 2 });
};
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(IoTypeDetailsSectionComponent, [{
    type: Component,
    args: [{ selector: "app-io-type-details-section", imports: [
      CommonModule,
      ButtonModule,
      InputTextModule,
      GridComponent,
      DynamicFormComponent,
      FontAwesomeModule
    ], template: `<div class="card pt-2">
  <div class="mb-4 p-2 flex justify-start items-center">
    <span
      class="pi pi-arrow-right-arrow-left !text-[2.5rem]"
      [ngClass]="{ 'icon-primary': isFormEditable() }"
      [attr.aria-label]="'arrow-right-arrow-left icon'"
    ></span>

    <div class="pl-6 flex-1">
      <div class="flex justify-between items-center">
        <h2 class="text-xl font-semibold m-0">IO Type Details</h2>
        @if (!isFormEditable() && !createMode()) {
          <div class="icon-light">
            <span
              class="pi pi-pen-to-square action hover !text-2xl"
              [attr.aria-label]="'Edit io type details'"
              (click)="onEdit()"
              (keydown.enter)="onEdit()"
            ></span>
          </div>
        }
      </div>
      <span
        >The following information is required in order to configure your I/O
        type.</span
      >
    </div>
  </div>

  @if (isFormEditable() || (createMode() && formFields.length)) {
    <app-dynamic-form
      [fields]="formFields"
      [actions]="actions"
      [hideActions]="createMode()"
      (formSubmit)="onSubmit($event)"
      (formValidityChange)="onFormValidityChange($event)"
      (formValueChange)="onFormValueChange($event)"
    >
    </app-dynamic-form>
  }

  @if (!isFormEditable() && !createMode()) {
    <app-grid
      [data]="ioTypeDetails()"
      [columns]="columns"
      [showGridLines]="false"
      [hideHeader]="true"
      tableStyleClass="info-display !w-auto"
    ></app-grid>
  }
</div>
` }]
  }], () => [], { ownerId: [{ type: Input, args: [{ isSignal: true, alias: "ownerId", required: false }] }] });
})();
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && \u0275setClassDebugInfo(IoTypeDetailsSectionComponent, { className: "IoTypeDetailsSectionComponent", filePath: "src/app/features/administration/components/io-types/io-type-details-section/io-type-details-section.component.ts", lineNumber: 42 });
})();

// src/app/features/administration/factories/io-type-config.factory.ts
var IoTypeSectionConfigFactory = class _IoTypeSectionConfigFactory {
  /**
   * Create sections for ioType information
   * @param ioType The ioType object to display in the section
   * @returns An array of AdminDetailSection objects representing the ioType information sections
   */
  createIoTypeInformationSections(ioType) {
    return [
      {
        id: "io-type-details",
        title: "IO Type Details",
        component: IoTypeDetailsSectionComponent,
        componentInputs: { entity: ioType },
        category: "information",
        order: 10
      }
    ];
  }
  /**
   * Create sections for io type changes
   * @param ioType The io type object to display in the section
   * @returns An array of AdminDetailSection objects representing the io type changes sections
   */
  createChangesSection(ioType) {
    return [
      {
        id: "io-type-changes",
        title: "Changes",
        component: FeedSectionComponent,
        componentInputs: {
          entity: ioType
        },
        category: "feed",
        order: 10
      }
    ];
  }
  /**
   * Create all ioType sections in one call
   * @param ioType The ioType object to display in the sections
   * @returns An array of AdminDetailSection objects representing all ioType sections
   */
  createAllIoTypeSections(ioType) {
    return [
      ...this.createIoTypeInformationSections(ioType),
      ...this.createChangesSection(ioType)
    ];
  }
  static \u0275fac = function IoTypeSectionConfigFactory_Factory(__ngFactoryType__) {
    return new (__ngFactoryType__ || _IoTypeSectionConfigFactory)();
  };
  static \u0275prov = /* @__PURE__ */ \u0275\u0275defineInjectable({ token: _IoTypeSectionConfigFactory, factory: _IoTypeSectionConfigFactory.\u0275fac, providedIn: "root" });
};
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(IoTypeSectionConfigFactory, [{
    type: Injectable,
    args: [{ providedIn: "root" }]
  }], null, null);
})();

// src/app/features/administration/components/overspeed-profiles/overspeed-profile-details-section/overspeed-profile-details-section.component.ts
var _c034 = (a0) => ({ "icon-primary": a0 });
function OverspeedProfileDetailsSectionComponent_Conditional_7_Template(rf, ctx) {
  if (rf & 1) {
    const _r1 = \u0275\u0275getCurrentView();
    \u0275\u0275elementStart(0, "div", 6)(1, "span", 8);
    \u0275\u0275listener("click", function OverspeedProfileDetailsSectionComponent_Conditional_7_Template_span_click_1_listener() {
      \u0275\u0275restoreView(_r1);
      const ctx_r1 = \u0275\u0275nextContext();
      return \u0275\u0275resetView(ctx_r1.onEdit());
    })("keydown.enter", function OverspeedProfileDetailsSectionComponent_Conditional_7_Template_span_keydown_enter_1_listener() {
      \u0275\u0275restoreView(_r1);
      const ctx_r1 = \u0275\u0275nextContext();
      return \u0275\u0275resetView(ctx_r1.onEdit());
    });
    \u0275\u0275elementEnd()();
  }
  if (rf & 2) {
    \u0275\u0275advance();
    \u0275\u0275attribute("aria-label", "Edit overspeed profile details");
  }
}
function OverspeedProfileDetailsSectionComponent_Conditional_10_Template(rf, ctx) {
  if (rf & 1) {
    const _r3 = \u0275\u0275getCurrentView();
    \u0275\u0275elementStart(0, "app-dynamic-form", 9);
    \u0275\u0275listener("formSubmit", function OverspeedProfileDetailsSectionComponent_Conditional_10_Template_app_dynamic_form_formSubmit_0_listener($event) {
      \u0275\u0275restoreView(_r3);
      const ctx_r1 = \u0275\u0275nextContext();
      return \u0275\u0275resetView(ctx_r1.onSubmit($event));
    })("formValidityChange", function OverspeedProfileDetailsSectionComponent_Conditional_10_Template_app_dynamic_form_formValidityChange_0_listener($event) {
      \u0275\u0275restoreView(_r3);
      const ctx_r1 = \u0275\u0275nextContext();
      return \u0275\u0275resetView(ctx_r1.onFormValidityChange($event));
    })("formValueChange", function OverspeedProfileDetailsSectionComponent_Conditional_10_Template_app_dynamic_form_formValueChange_0_listener($event) {
      \u0275\u0275restoreView(_r3);
      const ctx_r1 = \u0275\u0275nextContext();
      return \u0275\u0275resetView(ctx_r1.onFormValueChange($event));
    });
    \u0275\u0275elementEnd();
  }
  if (rf & 2) {
    const ctx_r1 = \u0275\u0275nextContext();
    \u0275\u0275property("fields", ctx_r1.formFields)("actions", ctx_r1.actions)("hideActions", ctx_r1.createMode());
  }
}
function OverspeedProfileDetailsSectionComponent_Conditional_11_Conditional_0_Template(rf, ctx) {
  if (rf & 1) {
    \u0275\u0275elementStart(0, "div", 10)(1, "p-message", 12);
    \u0275\u0275element(2, "span", 13);
    \u0275\u0275text(3);
    \u0275\u0275elementEnd()();
  }
  if (rf & 2) {
    const ctx_r1 = \u0275\u0275nextContext(2);
    \u0275\u0275advance(3);
    \u0275\u0275textInterpolate1(" ", ctx_r1.warning());
  }
}
function OverspeedProfileDetailsSectionComponent_Conditional_11_Template(rf, ctx) {
  if (rf & 1) {
    \u0275\u0275conditionalCreate(0, OverspeedProfileDetailsSectionComponent_Conditional_11_Conditional_0_Template, 4, 1, "div", 10);
    \u0275\u0275element(1, "app-grid", 11);
  }
  if (rf & 2) {
    const ctx_r1 = \u0275\u0275nextContext();
    \u0275\u0275conditional(ctx_r1.warning() ? 0 : -1);
    \u0275\u0275advance();
    \u0275\u0275property("data", ctx_r1.overspeedProfileDetails())("columns", ctx_r1.columns)("showGridLines", false)("hideHeader", true);
  }
}
var OverspeedProfileDetailsSectionComponent = class _OverspeedProfileDetailsSectionComponent extends EntitySectionBaseComponent {
  ownerId = input(null, ...ngDevMode ? [{ debugName: "ownerId" }] : []);
  entitiesService = inject(EntitiesService);
  measurementUnitsService = inject(MeasurementUnitsService);
  overspeedProfileDetails = computed(() => {
    const overspeedProfileDetails = this.entity();
    if (!isDefined(overspeedProfileDetails))
      return [];
    return [
      { key: "Name", value: overspeedProfileDetails.name },
      {
        key: "Bands",
        value: overspeedProfileDetails.items?.map((item) => item.name).join(", ")
      }
    ];
  }, ...ngDevMode ? [{ debugName: "overspeedProfileDetails" }] : []);
  overspeedProfileBandsModalConfig;
  warning = signal(null, ...ngDevMode ? [{ debugName: "warning" }] : []);
  constructor() {
    super();
    this.columns = [
      { field: "key", header: "", transform: "uppercase" },
      { field: "value", header: "" }
    ];
    effect(() => {
      const overspeedProfile = this.entity();
      if (isNullOrUndefined(overspeedProfile?.items) || overspeedProfile.items.length < 1) {
        this.warning.set("At least one overspeed band is required for the overspeed profile to be useful.");
      } else {
        this.warning.set(null);
      }
    });
  }
  updateFormFields() {
    const overspeedProfile = this.entity();
    let lastProcessedRawItemsRef = null;
    let itemToMaxMapCache = null;
    this.overspeedProfileBandsModalConfig = {
      modalComponent: ModalListFormComponent,
      modalTitle: "Overspeed Band",
      defaultItemProvider: () => ({
        id: v4_default(),
        name: "",
        min: void 0,
        offset: void 0
      }),
      listItemFormatter: (item) => {
        const currentItemsControl = this.dynamicForm?.form?.get("items");
        const currentRawItemsFromForm = currentItemsControl?.value ?? [];
        if (currentRawItemsFromForm !== lastProcessedRawItemsRef || !itemToMaxMapCache) {
          const sortedRawItems = [...currentRawItemsFromForm].sort((a, b) => (a.min ?? 0) - (b.min ?? 0));
          itemToMaxMapCache = /* @__PURE__ */ new Map();
          for (let i = 0; i < sortedRawItems.length; i++) {
            const currentItemInSortedList = sortedRawItems[i];
            let maxForCurrentItem;
            if (i < sortedRawItems.length - 1) {
              const nextItemInSortedList = sortedRawItems[i + 1];
              if (isNumber(nextItemInSortedList.min)) {
                maxForCurrentItem = nextItemInSortedList.min;
              }
            }
            itemToMaxMapCache.set(currentItemInSortedList, maxForCurrentItem);
          }
          lastProcessedRawItemsRef = currentRawItemsFromForm;
        }
        const max = itemToMaxMapCache.get(item);
        return this.stateItemToListItem(item, max);
      },
      modalFields: (_item) => {
        const initialMinForModal = isDefined(_item?.min) ? _item.min - 100 : 0;
        return [
          createTextField("id", "ID", _item?.id, {
            name: "id",
            hidden: true
          }),
          createTextField("name", "Name", _item?.name, {
            name: "name",
            validations: [
              {
                name: "required",
                validator: Validators.required,
                message: "Name is required"
              }
            ]
          }),
          createNumberField("min", "Min", initialMinForModal, {
            name: "min",
            validations: [
              {
                name: "required",
                validator: Validators.required,
                message: "Min is required"
              },
              {
                name: "min",
                validator: Validators.min(0),
                message: "Min must be 0 or greater"
              }
            ],
            layout: "horizontal",
            labelWidth: "1/3",
            props: {
              suffix: "%",
              min: 0
            }
          }),
          createNumberField("offset", "Offset", this.measurementUnitsService.fromBackend(MeasurementUnitType.SPEED, _item?.offset ?? 0, 2), {
            name: "offset",
            validations: [
              {
                name: "required",
                validator: Validators.required,
                message: "Offset is required"
              },
              {
                name: "min",
                validator: Validators.min(-50),
                message: "Offset must be -50 or greater"
              },
              {
                name: "max",
                validator: Validators.max(50),
                message: "Offset must be 50 or less"
              }
            ],
            props: {
              suffix: this.measurementUnitsService.unit(MeasurementUnitType.SPEED)
            }
          })
        ];
      },
      subHeader: ""
    };
    this.formFields = [
      createTextField("name", "Name", overspeedProfile?.name, {
        name: "name",
        validations: [
          {
            name: "required",
            validator: Validators.required,
            message: "Name is required"
          }
        ]
      })
    ];
    if (!this.createMode()) {
      this.formFields.push(createModalListField("items", "Bands", overspeedProfile?.items ?? [], {
        layout: "horizontal",
        labelWidth: "1/3",
        name: "items",
        props: {
          modalConfig: this.overspeedProfileBandsModalConfig
        }
      }));
    }
  }
  submitChanges(formData) {
    const overspeedProfile = this.entity();
    if (isNullOrUndefined(overspeedProfile))
      return;
    this.entitiesService.updateOverspeedProfile(overspeedProfile.id, formData).pipe(takeUntilDestroyed(this.destroyRef)).subscribe({
      next: (response) => {
        this.isFormEditable.set(false);
        this.broadcastService.broadcast("entity-updated", {
          entityType: "overspeed-profile",
          operation: "update",
          entityId: overspeedProfile.id,
          data: response
        });
      },
      error: () => {
        this.isFormEditable.set(true);
      }
    });
  }
  stateItemToListItem(item, max) {
    return {
      id: item.id,
      title: item.name,
      display: isDefined(max) ? `Overspeeding events ${item.min} - ${max} over the speed limit` : `Overspeeding events ${item.min} plus over the speed limit`,
      icon: "pi pi-gauge"
    };
  }
  stateItemsToListItems(items) {
    return (items ?? []).sort((a, b) => {
      return a.min - b.min;
    }).map((x, idx, arr) => {
      const nextItem = idx < arr.length - 1 ? arr[idx + 1] : null;
      const max = nextItem?.min;
      return this.stateItemToListItem(x, max);
    });
  }
  onFormValueChange(formData) {
    const items = formData["items"];
    if (isDefined(items)) {
      const updatedItems = items.map((item) => __spreadProps(__spreadValues({}, item), {
        min: isDefined(item.min) ? item.min + 100 : void 0,
        offset: this.measurementUnitsService.toBackend(MeasurementUnitType.SPEED, item.offset ?? 0)
      }));
      formData["items"] = updatedItems;
    }
    this.formValueChange.emit(formData);
  }
  static \u0275fac = function OverspeedProfileDetailsSectionComponent_Factory(__ngFactoryType__) {
    return new (__ngFactoryType__ || _OverspeedProfileDetailsSectionComponent)();
  };
  static \u0275cmp = /* @__PURE__ */ \u0275\u0275defineComponent({ type: _OverspeedProfileDetailsSectionComponent, selectors: [["app-overspeed-profile-details-section"]], inputs: { ownerId: [1, "ownerId"] }, features: [\u0275\u0275InheritDefinitionFeature], decls: 12, vars: 7, consts: [[1, "card", "pt-2"], [1, "mb-4", "p-2", "flex", "justify-start", "items-center"], [1, "pi", "pi-gauge", "!text-[2.5rem]", 3, "ngClass"], [1, "pl-6", "flex-1"], [1, "flex", "justify-between", "items-center"], [1, "text-xl", "font-semibold", "m-0"], [1, "icon-light"], [3, "fields", "actions", "hideActions"], [1, "pi", "pi-pen-to-square", "action", "hover", "!text-2xl", 3, "click", "keydown.enter"], [3, "formSubmit", "formValidityChange", "formValueChange", "fields", "actions", "hideActions"], [1, "mb-4"], ["tableStyleClass", "info-display !w-auto", 3, "data", "columns", "showGridLines", "hideHeader"], ["severity", "warn"], [1, "pi", "pi-exclamation-triangle", "mr-2"]], template: function OverspeedProfileDetailsSectionComponent_Template(rf, ctx) {
    if (rf & 1) {
      \u0275\u0275elementStart(0, "div", 0)(1, "div", 1);
      \u0275\u0275element(2, "span", 2);
      \u0275\u0275elementStart(3, "div", 3)(4, "div", 4)(5, "h2", 5);
      \u0275\u0275text(6, "Overspeed Profile Details");
      \u0275\u0275elementEnd();
      \u0275\u0275conditionalCreate(7, OverspeedProfileDetailsSectionComponent_Conditional_7_Template, 2, 1, "div", 6);
      \u0275\u0275elementEnd();
      \u0275\u0275elementStart(8, "span");
      \u0275\u0275text(9, "Configure the bands which will be used to grade the severity of overspeeding events.");
      \u0275\u0275elementEnd()()();
      \u0275\u0275conditionalCreate(10, OverspeedProfileDetailsSectionComponent_Conditional_10_Template, 1, 3, "app-dynamic-form", 7);
      \u0275\u0275conditionalCreate(11, OverspeedProfileDetailsSectionComponent_Conditional_11_Template, 2, 5);
      \u0275\u0275elementEnd();
    }
    if (rf & 2) {
      \u0275\u0275advance(2);
      \u0275\u0275property("ngClass", \u0275\u0275pureFunction1(5, _c034, ctx.isFormEditable()));
      \u0275\u0275attribute("aria-label", "gauge icon");
      \u0275\u0275advance(5);
      \u0275\u0275conditional(!ctx.isFormEditable() && !ctx.createMode() ? 7 : -1);
      \u0275\u0275advance(3);
      \u0275\u0275conditional(ctx.isFormEditable() || ctx.createMode() && ctx.formFields.length ? 10 : -1);
      \u0275\u0275advance();
      \u0275\u0275conditional(!ctx.isFormEditable() && !ctx.createMode() ? 11 : -1);
    }
  }, dependencies: [
    CommonModule,
    NgClass,
    ButtonModule,
    GridComponent,
    DynamicFormComponent,
    MessageModule,
    Message
  ], encapsulation: 2 });
};
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(OverspeedProfileDetailsSectionComponent, [{
    type: Component,
    args: [{ selector: "app-overspeed-profile-details-section", imports: [
      CommonModule,
      ButtonModule,
      GridComponent,
      DynamicFormComponent,
      MessageModule
    ], template: `<div class="card pt-2">
  <div class="mb-4 p-2 flex justify-start items-center">
    <span
      class="pi pi-gauge !text-[2.5rem]"
      [ngClass]="{ 'icon-primary': isFormEditable() }"
      [attr.aria-label]="'gauge icon'"
    ></span>

    <div class="pl-6 flex-1">
      <div class="flex justify-between items-center">
        <h2 class="text-xl font-semibold m-0">Overspeed Profile Details</h2>
        @if (!isFormEditable() && !createMode()) {
          <div class="icon-light">
            <span
              class="pi pi-pen-to-square action hover !text-2xl"
              [attr.aria-label]="'Edit overspeed profile details'"
              (click)="onEdit()"
              (keydown.enter)="onEdit()"
            ></span>
          </div>
        }
      </div>
      <span
        >Configure the bands which will be used to grade the severity of
        overspeeding events.</span
      >
    </div>
  </div>

  @if (isFormEditable() || (createMode() && formFields.length)) {
    <app-dynamic-form
      [fields]="formFields"
      [actions]="actions"
      [hideActions]="createMode()"
      (formSubmit)="onSubmit($event)"
      (formValidityChange)="onFormValidityChange($event)"
      (formValueChange)="onFormValueChange($event)"
    >
    </app-dynamic-form>
  }

  @if (!isFormEditable() && !createMode()) {
    @if (warning()) {
      <div class="mb-4">
        <p-message severity="warn">
          <span class="pi pi-exclamation-triangle mr-2"></span>
          {{ warning() }}</p-message
        >
      </div>
    }
    <app-grid
      [data]="overspeedProfileDetails()"
      [columns]="columns"
      [showGridLines]="false"
      [hideHeader]="true"
      tableStyleClass="info-display !w-auto"
    ></app-grid>
  }
</div>
` }]
  }], () => [], { ownerId: [{ type: Input, args: [{ isSignal: true, alias: "ownerId", required: false }] }] });
})();
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && \u0275setClassDebugInfo(OverspeedProfileDetailsSectionComponent, { className: "OverspeedProfileDetailsSectionComponent", filePath: "src/app/features/administration/components/overspeed-profiles/overspeed-profile-details-section/overspeed-profile-details-section.component.ts", lineNumber: 54 });
})();

// src/app/features/administration/factories/overspeed-profile-config.factory.ts
var OverspeedProfileSectionConfigFactory = class _OverspeedProfileSectionConfigFactory {
  /**
   * Create sections for overspeedProfile information
   * @param overspeedProfile The overspeedProfile object to display in the section
   * @returns An array of AdminDetailSection objects representing the overspeedProfile information sections
   */
  createOverspeedProfileInformationSections(overspeedProfile) {
    return [
      {
        id: "overspeed-profile-details",
        title: "Overspeed Profile Details",
        component: OverspeedProfileDetailsSectionComponent,
        componentInputs: { entity: overspeedProfile },
        category: "information",
        order: 10
      }
    ];
  }
  /**
   * Create sections for overspeedProfile changes
   * @param overspeedProfile The overspeedProfile object to display in the section
   * @returns An array of AdminDetailSection objects representing the overspeedProfile changes sections
   */
  createChangesSection(overspeedProfile) {
    return [
      {
        id: "overspeed-profile-changes",
        title: "Changes",
        component: FeedSectionComponent,
        componentInputs: {
          entity: overspeedProfile
        },
        category: "feed",
        order: 10
      }
    ];
  }
  /**
   * Create all overspeedProfile sections in one call
   * @param overspeedProfile The overspeedProfile object to display in the sections
   * @returns An array of AdminDetailSection objects representing all overspeedProfile sections
   */
  createAllOverspeedProfileSections(overspeedProfile) {
    return [
      ...this.createOverspeedProfileInformationSections(overspeedProfile),
      ...this.createChangesSection(overspeedProfile)
    ];
  }
  static \u0275fac = function OverspeedProfileSectionConfigFactory_Factory(__ngFactoryType__) {
    return new (__ngFactoryType__ || _OverspeedProfileSectionConfigFactory)();
  };
  static \u0275prov = /* @__PURE__ */ \u0275\u0275defineInjectable({ token: _OverspeedProfileSectionConfigFactory, factory: _OverspeedProfileSectionConfigFactory.\u0275fac, providedIn: "root" });
};
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(OverspeedProfileSectionConfigFactory, [{
    type: Injectable,
    args: [{ providedIn: "root" }]
  }], null, null);
})();

// src/app/shared/services/alert-icon-storage.service.ts
var AlertIconStorageService = class _AlertIconStorageService {
  STORAGE_KEY = "alert-icons";
  localStorageService = inject(LocalStorageService);
  /**
   * Get the icon name for a specific alert
   * @param alertId The alert ID
   * @returns The icon name or null if not found
   */
  getAlertIcon(alertId) {
    try {
      const icons = this.getAllAlertIcons();
      return icons[alertId] ?? null;
    } catch (error) {
      console.warn("Failed to get alert icon from storage:", error);
      return null;
    }
  }
  /**
   * Set the icon name for a specific alert
   * @param alertId The alert ID
   * @param iconName The icon name to store
   */
  setAlertIcon(alertId, iconName) {
    try {
      const icons = this.getAllAlertIcons();
      if (iconName === null || iconName === void 0 || iconName === "") {
        delete icons[alertId];
      } else {
        icons[alertId] = iconName;
      }
      this.localStorageService.setItem(this.STORAGE_KEY, icons);
    } catch (error) {
      console.warn("Failed to save alert icon to storage:", error);
    }
  }
  /**
   * Get all alert icons from storage
   * @returns A record of alertId -> iconName mappings
   */
  getAllAlertIcons() {
    try {
      return this.localStorageService.getItem(this.STORAGE_KEY) ?? {};
    } catch (error) {
      console.warn("Failed to parse alert icons from storage:", error);
      return {};
    }
  }
  /**
   * Remove icon for a specific alert
   * @param alertId The alert ID
   */
  removeAlertIcon(alertId) {
    this.setAlertIcon(alertId, null);
  }
  /**
   * Clear all stored alert icons
   */
  clearAllIcons() {
    try {
      this.localStorageService.removeItem(this.STORAGE_KEY);
    } catch (error) {
      console.warn("Failed to clear alert icons from storage:", error);
    }
  }
  /**
   * Get the default icon for alerts
   * @returns The default icon name
   */
  getDefaultIcon() {
    return "warning";
  }
  /**
   * Get the icon for an alert with fallback to default
   * @param alertId The alert ID
   * @returns The icon name or default icon
   */
  getAlertIconWithFallback(alertId) {
    return this.getAlertIcon(alertId) ?? this.getDefaultIcon();
  }
  static \u0275fac = function AlertIconStorageService_Factory(__ngFactoryType__) {
    return new (__ngFactoryType__ || _AlertIconStorageService)();
  };
  static \u0275prov = /* @__PURE__ */ \u0275\u0275defineInjectable({ token: _AlertIconStorageService, factory: _AlertIconStorageService.\u0275fac, providedIn: "root" });
};
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(AlertIconStorageService, [{
    type: Injectable,
    args: [{
      providedIn: "root"
    }]
  }], null, null);
})();

// src/app/features/administration/components/alerts/alert-details-section/alert-details-section.component.ts
var _c035 = (a0) => ({ "text-primary": a0 });
function AlertDetailsSectionComponent_Conditional_2_Template(rf, ctx) {
  if (rf & 1) {
    \u0275\u0275elementStart(0, "span", 2);
    \u0275\u0275text(1);
    \u0275\u0275elementEnd();
  }
  if (rf & 2) {
    const icon_r1 = ctx;
    const ctx_r1 = \u0275\u0275nextContext();
    \u0275\u0275property("ngClass", \u0275\u0275pureFunction1(3, _c035, ctx_r1.isFormEditable()));
    \u0275\u0275attribute("aria-label", "Alert icon: " + icon_r1);
    \u0275\u0275advance();
    \u0275\u0275textInterpolate1(" ", icon_r1, " ");
  }
}
function AlertDetailsSectionComponent_Conditional_3_Template(rf, ctx) {
  if (rf & 1) {
    \u0275\u0275element(0, "span", 3);
  }
  if (rf & 2) {
    const ctx_r1 = \u0275\u0275nextContext();
    \u0275\u0275property("ngClass", \u0275\u0275pureFunction1(2, _c035, ctx_r1.isFormEditable()));
    \u0275\u0275attribute("aria-label", "Alert notification icon");
  }
}
function AlertDetailsSectionComponent_Conditional_8_Template(rf, ctx) {
  if (rf & 1) {
    const _r3 = \u0275\u0275getCurrentView();
    \u0275\u0275elementStart(0, "div", 7)(1, "span", 10);
    \u0275\u0275listener("click", function AlertDetailsSectionComponent_Conditional_8_Template_span_click_1_listener() {
      \u0275\u0275restoreView(_r3);
      const ctx_r1 = \u0275\u0275nextContext();
      return \u0275\u0275resetView(ctx_r1.onEdit());
    })("keydown.enter", function AlertDetailsSectionComponent_Conditional_8_Template_span_keydown_enter_1_listener() {
      \u0275\u0275restoreView(_r3);
      const ctx_r1 = \u0275\u0275nextContext();
      return \u0275\u0275resetView(ctx_r1.onEdit());
    });
    \u0275\u0275elementEnd()();
  }
  if (rf & 2) {
    \u0275\u0275advance();
    \u0275\u0275attribute("aria-label", "Edit alert details");
  }
}
function AlertDetailsSectionComponent_Conditional_11_Template(rf, ctx) {
  if (rf & 1) {
    const _r4 = \u0275\u0275getCurrentView();
    \u0275\u0275elementStart(0, "app-dynamic-form", 11);
    \u0275\u0275listener("formSubmit", function AlertDetailsSectionComponent_Conditional_11_Template_app_dynamic_form_formSubmit_0_listener($event) {
      \u0275\u0275restoreView(_r4);
      const ctx_r1 = \u0275\u0275nextContext();
      return \u0275\u0275resetView(ctx_r1.onSubmit($event));
    })("formValidityChange", function AlertDetailsSectionComponent_Conditional_11_Template_app_dynamic_form_formValidityChange_0_listener($event) {
      \u0275\u0275restoreView(_r4);
      const ctx_r1 = \u0275\u0275nextContext();
      return \u0275\u0275resetView(ctx_r1.onFormValidityChange($event));
    })("formValueChange", function AlertDetailsSectionComponent_Conditional_11_Template_app_dynamic_form_formValueChange_0_listener($event) {
      \u0275\u0275restoreView(_r4);
      const ctx_r1 = \u0275\u0275nextContext();
      return \u0275\u0275resetView(ctx_r1.onFormValueChange($event));
    });
    \u0275\u0275elementEnd();
  }
  if (rf & 2) {
    const ctx_r1 = \u0275\u0275nextContext();
    \u0275\u0275property("fields", ctx_r1.formFields)("actions", ctx_r1.actions)("hideActions", ctx_r1.createMode());
  }
}
function AlertDetailsSectionComponent_Conditional_12_Template(rf, ctx) {
  if (rf & 1) {
    \u0275\u0275element(0, "app-grid", 9);
  }
  if (rf & 2) {
    const ctx_r1 = \u0275\u0275nextContext();
    \u0275\u0275property("data", ctx_r1.alertDetails())("columns", ctx_r1.columns)("showGridLines", false)("hideHeader", true);
  }
}
var AlertDetailsSectionComponent = class _AlertDetailsSectionComponent extends EntitySectionBaseComponent {
  ownerId = input(null, ...ngDevMode ? [{ debugName: "ownerId" }] : []);
  entitiesService = inject(EntitiesService);
  accountsService = inject(AccountsService);
  authDataService = inject(AuthDataService);
  alertIconStorageService = inject(AlertIconStorageService);
  operationRegistry = inject(EntityOperationRegistryService);
  eventFilterService = inject(EventFilterService);
  cdr = inject(ChangeDetectorRef);
  selectOptionsLoaded = signal(false, ...ngDevMode ? [{ debugName: "selectOptionsLoaded" }] : []);
  alertDetails = computed(() => {
    const alertDetails = this.entity();
    if (!isDefined(alertDetails))
      return [];
    const filter = isDefined(alertDetails.filter) ? this.eventFilterService.getEventFilterText(alertDetails.filter) : "None";
    return [
      { key: "Name", value: alertDetails.name },
      {
        key: "Icon",
        value: alertDetails["iconName"] ?? this.alertIconStorageService.getDefaultIcon()
      },
      { key: "Cost Centre", value: alertDetails.costCentre?.name ?? "None" },
      {
        key: "Priority",
        value: alertDetails.priority ? alertDetails.priority.charAt(0).toUpperCase() + alertDetails.priority.slice(1) : "None"
      },
      { key: "Event Filter", value: filter ?? "None" },
      {
        key: "Notify",
        value: isDefined(alertDetails.notify) && alertDetails.notify.length > 0 ? alertDetails.notify.map((element) => element.name).join(", ") : "None"
      }
    ];
  }, ...ngDevMode ? [{ debugName: "alertDetails" }] : []);
  alertIcon = computed(() => {
    const alert2 = this.entity();
    return alert2?.["iconName"] ?? this.alertIconStorageService.getDefaultIcon();
  }, ...ngDevMode ? [{ debugName: "alertIcon" }] : []);
  selectOptions = {};
  notifyTree = signal([], ...ngDevMode ? [{ debugName: "notifyTree" }] : []);
  constructor() {
    super();
    this.columns = [
      { field: "key", header: "", transform: "uppercase" },
      { field: "value", header: "" }
    ];
    effect(() => {
      const entity = this.entity();
      if (entity && !this.createMode()) {
        untracked(() => {
          this.updateFormFields();
          this.cdr.detectChanges();
        });
      }
    });
  }
  ngOnInit() {
    this.loadSelectOptions();
  }
  loadSelectOptions() {
    const asset = this.entity();
    const ownerIdValue = this.ownerId();
    const effectiveOwnerId = asset?.owner?.id ?? ownerIdValue;
    if (isNullOrUndefined(effectiveOwnerId)) {
      this.selectOptions = {};
      this.selectOptionsLoaded.set(true);
      this.updateFormFields();
      return;
    }
    combineLatest([
      this.accountsService.listUserRoles(effectiveOwnerId, 0, 100),
      this.accountsService.listUsers(effectiveOwnerId, 0, 100, void 0, "state=active"),
      this.entitiesService.listCostCentres(effectiveOwnerId)
    ]).subscribe({
      next: ([userRoles, users, costCentres]) => {
        this.selectOptions = {
          userRoles: userRoles.items.map((item) => ({ label: item.name ?? "", value: item.id })).sort((a, b) => a.label.localeCompare(b.label)),
          users: users.items.map((item) => ({ label: item.name ?? "", value: item.id })).sort((a, b) => a.label.localeCompare(b.label)),
          costCentres: costCentres.items.map((item) => ({ label: item.name ?? "", value: item.id })).sort((a, b) => a.label.localeCompare(b.label))
        };
        this.selectOptionsLoaded.set(true);
        const userProfile = this.authDataService.getUserProfile();
        this.notifyTree.set([
          {
            key: `user.${userProfile?.id}`,
            label: "Me",
            selectable: true,
            data: { id: userProfile?.id, type: "user", name: "Me" }
          },
          {
            key: "roles",
            label: "User with specific roles",
            selectable: false,
            children: userRoles.items.map((role) => ({
              key: role.id,
              label: role.name ?? "",
              selectable: true,
              data: { id: role.id, type: "role", name: role.name ?? "" }
            }))
          },
          {
            key: "users",
            label: "Specific Users",
            selectable: false,
            children: users.items.map((user) => ({
              key: user.id,
              label: user.name ?? "",
              selectable: true,
              data: { id: user.id, type: "user", name: user.name ?? "" }
            }))
          }
        ]);
        this.updateFormFields();
      },
      error: () => {
        this.selectOptionsLoaded.set(true);
      }
    });
  }
  updateFormFields() {
    const alert2 = this.entity();
    const priorityOptions = [
      { label: "Low", value: "low" },
      { label: "Medium", value: "medium" },
      { label: "High", value: "high" }
    ];
    this.formFields = [
      createTextField("name", "Name", alert2?.name, {
        name: "name",
        validations: [
          {
            name: "required",
            validator: Validators.required,
            message: "Name is required"
          }
        ]
      }),
      ...this.createMode() === false ? [
        createIconSelectorField("iconName", "Icon", alert2?.["iconName"] ?? this.alertIconStorageService.getDefaultIcon(), {
          name: "iconName",
          hint: "Select an icon to represent this alert"
        })
      ] : [],
      createDropdownField("costCentre", "Cost Centre", this.selectOptions["costCentres"], alert2?.costCentre?.id, {
        validations: [
          {
            name: "required",
            validator: Validators.required,
            message: "Cost centre is required"
          }
        ],
        props: {
          appendTo: "body"
        }
      }),
      createDropdownField("priority", "Priority", priorityOptions, alert2?.priority, {
        validations: [
          {
            name: "required",
            validator: Validators.required,
            message: "Priority is required"
          }
        ],
        props: {
          appendTo: "body"
        }
      }),
      createEventFilterField("filter", "Event Filter", alert2?.filter, ["costcentres", "groups", "types"], {
        name: "filter",
        required: true,
        validations: [
          {
            name: "required",
            validator: Validators.required,
            message: "Event filter is required"
          }
        ]
      }),
      createTreeSplitButtonListField("notify", "Notify", alert2?.notify, this.notifyTree(), {
        name: "notify",
        props: {
          appendTo: "body"
        },
        transformTreeNodeToItem: (node) => this.transformTreeNodeToItem(node),
        listItemFormatter: (item) => {
          return {
            id: `${item.type}-${item.id}`,
            display: item.name || item.id,
            title: item.type ? item.type.charAt(0).toUpperCase() + item.type.slice(1) : "Item",
            icon: item.type === "user" ? "pi-user" : "pi-users"
          };
        },
        addButtonLabel: "Add"
      })
    ];
  }
  getUpdateMethod() {
    return this.operationRegistry.getOperation("alert", "update") ?? ((id, data) => this.entitiesService.updateAlert(id, data));
  }
  onFormValueChange(formData) {
    const transformedData = this.transformFormData(formData);
    this.formValueChange.emit(transformedData);
  }
  transformFormData(formData) {
    const transformedData = __spreadValues({}, formData);
    if (isDefined(transformedData["costCentre"])) {
      const costCentreOption = this.selectOptions?.["costCentres"]?.find((option) => option.value === transformedData["costCentre"]);
      if (costCentreOption) {
        transformedData["costCentre"] = {
          id: costCentreOption.value,
          name: costCentreOption.label
        };
      }
    }
    if (isDefined(transformedData["filter"])) {
      const filter = transformedData["filter"];
      transformedData["filter"] = __spreadProps(__spreadValues({}, filter), {
        actor: filter?.["actor"]?.["data"],
        action: filter?.["action"]?.["data"],
        target: filter?.["target"]?.["data"],
        conditions: filter?.["conditions"]?.map((condition) => {
          const _a = condition, { id: _ } = _a, rest = __objRest(_a, ["id"]);
          return rest;
        })
      });
    }
    return transformedData;
  }
  notifyToTreeItem(notify) {
    const notifyType = notify.type;
    const notifyId = notify.id;
    if (notifyType === "user") {
      const user = this.authDataService.getUserProfile();
      return {
        key: `user.${user?.id}`,
        label: user?.name ?? ""
      };
    }
    return {
      key: `notify.${notifyId}`,
      label: notify?.name ?? ""
    };
  }
  transformTreeNodeToItem(node) {
    if (isDefined(node.data) && typeof node.data === "object" && "id" in node.data && "type" in node.data) {
      return node.data;
    }
    if (node.label === "Me") {
      const userProfile = this.authDataService.getUserProfile();
      return { id: userProfile?.id ?? "me", type: "user", name: "Me" };
    }
    let type = "user";
    const id = node.key ?? "unknown_id";
    const name = node.label ?? "Unknown Name";
    if (node.parent?.key === "roles" || (node.key?.startsWith("role_") ?? false)) {
      type = "role";
    }
    return { id, type, name };
  }
  static \u0275fac = function AlertDetailsSectionComponent_Factory(__ngFactoryType__) {
    return new (__ngFactoryType__ || _AlertDetailsSectionComponent)();
  };
  static \u0275cmp = /* @__PURE__ */ \u0275\u0275defineComponent({ type: _AlertDetailsSectionComponent, selectors: [["app-alert-details-section"]], inputs: { ownerId: [1, "ownerId"] }, features: [\u0275\u0275InheritDefinitionFeature], decls: 13, vars: 4, consts: [[1, "card", "pt-2"], [1, "mb-4", "p-2", "flex", "justify-start", "items-center"], [1, "material-icons-outlined", "!text-[2.5rem]", "text-primary", 3, "ngClass"], [1, "pi", "pi-exclamation-triangle", "!text-[2.5rem]", 3, "ngClass"], [1, "pl-6", "flex-1"], [1, "flex", "justify-between", "items-center"], [1, "text-xl", "font-semibold", "m-0"], [1, "icon-light"], [3, "fields", "actions", "hideActions"], ["tableStyleClass", "info-display !w-auto", 3, "data", "columns", "showGridLines", "hideHeader"], [1, "pi", "pi-pen-to-square", "action", "hover", "!text-2xl", 3, "click", "keydown.enter"], [3, "formSubmit", "formValidityChange", "formValueChange", "fields", "actions", "hideActions"]], template: function AlertDetailsSectionComponent_Template(rf, ctx) {
    if (rf & 1) {
      \u0275\u0275elementStart(0, "div", 0)(1, "div", 1);
      \u0275\u0275conditionalCreate(2, AlertDetailsSectionComponent_Conditional_2_Template, 2, 5, "span", 2)(3, AlertDetailsSectionComponent_Conditional_3_Template, 1, 4, "span", 3);
      \u0275\u0275elementStart(4, "div", 4)(5, "div", 5)(6, "h2", 6);
      \u0275\u0275text(7, "Alert Details");
      \u0275\u0275elementEnd();
      \u0275\u0275conditionalCreate(8, AlertDetailsSectionComponent_Conditional_8_Template, 2, 1, "div", 7);
      \u0275\u0275elementEnd();
      \u0275\u0275elementStart(9, "span");
      \u0275\u0275text(10, "Configure various details about your Alert.");
      \u0275\u0275elementEnd()()();
      \u0275\u0275conditionalCreate(11, AlertDetailsSectionComponent_Conditional_11_Template, 1, 3, "app-dynamic-form", 8);
      \u0275\u0275conditionalCreate(12, AlertDetailsSectionComponent_Conditional_12_Template, 1, 4, "app-grid", 9);
      \u0275\u0275elementEnd();
    }
    if (rf & 2) {
      let tmp_0_0;
      \u0275\u0275advance(2);
      \u0275\u0275conditional((tmp_0_0 = ctx.alertIcon()) ? 2 : 3, tmp_0_0);
      \u0275\u0275advance(6);
      \u0275\u0275conditional(!ctx.isFormEditable() && !ctx.createMode() ? 8 : -1);
      \u0275\u0275advance(3);
      \u0275\u0275conditional(ctx.isFormEditable() || ctx.createMode() && ctx.formFields.length ? 11 : -1);
      \u0275\u0275advance();
      \u0275\u0275conditional(!ctx.isFormEditable() && !ctx.createMode() ? 12 : -1);
    }
  }, dependencies: [
    CommonModule,
    NgClass,
    GridComponent,
    DynamicFormComponent,
    MultiSelectModule,
    FormsModule
  ], styles: ["\n\n.custom-multi-select[_ngcontent-%COMP%] {\n  border: 1px solid #ccc;\n  padding: 8px;\n  border-radius: 4px;\n  display: flex;\n  flex-wrap: wrap;\n  gap: 8px;\n  background-color: #f9f9f9;\n}\n.selected-items[_ngcontent-%COMP%] {\n  display: flex;\n  flex-wrap: wrap;\n  gap: 8px;\n}\n.selected-item[_ngcontent-%COMP%] {\n  background-color: #e0e0e0;\n  padding: 4px 8px;\n  border-radius: 4px;\n  cursor: pointer;\n  text-decoration: underline;\n}\n.selected-item[_ngcontent-%COMP%]:hover {\n  background-color: #d6d6d6;\n}\n/*# sourceMappingURL=alert-details-section.component.css.map */"] });
};
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(AlertDetailsSectionComponent, [{
    type: Component,
    args: [{ selector: "app-alert-details-section", imports: [
      CommonModule,
      GridComponent,
      DynamicFormComponent,
      MultiSelectModule,
      FormsModule
    ], template: `<div class="card pt-2">
  <div class="mb-4 p-2 flex justify-start items-center">
    <!-- Dynamic icon based on alert configuration -->
    @if (alertIcon(); as icon) {
      <span
        class="material-icons-outlined !text-[2.5rem] text-primary"
        [ngClass]="{ 'text-primary': isFormEditable() }"
        [attr.aria-label]="'Alert icon: ' + icon"
      >
        {{ icon }}
      </span>
    } @else {
      <span
        class="pi pi-exclamation-triangle !text-[2.5rem]"
        [ngClass]="{ 'text-primary': isFormEditable() }"
        [attr.aria-label]="'Alert notification icon'"
      ></span>
    }

    <div class="pl-6 flex-1">
      <div class="flex justify-between items-center">
        <h2 class="text-xl font-semibold m-0">Alert Details</h2>
        @if (!isFormEditable() && !createMode()) {
          <div class="icon-light">
            <span
              class="pi pi-pen-to-square action hover !text-2xl"
              [attr.aria-label]="'Edit alert details'"
              (click)="onEdit()"
              (keydown.enter)="onEdit()"
            ></span>
          </div>
        }
      </div>
      <span>Configure various details about your Alert.</span>
    </div>
  </div>

  @if (isFormEditable() || (createMode() && formFields.length)) {
    <app-dynamic-form
      [fields]="formFields"
      [actions]="actions"
      [hideActions]="createMode()"
      (formSubmit)="onSubmit($event)"
      (formValidityChange)="onFormValidityChange($event)"
      (formValueChange)="onFormValueChange($event)"
    >
    </app-dynamic-form>
  }

  @if (!isFormEditable() && !createMode()) {
    <app-grid
      [data]="alertDetails()"
      [columns]="columns"
      [showGridLines]="false"
      [hideHeader]="true"
      tableStyleClass="info-display !w-auto"
    ></app-grid>
  }
</div>
`, styles: ["/* src/app/features/administration/components/alerts/alert-details-section/alert-details-section.component.scss */\n.custom-multi-select {\n  border: 1px solid #ccc;\n  padding: 8px;\n  border-radius: 4px;\n  display: flex;\n  flex-wrap: wrap;\n  gap: 8px;\n  background-color: #f9f9f9;\n}\n.selected-items {\n  display: flex;\n  flex-wrap: wrap;\n  gap: 8px;\n}\n.selected-item {\n  background-color: #e0e0e0;\n  padding: 4px 8px;\n  border-radius: 4px;\n  cursor: pointer;\n  text-decoration: underline;\n}\n.selected-item:hover {\n  background-color: #d6d6d6;\n}\n/*# sourceMappingURL=alert-details-section.component.css.map */\n"] }]
  }], () => [], { ownerId: [{ type: Input, args: [{ isSignal: true, alias: "ownerId", required: false }] }] });
})();
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && \u0275setClassDebugInfo(AlertDetailsSectionComponent, { className: "AlertDetailsSectionComponent", filePath: "src/app/features/administration/components/alerts/alert-details-section/alert-details-section.component.ts", lineNumber: 60 });
})();

// src/app/features/administration/factories/alert-section-config.factory.ts
var AlertSectionConfigFactory = class _AlertSectionConfigFactory {
  /**
   * Create sections for alert information
   * @param alert The alert object to display in the section
   * @returns An array of AdminDetailSection objects representing the alert information sections
   */
  createAlertInformationSection(alert2) {
    return [
      {
        id: "alert-details",
        title: "Alert Config Details",
        component: AlertDetailsSectionComponent,
        componentInputs: { entity: alert2 },
        category: "information",
        order: 10
      }
    ];
  }
  /**
   * Create sections for alert changes
   * @param alert The alert object to display in the section
   * @returns An array of AdminDetailSection objects representing the alert changes sections
   */
  createChangesSection(alert2) {
    return [
      {
        id: "alert-changes",
        title: "Changes",
        component: FeedSectionComponent,
        componentInputs: {
          entity: alert2
        },
        category: "feed",
        order: 10
      }
    ];
  }
  /**
   * Create all alert sections in one call
   * @param alert The alert object to display in the sections
   * @returns An array of AdminDetailSection objects representing all alert sections
   */
  createAllAlertSections(alert2) {
    return [
      ...this.createAlertInformationSection(alert2),
      ...this.createChangesSection(alert2)
    ];
  }
  static \u0275fac = function AlertSectionConfigFactory_Factory(__ngFactoryType__) {
    return new (__ngFactoryType__ || _AlertSectionConfigFactory)();
  };
  static \u0275prov = /* @__PURE__ */ \u0275\u0275defineInjectable({ token: _AlertSectionConfigFactory, factory: _AlertSectionConfigFactory.\u0275fac, providedIn: "root" });
};
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(AlertSectionConfigFactory, [{
    type: Injectable,
    args: [{ providedIn: "root" }]
  }], null, null);
})();

// src/app/features/administration/components/user-roles/user-role-details-section/user-role-details-section.component.ts
var _c036 = (a0) => ({ "icon-primary": a0 });
function UserRoleDetailsSectionComponent_Conditional_7_Template(rf, ctx) {
  if (rf & 1) {
    const _r1 = \u0275\u0275getCurrentView();
    \u0275\u0275elementStart(0, "div", 6)(1, "span", 9);
    \u0275\u0275listener("click", function UserRoleDetailsSectionComponent_Conditional_7_Template_span_click_1_listener() {
      \u0275\u0275restoreView(_r1);
      const ctx_r1 = \u0275\u0275nextContext();
      return \u0275\u0275resetView(ctx_r1.onEdit());
    })("keydown.enter", function UserRoleDetailsSectionComponent_Conditional_7_Template_span_keydown_enter_1_listener() {
      \u0275\u0275restoreView(_r1);
      const ctx_r1 = \u0275\u0275nextContext();
      return \u0275\u0275resetView(ctx_r1.onEdit());
    });
    \u0275\u0275elementEnd()();
  }
  if (rf & 2) {
    \u0275\u0275advance();
    \u0275\u0275attribute("aria-label", "Edit user role details");
  }
}
function UserRoleDetailsSectionComponent_Conditional_10_Template(rf, ctx) {
  if (rf & 1) {
    const _r3 = \u0275\u0275getCurrentView();
    \u0275\u0275elementStart(0, "app-dynamic-form", 10);
    \u0275\u0275listener("formSubmit", function UserRoleDetailsSectionComponent_Conditional_10_Template_app_dynamic_form_formSubmit_0_listener($event) {
      \u0275\u0275restoreView(_r3);
      const ctx_r1 = \u0275\u0275nextContext();
      return \u0275\u0275resetView(ctx_r1.onSubmit($event));
    })("formValidityChange", function UserRoleDetailsSectionComponent_Conditional_10_Template_app_dynamic_form_formValidityChange_0_listener($event) {
      \u0275\u0275restoreView(_r3);
      const ctx_r1 = \u0275\u0275nextContext();
      return \u0275\u0275resetView(ctx_r1.onFormValidityChange($event));
    })("formValueChange", function UserRoleDetailsSectionComponent_Conditional_10_Template_app_dynamic_form_formValueChange_0_listener($event) {
      \u0275\u0275restoreView(_r3);
      const ctx_r1 = \u0275\u0275nextContext();
      return \u0275\u0275resetView(ctx_r1.onFormValueChange($event));
    });
    \u0275\u0275elementEnd();
  }
  if (rf & 2) {
    const ctx_r1 = \u0275\u0275nextContext();
    \u0275\u0275property("fields", ctx_r1.formFields)("actions", ctx_r1.actions)("hideActions", ctx_r1.createMode());
  }
}
function UserRoleDetailsSectionComponent_Conditional_11_Template(rf, ctx) {
  if (rf & 1) {
    \u0275\u0275element(0, "app-grid", 8);
  }
  if (rf & 2) {
    const ctx_r1 = \u0275\u0275nextContext();
    \u0275\u0275property("data", ctx_r1.userRoleDetails())("columns", ctx_r1.columns)("showGridLines", false)("hideHeader", true);
  }
}
var UserRoleDetailsSectionComponent = class _UserRoleDetailsSectionComponent extends EntitySectionBaseComponent {
  accountsService = inject(AccountsService);
  faUserLock = faUserLock;
  userRoleDetails = computed(() => {
    const userRoleDetails = this.entity();
    if (!isDefined(userRoleDetails))
      return [];
    return [
      { key: "Name", value: userRoleDetails.name },
      { key: "Description", value: userRoleDetails.description }
    ];
  }, ...ngDevMode ? [{ debugName: "userRoleDetails" }] : []);
  constructor() {
    super();
    this.columns = [
      { field: "key", header: "", transform: "uppercase" },
      { field: "value", header: "" }
    ];
  }
  updateFormFields() {
    const userRole = this.entity();
    this.formFields = [
      createTextField("name", "Name", userRole?.name, {
        name: "name",
        validations: [
          {
            name: "required",
            validator: Validators.required,
            message: "Name is required"
          }
        ]
      }),
      createTextField("description", "Description", userRole?.description, {
        name: "description",
        validations: [
          {
            name: "required",
            validator: Validators.required,
            message: "Description is required"
          }
        ]
      })
    ];
  }
  submitChanges(formData) {
    const userRole = this.entity();
    if (isNullOrUndefined(userRole))
      return;
    this.accountsService.updateUserRole(userRole.id, formData).pipe(takeUntilDestroyed(this.destroyRef)).subscribe({
      next: (response) => {
        this.isFormEditable.set(false);
        this.broadcastService.broadcast("entity-updated", {
          entityType: "user-role",
          operation: "update",
          entityId: userRole.id,
          data: response
        });
      },
      error: () => {
        this.isFormEditable.set(true);
      }
    });
  }
  static \u0275fac = function UserRoleDetailsSectionComponent_Factory(__ngFactoryType__) {
    return new (__ngFactoryType__ || _UserRoleDetailsSectionComponent)();
  };
  static \u0275cmp = /* @__PURE__ */ \u0275\u0275defineComponent({ type: _UserRoleDetailsSectionComponent, selectors: [["app-user-role-details-section"]], features: [\u0275\u0275InheritDefinitionFeature], decls: 12, vars: 7, consts: [[1, "card", "pt-2"], [1, "mb-4", "p-2", "flex", "justify-start", "items-center"], [1, "!text-[2.5rem]", 3, "icon", "ngClass"], [1, "pl-6", "flex-1"], [1, "flex", "justify-between", "items-center"], [1, "text-xl", "font-semibold", "m-0"], [1, "icon-light"], [3, "fields", "actions", "hideActions"], ["tableStyleClass", "info-display !w-auto", 3, "data", "columns", "showGridLines", "hideHeader"], [1, "pi", "pi-pen-to-square", "action", "hover", "!text-2xl", 3, "click", "keydown.enter"], [3, "formSubmit", "formValidityChange", "formValueChange", "fields", "actions", "hideActions"]], template: function UserRoleDetailsSectionComponent_Template(rf, ctx) {
    if (rf & 1) {
      \u0275\u0275elementStart(0, "div", 0)(1, "div", 1);
      \u0275\u0275element(2, "fa-icon", 2);
      \u0275\u0275elementStart(3, "div", 3)(4, "div", 4)(5, "h2", 5);
      \u0275\u0275text(6, "User Role Details");
      \u0275\u0275elementEnd();
      \u0275\u0275conditionalCreate(7, UserRoleDetailsSectionComponent_Conditional_7_Template, 2, 1, "div", 6);
      \u0275\u0275elementEnd();
      \u0275\u0275elementStart(8, "span");
      \u0275\u0275text(9, "Describe this user role.");
      \u0275\u0275elementEnd()()();
      \u0275\u0275conditionalCreate(10, UserRoleDetailsSectionComponent_Conditional_10_Template, 1, 3, "app-dynamic-form", 7);
      \u0275\u0275conditionalCreate(11, UserRoleDetailsSectionComponent_Conditional_11_Template, 1, 4, "app-grid", 8);
      \u0275\u0275elementEnd();
    }
    if (rf & 2) {
      \u0275\u0275advance(2);
      \u0275\u0275property("icon", ctx.faUserLock)("ngClass", \u0275\u0275pureFunction1(5, _c036, ctx.isFormEditable()));
      \u0275\u0275advance(5);
      \u0275\u0275conditional(!ctx.isFormEditable() && !ctx.createMode() ? 7 : -1);
      \u0275\u0275advance(3);
      \u0275\u0275conditional(ctx.isFormEditable() || ctx.createMode() && ctx.formFields.length ? 10 : -1);
      \u0275\u0275advance();
      \u0275\u0275conditional(!ctx.isFormEditable() && !ctx.createMode() ? 11 : -1);
    }
  }, dependencies: [
    CommonModule,
    NgClass,
    ButtonModule,
    GridComponent,
    DynamicFormComponent,
    MessageModule,
    FontAwesomeModule,
    FaIconComponent
  ], encapsulation: 2 });
};
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(UserRoleDetailsSectionComponent, [{
    type: Component,
    args: [{ selector: "app-user-role-details-section", imports: [
      CommonModule,
      ButtonModule,
      GridComponent,
      DynamicFormComponent,
      MessageModule,
      FontAwesomeModule
    ], template: `<div class="card pt-2">
  <div class="mb-4 p-2 flex justify-start items-center">
    <fa-icon
      [icon]="faUserLock"
      class="!text-[2.5rem]"
      [ngClass]="{ 'icon-primary': isFormEditable() }"
    ></fa-icon>

    <div class="pl-6 flex-1">
      <div class="flex justify-between items-center">
        <h2 class="text-xl font-semibold m-0">User Role Details</h2>
        @if (!isFormEditable() && !createMode()) {
          <div class="icon-light">
            <span
              class="pi pi-pen-to-square action hover !text-2xl"
              [attr.aria-label]="'Edit user role details'"
              (click)="onEdit()"
              (keydown.enter)="onEdit()"
            ></span>
          </div>
        }
      </div>
      <span>Describe this user role.</span>
    </div>
  </div>

  @if (isFormEditable() || (createMode() && formFields.length)) {
    <app-dynamic-form
      [fields]="formFields"
      [actions]="actions"
      [hideActions]="createMode()"
      (formSubmit)="onSubmit($event)"
      (formValidityChange)="onFormValidityChange($event)"
      (formValueChange)="onFormValueChange($event)"
    >
    </app-dynamic-form>
  }

  @if (!isFormEditable() && !createMode()) {
    <app-grid
      [data]="userRoleDetails()"
      [columns]="columns"
      [showGridLines]="false"
      [hideHeader]="true"
      tableStyleClass="info-display !w-auto"
    ></app-grid>
  }
</div>
` }]
  }], () => [], null);
})();
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && \u0275setClassDebugInfo(UserRoleDetailsSectionComponent, { className: "UserRoleDetailsSectionComponent", filePath: "src/app/features/administration/components/user-roles/user-role-details-section/user-role-details-section.component.ts", lineNumber: 35 });
})();

// src/app/features/administration/components/user-roles/user-role-rights-section/user-role-rights-section.component.ts
var _c037 = (a0) => ({ "icon-primary": a0 });
function UserRoleRightsSectionComponent_Conditional_7_Template(rf, ctx) {
  if (rf & 1) {
    const _r1 = \u0275\u0275getCurrentView();
    \u0275\u0275elementStart(0, "div", 6)(1, "span", 9);
    \u0275\u0275listener("click", function UserRoleRightsSectionComponent_Conditional_7_Template_span_click_1_listener() {
      \u0275\u0275restoreView(_r1);
      const ctx_r1 = \u0275\u0275nextContext();
      return \u0275\u0275resetView(ctx_r1.onEdit());
    })("keydown.enter", function UserRoleRightsSectionComponent_Conditional_7_Template_span_keydown_enter_1_listener() {
      \u0275\u0275restoreView(_r1);
      const ctx_r1 = \u0275\u0275nextContext();
      return \u0275\u0275resetView(ctx_r1.onEdit());
    });
    \u0275\u0275elementEnd()();
  }
  if (rf & 2) {
    \u0275\u0275advance();
    \u0275\u0275attribute("aria-label", "Edit access rights details");
  }
}
function UserRoleRightsSectionComponent_Conditional_10_Template(rf, ctx) {
  if (rf & 1) {
    const _r3 = \u0275\u0275getCurrentView();
    \u0275\u0275elementStart(0, "app-dynamic-form", 10);
    \u0275\u0275listener("formSubmit", function UserRoleRightsSectionComponent_Conditional_10_Template_app_dynamic_form_formSubmit_0_listener($event) {
      \u0275\u0275restoreView(_r3);
      const ctx_r1 = \u0275\u0275nextContext();
      return \u0275\u0275resetView(ctx_r1.onSubmit($event));
    })("formValidityChange", function UserRoleRightsSectionComponent_Conditional_10_Template_app_dynamic_form_formValidityChange_0_listener($event) {
      \u0275\u0275restoreView(_r3);
      const ctx_r1 = \u0275\u0275nextContext();
      return \u0275\u0275resetView(ctx_r1.onFormValidityChange($event));
    })("formValueChange", function UserRoleRightsSectionComponent_Conditional_10_Template_app_dynamic_form_formValueChange_0_listener($event) {
      \u0275\u0275restoreView(_r3);
      const ctx_r1 = \u0275\u0275nextContext();
      return \u0275\u0275resetView(ctx_r1.onFormValueChange($event));
    });
    \u0275\u0275elementEnd();
  }
  if (rf & 2) {
    const ctx_r1 = \u0275\u0275nextContext();
    \u0275\u0275property("fields", ctx_r1.formFields)("actions", ctx_r1.actions)("hideActions", ctx_r1.createMode());
  }
}
function UserRoleRightsSectionComponent_Conditional_11_Template(rf, ctx) {
  if (rf & 1) {
    \u0275\u0275element(0, "app-grid", 8);
  }
  if (rf & 2) {
    const ctx_r1 = \u0275\u0275nextContext();
    \u0275\u0275property("data", ctx_r1.userRoleDetails())("columns", ctx_r1.columns)("showGridLines", false)("hideHeader", true);
  }
}
var UserRoleRightsSectionComponent = class _UserRoleRightsSectionComponent extends EntitySectionBaseComponent {
  ownerId = input(null, ...ngDevMode ? [{ debugName: "ownerId" }] : []);
  accountsService = inject(AccountsService);
  resolvedCompanyType = signal(void 0, ...ngDevMode ? [{ debugName: "resolvedCompanyType" }] : []);
  faKey = faKey;
  userRoleDetails = computed(() => {
    const userRole = this.entity();
    const companyType = this.resolvedCompanyType();
    if (!isDefined(userRole) || !isDefined(companyType)) {
      return [];
    }
    const legacyRights = LEGACY_RIGHTS[companyType];
    const details = [];
    if (isDefined(legacyRights)) {
      legacyRights.forEach((right) => {
        details.push({
          key: right.title,
          value: userRole.legacyRights?.[right.name]?.join(", ") ?? "None"
        });
      });
    }
    return details;
  }, ...ngDevMode ? [{ debugName: "userRoleDetails" }] : []);
  constructor() {
    super();
    this.columns = [
      { field: "key", header: "", transform: "uppercase" },
      { field: "value", header: "", transform: "capitalize" }
    ];
    effect(() => {
      const userRole = this.entity();
      const ownerId = userRole?.owner?.id;
      if (isDefined(ownerId)) {
        if (ownerId === DEFAULT_SYSTEM_ID) {
          this.resolvedCompanyType.set("system");
        } else {
          this.resolvedCompanyType.set(void 0);
          firstValueFrom(this.accountsService.getCompany(ownerId)).then((response) => {
            if (response.type) {
              this.resolvedCompanyType.set(response.type);
              this.updateFormFields();
            } else {
              console.warn("Company response or type is undefined for owner ID:", ownerId);
              this.resolvedCompanyType.set(void 0);
            }
          }).catch((error) => {
            console.error("Failed to fetch company type for owner ID:", ownerId, error);
            this.resolvedCompanyType.set(void 0);
          });
        }
      } else {
        this.resolvedCompanyType.set(void 0);
      }
    });
  }
  updateFormFields() {
    const userRole = this.entity()?.legacyRights;
    const companyType = this.resolvedCompanyType();
    if (!isDefined(companyType)) {
      this.formFields = [];
      return;
    }
    const listBoxOptions = companyType ? LEGACY_RIGHTS[companyType] : [];
    this.formFields = listBoxOptions.map((right) => {
      const selectedRights = userRole?.[right.name] ?? [];
      return createListboxField(right.name, right.title, selectedRights, right.rights.map((r) => ({
        label: r.title,
        value: r.name
      })), {
        name: right.name,
        props: {
          checkmark: true,
          multiple: true
        }
      });
    });
  }
  submitChanges(formData) {
    const userRole = this.entity();
    if (isNullOrUndefined(userRole))
      return;
    this.accountsService.updateUserRole(userRole.id, {
      legacyRights: formData
    }).pipe(takeUntilDestroyed(this.destroyRef)).subscribe({
      next: (response) => {
        this.isFormEditable.set(false);
        this.broadcastService.broadcast("entity-updated", {
          entityType: "user-role",
          operation: "update",
          entityId: userRole.id,
          data: response
        });
      },
      error: () => {
        this.isFormEditable.set(true);
      }
    });
  }
  static \u0275fac = function UserRoleRightsSectionComponent_Factory(__ngFactoryType__) {
    return new (__ngFactoryType__ || _UserRoleRightsSectionComponent)();
  };
  static \u0275cmp = /* @__PURE__ */ \u0275\u0275defineComponent({ type: _UserRoleRightsSectionComponent, selectors: [["app-user-role-rights-section"]], inputs: { ownerId: [1, "ownerId"] }, features: [\u0275\u0275InheritDefinitionFeature], decls: 12, vars: 7, consts: [[1, "card", "pt-2"], [1, "mb-4", "p-2", "flex", "justify-start", "items-center"], [1, "!text-[2.5rem]", 3, "icon", "ngClass"], [1, "pl-6", "flex-1"], [1, "flex", "justify-between", "items-center"], [1, "text-xl", "font-semibold", "m-0"], [1, "icon-light"], [3, "fields", "actions", "hideActions"], ["tableStyleClass", "info-display !w-auto", 3, "data", "columns", "showGridLines", "hideHeader"], [1, "pi", "pi-pen-to-square", "action", "hover", "!text-2xl", 3, "click", "keydown.enter"], [3, "formSubmit", "formValidityChange", "formValueChange", "fields", "actions", "hideActions"]], template: function UserRoleRightsSectionComponent_Template(rf, ctx) {
    if (rf & 1) {
      \u0275\u0275elementStart(0, "div", 0)(1, "div", 1);
      \u0275\u0275element(2, "fa-icon", 2);
      \u0275\u0275elementStart(3, "div", 3)(4, "div", 4)(5, "h2", 5);
      \u0275\u0275text(6, "Access Rights");
      \u0275\u0275elementEnd();
      \u0275\u0275conditionalCreate(7, UserRoleRightsSectionComponent_Conditional_7_Template, 2, 1, "div", 6);
      \u0275\u0275elementEnd();
      \u0275\u0275elementStart(8, "span");
      \u0275\u0275text(9, "Select from the following access rights.");
      \u0275\u0275elementEnd()()();
      \u0275\u0275conditionalCreate(10, UserRoleRightsSectionComponent_Conditional_10_Template, 1, 3, "app-dynamic-form", 7);
      \u0275\u0275conditionalCreate(11, UserRoleRightsSectionComponent_Conditional_11_Template, 1, 4, "app-grid", 8);
      \u0275\u0275elementEnd();
    }
    if (rf & 2) {
      \u0275\u0275advance(2);
      \u0275\u0275property("icon", ctx.faKey)("ngClass", \u0275\u0275pureFunction1(5, _c037, ctx.isFormEditable()));
      \u0275\u0275advance(5);
      \u0275\u0275conditional(!ctx.isFormEditable() && !ctx.createMode() ? 7 : -1);
      \u0275\u0275advance(3);
      \u0275\u0275conditional(ctx.isFormEditable() || ctx.createMode() && ctx.formFields.length ? 10 : -1);
      \u0275\u0275advance();
      \u0275\u0275conditional(!ctx.isFormEditable() && !ctx.createMode() ? 11 : -1);
    }
  }, dependencies: [
    CommonModule,
    NgClass,
    ButtonModule,
    GridComponent,
    DynamicFormComponent,
    MessageModule,
    FontAwesomeModule,
    FaIconComponent
  ], encapsulation: 2 });
};
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(UserRoleRightsSectionComponent, [{
    type: Component,
    args: [{ selector: "app-user-role-rights-section", imports: [
      CommonModule,
      ButtonModule,
      GridComponent,
      DynamicFormComponent,
      MessageModule,
      FontAwesomeModule
    ], template: `<div class="card pt-2">
  <div class="mb-4 p-2 flex justify-start items-center">
    <fa-icon
      [icon]="faKey"
      class="!text-[2.5rem]"
      [ngClass]="{ 'icon-primary': isFormEditable() }"
    ></fa-icon>

    <div class="pl-6 flex-1">
      <div class="flex justify-between items-center">
        <h2 class="text-xl font-semibold m-0">Access Rights</h2>
        @if (!isFormEditable() && !createMode()) {
          <div class="icon-light">
            <span
              class="pi pi-pen-to-square action hover !text-2xl"
              [attr.aria-label]="'Edit access rights details'"
              (click)="onEdit()"
              (keydown.enter)="onEdit()"
            ></span>
          </div>
        }
      </div>
      <span>Select from the following access rights.</span>
    </div>
  </div>

  @if (isFormEditable() || (createMode() && formFields.length)) {
    <app-dynamic-form
      [fields]="formFields"
      [actions]="actions"
      [hideActions]="createMode()"
      (formSubmit)="onSubmit($event)"
      (formValidityChange)="onFormValidityChange($event)"
      (formValueChange)="onFormValueChange($event)"
    >
    </app-dynamic-form>
  }

  @if (!isFormEditable() && !createMode()) {
    <app-grid
      [data]="userRoleDetails()"
      [columns]="columns"
      [showGridLines]="false"
      [hideHeader]="true"
      tableStyleClass="info-display !w-auto"
    ></app-grid>
  }
</div>
` }]
  }], () => [], { ownerId: [{ type: Input, args: [{ isSignal: true, alias: "ownerId", required: false }] }] });
})();
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && \u0275setClassDebugInfo(UserRoleRightsSectionComponent, { className: "UserRoleRightsSectionComponent", filePath: "src/app/features/administration/components/user-roles/user-role-rights-section/user-role-rights-section.component.ts", lineNumber: 43 });
})();

// src/app/features/administration/components/user-roles/user-role-inline-policies-section/user-role-inline-policies-section.component.ts
var _c038 = (a0) => ({ "icon-primary": a0 });
function UserRoleInlinePoliciesSectionComponent_Conditional_7_Template(rf, ctx) {
  if (rf & 1) {
    const _r1 = \u0275\u0275getCurrentView();
    \u0275\u0275elementStart(0, "div", 6)(1, "span", 9);
    \u0275\u0275listener("click", function UserRoleInlinePoliciesSectionComponent_Conditional_7_Template_span_click_1_listener() {
      \u0275\u0275restoreView(_r1);
      const ctx_r1 = \u0275\u0275nextContext();
      return \u0275\u0275resetView(ctx_r1.onEdit());
    })("keydown.enter", function UserRoleInlinePoliciesSectionComponent_Conditional_7_Template_span_keydown_enter_1_listener() {
      \u0275\u0275restoreView(_r1);
      const ctx_r1 = \u0275\u0275nextContext();
      return \u0275\u0275resetView(ctx_r1.onEdit());
    });
    \u0275\u0275elementEnd()();
  }
  if (rf & 2) {
    \u0275\u0275advance();
    \u0275\u0275attribute("aria-label", "Edit user role details");
  }
}
function UserRoleInlinePoliciesSectionComponent_Conditional_10_Template(rf, ctx) {
  if (rf & 1) {
    const _r3 = \u0275\u0275getCurrentView();
    \u0275\u0275elementStart(0, "app-dynamic-form", 10);
    \u0275\u0275listener("formSubmit", function UserRoleInlinePoliciesSectionComponent_Conditional_10_Template_app_dynamic_form_formSubmit_0_listener($event) {
      \u0275\u0275restoreView(_r3);
      const ctx_r1 = \u0275\u0275nextContext();
      return \u0275\u0275resetView(ctx_r1.onSubmit($event));
    })("formValidityChange", function UserRoleInlinePoliciesSectionComponent_Conditional_10_Template_app_dynamic_form_formValidityChange_0_listener($event) {
      \u0275\u0275restoreView(_r3);
      const ctx_r1 = \u0275\u0275nextContext();
      return \u0275\u0275resetView(ctx_r1.onFormValidityChange($event));
    })("formValueChange", function UserRoleInlinePoliciesSectionComponent_Conditional_10_Template_app_dynamic_form_formValueChange_0_listener($event) {
      \u0275\u0275restoreView(_r3);
      const ctx_r1 = \u0275\u0275nextContext();
      return \u0275\u0275resetView(ctx_r1.onFormValueChange($event));
    });
    \u0275\u0275elementEnd();
  }
  if (rf & 2) {
    const ctx_r1 = \u0275\u0275nextContext();
    \u0275\u0275property("fields", ctx_r1.formFields)("actions", ctx_r1.actions)("hideActions", ctx_r1.createMode());
  }
}
function UserRoleInlinePoliciesSectionComponent_Conditional_11_Template(rf, ctx) {
  if (rf & 1) {
    \u0275\u0275element(0, "app-grid", 8);
  }
  if (rf & 2) {
    const ctx_r1 = \u0275\u0275nextContext();
    \u0275\u0275property("data", ctx_r1.userRoleDetails())("columns", ctx_r1.columns)("showGridLines", false)("hideHeader", true);
  }
}
var UserRoleInlinePoliciesSectionComponent = class _UserRoleInlinePoliciesSectionComponent extends EntitySectionBaseComponent {
  ownerId = input(null, ...ngDevMode ? [{ debugName: "ownerId" }] : []);
  accountsService = inject(AccountsService);
  faPassport = faPassport;
  userRoleDetails = computed(() => {
    const userRoleDetails = this.entity()?.inlinePolicies;
    if (!isDefined(userRoleDetails))
      return [];
    return [
      {
        key: "Policies",
        value: userRoleDetails.map((item) => item.name).join(", ") ?? "None"
      }
    ];
  }, ...ngDevMode ? [{ debugName: "userRoleDetails" }] : []);
  userRolesModalConfig;
  constructor() {
    super();
    this.columns = [
      { field: "key", header: "", transform: "uppercase" },
      { field: "value", header: "" }
    ];
  }
  updateFormFields() {
    const userRole = this.entity();
    this.userRolesModalConfig = {
      modalComponent: ModalListFormComponent,
      modalTitle: "Inline Policy",
      defaultItemProvider: () => {
        const defaultItem = {
          id: v4_default(),
          name: "New Policy",
          // Add a default name
          statements: JSON.stringify([
            {
              id: "statement1",
              effect: "allow",
              actions: ["entities:SomeMethod"],
              resources: ["*"]
            }
          ], null, 2)
        };
        return defaultItem;
      },
      listItemFormatter: (item) => {
        return {
          id: item.id || "",
          title: item.name || "Unnamed Policy",
          display: Array.isArray(item.statements) ? `${item.statements.length} statement(s)` : "No statements"
        };
      },
      modalFields: (_item) => {
        let statementsJson = "[]";
        try {
          if (_item?.statements) {
            statementsJson = JSON.stringify(_item.statements);
          }
        } catch (e) {
          console.error("Error handling statements:", e);
        }
        return [
          createTextField("id", "ID", _item?.id, {
            name: "id",
            hidden: true
          }),
          createTextField("name", "Name", _item?.name, {
            name: "name",
            validations: [
              {
                name: "required",
                validator: Validators.required,
                message: "Name is required"
              }
            ]
          }),
          createTextAreaField("statements", "Statements", statementsJson, {
            name: "statements",
            validations: [
              {
                name: "required",
                validator: Validators.required,
                message: "Statements are required"
              },
              {
                name: "json",
                validator: (control) => {
                  try {
                    if (isNullOrUndefined(control.value))
                      return null;
                    JSON.parse(control.value);
                    return null;
                  } catch (e) {
                    console.error("Invalid JSON format:", e);
                    return { json: true };
                  }
                },
                message: "Invalid JSON format"
              }
            ]
          })
        ];
      },
      subHeader: ""
    };
    this.formFields = [
      createModalListField("inlinePolicies", "Policies", userRole?.inlinePolicies ?? [], {
        layout: "horizontal",
        labelWidth: "1/3",
        name: "inlinePolicies",
        props: {
          modalConfig: this.userRolesModalConfig
        }
      })
    ];
  }
  submitChanges(formData) {
    const userRole = this.entity();
    if (isNullOrUndefined(userRole))
      return;
    const transformedData = this.transformFormData ? this.transformFormData(formData) : formData;
    this.accountsService.updateUserRole(userRole.id, transformedData).pipe(takeUntilDestroyed(this.destroyRef)).subscribe({
      next: (response) => {
        this.isFormEditable.set(false);
        this.broadcastService.broadcast("entity-updated", {
          entityType: "user-role",
          operation: "update",
          entityId: userRole.id,
          data: response
        });
      },
      error: () => {
        this.isFormEditable.set(true);
      }
    });
  }
  transformFormData(formData) {
    const data = formData;
    if (isDefined(data["inlinePolicies"])) {
      data["inlinePolicies"] = data["inlinePolicies"].map((policy) => {
        const transformedPolicy = {
          id: policy["id"],
          name: policy["name"],
          statements: isString(policy["statements"]) ? JSON.parse(policy["statements"]) : policy["statements"]
        };
        return transformedPolicy;
      });
    }
    return data;
  }
  static \u0275fac = function UserRoleInlinePoliciesSectionComponent_Factory(__ngFactoryType__) {
    return new (__ngFactoryType__ || _UserRoleInlinePoliciesSectionComponent)();
  };
  static \u0275cmp = /* @__PURE__ */ \u0275\u0275defineComponent({ type: _UserRoleInlinePoliciesSectionComponent, selectors: [["app-user-role-inline-policies-section"]], inputs: { ownerId: [1, "ownerId"] }, features: [\u0275\u0275InheritDefinitionFeature], decls: 12, vars: 7, consts: [[1, "card", "pt-2"], [1, "mb-4", "p-2", "flex", "justify-start", "items-center"], [1, "!text-[2.5rem]", 3, "icon", "ngClass"], [1, "pl-6", "flex-1"], [1, "flex", "justify-between", "items-center"], [1, "text-xl", "font-semibold", "m-0"], [1, "icon-light"], [3, "fields", "actions", "hideActions"], ["tableStyleClass", "info-display !w-auto", 3, "data", "columns", "showGridLines", "hideHeader"], [1, "pi", "pi-pen-to-square", "action", "hover", "!text-2xl", 3, "click", "keydown.enter"], [3, "formSubmit", "formValidityChange", "formValueChange", "fields", "actions", "hideActions"]], template: function UserRoleInlinePoliciesSectionComponent_Template(rf, ctx) {
    if (rf & 1) {
      \u0275\u0275elementStart(0, "div", 0)(1, "div", 1);
      \u0275\u0275element(2, "fa-icon", 2);
      \u0275\u0275elementStart(3, "div", 3)(4, "div", 4)(5, "h2", 5);
      \u0275\u0275text(6, "User Role Details");
      \u0275\u0275elementEnd();
      \u0275\u0275conditionalCreate(7, UserRoleInlinePoliciesSectionComponent_Conditional_7_Template, 2, 1, "div", 6);
      \u0275\u0275elementEnd();
      \u0275\u0275elementStart(8, "span");
      \u0275\u0275text(9, "Describe this user role.");
      \u0275\u0275elementEnd()()();
      \u0275\u0275conditionalCreate(10, UserRoleInlinePoliciesSectionComponent_Conditional_10_Template, 1, 3, "app-dynamic-form", 7);
      \u0275\u0275conditionalCreate(11, UserRoleInlinePoliciesSectionComponent_Conditional_11_Template, 1, 4, "app-grid", 8);
      \u0275\u0275elementEnd();
    }
    if (rf & 2) {
      \u0275\u0275advance(2);
      \u0275\u0275property("icon", ctx.faPassport)("ngClass", \u0275\u0275pureFunction1(5, _c038, ctx.isFormEditable()));
      \u0275\u0275advance(5);
      \u0275\u0275conditional(!ctx.isFormEditable() && !ctx.createMode() ? 7 : -1);
      \u0275\u0275advance(3);
      \u0275\u0275conditional(ctx.isFormEditable() || ctx.createMode() && ctx.formFields.length ? 10 : -1);
      \u0275\u0275advance();
      \u0275\u0275conditional(!ctx.isFormEditable() && !ctx.createMode() ? 11 : -1);
    }
  }, dependencies: [
    CommonModule,
    NgClass,
    ButtonModule,
    GridComponent,
    DynamicFormComponent,
    MessageModule,
    FontAwesomeModule,
    FaIconComponent
  ], encapsulation: 2 });
};
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(UserRoleInlinePoliciesSectionComponent, [{
    type: Component,
    args: [{ selector: "app-user-role-inline-policies-section", imports: [
      CommonModule,
      ButtonModule,
      GridComponent,
      DynamicFormComponent,
      MessageModule,
      FontAwesomeModule
    ], template: `<div class="card pt-2">
  <div class="mb-4 p-2 flex justify-start items-center">
    <fa-icon
      [icon]="faPassport"
      class="!text-[2.5rem]"
      [ngClass]="{ 'icon-primary': isFormEditable() }"
    ></fa-icon>

    <div class="pl-6 flex-1">
      <div class="flex justify-between items-center">
        <h2 class="text-xl font-semibold m-0">User Role Details</h2>
        @if (!isFormEditable() && !createMode()) {
          <div class="icon-light">
            <span
              class="pi pi-pen-to-square action hover !text-2xl"
              [attr.aria-label]="'Edit user role details'"
              (click)="onEdit()"
              (keydown.enter)="onEdit()"
            ></span>
          </div>
        }
      </div>
      <span>Describe this user role.</span>
    </div>
  </div>

  @if (isFormEditable() || (createMode() && formFields.length)) {
    <app-dynamic-form
      [fields]="formFields"
      [actions]="actions"
      [hideActions]="createMode()"
      (formSubmit)="onSubmit($event)"
      (formValidityChange)="onFormValidityChange($event)"
      (formValueChange)="onFormValueChange($event)"
    >
    </app-dynamic-form>
  }

  @if (!isFormEditable() && !createMode()) {
    <app-grid
      [data]="userRoleDetails()"
      [columns]="columns"
      [showGridLines]="false"
      [hideHeader]="true"
      tableStyleClass="info-display !w-auto"
    ></app-grid>
  }
</div>
` }]
  }], () => [], { ownerId: [{ type: Input, args: [{ isSignal: true, alias: "ownerId", required: false }] }] });
})();
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && \u0275setClassDebugInfo(UserRoleInlinePoliciesSectionComponent, { className: "UserRoleInlinePoliciesSectionComponent", filePath: "src/app/features/administration/components/user-roles/user-role-inline-policies-section/user-role-inline-policies-section.component.ts", lineNumber: 47 });
})();

// src/app/features/administration/factories/user-role-section-config.factory.ts
var UserRoleSectionConfigFactory = class _UserRoleSectionConfigFactory {
  /**
   * Create sections for userRole information
   * @param userRole The userRole object to display in the section
   * @returns An array of AdminDetailSection objects representing the userRole information sections
   */
  createUserRoleInformationSections(userRole) {
    return [
      {
        id: "user-role-details",
        title: "User Role Details",
        component: UserRoleDetailsSectionComponent,
        componentInputs: { entity: userRole },
        category: "information",
        order: 10
      },
      {
        id: "user-role-rights",
        title: "User Role Rights",
        component: UserRoleRightsSectionComponent,
        componentInputs: { entity: userRole },
        category: "information",
        order: 20
      },
      {
        id: "user-role-inline-policies",
        title: "User Role Inline Policies",
        component: UserRoleInlinePoliciesSectionComponent,
        componentInputs: { entity: userRole },
        category: "information",
        order: 30
      }
    ];
  }
  /**
   * Create sections for userRole changes
   * @param userRole The userRole object to display in the section
   * @returns An array of AdminDetailSection objects representing the userRole changes sections
   */
  createChangesSection(userRole) {
    return [
      {
        id: "user-role-changes",
        title: "Changes",
        component: FeedSectionComponent,
        componentInputs: {
          entity: userRole
        },
        category: "feed",
        order: 10
      }
    ];
  }
  /**
   * Create all userRole sections in one call
   * @param userRole The userRole object to display in the sections
   * @returns An array of AdminDetailSection objects representing all userRole sections
   */
  createAllUserRoleSections(userRole) {
    return [
      ...this.createUserRoleInformationSections(userRole),
      ...this.createChangesSection(userRole)
    ];
  }
  static \u0275fac = function UserRoleSectionConfigFactory_Factory(__ngFactoryType__) {
    return new (__ngFactoryType__ || _UserRoleSectionConfigFactory)();
  };
  static \u0275prov = /* @__PURE__ */ \u0275\u0275defineInjectable({ token: _UserRoleSectionConfigFactory, factory: _UserRoleSectionConfigFactory.\u0275fac, providedIn: "root" });
};
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(UserRoleSectionConfigFactory, [{
    type: Injectable,
    args: [{ providedIn: "root" }]
  }], null, null);
})();

// src/app/features/administration/components/users/user-details-section/services/user-form.service.ts
var UserFormService = class _UserFormService {
  /**
   * Creates form fields for user details based on current state
   */
  createUserFormFields(config) {
    const { user, company, createMode, costCenters, timezones, clientsSearchResults, searchClient, isLoadingClients } = config;
    if (!isDefined(user))
      return [];
    const fields = [];
    fields.push(this.createNameField(user), this.createEmailField(user), this.createMobileField(user));
    if (!createMode) {
      fields.push(this.createPasswordField());
    }
    if (isDefined(company) && company.type === "client") {
      fields.push(this.createCostCentreField(user, costCenters));
    }
    fields.push(this.createTimezoneField(user, timezones));
    if (isDefined(company) && company.type !== "client") {
      fields.push(this.createDefaultClientField(user, clientsSearchResults, searchClient, isLoadingClients));
    }
    if (createMode) {
      fields.push(this.createInviteField());
    }
    return fields;
  }
  createNameField(user) {
    return createTextField("name", "Name", user?.name, {
      name: "name",
      validations: [
        {
          name: "required",
          validator: Validators.required,
          message: "Name is required"
        }
      ]
    });
  }
  createEmailField(user) {
    return createTextField("emailAddress", "Email Address", user?.emailAddress, {
      name: "emailAddress",
      validations: [
        {
          name: "required",
          validator: Validators.required,
          message: "Email Address is required"
        },
        {
          name: "email",
          validator: Validators.email,
          message: "Email Address is invalid"
        }
      ]
    });
  }
  createMobileField(user) {
    return createTextField("mobile", "Mobile Number", user?.mobile, {
      name: "mobile"
    });
  }
  createPasswordField() {
    return createPasswordField("password", "Password", {
      name: "password"
    });
  }
  createCostCentreField(user, costCenters) {
    return createTreeSelectField("costCentre", "Cost Centre", user?.costCentre ? {
      id: user.costCentre.id,
      label: user.costCentre.name,
      data: user.costCentre
    } : null, costCenters, {
      name: "costCentre",
      validations: [
        {
          name: "required",
          validator: Validators.required,
          message: "Cost Centre is required"
        }
      ],
      props: {
        appendTo: "body",
        placeholder: "Select Cost Centre",
        multiple: false,
        showClear: true,
        selectionMode: "single",
        filter: true
      }
    });
  }
  createTimezoneField(user, timezones) {
    return createDropdownField("timeZoneId", "Time Zone", timezones, user?.timeZoneId, {
      layout: "horizontal",
      labelWidth: "1/3",
      placeholder: "Select timezone",
      name: "timeZoneId",
      props: {
        appendTo: "body"
      }
    });
  }
  createDefaultClientField(user, clientsSearchResults, searchClient, isLoadingClients) {
    return createAutocompleteField("defaultClient", "Default Client", user?.defaultClient, clientsSearchResults, searchClient, {
      layout: "horizontal",
      labelWidth: "1/3",
      name: "defaultClient",
      autocompleteLoading: isLoadingClients,
      validations: [
        {
          name: "required",
          validator: Validators.required,
          message: "Default Client is required"
        }
      ],
      placeholder: "Enter client name...",
      props: {
        appendTo: "body",
        showClear: true,
        multiple: false,
        field: "name",
        completeOnFocus: false,
        typeahead: true,
        showEmptyMessage: true,
        emptyMessage: "No clients found"
      }
    });
  }
  createInviteField() {
    return createToggleSwitchField("invite", "Send Invite", true, {
      name: "invite",
      hint: "If enabled, the user will receive an email inviting them to activate their account.",
      props: {
        layout: "horizontal",
        labelWidth: "1/3"
      }
    });
  }
  static \u0275fac = function UserFormService_Factory(__ngFactoryType__) {
    return new (__ngFactoryType__ || _UserFormService)();
  };
  static \u0275prov = /* @__PURE__ */ \u0275\u0275defineInjectable({ token: _UserFormService, factory: _UserFormService.\u0275fac, providedIn: "root" });
};
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(UserFormService, [{
    type: Injectable,
    args: [{
      providedIn: "root"
    }]
  }], null, null);
})();

// src/app/features/administration/components/users/user-details-section/services/client-search.service.ts
var ClientSearchService = class _ClientSearchService {
  accountsService = inject(AccountsService);
  utilityService = inject(UtilityService);
  destroyRef = inject(DestroyRef);
  searchSubject = new Subject();
  clientsSearchResults = signal(void 0, ...ngDevMode ? [{ debugName: "clientsSearchResults" }] : []);
  isLoading = signal(false, ...ngDevMode ? [{ debugName: "isLoading" }] : []);
  ownerId = null;
  // Getter for readonly access to results
  get searchResults() {
    return this.clientsSearchResults.asReadonly();
  }
  // Getter for readonly access to loading state
  get isSearchLoading() {
    return this.isLoading.asReadonly();
  }
  /**
   * Initialize the search service with an owner ID and set up the search stream
   */
  initialize(ownerId) {
    this.ownerId = ownerId;
    this.setupSearchStream();
  }
  /**
   * Trigger a client search
   */
  search(searchTerm) {
    if (!searchTerm || searchTerm.trim() === "" || searchTerm.length < 3) {
      this.clientsSearchResults.set([]);
      this.isLoading.set(false);
      return;
    }
    this.clientsSearchResults.set(void 0);
    this.isLoading.set(true);
    this.searchSubject.next(searchTerm);
  }
  /**
   * Clear search results
   */
  clearResults() {
    this.clientsSearchResults.set(void 0);
  }
  /**
   * Set up the reactive search stream
   */
  setupSearchStream() {
    this.searchSubject.pipe(debounceTime(SEARCH_DEBOUNCE_TIME), distinctUntilChanged(), takeUntilDestroyed(this.destroyRef), switchMap((searchTerm) => this.performSearch(searchTerm))).subscribe({
      next: (data) => this.handleSearchResults(data),
      error: () => this.handleSearchError()
    });
  }
  /**
   * Perform the actual search API call
   */
  performSearch(searchTerm) {
    if (this.ownerId === null || this.ownerId === void 0) {
      return of({ items: [] });
    }
    const filters = {
      state: { value: "active", operator: "=" },
      name: { value: `*${searchTerm}*`, operator: "=" }
    };
    const rqlFilter = this.utilityService.constructRqlFilter(filters);
    return this.accountsService.listClients(this.ownerId, 0, 10, "name", rqlFilter).pipe(catchError(() => of({ items: [] })));
  }
  /**
   * Handle successful search results
   */
  handleSearchResults(data) {
    this.isLoading.set(false);
    if (isDefined(data) && hasProperty(data, "items")) {
      const results = isNullOrUndefined(data.items) ? [] : data.items;
      this.clientsSearchResults.set(results);
    }
  }
  /**
   * Handle search errors
   */
  handleSearchError() {
    this.isLoading.set(false);
    this.clientsSearchResults.set([]);
  }
  /**
   * Clean up the service
   */
  destroy() {
    this.clientsSearchResults.set(void 0);
    this.ownerId = null;
  }
  static \u0275fac = function ClientSearchService_Factory(__ngFactoryType__) {
    return new (__ngFactoryType__ || _ClientSearchService)();
  };
  static \u0275prov = /* @__PURE__ */ \u0275\u0275defineInjectable({ token: _ClientSearchService, factory: _ClientSearchService.\u0275fac, providedIn: "root" });
};
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(ClientSearchService, [{
    type: Injectable,
    args: [{
      providedIn: "root"
    }]
  }], null, null);
})();

// src/app/features/administration/components/users/user-details-section/services/user-data-loading.service.ts
var UserDataLoadingService = class _UserDataLoadingService {
  accountsService = inject(AccountsService);
  assetGroupService = inject(AssetGroupingService);
  http = inject(HttpClient);
  cacheService = inject(RequestCacheService);
  // Loading state signals
  timezonesLoaded = signal(false, ...ngDevMode ? [{ debugName: "timezonesLoaded" }] : []);
  costCentersLoaded = signal(false, ...ngDevMode ? [{ debugName: "costCentersLoaded" }] : []);
  companyDataLoaded = signal(false, ...ngDevMode ? [{ debugName: "companyDataLoaded" }] : []);
  // Data signals
  companyData = signal(null, ...ngDevMode ? [{ debugName: "companyData" }] : []);
  timezones = signal([], ...ngDevMode ? [{ debugName: "timezones" }] : []);
  costCenters = signal([], ...ngDevMode ? [{ debugName: "costCenters" }] : []);
  // Getters for readonly access
  get isDataLoaded() {
    return this.timezonesLoaded() && this.costCentersLoaded() && this.companyDataLoaded();
  }
  get timezonesData() {
    return this.timezones.asReadonly();
  }
  get costCentersData() {
    return this.costCenters.asReadonly();
  }
  get companyInfo() {
    return this.companyData.asReadonly();
  }
  get loadingStates() {
    return {
      timezones: this.timezonesLoaded.asReadonly(),
      costCenters: this.costCentersLoaded.asReadonly(),
      company: this.companyDataLoaded.asReadonly()
    };
  }
  /**
   * Load all required data for the user form
   */
  async loadUserFormData(ownerId) {
    const timezonePromise = this.loadTimezones();
    let companyPromise = Promise.resolve();
    if (isDefined(ownerId)) {
      companyPromise = this.loadCompanyData(ownerId);
    } else {
      this.companyData.set(null);
      this.companyDataLoaded.set(true);
    }
    await companyPromise;
    const company = this.companyData();
    let costCenterPromise = Promise.resolve();
    if (isDefined(ownerId) && isDefined(company) && company.type === "client") {
      costCenterPromise = this.loadCostCentres(ownerId);
    } else {
      this.costCenters.set([]);
      this.costCentersLoaded.set(true);
    }
    await Promise.all([timezonePromise, costCenterPromise]);
  }
  /**
   * Load timezone data
   */
  async loadTimezones() {
    try {
      this.timezonesLoaded.set(false);
      const data = await firstValueFrom(this.http.get("/assets/docs/timezones.json"));
      const timezones = data.map((tz) => ({ label: tz.id, value: tz.id })).sort((a, b) => a.label.localeCompare(b.label));
      this.timezones.set(timezones);
      this.timezonesLoaded.set(true);
    } catch (error) {
      console.error("Failed to load timezones:", error);
      this.timezones.set([]);
      this.timezonesLoaded.set(true);
      throw error;
    }
  }
  /**
   * Load company data with caching
   */
  async loadCompanyData(ownerId) {
    try {
      this.companyDataLoaded.set(false);
      this.companyData.set(null);
      const company = await this.cacheService.getOrFetchAsync(`company-${ownerId}`, () => firstValueFrom(this.accountsService.getCompany(ownerId)), 3e5);
      this.companyData.set(company);
      this.companyDataLoaded.set(true);
    } catch (error) {
      console.error("Failed to load company data:", error);
      this.companyData.set(null);
      this.companyDataLoaded.set(true);
      throw error;
    }
  }
  /**
   * Load cost centres data
   */
  async loadCostCentres(ownerId) {
    try {
      this.costCentersLoaded.set(false);
      const [costCentres, costCentreTree] = await Promise.all([
        this.assetGroupService.getCostCentres(ownerId),
        this.assetGroupService.getCostCentresAsTree(ownerId)
      ]);
      const userCostCentre = costCentres.find((centre) => centre.parent === DEFAULT_SYSTEM_ID);
      const costCenters = this.assetGroupService.findCCInCCTree(costCentreTree, userCostCentre);
      this.costCenters.set(costCenters);
      this.costCentersLoaded.set(true);
    } catch (error) {
      console.error("Failed to load cost centres:", error);
      this.costCenters.set([]);
      this.costCentersLoaded.set(true);
      throw error;
    }
  }
  /**
   * Reset all loading states and data
   */
  reset() {
    this.timezonesLoaded.set(false);
    this.costCentersLoaded.set(false);
    this.companyDataLoaded.set(false);
    this.companyData.set(null);
    this.timezones.set([]);
    this.costCenters.set([]);
  }
  static \u0275fac = function UserDataLoadingService_Factory(__ngFactoryType__) {
    return new (__ngFactoryType__ || _UserDataLoadingService)();
  };
  static \u0275prov = /* @__PURE__ */ \u0275\u0275defineInjectable({ token: _UserDataLoadingService, factory: _UserDataLoadingService.\u0275fac, providedIn: "root" });
};
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(UserDataLoadingService, [{
    type: Injectable,
    args: [{
      providedIn: "root"
    }]
  }], null, null);
})();

// src/app/features/administration/components/users/user-details-section/user-details-section.component.ts
var _c039 = (a0) => ({ "icon-primary": a0 });
function UserDetailsSectionComponent_Conditional_7_Template(rf, ctx) {
  if (rf & 1) {
    const _r1 = \u0275\u0275getCurrentView();
    \u0275\u0275elementStart(0, "div", 6)(1, "span", 9);
    \u0275\u0275listener("click", function UserDetailsSectionComponent_Conditional_7_Template_span_click_1_listener() {
      \u0275\u0275restoreView(_r1);
      const ctx_r1 = \u0275\u0275nextContext();
      return \u0275\u0275resetView(ctx_r1.onEdit());
    })("keydown.enter", function UserDetailsSectionComponent_Conditional_7_Template_span_keydown_enter_1_listener() {
      \u0275\u0275restoreView(_r1);
      const ctx_r1 = \u0275\u0275nextContext();
      return \u0275\u0275resetView(ctx_r1.onEdit());
    });
    \u0275\u0275elementEnd()();
  }
  if (rf & 2) {
    \u0275\u0275advance();
    \u0275\u0275attribute("aria-label", "Edit user details");
  }
}
function UserDetailsSectionComponent_Conditional_10_Template(rf, ctx) {
  if (rf & 1) {
    const _r3 = \u0275\u0275getCurrentView();
    \u0275\u0275elementStart(0, "app-dynamic-form", 10);
    \u0275\u0275listener("formSubmit", function UserDetailsSectionComponent_Conditional_10_Template_app_dynamic_form_formSubmit_0_listener($event) {
      \u0275\u0275restoreView(_r3);
      const ctx_r1 = \u0275\u0275nextContext();
      return \u0275\u0275resetView(ctx_r1.onSubmit($event));
    })("formValidityChange", function UserDetailsSectionComponent_Conditional_10_Template_app_dynamic_form_formValidityChange_0_listener($event) {
      \u0275\u0275restoreView(_r3);
      const ctx_r1 = \u0275\u0275nextContext();
      return \u0275\u0275resetView(ctx_r1.onFormValidityChange($event));
    })("formValueChange", function UserDetailsSectionComponent_Conditional_10_Template_app_dynamic_form_formValueChange_0_listener($event) {
      \u0275\u0275restoreView(_r3);
      const ctx_r1 = \u0275\u0275nextContext();
      return \u0275\u0275resetView(ctx_r1.onFormValueChange($event));
    });
    \u0275\u0275elementEnd();
  }
  if (rf & 2) {
    const ctx_r1 = \u0275\u0275nextContext();
    \u0275\u0275property("fields", ctx_r1.formFields)("actions", ctx_r1.actions)("hideActions", ctx_r1.createMode());
  }
}
function UserDetailsSectionComponent_Conditional_11_Template(rf, ctx) {
  if (rf & 1) {
    \u0275\u0275element(0, "app-grid", 8);
  }
  if (rf & 2) {
    const ctx_r1 = \u0275\u0275nextContext();
    \u0275\u0275property("data", ctx_r1.userDetails())("columns", ctx_r1.columns)("showGridLines", false)("hideHeader", true);
  }
}
var UserDetailsSectionComponent = class _UserDetailsSectionComponent extends EntitySectionBaseComponent {
  ownerId = input(null, ...ngDevMode ? [{ debugName: "ownerId" }] : []);
  // Injected services
  accountsService = inject(AccountsService);
  utilsService = inject(UtilsService);
  cdr = inject(ChangeDetectorRef);
  // Service dependencies
  userFormService = inject(UserFormService);
  dataLoadingService = inject(UserDataLoadingService);
  clientSearchService = inject(ClientSearchService);
  // Computed properties
  faUser = faUser;
  userDetails = computed(() => {
    const userDetails = this.entity();
    const company = this.dataLoadingService.companyInfo();
    if (!isDefined(userDetails))
      return [];
    const details = [
      { key: "Name", value: userDetails.name },
      { key: "Email Address", value: userDetails.emailAddress },
      { key: "Mobile Number", value: userDetails.mobile },
      { key: "Password", value: "*********" }
    ];
    if (company?.type === "client") {
      details.push({
        key: "Cost Center",
        value: userDetails.costCentre?.name ?? "None"
      });
    }
    details.push({ key: "Time Zone", value: userDetails.timeZoneId ?? "None" });
    return details;
  }, ...ngDevMode ? [{ debugName: "userDetails" }] : []);
  constructor() {
    super();
    this.columns = [
      { field: "key", header: "", transform: "uppercase" },
      { field: "value", header: "" }
    ];
    effect(() => {
      if (this.dataLoadingService.isDataLoaded) {
        untracked(() => {
          this.updateFormFields();
        });
      }
    });
    effect(() => {
      const searchResults = this.clientSearchService.searchResults();
      const clientField = this.formFields.find((field) => field.key === "defaultClient");
      if (clientField?.props) {
        clientField.props.suggestions = searchResults;
        this.cdr.detectChanges();
      }
    });
  }
  ngOnInit() {
    const effectiveOwnerId = this.ownerId() ?? this.entity()?.ownerId;
    this.clientSearchService.initialize(effectiveOwnerId);
    this.dataLoadingService.loadUserFormData(effectiveOwnerId).catch((error) => {
      console.error("Failed to load user form data:", error);
    });
    setTimeout(() => {
      this.trackFormChanges();
    });
  }
  updateFormFields() {
    const user = this.entity();
    if (!isDefined(user))
      return;
    this.formFields = this.userFormService.createUserFormFields({
      user,
      company: this.dataLoadingService.companyInfo(),
      createMode: this.createMode(),
      costCenters: this.dataLoadingService.costCentersData(),
      timezones: this.dataLoadingService.timezonesData(),
      clientsSearchResults: this.clientSearchService.searchResults(),
      searchClient: (term) => this.clientSearchService.search(term),
      isLoadingClients: () => this.clientSearchService.isSearchLoading()
    });
    this.cdr.detectChanges();
  }
  submitChanges(formData) {
    const user = this.entity();
    if (user === null || user === void 0)
      return;
    this.accountsService.updateUser(user.id, formData).pipe(takeUntilDestroyed(this.destroyRef)).subscribe({
      next: (response) => {
        this.clearUnsavedChanges();
        this.isFormEditable.set(false);
        this.broadcastService.broadcast("entity-updated", {
          entityType: "user",
          operation: "update",
          entityId: user.id,
          data: response
        });
      },
      error: () => {
        this.isFormEditable.set(true);
      }
    });
  }
  onFormValueChange(formData) {
    const transformedData = __spreadValues({}, formData);
    if (isDefined(transformedData["defaultClient"])) {
      const client = transformedData["defaultClient"];
      transformedData["defaultClient"] = {
        id: client.id,
        name: client.name
      };
    } else {
      transformedData["defaultClient"] = null;
    }
    if (isDefined(transformedData["costCentre"])) {
      const costCentre = transformedData["costCentre"];
      transformedData["costCentre"] = {
        id: costCentre.id,
        name: costCentre.name
      };
    } else {
      transformedData["costCentre"] = null;
    }
    this.formValueChange.emit(transformedData);
    this.hasFormChanges = true;
  }
  static \u0275fac = function UserDetailsSectionComponent_Factory(__ngFactoryType__) {
    return new (__ngFactoryType__ || _UserDetailsSectionComponent)();
  };
  static \u0275cmp = /* @__PURE__ */ \u0275\u0275defineComponent({ type: _UserDetailsSectionComponent, selectors: [["app-user-details-section"]], inputs: { ownerId: [1, "ownerId"] }, features: [\u0275\u0275InheritDefinitionFeature], decls: 12, vars: 7, consts: [[1, "card", "pt-2"], [1, "mb-4", "p-2", "flex", "justify-start", "items-center"], [1, "!text-[2.5rem]", 3, "icon", "ngClass"], [1, "pl-6", "flex-1"], [1, "flex", "justify-between", "items-center"], [1, "text-xl", "font-semibold", "m-0"], [1, "icon-light"], [3, "fields", "actions", "hideActions"], ["tableStyleClass", "info-display !w-auto", 3, "data", "columns", "showGridLines", "hideHeader"], [1, "pi", "pi-pen-to-square", "action", "hover", "!text-2xl", 3, "click", "keydown.enter"], [3, "formSubmit", "formValidityChange", "formValueChange", "fields", "actions", "hideActions"]], template: function UserDetailsSectionComponent_Template(rf, ctx) {
    if (rf & 1) {
      \u0275\u0275elementStart(0, "div", 0)(1, "div", 1);
      \u0275\u0275element(2, "fa-icon", 2);
      \u0275\u0275elementStart(3, "div", 3)(4, "div", 4)(5, "h2", 5);
      \u0275\u0275text(6, "User Details");
      \u0275\u0275elementEnd();
      \u0275\u0275conditionalCreate(7, UserDetailsSectionComponent_Conditional_7_Template, 2, 1, "div", 6);
      \u0275\u0275elementEnd();
      \u0275\u0275elementStart(8, "span");
      \u0275\u0275text(9, "Describe this user.");
      \u0275\u0275elementEnd()()();
      \u0275\u0275conditionalCreate(10, UserDetailsSectionComponent_Conditional_10_Template, 1, 3, "app-dynamic-form", 7);
      \u0275\u0275conditionalCreate(11, UserDetailsSectionComponent_Conditional_11_Template, 1, 4, "app-grid", 8);
      \u0275\u0275elementEnd();
    }
    if (rf & 2) {
      \u0275\u0275advance(2);
      \u0275\u0275property("icon", ctx.faUser)("ngClass", \u0275\u0275pureFunction1(5, _c039, ctx.isFormEditable()));
      \u0275\u0275advance(5);
      \u0275\u0275conditional(!ctx.isFormEditable() && !ctx.createMode() ? 7 : -1);
      \u0275\u0275advance(3);
      \u0275\u0275conditional(ctx.isFormEditable() || ctx.createMode() && ctx.formFields.length ? 10 : -1);
      \u0275\u0275advance();
      \u0275\u0275conditional(!ctx.isFormEditable() && !ctx.createMode() ? 11 : -1);
    }
  }, dependencies: [
    CommonModule,
    NgClass,
    ButtonModule,
    GridComponent,
    DynamicFormComponent,
    MessageModule,
    FontAwesomeModule,
    FaIconComponent
  ], encapsulation: 2 });
};
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(UserDetailsSectionComponent, [{
    type: Component,
    args: [{ selector: "app-user-details-section", imports: [
      CommonModule,
      ButtonModule,
      GridComponent,
      DynamicFormComponent,
      MessageModule,
      FontAwesomeModule
    ], template: `<div class="card pt-2">
  <div class="mb-4 p-2 flex justify-start items-center">
    <fa-icon
      [icon]="faUser"
      class="!text-[2.5rem]"
      [ngClass]="{ 'icon-primary': isFormEditable() }"
    ></fa-icon>

    <div class="pl-6 flex-1">
      <div class="flex justify-between items-center">
        <h2 class="text-xl font-semibold m-0">User Details</h2>
        @if (!isFormEditable() && !createMode()) {
          <div class="icon-light">
            <span
              class="pi pi-pen-to-square action hover !text-2xl"
              [attr.aria-label]="'Edit user details'"
              (click)="onEdit()"
              (keydown.enter)="onEdit()"
            ></span>
          </div>
        }
      </div>
      <span>Describe this user.</span>
    </div>
  </div>

  @if (isFormEditable() || (createMode() && formFields.length)) {
    <app-dynamic-form
      [fields]="formFields"
      [actions]="actions"
      [hideActions]="createMode()"
      (formSubmit)="onSubmit($event)"
      (formValidityChange)="onFormValidityChange($event)"
      (formValueChange)="onFormValueChange($event)"
    >
    </app-dynamic-form>
  }

  @if (!isFormEditable() && !createMode()) {
    <app-grid
      [data]="userDetails()"
      [columns]="columns"
      [showGridLines]="false"
      [hideHeader]="true"
      tableStyleClass="info-display !w-auto"
    ></app-grid>
  }
</div>
` }]
  }], () => [], { ownerId: [{ type: Input, args: [{ isSignal: true, alias: "ownerId", required: false }] }] });
})();
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && \u0275setClassDebugInfo(UserDetailsSectionComponent, { className: "UserDetailsSectionComponent", filePath: "src/app/features/administration/components/users/user-details-section/user-details-section.component.ts", lineNumber: 48 });
})();

// src/app/features/administration/components/users/user-roles-section/user-roles-section.component.ts
var _c040 = (a0) => ({ "icon-primary": a0 });
function UserRolesSectionComponent_Conditional_7_Template(rf, ctx) {
  if (rf & 1) {
    const _r1 = \u0275\u0275getCurrentView();
    \u0275\u0275elementStart(0, "div", 6)(1, "span", 9);
    \u0275\u0275listener("click", function UserRolesSectionComponent_Conditional_7_Template_span_click_1_listener() {
      \u0275\u0275restoreView(_r1);
      const ctx_r1 = \u0275\u0275nextContext();
      return \u0275\u0275resetView(ctx_r1.onEdit());
    })("keydown.enter", function UserRolesSectionComponent_Conditional_7_Template_span_keydown_enter_1_listener() {
      \u0275\u0275restoreView(_r1);
      const ctx_r1 = \u0275\u0275nextContext();
      return \u0275\u0275resetView(ctx_r1.onEdit());
    });
    \u0275\u0275elementEnd()();
  }
  if (rf & 2) {
    \u0275\u0275advance();
    \u0275\u0275attribute("aria-label", "Edit user roles details");
  }
}
function UserRolesSectionComponent_Conditional_10_Template(rf, ctx) {
  if (rf & 1) {
    const _r3 = \u0275\u0275getCurrentView();
    \u0275\u0275elementStart(0, "app-dynamic-form", 10);
    \u0275\u0275listener("formSubmit", function UserRolesSectionComponent_Conditional_10_Template_app_dynamic_form_formSubmit_0_listener($event) {
      \u0275\u0275restoreView(_r3);
      const ctx_r1 = \u0275\u0275nextContext();
      return \u0275\u0275resetView(ctx_r1.onSubmit($event));
    })("formValidityChange", function UserRolesSectionComponent_Conditional_10_Template_app_dynamic_form_formValidityChange_0_listener($event) {
      \u0275\u0275restoreView(_r3);
      const ctx_r1 = \u0275\u0275nextContext();
      return \u0275\u0275resetView(ctx_r1.onFormValidityChange($event));
    })("formValueChange", function UserRolesSectionComponent_Conditional_10_Template_app_dynamic_form_formValueChange_0_listener($event) {
      \u0275\u0275restoreView(_r3);
      const ctx_r1 = \u0275\u0275nextContext();
      return \u0275\u0275resetView(ctx_r1.onFormValueChange($event));
    });
    \u0275\u0275elementEnd();
  }
  if (rf & 2) {
    const ctx_r1 = \u0275\u0275nextContext();
    \u0275\u0275property("fields", ctx_r1.formFields)("actions", ctx_r1.actions)("hideActions", ctx_r1.createMode());
  }
}
function UserRolesSectionComponent_Conditional_11_Template(rf, ctx) {
  if (rf & 1) {
    \u0275\u0275element(0, "app-grid", 8);
  }
  if (rf & 2) {
    const ctx_r1 = \u0275\u0275nextContext();
    \u0275\u0275property("data", ctx_r1.userRoleDetails())("columns", ctx_r1.columns)("showGridLines", false)("hideHeader", true);
  }
}
var UserRolesSectionComponent = class _UserRolesSectionComponent extends EntitySectionBaseComponent {
  ownerId = input(null, ...ngDevMode ? [{ debugName: "ownerId" }] : []);
  accountsService = inject(AccountsService);
  cdr = inject(ChangeDetectorRef);
  faUserLock = faUserLock;
  userRoleDetails = computed(() => {
    const userRoles = this.entity()?.roles;
    if (!isDefined(userRoles)) {
      return [];
    }
    return [
      {
        key: "Roles",
        value: !isEmpty(userRoles) ? userRoles.map((role) => role.name).join(", ") : "None"
      }
    ];
  }, ...ngDevMode ? [{ debugName: "userRoleDetails" }] : []);
  selectOptionsLoaded = signal(false, ...ngDevMode ? [{ debugName: "selectOptionsLoaded" }] : []);
  selectOptions = {};
  constructor() {
    super();
    this.columns = [
      { field: "key", header: "", transform: "uppercase" },
      { field: "value", header: "", transform: "capitalize" }
    ];
    effect(() => {
      const selectOptionsLoaded = this.selectOptionsLoaded();
      if (selectOptionsLoaded) {
        untracked(() => {
          this.updateFormFields();
          this.cdr.detectChanges();
        });
      }
    });
  }
  ngOnInit() {
    this.loadSelectOptions();
  }
  loadSelectOptions() {
    const asset = this.entity();
    const effectiveOwnerId = asset?.owner?.id ?? this.ownerId();
    if (isNullOrUndefined(effectiveOwnerId)) {
      this.selectOptions = {};
      this.selectOptionsLoaded.set(true);
      this.updateFormFields();
      return;
    }
    this.accountsService.listUserRoles(effectiveOwnerId, 0, 100).subscribe({
      next: (userRoles) => {
        const hasDefaultSystemId = userRoles.items.some((item) => item.id === DEFAULT_SYSTEM_ID);
        const options = userRoles.items.map((item) => ({
          label: item.name ?? "",
          value: item.id
        })).sort((a, b) => a.label.localeCompare(b.label));
        this.selectOptions = {
          userRoles: hasDefaultSystemId ? options : [
            { value: DEFAULT_SYSTEM_ID, label: "Administrator" },
            ...options
          ]
        };
        this.selectOptionsLoaded.set(true);
      },
      error: () => {
        this.selectOptionsLoaded.set(true);
      }
    });
  }
  updateFormFields() {
    this.formFields = [
      createListboxField("roles", "Roles", this.entity()?.roles?.map((role) => role.id) ?? [], this.selectOptions["userRoles"], {
        name: "userRoles",
        props: {
          checkbox: true,
          multiple: true
        }
      })
    ];
  }
  submitChanges(formData) {
    const userRole = this.entity();
    if (isNullOrUndefined(userRole))
      return;
    this.accountsService.updateUser(userRole.id, this.transformFormData(formData)).pipe(takeUntilDestroyed(this.destroyRef)).subscribe({
      next: (response) => {
        this.isFormEditable.set(false);
        this.broadcastService.broadcast("entity-updated", {
          entityType: "user-role",
          operation: "update",
          entityId: userRole.id,
          data: response
        });
      },
      error: () => {
        this.isFormEditable.set(true);
      }
    });
  }
  transformFormData(formData) {
    const data = __spreadValues({}, formData);
    if (isDefined(data)) {
      const userRole = this.entity();
      if (isNullOrUndefined(userRole))
        return data;
      const roles = data["roles"];
      if (isDefined(roles)) {
        data["roles"] = roles.map((role) => ({
          id: role,
          name: this.selectOptions["userRoles"]?.find((option) => option.value === role)?.label
        }));
      }
    }
    return data;
  }
  onFormValueChange(formData) {
    const transformedData = this.transformFormData(formData);
    this.formValueChange.emit(transformedData);
  }
  static \u0275fac = function UserRolesSectionComponent_Factory(__ngFactoryType__) {
    return new (__ngFactoryType__ || _UserRolesSectionComponent)();
  };
  static \u0275cmp = /* @__PURE__ */ \u0275\u0275defineComponent({ type: _UserRolesSectionComponent, selectors: [["app-user-roles-section"]], inputs: { ownerId: [1, "ownerId"] }, features: [\u0275\u0275InheritDefinitionFeature], decls: 12, vars: 7, consts: [[1, "card", "pt-2"], [1, "mb-4", "p-2", "flex", "justify-start", "items-center"], [1, "!text-[2.5rem]", 3, "icon", "ngClass"], [1, "pl-6", "flex-1"], [1, "flex", "justify-between", "items-center"], [1, "text-xl", "font-semibold", "m-0"], [1, "icon-light"], [3, "fields", "actions", "hideActions"], ["tableStyleClass", "info-display !w-auto", 3, "data", "columns", "showGridLines", "hideHeader"], [1, "pi", "pi-pen-to-square", "action", "hover", "!text-2xl", 3, "click", "keydown.enter"], [3, "formSubmit", "formValidityChange", "formValueChange", "fields", "actions", "hideActions"]], template: function UserRolesSectionComponent_Template(rf, ctx) {
    if (rf & 1) {
      \u0275\u0275elementStart(0, "div", 0)(1, "div", 1);
      \u0275\u0275element(2, "fa-icon", 2);
      \u0275\u0275elementStart(3, "div", 3)(4, "div", 4)(5, "h2", 5);
      \u0275\u0275text(6, "User Roles");
      \u0275\u0275elementEnd();
      \u0275\u0275conditionalCreate(7, UserRolesSectionComponent_Conditional_7_Template, 2, 1, "div", 6);
      \u0275\u0275elementEnd();
      \u0275\u0275elementStart(8, "span");
      \u0275\u0275text(9, "Select from the following user roles.");
      \u0275\u0275elementEnd()()();
      \u0275\u0275conditionalCreate(10, UserRolesSectionComponent_Conditional_10_Template, 1, 3, "app-dynamic-form", 7);
      \u0275\u0275conditionalCreate(11, UserRolesSectionComponent_Conditional_11_Template, 1, 4, "app-grid", 8);
      \u0275\u0275elementEnd();
    }
    if (rf & 2) {
      \u0275\u0275advance(2);
      \u0275\u0275property("icon", ctx.faUserLock)("ngClass", \u0275\u0275pureFunction1(5, _c040, ctx.isFormEditable()));
      \u0275\u0275advance(5);
      \u0275\u0275conditional(!ctx.isFormEditable() && !ctx.createMode() ? 7 : -1);
      \u0275\u0275advance(3);
      \u0275\u0275conditional(ctx.isFormEditable() || ctx.createMode() && ctx.formFields.length ? 10 : -1);
      \u0275\u0275advance();
      \u0275\u0275conditional(!ctx.isFormEditable() && !ctx.createMode() ? 11 : -1);
    }
  }, dependencies: [
    CommonModule,
    NgClass,
    ButtonModule,
    GridComponent,
    DynamicFormComponent,
    FontAwesomeModule,
    FaIconComponent
  ], encapsulation: 2 });
};
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(UserRolesSectionComponent, [{
    type: Component,
    args: [{ selector: "app-user-roles-section", imports: [
      CommonModule,
      ButtonModule,
      GridComponent,
      DynamicFormComponent,
      FontAwesomeModule
    ], template: `<div class="card pt-2">
  <div class="mb-4 p-2 flex justify-start items-center">
    <fa-icon
      [icon]="faUserLock"
      class="!text-[2.5rem]"
      [ngClass]="{ 'icon-primary': isFormEditable() }"
    ></fa-icon>

    <div class="pl-6 flex-1">
      <div class="flex justify-between items-center">
        <h2 class="text-xl font-semibold m-0">User Roles</h2>
        @if (!isFormEditable() && !createMode()) {
          <div class="icon-light">
            <span
              class="pi pi-pen-to-square action hover !text-2xl"
              [attr.aria-label]="'Edit user roles details'"
              (click)="onEdit()"
              (keydown.enter)="onEdit()"
            ></span>
          </div>
        }
      </div>
      <span>Select from the following user roles.</span>
    </div>
  </div>

  @if (isFormEditable() || (createMode() && formFields.length)) {
    <app-dynamic-form
      [fields]="formFields"
      [actions]="actions"
      [hideActions]="createMode()"
      (formSubmit)="onSubmit($event)"
      (formValidityChange)="onFormValidityChange($event)"
      (formValueChange)="onFormValueChange($event)"
    >
    </app-dynamic-form>
  }

  @if (!isFormEditable() && !createMode()) {
    <app-grid
      [data]="userRoleDetails()"
      [columns]="columns"
      [showGridLines]="false"
      [hideHeader]="true"
      tableStyleClass="info-display !w-auto"
    ></app-grid>
  }
</div>
` }]
  }], () => [], { ownerId: [{ type: Input, args: [{ isSignal: true, alias: "ownerId", required: false }] }] });
})();
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && \u0275setClassDebugInfo(UserRolesSectionComponent, { className: "UserRolesSectionComponent", filePath: "src/app/features/administration/components/users/user-roles-section/user-roles-section.component.ts", lineNumber: 47 });
})();

// src/app/features/administration/components/users/user-api-keys-section/user-api-keys-section.component.ts
var _c041 = (a0) => ({ "icon-primary": a0 });
function UserApiKeysSectionComponent_Conditional_7_Template(rf, ctx) {
  if (rf & 1) {
    const _r1 = \u0275\u0275getCurrentView();
    \u0275\u0275elementStart(0, "div", 6)(1, "span", 9);
    \u0275\u0275listener("click", function UserApiKeysSectionComponent_Conditional_7_Template_span_click_1_listener() {
      \u0275\u0275restoreView(_r1);
      const ctx_r1 = \u0275\u0275nextContext();
      return \u0275\u0275resetView(ctx_r1.onEdit());
    })("keydown.enter", function UserApiKeysSectionComponent_Conditional_7_Template_span_keydown_enter_1_listener() {
      \u0275\u0275restoreView(_r1);
      const ctx_r1 = \u0275\u0275nextContext();
      return \u0275\u0275resetView(ctx_r1.onEdit());
    });
    \u0275\u0275elementEnd()();
  }
  if (rf & 2) {
    \u0275\u0275advance();
    \u0275\u0275attribute("aria-label", "Edit API keys details");
  }
}
function UserApiKeysSectionComponent_Conditional_10_Template(rf, ctx) {
  if (rf & 1) {
    const _r3 = \u0275\u0275getCurrentView();
    \u0275\u0275elementStart(0, "app-dynamic-form", 10);
    \u0275\u0275listener("formSubmit", function UserApiKeysSectionComponent_Conditional_10_Template_app_dynamic_form_formSubmit_0_listener($event) {
      \u0275\u0275restoreView(_r3);
      const ctx_r1 = \u0275\u0275nextContext();
      return \u0275\u0275resetView(ctx_r1.onSubmit($event));
    })("formValidityChange", function UserApiKeysSectionComponent_Conditional_10_Template_app_dynamic_form_formValidityChange_0_listener($event) {
      \u0275\u0275restoreView(_r3);
      const ctx_r1 = \u0275\u0275nextContext();
      return \u0275\u0275resetView(ctx_r1.onFormValidityChange($event));
    })("formValueChange", function UserApiKeysSectionComponent_Conditional_10_Template_app_dynamic_form_formValueChange_0_listener($event) {
      \u0275\u0275restoreView(_r3);
      const ctx_r1 = \u0275\u0275nextContext();
      return \u0275\u0275resetView(ctx_r1.onFormValueChange($event));
    });
    \u0275\u0275elementEnd();
  }
  if (rf & 2) {
    const ctx_r1 = \u0275\u0275nextContext();
    \u0275\u0275property("fields", ctx_r1.formFields)("actions", ctx_r1.actions)("hideActions", ctx_r1.createMode());
  }
}
function UserApiKeysSectionComponent_Conditional_11_Template(rf, ctx) {
  if (rf & 1) {
    \u0275\u0275element(0, "app-grid", 8);
  }
  if (rf & 2) {
    const ctx_r1 = \u0275\u0275nextContext();
    \u0275\u0275property("data", ctx_r1.userApiKeyDetails())("columns", ctx_r1.columns)("showGridLines", false)("hideHeader", true);
  }
}
var UserApiKeysSectionComponent = class _UserApiKeysSectionComponent extends EntitySectionBaseComponent {
  accountsService = inject(AccountsService);
  dialogService = inject(DialogService);
  confirmationService = inject(ConfirmationService);
  faKey = faKey;
  userProfileService = inject(ClientDataService);
  userApiKeyDetails = computed(() => {
    const apiKeyDetails = this.entity()?.apiKeys;
    if (!isDefined(apiKeyDetails))
      return [];
    return [
      {
        key: "Keys",
        value: !isEmpty(apiKeyDetails) ? Object.values(apiKeyDetails).map((item) => item.name).join(", ") : "None"
      }
    ];
  }, ...ngDevMode ? [{ debugName: "userApiKeyDetails" }] : []);
  userApiKeysModalConfig;
  constructor() {
    super();
    this.columns = [
      { field: "key", header: "", transform: "uppercase" },
      { field: "value", header: "" }
    ];
  }
  updateFormFields() {
    const userEntity = this.entity();
    this.userApiKeysModalConfig = {
      modalComponent: ModalListFormComponent,
      modalTitle: "New API Key",
      defaultItemProvider: () => ({
        name: "",
        policies: []
      }),
      listItemFormatter: (item) => ({
        id: Object.keys(item)[0] ?? "",
        title: item[Object.keys(item)[0]].name ?? "",
        display: Object.keys(item)[0] ?? ""
      }),
      modalFields: (item) => [
        createTextField("name", "Key Name", item?.name, {
          name: "name",
          validations: [
            {
              name: "required",
              validator: Validators.required,
              message: "Name is required"
            }
          ]
        })
      ],
      subHeader: "Enter a descriptive name for your new API key.",
      onSubmit: async (formInput, dialogRef) => {
        const createRequest = {
          name: formInput.name ?? "",
          policies: formInput.policies ?? []
        };
        const currentOwnerId = userEntity?.id;
        if (isNullOrUndefined(currentOwnerId)) {
          console.error("Owner ID is missing. Cannot create API key.");
          this._showErrorDialog("Error Creating API Key", "Cannot create API key: User information is missing.");
          return false;
        }
        try {
          const createdApiKey = await firstValueFrom(this.accountsService.createApiKey(currentOwnerId, createRequest).pipe(takeUntilDestroyed(this.destroyRef)));
          dialogRef.close(createdApiKey);
          this._showCreatedApiKeyDialog(createdApiKey, userEntity);
          return;
        } catch (error) {
          console.error("Failed to create API key:", error);
          this._showErrorDialog("Error Creating API Key", "An error occurred while creating the API key. Please try again or contact support.");
          return false;
        }
      },
      onDeleteItem: async (item) => {
        const apiKeyId = Object.keys(item)[0];
        const currentOwnerId = userEntity?.id;
        if (isNullOrUndefined(apiKeyId)) {
          console.error("Missing apiKeyId for deletion.");
          return false;
        }
        if (isNullOrUndefined(currentOwnerId)) {
          console.error("Owner ID is missing. Cannot delete API key.");
          this._showErrorDialog("Error Deleting API Key", "Cannot delete API key: User information is missing.");
          return false;
        }
        return this.handleApiKeyRemoval(currentOwnerId, apiKeyId);
      }
    };
    this.formFields = [
      createModalListField("apiKeys", "Keys", isDefined(userEntity?.apiKeys) ? Object.entries(userEntity?.apiKeys).map(([key, value]) => ({
        [key]: value
      })) : [], {
        layout: "horizontal",
        labelWidth: "1/3",
        name: "apiKeys",
        props: {
          modalConfig: this.userApiKeysModalConfig
        }
      })
    ];
  }
  handleApiKeyRemoval(currentOwnerId, apiKeyId) {
    return new Promise((resolve) => {
      this.confirmationService.confirm({
        message: `Are you sure you want to delete this API key? Anyone using this key will immediately lose access.`,
        header: "Confirmation",
        icon: "pi pi-exclamation-triangle",
        acceptButtonProps: {
          label: "Delete"
        },
        rejectButtonProps: {
          label: "Cancel",
          severity: "secondary"
        },
        accept: async () => {
          try {
            await firstValueFrom(this.accountsService.deleteApiKey(currentOwnerId, apiKeyId).pipe(takeUntilDestroyed(this.destroyRef))).then(() => {
              this.broadcastService.broadcast("entity-updated", {
                entityType: "user",
                operation: "delete",
                entityId: currentOwnerId,
                data: { apiKeyId }
              });
              resolve(true);
            });
          } catch (error) {
            console.error("Failed to delete API key via custom handler:", error);
            const errorMessage = `Failed to delete API key: ${error.message || "Unknown error"}`;
            this._showErrorDialog("Error Deleting API Key", "An error occurred. Please try again or contact support.", [
              {
                type: "custom",
                key: "errorMessageDisplay",
                template: "errorDisplay",
                // Ensure this template is handled by ModalListFormComponent
                props: { message: errorMessage },
                name: "custom"
              }
            ]);
            resolve(false);
          }
        },
        reject: (type) => {
          if (type === ConfirmEventType.REJECT || type === ConfirmEventType.CANCEL) {
            resolve(false);
          }
        }
      });
    });
  }
  _showCreatedApiKeyDialog(createdApiKey, userEntity) {
    setTimeout(() => {
      const newDialogRef = this.dialogService.open(ModalListFormComponent, {
        header: "API Key Created Successfully",
        width: "500px",
        contentStyle: { "max-height": "500px", overflow: "auto" },
        data: {
          fields: [
            createTextField("displayedKeyName", "Key Name", createdApiKey.name, {
              name: "displayedKeyName",
              disabled: true
            }),
            createTextAreaField("apiTokenValue", "API Key", createdApiKey["key"], {
              name: "apiTokenValue",
              readonly: true
            })
          ],
          actions: [
            {
              label: "Copy Key & Close",
              severity: "primary",
              icon: "pi pi-copy",
              action: () => {
                if (isDefined(createdApiKey["key"])) {
                  navigator.clipboard.writeText(createdApiKey["key"]).then(() => this.broadcastService.broadcast("entity-updated", {
                    entityType: "user",
                    operation: "update",
                    entityId: userEntity?.id,
                    data: userEntity
                    // Note: userEntity might be slightly stale here regarding its own apiKeys list
                  })).catch((err) => console.error("Failed to copy API Key: ", err));
                }
                newDialogRef?.close();
              }
            }
          ],
          modalTitle: "API Key Details",
          subHeader: "Your API key is displayed below. This will only be shown to you once and cannot be recovered. Make sure to copy and safely store the value before dismissing this message.",
          hideForm: true,
          isDisplayMode: true
        }
      });
    }, 300);
  }
  _showErrorDialog(header, subHeader, fields) {
    let dialogRefItself;
    const dialogConfigData = {
      actions: [
        {
          label: "Close",
          severity: "secondary",
          action: () => {
            if (dialogRefItself) {
              dialogRefItself.close();
            }
          }
        }
      ],
      subHeader,
      hideForm: true,
      isDisplayMode: true,
      fields: []
    };
    if (fields) {
      dialogConfigData.fields = fields;
    }
    dialogRefItself = this.dialogService.open(ModalListFormComponent, {
      header,
      width: "400px",
      // Consistent width for error dialogs
      data: dialogConfigData
    });
  }
  submitChanges(_formData) {
    const user = this.entity();
    if (isNullOrUndefined(user))
      return;
    this.broadcastService.broadcast("entity-updated", {
      entityType: "user",
      operation: "update",
      entityId: user.id,
      data: user
    });
  }
  static \u0275fac = function UserApiKeysSectionComponent_Factory(__ngFactoryType__) {
    return new (__ngFactoryType__ || _UserApiKeysSectionComponent)();
  };
  static \u0275cmp = /* @__PURE__ */ \u0275\u0275defineComponent({ type: _UserApiKeysSectionComponent, selectors: [["app-user-api-keys-section"]], features: [\u0275\u0275InheritDefinitionFeature], decls: 12, vars: 7, consts: [[1, "card", "pt-2"], [1, "mb-4", "p-2", "flex", "justify-start", "items-center"], [1, "!text-[2.5rem]", 3, "icon", "ngClass"], [1, "pl-6", "flex-1"], [1, "flex", "justify-between", "items-center"], [1, "text-xl", "font-semibold", "m-0"], [1, "icon-light"], [3, "fields", "actions", "hideActions"], ["tableStyleClass", "info-display !w-auto", 3, "data", "columns", "showGridLines", "hideHeader"], [1, "pi", "pi-pen-to-square", "action", "hover", "!text-2xl", 3, "click", "keydown.enter"], [3, "formSubmit", "formValidityChange", "formValueChange", "fields", "actions", "hideActions"]], template: function UserApiKeysSectionComponent_Template(rf, ctx) {
    if (rf & 1) {
      \u0275\u0275elementStart(0, "div", 0)(1, "div", 1);
      \u0275\u0275element(2, "fa-icon", 2);
      \u0275\u0275elementStart(3, "div", 3)(4, "div", 4)(5, "h2", 5);
      \u0275\u0275text(6, "API Keys");
      \u0275\u0275elementEnd();
      \u0275\u0275conditionalCreate(7, UserApiKeysSectionComponent_Conditional_7_Template, 2, 1, "div", 6);
      \u0275\u0275elementEnd();
      \u0275\u0275elementStart(8, "span");
      \u0275\u0275text(9, "Generate API keys that can be used to link this user account to third party systems.");
      \u0275\u0275elementEnd()()();
      \u0275\u0275conditionalCreate(10, UserApiKeysSectionComponent_Conditional_10_Template, 1, 3, "app-dynamic-form", 7);
      \u0275\u0275conditionalCreate(11, UserApiKeysSectionComponent_Conditional_11_Template, 1, 4, "app-grid", 8);
      \u0275\u0275elementEnd();
    }
    if (rf & 2) {
      \u0275\u0275advance(2);
      \u0275\u0275property("icon", ctx.faKey)("ngClass", \u0275\u0275pureFunction1(5, _c041, ctx.isFormEditable()));
      \u0275\u0275advance(5);
      \u0275\u0275conditional(!ctx.isFormEditable() && !ctx.createMode() ? 7 : -1);
      \u0275\u0275advance(3);
      \u0275\u0275conditional(ctx.isFormEditable() || ctx.createMode() && ctx.formFields.length ? 10 : -1);
      \u0275\u0275advance();
      \u0275\u0275conditional(!ctx.isFormEditable() && !ctx.createMode() ? 11 : -1);
    }
  }, dependencies: [
    CommonModule,
    NgClass,
    ButtonModule,
    GridComponent,
    DynamicFormComponent,
    FontAwesomeModule,
    FaIconComponent
  ], encapsulation: 2 });
};
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(UserApiKeysSectionComponent, [{
    type: Component,
    args: [{ selector: "app-user-api-keys-section", imports: [
      CommonModule,
      ButtonModule,
      GridComponent,
      DynamicFormComponent,
      FontAwesomeModule
    ], template: `<div class="card pt-2">
  <div class="mb-4 p-2 flex justify-start items-center">
    <fa-icon
      [icon]="faKey"
      class="!text-[2.5rem]"
      [ngClass]="{ 'icon-primary': isFormEditable() }"
    ></fa-icon>

    <div class="pl-6 flex-1">
      <div class="flex justify-between items-center">
        <h2 class="text-xl font-semibold m-0">API Keys</h2>
        @if (!isFormEditable() && !createMode()) {
          <div class="icon-light">
            <span
              class="pi pi-pen-to-square action hover !text-2xl"
              [attr.aria-label]="'Edit API keys details'"
              (click)="onEdit()"
              (keydown.enter)="onEdit()"
            ></span>
          </div>
        }
      </div>
      <span
        >Generate API keys that can be used to link this user account to third
        party systems.</span
      >
    </div>
  </div>

  @if (isFormEditable() || (createMode() && formFields.length)) {
    <app-dynamic-form
      [fields]="formFields"
      [actions]="actions"
      [hideActions]="createMode()"
      (formSubmit)="onSubmit($event)"
      (formValidityChange)="onFormValidityChange($event)"
      (formValueChange)="onFormValueChange($event)"
    >
    </app-dynamic-form>
  }

  @if (!isFormEditable() && !createMode()) {
    <app-grid
      [data]="userApiKeyDetails()"
      [columns]="columns"
      [showGridLines]="false"
      [hideHeader]="true"
      tableStyleClass="info-display !w-auto"
    ></app-grid>
  }
</div>
` }]
  }], () => [], null);
})();
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && \u0275setClassDebugInfo(UserApiKeysSectionComponent, { className: "UserApiKeysSectionComponent", filePath: "src/app/features/administration/components/users/user-api-keys-section/user-api-keys-section.component.ts", lineNumber: 47 });
})();

// src/app/features/administration/components/users/user-notify-section/user-notify-section.component.ts
var _c042 = (a0) => ({ "icon-primary": a0 });
function UserNotifySectionComponent_Conditional_7_Template(rf, ctx) {
  if (rf & 1) {
    const _r1 = \u0275\u0275getCurrentView();
    \u0275\u0275elementStart(0, "div", 6)(1, "span", 9);
    \u0275\u0275listener("click", function UserNotifySectionComponent_Conditional_7_Template_span_click_1_listener() {
      \u0275\u0275restoreView(_r1);
      const ctx_r1 = \u0275\u0275nextContext();
      return \u0275\u0275resetView(ctx_r1.onEdit());
    })("keydown.enter", function UserNotifySectionComponent_Conditional_7_Template_span_keydown_enter_1_listener() {
      \u0275\u0275restoreView(_r1);
      const ctx_r1 = \u0275\u0275nextContext();
      return \u0275\u0275resetView(ctx_r1.onEdit());
    });
    \u0275\u0275elementEnd()();
  }
  if (rf & 2) {
    \u0275\u0275advance();
    \u0275\u0275attribute("aria-label", "Edit notification details");
  }
}
function UserNotifySectionComponent_Conditional_10_Template(rf, ctx) {
  if (rf & 1) {
    const _r3 = \u0275\u0275getCurrentView();
    \u0275\u0275elementStart(0, "app-dynamic-form", 10);
    \u0275\u0275listener("formSubmit", function UserNotifySectionComponent_Conditional_10_Template_app_dynamic_form_formSubmit_0_listener($event) {
      \u0275\u0275restoreView(_r3);
      const ctx_r1 = \u0275\u0275nextContext();
      return \u0275\u0275resetView(ctx_r1.onSubmit($event));
    })("formValidityChange", function UserNotifySectionComponent_Conditional_10_Template_app_dynamic_form_formValidityChange_0_listener($event) {
      \u0275\u0275restoreView(_r3);
      const ctx_r1 = \u0275\u0275nextContext();
      return \u0275\u0275resetView(ctx_r1.onFormValidityChange($event));
    })("formValueChange", function UserNotifySectionComponent_Conditional_10_Template_app_dynamic_form_formValueChange_0_listener($event) {
      \u0275\u0275restoreView(_r3);
      const ctx_r1 = \u0275\u0275nextContext();
      return \u0275\u0275resetView(ctx_r1.onFormValueChange($event));
    });
    \u0275\u0275elementEnd();
  }
  if (rf & 2) {
    const ctx_r1 = \u0275\u0275nextContext();
    \u0275\u0275property("fields", ctx_r1.formFields)("actions", ctx_r1.actions)("hideActions", ctx_r1.createMode());
  }
}
function UserNotifySectionComponent_Conditional_11_Template(rf, ctx) {
  if (rf & 1) {
    \u0275\u0275element(0, "app-grid", 8);
  }
  if (rf & 2) {
    const ctx_r1 = \u0275\u0275nextContext();
    \u0275\u0275property("data", ctx_r1.userNotificationDetails())("columns", ctx_r1.columns)("showGridLines", false)("hideHeader", true);
  }
}
var UserNotifySectionComponent = class _UserNotifySectionComponent extends EntitySectionBaseComponent {
  accountsService = inject(AccountsService);
  operationRegistry = inject(EntityOperationRegistryService);
  faBell = faBell;
  userNotificationDetails = computed(() => {
    const userNotifications = this.entity()?.notifySettings;
    if (!isDefined(userNotifications)) {
      return [];
    }
    return [
      { key: "Allow SMS from", value: userNotifications.smsTime?.from },
      { key: "Allow SMS to", value: userNotifications.smsTime?.to },
      {
        key: "Low Priority",
        value: this.formatLabel(userNotifications.actions?.low)
      },
      {
        key: "Medium Priority",
        value: this.formatLabel(userNotifications.actions?.medium)
      },
      {
        key: "High Priority",
        value: this.formatLabel(userNotifications.actions?.high)
      }
    ];
  }, ...ngDevMode ? [{ debugName: "userNotificationDetails" }] : []);
  constructor() {
    super();
    this.columns = [
      { field: "key", header: "", transform: "uppercase" },
      { field: "value", header: "", transform: "capitalize" }
    ];
  }
  updateFormFields() {
    const user = this.entity();
    this.formFields = [
      {
        name: "smsTime",
        key: "smsTime",
        type: "group",
        fields: [
          createDateField("from", "Allow SMS from", user?.notifySettings?.smsTime?.from, {
            name: "from",
            placeholder: "Select time",
            props: {
              timeOnly: true,
              showSeconds: true
            },
            style: { width: "100%" }
          }),
          createDateField("to", "Allow SMS to", user?.notifySettings?.smsTime?.to, {
            name: "to",
            placeholder: "Select time",
            props: {
              timeOnly: true,
              showSeconds: true
            },
            style: { width: "100%" }
          })
        ]
      },
      {
        key: "actions",
        type: "group",
        name: "actions",
        fields: [
          createDropdownField("low", "Low Priority", Object.values(NotificationActions.LowEnum).map((value) => ({
            label: this.formatLabel(value),
            value
          })), user?.notifySettings?.actions?.low, {
            name: "low",
            props: {
              appendTo: "body"
            }
          }),
          createDropdownField("medium", "Medium Priority", Object.values(NotificationActions.MediumEnum).map((value) => ({
            label: this.formatLabel(value),
            value
          })), user?.notifySettings?.actions?.medium, {
            name: "medium",
            props: {
              appendTo: "body"
            }
          }),
          createDropdownField("high", "High Priority", Object.values(NotificationActions.HighEnum).map((value) => ({
            label: this.formatLabel(value),
            value
          })), user?.notifySettings?.actions?.high, {
            name: "high",
            props: {
              appendTo: "body"
            }
          })
        ]
      }
    ];
  }
  getUpdateMethod() {
    return this.operationRegistry.getOperation("users", "update") ?? ((id, data) => this.accountsService.updateUser(id, {
      notifySettings: data
    }));
  }
  formatLabel(value) {
    if (!isString(value))
      return "";
    switch (value.toLowerCase()) {
      case "emailsms":
        return "Email & SMS";
      case "sms":
        return "SMS";
      default:
        return value.charAt(0).toUpperCase() + value.slice(1);
    }
  }
  transformFormData(formData) {
    const data = formData;
    if (isDefined(data["smsTime"])) {
      const smsTime = data["smsTime"];
      const from = smsTime?.["from"];
      const to = smsTime?.["to"];
      const timeOnlyRegex = /^\d{2}:\d{2}:\d{2}$/;
      if (!timeOnlyRegex.test(from)) {
        smsTime["from"] = this.convertToTimeOnly(from);
      }
      if (!timeOnlyRegex.test(to)) {
        smsTime["to"] = this.convertToTimeOnly(to);
      }
    }
    return data;
  }
  convertToTimeOnly(dateTimeString) {
    const date = new Date(dateTimeString);
    if (isNaN(date.getTime())) {
      console.warn(`Could not parse '${dateTimeString}' as a valid date. Returning original string.`);
      return dateTimeString;
    }
    const hours = String(date.getHours()).padStart(2, "0");
    const minutes = String(date.getMinutes()).padStart(2, "0");
    const seconds = String(date.getSeconds()).padStart(2, "0");
    return `${hours}:${minutes}:${seconds}`;
  }
  static \u0275fac = function UserNotifySectionComponent_Factory(__ngFactoryType__) {
    return new (__ngFactoryType__ || _UserNotifySectionComponent)();
  };
  static \u0275cmp = /* @__PURE__ */ \u0275\u0275defineComponent({ type: _UserNotifySectionComponent, selectors: [["app-user-notify-section"]], features: [\u0275\u0275InheritDefinitionFeature], decls: 12, vars: 7, consts: [[1, "card", "pt-2"], [1, "mb-4", "p-2", "flex", "justify-start", "items-center"], [1, "!text-[2.5rem]", 3, "icon", "ngClass"], [1, "pl-6", "flex-1"], [1, "flex", "justify-between", "items-center"], [1, "text-xl", "font-semibold", "m-0"], [1, "icon-light"], [3, "fields", "actions", "hideActions"], ["tableStyleClass", "info-display !w-auto", 3, "data", "columns", "showGridLines", "hideHeader"], [1, "pi", "pi-pen-to-square", "action", "hover", "!text-2xl", 3, "click", "keydown.enter"], [3, "formSubmit", "formValidityChange", "formValueChange", "fields", "actions", "hideActions"]], template: function UserNotifySectionComponent_Template(rf, ctx) {
    if (rf & 1) {
      \u0275\u0275elementStart(0, "div", 0)(1, "div", 1);
      \u0275\u0275element(2, "fa-icon", 2);
      \u0275\u0275elementStart(3, "div", 3)(4, "div", 4)(5, "h2", 5);
      \u0275\u0275text(6, "Notifications");
      \u0275\u0275elementEnd();
      \u0275\u0275conditionalCreate(7, UserNotifySectionComponent_Conditional_7_Template, 2, 1, "div", 6);
      \u0275\u0275elementEnd();
      \u0275\u0275elementStart(8, "span");
      \u0275\u0275text(9, "Configure alert notification actions and allowed SMS times.");
      \u0275\u0275elementEnd()()();
      \u0275\u0275conditionalCreate(10, UserNotifySectionComponent_Conditional_10_Template, 1, 3, "app-dynamic-form", 7);
      \u0275\u0275conditionalCreate(11, UserNotifySectionComponent_Conditional_11_Template, 1, 4, "app-grid", 8);
      \u0275\u0275elementEnd();
    }
    if (rf & 2) {
      \u0275\u0275advance(2);
      \u0275\u0275property("icon", ctx.faBell)("ngClass", \u0275\u0275pureFunction1(5, _c042, ctx.isFormEditable()));
      \u0275\u0275advance(5);
      \u0275\u0275conditional(!ctx.isFormEditable() && !ctx.createMode() ? 7 : -1);
      \u0275\u0275advance(3);
      \u0275\u0275conditional(ctx.isFormEditable() || ctx.createMode() && ctx.formFields.length ? 10 : -1);
      \u0275\u0275advance();
      \u0275\u0275conditional(!ctx.isFormEditable() && !ctx.createMode() ? 11 : -1);
    }
  }, dependencies: [
    CommonModule,
    NgClass,
    ButtonModule,
    GridComponent,
    DynamicFormComponent,
    FontAwesomeModule,
    FaIconComponent
  ], encapsulation: 2 });
};
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(UserNotifySectionComponent, [{
    type: Component,
    args: [{ selector: "app-user-notify-section", imports: [
      CommonModule,
      ButtonModule,
      GridComponent,
      DynamicFormComponent,
      FontAwesomeModule
    ], template: `<div class="card pt-2">
  <div class="mb-4 p-2 flex justify-start items-center">
    <fa-icon
      [icon]="faBell"
      class="!text-[2.5rem]"
      [ngClass]="{ 'icon-primary': isFormEditable() }"
    ></fa-icon>

    <div class="pl-6 flex-1">
      <div class="flex justify-between items-center">
        <h2 class="text-xl font-semibold m-0">Notifications</h2>
        @if (!isFormEditable() && !createMode()) {
          <div class="icon-light">
            <span
              class="pi pi-pen-to-square action hover !text-2xl"
              [attr.aria-label]="'Edit notification details'"
              (click)="onEdit()"
              (keydown.enter)="onEdit()"
            ></span>
          </div>
        }
      </div>
      <span>Configure alert notification actions and allowed SMS times.</span>
    </div>
  </div>

  @if (isFormEditable() || (createMode() && formFields.length)) {
    <app-dynamic-form
      [fields]="formFields"
      [actions]="actions"
      [hideActions]="createMode()"
      (formSubmit)="onSubmit($event)"
      (formValidityChange)="onFormValidityChange($event)"
      (formValueChange)="onFormValueChange($event)"
    >
    </app-dynamic-form>
  }

  @if (!isFormEditable() && !createMode()) {
    <app-grid
      [data]="userNotificationDetails()"
      [columns]="columns"
      [showGridLines]="false"
      [hideHeader]="true"
      tableStyleClass="info-display !w-auto"
    ></app-grid>
  }
</div>
` }]
  }], () => [], null);
})();
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && \u0275setClassDebugInfo(UserNotifySectionComponent, { className: "UserNotifySectionComponent", filePath: "src/app/features/administration/components/users/user-notify-section/user-notify-section.component.ts", lineNumber: 38 });
})();

// src/app/features/administration/components/users/user-client-permissions-section/user-client-permissions-section.component.ts
var _c043 = (a0) => ({ "icon-primary": a0 });
function UserClientPermissionsSectionComponent_Conditional_7_Template(rf, ctx) {
  if (rf & 1) {
    const _r1 = \u0275\u0275getCurrentView();
    \u0275\u0275elementStart(0, "div", 6)(1, "span", 9);
    \u0275\u0275listener("click", function UserClientPermissionsSectionComponent_Conditional_7_Template_span_click_1_listener() {
      \u0275\u0275restoreView(_r1);
      const ctx_r1 = \u0275\u0275nextContext();
      return \u0275\u0275resetView(ctx_r1.onEdit());
    })("keydown.enter", function UserClientPermissionsSectionComponent_Conditional_7_Template_span_keydown_enter_1_listener() {
      \u0275\u0275restoreView(_r1);
      const ctx_r1 = \u0275\u0275nextContext();
      return \u0275\u0275resetView(ctx_r1.onEdit());
    });
    \u0275\u0275elementEnd()();
  }
  if (rf & 2) {
    \u0275\u0275advance();
    \u0275\u0275attribute("aria-label", "Edit client permissions");
  }
}
function UserClientPermissionsSectionComponent_Conditional_10_Template(rf, ctx) {
  if (rf & 1) {
    const _r3 = \u0275\u0275getCurrentView();
    \u0275\u0275elementStart(0, "app-dynamic-form", 10);
    \u0275\u0275listener("formSubmit", function UserClientPermissionsSectionComponent_Conditional_10_Template_app_dynamic_form_formSubmit_0_listener($event) {
      \u0275\u0275restoreView(_r3);
      const ctx_r1 = \u0275\u0275nextContext();
      return \u0275\u0275resetView(ctx_r1.onSubmit($event));
    })("formValidityChange", function UserClientPermissionsSectionComponent_Conditional_10_Template_app_dynamic_form_formValidityChange_0_listener($event) {
      \u0275\u0275restoreView(_r3);
      const ctx_r1 = \u0275\u0275nextContext();
      return \u0275\u0275resetView(ctx_r1.onFormValidityChange($event));
    })("formValueChange", function UserClientPermissionsSectionComponent_Conditional_10_Template_app_dynamic_form_formValueChange_0_listener($event) {
      \u0275\u0275restoreView(_r3);
      const ctx_r1 = \u0275\u0275nextContext();
      return \u0275\u0275resetView(ctx_r1.onFormValueChange($event));
    });
    \u0275\u0275elementEnd();
  }
  if (rf & 2) {
    const ctx_r1 = \u0275\u0275nextContext();
    \u0275\u0275property("fields", ctx_r1.formFields)("actions", ctx_r1.actions)("hideActions", ctx_r1.createMode());
  }
}
function UserClientPermissionsSectionComponent_Conditional_11_Template(rf, ctx) {
  if (rf & 1) {
    \u0275\u0275element(0, "app-grid", 8);
  }
  if (rf & 2) {
    const ctx_r1 = \u0275\u0275nextContext();
    \u0275\u0275property("data", ctx_r1.userClientPermissions())("columns", ctx_r1.columns)("showGridLines", false)("hideHeader", true);
  }
}
var UserClientPermissionsSectionComponent = class _UserClientPermissionsSectionComponent extends EntitySectionBaseComponent {
  ownerId = input(null, ...ngDevMode ? [{ debugName: "ownerId" }] : []);
  accountsService = inject(AccountsService);
  requestCache = inject(RequestCacheService);
  utilityService = inject(UtilityService);
  clientsService = inject(ClientsService);
  authDataService = inject(AuthDataService);
  cdr = inject(ChangeDetectorRef);
  faClipboardList = faClipboardList;
  clientNames = signal({}, ...ngDevMode ? [{ debugName: "clientNames" }] : []);
  clientCacheKeys = [];
  userClientPermissions = computed(() => {
    const user = this.entity();
    const permissions = user?.permissions?.clients;
    const names = this.clientNames();
    if (!isDefined(permissions)) {
      return [];
    }
    const clientIds = Object.keys(permissions);
    if (clientIds.length === 0) {
      return [
        {
          key: "Clients",
          value: "No Clients"
        }
      ];
    }
    if (isEmpty(names)) {
      return [
        {
          key: "Clients",
          value: "Loading client names..."
        }
      ];
    }
    const clientNames = clientIds.map((id) => names[id] || id).join(", ");
    return [
      {
        key: "Clients",
        value: clientNames
      }
    ];
  }, ...ngDevMode ? [{ debugName: "userClientPermissions" }] : []);
  clientPermissionsModalConfig;
  clientSearchResults = signal([], ...ngDevMode ? [{ debugName: "clientSearchResults" }] : []);
  searchSubject = new Subject();
  isLoadingClients = signal(false, ...ngDevMode ? [{ debugName: "isLoadingClients" }] : []);
  // Track the selected client ID for the modal form
  // This is used to pass the client ID as ownerId to the asset filter field
  // and to disable the client autocomplete once a selection is made
  selectedClientId = signal(void 0, ...ngDevMode ? [{ debugName: "selectedClientId" }] : []);
  // Force modal refresh when client changes
  modalRefreshTrigger = signal(0, ...ngDevMode ? [{ debugName: "modalRefreshTrigger" }] : []);
  constructor() {
    super();
    this.columns = [
      { field: "key", header: "", transform: "uppercase" },
      { field: "value", header: "" }
    ];
    effect(() => {
      this.selectedClientId();
      if (this.clientPermissionsModalConfig)
        this.rebuildModalFields();
    });
  }
  ngOnInit() {
    void this.loadClientPermissions();
    this.setupClientSearch();
  }
  ngOnDestroy() {
    super.ngOnDestroy();
    this.clientCacheKeys.forEach((key) => {
      this.requestCache.clearCache(key);
    });
    this.clientCacheKeys = [];
  }
  updateFormFields() {
    this.selectedClientId.set(void 0);
    this.modalRefreshTrigger.set(0);
    const userPermissions = this.entity()?.permissions?.clients ?? {};
    const permissionsArray = Object.entries(userPermissions).map(([clientId, permissions]) => __spreadValues({
      clientId
    }, permissions));
    this.clientPermissionsModalConfig = {
      modalComponent: ModalListFormComponent,
      modalTitle: "Client Permissions",
      listItemFormatter: (item) => {
        const clientName = this.clientNames()[item.clientId] || item.clientId;
        return {
          id: item.clientId,
          display: `${clientName}`,
          icon: "pi pi-building"
        };
      },
      modalFields: () => this.createModalFields()
    };
    this.formFields = [
      createModalListField("permissions", "Clients", permissionsArray, {
        name: "permissions",
        validations: [
          {
            name: "required",
            validator: Validators.required,
            message: "Client permissions are required"
          }
        ],
        props: {
          modalConfig: this.clientPermissionsModalConfig
        }
      })
    ];
  }
  rebuildModalFields() {
    if (this.clientPermissionsModalConfig) {
      this.clientPermissionsModalConfig = __spreadProps(__spreadValues({}, this.clientPermissionsModalConfig), {
        modalFields: () => this.createModalFields()
      });
      this.formFields = [...this.formFields];
      this.cdr.detectChanges();
    }
  }
  createModalFields() {
    const currentClientId = this.selectedClientId();
    const clientField = createAutocompleteField("client", "Client", "", () => this.clientSearchResults() || [], this.searchClient.bind(this), {
      name: "client",
      props: {
        forceSelection: true,
        field: "name",
        placeholder: "Search for clients...",
        completeOnFocus: true,
        typeahead: true,
        showEmptyMessage: true,
        appendTo: "body"
      },
      autocompleteLoading: () => this.isLoadingClients(),
      // Reactive loading state
      hint: "Enter a client name.",
      events: {
        onChange: (value) => {
          this.updateSelectedClientId(value);
          this.modalRefreshTrigger.update((count) => count + 1);
          this.cdr.detectChanges();
        }
      }
    });
    clientField.readonly = currentClientId !== void 0;
    const assetFilterField = createAssetFilterField("filter", "Asset Filter", void 0, ["asset"], {
      name: "filter",
      required: true,
      validations: [
        {
          name: "required",
          validator: Validators.required,
          message: "Asset filter is required"
        }
      ],
      props: {
        multiSelect: true,
        showGroupTabs: true,
        ownerId: currentClientId
        // Pass the selected client ID as ownerId
      },
      readonly: currentClientId === void 0
      // Disable if no client selected
    });
    return [clientField, assetFilterField];
  }
  updateSelectedClientId(value) {
    let clientId;
    try {
      const parsedValue = JSON.parse(value);
      if (parsedValue !== null && typeof parsedValue === "object" && "id" in parsedValue) {
        clientId = parsedValue.id;
      }
    } catch {
      if (value && value.trim() !== "") {
        const searchResults = this.clientSearchResults();
        const matchedClient = searchResults?.find((client) => client.id === value || client.name === value);
        if (matchedClient) {
          clientId = matchedClient.id;
        }
      }
    }
    this.selectedClientId.set(clientId);
  }
  submitChanges(formData) {
    const user = this.entity();
    if (isNullOrUndefined(user))
      return;
    this.accountsService.updateUser(user.id, {
      permissions: formData["permissions"]
    }).pipe(takeUntilDestroyed(this.destroyRef)).subscribe({
      next: (response) => {
        this.isFormEditable.set(false);
        this.broadcastService.broadcast("entity-updated", {
          entityType: "user",
          operation: "update",
          entityId: user.id,
          data: response
        });
        void this.loadClientPermissions();
      },
      error: () => {
        this.isFormEditable.set(true);
      }
    });
  }
  getUpdateMethod() {
    return (id, data) => this.accountsService.updateUser(id, data);
  }
  async loadClientPermissions() {
    const user = this.entity();
    const permissions = user?.permissions?.clients;
    if (!isDefined(permissions)) {
      return;
    }
    const clientIds = Object.keys(permissions);
    const namePromises = clientIds.map(async (clientId) => {
      const name = await this.loadClientName(clientId);
      return { id: clientId, name };
    });
    try {
      const clientNamesArray = await Promise.all(namePromises);
      const namesRecord = {};
      clientNamesArray.forEach(({ id, name }) => {
        namesRecord[id] = name;
      });
      this.clientNames.set(namesRecord);
    } catch (error) {
      console.error("Error loading client names:", error);
    }
  }
  async loadClientName(clientId) {
    if (!clientId)
      return Promise.resolve("Unknown Client");
    const cacheKey = `client-name/${clientId}`;
    if (!this.clientCacheKeys.includes(cacheKey)) {
      this.clientCacheKeys.push(cacheKey);
    }
    try {
      const client = await this.requestCache.getOrFetchAsync(cacheKey, () => firstValueFrom(this.accountsService.getClient(clientId)));
      return client.name ?? clientId;
    } catch {
      return "Unknown Client";
    }
  }
  setupClientSearch() {
    this.searchSubject.pipe(debounceTime(SEARCH_DEBOUNCE_TIME), takeUntilDestroyed(this.destroyRef), switchMap((searchTerm) => {
      this.isLoadingClients.set(true);
      const owner = this.authDataService.getUserProfile()?.owner;
      if (!isDefined(owner) || !hasProperty(owner, "id")) {
        throw new Error("Owner ID not found");
      }
      const filters = {
        state: { value: "active", operator: "=" },
        name: { value: `*${searchTerm}*`, operator: "=" }
      };
      const rqlFilter = this.utilityService.constructRqlFilter(filters);
      return this.clientsService.listClients(owner.id, 0, CLIENT_SEARCH_LIMIT, "name", rqlFilter);
    })).subscribe({
      next: (data) => {
        this.isLoadingClients.set(false);
        if (isDefined(data) && hasProperty(data, "items")) {
          this.clientSearchResults.set(isNullOrUndefined(data.items) ? [] : data.items);
          this.cdr.detectChanges();
        }
      },
      error: (error) => {
        this.isLoadingClients.set(false);
        console.error("Error searching clients:", error);
        this.clientSearchResults.set([]);
      }
    });
  }
  searchClient(searchTerm) {
    if (!searchTerm || searchTerm.trim() === "" || searchTerm.length < 3) {
      this.clientSearchResults.set([]);
      this.isLoadingClients.set(false);
    } else {
      this.searchSubject.next(searchTerm.trim());
    }
  }
  static \u0275fac = function UserClientPermissionsSectionComponent_Factory(__ngFactoryType__) {
    return new (__ngFactoryType__ || _UserClientPermissionsSectionComponent)();
  };
  static \u0275cmp = /* @__PURE__ */ \u0275\u0275defineComponent({ type: _UserClientPermissionsSectionComponent, selectors: [["app-user-client-permissions-section"]], inputs: { ownerId: [1, "ownerId"] }, features: [\u0275\u0275InheritDefinitionFeature], decls: 12, vars: 7, consts: [[1, "card", "pt-2"], [1, "mb-4", "p-2", "flex", "justify-start", "items-center"], [1, "!text-[2.5rem]", 3, "icon", "ngClass"], [1, "pl-6", "flex-1"], [1, "flex", "justify-between", "items-center"], [1, "text-xl", "font-semibold", "m-0"], [1, "icon-light"], [3, "fields", "actions", "hideActions"], ["tableStyleClass", "info-display !w-auto", 3, "data", "columns", "showGridLines", "hideHeader"], [1, "pi", "pi-pen-to-square", "action", "hover", "!text-2xl", 3, "click", "keydown.enter"], [3, "formSubmit", "formValidityChange", "formValueChange", "fields", "actions", "hideActions"]], template: function UserClientPermissionsSectionComponent_Template(rf, ctx) {
    if (rf & 1) {
      \u0275\u0275elementStart(0, "div", 0)(1, "div", 1);
      \u0275\u0275element(2, "fa-icon", 2);
      \u0275\u0275elementStart(3, "div", 3)(4, "div", 4)(5, "h2", 5);
      \u0275\u0275text(6, "Client Permissions");
      \u0275\u0275elementEnd();
      \u0275\u0275conditionalCreate(7, UserClientPermissionsSectionComponent_Conditional_7_Template, 2, 1, "div", 6);
      \u0275\u0275elementEnd();
      \u0275\u0275elementStart(8, "span");
      \u0275\u0275text(9, "You can restrict this user to only particular clients and assets by specifying them in the list below.");
      \u0275\u0275elementEnd()()();
      \u0275\u0275conditionalCreate(10, UserClientPermissionsSectionComponent_Conditional_10_Template, 1, 3, "app-dynamic-form", 7);
      \u0275\u0275conditionalCreate(11, UserClientPermissionsSectionComponent_Conditional_11_Template, 1, 4, "app-grid", 8);
      \u0275\u0275elementEnd();
    }
    if (rf & 2) {
      \u0275\u0275advance(2);
      \u0275\u0275property("icon", ctx.faClipboardList)("ngClass", \u0275\u0275pureFunction1(5, _c043, ctx.isFormEditable()));
      \u0275\u0275advance(5);
      \u0275\u0275conditional(!ctx.isFormEditable() && !ctx.createMode() ? 7 : -1);
      \u0275\u0275advance(3);
      \u0275\u0275conditional(ctx.isFormEditable() || ctx.createMode() && ctx.formFields.length ? 10 : -1);
      \u0275\u0275advance();
      \u0275\u0275conditional(!ctx.isFormEditable() && !ctx.createMode() ? 11 : -1);
    }
  }, dependencies: [
    CommonModule,
    NgClass,
    ButtonModule,
    GridComponent,
    MessageModule,
    FontAwesomeModule,
    FaIconComponent,
    DynamicFormComponent
  ], encapsulation: 2 });
};
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(UserClientPermissionsSectionComponent, [{
    type: Component,
    args: [{ selector: "app-user-client-permissions-section", imports: [
      CommonModule,
      ButtonModule,
      GridComponent,
      MessageModule,
      FontAwesomeModule,
      DynamicFormComponent
    ], template: `<div class="card pt-2">
  <div class="mb-4 p-2 flex justify-start items-center">
    <fa-icon
      [icon]="faClipboardList"
      class="!text-[2.5rem]"
      [ngClass]="{ 'icon-primary': isFormEditable() }"
    ></fa-icon>

    <div class="pl-6 flex-1">
      <div class="flex justify-between items-center">
        <h2 class="text-xl font-semibold m-0">Client Permissions</h2>
        @if (!isFormEditable() && !createMode()) {
          <div class="icon-light">
            <span
              class="pi pi-pen-to-square action hover !text-2xl"
              [attr.aria-label]="'Edit client permissions'"
              (click)="onEdit()"
              (keydown.enter)="onEdit()"
            ></span>
          </div>
        }
      </div>
      <span
        >You can restrict this user to only particular clients and assets by
        specifying them in the list below.</span
      >
    </div>
  </div>

  @if (isFormEditable() || (createMode() && formFields.length)) {
    <app-dynamic-form
      [fields]="formFields"
      [actions]="actions"
      [hideActions]="createMode()"
      (formSubmit)="onSubmit($event)"
      (formValidityChange)="onFormValidityChange($event)"
      (formValueChange)="onFormValueChange($event)"
    >
    </app-dynamic-form>
  }

  <!-- Summary View for Read-only Mode -->
  @if (!isFormEditable() && !createMode()) {
    <app-grid
      [data]="userClientPermissions()"
      [columns]="columns"
      [showGridLines]="false"
      [hideHeader]="true"
      tableStyleClass="info-display !w-auto"
    ></app-grid>
  }
</div>
` }]
  }], () => [], { ownerId: [{ type: Input, args: [{ isSignal: true, alias: "ownerId", required: false }] }] });
})();
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && \u0275setClassDebugInfo(UserClientPermissionsSectionComponent, { className: "UserClientPermissionsSectionComponent", filePath: "src/app/features/administration/components/users/user-client-permissions-section/user-client-permissions-section.component.ts", lineNumber: 84 });
})();

// src/app/features/administration/factories/user-section-config.factory.ts
var UserSectionConfigFactory = class _UserSectionConfigFactory {
  /**
   * Create sections for user information
   * @param user The user object to display in the section
   * @returns An array of AdminDetailSection objects representing the user information sections
   */
  createUserInformationSections(user, ownerId) {
    return [
      {
        id: "user-details",
        title: "User Details",
        component: UserDetailsSectionComponent,
        componentInputs: { entity: user, ownerId },
        category: "information",
        order: 10
      },
      {
        id: "user-roles",
        title: "User Roles",
        component: UserRolesSectionComponent,
        componentInputs: { entity: user },
        category: "information",
        order: 20
      },
      {
        id: "user-client-permissions",
        title: "User Client Permissions",
        component: UserClientPermissionsSectionComponent,
        componentInputs: { entity: user },
        category: "information",
        order: 30
      },
      {
        id: "user-api-keys",
        title: "User API Keys",
        component: UserApiKeysSectionComponent,
        componentInputs: { entity: user },
        category: "information",
        order: 70
      },
      {
        id: "user-notifications",
        title: "User Notifications",
        component: UserNotifySectionComponent,
        componentInputs: { entity: user },
        category: "information",
        order: 80
      }
    ];
  }
  /**
   * Create sections for user changes
   * @param user The user object to display in the section
   * @returns An array of AdminDetailSection objects representing the user changes sections
   */
  createChangesSection(user) {
    return [
      {
        id: "user-changes",
        title: "Changes",
        component: FeedSectionComponent,
        componentInputs: {
          entity: user
        },
        category: "feed",
        order: 10
      }
    ];
  }
  /**
   * Create all user sections in one call
   * @param user The user object to display in the sections
   * @returns An array of AdminDetailSection objects representing all user sections
   */
  createAllUserSections(user, ownerId) {
    return [
      ...this.createUserInformationSections(user, ownerId),
      ...this.createChangesSection(user)
    ];
  }
  static \u0275fac = function UserSectionConfigFactory_Factory(__ngFactoryType__) {
    return new (__ngFactoryType__ || _UserSectionConfigFactory)();
  };
  static \u0275prov = /* @__PURE__ */ \u0275\u0275defineInjectable({ token: _UserSectionConfigFactory, factory: _UserSectionConfigFactory.\u0275fac, providedIn: "root" });
};
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(UserSectionConfigFactory, [{
    type: Injectable,
    args: [{ providedIn: "root" }]
  }], null, null);
})();

// src/app/features/administration/services/adapters/assets.adapter.service.ts
var AssetsDataAdapter = class _AssetsDataAdapter {
  entitiesService = inject(EntitiesService);
  getList(params) {
    const { owner, limit, offset, sortField, filters } = params;
    if (isNullOrUndefined(owner)) {
      return of({ items: [], count: 0 });
    }
    return this.entitiesService.listAssets(owner, offset, limit, sortField, filters);
  }
  getById(id) {
    return this.entitiesService.getAsset(id);
  }
  static \u0275fac = function AssetsDataAdapter_Factory(__ngFactoryType__) {
    return new (__ngFactoryType__ || _AssetsDataAdapter)();
  };
  static \u0275prov = /* @__PURE__ */ \u0275\u0275defineInjectable({ token: _AssetsDataAdapter, factory: _AssetsDataAdapter.\u0275fac, providedIn: "root" });
};
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(AssetsDataAdapter, [{
    type: Injectable,
    args: [{
      providedIn: "root"
    }]
  }], null, null);
})();

// src/app/features/administration/services/adapters/geofences.adapter.service.ts
var GeofencesDataAdapter = class _GeofencesDataAdapter {
  entitiesService = inject(EntitiesService);
  getList(params) {
    const { owner, limit, offset, sortField, filters } = params;
    if (isNullOrUndefined(owner)) {
      return of({ items: [], count: 0 });
    }
    return this.entitiesService.listZones(owner, offset, limit, sortField, filters);
  }
  getById(id) {
    return this.entitiesService.getZone(id);
  }
  static \u0275fac = function GeofencesDataAdapter_Factory(__ngFactoryType__) {
    return new (__ngFactoryType__ || _GeofencesDataAdapter)();
  };
  static \u0275prov = /* @__PURE__ */ \u0275\u0275defineInjectable({ token: _GeofencesDataAdapter, factory: _GeofencesDataAdapter.\u0275fac, providedIn: "root" });
};
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(GeofencesDataAdapter, [{
    type: Injectable,
    args: [{
      providedIn: "root"
    }]
  }], null, null);
})();

// src/app/features/administration/services/adapters/alerts.adapter.service.ts
var AlertsDataAdapter = class _AlertsDataAdapter {
  entitiesService = inject(EntitiesService);
  getList(params) {
    const { owner, limit, offset, sortField, filters } = params;
    if (isNullOrUndefined(owner)) {
      return of({ items: [], count: 0 });
    }
    return this.entitiesService.listAlerts(owner, offset, limit, sortField, filters);
  }
  getById(id) {
    return this.entitiesService.getAlert(id);
  }
  static \u0275fac = function AlertsDataAdapter_Factory(__ngFactoryType__) {
    return new (__ngFactoryType__ || _AlertsDataAdapter)();
  };
  static \u0275prov = /* @__PURE__ */ \u0275\u0275defineInjectable({ token: _AlertsDataAdapter, factory: _AlertsDataAdapter.\u0275fac, providedIn: "root" });
};
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(AlertsDataAdapter, [{
    type: Injectable,
    args: [{
      providedIn: "root"
    }]
  }], null, null);
})();

// src/app/features/administration/services/adapters/devices.adapter.service.ts
var DevicesDataAdapter = class _DevicesDataAdapter {
  entitiesService = inject(EntitiesService);
  getList(params) {
    const { owner, limit, offset, sortField, filters } = params;
    if (isNullOrUndefined(owner)) {
      return of({ items: [], count: 0 });
    }
    return this.entitiesService.listDevices(owner, offset, limit, sortField, filters);
  }
  getById(id) {
    return this.entitiesService.getDevice(id);
  }
  static \u0275fac = function DevicesDataAdapter_Factory(__ngFactoryType__) {
    return new (__ngFactoryType__ || _DevicesDataAdapter)();
  };
  static \u0275prov = /* @__PURE__ */ \u0275\u0275defineInjectable({ token: _DevicesDataAdapter, factory: _DevicesDataAdapter.\u0275fac, providedIn: "root" });
};
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(DevicesDataAdapter, [{
    type: Injectable,
    args: [{
      providedIn: "root"
    }]
  }], null, null);
})();

// src/app/features/administration/services/adapters/asset-tags.adapter.service.ts
var AssetTagsDataAdapter = class _AssetTagsDataAdapter {
  entitiesService = inject(EntitiesService);
  getList(params) {
    const { owner, limit, offset, sortField, filters } = params;
    if (isNullOrUndefined(owner)) {
      return of({ items: [], count: 0 });
    }
    return this.entitiesService.listAssetTags(owner, offset, limit, sortField, filters);
  }
  getById(id) {
    return this.entitiesService.getAssetTag(id);
  }
  static \u0275fac = function AssetTagsDataAdapter_Factory(__ngFactoryType__) {
    return new (__ngFactoryType__ || _AssetTagsDataAdapter)();
  };
  static \u0275prov = /* @__PURE__ */ \u0275\u0275defineInjectable({ token: _AssetTagsDataAdapter, factory: _AssetTagsDataAdapter.\u0275fac, providedIn: "root" });
};
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(AssetTagsDataAdapter, [{
    type: Injectable,
    args: [{ providedIn: "root" }]
  }], null, null);
})();

// src/app/features/administration/services/adapters/device-providers-data-adapter.service.ts
var DeviceProvidersDataAdapter = class _DeviceProvidersDataAdapter {
  service = inject(DeviceProvidersService);
  getList(params) {
    return this.service.listDeviceProviders(params.owner, params.recurse, params.offset, params.limit, params.sortField, params.filters);
  }
  getById(id) {
    return this.service.getDeviceProvider(id);
  }
  static \u0275fac = function DeviceProvidersDataAdapter_Factory(__ngFactoryType__) {
    return new (__ngFactoryType__ || _DeviceProvidersDataAdapter)();
  };
  static \u0275prov = /* @__PURE__ */ \u0275\u0275defineInjectable({ token: _DeviceProvidersDataAdapter, factory: _DeviceProvidersDataAdapter.\u0275fac, providedIn: "root" });
};
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(DeviceProvidersDataAdapter, [{
    type: Injectable,
    args: [{
      providedIn: "root"
    }]
  }], null, null);
})();

// src/app/features/administration/services/adapters/email-providers-data-adapter.service.ts
var EmailProvidersDataAdapter = class _EmailProvidersDataAdapter {
  service = inject(EmailProvidersService);
  getList(params) {
    return this.service.listEmailProviders(params.owner, params.offset, params.limit, params.sortField, params.filters);
  }
  getById(id) {
    return this.service.getEmailProvider(id);
  }
  static \u0275fac = function EmailProvidersDataAdapter_Factory(__ngFactoryType__) {
    return new (__ngFactoryType__ || _EmailProvidersDataAdapter)();
  };
  static \u0275prov = /* @__PURE__ */ \u0275\u0275defineInjectable({ token: _EmailProvidersDataAdapter, factory: _EmailProvidersDataAdapter.\u0275fac, providedIn: "root" });
};
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(EmailProvidersDataAdapter, [{
    type: Injectable,
    args: [{
      providedIn: "root"
    }]
  }], null, null);
})();

// src/app/features/administration/services/adapters/sim-cards.adapter.service.ts
var SimCardsDataAdapter = class _SimCardsDataAdapter {
  entitiesService = inject(EntitiesService);
  getList(params) {
    const { owner, limit, offset, sortField, filters } = params;
    if (isNullOrUndefined(owner)) {
      return of({ items: [], count: 0 });
    }
    return this.entitiesService.listSimCards(owner, offset, limit, sortField, filters);
  }
  getById(id) {
    return this.entitiesService.getSimCard(id);
  }
  static \u0275fac = function SimCardsDataAdapter_Factory(__ngFactoryType__) {
    return new (__ngFactoryType__ || _SimCardsDataAdapter)();
  };
  static \u0275prov = /* @__PURE__ */ \u0275\u0275defineInjectable({ token: _SimCardsDataAdapter, factory: _SimCardsDataAdapter.\u0275fac, providedIn: "root" });
};
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(SimCardsDataAdapter, [{
    type: Injectable,
    args: [{
      providedIn: "root"
    }]
  }], null, null);
})();

// src/app/features/administration/services/adapters/sms-gateway-provider.adapter.service.ts
var SmsGatewayProvidersDataAdapter = class _SmsGatewayProvidersDataAdapter {
  entitiesService = inject(EntitiesService);
  getList(params) {
    const { owner, limit, offset, sortField, filters } = params;
    if (isNullOrUndefined(owner)) {
      return of({ items: [], count: 0 });
    }
    return this.entitiesService.listSmsGatewayProviders(owner, offset, limit, sortField, filters);
  }
  getById(id) {
    return this.entitiesService.getSmsGatewayProvider(id);
  }
  static \u0275fac = function SmsGatewayProvidersDataAdapter_Factory(__ngFactoryType__) {
    return new (__ngFactoryType__ || _SmsGatewayProvidersDataAdapter)();
  };
  static \u0275prov = /* @__PURE__ */ \u0275\u0275defineInjectable({ token: _SmsGatewayProvidersDataAdapter, factory: _SmsGatewayProvidersDataAdapter.\u0275fac, providedIn: "root" });
};
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(SmsGatewayProvidersDataAdapter, [{
    type: Injectable,
    args: [{
      providedIn: "root"
    }]
  }], null, null);
})();

// src/app/features/administration/services/adapters/io-types.adapter.service.ts
var IoTypesDataAdapter = class _IoTypesDataAdapter {
  entitiesService = inject(EntitiesService);
  getList(params) {
    const { owner, limit, offset, sortField, filters, recurse } = params;
    if (isNullOrUndefined(owner)) {
      return of({ items: [], count: 0 });
    }
    return this.entitiesService.listIoTypes(owner, recurse, offset, limit, sortField, filters);
  }
  getById(id) {
    return this.entitiesService.getIoType(id);
  }
  static \u0275fac = function IoTypesDataAdapter_Factory(__ngFactoryType__) {
    return new (__ngFactoryType__ || _IoTypesDataAdapter)();
  };
  static \u0275prov = /* @__PURE__ */ \u0275\u0275defineInjectable({ token: _IoTypesDataAdapter, factory: _IoTypesDataAdapter.\u0275fac, providedIn: "root" });
};
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(IoTypesDataAdapter, [{
    type: Injectable,
    args: [{
      providedIn: "root"
    }]
  }], null, null);
})();

// src/app/features/administration/services/adapters/device-config-profiles.adapter.service.ts
var DeviceConfigProfilesDataAdapter = class _DeviceConfigProfilesDataAdapter {
  entitiesService = inject(EntitiesService);
  getList(params) {
    const { owner, limit, offset, sortField, filters, recurse } = params;
    if (isNullOrUndefined(owner)) {
      return of({ items: [], count: 0 });
    }
    return this.entitiesService.listDeviceConfigProfiles(owner, recurse, offset, limit, sortField, filters);
  }
  getById(id) {
    return this.entitiesService.getDeviceConfigProfile(id);
  }
  static \u0275fac = function DeviceConfigProfilesDataAdapter_Factory(__ngFactoryType__) {
    return new (__ngFactoryType__ || _DeviceConfigProfilesDataAdapter)();
  };
  static \u0275prov = /* @__PURE__ */ \u0275\u0275defineInjectable({ token: _DeviceConfigProfilesDataAdapter, factory: _DeviceConfigProfilesDataAdapter.\u0275fac, providedIn: "root" });
};
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(DeviceConfigProfilesDataAdapter, [{
    type: Injectable,
    args: [{
      providedIn: "root"
    }]
  }], null, null);
})();

// src/app/features/administration/services/adapters/vendors.adapter.service.ts
var VendorsDataAdapter = class _VendorsDataAdapter {
  accountsService = inject(AccountsService);
  getList(params) {
    const { owner, limit, offset, sortField, filters, counts } = params;
    if (isNullOrUndefined(owner)) {
      return of({ items: [], count: 0 });
    }
    return this.accountsService.listVendors(owner, offset, limit, sortField, filters, counts);
  }
  getById(id) {
    return this.accountsService.getVendor(id);
  }
  static \u0275fac = function VendorsDataAdapter_Factory(__ngFactoryType__) {
    return new (__ngFactoryType__ || _VendorsDataAdapter)();
  };
  static \u0275prov = /* @__PURE__ */ \u0275\u0275defineInjectable({ token: _VendorsDataAdapter, factory: _VendorsDataAdapter.\u0275fac, providedIn: "root" });
};
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(VendorsDataAdapter, [{
    type: Injectable,
    args: [{
      providedIn: "root"
    }]
  }], null, null);
})();

// src/app/features/administration/services/adapters/asset-rating-profiles.adapter.service.ts
var AssetRatingProfilesDataAdapter = class _AssetRatingProfilesDataAdapter {
  entitiesService = inject(EntitiesService);
  getList(params) {
    const { owner, limit, offset, sortField, filters } = params;
    if (isNullOrUndefined(owner)) {
      return of({ items: [], count: 0 });
    }
    return this.entitiesService.listAssetRatingProfiles(owner, offset, limit, sortField, filters);
  }
  getById(id) {
    return this.entitiesService.getAssetRatingProfile(id);
  }
  static \u0275fac = function AssetRatingProfilesDataAdapter_Factory(__ngFactoryType__) {
    return new (__ngFactoryType__ || _AssetRatingProfilesDataAdapter)();
  };
  static \u0275prov = /* @__PURE__ */ \u0275\u0275defineInjectable({ token: _AssetRatingProfilesDataAdapter, factory: _AssetRatingProfilesDataAdapter.\u0275fac, providedIn: "root" });
};
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(AssetRatingProfilesDataAdapter, [{
    type: Injectable,
    args: [{
      providedIn: "root"
    }]
  }], null, null);
})();

// src/app/features/administration/services/adapters/asset-state-profiles.adapter.service.ts
var AssetStateProfilesDataAdapter = class _AssetStateProfilesDataAdapter {
  entitiesService = inject(EntitiesService);
  getList(params) {
    const { owner, limit, offset, sortField, filters } = params;
    if (isNullOrUndefined(owner)) {
      return of({ items: [], count: 0 });
    }
    return this.entitiesService.listAssetStateProfiles(owner, offset, limit, sortField, filters);
  }
  getById(id) {
    return this.entitiesService.getAssetStateProfile(id);
  }
  static \u0275fac = function AssetStateProfilesDataAdapter_Factory(__ngFactoryType__) {
    return new (__ngFactoryType__ || _AssetStateProfilesDataAdapter)();
  };
  static \u0275prov = /* @__PURE__ */ \u0275\u0275defineInjectable({ token: _AssetStateProfilesDataAdapter, factory: _AssetStateProfilesDataAdapter.\u0275fac, providedIn: "root" });
};
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(AssetStateProfilesDataAdapter, [{
    type: Injectable,
    args: [{
      providedIn: "root"
    }]
  }], null, null);
})();

// src/app/features/administration/services/adapters/overspeed-profiles.adapter.service.ts
var OverspeedProfilesDataAdapter = class _OverspeedProfilesDataAdapter {
  entitiesService = inject(EntitiesService);
  getList(params) {
    const { owner, limit, offset, sortField, filters, recurse } = params;
    if (isNullOrUndefined(owner)) {
      return of({ items: [], count: 0 });
    }
    return this.entitiesService.listOverspeedProfiles(owner, recurse, offset, limit, sortField, filters);
  }
  getById(id) {
    return this.entitiesService.getOverspeedProfile(id);
  }
  static \u0275fac = function OverspeedProfilesDataAdapter_Factory(__ngFactoryType__) {
    return new (__ngFactoryType__ || _OverspeedProfilesDataAdapter)();
  };
  static \u0275prov = /* @__PURE__ */ \u0275\u0275defineInjectable({ token: _OverspeedProfilesDataAdapter, factory: _OverspeedProfilesDataAdapter.\u0275fac, providedIn: "root" });
};
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(OverspeedProfilesDataAdapter, [{
    type: Injectable,
    args: [{
      providedIn: "root"
    }]
  }], null, null);
})();

// src/app/features/administration/services/adapters/road-profiles.adapter.service.ts
var RoadProfilesDataAdapter = class _RoadProfilesDataAdapter {
  entitiesService = inject(EntitiesService);
  getList(params) {
    const { owner, limit, offset, sortField, filters, recurse } = params;
    if (isNullOrUndefined(owner)) {
      return of({ items: [], count: 0 });
    }
    return this.entitiesService.listRoadProfiles(owner, recurse, offset, limit, sortField, filters);
  }
  getById(id) {
    return this.entitiesService.getRoadProfile(id);
  }
  static \u0275fac = function RoadProfilesDataAdapter_Factory(__ngFactoryType__) {
    return new (__ngFactoryType__ || _RoadProfilesDataAdapter)();
  };
  static \u0275prov = /* @__PURE__ */ \u0275\u0275defineInjectable({ token: _RoadProfilesDataAdapter, factory: _RoadProfilesDataAdapter.\u0275fac, providedIn: "root" });
};
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(RoadProfilesDataAdapter, [{
    type: Injectable,
    args: [{
      providedIn: "root"
    }]
  }], null, null);
})();

// src/app/features/administration/services/adapters/geo-lock-profiles.adapter.service.ts
var GeoLockProfilesDataAdapter = class _GeoLockProfilesDataAdapter {
  entitiesService = inject(EntitiesService);
  getList(params) {
    const { owner, limit, offset, sortField, filters, recurse } = params;
    if (isNullOrUndefined(owner)) {
      return of({ items: [], count: 0 });
    }
    return this.entitiesService.listGeoLockProfiles(owner, recurse, offset, limit, sortField, filters);
  }
  getById(id) {
    return this.entitiesService.getGeoLockProfile(id);
  }
  static \u0275fac = function GeoLockProfilesDataAdapter_Factory(__ngFactoryType__) {
    return new (__ngFactoryType__ || _GeoLockProfilesDataAdapter)();
  };
  static \u0275prov = /* @__PURE__ */ \u0275\u0275defineInjectable({ token: _GeoLockProfilesDataAdapter, factory: _GeoLockProfilesDataAdapter.\u0275fac, providedIn: "root" });
};
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(GeoLockProfilesDataAdapter, [{
    type: Injectable,
    args: [{
      providedIn: "root"
    }]
  }], null, null);
})();

// src/app/features/administration/services/adapters/custom-fields.adapter.service.ts
var CustomFieldsDataAdapter = class _CustomFieldsDataAdapter {
  entitiesService = inject(EntitiesService);
  accountsService = inject(AccountsService);
  cacheService = inject(RequestCacheService);
  utilityService = inject(UtilityService);
  assetTypes = signal([], ...ngDevMode ? [{ debugName: "assetTypes" }] : []);
  types = signal([], ...ngDevMode ? [{ debugName: "types" }] : []);
  getList(params) {
    const { owner, limit, offset, filters } = params;
    if (isNullOrUndefined(owner)) {
      return of({ items: [], count: 0, title: "", type: "", limit, offset });
    }
    return combineLatest([
      this.accountsService.getCompany(owner),
      this.getCachedAssetTypes(owner),
      this.getTypes()
    ]).pipe(map(([company, assetTypes, types]) => {
      const items = [];
      Object.keys(company.customFields || {}).forEach((fieldType) => {
        (company.customFields?.[fieldType] || []).filter((x) => x["owner"] === company.type).forEach((field) => {
          items.push(this.customFieldDefinitionToCustomFieldResponse(assetTypes.items, types, owner, fieldType, field));
        });
      });
      this.assetTypes.set(assetTypes.items);
      this.types.set(types);
      return {
        title: "Custom Fields",
        type: "custom-field",
        count: items.length,
        limit,
        offset,
        items: this.filter(filters ?? "", items)
      };
    }));
  }
  getById(_id) {
    const [ownerId] = _id.split(".");
    if (!ownerId) {
      return EMPTY;
    }
    const params = {
      owner: ownerId,
      limit: 0,
      // We don't need pagination here
      offset: 0
    };
    return this.getList(params).pipe(map((responseList) => {
      return responseList.items.find((item) => item.id === _id);
    }), map((item) => {
      if (!item) {
        return {};
      }
      return item;
    }));
  }
  customFieldDefinitionToCustomFieldResponse(entityTypes, types, ownerId, entityType, field) {
    return {
      id: `${ownerId}.${entityType}.${field.id}`,
      tag: field.id,
      name: field.title,
      required: field.required,
      _entityType: entityTypes.find((x) => x.id === entityType),
      type: types.find((x) => x.id === field.type),
      values: (field.values ?? []).map((x) => x.key).join("\n")
    };
  }
  getTypes() {
    return of(CUSTOM_FIELD_TYPES.map((type) => ({
      id: type,
      name: CUSTOM_FIELD_TYPES_MAP[type]
    })));
  }
  getCachedAssetTypes(ownerId) {
    const cacheKey = `assetTypes-${ownerId}`;
    return this.cacheService.getOrFetch(cacheKey, () => this.entitiesService.listAssetTypes(ownerId));
  }
  filter(filter, items) {
    const matches = (f, item) => {
      const [field, match] = f.split("=");
      if (!match) {
        return true;
      }
      const value = this.getNestedValue(item, field) ?? "";
      if (match.includes("*")) {
        return this.utilityService.escapeRqlValue(value).toLowerCase().includes(match.replace(/\*/g, "").toLowerCase());
      }
      return value.toLowerCase() === match.toLowerCase();
    };
    const filters = (filter || "").split(",").filter((term) => term).map((term) => {
      if (term.includes("|")) {
        return term.slice(1, term.length - 1).split("|");
      }
      return [term];
    });
    return filters.reduce((result, column) => result.filter((item) => column.some((term) => matches(term, item))), items).sort((a, b) => {
      const aName = a.name.toLowerCase();
      const bName = b.name.toLowerCase();
      if (aName < bName) {
        return -1;
      }
      if (aName > bName) {
        return 1;
      }
      return 0;
    });
  }
  getCustomFieldResponseFromCompany(company, id) {
    const customField = company.items.find((x) => x.id === id);
    if (customField) {
      return customField;
    }
    return void 0;
  }
  getNestedValue(obj, path) {
    return path.split(".").reduce((acc, key) => {
      if (isDefined(acc) && acc !== null && typeof acc === "object" && key in acc) {
        return acc[key];
      }
      return void 0;
    }, obj);
  }
  static \u0275fac = function CustomFieldsDataAdapter_Factory(__ngFactoryType__) {
    return new (__ngFactoryType__ || _CustomFieldsDataAdapter)();
  };
  static \u0275prov = /* @__PURE__ */ \u0275\u0275defineInjectable({ token: _CustomFieldsDataAdapter, factory: _CustomFieldsDataAdapter.\u0275fac, providedIn: "root" });
};
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(CustomFieldsDataAdapter, [{
    type: Injectable,
    args: [{
      providedIn: "root"
    }]
  }], null, null);
})();

// src/app/features/administration/services/adapters/cost-centres.adapter.service.ts
var CostCentresDataAdapter = class _CostCentresDataAdapter extends BaseTreeAdapter {
  entitiesService = inject(EntitiesService);
  fetchEntities(owner, offset, limit, sortField, filters) {
    return this.entitiesService.listCostCentres(owner, offset, limit, sortField, filters);
  }
  getById(id) {
    return this.entitiesService.getCostCentre(id);
  }
  static \u0275fac = /* @__PURE__ */ (() => {
    let \u0275CostCentresDataAdapter_BaseFactory;
    return function CostCentresDataAdapter_Factory(__ngFactoryType__) {
      return (\u0275CostCentresDataAdapter_BaseFactory || (\u0275CostCentresDataAdapter_BaseFactory = \u0275\u0275getInheritedFactory(_CostCentresDataAdapter)))(__ngFactoryType__ || _CostCentresDataAdapter);
    };
  })();
  static \u0275prov = /* @__PURE__ */ \u0275\u0275defineInjectable({ token: _CostCentresDataAdapter, factory: _CostCentresDataAdapter.\u0275fac, providedIn: "root" });
};
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(CostCentresDataAdapter, [{
    type: Injectable,
    args: [{
      providedIn: "root"
    }]
  }], null, null);
})();

// src/app/features/administration/services/adapters/asset-groups-adapter.service.ts
var AssetGroupsDataAdapter = class _AssetGroupsDataAdapter extends BaseTreeAdapter {
  entitiesService = inject(EntitiesService);
  fetchEntities(owner, offset, limit, sortField, filters) {
    return this.entitiesService.listAssetGroups(owner, offset, limit, sortField, filters);
  }
  getById(id) {
    return this.entitiesService.getAssetGroup(id);
  }
  static \u0275fac = /* @__PURE__ */ (() => {
    let \u0275AssetGroupsDataAdapter_BaseFactory;
    return function AssetGroupsDataAdapter_Factory(__ngFactoryType__) {
      return (\u0275AssetGroupsDataAdapter_BaseFactory || (\u0275AssetGroupsDataAdapter_BaseFactory = \u0275\u0275getInheritedFactory(_AssetGroupsDataAdapter)))(__ngFactoryType__ || _AssetGroupsDataAdapter);
    };
  })();
  static \u0275prov = /* @__PURE__ */ \u0275\u0275defineInjectable({ token: _AssetGroupsDataAdapter, factory: _AssetGroupsDataAdapter.\u0275fac, providedIn: "root" });
};
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(AssetGroupsDataAdapter, [{
    type: Injectable,
    args: [{
      providedIn: "root"
    }]
  }], null, null);
})();

// src/app/features/administration/services/adapters/asset-categories.adapter.service.ts
var AssetCategoriesDataAdapter = class _AssetCategoriesDataAdapter extends BaseTreeAdapter {
  entitiesService = inject(EntitiesService);
  fetchEntities(owner, offset, limit, sortField, filters) {
    return this.entitiesService.listAssetCategories(owner, offset, limit, sortField, filters);
  }
  getById(id) {
    return this.entitiesService.getAssetCategory(id);
  }
  static \u0275fac = /* @__PURE__ */ (() => {
    let \u0275AssetCategoriesDataAdapter_BaseFactory;
    return function AssetCategoriesDataAdapter_Factory(__ngFactoryType__) {
      return (\u0275AssetCategoriesDataAdapter_BaseFactory || (\u0275AssetCategoriesDataAdapter_BaseFactory = \u0275\u0275getInheritedFactory(_AssetCategoriesDataAdapter)))(__ngFactoryType__ || _AssetCategoriesDataAdapter);
    };
  })();
  static \u0275prov = /* @__PURE__ */ \u0275\u0275defineInjectable({ token: _AssetCategoriesDataAdapter, factory: _AssetCategoriesDataAdapter.\u0275fac, providedIn: "root" });
};
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(AssetCategoriesDataAdapter, [{
    type: Injectable,
    args: [{
      providedIn: "root"
    }]
  }], null, null);
})();

// src/app/features/administration/services/adapters/geofence-groups.adapter.service.ts
var GeofenceGroupsDataAdapter = class _GeofenceGroupsDataAdapter extends BaseTreeAdapter {
  entitiesService = inject(EntitiesService);
  fetchEntities(owner, offset, limit, sortField, filters) {
    return this.entitiesService.listZoneGroups(owner, offset, limit, sortField, filters);
  }
  getById(id) {
    return this.entitiesService.getZoneGroup(id);
  }
  static \u0275fac = /* @__PURE__ */ (() => {
    let \u0275GeofenceGroupsDataAdapter_BaseFactory;
    return function GeofenceGroupsDataAdapter_Factory(__ngFactoryType__) {
      return (\u0275GeofenceGroupsDataAdapter_BaseFactory || (\u0275GeofenceGroupsDataAdapter_BaseFactory = \u0275\u0275getInheritedFactory(_GeofenceGroupsDataAdapter)))(__ngFactoryType__ || _GeofenceGroupsDataAdapter);
    };
  })();
  static \u0275prov = /* @__PURE__ */ \u0275\u0275defineInjectable({ token: _GeofenceGroupsDataAdapter, factory: _GeofenceGroupsDataAdapter.\u0275fac, providedIn: "root" });
};
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(GeofenceGroupsDataAdapter, [{
    type: Injectable,
    args: [{
      providedIn: "root"
    }]
  }], null, null);
})();

// src/app/features/administration/services/adapters/users.adapter.service.ts
var UsersDataAdapter = class _UsersDataAdapter {
  accountsService = inject(AccountsService);
  getList(params) {
    const { owner, limit, offset, sortField, filters } = params;
    if (isNullOrUndefined(owner)) {
      return of({ items: [], count: 0 });
    }
    return this.accountsService.listUsers(owner, offset, limit, sortField, filters);
  }
  getById(id) {
    return this.accountsService.getUser(id);
  }
  static \u0275fac = function UsersDataAdapter_Factory(__ngFactoryType__) {
    return new (__ngFactoryType__ || _UsersDataAdapter)();
  };
  static \u0275prov = /* @__PURE__ */ \u0275\u0275defineInjectable({ token: _UsersDataAdapter, factory: _UsersDataAdapter.\u0275fac, providedIn: "root" });
};
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(UsersDataAdapter, [{
    type: Injectable,
    args: [{
      providedIn: "root"
    }]
  }], null, null);
})();

// src/app/features/administration/services/adapters/user-roles.adapter.service.ts
var UserRolesDataAdapter = class _UserRolesDataAdapter {
  accountsService = inject(AccountsService);
  getList(params) {
    const { owner, limit, offset, sortField, filters } = params;
    if (isNullOrUndefined(owner)) {
      return of({ items: [], count: 0 });
    }
    return this.accountsService.listUserRoles(owner, offset, limit, sortField, filters);
  }
  getById(id) {
    return this.accountsService.getUserRole(id);
  }
  static \u0275fac = function UserRolesDataAdapter_Factory(__ngFactoryType__) {
    return new (__ngFactoryType__ || _UserRolesDataAdapter)();
  };
  static \u0275prov = /* @__PURE__ */ \u0275\u0275defineInjectable({ token: _UserRolesDataAdapter, factory: _UserRolesDataAdapter.\u0275fac, providedIn: "root" });
};
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(UserRolesDataAdapter, [{
    type: Injectable,
    args: [{
      providedIn: "root"
    }]
  }], null, null);
})();

// src/app/features/administration/services/adapters/themes.adapter.service.ts
var ThemesDataAdapter = class _ThemesDataAdapter {
  entitiesService = inject(EntitiesService);
  getList(params) {
    const { owner, limit, offset, sortField, filters, recurse } = params;
    if (isNullOrUndefined(owner)) {
      return of({ items: [], count: 0 });
    }
    return this.entitiesService.listThemes(owner, recurse, offset, limit, sortField, filters);
  }
  getById(id) {
    return this.entitiesService.getTheme(id);
  }
  static \u0275fac = function ThemesDataAdapter_Factory(__ngFactoryType__) {
    return new (__ngFactoryType__ || _ThemesDataAdapter)();
  };
  static \u0275prov = /* @__PURE__ */ \u0275\u0275defineInjectable({ token: _ThemesDataAdapter, factory: _ThemesDataAdapter.\u0275fac, providedIn: "root" });
};
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(ThemesDataAdapter, [{
    type: Injectable,
    args: [{
      providedIn: "root"
    }]
  }], null, null);
})();

// src/app/features/administration/services/adapters/company-groups.adapter.service.ts
var CompanyGroupsDataAdapter = class _CompanyGroupsDataAdapter extends BaseTreeAdapter {
  accountsService = inject(AccountsService);
  fetchEntities(owner, offset, limit, sortField, filters) {
    return this.accountsService.listCompanyGroups(owner, offset, limit, sortField, filters);
  }
  getById(id) {
    return this.accountsService.getCompanyGroup(id);
  }
  static \u0275fac = /* @__PURE__ */ (() => {
    let \u0275CompanyGroupsDataAdapter_BaseFactory;
    return function CompanyGroupsDataAdapter_Factory(__ngFactoryType__) {
      return (\u0275CompanyGroupsDataAdapter_BaseFactory || (\u0275CompanyGroupsDataAdapter_BaseFactory = \u0275\u0275getInheritedFactory(_CompanyGroupsDataAdapter)))(__ngFactoryType__ || _CompanyGroupsDataAdapter);
    };
  })();
  static \u0275prov = /* @__PURE__ */ \u0275\u0275defineInjectable({ token: _CompanyGroupsDataAdapter, factory: _CompanyGroupsDataAdapter.\u0275fac, providedIn: "root" });
};
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(CompanyGroupsDataAdapter, [{
    type: Injectable,
    args: [{
      providedIn: "root"
    }]
  }], null, null);
})();

// src/app/features/administration/services/adapters/clients.adapter.service.ts
var ClientsDataAdapter = class _ClientsDataAdapter {
  accountsService = inject(AccountsService);
  /**
   * Retrieves a list of clients
   * @param params Grid parameters (requires owner to be specified)
   * @returns Observable of client list response
   */
  getList(params) {
    const { owner, limit, offset, sortField, filters, counts } = params;
    if (isNullOrUndefined(owner)) {
      return of({ items: [], count: 0 });
    }
    return this.accountsService.listClients(owner, offset, limit, sortField, filters, counts);
  }
  getById(id) {
    return this.accountsService.getClient(id);
  }
  static \u0275fac = function ClientsDataAdapter_Factory(__ngFactoryType__) {
    return new (__ngFactoryType__ || _ClientsDataAdapter)();
  };
  static \u0275prov = /* @__PURE__ */ \u0275\u0275defineInjectable({ token: _ClientsDataAdapter, factory: _ClientsDataAdapter.\u0275fac, providedIn: "root" });
};
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(ClientsDataAdapter, [{
    type: Injectable,
    args: [{
      providedIn: "root"
    }]
  }], null, null);
})();

// src/app/features/administration/services/adapters/distributors.adapter.service.ts
var DistributorsDataAdapter = class _DistributorsDataAdapter {
  accountsService = inject(AccountsService);
  /**
   * Retrieves a list of distributors
   * @param params Grid parameters (requires owner to be specified)
   * @returns Observable of distributor list response
   */
  getList(params) {
    const { owner, limit, offset, sortField, filters, counts } = params;
    if (isNullOrUndefined(owner)) {
      return of({ items: [], count: 0 });
    }
    return this.accountsService.listDistributors(owner, offset, limit, sortField, filters, counts);
  }
  getById(id) {
    return this.accountsService.getDistributor(id);
  }
  static \u0275fac = function DistributorsDataAdapter_Factory(__ngFactoryType__) {
    return new (__ngFactoryType__ || _DistributorsDataAdapter)();
  };
  static \u0275prov = /* @__PURE__ */ \u0275\u0275defineInjectable({ token: _DistributorsDataAdapter, factory: _DistributorsDataAdapter.\u0275fac, providedIn: "root" });
};
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(DistributorsDataAdapter, [{
    type: Injectable,
    args: [{
      providedIn: "root"
    }]
  }], null, null);
})();

// src/app/features/administration/components/custom-fields/custom-field-details-section/custom-field-details-section.component.ts
var _c044 = (a0) => ({ "icon-primary": a0 });
function CustomFieldDetailsSectionComponent_Conditional_7_Template(rf, ctx) {
  if (rf & 1) {
    const _r1 = \u0275\u0275getCurrentView();
    \u0275\u0275elementStart(0, "div", 6)(1, "span", 9);
    \u0275\u0275listener("click", function CustomFieldDetailsSectionComponent_Conditional_7_Template_span_click_1_listener() {
      \u0275\u0275restoreView(_r1);
      const ctx_r1 = \u0275\u0275nextContext();
      return \u0275\u0275resetView(ctx_r1.onEdit());
    })("keydown.enter", function CustomFieldDetailsSectionComponent_Conditional_7_Template_span_keydown_enter_1_listener() {
      \u0275\u0275restoreView(_r1);
      const ctx_r1 = \u0275\u0275nextContext();
      return \u0275\u0275resetView(ctx_r1.onEdit());
    });
    \u0275\u0275elementEnd()();
  }
  if (rf & 2) {
    \u0275\u0275advance();
    \u0275\u0275attribute("aria-label", "Edit custom field details");
  }
}
function CustomFieldDetailsSectionComponent_Conditional_10_Template(rf, ctx) {
  if (rf & 1) {
    const _r3 = \u0275\u0275getCurrentView();
    \u0275\u0275elementStart(0, "app-dynamic-form", 10);
    \u0275\u0275listener("formSubmit", function CustomFieldDetailsSectionComponent_Conditional_10_Template_app_dynamic_form_formSubmit_0_listener($event) {
      \u0275\u0275restoreView(_r3);
      const ctx_r1 = \u0275\u0275nextContext();
      return \u0275\u0275resetView(ctx_r1.onSubmit($event));
    })("formValidityChange", function CustomFieldDetailsSectionComponent_Conditional_10_Template_app_dynamic_form_formValidityChange_0_listener($event) {
      \u0275\u0275restoreView(_r3);
      const ctx_r1 = \u0275\u0275nextContext();
      return \u0275\u0275resetView(ctx_r1.onFormValidityChange($event));
    })("formValueChange", function CustomFieldDetailsSectionComponent_Conditional_10_Template_app_dynamic_form_formValueChange_0_listener($event) {
      \u0275\u0275restoreView(_r3);
      const ctx_r1 = \u0275\u0275nextContext();
      return \u0275\u0275resetView(ctx_r1.onFormValueChange($event));
    });
    \u0275\u0275elementEnd();
  }
  if (rf & 2) {
    const ctx_r1 = \u0275\u0275nextContext();
    \u0275\u0275property("fields", ctx_r1.formFields)("actions", ctx_r1.actions)("hideActions", ctx_r1.createMode());
  }
}
function CustomFieldDetailsSectionComponent_Conditional_11_Template(rf, ctx) {
  if (rf & 1) {
    \u0275\u0275element(0, "app-grid", 8);
  }
  if (rf & 2) {
    const ctx_r1 = \u0275\u0275nextContext();
    \u0275\u0275property("data", ctx_r1.customFieldDetails())("columns", ctx_r1.columns)("showGridLines", false)("hideHeader", true);
  }
}
var CustomFieldDetailsSectionComponent = class _CustomFieldDetailsSectionComponent extends EntitySectionBaseComponent {
  dialogConfig = inject(DynamicDialogConfig, {
    optional: true
  });
  accountsService = inject(AccountsService);
  utilityService = inject(UtilityService);
  customFieldsAdapter = inject(CustomFieldsDataAdapter);
  customFieldDetails = computed(() => {
    const customFieldDetails = this.entity();
    if (!isDefined(customFieldDetails))
      return [];
    if (!("id" in customFieldDetails))
      return [];
    const [_ownerId, _entityTypeFromId, fieldId] = customFieldDetails.id.split(".");
    return [
      { key: "Id", value: fieldId ?? "None" },
      { key: "Name", value: customFieldDetails.name ?? "None" },
      {
        key: "Applies To",
        value: customFieldDetails?._entityType?.name ?? "None"
      },
      {
        key: "Required",
        value: customFieldDetails.required === true ? "Yes" : "No"
      },
      {
        key: "Type",
        value: customFieldDetails.type?.name ?? "None"
      }
    ];
  }, ...ngDevMode ? [{ debugName: "customFieldDetails" }] : []);
  selectOptionsLoaded = signal(false, ...ngDevMode ? [{ debugName: "selectOptionsLoaded" }] : []);
  selectOptions = {};
  constructor() {
    super();
    this.columns = [
      { field: "key", header: "", transform: "uppercase" },
      { field: "value", header: "" }
    ];
    effect(() => {
      const selectOptionsLoaded = this.selectOptionsLoaded();
      if (selectOptionsLoaded) {
        untracked(() => {
          this.updateFormFields();
        });
      }
    });
  }
  ngOnInit() {
    this.loadSelectOptions();
  }
  loadSelectOptions() {
    const customField = this.entity();
    let ownerId;
    if (isDefined(this.dialogConfig?.data?.ownerId)) {
      ownerId = this.dialogConfig?.data?.ownerId;
    } else if (customField?.id && typeof customField.id === "string") {
      const idParts = customField.id.split(".");
      if (idParts.length > 0) {
        ownerId = idParts[0];
      }
    }
    if (isNullOrUndefined(ownerId)) {
      this.selectOptions = {};
      this.selectOptionsLoaded.set(true);
      this.updateFormFields();
      return;
    }
    this.customFieldsAdapter.getCachedAssetTypes(ownerId).subscribe({
      next: (assetTypes) => {
        const types = ["simcard", "assettag", "device", "asset", "event"];
        this.selectOptions = {
          entityTypes: [
            ...assetTypes.items,
            ...types.map((type) => ({
              name: this.getDisplayName(type),
              id: type
            }))
          ].map((item) => ({ label: item.name ?? "", value: item.id })).sort((a, b) => a.label.localeCompare(b.label)),
          required: [
            { label: "Yes", value: true },
            { label: "No", value: false }
          ],
          types: [
            { label: "Text", value: "text" },
            { label: "Memo", value: "memo" },
            { label: "Selection", value: "combo" },
            { label: "Yes/No", value: "checkbox" },
            { label: "Date", value: "date" },
            { label: "DateTime", value: "datetime" },
            { label: "URL", value: "url" }
          ]
        };
        this.selectOptionsLoaded.set(true);
      },
      error: () => {
        this.selectOptionsLoaded.set(true);
      }
    });
  }
  updateFormFields() {
    const customField = this.entity();
    let ownerId = "";
    let fieldId = "";
    let name = "";
    let entityTypeId = "";
    let required = false;
    let typeId = "";
    if (isDefined(customField) && isDefined(customField.id)) {
      const [extractedOwnerId, _entityTypeFromId, extractedFieldId] = customField.id.split(".");
      ownerId = extractedOwnerId || "";
      fieldId = extractedFieldId || "";
      name = customField.name || "";
      entityTypeId = customField._entityType?.id || "";
      required = customField.required || false;
      typeId = customField.type?.id || "";
    } else if (isDefined(this.dialogConfig?.data?.ownerId)) {
      ownerId = String(this.dialogConfig?.data?.ownerId ?? "");
    }
    this.formFields = [
      createTextField("ownerId", "OwnerId", ownerId, {
        name: "ownerId",
        hidden: true
      }),
      createTextField("tag", "Id", fieldId, {
        name: "tag",
        validations: [
          {
            name: "required",
            validator: Validators.required,
            message: "Id is required"
          }
        ]
      }),
      createTextField("title", "Name", name, {
        name: "title",
        validations: [
          {
            name: "required",
            validator: Validators.required,
            message: "Name is required"
          }
        ]
      }),
      createDropdownField("entityType", "Applies To", this.selectOptions["entityTypes"] ?? [], entityTypeId, {
        name: "entityType",
        validations: [
          {
            name: "required",
            validator: Validators.required,
            message: "Type is required"
          }
        ],
        disabled: !this.createMode(),
        props: {
          appendTo: "body"
        }
      }),
      createDropdownField("required", "Required", this.selectOptions["required"] ?? [], required, {
        name: "required",
        validations: [
          {
            name: "required",
            validator: Validators.required,
            message: "Required is required"
          }
        ],
        props: {
          appendTo: "body"
        }
      }),
      createDropdownField("type", "Type", this.selectOptions["types"] ?? [], typeId, {
        name: "type",
        validations: [
          {
            name: "required",
            validator: Validators.required,
            message: "Type is required"
          }
        ],
        props: {
          appendTo: "body"
        },
        conditional: true,
        conditions: {
          combo: [
            createTextAreaField("values", "Values", isDefined(customField) ? customField.values : "", {
              name: "values",
              validations: [
                {
                  name: "required",
                  validator: Validators.required,
                  message: "Values are required for Selection type"
                }
              ],
              hint: "Enter each value on a new line",
              props: {
                rows: 5,
                autoResize: true
              }
            })
          ]
        }
      })
    ];
  }
  submitChanges(formData) {
    const customField = this.entity();
    if (isNullOrUndefined(customField))
      return;
    const data = this.transformFormData(formData);
    const customFieldData = Object.fromEntries(Object.entries({
      id: data["tag"],
      title: data["title"],
      type: data["type"],
      required: data["required"],
      values: data["values"]
    }).filter(([_, value]) => isDefined(value)));
    const [companyId, entityType, id] = customField.id.split(".");
    firstValueFrom(this.accountsService.getCompany(companyId)).then((company) => {
      const customFields = JSON.parse(JSON.stringify(company.customFields));
      const bucket = customFields[entityType] ?? [];
      const idx = bucket.findIndex((x) => x.id === id);
      if (idx > -1) {
        bucket[idx] = __spreadValues(__spreadValues({}, bucket[idx]), customFieldData);
      }
      customFields[entityType] = bucket;
      let request$;
      if (company.type === "client") {
        request$ = this.accountsService.updateClientDetails(company.id, {
          customFields
        });
      } else if (company.type === "vendor") {
        request$ = this.accountsService.updateVendorDetails(company.id, {
          customFields
        });
      } else {
        console.error("Neither clientId nor vendorId found in route parameters");
        return;
      }
      request$.pipe(takeUntilDestroyed(this.destroyRef)).subscribe({
        next: (response) => {
          this.isFormEditable.set(false);
          this.broadcastService.broadcast("entity-updated", {
            entityType: "custom-field",
            operation: "update",
            entityId: customField.id,
            data: response
          });
        },
        error: (_error) => {
          this.isFormEditable.set(true);
          this.isSubmitting.set(false);
        }
      });
    }).catch(() => {
    });
  }
  onFormValueChange(formData) {
    const transformedData = this.transformFormData(formData);
    this.formValueChange.emit(transformedData);
  }
  transformFormData(formData) {
    const transformedData = __spreadValues({}, formData);
    if (isDefined(transformedData["entityType"]) && typeof transformedData["entityType"] === "string") {
      const entityTypeOption = this.selectOptions?.["entityTypes"]?.find((option) => option.value === transformedData["entityType"]);
      if (entityTypeOption) {
        transformedData["entityType"] = {
          id: entityTypeOption.value,
          name: entityTypeOption.label
        };
      }
    }
    if (isDefined(transformedData["values"]) && typeof transformedData["values"] === "string") {
      const valuesString = transformedData["values"];
      transformedData["values"] = valuesString.split("\n").filter((line) => line.trim() !== "").map((line) => ({ key: line.trim(), value: line.trim() }));
    }
    return transformedData;
  }
  getDisplayName(type) {
    const specialCases = {
      assettag: "Asset Tag",
      simcard: "SIM Card"
    };
    return specialCases[type] || this.utilityService.toTitleCase(type);
  }
  static \u0275fac = function CustomFieldDetailsSectionComponent_Factory(__ngFactoryType__) {
    return new (__ngFactoryType__ || _CustomFieldDetailsSectionComponent)();
  };
  static \u0275cmp = /* @__PURE__ */ \u0275\u0275defineComponent({ type: _CustomFieldDetailsSectionComponent, selectors: [["app-custom-field-details-section"]], features: [\u0275\u0275InheritDefinitionFeature], decls: 12, vars: 7, consts: [[1, "card", "pt-2"], [1, "mb-4", "p-2", "flex", "justify-start", "items-center"], [1, "pi", "pi-mobile", "!text-[2.5rem]", 3, "ngClass"], [1, "pl-6", "flex-1"], [1, "flex", "justify-between", "items-center"], [1, "text-xl", "font-semibold", "m-0"], [1, "icon-light"], [3, "fields", "actions", "hideActions"], ["tableStyleClass", "info-display !w-auto", 3, "data", "columns", "showGridLines", "hideHeader"], [1, "pi", "pi-pen-to-square", "action", "hover", "!text-2xl", 3, "click", "keydown.enter"], [3, "formSubmit", "formValidityChange", "formValueChange", "fields", "actions", "hideActions"]], template: function CustomFieldDetailsSectionComponent_Template(rf, ctx) {
    if (rf & 1) {
      \u0275\u0275elementStart(0, "div", 0)(1, "div", 1);
      \u0275\u0275element(2, "span", 2);
      \u0275\u0275elementStart(3, "div", 3)(4, "div", 4)(5, "h2", 5);
      \u0275\u0275text(6, "Custom Field Details");
      \u0275\u0275elementEnd();
      \u0275\u0275conditionalCreate(7, CustomFieldDetailsSectionComponent_Conditional_7_Template, 2, 1, "div", 6);
      \u0275\u0275elementEnd();
      \u0275\u0275elementStart(8, "span");
      \u0275\u0275text(9, "Configure various details about your Custom Field.");
      \u0275\u0275elementEnd()()();
      \u0275\u0275conditionalCreate(10, CustomFieldDetailsSectionComponent_Conditional_10_Template, 1, 3, "app-dynamic-form", 7);
      \u0275\u0275conditionalCreate(11, CustomFieldDetailsSectionComponent_Conditional_11_Template, 1, 4, "app-grid", 8);
      \u0275\u0275elementEnd();
    }
    if (rf & 2) {
      \u0275\u0275advance(2);
      \u0275\u0275property("ngClass", \u0275\u0275pureFunction1(5, _c044, ctx.isFormEditable()));
      \u0275\u0275attribute("aria-label", "mobile icon");
      \u0275\u0275advance(5);
      \u0275\u0275conditional(!ctx.isFormEditable() && !ctx.createMode() ? 7 : -1);
      \u0275\u0275advance(3);
      \u0275\u0275conditional(ctx.isFormEditable() || ctx.createMode() && ctx.formFields.length ? 10 : -1);
      \u0275\u0275advance();
      \u0275\u0275conditional(!ctx.isFormEditable() && !ctx.createMode() ? 11 : -1);
    }
  }, dependencies: [CommonModule, NgClass, ButtonModule, GridComponent, DynamicFormComponent], encapsulation: 2 });
};
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(CustomFieldDetailsSectionComponent, [{
    type: Component,
    args: [{ selector: "app-custom-field-details-section", imports: [CommonModule, ButtonModule, GridComponent, DynamicFormComponent], template: `<div class="card pt-2">
  <div class="mb-4 p-2 flex justify-start items-center">
    <span
      class="pi pi-mobile !text-[2.5rem]"
      [ngClass]="{ 'icon-primary': isFormEditable() }"
      [attr.aria-label]="'mobile icon'"
    ></span>

    <div class="pl-6 flex-1">
      <div class="flex justify-between items-center">
        <h2 class="text-xl font-semibold m-0">Custom Field Details</h2>
        @if (!isFormEditable() && !createMode()) {
          <div class="icon-light">
            <span
              class="pi pi-pen-to-square action hover !text-2xl"
              [attr.aria-label]="'Edit custom field details'"
              (click)="onEdit()"
              (keydown.enter)="onEdit()"
            ></span>
          </div>
        }
      </div>
      <span>Configure various details about your Custom Field.</span>
    </div>
  </div>

  @if (isFormEditable() || (createMode() && formFields.length)) {
    <app-dynamic-form
      [fields]="formFields"
      [actions]="actions"
      [hideActions]="createMode()"
      (formSubmit)="onSubmit($event)"
      (formValidityChange)="onFormValidityChange($event)"
      (formValueChange)="onFormValueChange($event)"
    >
    </app-dynamic-form>
  }

  @if (!isFormEditable() && !createMode()) {
    <app-grid
      [data]="customFieldDetails()"
      [columns]="columns"
      [showGridLines]="false"
      [hideHeader]="true"
      tableStyleClass="info-display !w-auto"
    ></app-grid>
  }
</div>
` }]
  }], () => [], null);
})();
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && \u0275setClassDebugInfo(CustomFieldDetailsSectionComponent, { className: "CustomFieldDetailsSectionComponent", filePath: "src/app/features/administration/components/custom-fields/custom-field-details-section/custom-field-details-section.component.ts", lineNumber: 42 });
})();

// src/app/features/administration/factories/custom-field-section-config.factory.ts
var CustomFieldSectionConfigFactory = class _CustomFieldSectionConfigFactory {
  /**
   * Create sections for customField information
   * @param customField The customField object to display in the section
   * @returns An array of AdminDetailSection objects representing the customField information sections
   */
  createCustomFieldInformationSections(customField) {
    return [
      {
        id: "custom-field-details",
        title: "CustomField Details",
        component: CustomFieldDetailsSectionComponent,
        componentInputs: { entity: customField },
        category: "information",
        order: 10
      }
    ];
  }
  /**
   * Create all customField sections in one call
   * @param customField The customField object to display in the sections
   * @returns An array of AdminDetailSection objects representing all customField sections
   */
  createAllCustomFieldSections(customField) {
    return [...this.createCustomFieldInformationSections(customField)];
  }
  static \u0275fac = function CustomFieldSectionConfigFactory_Factory(__ngFactoryType__) {
    return new (__ngFactoryType__ || _CustomFieldSectionConfigFactory)();
  };
  static \u0275prov = /* @__PURE__ */ \u0275\u0275defineInjectable({ token: _CustomFieldSectionConfigFactory, factory: _CustomFieldSectionConfigFactory.\u0275fac, providedIn: "root" });
};
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(CustomFieldSectionConfigFactory, [{
    type: Injectable,
    args: [{ providedIn: "root" }]
  }], null, null);
})();

// src/app/features/administration/components/email-providers/email-provider-details-section/email-provider-details-section.component.ts
var _c045 = (a0) => ({ "icon-primary": a0 });
function EmailProviderDetailsSectionComponent_Conditional_7_Template(rf, ctx) {
  if (rf & 1) {
    const _r1 = \u0275\u0275getCurrentView();
    \u0275\u0275elementStart(0, "div", 6)(1, "span", 9);
    \u0275\u0275listener("click", function EmailProviderDetailsSectionComponent_Conditional_7_Template_span_click_1_listener() {
      \u0275\u0275restoreView(_r1);
      const ctx_r1 = \u0275\u0275nextContext();
      return \u0275\u0275resetView(ctx_r1.onEdit());
    })("keydown.enter", function EmailProviderDetailsSectionComponent_Conditional_7_Template_span_keydown_enter_1_listener() {
      \u0275\u0275restoreView(_r1);
      const ctx_r1 = \u0275\u0275nextContext();
      return \u0275\u0275resetView(ctx_r1.onEdit());
    });
    \u0275\u0275elementEnd()();
  }
  if (rf & 2) {
    \u0275\u0275advance();
    \u0275\u0275attribute("aria-label", "Edit email provider details");
  }
}
function EmailProviderDetailsSectionComponent_Conditional_10_Template(rf, ctx) {
  if (rf & 1) {
    const _r3 = \u0275\u0275getCurrentView();
    \u0275\u0275elementStart(0, "app-dynamic-form", 10);
    \u0275\u0275listener("formSubmit", function EmailProviderDetailsSectionComponent_Conditional_10_Template_app_dynamic_form_formSubmit_0_listener($event) {
      \u0275\u0275restoreView(_r3);
      const ctx_r1 = \u0275\u0275nextContext();
      return \u0275\u0275resetView(ctx_r1.onSubmit($event));
    })("formValidityChange", function EmailProviderDetailsSectionComponent_Conditional_10_Template_app_dynamic_form_formValidityChange_0_listener($event) {
      \u0275\u0275restoreView(_r3);
      const ctx_r1 = \u0275\u0275nextContext();
      return \u0275\u0275resetView(ctx_r1.onFormValidityChange($event));
    })("formValueChange", function EmailProviderDetailsSectionComponent_Conditional_10_Template_app_dynamic_form_formValueChange_0_listener($event) {
      \u0275\u0275restoreView(_r3);
      const ctx_r1 = \u0275\u0275nextContext();
      return \u0275\u0275resetView(ctx_r1.onFormValueChange($event));
    });
    \u0275\u0275elementEnd();
  }
  if (rf & 2) {
    const ctx_r1 = \u0275\u0275nextContext();
    \u0275\u0275property("fields", ctx_r1.formFields)("actions", ctx_r1.actions)("hideActions", ctx_r1.createMode());
  }
}
function EmailProviderDetailsSectionComponent_Conditional_11_Template(rf, ctx) {
  if (rf & 1) {
    \u0275\u0275element(0, "app-grid", 8);
  }
  if (rf & 2) {
    const ctx_r1 = \u0275\u0275nextContext();
    \u0275\u0275property("data", ctx_r1.emailProviderDetails())("columns", ctx_r1.columns)("showGridLines", false)("hideHeader", true);
  }
}
var EmailProviderDetailsSectionComponent = class _EmailProviderDetailsSectionComponent extends EntitySectionBaseComponent {
  ownerId = input(null, ...ngDevMode ? [{ debugName: "ownerId" }] : []);
  entitiesService = inject(EntitiesService);
  operationRegistry = inject(EntityOperationRegistryService);
  cdr = inject(ChangeDetectorRef);
  selectOptionsLoaded = signal(false, ...ngDevMode ? [{ debugName: "selectOptionsLoaded" }] : []);
  emailProviderDetails = computed(() => {
    const emailProviderDetails = this.entity();
    if (!isDefined(emailProviderDetails))
      return [];
    return [
      {
        key: "Type",
        value: emailProviderDetails.type?.name ?? "None"
      },
      { key: "Name", value: emailProviderDetails.name }
    ];
  }, ...ngDevMode ? [{ debugName: "emailProviderDetails" }] : []);
  selectOptions = {};
  faAt = faAt;
  constructor() {
    super();
    this.columns = [
      { field: "key", header: "", transform: "uppercase" },
      { field: "value", header: "" }
    ];
    effect(() => {
      const selectOptionsLoaded = this.selectOptionsLoaded();
      if (selectOptionsLoaded) {
        untracked(() => {
          this.updateFormFields();
          this.cdr.detectChanges();
        });
      }
    });
  }
  ngOnInit() {
    this.loadSelectOptions();
  }
  loadSelectOptions() {
    const emailProvider = this.entity();
    const ownerIdValue = this.ownerId();
    const effectiveOwnerId = emailProvider?.owner?.id ?? ownerIdValue;
    if (isNullOrUndefined(effectiveOwnerId)) {
      this.selectOptions = {};
      this.selectOptionsLoaded.set(true);
      this.updateFormFields();
    }
    this.entitiesService.listEmailProviderTypes(effectiveOwnerId).pipe(takeUntilDestroyed(this.destroyRef)).subscribe((result) => {
      this.selectOptions = {
        emailProviderTypes: result.items.map((item) => ({
          label: item?.name,
          value: item.id,
          data: item
        })).sort((a, b) => a.label.localeCompare(b.label))
      };
      this.selectOptionsLoaded.set(true);
    });
  }
  updateFormFields() {
    const emailProvider = this.entity();
    this.formFields = [
      createDropdownField("type", "Type", this.selectOptions?.["emailProviderTypes"], emailProvider?.type?.id, {
        name: "type",
        validations: [
          {
            name: "required",
            validator: Validators.required,
            message: "Type is required"
          }
        ],
        disabled: !this.createMode(),
        props: {
          appendTo: "body"
        }
      }),
      createTextField("name", "Name", emailProvider?.name, {
        name: "name",
        validations: [
          {
            name: "required",
            validator: Validators.required,
            message: "Name is required"
          }
        ]
      })
    ];
  }
  getUpdateMethod() {
    return this.operationRegistry.getOperation("email-provider", "update") ?? ((id, data) => this.entitiesService.updateEmailProvider(id, data));
  }
  onFormValueChange(formData) {
    const transformedData = this.transformFormData(formData);
    this.formValueChange.emit(transformedData);
  }
  transformFormData(formData) {
    const transformedData = __spreadValues({}, formData);
    if (isDefined(transformedData["type"])) {
      const emailProviderTypeId = transformedData["type"];
      const emailProviderType = this.selectOptions?.["emailProviderTypes"]?.find((option) => option.value === emailProviderTypeId);
      if (emailProviderType) {
        transformedData["type"] = {
          id: emailProviderTypeId,
          name: emailProviderType.data?.name
        };
      }
    }
    return transformedData;
  }
  static \u0275fac = function EmailProviderDetailsSectionComponent_Factory(__ngFactoryType__) {
    return new (__ngFactoryType__ || _EmailProviderDetailsSectionComponent)();
  };
  static \u0275cmp = /* @__PURE__ */ \u0275\u0275defineComponent({ type: _EmailProviderDetailsSectionComponent, selectors: [["app-email-provider-details-section"]], inputs: { ownerId: [1, "ownerId"] }, features: [\u0275\u0275InheritDefinitionFeature], decls: 12, vars: 7, consts: [[1, "card", "pt-2"], [1, "mb-4", "p-2", "flex", "justify-start", "items-center"], [1, "!text-[2.5rem]", 3, "icon", "ngClass"], [1, "pl-6", "flex-1"], [1, "flex", "justify-between", "items-center"], [1, "text-xl", "font-semibold", "m-0"], [1, "icon-light"], [3, "fields", "actions", "hideActions"], ["tableStyleClass", "info-display !w-auto", 3, "data", "columns", "showGridLines", "hideHeader"], [1, "pi", "pi-pen-to-square", "action", "hover", "!text-2xl", 3, "click", "keydown.enter"], [3, "formSubmit", "formValidityChange", "formValueChange", "fields", "actions", "hideActions"]], template: function EmailProviderDetailsSectionComponent_Template(rf, ctx) {
    if (rf & 1) {
      \u0275\u0275elementStart(0, "div", 0)(1, "div", 1);
      \u0275\u0275element(2, "fa-icon", 2);
      \u0275\u0275elementStart(3, "div", 3)(4, "div", 4)(5, "h2", 5);
      \u0275\u0275text(6, "Email Provider Details");
      \u0275\u0275elementEnd();
      \u0275\u0275conditionalCreate(7, EmailProviderDetailsSectionComponent_Conditional_7_Template, 2, 1, "div", 6);
      \u0275\u0275elementEnd();
      \u0275\u0275elementStart(8, "span");
      \u0275\u0275text(9, "The following information is required in order to configure your email provider.");
      \u0275\u0275elementEnd()()();
      \u0275\u0275conditionalCreate(10, EmailProviderDetailsSectionComponent_Conditional_10_Template, 1, 3, "app-dynamic-form", 7);
      \u0275\u0275conditionalCreate(11, EmailProviderDetailsSectionComponent_Conditional_11_Template, 1, 4, "app-grid", 8);
      \u0275\u0275elementEnd();
    }
    if (rf & 2) {
      \u0275\u0275advance(2);
      \u0275\u0275property("icon", ctx.faAt)("ngClass", \u0275\u0275pureFunction1(5, _c045, ctx.isFormEditable()));
      \u0275\u0275advance(5);
      \u0275\u0275conditional(!ctx.isFormEditable() && !ctx.createMode() ? 7 : -1);
      \u0275\u0275advance(3);
      \u0275\u0275conditional(ctx.isFormEditable() || ctx.createMode() && ctx.formFields.length ? 10 : -1);
      \u0275\u0275advance();
      \u0275\u0275conditional(!ctx.isFormEditable() && !ctx.createMode() ? 11 : -1);
    }
  }, dependencies: [
    CommonModule,
    NgClass,
    ButtonModule,
    InputTextModule,
    GridComponent,
    DynamicFormComponent,
    FontAwesomeModule,
    FaIconComponent
  ], encapsulation: 2 });
};
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(EmailProviderDetailsSectionComponent, [{
    type: Component,
    args: [{ selector: "app-email-provider-details-section", imports: [
      CommonModule,
      ButtonModule,
      InputTextModule,
      GridComponent,
      DynamicFormComponent,
      FontAwesomeModule
    ], template: `<div class="card pt-2">
  <div class="mb-4 p-2 flex justify-start items-center">
    <fa-icon
      [icon]="faAt"
      class="!text-[2.5rem]"
      [ngClass]="{ 'icon-primary': isFormEditable() }"
    ></fa-icon>

    <div class="pl-6 flex-1">
      <div class="flex justify-between items-center">
        <h2 class="text-xl font-semibold m-0">Email Provider Details</h2>
        @if (!isFormEditable() && !createMode()) {
          <div class="icon-light">
            <span
              class="pi pi-pen-to-square action hover !text-2xl"
              [attr.aria-label]="'Edit email provider details'"
              (click)="onEdit()"
              (keydown.enter)="onEdit()"
            ></span>
          </div>
        }
      </div>
      <span
        >The following information is required in order to configure your email
        provider.</span
      >
    </div>
  </div>

  @if (isFormEditable() || (createMode() && formFields.length)) {
    <app-dynamic-form
      [fields]="formFields"
      [actions]="actions"
      [hideActions]="createMode()"
      (formSubmit)="onSubmit($event)"
      (formValidityChange)="onFormValidityChange($event)"
      (formValueChange)="onFormValueChange($event)"
    >
    </app-dynamic-form>
  }

  @if (!isFormEditable() && !createMode()) {
    <app-grid
      [data]="emailProviderDetails()"
      [columns]="columns"
      [showGridLines]="false"
      [hideHeader]="true"
      tableStyleClass="info-display !w-auto"
    ></app-grid>
  }
</div>
` }]
  }], () => [], { ownerId: [{ type: Input, args: [{ isSignal: true, alias: "ownerId", required: false }] }] });
})();
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && \u0275setClassDebugInfo(EmailProviderDetailsSectionComponent, { className: "EmailProviderDetailsSectionComponent", filePath: "src/app/features/administration/components/email-providers/email-provider-details-section/email-provider-details-section.component.ts", lineNumber: 54 });
})();

// src/app/features/administration/components/email-providers/email-provider-parameters-section/email-provider-parameters-section.component.ts
var _c046 = (a0) => ({ "icon-primary": a0 });
function EmailProviderParametersSectionComponent_Conditional_7_Template(rf, ctx) {
  if (rf & 1) {
    const _r1 = \u0275\u0275getCurrentView();
    \u0275\u0275elementStart(0, "div", 6)(1, "span", 9);
    \u0275\u0275listener("click", function EmailProviderParametersSectionComponent_Conditional_7_Template_span_click_1_listener() {
      \u0275\u0275restoreView(_r1);
      const ctx_r1 = \u0275\u0275nextContext();
      return \u0275\u0275resetView(ctx_r1.onEdit());
    })("keydown.enter", function EmailProviderParametersSectionComponent_Conditional_7_Template_span_keydown_enter_1_listener() {
      \u0275\u0275restoreView(_r1);
      const ctx_r1 = \u0275\u0275nextContext();
      return \u0275\u0275resetView(ctx_r1.onEdit());
    });
    \u0275\u0275elementEnd()();
  }
  if (rf & 2) {
    \u0275\u0275advance();
    \u0275\u0275attribute("aria-label", "Edit email parameters details");
  }
}
function EmailProviderParametersSectionComponent_Conditional_10_Template(rf, ctx) {
  if (rf & 1) {
    const _r3 = \u0275\u0275getCurrentView();
    \u0275\u0275elementStart(0, "app-dynamic-form", 10);
    \u0275\u0275listener("formSubmit", function EmailProviderParametersSectionComponent_Conditional_10_Template_app_dynamic_form_formSubmit_0_listener($event) {
      \u0275\u0275restoreView(_r3);
      const ctx_r1 = \u0275\u0275nextContext();
      return \u0275\u0275resetView(ctx_r1.onSubmit($event));
    })("formValidityChange", function EmailProviderParametersSectionComponent_Conditional_10_Template_app_dynamic_form_formValidityChange_0_listener($event) {
      \u0275\u0275restoreView(_r3);
      const ctx_r1 = \u0275\u0275nextContext();
      return \u0275\u0275resetView(ctx_r1.onFormValidityChange($event));
    })("formValueChange", function EmailProviderParametersSectionComponent_Conditional_10_Template_app_dynamic_form_formValueChange_0_listener($event) {
      \u0275\u0275restoreView(_r3);
      const ctx_r1 = \u0275\u0275nextContext();
      return \u0275\u0275resetView(ctx_r1.onFormValueChange($event));
    });
    \u0275\u0275elementEnd();
  }
  if (rf & 2) {
    const ctx_r1 = \u0275\u0275nextContext();
    \u0275\u0275property("fields", ctx_r1.formFields)("actions", ctx_r1.actions)("hideActions", ctx_r1.createMode());
  }
}
function EmailProviderParametersSectionComponent_Conditional_11_Template(rf, ctx) {
  if (rf & 1) {
    \u0275\u0275element(0, "app-grid", 8);
  }
  if (rf & 2) {
    const ctx_r1 = \u0275\u0275nextContext();
    \u0275\u0275property("data", ctx_r1.emailProviderParameters())("columns", ctx_r1.columns)("showGridLines", false)("hideHeader", true);
  }
}
var EmailProviderParametersSectionComponent = class _EmailProviderParametersSectionComponent extends EntitySectionBaseComponent {
  ownerId = input(null, ...ngDevMode ? [{ debugName: "ownerId" }] : []);
  emailProviderType = input(null, ...ngDevMode ? [{ debugName: "emailProviderType" }] : []);
  entitiesService = inject(EntitiesService);
  operationRegistry = inject(EntityOperationRegistryService);
  isLoadingEmailType = signal(false, ...ngDevMode ? [{ debugName: "isLoadingEmailType" }] : []);
  customValues = signal({}, ...ngDevMode ? [{ debugName: "customValues" }] : []);
  emailProviderParameters = computed(() => {
    const emailProviderParameters = this.entity()?.parameters;
    const emailProviderType = this.emailProviderType();
    if (isNullOrUndefined(emailProviderParameters) || isNullOrUndefined(emailProviderType))
      return [];
    const params = JSON.parse(emailProviderType?.parameterDefinition ?? "");
    const values = [];
    params.groups.forEach((group) => {
      group.fields.forEach((field) => {
        let fieldValue = "None";
        if (field.type === "password") {
          fieldValue = "****";
        } else {
          const paramValue = emailProviderParameters?.[field.id];
          if (typeof paramValue === "object") {
            fieldValue = JSON.stringify(paramValue);
          } else if (paramValue !== void 0) {
            fieldValue = paramValue;
          }
        }
        values.push({
          key: field.title,
          value: fieldValue
        });
        if (field.type === "combo" && field.values) {
          const selectedValue = emailProviderParameters?.[field.id];
          const selectedOption = field.values.find((opt) => opt.key === selectedValue);
          if (selectedOption?.fields) {
            selectedOption.fields.forEach((subField) => {
              if (emailProviderParameters?.[subField.id] !== void 0) {
                let fieldValue2 = "None";
                const paramValue = emailProviderParameters?.[subField.id];
                if (subField.type === "password") {
                  fieldValue2 = "****";
                } else if (typeof paramValue === "object") {
                  fieldValue2 = JSON.stringify(paramValue);
                } else if (paramValue !== void 0) {
                  fieldValue2 = paramValue;
                }
                values.push({
                  key: `${subField.title}`,
                  value: fieldValue2
                });
              }
            });
          }
        }
      });
    });
    return values;
  }, ...ngDevMode ? [{ debugName: "emailProviderParameters" }] : []);
  selectOptions = {};
  constructor() {
    super();
    this.columns = [
      { field: "key", header: "", transform: "uppercase" },
      { field: "value", header: "" }
    ];
    effect(() => {
      const emailProviderType = this.emailProviderType();
      if (isDefined(emailProviderType)) {
        this.updateFormFields();
      }
    });
  }
  updateFormFields() {
    const emailProvider = this.entity();
    const emailProviderType = this.emailProviderType();
    if (!emailProviderType) {
      return;
    }
    const params = JSON.parse(emailProviderType?.parameterDefinition ?? "{}");
    this.formFields = params.groups.reduce((acc, group) => {
      const groupFields = group.fields.map((field) => this.createFormFieldConfig(field, emailProvider));
      return [...acc, ...groupFields];
    }, []);
  }
  createFormField(field, emailProvider) {
    const baseConfig = {
      name: field.id,
      validations: this.createValidations(field),
      hint: field.description
    };
    const fieldValue = emailProvider?.parameters?.[field.id];
    switch (field.type) {
      case "memo":
        return createTextAreaField(field.id, field.title, fieldValue, baseConfig);
      case "number":
        return createNumberField(field.id, field.title, fieldValue, __spreadProps(__spreadValues({}, baseConfig), {
          props: { min: field.min, max: field.max }
        }));
      case "combo":
        return createDropdownField(field.id, field.title, field.values?.map((item) => ({
          label: item.value,
          value: item.key
        })) ?? [], fieldValue, __spreadProps(__spreadValues({}, baseConfig), {
          props: {
            appendTo: "body"
          },
          conditional: (field?.values?.length ?? 0) > 0,
          conditions: this.createConditionalFields(field, emailProvider)
        }));
      case "password":
        return createPasswordField(field.id, field.title, __spreadProps(__spreadValues({}, baseConfig), {
          props: {
            type: "password"
          }
        }));
      case "url":
        return createTextField(field.id, field.title, fieldValue, __spreadProps(__spreadValues({}, baseConfig), {
          validations: [
            ...baseConfig.validations,
            {
              name: "pattern",
              validator: Validators.pattern(/^https?:\/\/.+/),
              message: `${field.title} must be a valid URL`
            }
          ]
        }));
      case "text":
      default:
        return createTextField(field.id, field.title, fieldValue, baseConfig);
    }
  }
  createValidations(field) {
    const validations = [];
    if (field.required ?? false) {
      validations.push({
        name: "required",
        validator: Validators.required,
        message: `${field.title} is required`
      });
    }
    if (field.type === "number" && (field.min !== void 0 || field.max !== void 0)) {
      if (field.min !== void 0) {
        validations.push({
          name: "min",
          validator: Validators.min(field.min),
          message: `${field.title} must be at least ${field.min}`
        });
      }
      if (field.max !== void 0) {
        validations.push({
          name: "max",
          validator: Validators.max(field.max),
          message: `${field.title} must be at most ${field.max}`
        });
      }
    }
    return validations;
  }
  createConditionalFields(field, emailProvider) {
    if (!isDefined(field.values)) {
      return {};
    }
    return field.values.reduce((acc, item) => {
      if (!isDefined(item.fields))
        return {};
      return __spreadProps(__spreadValues({}, acc), {
        [item.key]: item.fields.map((f) => this.createFormField(f, emailProvider))
      });
    }, {});
  }
  getUpdateMethod() {
    return this.operationRegistry.getOperation("email-providers", "update") ?? ((id, data) => this.entitiesService.updateEmailProvider(id, data));
  }
  onFormValueChange(formData) {
    const transformedData = __spreadValues({}, formData);
    this.formValueChange.emit({ parameters: transformedData });
  }
  createConditionFields(fields) {
    return fields.map((field) => {
      return this.createFormFieldConfig(field, this.entity());
    });
  }
  createFormFieldConfig(field, emailProvider) {
    if (field.type === "memo") {
      return createTextAreaField(field.id, field.title, emailProvider?.parameters?.[field.id], {
        name: field.id,
        validations: field.required ?? false ? [
          {
            name: "required",
            validator: Validators.required,
            message: `${field.title} is required`
          }
        ] : [],
        hint: field.description
      });
    }
    if (field.type === "number") {
      return createNumberField(field.id, field.title, emailProvider?.parameters?.[field.id], {
        name: field.id,
        validations: field.required ?? false ? [
          {
            name: "required",
            validator: Validators.required,
            message: `${field.title} is required`
          }
        ] : [],
        hint: field.description
      });
    }
    if (field.type === "combo" && field.values) {
      const options = field.values.map((value) => ({
        label: value.value,
        value: value.key
      }));
      return createDropdownField(field.id, field.title, options, emailProvider?.parameters?.[field.id] || field.defaultValue, {
        name: field.id,
        validations: field.required ?? false ? [
          {
            name: "required",
            validator: Validators.required,
            message: `${field.title} is required`
          }
        ] : [],
        hint: field.description,
        props: {
          appendTo: "body"
        },
        conditional: true,
        conditions: options.reduce((acc, option) => __spreadProps(__spreadValues({}, acc), {
          [option.value]: this.createConditionFields(field?.values?.find((opt) => opt.key === option.value)?.fields ?? [])
        }), {})
      });
    }
    if (field.type === "password") {
      return createPasswordField(field.id, field.title, {
        name: field.id,
        validations: field.required ?? false ? [
          {
            name: "required",
            validator: Validators.required,
            message: `${field.title} is required`
          }
        ] : [],
        hint: field.description,
        props: {
          type: "password"
        }
      });
    }
    return createTextField(field.id, field.title, emailProvider?.parameters?.[field.id], {
      name: field.id,
      validations: field.required ?? false ? [
        {
          name: "required",
          validator: Validators.required,
          message: `${field.title} is required`
        }
      ] : [],
      hint: field.description
    });
  }
  static \u0275fac = function EmailProviderParametersSectionComponent_Factory(__ngFactoryType__) {
    return new (__ngFactoryType__ || _EmailProviderParametersSectionComponent)();
  };
  static \u0275cmp = /* @__PURE__ */ \u0275\u0275defineComponent({ type: _EmailProviderParametersSectionComponent, selectors: [["app-email-provider-parameters-section"]], inputs: { ownerId: [1, "ownerId"], emailProviderType: [1, "emailProviderType"] }, features: [\u0275\u0275InheritDefinitionFeature], decls: 12, vars: 7, consts: [[1, "card", "pt-2"], [1, "mb-4", "p-2", "flex", "justify-start", "items-center"], [1, "pi", "pi-wrench", "!text-[2.5rem]", 3, "ngClass"], [1, "pl-6", "flex-1"], [1, "flex", "justify-between", "items-center"], [1, "text-xl", "font-semibold", "m-0"], [1, "icon-light"], [3, "fields", "actions", "hideActions"], ["tableStyleClass", "info-display !w-auto", 3, "data", "columns", "showGridLines", "hideHeader"], [1, "pi", "pi-pen-to-square", "action", "hover", "!text-2xl", 3, "click", "keydown.enter"], [3, "formSubmit", "formValidityChange", "formValueChange", "fields", "actions", "hideActions"]], template: function EmailProviderParametersSectionComponent_Template(rf, ctx) {
    if (rf & 1) {
      \u0275\u0275elementStart(0, "div", 0)(1, "div", 1);
      \u0275\u0275element(2, "span", 2);
      \u0275\u0275elementStart(3, "div", 3)(4, "div", 4)(5, "h2", 5);
      \u0275\u0275text(6, "Parameters");
      \u0275\u0275elementEnd();
      \u0275\u0275conditionalCreate(7, EmailProviderParametersSectionComponent_Conditional_7_Template, 2, 1, "div", 6);
      \u0275\u0275elementEnd();
      \u0275\u0275elementStart(8, "span");
      \u0275\u0275text(9, "Configure the following parameters that are required to communicate with the email provider.");
      \u0275\u0275elementEnd()()();
      \u0275\u0275conditionalCreate(10, EmailProviderParametersSectionComponent_Conditional_10_Template, 1, 3, "app-dynamic-form", 7);
      \u0275\u0275conditionalCreate(11, EmailProviderParametersSectionComponent_Conditional_11_Template, 1, 4, "app-grid", 8);
      \u0275\u0275elementEnd();
    }
    if (rf & 2) {
      \u0275\u0275advance(2);
      \u0275\u0275property("ngClass", \u0275\u0275pureFunction1(5, _c046, ctx.isFormEditable()));
      \u0275\u0275attribute("aria-label", "wrench icon");
      \u0275\u0275advance(5);
      \u0275\u0275conditional(!ctx.isFormEditable() && !ctx.createMode() ? 7 : -1);
      \u0275\u0275advance(3);
      \u0275\u0275conditional(ctx.isFormEditable() || ctx.createMode() && ctx.formFields.length ? 10 : -1);
      \u0275\u0275advance();
      \u0275\u0275conditional(!ctx.isFormEditable() && !ctx.createMode() ? 11 : -1);
    }
  }, dependencies: [
    CommonModule,
    NgClass,
    ButtonModule,
    InputTextModule,
    GridComponent,
    DynamicFormComponent
  ], encapsulation: 2 });
};
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(EmailProviderParametersSectionComponent, [{
    type: Component,
    args: [{ selector: "app-email-provider-parameters-section", imports: [
      CommonModule,
      ButtonModule,
      InputTextModule,
      GridComponent,
      DynamicFormComponent
    ], template: `<div class="card pt-2">
  <div class="mb-4 p-2 flex justify-start items-center">
    <span
      class="pi pi-wrench !text-[2.5rem]"
      [ngClass]="{ 'icon-primary': isFormEditable() }"
      [attr.aria-label]="'wrench icon'"
    ></span>

    <div class="pl-6 flex-1">
      <div class="flex justify-between items-center">
        <h2 class="text-xl font-semibold m-0">Parameters</h2>
        @if (!isFormEditable() && !createMode()) {
          <div class="icon-light">
            <span
              class="pi pi-pen-to-square action hover !text-2xl"
              [attr.aria-label]="'Edit email parameters details'"
              (click)="onEdit()"
              (keydown.enter)="onEdit()"
            ></span>
          </div>
        }
      </div>
      <span
        >Configure the following parameters that are required to communicate
        with the email provider.</span
      >
    </div>
  </div>

  @if (isFormEditable() || (createMode() && formFields.length)) {
    <app-dynamic-form
      [fields]="formFields"
      [actions]="actions"
      [hideActions]="createMode()"
      (formSubmit)="onSubmit($event)"
      (formValidityChange)="onFormValidityChange($event)"
      (formValueChange)="onFormValueChange($event)"
    >
    </app-dynamic-form>
  }

  @if (!isFormEditable() && !createMode()) {
    <app-grid
      [data]="emailProviderParameters()"
      [columns]="columns"
      [showGridLines]="false"
      [hideHeader]="true"
      tableStyleClass="info-display !w-auto"
    ></app-grid>
  }
</div>
` }]
  }], () => [], { ownerId: [{ type: Input, args: [{ isSignal: true, alias: "ownerId", required: false }] }], emailProviderType: [{ type: Input, args: [{ isSignal: true, alias: "emailProviderType", required: false }] }] });
})();
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && \u0275setClassDebugInfo(EmailProviderParametersSectionComponent, { className: "EmailProviderParametersSectionComponent", filePath: "src/app/features/administration/components/email-providers/email-provider-parameters-section/email-provider-parameters-section.component.ts", lineNumber: 65 });
})();

// src/app/features/administration/factories/email-providers-section-config.factory.ts
var EmailProviderSectionConfigFactory = class _EmailProviderSectionConfigFactory {
  /**
   * Create sections for email provider information
   * @param emailProvider The email provider object to display in the section
   * @returns An array of AdminDetailSection objects representing the email provider information sections
   */
  createEmailProviderInformationSection(emailProvider, emailProviderType) {
    return [
      {
        id: "email-provider-details",
        title: "Email Config Details",
        component: EmailProviderDetailsSectionComponent,
        componentInputs: { entity: emailProvider },
        category: "information",
        order: 10
      },
      {
        id: "email-provider-parameters",
        title: "Email Config Parameters",
        component: EmailProviderParametersSectionComponent,
        componentInputs: {
          entity: emailProvider,
          entityType: "email-provider",
          dataPath: "parameters",
          injectDataAtPath: true,
          emailProviderType
        },
        category: "information",
        order: 20
      }
    ];
  }
  /**
   * Create sections for email provider changes
   * @param emailProvider The email provider object to display in the section
   * @returns An array of AdminDetailSection objects representing the email provider changes sections
   */
  createChangesSection(emailProvider) {
    return [
      {
        id: "email-provider-changes",
        title: "Changes",
        component: FeedSectionComponent,
        componentInputs: {
          entity: emailProvider
        },
        category: "feed",
        order: 10
      }
    ];
  }
  /**
   * Create all emailProvider sections in one call
   * @param emailProvider The emailProvider object to display in the sections
   * @returns An array of AdminDetailSection objects representing all emailProvider sections
   */
  createAllEmailProviderSections(emailProvider, emailProviderType) {
    return [
      ...this.createEmailProviderInformationSection(emailProvider, emailProviderType),
      ...this.createChangesSection(emailProvider)
    ];
  }
  static \u0275fac = function EmailProviderSectionConfigFactory_Factory(__ngFactoryType__) {
    return new (__ngFactoryType__ || _EmailProviderSectionConfigFactory)();
  };
  static \u0275prov = /* @__PURE__ */ \u0275\u0275defineInjectable({ token: _EmailProviderSectionConfigFactory, factory: _EmailProviderSectionConfigFactory.\u0275fac, providedIn: "root" });
};
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(EmailProviderSectionConfigFactory, [{
    type: Injectable,
    args: [{ providedIn: "root" }]
  }], null, null);
})();

// src/app/features/administration/components/themes/theme-details-section/theme-details-section.component.ts
var _c047 = ["customTemplate"];
var _c15 = (a0) => ({ "icon-primary": a0 });
function ThemeDetailsSectionComponent_Conditional_7_Template(rf, ctx) {
  if (rf & 1) {
    const _r1 = \u0275\u0275getCurrentView();
    \u0275\u0275elementStart(0, "div", 7)(1, "span", 10);
    \u0275\u0275listener("click", function ThemeDetailsSectionComponent_Conditional_7_Template_span_click_1_listener() {
      \u0275\u0275restoreView(_r1);
      const ctx_r1 = \u0275\u0275nextContext();
      return \u0275\u0275resetView(ctx_r1.onEdit());
    })("keydown.enter", function ThemeDetailsSectionComponent_Conditional_7_Template_span_keydown_enter_1_listener() {
      \u0275\u0275restoreView(_r1);
      const ctx_r1 = \u0275\u0275nextContext();
      return \u0275\u0275resetView(ctx_r1.onEdit());
    });
    \u0275\u0275elementEnd()();
  }
  if (rf & 2) {
    \u0275\u0275advance();
    \u0275\u0275attribute("aria-label", "Edit theme details");
  }
}
function ThemeDetailsSectionComponent_Conditional_10_Template(rf, ctx) {
  if (rf & 1) {
    const _r3 = \u0275\u0275getCurrentView();
    \u0275\u0275elementStart(0, "app-dynamic-form", 11);
    \u0275\u0275listener("formSubmit", function ThemeDetailsSectionComponent_Conditional_10_Template_app_dynamic_form_formSubmit_0_listener($event) {
      \u0275\u0275restoreView(_r3);
      const ctx_r1 = \u0275\u0275nextContext();
      return \u0275\u0275resetView(ctx_r1.onSubmit($event));
    })("formValidityChange", function ThemeDetailsSectionComponent_Conditional_10_Template_app_dynamic_form_formValidityChange_0_listener($event) {
      \u0275\u0275restoreView(_r3);
      const ctx_r1 = \u0275\u0275nextContext();
      return \u0275\u0275resetView(ctx_r1.onFormValidityChange($event));
    })("formValueChange", function ThemeDetailsSectionComponent_Conditional_10_Template_app_dynamic_form_formValueChange_0_listener($event) {
      \u0275\u0275restoreView(_r3);
      const ctx_r1 = \u0275\u0275nextContext();
      return \u0275\u0275resetView(ctx_r1.onFormValueChange($event));
    });
    \u0275\u0275elementEnd();
  }
  if (rf & 2) {
    const ctx_r1 = \u0275\u0275nextContext();
    \u0275\u0275property("fields", ctx_r1.formFields)("actions", ctx_r1.actions)("hideActions", ctx_r1.createMode());
  }
}
function ThemeDetailsSectionComponent_Conditional_11_Template(rf, ctx) {
  if (rf & 1) {
    \u0275\u0275element(0, "app-grid", 9);
  }
  if (rf & 2) {
    const ctx_r1 = \u0275\u0275nextContext();
    \u0275\u0275property("data", ctx_r1.themeDetails())("columns", ctx_r1.columns)("showGridLines", false)("hideHeader", true);
  }
}
function ThemeDetailsSectionComponent_ng_template_12_Conditional_0_Template(rf, ctx) {
  if (rf & 1) {
    \u0275\u0275element(0, "img", 12);
  }
  if (rf & 2) {
    const details_r4 = \u0275\u0275nextContext().$implicit;
    \u0275\u0275property("src", details_r4.imageUrl, \u0275\u0275sanitizeUrl)("alt", details_r4.key || "image");
  }
}
function ThemeDetailsSectionComponent_ng_template_12_Conditional_1_Template(rf, ctx) {
  if (rf & 1) {
    \u0275\u0275text(0);
  }
  if (rf & 2) {
    const details_r4 = \u0275\u0275nextContext().$implicit;
    \u0275\u0275textInterpolate1(" ", details_r4 == null ? null : details_r4.value, " ");
  }
}
function ThemeDetailsSectionComponent_ng_template_12_Template(rf, ctx) {
  if (rf & 1) {
    \u0275\u0275conditionalCreate(0, ThemeDetailsSectionComponent_ng_template_12_Conditional_0_Template, 1, 2, "img", 12)(1, ThemeDetailsSectionComponent_ng_template_12_Conditional_1_Template, 1, 1);
  }
  if (rf & 2) {
    const details_r4 = ctx.$implicit;
    \u0275\u0275conditional((details_r4 == null ? null : details_r4.imageUrl) ? 0 : 1);
  }
}
var ThemeDetailsSectionComponent = class _ThemeDetailsSectionComponent extends EntitySectionBaseComponent {
  logoTemplate;
  ownerId = input(null, ...ngDevMode ? [{ debugName: "ownerId" }] : []);
  entitiesService = inject(EntitiesService);
  operationRegistry = inject(EntityOperationRegistryService);
  apiUrlService = inject(ApiUrlService);
  themeDetails = computed(() => {
    const themeDetails = this.entity();
    if (!isDefined(themeDetails))
      return [];
    return [
      { key: "Name", value: themeDetails.name },
      {
        key: "Description",
        value: themeDetails.description ?? "None"
      },
      {
        key: "Custom CSS Link",
        value: !isEmpty(themeDetails?.settings?.cssSrc) ? themeDetails.settings.cssSrc : "None"
      },
      {
        key: "Custom Tags",
        value: (themeDetails?.customTags?.length ?? 0) > 0 ? themeDetails.customTags.map((tag) => tag.name).join(", ") : "None"
      },
      {
        key: "Web Logo",
        value: "",
        imageUrl: `${this.apiUrlService.getCurrentApiUrl()}/entities/themes/${themeDetails.id}/logo?size=small`
      }
    ];
  }, ...ngDevMode ? [{ debugName: "themeDetails" }] : []);
  faPalette = faPalette;
  customHtmlTagModalConfig;
  constructor() {
    super();
    effect(() => {
      if (this.logoTemplate) {
        this.columns = [
          { field: "key", header: "", transform: "uppercase" },
          { field: "value", header: "", cellTemplate: this.logoTemplate }
        ];
      }
    });
  }
  updateFormFields() {
    const theme = this.entity();
    this.customHtmlTagModalConfig = {
      modalComponent: ModalListFormComponent,
      modalTitle: "Custom HTML Tags",
      subHeader: "Enter the details for an HTML tag that will be injected into the page at your chosen location.",
      defaultItemProvider: () => ({
        id: v4_default(),
        name: "",
        tag: "script",
        location: "head",
        attributes: "",
        contents: ""
      }),
      listItemFormatter: (item) => this.stateItemToListItem(item),
      modalFields: (item) => {
        return [
          createTextField("name", "Name", item?.name, {
            name: "name",
            validations: [
              {
                name: "required",
                validator: Validators.required,
                message: "Name is required"
              }
            ]
          }),
          createDropdownField("location", "Location", [
            { label: "Header", value: "head" },
            { label: "Body", value: "body" }
          ], item?.location, {
            name: "location",
            validations: [
              {
                name: "required",
                validator: Validators.required,
                message: "Location is required"
              }
            ]
          }),
          createTextField("tag", "Tag Type", item?.tag, {
            name: "tag",
            validations: [
              {
                name: "required",
                validator: Validators.required,
                message: "Tag Type is required"
              }
            ]
          }),
          createTextAreaField("attributes", "Tag Attributes", item?.attributes, {
            name: "attributes",
            validations: [],
            props: { rows: 5 },
            hint: `A list of tag attributes, one per line, in the format: attr="value"`
          }),
          createTextAreaField("contents", "Tag Contents", item?.contents, {
            name: "contents",
            validations: [],
            props: { rows: 5 }
          })
        ];
      }
    };
    this.formFields = [
      createTextField("name", "Name", theme?.name, {
        name: "name",
        validations: [
          {
            name: "required",
            validator: Validators.required,
            message: "Name is required"
          }
        ]
      }),
      createTextField("description", "Description", theme?.description, {
        name: "description",
        validations: [
          {
            name: "required",
            validator: Validators.required,
            message: "Description is required"
          }
        ]
      }),
      {
        name: "settings",
        key: "settings",
        type: "group",
        fields: [
          createTextField("cssSrc", "Custom CSS Link", theme?.settings?.cssSrc, {
            name: "cssSrc",
            validations: []
          })
        ]
      },
      ...!this.createMode() ? [
        createModalListField("customTags", "Custom Tags", theme?.customTags ?? [], {
          name: "customTags",
          validations: [],
          props: {
            modalConfig: this.customHtmlTagModalConfig
          }
        })
      ] : []
    ];
  }
  getUpdateMethod() {
    return this.operationRegistry.getOperation("theme", "update") ?? ((id, data) => this.entitiesService.updateTheme(id, data));
  }
  stateItemToListItem(item) {
    return {
      id: item.id,
      title: item.name,
      icon: "code",
      display: ""
    };
  }
  static \u0275fac = function ThemeDetailsSectionComponent_Factory(__ngFactoryType__) {
    return new (__ngFactoryType__ || _ThemeDetailsSectionComponent)();
  };
  static \u0275cmp = /* @__PURE__ */ \u0275\u0275defineComponent({ type: _ThemeDetailsSectionComponent, selectors: [["app-theme-details-section"]], viewQuery: function ThemeDetailsSectionComponent_Query(rf, ctx) {
    if (rf & 1) {
      \u0275\u0275viewQuery(_c047, 7);
    }
    if (rf & 2) {
      let _t;
      \u0275\u0275queryRefresh(_t = \u0275\u0275loadQuery()) && (ctx.logoTemplate = _t.first);
    }
  }, inputs: { ownerId: [1, "ownerId"] }, features: [\u0275\u0275InheritDefinitionFeature], decls: 14, vars: 7, consts: [["customTemplate", ""], [1, "card", "pt-2"], [1, "mb-4", "p-2", "flex", "justify-start", "items-center"], [1, "!text-[2.5rem]", 3, "icon", "ngClass"], [1, "pl-6", "flex-1"], [1, "flex", "justify-between", "items-center"], [1, "text-xl", "font-semibold", "m-0"], [1, "icon-light"], [3, "fields", "actions", "hideActions"], ["tableStyleClass", "info-display !w-auto", 3, "data", "columns", "showGridLines", "hideHeader"], [1, "pi", "pi-pen-to-square", "action", "hover", "!text-2xl", 3, "click", "keydown.enter"], [3, "formSubmit", "formValidityChange", "formValueChange", "fields", "actions", "hideActions"], [1, "max-w-[150px]", 3, "src", "alt"]], template: function ThemeDetailsSectionComponent_Template(rf, ctx) {
    if (rf & 1) {
      \u0275\u0275elementStart(0, "div", 1)(1, "div", 2);
      \u0275\u0275element(2, "fa-icon", 3);
      \u0275\u0275elementStart(3, "div", 4)(4, "div", 5)(5, "h2", 6);
      \u0275\u0275text(6, "Theme Details");
      \u0275\u0275elementEnd();
      \u0275\u0275conditionalCreate(7, ThemeDetailsSectionComponent_Conditional_7_Template, 2, 1, "div", 7);
      \u0275\u0275elementEnd();
      \u0275\u0275elementStart(8, "span");
      \u0275\u0275text(9, "Give your theme a unique name and description.");
      \u0275\u0275elementEnd()()();
      \u0275\u0275conditionalCreate(10, ThemeDetailsSectionComponent_Conditional_10_Template, 1, 3, "app-dynamic-form", 8);
      \u0275\u0275conditionalCreate(11, ThemeDetailsSectionComponent_Conditional_11_Template, 1, 4, "app-grid", 9);
      \u0275\u0275elementEnd();
      \u0275\u0275template(12, ThemeDetailsSectionComponent_ng_template_12_Template, 2, 1, "ng-template", null, 0, \u0275\u0275templateRefExtractor);
    }
    if (rf & 2) {
      \u0275\u0275advance(2);
      \u0275\u0275property("icon", ctx.faPalette)("ngClass", \u0275\u0275pureFunction1(5, _c15, ctx.isFormEditable()));
      \u0275\u0275advance(5);
      \u0275\u0275conditional(!ctx.isFormEditable() && !ctx.createMode() ? 7 : -1);
      \u0275\u0275advance(3);
      \u0275\u0275conditional(ctx.isFormEditable() || ctx.createMode() && ctx.formFields.length ? 10 : -1);
      \u0275\u0275advance();
      \u0275\u0275conditional(!ctx.isFormEditable() && !ctx.createMode() ? 11 : -1);
    }
  }, dependencies: [
    CommonModule,
    NgClass,
    ButtonModule,
    InputTextModule,
    GridComponent,
    DynamicFormComponent,
    FontAwesomeModule,
    FaIconComponent
  ], encapsulation: 2 });
};
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(ThemeDetailsSectionComponent, [{
    type: Component,
    args: [{ selector: "app-theme-details-section", imports: [
      CommonModule,
      ButtonModule,
      InputTextModule,
      GridComponent,
      DynamicFormComponent,
      FontAwesomeModule
    ], template: `<div class="card pt-2">
  <div class="mb-4 p-2 flex justify-start items-center">
    <fa-icon
      [icon]="faPalette"
      class="!text-[2.5rem]"
      [ngClass]="{ 'icon-primary': isFormEditable() }"
    ></fa-icon>

    <div class="pl-6 flex-1">
      <div class="flex justify-between items-center">
        <h2 class="text-xl font-semibold m-0">Theme Details</h2>
        @if (!isFormEditable() && !createMode()) {
          <div class="icon-light">
            <span
              class="pi pi-pen-to-square action hover !text-2xl"
              [attr.aria-label]="'Edit theme details'"
              (click)="onEdit()"
              (keydown.enter)="onEdit()"
            ></span>
          </div>
        }
      </div>
      <span>Give your theme a unique name and description.</span>
    </div>
  </div>

  @if (isFormEditable() || (createMode() && formFields.length)) {
    <app-dynamic-form
      [fields]="formFields"
      [actions]="actions"
      [hideActions]="createMode()"
      (formSubmit)="onSubmit($event)"
      (formValidityChange)="onFormValidityChange($event)"
      (formValueChange)="onFormValueChange($event)"
    >
    </app-dynamic-form>
  }

  @if (!isFormEditable() && !createMode()) {
    <app-grid
      [data]="themeDetails()"
      [columns]="columns"
      [showGridLines]="false"
      [hideHeader]="true"
      tableStyleClass="info-display !w-auto"
    ></app-grid>
  }
</div>

<ng-template #customTemplate let-details>
  @if (details?.imageUrl) {
    <img
      [src]="details.imageUrl"
      class="max-w-[150px]"
      [alt]="details.key || 'image'"
    />
  } @else {
    {{ details?.value }}
  }
</ng-template>
` }]
  }], () => [], { logoTemplate: [{
    type: ViewChild,
    args: ["customTemplate", { static: true }]
  }], ownerId: [{ type: Input, args: [{ isSignal: true, alias: "ownerId", required: false }] }] });
})();
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && \u0275setClassDebugInfo(ThemeDetailsSectionComponent, { className: "ThemeDetailsSectionComponent", filePath: "src/app/features/administration/components/themes/theme-details-section/theme-details-section.component.ts", lineNumber: 63 });
})();

// src/app/features/administration/services/theme-utility.service.ts
var ThemeUtilityService = class _ThemeUtilityService {
  utilityService = inject(UtilityService);
  /**
   * Creates a single preset entry with a computed value
   * @param type - The type of preset (e.g., 'color', 'font-size', 'spacing')
   * @param group - The group name
   * @param name - Optional custom name for the preset
   * @param valueResolver - Function that computes the value for the preset
   * @returns Record with single preset entry
   */
  createPreset(type, group, name, valueResolver) {
    const presetName = name ?? `${this.utilityService.toTitleCase(group.replaceAll("-", " "))} ${this.utilityService.toTitleCase(type.replaceAll("-", " "))}`;
    return {
      [presetName]: valueResolver(`var(--${group}-${type})`)
    };
  }
  /**
   * Creates multiple presets for different groups of the same type
   * @param type - The type of preset (e.g., 'color', 'font-size', 'spacing')
   * @param groups - Array of group names
   * @param valueResolver - Function that computes the value for each preset
   * @returns Record with multiple preset entries
   */
  createPresets(type, groups, valueResolver) {
    return groups.reduce((result, group) => __spreadValues(__spreadValues({}, result), this.createPreset(type, group, void 0, valueResolver)), {});
  }
  static \u0275fac = function ThemeUtilityService_Factory(__ngFactoryType__) {
    return new (__ngFactoryType__ || _ThemeUtilityService)();
  };
  static \u0275prov = /* @__PURE__ */ \u0275\u0275defineInjectable({ token: _ThemeUtilityService, factory: _ThemeUtilityService.\u0275fac, providedIn: "root" });
};
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(ThemeUtilityService, [{
    type: Injectable,
    args: [{
      providedIn: "root"
    }]
  }], null, null);
})();

// src/app/features/administration/services/theme-color.service.ts
var ThemeColorService = class _ThemeColorService {
  themeEngine = inject(ThemeEngine);
  utilityService = inject(UtilityService);
  themeUtilityService = inject(ThemeUtilityService);
  computeColor(variable) {
    return this.themeEngine.resolveFormula(variable);
  }
  getFontColorPresets(group, presets) {
    return __spreadProps(__spreadValues({}, this.themeUtilityService.createPresets("font-color", [...presets || []], this.computeColor.bind(this))), {
      Auto: this.computeColor(`var(--${group}-background-color).inverse("${THEME_OFF_WHITE}", "${THEME_OFF_BLACK}")`),
      "Primary Color": this.computeColor("var(--color-primary-color)"),
      "Primary Contrast": this.computeColor("var(--color-primary-contrast)"),
      "Secondary Color": this.computeColor("var(--color-secondary-color)"),
      "Secondary Contrast": this.computeColor("var(--color-secondary-contrast)"),
      "Off Black": this.computeColor(THEME_OFF_BLACK),
      "Off White": this.computeColor(THEME_OFF_WHITE),
      Black: this.computeColor("#000000"),
      White: this.computeColor("#ffffff")
    });
  }
  getBackgroundColorPresets(presets, customColors) {
    const groups = [...presets || []];
    const backgroundShades = groups.reduce((result, grp) => __spreadValues(__spreadValues(__spreadValues(__spreadValues({}, result), this.themeUtilityService.createPreset("background-color", grp, `${this.utilityService.toTitleCase(grp)} Background`, this.computeColor.bind(this))), this.createShadeValues("lighten", grp, "background")), this.createShadeValues("darken", grp, "background")), {});
    return __spreadValues(__spreadValues({}, customColors), backgroundShades);
  }
  getBorderColorPresets(group, presets, backgrounds, customColors) {
    const groups = [group, ...backgrounds || []];
    const backgroundShades = groups.reduce((result, grp) => __spreadValues(__spreadValues(__spreadValues(__spreadValues({}, result), this.themeUtilityService.createPreset("background-color", grp, `${this.utilityService.toTitleCase(grp)} Background`, this.computeColor.bind(this))), this.createShadeValues("lighten", grp, "background")), this.createShadeValues("darken", grp, "background")), {});
    return __spreadValues(__spreadProps(__spreadValues(__spreadValues({}, this.themeUtilityService.createPresets("border-color", [...presets || []], this.computeColor.bind(this))), backgroundShades), {
      "Primary Color": this.computeColor("var(--color-primary-color)"),
      "Secondary Color": this.computeColor("var(--color-secondary-color)")
    }), customColors);
  }
  createShadeValues(type, group, variable, values = DEFAULT_SHADE_VALUES) {
    return values.reduce((result, val) => {
      const key = `${this.utilityService.toTitleCase(type)} ${this.utilityService.toTitleCase(group)} ${this.utilityService.toTitleCase(variable)} ${val * 100}%`;
      result[key] = this.computeColor(`var(--${group}-${variable}-color).${type}(${val})`);
      return result;
    }, {});
  }
  /**
   * Get comprehensive color presets combining all color types for better identification
   * @param group - The primary group context
   * @param additionalGroups - Additional groups to include in presets
   * @returns Record containing all available color presets
   */
  getAllColorPresets(group, additionalGroups = [], customColors = {}) {
    const allGroups = [group, ...additionalGroups];
    const uniqueGroups = [...new Set(allGroups)];
    const commonThemeColors = {
      "Primary Color": this.computeColor("var(--color-primary-color)"),
      "Primary Contrast": this.computeColor("var(--color-primary-contrast)"),
      "Secondary Color": this.computeColor("var(--color-secondary-color)"),
      "Secondary Contrast": this.computeColor("var(--color-secondary-contrast)"),
      "Success Color": this.computeColor("var(--color-success-color)"),
      "Success Contrast": this.computeColor("var(--color-success-contrast)"),
      "Info Color": this.computeColor("var(--color-info-color)"),
      "Info Contrast": this.computeColor("var(--color-info-contrast)"),
      "Warning Color": this.computeColor("var(--color-warning-color)"),
      "Warning Contrast": this.computeColor("var(--color-warning-contrast)"),
      "Danger Color": this.computeColor("var(--color-danger-color)"),
      "Danger Contrast": this.computeColor("var(--color-danger-contrast)"),
      "Notify Color": this.computeColor("var(--color-notify-color)"),
      "Notify Contrast": this.computeColor("var(--color-notify-contrast)"),
      White: this.computeColor("#ffffff"),
      Black: this.computeColor("#000000"),
      "Off White": this.computeColor(THEME_OFF_WHITE),
      "Off Black": this.computeColor(THEME_OFF_BLACK),
      Transparent: this.computeColor("transparent")
    };
    return __spreadValues(__spreadValues(__spreadValues(__spreadValues(__spreadValues({}, this.getFontColorPresets(group, uniqueGroups)), this.getBackgroundColorPresets(uniqueGroups, __spreadValues(__spreadValues({}, commonThemeColors), customColors))), this.getBorderColorPresets(group, uniqueGroups, uniqueGroups, __spreadValues(__spreadValues({}, commonThemeColors), customColors))), commonThemeColors), customColors);
  }
  /**
   * Determine if a value represents a color based on various detection strategies
   * @param value - The value to check
   * @param key - Optional key name for additional context
   * @returns boolean indicating if the value represents a color
   */
  isColorValue(value, key) {
    if (!value)
      return false;
    const trimmedValue = value.trim();
    if (key !== void 0 && key !== null && key.trim() !== "" && this.isColorByKeyName(key)) {
      return true;
    }
    return this.isColorByValueFormat(trimmedValue);
  }
  /**
   * Check if a key name suggests it represents a color
   */
  isColorByKeyName(key) {
    const keyLower = key.toLowerCase();
    const directColorKeywords = ["color", "background", "contrast"];
    if (directColorKeywords.some((keyword) => keyLower.includes(keyword))) {
      return true;
    }
    if (keyLower.includes("border")) {
      return keyLower.includes("color") || keyLower === "border" || keyLower.endsWith(" border");
    }
    if (keyLower.includes("font") && keyLower.includes("color")) {
      return true;
    }
    const themeColorKeywords = [
      "primary",
      "secondary",
      "success",
      "info",
      "notify",
      "warning",
      "danger"
    ];
    if (themeColorKeywords.some((keyword) => {
      const hasKeyword = keyLower.includes(keyword);
      const hasColor = keyLower.includes("color");
      const isStandaloneThemeColor = keyLower === keyword || keyLower === `${keyword} color`;
      return hasKeyword && (hasColor || isStandaloneThemeColor);
    })) {
      return true;
    }
    const contextualColorKeywords = ["active", "subnav", "logo", "client"];
    if (contextualColorKeywords.some((keyword) => {
      const hasKeyword = keyLower.includes(keyword);
      const hasColorContext = keyLower.includes("color") || keyLower.includes("background") || keyLower.includes("border") && keyLower.includes("color");
      return hasKeyword && hasColorContext;
    })) {
      return true;
    }
    return false;
  }
  /**
   * Check if a value format represents a color
   */
  isColorByValueFormat(value) {
    const colorPatterns = [
      /^#[0-9a-fA-F]{3,8}$/,
      // Hex colors (#fff, #ffffff, #ffffffff)
      /^rgb\s*\(/,
      // RGB colors
      /^rgba\s*\(/,
      // RGBA colors
      /^hsl\s*\(/,
      // HSL colors
      /^hsla\s*\(/,
      // HSLA colors
      /^(red|blue|green|yellow|purple|orange|pink|brown|black|white|gray|grey|transparent)$/i
      // Named colors
    ];
    if (colorPatterns.some((pattern) => pattern.test(value))) {
      return true;
    }
    if (value.startsWith("var(--") && value.endsWith(")")) {
      const variableName = value.slice(6, -1).toLowerCase();
      const colorVariablePatterns = [
        /.*color.*/,
        // Contains 'color'
        /.*background.*/,
        // Contains 'background'
        /.*border.*/,
        // Contains 'border'
        /.*contrast.*/
        // Contains 'contrast'
      ];
      return colorVariablePatterns.some((pattern) => pattern.test(variableName));
    }
    return false;
  }
  /**
   * Get context-aware color presets based on the key name
   * @param key - The key name to analyze for context
   * @param group - The primary group context
   * @param additionalGroups - Additional groups to include
   * @returns Contextual color presets
   */
  getContextualColorPresets(key, group, additionalGroups = []) {
    const keyLower = key.toLowerCase();
    const allGroups = [group, ...additionalGroups];
    if (keyLower.includes("font") || keyLower.includes("text")) {
      return this.getFontColorPresets(group, allGroups);
    }
    if (keyLower.includes("background") || keyLower.includes("bg")) {
      return this.getBackgroundColorPresets(allGroups);
    }
    if (keyLower.includes("border")) {
      return this.getBorderColorPresets(group, allGroups, allGroups);
    }
    return this.getAllColorPresets(group, additionalGroups);
  }
  static \u0275fac = function ThemeColorService_Factory(__ngFactoryType__) {
    return new (__ngFactoryType__ || _ThemeColorService)();
  };
  static \u0275prov = /* @__PURE__ */ \u0275\u0275defineInjectable({ token: _ThemeColorService, factory: _ThemeColorService.\u0275fac, providedIn: "root" });
};
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(ThemeColorService, [{
    type: Injectable,
    args: [{ providedIn: "root" }]
  }], null, null);
})();

// src/app/features/administration/factories/theme-form-field.factory.ts
var ThemeFormFieldFactory = class _ThemeFormFieldFactory {
  colorService = inject(ThemeColorService);
  themeUtilityService = inject(ThemeUtilityService);
  createFontFamilyField(id, value, presets) {
    const fontPresets = Object.entries(__spreadValues({}, this.themeUtilityService.createPresets("font-family", presets || [], (variable) => variable))).map(([key, val]) => ({
      label: key,
      value: val
    })) ?? [];
    return this.createDropdownWithGrouping({
      id,
      label: "Font Family",
      options: [
        ...fontPresets,
        ...AVAILABLE_FONTS.map((font) => ({ label: font, value: font }))
      ],
      value,
      props: { appendTo: "body", filter: true }
    });
  }
  createFontWeightField(id, value) {
    return this.createDropdownWithGrouping({
      id,
      label: "Font Weight",
      options: FONT_WEIGHTS.map((weight) => ({ label: weight, value: weight })),
      value,
      props: { appendTo: "body", filter: true }
    });
  }
  createFontTransformField(id, value) {
    return this.createDropdownWithGrouping({
      id,
      label: "Font Transform",
      options: FONT_TRANSFORMS,
      value,
      props: { appendTo: "body" }
    });
  }
  createFontColorField(id, value, group, presets, label = "Font Color", customColors) {
    const colorPresets = this.colorService.getFontColorPresets(group, presets);
    return this.createColorComboField(id, value, __spreadValues(__spreadValues({}, colorPresets), customColors), label);
  }
  createBackgroundColorField(id, value, presets, label = "Background Color", customColors) {
    const colorPresets = this.colorService.getBackgroundColorPresets(presets, customColors);
    return this.createColorComboField(id, value, colorPresets, label);
  }
  createBorderColorField(id, value, group, presets, backgrounds, customColors) {
    const colorPresets = this.colorService.getBorderColorPresets(group, presets, backgrounds, customColors);
    return this.createColorComboField(id, value, colorPresets, "Border Color");
  }
  createDropShadowField(id, value, label) {
    return this.createDropdownWithGrouping({
      id,
      label,
      options: DROP_SHADOW_OPTIONS,
      value,
      props: { appendTo: "body" }
    });
  }
  createColorComboField(id, value, colors, label) {
    const presets = Object.entries(colors).map(([key, val]) => ({
      label: key,
      value: val
    }));
    return this.createFieldWithGrouping(id, (fieldId) => createColorPickerField(fieldId, label, this.colorService.computeColor(value), {
      name: fieldId,
      props: {
        appendTo: "body",
        colorOptions: presets
      }
    }));
  }
  createSizeNumberField(id, value, label, unit = "rem") {
    return this.createFieldWithGrouping(id, (fieldId) => createNumberField(fieldId, label, value, {
      name: fieldId,
      props: {
        appendTo: "body",
        suffix: unit
      }
    }));
  }
  createDropdownWithGrouping(config) {
    return this.createFieldWithGrouping(config.id, (fieldId) => createDropdownField(fieldId, config.label, config.options, config.value, {
      name: fieldId,
      validations: [],
      props: config.props
    }));
  }
  createFieldWithGrouping(id, fieldFactory) {
    if (id.includes(".")) {
      const [groupKey, fieldKey] = id.split(".", 2);
      return {
        key: groupKey,
        name: groupKey,
        type: "group",
        fields: [fieldFactory(fieldKey)]
      };
    }
    return fieldFactory(id);
  }
  static \u0275fac = function ThemeFormFieldFactory_Factory(__ngFactoryType__) {
    return new (__ngFactoryType__ || _ThemeFormFieldFactory)();
  };
  static \u0275prov = /* @__PURE__ */ \u0275\u0275defineInjectable({ token: _ThemeFormFieldFactory, factory: _ThemeFormFieldFactory.\u0275fac, providedIn: "root" });
};
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(ThemeFormFieldFactory, [{
    type: Injectable,
    args: [{ providedIn: "root" }]
  }], null, null);
})();

// src/app/features/administration/services/form-field.service.ts
var FormFieldService = class _FormFieldService {
  merge(existingFields, newFields) {
    if (!existingFields?.length) {
      return this.consolidateByKey(newFields);
    }
    const consolidatedExisting = this.consolidateByKey(existingFields);
    const consolidatedNew = this.consolidateByKey(newFields);
    return this.mergeConsolidatedFields(consolidatedExisting, consolidatedNew);
  }
  consolidateByKey(fields) {
    const fieldMap = /* @__PURE__ */ new Map();
    const fieldsWithoutKeys = [];
    for (const field of fields) {
      const key = field.key || field.name;
      if (!key) {
        fieldsWithoutKeys.push(field);
        continue;
      }
      if (fieldMap.has(key)) {
        const existing = fieldMap.get(key);
        fieldMap.set(key, this.mergeFields(existing, field));
      } else {
        fieldMap.set(key, field);
      }
    }
    return [...fieldsWithoutKeys, ...Array.from(fieldMap.values())];
  }
  mergeFields(existing, incoming) {
    if (this.isGroupField(existing) && this.isGroupField(incoming)) {
      const mergedFields = [
        ...existing.fields || [],
        ...incoming.fields || []
      ];
      return __spreadProps(__spreadValues(__spreadValues({}, existing), incoming), {
        fields: this.consolidateByKey(mergedFields)
      });
    }
    return incoming;
  }
  isGroupField(field) {
    return field.type === "group" && Array.isArray(field.fields);
  }
  mergeConsolidatedFields(existingFields, newFields) {
    const existingMap = new Map(existingFields.map((field) => [field.key || field.name, field]));
    return newFields.map((newField) => {
      const key = newField.key || newField.name;
      const existing = key ? existingMap.get(key) : void 0;
      return existing ? this.mergeFields(existing, newField) : newField;
    });
  }
  static \u0275fac = function FormFieldService_Factory(__ngFactoryType__) {
    return new (__ngFactoryType__ || _FormFieldService)();
  };
  static \u0275prov = /* @__PURE__ */ \u0275\u0275defineInjectable({ token: _FormFieldService, factory: _FormFieldService.\u0275fac, providedIn: "root" });
};
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(FormFieldService, [{
    type: Injectable,
    args: [{
      providedIn: "root"
    }]
  }], null, null);
})();

// src/app/features/administration/components/base/theme-settings-section-base.ts
var ThemeSettingsSectionBase = class extends EntitySectionBaseComponent {
  group;
  faFill = faFill;
  title = "Theme Settings";
  description = "Customize your theme by tweaking the following settings.";
  themeEngine = inject(ThemeEngine);
  formFieldFactory = inject(ThemeFormFieldFactory);
  formFieldMerger = inject(FormFieldService);
  entitiesService = inject(EntitiesService);
  operationRegistry = inject(EntityOperationRegistryService);
  colorService = inject(ThemeColorService);
  formChanges = {};
  constructor(group) {
    super();
    this.group = group;
  }
  updateFormFields() {
    const entity = this.entity();
    if (!entity)
      return;
    const newFields = this.getFields(entity);
    this.formFields = this.formFieldMerger.merge(this.formFields, newFields);
  }
  onEntityLoaded(entity) {
    super.onEntityLoaded(entity);
    if (entity?.settings) {
      this.themeEngine.settingsToVariables(entity.settings);
    }
  }
  isColorRow(rowData) {
    const colorKeys = ["Font Color", "Background Color", "Border Color"];
    return colorKeys.includes(rowData["key"]);
  }
  getColorLabelAndValue(variable) {
    const presets = __spreadValues(__spreadValues(__spreadValues({}, this.colorService.getFontColorPresets(this.group)), this.colorService.getBackgroundColorPresets([])), this.colorService.getBorderColorPresets(this.group));
    const computedColor = this.colorService.computeColor(variable);
    const presetKey = Object.keys(presets).find((key) => presets[key] === computedColor);
    if (isDefined(presetKey)) {
      return { label: presetKey, value: computedColor };
    }
    return { label: computedColor, value: computedColor };
  }
  onFieldValueChange(values) {
    const keys = values.fieldKey.split(".");
    let current = this.formChanges;
    for (let i = 0; i < keys.length - 1; i++) {
      if (isNullOrUndefined(current[keys[i]]) || typeof current[keys[i]] !== "object") {
        current[keys[i]] = {};
      }
      current = current[keys[i]];
    }
    current[keys[keys.length - 1]] = values.value;
  }
  /**
   * Helper method to safely access nested properties using a path array
   */
  getThemeValue(themeSettings, path) {
    return path.reduce((obj, key) => {
      if (obj !== null && obj !== void 0 && typeof obj === "object" && key in obj) {
        return obj[key];
      }
      return void 0;
    }, themeSettings);
  }
  /**
  * Format theme value based on configuration
  */
  formatThemeValue(themeSettings, config) {
    const value = this.getThemeValue(themeSettings, config.path);
    if (value === null || value === void 0)
      return "None";
    if (config.transform) {
      return config.transform(value);
    }
    if (config.options) {
      const option = config.options.find((opt) => opt.value === value);
      return option?.label ?? "None";
    }
    if (typeof value !== "string" && typeof value !== "number" && typeof value !== "boolean") {
      return "None";
    }
    const stringValue = String(value);
    if (stringValue.startsWith("var(")) {
      const resolvedValue = this.themeEngine.resolveFormula(stringValue);
      return this.formatResolvedValue(resolvedValue, config.path);
    }
    return this.formatResolvedValue(stringValue, config.path);
  }
  /**
   * Format a resolved value based on the field context
   */
  formatResolvedValue(value, path) {
    if (!value)
      return "None";
    const pathStr = path.join(".");
    if (pathStr.includes("font.family")) {
      return this.formatFontFamily(value);
    }
    if (pathStr.includes("font.weight")) {
      return this.formatFontWeight(value);
    }
    if (pathStr.includes("font.transform")) {
      return this.formatFontTransform(value);
    }
    if (pathStr.includes("icon.pack")) {
      return this.formatIconPack(value);
    }
    if (pathStr.includes("shadow") || pathStr.includes("border.shadow")) {
      return this.formatDropShadow(value);
    }
    if (pathStr.includes("size") || pathStr.includes("width") || pathStr.includes("radius")) {
      return this.formatSize(value);
    }
    return value;
  }
  /**
   * Format font family value to readable name
   */
  formatFontFamily(value) {
    const cleanValue = value.replace(/['"]/g, "");
    const availableFont = AVAILABLE_FONTS.find((font) => font === cleanValue);
    if (availableFont) {
      return availableFont;
    }
    return cleanValue || "Default";
  }
  /**
   * Format font weight value to readable name
   */
  formatFontWeight(value) {
    const weightMap = {
      "300": "Light",
      "400": "Normal",
      "500": "Medium",
      "600": "Semi Bold",
      "700": "Bold"
    };
    return weightMap[value] ?? value ?? "Normal";
  }
  /**
   * Format font transform value to readable name
   */
  formatFontTransform(value) {
    const transformMap = {
      unset: "None",
      none: "None",
      capitalize: "Title Case",
      uppercase: "Upper Case",
      lowercase: "Lower Case"
    };
    return transformMap[value] ?? value ?? "None";
  }
  /**
   * Format icon pack value to readable name
   */
  formatIconPack(value) {
    const iconPack = ICON_PACKS.find((pack) => pack.value === value);
    return iconPack?.label ?? value ?? "Default";
  }
  /**
   * Format drop shadow value to readable name
   */
  formatDropShadow(value) {
    const shadowOption = DROP_SHADOW_OPTIONS.find((option) => option.value === value);
    return shadowOption?.label ?? (value === "none" ? "None" : value) ?? "None";
  }
  /**
   * Format size value with appropriate units
   */
  formatSize(value) {
    if (!value || value === "0" || value === "none")
      return "None";
    if (value === "auto")
      return "Auto";
    if (value === "hidden")
      return "Hidden";
    if (/\d+(px|rem|em|%|pt)/.test(value)) {
      return value;
    }
    if (/^\d+(\.\d+)?$/.test(value)) {
      return `${value}px`;
    }
    return value ?? "Unknown";
  }
  /**
   * Safely parse a value to float
   */
  parseFloatSafely(value) {
    if (typeof value === "number")
      return value;
    if (typeof value === "string") {
      const parsed = parseFloat(value);
      return isNaN(parsed) ? 0 : parsed;
    }
    return 0;
  }
  /**
   * Create form fields from field configurations
   */
  createFormFieldsFromConfig(entity, fieldConfigs) {
    const themeSettings = this.themeEngine.themeSettingsMergedWithDefault(entity?.settings ?? {});
    return fieldConfigs.map((config) => {
      const value = this.getThemeValue(themeSettings, config.path);
      return this.createFormFieldFromConfig(config, value);
    });
  }
  /**
   * Create a single form field from configuration
   */
  createFormFieldFromConfig(config, value) {
    switch (config.type) {
      case "dropdown":
        return this.formFieldFactory.createDropdownWithGrouping({
          id: config.id,
          label: config.label,
          options: config.options || [],
          value,
          props: config.props
        });
      case "font-family":
        return this.formFieldFactory.createFontFamilyField(config.id, value, config.presets);
      case "font-weight":
        return this.formFieldFactory.createFontWeightField(config.id, value);
      case "font-transform":
        return this.formFieldFactory.createFontTransformField(config.id, value);
      case "color":
        return this.createColorFieldFromConfig(config, value);
      case "size":
      case "number":
        return this.formFieldFactory.createSizeNumberField(config.id, this.parseFloatSafely(value), config.label, config.props?.["unit"] || "rem");
      case "text":
      default:
        return createTextField(config.id, config.label, value, {
          name: config.id,
          props: __spreadValues({}, config.props)
        });
    }
  }
  /**
   * Create color field based on configuration
   * This method determines the type of color field to create
   * based on the label or ID, and returns the appropriate field configuration.
   * @param config - The configuration for the color field
   * @param value - The initial value for the color field
   * @return FormFieldConfig for the color field
   */
  createColorFieldFromConfig(config, value) {
    const group = config.group ?? this.group ?? "";
    const fieldType = this.determineColorFieldType(config.label, config.id);
    switch (fieldType) {
      case "font":
        return this.formFieldFactory.createFontColorField(config.id, value, group, config.presets, config.label, config.customColors);
      case "background":
        return this.formFieldFactory.createBackgroundColorField(config.id, value, config.presets, config.label, config.customColors);
      case "border":
        return this.formFieldFactory.createBorderColorField(config.id, value, group, config.presets, void 0, config.customColors);
      default: {
        const colorPresets = this.colorService.getContextualColorPresets(config.id, group ?? "default", ["main", "content", "header", "footer", "navigation", "sidebar"]);
        return this.formFieldFactory.createColorComboField(config.id, value, colorPresets, config.label);
      }
    }
  }
  /**
   * Determine color field type based on label or ID
   */
  determineColorFieldType(label, id) {
    const labelLower = label.toLowerCase();
    const idLower = id.toLowerCase();
    if (labelLower.includes("font") || labelLower.includes("text") || idLower.includes("font") || idLower.includes("text")) {
      return "font";
    }
    if (labelLower.includes("background") || idLower.includes("background")) {
      return "background";
    }
    if (labelLower.includes("border") || idLower.includes("border")) {
      return "border";
    }
    return "generic";
  }
  /**
   * Create theme detail configurations from field configurations
   */
  createThemeDetailsFromConfig(fieldConfigs) {
    return fieldConfigs.filter((config) => config.includeInDetails !== false).map((config) => ({
      key: config.label,
      path: config.path,
      transform: config.transform,
      options: config.options
    }));
  }
  async mapEntityToEditor(entity) {
    return this.themeEngine.themeSettingsMergedWithDefault(entity.settings)[this.group];
  }
  async mapEditorToEntity(entity, values) {
    entity.settings = __spreadProps(__spreadValues({}, entity.settings), {
      [this.group]: __spreadValues(__spreadValues({}, entity.settings?.[this.group]), values)
    });
    return entity;
  }
};

// src/app/features/administration/components/themes/theme-value-display/theme-value-display.component.ts
function ThemeValueDisplayComponent_Conditional_0_Template(rf, ctx) {
  if (rf & 1) {
    \u0275\u0275domElementStart(0, "div", 0);
    \u0275\u0275domElement(1, "div", 1);
    \u0275\u0275domElementStart(2, "span");
    \u0275\u0275text(3);
    \u0275\u0275domElementEnd()();
  }
  if (rf & 2) {
    const ctx_r0 = \u0275\u0275nextContext();
    \u0275\u0275advance();
    \u0275\u0275styleMap("background-color: " + ctx_r0.getColorLabelAndValue().value + "; border: 1px solid " + ctx_r0.getBorderColor());
    \u0275\u0275advance(2);
    \u0275\u0275textInterpolate(ctx_r0.getColorLabelAndValue().label);
  }
}
function ThemeValueDisplayComponent_Conditional_1_Template(rf, ctx) {
  if (rf & 1) {
    \u0275\u0275domElementStart(0, "span");
    \u0275\u0275text(1);
    \u0275\u0275domElementEnd();
  }
  if (rf & 2) {
    const ctx_r0 = \u0275\u0275nextContext();
    \u0275\u0275advance();
    \u0275\u0275textInterpolate(ctx_r0.rowData.value);
  }
}
var ThemeValueDisplayComponent = class _ThemeValueDisplayComponent {
  rowData;
  group;
  colorService = inject(ThemeColorService);
  isColorRow() {
    return this.colorService.isColorValue(this.rowData.value, this.rowData.key);
  }
  getColorLabelAndValue() {
    const contextualPresets = this.colorService.getContextualColorPresets(this.rowData.key, this.group, ["main", "content", "header", "footer", "navigation", "sidebar"]);
    const allPresets = this.getAllColorPresets();
    const computedColor = this.colorService.computeColor(this.rowData.value);
    let presetKey = Object.keys(contextualPresets).find((key) => contextualPresets[key] === computedColor);
    if (presetKey !== void 0) {
      return { label: presetKey, value: computedColor };
    }
    presetKey = Object.keys(allPresets).find((key) => allPresets[key] === computedColor);
    if (presetKey !== void 0) {
      return { label: presetKey, value: computedColor };
    }
    return { label: computedColor, value: computedColor };
  }
  /**
   * Collect all available color presets from all sources
   */
  getAllColorPresets() {
    const additionalGroups = [
      "main",
      "content",
      "header",
      "footer",
      "navigation",
      "sidebar"
    ];
    return this.colorService.getAllColorPresets(this.group, additionalGroups);
  }
  getBorderColor() {
    const originalColor = this.getColorLabelAndValue().value;
    return new ThemeColor(originalColor).darken(0.2).hex();
  }
  static \u0275fac = function ThemeValueDisplayComponent_Factory(__ngFactoryType__) {
    return new (__ngFactoryType__ || _ThemeValueDisplayComponent)();
  };
  static \u0275cmp = /* @__PURE__ */ \u0275\u0275defineComponent({ type: _ThemeValueDisplayComponent, selectors: [["app-theme-value-display"]], inputs: { rowData: "rowData", group: "group" }, decls: 2, vars: 1, consts: [[1, "flex", "items-center", "gap-2"], [1, "color-swatch"]], template: function ThemeValueDisplayComponent_Template(rf, ctx) {
    if (rf & 1) {
      \u0275\u0275conditionalCreate(0, ThemeValueDisplayComponent_Conditional_0_Template, 4, 3, "div", 0)(1, ThemeValueDisplayComponent_Conditional_1_Template, 2, 1, "span");
    }
    if (rf & 2) {
      \u0275\u0275conditional(ctx.isColorRow() ? 0 : 1);
    }
  }, dependencies: [CommonModule], styles: ["\n\n.color-swatch[_ngcontent-%COMP%] {\n  width: 1rem;\n  height: 1rem;\n  border-radius: var(--border-radius);\n  border: 1px solid var(--surface-border);\n}\n/*# sourceMappingURL=theme-value-display.component.css.map */"] });
};
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(ThemeValueDisplayComponent, [{
    type: Component,
    args: [{ selector: "app-theme-value-display", standalone: true, imports: [CommonModule], template: `@if (isColorRow()) {
  <!-- Color template -->
  <div class="flex items-center gap-2">
    <!-- eslint-disable-next-line @angular-eslint/template/no-inline-styles -->
    <div
      class="color-swatch"
      [style]="
        'background-color: ' +
        getColorLabelAndValue().value +
        '; border: 1px solid ' +
        getBorderColor()
      "
    ></div>
    <span>{{ getColorLabelAndValue().label }}</span>
  </div>
} @else {
  <!-- Default template -->
  <span>{{ rowData.value }}</span>
}
`, styles: ["/* src/app/features/administration/components/themes/theme-value-display/theme-value-display.component.scss */\n.color-swatch {\n  width: 1rem;\n  height: 1rem;\n  border-radius: var(--border-radius);\n  border: 1px solid var(--surface-border);\n}\n/*# sourceMappingURL=theme-value-display.component.css.map */\n"] }]
  }], null, { rowData: [{
    type: Input,
    args: [{ required: true }]
  }], group: [{
    type: Input,
    args: [{ required: true }]
  }] });
})();
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && \u0275setClassDebugInfo(ThemeValueDisplayComponent, { className: "ThemeValueDisplayComponent", filePath: "src/app/features/administration/components/themes/theme-value-display/theme-value-display.component.ts", lineNumber: 18 });
})();

// src/app/features/administration/components/themes/theme-settings-main-section/theme-settings-main-section.component.ts
var _c048 = ["valueTemplate"];
var _c16 = (a0) => ({ "icon-primary": a0 });
function ThemeSettingsMainSectionComponent_Conditional_7_Template(rf, ctx) {
  if (rf & 1) {
    const _r1 = \u0275\u0275getCurrentView();
    \u0275\u0275elementStart(0, "div", 7)(1, "span", 10);
    \u0275\u0275listener("click", function ThemeSettingsMainSectionComponent_Conditional_7_Template_span_click_1_listener() {
      \u0275\u0275restoreView(_r1);
      const ctx_r1 = \u0275\u0275nextContext();
      return \u0275\u0275resetView(ctx_r1.onEdit());
    })("keydown.enter", function ThemeSettingsMainSectionComponent_Conditional_7_Template_span_keydown_enter_1_listener() {
      \u0275\u0275restoreView(_r1);
      const ctx_r1 = \u0275\u0275nextContext();
      return \u0275\u0275resetView(ctx_r1.onEdit());
    });
    \u0275\u0275elementEnd()();
  }
  if (rf & 2) {
    \u0275\u0275advance();
    \u0275\u0275attribute("aria-label", "Edit theme details");
  }
}
function ThemeSettingsMainSectionComponent_Conditional_10_Template(rf, ctx) {
  if (rf & 1) {
    const _r3 = \u0275\u0275getCurrentView();
    \u0275\u0275elementStart(0, "app-dynamic-form", 11);
    \u0275\u0275listener("formSubmit", function ThemeSettingsMainSectionComponent_Conditional_10_Template_app_dynamic_form_formSubmit_0_listener($event) {
      \u0275\u0275restoreView(_r3);
      const ctx_r1 = \u0275\u0275nextContext();
      return \u0275\u0275resetView(ctx_r1.onSubmit($event));
    })("formValidityChange", function ThemeSettingsMainSectionComponent_Conditional_10_Template_app_dynamic_form_formValidityChange_0_listener($event) {
      \u0275\u0275restoreView(_r3);
      const ctx_r1 = \u0275\u0275nextContext();
      return \u0275\u0275resetView(ctx_r1.onFormValidityChange($event));
    })("fieldValueChange", function ThemeSettingsMainSectionComponent_Conditional_10_Template_app_dynamic_form_fieldValueChange_0_listener($event) {
      \u0275\u0275restoreView(_r3);
      const ctx_r1 = \u0275\u0275nextContext();
      return \u0275\u0275resetView(ctx_r1.onFieldValueChange($event));
    });
    \u0275\u0275elementEnd();
  }
  if (rf & 2) {
    const ctx_r1 = \u0275\u0275nextContext();
    \u0275\u0275property("fields", ctx_r1.formFields)("actions", ctx_r1.actions)("hideActions", ctx_r1.createMode());
  }
}
function ThemeSettingsMainSectionComponent_Conditional_11_Template(rf, ctx) {
  if (rf & 1) {
    \u0275\u0275element(0, "app-grid", 9);
  }
  if (rf & 2) {
    const ctx_r1 = \u0275\u0275nextContext();
    \u0275\u0275property("data", ctx_r1.themeDetails())("columns", ctx_r1.columns)("showGridLines", false)("hideHeader", true);
  }
}
function ThemeSettingsMainSectionComponent_ng_template_12_Template(rf, ctx) {
  if (rf & 1) {
    \u0275\u0275element(0, "app-theme-value-display", 12);
  }
  if (rf & 2) {
    const rowData_r4 = ctx.$implicit;
    const ctx_r1 = \u0275\u0275nextContext();
    \u0275\u0275property("rowData", rowData_r4)("group", ctx_r1.group);
  }
}
var MAIN_THEME_PATHS = {
  FONT_FAMILY: ["main", "font", "family"],
  FONT_SIZE: ["main", "font", "size"],
  FONT_WEIGHT: ["main", "font", "weight"],
  FONT_COLOR: ["main", "font", "color"],
  BACKGROUND_COLOR: ["main", "background", "color"],
  BORDER_COLOR: ["main", "border", "color"],
  GUTTER_WIDTH: ["main", "gutter", "width"],
  SHADOW: ["main", "shadow"],
  ICON_PACK: ["main", "icon", "pack"]
};
var ThemeSettingsMainSectionComponent = class _ThemeSettingsMainSectionComponent extends ThemeSettingsSectionBase {
  valueTemplate;
  themeDetails = computed(() => {
    const themeDetails = this.entity();
    if (!isDefined(themeDetails))
      return [];
    const themeSettings = this.themeEngine.themeSettingsMergedWithDefault(themeDetails?.settings ?? {});
    const detailConfigs = this.createThemeDetailsFromConfig(this.getFieldConfigurations());
    return detailConfigs.map((config) => ({
      key: config.key,
      value: this.formatThemeValue(themeSettings, config)
    }));
  }, ...ngDevMode ? [{ debugName: "themeDetails" }] : []);
  constructor() {
    super("main");
  }
  ngOnInit() {
    this.initializeColumns();
  }
  initializeColumns() {
    this.columns = [
      { field: "key", header: "", transform: "uppercase" },
      {
        field: "value",
        header: "",
        cellTemplate: this.valueTemplate
      }
    ];
  }
  getFieldConfigurations() {
    return [
      {
        id: "font.family",
        label: "Font Family",
        path: MAIN_THEME_PATHS.FONT_FAMILY,
        type: "font-family"
      },
      {
        id: "font.size",
        label: "Font Size",
        path: MAIN_THEME_PATHS.FONT_SIZE,
        type: "size"
      },
      {
        id: "font.weight",
        label: "Font Weight",
        path: MAIN_THEME_PATHS.FONT_WEIGHT,
        type: "font-weight"
      },
      {
        id: "font.color",
        label: "Font Color",
        path: MAIN_THEME_PATHS.FONT_COLOR,
        type: "color",
        group: "main"
      },
      {
        id: "background.color",
        label: "Background Color",
        path: MAIN_THEME_PATHS.BACKGROUND_COLOR,
        type: "color",
        group: "main"
      },
      {
        id: "border.color",
        label: "Border Color",
        path: MAIN_THEME_PATHS.BORDER_COLOR,
        type: "color",
        group: "main"
      },
      {
        id: "gutter.width",
        label: "Gutter Size",
        path: MAIN_THEME_PATHS.GUTTER_WIDTH,
        type: "size"
      },
      {
        id: "shadow",
        label: "Shadow",
        path: MAIN_THEME_PATHS.SHADOW,
        type: "dropdown",
        options: DROP_SHADOW_OPTIONS
      },
      {
        id: "icon.pack",
        label: "Icon Pack",
        path: MAIN_THEME_PATHS.ICON_PACK,
        type: "dropdown",
        options: ICON_PACKS,
        props: { appendTo: "body" }
      }
    ];
  }
  getFields(entity) {
    return this.createFormFieldsFromConfig(entity, this.getFieldConfigurations());
  }
  getUpdateMethod() {
    return this.operationRegistry.getOperation("theme", "update") ?? ((id) => this.entitiesService.updateTheme(id, {
      settings: {
        main: this.formChanges
      }
    }));
  }
  static \u0275fac = function ThemeSettingsMainSectionComponent_Factory(__ngFactoryType__) {
    return new (__ngFactoryType__ || _ThemeSettingsMainSectionComponent)();
  };
  static \u0275cmp = /* @__PURE__ */ \u0275\u0275defineComponent({ type: _ThemeSettingsMainSectionComponent, selectors: [["app-theme-settings-main-section"]], viewQuery: function ThemeSettingsMainSectionComponent_Query(rf, ctx) {
    if (rf & 1) {
      \u0275\u0275viewQuery(_c048, 7);
    }
    if (rf & 2) {
      let _t;
      \u0275\u0275queryRefresh(_t = \u0275\u0275loadQuery()) && (ctx.valueTemplate = _t.first);
    }
  }, features: [\u0275\u0275InheritDefinitionFeature], decls: 14, vars: 8, consts: [["valueTemplate", ""], [1, "card", "pt-2"], [1, "mb-4", "p-2", "flex", "justify-start", "items-center"], [1, "!text-[2.5rem]", 3, "icon", "ngClass"], [1, "pl-6", "flex-1"], [1, "flex", "justify-between", "items-center"], [1, "text-xl", "font-semibold", "m-0"], [1, "icon-light"], [3, "fields", "actions", "hideActions"], ["tableStyleClass", "info-display !w-auto", 3, "data", "columns", "showGridLines", "hideHeader"], [1, "pi", "pi-pen-to-square", "action", "hover", "!text-2xl", 3, "click", "keydown.enter"], [3, "formSubmit", "formValidityChange", "fieldValueChange", "fields", "actions", "hideActions"], [3, "rowData", "group"]], template: function ThemeSettingsMainSectionComponent_Template(rf, ctx) {
    if (rf & 1) {
      \u0275\u0275elementStart(0, "div", 1)(1, "div", 2);
      \u0275\u0275element(2, "fa-icon", 3);
      \u0275\u0275elementStart(3, "div", 4)(4, "div", 5)(5, "h2", 6);
      \u0275\u0275text(6, "Main");
      \u0275\u0275elementEnd();
      \u0275\u0275conditionalCreate(7, ThemeSettingsMainSectionComponent_Conditional_7_Template, 2, 1, "div", 7);
      \u0275\u0275elementEnd();
      \u0275\u0275elementStart(8, "span");
      \u0275\u0275text(9);
      \u0275\u0275elementEnd()()();
      \u0275\u0275conditionalCreate(10, ThemeSettingsMainSectionComponent_Conditional_10_Template, 1, 3, "app-dynamic-form", 8);
      \u0275\u0275conditionalCreate(11, ThemeSettingsMainSectionComponent_Conditional_11_Template, 1, 4, "app-grid", 9);
      \u0275\u0275elementEnd();
      \u0275\u0275template(12, ThemeSettingsMainSectionComponent_ng_template_12_Template, 1, 2, "ng-template", null, 0, \u0275\u0275templateRefExtractor);
    }
    if (rf & 2) {
      \u0275\u0275advance(2);
      \u0275\u0275property("icon", ctx.faFill)("ngClass", \u0275\u0275pureFunction1(6, _c16, ctx.isFormEditable()));
      \u0275\u0275advance(5);
      \u0275\u0275conditional(!ctx.isFormEditable() && !ctx.createMode() ? 7 : -1);
      \u0275\u0275advance(2);
      \u0275\u0275textInterpolate(ctx.description);
      \u0275\u0275advance();
      \u0275\u0275conditional(ctx.isFormEditable() || ctx.createMode() && ctx.formFields.length ? 10 : -1);
      \u0275\u0275advance();
      \u0275\u0275conditional(!ctx.isFormEditable() && !ctx.createMode() ? 11 : -1);
    }
  }, dependencies: [
    DynamicFormComponent,
    FontAwesomeModule,
    FaIconComponent,
    CommonModule,
    NgClass,
    GridComponent,
    ThemeValueDisplayComponent
  ], encapsulation: 2 });
};
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(ThemeSettingsMainSectionComponent, [{
    type: Component,
    args: [{ selector: "app-theme-settings-main-section", imports: [
      DynamicFormComponent,
      FontAwesomeModule,
      CommonModule,
      GridComponent,
      ThemeValueDisplayComponent
    ], template: `<div class="card pt-2">
  <div class="mb-4 p-2 flex justify-start items-center">
    <fa-icon
      [icon]="faFill"
      class="!text-[2.5rem]"
      [ngClass]="{ 'icon-primary': isFormEditable() }"
    ></fa-icon>

    <div class="pl-6 flex-1">
      <div class="flex justify-between items-center">
        <h2 class="text-xl font-semibold m-0">Main</h2>
        @if (!isFormEditable() && !createMode()) {
          <div class="icon-light">
            <span
              class="pi pi-pen-to-square action hover !text-2xl"
              [attr.aria-label]="'Edit theme details'"
              (click)="onEdit()"
              (keydown.enter)="onEdit()"
            ></span>
          </div>
        }
      </div>
      <span>{{ description }}</span>
    </div>
  </div>

  @if (isFormEditable() || (createMode() && formFields.length)) {
    <app-dynamic-form
      [fields]="formFields"
      [actions]="actions"
      [hideActions]="createMode()"
      (formSubmit)="onSubmit($event)"
      (formValidityChange)="onFormValidityChange($event)"
      (fieldValueChange)="onFieldValueChange($event)"
    >
    </app-dynamic-form>
  }

  @if (!isFormEditable() && !createMode()) {
    <app-grid
      [data]="themeDetails()"
      [columns]="columns"
      [showGridLines]="false"
      [hideHeader]="true"
      tableStyleClass="info-display !w-auto"
    ></app-grid>
  }
</div>

<ng-template #valueTemplate let-rowData>
  <app-theme-value-display [rowData]="rowData" [group]="group">
  </app-theme-value-display>
</ng-template>
` }]
  }], () => [], { valueTemplate: [{
    type: ViewChild,
    args: ["valueTemplate", { static: true }]
  }] });
})();
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && \u0275setClassDebugInfo(ThemeSettingsMainSectionComponent, { className: "ThemeSettingsMainSectionComponent", filePath: "src/app/features/administration/components/themes/theme-settings-main-section/theme-settings-main-section.component.ts", lineNumber: 48 });
})();

// src/app/features/administration/components/themes/theme-settings-color-section/theme-settings-color-section.component.ts
var _c049 = ["valueTemplate"];
var _c17 = (a0) => ({ "icon-primary": a0 });
function ThemeSettingsColorSectionComponent_Conditional_7_Template(rf, ctx) {
  if (rf & 1) {
    const _r1 = \u0275\u0275getCurrentView();
    \u0275\u0275elementStart(0, "div", 7)(1, "span", 10);
    \u0275\u0275listener("click", function ThemeSettingsColorSectionComponent_Conditional_7_Template_span_click_1_listener() {
      \u0275\u0275restoreView(_r1);
      const ctx_r1 = \u0275\u0275nextContext();
      return \u0275\u0275resetView(ctx_r1.onEdit());
    })("keydown.enter", function ThemeSettingsColorSectionComponent_Conditional_7_Template_span_keydown_enter_1_listener() {
      \u0275\u0275restoreView(_r1);
      const ctx_r1 = \u0275\u0275nextContext();
      return \u0275\u0275resetView(ctx_r1.onEdit());
    });
    \u0275\u0275elementEnd()();
  }
  if (rf & 2) {
    \u0275\u0275advance();
    \u0275\u0275attribute("aria-label", "Edit theme details");
  }
}
function ThemeSettingsColorSectionComponent_Conditional_10_Template(rf, ctx) {
  if (rf & 1) {
    const _r3 = \u0275\u0275getCurrentView();
    \u0275\u0275elementStart(0, "app-dynamic-form", 11);
    \u0275\u0275listener("formSubmit", function ThemeSettingsColorSectionComponent_Conditional_10_Template_app_dynamic_form_formSubmit_0_listener($event) {
      \u0275\u0275restoreView(_r3);
      const ctx_r1 = \u0275\u0275nextContext();
      return \u0275\u0275resetView(ctx_r1.onSubmit($event));
    })("formValidityChange", function ThemeSettingsColorSectionComponent_Conditional_10_Template_app_dynamic_form_formValidityChange_0_listener($event) {
      \u0275\u0275restoreView(_r3);
      const ctx_r1 = \u0275\u0275nextContext();
      return \u0275\u0275resetView(ctx_r1.onFormValidityChange($event));
    })("fieldValueChange", function ThemeSettingsColorSectionComponent_Conditional_10_Template_app_dynamic_form_fieldValueChange_0_listener($event) {
      \u0275\u0275restoreView(_r3);
      const ctx_r1 = \u0275\u0275nextContext();
      return \u0275\u0275resetView(ctx_r1.onFieldValueChange($event));
    });
    \u0275\u0275elementEnd();
  }
  if (rf & 2) {
    const ctx_r1 = \u0275\u0275nextContext();
    \u0275\u0275property("fields", ctx_r1.formFields)("actions", ctx_r1.actions)("hideActions", ctx_r1.createMode());
  }
}
function ThemeSettingsColorSectionComponent_Conditional_11_Template(rf, ctx) {
  if (rf & 1) {
    \u0275\u0275element(0, "app-grid", 9);
  }
  if (rf & 2) {
    const ctx_r1 = \u0275\u0275nextContext();
    \u0275\u0275property("data", ctx_r1.themeDetails())("columns", ctx_r1.columns)("showGridLines", false)("hideHeader", true);
  }
}
function ThemeSettingsColorSectionComponent_ng_template_12_Template(rf, ctx) {
  if (rf & 1) {
    \u0275\u0275element(0, "app-theme-value-display", 12);
  }
  if (rf & 2) {
    const rowData_r4 = ctx.$implicit;
    const ctx_r1 = \u0275\u0275nextContext();
    \u0275\u0275property("rowData", rowData_r4)("group", ctx_r1.group);
  }
}
var COLOR_THEME_PATHS = {
  PRIMARY: ["color", "primary", "color"],
  SECONDARY: ["color", "secondary", "color"],
  SUCCESS: ["color", "success", "color"],
  INFO: ["color", "info", "color"],
  NOTIFY: ["color", "notify", "color"],
  WARNING: ["color", "warning", "color"],
  DANGER: ["color", "danger", "color"]
};
var ThemeSettingsColorSectionComponent = class _ThemeSettingsColorSectionComponent extends ThemeSettingsSectionBase {
  valueTemplate;
  themeDetails = computed(() => {
    const themeDetails = this.entity();
    if (!isDefined(themeDetails))
      return [];
    const themeSettings = this.themeEngine.themeSettingsMergedWithDefault(themeDetails?.settings ?? {});
    const detailConfigs = this.createThemeDetailsFromConfig(this.getFieldConfigurations());
    return detailConfigs.map((config) => ({
      key: config.key,
      value: this.formatThemeValue(themeSettings, config)
    }));
  }, ...ngDevMode ? [{ debugName: "themeDetails" }] : []);
  constructor() {
    super("color");
  }
  ngOnInit() {
    this.initializeColumns();
  }
  initializeColumns() {
    this.columns = [
      { field: "key", header: "", transform: "uppercase" },
      {
        field: "value",
        header: "",
        cellTemplate: this.valueTemplate
      }
    ];
  }
  getFieldConfigurations() {
    return [
      {
        id: "primary.color",
        label: "Primary Color",
        path: COLOR_THEME_PATHS.PRIMARY,
        type: "color",
        group: "color"
      },
      {
        id: "secondary.color",
        label: "Secondary Color",
        path: COLOR_THEME_PATHS.SECONDARY,
        type: "color",
        group: "color"
      },
      {
        id: "success.color",
        label: "Success Color",
        path: COLOR_THEME_PATHS.SUCCESS,
        type: "color",
        group: "color"
      },
      {
        id: "info.color",
        label: "Info Color",
        path: COLOR_THEME_PATHS.INFO,
        type: "color",
        group: "color"
      },
      {
        id: "notify.color",
        label: "Notify Color",
        path: COLOR_THEME_PATHS.NOTIFY,
        type: "color",
        group: "color"
      },
      {
        id: "warning.color",
        label: "Warning Color",
        path: COLOR_THEME_PATHS.WARNING,
        type: "color",
        group: "color"
      },
      {
        id: "danger.color",
        label: "Danger Color",
        path: COLOR_THEME_PATHS.DANGER,
        type: "color",
        group: "color"
      }
    ];
  }
  getFields(entity) {
    return this.createFormFieldsFromConfig(entity, this.getFieldConfigurations());
  }
  getUpdateMethod() {
    return this.operationRegistry.getOperation("theme", "update") ?? ((id) => {
      if (isEmpty(this.formChanges)) {
        throw new Error("No form changes to save");
      }
      return this.entitiesService.updateTheme(id, {
        settings: {
          color: this.formChanges
        }
      });
    });
  }
  static \u0275fac = function ThemeSettingsColorSectionComponent_Factory(__ngFactoryType__) {
    return new (__ngFactoryType__ || _ThemeSettingsColorSectionComponent)();
  };
  static \u0275cmp = /* @__PURE__ */ \u0275\u0275defineComponent({ type: _ThemeSettingsColorSectionComponent, selectors: [["app-theme-settings-color-section"]], viewQuery: function ThemeSettingsColorSectionComponent_Query(rf, ctx) {
    if (rf & 1) {
      \u0275\u0275viewQuery(_c049, 7);
    }
    if (rf & 2) {
      let _t;
      \u0275\u0275queryRefresh(_t = \u0275\u0275loadQuery()) && (ctx.valueTemplate = _t.first);
    }
  }, features: [\u0275\u0275InheritDefinitionFeature], decls: 14, vars: 8, consts: [["valueTemplate", ""], [1, "card", "pt-2"], [1, "mb-4", "p-2", "flex", "justify-start", "items-center"], [1, "!text-[2.5rem]", 3, "icon", "ngClass"], [1, "pl-6", "flex-1"], [1, "flex", "justify-between", "items-center"], [1, "text-xl", "font-semibold", "m-0"], [1, "icon-light"], [3, "fields", "actions", "hideActions"], ["tableStyleClass", "info-display !w-auto", 3, "data", "columns", "showGridLines", "hideHeader"], [1, "pi", "pi-pen-to-square", "action", "hover", "!text-2xl", 3, "click", "keydown.enter"], [3, "formSubmit", "formValidityChange", "fieldValueChange", "fields", "actions", "hideActions"], [3, "rowData", "group"]], template: function ThemeSettingsColorSectionComponent_Template(rf, ctx) {
    if (rf & 1) {
      \u0275\u0275elementStart(0, "div", 1)(1, "div", 2);
      \u0275\u0275element(2, "fa-icon", 3);
      \u0275\u0275elementStart(3, "div", 4)(4, "div", 5)(5, "h2", 6);
      \u0275\u0275text(6, "Color");
      \u0275\u0275elementEnd();
      \u0275\u0275conditionalCreate(7, ThemeSettingsColorSectionComponent_Conditional_7_Template, 2, 1, "div", 7);
      \u0275\u0275elementEnd();
      \u0275\u0275elementStart(8, "span");
      \u0275\u0275text(9);
      \u0275\u0275elementEnd()()();
      \u0275\u0275conditionalCreate(10, ThemeSettingsColorSectionComponent_Conditional_10_Template, 1, 3, "app-dynamic-form", 8);
      \u0275\u0275conditionalCreate(11, ThemeSettingsColorSectionComponent_Conditional_11_Template, 1, 4, "app-grid", 9);
      \u0275\u0275elementEnd();
      \u0275\u0275template(12, ThemeSettingsColorSectionComponent_ng_template_12_Template, 1, 2, "ng-template", null, 0, \u0275\u0275templateRefExtractor);
    }
    if (rf & 2) {
      \u0275\u0275advance(2);
      \u0275\u0275property("icon", ctx.faFill)("ngClass", \u0275\u0275pureFunction1(6, _c17, ctx.isFormEditable()));
      \u0275\u0275advance(5);
      \u0275\u0275conditional(!ctx.isFormEditable() && !ctx.createMode() ? 7 : -1);
      \u0275\u0275advance(2);
      \u0275\u0275textInterpolate(ctx.description);
      \u0275\u0275advance();
      \u0275\u0275conditional(ctx.isFormEditable() || ctx.createMode() && ctx.formFields.length ? 10 : -1);
      \u0275\u0275advance();
      \u0275\u0275conditional(!ctx.isFormEditable() && !ctx.createMode() ? 11 : -1);
    }
  }, dependencies: [
    DynamicFormComponent,
    FontAwesomeModule,
    FaIconComponent,
    CommonModule,
    NgClass,
    GridComponent,
    ThemeValueDisplayComponent
  ], encapsulation: 2 });
};
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(ThemeSettingsColorSectionComponent, [{
    type: Component,
    args: [{ selector: "app-theme-settings-color-section", imports: [
      DynamicFormComponent,
      FontAwesomeModule,
      CommonModule,
      GridComponent,
      ThemeValueDisplayComponent
    ], template: `<div class="card pt-2">
  <div class="mb-4 p-2 flex justify-start items-center">
    <fa-icon
      [icon]="faFill"
      class="!text-[2.5rem]"
      [ngClass]="{ 'icon-primary': isFormEditable() }"
    ></fa-icon>

    <div class="pl-6 flex-1">
      <div class="flex justify-between items-center">
        <h2 class="text-xl font-semibold m-0">Color</h2>
        @if (!isFormEditable() && !createMode()) {
          <div class="icon-light">
            <span
              class="pi pi-pen-to-square action hover !text-2xl"
              [attr.aria-label]="'Edit theme details'"
              (click)="onEdit()"
              (keydown.enter)="onEdit()"
            ></span>
          </div>
        }
      </div>
      <span>{{ description }}</span>
    </div>
  </div>

  @if (isFormEditable() || (createMode() && formFields.length)) {
    <app-dynamic-form
      [fields]="formFields"
      [actions]="actions"
      [hideActions]="createMode()"
      (formSubmit)="onSubmit($event)"
      (formValidityChange)="onFormValidityChange($event)"
      (fieldValueChange)="onFieldValueChange($event)"
    >
    </app-dynamic-form>
  }

  @if (!isFormEditable() && !createMode()) {
    <app-grid
      [data]="themeDetails()"
      [columns]="columns"
      [showGridLines]="false"
      [hideHeader]="true"
      tableStyleClass="info-display !w-auto"
    ></app-grid>
  }
</div>

<ng-template #valueTemplate let-rowData>
  <app-theme-value-display [rowData]="rowData" [group]="group">
  </app-theme-value-display>
</ng-template>
` }]
  }], () => [], { valueTemplate: [{
    type: ViewChild,
    args: ["valueTemplate", { static: true }]
  }] });
})();
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && \u0275setClassDebugInfo(ThemeSettingsColorSectionComponent, { className: "ThemeSettingsColorSectionComponent", filePath: "src/app/features/administration/components/themes/theme-settings-color-section/theme-settings-color-section.component.ts", lineNumber: 47 });
})();

// src/app/features/administration/components/themes/theme-settings-content-section/theme-settings-content-section.component.ts
var _c050 = ["valueTemplate"];
var _c18 = (a0) => ({ "icon-primary": a0 });
function ThemeSettingsContentSectionComponent_Conditional_7_Template(rf, ctx) {
  if (rf & 1) {
    const _r1 = \u0275\u0275getCurrentView();
    \u0275\u0275elementStart(0, "div", 7)(1, "span", 10);
    \u0275\u0275listener("click", function ThemeSettingsContentSectionComponent_Conditional_7_Template_span_click_1_listener() {
      \u0275\u0275restoreView(_r1);
      const ctx_r1 = \u0275\u0275nextContext();
      return \u0275\u0275resetView(ctx_r1.onEdit());
    })("keydown.enter", function ThemeSettingsContentSectionComponent_Conditional_7_Template_span_keydown_enter_1_listener() {
      \u0275\u0275restoreView(_r1);
      const ctx_r1 = \u0275\u0275nextContext();
      return \u0275\u0275resetView(ctx_r1.onEdit());
    });
    \u0275\u0275elementEnd()();
  }
  if (rf & 2) {
    \u0275\u0275advance();
    \u0275\u0275attribute("aria-label", "Edit theme details");
  }
}
function ThemeSettingsContentSectionComponent_Conditional_10_Template(rf, ctx) {
  if (rf & 1) {
    const _r3 = \u0275\u0275getCurrentView();
    \u0275\u0275elementStart(0, "app-dynamic-form", 11);
    \u0275\u0275listener("formSubmit", function ThemeSettingsContentSectionComponent_Conditional_10_Template_app_dynamic_form_formSubmit_0_listener($event) {
      \u0275\u0275restoreView(_r3);
      const ctx_r1 = \u0275\u0275nextContext();
      return \u0275\u0275resetView(ctx_r1.onSubmit($event));
    })("formValidityChange", function ThemeSettingsContentSectionComponent_Conditional_10_Template_app_dynamic_form_formValidityChange_0_listener($event) {
      \u0275\u0275restoreView(_r3);
      const ctx_r1 = \u0275\u0275nextContext();
      return \u0275\u0275resetView(ctx_r1.onFormValidityChange($event));
    })("fieldValueChange", function ThemeSettingsContentSectionComponent_Conditional_10_Template_app_dynamic_form_fieldValueChange_0_listener($event) {
      \u0275\u0275restoreView(_r3);
      const ctx_r1 = \u0275\u0275nextContext();
      return \u0275\u0275resetView(ctx_r1.onFieldValueChange($event));
    });
    \u0275\u0275elementEnd();
  }
  if (rf & 2) {
    const ctx_r1 = \u0275\u0275nextContext();
    \u0275\u0275property("fields", ctx_r1.formFields)("actions", ctx_r1.actions)("hideActions", ctx_r1.createMode());
  }
}
function ThemeSettingsContentSectionComponent_Conditional_11_Template(rf, ctx) {
  if (rf & 1) {
    \u0275\u0275element(0, "app-grid", 9);
  }
  if (rf & 2) {
    const ctx_r1 = \u0275\u0275nextContext();
    \u0275\u0275property("data", ctx_r1.themeDetails())("columns", ctx_r1.columns)("showGridLines", false)("hideHeader", true);
  }
}
function ThemeSettingsContentSectionComponent_ng_template_12_Template(rf, ctx) {
  if (rf & 1) {
    \u0275\u0275element(0, "app-theme-value-display", 12);
  }
  if (rf & 2) {
    const rowData_r4 = ctx.$implicit;
    const ctx_r1 = \u0275\u0275nextContext();
    \u0275\u0275property("rowData", rowData_r4)("group", ctx_r1.group);
  }
}
var CONTENT_THEME_PATHS = {
  FONT_COLOR: ["content", "font", "color"],
  BACKGROUND_COLOR: ["content", "background", "color"],
  BORDER_COLOR: ["content", "border", "color"],
  SHADOW: ["content", "shadow"]
};
var ThemeSettingsContentSectionComponent = class _ThemeSettingsContentSectionComponent extends ThemeSettingsSectionBase {
  valueTemplate;
  themeDetails = computed(() => {
    const themeDetails = this.entity();
    if (!isDefined(themeDetails))
      return [];
    const themeSettings = this.themeEngine.themeSettingsMergedWithDefault(themeDetails?.settings ?? {});
    const detailConfigs = this.createThemeDetailsFromConfig(this.getFieldConfigurations());
    return detailConfigs.map((config) => ({
      key: config.key,
      value: this.formatThemeValue(themeSettings, config)
    }));
  }, ...ngDevMode ? [{ debugName: "themeDetails" }] : []);
  constructor() {
    super("content");
  }
  ngOnInit() {
    this.initializeColumns();
  }
  initializeColumns() {
    this.columns = [
      { field: "key", header: "", transform: "uppercase" },
      {
        field: "value",
        header: "",
        cellTemplate: this.valueTemplate
      }
    ];
  }
  getFieldConfigurations() {
    return [
      {
        id: "font.color",
        label: "Font Color",
        path: CONTENT_THEME_PATHS.FONT_COLOR,
        type: "color",
        group: "content",
        presets: ["main", "header"]
      },
      {
        id: "background.color",
        label: "Background Color",
        path: CONTENT_THEME_PATHS.BACKGROUND_COLOR,
        type: "color",
        group: "content",
        presets: ["main"]
      },
      {
        id: "border.color",
        label: "Border Color",
        path: CONTENT_THEME_PATHS.BORDER_COLOR,
        type: "color",
        group: "content",
        presets: ["main"]
      },
      {
        id: "shadow",
        label: "Shadow",
        path: CONTENT_THEME_PATHS.SHADOW,
        type: "dropdown",
        options: DROP_SHADOW_OPTIONS
      }
    ];
  }
  getFields(entity) {
    return this.createFormFieldsFromConfig(entity, this.getFieldConfigurations());
  }
  getUpdateMethod() {
    return this.operationRegistry.getOperation("theme", "update") ?? ((id) => this.entitiesService.updateTheme(id, {
      settings: {
        content: this.formChanges
      }
    }));
  }
  static \u0275fac = function ThemeSettingsContentSectionComponent_Factory(__ngFactoryType__) {
    return new (__ngFactoryType__ || _ThemeSettingsContentSectionComponent)();
  };
  static \u0275cmp = /* @__PURE__ */ \u0275\u0275defineComponent({ type: _ThemeSettingsContentSectionComponent, selectors: [["app-theme-settings-content-section"]], viewQuery: function ThemeSettingsContentSectionComponent_Query(rf, ctx) {
    if (rf & 1) {
      \u0275\u0275viewQuery(_c050, 7);
    }
    if (rf & 2) {
      let _t;
      \u0275\u0275queryRefresh(_t = \u0275\u0275loadQuery()) && (ctx.valueTemplate = _t.first);
    }
  }, features: [\u0275\u0275InheritDefinitionFeature], decls: 14, vars: 8, consts: [["valueTemplate", ""], [1, "card", "pt-2"], [1, "mb-4", "p-2", "flex", "justify-start", "items-center"], [1, "!text-[2.5rem]", 3, "icon", "ngClass"], [1, "pl-6", "flex-1"], [1, "flex", "justify-between", "items-center"], [1, "text-xl", "font-semibold", "m-0"], [1, "icon-light"], [3, "fields", "actions", "hideActions"], ["tableStyleClass", "info-display !w-auto", 3, "data", "columns", "showGridLines", "hideHeader"], [1, "pi", "pi-pen-to-square", "action", "hover", "!text-2xl", 3, "click", "keydown.enter"], [3, "formSubmit", "formValidityChange", "fieldValueChange", "fields", "actions", "hideActions"], [3, "rowData", "group"]], template: function ThemeSettingsContentSectionComponent_Template(rf, ctx) {
    if (rf & 1) {
      \u0275\u0275elementStart(0, "div", 1)(1, "div", 2);
      \u0275\u0275element(2, "fa-icon", 3);
      \u0275\u0275elementStart(3, "div", 4)(4, "div", 5)(5, "h2", 6);
      \u0275\u0275text(6, "Content");
      \u0275\u0275elementEnd();
      \u0275\u0275conditionalCreate(7, ThemeSettingsContentSectionComponent_Conditional_7_Template, 2, 1, "div", 7);
      \u0275\u0275elementEnd();
      \u0275\u0275elementStart(8, "span");
      \u0275\u0275text(9);
      \u0275\u0275elementEnd()()();
      \u0275\u0275conditionalCreate(10, ThemeSettingsContentSectionComponent_Conditional_10_Template, 1, 3, "app-dynamic-form", 8);
      \u0275\u0275conditionalCreate(11, ThemeSettingsContentSectionComponent_Conditional_11_Template, 1, 4, "app-grid", 9);
      \u0275\u0275elementEnd();
      \u0275\u0275template(12, ThemeSettingsContentSectionComponent_ng_template_12_Template, 1, 2, "ng-template", null, 0, \u0275\u0275templateRefExtractor);
    }
    if (rf & 2) {
      \u0275\u0275advance(2);
      \u0275\u0275property("icon", ctx.faFill)("ngClass", \u0275\u0275pureFunction1(6, _c18, ctx.isFormEditable()));
      \u0275\u0275advance(5);
      \u0275\u0275conditional(!ctx.isFormEditable() && !ctx.createMode() ? 7 : -1);
      \u0275\u0275advance(2);
      \u0275\u0275textInterpolate(ctx.description);
      \u0275\u0275advance();
      \u0275\u0275conditional(ctx.isFormEditable() || ctx.createMode() && ctx.formFields.length ? 10 : -1);
      \u0275\u0275advance();
      \u0275\u0275conditional(!ctx.isFormEditable() && !ctx.createMode() ? 11 : -1);
    }
  }, dependencies: [
    DynamicFormComponent,
    FontAwesomeModule,
    FaIconComponent,
    CommonModule,
    NgClass,
    GridComponent,
    ThemeValueDisplayComponent
  ], encapsulation: 2 });
};
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(ThemeSettingsContentSectionComponent, [{
    type: Component,
    args: [{ selector: "app-theme-settings-content-section", imports: [
      DynamicFormComponent,
      FontAwesomeModule,
      CommonModule,
      GridComponent,
      ThemeValueDisplayComponent
    ], template: `<div class="card pt-2">
  <div class="mb-4 p-2 flex justify-start items-center">
    <fa-icon
      [icon]="faFill"
      class="!text-[2.5rem]"
      [ngClass]="{ 'icon-primary': isFormEditable() }"
    ></fa-icon>

    <div class="pl-6 flex-1">
      <div class="flex justify-between items-center">
        <h2 class="text-xl font-semibold m-0">Content</h2>
        @if (!isFormEditable() && !createMode()) {
          <div class="icon-light">
            <span
              class="pi pi-pen-to-square action hover !text-2xl"
              [attr.aria-label]="'Edit theme details'"
              (click)="onEdit()"
              (keydown.enter)="onEdit()"
            ></span>
          </div>
        }
      </div>
      <span>{{ description }}</span>
    </div>
  </div>

  @if (isFormEditable() || (createMode() && formFields.length)) {
    <app-dynamic-form
      [fields]="formFields"
      [actions]="actions"
      [hideActions]="createMode()"
      (formSubmit)="onSubmit($event)"
      (formValidityChange)="onFormValidityChange($event)"
      (fieldValueChange)="onFieldValueChange($event)"
    >
    </app-dynamic-form>
  }

  @if (!isFormEditable() && !createMode()) {
    <app-grid
      [data]="themeDetails()"
      [columns]="columns"
      [showGridLines]="false"
      [hideHeader]="true"
      tableStyleClass="info-display !w-auto"
    ></app-grid>
  }
</div>

<ng-template #valueTemplate let-rowData>
  <app-theme-value-display [rowData]="rowData" [group]="group">
  </app-theme-value-display>
</ng-template>
` }]
  }], () => [], { valueTemplate: [{
    type: ViewChild,
    args: ["valueTemplate", { static: true }]
  }] });
})();
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && \u0275setClassDebugInfo(ThemeSettingsContentSectionComponent, { className: "ThemeSettingsContentSectionComponent", filePath: "src/app/features/administration/components/themes/theme-settings-content-section/theme-settings-content-section.component.ts", lineNumber: 43 });
})();

// src/app/features/administration/components/themes/theme-settings-navigation-section/theme-settings-navigation-section.component.ts
var _c051 = ["valueTemplate"];
var _c19 = (a0) => ({ "icon-primary": a0 });
function ThemeSettingsNavigationSectionComponent_Conditional_7_Template(rf, ctx) {
  if (rf & 1) {
    const _r1 = \u0275\u0275getCurrentView();
    \u0275\u0275elementStart(0, "div", 7)(1, "span", 10);
    \u0275\u0275listener("click", function ThemeSettingsNavigationSectionComponent_Conditional_7_Template_span_click_1_listener() {
      \u0275\u0275restoreView(_r1);
      const ctx_r1 = \u0275\u0275nextContext();
      return \u0275\u0275resetView(ctx_r1.onEdit());
    })("keydown.enter", function ThemeSettingsNavigationSectionComponent_Conditional_7_Template_span_keydown_enter_1_listener() {
      \u0275\u0275restoreView(_r1);
      const ctx_r1 = \u0275\u0275nextContext();
      return \u0275\u0275resetView(ctx_r1.onEdit());
    });
    \u0275\u0275elementEnd()();
  }
  if (rf & 2) {
    \u0275\u0275advance();
    \u0275\u0275attribute("aria-label", "Edit theme navigation details");
  }
}
function ThemeSettingsNavigationSectionComponent_Conditional_10_Template(rf, ctx) {
  if (rf & 1) {
    const _r3 = \u0275\u0275getCurrentView();
    \u0275\u0275elementStart(0, "app-dynamic-form", 11);
    \u0275\u0275listener("formSubmit", function ThemeSettingsNavigationSectionComponent_Conditional_10_Template_app_dynamic_form_formSubmit_0_listener($event) {
      \u0275\u0275restoreView(_r3);
      const ctx_r1 = \u0275\u0275nextContext();
      return \u0275\u0275resetView(ctx_r1.onSubmit($event));
    })("formValidityChange", function ThemeSettingsNavigationSectionComponent_Conditional_10_Template_app_dynamic_form_formValidityChange_0_listener($event) {
      \u0275\u0275restoreView(_r3);
      const ctx_r1 = \u0275\u0275nextContext();
      return \u0275\u0275resetView(ctx_r1.onFormValidityChange($event));
    })("fieldValueChange", function ThemeSettingsNavigationSectionComponent_Conditional_10_Template_app_dynamic_form_fieldValueChange_0_listener($event) {
      \u0275\u0275restoreView(_r3);
      const ctx_r1 = \u0275\u0275nextContext();
      return \u0275\u0275resetView(ctx_r1.onFieldValueChange($event));
    });
    \u0275\u0275elementEnd();
  }
  if (rf & 2) {
    const ctx_r1 = \u0275\u0275nextContext();
    \u0275\u0275property("fields", ctx_r1.formFields)("actions", ctx_r1.actions)("hideActions", ctx_r1.createMode());
  }
}
function ThemeSettingsNavigationSectionComponent_Conditional_11_Template(rf, ctx) {
  if (rf & 1) {
    \u0275\u0275element(0, "app-grid", 9);
  }
  if (rf & 2) {
    const ctx_r1 = \u0275\u0275nextContext();
    \u0275\u0275property("data", ctx_r1.themeDetails())("columns", ctx_r1.columns)("showGridLines", false)("hideHeader", true);
  }
}
function ThemeSettingsNavigationSectionComponent_ng_template_12_Template(rf, ctx) {
  if (rf & 1) {
    \u0275\u0275element(0, "app-theme-value-display", 12);
  }
  if (rf & 2) {
    const rowData_r4 = ctx.$implicit;
    const ctx_r1 = \u0275\u0275nextContext();
    \u0275\u0275property("rowData", rowData_r4)("group", ctx_r1.group);
  }
}
var NAVIGATION_THEME_PATHS = {
  SIZE: ["navigation", "size"],
  POSITION: ["navigation", "position"],
  FONT_FAMILY: ["navigation", "font", "family"],
  FONT_SIZE: ["navigation", "font", "size"],
  FONT_WEIGHT: ["navigation", "font", "weight"],
  FONT_COLOR: ["navigation", "font", "color"],
  FONT_TRANSFORM: ["navigation", "font", "transform"],
  BACKGROUND_COLOR: ["navigation", "background", "color"],
  BORDER_COLOR: ["navigation", "border", "color"],
  BORDER_WIDTH: ["navigation", "border", "width"],
  SUB_NAV_FONT_COLOR: ["navigation", "subnav", "font", "color"],
  SUB_NAV_BACKGROUND_COLOR: ["navigation", "subnav", "background", "color"],
  ACTIVE_STYLE: ["navigation", "active", "style"],
  ACTIVE_FONT_COLOR: ["navigation", "active", "font", "color"],
  ACTIVE_BACKGROUND_COLOR: ["navigation", "active", "background", "color"],
  SEPARATOR_WIDTH: ["navigation", "separator", "width"],
  LOGO_BACKGROUND_COLOR: ["navigation", "logo", "background", "color"]
};
var ThemeSettingsNavigationSectionComponent = class _ThemeSettingsNavigationSectionComponent extends ThemeSettingsSectionBase {
  valueTemplate;
  themeColorService = inject(ThemeColorService);
  themeDetails = computed(() => {
    const themeDetails = this.entity();
    if (!isDefined(themeDetails))
      return [];
    const themeSettings = this.themeEngine.themeSettingsMergedWithDefault(themeDetails?.settings ?? {});
    const detailConfigs = this.createThemeDetailsFromConfig(this.getFieldConfigurations());
    return detailConfigs.map((config) => ({
      key: config.key,
      value: this.formatThemeValue(themeSettings, config)
    }));
  }, ...ngDevMode ? [{ debugName: "themeDetails" }] : []);
  constructor() {
    super("navigation");
  }
  ngOnInit() {
    this.initializeColumns();
  }
  initializeColumns() {
    this.columns = [
      { field: "key", header: "", transform: "uppercase" },
      {
        field: "value",
        header: "",
        cellTemplate: this.valueTemplate
      }
    ];
  }
  getFieldConfigurations() {
    return [
      {
        id: "size",
        label: "Size",
        path: NAVIGATION_THEME_PATHS.SIZE,
        type: "dropdown",
        options: SIZE_OPTIONS
      },
      {
        id: "position",
        label: "Position",
        path: NAVIGATION_THEME_PATHS.POSITION,
        type: "dropdown",
        options: POSITION_OPTIONS
      },
      {
        id: "font.family",
        label: "Font Family",
        path: NAVIGATION_THEME_PATHS.FONT_FAMILY,
        type: "font-family",
        presets: ["main", "content", "header"]
      },
      {
        id: "font.size",
        label: "Font Size",
        path: NAVIGATION_THEME_PATHS.FONT_SIZE,
        type: "size"
      },
      {
        id: "font.weight",
        label: "Font Weight",
        path: NAVIGATION_THEME_PATHS.FONT_WEIGHT,
        type: "font-weight"
      },
      {
        id: "font.color",
        label: "Font Color",
        path: NAVIGATION_THEME_PATHS.FONT_COLOR,
        type: "color",
        group: "navigation",
        presets: ["main", "content", "header"]
      },
      {
        id: "font.transform",
        label: "Font Case",
        path: NAVIGATION_THEME_PATHS.FONT_TRANSFORM,
        type: "font-transform"
      },
      {
        id: "background.color",
        label: "Background Color",
        path: NAVIGATION_THEME_PATHS.BACKGROUND_COLOR,
        type: "color",
        group: "navigation",
        presets: ["main", "content"]
      },
      {
        id: "border.color",
        label: "Border Color",
        path: NAVIGATION_THEME_PATHS.BORDER_COLOR,
        type: "color",
        group: "navigation"
      },
      {
        id: "border.width",
        label: "Border Width",
        path: NAVIGATION_THEME_PATHS.BORDER_WIDTH,
        type: "size",
        props: { unit: "px" }
      },
      {
        id: "subnav.font.color",
        label: "Subnav Font Color",
        path: NAVIGATION_THEME_PATHS.SUB_NAV_FONT_COLOR,
        type: "color",
        group: "navigation",
        presets: ["main", "content", "header"]
      },
      {
        id: "subnav.background.color",
        label: "Subnav Background",
        path: NAVIGATION_THEME_PATHS.SUB_NAV_BACKGROUND_COLOR,
        type: "color",
        group: "navigation",
        presets: ["main", "content"]
      },
      {
        id: "active.style",
        label: "Active Style",
        path: NAVIGATION_THEME_PATHS.ACTIVE_STYLE,
        type: "dropdown",
        options: [
          { value: "background", label: "Background" },
          { value: "left-border", label: "Left" },
          { value: "right-border", label: "Right" }
        ]
      },
      {
        id: "active.font.color",
        label: "Active Font Color",
        path: NAVIGATION_THEME_PATHS.ACTIVE_FONT_COLOR,
        type: "color",
        group: "navigation",
        presets: ["main", "content", "header"],
        customColors: { "Primary Contrast": "var(--color-primary-contrast)" }
      },
      {
        id: "active.background.color",
        label: "Active Background",
        path: NAVIGATION_THEME_PATHS.ACTIVE_BACKGROUND_COLOR,
        type: "color",
        group: "navigation",
        presets: ["main", "content"],
        customColors: {
          Primary: this.themeColorService.computeColor("var(--color-primary-color)")
        }
      },
      {
        id: "separator.width",
        label: "Separator Width",
        path: NAVIGATION_THEME_PATHS.SEPARATOR_WIDTH,
        type: "size",
        props: { unit: "px" }
      },
      {
        id: "logo.background.color",
        label: "Logo Background",
        path: NAVIGATION_THEME_PATHS.LOGO_BACKGROUND_COLOR,
        type: "color",
        group: "navigation",
        presets: ["navigation", "main", "content"]
      }
    ];
  }
  getFields(entity) {
    return this.createFormFieldsFromConfig(entity, this.getFieldConfigurations());
  }
  getUpdateMethod() {
    return this.operationRegistry.getOperation("theme", "update") ?? ((id) => this.entitiesService.updateTheme(id, {
      settings: {
        navigation: this.formChanges
      }
    }));
  }
  static \u0275fac = function ThemeSettingsNavigationSectionComponent_Factory(__ngFactoryType__) {
    return new (__ngFactoryType__ || _ThemeSettingsNavigationSectionComponent)();
  };
  static \u0275cmp = /* @__PURE__ */ \u0275\u0275defineComponent({ type: _ThemeSettingsNavigationSectionComponent, selectors: [["app-theme-settings-navigation-section"]], viewQuery: function ThemeSettingsNavigationSectionComponent_Query(rf, ctx) {
    if (rf & 1) {
      \u0275\u0275viewQuery(_c051, 7);
    }
    if (rf & 2) {
      let _t;
      \u0275\u0275queryRefresh(_t = \u0275\u0275loadQuery()) && (ctx.valueTemplate = _t.first);
    }
  }, features: [\u0275\u0275InheritDefinitionFeature], decls: 14, vars: 8, consts: [["valueTemplate", ""], [1, "card", "pt-2"], [1, "mb-4", "p-2", "flex", "justify-start", "items-center"], [1, "!text-[2.5rem]", 3, "icon", "ngClass"], [1, "pl-6", "flex-1"], [1, "flex", "justify-between", "items-center"], [1, "text-xl", "font-semibold", "m-0"], [1, "icon-light"], [3, "fields", "actions", "hideActions"], ["tableStyleClass", "info-display !w-auto", 3, "data", "columns", "showGridLines", "hideHeader"], [1, "pi", "pi-pen-to-square", "action", "hover", "!text-2xl", 3, "click", "keydown.enter"], [3, "formSubmit", "formValidityChange", "fieldValueChange", "fields", "actions", "hideActions"], [3, "rowData", "group"]], template: function ThemeSettingsNavigationSectionComponent_Template(rf, ctx) {
    if (rf & 1) {
      \u0275\u0275elementStart(0, "div", 1)(1, "div", 2);
      \u0275\u0275element(2, "fa-icon", 3);
      \u0275\u0275elementStart(3, "div", 4)(4, "div", 5)(5, "h2", 6);
      \u0275\u0275text(6, "Navigation");
      \u0275\u0275elementEnd();
      \u0275\u0275conditionalCreate(7, ThemeSettingsNavigationSectionComponent_Conditional_7_Template, 2, 1, "div", 7);
      \u0275\u0275elementEnd();
      \u0275\u0275elementStart(8, "span");
      \u0275\u0275text(9);
      \u0275\u0275elementEnd()()();
      \u0275\u0275conditionalCreate(10, ThemeSettingsNavigationSectionComponent_Conditional_10_Template, 1, 3, "app-dynamic-form", 8);
      \u0275\u0275conditionalCreate(11, ThemeSettingsNavigationSectionComponent_Conditional_11_Template, 1, 4, "app-grid", 9);
      \u0275\u0275elementEnd();
      \u0275\u0275template(12, ThemeSettingsNavigationSectionComponent_ng_template_12_Template, 1, 2, "ng-template", null, 0, \u0275\u0275templateRefExtractor);
    }
    if (rf & 2) {
      \u0275\u0275advance(2);
      \u0275\u0275property("icon", ctx.faFill)("ngClass", \u0275\u0275pureFunction1(6, _c19, ctx.isFormEditable()));
      \u0275\u0275advance(5);
      \u0275\u0275conditional(!ctx.isFormEditable() && !ctx.createMode() ? 7 : -1);
      \u0275\u0275advance(2);
      \u0275\u0275textInterpolate(ctx.description);
      \u0275\u0275advance();
      \u0275\u0275conditional(ctx.isFormEditable() || ctx.createMode() && ctx.formFields.length ? 10 : -1);
      \u0275\u0275advance();
      \u0275\u0275conditional(!ctx.isFormEditable() && !ctx.createMode() ? 11 : -1);
    }
  }, dependencies: [
    DynamicFormComponent,
    FontAwesomeModule,
    FaIconComponent,
    CommonModule,
    NgClass,
    GridComponent,
    ThemeValueDisplayComponent
  ], encapsulation: 2 });
};
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(ThemeSettingsNavigationSectionComponent, [{
    type: Component,
    args: [{ selector: "app-theme-settings-navigation-section", imports: [
      DynamicFormComponent,
      FontAwesomeModule,
      CommonModule,
      GridComponent,
      ThemeValueDisplayComponent
    ], template: `<div class="card pt-2">
  <div class="mb-4 p-2 flex justify-start items-center">
    <fa-icon
      [icon]="faFill"
      class="!text-[2.5rem]"
      [ngClass]="{ 'icon-primary': isFormEditable() }"
    ></fa-icon>

    <div class="pl-6 flex-1">
      <div class="flex justify-between items-center">
        <h2 class="text-xl font-semibold m-0">Navigation</h2>
        @if (!isFormEditable() && !createMode()) {
          <div class="icon-light">
            <span
              class="pi pi-pen-to-square action hover !text-2xl"
              [attr.aria-label]="'Edit theme navigation details'"
              (click)="onEdit()"
              (keydown.enter)="onEdit()"
            ></span>
          </div>
        }
      </div>
      <span>{{ description }}</span>
    </div>
  </div>

  @if (isFormEditable() || (createMode() && formFields.length)) {
    <app-dynamic-form
      [fields]="formFields"
      [actions]="actions"
      [hideActions]="createMode()"
      (formSubmit)="onSubmit($event)"
      (formValidityChange)="onFormValidityChange($event)"
      (fieldValueChange)="onFieldValueChange($event)"
    >
    </app-dynamic-form>
  }

  @if (!isFormEditable() && !createMode()) {
    <app-grid
      [data]="themeDetails()"
      [columns]="columns"
      [showGridLines]="false"
      [hideHeader]="true"
      tableStyleClass="info-display !w-auto"
    ></app-grid>
  }
</div>

<ng-template #valueTemplate let-rowData>
  <app-theme-value-display [rowData]="rowData" [group]="group">
  </app-theme-value-display>
</ng-template>
` }]
  }], () => [], { valueTemplate: [{
    type: ViewChild,
    args: ["valueTemplate", { static: true }]
  }] });
})();
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && \u0275setClassDebugInfo(ThemeSettingsNavigationSectionComponent, { className: "ThemeSettingsNavigationSectionComponent", filePath: "src/app/features/administration/components/themes/theme-settings-navigation-section/theme-settings-navigation-section.component.ts", lineNumber: 58 });
})();

// src/app/features/administration/components/themes/theme-settings-top-navigation-section/theme-settings-top-navigation-section.component.ts
var _c052 = ["valueTemplate"];
var _c110 = (a0) => ({ "icon-primary": a0 });
function ThemeSettingsTopNavigationSectionComponent_Conditional_7_Template(rf, ctx) {
  if (rf & 1) {
    const _r1 = \u0275\u0275getCurrentView();
    \u0275\u0275elementStart(0, "div", 7)(1, "span", 10);
    \u0275\u0275listener("click", function ThemeSettingsTopNavigationSectionComponent_Conditional_7_Template_span_click_1_listener() {
      \u0275\u0275restoreView(_r1);
      const ctx_r1 = \u0275\u0275nextContext();
      return \u0275\u0275resetView(ctx_r1.onEdit());
    })("keydown.enter", function ThemeSettingsTopNavigationSectionComponent_Conditional_7_Template_span_keydown_enter_1_listener() {
      \u0275\u0275restoreView(_r1);
      const ctx_r1 = \u0275\u0275nextContext();
      return \u0275\u0275resetView(ctx_r1.onEdit());
    });
    \u0275\u0275elementEnd()();
  }
  if (rf & 2) {
    \u0275\u0275advance();
    \u0275\u0275attribute("aria-label", "Edit theme details");
  }
}
function ThemeSettingsTopNavigationSectionComponent_Conditional_10_Template(rf, ctx) {
  if (rf & 1) {
    const _r3 = \u0275\u0275getCurrentView();
    \u0275\u0275elementStart(0, "app-dynamic-form", 11);
    \u0275\u0275listener("formSubmit", function ThemeSettingsTopNavigationSectionComponent_Conditional_10_Template_app_dynamic_form_formSubmit_0_listener($event) {
      \u0275\u0275restoreView(_r3);
      const ctx_r1 = \u0275\u0275nextContext();
      return \u0275\u0275resetView(ctx_r1.onSubmit($event));
    })("formValidityChange", function ThemeSettingsTopNavigationSectionComponent_Conditional_10_Template_app_dynamic_form_formValidityChange_0_listener($event) {
      \u0275\u0275restoreView(_r3);
      const ctx_r1 = \u0275\u0275nextContext();
      return \u0275\u0275resetView(ctx_r1.onFormValidityChange($event));
    })("fieldValueChange", function ThemeSettingsTopNavigationSectionComponent_Conditional_10_Template_app_dynamic_form_fieldValueChange_0_listener($event) {
      \u0275\u0275restoreView(_r3);
      const ctx_r1 = \u0275\u0275nextContext();
      return \u0275\u0275resetView(ctx_r1.onFieldValueChange($event));
    });
    \u0275\u0275elementEnd();
  }
  if (rf & 2) {
    const ctx_r1 = \u0275\u0275nextContext();
    \u0275\u0275property("fields", ctx_r1.formFields)("actions", ctx_r1.actions)("hideActions", ctx_r1.createMode());
  }
}
function ThemeSettingsTopNavigationSectionComponent_Conditional_11_Template(rf, ctx) {
  if (rf & 1) {
    \u0275\u0275element(0, "app-grid", 9);
  }
  if (rf & 2) {
    const ctx_r1 = \u0275\u0275nextContext();
    \u0275\u0275property("data", ctx_r1.themeDetails())("columns", ctx_r1.columns)("showGridLines", false)("hideHeader", true);
  }
}
function ThemeSettingsTopNavigationSectionComponent_ng_template_12_Template(rf, ctx) {
  if (rf & 1) {
    \u0275\u0275element(0, "app-theme-value-display", 12);
  }
  if (rf & 2) {
    const rowData_r4 = ctx.$implicit;
    const ctx_r1 = \u0275\u0275nextContext();
    \u0275\u0275property("rowData", rowData_r4)("group", ctx_r1.group);
  }
}
var TOP_NAVIGATION_THEME_PATHS = {
  FONT_FAMILY: ["topnavigation", "font", "family"],
  FONT_SIZE: ["topnavigation", "font", "size"],
  FONT_WEIGHT: ["topnavigation", "font", "weight"],
  FONT_COLOR: ["topnavigation", "font", "color"],
  BACKGROUND_COLOR: ["topnavigation", "background", "color"],
  BORDER_COLOR: ["topnavigation", "border", "color"],
  BORDER_WIDTH: ["topnavigation", "border", "width"],
  ACTIVE_STYLE: ["topnavigation", "active", "style"],
  ACTIVE_FONT_COLOR: ["topnavigation", "active", "font", "color"],
  ACTIVE_BACKGROUND_COLOR: ["topnavigation", "active", "background", "color"],
  ACTIVE_TAB_FONT_COLOR: ["topnavigation", "active", "tab", "font", "color"],
  ACTIVE_TAB_BACKGROUND_COLOR: [
    "topnavigation",
    "active",
    "tab",
    "background",
    "color"
  ],
  ACTIVE_INDICATOR_COLOR: ["topnavigation", "active", "indicator", "color"],
  LOGO_STYLE: ["topnavigation", "logo", "style"]
};
var ThemeSettingsTopNavigationSectionComponent = class _ThemeSettingsTopNavigationSectionComponent extends ThemeSettingsSectionBase {
  valueTemplate;
  themeColorService = inject(ThemeColorService);
  themeDetails = computed(() => {
    const themeDetails = this.entity();
    if (!isDefined(themeDetails))
      return [];
    const themeSettings = this.themeEngine.themeSettingsMergedWithDefault(themeDetails?.settings ?? {});
    const detailConfigs = this.createThemeDetailsFromConfig(this.getFieldConfigurations());
    return detailConfigs.map((config) => ({
      key: config.key,
      value: this.formatThemeValue(themeSettings, config)
    }));
  }, ...ngDevMode ? [{ debugName: "themeDetails" }] : []);
  constructor() {
    super("topnavigation");
  }
  ngOnInit() {
    this.initializeColumns();
  }
  initializeColumns() {
    this.columns = [
      { field: "key", header: "", transform: "uppercase" },
      {
        field: "value",
        header: "",
        cellTemplate: this.valueTemplate
      }
    ];
  }
  getFieldConfigurations() {
    return [
      {
        id: "font.family",
        label: "Font Family",
        path: TOP_NAVIGATION_THEME_PATHS.FONT_FAMILY,
        type: "font-family",
        presets: ["main", "content", "header"]
      },
      {
        id: "font.size",
        label: "Font Size",
        path: TOP_NAVIGATION_THEME_PATHS.FONT_SIZE,
        type: "size"
      },
      {
        id: "font.weight",
        label: "Font Weight",
        path: TOP_NAVIGATION_THEME_PATHS.FONT_WEIGHT,
        type: "font-weight",
        presets: ["main", "content"]
      },
      {
        id: "font.color",
        label: "Font Color",
        path: TOP_NAVIGATION_THEME_PATHS.FONT_COLOR,
        type: "color",
        group: "topnavigation",
        presets: ["main", "content", "header"]
      },
      {
        id: "background.color",
        label: "Background Color",
        path: TOP_NAVIGATION_THEME_PATHS.BACKGROUND_COLOR,
        type: "color",
        group: "topnavigation",
        presets: ["header", "main", "content"]
      },
      {
        id: "border.color",
        label: "Border Color",
        path: TOP_NAVIGATION_THEME_PATHS.BORDER_COLOR,
        type: "color",
        group: "topnavigation"
      },
      {
        id: "border.width",
        label: "Border Width",
        path: TOP_NAVIGATION_THEME_PATHS.BORDER_WIDTH,
        type: "size",
        props: { unit: "px" }
      },
      {
        id: "active.font.color",
        label: "Active Font Color",
        path: TOP_NAVIGATION_THEME_PATHS.ACTIVE_FONT_COLOR,
        type: "color",
        group: "topnavigation",
        presets: ["topnavigation", "main", "content", "header"],
        customColors: { "Primary Contrast": "var(--color-primary-contrast)" }
      },
      {
        id: "active.background.color",
        label: "Active Background",
        path: TOP_NAVIGATION_THEME_PATHS.ACTIVE_BACKGROUND_COLOR,
        type: "color",
        group: "topnavigation",
        presets: ["topnavigation", "tab", "content"],
        customColors: {
          Primary: this.themeColorService.computeColor("var(--color-primary-color)")
        }
      },
      {
        id: "active.tab.font.color",
        label: "Active Tab Font Color",
        path: TOP_NAVIGATION_THEME_PATHS.ACTIVE_TAB_FONT_COLOR,
        type: "color",
        group: "topnavigation",
        presets: ["topnavigation", "main", "content", "header"],
        customColors: {
          Primary: this.themeColorService.computeColor("var(--color-primary-color)")
        }
      },
      {
        id: "active.tab.background.color",
        label: "Active Tab Background",
        path: TOP_NAVIGATION_THEME_PATHS.ACTIVE_TAB_BACKGROUND_COLOR,
        type: "color",
        group: "topnavigation",
        presets: ["topnavigation", "tab", "content"],
        customColors: {
          Primary: this.themeColorService.computeColor("var(--color-primary-color)")
        }
      },
      {
        id: "active.indicator.color",
        label: "Active Indicator Color",
        path: TOP_NAVIGATION_THEME_PATHS.ACTIVE_INDICATOR_COLOR,
        type: "color",
        group: "topnavigation",
        customColors: {
          Primary: this.themeColorService.computeColor("var(--color-primary-color)")
        }
      },
      {
        id: "logo.style",
        label: "Logo Style",
        path: TOP_NAVIGATION_THEME_PATHS.LOGO_STYLE,
        type: "dropdown",
        group: "topnavigation",
        options: [
          { value: "none", label: "None" },
          { value: "left", label: "Left" },
          { value: "right", label: "Right" }
        ]
      }
    ];
  }
  getFields(entity) {
    return this.createFormFieldsFromConfig(entity, this.getFieldConfigurations());
  }
  getUpdateMethod() {
    return this.operationRegistry.getOperation("theme", "update") ?? ((id) => this.entitiesService.updateTheme(id, {
      settings: {
        topnavigation: this.formChanges
      }
    }));
  }
  static \u0275fac = function ThemeSettingsTopNavigationSectionComponent_Factory(__ngFactoryType__) {
    return new (__ngFactoryType__ || _ThemeSettingsTopNavigationSectionComponent)();
  };
  static \u0275cmp = /* @__PURE__ */ \u0275\u0275defineComponent({ type: _ThemeSettingsTopNavigationSectionComponent, selectors: [["app-theme-settings-top-navigation-section"]], viewQuery: function ThemeSettingsTopNavigationSectionComponent_Query(rf, ctx) {
    if (rf & 1) {
      \u0275\u0275viewQuery(_c052, 7);
    }
    if (rf & 2) {
      let _t;
      \u0275\u0275queryRefresh(_t = \u0275\u0275loadQuery()) && (ctx.valueTemplate = _t.first);
    }
  }, features: [\u0275\u0275InheritDefinitionFeature], decls: 14, vars: 8, consts: [["valueTemplate", ""], [1, "card", "pt-2"], [1, "mb-4", "p-2", "flex", "justify-start", "items-center"], [1, "!text-[2.5rem]", 3, "icon", "ngClass"], [1, "pl-6", "flex-1"], [1, "flex", "justify-between", "items-center"], [1, "text-xl", "font-semibold", "m-0"], [1, "icon-light"], [3, "fields", "actions", "hideActions"], ["tableStyleClass", "info-display !w-auto", 3, "data", "columns", "showGridLines", "hideHeader"], [1, "pi", "pi-pen-to-square", "action", "hover", "!text-2xl", 3, "click", "keydown.enter"], [3, "formSubmit", "formValidityChange", "fieldValueChange", "fields", "actions", "hideActions"], [3, "rowData", "group"]], template: function ThemeSettingsTopNavigationSectionComponent_Template(rf, ctx) {
    if (rf & 1) {
      \u0275\u0275elementStart(0, "div", 1)(1, "div", 2);
      \u0275\u0275element(2, "fa-icon", 3);
      \u0275\u0275elementStart(3, "div", 4)(4, "div", 5)(5, "h2", 6);
      \u0275\u0275text(6, "Top Navigation");
      \u0275\u0275elementEnd();
      \u0275\u0275conditionalCreate(7, ThemeSettingsTopNavigationSectionComponent_Conditional_7_Template, 2, 1, "div", 7);
      \u0275\u0275elementEnd();
      \u0275\u0275elementStart(8, "span");
      \u0275\u0275text(9);
      \u0275\u0275elementEnd()()();
      \u0275\u0275conditionalCreate(10, ThemeSettingsTopNavigationSectionComponent_Conditional_10_Template, 1, 3, "app-dynamic-form", 8);
      \u0275\u0275conditionalCreate(11, ThemeSettingsTopNavigationSectionComponent_Conditional_11_Template, 1, 4, "app-grid", 9);
      \u0275\u0275elementEnd();
      \u0275\u0275template(12, ThemeSettingsTopNavigationSectionComponent_ng_template_12_Template, 1, 2, "ng-template", null, 0, \u0275\u0275templateRefExtractor);
    }
    if (rf & 2) {
      \u0275\u0275advance(2);
      \u0275\u0275property("icon", ctx.faFill)("ngClass", \u0275\u0275pureFunction1(6, _c110, ctx.isFormEditable()));
      \u0275\u0275advance(5);
      \u0275\u0275conditional(!ctx.isFormEditable() && !ctx.createMode() ? 7 : -1);
      \u0275\u0275advance(2);
      \u0275\u0275textInterpolate(ctx.description);
      \u0275\u0275advance();
      \u0275\u0275conditional(ctx.isFormEditable() || ctx.createMode() && ctx.formFields.length ? 10 : -1);
      \u0275\u0275advance();
      \u0275\u0275conditional(!ctx.isFormEditable() && !ctx.createMode() ? 11 : -1);
    }
  }, dependencies: [
    DynamicFormComponent,
    FontAwesomeModule,
    FaIconComponent,
    CommonModule,
    NgClass,
    GridComponent,
    ThemeValueDisplayComponent
  ], encapsulation: 2 });
};
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(ThemeSettingsTopNavigationSectionComponent, [{
    type: Component,
    args: [{ selector: "app-theme-settings-top-navigation-section", imports: [
      DynamicFormComponent,
      FontAwesomeModule,
      CommonModule,
      GridComponent,
      ThemeValueDisplayComponent
    ], template: `<div class="card pt-2">
  <div class="mb-4 p-2 flex justify-start items-center">
    <fa-icon
      [icon]="faFill"
      class="!text-[2.5rem]"
      [ngClass]="{ 'icon-primary': isFormEditable() }"
    ></fa-icon>

    <div class="pl-6 flex-1">
      <div class="flex justify-between items-center">
        <h2 class="text-xl font-semibold m-0">Top Navigation</h2>
        @if (!isFormEditable() && !createMode()) {
          <div class="icon-light">
            <span
              class="pi pi-pen-to-square action hover !text-2xl"
              [attr.aria-label]="'Edit theme details'"
              (click)="onEdit()"
              (keydown.enter)="onEdit()"
            ></span>
          </div>
        }
      </div>
      <span>{{ description }}</span>
    </div>
  </div>

  @if (isFormEditable() || (createMode() && formFields.length)) {
    <app-dynamic-form
      [fields]="formFields"
      [actions]="actions"
      [hideActions]="createMode()"
      (formSubmit)="onSubmit($event)"
      (formValidityChange)="onFormValidityChange($event)"
      (fieldValueChange)="onFieldValueChange($event)"
    >
    </app-dynamic-form>
  }

  @if (!isFormEditable() && !createMode()) {
    <app-grid
      [data]="themeDetails()"
      [columns]="columns"
      [showGridLines]="false"
      [hideHeader]="true"
      tableStyleClass="info-display !w-auto"
    ></app-grid>
  }
</div>

<ng-template #valueTemplate let-rowData>
  <app-theme-value-display [rowData]="rowData" [group]="group">
  </app-theme-value-display>
</ng-template>
` }]
  }], () => [], { valueTemplate: [{
    type: ViewChild,
    args: ["valueTemplate", { static: true }]
  }] });
})();
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && \u0275setClassDebugInfo(ThemeSettingsTopNavigationSectionComponent, { className: "ThemeSettingsTopNavigationSectionComponent", filePath: "src/app/features/administration/components/themes/theme-settings-top-navigation-section/theme-settings-top-navigation-section.component.ts", lineNumber: 61 });
})();

// src/app/features/administration/components/themes/theme-settings-header-section/theme-settings-header-section.component.ts
var _c053 = ["valueTemplate"];
var _c111 = (a0) => ({ "icon-primary": a0 });
function ThemeSettingsHeaderSectionComponent_Conditional_7_Template(rf, ctx) {
  if (rf & 1) {
    const _r1 = \u0275\u0275getCurrentView();
    \u0275\u0275elementStart(0, "div", 7)(1, "span", 10);
    \u0275\u0275listener("click", function ThemeSettingsHeaderSectionComponent_Conditional_7_Template_span_click_1_listener() {
      \u0275\u0275restoreView(_r1);
      const ctx_r1 = \u0275\u0275nextContext();
      return \u0275\u0275resetView(ctx_r1.onEdit());
    })("keydown.enter", function ThemeSettingsHeaderSectionComponent_Conditional_7_Template_span_keydown_enter_1_listener() {
      \u0275\u0275restoreView(_r1);
      const ctx_r1 = \u0275\u0275nextContext();
      return \u0275\u0275resetView(ctx_r1.onEdit());
    });
    \u0275\u0275elementEnd()();
  }
  if (rf & 2) {
    \u0275\u0275advance();
    \u0275\u0275attribute("aria-label", "Edit theme details");
  }
}
function ThemeSettingsHeaderSectionComponent_Conditional_10_Template(rf, ctx) {
  if (rf & 1) {
    const _r3 = \u0275\u0275getCurrentView();
    \u0275\u0275elementStart(0, "app-dynamic-form", 11);
    \u0275\u0275listener("formSubmit", function ThemeSettingsHeaderSectionComponent_Conditional_10_Template_app_dynamic_form_formSubmit_0_listener($event) {
      \u0275\u0275restoreView(_r3);
      const ctx_r1 = \u0275\u0275nextContext();
      return \u0275\u0275resetView(ctx_r1.onSubmit($event));
    })("formValidityChange", function ThemeSettingsHeaderSectionComponent_Conditional_10_Template_app_dynamic_form_formValidityChange_0_listener($event) {
      \u0275\u0275restoreView(_r3);
      const ctx_r1 = \u0275\u0275nextContext();
      return \u0275\u0275resetView(ctx_r1.onFormValidityChange($event));
    })("fieldValueChange", function ThemeSettingsHeaderSectionComponent_Conditional_10_Template_app_dynamic_form_fieldValueChange_0_listener($event) {
      \u0275\u0275restoreView(_r3);
      const ctx_r1 = \u0275\u0275nextContext();
      return \u0275\u0275resetView(ctx_r1.onFieldValueChange($event));
    });
    \u0275\u0275elementEnd();
  }
  if (rf & 2) {
    const ctx_r1 = \u0275\u0275nextContext();
    \u0275\u0275property("fields", ctx_r1.formFields)("actions", ctx_r1.actions)("hideActions", ctx_r1.createMode());
  }
}
function ThemeSettingsHeaderSectionComponent_Conditional_11_Template(rf, ctx) {
  if (rf & 1) {
    \u0275\u0275element(0, "app-grid", 9);
  }
  if (rf & 2) {
    const ctx_r1 = \u0275\u0275nextContext();
    \u0275\u0275property("data", ctx_r1.themeDetails())("columns", ctx_r1.columns)("showGridLines", false)("hideHeader", true);
  }
}
function ThemeSettingsHeaderSectionComponent_ng_template_12_Template(rf, ctx) {
  if (rf & 1) {
    \u0275\u0275element(0, "app-theme-value-display", 12);
  }
  if (rf & 2) {
    const rowData_r4 = ctx.$implicit;
    const ctx_r1 = \u0275\u0275nextContext();
    \u0275\u0275property("rowData", rowData_r4)("group", ctx_r1.group);
  }
}
var HEADER_THEME_PATHS = {
  FONT_FAMILY: ["header", "font", "family"],
  FONT_SIZE: ["header", "font", "size"],
  FONT_WEIGHT: ["header", "font", "weight"],
  FONT_COLOR: ["header", "font", "color"],
  FONT_TRANSFORM: ["header", "font", "transform"],
  BACKGROUND_COLOR: ["header", "background", "color"],
  BORDER_COLOR: ["header", "border", "color"],
  BORDER_WIDTH: ["header", "border", "width"]
};
var ThemeSettingsHeaderSectionComponent = class _ThemeSettingsHeaderSectionComponent extends ThemeSettingsSectionBase {
  valueTemplate;
  themeDetails = computed(() => {
    const themeDetails = this.entity();
    if (!isDefined(themeDetails))
      return [];
    const themeSettings = this.themeEngine.themeSettingsMergedWithDefault(themeDetails?.settings ?? {});
    const detailConfigs = this.createThemeDetailsFromConfig(this.getFieldConfigurations());
    return detailConfigs.map((config) => ({
      key: config.key,
      value: this.formatThemeValue(themeSettings, config)
    }));
  }, ...ngDevMode ? [{ debugName: "themeDetails" }] : []);
  constructor() {
    super("header");
  }
  ngOnInit() {
    this.initializeColumns();
  }
  initializeColumns() {
    this.columns = [
      { field: "key", header: "", transform: "uppercase" },
      {
        field: "value",
        header: "",
        cellTemplate: this.valueTemplate
      }
    ];
  }
  getFieldConfigurations() {
    return [
      {
        id: "font.family",
        label: "Font Family",
        path: HEADER_THEME_PATHS.FONT_FAMILY,
        type: "font-family",
        presets: ["main", "content"]
      },
      {
        id: "font.size",
        label: "Font Size",
        path: HEADER_THEME_PATHS.FONT_SIZE,
        type: "size"
      },
      {
        id: "font.weight",
        label: "Font Weight",
        path: HEADER_THEME_PATHS.FONT_WEIGHT,
        type: "font-weight",
        presets: ["main", "content"]
      },
      {
        id: "font.color",
        label: "Font Color",
        path: HEADER_THEME_PATHS.FONT_COLOR,
        type: "color",
        group: "header",
        presets: ["main", "content", "header"]
      },
      {
        id: "font.transform",
        label: "Font Case",
        path: HEADER_THEME_PATHS.FONT_TRANSFORM,
        type: "font-transform"
      },
      {
        id: "background.color",
        label: "Background Color",
        path: HEADER_THEME_PATHS.BACKGROUND_COLOR,
        type: "color",
        group: "header",
        presets: ["main", "content"]
      },
      {
        id: "border.color",
        label: "Border Color",
        path: HEADER_THEME_PATHS.BORDER_COLOR,
        type: "color",
        group: "header",
        presets: ["main", "content"]
      },
      {
        id: "border.width",
        label: "Border Width",
        path: HEADER_THEME_PATHS.BORDER_WIDTH,
        type: "size",
        props: { unit: "px" }
      }
    ];
  }
  getFields(entity) {
    return this.createFormFieldsFromConfig(entity, this.getFieldConfigurations());
  }
  getUpdateMethod() {
    return this.operationRegistry.getOperation("theme", "update") ?? ((id) => this.entitiesService.updateTheme(id, {
      settings: {
        header: this.formChanges
      }
    }));
  }
  static \u0275fac = function ThemeSettingsHeaderSectionComponent_Factory(__ngFactoryType__) {
    return new (__ngFactoryType__ || _ThemeSettingsHeaderSectionComponent)();
  };
  static \u0275cmp = /* @__PURE__ */ \u0275\u0275defineComponent({ type: _ThemeSettingsHeaderSectionComponent, selectors: [["app-theme-settings-header-section"]], viewQuery: function ThemeSettingsHeaderSectionComponent_Query(rf, ctx) {
    if (rf & 1) {
      \u0275\u0275viewQuery(_c053, 7);
    }
    if (rf & 2) {
      let _t;
      \u0275\u0275queryRefresh(_t = \u0275\u0275loadQuery()) && (ctx.valueTemplate = _t.first);
    }
  }, features: [\u0275\u0275InheritDefinitionFeature], decls: 14, vars: 8, consts: [["valueTemplate", ""], [1, "card", "pt-2"], [1, "mb-4", "p-2", "flex", "justify-start", "items-center"], [1, "!text-[2.5rem]", 3, "icon", "ngClass"], [1, "pl-6", "flex-1"], [1, "flex", "justify-between", "items-center"], [1, "text-xl", "font-semibold", "m-0"], [1, "icon-light"], [3, "fields", "actions", "hideActions"], ["tableStyleClass", "info-display !w-auto", 3, "data", "columns", "showGridLines", "hideHeader"], [1, "pi", "pi-pen-to-square", "action", "hover", "!text-2xl", 3, "click", "keydown.enter"], [3, "formSubmit", "formValidityChange", "fieldValueChange", "fields", "actions", "hideActions"], [3, "rowData", "group"]], template: function ThemeSettingsHeaderSectionComponent_Template(rf, ctx) {
    if (rf & 1) {
      \u0275\u0275elementStart(0, "div", 1)(1, "div", 2);
      \u0275\u0275element(2, "fa-icon", 3);
      \u0275\u0275elementStart(3, "div", 4)(4, "div", 5)(5, "h2", 6);
      \u0275\u0275text(6, "Header");
      \u0275\u0275elementEnd();
      \u0275\u0275conditionalCreate(7, ThemeSettingsHeaderSectionComponent_Conditional_7_Template, 2, 1, "div", 7);
      \u0275\u0275elementEnd();
      \u0275\u0275elementStart(8, "span");
      \u0275\u0275text(9);
      \u0275\u0275elementEnd()()();
      \u0275\u0275conditionalCreate(10, ThemeSettingsHeaderSectionComponent_Conditional_10_Template, 1, 3, "app-dynamic-form", 8);
      \u0275\u0275conditionalCreate(11, ThemeSettingsHeaderSectionComponent_Conditional_11_Template, 1, 4, "app-grid", 9);
      \u0275\u0275elementEnd();
      \u0275\u0275template(12, ThemeSettingsHeaderSectionComponent_ng_template_12_Template, 1, 2, "ng-template", null, 0, \u0275\u0275templateRefExtractor);
    }
    if (rf & 2) {
      \u0275\u0275advance(2);
      \u0275\u0275property("icon", ctx.faFill)("ngClass", \u0275\u0275pureFunction1(6, _c111, ctx.isFormEditable()));
      \u0275\u0275advance(5);
      \u0275\u0275conditional(!ctx.isFormEditable() && !ctx.createMode() ? 7 : -1);
      \u0275\u0275advance(2);
      \u0275\u0275textInterpolate(ctx.description);
      \u0275\u0275advance();
      \u0275\u0275conditional(ctx.isFormEditable() || ctx.createMode() && ctx.formFields.length ? 10 : -1);
      \u0275\u0275advance();
      \u0275\u0275conditional(!ctx.isFormEditable() && !ctx.createMode() ? 11 : -1);
    }
  }, dependencies: [
    DynamicFormComponent,
    FontAwesomeModule,
    FaIconComponent,
    CommonModule,
    NgClass,
    GridComponent,
    ThemeValueDisplayComponent
  ], encapsulation: 2 });
};
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(ThemeSettingsHeaderSectionComponent, [{
    type: Component,
    args: [{ selector: "app-theme-settings-header-section", imports: [
      DynamicFormComponent,
      FontAwesomeModule,
      CommonModule,
      GridComponent,
      ThemeValueDisplayComponent
    ], template: `<div class="card pt-2">
  <div class="mb-4 p-2 flex justify-start items-center">
    <fa-icon
      [icon]="faFill"
      class="!text-[2.5rem]"
      [ngClass]="{ 'icon-primary': isFormEditable() }"
    ></fa-icon>

    <div class="pl-6 flex-1">
      <div class="flex justify-between items-center">
        <h2 class="text-xl font-semibold m-0">Header</h2>
        @if (!isFormEditable() && !createMode()) {
          <div class="icon-light">
            <span
              class="pi pi-pen-to-square action hover !text-2xl"
              [attr.aria-label]="'Edit theme details'"
              (click)="onEdit()"
              (keydown.enter)="onEdit()"
            ></span>
          </div>
        }
      </div>
      <span>{{ description }}</span>
    </div>
  </div>

  @if (isFormEditable() || (createMode() && formFields.length)) {
    <app-dynamic-form
      [fields]="formFields"
      [actions]="actions"
      [hideActions]="createMode()"
      (formSubmit)="onSubmit($event)"
      (formValidityChange)="onFormValidityChange($event)"
      (fieldValueChange)="onFieldValueChange($event)"
    >
    </app-dynamic-form>
  }

  @if (!isFormEditable() && !createMode()) {
    <app-grid
      [data]="themeDetails()"
      [columns]="columns"
      [showGridLines]="false"
      [hideHeader]="true"
      tableStyleClass="info-display !w-auto"
    ></app-grid>
  }
</div>

<ng-template #valueTemplate let-rowData>
  <app-theme-value-display [rowData]="rowData" [group]="group">
  </app-theme-value-display>
</ng-template>
` }]
  }], () => [], { valueTemplate: [{
    type: ViewChild,
    args: ["valueTemplate", { static: true }]
  }] });
})();
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && \u0275setClassDebugInfo(ThemeSettingsHeaderSectionComponent, { className: "ThemeSettingsHeaderSectionComponent", filePath: "src/app/features/administration/components/themes/theme-settings-header-section/theme-settings-header-section.component.ts", lineNumber: 46 });
})();

// src/app/features/administration/components/themes/theme-settings-footer-section/theme-settings-footer-section.component.ts
var _c054 = ["valueTemplate"];
var _c112 = (a0) => ({ "icon-primary": a0 });
function ThemeSettingsFooterSectionComponent_Conditional_7_Template(rf, ctx) {
  if (rf & 1) {
    const _r1 = \u0275\u0275getCurrentView();
    \u0275\u0275elementStart(0, "div", 7)(1, "span", 10);
    \u0275\u0275listener("click", function ThemeSettingsFooterSectionComponent_Conditional_7_Template_span_click_1_listener() {
      \u0275\u0275restoreView(_r1);
      const ctx_r1 = \u0275\u0275nextContext();
      return \u0275\u0275resetView(ctx_r1.onEdit());
    })("keydown.enter", function ThemeSettingsFooterSectionComponent_Conditional_7_Template_span_keydown_enter_1_listener() {
      \u0275\u0275restoreView(_r1);
      const ctx_r1 = \u0275\u0275nextContext();
      return \u0275\u0275resetView(ctx_r1.onEdit());
    });
    \u0275\u0275elementEnd()();
  }
  if (rf & 2) {
    \u0275\u0275advance();
    \u0275\u0275attribute("aria-label", "Edit theme details");
  }
}
function ThemeSettingsFooterSectionComponent_Conditional_10_Template(rf, ctx) {
  if (rf & 1) {
    const _r3 = \u0275\u0275getCurrentView();
    \u0275\u0275elementStart(0, "app-dynamic-form", 11);
    \u0275\u0275listener("formSubmit", function ThemeSettingsFooterSectionComponent_Conditional_10_Template_app_dynamic_form_formSubmit_0_listener($event) {
      \u0275\u0275restoreView(_r3);
      const ctx_r1 = \u0275\u0275nextContext();
      return \u0275\u0275resetView(ctx_r1.onSubmit($event));
    })("formValidityChange", function ThemeSettingsFooterSectionComponent_Conditional_10_Template_app_dynamic_form_formValidityChange_0_listener($event) {
      \u0275\u0275restoreView(_r3);
      const ctx_r1 = \u0275\u0275nextContext();
      return \u0275\u0275resetView(ctx_r1.onFormValidityChange($event));
    })("fieldValueChange", function ThemeSettingsFooterSectionComponent_Conditional_10_Template_app_dynamic_form_fieldValueChange_0_listener($event) {
      \u0275\u0275restoreView(_r3);
      const ctx_r1 = \u0275\u0275nextContext();
      return \u0275\u0275resetView(ctx_r1.onFieldValueChange($event));
    });
    \u0275\u0275elementEnd();
  }
  if (rf & 2) {
    const ctx_r1 = \u0275\u0275nextContext();
    \u0275\u0275property("fields", ctx_r1.formFields)("actions", ctx_r1.actions)("hideActions", ctx_r1.createMode());
  }
}
function ThemeSettingsFooterSectionComponent_Conditional_11_Template(rf, ctx) {
  if (rf & 1) {
    \u0275\u0275element(0, "app-grid", 9);
  }
  if (rf & 2) {
    const ctx_r1 = \u0275\u0275nextContext();
    \u0275\u0275property("data", ctx_r1.themeDetails())("columns", ctx_r1.columns)("showGridLines", false)("hideHeader", true);
  }
}
function ThemeSettingsFooterSectionComponent_ng_template_12_Template(rf, ctx) {
  if (rf & 1) {
    \u0275\u0275element(0, "app-theme-value-display", 12);
  }
  if (rf & 2) {
    const rowData_r4 = ctx.$implicit;
    const ctx_r1 = \u0275\u0275nextContext();
    \u0275\u0275property("rowData", rowData_r4)("group", ctx_r1.group);
  }
}
var FOOTER_THEME_PATHS = {
  FONT_FAMILY: ["footer", "font", "family"],
  FONT_SIZE: ["footer", "font", "size"],
  FONT_COLOR: ["footer", "font", "color"],
  BACKGROUND_COLOR: ["footer", "background", "color"],
  BORDER_COLOR: ["footer", "border", "color"]
};
var ThemeSettingsFooterSectionComponent = class _ThemeSettingsFooterSectionComponent extends ThemeSettingsSectionBase {
  valueTemplate;
  themeDetails = computed(() => {
    const themeDetails = this.entity();
    if (!isDefined(themeDetails))
      return [];
    const themeSettings = this.themeEngine.themeSettingsMergedWithDefault(themeDetails?.settings ?? {});
    const detailConfigs = this.createThemeDetailsFromConfig(this.getFieldConfigurations());
    return detailConfigs.map((config) => ({
      key: config.key,
      value: this.formatThemeValue(themeSettings, config)
    }));
  }, ...ngDevMode ? [{ debugName: "themeDetails" }] : []);
  constructor() {
    super("footer");
  }
  ngOnInit() {
    this.initializeColumns();
  }
  initializeColumns() {
    this.columns = [
      { field: "key", header: "", transform: "uppercase" },
      {
        field: "value",
        header: "",
        cellTemplate: this.valueTemplate
      }
    ];
  }
  getFieldConfigurations() {
    return [
      {
        id: "font.family",
        label: "Font Family",
        path: FOOTER_THEME_PATHS.FONT_FAMILY,
        type: "font-family",
        presets: ["main", "content", "header"]
      },
      {
        id: "font.size",
        label: "Font Size",
        path: FOOTER_THEME_PATHS.FONT_SIZE,
        type: "size"
      },
      {
        id: "font.color",
        label: "Font Color",
        path: FOOTER_THEME_PATHS.FONT_COLOR,
        type: "color",
        group: "footer",
        presets: ["main", "content", "header"]
      },
      {
        id: "background.color",
        label: "Background Color",
        path: FOOTER_THEME_PATHS.BACKGROUND_COLOR,
        type: "color",
        group: "footer",
        presets: ["main", "content"]
      },
      {
        id: "border.color",
        label: "Border Color",
        path: FOOTER_THEME_PATHS.BORDER_COLOR,
        type: "color",
        group: "footer"
      }
    ];
  }
  getFields(entity) {
    return this.createFormFieldsFromConfig(entity, this.getFieldConfigurations());
  }
  getUpdateMethod() {
    return this.operationRegistry.getOperation("theme", "update") ?? ((id) => this.entitiesService.updateTheme(id, {
      settings: {
        footer: this.formChanges
      }
    }));
  }
  static \u0275fac = function ThemeSettingsFooterSectionComponent_Factory(__ngFactoryType__) {
    return new (__ngFactoryType__ || _ThemeSettingsFooterSectionComponent)();
  };
  static \u0275cmp = /* @__PURE__ */ \u0275\u0275defineComponent({ type: _ThemeSettingsFooterSectionComponent, selectors: [["app-theme-settings-footer-section"]], viewQuery: function ThemeSettingsFooterSectionComponent_Query(rf, ctx) {
    if (rf & 1) {
      \u0275\u0275viewQuery(_c054, 7);
    }
    if (rf & 2) {
      let _t;
      \u0275\u0275queryRefresh(_t = \u0275\u0275loadQuery()) && (ctx.valueTemplate = _t.first);
    }
  }, features: [\u0275\u0275InheritDefinitionFeature], decls: 14, vars: 8, consts: [["valueTemplate", ""], [1, "card", "pt-2"], [1, "mb-4", "p-2", "flex", "justify-start", "items-center"], [1, "!text-[2.5rem]", 3, "icon", "ngClass"], [1, "pl-6", "flex-1"], [1, "flex", "justify-between", "items-center"], [1, "text-xl", "font-semibold", "m-0"], [1, "icon-light"], [3, "fields", "actions", "hideActions"], ["tableStyleClass", "info-display !w-auto", 3, "data", "columns", "showGridLines", "hideHeader"], [1, "pi", "pi-pen-to-square", "action", "hover", "!text-2xl", 3, "click", "keydown.enter"], [3, "formSubmit", "formValidityChange", "fieldValueChange", "fields", "actions", "hideActions"], [3, "rowData", "group"]], template: function ThemeSettingsFooterSectionComponent_Template(rf, ctx) {
    if (rf & 1) {
      \u0275\u0275elementStart(0, "div", 1)(1, "div", 2);
      \u0275\u0275element(2, "fa-icon", 3);
      \u0275\u0275elementStart(3, "div", 4)(4, "div", 5)(5, "h2", 6);
      \u0275\u0275text(6, "Footer");
      \u0275\u0275elementEnd();
      \u0275\u0275conditionalCreate(7, ThemeSettingsFooterSectionComponent_Conditional_7_Template, 2, 1, "div", 7);
      \u0275\u0275elementEnd();
      \u0275\u0275elementStart(8, "span");
      \u0275\u0275text(9);
      \u0275\u0275elementEnd()()();
      \u0275\u0275conditionalCreate(10, ThemeSettingsFooterSectionComponent_Conditional_10_Template, 1, 3, "app-dynamic-form", 8);
      \u0275\u0275conditionalCreate(11, ThemeSettingsFooterSectionComponent_Conditional_11_Template, 1, 4, "app-grid", 9);
      \u0275\u0275elementEnd();
      \u0275\u0275template(12, ThemeSettingsFooterSectionComponent_ng_template_12_Template, 1, 2, "ng-template", null, 0, \u0275\u0275templateRefExtractor);
    }
    if (rf & 2) {
      \u0275\u0275advance(2);
      \u0275\u0275property("icon", ctx.faFill)("ngClass", \u0275\u0275pureFunction1(6, _c112, ctx.isFormEditable()));
      \u0275\u0275advance(5);
      \u0275\u0275conditional(!ctx.isFormEditable() && !ctx.createMode() ? 7 : -1);
      \u0275\u0275advance(2);
      \u0275\u0275textInterpolate(ctx.description);
      \u0275\u0275advance();
      \u0275\u0275conditional(ctx.isFormEditable() || ctx.createMode() && ctx.formFields.length ? 10 : -1);
      \u0275\u0275advance();
      \u0275\u0275conditional(!ctx.isFormEditable() && !ctx.createMode() ? 11 : -1);
    }
  }, dependencies: [
    DynamicFormComponent,
    FontAwesomeModule,
    FaIconComponent,
    CommonModule,
    NgClass,
    GridComponent,
    ThemeValueDisplayComponent
  ], encapsulation: 2 });
};
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(ThemeSettingsFooterSectionComponent, [{
    type: Component,
    args: [{ selector: "app-theme-settings-footer-section", imports: [
      DynamicFormComponent,
      FontAwesomeModule,
      CommonModule,
      GridComponent,
      ThemeValueDisplayComponent
    ], template: `<div class="card pt-2">
  <div class="mb-4 p-2 flex justify-start items-center">
    <fa-icon
      [icon]="faFill"
      class="!text-[2.5rem]"
      [ngClass]="{ 'icon-primary': isFormEditable() }"
    ></fa-icon>

    <div class="pl-6 flex-1">
      <div class="flex justify-between items-center">
        <h2 class="text-xl font-semibold m-0">Footer</h2>
        @if (!isFormEditable() && !createMode()) {
          <div class="icon-light">
            <span
              class="pi pi-pen-to-square action hover !text-2xl"
              [attr.aria-label]="'Edit theme details'"
              (click)="onEdit()"
              (keydown.enter)="onEdit()"
            ></span>
          </div>
        }
      </div>
      <span>{{ description }}</span>
    </div>
  </div>

  @if (isFormEditable() || (createMode() && formFields.length)) {
    <app-dynamic-form
      [fields]="formFields"
      [actions]="actions"
      [hideActions]="createMode()"
      (formSubmit)="onSubmit($event)"
      (formValidityChange)="onFormValidityChange($event)"
      (fieldValueChange)="onFieldValueChange($event)"
    >
    </app-dynamic-form>
  }

  @if (!isFormEditable() && !createMode()) {
    <app-grid
      [data]="themeDetails()"
      [columns]="columns"
      [showGridLines]="false"
      [hideHeader]="true"
      tableStyleClass="info-display !w-auto"
    ></app-grid>
  }
</div>

<ng-template #valueTemplate let-rowData>
  <app-theme-value-display [rowData]="rowData" [group]="group">
  </app-theme-value-display>
</ng-template>
` }]
  }], () => [], { valueTemplate: [{
    type: ViewChild,
    args: ["valueTemplate", { static: true }]
  }] });
})();
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && \u0275setClassDebugInfo(ThemeSettingsFooterSectionComponent, { className: "ThemeSettingsFooterSectionComponent", filePath: "src/app/features/administration/components/themes/theme-settings-footer-section/theme-settings-footer-section.component.ts", lineNumber: 43 });
})();

// src/app/features/administration/components/themes/theme-settings-modal-section/theme-settings-modal-section.component.ts
var _c055 = ["valueTemplate"];
var _c113 = (a0) => ({ "icon-primary": a0 });
function ThemeSettingsModalSectionComponent_Conditional_7_Template(rf, ctx) {
  if (rf & 1) {
    const _r1 = \u0275\u0275getCurrentView();
    \u0275\u0275elementStart(0, "div", 7)(1, "span", 10);
    \u0275\u0275listener("click", function ThemeSettingsModalSectionComponent_Conditional_7_Template_span_click_1_listener() {
      \u0275\u0275restoreView(_r1);
      const ctx_r1 = \u0275\u0275nextContext();
      return \u0275\u0275resetView(ctx_r1.onEdit());
    })("keydown.enter", function ThemeSettingsModalSectionComponent_Conditional_7_Template_span_keydown_enter_1_listener() {
      \u0275\u0275restoreView(_r1);
      const ctx_r1 = \u0275\u0275nextContext();
      return \u0275\u0275resetView(ctx_r1.onEdit());
    });
    \u0275\u0275elementEnd()();
  }
  if (rf & 2) {
    \u0275\u0275advance();
    \u0275\u0275attribute("aria-label", "Edit theme details");
  }
}
function ThemeSettingsModalSectionComponent_Conditional_10_Template(rf, ctx) {
  if (rf & 1) {
    const _r3 = \u0275\u0275getCurrentView();
    \u0275\u0275elementStart(0, "app-dynamic-form", 11);
    \u0275\u0275listener("formSubmit", function ThemeSettingsModalSectionComponent_Conditional_10_Template_app_dynamic_form_formSubmit_0_listener($event) {
      \u0275\u0275restoreView(_r3);
      const ctx_r1 = \u0275\u0275nextContext();
      return \u0275\u0275resetView(ctx_r1.onSubmit($event));
    })("formValidityChange", function ThemeSettingsModalSectionComponent_Conditional_10_Template_app_dynamic_form_formValidityChange_0_listener($event) {
      \u0275\u0275restoreView(_r3);
      const ctx_r1 = \u0275\u0275nextContext();
      return \u0275\u0275resetView(ctx_r1.onFormValidityChange($event));
    })("fieldValueChange", function ThemeSettingsModalSectionComponent_Conditional_10_Template_app_dynamic_form_fieldValueChange_0_listener($event) {
      \u0275\u0275restoreView(_r3);
      const ctx_r1 = \u0275\u0275nextContext();
      return \u0275\u0275resetView(ctx_r1.onFieldValueChange($event));
    });
    \u0275\u0275elementEnd();
  }
  if (rf & 2) {
    const ctx_r1 = \u0275\u0275nextContext();
    \u0275\u0275property("fields", ctx_r1.formFields)("actions", ctx_r1.actions)("hideActions", ctx_r1.createMode());
  }
}
function ThemeSettingsModalSectionComponent_Conditional_11_Template(rf, ctx) {
  if (rf & 1) {
    \u0275\u0275element(0, "app-grid", 9);
  }
  if (rf & 2) {
    const ctx_r1 = \u0275\u0275nextContext();
    \u0275\u0275property("data", ctx_r1.themeDetails())("columns", ctx_r1.columns)("showGridLines", false)("hideHeader", true);
  }
}
function ThemeSettingsModalSectionComponent_ng_template_12_Template(rf, ctx) {
  if (rf & 1) {
    \u0275\u0275element(0, "app-theme-value-display", 12);
  }
  if (rf & 2) {
    const rowData_r4 = ctx.$implicit;
    const ctx_r1 = \u0275\u0275nextContext();
    \u0275\u0275property("rowData", rowData_r4)("group", ctx_r1.group);
  }
}
var MODAL_THEME_PATHS = {
  FONT_SIZE: ["modal", "font", "size"],
  FONT_COLOR: ["modal", "font", "color"],
  BACKGROUND_COLOR: ["modal", "background", "color"],
  BORDER_COLOR: ["modal", "border", "color"],
  BORDER_WIDTH: ["modal", "border", "width"],
  //header
  HEADER_FONT_SIZE: ["modal", "header", "font", "size"],
  HEADER_FONT_WEIGHT: ["modal", "header", "font", "weight"],
  HEADER_FONT_TRANSFORM: ["modal", "header", "font", "transform"],
  HEADER_FONT_COLOR: ["modal", "header", "font", "color"],
  HEADER_BACKGROUND_COLOR: ["modal", "header", "background", "color"],
  // footer
  FOOTER_FONT_SIZE: ["modal", "footer", "font", "size"],
  FOOTER_FONT_COLOR: ["modal", "footer", "font", "color"],
  FOOTER_BACKGROUND_COLOR: ["modal", "footer", "background", "color"],
  FOOTER_BORDER_COLOR: ["modal", "footer", "border", "color"]
};
var ThemeSettingsModalSectionComponent = class _ThemeSettingsModalSectionComponent extends ThemeSettingsSectionBase {
  valueTemplate;
  themeDetails = computed(() => {
    const themeDetails = this.entity();
    if (!isDefined(themeDetails))
      return [];
    const themeSettings = this.themeEngine.themeSettingsMergedWithDefault(themeDetails?.settings ?? {});
    const detailConfigs = this.createThemeDetailsFromConfig(this.getFieldConfigurations());
    return detailConfigs.map((config) => ({
      key: config.key,
      value: this.formatThemeValue(themeSettings, config)
    }));
  }, ...ngDevMode ? [{ debugName: "themeDetails" }] : []);
  constructor() {
    super("modal");
  }
  ngOnInit() {
    this.initializeColumns();
  }
  initializeColumns() {
    this.columns = [
      { field: "key", header: "", transform: "uppercase" },
      {
        field: "value",
        header: "",
        cellTemplate: this.valueTemplate
      }
    ];
  }
  getFieldConfigurations() {
    return [
      {
        id: "font.size",
        label: "Font Size",
        path: MODAL_THEME_PATHS.FONT_SIZE,
        type: "size"
      },
      {
        id: "font.color",
        label: "Font Color",
        path: MODAL_THEME_PATHS.FONT_COLOR,
        type: "color",
        group: "modal",
        presets: ["main", "content", "header"]
      },
      {
        id: "background.color",
        label: "Background Color",
        path: MODAL_THEME_PATHS.BACKGROUND_COLOR,
        type: "color",
        group: "modal",
        presets: ["main", "content"]
      },
      {
        id: "border.color",
        label: "Border Color",
        path: MODAL_THEME_PATHS.BORDER_COLOR,
        type: "color",
        group: "modal"
      },
      {
        id: "border.width",
        label: "Border Width",
        path: MODAL_THEME_PATHS.BORDER_WIDTH,
        type: "size",
        props: { unit: "px" }
      },
      {
        id: "header.font.size",
        label: "Header Font Size",
        path: MODAL_THEME_PATHS.HEADER_FONT_SIZE,
        type: "size",
        props: { unit: "px" }
      },
      {
        id: "header.font.weight",
        label: "Header Font Weight",
        path: MODAL_THEME_PATHS.HEADER_FONT_WEIGHT,
        type: "font-weight"
      },
      {
        id: "header.font.transform",
        label: "Header Font Case",
        path: MODAL_THEME_PATHS.HEADER_FONT_TRANSFORM,
        type: "font-transform"
      },
      {
        id: "header.font.color",
        label: "Header Font Color",
        path: MODAL_THEME_PATHS.HEADER_FONT_COLOR,
        type: "color",
        group: "modal",
        presets: ["main", "content", "header"]
      },
      {
        id: "header.background.color",
        label: "Header Background",
        path: MODAL_THEME_PATHS.HEADER_BACKGROUND_COLOR,
        type: "color",
        group: "modal",
        presets: ["main", "content"]
      },
      {
        id: "footer.font.size",
        label: "Footer Font Size",
        path: MODAL_THEME_PATHS.FOOTER_FONT_SIZE,
        type: "size",
        props: { unit: "px" }
      },
      {
        id: "footer.font.color",
        label: "Footer Font Color",
        path: MODAL_THEME_PATHS.FOOTER_FONT_COLOR,
        type: "color",
        group: "modal",
        presets: ["main", "content", "header"]
      },
      {
        id: "footer.background.color",
        label: "Footer Background",
        path: MODAL_THEME_PATHS.FOOTER_BACKGROUND_COLOR,
        type: "color",
        group: "modal",
        presets: ["main", "content"]
      },
      {
        id: "footer.border.color",
        label: "Footer Border Color",
        path: MODAL_THEME_PATHS.FOOTER_BORDER_COLOR,
        type: "color",
        group: "modal"
      }
    ];
  }
  getFields(entity) {
    return this.createFormFieldsFromConfig(entity, this.getFieldConfigurations());
  }
  getUpdateMethod() {
    return this.operationRegistry.getOperation("theme", "update") ?? ((id) => this.entitiesService.updateTheme(id, {
      settings: {
        modal: this.formChanges
      }
    }));
  }
  static \u0275fac = function ThemeSettingsModalSectionComponent_Factory(__ngFactoryType__) {
    return new (__ngFactoryType__ || _ThemeSettingsModalSectionComponent)();
  };
  static \u0275cmp = /* @__PURE__ */ \u0275\u0275defineComponent({ type: _ThemeSettingsModalSectionComponent, selectors: [["app-theme-settings-modal-section"]], viewQuery: function ThemeSettingsModalSectionComponent_Query(rf, ctx) {
    if (rf & 1) {
      \u0275\u0275viewQuery(_c055, 7);
    }
    if (rf & 2) {
      let _t;
      \u0275\u0275queryRefresh(_t = \u0275\u0275loadQuery()) && (ctx.valueTemplate = _t.first);
    }
  }, features: [\u0275\u0275InheritDefinitionFeature], decls: 14, vars: 8, consts: [["valueTemplate", ""], [1, "card", "pt-2"], [1, "mb-4", "p-2", "flex", "justify-start", "items-center"], [1, "!text-[2.5rem]", 3, "icon", "ngClass"], [1, "pl-6", "flex-1"], [1, "flex", "justify-between", "items-center"], [1, "text-xl", "font-semibold", "m-0"], [1, "icon-light"], [3, "fields", "actions", "hideActions"], ["tableStyleClass", "info-display !w-auto", 3, "data", "columns", "showGridLines", "hideHeader"], [1, "pi", "pi-pen-to-square", "action", "hover", "!text-2xl", 3, "click", "keydown.enter"], [3, "formSubmit", "formValidityChange", "fieldValueChange", "fields", "actions", "hideActions"], [3, "rowData", "group"]], template: function ThemeSettingsModalSectionComponent_Template(rf, ctx) {
    if (rf & 1) {
      \u0275\u0275elementStart(0, "div", 1)(1, "div", 2);
      \u0275\u0275element(2, "fa-icon", 3);
      \u0275\u0275elementStart(3, "div", 4)(4, "div", 5)(5, "h2", 6);
      \u0275\u0275text(6, "Modal");
      \u0275\u0275elementEnd();
      \u0275\u0275conditionalCreate(7, ThemeSettingsModalSectionComponent_Conditional_7_Template, 2, 1, "div", 7);
      \u0275\u0275elementEnd();
      \u0275\u0275elementStart(8, "span");
      \u0275\u0275text(9);
      \u0275\u0275elementEnd()()();
      \u0275\u0275conditionalCreate(10, ThemeSettingsModalSectionComponent_Conditional_10_Template, 1, 3, "app-dynamic-form", 8);
      \u0275\u0275conditionalCreate(11, ThemeSettingsModalSectionComponent_Conditional_11_Template, 1, 4, "app-grid", 9);
      \u0275\u0275elementEnd();
      \u0275\u0275template(12, ThemeSettingsModalSectionComponent_ng_template_12_Template, 1, 2, "ng-template", null, 0, \u0275\u0275templateRefExtractor);
    }
    if (rf & 2) {
      \u0275\u0275advance(2);
      \u0275\u0275property("icon", ctx.faFill)("ngClass", \u0275\u0275pureFunction1(6, _c113, ctx.isFormEditable()));
      \u0275\u0275advance(5);
      \u0275\u0275conditional(!ctx.isFormEditable() && !ctx.createMode() ? 7 : -1);
      \u0275\u0275advance(2);
      \u0275\u0275textInterpolate(ctx.description);
      \u0275\u0275advance();
      \u0275\u0275conditional(ctx.isFormEditable() || ctx.createMode() && ctx.formFields.length ? 10 : -1);
      \u0275\u0275advance();
      \u0275\u0275conditional(!ctx.isFormEditable() && !ctx.createMode() ? 11 : -1);
    }
  }, dependencies: [
    DynamicFormComponent,
    FontAwesomeModule,
    FaIconComponent,
    CommonModule,
    NgClass,
    GridComponent,
    ThemeValueDisplayComponent
  ], encapsulation: 2 });
};
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(ThemeSettingsModalSectionComponent, [{
    type: Component,
    args: [{ selector: "app-theme-settings-modal-section", imports: [
      DynamicFormComponent,
      FontAwesomeModule,
      CommonModule,
      GridComponent,
      ThemeValueDisplayComponent
    ], template: `<div class="card pt-2">
  <div class="mb-4 p-2 flex justify-start items-center">
    <fa-icon
      [icon]="faFill"
      class="!text-[2.5rem]"
      [ngClass]="{ 'icon-primary': isFormEditable() }"
    ></fa-icon>

    <div class="pl-6 flex-1">
      <div class="flex justify-between items-center">
        <h2 class="text-xl font-semibold m-0">Modal</h2>
        @if (!isFormEditable() && !createMode()) {
          <div class="icon-light">
            <span
              class="pi pi-pen-to-square action hover !text-2xl"
              [attr.aria-label]="'Edit theme details'"
              (click)="onEdit()"
              (keydown.enter)="onEdit()"
            ></span>
          </div>
        }
      </div>
      <span>{{ description }}</span>
    </div>
  </div>

  @if (isFormEditable() || (createMode() && formFields.length)) {
    <app-dynamic-form
      [fields]="formFields"
      [actions]="actions"
      [hideActions]="createMode()"
      (formSubmit)="onSubmit($event)"
      (formValidityChange)="onFormValidityChange($event)"
      (fieldValueChange)="onFieldValueChange($event)"
    >
    </app-dynamic-form>
  }

  @if (!isFormEditable() && !createMode()) {
    <app-grid
      [data]="themeDetails()"
      [columns]="columns"
      [showGridLines]="false"
      [hideHeader]="true"
      tableStyleClass="info-display !w-auto"
    ></app-grid>
  }
</div>

<ng-template #valueTemplate let-rowData>
  <app-theme-value-display [rowData]="rowData" [group]="group">
  </app-theme-value-display>
</ng-template>
` }]
  }], () => [], { valueTemplate: [{
    type: ViewChild,
    args: ["valueTemplate", { static: true }]
  }] });
})();
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && \u0275setClassDebugInfo(ThemeSettingsModalSectionComponent, { className: "ThemeSettingsModalSectionComponent", filePath: "src/app/features/administration/components/themes/theme-settings-modal-section/theme-settings-modal-section.component.ts", lineNumber: 54 });
})();

// src/app/features/administration/components/themes/theme-settings-sidebar-section/theme-settings-sidebar-section.component.ts
var _c056 = ["valueTemplate"];
var _c114 = (a0) => ({ "icon-primary": a0 });
function ThemeSettingsSidebarSectionComponent_Conditional_7_Template(rf, ctx) {
  if (rf & 1) {
    const _r1 = \u0275\u0275getCurrentView();
    \u0275\u0275elementStart(0, "div", 7)(1, "span", 10);
    \u0275\u0275listener("click", function ThemeSettingsSidebarSectionComponent_Conditional_7_Template_span_click_1_listener() {
      \u0275\u0275restoreView(_r1);
      const ctx_r1 = \u0275\u0275nextContext();
      return \u0275\u0275resetView(ctx_r1.onEdit());
    })("keydown.enter", function ThemeSettingsSidebarSectionComponent_Conditional_7_Template_span_keydown_enter_1_listener() {
      \u0275\u0275restoreView(_r1);
      const ctx_r1 = \u0275\u0275nextContext();
      return \u0275\u0275resetView(ctx_r1.onEdit());
    });
    \u0275\u0275elementEnd()();
  }
  if (rf & 2) {
    \u0275\u0275advance();
    \u0275\u0275attribute("aria-label", "Edit theme details");
  }
}
function ThemeSettingsSidebarSectionComponent_Conditional_10_Template(rf, ctx) {
  if (rf & 1) {
    const _r3 = \u0275\u0275getCurrentView();
    \u0275\u0275elementStart(0, "app-dynamic-form", 11);
    \u0275\u0275listener("formSubmit", function ThemeSettingsSidebarSectionComponent_Conditional_10_Template_app_dynamic_form_formSubmit_0_listener($event) {
      \u0275\u0275restoreView(_r3);
      const ctx_r1 = \u0275\u0275nextContext();
      return \u0275\u0275resetView(ctx_r1.onSubmit($event));
    })("formValidityChange", function ThemeSettingsSidebarSectionComponent_Conditional_10_Template_app_dynamic_form_formValidityChange_0_listener($event) {
      \u0275\u0275restoreView(_r3);
      const ctx_r1 = \u0275\u0275nextContext();
      return \u0275\u0275resetView(ctx_r1.onFormValidityChange($event));
    })("fieldValueChange", function ThemeSettingsSidebarSectionComponent_Conditional_10_Template_app_dynamic_form_fieldValueChange_0_listener($event) {
      \u0275\u0275restoreView(_r3);
      const ctx_r1 = \u0275\u0275nextContext();
      return \u0275\u0275resetView(ctx_r1.onFieldValueChange($event));
    });
    \u0275\u0275elementEnd();
  }
  if (rf & 2) {
    const ctx_r1 = \u0275\u0275nextContext();
    \u0275\u0275property("fields", ctx_r1.formFields)("actions", ctx_r1.actions)("hideActions", ctx_r1.createMode());
  }
}
function ThemeSettingsSidebarSectionComponent_Conditional_11_Template(rf, ctx) {
  if (rf & 1) {
    \u0275\u0275element(0, "app-grid", 9);
  }
  if (rf & 2) {
    const ctx_r1 = \u0275\u0275nextContext();
    \u0275\u0275property("data", ctx_r1.themeDetails())("columns", ctx_r1.columns)("showGridLines", false)("hideHeader", true);
  }
}
function ThemeSettingsSidebarSectionComponent_ng_template_12_Template(rf, ctx) {
  if (rf & 1) {
    \u0275\u0275element(0, "app-theme-value-display", 12);
  }
  if (rf & 2) {
    const rowData_r4 = ctx.$implicit;
    const ctx_r1 = \u0275\u0275nextContext();
    \u0275\u0275property("rowData", rowData_r4)("group", ctx_r1.group);
  }
}
var SIDEBAR_THEME_PATHS = {
  FONT_COLOR: ["sidebar", "font", "color"],
  BACKGROUND_COLOR: ["sidebar", "background", "color"],
  BORDER_COLOR: ["sidebar", "border", "color"],
  SHADOW: ["sidebar", "shadow"]
};
var ThemeSettingsSidebarSectionComponent = class _ThemeSettingsSidebarSectionComponent extends ThemeSettingsSectionBase {
  valueTemplate;
  themeDetails = computed(() => {
    const themeDetails = this.entity();
    if (!isDefined(themeDetails))
      return [];
    const themeSettings = this.themeEngine.themeSettingsMergedWithDefault(themeDetails?.settings ?? {});
    const detailConfigs = this.createThemeDetailsFromConfig(this.getFieldConfigurations());
    return detailConfigs.map((config) => ({
      key: config.key,
      value: this.formatThemeValue(themeSettings, config)
    }));
  }, ...ngDevMode ? [{ debugName: "themeDetails" }] : []);
  constructor() {
    super("sidebar");
  }
  ngOnInit() {
    this.initializeColumns();
  }
  initializeColumns() {
    this.columns = [
      { field: "key", header: "", transform: "uppercase" },
      {
        field: "value",
        header: "",
        cellTemplate: this.valueTemplate
      }
    ];
  }
  getFieldConfigurations() {
    return [
      {
        id: "font.color",
        label: "Font Color",
        path: SIDEBAR_THEME_PATHS.FONT_COLOR,
        type: "color",
        group: "sidebar",
        presets: ["main", "content", "header"]
      },
      {
        id: "background.color",
        label: "Background Color",
        path: SIDEBAR_THEME_PATHS.BACKGROUND_COLOR,
        type: "color",
        group: "sidebar",
        presets: ["main", "content"]
      },
      {
        id: "border.color",
        label: "Border Color",
        path: SIDEBAR_THEME_PATHS.BORDER_COLOR,
        type: "color",
        group: "sidebar",
        presets: ["main", "content"]
      },
      {
        id: "shadow",
        label: "Shadow",
        path: SIDEBAR_THEME_PATHS.SHADOW,
        type: "dropdown",
        options: DROP_SHADOW_OPTIONS
      }
    ];
  }
  getFields(entity) {
    return this.createFormFieldsFromConfig(entity, this.getFieldConfigurations());
  }
  getUpdateMethod() {
    return this.operationRegistry.getOperation("theme", "update") ?? ((id) => this.entitiesService.updateTheme(id, {
      settings: {
        sidebar: this.formChanges
      }
    }));
  }
  static \u0275fac = function ThemeSettingsSidebarSectionComponent_Factory(__ngFactoryType__) {
    return new (__ngFactoryType__ || _ThemeSettingsSidebarSectionComponent)();
  };
  static \u0275cmp = /* @__PURE__ */ \u0275\u0275defineComponent({ type: _ThemeSettingsSidebarSectionComponent, selectors: [["app-theme-settings-sidebar-section"]], viewQuery: function ThemeSettingsSidebarSectionComponent_Query(rf, ctx) {
    if (rf & 1) {
      \u0275\u0275viewQuery(_c056, 7);
    }
    if (rf & 2) {
      let _t;
      \u0275\u0275queryRefresh(_t = \u0275\u0275loadQuery()) && (ctx.valueTemplate = _t.first);
    }
  }, features: [\u0275\u0275InheritDefinitionFeature], decls: 14, vars: 8, consts: [["valueTemplate", ""], [1, "card", "pt-2"], [1, "mb-4", "p-2", "flex", "justify-start", "items-center"], [1, "!text-[2.5rem]", 3, "icon", "ngClass"], [1, "pl-6", "flex-1"], [1, "flex", "justify-between", "items-center"], [1, "text-xl", "font-semibold", "m-0"], [1, "icon-light"], [3, "fields", "actions", "hideActions"], ["tableStyleClass", "info-display !w-auto", 3, "data", "columns", "showGridLines", "hideHeader"], [1, "pi", "pi-pen-to-square", "action", "hover", "!text-2xl", 3, "click", "keydown.enter"], [3, "formSubmit", "formValidityChange", "fieldValueChange", "fields", "actions", "hideActions"], [3, "rowData", "group"]], template: function ThemeSettingsSidebarSectionComponent_Template(rf, ctx) {
    if (rf & 1) {
      \u0275\u0275elementStart(0, "div", 1)(1, "div", 2);
      \u0275\u0275element(2, "fa-icon", 3);
      \u0275\u0275elementStart(3, "div", 4)(4, "div", 5)(5, "h2", 6);
      \u0275\u0275text(6, "Sidebar");
      \u0275\u0275elementEnd();
      \u0275\u0275conditionalCreate(7, ThemeSettingsSidebarSectionComponent_Conditional_7_Template, 2, 1, "div", 7);
      \u0275\u0275elementEnd();
      \u0275\u0275elementStart(8, "span");
      \u0275\u0275text(9);
      \u0275\u0275elementEnd()()();
      \u0275\u0275conditionalCreate(10, ThemeSettingsSidebarSectionComponent_Conditional_10_Template, 1, 3, "app-dynamic-form", 8);
      \u0275\u0275conditionalCreate(11, ThemeSettingsSidebarSectionComponent_Conditional_11_Template, 1, 4, "app-grid", 9);
      \u0275\u0275elementEnd();
      \u0275\u0275template(12, ThemeSettingsSidebarSectionComponent_ng_template_12_Template, 1, 2, "ng-template", null, 0, \u0275\u0275templateRefExtractor);
    }
    if (rf & 2) {
      \u0275\u0275advance(2);
      \u0275\u0275property("icon", ctx.faFill)("ngClass", \u0275\u0275pureFunction1(6, _c114, ctx.isFormEditable()));
      \u0275\u0275advance(5);
      \u0275\u0275conditional(!ctx.isFormEditable() && !ctx.createMode() ? 7 : -1);
      \u0275\u0275advance(2);
      \u0275\u0275textInterpolate(ctx.description);
      \u0275\u0275advance();
      \u0275\u0275conditional(ctx.isFormEditable() || ctx.createMode() && ctx.formFields.length ? 10 : -1);
      \u0275\u0275advance();
      \u0275\u0275conditional(!ctx.isFormEditable() && !ctx.createMode() ? 11 : -1);
    }
  }, dependencies: [
    DynamicFormComponent,
    FontAwesomeModule,
    FaIconComponent,
    CommonModule,
    NgClass,
    GridComponent,
    ThemeValueDisplayComponent
  ], encapsulation: 2 });
};
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(ThemeSettingsSidebarSectionComponent, [{
    type: Component,
    args: [{ selector: "app-theme-settings-sidebar-section", imports: [
      DynamicFormComponent,
      FontAwesomeModule,
      CommonModule,
      GridComponent,
      ThemeValueDisplayComponent
    ], template: `<div class="card pt-2">
  <div class="mb-4 p-2 flex justify-start items-center">
    <fa-icon
      [icon]="faFill"
      class="!text-[2.5rem]"
      [ngClass]="{ 'icon-primary': isFormEditable() }"
    ></fa-icon>

    <div class="pl-6 flex-1">
      <div class="flex justify-between items-center">
        <h2 class="text-xl font-semibold m-0">Sidebar</h2>
        @if (!isFormEditable() && !createMode()) {
          <div class="icon-light">
            <span
              class="pi pi-pen-to-square action hover !text-2xl"
              [attr.aria-label]="'Edit theme details'"
              (click)="onEdit()"
              (keydown.enter)="onEdit()"
            ></span>
          </div>
        }
      </div>
      <span>{{ description }}</span>
    </div>
  </div>

  @if (isFormEditable() || (createMode() && formFields.length)) {
    <app-dynamic-form
      [fields]="formFields"
      [actions]="actions"
      [hideActions]="createMode()"
      (formSubmit)="onSubmit($event)"
      (formValidityChange)="onFormValidityChange($event)"
      (fieldValueChange)="onFieldValueChange($event)"
    >
    </app-dynamic-form>
  }

  @if (!isFormEditable() && !createMode()) {
    <app-grid
      [data]="themeDetails()"
      [columns]="columns"
      [showGridLines]="false"
      [hideHeader]="true"
      tableStyleClass="info-display !w-auto"
    ></app-grid>
  }
</div>

<ng-template #valueTemplate let-rowData>
  <app-theme-value-display [rowData]="rowData" [group]="group">
  </app-theme-value-display>
</ng-template>
` }]
  }], () => [], { valueTemplate: [{
    type: ViewChild,
    args: ["valueTemplate", { static: true }]
  }] });
})();
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && \u0275setClassDebugInfo(ThemeSettingsSidebarSectionComponent, { className: "ThemeSettingsSidebarSectionComponent", filePath: "src/app/features/administration/components/themes/theme-settings-sidebar-section/theme-settings-sidebar-section.component.ts", lineNumber: 43 });
})();

// src/app/features/administration/components/themes/theme-settings-button-section/theme-settings-button-section.component.ts
var _c057 = ["valueTemplate"];
var _c115 = (a0) => ({ "icon-primary": a0 });
function ThemeSettingsButtonSectionComponent_Conditional_7_Template(rf, ctx) {
  if (rf & 1) {
    const _r1 = \u0275\u0275getCurrentView();
    \u0275\u0275elementStart(0, "div", 7)(1, "span", 10);
    \u0275\u0275listener("click", function ThemeSettingsButtonSectionComponent_Conditional_7_Template_span_click_1_listener() {
      \u0275\u0275restoreView(_r1);
      const ctx_r1 = \u0275\u0275nextContext();
      return \u0275\u0275resetView(ctx_r1.onEdit());
    })("keydown.enter", function ThemeSettingsButtonSectionComponent_Conditional_7_Template_span_keydown_enter_1_listener() {
      \u0275\u0275restoreView(_r1);
      const ctx_r1 = \u0275\u0275nextContext();
      return \u0275\u0275resetView(ctx_r1.onEdit());
    });
    \u0275\u0275elementEnd()();
  }
  if (rf & 2) {
    \u0275\u0275advance();
    \u0275\u0275attribute("aria-label", "Edit theme details");
  }
}
function ThemeSettingsButtonSectionComponent_Conditional_10_Template(rf, ctx) {
  if (rf & 1) {
    const _r3 = \u0275\u0275getCurrentView();
    \u0275\u0275elementStart(0, "app-dynamic-form", 11);
    \u0275\u0275listener("formSubmit", function ThemeSettingsButtonSectionComponent_Conditional_10_Template_app_dynamic_form_formSubmit_0_listener($event) {
      \u0275\u0275restoreView(_r3);
      const ctx_r1 = \u0275\u0275nextContext();
      return \u0275\u0275resetView(ctx_r1.onSubmit($event));
    })("formValidityChange", function ThemeSettingsButtonSectionComponent_Conditional_10_Template_app_dynamic_form_formValidityChange_0_listener($event) {
      \u0275\u0275restoreView(_r3);
      const ctx_r1 = \u0275\u0275nextContext();
      return \u0275\u0275resetView(ctx_r1.onFormValidityChange($event));
    })("fieldValueChange", function ThemeSettingsButtonSectionComponent_Conditional_10_Template_app_dynamic_form_fieldValueChange_0_listener($event) {
      \u0275\u0275restoreView(_r3);
      const ctx_r1 = \u0275\u0275nextContext();
      return \u0275\u0275resetView(ctx_r1.onFieldValueChange($event));
    });
    \u0275\u0275elementEnd();
  }
  if (rf & 2) {
    const ctx_r1 = \u0275\u0275nextContext();
    \u0275\u0275property("fields", ctx_r1.formFields)("actions", ctx_r1.actions)("hideActions", ctx_r1.createMode());
  }
}
function ThemeSettingsButtonSectionComponent_Conditional_11_Template(rf, ctx) {
  if (rf & 1) {
    \u0275\u0275element(0, "app-grid", 9);
  }
  if (rf & 2) {
    const ctx_r1 = \u0275\u0275nextContext();
    \u0275\u0275property("data", ctx_r1.themeDetails())("columns", ctx_r1.columns)("showGridLines", false)("hideHeader", true);
  }
}
function ThemeSettingsButtonSectionComponent_ng_template_12_Template(rf, ctx) {
  if (rf & 1) {
    \u0275\u0275element(0, "app-theme-value-display", 12);
  }
  if (rf & 2) {
    const rowData_r4 = ctx.$implicit;
    const ctx_r1 = \u0275\u0275nextContext();
    \u0275\u0275property("rowData", rowData_r4)("group", ctx_r1.group);
  }
}
var BUTTON_THEME_PATHS = {
  FONT_FAMILY: ["button", "font", "family"],
  FONT_SIZE: ["button", "font", "size"],
  FONT_WEIGHT: ["button", "font", "weight"],
  FONT_TRANSFORM: ["button", "font", "transform"],
  BORDER_RADIUS: ["button", "border", "radius"],
  BORDER_SHADOW: ["button", "border", "shadow"],
  HOVER_BORDER_SHADOW: ["button", "hover", "border", "shadow"],
  ACTIVE_BORDER_SHADOW: ["button", "active", "border", "shadow"]
};
var ThemeSettingsButtonSectionComponent = class _ThemeSettingsButtonSectionComponent extends ThemeSettingsSectionBase {
  valueTemplate;
  themeDetails = computed(() => {
    const themeDetails = this.entity();
    if (!isDefined(themeDetails))
      return [];
    const themeSettings = this.themeEngine.themeSettingsMergedWithDefault(themeDetails?.settings ?? {});
    const detailConfigs = this.createThemeDetailsFromConfig(this.getFieldConfigurations());
    return detailConfigs.map((config) => ({
      key: config.key,
      value: this.formatThemeValue(themeSettings, config)
    }));
  }, ...ngDevMode ? [{ debugName: "themeDetails" }] : []);
  constructor() {
    super("button");
  }
  ngOnInit() {
    this.initializeColumns();
  }
  initializeColumns() {
    this.columns = [
      { field: "key", header: "", transform: "uppercase" },
      {
        field: "value",
        header: "",
        cellTemplate: this.valueTemplate
      }
    ];
  }
  getFieldConfigurations() {
    return [
      {
        id: "font.family",
        label: "Font Family",
        path: BUTTON_THEME_PATHS.FONT_FAMILY,
        type: "font-family"
      },
      {
        id: "font.size",
        label: "Font Size",
        path: BUTTON_THEME_PATHS.FONT_SIZE,
        type: "size"
      },
      {
        id: "font.weight",
        label: "Font Weight",
        path: BUTTON_THEME_PATHS.FONT_WEIGHT,
        type: "font-weight"
      },
      {
        id: "border.radius",
        label: "Border Radius",
        path: BUTTON_THEME_PATHS.BORDER_RADIUS,
        type: "size",
        props: { unit: "px" }
      },
      {
        id: "border.shadow",
        label: "Shadow",
        path: BUTTON_THEME_PATHS.BORDER_SHADOW,
        type: "dropdown",
        options: DROP_SHADOW_OPTIONS
      },
      {
        id: "hover.border.shadow",
        label: "Hover Shadow",
        path: BUTTON_THEME_PATHS.HOVER_BORDER_SHADOW,
        type: "dropdown",
        options: DROP_SHADOW_OPTIONS
      },
      {
        id: "active.border.shadow",
        label: "Active Shadow",
        path: BUTTON_THEME_PATHS.ACTIVE_BORDER_SHADOW,
        type: "dropdown",
        options: DROP_SHADOW_OPTIONS
      }
    ];
  }
  getFields(entity) {
    return this.createFormFieldsFromConfig(entity, this.getFieldConfigurations());
  }
  getUpdateMethod() {
    return this.operationRegistry.getOperation("theme", "update") ?? ((id) => this.entitiesService.updateTheme(id, {
      settings: {
        button: this.formChanges
      }
    }));
  }
  static \u0275fac = function ThemeSettingsButtonSectionComponent_Factory(__ngFactoryType__) {
    return new (__ngFactoryType__ || _ThemeSettingsButtonSectionComponent)();
  };
  static \u0275cmp = /* @__PURE__ */ \u0275\u0275defineComponent({ type: _ThemeSettingsButtonSectionComponent, selectors: [["app-theme-settings-button-section"]], viewQuery: function ThemeSettingsButtonSectionComponent_Query(rf, ctx) {
    if (rf & 1) {
      \u0275\u0275viewQuery(_c057, 7);
    }
    if (rf & 2) {
      let _t;
      \u0275\u0275queryRefresh(_t = \u0275\u0275loadQuery()) && (ctx.valueTemplate = _t.first);
    }
  }, features: [\u0275\u0275InheritDefinitionFeature], decls: 14, vars: 8, consts: [["valueTemplate", ""], [1, "card", "pt-2"], [1, "mb-4", "p-2", "flex", "justify-start", "items-center"], [1, "!text-[2.5rem]", 3, "icon", "ngClass"], [1, "pl-6", "flex-1"], [1, "flex", "justify-between", "items-center"], [1, "text-xl", "font-semibold", "m-0"], [1, "icon-light"], [3, "fields", "actions", "hideActions"], ["tableStyleClass", "info-display !w-auto", 3, "data", "columns", "showGridLines", "hideHeader"], [1, "pi", "pi-pen-to-square", "action", "hover", "!text-2xl", 3, "click", "keydown.enter"], [3, "formSubmit", "formValidityChange", "fieldValueChange", "fields", "actions", "hideActions"], [3, "rowData", "group"]], template: function ThemeSettingsButtonSectionComponent_Template(rf, ctx) {
    if (rf & 1) {
      \u0275\u0275elementStart(0, "div", 1)(1, "div", 2);
      \u0275\u0275element(2, "fa-icon", 3);
      \u0275\u0275elementStart(3, "div", 4)(4, "div", 5)(5, "h2", 6);
      \u0275\u0275text(6, "Button");
      \u0275\u0275elementEnd();
      \u0275\u0275conditionalCreate(7, ThemeSettingsButtonSectionComponent_Conditional_7_Template, 2, 1, "div", 7);
      \u0275\u0275elementEnd();
      \u0275\u0275elementStart(8, "span");
      \u0275\u0275text(9);
      \u0275\u0275elementEnd()()();
      \u0275\u0275conditionalCreate(10, ThemeSettingsButtonSectionComponent_Conditional_10_Template, 1, 3, "app-dynamic-form", 8);
      \u0275\u0275conditionalCreate(11, ThemeSettingsButtonSectionComponent_Conditional_11_Template, 1, 4, "app-grid", 9);
      \u0275\u0275elementEnd();
      \u0275\u0275template(12, ThemeSettingsButtonSectionComponent_ng_template_12_Template, 1, 2, "ng-template", null, 0, \u0275\u0275templateRefExtractor);
    }
    if (rf & 2) {
      \u0275\u0275advance(2);
      \u0275\u0275property("icon", ctx.faFill)("ngClass", \u0275\u0275pureFunction1(6, _c115, ctx.isFormEditable()));
      \u0275\u0275advance(5);
      \u0275\u0275conditional(!ctx.isFormEditable() && !ctx.createMode() ? 7 : -1);
      \u0275\u0275advance(2);
      \u0275\u0275textInterpolate(ctx.description);
      \u0275\u0275advance();
      \u0275\u0275conditional(ctx.isFormEditable() || ctx.createMode() && ctx.formFields.length ? 10 : -1);
      \u0275\u0275advance();
      \u0275\u0275conditional(!ctx.isFormEditable() && !ctx.createMode() ? 11 : -1);
    }
  }, dependencies: [
    DynamicFormComponent,
    FontAwesomeModule,
    FaIconComponent,
    CommonModule,
    NgClass,
    GridComponent,
    ThemeValueDisplayComponent
  ], encapsulation: 2 });
};
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(ThemeSettingsButtonSectionComponent, [{
    type: Component,
    args: [{ selector: "app-theme-settings-button-section", imports: [
      DynamicFormComponent,
      FontAwesomeModule,
      CommonModule,
      GridComponent,
      ThemeValueDisplayComponent
    ], template: `<div class="card pt-2">
  <div class="mb-4 p-2 flex justify-start items-center">
    <fa-icon
      [icon]="faFill"
      class="!text-[2.5rem]"
      [ngClass]="{ 'icon-primary': isFormEditable() }"
    ></fa-icon>

    <div class="pl-6 flex-1">
      <div class="flex justify-between items-center">
        <h2 class="text-xl font-semibold m-0">Button</h2>
        @if (!isFormEditable() && !createMode()) {
          <div class="icon-light">
            <span
              class="pi pi-pen-to-square action hover !text-2xl"
              [attr.aria-label]="'Edit theme details'"
              (click)="onEdit()"
              (keydown.enter)="onEdit()"
            ></span>
          </div>
        }
      </div>
      <span>{{ description }}</span>
    </div>
  </div>

  @if (isFormEditable() || (createMode() && formFields.length)) {
    <app-dynamic-form
      [fields]="formFields"
      [actions]="actions"
      [hideActions]="createMode()"
      (formSubmit)="onSubmit($event)"
      (formValidityChange)="onFormValidityChange($event)"
      (fieldValueChange)="onFieldValueChange($event)"
    >
    </app-dynamic-form>
  }

  @if (!isFormEditable() && !createMode()) {
    <app-grid
      [data]="themeDetails()"
      [columns]="columns"
      [showGridLines]="false"
      [hideHeader]="true"
      tableStyleClass="info-display !w-auto"
    ></app-grid>
  }
</div>

<ng-template #valueTemplate let-rowData>
  <app-theme-value-display [rowData]="rowData" [group]="group">
  </app-theme-value-display>
</ng-template>
` }]
  }], () => [], { valueTemplate: [{
    type: ViewChild,
    args: ["valueTemplate", { static: true }]
  }] });
})();
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && \u0275setClassDebugInfo(ThemeSettingsButtonSectionComponent, { className: "ThemeSettingsButtonSectionComponent", filePath: "src/app/features/administration/components/themes/theme-settings-button-section/theme-settings-button-section.component.ts", lineNumber: 47 });
})();

// src/app/features/administration/components/themes/theme-settings-input-section/theme-settings-input-section.component.ts
var _c058 = ["valueTemplate"];
var _c116 = (a0) => ({ "icon-primary": a0 });
function ThemeSettingsInputSectionComponent_Conditional_7_Template(rf, ctx) {
  if (rf & 1) {
    const _r1 = \u0275\u0275getCurrentView();
    \u0275\u0275elementStart(0, "div", 7)(1, "span", 10);
    \u0275\u0275listener("click", function ThemeSettingsInputSectionComponent_Conditional_7_Template_span_click_1_listener() {
      \u0275\u0275restoreView(_r1);
      const ctx_r1 = \u0275\u0275nextContext();
      return \u0275\u0275resetView(ctx_r1.onEdit());
    })("keydown.enter", function ThemeSettingsInputSectionComponent_Conditional_7_Template_span_keydown_enter_1_listener() {
      \u0275\u0275restoreView(_r1);
      const ctx_r1 = \u0275\u0275nextContext();
      return \u0275\u0275resetView(ctx_r1.onEdit());
    });
    \u0275\u0275elementEnd()();
  }
  if (rf & 2) {
    \u0275\u0275advance();
    \u0275\u0275attribute("aria-label", "Edit theme details");
  }
}
function ThemeSettingsInputSectionComponent_Conditional_10_Template(rf, ctx) {
  if (rf & 1) {
    const _r3 = \u0275\u0275getCurrentView();
    \u0275\u0275elementStart(0, "app-dynamic-form", 11);
    \u0275\u0275listener("formSubmit", function ThemeSettingsInputSectionComponent_Conditional_10_Template_app_dynamic_form_formSubmit_0_listener($event) {
      \u0275\u0275restoreView(_r3);
      const ctx_r1 = \u0275\u0275nextContext();
      return \u0275\u0275resetView(ctx_r1.onSubmit($event));
    })("formValidityChange", function ThemeSettingsInputSectionComponent_Conditional_10_Template_app_dynamic_form_formValidityChange_0_listener($event) {
      \u0275\u0275restoreView(_r3);
      const ctx_r1 = \u0275\u0275nextContext();
      return \u0275\u0275resetView(ctx_r1.onFormValidityChange($event));
    })("fieldValueChange", function ThemeSettingsInputSectionComponent_Conditional_10_Template_app_dynamic_form_fieldValueChange_0_listener($event) {
      \u0275\u0275restoreView(_r3);
      const ctx_r1 = \u0275\u0275nextContext();
      return \u0275\u0275resetView(ctx_r1.onFieldValueChange($event));
    });
    \u0275\u0275elementEnd();
  }
  if (rf & 2) {
    const ctx_r1 = \u0275\u0275nextContext();
    \u0275\u0275property("fields", ctx_r1.formFields)("actions", ctx_r1.actions)("hideActions", ctx_r1.createMode());
  }
}
function ThemeSettingsInputSectionComponent_Conditional_11_Template(rf, ctx) {
  if (rf & 1) {
    \u0275\u0275element(0, "app-grid", 9);
  }
  if (rf & 2) {
    const ctx_r1 = \u0275\u0275nextContext();
    \u0275\u0275property("data", ctx_r1.themeDetails())("columns", ctx_r1.columns)("showGridLines", false)("hideHeader", true);
  }
}
function ThemeSettingsInputSectionComponent_ng_template_12_Template(rf, ctx) {
  if (rf & 1) {
    \u0275\u0275element(0, "app-theme-value-display", 12);
  }
  if (rf & 2) {
    const rowData_r4 = ctx.$implicit;
    const ctx_r1 = \u0275\u0275nextContext();
    \u0275\u0275property("rowData", rowData_r4)("group", ctx_r1.group);
  }
}
var INPUT_THEME_PATHS = {
  FONT_FAMILY: ["input", "font", "family"],
  FONT_SIZE: ["input", "font", "size"],
  FONT_WEIGHT: ["input", "font", "weight"],
  FONT_COLOR: ["input", "font", "color"],
  BACKGROUND_COLOR: ["input", "background", "color"],
  BORDER_COLOR: ["input", "border", "color"]
};
var ThemeSettingsInputSectionComponent = class _ThemeSettingsInputSectionComponent extends ThemeSettingsSectionBase {
  valueTemplate;
  themeDetails = computed(() => {
    const themeDetails = this.entity();
    if (!isDefined(themeDetails))
      return [];
    const themeSettings = this.themeEngine.themeSettingsMergedWithDefault(themeDetails?.settings ?? {});
    const detailConfigs = this.createThemeDetailsFromConfig(this.getFieldConfigurations());
    return detailConfigs.map((config) => ({
      key: config.key,
      value: this.formatThemeValue(themeSettings, config)
    }));
  }, ...ngDevMode ? [{ debugName: "themeDetails" }] : []);
  constructor() {
    super("input");
  }
  ngOnInit() {
    this.initializeColumns();
  }
  initializeColumns() {
    this.columns = [
      { field: "key", header: "", transform: "uppercase" },
      {
        field: "value",
        header: "",
        cellTemplate: this.valueTemplate
      }
    ];
  }
  getFieldConfigurations() {
    return [
      {
        id: "font.family",
        label: "Font Family",
        path: INPUT_THEME_PATHS.FONT_FAMILY,
        type: "font-family"
      },
      {
        id: "font.size",
        label: "Font Size",
        path: INPUT_THEME_PATHS.FONT_SIZE,
        type: "size"
      },
      {
        id: "font.weight",
        label: "Font Weight",
        path: INPUT_THEME_PATHS.FONT_WEIGHT,
        type: "font-weight"
      },
      {
        id: "font.color",
        label: "Font Color",
        path: INPUT_THEME_PATHS.FONT_COLOR,
        type: "color",
        group: "input"
      },
      {
        id: "background.color",
        label: "Background Color",
        path: INPUT_THEME_PATHS.BACKGROUND_COLOR,
        type: "color",
        group: "input"
      },
      {
        id: "border.color",
        label: "Border Color",
        path: INPUT_THEME_PATHS.BORDER_COLOR,
        type: "color",
        group: "input"
      }
    ];
  }
  getFields(entity) {
    return this.createFormFieldsFromConfig(entity, this.getFieldConfigurations());
  }
  getUpdateMethod() {
    return this.operationRegistry.getOperation("theme", "update") ?? ((id) => this.entitiesService.updateTheme(id, {
      settings: {
        input: this.formChanges
      }
    }));
  }
  static \u0275fac = function ThemeSettingsInputSectionComponent_Factory(__ngFactoryType__) {
    return new (__ngFactoryType__ || _ThemeSettingsInputSectionComponent)();
  };
  static \u0275cmp = /* @__PURE__ */ \u0275\u0275defineComponent({ type: _ThemeSettingsInputSectionComponent, selectors: [["app-theme-settings-input-section"]], viewQuery: function ThemeSettingsInputSectionComponent_Query(rf, ctx) {
    if (rf & 1) {
      \u0275\u0275viewQuery(_c058, 7);
    }
    if (rf & 2) {
      let _t;
      \u0275\u0275queryRefresh(_t = \u0275\u0275loadQuery()) && (ctx.valueTemplate = _t.first);
    }
  }, features: [\u0275\u0275InheritDefinitionFeature], decls: 14, vars: 8, consts: [["valueTemplate", ""], [1, "card", "pt-2"], [1, "mb-4", "p-2", "flex", "justify-start", "items-center"], [1, "!text-[2.5rem]", 3, "icon", "ngClass"], [1, "pl-6", "flex-1"], [1, "flex", "justify-between", "items-center"], [1, "text-xl", "font-semibold", "m-0"], [1, "icon-light"], [3, "fields", "actions", "hideActions"], ["tableStyleClass", "info-display !w-auto", 3, "data", "columns", "showGridLines", "hideHeader"], [1, "pi", "pi-pen-to-square", "action", "hover", "!text-2xl", 3, "click", "keydown.enter"], [3, "formSubmit", "formValidityChange", "fieldValueChange", "fields", "actions", "hideActions"], [3, "rowData", "group"]], template: function ThemeSettingsInputSectionComponent_Template(rf, ctx) {
    if (rf & 1) {
      \u0275\u0275elementStart(0, "div", 1)(1, "div", 2);
      \u0275\u0275element(2, "fa-icon", 3);
      \u0275\u0275elementStart(3, "div", 4)(4, "div", 5)(5, "h2", 6);
      \u0275\u0275text(6, "Input");
      \u0275\u0275elementEnd();
      \u0275\u0275conditionalCreate(7, ThemeSettingsInputSectionComponent_Conditional_7_Template, 2, 1, "div", 7);
      \u0275\u0275elementEnd();
      \u0275\u0275elementStart(8, "span");
      \u0275\u0275text(9);
      \u0275\u0275elementEnd()()();
      \u0275\u0275conditionalCreate(10, ThemeSettingsInputSectionComponent_Conditional_10_Template, 1, 3, "app-dynamic-form", 8);
      \u0275\u0275conditionalCreate(11, ThemeSettingsInputSectionComponent_Conditional_11_Template, 1, 4, "app-grid", 9);
      \u0275\u0275elementEnd();
      \u0275\u0275template(12, ThemeSettingsInputSectionComponent_ng_template_12_Template, 1, 2, "ng-template", null, 0, \u0275\u0275templateRefExtractor);
    }
    if (rf & 2) {
      \u0275\u0275advance(2);
      \u0275\u0275property("icon", ctx.faFill)("ngClass", \u0275\u0275pureFunction1(6, _c116, ctx.isFormEditable()));
      \u0275\u0275advance(5);
      \u0275\u0275conditional(!ctx.isFormEditable() && !ctx.createMode() ? 7 : -1);
      \u0275\u0275advance(2);
      \u0275\u0275textInterpolate(ctx.description);
      \u0275\u0275advance();
      \u0275\u0275conditional(ctx.isFormEditable() || ctx.createMode() && ctx.formFields.length ? 10 : -1);
      \u0275\u0275advance();
      \u0275\u0275conditional(!ctx.isFormEditable() && !ctx.createMode() ? 11 : -1);
    }
  }, dependencies: [
    DynamicFormComponent,
    FontAwesomeModule,
    FaIconComponent,
    CommonModule,
    NgClass,
    GridComponent,
    ThemeValueDisplayComponent
  ], encapsulation: 2 });
};
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(ThemeSettingsInputSectionComponent, [{
    type: Component,
    args: [{ selector: "app-theme-settings-input-section", imports: [
      DynamicFormComponent,
      FontAwesomeModule,
      CommonModule,
      GridComponent,
      ThemeValueDisplayComponent
    ], template: `<div class="card pt-2">
  <div class="mb-4 p-2 flex justify-start items-center">
    <fa-icon
      [icon]="faFill"
      class="!text-[2.5rem]"
      [ngClass]="{ 'icon-primary': isFormEditable() }"
    ></fa-icon>

    <div class="pl-6 flex-1">
      <div class="flex justify-between items-center">
        <h2 class="text-xl font-semibold m-0">Input</h2>
        @if (!isFormEditable() && !createMode()) {
          <div class="icon-light">
            <span
              class="pi pi-pen-to-square action hover !text-2xl"
              [attr.aria-label]="'Edit theme details'"
              (click)="onEdit()"
              (keydown.enter)="onEdit()"
            ></span>
          </div>
        }
      </div>
      <span>{{ description }}</span>
    </div>
  </div>

  @if (isFormEditable() || (createMode() && formFields.length)) {
    <app-dynamic-form
      [fields]="formFields"
      [actions]="actions"
      [hideActions]="createMode()"
      (formSubmit)="onSubmit($event)"
      (formValidityChange)="onFormValidityChange($event)"
      (fieldValueChange)="onFieldValueChange($event)"
    >
    </app-dynamic-form>
  }

  @if (!isFormEditable() && !createMode()) {
    <app-grid
      [data]="themeDetails()"
      [columns]="columns"
      [showGridLines]="false"
      [hideHeader]="true"
      tableStyleClass="info-display !w-auto"
    ></app-grid>
  }
</div>

<ng-template #valueTemplate let-rowData>
  <app-theme-value-display [rowData]="rowData" [group]="group">
  </app-theme-value-display>
</ng-template>
` }]
  }], () => [], { valueTemplate: [{
    type: ViewChild,
    args: ["valueTemplate", { static: true }]
  }] });
})();
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && \u0275setClassDebugInfo(ThemeSettingsInputSectionComponent, { className: "ThemeSettingsInputSectionComponent", filePath: "src/app/features/administration/components/themes/theme-settings-input-section/theme-settings-input-section.component.ts", lineNumber: 44 });
})();

// src/app/features/administration/components/themes/theme-settings-tab-section/theme-settings-tab-section.component.ts
var _c059 = ["valueTemplate"];
var _c117 = (a0) => ({ "icon-primary": a0 });
function ThemeSettingsTabSectionComponent_Conditional_7_Template(rf, ctx) {
  if (rf & 1) {
    const _r1 = \u0275\u0275getCurrentView();
    \u0275\u0275elementStart(0, "div", 7)(1, "span", 10);
    \u0275\u0275listener("click", function ThemeSettingsTabSectionComponent_Conditional_7_Template_span_click_1_listener() {
      \u0275\u0275restoreView(_r1);
      const ctx_r1 = \u0275\u0275nextContext();
      return \u0275\u0275resetView(ctx_r1.onEdit());
    })("keydown.enter", function ThemeSettingsTabSectionComponent_Conditional_7_Template_span_keydown_enter_1_listener() {
      \u0275\u0275restoreView(_r1);
      const ctx_r1 = \u0275\u0275nextContext();
      return \u0275\u0275resetView(ctx_r1.onEdit());
    });
    \u0275\u0275elementEnd()();
  }
  if (rf & 2) {
    \u0275\u0275advance();
    \u0275\u0275attribute("aria-label", "Edit theme tab details");
  }
}
function ThemeSettingsTabSectionComponent_Conditional_10_Template(rf, ctx) {
  if (rf & 1) {
    const _r3 = \u0275\u0275getCurrentView();
    \u0275\u0275elementStart(0, "app-dynamic-form", 11);
    \u0275\u0275listener("formSubmit", function ThemeSettingsTabSectionComponent_Conditional_10_Template_app_dynamic_form_formSubmit_0_listener($event) {
      \u0275\u0275restoreView(_r3);
      const ctx_r1 = \u0275\u0275nextContext();
      return \u0275\u0275resetView(ctx_r1.onSubmit($event));
    })("formValidityChange", function ThemeSettingsTabSectionComponent_Conditional_10_Template_app_dynamic_form_formValidityChange_0_listener($event) {
      \u0275\u0275restoreView(_r3);
      const ctx_r1 = \u0275\u0275nextContext();
      return \u0275\u0275resetView(ctx_r1.onFormValidityChange($event));
    })("fieldValueChange", function ThemeSettingsTabSectionComponent_Conditional_10_Template_app_dynamic_form_fieldValueChange_0_listener($event) {
      \u0275\u0275restoreView(_r3);
      const ctx_r1 = \u0275\u0275nextContext();
      return \u0275\u0275resetView(ctx_r1.onFieldValueChange($event));
    });
    \u0275\u0275elementEnd();
  }
  if (rf & 2) {
    const ctx_r1 = \u0275\u0275nextContext();
    \u0275\u0275property("fields", ctx_r1.formFields)("actions", ctx_r1.actions)("hideActions", ctx_r1.createMode());
  }
}
function ThemeSettingsTabSectionComponent_Conditional_11_Template(rf, ctx) {
  if (rf & 1) {
    \u0275\u0275element(0, "app-grid", 9);
  }
  if (rf & 2) {
    const ctx_r1 = \u0275\u0275nextContext();
    \u0275\u0275property("data", ctx_r1.themeDetails())("columns", ctx_r1.columns)("showGridLines", false)("hideHeader", true);
  }
}
function ThemeSettingsTabSectionComponent_ng_template_12_Template(rf, ctx) {
  if (rf & 1) {
    \u0275\u0275element(0, "app-theme-value-display", 12);
  }
  if (rf & 2) {
    const rowData_r4 = ctx.$implicit;
    const ctx_r1 = \u0275\u0275nextContext();
    \u0275\u0275property("rowData", rowData_r4)("group", ctx_r1.group);
  }
}
var TAB_THEME_PATHS = {
  FONT_FAMILY: ["tab", "font", "family"],
  FONT_SIZE: ["tab", "font", "size"],
  FONT_WEIGHT: ["tab", "font", "weight"],
  FONT_TRANSFORM: ["tab", "font", "transform"],
  FONT_COLOR: ["tab", "font", "color"],
  BACKGROUND_COLOR: ["tab", "background", "color"],
  BORDER_COLOR: ["tab", "border", "color"],
  ACTIVE_FONT_COLOR: ["tab", "active", "font", "color"],
  ACTIVE_BACKGROUND_COLOR: ["tab", "active", "background", "color"],
  ACTIVE_INDICATOR_STYLE: ["tab", "active", "style"],
  ACTIVE_INDICATOR_COLOR: ["tab", "active", "indicator", "color"]
};
var ThemeSettingsTabSectionComponent = class _ThemeSettingsTabSectionComponent extends ThemeSettingsSectionBase {
  valueTemplate;
  themeDetails = computed(() => {
    const themeDetails = this.entity();
    if (!isDefined(themeDetails))
      return [];
    const themeSettings = this.themeEngine.themeSettingsMergedWithDefault(themeDetails?.settings ?? {});
    const detailConfigs = this.createThemeDetailsFromConfig(this.getFieldConfigurations());
    return detailConfigs.map((config) => ({
      key: config.key,
      value: this.formatThemeValue(themeSettings, config)
    }));
  }, ...ngDevMode ? [{ debugName: "themeDetails" }] : []);
  constructor() {
    super("tab");
  }
  ngOnInit() {
    this.initializeColumns();
  }
  initializeColumns() {
    this.columns = [
      { field: "key", header: "", transform: "uppercase" },
      {
        field: "value",
        header: "",
        cellTemplate: this.valueTemplate
      }
    ];
  }
  getFieldConfigurations() {
    return [
      {
        id: "font.family",
        label: "Font Family",
        path: TAB_THEME_PATHS.FONT_FAMILY,
        type: "font-family",
        presets: ["main", "content"]
      },
      {
        id: "font.size",
        label: "Font Size",
        path: TAB_THEME_PATHS.FONT_SIZE,
        type: "size"
      },
      {
        id: "font.weight",
        label: "Font Weight",
        path: TAB_THEME_PATHS.FONT_WEIGHT,
        type: "font-weight",
        presets: ["main", "content"]
      },
      {
        id: "font.transform",
        label: "Font Case",
        path: TAB_THEME_PATHS.FONT_TRANSFORM,
        type: "font-transform"
      },
      {
        id: "font.color",
        label: "Font Color",
        path: TAB_THEME_PATHS.FONT_COLOR,
        type: "color",
        group: "tab",
        presets: ["main", "content", "header"]
      },
      {
        id: "background.color",
        label: "Background Color",
        path: TAB_THEME_PATHS.BACKGROUND_COLOR,
        type: "color",
        group: "tab",
        presets: ["content", "header"]
      },
      {
        id: "border.color",
        label: "Border Color",
        path: TAB_THEME_PATHS.BORDER_COLOR,
        type: "color",
        group: "tab",
        presets: ["tab", "header", "main", "content"]
      },
      {
        id: "active.font.color",
        label: "Active Font",
        path: TAB_THEME_PATHS.ACTIVE_FONT_COLOR,
        type: "color",
        group: "tab",
        presets: ["main", "content", "header"]
      },
      {
        id: "active.background.color",
        label: "Active Background",
        path: TAB_THEME_PATHS.ACTIVE_BACKGROUND_COLOR,
        type: "color",
        group: "tab",
        presets: ["tab", "content"]
      },
      {
        id: "active.style",
        label: "Active Style",
        path: TAB_THEME_PATHS.ACTIVE_INDICATOR_STYLE,
        type: "dropdown",
        options: [
          { value: "none", label: "None" },
          { value: "bottom", label: "Bottom" }
        ]
      },
      {
        id: "active.indicator.color",
        label: "Active Indicator Color",
        path: TAB_THEME_PATHS.ACTIVE_INDICATOR_COLOR,
        type: "color",
        group: "tab",
        presets: ["tab", "header"]
      }
    ];
  }
  getFields(entity) {
    return this.createFormFieldsFromConfig(entity, this.getFieldConfigurations());
  }
  getUpdateMethod() {
    return this.operationRegistry.getOperation("theme", "update") ?? ((id) => this.entitiesService.updateTheme(id, {
      settings: {
        tab: this.formChanges
      }
    }));
  }
  static \u0275fac = function ThemeSettingsTabSectionComponent_Factory(__ngFactoryType__) {
    return new (__ngFactoryType__ || _ThemeSettingsTabSectionComponent)();
  };
  static \u0275cmp = /* @__PURE__ */ \u0275\u0275defineComponent({ type: _ThemeSettingsTabSectionComponent, selectors: [["app-theme-settings-tab-section"]], viewQuery: function ThemeSettingsTabSectionComponent_Query(rf, ctx) {
    if (rf & 1) {
      \u0275\u0275viewQuery(_c059, 7);
    }
    if (rf & 2) {
      let _t;
      \u0275\u0275queryRefresh(_t = \u0275\u0275loadQuery()) && (ctx.valueTemplate = _t.first);
    }
  }, features: [\u0275\u0275InheritDefinitionFeature], decls: 14, vars: 8, consts: [["valueTemplate", ""], [1, "card", "pt-2"], [1, "mb-4", "p-2", "flex", "justify-start", "items-center"], [1, "!text-[2.5rem]", 3, "icon", "ngClass"], [1, "pl-6", "flex-1"], [1, "flex", "justify-between", "items-center"], [1, "text-xl", "font-semibold", "m-0"], [1, "icon-light"], [3, "fields", "actions", "hideActions"], ["tableStyleClass", "info-display !w-auto", 3, "data", "columns", "showGridLines", "hideHeader"], [1, "pi", "pi-pen-to-square", "action", "hover", "!text-2xl", 3, "click", "keydown.enter"], [3, "formSubmit", "formValidityChange", "fieldValueChange", "fields", "actions", "hideActions"], [3, "rowData", "group"]], template: function ThemeSettingsTabSectionComponent_Template(rf, ctx) {
    if (rf & 1) {
      \u0275\u0275elementStart(0, "div", 1)(1, "div", 2);
      \u0275\u0275element(2, "fa-icon", 3);
      \u0275\u0275elementStart(3, "div", 4)(4, "div", 5)(5, "h2", 6);
      \u0275\u0275text(6, "Tab");
      \u0275\u0275elementEnd();
      \u0275\u0275conditionalCreate(7, ThemeSettingsTabSectionComponent_Conditional_7_Template, 2, 1, "div", 7);
      \u0275\u0275elementEnd();
      \u0275\u0275elementStart(8, "span");
      \u0275\u0275text(9);
      \u0275\u0275elementEnd()()();
      \u0275\u0275conditionalCreate(10, ThemeSettingsTabSectionComponent_Conditional_10_Template, 1, 3, "app-dynamic-form", 8);
      \u0275\u0275conditionalCreate(11, ThemeSettingsTabSectionComponent_Conditional_11_Template, 1, 4, "app-grid", 9);
      \u0275\u0275elementEnd();
      \u0275\u0275template(12, ThemeSettingsTabSectionComponent_ng_template_12_Template, 1, 2, "ng-template", null, 0, \u0275\u0275templateRefExtractor);
    }
    if (rf & 2) {
      \u0275\u0275advance(2);
      \u0275\u0275property("icon", ctx.faFill)("ngClass", \u0275\u0275pureFunction1(6, _c117, ctx.isFormEditable()));
      \u0275\u0275advance(5);
      \u0275\u0275conditional(!ctx.isFormEditable() && !ctx.createMode() ? 7 : -1);
      \u0275\u0275advance(2);
      \u0275\u0275textInterpolate(ctx.description);
      \u0275\u0275advance();
      \u0275\u0275conditional(ctx.isFormEditable() || ctx.createMode() && ctx.formFields.length ? 10 : -1);
      \u0275\u0275advance();
      \u0275\u0275conditional(!ctx.isFormEditable() && !ctx.createMode() ? 11 : -1);
    }
  }, dependencies: [
    DynamicFormComponent,
    FontAwesomeModule,
    FaIconComponent,
    CommonModule,
    NgClass,
    GridComponent,
    ThemeValueDisplayComponent
  ], encapsulation: 2 });
};
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(ThemeSettingsTabSectionComponent, [{
    type: Component,
    args: [{ selector: "app-theme-settings-tab-section", imports: [
      DynamicFormComponent,
      FontAwesomeModule,
      CommonModule,
      GridComponent,
      ThemeValueDisplayComponent
    ], template: `<div class="card pt-2">
  <div class="mb-4 p-2 flex justify-start items-center">
    <fa-icon
      [icon]="faFill"
      class="!text-[2.5rem]"
      [ngClass]="{ 'icon-primary': isFormEditable() }"
    ></fa-icon>

    <div class="pl-6 flex-1">
      <div class="flex justify-between items-center">
        <h2 class="text-xl font-semibold m-0">Tab</h2>
        @if (!isFormEditable() && !createMode()) {
          <div class="icon-light">
            <span
              class="pi pi-pen-to-square action hover !text-2xl"
              [attr.aria-label]="'Edit theme tab details'"
              (click)="onEdit()"
              (keydown.enter)="onEdit()"
            ></span>
          </div>
        }
      </div>
      <span>{{ description }}</span>
    </div>
  </div>

  @if (isFormEditable() || (createMode() && formFields.length)) {
    <app-dynamic-form
      [fields]="formFields"
      [actions]="actions"
      [hideActions]="createMode()"
      (formSubmit)="onSubmit($event)"
      (formValidityChange)="onFormValidityChange($event)"
      (fieldValueChange)="onFieldValueChange($event)"
    >
    </app-dynamic-form>
  }

  @if (!isFormEditable() && !createMode()) {
    <app-grid
      [data]="themeDetails()"
      [columns]="columns"
      [showGridLines]="false"
      [hideHeader]="true"
      tableStyleClass="info-display !w-auto"
    ></app-grid>
  }
</div>

<ng-template #valueTemplate let-rowData>
  <app-theme-value-display [rowData]="rowData" [group]="group">
  </app-theme-value-display>
</ng-template>
` }]
  }], () => [], { valueTemplate: [{
    type: ViewChild,
    args: ["valueTemplate", { static: true }]
  }] });
})();
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && \u0275setClassDebugInfo(ThemeSettingsTabSectionComponent, { className: "ThemeSettingsTabSectionComponent", filePath: "src/app/features/administration/components/themes/theme-settings-tab-section/theme-settings-tab-section.component.ts", lineNumber: 49 });
})();

// src/app/features/administration/components/themes/theme-settings-accordion-section/theme-settings-accordion-section.component.ts
var _c060 = ["valueTemplate"];
var _c118 = (a0) => ({ "icon-primary": a0 });
function ThemeSettingsAccordionSectionComponent_Conditional_7_Template(rf, ctx) {
  if (rf & 1) {
    const _r1 = \u0275\u0275getCurrentView();
    \u0275\u0275elementStart(0, "div", 7)(1, "span", 10);
    \u0275\u0275listener("click", function ThemeSettingsAccordionSectionComponent_Conditional_7_Template_span_click_1_listener() {
      \u0275\u0275restoreView(_r1);
      const ctx_r1 = \u0275\u0275nextContext();
      return \u0275\u0275resetView(ctx_r1.onEdit());
    })("keydown.enter", function ThemeSettingsAccordionSectionComponent_Conditional_7_Template_span_keydown_enter_1_listener() {
      \u0275\u0275restoreView(_r1);
      const ctx_r1 = \u0275\u0275nextContext();
      return \u0275\u0275resetView(ctx_r1.onEdit());
    });
    \u0275\u0275elementEnd()();
  }
  if (rf & 2) {
    \u0275\u0275advance();
    \u0275\u0275attribute("aria-label", "Edit theme accordion details");
  }
}
function ThemeSettingsAccordionSectionComponent_Conditional_10_Template(rf, ctx) {
  if (rf & 1) {
    const _r3 = \u0275\u0275getCurrentView();
    \u0275\u0275elementStart(0, "app-dynamic-form", 11);
    \u0275\u0275listener("formSubmit", function ThemeSettingsAccordionSectionComponent_Conditional_10_Template_app_dynamic_form_formSubmit_0_listener($event) {
      \u0275\u0275restoreView(_r3);
      const ctx_r1 = \u0275\u0275nextContext();
      return \u0275\u0275resetView(ctx_r1.onSubmit($event));
    })("formValidityChange", function ThemeSettingsAccordionSectionComponent_Conditional_10_Template_app_dynamic_form_formValidityChange_0_listener($event) {
      \u0275\u0275restoreView(_r3);
      const ctx_r1 = \u0275\u0275nextContext();
      return \u0275\u0275resetView(ctx_r1.onFormValidityChange($event));
    })("fieldValueChange", function ThemeSettingsAccordionSectionComponent_Conditional_10_Template_app_dynamic_form_fieldValueChange_0_listener($event) {
      \u0275\u0275restoreView(_r3);
      const ctx_r1 = \u0275\u0275nextContext();
      return \u0275\u0275resetView(ctx_r1.onFieldValueChange($event));
    });
    \u0275\u0275elementEnd();
  }
  if (rf & 2) {
    const ctx_r1 = \u0275\u0275nextContext();
    \u0275\u0275property("fields", ctx_r1.formFields)("actions", ctx_r1.actions)("hideActions", ctx_r1.createMode());
  }
}
function ThemeSettingsAccordionSectionComponent_Conditional_11_Template(rf, ctx) {
  if (rf & 1) {
    \u0275\u0275element(0, "app-grid", 9);
  }
  if (rf & 2) {
    const ctx_r1 = \u0275\u0275nextContext();
    \u0275\u0275property("data", ctx_r1.themeDetails())("columns", ctx_r1.columns)("showGridLines", false)("hideHeader", true);
  }
}
function ThemeSettingsAccordionSectionComponent_ng_template_12_Template(rf, ctx) {
  if (rf & 1) {
    \u0275\u0275element(0, "app-theme-value-display", 12);
  }
  if (rf & 2) {
    const rowData_r4 = ctx.$implicit;
    const ctx_r1 = \u0275\u0275nextContext();
    \u0275\u0275property("rowData", rowData_r4)("group", ctx_r1.group);
  }
}
var ACCORDION_THEME_PATHS = {
  FONT_FAMILY: ["accordion", "font", "family"],
  FONT_SIZE: ["accordion", "font", "size"],
  FONT_WEIGHT: ["accordion", "font", "weight"],
  FONT_COLOR: ["accordion", "font", "color"],
  FONT_TRANSFORM: ["accordion", "font", "transform"],
  BACKGROUND_COLOR: ["accordion", "background", "color"],
  BORDER_COLOR: ["accordion", "border", "color"],
  BORDER_WIDTH: ["accordion", "border", "width"],
  ACTIVE_FONT_COLOR: ["accordion", "active", "font", "color"],
  ACTIVE_BACKGROUND_COLOR: ["accordion", "active", "background", "color"]
};
var ThemeSettingsAccordionSectionComponent = class _ThemeSettingsAccordionSectionComponent extends ThemeSettingsSectionBase {
  valueTemplate;
  themeColorService = inject(ThemeColorService);
  themeDetails = computed(() => {
    const themeDetails = this.entity();
    if (!isDefined(themeDetails))
      return [];
    const themeSettings = this.themeEngine.themeSettingsMergedWithDefault(themeDetails?.settings ?? {});
    const detailConfigs = this.createThemeDetailsFromConfig(this.getFieldConfigurations());
    return detailConfigs.map((config) => ({
      key: config.key,
      value: this.formatThemeValue(themeSettings, config)
    }));
  }, ...ngDevMode ? [{ debugName: "themeDetails" }] : []);
  constructor() {
    super("accordion");
  }
  ngOnInit() {
    this.initializeColumns();
  }
  initializeColumns() {
    this.columns = [
      { field: "key", header: "", transform: "uppercase" },
      {
        field: "value",
        header: "",
        cellTemplate: this.valueTemplate
      }
    ];
  }
  getFieldConfigurations() {
    return [
      {
        id: "font.family",
        label: "Font Family",
        path: ACCORDION_THEME_PATHS.FONT_FAMILY,
        type: "font-family",
        presets: ["main", "content", "header"]
      },
      {
        id: "font.size",
        label: "Font Size",
        path: ACCORDION_THEME_PATHS.FONT_SIZE,
        type: "size"
      },
      {
        id: "font.weight",
        label: "Font Weight",
        path: ACCORDION_THEME_PATHS.FONT_WEIGHT,
        type: "font-weight"
      },
      {
        id: "font.color",
        label: "Font Color",
        path: ACCORDION_THEME_PATHS.FONT_COLOR,
        type: "color",
        group: "accordion",
        presets: ["main", "content", "header"]
      },
      {
        id: "font.transform",
        label: "Font Case",
        path: ACCORDION_THEME_PATHS.FONT_TRANSFORM,
        type: "font-transform"
      },
      {
        id: "background.color",
        label: "Background Color",
        path: ACCORDION_THEME_PATHS.BACKGROUND_COLOR,
        type: "color",
        group: "accordion",
        presets: ["main", "content"]
      },
      {
        id: "border.color",
        label: "Border Color",
        path: ACCORDION_THEME_PATHS.BORDER_COLOR,
        type: "color",
        group: "accordion"
      },
      {
        id: "border.width",
        label: "Border Width",
        path: ACCORDION_THEME_PATHS.BORDER_WIDTH,
        type: "size",
        props: { unit: "px" }
      },
      {
        id: "active.font.color",
        label: "Active Font Color",
        path: ACCORDION_THEME_PATHS.ACTIVE_FONT_COLOR,
        type: "color",
        group: "accordion",
        presets: ["main", "content", "header"],
        customColors: { "Primary Contrast": "var(--color-primary-contrast)" }
      },
      {
        id: "active.background.color",
        label: "Active Background",
        path: ACCORDION_THEME_PATHS.ACTIVE_BACKGROUND_COLOR,
        type: "color",
        group: "accordion",
        presets: ["main", "content"],
        customColors: {
          Primary: this.themeColorService.computeColor("var(--color-primary-color)")
        }
      }
    ];
  }
  getFields(entity) {
    return this.createFormFieldsFromConfig(entity, this.getFieldConfigurations());
  }
  getUpdateMethod() {
    return this.operationRegistry.getOperation("theme", "update") ?? ((id) => this.entitiesService.updateTheme(id, {
      settings: {
        accordion: this.formChanges
      }
    }));
  }
  static \u0275fac = function ThemeSettingsAccordionSectionComponent_Factory(__ngFactoryType__) {
    return new (__ngFactoryType__ || _ThemeSettingsAccordionSectionComponent)();
  };
  static \u0275cmp = /* @__PURE__ */ \u0275\u0275defineComponent({ type: _ThemeSettingsAccordionSectionComponent, selectors: [["app-theme-settings-accordion-section"]], viewQuery: function ThemeSettingsAccordionSectionComponent_Query(rf, ctx) {
    if (rf & 1) {
      \u0275\u0275viewQuery(_c060, 7);
    }
    if (rf & 2) {
      let _t;
      \u0275\u0275queryRefresh(_t = \u0275\u0275loadQuery()) && (ctx.valueTemplate = _t.first);
    }
  }, features: [\u0275\u0275InheritDefinitionFeature], decls: 14, vars: 8, consts: [["valueTemplate", ""], [1, "card", "pt-2"], [1, "mb-4", "p-2", "flex", "justify-start", "items-center"], [1, "!text-[2.5rem]", 3, "icon", "ngClass"], [1, "pl-6", "flex-1"], [1, "flex", "justify-between", "items-center"], [1, "text-xl", "font-semibold", "m-0"], [1, "icon-light"], [3, "fields", "actions", "hideActions"], ["tableStyleClass", "info-display !w-auto", 3, "data", "columns", "showGridLines", "hideHeader"], [1, "pi", "pi-pen-to-square", "action", "hover", "!text-2xl", 3, "click", "keydown.enter"], [3, "formSubmit", "formValidityChange", "fieldValueChange", "fields", "actions", "hideActions"], [3, "rowData", "group"]], template: function ThemeSettingsAccordionSectionComponent_Template(rf, ctx) {
    if (rf & 1) {
      \u0275\u0275elementStart(0, "div", 1)(1, "div", 2);
      \u0275\u0275element(2, "fa-icon", 3);
      \u0275\u0275elementStart(3, "div", 4)(4, "div", 5)(5, "h2", 6);
      \u0275\u0275text(6, "Accordion");
      \u0275\u0275elementEnd();
      \u0275\u0275conditionalCreate(7, ThemeSettingsAccordionSectionComponent_Conditional_7_Template, 2, 1, "div", 7);
      \u0275\u0275elementEnd();
      \u0275\u0275elementStart(8, "span");
      \u0275\u0275text(9);
      \u0275\u0275elementEnd()()();
      \u0275\u0275conditionalCreate(10, ThemeSettingsAccordionSectionComponent_Conditional_10_Template, 1, 3, "app-dynamic-form", 8);
      \u0275\u0275conditionalCreate(11, ThemeSettingsAccordionSectionComponent_Conditional_11_Template, 1, 4, "app-grid", 9);
      \u0275\u0275elementEnd();
      \u0275\u0275template(12, ThemeSettingsAccordionSectionComponent_ng_template_12_Template, 1, 2, "ng-template", null, 0, \u0275\u0275templateRefExtractor);
    }
    if (rf & 2) {
      \u0275\u0275advance(2);
      \u0275\u0275property("icon", ctx.faFill)("ngClass", \u0275\u0275pureFunction1(6, _c118, ctx.isFormEditable()));
      \u0275\u0275advance(5);
      \u0275\u0275conditional(!ctx.isFormEditable() && !ctx.createMode() ? 7 : -1);
      \u0275\u0275advance(2);
      \u0275\u0275textInterpolate(ctx.description);
      \u0275\u0275advance();
      \u0275\u0275conditional(ctx.isFormEditable() || ctx.createMode() && ctx.formFields.length ? 10 : -1);
      \u0275\u0275advance();
      \u0275\u0275conditional(!ctx.isFormEditable() && !ctx.createMode() ? 11 : -1);
    }
  }, dependencies: [
    DynamicFormComponent,
    FontAwesomeModule,
    FaIconComponent,
    CommonModule,
    NgClass,
    GridComponent,
    ThemeValueDisplayComponent
  ], encapsulation: 2 });
};
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(ThemeSettingsAccordionSectionComponent, [{
    type: Component,
    args: [{ selector: "app-theme-settings-accordion-section", imports: [
      DynamicFormComponent,
      FontAwesomeModule,
      CommonModule,
      GridComponent,
      ThemeValueDisplayComponent
    ], template: `<div class="card pt-2">
  <div class="mb-4 p-2 flex justify-start items-center">
    <fa-icon
      [icon]="faFill"
      class="!text-[2.5rem]"
      [ngClass]="{ 'icon-primary': isFormEditable() }"
    ></fa-icon>

    <div class="pl-6 flex-1">
      <div class="flex justify-between items-center">
        <h2 class="text-xl font-semibold m-0">Accordion</h2>
        @if (!isFormEditable() && !createMode()) {
          <div class="icon-light">
            <span
              class="pi pi-pen-to-square action hover !text-2xl"
              [attr.aria-label]="'Edit theme accordion details'"
              (click)="onEdit()"
              (keydown.enter)="onEdit()"
            ></span>
          </div>
        }
      </div>
      <span>{{ description }}</span>
    </div>
  </div>

  @if (isFormEditable() || (createMode() && formFields.length)) {
    <app-dynamic-form
      [fields]="formFields"
      [actions]="actions"
      [hideActions]="createMode()"
      (formSubmit)="onSubmit($event)"
      (formValidityChange)="onFormValidityChange($event)"
      (fieldValueChange)="onFieldValueChange($event)"
    >
    </app-dynamic-form>
  }

  @if (!isFormEditable() && !createMode()) {
    <app-grid
      [data]="themeDetails()"
      [columns]="columns"
      [showGridLines]="false"
      [hideHeader]="true"
      tableStyleClass="info-display !w-auto"
    ></app-grid>
  }
</div>

<ng-template #valueTemplate let-rowData>
  <app-theme-value-display [rowData]="rowData" [group]="group">
  </app-theme-value-display>
</ng-template>
` }]
  }], () => [], { valueTemplate: [{
    type: ViewChild,
    args: ["valueTemplate", { static: true }]
  }] });
})();
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && \u0275setClassDebugInfo(ThemeSettingsAccordionSectionComponent, { className: "ThemeSettingsAccordionSectionComponent", filePath: "src/app/features/administration/components/themes/theme-settings-accordion-section/theme-settings-accordion-section.component.ts", lineNumber: 50 });
})();

// src/app/features/administration/components/themes/theme-settings-table-section/theme-settings-table-section.component.ts
var _c061 = ["valueTemplate"];
var _c119 = (a0) => ({ "icon-primary": a0 });
function ThemeSettingsTableSectionComponent_Conditional_7_Template(rf, ctx) {
  if (rf & 1) {
    const _r1 = \u0275\u0275getCurrentView();
    \u0275\u0275elementStart(0, "div", 7)(1, "span", 10);
    \u0275\u0275listener("click", function ThemeSettingsTableSectionComponent_Conditional_7_Template_span_click_1_listener() {
      \u0275\u0275restoreView(_r1);
      const ctx_r1 = \u0275\u0275nextContext();
      return \u0275\u0275resetView(ctx_r1.onEdit());
    })("keydown.enter", function ThemeSettingsTableSectionComponent_Conditional_7_Template_span_keydown_enter_1_listener() {
      \u0275\u0275restoreView(_r1);
      const ctx_r1 = \u0275\u0275nextContext();
      return \u0275\u0275resetView(ctx_r1.onEdit());
    });
    \u0275\u0275elementEnd()();
  }
  if (rf & 2) {
    \u0275\u0275advance();
    \u0275\u0275attribute("aria-label", "Edit theme table details");
  }
}
function ThemeSettingsTableSectionComponent_Conditional_10_Template(rf, ctx) {
  if (rf & 1) {
    const _r3 = \u0275\u0275getCurrentView();
    \u0275\u0275elementStart(0, "app-dynamic-form", 11);
    \u0275\u0275listener("formSubmit", function ThemeSettingsTableSectionComponent_Conditional_10_Template_app_dynamic_form_formSubmit_0_listener($event) {
      \u0275\u0275restoreView(_r3);
      const ctx_r1 = \u0275\u0275nextContext();
      return \u0275\u0275resetView(ctx_r1.onSubmit($event));
    })("formValidityChange", function ThemeSettingsTableSectionComponent_Conditional_10_Template_app_dynamic_form_formValidityChange_0_listener($event) {
      \u0275\u0275restoreView(_r3);
      const ctx_r1 = \u0275\u0275nextContext();
      return \u0275\u0275resetView(ctx_r1.onFormValidityChange($event));
    })("fieldValueChange", function ThemeSettingsTableSectionComponent_Conditional_10_Template_app_dynamic_form_fieldValueChange_0_listener($event) {
      \u0275\u0275restoreView(_r3);
      const ctx_r1 = \u0275\u0275nextContext();
      return \u0275\u0275resetView(ctx_r1.onFieldValueChange($event));
    });
    \u0275\u0275elementEnd();
  }
  if (rf & 2) {
    const ctx_r1 = \u0275\u0275nextContext();
    \u0275\u0275property("fields", ctx_r1.formFields)("actions", ctx_r1.actions)("hideActions", ctx_r1.createMode());
  }
}
function ThemeSettingsTableSectionComponent_Conditional_11_Template(rf, ctx) {
  if (rf & 1) {
    \u0275\u0275element(0, "app-grid", 9);
  }
  if (rf & 2) {
    const ctx_r1 = \u0275\u0275nextContext();
    \u0275\u0275property("data", ctx_r1.themeDetails())("columns", ctx_r1.columns)("showGridLines", false)("hideHeader", true);
  }
}
function ThemeSettingsTableSectionComponent_ng_template_12_Template(rf, ctx) {
  if (rf & 1) {
    \u0275\u0275element(0, "app-theme-value-display", 12);
  }
  if (rf & 2) {
    const rowData_r4 = ctx.$implicit;
    const ctx_r1 = \u0275\u0275nextContext();
    \u0275\u0275property("rowData", rowData_r4)("group", ctx_r1.group);
  }
}
var TABLE_THEME_PATHS = {
  BACKGROUND_COLOR: ["table", "background", "color"],
  BORDER_COLOR: ["table", "border", "color"],
  HEADER_FONT_SIZE: ["table", "header", "font", "size"],
  HEADER_FONT_WEIGHT: ["table", "header", "font", "weight"],
  HEADER_FONT_TRANSFORM: ["table", "header", "font", "transform"],
  HEADER_FONT_COLOR: ["table", "header", "font", "color"],
  HEADER_BACKGROUND_COLOR: ["table", "header", "background", "color"],
  ACTIVE_FONT_COLOR: ["table", "active", "font", "color"],
  ACTIVE_BACKGROUND_COLOR: ["table", "active", "background", "color"]
};
var ThemeSettingsTableSectionComponent = class _ThemeSettingsTableSectionComponent extends ThemeSettingsSectionBase {
  valueTemplate;
  themeColorService = inject(ThemeColorService);
  themeDetails = computed(() => {
    const themeDetails = this.entity();
    if (!isDefined(themeDetails))
      return [];
    const themeSettings = this.themeEngine.themeSettingsMergedWithDefault(themeDetails?.settings ?? {});
    const detailConfigs = this.createThemeDetailsFromConfig(this.getFieldConfigurations());
    return detailConfigs.map((config) => ({
      key: config.key,
      value: this.formatThemeValue(themeSettings, config)
    }));
  }, ...ngDevMode ? [{ debugName: "themeDetails" }] : []);
  constructor() {
    super("table");
  }
  ngOnInit() {
    this.initializeColumns();
  }
  initializeColumns() {
    this.columns = [
      { field: "key", header: "", transform: "uppercase" },
      {
        field: "value",
        header: "",
        cellTemplate: this.valueTemplate
      }
    ];
  }
  getFieldConfigurations() {
    return [
      {
        id: "background.color",
        label: "Background Color",
        path: TABLE_THEME_PATHS.BACKGROUND_COLOR,
        type: "color",
        group: "table",
        presets: ["main", "content"]
      },
      {
        id: "border.color",
        label: "Border Color",
        path: TABLE_THEME_PATHS.BORDER_COLOR,
        type: "color",
        group: "table"
      },
      {
        id: "header.font.size",
        label: "Header Font Size",
        path: TABLE_THEME_PATHS.HEADER_FONT_SIZE,
        type: "size"
      },
      {
        id: "header.font.weight",
        label: "Header Font Weight",
        path: TABLE_THEME_PATHS.HEADER_FONT_WEIGHT,
        type: "font-weight"
      },
      {
        id: "header.font.transform",
        label: "Header Font Case",
        path: TABLE_THEME_PATHS.HEADER_FONT_TRANSFORM,
        type: "font-transform"
      },
      {
        id: "header.font.color",
        label: "Header Font Color",
        path: TABLE_THEME_PATHS.HEADER_FONT_COLOR,
        type: "color",
        group: "table",
        presets: ["main", "content", "header"]
      },
      {
        id: "header.background.color",
        label: "Header Background",
        path: TABLE_THEME_PATHS.HEADER_BACKGROUND_COLOR,
        type: "color",
        group: "table",
        presets: ["main", "content"]
      },
      {
        id: "active.font.color",
        label: "Active Font Color",
        path: TABLE_THEME_PATHS.ACTIVE_FONT_COLOR,
        type: "color",
        group: "table",
        presets: ["main", "content", "header"],
        customColors: { "Primary Contrast": "var(--color-primary-contrast)" }
      },
      {
        id: "active.background.color",
        label: "Active Background",
        path: TABLE_THEME_PATHS.ACTIVE_BACKGROUND_COLOR,
        type: "color",
        group: "table",
        presets: ["main", "content"],
        customColors: {
          Primary: this.themeColorService.computeColor("var(--color-primary-color)")
        }
      }
    ];
  }
  getFields(entity) {
    return this.createFormFieldsFromConfig(entity, this.getFieldConfigurations());
  }
  getUpdateMethod() {
    return this.operationRegistry.getOperation("theme", "update") ?? ((id) => this.entitiesService.updateTheme(id, {
      settings: {
        table: this.formChanges
      }
    }));
  }
  static \u0275fac = function ThemeSettingsTableSectionComponent_Factory(__ngFactoryType__) {
    return new (__ngFactoryType__ || _ThemeSettingsTableSectionComponent)();
  };
  static \u0275cmp = /* @__PURE__ */ \u0275\u0275defineComponent({ type: _ThemeSettingsTableSectionComponent, selectors: [["app-theme-settings-table-section"]], viewQuery: function ThemeSettingsTableSectionComponent_Query(rf, ctx) {
    if (rf & 1) {
      \u0275\u0275viewQuery(_c061, 7);
    }
    if (rf & 2) {
      let _t;
      \u0275\u0275queryRefresh(_t = \u0275\u0275loadQuery()) && (ctx.valueTemplate = _t.first);
    }
  }, features: [\u0275\u0275InheritDefinitionFeature], decls: 14, vars: 8, consts: [["valueTemplate", ""], [1, "card", "pt-2"], [1, "mb-4", "p-2", "flex", "justify-start", "items-center"], [1, "!text-[2.5rem]", 3, "icon", "ngClass"], [1, "pl-6", "flex-1"], [1, "flex", "justify-between", "items-center"], [1, "text-xl", "font-semibold", "m-0"], [1, "icon-light"], [3, "fields", "actions", "hideActions"], ["tableStyleClass", "info-display !w-auto", 3, "data", "columns", "showGridLines", "hideHeader"], [1, "pi", "pi-pen-to-square", "action", "hover", "!text-2xl", 3, "click", "keydown.enter"], [3, "formSubmit", "formValidityChange", "fieldValueChange", "fields", "actions", "hideActions"], [3, "rowData", "group"]], template: function ThemeSettingsTableSectionComponent_Template(rf, ctx) {
    if (rf & 1) {
      \u0275\u0275elementStart(0, "div", 1)(1, "div", 2);
      \u0275\u0275element(2, "fa-icon", 3);
      \u0275\u0275elementStart(3, "div", 4)(4, "div", 5)(5, "h2", 6);
      \u0275\u0275text(6, "Table");
      \u0275\u0275elementEnd();
      \u0275\u0275conditionalCreate(7, ThemeSettingsTableSectionComponent_Conditional_7_Template, 2, 1, "div", 7);
      \u0275\u0275elementEnd();
      \u0275\u0275elementStart(8, "span");
      \u0275\u0275text(9);
      \u0275\u0275elementEnd()()();
      \u0275\u0275conditionalCreate(10, ThemeSettingsTableSectionComponent_Conditional_10_Template, 1, 3, "app-dynamic-form", 8);
      \u0275\u0275conditionalCreate(11, ThemeSettingsTableSectionComponent_Conditional_11_Template, 1, 4, "app-grid", 9);
      \u0275\u0275elementEnd();
      \u0275\u0275template(12, ThemeSettingsTableSectionComponent_ng_template_12_Template, 1, 2, "ng-template", null, 0, \u0275\u0275templateRefExtractor);
    }
    if (rf & 2) {
      \u0275\u0275advance(2);
      \u0275\u0275property("icon", ctx.faFill)("ngClass", \u0275\u0275pureFunction1(6, _c119, ctx.isFormEditable()));
      \u0275\u0275advance(5);
      \u0275\u0275conditional(!ctx.isFormEditable() && !ctx.createMode() ? 7 : -1);
      \u0275\u0275advance(2);
      \u0275\u0275textInterpolate(ctx.description);
      \u0275\u0275advance();
      \u0275\u0275conditional(ctx.isFormEditable() || ctx.createMode() && ctx.formFields.length ? 10 : -1);
      \u0275\u0275advance();
      \u0275\u0275conditional(!ctx.isFormEditable() && !ctx.createMode() ? 11 : -1);
    }
  }, dependencies: [
    DynamicFormComponent,
    FontAwesomeModule,
    FaIconComponent,
    CommonModule,
    NgClass,
    GridComponent,
    ThemeValueDisplayComponent
  ], encapsulation: 2 });
};
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(ThemeSettingsTableSectionComponent, [{
    type: Component,
    args: [{ selector: "app-theme-settings-table-section", imports: [
      DynamicFormComponent,
      FontAwesomeModule,
      CommonModule,
      GridComponent,
      ThemeValueDisplayComponent
    ], template: `<div class="card pt-2">
  <div class="mb-4 p-2 flex justify-start items-center">
    <fa-icon
      [icon]="faFill"
      class="!text-[2.5rem]"
      [ngClass]="{ 'icon-primary': isFormEditable() }"
    ></fa-icon>

    <div class="pl-6 flex-1">
      <div class="flex justify-between items-center">
        <h2 class="text-xl font-semibold m-0">Table</h2>
        @if (!isFormEditable() && !createMode()) {
          <div class="icon-light">
            <span
              class="pi pi-pen-to-square action hover !text-2xl"
              [attr.aria-label]="'Edit theme table details'"
              (click)="onEdit()"
              (keydown.enter)="onEdit()"
            ></span>
          </div>
        }
      </div>
      <span>{{ description }}</span>
    </div>
  </div>

  @if (isFormEditable() || (createMode() && formFields.length)) {
    <app-dynamic-form
      [fields]="formFields"
      [actions]="actions"
      [hideActions]="createMode()"
      (formSubmit)="onSubmit($event)"
      (formValidityChange)="onFormValidityChange($event)"
      (fieldValueChange)="onFieldValueChange($event)"
    >
    </app-dynamic-form>
  }

  @if (!isFormEditable() && !createMode()) {
    <app-grid
      [data]="themeDetails()"
      [columns]="columns"
      [showGridLines]="false"
      [hideHeader]="true"
      tableStyleClass="info-display !w-auto"
    ></app-grid>
  }
</div>

<ng-template #valueTemplate let-rowData>
  <app-theme-value-display [rowData]="rowData" [group]="group">
  </app-theme-value-display>
</ng-template>
` }]
  }], () => [], { valueTemplate: [{
    type: ViewChild,
    args: ["valueTemplate", { static: true }]
  }] });
})();
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && \u0275setClassDebugInfo(ThemeSettingsTableSectionComponent, { className: "ThemeSettingsTableSectionComponent", filePath: "src/app/features/administration/components/themes/theme-settings-table-section/theme-settings-table-section.component.ts", lineNumber: 49 });
})();

// src/app/features/administration/components/themes/theme-settings-tree-section/theme-settings-tree-section.component.ts
var _c062 = ["valueTemplate"];
var _c120 = (a0) => ({ "icon-primary": a0 });
function ThemeSettingsTreeSectionComponent_Conditional_7_Template(rf, ctx) {
  if (rf & 1) {
    const _r1 = \u0275\u0275getCurrentView();
    \u0275\u0275elementStart(0, "div", 7)(1, "span", 10);
    \u0275\u0275listener("click", function ThemeSettingsTreeSectionComponent_Conditional_7_Template_span_click_1_listener() {
      \u0275\u0275restoreView(_r1);
      const ctx_r1 = \u0275\u0275nextContext();
      return \u0275\u0275resetView(ctx_r1.onEdit());
    })("keydown.enter", function ThemeSettingsTreeSectionComponent_Conditional_7_Template_span_keydown_enter_1_listener() {
      \u0275\u0275restoreView(_r1);
      const ctx_r1 = \u0275\u0275nextContext();
      return \u0275\u0275resetView(ctx_r1.onEdit());
    });
    \u0275\u0275elementEnd()();
  }
  if (rf & 2) {
    \u0275\u0275advance();
    \u0275\u0275attribute("aria-label", "Edit theme tree details");
  }
}
function ThemeSettingsTreeSectionComponent_Conditional_10_Template(rf, ctx) {
  if (rf & 1) {
    const _r3 = \u0275\u0275getCurrentView();
    \u0275\u0275elementStart(0, "app-dynamic-form", 11);
    \u0275\u0275listener("formSubmit", function ThemeSettingsTreeSectionComponent_Conditional_10_Template_app_dynamic_form_formSubmit_0_listener($event) {
      \u0275\u0275restoreView(_r3);
      const ctx_r1 = \u0275\u0275nextContext();
      return \u0275\u0275resetView(ctx_r1.onSubmit($event));
    })("formValidityChange", function ThemeSettingsTreeSectionComponent_Conditional_10_Template_app_dynamic_form_formValidityChange_0_listener($event) {
      \u0275\u0275restoreView(_r3);
      const ctx_r1 = \u0275\u0275nextContext();
      return \u0275\u0275resetView(ctx_r1.onFormValidityChange($event));
    })("fieldValueChange", function ThemeSettingsTreeSectionComponent_Conditional_10_Template_app_dynamic_form_fieldValueChange_0_listener($event) {
      \u0275\u0275restoreView(_r3);
      const ctx_r1 = \u0275\u0275nextContext();
      return \u0275\u0275resetView(ctx_r1.onFieldValueChange($event));
    });
    \u0275\u0275elementEnd();
  }
  if (rf & 2) {
    const ctx_r1 = \u0275\u0275nextContext();
    \u0275\u0275property("fields", ctx_r1.formFields)("actions", ctx_r1.actions)("hideActions", ctx_r1.createMode());
  }
}
function ThemeSettingsTreeSectionComponent_Conditional_11_Template(rf, ctx) {
  if (rf & 1) {
    \u0275\u0275element(0, "app-grid", 9);
  }
  if (rf & 2) {
    const ctx_r1 = \u0275\u0275nextContext();
    \u0275\u0275property("data", ctx_r1.themeDetails())("columns", ctx_r1.columns)("showGridLines", false)("hideHeader", true);
  }
}
function ThemeSettingsTreeSectionComponent_ng_template_12_Template(rf, ctx) {
  if (rf & 1) {
    \u0275\u0275element(0, "app-theme-value-display", 12);
  }
  if (rf & 2) {
    const rowData_r4 = ctx.$implicit;
    const ctx_r1 = \u0275\u0275nextContext();
    \u0275\u0275property("rowData", rowData_r4)("group", ctx_r1.group);
  }
}
var TREE_THEME_PATHS = {
  BACKGROUND_COLOR: ["tree", "background", "color"],
  ACTIVE_FONT_COLOR: ["tree", "active", "font", "color"],
  ACTIVE_BACKGROUND_COLOR: ["tree", "active", "background", "color"]
};
var ThemeSettingsTreeSectionComponent = class _ThemeSettingsTreeSectionComponent extends ThemeSettingsSectionBase {
  valueTemplate;
  themeColorService = inject(ThemeColorService);
  themeDetails = computed(() => {
    const themeDetails = this.entity();
    if (!isDefined(themeDetails))
      return [];
    const themeSettings = this.themeEngine.themeSettingsMergedWithDefault(themeDetails?.settings ?? {});
    const detailConfigs = this.createThemeDetailsFromConfig(this.getFieldConfigurations());
    return detailConfigs.map((config) => ({
      key: config.key,
      value: this.formatThemeValue(themeSettings, config)
    }));
  }, ...ngDevMode ? [{ debugName: "themeDetails" }] : []);
  constructor() {
    super("tree");
  }
  ngOnInit() {
    this.initializeColumns();
  }
  initializeColumns() {
    this.columns = [
      { field: "key", header: "", transform: "uppercase" },
      {
        field: "value",
        header: "",
        cellTemplate: this.valueTemplate
      }
    ];
  }
  getFieldConfigurations() {
    return [
      {
        id: "background.color",
        label: "Background Color",
        path: TREE_THEME_PATHS.BACKGROUND_COLOR,
        type: "color",
        group: "tree",
        presets: ["main", "content"]
      },
      {
        id: "active.font.color",
        label: "Active Font Color",
        path: TREE_THEME_PATHS.ACTIVE_FONT_COLOR,
        type: "color",
        group: "tree",
        presets: ["main", "content", "header"],
        customColors: { "Primary Contrast": "var(--color-primary-contrast)" }
      },
      {
        id: "active.background.color",
        label: "Active Background",
        path: TREE_THEME_PATHS.ACTIVE_BACKGROUND_COLOR,
        type: "color",
        group: "tree",
        presets: ["main", "content"],
        customColors: {
          Primary: this.themeColorService.computeColor("var(--color-primary-color)")
        }
      }
    ];
  }
  getFields(entity) {
    return this.createFormFieldsFromConfig(entity, this.getFieldConfigurations());
  }
  getUpdateMethod() {
    return this.operationRegistry.getOperation("theme", "update") ?? ((id) => this.entitiesService.updateTheme(id, {
      settings: {
        tree: this.formChanges
      }
    }));
  }
  static \u0275fac = function ThemeSettingsTreeSectionComponent_Factory(__ngFactoryType__) {
    return new (__ngFactoryType__ || _ThemeSettingsTreeSectionComponent)();
  };
  static \u0275cmp = /* @__PURE__ */ \u0275\u0275defineComponent({ type: _ThemeSettingsTreeSectionComponent, selectors: [["app-theme-settings-tree-section"]], viewQuery: function ThemeSettingsTreeSectionComponent_Query(rf, ctx) {
    if (rf & 1) {
      \u0275\u0275viewQuery(_c062, 7);
    }
    if (rf & 2) {
      let _t;
      \u0275\u0275queryRefresh(_t = \u0275\u0275loadQuery()) && (ctx.valueTemplate = _t.first);
    }
  }, features: [\u0275\u0275InheritDefinitionFeature], decls: 14, vars: 8, consts: [["valueTemplate", ""], [1, "card", "pt-2"], [1, "mb-4", "p-2", "flex", "justify-start", "items-center"], [1, "!text-[2.5rem]", 3, "icon", "ngClass"], [1, "pl-6", "flex-1"], [1, "flex", "justify-between", "items-center"], [1, "text-xl", "font-semibold", "m-0"], [1, "icon-light"], [3, "fields", "actions", "hideActions"], ["tableStyleClass", "info-display !w-auto", 3, "data", "columns", "showGridLines", "hideHeader"], [1, "pi", "pi-pen-to-square", "action", "hover", "!text-2xl", 3, "click", "keydown.enter"], [3, "formSubmit", "formValidityChange", "fieldValueChange", "fields", "actions", "hideActions"], [3, "rowData", "group"]], template: function ThemeSettingsTreeSectionComponent_Template(rf, ctx) {
    if (rf & 1) {
      \u0275\u0275elementStart(0, "div", 1)(1, "div", 2);
      \u0275\u0275element(2, "fa-icon", 3);
      \u0275\u0275elementStart(3, "div", 4)(4, "div", 5)(5, "h2", 6);
      \u0275\u0275text(6, "Tree");
      \u0275\u0275elementEnd();
      \u0275\u0275conditionalCreate(7, ThemeSettingsTreeSectionComponent_Conditional_7_Template, 2, 1, "div", 7);
      \u0275\u0275elementEnd();
      \u0275\u0275elementStart(8, "span");
      \u0275\u0275text(9);
      \u0275\u0275elementEnd()()();
      \u0275\u0275conditionalCreate(10, ThemeSettingsTreeSectionComponent_Conditional_10_Template, 1, 3, "app-dynamic-form", 8);
      \u0275\u0275conditionalCreate(11, ThemeSettingsTreeSectionComponent_Conditional_11_Template, 1, 4, "app-grid", 9);
      \u0275\u0275elementEnd();
      \u0275\u0275template(12, ThemeSettingsTreeSectionComponent_ng_template_12_Template, 1, 2, "ng-template", null, 0, \u0275\u0275templateRefExtractor);
    }
    if (rf & 2) {
      \u0275\u0275advance(2);
      \u0275\u0275property("icon", ctx.faFill)("ngClass", \u0275\u0275pureFunction1(6, _c120, ctx.isFormEditable()));
      \u0275\u0275advance(5);
      \u0275\u0275conditional(!ctx.isFormEditable() && !ctx.createMode() ? 7 : -1);
      \u0275\u0275advance(2);
      \u0275\u0275textInterpolate(ctx.description);
      \u0275\u0275advance();
      \u0275\u0275conditional(ctx.isFormEditable() || ctx.createMode() && ctx.formFields.length ? 10 : -1);
      \u0275\u0275advance();
      \u0275\u0275conditional(!ctx.isFormEditable() && !ctx.createMode() ? 11 : -1);
    }
  }, dependencies: [
    DynamicFormComponent,
    FontAwesomeModule,
    FaIconComponent,
    CommonModule,
    NgClass,
    GridComponent,
    ThemeValueDisplayComponent
  ], encapsulation: 2 });
};
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(ThemeSettingsTreeSectionComponent, [{
    type: Component,
    args: [{ selector: "app-theme-settings-tree-section", imports: [
      DynamicFormComponent,
      FontAwesomeModule,
      CommonModule,
      GridComponent,
      ThemeValueDisplayComponent
    ], template: `<div class="card pt-2">
  <div class="mb-4 p-2 flex justify-start items-center">
    <fa-icon
      [icon]="faFill"
      class="!text-[2.5rem]"
      [ngClass]="{ 'icon-primary': isFormEditable() }"
    ></fa-icon>

    <div class="pl-6 flex-1">
      <div class="flex justify-between items-center">
        <h2 class="text-xl font-semibold m-0">Tree</h2>
        @if (!isFormEditable() && !createMode()) {
          <div class="icon-light">
            <span
              class="pi pi-pen-to-square action hover !text-2xl"
              [attr.aria-label]="'Edit theme tree details'"
              (click)="onEdit()"
              (keydown.enter)="onEdit()"
            ></span>
          </div>
        }
      </div>
      <span>{{ description }}</span>
    </div>
  </div>

  @if (isFormEditable() || (createMode() && formFields.length)) {
    <app-dynamic-form
      [fields]="formFields"
      [actions]="actions"
      [hideActions]="createMode()"
      (formSubmit)="onSubmit($event)"
      (formValidityChange)="onFormValidityChange($event)"
      (fieldValueChange)="onFieldValueChange($event)"
    >
    </app-dynamic-form>
  }

  @if (!isFormEditable() && !createMode()) {
    <app-grid
      [data]="themeDetails()"
      [columns]="columns"
      [showGridLines]="false"
      [hideHeader]="true"
      tableStyleClass="info-display !w-auto"
    ></app-grid>
  }
</div>

<ng-template #valueTemplate let-rowData>
  <app-theme-value-display [rowData]="rowData" [group]="group">
  </app-theme-value-display>
</ng-template>
` }]
  }], () => [], { valueTemplate: [{
    type: ViewChild,
    args: ["valueTemplate", { static: true }]
  }] });
})();
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && \u0275setClassDebugInfo(ThemeSettingsTreeSectionComponent, { className: "ThemeSettingsTreeSectionComponent", filePath: "src/app/features/administration/components/themes/theme-settings-tree-section/theme-settings-tree-section.component.ts", lineNumber: 43 });
})();

// src/app/features/administration/components/themes/theme-settings-list-section/theme-settings-list-section.component.ts
var _c063 = ["valueTemplate"];
var _c121 = (a0) => ({ "icon-primary": a0 });
function ThemeSettingsListSectionComponent_Conditional_7_Template(rf, ctx) {
  if (rf & 1) {
    const _r1 = \u0275\u0275getCurrentView();
    \u0275\u0275elementStart(0, "div", 7)(1, "span", 10);
    \u0275\u0275listener("click", function ThemeSettingsListSectionComponent_Conditional_7_Template_span_click_1_listener() {
      \u0275\u0275restoreView(_r1);
      const ctx_r1 = \u0275\u0275nextContext();
      return \u0275\u0275resetView(ctx_r1.onEdit());
    })("keydown.enter", function ThemeSettingsListSectionComponent_Conditional_7_Template_span_keydown_enter_1_listener() {
      \u0275\u0275restoreView(_r1);
      const ctx_r1 = \u0275\u0275nextContext();
      return \u0275\u0275resetView(ctx_r1.onEdit());
    });
    \u0275\u0275elementEnd()();
  }
  if (rf & 2) {
    \u0275\u0275advance();
    \u0275\u0275attribute("aria-label", "Edit theme list details");
  }
}
function ThemeSettingsListSectionComponent_Conditional_10_Template(rf, ctx) {
  if (rf & 1) {
    const _r3 = \u0275\u0275getCurrentView();
    \u0275\u0275elementStart(0, "app-dynamic-form", 11);
    \u0275\u0275listener("formSubmit", function ThemeSettingsListSectionComponent_Conditional_10_Template_app_dynamic_form_formSubmit_0_listener($event) {
      \u0275\u0275restoreView(_r3);
      const ctx_r1 = \u0275\u0275nextContext();
      return \u0275\u0275resetView(ctx_r1.onSubmit($event));
    })("formValidityChange", function ThemeSettingsListSectionComponent_Conditional_10_Template_app_dynamic_form_formValidityChange_0_listener($event) {
      \u0275\u0275restoreView(_r3);
      const ctx_r1 = \u0275\u0275nextContext();
      return \u0275\u0275resetView(ctx_r1.onFormValidityChange($event));
    })("fieldValueChange", function ThemeSettingsListSectionComponent_Conditional_10_Template_app_dynamic_form_fieldValueChange_0_listener($event) {
      \u0275\u0275restoreView(_r3);
      const ctx_r1 = \u0275\u0275nextContext();
      return \u0275\u0275resetView(ctx_r1.onFieldValueChange($event));
    });
    \u0275\u0275elementEnd();
  }
  if (rf & 2) {
    const ctx_r1 = \u0275\u0275nextContext();
    \u0275\u0275property("fields", ctx_r1.formFields)("actions", ctx_r1.actions)("hideActions", ctx_r1.createMode());
  }
}
function ThemeSettingsListSectionComponent_Conditional_11_Template(rf, ctx) {
  if (rf & 1) {
    \u0275\u0275element(0, "app-grid", 9);
  }
  if (rf & 2) {
    const ctx_r1 = \u0275\u0275nextContext();
    \u0275\u0275property("data", ctx_r1.themeDetails())("columns", ctx_r1.columns)("showGridLines", false)("hideHeader", true);
  }
}
function ThemeSettingsListSectionComponent_ng_template_12_Template(rf, ctx) {
  if (rf & 1) {
    \u0275\u0275element(0, "app-theme-value-display", 12);
  }
  if (rf & 2) {
    const rowData_r4 = ctx.$implicit;
    const ctx_r1 = \u0275\u0275nextContext();
    \u0275\u0275property("rowData", rowData_r4)("group", ctx_r1.group);
  }
}
var LIST_THEME_PATHS = {
  BACKGROUND_COLOR: ["list", "background", "color"],
  BORDER_COLOR: ["list", "border", "color"],
  ACTIVE_FONT_COLOR: ["list", "active", "font", "color"],
  ACTIVE_BACKGROUND_COLOR: ["list", "active", "background", "color"]
};
var ThemeSettingsListSectionComponent = class _ThemeSettingsListSectionComponent extends ThemeSettingsSectionBase {
  valueTemplate;
  themeDetails = computed(() => {
    const themeDetails = this.entity();
    if (!isDefined(themeDetails))
      return [];
    const themeSettings = this.themeEngine.themeSettingsMergedWithDefault(themeDetails?.settings ?? {});
    const detailConfigs = this.createThemeDetailsFromConfig(this.getFieldConfigurations());
    return detailConfigs.map((config) => ({
      key: config.key,
      value: this.formatThemeValue(themeSettings, config)
    }));
  }, ...ngDevMode ? [{ debugName: "themeDetails" }] : []);
  constructor() {
    super("list");
  }
  ngOnInit() {
    this.initializeColumns();
  }
  initializeColumns() {
    this.columns = [
      { field: "key", header: "", transform: "uppercase" },
      {
        field: "value",
        header: "",
        cellTemplate: this.valueTemplate
      }
    ];
  }
  getFieldConfigurations() {
    return [
      {
        id: "background.color",
        label: "Background Color",
        path: LIST_THEME_PATHS.BACKGROUND_COLOR,
        type: "color",
        group: "list",
        presets: ["content"]
      },
      {
        id: "border.color",
        label: "Border Color",
        path: LIST_THEME_PATHS.BORDER_COLOR,
        type: "color",
        group: "list",
        presets: ["main", "content"]
      },
      {
        id: "active.font.color",
        label: "Active Font Color",
        path: LIST_THEME_PATHS.ACTIVE_FONT_COLOR,
        type: "color",
        group: "list",
        presets: ["main", "content", "header"]
      },
      {
        id: "active.background.color",
        label: "Active Background",
        path: LIST_THEME_PATHS.ACTIVE_BACKGROUND_COLOR,
        type: "color",
        group: "list",
        presets: ["list", "content"]
      }
    ];
  }
  getFields(entity) {
    return this.createFormFieldsFromConfig(entity, this.getFieldConfigurations());
  }
  getUpdateMethod() {
    return this.operationRegistry.getOperation("theme", "update") ?? ((id) => this.entitiesService.updateTheme(id, {
      settings: {
        list: this.formChanges
      }
    }));
  }
  static \u0275fac = function ThemeSettingsListSectionComponent_Factory(__ngFactoryType__) {
    return new (__ngFactoryType__ || _ThemeSettingsListSectionComponent)();
  };
  static \u0275cmp = /* @__PURE__ */ \u0275\u0275defineComponent({ type: _ThemeSettingsListSectionComponent, selectors: [["app-theme-settings-list-section"]], viewQuery: function ThemeSettingsListSectionComponent_Query(rf, ctx) {
    if (rf & 1) {
      \u0275\u0275viewQuery(_c063, 7);
    }
    if (rf & 2) {
      let _t;
      \u0275\u0275queryRefresh(_t = \u0275\u0275loadQuery()) && (ctx.valueTemplate = _t.first);
    }
  }, features: [\u0275\u0275InheritDefinitionFeature], decls: 14, vars: 8, consts: [["valueTemplate", ""], [1, "card", "pt-2"], [1, "mb-4", "p-2", "flex", "justify-start", "items-center"], [1, "!text-[2.5rem]", 3, "icon", "ngClass"], [1, "pl-6", "flex-1"], [1, "flex", "justify-between", "items-center"], [1, "text-xl", "font-semibold", "m-0"], [1, "icon-light"], [3, "fields", "actions", "hideActions"], ["tableStyleClass", "info-display !w-auto", 3, "data", "columns", "showGridLines", "hideHeader"], [1, "pi", "pi-pen-to-square", "action", "hover", "!text-2xl", 3, "click", "keydown.enter"], [3, "formSubmit", "formValidityChange", "fieldValueChange", "fields", "actions", "hideActions"], [3, "rowData", "group"]], template: function ThemeSettingsListSectionComponent_Template(rf, ctx) {
    if (rf & 1) {
      \u0275\u0275elementStart(0, "div", 1)(1, "div", 2);
      \u0275\u0275element(2, "fa-icon", 3);
      \u0275\u0275elementStart(3, "div", 4)(4, "div", 5)(5, "h2", 6);
      \u0275\u0275text(6, "List");
      \u0275\u0275elementEnd();
      \u0275\u0275conditionalCreate(7, ThemeSettingsListSectionComponent_Conditional_7_Template, 2, 1, "div", 7);
      \u0275\u0275elementEnd();
      \u0275\u0275elementStart(8, "span");
      \u0275\u0275text(9);
      \u0275\u0275elementEnd()()();
      \u0275\u0275conditionalCreate(10, ThemeSettingsListSectionComponent_Conditional_10_Template, 1, 3, "app-dynamic-form", 8);
      \u0275\u0275conditionalCreate(11, ThemeSettingsListSectionComponent_Conditional_11_Template, 1, 4, "app-grid", 9);
      \u0275\u0275elementEnd();
      \u0275\u0275template(12, ThemeSettingsListSectionComponent_ng_template_12_Template, 1, 2, "ng-template", null, 0, \u0275\u0275templateRefExtractor);
    }
    if (rf & 2) {
      \u0275\u0275advance(2);
      \u0275\u0275property("icon", ctx.faFill)("ngClass", \u0275\u0275pureFunction1(6, _c121, ctx.isFormEditable()));
      \u0275\u0275advance(5);
      \u0275\u0275conditional(!ctx.isFormEditable() && !ctx.createMode() ? 7 : -1);
      \u0275\u0275advance(2);
      \u0275\u0275textInterpolate(ctx.description);
      \u0275\u0275advance();
      \u0275\u0275conditional(ctx.isFormEditable() || ctx.createMode() && ctx.formFields.length ? 10 : -1);
      \u0275\u0275advance();
      \u0275\u0275conditional(!ctx.isFormEditable() && !ctx.createMode() ? 11 : -1);
    }
  }, dependencies: [
    DynamicFormComponent,
    FontAwesomeModule,
    FaIconComponent,
    CommonModule,
    NgClass,
    GridComponent,
    ThemeValueDisplayComponent
  ], encapsulation: 2 });
};
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(ThemeSettingsListSectionComponent, [{
    type: Component,
    args: [{ selector: "app-theme-settings-list-section", imports: [
      DynamicFormComponent,
      FontAwesomeModule,
      CommonModule,
      GridComponent,
      ThemeValueDisplayComponent
    ], template: `<div class="card pt-2">
  <div class="mb-4 p-2 flex justify-start items-center">
    <fa-icon
      [icon]="faFill"
      class="!text-[2.5rem]"
      [ngClass]="{ 'icon-primary': isFormEditable() }"
    ></fa-icon>

    <div class="pl-6 flex-1">
      <div class="flex justify-between items-center">
        <h2 class="text-xl font-semibold m-0">List</h2>
        @if (!isFormEditable() && !createMode()) {
          <div class="icon-light">
            <span
              class="pi pi-pen-to-square action hover !text-2xl"
              [attr.aria-label]="'Edit theme list details'"
              (click)="onEdit()"
              (keydown.enter)="onEdit()"
            ></span>
          </div>
        }
      </div>
      <span>{{ description }}</span>
    </div>
  </div>

  @if (isFormEditable() || (createMode() && formFields.length)) {
    <app-dynamic-form
      [fields]="formFields"
      [actions]="actions"
      [hideActions]="createMode()"
      (formSubmit)="onSubmit($event)"
      (formValidityChange)="onFormValidityChange($event)"
      (fieldValueChange)="onFieldValueChange($event)"
    >
    </app-dynamic-form>
  }

  @if (!isFormEditable() && !createMode()) {
    <app-grid
      [data]="themeDetails()"
      [columns]="columns"
      [showGridLines]="false"
      [hideHeader]="true"
      tableStyleClass="info-display !w-auto"
    ></app-grid>
  }
</div>

<ng-template #valueTemplate let-rowData>
  <app-theme-value-display [rowData]="rowData" [group]="group">
  </app-theme-value-display>
</ng-template>
` }]
  }], () => [], { valueTemplate: [{
    type: ViewChild,
    args: ["valueTemplate", { static: true }]
  }] });
})();
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && \u0275setClassDebugInfo(ThemeSettingsListSectionComponent, { className: "ThemeSettingsListSectionComponent", filePath: "src/app/features/administration/components/themes/theme-settings-list-section/theme-settings-list-section.component.ts", lineNumber: 42 });
})();

// src/app/features/administration/components/themes/theme-settings-feed-section/theme-settings-feed-section.component.ts
var _c064 = ["valueTemplate"];
var _c122 = (a0) => ({ "icon-primary": a0 });
function ThemeSettingsFeedSectionComponent_Conditional_7_Template(rf, ctx) {
  if (rf & 1) {
    const _r1 = \u0275\u0275getCurrentView();
    \u0275\u0275elementStart(0, "div", 7)(1, "span", 10);
    \u0275\u0275listener("click", function ThemeSettingsFeedSectionComponent_Conditional_7_Template_span_click_1_listener() {
      \u0275\u0275restoreView(_r1);
      const ctx_r1 = \u0275\u0275nextContext();
      return \u0275\u0275resetView(ctx_r1.onEdit());
    })("keydown.enter", function ThemeSettingsFeedSectionComponent_Conditional_7_Template_span_keydown_enter_1_listener() {
      \u0275\u0275restoreView(_r1);
      const ctx_r1 = \u0275\u0275nextContext();
      return \u0275\u0275resetView(ctx_r1.onEdit());
    });
    \u0275\u0275elementEnd()();
  }
  if (rf & 2) {
    \u0275\u0275advance();
    \u0275\u0275attribute("aria-label", "Edit theme feed details");
  }
}
function ThemeSettingsFeedSectionComponent_Conditional_10_Template(rf, ctx) {
  if (rf & 1) {
    const _r3 = \u0275\u0275getCurrentView();
    \u0275\u0275elementStart(0, "app-dynamic-form", 11);
    \u0275\u0275listener("formSubmit", function ThemeSettingsFeedSectionComponent_Conditional_10_Template_app_dynamic_form_formSubmit_0_listener($event) {
      \u0275\u0275restoreView(_r3);
      const ctx_r1 = \u0275\u0275nextContext();
      return \u0275\u0275resetView(ctx_r1.onSubmit($event));
    })("formValidityChange", function ThemeSettingsFeedSectionComponent_Conditional_10_Template_app_dynamic_form_formValidityChange_0_listener($event) {
      \u0275\u0275restoreView(_r3);
      const ctx_r1 = \u0275\u0275nextContext();
      return \u0275\u0275resetView(ctx_r1.onFormValidityChange($event));
    })("fieldValueChange", function ThemeSettingsFeedSectionComponent_Conditional_10_Template_app_dynamic_form_fieldValueChange_0_listener($event) {
      \u0275\u0275restoreView(_r3);
      const ctx_r1 = \u0275\u0275nextContext();
      return \u0275\u0275resetView(ctx_r1.onFieldValueChange($event));
    });
    \u0275\u0275elementEnd();
  }
  if (rf & 2) {
    const ctx_r1 = \u0275\u0275nextContext();
    \u0275\u0275property("fields", ctx_r1.formFields)("actions", ctx_r1.actions)("hideActions", ctx_r1.createMode());
  }
}
function ThemeSettingsFeedSectionComponent_Conditional_11_Template(rf, ctx) {
  if (rf & 1) {
    \u0275\u0275element(0, "app-grid", 9);
  }
  if (rf & 2) {
    const ctx_r1 = \u0275\u0275nextContext();
    \u0275\u0275property("data", ctx_r1.themeDetails())("columns", ctx_r1.columns)("showGridLines", false)("hideHeader", true);
  }
}
function ThemeSettingsFeedSectionComponent_ng_template_12_Template(rf, ctx) {
  if (rf & 1) {
    \u0275\u0275element(0, "app-theme-value-display", 12);
  }
  if (rf & 2) {
    const rowData_r4 = ctx.$implicit;
    const ctx_r1 = \u0275\u0275nextContext();
    \u0275\u0275property("rowData", rowData_r4)("group", ctx_r1.group);
  }
}
var FEED_THEME_PATHS = {
  BACKGROUND_COLOR: ["feed", "background", "color"],
  BORDER_COLOR: ["feed", "border", "color"],
  ACTIVE_FONT_COLOR: ["feed", "active", "font", "color"],
  ACTIVE_BACKGROUND_COLOR: ["feed", "active", "background", "color"]
};
var ThemeSettingsFeedSectionComponent = class _ThemeSettingsFeedSectionComponent extends ThemeSettingsSectionBase {
  valueTemplate;
  themeDetails = computed(() => {
    const themeDetails = this.entity();
    if (!isDefined(themeDetails))
      return [];
    const themeSettings = this.themeEngine.themeSettingsMergedWithDefault(themeDetails?.settings ?? {});
    const detailConfigs = this.createThemeDetailsFromConfig(this.getFieldConfigurations());
    return detailConfigs.map((config) => ({
      key: config.key,
      value: this.formatThemeValue(themeSettings, config)
    }));
  }, ...ngDevMode ? [{ debugName: "themeDetails" }] : []);
  constructor() {
    super("feed");
  }
  ngOnInit() {
    this.initializeColumns();
  }
  initializeColumns() {
    this.columns = [
      { field: "key", header: "", transform: "uppercase" },
      {
        field: "value",
        header: "",
        cellTemplate: this.valueTemplate
      }
    ];
  }
  getFieldConfigurations() {
    return [
      {
        id: "background.color",
        label: "Background Color",
        path: FEED_THEME_PATHS.BACKGROUND_COLOR,
        type: "color",
        group: "feed",
        presets: ["content"]
      },
      {
        id: "border.color",
        label: "Border Color",
        path: FEED_THEME_PATHS.BORDER_COLOR,
        type: "color",
        group: "feed",
        presets: ["main", "content"]
      },
      {
        id: "active.font.color",
        label: "Active Font Color",
        path: FEED_THEME_PATHS.ACTIVE_FONT_COLOR,
        type: "color",
        group: "feed",
        presets: ["main", "content", "header"]
      },
      {
        id: "active.background.color",
        label: "Active Background",
        path: FEED_THEME_PATHS.ACTIVE_BACKGROUND_COLOR,
        type: "color",
        group: "feed",
        presets: ["feed", "content"]
      }
    ];
  }
  getFields(entity) {
    return this.createFormFieldsFromConfig(entity, this.getFieldConfigurations());
  }
  getUpdateMethod() {
    return this.operationRegistry.getOperation("theme", "update") ?? ((id) => this.entitiesService.updateTheme(id, {
      settings: {
        feed: this.formChanges
      }
    }));
  }
  static \u0275fac = function ThemeSettingsFeedSectionComponent_Factory(__ngFactoryType__) {
    return new (__ngFactoryType__ || _ThemeSettingsFeedSectionComponent)();
  };
  static \u0275cmp = /* @__PURE__ */ \u0275\u0275defineComponent({ type: _ThemeSettingsFeedSectionComponent, selectors: [["app-theme-settings-feed-section"]], viewQuery: function ThemeSettingsFeedSectionComponent_Query(rf, ctx) {
    if (rf & 1) {
      \u0275\u0275viewQuery(_c064, 7);
    }
    if (rf & 2) {
      let _t;
      \u0275\u0275queryRefresh(_t = \u0275\u0275loadQuery()) && (ctx.valueTemplate = _t.first);
    }
  }, features: [\u0275\u0275InheritDefinitionFeature], decls: 14, vars: 8, consts: [["valueTemplate", ""], [1, "card", "pt-2"], [1, "mb-4", "p-2", "flex", "justify-start", "items-center"], [1, "!text-[2.5rem]", 3, "icon", "ngClass"], [1, "pl-6", "flex-1"], [1, "flex", "justify-between", "items-center"], [1, "text-xl", "font-semibold", "m-0"], [1, "icon-light"], [3, "fields", "actions", "hideActions"], ["tableStyleClass", "info-display !w-auto", 3, "data", "columns", "showGridLines", "hideHeader"], [1, "pi", "pi-pen-to-square", "action", "hover", "!text-2xl", 3, "click", "keydown.enter"], [3, "formSubmit", "formValidityChange", "fieldValueChange", "fields", "actions", "hideActions"], [3, "rowData", "group"]], template: function ThemeSettingsFeedSectionComponent_Template(rf, ctx) {
    if (rf & 1) {
      \u0275\u0275elementStart(0, "div", 1)(1, "div", 2);
      \u0275\u0275element(2, "fa-icon", 3);
      \u0275\u0275elementStart(3, "div", 4)(4, "div", 5)(5, "h2", 6);
      \u0275\u0275text(6, "Feed");
      \u0275\u0275elementEnd();
      \u0275\u0275conditionalCreate(7, ThemeSettingsFeedSectionComponent_Conditional_7_Template, 2, 1, "div", 7);
      \u0275\u0275elementEnd();
      \u0275\u0275elementStart(8, "span");
      \u0275\u0275text(9);
      \u0275\u0275elementEnd()()();
      \u0275\u0275conditionalCreate(10, ThemeSettingsFeedSectionComponent_Conditional_10_Template, 1, 3, "app-dynamic-form", 8);
      \u0275\u0275conditionalCreate(11, ThemeSettingsFeedSectionComponent_Conditional_11_Template, 1, 4, "app-grid", 9);
      \u0275\u0275elementEnd();
      \u0275\u0275template(12, ThemeSettingsFeedSectionComponent_ng_template_12_Template, 1, 2, "ng-template", null, 0, \u0275\u0275templateRefExtractor);
    }
    if (rf & 2) {
      \u0275\u0275advance(2);
      \u0275\u0275property("icon", ctx.faFill)("ngClass", \u0275\u0275pureFunction1(6, _c122, ctx.isFormEditable()));
      \u0275\u0275advance(5);
      \u0275\u0275conditional(!ctx.isFormEditable() && !ctx.createMode() ? 7 : -1);
      \u0275\u0275advance(2);
      \u0275\u0275textInterpolate(ctx.description);
      \u0275\u0275advance();
      \u0275\u0275conditional(ctx.isFormEditable() || ctx.createMode() && ctx.formFields.length ? 10 : -1);
      \u0275\u0275advance();
      \u0275\u0275conditional(!ctx.isFormEditable() && !ctx.createMode() ? 11 : -1);
    }
  }, dependencies: [
    DynamicFormComponent,
    FontAwesomeModule,
    FaIconComponent,
    CommonModule,
    NgClass,
    GridComponent,
    ThemeValueDisplayComponent
  ], encapsulation: 2 });
};
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(ThemeSettingsFeedSectionComponent, [{
    type: Component,
    args: [{ selector: "app-theme-settings-feed-section", imports: [
      DynamicFormComponent,
      FontAwesomeModule,
      CommonModule,
      GridComponent,
      ThemeValueDisplayComponent
    ], template: `<div class="card pt-2">
  <div class="mb-4 p-2 flex justify-start items-center">
    <fa-icon
      [icon]="faFill"
      class="!text-[2.5rem]"
      [ngClass]="{ 'icon-primary': isFormEditable() }"
    ></fa-icon>

    <div class="pl-6 flex-1">
      <div class="flex justify-between items-center">
        <h2 class="text-xl font-semibold m-0">Feed</h2>
        @if (!isFormEditable() && !createMode()) {
          <div class="icon-light">
            <span
              class="pi pi-pen-to-square action hover !text-2xl"
              [attr.aria-label]="'Edit theme feed details'"
              (click)="onEdit()"
              (keydown.enter)="onEdit()"
            ></span>
          </div>
        }
      </div>
      <span>{{ description }}</span>
    </div>
  </div>

  @if (isFormEditable() || (createMode() && formFields.length)) {
    <app-dynamic-form
      [fields]="formFields"
      [actions]="actions"
      [hideActions]="createMode()"
      (formSubmit)="onSubmit($event)"
      (formValidityChange)="onFormValidityChange($event)"
      (fieldValueChange)="onFieldValueChange($event)"
    >
    </app-dynamic-form>
  }

  @if (!isFormEditable() && !createMode()) {
    <app-grid
      [data]="themeDetails()"
      [columns]="columns"
      [showGridLines]="false"
      [hideHeader]="true"
      tableStyleClass="info-display !w-auto"
    ></app-grid>
  }
</div>

<ng-template #valueTemplate let-rowData>
  <app-theme-value-display [rowData]="rowData" [group]="group">
  </app-theme-value-display>
</ng-template>
` }]
  }], () => [], { valueTemplate: [{
    type: ViewChild,
    args: ["valueTemplate", { static: true }]
  }] });
})();
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && \u0275setClassDebugInfo(ThemeSettingsFeedSectionComponent, { className: "ThemeSettingsFeedSectionComponent", filePath: "src/app/features/administration/components/themes/theme-settings-feed-section/theme-settings-feed-section.component.ts", lineNumber: 42 });
})();

// src/app/features/administration/components/themes/theme-settings-graph-section/theme-settings-graph-section.component.ts
var _c065 = ["valueTemplate"];
var _c123 = (a0) => ({ "icon-primary": a0 });
function ThemeSettingsGraphSectionComponent_Conditional_7_Template(rf, ctx) {
  if (rf & 1) {
    const _r1 = \u0275\u0275getCurrentView();
    \u0275\u0275elementStart(0, "div", 7)(1, "span", 10);
    \u0275\u0275listener("click", function ThemeSettingsGraphSectionComponent_Conditional_7_Template_span_click_1_listener() {
      \u0275\u0275restoreView(_r1);
      const ctx_r1 = \u0275\u0275nextContext();
      return \u0275\u0275resetView(ctx_r1.onEdit());
    })("keydown.enter", function ThemeSettingsGraphSectionComponent_Conditional_7_Template_span_keydown_enter_1_listener() {
      \u0275\u0275restoreView(_r1);
      const ctx_r1 = \u0275\u0275nextContext();
      return \u0275\u0275resetView(ctx_r1.onEdit());
    });
    \u0275\u0275elementEnd()();
  }
  if (rf & 2) {
    \u0275\u0275advance();
    \u0275\u0275attribute("aria-label", "Edit theme graph details");
  }
}
function ThemeSettingsGraphSectionComponent_Conditional_10_Template(rf, ctx) {
  if (rf & 1) {
    const _r3 = \u0275\u0275getCurrentView();
    \u0275\u0275elementStart(0, "app-dynamic-form", 11);
    \u0275\u0275listener("formSubmit", function ThemeSettingsGraphSectionComponent_Conditional_10_Template_app_dynamic_form_formSubmit_0_listener($event) {
      \u0275\u0275restoreView(_r3);
      const ctx_r1 = \u0275\u0275nextContext();
      return \u0275\u0275resetView(ctx_r1.onSubmit($event));
    })("formValidityChange", function ThemeSettingsGraphSectionComponent_Conditional_10_Template_app_dynamic_form_formValidityChange_0_listener($event) {
      \u0275\u0275restoreView(_r3);
      const ctx_r1 = \u0275\u0275nextContext();
      return \u0275\u0275resetView(ctx_r1.onFormValidityChange($event));
    })("fieldValueChange", function ThemeSettingsGraphSectionComponent_Conditional_10_Template_app_dynamic_form_fieldValueChange_0_listener($event) {
      \u0275\u0275restoreView(_r3);
      const ctx_r1 = \u0275\u0275nextContext();
      return \u0275\u0275resetView(ctx_r1.onFieldValueChange($event));
    });
    \u0275\u0275elementEnd();
  }
  if (rf & 2) {
    const ctx_r1 = \u0275\u0275nextContext();
    \u0275\u0275property("fields", ctx_r1.formFields)("actions", ctx_r1.actions)("hideActions", ctx_r1.createMode());
  }
}
function ThemeSettingsGraphSectionComponent_Conditional_11_Template(rf, ctx) {
  if (rf & 1) {
    \u0275\u0275element(0, "app-grid", 9);
  }
  if (rf & 2) {
    const ctx_r1 = \u0275\u0275nextContext();
    \u0275\u0275property("data", ctx_r1.themeDetails())("columns", ctx_r1.columns)("showGridLines", false)("hideHeader", true);
  }
}
function ThemeSettingsGraphSectionComponent_ng_template_12_Template(rf, ctx) {
  if (rf & 1) {
    \u0275\u0275element(0, "app-theme-value-display", 12);
  }
  if (rf & 2) {
    const rowData_r4 = ctx.$implicit;
    const ctx_r1 = \u0275\u0275nextContext();
    \u0275\u0275property("rowData", rowData_r4)("group", ctx_r1.group);
  }
}
var GRAPH_THEME_PATHS = {
  LABEL_FONT_FAMILY: ["graph", "label", "font", "family"],
  LABEL_FONT_SIZE: ["graph", "label", "font", "size"],
  LABEL_FONT_COLOR: ["graph", "label", "font", "color"],
  PALETTE: ["graph", "palette"]
};
var ThemeSettingsGraphSectionComponent = class _ThemeSettingsGraphSectionComponent extends ThemeSettingsSectionBase {
  valueTemplate;
  themeColorService = inject(ThemeColorService);
  themeDetails = computed(() => {
    const themeDetails = this.entity();
    if (!isDefined(themeDetails))
      return [];
    const themeSettings = this.themeEngine.themeSettingsMergedWithDefault(themeDetails?.settings ?? {});
    const detailConfigs = this.createThemeDetailsFromConfig(this.getFieldConfigurations());
    return detailConfigs.map((config) => ({
      key: config.key,
      value: this.formatThemeValue(themeSettings, config)
    }));
  }, ...ngDevMode ? [{ debugName: "themeDetails" }] : []);
  constructor() {
    super("graph");
  }
  ngOnInit() {
    this.initializeColumns();
  }
  initializeColumns() {
    this.columns = [
      { field: "key", header: "", transform: "uppercase" },
      {
        field: "value",
        header: "",
        cellTemplate: this.valueTemplate
      }
    ];
  }
  getFieldConfigurations() {
    return [
      {
        id: "label.font.family",
        label: "Label Font Family",
        path: GRAPH_THEME_PATHS.LABEL_FONT_FAMILY,
        type: "font-family",
        presets: ["main", "content", "header"]
      },
      {
        id: "label.font.size",
        label: "Label Font Size",
        path: GRAPH_THEME_PATHS.LABEL_FONT_SIZE,
        type: "size"
      },
      {
        id: "label.font.color",
        label: "Label Font Color",
        path: GRAPH_THEME_PATHS.LABEL_FONT_COLOR,
        type: "color",
        group: "graph",
        presets: ["main", "content", "header"]
      },
      {
        id: "palette",
        label: "Palette",
        path: GRAPH_THEME_PATHS.PALETTE,
        type: "dropdown",
        group: "graph",
        options: [
          {
            label: "Default",
            value: "default"
          },
          {
            label: "Dark Theme",
            value: "nightrider"
          }
        ]
      }
    ];
  }
  getFields(entity) {
    return this.createFormFieldsFromConfig(entity, this.getFieldConfigurations());
  }
  getUpdateMethod() {
    return this.operationRegistry.getOperation("theme", "update") ?? ((id) => this.entitiesService.updateTheme(id, {
      settings: {
        graph: this.formChanges
      }
    }));
  }
  static \u0275fac = function ThemeSettingsGraphSectionComponent_Factory(__ngFactoryType__) {
    return new (__ngFactoryType__ || _ThemeSettingsGraphSectionComponent)();
  };
  static \u0275cmp = /* @__PURE__ */ \u0275\u0275defineComponent({ type: _ThemeSettingsGraphSectionComponent, selectors: [["app-theme-settings-graph-section"]], viewQuery: function ThemeSettingsGraphSectionComponent_Query(rf, ctx) {
    if (rf & 1) {
      \u0275\u0275viewQuery(_c065, 7);
    }
    if (rf & 2) {
      let _t;
      \u0275\u0275queryRefresh(_t = \u0275\u0275loadQuery()) && (ctx.valueTemplate = _t.first);
    }
  }, features: [\u0275\u0275InheritDefinitionFeature], decls: 14, vars: 8, consts: [["valueTemplate", ""], [1, "card", "pt-2"], [1, "mb-4", "p-2", "flex", "justify-start", "items-center"], [1, "!text-[2.5rem]", 3, "icon", "ngClass"], [1, "pl-6", "flex-1"], [1, "flex", "justify-between", "items-center"], [1, "text-xl", "font-semibold", "m-0"], [1, "icon-light"], [3, "fields", "actions", "hideActions"], ["tableStyleClass", "info-display !w-auto", 3, "data", "columns", "showGridLines", "hideHeader"], [1, "pi", "pi-pen-to-square", "action", "hover", "!text-2xl", 3, "click", "keydown.enter"], [3, "formSubmit", "formValidityChange", "fieldValueChange", "fields", "actions", "hideActions"], [3, "rowData", "group"]], template: function ThemeSettingsGraphSectionComponent_Template(rf, ctx) {
    if (rf & 1) {
      \u0275\u0275elementStart(0, "div", 1)(1, "div", 2);
      \u0275\u0275element(2, "fa-icon", 3);
      \u0275\u0275elementStart(3, "div", 4)(4, "div", 5)(5, "h2", 6);
      \u0275\u0275text(6, "Graph");
      \u0275\u0275elementEnd();
      \u0275\u0275conditionalCreate(7, ThemeSettingsGraphSectionComponent_Conditional_7_Template, 2, 1, "div", 7);
      \u0275\u0275elementEnd();
      \u0275\u0275elementStart(8, "span");
      \u0275\u0275text(9);
      \u0275\u0275elementEnd()()();
      \u0275\u0275conditionalCreate(10, ThemeSettingsGraphSectionComponent_Conditional_10_Template, 1, 3, "app-dynamic-form", 8);
      \u0275\u0275conditionalCreate(11, ThemeSettingsGraphSectionComponent_Conditional_11_Template, 1, 4, "app-grid", 9);
      \u0275\u0275elementEnd();
      \u0275\u0275template(12, ThemeSettingsGraphSectionComponent_ng_template_12_Template, 1, 2, "ng-template", null, 0, \u0275\u0275templateRefExtractor);
    }
    if (rf & 2) {
      \u0275\u0275advance(2);
      \u0275\u0275property("icon", ctx.faFill)("ngClass", \u0275\u0275pureFunction1(6, _c123, ctx.isFormEditable()));
      \u0275\u0275advance(5);
      \u0275\u0275conditional(!ctx.isFormEditable() && !ctx.createMode() ? 7 : -1);
      \u0275\u0275advance(2);
      \u0275\u0275textInterpolate(ctx.description);
      \u0275\u0275advance();
      \u0275\u0275conditional(ctx.isFormEditable() || ctx.createMode() && ctx.formFields.length ? 10 : -1);
      \u0275\u0275advance();
      \u0275\u0275conditional(!ctx.isFormEditable() && !ctx.createMode() ? 11 : -1);
    }
  }, dependencies: [
    DynamicFormComponent,
    FontAwesomeModule,
    FaIconComponent,
    CommonModule,
    NgClass,
    GridComponent,
    ThemeValueDisplayComponent
  ], encapsulation: 2 });
};
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(ThemeSettingsGraphSectionComponent, [{
    type: Component,
    args: [{ selector: "app-theme-settings-graph-section", imports: [
      DynamicFormComponent,
      FontAwesomeModule,
      CommonModule,
      GridComponent,
      ThemeValueDisplayComponent
    ], template: `<div class="card pt-2">
  <div class="mb-4 p-2 flex justify-start items-center">
    <fa-icon
      [icon]="faFill"
      class="!text-[2.5rem]"
      [ngClass]="{ 'icon-primary': isFormEditable() }"
    ></fa-icon>

    <div class="pl-6 flex-1">
      <div class="flex justify-between items-center">
        <h2 class="text-xl font-semibold m-0">Graph</h2>
        @if (!isFormEditable() && !createMode()) {
          <div class="icon-light">
            <span
              class="pi pi-pen-to-square action hover !text-2xl"
              [attr.aria-label]="'Edit theme graph details'"
              (click)="onEdit()"
              (keydown.enter)="onEdit()"
            ></span>
          </div>
        }
      </div>
      <span>{{ description }}</span>
    </div>
  </div>

  @if (isFormEditable() || (createMode() && formFields.length)) {
    <app-dynamic-form
      [fields]="formFields"
      [actions]="actions"
      [hideActions]="createMode()"
      (formSubmit)="onSubmit($event)"
      (formValidityChange)="onFormValidityChange($event)"
      (fieldValueChange)="onFieldValueChange($event)"
    >
    </app-dynamic-form>
  }

  @if (!isFormEditable() && !createMode()) {
    <app-grid
      [data]="themeDetails()"
      [columns]="columns"
      [showGridLines]="false"
      [hideHeader]="true"
      tableStyleClass="info-display !w-auto"
    ></app-grid>
  }
</div>

<ng-template #valueTemplate let-rowData>
  <app-theme-value-display [rowData]="rowData" [group]="group">
  </app-theme-value-display>
</ng-template>
` }]
  }], () => [], { valueTemplate: [{
    type: ViewChild,
    args: ["valueTemplate", { static: true }]
  }] });
})();
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && \u0275setClassDebugInfo(ThemeSettingsGraphSectionComponent, { className: "ThemeSettingsGraphSectionComponent", filePath: "src/app/features/administration/components/themes/theme-settings-graph-section/theme-settings-graph-section.component.ts", lineNumber: 44 });
})();

// src/app/features/administration/components/themes/theme-settings-loader-section/theme-settings-loader-section.component.ts
var _c066 = ["valueTemplate"];
var _c124 = (a0) => ({ "icon-primary": a0 });
function ThemeSettingsLoaderSectionComponent_Conditional_7_Template(rf, ctx) {
  if (rf & 1) {
    const _r1 = \u0275\u0275getCurrentView();
    \u0275\u0275elementStart(0, "div", 7)(1, "span", 10);
    \u0275\u0275listener("click", function ThemeSettingsLoaderSectionComponent_Conditional_7_Template_span_click_1_listener() {
      \u0275\u0275restoreView(_r1);
      const ctx_r1 = \u0275\u0275nextContext();
      return \u0275\u0275resetView(ctx_r1.onEdit());
    })("keydown.enter", function ThemeSettingsLoaderSectionComponent_Conditional_7_Template_span_keydown_enter_1_listener() {
      \u0275\u0275restoreView(_r1);
      const ctx_r1 = \u0275\u0275nextContext();
      return \u0275\u0275resetView(ctx_r1.onEdit());
    });
    \u0275\u0275elementEnd()();
  }
  if (rf & 2) {
    \u0275\u0275advance();
    \u0275\u0275attribute("aria-label", "Edit theme loader details");
  }
}
function ThemeSettingsLoaderSectionComponent_Conditional_10_Template(rf, ctx) {
  if (rf & 1) {
    const _r3 = \u0275\u0275getCurrentView();
    \u0275\u0275elementStart(0, "app-dynamic-form", 11);
    \u0275\u0275listener("formSubmit", function ThemeSettingsLoaderSectionComponent_Conditional_10_Template_app_dynamic_form_formSubmit_0_listener($event) {
      \u0275\u0275restoreView(_r3);
      const ctx_r1 = \u0275\u0275nextContext();
      return \u0275\u0275resetView(ctx_r1.onSubmit($event));
    })("formValidityChange", function ThemeSettingsLoaderSectionComponent_Conditional_10_Template_app_dynamic_form_formValidityChange_0_listener($event) {
      \u0275\u0275restoreView(_r3);
      const ctx_r1 = \u0275\u0275nextContext();
      return \u0275\u0275resetView(ctx_r1.onFormValidityChange($event));
    })("fieldValueChange", function ThemeSettingsLoaderSectionComponent_Conditional_10_Template_app_dynamic_form_fieldValueChange_0_listener($event) {
      \u0275\u0275restoreView(_r3);
      const ctx_r1 = \u0275\u0275nextContext();
      return \u0275\u0275resetView(ctx_r1.onFieldValueChange($event));
    });
    \u0275\u0275elementEnd();
  }
  if (rf & 2) {
    const ctx_r1 = \u0275\u0275nextContext();
    \u0275\u0275property("fields", ctx_r1.formFields)("actions", ctx_r1.actions)("hideActions", ctx_r1.createMode());
  }
}
function ThemeSettingsLoaderSectionComponent_Conditional_11_Template(rf, ctx) {
  if (rf & 1) {
    \u0275\u0275element(0, "app-grid", 9);
  }
  if (rf & 2) {
    const ctx_r1 = \u0275\u0275nextContext();
    \u0275\u0275property("data", ctx_r1.themeDetails())("columns", ctx_r1.columns)("showGridLines", false)("hideHeader", true);
  }
}
function ThemeSettingsLoaderSectionComponent_ng_template_12_Template(rf, ctx) {
  if (rf & 1) {
    \u0275\u0275element(0, "app-theme-value-display", 12);
  }
  if (rf & 2) {
    const rowData_r4 = ctx.$implicit;
    const ctx_r1 = \u0275\u0275nextContext();
    \u0275\u0275property("rowData", rowData_r4)("group", ctx_r1.group);
  }
}
var LOADER_THEME_PATHS = {
  STYLE: ["loader", "style"],
  FONT_COLOR: ["loader", "font", "color"]
};
var ThemeSettingsLoaderSectionComponent = class _ThemeSettingsLoaderSectionComponent extends ThemeSettingsSectionBase {
  valueTemplate;
  themeDetails = computed(() => {
    const themeDetails = this.entity();
    if (!isDefined(themeDetails))
      return [];
    const themeSettings = this.themeEngine.themeSettingsMergedWithDefault(themeDetails?.settings ?? {});
    const detailConfigs = this.createThemeDetailsFromConfig(this.getFieldConfigurations());
    return detailConfigs.map((config) => ({
      key: config.key,
      value: this.formatThemeValue(themeSettings, config)
    }));
  }, ...ngDevMode ? [{ debugName: "themeDetails" }] : []);
  constructor() {
    super("loader");
  }
  ngOnInit() {
    this.initializeColumns();
  }
  initializeColumns() {
    this.columns = [
      { field: "key", header: "", transform: "uppercase" },
      {
        field: "value",
        header: "",
        cellTemplate: this.valueTemplate
      }
    ];
  }
  getFieldConfigurations() {
    return [
      {
        id: "style",
        label: "Loader Style",
        path: LOADER_THEME_PATHS.STYLE,
        type: "dropdown",
        options: [
          { label: "Pulse", value: "pulse" },
          { label: "Rainbow", value: "rainbow" },
          { label: "Uneven Lines", value: "uneven-lines" },
          { label: "Spinner", value: "spinner" }
        ]
      },
      {
        id: "font.color",
        label: "Font Color",
        path: LOADER_THEME_PATHS.FONT_COLOR,
        type: "color",
        group: "loader"
      }
    ];
  }
  getFields(entity) {
    return this.createFormFieldsFromConfig(entity, this.getFieldConfigurations());
  }
  getUpdateMethod() {
    return this.operationRegistry.getOperation("theme", "update") ?? ((id) => this.entitiesService.updateTheme(id, {
      settings: {
        loader: this.formChanges
      }
    }));
  }
  static \u0275fac = function ThemeSettingsLoaderSectionComponent_Factory(__ngFactoryType__) {
    return new (__ngFactoryType__ || _ThemeSettingsLoaderSectionComponent)();
  };
  static \u0275cmp = /* @__PURE__ */ \u0275\u0275defineComponent({ type: _ThemeSettingsLoaderSectionComponent, selectors: [["app-theme-settings-loader-section"]], viewQuery: function ThemeSettingsLoaderSectionComponent_Query(rf, ctx) {
    if (rf & 1) {
      \u0275\u0275viewQuery(_c066, 7);
    }
    if (rf & 2) {
      let _t;
      \u0275\u0275queryRefresh(_t = \u0275\u0275loadQuery()) && (ctx.valueTemplate = _t.first);
    }
  }, features: [\u0275\u0275InheritDefinitionFeature], decls: 14, vars: 8, consts: [["valueTemplate", ""], [1, "card", "pt-2"], [1, "mb-4", "p-2", "flex", "justify-start", "items-center"], [1, "!text-[2.5rem]", 3, "icon", "ngClass"], [1, "pl-6", "flex-1"], [1, "flex", "justify-between", "items-center"], [1, "text-xl", "font-semibold", "m-0"], [1, "icon-light"], [3, "fields", "actions", "hideActions"], ["tableStyleClass", "info-display !w-auto", 3, "data", "columns", "showGridLines", "hideHeader"], [1, "pi", "pi-pen-to-square", "action", "hover", "!text-2xl", 3, "click", "keydown.enter"], [3, "formSubmit", "formValidityChange", "fieldValueChange", "fields", "actions", "hideActions"], [3, "rowData", "group"]], template: function ThemeSettingsLoaderSectionComponent_Template(rf, ctx) {
    if (rf & 1) {
      \u0275\u0275elementStart(0, "div", 1)(1, "div", 2);
      \u0275\u0275element(2, "fa-icon", 3);
      \u0275\u0275elementStart(3, "div", 4)(4, "div", 5)(5, "h2", 6);
      \u0275\u0275text(6, "Loader");
      \u0275\u0275elementEnd();
      \u0275\u0275conditionalCreate(7, ThemeSettingsLoaderSectionComponent_Conditional_7_Template, 2, 1, "div", 7);
      \u0275\u0275elementEnd();
      \u0275\u0275elementStart(8, "span");
      \u0275\u0275text(9);
      \u0275\u0275elementEnd()()();
      \u0275\u0275conditionalCreate(10, ThemeSettingsLoaderSectionComponent_Conditional_10_Template, 1, 3, "app-dynamic-form", 8);
      \u0275\u0275conditionalCreate(11, ThemeSettingsLoaderSectionComponent_Conditional_11_Template, 1, 4, "app-grid", 9);
      \u0275\u0275elementEnd();
      \u0275\u0275template(12, ThemeSettingsLoaderSectionComponent_ng_template_12_Template, 1, 2, "ng-template", null, 0, \u0275\u0275templateRefExtractor);
    }
    if (rf & 2) {
      \u0275\u0275advance(2);
      \u0275\u0275property("icon", ctx.faFill)("ngClass", \u0275\u0275pureFunction1(6, _c124, ctx.isFormEditable()));
      \u0275\u0275advance(5);
      \u0275\u0275conditional(!ctx.isFormEditable() && !ctx.createMode() ? 7 : -1);
      \u0275\u0275advance(2);
      \u0275\u0275textInterpolate(ctx.description);
      \u0275\u0275advance();
      \u0275\u0275conditional(ctx.isFormEditable() || ctx.createMode() && ctx.formFields.length ? 10 : -1);
      \u0275\u0275advance();
      \u0275\u0275conditional(!ctx.isFormEditable() && !ctx.createMode() ? 11 : -1);
    }
  }, dependencies: [
    DynamicFormComponent,
    FontAwesomeModule,
    FaIconComponent,
    CommonModule,
    NgClass,
    GridComponent,
    ThemeValueDisplayComponent
  ], encapsulation: 2 });
};
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(ThemeSettingsLoaderSectionComponent, [{
    type: Component,
    args: [{ selector: "app-theme-settings-loader-section", imports: [
      DynamicFormComponent,
      FontAwesomeModule,
      CommonModule,
      GridComponent,
      ThemeValueDisplayComponent
    ], template: `<div class="card pt-2">
  <div class="mb-4 p-2 flex justify-start items-center">
    <fa-icon
      [icon]="faFill"
      class="!text-[2.5rem]"
      [ngClass]="{ 'icon-primary': isFormEditable() }"
    ></fa-icon>

    <div class="pl-6 flex-1">
      <div class="flex justify-between items-center">
        <h2 class="text-xl font-semibold m-0">Loader</h2>
        @if (!isFormEditable() && !createMode()) {
          <div class="icon-light">
            <span
              class="pi pi-pen-to-square action hover !text-2xl"
              [attr.aria-label]="'Edit theme loader details'"
              (click)="onEdit()"
              (keydown.enter)="onEdit()"
            ></span>
          </div>
        }
      </div>
      <span>{{ description }}</span>
    </div>
  </div>

  @if (isFormEditable() || (createMode() && formFields.length)) {
    <app-dynamic-form
      [fields]="formFields"
      [actions]="actions"
      [hideActions]="createMode()"
      (formSubmit)="onSubmit($event)"
      (formValidityChange)="onFormValidityChange($event)"
      (fieldValueChange)="onFieldValueChange($event)"
    >
    </app-dynamic-form>
  }

  @if (!isFormEditable() && !createMode()) {
    <app-grid
      [data]="themeDetails()"
      [columns]="columns"
      [showGridLines]="false"
      [hideHeader]="true"
      tableStyleClass="info-display !w-auto"
    ></app-grid>
  }
</div>

<ng-template #valueTemplate let-rowData>
  <app-theme-value-display [rowData]="rowData" [group]="group">
  </app-theme-value-display>
</ng-template>
` }]
  }], () => [], { valueTemplate: [{
    type: ViewChild,
    args: ["valueTemplate", { static: true }]
  }] });
})();
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && \u0275setClassDebugInfo(ThemeSettingsLoaderSectionComponent, { className: "ThemeSettingsLoaderSectionComponent", filePath: "src/app/features/administration/components/themes/theme-settings-loader-section/theme-settings-loader-section.component.ts", lineNumber: 40 });
})();

// src/app/features/administration/factories/theme-section-config.factory.ts
var ThemeSectionConfigFactory = class _ThemeSectionConfigFactory {
  /**
   * Create sections for theme information
   * @param theme The theme object to display in the section
   * @returns An array of AdminDetailSection objects representing the theme information sections
   */
  createThemeInformationSections(theme) {
    return [
      {
        id: "theme-details",
        title: "Theme Details",
        component: ThemeDetailsSectionComponent,
        componentInputs: { entity: theme },
        category: "information",
        order: 10
      },
      {
        id: "theme-main-settings",
        title: "Main Settings",
        component: ThemeSettingsMainSectionComponent,
        componentInputs: { entity: theme },
        category: "information",
        order: 20
      },
      {
        id: "theme-colors",
        title: "Theme Colors",
        component: ThemeSettingsColorSectionComponent,
        componentInputs: { entity: theme },
        category: "information",
        order: 30
      },
      {
        id: "theme-content",
        title: "Theme Content",
        component: ThemeSettingsContentSectionComponent,
        componentInputs: { entity: theme },
        category: "information",
        order: 40
      },
      {
        id: "theme-navigation",
        title: "Theme Navigation",
        component: ThemeSettingsNavigationSectionComponent,
        componentInputs: { entity: theme },
        category: "information",
        order: 50
      },
      {
        id: "theme-top-navigation",
        title: "Theme Top Navigation",
        component: ThemeSettingsTopNavigationSectionComponent,
        componentInputs: { entity: theme },
        category: "information",
        order: 60
      },
      {
        id: "theme-header",
        title: "Theme Header",
        component: ThemeSettingsHeaderSectionComponent,
        componentInputs: { entity: theme },
        category: "information",
        order: 70
      },
      {
        id: "theme-footer",
        title: "Theme Footer",
        component: ThemeSettingsFooterSectionComponent,
        componentInputs: { entity: theme },
        category: "information",
        order: 80
      },
      {
        id: "theme-modal",
        title: "Theme Modal",
        component: ThemeSettingsModalSectionComponent,
        componentInputs: { entity: theme },
        category: "information",
        order: 90
      },
      {
        id: "theme-sidebar",
        title: "Theme Sidebar",
        component: ThemeSettingsSidebarSectionComponent,
        componentInputs: { entity: theme },
        category: "information",
        order: 100
      }
    ];
  }
  /**
   * Create sections for theme changes
   * @param theme The theme object to display in the section
   * @returns An array of AdminDetailSection objects representing the theme changes sections
   */
  createChangesSection(theme) {
    return [
      {
        id: "theme-changes",
        title: "Changes",
        component: FeedSectionComponent,
        componentInputs: {
          entity: theme
        },
        category: "feed",
        order: 10
      }
    ];
  }
  createControlsSection(theme) {
    return [
      {
        id: "theme-buttons",
        title: "Buttons",
        component: ThemeSettingsButtonSectionComponent,
        componentInputs: { entity: theme },
        category: "controls",
        order: 10
      },
      {
        id: "theme-inputs",
        title: "Inputs",
        component: ThemeSettingsInputSectionComponent,
        componentInputs: { entity: theme },
        category: "controls",
        order: 20
      },
      {
        id: "theme-tabs",
        title: "Tabs",
        component: ThemeSettingsTabSectionComponent,
        componentInputs: { entity: theme },
        category: "controls",
        order: 30
      },
      {
        id: "theme-accordion",
        title: "Accordion",
        component: ThemeSettingsAccordionSectionComponent,
        componentInputs: { entity: theme },
        category: "controls",
        order: 40
      },
      {
        id: "theme-tables",
        title: "Tables",
        component: ThemeSettingsTableSectionComponent,
        componentInputs: { entity: theme },
        category: "controls",
        order: 50
      },
      {
        id: "theme-trees",
        title: "Trees",
        component: ThemeSettingsTreeSectionComponent,
        componentInputs: { entity: theme },
        category: "controls",
        order: 60
      },
      {
        id: "theme-lists",
        title: "Lists",
        component: ThemeSettingsListSectionComponent,
        componentInputs: { entity: theme },
        category: "controls",
        order: 70
      },
      {
        id: "theme-feed",
        title: "Feed",
        component: ThemeSettingsFeedSectionComponent,
        componentInputs: {
          entity: theme
        },
        category: "controls",
        order: 80
      },
      {
        id: "theme-graphs",
        title: "Graphs",
        component: ThemeSettingsGraphSectionComponent,
        componentInputs: { entity: theme },
        category: "controls",
        order: 90
      },
      {
        id: "theme-loaders",
        title: "Loaders",
        component: ThemeSettingsLoaderSectionComponent,
        componentInputs: { entity: theme },
        category: "controls",
        order: 100
      }
    ];
  }
  /**
   * Create all theme sections in one call
   * @param theme The theme object to display in the sections
   * @returns An array of AdminDetailSection objects representing all theme sections
   */
  createAllThemeSections(theme) {
    return [
      ...this.createThemeInformationSections(theme),
      ...this.createControlsSection(theme),
      ...this.createChangesSection(theme)
    ];
  }
  static \u0275fac = function ThemeSectionConfigFactory_Factory(__ngFactoryType__) {
    return new (__ngFactoryType__ || _ThemeSectionConfigFactory)();
  };
  static \u0275prov = /* @__PURE__ */ \u0275\u0275defineInjectable({ token: _ThemeSectionConfigFactory, factory: _ThemeSectionConfigFactory.\u0275fac, providedIn: "root" });
};
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(ThemeSectionConfigFactory, [{
    type: Injectable,
    args: [{ providedIn: "root" }]
  }], null, null);
})();

// src/app/features/administration/components/cost-centres/cost-centre-details-section/cost-centre-details-section.component.ts
var _c067 = (a0) => ({ "icon-primary": a0 });
function CostCentreDetailsSectionComponent_Conditional_7_Template(rf, ctx) {
  if (rf & 1) {
    const _r1 = \u0275\u0275getCurrentView();
    \u0275\u0275elementStart(0, "div", 6)(1, "span", 9);
    \u0275\u0275listener("click", function CostCentreDetailsSectionComponent_Conditional_7_Template_span_click_1_listener() {
      \u0275\u0275restoreView(_r1);
      const ctx_r1 = \u0275\u0275nextContext();
      return \u0275\u0275resetView(ctx_r1.onEdit());
    })("keydown.enter", function CostCentreDetailsSectionComponent_Conditional_7_Template_span_keydown_enter_1_listener() {
      \u0275\u0275restoreView(_r1);
      const ctx_r1 = \u0275\u0275nextContext();
      return \u0275\u0275resetView(ctx_r1.onEdit());
    });
    \u0275\u0275elementEnd()();
  }
  if (rf & 2) {
    \u0275\u0275advance();
    \u0275\u0275attribute("aria-label", "Edit cost centre details");
  }
}
function CostCentreDetailsSectionComponent_Conditional_10_Template(rf, ctx) {
  if (rf & 1) {
    const _r3 = \u0275\u0275getCurrentView();
    \u0275\u0275elementStart(0, "app-dynamic-form", 10);
    \u0275\u0275listener("formSubmit", function CostCentreDetailsSectionComponent_Conditional_10_Template_app_dynamic_form_formSubmit_0_listener($event) {
      \u0275\u0275restoreView(_r3);
      const ctx_r1 = \u0275\u0275nextContext();
      return \u0275\u0275resetView(ctx_r1.onSubmit($event));
    })("formValidityChange", function CostCentreDetailsSectionComponent_Conditional_10_Template_app_dynamic_form_formValidityChange_0_listener($event) {
      \u0275\u0275restoreView(_r3);
      const ctx_r1 = \u0275\u0275nextContext();
      return \u0275\u0275resetView(ctx_r1.onFormValidityChange($event));
    })("formValueChange", function CostCentreDetailsSectionComponent_Conditional_10_Template_app_dynamic_form_formValueChange_0_listener($event) {
      \u0275\u0275restoreView(_r3);
      const ctx_r1 = \u0275\u0275nextContext();
      return \u0275\u0275resetView(ctx_r1.onFormValueChange($event));
    });
    \u0275\u0275elementEnd();
  }
  if (rf & 2) {
    const ctx_r1 = \u0275\u0275nextContext();
    \u0275\u0275property("fields", ctx_r1.formFields)("actions", ctx_r1.actions)("hideActions", ctx_r1.createMode());
  }
}
function CostCentreDetailsSectionComponent_Conditional_11_Template(rf, ctx) {
  if (rf & 1) {
    \u0275\u0275element(0, "app-grid", 8);
  }
  if (rf & 2) {
    const ctx_r1 = \u0275\u0275nextContext();
    \u0275\u0275property("data", ctx_r1.costCentreDetails())("columns", ctx_r1.columns)("showGridLines", false)("hideHeader", true);
  }
}
var CostCentreDetailsSectionComponent = class _CostCentreDetailsSectionComponent extends EntitySectionBaseComponent {
  ownerId = input(null, ...ngDevMode ? [{ debugName: "ownerId" }] : []);
  entitiesService = inject(EntitiesService);
  operationRegistry = inject(EntityOperationRegistryService);
  assetGroupingService = inject(AssetGroupingService);
  costCentreDetails = computed(() => {
    const costCentreDetails = this.entity();
    if (!isDefined(costCentreDetails))
      return [];
    return [{ key: "Name", value: costCentreDetails.name }];
  }, ...ngDevMode ? [{ debugName: "costCentreDetails" }] : []);
  faSitemap = faSitemap;
  costCentreGroups = [];
  constructor() {
    super();
    this.columns = [
      { field: "key", header: "", transform: "uppercase" },
      { field: "value", header: "" }
    ];
    effect(() => {
      const ownerId = this.entity()?.owner?.id ?? this.ownerId();
      if (isDefined(ownerId)) {
        this.fetchCostCentres(ownerId).then((groups) => {
          this.costCentreGroups = groups;
          this.updateFormFields();
        }).catch(() => {
        });
      }
    });
  }
  fetchCostCentres(ownerId) {
    return this.assetGroupingService.getCostCentres(ownerId);
  }
  updateFormFields() {
    const costCentre = this.entity();
    const parentOptions = [
      ...this.costCentreGroups.map((group) => ({
        label: group.name,
        value: group.id
      }))
    ];
    this.formFields = [
      createTextField("name", "Name", costCentre?.name, {
        name: "name",
        validations: [
          {
            name: "required",
            validator: Validators.required,
            message: "Name is required"
          }
        ]
      })
    ];
    if (this.createMode()) {
      this.formFields.unshift(createDropdownField("parent", "Parent", parentOptions, costCentre?.parent?.id, {
        placeholder: "Select Parent Group",
        validations: [
          {
            name: "required",
            validator: Validators.required,
            message: "Parent group is required"
          }
        ],
        props: {
          appendTo: "body"
        }
      }));
    }
  }
  getUpdateMethod() {
    return this.operationRegistry.getOperation("cost-centre", "update") ?? ((id, data) => this.entitiesService.updateCostCentre(id, data));
  }
  onFormValueChange(formData) {
    const transformedData = this.transformFormData(formData);
    this.formValueChange.emit(transformedData);
  }
  transformFormData(formData) {
    const transformedData = __spreadValues({}, formData);
    if (isDefined(transformedData["parent"])) {
      const parentId = transformedData["parent"];
      const parent = this.costCentreGroups?.find((option) => option.id === parentId);
      if (parent) {
        transformedData["parent"] = {
          id: parent.id,
          name: parent.name
        };
      } else if (parentId === "root") {
        transformedData["parent"] = null;
      }
    }
    return transformedData;
  }
  static \u0275fac = function CostCentreDetailsSectionComponent_Factory(__ngFactoryType__) {
    return new (__ngFactoryType__ || _CostCentreDetailsSectionComponent)();
  };
  static \u0275cmp = /* @__PURE__ */ \u0275\u0275defineComponent({ type: _CostCentreDetailsSectionComponent, selectors: [["app-cost-centre-details-section"]], inputs: { ownerId: [1, "ownerId"] }, features: [\u0275\u0275InheritDefinitionFeature], decls: 12, vars: 7, consts: [[1, "card", "pt-2"], [1, "mb-4", "p-2", "flex", "justify-start", "items-center"], [1, "!text-[2.5rem]", 3, "icon", "ngClass"], [1, "pl-6", "flex-1"], [1, "flex", "justify-between", "items-center"], [1, "text-xl", "font-semibold", "m-0"], [1, "icon-light"], [3, "fields", "actions", "hideActions"], ["tableStyleClass", "info-display !w-auto", 3, "data", "columns", "showGridLines", "hideHeader"], [1, "pi", "pi-pen-to-square", "action", "hover", "!text-2xl", 3, "click", "keydown.enter"], [3, "formSubmit", "formValidityChange", "formValueChange", "fields", "actions", "hideActions"]], template: function CostCentreDetailsSectionComponent_Template(rf, ctx) {
    if (rf & 1) {
      \u0275\u0275elementStart(0, "div", 0)(1, "div", 1);
      \u0275\u0275element(2, "fa-icon", 2);
      \u0275\u0275elementStart(3, "div", 3)(4, "div", 4)(5, "h2", 5);
      \u0275\u0275text(6, "Cost Centre Details");
      \u0275\u0275elementEnd();
      \u0275\u0275conditionalCreate(7, CostCentreDetailsSectionComponent_Conditional_7_Template, 2, 1, "div", 6);
      \u0275\u0275elementEnd();
      \u0275\u0275elementStart(8, "span");
      \u0275\u0275text(9, "The following information is required in order to identify your cost centre.");
      \u0275\u0275elementEnd()()();
      \u0275\u0275conditionalCreate(10, CostCentreDetailsSectionComponent_Conditional_10_Template, 1, 3, "app-dynamic-form", 7);
      \u0275\u0275conditionalCreate(11, CostCentreDetailsSectionComponent_Conditional_11_Template, 1, 4, "app-grid", 8);
      \u0275\u0275elementEnd();
    }
    if (rf & 2) {
      \u0275\u0275advance(2);
      \u0275\u0275property("icon", ctx.faSitemap)("ngClass", \u0275\u0275pureFunction1(5, _c067, ctx.isFormEditable()));
      \u0275\u0275advance(5);
      \u0275\u0275conditional(!ctx.isFormEditable() && !ctx.createMode() ? 7 : -1);
      \u0275\u0275advance(3);
      \u0275\u0275conditional(ctx.isFormEditable() || ctx.createMode() && ctx.formFields.length ? 10 : -1);
      \u0275\u0275advance();
      \u0275\u0275conditional(!ctx.isFormEditable() && !ctx.createMode() ? 11 : -1);
    }
  }, dependencies: [
    CommonModule,
    NgClass,
    ButtonModule,
    InputTextModule,
    GridComponent,
    DynamicFormComponent,
    FontAwesomeModule,
    FaIconComponent
  ], encapsulation: 2 });
};
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(CostCentreDetailsSectionComponent, [{
    type: Component,
    args: [{ selector: "app-cost-centre-details-section", imports: [
      CommonModule,
      ButtonModule,
      InputTextModule,
      GridComponent,
      DynamicFormComponent,
      FontAwesomeModule
    ], template: `<div class="card pt-2">
  <div class="mb-4 p-2 flex justify-start items-center">
    <fa-icon
      [icon]="faSitemap"
      class="!text-[2.5rem]"
      [ngClass]="{ 'icon-primary': isFormEditable() }"
    ></fa-icon>

    <div class="pl-6 flex-1">
      <div class="flex justify-between items-center">
        <h2 class="text-xl font-semibold m-0">Cost Centre Details</h2>
        @if (!isFormEditable() && !createMode()) {
          <div class="icon-light">
            <span
              class="pi pi-pen-to-square action hover !text-2xl"
              [attr.aria-label]="'Edit cost centre details'"
              (click)="onEdit()"
              (keydown.enter)="onEdit()"
            ></span>
          </div>
        }
      </div>
      <span
        >The following information is required in order to identify your cost
        centre.</span
      >
    </div>
  </div>

  @if (isFormEditable() || (createMode() && formFields.length)) {
    <app-dynamic-form
      [fields]="formFields"
      [actions]="actions"
      [hideActions]="createMode()"
      (formSubmit)="onSubmit($event)"
      (formValidityChange)="onFormValidityChange($event)"
      (formValueChange)="onFormValueChange($event)"
    >
    </app-dynamic-form>
  }

  @if (!isFormEditable() && !createMode()) {
    <app-grid
      [data]="costCentreDetails()"
      [columns]="columns"
      [showGridLines]="false"
      [hideHeader]="true"
      tableStyleClass="info-display !w-auto"
    ></app-grid>
  }
</div>
` }]
  }], () => [], { ownerId: [{ type: Input, args: [{ isSignal: true, alias: "ownerId", required: false }] }] });
})();
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && \u0275setClassDebugInfo(CostCentreDetailsSectionComponent, { className: "CostCentreDetailsSectionComponent", filePath: "src/app/features/administration/components/cost-centres/cost-centre-details-section/cost-centre-details-section.component.ts", lineNumber: 43 });
})();

// src/app/features/administration/components/shared/contacts-section/contacts-section.component.ts
var _c068 = ["iconTemplate"];
var _c125 = (a0) => ({ "icon-primary": a0 });
function ContactsSectionComponent_Conditional_7_Template(rf, ctx) {
  if (rf & 1) {
    const _r1 = \u0275\u0275getCurrentView();
    \u0275\u0275elementStart(0, "div", 6)(1, "span", 9);
    \u0275\u0275listener("click", function ContactsSectionComponent_Conditional_7_Template_span_click_1_listener() {
      \u0275\u0275restoreView(_r1);
      const ctx_r1 = \u0275\u0275nextContext();
      return \u0275\u0275resetView(ctx_r1.onEdit());
    })("keydown.enter", function ContactsSectionComponent_Conditional_7_Template_span_keydown_enter_1_listener() {
      \u0275\u0275restoreView(_r1);
      const ctx_r1 = \u0275\u0275nextContext();
      return \u0275\u0275resetView(ctx_r1.onEdit());
    });
    \u0275\u0275elementEnd()();
  }
  if (rf & 2) {
    \u0275\u0275advance();
    \u0275\u0275attribute("aria-label", "Edit contact details");
  }
}
function ContactsSectionComponent_Conditional_10_Template(rf, ctx) {
  if (rf & 1) {
    const _r3 = \u0275\u0275getCurrentView();
    \u0275\u0275elementStart(0, "app-dynamic-form", 10);
    \u0275\u0275listener("formSubmit", function ContactsSectionComponent_Conditional_10_Template_app_dynamic_form_formSubmit_0_listener($event) {
      \u0275\u0275restoreView(_r3);
      const ctx_r1 = \u0275\u0275nextContext();
      return \u0275\u0275resetView(ctx_r1.onSubmit($event));
    })("formValidityChange", function ContactsSectionComponent_Conditional_10_Template_app_dynamic_form_formValidityChange_0_listener($event) {
      \u0275\u0275restoreView(_r3);
      const ctx_r1 = \u0275\u0275nextContext();
      return \u0275\u0275resetView(ctx_r1.onFormValidityChange($event));
    })("formValueChange", function ContactsSectionComponent_Conditional_10_Template_app_dynamic_form_formValueChange_0_listener($event) {
      \u0275\u0275restoreView(_r3);
      const ctx_r1 = \u0275\u0275nextContext();
      return \u0275\u0275resetView(ctx_r1.onFormValueChange($event));
    });
    \u0275\u0275elementEnd();
  }
  if (rf & 2) {
    const ctx_r1 = \u0275\u0275nextContext();
    \u0275\u0275property("fields", ctx_r1.formFields)("actions", ctx_r1.actions)("hideActions", ctx_r1.createMode());
  }
}
function ContactsSectionComponent_Conditional_11_Template(rf, ctx) {
  if (rf & 1) {
    \u0275\u0275element(0, "app-grid", 8);
  }
  if (rf & 2) {
    const ctx_r1 = \u0275\u0275nextContext();
    \u0275\u0275property("data", ctx_r1.contactDetails())("columns", ctx_r1.columns)("showGridLines", false)("hideHeader", true);
  }
}
var ContactsSectionComponent = class _ContactsSectionComponent extends EntitySectionBaseComponent {
  entityId = input.required(...ngDevMode ? [{ debugName: "entityId" }] : []);
  iconTemplate;
  entitiesService = inject(EntitiesService);
  utilityService = inject(UtilityService);
  selectOptionsLoaded = signal(false, ...ngDevMode ? [{ debugName: "selectOptionsLoaded" }] : []);
  contactDetails = computed(() => {
    const contacts = this.entity()?.contacts;
    if (!isDefined(contacts))
      return [];
    return contacts.flatMap((contact) => {
      const details = [];
      if (isDefined(contact.name))
        details.push(`Name: ${contact.name}`);
      if (isDefined(contact.emailAddress))
        details.push(`Email: ${contact.emailAddress}`);
      if (isDefined(contact.phoneMobile))
        details.push(`Mobile: ${contact.phoneMobile}`);
      if (isDefined(contact.phoneOffice))
        details.push(`Office: ${contact.phoneOffice}`);
      if (isDefined(contact.notes))
        details.push(`Notes: ${contact.notes}`);
      const additionalInfo = details.length > 0 ? `
${details.join("\n")}` : "";
      return [{ key: "", value: additionalInfo }];
    });
  }, ...ngDevMode ? [{ debugName: "contactDetails" }] : []);
  contacts = [];
  showModal = false;
  contactTypes = [
    "owner",
    "emergency",
    "administrative",
    "technical",
    "operational",
    "management"
  ];
  constructor() {
    super();
    effect(() => {
      const contacts = this.entity()?.contacts;
      if (contacts) {
        this.contacts = contacts;
        this.updateFormFields();
      }
    });
  }
  ngAfterViewInit() {
    super.ngAfterViewInit();
    this.columns = [
      {
        field: "key",
        header: "",
        transform: "uppercase",
        cellTemplate: this.iconTemplate
      },
      { field: "value", header: "", transform: "whitespace-pre-line" }
    ];
  }
  updateFormFields() {
    const contactsModalConfig = {
      modalComponent: ModalListFormComponent,
      modalTitle: "Contact Details",
      defaultItemProvider: () => ({
        id: v4_default(),
        name: "",
        type: "owner",
        emailAddress: "",
        phoneMobile: "",
        phoneOffice: "",
        notes: ""
      }),
      listItemFormatter: (item) => {
        const details = [];
        if (isDefined(item.name))
          details.push(`Name: ${item.name}`);
        if (isDefined(item.emailAddress))
          details.push(`Email: ${item.emailAddress}`);
        if (isDefined(item.phoneMobile))
          details.push(`Mobile: ${item.phoneMobile}`);
        if (isDefined(item.phoneOffice))
          details.push(`Office: ${item.phoneOffice}`);
        if (isDefined(item.notes))
          details.push(`Notes: ${item.notes}`);
        const additionalInfo = details.length > 0 ? `
${details.join("\n")}` : "";
        return {
          id: item.id,
          display: `${this.utilityService.toTitleCase(item.type)}: ${item.name}${additionalInfo}`,
          icon: "pi pi-id-card"
        };
      },
      modalFields: (_item) => {
        return [
          createTextField("id", "ID", _item?.id, {
            name: "id",
            hidden: true
          }),
          createTextField("name", "Name", "", {
            name: "name",
            validations: [
              {
                name: "required",
                validator: Validators.required,
                message: "Name is required"
              }
            ]
          }),
          createDropdownField("type", "Type", this.contactTypes.map((type) => ({
            label: this.utilityService.toTitleCase(type),
            value: type
          })), "", {
            name: "type",
            props: {
              appendTo: "body"
            }
          }),
          createTextField("emailAddress", "Email", "", {
            name: "emailAddress",
            validations: [
              {
                name: "email",
                validator: Validators.email,
                message: "Invalid email format"
              }
            ]
          }),
          createTextField("phoneMobile", "Mobile", "", {
            name: "phoneMobile",
            validations: [
              {
                name: "mobile",
                validator: mobileValidator(),
                message: "Invalid mobile number (10-15 digits required)"
              }
            ]
          }),
          createTextField("phoneOffice", "Phone", "", {
            name: "phoneOffice",
            validations: [
              {
                name: "phone",
                validator: phoneValidator(),
                message: "Invalid phone number (7-15 digits required)"
              }
            ]
          }),
          createTextField("notes", "Notes", "", {
            name: "notes"
          })
        ];
      },
      subHeader: "Complete the following fields describing the contact."
    };
    this.formFields = [
      createModalListField("contacts", "Contacts", this.contacts, {
        name: "contacts",
        props: {
          modalConfig: contactsModalConfig
        }
      })
    ];
  }
  getUpdateMethod() {
    if (this.entityType() === "cost-centre") {
      return (id, payload) => this.entitiesService.updateCostCentre(id, payload);
    }
    throw new Error(`Update for '${this.entityType()}' not yet supported`);
  }
  onFormValueChange(formData) {
    this.formValueChange.emit({
      contacts: formData
    });
  }
  onClose() {
    this.showModal = false;
  }
  static \u0275fac = function ContactsSectionComponent_Factory(__ngFactoryType__) {
    return new (__ngFactoryType__ || _ContactsSectionComponent)();
  };
  static \u0275cmp = /* @__PURE__ */ \u0275\u0275defineComponent({ type: _ContactsSectionComponent, selectors: [["app-contacts-section"]], viewQuery: function ContactsSectionComponent_Query(rf, ctx) {
    if (rf & 1) {
      \u0275\u0275viewQuery(_c068, 7);
    }
    if (rf & 2) {
      let _t;
      \u0275\u0275queryRefresh(_t = \u0275\u0275loadQuery()) && (ctx.iconTemplate = _t.first);
    }
  }, inputs: { entityId: [1, "entityId"] }, features: [\u0275\u0275InheritDefinitionFeature], decls: 12, vars: 7, consts: [[1, "card", "pt-2"], [1, "mb-4", "p-2", "flex", "justify-start", "items-center"], [1, "pi", "pi-id-card", "!text-[2.5rem]", 3, "ngClass"], [1, "pl-6", "flex-1"], [1, "flex", "justify-between", "items-center"], [1, "text-xl", "font-semibold", "m-0"], [1, "icon-light"], [3, "fields", "actions", "hideActions"], ["tableStyleClass", "info-display !w-auto", 3, "data", "columns", "showGridLines", "hideHeader"], [1, "pi", "pi-pen-to-square", "action", "hover", "!text-2xl", 3, "click", "keydown.enter"], [3, "formSubmit", "formValidityChange", "formValueChange", "fields", "actions", "hideActions"]], template: function ContactsSectionComponent_Template(rf, ctx) {
    if (rf & 1) {
      \u0275\u0275elementStart(0, "div", 0)(1, "div", 1);
      \u0275\u0275element(2, "span", 2);
      \u0275\u0275elementStart(3, "div", 3)(4, "div", 4)(5, "h2", 5);
      \u0275\u0275text(6, "Contact Details");
      \u0275\u0275elementEnd();
      \u0275\u0275conditionalCreate(7, ContactsSectionComponent_Conditional_7_Template, 2, 1, "div", 6);
      \u0275\u0275elementEnd();
      \u0275\u0275elementStart(8, "span");
      \u0275\u0275text(9, "Specify contact information");
      \u0275\u0275elementEnd()()();
      \u0275\u0275conditionalCreate(10, ContactsSectionComponent_Conditional_10_Template, 1, 3, "app-dynamic-form", 7);
      \u0275\u0275conditionalCreate(11, ContactsSectionComponent_Conditional_11_Template, 1, 4, "app-grid", 8);
      \u0275\u0275elementEnd();
    }
    if (rf & 2) {
      \u0275\u0275advance(2);
      \u0275\u0275property("ngClass", \u0275\u0275pureFunction1(5, _c125, ctx.isFormEditable()));
      \u0275\u0275attribute("aria-label", "id card icon");
      \u0275\u0275advance(5);
      \u0275\u0275conditional(!ctx.isFormEditable() && !ctx.createMode() ? 7 : -1);
      \u0275\u0275advance(3);
      \u0275\u0275conditional(ctx.isFormEditable() || ctx.createMode() && ctx.formFields.length ? 10 : -1);
      \u0275\u0275advance();
      \u0275\u0275conditional(!ctx.isFormEditable() && !ctx.createMode() ? 11 : -1);
    }
  }, dependencies: [CommonModule, NgClass, GridComponent, DynamicFormComponent], encapsulation: 2 });
};
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(ContactsSectionComponent, [{
    type: Component,
    args: [{ selector: "app-contacts-section", imports: [CommonModule, GridComponent, DynamicFormComponent], template: `<div class="card pt-2">
  <div class="mb-4 p-2 flex justify-start items-center">
    <span
      class="pi pi-id-card !text-[2.5rem]"
      [ngClass]="{ 'icon-primary': isFormEditable() }"
      [attr.aria-label]="'id card icon'"
    ></span>

    <div class="pl-6 flex-1">
      <div class="flex justify-between items-center">
        <h2 class="text-xl font-semibold m-0">Contact Details</h2>
        @if (!isFormEditable() && !createMode()) {
          <div class="icon-light">
            <span
              class="pi pi-pen-to-square action hover !text-2xl"
              [attr.aria-label]="'Edit contact details'"
              (click)="onEdit()"
              (keydown.enter)="onEdit()"
            ></span>
          </div>
        }
      </div>
      <span>Specify contact information</span>
    </div>
  </div>

  @if (isFormEditable() || (createMode() && formFields.length)) {
    <app-dynamic-form
      [fields]="formFields"
      [actions]="actions"
      [hideActions]="createMode()"
      (formSubmit)="onSubmit($event)"
      (formValidityChange)="onFormValidityChange($event)"
      (formValueChange)="onFormValueChange($event)"
    >
    </app-dynamic-form>
  }

  @if (!isFormEditable() && !createMode()) {
    <app-grid
      [data]="contactDetails()"
      [columns]="columns"
      [showGridLines]="false"
      [hideHeader]="true"
      tableStyleClass="info-display !w-auto"
    ></app-grid>
  }
</div>
` }]
  }], () => [], { entityId: [{ type: Input, args: [{ isSignal: true, alias: "entityId", required: true }] }], iconTemplate: [{
    type: ViewChild,
    args: ["iconTemplate", { static: true }]
  }] });
})();
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && \u0275setClassDebugInfo(ContactsSectionComponent, { className: "ContactsSectionComponent", filePath: "src/app/features/administration/components/shared/contacts-section/contacts-section.component.ts", lineNumber: 47 });
})();

// src/app/features/administration/components/shared/asset-list-section/asset-list-section.component.ts
var AssetListSectionComponent = class _AssetListSectionComponent extends EntitySectionBaseComponent {
  entity = input(null, ...ngDevMode ? [{ debugName: "entity" }] : []);
  groupId = input(null, ...ngDevMode ? [{ debugName: "groupId" }] : []);
  groupingEntityType = input("Group", ...ngDevMode ? [{ debugName: "groupingEntityType" }] : []);
  assetLinkField = input.required(...ngDevMode ? [{ debugName: "assetLinkField" }] : []);
  index = input(null, ...ngDevMode ? [{ debugName: "index" }] : []);
  formatter = input(null, ...ngDevMode ? [{ debugName: "formatter" }] : []);
  getGroupingEntitiesFn = input.required(...ngDevMode ? [{ debugName: "getGroupingEntitiesFn" }] : []);
  getAvailableAssetsFn = input.required(...ngDevMode ? [{ debugName: "getAvailableAssetsFn" }] : []);
  entitiesService = inject(EntitiesService);
  utilityService = inject(UtilityService);
  cdr = inject(ChangeDetectorRef);
  cacheService = inject(RequestCacheService);
  arrayLinkFields = ["categories", "groups"];
  confirmationService = inject(ConfirmationService);
  handleFormSubmit(form) {
    switch (this.modalType) {
      case "move":
        this.handleAssetMove(form);
        break;
      case "add":
        this.handleAssetAdd(form);
        break;
      case "delete":
        if (this.selectedAsset) {
          this.handleAssetDelete(this.selectedAsset);
        }
    }
  }
  handleAssetMove(form) {
    if (isNullOrUndefined(this.selectedAsset) || isNullOrUndefined(form))
      return;
    const currentAssetLinkField = this.assetLinkField();
    const assetId = this.selectedAsset.id;
    const selectedGroupId = form.get("group")?.value;
    if (isNullOrUndefined(selectedGroupId) || isEmpty(selectedGroupId))
      return;
    const groupObject = this.groupingOptions.find((g) => g.id === selectedGroupId);
    if (groupObject) {
      if (this.arrayLinkFields.includes(currentAssetLinkField)) {
        this.entitiesService.getAsset(assetId).subscribe((asset) => {
          const existingItems = asset[currentAssetLinkField] ?? [];
          const currentEntityId = this.entity()?.id;
          const newItems = existingItems.filter((item) => item.id !== currentEntityId);
          if (!newItems.some((item) => item?.id === groupObject.id)) {
            newItems.push(groupObject);
          }
          this.updateAsset(assetId, {
            [currentAssetLinkField]: newItems
          });
        });
      } else {
        const payload = { [currentAssetLinkField]: groupObject };
        this.updateAsset(assetId, payload);
      }
    } else {
      console.error("Selected group not found in grouping options list.");
    }
  }
  handleAssetAdd(form) {
    if (isNullOrUndefined(form))
      return;
    const currentAssetLinkField = this.assetLinkField();
    const assetIdToAdd = form.get("asset")?.value;
    const currentEntity = this.entity();
    const currentEntityObject = currentEntity ? { id: currentEntity.id, name: currentEntity.name } : null;
    if (!currentEntityObject || isNullOrUndefined(currentEntityObject.id) || isEmpty(currentEntityObject.id) || isNullOrUndefined(assetIdToAdd) || isEmpty(assetIdToAdd))
      return;
    if (this.arrayLinkFields.includes(currentAssetLinkField)) {
      this.entitiesService.getAsset(assetIdToAdd).subscribe((asset) => {
        const newEntity = currentEntityObject;
        const existingItems = asset[currentAssetLinkField] ?? [];
        const index = this.index() ?? 0;
        const newItems = [...existingItems];
        while (newItems.length <= index) {
          newItems.push(null);
        }
        newItems[index] = newEntity;
        this.updateAsset(assetIdToAdd, {
          [currentAssetLinkField]: newItems
        });
      });
    } else {
      const payload = { [currentAssetLinkField]: currentEntityObject };
      this.updateAsset(assetIdToAdd, payload);
    }
  }
  handleAssetDelete(asset) {
    if (isNullOrUndefined(asset) || isEmpty(asset.id))
      return;
    const currentAssetLinkField = this.assetLinkField();
    const currentEntityId = this.entity()?.id;
    const index = this.index();
    if (isNullOrUndefined(currentEntityId) || isEmpty(currentEntityId))
      return;
    if (this.arrayLinkFields.includes(currentAssetLinkField)) {
      this.entitiesService.getAsset(asset.id).subscribe((assetDetails) => {
        const existingItems = assetDetails[currentAssetLinkField] ?? [];
        const updatedItems = existingItems.map((item) => item?.id === currentEntityId ? null : item);
        if (index !== null && index >= 0) {
          const itemFound = existingItems.some((item) => item?.id === currentEntityId);
          if (!itemFound) {
            while (updatedItems.length <= index) {
              updatedItems.push(null);
            }
            updatedItems[index] = null;
          }
        }
        this.updateAsset(asset.id, {
          [currentAssetLinkField]: updatedItems
        });
      });
    } else {
      this.updateAsset(asset.id, {
        [currentAssetLinkField]: null
      });
    }
  }
  actions = [
    {
      label: "Cancel",
      action: () => {
        this.onClose();
      },
      severity: "secondary"
    },
    {
      label: "Ok",
      action: (form) => {
        this.handleFormSubmit(form);
      },
      severity: "primary",
      disabled: (form) => isNullOrUndefined(form) || form.pristine
    }
  ];
  assetList = [];
  selectedAsset = null;
  groupingOptions = [];
  availableAssetsForLinking = [];
  modalType = null;
  get isModalVisible() {
    return this.modalType !== null;
  }
  get modalHeader() {
    switch (this.modalType) {
      case "move":
        return `Move To Different ${this.groupingEntityType()}`;
      case "add":
        return "Add Asset";
      case "delete":
        return "Delete Asset";
      default:
        return "";
    }
  }
  constructor() {
    super();
    effect(() => {
      const ownerId = this.entity()?.owner?.id;
      const currentGroupIdRqlPath = this.groupId();
      const currentEntityId = this.entity()?.id;
      if (isNullOrUndefined(ownerId) || isNullOrUndefined(currentGroupIdRqlPath) || isNullOrUndefined(currentEntityId)) {
        this.assetList = [];
        this.cdr.markForCheck();
        return;
      }
      const filters = {
        state: {
          value: "deleted",
          operator: "!=",
          wrap: true
        },
        [currentGroupIdRqlPath]: {
          value: currentEntityId,
          operator: "="
        }
      };
      const rqlFilter = this.utilityService.constructRqlFilter(filters);
      return this.cacheService.getOrFetch(`assets-${ownerId}-${rqlFilter}`, () => this.fetchAssets(ownerId, `${rqlFilter}/*`), 3e3).subscribe((assets) => {
        this.assetList = assets;
        this.cdr.markForCheck();
      });
    });
  }
  ngOnInit() {
    const owner = this.entity()?.owner?.id;
    const currentEntityId = this.entity()?.id;
    this.columns = [
      {
        field: "name",
        header: "Name",
        filter: true,
        filterType: "text",
        filterMatchMode: "contains",
        transform: "text-ellipsis"
      },
      {
        field: this.assetLinkField(),
        // Placeholder, actual field on AssetListItem might vary
        header: this.groupingEntityType() ?? "Group",
        // Dynamic header
        valueGetter: (rowData) => {
          const formatter = this.formatter();
          if (formatter) {
            return formatter(rowData);
          }
          const linkField = this.assetLinkField();
          const asset = rowData;
          const index = this.index();
          if (isDefined(asset) && typeof asset === "object" && Object.hasOwn(asset, linkField)) {
            const linkedValue = asset[linkField];
            if (this.arrayLinkFields.includes(linkField) && Array.isArray(linkedValue) && index !== null) {
              const linkedEntity = linkedValue[index];
              return linkedEntity?.name ?? "";
            } else if (!this.arrayLinkFields.includes(linkField)) {
              const linkedEntity = linkedValue;
              return linkedEntity?.name ?? "";
            }
          }
          return "";
        },
        filter: true,
        filterType: "multiselect",
        filterMatchMode: "in",
        filterConfig: {
          type: "multiselect",
          options: []
          // These options could be dynamically populated based on groupingOptions
        }
      }
    ];
    if (typeof owner === "string" && owner) {
      const groupEntitiesFn = this.getGroupingEntitiesFn();
      groupEntitiesFn(owner).then((groups) => {
        this.groupingOptions = groups;
        if (this.modalType === "move")
          this.updateFormFields();
        this.cdr.markForCheck();
      }).catch((error) => {
        console.error(`Failed to load ${this.groupingEntityType()} groups:`, error);
        this.groupingOptions = [];
        this.cdr.markForCheck();
      });
      const availableAssetsFn = this.getAvailableAssetsFn();
      availableAssetsFn(owner, currentEntityId).then((assets) => {
        this.availableAssetsForLinking = assets;
        if (this.modalType === "add")
          this.updateFormFields();
        this.cdr.markForCheck();
      }).catch((error) => {
        console.error("Failed to load available assets for linking:", error);
        this.availableAssetsForLinking = [];
        this.cdr.markForCheck();
      });
    } else {
      console.warn("Owner ID is not available or invalid, cannot fetch grouping entities or available assets.");
      this.groupingOptions = [];
      this.availableAssetsForLinking = [];
      this.cdr.markForCheck();
    }
  }
  fetchAssets(ownerId, filter) {
    return this.entitiesService.listAssets(ownerId, 0, DEFAULT_LIST_SIZE, "name", filter).pipe(map((response) => response.items));
  }
  updateFormFields() {
    const groupDropdownOptions = (this.groupingOptions ?? []).map((g) => ({
      label: g.name,
      value: g.id
    }));
    const assetDropdownOptions = (this.availableAssetsForLinking ?? []).map((a) => ({
      label: a.name,
      value: a.id
    }));
    switch (this.modalType) {
      case "move":
        this.formFields = [
          createDropdownField("group", `${this.groupingEntityType()}`, groupDropdownOptions, "", {
            layout: "horizontal",
            labelWidth: "1/3",
            name: "group",
            props: {
              appendTo: "body"
            }
          })
        ];
        break;
      case "add":
        this.formFields = [
          createDropdownField("asset", `Asset`, assetDropdownOptions, "", {
            layout: "horizontal",
            labelWidth: "1/3",
            name: "asset",
            props: {
              appendTo: "body"
            }
          })
        ];
        break;
      default:
        this.formFields = [];
        break;
    }
    this.cdr.markForCheck();
  }
  updateAsset(id, data) {
    this.entitiesService.updateAsset(id, data).subscribe({
      next: () => {
        this.broadcastService.broadcast("entity-updated", {
          id,
          changes: data,
          entityType: "asset",
          parentId: this.entity()?.id,
          groupingType: this.groupingEntityType()
        });
        this.modalType = null;
        const ownerId = this.entity()?.owner?.id;
        const currentGroupIdRqlPath = this.groupId();
        const currentEntityId = this.entity()?.id;
        if (typeof ownerId === "string" && ownerId && typeof currentGroupIdRqlPath === "string" && currentGroupIdRqlPath && typeof currentEntityId === "string" && currentEntityId) {
          const filters = {
            state: { value: "deleted", operator: "!=", wrap: true },
            [currentGroupIdRqlPath]: { value: currentEntityId, operator: "=" }
          };
          const rqlFilter = this.utilityService.constructRqlFilter(filters);
          this.fetchAssets(ownerId, `${rqlFilter}/*`).subscribe((assets) => {
            this.assetList = assets;
            this.cdr.markForCheck();
          });
        }
        const availableAssetsFn = this.getAvailableAssetsFn();
        if (typeof ownerId === "string" && ownerId) {
          availableAssetsFn(ownerId, currentEntityId).then((assets) => {
            this.availableAssetsForLinking = assets;
            this.cdr.markForCheck();
          }).catch((error) => {
            console.error("Error refreshing available assets after update:", error);
          });
        }
        this.cdr.markForCheck();
      },
      error: (err) => {
        console.error("Failed to update asset:", err);
      }
    });
  }
  confirmAssetMove() {
    this.modalType = "move";
    this.updateFormFields();
  }
  confirmAssetAdd() {
    this.modalType = "add";
    this.updateFormFields();
  }
  confirmAssetDelete() {
    this.confirmationService.confirm({
      message: `Are you sure you want to delete the asset "${this.selectedAsset?.name}"?`,
      header: "Confirm Delete",
      rejectButtonProps: {
        label: "No",
        severity: "secondary"
      },
      accept: () => {
        this.handleAssetDelete(this.selectedAsset);
      }
    });
  }
  onClose() {
    this.modalType = null;
    this.selectedAsset = null;
    this.updateFormFields();
  }
  handleRowSelect(event) {
    if (isEmpty(event) || isEmpty(event.data))
      return;
    this.selectedAsset = event.data;
  }
  handleRowUnselect() {
    this.selectedAsset = null;
  }
  static \u0275fac = function AssetListSectionComponent_Factory(__ngFactoryType__) {
    return new (__ngFactoryType__ || _AssetListSectionComponent)();
  };
  static \u0275cmp = /* @__PURE__ */ \u0275\u0275defineComponent({ type: _AssetListSectionComponent, selectors: [["app-asset-list-section"]], inputs: { entity: [1, "entity"], groupId: [1, "groupId"], groupingEntityType: [1, "groupingEntityType"], assetLinkField: [1, "assetLinkField"], index: [1, "index"], formatter: [1, "formatter"], getGroupingEntitiesFn: [1, "getGroupingEntitiesFn"], getAvailableAssetsFn: [1, "getAvailableAssetsFn"] }, features: [\u0275\u0275InheritDefinitionFeature], decls: 9, vars: 16, consts: [[1, "flex", "flex-col", "h-full", "w-full", "overflow-hidden"], [1, "p-4", "content-header", "flex-none", "w-full"], [1, "flex", "justify-end", "items-center"], [1, "flex-none", "flex", "space-x-4"], ["type", "button", "pTooltip", "Add", "tooltipPosition", "bottom", "aria-label", "Add new item", 1, "pi", "pi-plus", "action", 3, "click"], ["type", "button", "pTooltip", "Delete Asset", "tooltipPosition", "bottom", "aria-label", "Delete selected item", 1, "pi", "pi-trash", "action", 3, "click", "disabled"], [1, "flex-1", "min-h-0", "w-full", "overflow-hidden"], [3, "rowSelect", "rowUnselect", "data", "columns", "pagination", "selectionMode"], [3, "modalClose", "formSubmit", "visible", "header", "fields", "actions", "styleClass"]], template: function AssetListSectionComponent_Template(rf, ctx) {
    if (rf & 1) {
      \u0275\u0275elementStart(0, "div", 0)(1, "div", 1)(2, "div", 2)(3, "div", 3)(4, "button", 4);
      \u0275\u0275listener("click", function AssetListSectionComponent_Template_button_click_4_listener() {
        return ctx.confirmAssetAdd();
      });
      \u0275\u0275elementEnd();
      \u0275\u0275elementStart(5, "button", 5);
      \u0275\u0275listener("click", function AssetListSectionComponent_Template_button_click_5_listener() {
        return ctx.confirmAssetDelete();
      });
      \u0275\u0275elementEnd()()()();
      \u0275\u0275elementStart(6, "div", 6)(7, "app-grid", 7);
      \u0275\u0275listener("rowSelect", function AssetListSectionComponent_Template_app_grid_rowSelect_7_listener($event) {
        return ctx.handleRowSelect($event);
      })("rowUnselect", function AssetListSectionComponent_Template_app_grid_rowUnselect_7_listener() {
        return ctx.handleRowUnselect();
      });
      \u0275\u0275elementEnd()()();
      \u0275\u0275elementStart(8, "app-dynamic-form-modal", 8);
      \u0275\u0275listener("modalClose", function AssetListSectionComponent_Template_app_dynamic_form_modal_modalClose_8_listener() {
        return ctx.onClose();
      })("formSubmit", function AssetListSectionComponent_Template_app_dynamic_form_modal_formSubmit_8_listener($event) {
        return ctx.onSubmit($event);
      });
      \u0275\u0275elementEnd();
    }
    if (rf & 2) {
      \u0275\u0275advance(4);
      \u0275\u0275classProp("hover", true);
      \u0275\u0275advance();
      \u0275\u0275classProp("hover", !!ctx.selectedAsset)("disabled", !ctx.selectedAsset);
      \u0275\u0275property("disabled", !ctx.selectedAsset);
      \u0275\u0275advance(2);
      \u0275\u0275property("data", ctx.assetList)("columns", ctx.columns)("pagination", true)("selectionMode", "single");
      \u0275\u0275advance();
      \u0275\u0275property("visible", ctx.isModalVisible)("header", ctx.modalHeader)("fields", ctx.formFields)("actions", ctx.actions)("styleClass", "w-[40rem]");
    }
  }, dependencies: [GridComponent, DynamicFormModalComponent, TooltipModule, Tooltip], styles: ["\n\n.action.disabled[_ngcontent-%COMP%] {\n  opacity: 0.5;\n  cursor: not-allowed;\n  pointer-events: none;\n}\n.action.hover[_ngcontent-%COMP%]:not(.disabled) {\n  cursor: pointer;\n}\n.action.hover[_ngcontent-%COMP%]:not(.disabled):hover {\n  color: var(--color-primary-color);\n}\n/*# sourceMappingURL=asset-list-section.component.css.map */"] });
};
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(AssetListSectionComponent, [{
    type: Component,
    args: [{ selector: "app-asset-list-section", imports: [GridComponent, DynamicFormModalComponent, TooltipModule], template: `<div class="flex flex-col h-full w-full overflow-hidden">
  <div class="p-4 content-header flex-none w-full">
    <div class="flex justify-end items-center">
      <div class="flex-none flex space-x-4">
        <button
          type="button"
          class="pi pi-plus action"
          [class.hover]="true"
          pTooltip="Add"
          tooltipPosition="bottom"
          aria-label="Add new item"
          (click)="confirmAssetAdd()"
        ></button>
        <button
          type="button"
          class="pi pi-trash action"
          [class.hover]="!!selectedAsset"
          [class.disabled]="!selectedAsset"
          pTooltip="Delete Asset"
          tooltipPosition="bottom"
          aria-label="Delete selected item"
          [disabled]="!selectedAsset"
          (click)="confirmAssetDelete()"
        ></button>
      </div>
    </div>
  </div>

  <div class="flex-1 min-h-0 w-full overflow-hidden">
    <app-grid
      [data]="assetList"
      [columns]="columns"
      [pagination]="true"
      [selectionMode]="'single'"
      (rowSelect)="handleRowSelect($event)"
      (rowUnselect)="handleRowUnselect()"
    ></app-grid>
  </div>
</div>

<app-dynamic-form-modal
  [visible]="isModalVisible"
  [header]="modalHeader"
  [fields]="formFields"
  [actions]="actions"
  [styleClass]="'w-[40rem]'"
  (modalClose)="onClose()"
  (formSubmit)="onSubmit($event)"
>
</app-dynamic-form-modal>
`, styles: ["/* src/app/features/administration/components/shared/asset-list-section/asset-list-section.component.scss */\n.action.disabled {\n  opacity: 0.5;\n  cursor: not-allowed;\n  pointer-events: none;\n}\n.action.hover:not(.disabled) {\n  cursor: pointer;\n}\n.action.hover:not(.disabled):hover {\n  color: var(--color-primary-color);\n}\n/*# sourceMappingURL=asset-list-section.component.css.map */\n"] }]
  }], () => [], { entity: [{ type: Input, args: [{ isSignal: true, alias: "entity", required: false }] }], groupId: [{ type: Input, args: [{ isSignal: true, alias: "groupId", required: false }] }], groupingEntityType: [{ type: Input, args: [{ isSignal: true, alias: "groupingEntityType", required: false }] }], assetLinkField: [{ type: Input, args: [{ isSignal: true, alias: "assetLinkField", required: true }] }], index: [{ type: Input, args: [{ isSignal: true, alias: "index", required: false }] }], formatter: [{ type: Input, args: [{ isSignal: true, alias: "formatter", required: false }] }], getGroupingEntitiesFn: [{ type: Input, args: [{ isSignal: true, alias: "getGroupingEntitiesFn", required: true }] }], getAvailableAssetsFn: [{ type: Input, args: [{ isSignal: true, alias: "getAvailableAssetsFn", required: true }] }] });
})();
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && \u0275setClassDebugInfo(AssetListSectionComponent, { className: "AssetListSectionComponent", filePath: "src/app/features/administration/components/shared/asset-list-section/asset-list-section.component.ts", lineNumber: 42 });
})();

// src/app/features/administration/components/shared/user-list-section/user-list-section.component.ts
var UserListSectionComponent = class _UserListSectionComponent extends EntitySectionBaseComponent {
  entity = input(null, ...ngDevMode ? [{ debugName: "entity" }] : []);
  groupId = input(null, ...ngDevMode ? [{ debugName: "groupId" }] : []);
  groupingEntityType = input("Group", ...ngDevMode ? [{ debugName: "groupingEntityType" }] : []);
  userLinkField = input.required(...ngDevMode ? [{ debugName: "userLinkField" }] : []);
  getGroupingEntitiesFn = input.required(...ngDevMode ? [{ debugName: "getGroupingEntitiesFn" }] : []);
  getAvailableUsersFn = input.required(...ngDevMode ? [{ debugName: "getAvailableUsersFn" }] : []);
  entitiesService = inject(EntitiesService);
  accountsService = inject(AccountsService);
  utilityService = inject(UtilityService);
  cdr = inject(ChangeDetectorRef);
  cacheService = inject(RequestCacheService);
  handleFormSubmit(form) {
    switch (this.modalType) {
      case "move":
        this.handleUserMove(form);
        break;
      case "add":
        this.handleUserAdd(form);
        break;
    }
  }
  handleUserMove(form) {
    if (isNullOrUndefined(this.selectedUser) || isNullOrUndefined(form))
      return;
    const currentUserLinkField = this.userLinkField();
    const userId = this.selectedUser.id;
    const selectedGroupId = form.get("group")?.value;
    if (isNullOrUndefined(selectedGroupId) || isEmpty(selectedGroupId))
      return;
    const groupObject = this.groupingOptions.find((g) => g.id === selectedGroupId);
    if (groupObject) {
      const payload = { [currentUserLinkField]: groupObject };
      this.updateUser(userId, payload);
    } else {
      console.error("Selected group not found in grouping options list.");
    }
  }
  handleUserAdd(form) {
    if (isNullOrUndefined(form))
      return;
    const currentUserLinkField = this.userLinkField();
    const userIdToAdd = form.get("user")?.value;
    const currentEntity = this.entity();
    const currentEntityObject = currentEntity ? { id: currentEntity.id, name: currentEntity.name } : null;
    if (!currentEntityObject || isNullOrUndefined(currentEntityObject.id) || isEmpty(currentEntityObject.id) || isNullOrUndefined(userIdToAdd) || isEmpty(userIdToAdd))
      return;
    const payload = { [currentUserLinkField]: currentEntityObject };
    this.updateUser(userIdToAdd, payload);
  }
  actions = [
    {
      label: "Cancel",
      action: () => {
        this.onClose();
      },
      severity: "secondary"
    },
    {
      label: "Ok",
      action: (form) => {
        this.handleFormSubmit(form);
      },
      severity: "primary",
      disabled: (form) => isNullOrUndefined(form) || form.pristine
    }
  ];
  userList = [];
  selectedUser = null;
  groupingOptions = [];
  availableUsersForLinking = [];
  modalType = null;
  get isModalVisible() {
    return this.modalType !== null;
  }
  get modalHeader() {
    switch (this.modalType) {
      case "move":
        return "Move To Different Cost Centre";
      case "add":
        return "Add User";
      default:
        return "";
    }
  }
  constructor() {
    super();
    effect(() => {
      const ownerId = this.entity()?.owner?.id;
      const currentGroupIdRqlPath = this.groupId();
      const currentEntityId = this.entity()?.id;
      if (isNullOrUndefined(ownerId) || isNullOrUndefined(currentGroupIdRqlPath) || isNullOrUndefined(currentEntityId)) {
        this.userList = [];
        this.cdr.markForCheck();
        return;
      }
      const filters = {
        state: {
          value: "deleted",
          operator: "!="
        },
        [currentGroupIdRqlPath]: {
          value: currentEntityId,
          operator: "="
        }
      };
      const rqlFilter = this.utilityService.constructRqlFilter(filters);
      return this.cacheService.getOrFetch(`users-${ownerId}-${rqlFilter}`, () => this.fetchUsers(ownerId, rqlFilter), 3e3).subscribe((users) => {
        this.userList = users;
        this.cdr.markForCheck();
      });
    });
  }
  ngOnInit() {
    const owner = this.entity()?.owner?.id;
    const currentEntityId = this.entity()?.id;
    this.columns = [
      {
        field: "name",
        header: "Name",
        filter: true,
        filterType: "text",
        filterMatchMode: "contains",
        transform: "text-ellipsis"
      },
      {
        field: this.userLinkField(),
        // Placeholder, actual field on UserListItem might vary
        header: this.groupingEntityType() ?? "Group",
        // Dynamic header
        valueGetter: (rowData) => {
          const linkField = this.userLinkField();
          const user = rowData;
          if (isDefined(user) && typeof user === "object" && Object.hasOwn(user, linkField)) {
            const linkedEntity = user[linkField];
            return linkedEntity?.name ?? "";
          }
          return "";
        },
        filter: true,
        filterType: "multiselect",
        filterMatchMode: "in",
        filterConfig: {
          type: "multiselect",
          options: []
          // These options could be dynamically populated based on groupingOptions
        }
      }
    ];
    if (typeof owner === "string" && owner) {
      const groupEntitiesFn = this.getGroupingEntitiesFn();
      groupEntitiesFn(owner).then((groups) => {
        this.groupingOptions = groups;
        if (this.modalType === "move")
          this.updateFormFields();
        this.cdr.markForCheck();
      }).catch((error) => {
        console.error(`Failed to load ${this.groupingEntityType()} groups:`, error);
        this.groupingOptions = [];
        this.cdr.markForCheck();
      });
      const availableUsersFn = this.getAvailableUsersFn();
      availableUsersFn(owner, currentEntityId).then((users) => {
        this.availableUsersForLinking = users;
        if (this.modalType === "add")
          this.updateFormFields();
        this.cdr.markForCheck();
      }).catch((error) => {
        console.error("Failed to load available users for linking:", error);
        this.availableUsersForLinking = [];
        this.cdr.markForCheck();
      });
    } else {
      console.warn("Owner ID is not available or invalid, cannot fetch grouping entities or available users.");
      this.groupingOptions = [];
      this.availableUsersForLinking = [];
      this.cdr.markForCheck();
    }
  }
  fetchUsers(ownerId, filter) {
    return this.accountsService.listUsers(ownerId, 0, DEFAULT_LIST_SIZE, "name", filter).pipe(map((response) => response.items));
  }
  updateFormFields() {
    const groupDropdownOptions = (this.groupingOptions ?? []).map((g) => ({
      label: g.name,
      value: g.id
    }));
    const userDropdownOptions = (this.availableUsersForLinking ?? []).map((a) => ({
      label: a.name,
      value: a.id
    }));
    switch (this.modalType) {
      case "move":
        this.formFields = [
          createDropdownField("group", `${this.groupingEntityType()}`, groupDropdownOptions, "", {
            layout: "horizontal",
            labelWidth: "1/3",
            name: "group",
            props: {
              appendTo: "body"
            }
          })
        ];
        break;
      case "add":
        this.formFields = [
          createDropdownField("user", `User`, userDropdownOptions, "", {
            layout: "horizontal",
            labelWidth: "1/3",
            name: "user",
            props: {
              appendTo: "body"
            }
          })
        ];
        break;
      default:
        this.formFields = [];
        break;
    }
    this.cdr.markForCheck();
  }
  updateUser(id, data) {
    this.accountsService.updateUser(id, data).subscribe({
      next: () => {
        this.broadcastService.broadcast("entity-updated", {
          id,
          changes: data,
          entityType: "user",
          parentId: this.entity()?.id,
          groupingType: this.groupingEntityType()
        });
        this.modalType = null;
        const ownerId = this.entity()?.owner?.id;
        const currentGroupIdRqlPath = this.groupId();
        const currentEntityId = this.entity()?.id;
        if (typeof ownerId === "string" && ownerId && typeof currentGroupIdRqlPath === "string" && currentGroupIdRqlPath && typeof currentEntityId === "string" && currentEntityId) {
          const filters = {
            state: { value: "deleted", operator: "!=" },
            [currentGroupIdRqlPath]: { value: currentEntityId, operator: "=" }
          };
          const rqlFilter = this.utilityService.constructRqlFilter(filters);
          this.fetchUsers(ownerId, rqlFilter).subscribe((users) => {
            this.userList = users;
            this.cdr.markForCheck();
          });
        }
        const availableUsersFn = this.getAvailableUsersFn();
        if (typeof ownerId === "string" && ownerId) {
          availableUsersFn(ownerId, currentEntityId).then((users) => {
            this.availableUsersForLinking = users;
            this.cdr.markForCheck();
          }).catch((error) => {
            console.error("Error refreshing available users after update:", error);
          });
        }
        this.cdr.markForCheck();
      },
      error: (err) => {
        console.error("Failed to update user:", err);
      }
    });
  }
  confirmUserMove() {
    this.modalType = "move";
    this.updateFormFields();
  }
  confirmUserAdd() {
    this.modalType = "add";
    this.updateFormFields();
  }
  onClose() {
    this.modalType = null;
    this.selectedUser = null;
    this.updateFormFields();
  }
  handleRowSelect(event) {
    if (isEmpty(event) || isEmpty(event.data))
      return;
    this.selectedUser = event.data;
  }
  handleRowUnselect() {
    this.selectedUser = null;
  }
  static \u0275fac = function UserListSectionComponent_Factory(__ngFactoryType__) {
    return new (__ngFactoryType__ || _UserListSectionComponent)();
  };
  static \u0275cmp = /* @__PURE__ */ \u0275\u0275defineComponent({ type: _UserListSectionComponent, selectors: [["app-user-list-section"]], inputs: { entity: [1, "entity"], groupId: [1, "groupId"], groupingEntityType: [1, "groupingEntityType"], userLinkField: [1, "userLinkField"], getGroupingEntitiesFn: [1, "getGroupingEntitiesFn"], getAvailableUsersFn: [1, "getAvailableUsersFn"] }, features: [\u0275\u0275InheritDefinitionFeature], decls: 9, vars: 10, consts: [[1, "flex", "flex-col", "h-full", "w-full", "overflow-hidden"], [1, "p-4", "content-header", "flex-none", "w-full"], [1, "flex", "justify-end", "items-center"], [1, "flex-none", "flex", "space-x-4"], ["type", "button", "pTooltip", "Add", "tooltipPosition", "bottom", "aria-label", "Add new item", 1, "pi", "pi-plus", "action", "hover", 3, "click"], ["type", "button", "pTooltip", "Move User", "tooltipPosition", "bottom", "aria-label", "Move selected item", 1, "pi", "pi-trash", "action", "hover", 3, "click", "disabled"], [1, "flex-1", "min-h-0", "w-full", "overflow-hidden"], [3, "rowSelect", "rowUnselect", "data", "columns", "pagination", "selectionMode"], [3, "modalClose", "formSubmit", "visible", "header", "fields", "actions", "styleClass"]], template: function UserListSectionComponent_Template(rf, ctx) {
    if (rf & 1) {
      \u0275\u0275elementStart(0, "div", 0)(1, "div", 1)(2, "div", 2)(3, "div", 3)(4, "button", 4);
      \u0275\u0275listener("click", function UserListSectionComponent_Template_button_click_4_listener() {
        return ctx.confirmUserAdd();
      });
      \u0275\u0275elementEnd();
      \u0275\u0275elementStart(5, "button", 5);
      \u0275\u0275listener("click", function UserListSectionComponent_Template_button_click_5_listener() {
        return ctx.confirmUserMove();
      });
      \u0275\u0275elementEnd()()()();
      \u0275\u0275elementStart(6, "div", 6)(7, "app-grid", 7);
      \u0275\u0275listener("rowSelect", function UserListSectionComponent_Template_app_grid_rowSelect_7_listener($event) {
        return ctx.handleRowSelect($event);
      })("rowUnselect", function UserListSectionComponent_Template_app_grid_rowUnselect_7_listener() {
        return ctx.handleRowUnselect();
      });
      \u0275\u0275elementEnd()()();
      \u0275\u0275elementStart(8, "app-dynamic-form-modal", 8);
      \u0275\u0275listener("modalClose", function UserListSectionComponent_Template_app_dynamic_form_modal_modalClose_8_listener() {
        return ctx.onClose();
      })("formSubmit", function UserListSectionComponent_Template_app_dynamic_form_modal_formSubmit_8_listener($event) {
        return ctx.onSubmit($event);
      });
      \u0275\u0275elementEnd();
    }
    if (rf & 2) {
      \u0275\u0275advance(5);
      \u0275\u0275property("disabled", !ctx.selectedUser);
      \u0275\u0275advance(2);
      \u0275\u0275property("data", ctx.userList)("columns", ctx.columns)("pagination", true)("selectionMode", "single");
      \u0275\u0275advance();
      \u0275\u0275property("visible", ctx.isModalVisible)("header", ctx.modalHeader)("fields", ctx.formFields)("actions", ctx.actions)("styleClass", "w-[40rem]");
    }
  }, dependencies: [GridComponent, DynamicFormModalComponent, TooltipModule, Tooltip], encapsulation: 2 });
};
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(UserListSectionComponent, [{
    type: Component,
    args: [{ selector: "app-user-list-section", imports: [GridComponent, DynamicFormModalComponent, TooltipModule], template: `<div class="flex flex-col h-full w-full overflow-hidden">
  <div class="p-4 content-header flex-none w-full">
    <div class="flex justify-end items-center">
      <div class="flex-none flex space-x-4">
        <button
          type="button"
          class="pi pi-plus action hover"
          pTooltip="Add"
          tooltipPosition="bottom"
          aria-label="Add new item"
          (click)="confirmUserAdd()"
        ></button>
        <button
          type="button"
          class="pi pi-trash action hover"
          pTooltip="Move User"
          tooltipPosition="bottom"
          aria-label="Move selected item"
          [disabled]="!selectedUser"
          (click)="confirmUserMove()"
        ></button>
      </div>
    </div>
  </div>

  <div class="flex-1 min-h-0 w-full overflow-hidden">
    <app-grid
      [data]="userList"
      [columns]="columns"
      [pagination]="true"
      [selectionMode]="'single'"
      (rowSelect)="handleRowSelect($event)"
      (rowUnselect)="handleRowUnselect()"
    ></app-grid>
  </div>
</div>

<app-dynamic-form-modal
  [visible]="isModalVisible"
  [header]="modalHeader"
  [fields]="formFields"
  [actions]="actions"
  [styleClass]="'w-[40rem]'"
  (modalClose)="onClose()"
  (formSubmit)="onSubmit($event)"
>
</app-dynamic-form-modal>
` }]
  }], () => [], { entity: [{ type: Input, args: [{ isSignal: true, alias: "entity", required: false }] }], groupId: [{ type: Input, args: [{ isSignal: true, alias: "groupId", required: false }] }], groupingEntityType: [{ type: Input, args: [{ isSignal: true, alias: "groupingEntityType", required: false }] }], userLinkField: [{ type: Input, args: [{ isSignal: true, alias: "userLinkField", required: true }] }], getGroupingEntitiesFn: [{ type: Input, args: [{ isSignal: true, alias: "getGroupingEntitiesFn", required: true }] }], getAvailableUsersFn: [{ type: Input, args: [{ isSignal: true, alias: "getAvailableUsersFn", required: true }] }] });
})();
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && \u0275setClassDebugInfo(UserListSectionComponent, { className: "UserListSectionComponent", filePath: "src/app/features/administration/components/shared/user-list-section/user-list-section.component.ts", lineNumber: 42 });
})();

// src/app/features/administration/factories/cost-centre-section-config.factory.ts
var CostCentreSectionConfigFactory = class _CostCentreSectionConfigFactory {
  assetGroupingService = inject(AssetGroupingService);
  entitiesService = inject(EntitiesService);
  accountsService = inject(AccountsService);
  utilityService = inject(UtilityService);
  cacheService = inject(RequestCacheService);
  /**
   * Create sections for cost centre information
   * @param costCentre The cost centre object to display in the section
   * @returns An array of AdminDetailSection objects representing the cost centre information sections
   */
  createCostCentreInformationSection(costCentre) {
    return [
      {
        id: "cost-centre-details",
        title: "Cost Centre Details",
        component: CostCentreDetailsSectionComponent,
        componentInputs: { entity: costCentre },
        category: "information",
        order: 10
      },
      {
        id: "cost-centre-contacts",
        title: "Contacts",
        component: ContactsSectionComponent,
        componentInputs: { entity: costCentre, entityType: "cost-centre" },
        category: "information",
        order: 20
      }
    ];
  }
  /**
   * Create sections for cost centre changes
   * @param costCentre The cost centre object to display in the section
   * @returns An array of AdminDetailSection objects representing the cost centre changes sections
   */
  createChangesSection(costCentre) {
    return [
      {
        id: "cost-centre-changes",
        title: "Changes",
        component: FeedSectionComponent,
        componentInputs: {
          entity: costCentre
        },
        category: "feed",
        order: 10
      }
    ];
  }
  /**
   * Create sections for cost centre assets
   * @param costCentre The cost centre object to display in the section
   * @returns An array of AdminDetailSection objects representing the cost centre assets sections
   */
  createAssetsSection(costCentre) {
    return [
      {
        id: "cost-centre-assets",
        title: "Assets",
        component: AssetListSectionComponent,
        componentInputs: {
          entity: costCentre,
          // The current cost centre object
          groupId: "costCentre.id",
          // RQL path to filter assets for this cost centre
          groupingEntityType: "Cost Centre",
          assetLinkField: "costCentre",
          // The field on AssetResponse linking to CostCentreResponse
          getGroupingEntitiesFn: (ownerId) => this.assetGroupingService.getCostCentresAsTree(ownerId),
          getAvailableAssetsFn: (ownerId, _currentEntityId) => this.getAvailableAssets(ownerId)
        },
        category: "assets",
        order: 10
      }
    ];
  }
  /**
   * Get available assets for the given owner
   * @param ownerId The owner ID to fetch assets for
   * @returns Promise of simplified asset objects
   */
  getAvailableAssets(ownerId) {
    const filters = {
      state: {
        value: "active",
        operator: "="
      }
    };
    const rqlFilter = this.utilityService.constructRqlFilter(filters);
    return this.cacheService.getOrFetchAsync(`assets-list-${ownerId}-${rqlFilter}`, () => firstValueFrom(this.entitiesService.listAssets(ownerId, 0, 100, "name", rqlFilter).pipe(map((res) => res.items.map((asset) => ({
      id: asset.id,
      name: asset.name
    }))))), 3e5);
  }
  /**
   * Create sections for cost centre users
   * @param costCentre The cost centre object to display in the section
   * @returns An array of AdminDetailSection objects representing the cost centre users sections
   */
  createUsersSection(costCentre) {
    return [
      {
        id: "cost-centre-users",
        title: "Users",
        component: UserListSectionComponent,
        componentInputs: {
          entity: costCentre,
          groupId: "costCentre.id",
          groupingEntityType: "Cost Centre",
          userLinkField: "costCentre",
          getGroupingEntitiesFn: (ownerId) => this.assetGroupingService.getCostCentresAsTree(ownerId),
          getAvailableUsersFn: (ownerId) => firstValueFrom(this.accountsService.listUsers(ownerId, 0, 100, "name").pipe(map((res) => res.items.map((user) => ({
            id: user.id,
            name: user.name
          })))))
        },
        category: "users",
        order: 20
      }
    ];
  }
  /**
   * Create all costCentre sections in one call
   * @param costCentre The costCentre object to display in the sections
   * @returns An array of AdminDetailSection objects representing all costCentre sections
   */
  createAllCostCentreSections(costCentre) {
    return [
      ...this.createCostCentreInformationSection(costCentre),
      ...this.createAssetsSection(costCentre),
      ...this.createUsersSection(costCentre),
      ...this.createChangesSection(costCentre)
    ];
  }
  static \u0275fac = function CostCentreSectionConfigFactory_Factory(__ngFactoryType__) {
    return new (__ngFactoryType__ || _CostCentreSectionConfigFactory)();
  };
  static \u0275prov = /* @__PURE__ */ \u0275\u0275defineInjectable({ token: _CostCentreSectionConfigFactory, factory: _CostCentreSectionConfigFactory.\u0275fac, providedIn: "root" });
};
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(CostCentreSectionConfigFactory, [{
    type: Injectable,
    args: [{ providedIn: "root" }]
  }], null, null);
})();

// src/app/features/administration/components/geofence-groups/geofence-group-details-section/geofence-group-details-section.component.ts
var _c069 = (a0) => ({ "icon-primary": a0 });
function GeofenceGroupDetailsSectionComponent_Conditional_7_Template(rf, ctx) {
  if (rf & 1) {
    const _r1 = \u0275\u0275getCurrentView();
    \u0275\u0275elementStart(0, "div", 6)(1, "span", 9);
    \u0275\u0275listener("click", function GeofenceGroupDetailsSectionComponent_Conditional_7_Template_span_click_1_listener() {
      \u0275\u0275restoreView(_r1);
      const ctx_r1 = \u0275\u0275nextContext();
      return \u0275\u0275resetView(ctx_r1.onEdit());
    })("keydown.enter", function GeofenceGroupDetailsSectionComponent_Conditional_7_Template_span_keydown_enter_1_listener() {
      \u0275\u0275restoreView(_r1);
      const ctx_r1 = \u0275\u0275nextContext();
      return \u0275\u0275resetView(ctx_r1.onEdit());
    });
    \u0275\u0275elementEnd()();
  }
  if (rf & 2) {
    \u0275\u0275advance();
    \u0275\u0275attribute("aria-label", "Edit geofence group details");
  }
}
function GeofenceGroupDetailsSectionComponent_Conditional_10_Template(rf, ctx) {
  if (rf & 1) {
    const _r3 = \u0275\u0275getCurrentView();
    \u0275\u0275elementStart(0, "app-dynamic-form", 10);
    \u0275\u0275listener("formSubmit", function GeofenceGroupDetailsSectionComponent_Conditional_10_Template_app_dynamic_form_formSubmit_0_listener($event) {
      \u0275\u0275restoreView(_r3);
      const ctx_r1 = \u0275\u0275nextContext();
      return \u0275\u0275resetView(ctx_r1.onSubmit($event));
    })("formValidityChange", function GeofenceGroupDetailsSectionComponent_Conditional_10_Template_app_dynamic_form_formValidityChange_0_listener($event) {
      \u0275\u0275restoreView(_r3);
      const ctx_r1 = \u0275\u0275nextContext();
      return \u0275\u0275resetView(ctx_r1.onFormValidityChange($event));
    })("formValueChange", function GeofenceGroupDetailsSectionComponent_Conditional_10_Template_app_dynamic_form_formValueChange_0_listener($event) {
      \u0275\u0275restoreView(_r3);
      const ctx_r1 = \u0275\u0275nextContext();
      return \u0275\u0275resetView(ctx_r1.onFormValueChange($event));
    });
    \u0275\u0275elementEnd();
  }
  if (rf & 2) {
    const ctx_r1 = \u0275\u0275nextContext();
    \u0275\u0275property("fields", ctx_r1.formFields)("actions", ctx_r1.actions)("hideActions", ctx_r1.createMode());
  }
}
function GeofenceGroupDetailsSectionComponent_Conditional_11_Template(rf, ctx) {
  if (rf & 1) {
    \u0275\u0275element(0, "app-grid", 8);
  }
  if (rf & 2) {
    const ctx_r1 = \u0275\u0275nextContext();
    \u0275\u0275property("data", ctx_r1.geofenceGroupDetails())("columns", ctx_r1.columns)("showGridLines", false)("hideHeader", true);
  }
}
var GeofenceGroupDetailsSectionComponent = class _GeofenceGroupDetailsSectionComponent extends EntitySectionBaseComponent {
  ownerId = input(null, ...ngDevMode ? [{ debugName: "ownerId" }] : []);
  entitiesService = inject(EntitiesService);
  operationRegistry = inject(EntityOperationRegistryService);
  assetGroupingService = inject(AssetGroupingService);
  geofenceGroupDetails = computed(() => {
    const geofenceGroupDetails = this.entity();
    if (!isDefined(geofenceGroupDetails))
      return [];
    return [
      {
        key: "Parent",
        value: geofenceGroupDetails.parent?.name ?? "Root"
      },
      { key: "Name", value: geofenceGroupDetails.name }
    ];
  }, ...ngDevMode ? [{ debugName: "geofenceGroupDetails" }] : []);
  faAtlas = faAtlas;
  zoneGroups = [];
  constructor() {
    super();
    this.columns = [
      { field: "key", header: "", transform: "uppercase" },
      { field: "value", header: "" }
    ];
    effect(() => {
      const ownerId = this.entity()?.owner?.id ?? this.ownerId();
      if (isDefined(ownerId)) {
        this.fetchZoneGroups(ownerId).then((groups) => {
          this.zoneGroups = groups;
          this.updateFormFields();
        }).catch(() => {
        });
      }
    });
  }
  fetchZoneGroups(ownerId) {
    return this.assetGroupingService.getZoneGroups(ownerId);
  }
  updateFormFields() {
    const geofenceGroup = this.entity();
    const parentOptions = [
      { label: "Root", value: "root" },
      ...this.zoneGroups.map((group) => ({
        label: group.name,
        value: group.id
      }))
    ];
    this.formFields = [
      createDropdownField("parent", "Parent", parentOptions, geofenceGroup?.parent?.id ?? "root", {
        placeholder: "Select Parent Group",
        validations: [
          {
            name: "required",
            validator: Validators.required,
            message: "Parent group is required"
          }
        ],
        props: {
          appendTo: "body"
        }
      }),
      createTextField("name", "Name", geofenceGroup?.name, {
        name: "name",
        validations: [
          {
            name: "required",
            validator: Validators.required,
            message: "Name is required"
          }
        ]
      })
    ];
  }
  getUpdateMethod() {
    return this.operationRegistry.getOperation("geofence-group", "update") ?? ((id, data) => this.entitiesService.updateZoneGroup(id, data));
  }
  onFormValueChange(formData) {
    const transformedData = this.transformFormData(formData);
    this.formValueChange.emit(transformedData);
  }
  transformFormData(formData) {
    const transformedData = __spreadValues({}, formData);
    if (isDefined(transformedData["parent"])) {
      const parentId = transformedData["parent"];
      const parent = this.zoneGroups?.find((option) => option.id === parentId);
      if (parent) {
        transformedData["parent"] = {
          id: parent.id,
          name: parent.name
        };
      } else if (parentId === "root") {
        transformedData["parent"] = null;
      }
    }
    return transformedData;
  }
  static \u0275fac = function GeofenceGroupDetailsSectionComponent_Factory(__ngFactoryType__) {
    return new (__ngFactoryType__ || _GeofenceGroupDetailsSectionComponent)();
  };
  static \u0275cmp = /* @__PURE__ */ \u0275\u0275defineComponent({ type: _GeofenceGroupDetailsSectionComponent, selectors: [["app-geofence-group-details-section"]], inputs: { ownerId: [1, "ownerId"] }, features: [\u0275\u0275InheritDefinitionFeature], decls: 12, vars: 7, consts: [[1, "card", "pt-2"], [1, "mb-4", "p-2", "flex", "justify-start", "items-center"], [1, "!text-[2.5rem]", 3, "icon", "ngClass"], [1, "pl-6", "flex-1"], [1, "flex", "justify-between", "items-center"], [1, "text-xl", "font-semibold", "m-0"], [1, "icon-light"], [3, "fields", "actions", "hideActions"], ["tableStyleClass", "info-display !w-auto", 3, "data", "columns", "showGridLines", "hideHeader"], [1, "pi", "pi-pen-to-square", "action", "hover", "!text-2xl", 3, "click", "keydown.enter"], [3, "formSubmit", "formValidityChange", "formValueChange", "fields", "actions", "hideActions"]], template: function GeofenceGroupDetailsSectionComponent_Template(rf, ctx) {
    if (rf & 1) {
      \u0275\u0275elementStart(0, "div", 0)(1, "div", 1);
      \u0275\u0275element(2, "fa-icon", 2);
      \u0275\u0275elementStart(3, "div", 3)(4, "div", 4)(5, "h2", 5);
      \u0275\u0275text(6, "Geofence Group Details");
      \u0275\u0275elementEnd();
      \u0275\u0275conditionalCreate(7, GeofenceGroupDetailsSectionComponent_Conditional_7_Template, 2, 1, "div", 6);
      \u0275\u0275elementEnd();
      \u0275\u0275elementStart(8, "span");
      \u0275\u0275text(9, "The following information is required in order to identify your geofence group.");
      \u0275\u0275elementEnd()()();
      \u0275\u0275conditionalCreate(10, GeofenceGroupDetailsSectionComponent_Conditional_10_Template, 1, 3, "app-dynamic-form", 7);
      \u0275\u0275conditionalCreate(11, GeofenceGroupDetailsSectionComponent_Conditional_11_Template, 1, 4, "app-grid", 8);
      \u0275\u0275elementEnd();
    }
    if (rf & 2) {
      \u0275\u0275advance(2);
      \u0275\u0275property("icon", ctx.faAtlas)("ngClass", \u0275\u0275pureFunction1(5, _c069, ctx.isFormEditable()));
      \u0275\u0275advance(5);
      \u0275\u0275conditional(!ctx.isFormEditable() && !ctx.createMode() ? 7 : -1);
      \u0275\u0275advance(3);
      \u0275\u0275conditional(ctx.isFormEditable() || ctx.createMode() && ctx.formFields.length ? 10 : -1);
      \u0275\u0275advance();
      \u0275\u0275conditional(!ctx.isFormEditable() && !ctx.createMode() ? 11 : -1);
    }
  }, dependencies: [
    CommonModule,
    NgClass,
    ButtonModule,
    InputTextModule,
    GridComponent,
    DynamicFormComponent,
    FontAwesomeModule,
    FaIconComponent
  ], encapsulation: 2 });
};
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(GeofenceGroupDetailsSectionComponent, [{
    type: Component,
    args: [{ selector: "app-geofence-group-details-section", imports: [
      CommonModule,
      ButtonModule,
      InputTextModule,
      GridComponent,
      DynamicFormComponent,
      FontAwesomeModule
    ], template: `<div class="card pt-2">
  <div class="mb-4 p-2 flex justify-start items-center">
    <fa-icon
      [icon]="faAtlas"
      class="!text-[2.5rem]"
      [ngClass]="{ 'icon-primary': isFormEditable() }"
    ></fa-icon>

    <div class="pl-6 flex-1">
      <div class="flex justify-between items-center">
        <h2 class="text-xl font-semibold m-0">Geofence Group Details</h2>
        @if (!isFormEditable() && !createMode()) {
          <div class="icon-light">
            <span
              class="pi pi-pen-to-square action hover !text-2xl"
              [attr.aria-label]="'Edit geofence group details'"
              (click)="onEdit()"
              (keydown.enter)="onEdit()"
            ></span>
          </div>
        }
      </div>
      <span
        >The following information is required in order to identify your
        geofence group.</span
      >
    </div>
  </div>

  @if (isFormEditable() || (createMode() && formFields.length)) {
    <app-dynamic-form
      [fields]="formFields"
      [actions]="actions"
      [hideActions]="createMode()"
      (formSubmit)="onSubmit($event)"
      (formValidityChange)="onFormValidityChange($event)"
      (formValueChange)="onFormValueChange($event)"
    >
    </app-dynamic-form>
  }

  @if (!isFormEditable() && !createMode()) {
    <app-grid
      [data]="geofenceGroupDetails()"
      [columns]="columns"
      [showGridLines]="false"
      [hideHeader]="true"
      tableStyleClass="info-display !w-auto"
    ></app-grid>
  }
</div>
` }]
  }], () => [], { ownerId: [{ type: Input, args: [{ isSignal: true, alias: "ownerId", required: false }] }] });
})();
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && \u0275setClassDebugInfo(GeofenceGroupDetailsSectionComponent, { className: "GeofenceGroupDetailsSectionComponent", filePath: "src/app/features/administration/components/geofence-groups/geofence-group-details-section/geofence-group-details-section.component.ts", lineNumber: 43 });
})();

// src/app/features/administration/factories/geofence-group-section-config.factory.ts
var GeofenceGroupSectionConfigFactory = class _GeofenceGroupSectionConfigFactory {
  /**
   * Create sections for geofence group information
   * @param geofenceGroup The geofence group object to display in the section
   * @returns An array of AdminDetailSection objects representing the geofence group information sections
   */
  createGeofenceGroupInformationSection(geofenceGroup) {
    return [
      {
        id: "geofence-group-details",
        title: "Geofence Group Details",
        component: GeofenceGroupDetailsSectionComponent,
        componentInputs: { entity: geofenceGroup },
        category: "information",
        order: 10
      }
    ];
  }
  /**
   * Create sections for geofence group changes
   * @param geofenceGroup The geofence group object to display in the section
   * @returns An array of AdminDetailSection objects representing the geofence group changes sections
   */
  createChangesSection(geofenceGroup) {
    return [
      {
        id: "geofence-group-changes",
        title: "Changes",
        component: FeedSectionComponent,
        componentInputs: {
          entity: geofenceGroup
        },
        category: "feed",
        order: 10
      }
    ];
  }
  /**
   * Create all geofenceGroup sections in one call
   * @param geofenceGroup The geofenceGroup object to display in the sections
   * @returns An array of AdminDetailSection objects representing all geofenceGroup sections
   */
  createAllGeofenceGroupSections(geofenceGroup) {
    return [
      ...this.createGeofenceGroupInformationSection(geofenceGroup),
      ...this.createChangesSection(geofenceGroup)
    ];
  }
  static \u0275fac = function GeofenceGroupSectionConfigFactory_Factory(__ngFactoryType__) {
    return new (__ngFactoryType__ || _GeofenceGroupSectionConfigFactory)();
  };
  static \u0275prov = /* @__PURE__ */ \u0275\u0275defineInjectable({ token: _GeofenceGroupSectionConfigFactory, factory: _GeofenceGroupSectionConfigFactory.\u0275fac, providedIn: "root" });
};
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(GeofenceGroupSectionConfigFactory, [{
    type: Injectable,
    args: [{ providedIn: "root" }]
  }], null, null);
})();

// src/app/features/administration/components/asset-groups/asset-group-details-section/asset-group-details-section.component.ts
var _c070 = (a0) => ({ "icon-primary": a0 });
function AssetGroupDetailsSectionComponent_Conditional_7_Template(rf, ctx) {
  if (rf & 1) {
    const _r1 = \u0275\u0275getCurrentView();
    \u0275\u0275elementStart(0, "div", 6)(1, "span", 9);
    \u0275\u0275listener("click", function AssetGroupDetailsSectionComponent_Conditional_7_Template_span_click_1_listener() {
      \u0275\u0275restoreView(_r1);
      const ctx_r1 = \u0275\u0275nextContext();
      return \u0275\u0275resetView(ctx_r1.onEdit());
    })("keydown.enter", function AssetGroupDetailsSectionComponent_Conditional_7_Template_span_keydown_enter_1_listener() {
      \u0275\u0275restoreView(_r1);
      const ctx_r1 = \u0275\u0275nextContext();
      return \u0275\u0275resetView(ctx_r1.onEdit());
    });
    \u0275\u0275elementEnd()();
  }
  if (rf & 2) {
    \u0275\u0275advance();
    \u0275\u0275attribute("aria-label", "Edit asset group details");
  }
}
function AssetGroupDetailsSectionComponent_Conditional_10_Template(rf, ctx) {
  if (rf & 1) {
    const _r3 = \u0275\u0275getCurrentView();
    \u0275\u0275elementStart(0, "app-dynamic-form", 10);
    \u0275\u0275listener("formSubmit", function AssetGroupDetailsSectionComponent_Conditional_10_Template_app_dynamic_form_formSubmit_0_listener($event) {
      \u0275\u0275restoreView(_r3);
      const ctx_r1 = \u0275\u0275nextContext();
      return \u0275\u0275resetView(ctx_r1.onSubmit($event));
    })("formValidityChange", function AssetGroupDetailsSectionComponent_Conditional_10_Template_app_dynamic_form_formValidityChange_0_listener($event) {
      \u0275\u0275restoreView(_r3);
      const ctx_r1 = \u0275\u0275nextContext();
      return \u0275\u0275resetView(ctx_r1.onFormValidityChange($event));
    })("formValueChange", function AssetGroupDetailsSectionComponent_Conditional_10_Template_app_dynamic_form_formValueChange_0_listener($event) {
      \u0275\u0275restoreView(_r3);
      const ctx_r1 = \u0275\u0275nextContext();
      return \u0275\u0275resetView(ctx_r1.onFormValueChange($event));
    });
    \u0275\u0275elementEnd();
  }
  if (rf & 2) {
    const ctx_r1 = \u0275\u0275nextContext();
    \u0275\u0275property("fields", ctx_r1.formFields)("actions", ctx_r1.actions)("hideActions", ctx_r1.createMode());
  }
}
function AssetGroupDetailsSectionComponent_Conditional_11_Template(rf, ctx) {
  if (rf & 1) {
    \u0275\u0275element(0, "app-grid", 8);
  }
  if (rf & 2) {
    const ctx_r1 = \u0275\u0275nextContext();
    \u0275\u0275property("data", ctx_r1.assetGroupDetails())("columns", ctx_r1.columns)("showGridLines", false)("hideHeader", true);
  }
}
var AssetGroupDetailsSectionComponent = class _AssetGroupDetailsSectionComponent extends EntitySectionBaseComponent {
  ownerId = input(null, ...ngDevMode ? [{ debugName: "ownerId" }] : []);
  entitiesService = inject(EntitiesService);
  operationRegistry = inject(EntityOperationRegistryService);
  assetGroupingService = inject(AssetGroupingService);
  assetGroupDetails = computed(() => {
    const assetGroupDetails = this.entity();
    if (!isDefined(assetGroupDetails))
      return [];
    return [
      {
        key: "Parent",
        value: assetGroupDetails.parent?.name ?? "Root"
      },
      { key: "Name", value: assetGroupDetails.name }
    ];
  }, ...ngDevMode ? [{ debugName: "assetGroupDetails" }] : []);
  faAtlas = faAtlas;
  assetGroups = [];
  constructor() {
    super();
    this.columns = [
      { field: "key", header: "", transform: "uppercase" },
      { field: "value", header: "" }
    ];
    effect(() => {
      const ownerId = this.entity()?.owner?.id ?? this.ownerId();
      if (isDefined(ownerId)) {
        this.fetchAssetGroups(ownerId).then((groups) => {
          this.assetGroups = groups;
          this.updateFormFields();
        }).catch(() => {
        });
      }
    });
  }
  fetchAssetGroups(ownerId) {
    return this.assetGroupingService.getAssetGroups(ownerId);
  }
  updateFormFields() {
    const assetGroup = this.entity();
    const parentOptions = [
      { label: "Root", value: "root" },
      ...this.assetGroups.map((group) => ({
        label: group.name,
        value: group.id
      }))
    ];
    this.formFields = [
      createDropdownField("parent", "Parent", parentOptions, assetGroup?.parent?.id ?? "root", {
        placeholder: "Select Parent Group",
        validations: [
          {
            name: "required",
            validator: Validators.required,
            message: "Parent group is required"
          }
        ],
        props: {
          appendTo: "body"
        }
      }),
      createTextField("name", "Name", assetGroup?.name, {
        name: "name",
        validations: [
          {
            name: "required",
            validator: Validators.required,
            message: "Name is required"
          }
        ]
      })
    ];
  }
  getUpdateMethod() {
    return this.operationRegistry.getOperation("asset-group", "update") ?? ((id, data) => this.entitiesService.updateAssetGroup(id, data));
  }
  onFormValueChange(formData) {
    const transformedData = this.transformFormData(formData);
    this.formValueChange.emit(transformedData);
  }
  transformFormData(formData) {
    const transformedData = __spreadValues({}, formData);
    if (isDefined(transformedData["parent"])) {
      const parentId = transformedData["parent"];
      const parent = this.assetGroups?.find((option) => option.id === parentId);
      if (parent) {
        transformedData["parent"] = {
          id: parent.id,
          name: parent.name
        };
      } else if (parentId === "root") {
        transformedData["parent"] = null;
      }
    }
    return transformedData;
  }
  static \u0275fac = function AssetGroupDetailsSectionComponent_Factory(__ngFactoryType__) {
    return new (__ngFactoryType__ || _AssetGroupDetailsSectionComponent)();
  };
  static \u0275cmp = /* @__PURE__ */ \u0275\u0275defineComponent({ type: _AssetGroupDetailsSectionComponent, selectors: [["app-asset-group-details-section"]], inputs: { ownerId: [1, "ownerId"] }, features: [\u0275\u0275InheritDefinitionFeature], decls: 12, vars: 7, consts: [[1, "card", "pt-2"], [1, "mb-4", "p-2", "flex", "justify-start", "items-center"], [1, "!text-[2.5rem]", 3, "icon", "ngClass"], [1, "pl-6", "flex-1"], [1, "flex", "justify-between", "items-center"], [1, "text-xl", "font-semibold", "m-0"], [1, "icon-light"], [3, "fields", "actions", "hideActions"], ["tableStyleClass", "info-display !w-auto", 3, "data", "columns", "showGridLines", "hideHeader"], [1, "pi", "pi-pen-to-square", "action", "hover", "!text-2xl", 3, "click", "keydown.enter"], [3, "formSubmit", "formValidityChange", "formValueChange", "fields", "actions", "hideActions"]], template: function AssetGroupDetailsSectionComponent_Template(rf, ctx) {
    if (rf & 1) {
      \u0275\u0275elementStart(0, "div", 0)(1, "div", 1);
      \u0275\u0275element(2, "fa-icon", 2);
      \u0275\u0275elementStart(3, "div", 3)(4, "div", 4)(5, "h2", 5);
      \u0275\u0275text(6, "Asset Group Details");
      \u0275\u0275elementEnd();
      \u0275\u0275conditionalCreate(7, AssetGroupDetailsSectionComponent_Conditional_7_Template, 2, 1, "div", 6);
      \u0275\u0275elementEnd();
      \u0275\u0275elementStart(8, "span");
      \u0275\u0275text(9, "The following information is required in order to identify your asset group.");
      \u0275\u0275elementEnd()()();
      \u0275\u0275conditionalCreate(10, AssetGroupDetailsSectionComponent_Conditional_10_Template, 1, 3, "app-dynamic-form", 7);
      \u0275\u0275conditionalCreate(11, AssetGroupDetailsSectionComponent_Conditional_11_Template, 1, 4, "app-grid", 8);
      \u0275\u0275elementEnd();
    }
    if (rf & 2) {
      \u0275\u0275advance(2);
      \u0275\u0275property("icon", ctx.faAtlas)("ngClass", \u0275\u0275pureFunction1(5, _c070, ctx.isFormEditable()));
      \u0275\u0275advance(5);
      \u0275\u0275conditional(!ctx.isFormEditable() && !ctx.createMode() ? 7 : -1);
      \u0275\u0275advance(3);
      \u0275\u0275conditional(ctx.isFormEditable() || ctx.createMode() && ctx.formFields.length ? 10 : -1);
      \u0275\u0275advance();
      \u0275\u0275conditional(!ctx.isFormEditable() && !ctx.createMode() ? 11 : -1);
    }
  }, dependencies: [
    CommonModule,
    NgClass,
    GridComponent,
    DynamicFormComponent,
    FontAwesomeModule,
    FaIconComponent
  ], encapsulation: 2 });
};
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(AssetGroupDetailsSectionComponent, [{
    type: Component,
    args: [{ selector: "app-asset-group-details-section", imports: [
      CommonModule,
      GridComponent,
      DynamicFormComponent,
      FontAwesomeModule
    ], template: `<div class="card pt-2">
  <div class="mb-4 p-2 flex justify-start items-center">
    <fa-icon
      [icon]="faAtlas"
      class="!text-[2.5rem]"
      [ngClass]="{ 'icon-primary': isFormEditable() }"
    ></fa-icon>

    <div class="pl-6 flex-1">
      <div class="flex justify-between items-center">
        <h2 class="text-xl font-semibold m-0">Asset Group Details</h2>
        @if (!isFormEditable() && !createMode()) {
          <div class="icon-light">
            <span
              class="pi pi-pen-to-square action hover !text-2xl"
              [attr.aria-label]="'Edit asset group details'"
              (click)="onEdit()"
              (keydown.enter)="onEdit()"
            ></span>
          </div>
        }
      </div>
      <span
        >The following information is required in order to identify your asset
        group.</span
      >
    </div>
  </div>

  @if (isFormEditable() || (createMode() && formFields.length)) {
    <app-dynamic-form
      [fields]="formFields"
      [actions]="actions"
      [hideActions]="createMode()"
      (formSubmit)="onSubmit($event)"
      (formValidityChange)="onFormValidityChange($event)"
      (formValueChange)="onFormValueChange($event)"
    >
    </app-dynamic-form>
  }

  @if (!isFormEditable() && !createMode()) {
    <app-grid
      [data]="assetGroupDetails()"
      [columns]="columns"
      [showGridLines]="false"
      [hideHeader]="true"
      tableStyleClass="info-display !w-auto"
    ></app-grid>
  }
</div>
` }]
  }], () => [], { ownerId: [{ type: Input, args: [{ isSignal: true, alias: "ownerId", required: false }] }] });
})();
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && \u0275setClassDebugInfo(AssetGroupDetailsSectionComponent, { className: "AssetGroupDetailsSectionComponent", filePath: "src/app/features/administration/components/asset-groups/asset-group-details-section/asset-group-details-section.component.ts", lineNumber: 38 });
})();

// src/app/features/administration/factories/asset-group-section-config.factory.ts
var AssetGroupSectionConfigFactory = class _AssetGroupSectionConfigFactory {
  assetGroupingService = inject(AssetGroupingService);
  entitiesService = inject(EntitiesService);
  utilityService = inject(UtilityService);
  cacheService = inject(RequestCacheService);
  /**
   * Create sections for asset group information
   * @param assetGroup The asset group object to display in the section
   * @returns An array of AdminDetailSection objects representing the asset group information sections
   */
  createAssetGroupInformationSection(assetGroup) {
    return [
      {
        id: "asset-group-details",
        title: "Asset Group Details",
        component: AssetGroupDetailsSectionComponent,
        componentInputs: { entity: assetGroup },
        category: "information",
        order: 10
      }
    ];
  }
  /**
   * Create sections for asset group changes
   * @param assetGroup The asset group object to display in the section
   * @returns An array of AdminDetailSection objects representing the asset group changes sections
   */
  createChangesSection(assetGroup) {
    return [
      {
        id: "asset-group-changes",
        title: "Changes",
        component: FeedSectionComponent,
        componentInputs: {
          entity: assetGroup
        },
        category: "feed",
        order: 10
      }
    ];
  }
  /**
   * Create sections for asset group assets
   * @param assetGroup The asset group object to display in the section
   * @returns An array of AdminDetailSection objects representing the asset group assets sections
   */
  createAssetsSection(assetGroup) {
    return [
      {
        id: "asset-group-assets",
        title: "Assets",
        component: AssetListSectionComponent,
        componentInputs: {
          entity: assetGroup,
          groupId: "groups.id",
          groupingEntityType: "Asset Group",
          assetLinkField: "groups",
          getGroupingEntitiesFn: (ownerId) => this.assetGroupingService.getAssetGroupsAsTree(ownerId),
          getAvailableAssetsFn: (ownerId, _currentEntityId) => this.getAvailableAssets(ownerId)
        },
        category: "assets",
        order: 10
      }
    ];
  }
  /**
   * Get available assets for the given owner
   * @param ownerId The owner ID to fetch assets for
   * @returns Promise of simplified asset objects
   */
  getAvailableAssets(ownerId) {
    const filters = {
      state: {
        value: "active",
        operator: "="
      }
    };
    const rqlFilter = this.utilityService.constructRqlFilter(filters);
    return this.cacheService.getOrFetchAsync(`assets-list-${ownerId}-${rqlFilter}`, () => firstValueFrom(this.entitiesService.listAssets(ownerId, 0, 100, "name", rqlFilter).pipe(map((res) => res.items.map((asset) => ({
      id: asset.id,
      name: asset.name
    }))))), 3e5);
  }
  /**
   * Create all assetGroup sections in one call
   * @param assetGroup The assetGroup object to display in the sections
   * @returns An array of AdminDetailSection objects representing all assetGroup sections
   */
  createAllAssetGroupSections(assetGroup) {
    return [
      ...this.createAssetGroupInformationSection(assetGroup),
      ...this.createAssetsSection(assetGroup),
      ...this.createChangesSection(assetGroup)
    ];
  }
  static \u0275fac = function AssetGroupSectionConfigFactory_Factory(__ngFactoryType__) {
    return new (__ngFactoryType__ || _AssetGroupSectionConfigFactory)();
  };
  static \u0275prov = /* @__PURE__ */ \u0275\u0275defineInjectable({ token: _AssetGroupSectionConfigFactory, factory: _AssetGroupSectionConfigFactory.\u0275fac, providedIn: "root" });
};
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(AssetGroupSectionConfigFactory, [{
    type: Injectable,
    args: [{ providedIn: "root" }]
  }], null, null);
})();

// src/app/features/administration/components/asset-categories/asset-category-details-section/asset-category-details-section.component.ts
var _c071 = (a0) => ({ "icon-primary": a0 });
function AssetCategoryDetailsSectionComponent_Conditional_7_Template(rf, ctx) {
  if (rf & 1) {
    const _r1 = \u0275\u0275getCurrentView();
    \u0275\u0275elementStart(0, "div", 6)(1, "span", 9);
    \u0275\u0275listener("click", function AssetCategoryDetailsSectionComponent_Conditional_7_Template_span_click_1_listener() {
      \u0275\u0275restoreView(_r1);
      const ctx_r1 = \u0275\u0275nextContext();
      return \u0275\u0275resetView(ctx_r1.onEdit());
    })("keydown.enter", function AssetCategoryDetailsSectionComponent_Conditional_7_Template_span_keydown_enter_1_listener() {
      \u0275\u0275restoreView(_r1);
      const ctx_r1 = \u0275\u0275nextContext();
      return \u0275\u0275resetView(ctx_r1.onEdit());
    });
    \u0275\u0275elementEnd()();
  }
  if (rf & 2) {
    \u0275\u0275advance();
    \u0275\u0275attribute("aria-label", "Edit asset category details");
  }
}
function AssetCategoryDetailsSectionComponent_Conditional_10_Template(rf, ctx) {
  if (rf & 1) {
    const _r3 = \u0275\u0275getCurrentView();
    \u0275\u0275elementStart(0, "app-dynamic-form", 10);
    \u0275\u0275listener("formSubmit", function AssetCategoryDetailsSectionComponent_Conditional_10_Template_app_dynamic_form_formSubmit_0_listener($event) {
      \u0275\u0275restoreView(_r3);
      const ctx_r1 = \u0275\u0275nextContext();
      return \u0275\u0275resetView(ctx_r1.onSubmit($event));
    })("formValidityChange", function AssetCategoryDetailsSectionComponent_Conditional_10_Template_app_dynamic_form_formValidityChange_0_listener($event) {
      \u0275\u0275restoreView(_r3);
      const ctx_r1 = \u0275\u0275nextContext();
      return \u0275\u0275resetView(ctx_r1.onFormValidityChange($event));
    })("formValueChange", function AssetCategoryDetailsSectionComponent_Conditional_10_Template_app_dynamic_form_formValueChange_0_listener($event) {
      \u0275\u0275restoreView(_r3);
      const ctx_r1 = \u0275\u0275nextContext();
      return \u0275\u0275resetView(ctx_r1.onFormValueChange($event));
    });
    \u0275\u0275elementEnd();
  }
  if (rf & 2) {
    const ctx_r1 = \u0275\u0275nextContext();
    \u0275\u0275property("fields", ctx_r1.formFields)("actions", ctx_r1.actions)("hideActions", ctx_r1.createMode());
  }
}
function AssetCategoryDetailsSectionComponent_Conditional_11_Template(rf, ctx) {
  if (rf & 1) {
    \u0275\u0275element(0, "app-grid", 8);
  }
  if (rf & 2) {
    const ctx_r1 = \u0275\u0275nextContext();
    \u0275\u0275property("data", ctx_r1.assetCategoryDetails())("columns", ctx_r1.columns)("showGridLines", false)("hideHeader", true);
  }
}
var AssetCategoryDetailsSectionComponent = class _AssetCategoryDetailsSectionComponent extends EntitySectionBaseComponent {
  ownerId = input(null, ...ngDevMode ? [{ debugName: "ownerId" }] : []);
  entitiesService = inject(EntitiesService);
  operationRegistry = inject(EntityOperationRegistryService);
  assetGroupingService = inject(AssetGroupingService);
  cacheService = inject(RequestCacheService);
  assetCategoryDetails = computed(() => {
    const assetCategoryDetails = this.entity();
    if (!isDefined(assetCategoryDetails))
      return [];
    return [{ key: "Name", value: assetCategoryDetails.name }];
  }, ...ngDevMode ? [{ debugName: "assetCategoryDetails" }] : []);
  faSitemap = faSitemap;
  assetCategoryGroups = [];
  constructor() {
    super();
    this.columns = [
      { field: "key", header: "", transform: "uppercase" },
      { field: "value", header: "" }
    ];
    effect(() => {
      const ownerId = this.entity()?.owner?.id ?? this.ownerId();
      const entityId = this.entity()?.id;
      if (isDefined(ownerId)) {
        this.fetchAssetCategories(ownerId).then((groups) => {
          const root = AssetGroupingService.createRootNode(ownerId);
          this.assetCategoryGroups = [
            root,
            ...groups.filter((group) => group.id !== entityId)
          ];
          this.updateFormFields();
        }).catch(() => {
        });
      }
    });
  }
  fetchAssetCategories(ownerId) {
    return this.assetGroupingService.getAssetCategories(ownerId);
  }
  updateFormFields() {
    const assetCategory = this.entity();
    const parentOptions = [
      ...this.assetCategoryGroups.map((group) => ({
        label: group.name,
        value: group.id
      }))
    ];
    this.formFields = [
      createTextField("name", "Name", assetCategory?.name, {
        name: "name",
        validations: [
          {
            name: "required",
            validator: Validators.required,
            message: "Name is required"
          }
        ]
      })
    ];
    if (this.createMode()) {
      this.formFields.unshift(createDropdownField("parent", "Parent", parentOptions, assetCategory?.parent?.id, {
        placeholder: "Select Parent Group",
        validations: [
          {
            name: "required",
            validator: Validators.required,
            message: "Parent group is required"
          }
        ],
        props: {
          appendTo: "body"
        }
      }));
    }
  }
  getUpdateMethod() {
    return this.operationRegistry.getOperation("asset-category", "update") ?? ((id, data) => this.entitiesService.updateAssetCategory(id, this.transformFormData(data)).pipe(tap(() => {
      this.cacheService.clearCacheByPattern(`asset-categories-`);
    })));
  }
  onFormValueChange(formData) {
    const transformedData = this.transformFormData(formData);
    this.formValueChange.emit(transformedData);
  }
  transformFormData(formData) {
    const transformedData = __spreadValues({}, formData);
    if (isDefined(transformedData["parent"])) {
      const parentId = transformedData["parent"];
      const parent = this.assetCategoryGroups?.find((option) => option.id === parentId);
      if (parent) {
        transformedData["parent"] = {
          id: parent.id,
          name: parent.name
        };
      } else if (parentId === "root") {
        transformedData["parent"] = null;
      }
    }
    return transformedData;
  }
  static \u0275fac = function AssetCategoryDetailsSectionComponent_Factory(__ngFactoryType__) {
    return new (__ngFactoryType__ || _AssetCategoryDetailsSectionComponent)();
  };
  static \u0275cmp = /* @__PURE__ */ \u0275\u0275defineComponent({ type: _AssetCategoryDetailsSectionComponent, selectors: [["app-asset-category-details-section"]], inputs: { ownerId: [1, "ownerId"] }, features: [\u0275\u0275InheritDefinitionFeature], decls: 12, vars: 7, consts: [[1, "card", "pt-2"], [1, "mb-4", "p-2", "flex", "justify-start", "items-center"], [1, "!text-[2.5rem]", 3, "icon", "ngClass"], [1, "pl-6", "flex-1"], [1, "flex", "justify-between", "items-center"], [1, "text-xl", "font-semibold", "m-0"], [1, "icon-light"], [3, "fields", "actions", "hideActions"], ["tableStyleClass", "info-display !w-auto", 3, "data", "columns", "showGridLines", "hideHeader"], [1, "pi", "pi-pen-to-square", "action", "hover", "!text-2xl", 3, "click", "keydown.enter"], [3, "formSubmit", "formValidityChange", "formValueChange", "fields", "actions", "hideActions"]], template: function AssetCategoryDetailsSectionComponent_Template(rf, ctx) {
    if (rf & 1) {
      \u0275\u0275elementStart(0, "div", 0)(1, "div", 1);
      \u0275\u0275element(2, "fa-icon", 2);
      \u0275\u0275elementStart(3, "div", 3)(4, "div", 4)(5, "h2", 5);
      \u0275\u0275text(6, "Asset Category Details");
      \u0275\u0275elementEnd();
      \u0275\u0275conditionalCreate(7, AssetCategoryDetailsSectionComponent_Conditional_7_Template, 2, 1, "div", 6);
      \u0275\u0275elementEnd();
      \u0275\u0275elementStart(8, "span");
      \u0275\u0275text(9, "The following information is required in order to identify your cost centre.");
      \u0275\u0275elementEnd()()();
      \u0275\u0275conditionalCreate(10, AssetCategoryDetailsSectionComponent_Conditional_10_Template, 1, 3, "app-dynamic-form", 7);
      \u0275\u0275conditionalCreate(11, AssetCategoryDetailsSectionComponent_Conditional_11_Template, 1, 4, "app-grid", 8);
      \u0275\u0275elementEnd();
    }
    if (rf & 2) {
      \u0275\u0275advance(2);
      \u0275\u0275property("icon", ctx.faSitemap)("ngClass", \u0275\u0275pureFunction1(5, _c071, ctx.isFormEditable()));
      \u0275\u0275advance(5);
      \u0275\u0275conditional(!ctx.isFormEditable() && !ctx.createMode() ? 7 : -1);
      \u0275\u0275advance(3);
      \u0275\u0275conditional(ctx.isFormEditable() || ctx.createMode() && ctx.formFields.length ? 10 : -1);
      \u0275\u0275advance();
      \u0275\u0275conditional(!ctx.isFormEditable() && !ctx.createMode() ? 11 : -1);
    }
  }, dependencies: [
    CommonModule,
    NgClass,
    GridComponent,
    DynamicFormComponent,
    FontAwesomeModule,
    FaIconComponent
  ], encapsulation: 2 });
};
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(AssetCategoryDetailsSectionComponent, [{
    type: Component,
    args: [{ selector: "app-asset-category-details-section", imports: [
      CommonModule,
      GridComponent,
      DynamicFormComponent,
      FontAwesomeModule
    ], template: `<div class="card pt-2">
  <div class="mb-4 p-2 flex justify-start items-center">
    <fa-icon
      [icon]="faSitemap"
      class="!text-[2.5rem]"
      [ngClass]="{ 'icon-primary': isFormEditable() }"
    ></fa-icon>

    <div class="pl-6 flex-1">
      <div class="flex justify-between items-center">
        <h2 class="text-xl font-semibold m-0">Asset Category Details</h2>
        @if (!isFormEditable() && !createMode()) {
          <div class="icon-light">
            <span
              class="pi pi-pen-to-square action hover !text-2xl"
              [attr.aria-label]="'Edit asset category details'"
              (click)="onEdit()"
              (keydown.enter)="onEdit()"
            ></span>
          </div>
        }
      </div>
      <span
        >The following information is required in order to identify your cost
        centre.</span
      >
    </div>
  </div>

  @if (isFormEditable() || (createMode() && formFields.length)) {
    <app-dynamic-form
      [fields]="formFields"
      [actions]="actions"
      [hideActions]="createMode()"
      (formSubmit)="onSubmit($event)"
      (formValidityChange)="onFormValidityChange($event)"
      (formValueChange)="onFormValueChange($event)"
    >
    </app-dynamic-form>
  }

  @if (!isFormEditable() && !createMode()) {
    <app-grid
      [data]="assetCategoryDetails()"
      [columns]="columns"
      [showGridLines]="false"
      [hideHeader]="true"
      tableStyleClass="info-display !w-auto"
    ></app-grid>
  }
</div>
` }]
  }], () => [], { ownerId: [{ type: Input, args: [{ isSignal: true, alias: "ownerId", required: false }] }] });
})();
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && \u0275setClassDebugInfo(AssetCategoryDetailsSectionComponent, { className: "AssetCategoryDetailsSectionComponent", filePath: "src/app/features/administration/components/asset-categories/asset-category-details-section/asset-category-details-section.component.ts", lineNumber: 39 });
})();

// src/app/features/administration/factories/asset-category-section-config.factory.ts
var AssetCategorySectionConfigFactory = class _AssetCategorySectionConfigFactory {
  assetGroupingService = inject(AssetGroupingService);
  entitiesService = inject(EntitiesService);
  accountsService = inject(AccountsService);
  utilityService = inject(UtilityService);
  cacheService = inject(RequestCacheService);
  /**
   * Create sections for asset category information
   * @param assetCategory The asset category object to display in the section
   * @returns An array of AdminDetailSection objects representing the asset category information sections
   */
  createAssetCategoryInformationSection(assetCategory) {
    return [
      {
        id: "asset-category-details",
        title: "Asset Category Details",
        component: AssetCategoryDetailsSectionComponent,
        componentInputs: { entity: assetCategory },
        category: "information",
        order: 10
      },
      {
        id: "asset-category-contacts",
        title: "Contacts",
        component: ContactsSectionComponent,
        componentInputs: {
          entity: assetCategory,
          entityType: "asset-category"
        },
        category: "information",
        order: 20
      }
    ];
  }
  /**
   * Create sections for asset category changes
   * @param assetCategory The asset category object to display in the section
   * @returns An array of AdminDetailSection objects representing the asset category changes sections
   */
  createChangesSection(assetCategory) {
    return [
      {
        id: "asset-category-changes",
        title: "Changes",
        component: FeedSectionComponent,
        componentInputs: {
          entity: assetCategory
        },
        category: "feed",
        order: 10
      }
    ];
  }
  /**
   * Create sections for asset category assets
   * @param assetCategory The asset category object to display in the section
   * @returns An array of AdminDetailSection objects representing the asset category assets sections
   */
  createAssetsSection(assetCategory) {
    return [
      {
        id: "asset-category-assets",
        title: "Assets",
        component: AssetListSectionComponent,
        componentInputs: {
          entity: assetCategory,
          // The current asset category object
          groupId: "categories.id",
          // RQL path to filter assets for this asset category
          groupingEntityType: "Asset category",
          assetLinkField: "categories",
          // The field on AssetResponse linking to AssetCategoryResponse
          index: assetCategory?.index ?? 0,
          // Use the index from the asset category if available
          getGroupingEntitiesFn: (ownerId) => this.assetGroupingService.getAssetCategoriesAsTree(ownerId),
          getAvailableAssetsFn: (ownerId, _currentEntityId) => this.getAvailableAssets(ownerId)
        },
        category: "assets",
        order: 10
      }
    ];
  }
  /**
   * Get available assets for the given owner
   * @param ownerId The owner ID to fetch assets for
   * @returns Promise of simplified asset objects
   */
  getAvailableAssets(ownerId) {
    const filters = {
      state: {
        value: "active",
        operator: "="
      }
    };
    const rqlFilter = this.utilityService.constructRqlFilter(filters);
    return this.cacheService.getOrFetchAsync(`assets-list-${ownerId}-${rqlFilter}`, () => firstValueFrom(this.entitiesService.listAssets(ownerId, 0, 100, "name", rqlFilter).pipe(map((res) => res.items.map((asset) => ({
      id: asset.id,
      name: asset.name
    }))))), 3e5);
  }
  /**
   * Create all assetCategory sections in one call
   * @param assetCategory The assetCategory object to display in the sections
   * @returns An array of AdminDetailSection objects representing all assetCategory sections
   */
  createAllAssetCategorySections(assetCategory) {
    return [
      ...this.createAssetCategoryInformationSection(assetCategory),
      ...this.createAssetsSection(assetCategory),
      ...this.createChangesSection(assetCategory)
    ];
  }
  static \u0275fac = function AssetCategorySectionConfigFactory_Factory(__ngFactoryType__) {
    return new (__ngFactoryType__ || _AssetCategorySectionConfigFactory)();
  };
  static \u0275prov = /* @__PURE__ */ \u0275\u0275defineInjectable({ token: _AssetCategorySectionConfigFactory, factory: _AssetCategorySectionConfigFactory.\u0275fac, providedIn: "root" });
};
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(AssetCategorySectionConfigFactory, [{
    type: Injectable,
    args: [{ providedIn: "root" }]
  }], null, null);
})();

// src/app/features/administration/factories/client-section-config.factory.ts
var ClientSectionConfigFactory = class _ClientSectionConfigFactory {
  /**
   * Create all client sections in one call
   * @param client The client object to display in the sections
   * @returns An array of AdminDetailSection objects representing all client sections
   */
  createAllClientSections(client, appFeatures) {
    const features = appFeatures.map((feature) => SectionConfigBuilder.forClient(client).addSection(feature, "Features", FeatureSectionComponent, {
      category: "features"
    }, {
      feature: AppFeatures[feature],
      entityType: "client"
    }).build()).flat();
    return [
      ...SectionConfigBuilder.createClientInformationSections(client),
      ...SectionConfigBuilder.createClientSettingsSections(client),
      ...features,
      ...SectionConfigBuilder.createClientChangesSections(client)
    ];
  }
  static \u0275fac = function ClientSectionConfigFactory_Factory(__ngFactoryType__) {
    return new (__ngFactoryType__ || _ClientSectionConfigFactory)();
  };
  static \u0275prov = /* @__PURE__ */ \u0275\u0275defineInjectable({ token: _ClientSectionConfigFactory, factory: _ClientSectionConfigFactory.\u0275fac, providedIn: "root" });
};
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(ClientSectionConfigFactory, [{
    type: Injectable,
    args: [{ providedIn: "root" }]
  }], null, null);
})();

// src/app/features/administration/factories/vendor-section-config.factory.ts
var VendorSectionConfigFactory = class _VendorSectionConfigFactory {
  /**
   * Create all vendor sections in one call (legacy approach)
   * @param vendor The vendor object to display in the sections
   * @returns An array of AdminDetailSection objects representing all vendor sections
   */
  createAllVendorSections(vendor) {
    return [
      ...SectionConfigBuilder.createVendorInformationSections(vendor),
      ...SectionConfigBuilder.createVendorSettingsSections(vendor),
      ...[
        {
          id: "vendor-changes",
          title: "Changes",
          component: FeedSectionComponent,
          componentInputs: {
            entity: vendor,
            entityType: "vendor"
          },
          category: "feed",
          order: 10
        }
      ]
    ];
  }
  /**
   * Create all vendor sections with flexible configuration (new approach)
   * @param vendor The vendor object to display in the sections
   * @returns Configuration object with sections and layout
   */
  createFlexibleVendorConfiguration(vendor) {
    const informationSections = SectionConfigBuilder.createVendorInformationSections(vendor);
    const settingsSections = SectionConfigBuilder.createVendorSettingsSections(vendor);
    return FlexibleSectionBuilder.forEntity(vendor).withSections(informationSections).withSections(settingsSections).withSection("vendor-changes", "Changes", FeedSectionComponent, "feed", 10, {
      entityType: "vendor"
    }).withCategory("information", "Vendor Information", 10).withCategory("settings", "Vendor Settings", 20).withCategory("feed", "Recent Changes", 30).withDefaultExpanded("information").withMultipleExpansion(false).build();
  }
  static \u0275fac = function VendorSectionConfigFactory_Factory(__ngFactoryType__) {
    return new (__ngFactoryType__ || _VendorSectionConfigFactory)();
  };
  static \u0275prov = /* @__PURE__ */ \u0275\u0275defineInjectable({ token: _VendorSectionConfigFactory, factory: _VendorSectionConfigFactory.\u0275fac, providedIn: "root" });
};
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(VendorSectionConfigFactory, [{
    type: Injectable,
    args: [{ providedIn: "root" }]
  }], null, null);
})();

// src/app/features/administration/factories/distributor-section-config.factory.ts
var DistributorSectionConfigFactory = class _DistributorSectionConfigFactory {
  /**
   * Create all distributor sections in one call
   * @param distributor The distributor object to display in the sections
   * @returns An array of AdminDetailSection objects representing all distributor sections
   */
  createAllDistributorSections(distributor) {
    return [
      ...SectionConfigBuilder.createDistributorInformationSections(distributor),
      ...SectionConfigBuilder.createDistributorSettingsSections(distributor),
      ...SectionConfigBuilder.createDistributorChangesSections(distributor)
    ];
  }
  static \u0275fac = function DistributorSectionConfigFactory_Factory(__ngFactoryType__) {
    return new (__ngFactoryType__ || _DistributorSectionConfigFactory)();
  };
  static \u0275prov = /* @__PURE__ */ \u0275\u0275defineInjectable({ token: _DistributorSectionConfigFactory, factory: _DistributorSectionConfigFactory.\u0275fac, providedIn: "root" });
};
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(DistributorSectionConfigFactory, [{
    type: Injectable,
    args: [{ providedIn: "root" }]
  }], null, null);
})();

// src/app/features/administration/components/asset-state-profiles/asset-state-profile-details-section/asset-state-profile-details-section.component.ts
var _c072 = (a0) => ({ "icon-primary": a0 });
function AssetStateProfileDetailsSectionComponent_Conditional_7_Template(rf, ctx) {
  if (rf & 1) {
    const _r1 = \u0275\u0275getCurrentView();
    \u0275\u0275elementStart(0, "div", 6)(1, "span", 8);
    \u0275\u0275listener("click", function AssetStateProfileDetailsSectionComponent_Conditional_7_Template_span_click_1_listener() {
      \u0275\u0275restoreView(_r1);
      const ctx_r1 = \u0275\u0275nextContext();
      return \u0275\u0275resetView(ctx_r1.onEdit());
    })("keydown.enter", function AssetStateProfileDetailsSectionComponent_Conditional_7_Template_span_keydown_enter_1_listener() {
      \u0275\u0275restoreView(_r1);
      const ctx_r1 = \u0275\u0275nextContext();
      return \u0275\u0275resetView(ctx_r1.onEdit());
    });
    \u0275\u0275elementEnd()();
  }
  if (rf & 2) {
    \u0275\u0275advance();
    \u0275\u0275attribute("aria-label", "Edit asset state profile details");
  }
}
function AssetStateProfileDetailsSectionComponent_Conditional_10_Template(rf, ctx) {
  if (rf & 1) {
    const _r3 = \u0275\u0275getCurrentView();
    \u0275\u0275elementStart(0, "app-dynamic-form", 9);
    \u0275\u0275listener("formSubmit", function AssetStateProfileDetailsSectionComponent_Conditional_10_Template_app_dynamic_form_formSubmit_0_listener($event) {
      \u0275\u0275restoreView(_r3);
      const ctx_r1 = \u0275\u0275nextContext();
      return \u0275\u0275resetView(ctx_r1.onSubmit($event));
    })("formValidityChange", function AssetStateProfileDetailsSectionComponent_Conditional_10_Template_app_dynamic_form_formValidityChange_0_listener($event) {
      \u0275\u0275restoreView(_r3);
      const ctx_r1 = \u0275\u0275nextContext();
      return \u0275\u0275resetView(ctx_r1.onFormValidityChange($event));
    })("formValueChange", function AssetStateProfileDetailsSectionComponent_Conditional_10_Template_app_dynamic_form_formValueChange_0_listener($event) {
      \u0275\u0275restoreView(_r3);
      const ctx_r1 = \u0275\u0275nextContext();
      return \u0275\u0275resetView(ctx_r1.onFormValueChange($event));
    });
    \u0275\u0275elementEnd();
  }
  if (rf & 2) {
    const ctx_r1 = \u0275\u0275nextContext();
    \u0275\u0275property("fields", ctx_r1.formFields)("actions", ctx_r1.actions)("hideActions", ctx_r1.createMode());
  }
}
function AssetStateProfileDetailsSectionComponent_Conditional_11_Conditional_0_Template(rf, ctx) {
  if (rf & 1) {
    \u0275\u0275elementStart(0, "div", 10)(1, "p-message", 12);
    \u0275\u0275element(2, "span", 13);
    \u0275\u0275text(3);
    \u0275\u0275elementEnd()();
  }
  if (rf & 2) {
    const ctx_r1 = \u0275\u0275nextContext(2);
    \u0275\u0275advance(3);
    \u0275\u0275textInterpolate1(" ", ctx_r1.warning());
  }
}
function AssetStateProfileDetailsSectionComponent_Conditional_11_Template(rf, ctx) {
  if (rf & 1) {
    \u0275\u0275conditionalCreate(0, AssetStateProfileDetailsSectionComponent_Conditional_11_Conditional_0_Template, 4, 1, "div", 10);
    \u0275\u0275element(1, "app-grid", 11);
  }
  if (rf & 2) {
    const ctx_r1 = \u0275\u0275nextContext();
    \u0275\u0275conditional(ctx_r1.warning() ? 0 : -1);
    \u0275\u0275advance();
    \u0275\u0275property("data", ctx_r1.assetStateProfileDetails())("columns", ctx_r1.columns)("showGridLines", false)("hideHeader", true);
  }
}
var AssetStateProfileDetailsSectionComponent = class _AssetStateProfileDetailsSectionComponent extends EntitySectionBaseComponent {
  ownerId = input(null, ...ngDevMode ? [{ debugName: "ownerId" }] : []);
  entitiesService = inject(EntitiesService);
  eventFilterService = inject(EventFilterService);
  assetStateProfileDetails = computed(() => {
    const assetStateProfileDetails = this.entity();
    if (!isDefined(assetStateProfileDetails))
      return [];
    return [
      { key: "Name", value: assetStateProfileDetails.name },
      {
        key: "States",
        value: !isEmpty(assetStateProfileDetails.items) ? assetStateProfileDetails.items?.map((item) => item.state).join(", ") : "None"
      }
    ];
  }, ...ngDevMode ? [{ debugName: "assetStateProfileDetails" }] : []);
  assetStateProfileItemModalConfig;
  warning = signal(null, ...ngDevMode ? [{ debugName: "warning" }] : []);
  constructor() {
    super();
    this.columns = [
      { field: "key", header: "", transform: "uppercase" },
      { field: "value", header: "" }
    ];
    effect(() => {
      const assetStateProfileDetails = this.entity();
      if (isNullOrUndefined(assetStateProfileDetails?.items) || assetStateProfileDetails.items.length < 2) {
        this.warning.set("At least two states are required for the asset state profile to be useful.");
      } else {
        this.warning.set(null);
      }
    });
  }
  updateFormFields() {
    const assetStateProfile = this.entity();
    this.assetStateProfileItemModalConfig = {
      modalComponent: ModalListFormComponent,
      modalTitle: "State Change Trigger",
      defaultItemProvider: () => ({
        id: v4_default(),
        state: "",
        color: "#0000ff",
        radius: 0,
        filter: void 0
      }),
      listItemFormatter: (item) => this.stateItemToListItem(item),
      modalFields: (_item) => {
        return [
          createTextField("id", "ID", _item?.id, {
            name: "id",
            hidden: true
          }),
          createTextField("state", "State Name", _item?.name, {
            name: "state",
            validations: [
              {
                name: "required",
                validator: Validators.required,
                message: "State Name is required"
              }
            ]
          }),
          createColorPickerField("color", "State Color", void 0, {
            name: "color",
            validations: [
              {
                name: "required",
                validator: Validators.required,
                message: "Color is required"
              }
            ],
            layout: "horizontal",
            labelWidth: "1/3"
          }),
          createNumberField("radius", "Radius", void 0, {
            name: "radius",
            validations: [
              {
                name: "required",
                validator: Validators.required,
                message: "Max is required"
              },
              {
                name: "min",
                validator: Validators.min(0),
                message: "Min must be 0 or greater"
              },
              {
                name: "max",
                validator: Validators.max(1e3),
                message: "Max must be 1000 or less"
              }
            ],
            layout: "horizontal",
            labelWidth: "1/3",
            hint: "Defines the thickness of the trip line drawn on the map for applications where coverage is important.",
            props: {
              suffix: "meters"
            }
          }),
          createEventFilterField("filter", "Event Filter", void 0, ["costcentres", "groups", "types", "categories"], {
            name: "filter",
            required: true,
            validations: [
              {
                name: "required",
                validator: Validators.required,
                message: "Event filter is required"
              }
            ]
          })
        ];
      },
      subHeader: "Choose a state name and color, and configure the event filter to trigger this state."
    };
    this.formFields = [
      createTextField("name", "Name", assetStateProfile?.name, {
        name: "name",
        validations: [
          {
            name: "required",
            validator: Validators.required,
            message: "Name is required"
          }
        ]
      })
    ];
    if (!this.createMode()) {
      this.formFields.push(createModalListField("items", "States", assetStateProfile?.items ?? [], {
        layout: "horizontal",
        labelWidth: "1/3",
        name: "items",
        props: {
          modalConfig: this.assetStateProfileItemModalConfig
        }
      }));
    }
  }
  submitChanges(formData) {
    const assetStateProfile = this.entity();
    if (isNullOrUndefined(assetStateProfile))
      return;
    const transformedData = this.transformFormData(formData);
    this.entitiesService.updateAssetStateProfile(assetStateProfile.id, transformedData).pipe(takeUntilDestroyed(this.destroyRef)).subscribe({
      next: (response) => {
        this.isFormEditable.set(false);
        this.isSubmitting.set(false);
        this.broadcastService.broadcast("entity-updated", {
          entityType: "asset-state-profile",
          operation: "update",
          entityId: assetStateProfile.id,
          data: response
        });
      },
      error: () => {
        this.isFormEditable.set(true);
        this.isSubmitting.set(false);
      }
    });
  }
  stateItemToListItem(item) {
    return {
      id: item.id,
      title: item.state,
      display: item.name,
      icon: `tag`,
      iconStyle: { color: item.color }
    };
  }
  onFormValueChange(formData) {
    const transformedData = this.transformFormData(formData);
    this.formValueChange.emit(transformedData);
  }
  transformFormData(formData) {
    const transformedData = __spreadValues({}, formData);
    if (Array.isArray(transformedData["items"])) {
      transformedData["items"] = transformedData["items"].map((item) => {
        const transformedItem = __spreadValues({}, item);
        if (isDefined(transformedItem["radius"])) {
          const r = transformedItem["radius"];
          transformedItem["radius"] = typeof r === "string" ? Number(r) : r;
        }
        if (isDefined(transformedItem["filter"])) {
          const filter = transformedItem["filter"];
          transformedItem["filter"] = __spreadProps(__spreadValues({}, filter), {
            actor: filter?.actor?.data,
            action: filter?.action?.data,
            target: filter?.target?.data,
            conditions: filter?.conditions?.map((_a) => {
              var _b = _a, { id: _id } = _b, rest = __objRest(_b, ["id"]);
              return rest;
            }) ?? []
          });
        }
        if (isDefined(transformedItem["state"]) && !isDefined(transformedItem["name"])) {
          transformedItem["name"] = this.eventFilterService.getEventFilterText(transformedItem["filter"]);
        }
        return transformedItem;
      });
    }
    return transformedData;
  }
  static \u0275fac = function AssetStateProfileDetailsSectionComponent_Factory(__ngFactoryType__) {
    return new (__ngFactoryType__ || _AssetStateProfileDetailsSectionComponent)();
  };
  static \u0275cmp = /* @__PURE__ */ \u0275\u0275defineComponent({ type: _AssetStateProfileDetailsSectionComponent, selectors: [["app-asset-state-profile-details-section"]], inputs: { ownerId: [1, "ownerId"] }, features: [\u0275\u0275InheritDefinitionFeature], decls: 12, vars: 7, consts: [[1, "card", "pt-2"], [1, "mb-4", "p-2", "flex", "justify-start", "items-center"], [1, "pi", "pi-lightbulb", "!text-[2.5rem]", 3, "ngClass"], [1, "pl-6", "flex-1"], [1, "flex", "justify-between", "items-center"], [1, "text-xl", "font-semibold", "m-0"], [1, "icon-light"], [3, "fields", "actions", "hideActions"], [1, "pi", "pi-pen-to-square", "action", "hover", "!text-2xl", 3, "click", "keydown.enter"], [3, "formSubmit", "formValidityChange", "formValueChange", "fields", "actions", "hideActions"], [1, "mb-4"], ["tableStyleClass", "info-display !w-auto", 3, "data", "columns", "showGridLines", "hideHeader"], ["severity", "warn"], [1, "pi", "pi-exclamation-triangle", "mr-2"]], template: function AssetStateProfileDetailsSectionComponent_Template(rf, ctx) {
    if (rf & 1) {
      \u0275\u0275elementStart(0, "div", 0)(1, "div", 1);
      \u0275\u0275element(2, "span", 2);
      \u0275\u0275elementStart(3, "div", 3)(4, "div", 4)(5, "h2", 5);
      \u0275\u0275text(6, "Asset State Profile Details");
      \u0275\u0275elementEnd();
      \u0275\u0275conditionalCreate(7, AssetStateProfileDetailsSectionComponent_Conditional_7_Template, 2, 1, "div", 6);
      \u0275\u0275elementEnd();
      \u0275\u0275elementStart(8, "span");
      \u0275\u0275text(9, "Configure the state change triggers for your asset state profile.");
      \u0275\u0275elementEnd()()();
      \u0275\u0275conditionalCreate(10, AssetStateProfileDetailsSectionComponent_Conditional_10_Template, 1, 3, "app-dynamic-form", 7);
      \u0275\u0275conditionalCreate(11, AssetStateProfileDetailsSectionComponent_Conditional_11_Template, 2, 5);
      \u0275\u0275elementEnd();
    }
    if (rf & 2) {
      \u0275\u0275advance(2);
      \u0275\u0275property("ngClass", \u0275\u0275pureFunction1(5, _c072, ctx.isFormEditable()));
      \u0275\u0275attribute("aria-label", "lightbulb icon");
      \u0275\u0275advance(5);
      \u0275\u0275conditional(!ctx.isFormEditable() && !ctx.createMode() ? 7 : -1);
      \u0275\u0275advance(3);
      \u0275\u0275conditional(ctx.isFormEditable() || ctx.createMode() && ctx.formFields.length ? 10 : -1);
      \u0275\u0275advance();
      \u0275\u0275conditional(!ctx.isFormEditable() && !ctx.createMode() ? 11 : -1);
    }
  }, dependencies: [
    CommonModule,
    NgClass,
    ButtonModule,
    GridComponent,
    DynamicFormComponent,
    MessageModule,
    Message
  ], encapsulation: 2 });
};
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(AssetStateProfileDetailsSectionComponent, [{
    type: Component,
    args: [{ selector: "app-asset-state-profile-details-section", imports: [
      CommonModule,
      ButtonModule,
      GridComponent,
      DynamicFormComponent,
      MessageModule
    ], template: `<div class="card pt-2">
  <div class="mb-4 p-2 flex justify-start items-center">
    <span
      class="pi pi-lightbulb !text-[2.5rem]"
      [ngClass]="{ 'icon-primary': isFormEditable() }"
      [attr.aria-label]="'lightbulb icon'"
    ></span>

    <div class="pl-6 flex-1">
      <div class="flex justify-between items-center">
        <h2 class="text-xl font-semibold m-0">Asset State Profile Details</h2>
        @if (!isFormEditable() && !createMode()) {
          <div class="icon-light">
            <span
              class="pi pi-pen-to-square action hover !text-2xl"
              [attr.aria-label]="'Edit asset state profile details'"
              (click)="onEdit()"
              (keydown.enter)="onEdit()"
            ></span>
          </div>
        }
      </div>
      <span
        >Configure the state change triggers for your asset state profile.</span
      >
    </div>
  </div>

  @if (isFormEditable() || (createMode() && formFields.length)) {
    <app-dynamic-form
      [fields]="formFields"
      [actions]="actions"
      [hideActions]="createMode()"
      (formSubmit)="onSubmit($event)"
      (formValidityChange)="onFormValidityChange($event)"
      (formValueChange)="onFormValueChange($event)"
    >
    </app-dynamic-form>
  }

  @if (!isFormEditable() && !createMode()) {
    @if (warning()) {
      <div class="mb-4">
        <p-message severity="warn">
          <span class="pi pi-exclamation-triangle mr-2"></span>
          {{ warning() }}</p-message
        >
      </div>
    }
    <app-grid
      [data]="assetStateProfileDetails()"
      [columns]="columns"
      [showGridLines]="false"
      [hideHeader]="true"
      tableStyleClass="info-display !w-auto"
    ></app-grid>
  }
</div>
` }]
  }], () => [], { ownerId: [{ type: Input, args: [{ isSignal: true, alias: "ownerId", required: false }] }] });
})();
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && \u0275setClassDebugInfo(AssetStateProfileDetailsSectionComponent, { className: "AssetStateProfileDetailsSectionComponent", filePath: "src/app/features/administration/components/asset-state-profiles/asset-state-profile-details-section/asset-state-profile-details-section.component.ts", lineNumber: 61 });
})();

// src/app/features/administration/factories/asset-state-profile-section-config.factory.ts
var AssetStateProfileSectionConfigFactory = class _AssetStateProfileSectionConfigFactory {
  /**
   * Create sections for assetStateProfile information
   * @param assetStateProfile The assetStateProfile object to display in the section
   * @returns An array of AdminDetailSection objects representing the assetStateProfile information sections
   */
  createAssetStateProfileInformationSections(assetStateProfile) {
    return [
      {
        id: "asset-state-profile-details",
        title: "Asset State Profile Details",
        component: AssetStateProfileDetailsSectionComponent,
        componentInputs: { entity: assetStateProfile },
        category: "information",
        order: 10
      }
    ];
  }
  /**
   * Create sections for assetStateProfile changes
   * @param assetStateProfile The assetStateProfile object to display in the section
   * @returns An array of AdminDetailSection objects representing the assetStateProfile changes sections
   */
  createChangesSection(assetStateProfile) {
    return [
      {
        id: "asset-state-profile-changes",
        title: "Changes",
        component: FeedSectionComponent,
        componentInputs: {
          entity: assetStateProfile
        },
        category: "feed",
        order: 10
      }
    ];
  }
  /**
   * Create all assetStateProfile sections in one call
   * @param assetStateProfile The assetStateProfile object to display in the sections
   * @returns An array of AdminDetailSection objects representing all assetStateProfile sections
   */
  createAllAssetStateProfileSections(assetStateProfile) {
    return [
      ...this.createAssetStateProfileInformationSections(assetStateProfile),
      ...this.createChangesSection(assetStateProfile)
    ];
  }
  static \u0275fac = function AssetStateProfileSectionConfigFactory_Factory(__ngFactoryType__) {
    return new (__ngFactoryType__ || _AssetStateProfileSectionConfigFactory)();
  };
  static \u0275prov = /* @__PURE__ */ \u0275\u0275defineInjectable({ token: _AssetStateProfileSectionConfigFactory, factory: _AssetStateProfileSectionConfigFactory.\u0275fac, providedIn: "root" });
};
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(AssetStateProfileSectionConfigFactory, [{
    type: Injectable,
    args: [{ providedIn: "root" }]
  }], null, null);
})();

// src/app/features/administration/components/company-groups/company-group-details-section/company-group-details-section.component.ts
var _c073 = (a0) => ({ "icon-primary": a0 });
function CompanyGroupDetailsSectionComponent_Conditional_7_Template(rf, ctx) {
  if (rf & 1) {
    const _r1 = \u0275\u0275getCurrentView();
    \u0275\u0275elementStart(0, "div", 6)(1, "span", 9);
    \u0275\u0275listener("click", function CompanyGroupDetailsSectionComponent_Conditional_7_Template_span_click_1_listener() {
      \u0275\u0275restoreView(_r1);
      const ctx_r1 = \u0275\u0275nextContext();
      return \u0275\u0275resetView(ctx_r1.onEdit());
    })("keydown.enter", function CompanyGroupDetailsSectionComponent_Conditional_7_Template_span_keydown_enter_1_listener() {
      \u0275\u0275restoreView(_r1);
      const ctx_r1 = \u0275\u0275nextContext();
      return \u0275\u0275resetView(ctx_r1.onEdit());
    });
    \u0275\u0275elementEnd()();
  }
  if (rf & 2) {
    \u0275\u0275advance();
    \u0275\u0275attribute("aria-label", "Edit company group details");
  }
}
function CompanyGroupDetailsSectionComponent_Conditional_10_Template(rf, ctx) {
  if (rf & 1) {
    const _r3 = \u0275\u0275getCurrentView();
    \u0275\u0275elementStart(0, "app-dynamic-form", 10);
    \u0275\u0275listener("formSubmit", function CompanyGroupDetailsSectionComponent_Conditional_10_Template_app_dynamic_form_formSubmit_0_listener($event) {
      \u0275\u0275restoreView(_r3);
      const ctx_r1 = \u0275\u0275nextContext();
      return \u0275\u0275resetView(ctx_r1.onSubmit($event));
    })("formValidityChange", function CompanyGroupDetailsSectionComponent_Conditional_10_Template_app_dynamic_form_formValidityChange_0_listener($event) {
      \u0275\u0275restoreView(_r3);
      const ctx_r1 = \u0275\u0275nextContext();
      return \u0275\u0275resetView(ctx_r1.onFormValidityChange($event));
    })("formValueChange", function CompanyGroupDetailsSectionComponent_Conditional_10_Template_app_dynamic_form_formValueChange_0_listener($event) {
      \u0275\u0275restoreView(_r3);
      const ctx_r1 = \u0275\u0275nextContext();
      return \u0275\u0275resetView(ctx_r1.onFormValueChange($event));
    });
    \u0275\u0275elementEnd();
  }
  if (rf & 2) {
    const ctx_r1 = \u0275\u0275nextContext();
    \u0275\u0275property("fields", ctx_r1.formFields)("actions", ctx_r1.actions)("hideActions", ctx_r1.createMode());
  }
}
function CompanyGroupDetailsSectionComponent_Conditional_11_Template(rf, ctx) {
  if (rf & 1) {
    \u0275\u0275element(0, "app-grid", 8);
  }
  if (rf & 2) {
    const ctx_r1 = \u0275\u0275nextContext();
    \u0275\u0275property("data", ctx_r1.companyGroupDetails())("columns", ctx_r1.columns)("showGridLines", false)("hideHeader", true);
  }
}
var CompanyGroupDetailsSectionComponent = class _CompanyGroupDetailsSectionComponent extends EntitySectionBaseComponent {
  ownerId = input(null, ...ngDevMode ? [{ debugName: "ownerId" }] : []);
  entitiesService = inject(EntitiesService);
  operationRegistry = inject(EntityOperationRegistryService);
  accountsService = inject(AccountsService);
  companyGroupDetails = computed(() => {
    const companyGroupDetails = this.entity();
    if (!isDefined(companyGroupDetails))
      return [];
    return [
      { key: "Parent", value: companyGroupDetails.parent?.name ?? "Root" },
      { key: "Name", value: companyGroupDetails.name }
    ];
  }, ...ngDevMode ? [{ debugName: "companyGroupDetails" }] : []);
  faFolder = faFolder;
  companyGroupGroups = [];
  constructor() {
    super();
    this.columns = [
      { field: "key", header: "", transform: "uppercase" },
      { field: "value", header: "" }
    ];
    effect(() => {
      const ownerId = this.entity()?.owner?.id ?? this.ownerId();
      if (isDefined(ownerId)) {
        this.fetchCompanyGroups(ownerId).then((groups) => {
          this.companyGroupGroups = AssetGroupingService.toAssetGroupingItems(groups.items);
          this.updateFormFields();
        }).catch(() => {
        });
      }
    });
  }
  fetchCompanyGroups(ownerId) {
    return firstValueFrom(this.accountsService.listCompanyGroups(ownerId));
  }
  updateFormFields() {
    const companyGroup = this.entity();
    const parentOptions = [
      { label: "Root", value: DEFAULT_SYSTEM_ID },
      ...this.companyGroupGroups.map((group) => ({
        label: group.name,
        value: group.id
      }))
    ];
    this.formFields = [
      createDropdownField("parent", "Parent", parentOptions, companyGroup?.parent?.id ?? DEFAULT_SYSTEM_ID, {
        placeholder: "Select Parent Group",
        validations: [
          {
            name: "required",
            validator: Validators.required,
            message: "Parent group is required"
          }
        ],
        props: {
          appendTo: "body"
        }
      }),
      createTextField("name", "Name", companyGroup?.name, {
        name: "name",
        validations: [
          {
            name: "required",
            validator: Validators.required,
            message: "Name is required"
          }
        ]
      })
    ];
  }
  getUpdateMethod() {
    return this.operationRegistry.getOperation("company-group", "update") ?? ((id, data) => this.accountsService.updateCompanyGroup(id, data));
  }
  onFormValueChange(formData) {
    const transformedData = this.transformFormData(formData);
    this.formValueChange.emit(transformedData);
  }
  transformFormData(formData) {
    const transformedData = __spreadValues({}, formData);
    if (isDefined(transformedData["parent"])) {
      const parentId = transformedData["parent"];
      const parent = this.companyGroupGroups?.find((option) => option.id === parentId);
      if (parent) {
        transformedData["parent"] = {
          id: parent.id,
          name: parent.name
        };
      } else if (parentId === DEFAULT_SYSTEM_ID) {
        transformedData["parent"] = null;
      }
    }
    return transformedData;
  }
  static \u0275fac = function CompanyGroupDetailsSectionComponent_Factory(__ngFactoryType__) {
    return new (__ngFactoryType__ || _CompanyGroupDetailsSectionComponent)();
  };
  static \u0275cmp = /* @__PURE__ */ \u0275\u0275defineComponent({ type: _CompanyGroupDetailsSectionComponent, selectors: [["app-company-group-details-section"]], inputs: { ownerId: [1, "ownerId"] }, features: [\u0275\u0275InheritDefinitionFeature], decls: 12, vars: 7, consts: [[1, "card", "pt-2"], [1, "mb-4", "p-2", "flex", "justify-start", "items-center"], [1, "!text-[2.5rem]", 3, "icon", "ngClass"], [1, "pl-6", "flex-1"], [1, "flex", "justify-between", "items-center"], [1, "text-xl", "font-semibold", "m-0"], [1, "icon-light"], [3, "fields", "actions", "hideActions"], ["tableStyleClass", "info-display !w-auto", 3, "data", "columns", "showGridLines", "hideHeader"], [1, "pi", "pi-pen-to-square", "action", "hover", "!text-2xl", 3, "click", "keydown.enter"], [3, "formSubmit", "formValidityChange", "formValueChange", "fields", "actions", "hideActions"]], template: function CompanyGroupDetailsSectionComponent_Template(rf, ctx) {
    if (rf & 1) {
      \u0275\u0275elementStart(0, "div", 0)(1, "div", 1);
      \u0275\u0275element(2, "fa-icon", 2);
      \u0275\u0275elementStart(3, "div", 3)(4, "div", 4)(5, "h2", 5);
      \u0275\u0275text(6, "Company Group Details");
      \u0275\u0275elementEnd();
      \u0275\u0275conditionalCreate(7, CompanyGroupDetailsSectionComponent_Conditional_7_Template, 2, 1, "div", 6);
      \u0275\u0275elementEnd();
      \u0275\u0275elementStart(8, "span");
      \u0275\u0275text(9, "The following information is required in order to identify your company group.");
      \u0275\u0275elementEnd()()();
      \u0275\u0275conditionalCreate(10, CompanyGroupDetailsSectionComponent_Conditional_10_Template, 1, 3, "app-dynamic-form", 7);
      \u0275\u0275conditionalCreate(11, CompanyGroupDetailsSectionComponent_Conditional_11_Template, 1, 4, "app-grid", 8);
      \u0275\u0275elementEnd();
    }
    if (rf & 2) {
      \u0275\u0275advance(2);
      \u0275\u0275property("icon", ctx.faFolder)("ngClass", \u0275\u0275pureFunction1(5, _c073, ctx.isFormEditable()));
      \u0275\u0275advance(5);
      \u0275\u0275conditional(!ctx.isFormEditable() && !ctx.createMode() ? 7 : -1);
      \u0275\u0275advance(3);
      \u0275\u0275conditional(ctx.isFormEditable() || ctx.createMode() && ctx.formFields.length ? 10 : -1);
      \u0275\u0275advance();
      \u0275\u0275conditional(!ctx.isFormEditable() && !ctx.createMode() ? 11 : -1);
    }
  }, dependencies: [
    CommonModule,
    NgClass,
    ButtonModule,
    InputTextModule,
    GridComponent,
    DynamicFormComponent,
    FontAwesomeModule,
    FaIconComponent
  ], encapsulation: 2 });
};
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(CompanyGroupDetailsSectionComponent, [{
    type: Component,
    args: [{ selector: "app-company-group-details-section", imports: [
      CommonModule,
      ButtonModule,
      InputTextModule,
      GridComponent,
      DynamicFormComponent,
      FontAwesomeModule
    ], template: `<div class="card pt-2">
  <div class="mb-4 p-2 flex justify-start items-center">
    <fa-icon
      [icon]="faFolder"
      class="!text-[2.5rem]"
      [ngClass]="{ 'icon-primary': isFormEditable() }"
    ></fa-icon>

    <div class="pl-6 flex-1">
      <div class="flex justify-between items-center">
        <h2 class="text-xl font-semibold m-0">Company Group Details</h2>
        @if (!isFormEditable() && !createMode()) {
          <div class="icon-light">
            <span
              class="pi pi-pen-to-square action hover !text-2xl"
              [attr.aria-label]="'Edit company group details'"
              (click)="onEdit()"
              (keydown.enter)="onEdit()"
            ></span>
          </div>
        }
      </div>
      <span
        >The following information is required in order to identify your company
        group.</span
      >
    </div>
  </div>

  @if (isFormEditable() || (createMode() && formFields.length)) {
    <app-dynamic-form
      [fields]="formFields"
      [actions]="actions"
      [hideActions]="createMode()"
      (formSubmit)="onSubmit($event)"
      (formValidityChange)="onFormValidityChange($event)"
      (formValueChange)="onFormValueChange($event)"
    >
    </app-dynamic-form>
  }

  @if (!isFormEditable() && !createMode()) {
    <app-grid
      [data]="companyGroupDetails()"
      [columns]="columns"
      [showGridLines]="false"
      [hideHeader]="true"
      tableStyleClass="info-display !w-auto"
    ></app-grid>
  }
</div>
` }]
  }], () => [], { ownerId: [{ type: Input, args: [{ isSignal: true, alias: "ownerId", required: false }] }] });
})();
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && \u0275setClassDebugInfo(CompanyGroupDetailsSectionComponent, { className: "CompanyGroupDetailsSectionComponent", filePath: "src/app/features/administration/components/company-groups/company-group-details-section/company-group-details-section.component.ts", lineNumber: 46 });
})();

// src/app/features/administration/components/company-groups/company-group-email-template-section/company-group-email-template-section.component.ts
var _c074 = (a0) => ({ "icon-primary": a0 });
function CompanyGroupEmailTemplateSectionComponent_Conditional_7_Template(rf, ctx) {
  if (rf & 1) {
    const _r1 = \u0275\u0275getCurrentView();
    \u0275\u0275elementStart(0, "div", 6)(1, "span", 9);
    \u0275\u0275listener("click", function CompanyGroupEmailTemplateSectionComponent_Conditional_7_Template_span_click_1_listener() {
      \u0275\u0275restoreView(_r1);
      const ctx_r1 = \u0275\u0275nextContext();
      return \u0275\u0275resetView(ctx_r1.onEdit());
    })("keydown.enter", function CompanyGroupEmailTemplateSectionComponent_Conditional_7_Template_span_keydown_enter_1_listener() {
      \u0275\u0275restoreView(_r1);
      const ctx_r1 = \u0275\u0275nextContext();
      return \u0275\u0275resetView(ctx_r1.onEdit());
    });
    \u0275\u0275elementEnd()();
  }
  if (rf & 2) {
    \u0275\u0275advance();
    \u0275\u0275attribute("aria-label", "Edit company group details");
  }
}
function CompanyGroupEmailTemplateSectionComponent_Conditional_10_Template(rf, ctx) {
  if (rf & 1) {
    const _r3 = \u0275\u0275getCurrentView();
    \u0275\u0275elementStart(0, "app-dynamic-form", 10);
    \u0275\u0275listener("formSubmit", function CompanyGroupEmailTemplateSectionComponent_Conditional_10_Template_app_dynamic_form_formSubmit_0_listener($event) {
      \u0275\u0275restoreView(_r3);
      const ctx_r1 = \u0275\u0275nextContext();
      return \u0275\u0275resetView(ctx_r1.onSubmit($event));
    })("formValidityChange", function CompanyGroupEmailTemplateSectionComponent_Conditional_10_Template_app_dynamic_form_formValidityChange_0_listener($event) {
      \u0275\u0275restoreView(_r3);
      const ctx_r1 = \u0275\u0275nextContext();
      return \u0275\u0275resetView(ctx_r1.onFormValidityChange($event));
    })("formValueChange", function CompanyGroupEmailTemplateSectionComponent_Conditional_10_Template_app_dynamic_form_formValueChange_0_listener($event) {
      \u0275\u0275restoreView(_r3);
      const ctx_r1 = \u0275\u0275nextContext();
      return \u0275\u0275resetView(ctx_r1.onFormValueChange($event));
    });
    \u0275\u0275elementEnd();
  }
  if (rf & 2) {
    const ctx_r1 = \u0275\u0275nextContext();
    \u0275\u0275property("fields", ctx_r1.formFields)("actions", ctx_r1.actions)("hideActions", ctx_r1.createMode());
  }
}
function CompanyGroupEmailTemplateSectionComponent_Conditional_11_Template(rf, ctx) {
  if (rf & 1) {
    \u0275\u0275element(0, "app-grid", 8);
  }
  if (rf & 2) {
    const ctx_r1 = \u0275\u0275nextContext();
    \u0275\u0275property("data", ctx_r1.companyGroupDetails())("columns", ctx_r1.columns)("showGridLines", false)("hideHeader", true);
  }
}
var CompanyGroupEmailTemplateSectionComponent = class _CompanyGroupEmailTemplateSectionComponent extends EntitySectionBaseComponent {
  ownerId = input(null, ...ngDevMode ? [{ debugName: "ownerId" }] : []);
  emailType = input.required(...ngDevMode ? [{ debugName: "emailType" }] : []);
  operationRegistry = inject(EntityOperationRegistryService);
  accountsService = inject(AccountsService);
  defaults = {
    user_invite: {
      title: "User Invite Email",
      description: "Customize the text that will be sent in the new user invitation email.",
      template: { id: DEFAULT_SYSTEM_ID, name: "Default" },
      subject: "Account creation at {{siteUrl}}",
      body: "You're receiving this email because an account was created for you at {{siteUrl}}.\n\nTo complete your profile and set a password, open the following link in your browser: {{resetUrl}}\n\nYou can safely ignore this message if you do not wish to complete the account creation process."
    },
    forgot_password: {
      title: "Forgot Password Email",
      description: "Customize the text that will be sent when a user resets their own password with the forgot password action.",
      template: { id: DEFAULT_SYSTEM_ID, name: "Default" },
      subject: "Password reset at {{siteUrl}}",
      body: "You're receiving this email because you entered your email address and clicked the forgot password link at {{siteUrl}}.\n\nTo reset your password, open the following link in your browser: {{resetUrl}}\n\nYou can safely ignore this message if you do not wish to reset your password."
    },
    user_reset: {
      title: "User Account Reset Email",
      description: "Customize the text that will be sent when an admin resets a user account.",
      template: { id: DEFAULT_SYSTEM_ID, name: "Default" },
      subject: "Account recovery at {{siteUrl}}",
      body: "You're receiving this email because your account was reset by an administrator at {{siteUrl}}.\n\nTo recover your account and set a new password, open the following link in your browser: {{resetUrl}}\n\nYou can safely ignore this message if you do not wish to recover your account."
    }
  };
  companyGroupDetails = computed(() => {
    const companyGroupDetails = this.entity();
    const defaultTemplate = this.defaults[this.emailType()];
    if (!isDefined(companyGroupDetails))
      return [];
    return [
      {
        key: "Subject",
        value: companyGroupDetails?.email?.templates?.[this.emailType()]?.subject ?? defaultTemplate.subject
      },
      {
        key: "Body",
        value: companyGroupDetails?.email?.templates?.[this.emailType()]?.body ?? defaultTemplate.body
      }
    ];
  }, ...ngDevMode ? [{ debugName: "companyGroupDetails" }] : []);
  title = signal("", ...ngDevMode ? [{ debugName: "title" }] : []);
  description = signal("", ...ngDevMode ? [{ debugName: "description" }] : []);
  faEnvelopeOpenText = faEnvelopeOpenText;
  companyGroupGroups = [];
  constructor() {
    super();
    this.columns = [
      { field: "key", header: "", transform: "uppercase" },
      {
        field: "value",
        header: "",
        transform: "whitespace-pre-wrap break-words"
      }
    ];
    effect(() => {
      this.title.set(this.defaults[this.emailType()].title);
      this.description.set(this.defaults[this.emailType()].description);
    });
  }
  updateFormFields() {
    const companyGroup = this.entity();
    this.formFields = [
      createTextField("subject", "Subject", companyGroup?.email?.templates?.[this.emailType()]?.subject ?? this.defaults[this.emailType()].subject, {
        name: "subject",
        validations: [
          {
            name: "required",
            validator: Validators.required,
            message: "Subject is required"
          }
        ]
      }),
      createTextAreaField("body", "Body", companyGroup?.email?.templates?.[this.emailType()]?.body ?? this.defaults[this.emailType()].body, {
        name: "body",
        validations: [
          {
            name: "required",
            validator: Validators.required,
            message: "Body is required"
          }
        ]
      })
    ];
  }
  getUpdateMethod() {
    return this.operationRegistry.getOperation("company-group", "update") ?? ((id, data) => this.accountsService.updateCompanyGroup(id, data));
  }
  static \u0275fac = function CompanyGroupEmailTemplateSectionComponent_Factory(__ngFactoryType__) {
    return new (__ngFactoryType__ || _CompanyGroupEmailTemplateSectionComponent)();
  };
  static \u0275cmp = /* @__PURE__ */ \u0275\u0275defineComponent({ type: _CompanyGroupEmailTemplateSectionComponent, selectors: [["app-company-group-email-template-section"]], inputs: { ownerId: [1, "ownerId"], emailType: [1, "emailType"] }, features: [\u0275\u0275InheritDefinitionFeature], decls: 12, vars: 9, consts: [[1, "card", "pt-2"], [1, "mb-4", "p-2", "flex", "justify-start", "items-center"], [1, "!text-[2.5rem]", 3, "icon", "ngClass"], [1, "pl-6", "flex-1"], [1, "flex", "justify-between", "items-center"], [1, "text-xl", "font-semibold", "m-0"], [1, "icon-light"], [3, "fields", "actions", "hideActions"], ["tableStyleClass", "info-display !w-auto", 3, "data", "columns", "showGridLines", "hideHeader"], [1, "pi", "pi-pen-to-square", "action", "hover", "!text-2xl", 3, "click", "keydown.enter"], [3, "formSubmit", "formValidityChange", "formValueChange", "fields", "actions", "hideActions"]], template: function CompanyGroupEmailTemplateSectionComponent_Template(rf, ctx) {
    if (rf & 1) {
      \u0275\u0275elementStart(0, "div", 0)(1, "div", 1);
      \u0275\u0275element(2, "fa-icon", 2);
      \u0275\u0275elementStart(3, "div", 3)(4, "div", 4)(5, "h2", 5);
      \u0275\u0275text(6);
      \u0275\u0275elementEnd();
      \u0275\u0275conditionalCreate(7, CompanyGroupEmailTemplateSectionComponent_Conditional_7_Template, 2, 1, "div", 6);
      \u0275\u0275elementEnd();
      \u0275\u0275elementStart(8, "span");
      \u0275\u0275text(9);
      \u0275\u0275elementEnd()()();
      \u0275\u0275conditionalCreate(10, CompanyGroupEmailTemplateSectionComponent_Conditional_10_Template, 1, 3, "app-dynamic-form", 7);
      \u0275\u0275conditionalCreate(11, CompanyGroupEmailTemplateSectionComponent_Conditional_11_Template, 1, 4, "app-grid", 8);
      \u0275\u0275elementEnd();
    }
    if (rf & 2) {
      \u0275\u0275advance(2);
      \u0275\u0275property("icon", ctx.faEnvelopeOpenText)("ngClass", \u0275\u0275pureFunction1(7, _c074, ctx.isFormEditable()));
      \u0275\u0275advance(4);
      \u0275\u0275textInterpolate(ctx.title());
      \u0275\u0275advance();
      \u0275\u0275conditional(!ctx.isFormEditable() && !ctx.createMode() ? 7 : -1);
      \u0275\u0275advance(2);
      \u0275\u0275textInterpolate(ctx.description());
      \u0275\u0275advance();
      \u0275\u0275conditional(ctx.isFormEditable() || ctx.createMode() && ctx.formFields.length ? 10 : -1);
      \u0275\u0275advance();
      \u0275\u0275conditional(!ctx.isFormEditable() && !ctx.createMode() ? 11 : -1);
    }
  }, dependencies: [
    CommonModule,
    NgClass,
    ButtonModule,
    InputTextModule,
    GridComponent,
    DynamicFormComponent,
    FontAwesomeModule,
    FaIconComponent
  ], encapsulation: 2 });
};
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(CompanyGroupEmailTemplateSectionComponent, [{
    type: Component,
    args: [{ selector: "app-company-group-email-template-section", imports: [
      CommonModule,
      ButtonModule,
      InputTextModule,
      GridComponent,
      DynamicFormComponent,
      FontAwesomeModule
    ], template: `<div class="card pt-2">
  <div class="mb-4 p-2 flex justify-start items-center">
    <fa-icon
      [icon]="faEnvelopeOpenText"
      class="!text-[2.5rem]"
      [ngClass]="{ 'icon-primary': isFormEditable() }"
    ></fa-icon>

    <div class="pl-6 flex-1">
      <div class="flex justify-between items-center">
        <h2 class="text-xl font-semibold m-0">{{ title() }}</h2>
        @if (!isFormEditable() && !createMode()) {
          <div class="icon-light">
            <span
              class="pi pi-pen-to-square action hover !text-2xl"
              [attr.aria-label]="'Edit company group details'"
              (click)="onEdit()"
              (keydown.enter)="onEdit()"
            ></span>
          </div>
        }
      </div>
      <span>{{ description() }}</span>
    </div>
  </div>

  @if (isFormEditable() || (createMode() && formFields.length)) {
    <app-dynamic-form
      [fields]="formFields"
      [actions]="actions"
      [hideActions]="createMode()"
      (formSubmit)="onSubmit($event)"
      (formValidityChange)="onFormValidityChange($event)"
      (formValueChange)="onFormValueChange($event)"
    >
    </app-dynamic-form>
  }

  @if (!isFormEditable() && !createMode()) {
    <app-grid
      [data]="companyGroupDetails()"
      [columns]="columns"
      [showGridLines]="false"
      [hideHeader]="true"
      tableStyleClass="info-display !w-auto"
    ></app-grid>
  }
</div>
` }]
  }], () => [], { ownerId: [{ type: Input, args: [{ isSignal: true, alias: "ownerId", required: false }] }], emailType: [{ type: Input, args: [{ isSignal: true, alias: "emailType", required: true }] }] });
})();
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && \u0275setClassDebugInfo(CompanyGroupEmailTemplateSectionComponent, { className: "CompanyGroupEmailTemplateSectionComponent", filePath: "src/app/features/administration/components/company-groups/company-group-email-template-section/company-group-email-template-section.component.ts", lineNumber: 50 });
})();

// src/app/features/administration/factories/company-group-section-config.factory.ts
var CompanyGroupSectionConfigFactory = class _CompanyGroupSectionConfigFactory {
  /**
   * Create sections for company group information
   * @param companyGroup The company group object to display in the section
   * @returns An array of AdminDetailSection objects representing the company group information sections
   */
  createCompanyGroupInformationSection(companyGroup) {
    return [
      {
        id: "company-group-details",
        title: "Company Group Details",
        component: CompanyGroupDetailsSectionComponent,
        componentInputs: { entity: companyGroup },
        category: "information",
        order: 10
      }
    ];
  }
  /**
   * Create sections for company group email customization
   * @param companyGroup The company group object to display in the section
   * @returns An array of AdminDetailSection objects representing the company group email customization sections
   */
  createCompanyGroupEmailCustomizationSection(companyGroup) {
    return [
      {
        id: "company-group-email-customization-user-invite",
        title: "User Invite Email",
        component: CompanyGroupEmailTemplateSectionComponent,
        componentInputs: { entity: companyGroup, emailType: "user_invite" },
        category: "customization",
        order: 10
      },
      {
        id: "company-group-email-customization-user-reset",
        title: "User Reset Email",
        component: CompanyGroupEmailTemplateSectionComponent,
        componentInputs: { entity: companyGroup, emailType: "user_reset" },
        category: "customization",
        order: 20
      },
      {
        id: "company-group-email-customization-forgot-password",
        title: "Forgot Password Email",
        component: CompanyGroupEmailTemplateSectionComponent,
        componentInputs: { entity: companyGroup, emailType: "forgot_password" },
        category: "customization",
        order: 30
      }
    ];
  }
  /**
   * Create sections for company group changes
   * @param companyGroup The company group object to display in the section
   * @returns An array of AdminDetailSection objects representing the company group changes sections
   */
  createChangesSection(companyGroup) {
    return [
      {
        id: "company-group-changes",
        title: "Changes",
        component: FeedSectionComponent,
        componentInputs: {
          entity: companyGroup
        },
        category: "feed",
        order: 10
      }
    ];
  }
  createFeaturesSection(companyGroup, appFeatures) {
    const features = appFeatures.map((feature) => ({
      id: `company-group-feature-${feature}`,
      title: feature,
      component: FeatureSectionComponent,
      componentInputs: {
        entity: companyGroup,
        feature: AppFeatures[feature],
        entityType: "company-group"
      },
      category: "features",
      order: 10
    }));
    return features;
  }
  createBackendSection(companyGroup, backend) {
    return [
      ...Object.keys(backend.sections).map((key) => ({
        id: `company-group-backend-${key}`,
        title: key,
        component: FeatureSectionComponent,
        componentInputs: {
          entity: companyGroup,
          feature: backend.sections[key],
          entityType: "company-group"
        },
        category: "backend",
        order: 10
      }))
    ];
  }
  /**
   * Create all companyGroup sections in one call
   * @param companyGroup The companyGroup object to display in the sections
   * @returns An array of AdminDetailSection objects representing all companyGroup sections
   */
  createAllCompanyGroupSections(companyGroup, appFeatures, backend) {
    return [
      ...this.createCompanyGroupInformationSection(companyGroup),
      ...this.createFeaturesSection(companyGroup, appFeatures),
      ...this.createBackendSection(companyGroup, backend),
      ...this.createCompanyGroupEmailCustomizationSection(companyGroup),
      ...this.createChangesSection(companyGroup)
    ];
  }
  /**
   * Create company group configuration with flexible layout and custom order
   * Order: Information -> Applications -> Backend -> Email Customization -> Changes
   * @param companyGroup The companyGroup object to display in the sections
   * @param appFeatures Array of application features to display
   * @param backend Backend configuration object
   * @returns Configuration object with sections and custom layout
   */
  createFlexibleCompanyGroupConfiguration(companyGroup, appFeatures, backend) {
    return FlexibleSectionBuilder.forEntity(companyGroup).withSections(this.createCompanyGroupInformationSection(companyGroup)).withSections(this.createFeaturesSection(companyGroup, appFeatures).map((section) => __spreadProps(__spreadValues({}, section), {
      category: "applications"
    }))).withSections(this.createBackendSection(companyGroup, backend)).withSections(this.createCompanyGroupEmailCustomizationSection(companyGroup)).withSections(this.createChangesSection(companyGroup)).withCategory("information", "Information", 10).withCategory("applications", "Applications", 20).withCategory("backend", "Backend", 30).withCategory("customization", "Email Customization", 40).withCategory("feed", "Changes", 50).withDefaultExpanded("information").withMultipleExpansion(false).build();
  }
  static \u0275fac = function CompanyGroupSectionConfigFactory_Factory(__ngFactoryType__) {
    return new (__ngFactoryType__ || _CompanyGroupSectionConfigFactory)();
  };
  static \u0275prov = /* @__PURE__ */ \u0275\u0275defineInjectable({ token: _CompanyGroupSectionConfigFactory, factory: _CompanyGroupSectionConfigFactory.\u0275fac, providedIn: "root" });
};
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(CompanyGroupSectionConfigFactory, [{
    type: Injectable,
    args: [{ providedIn: "root" }]
  }], null, null);
})();

// src/app/shared/services/geo-filter.service.ts
var GeoFilterService = class _GeoFilterService extends EventFilterService {
  ACTION_EVENTS = {
    geocoding: ["speed"]
  };
  ACTION_TARGETS = {
    zoneevent: "zones",
    assetstatechangeevent: "state"
  };
  EVENT_CONDITIONS = {
    speedlimit: {
      mode: { type: "dropdown", values: ["greater", "less", "equals"] },
      speed: { type: "speed" }
    },
    routenumber: {
      mode: {
        type: "dropdown",
        values: [
          "equals",
          "starts",
          "contains",
          "ends",
          "not_equals",
          "not_starts",
          "not_contains",
          "not_ends"
        ]
      },
      value: { type: "value" }
    },
    roadname: {
      mode: {
        type: "dropdown",
        values: [
          "equals",
          "starts",
          "contains",
          "ends",
          "not_equals",
          "not_starts",
          "not_contains",
          "not_ends"
        ]
      },
      value: { type: "value" }
    },
    carriageway: {
      mode: { type: "dropdown", values: ["single", "dual"] }
    },
    boundary: {
      boundary: {
        type: "dropdown",
        values: ["suburb", "town", "state", "country"]
      },
      mode: {
        type: "dropdown",
        values: [
          "equals",
          "starts",
          "contains",
          "ends",
          "not_equals",
          "not_starts",
          "not_contains",
          "not_ends"
        ]
      },
      value: { type: "value" }
    },
    time: {
      mode: { type: "dropdown", values: ["inside", "outside"] },
      time1: { type: "time" },
      time2: { type: "time" },
      dow: { type: "checklist", values: ["0", "1", "2", "3", "4", "5", "6"] }
    },
    zone: {
      mode: { type: "dropdown", values: ["inside", "outside"] },
      zone: { type: "dropdown", values: this.getZoneSelectionTree }
    },
    digital: {
      input: {
        type: "dropdown",
        values: () => this.getIoTargetList(["digital_input"]),
        linkedTo: "state"
      },
      state: { type: "dropdown", values: this.getIoValues }
    },
    state: {
      profile: {
        type: "dropdown",
        values: this.getStateTargetList,
        linkedTo: "state"
      },
      state: { type: "dropdown", values: this.getStateValues }
    }
  };
  static \u0275fac = /* @__PURE__ */ (() => {
    let \u0275GeoFilterService_BaseFactory;
    return function GeoFilterService_Factory(__ngFactoryType__) {
      return (\u0275GeoFilterService_BaseFactory || (\u0275GeoFilterService_BaseFactory = \u0275\u0275getInheritedFactory(_GeoFilterService)))(__ngFactoryType__ || _GeoFilterService);
    };
  })();
  static \u0275prov = /* @__PURE__ */ \u0275\u0275defineInjectable({ token: _GeoFilterService, factory: _GeoFilterService.\u0275fac, providedIn: "root" });
};
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(GeoFilterService, [{
    type: Injectable,
    args: [{
      providedIn: "root"
    }]
  }], null, null);
})();

// src/app/features/administration/components/road-profiles/road-profile-details-section/road-profile-details-section.component.ts
var _c075 = (a0) => ({ "icon-primary": a0 });
function RoadProfileDetailsSectionComponent_Conditional_7_Template(rf, ctx) {
  if (rf & 1) {
    const _r1 = \u0275\u0275getCurrentView();
    \u0275\u0275elementStart(0, "div", 6)(1, "span", 9);
    \u0275\u0275listener("click", function RoadProfileDetailsSectionComponent_Conditional_7_Template_span_click_1_listener() {
      \u0275\u0275restoreView(_r1);
      const ctx_r1 = \u0275\u0275nextContext();
      return \u0275\u0275resetView(ctx_r1.onEdit());
    })("keydown.enter", function RoadProfileDetailsSectionComponent_Conditional_7_Template_span_keydown_enter_1_listener() {
      \u0275\u0275restoreView(_r1);
      const ctx_r1 = \u0275\u0275nextContext();
      return \u0275\u0275resetView(ctx_r1.onEdit());
    });
    \u0275\u0275elementEnd()();
  }
  if (rf & 2) {
    \u0275\u0275advance();
    \u0275\u0275attribute("aria-label", "Edit road profile details");
  }
}
function RoadProfileDetailsSectionComponent_Conditional_10_Template(rf, ctx) {
  if (rf & 1) {
    const _r3 = \u0275\u0275getCurrentView();
    \u0275\u0275elementStart(0, "app-dynamic-form", 10);
    \u0275\u0275listener("formSubmit", function RoadProfileDetailsSectionComponent_Conditional_10_Template_app_dynamic_form_formSubmit_0_listener($event) {
      \u0275\u0275restoreView(_r3);
      const ctx_r1 = \u0275\u0275nextContext();
      return \u0275\u0275resetView(ctx_r1.onSubmit($event));
    })("formValidityChange", function RoadProfileDetailsSectionComponent_Conditional_10_Template_app_dynamic_form_formValidityChange_0_listener($event) {
      \u0275\u0275restoreView(_r3);
      const ctx_r1 = \u0275\u0275nextContext();
      return \u0275\u0275resetView(ctx_r1.onFormValidityChange($event));
    })("formValueChange", function RoadProfileDetailsSectionComponent_Conditional_10_Template_app_dynamic_form_formValueChange_0_listener($event) {
      \u0275\u0275restoreView(_r3);
      const ctx_r1 = \u0275\u0275nextContext();
      return \u0275\u0275resetView(ctx_r1.onFormValueChange($event));
    });
    \u0275\u0275elementEnd();
  }
  if (rf & 2) {
    const ctx_r1 = \u0275\u0275nextContext();
    \u0275\u0275property("fields", ctx_r1.formFields)("actions", ctx_r1.actions)("hideActions", ctx_r1.createMode());
  }
}
function RoadProfileDetailsSectionComponent_Conditional_11_Template(rf, ctx) {
  if (rf & 1) {
    \u0275\u0275element(0, "app-grid", 8);
  }
  if (rf & 2) {
    const ctx_r1 = \u0275\u0275nextContext();
    \u0275\u0275property("data", ctx_r1.roadProfileDetails())("columns", ctx_r1.columns)("showGridLines", false)("hideHeader", true);
  }
}
var RoadProfileDetailsSectionComponent = class _RoadProfileDetailsSectionComponent extends EntitySectionBaseComponent {
  ownerId = input(null, ...ngDevMode ? [{ debugName: "ownerId" }] : []);
  entitiesService = inject(EntitiesService);
  measurementUnitsService = inject(MeasurementUnitsService);
  filterService = inject(GeoFilterService);
  operationRegistry = inject(EntityOperationRegistryService);
  roadProfileDetails = computed(() => {
    const roadProfileDetails = this.entity();
    if (!isDefined(roadProfileDetails))
      return [];
    return [
      { key: "Name", value: roadProfileDetails.name },
      {
        key: "Speed Modifiers",
        value: roadProfileDetails.speedModifiers && roadProfileDetails.speedModifiers.length > 0 ? roadProfileDetails.speedModifiers?.map((item) => `${item.name} (${item.speed}${item.unit})`).join(", ") : "None"
      }
    ];
  }, ...ngDevMode ? [{ debugName: "roadProfileDetails" }] : []);
  roadProfileSpeedModifiersModalConfig;
  faIconRoad = faRoad;
  constructor() {
    super();
    this.columns = [
      { field: "key", header: "", transform: "uppercase" },
      { field: "value", header: "" }
    ];
  }
  updateFormFields() {
    const roadProfile = this.entity();
    this.roadProfileSpeedModifiersModalConfig = {
      modalComponent: ModalListFormComponent,
      modalTitle: "Road Speed Modifier",
      subHeader: "Create a filter to match certain geographic conditions, and specify a new speed limit for your assets.",
      defaultItemProvider: () => ({
        id: v4_default(),
        name: "",
        filter: void 0,
        speed: 0,
        unit: RoadSpeedModifierEntry.UnitEnum.Kmh
      }),
      listItemFormatter: (item) => {
        return this.stateItemToListItem(item);
      },
      modalFields: (item) => {
        return [
          createTextField("id", "ID", item?.id, {
            name: "id",
            hidden: true
          }),
          createTextField("name", "Name", item?.name, {
            name: "name",
            validations: [
              {
                name: "required",
                validator: Validators.required,
                message: "Name is required"
              }
            ]
          }),
          createEventFilterField("filter", "Filter", item?.filter, [], {
            name: "filter",
            required: true,
            validations: [
              {
                name: "required",
                validator: Validators.required,
                message: "filter is required"
              }
            ],
            props: {
              filterService: this.filterService,
              requireActorBeforeAction: false
            }
          }),
          createNumberField("speed", "Speed", item?.speed, {
            name: "speed",
            validations: [
              {
                name: "required",
                validator: Validators.required,
                message: "Speed is required"
              },
              {
                name: "min",
                validator: Validators.min(0),
                message: "Min must be 0 or greater"
              },
              {
                name: "max",
                validator: Validators.max(1e3),
                message: "Max must be 1000 or less"
              }
            ],
            layout: "horizontal",
            labelWidth: "1/3",
            props: {
              suffix: this.measurementUnitsService.unit(MeasurementUnitType.SPEED)
            }
          }),
          createDropdownField("unit", "Unit", [
            { value: "kmh", label: "km/h" },
            { value: "mph", label: "mph" }
          ], item?.unit, {
            name: "unit",
            validations: [
              {
                name: "required",
                validator: Validators.required,
                message: "Unit is required"
              }
            ]
          })
        ];
      }
    };
    this.formFields = [
      createTextField("name", "Name", roadProfile?.name, {
        name: "name",
        validations: [
          {
            name: "required",
            validator: Validators.required,
            message: "Name is required"
          }
        ]
      })
    ];
    if (!this.createMode()) {
      this.formFields.push(createModalListField("speedModifiers", "Speed Modifiers", roadProfile?.speedModifiers ?? [], {
        layout: "horizontal",
        labelWidth: "1/3",
        name: "speedModifiers",
        props: {
          modalConfig: this.roadProfileSpeedModifiersModalConfig
        }
      }));
    }
  }
  getUpdateMethod() {
    return this.operationRegistry.getOperation("road-profile", "update") ?? ((id, data) => this.entitiesService.updateRoadProfile(id, data));
  }
  stateItemToListItem(item) {
    return {
      id: item.id,
      title: `${item.name} (${item.speed}${item.unit})`,
      display: this.filterService.getEventFilterText(item.filter),
      icon: "pi pi-gauge"
    };
  }
  onFormValueChange(formData) {
    const transformedData = this.transformFormData(formData);
    this.formValueChange.emit(transformedData);
  }
  transformFormData(formData) {
    const transformedData = __spreadValues({}, formData);
    if (isDefined(transformedData?.["speedModifiers"]) && Array.isArray(transformedData["speedModifiers"])) {
      transformedData["speedModifiers"].forEach((element) => {
        const filter = element.filter;
        element.filter = __spreadProps(__spreadValues({}, filter), {
          actor: filter?.["actor"]?.["data"] ?? filter?.["actor"],
          action: filter?.["action"]?.["data"] ?? filter?.["action"],
          target: filter?.["target"]?.["data"] ?? filter?.["target"],
          conditions: filter?.["conditions"]?.map((condition) => {
            const _a = condition, { id: _ } = _a, rest = __objRest(_a, ["id"]);
            return rest;
          })
        });
      });
    }
    return transformedData;
  }
  static \u0275fac = function RoadProfileDetailsSectionComponent_Factory(__ngFactoryType__) {
    return new (__ngFactoryType__ || _RoadProfileDetailsSectionComponent)();
  };
  static \u0275cmp = /* @__PURE__ */ \u0275\u0275defineComponent({ type: _RoadProfileDetailsSectionComponent, selectors: [["app-road-profile-details-section"]], inputs: { ownerId: [1, "ownerId"] }, features: [\u0275\u0275InheritDefinitionFeature], decls: 12, vars: 7, consts: [[1, "card", "pt-2"], [1, "mb-4", "p-2", "flex", "justify-start", "items-center"], [1, "!text-[2.5rem]", 3, "icon", "ngClass"], [1, "pl-6", "flex-1"], [1, "flex", "justify-between", "items-center"], [1, "text-xl", "font-semibold", "m-0"], [1, "icon-light"], [3, "fields", "actions", "hideActions"], ["tableStyleClass", "info-display !w-auto", 3, "data", "columns", "showGridLines", "hideHeader"], [1, "pi", "pi-pen-to-square", "action", "hover", "!text-2xl", 3, "click", "keydown.enter"], [3, "formSubmit", "formValidityChange", "formValueChange", "fields", "actions", "hideActions"]], template: function RoadProfileDetailsSectionComponent_Template(rf, ctx) {
    if (rf & 1) {
      \u0275\u0275elementStart(0, "div", 0)(1, "div", 1);
      \u0275\u0275element(2, "fa-icon", 2);
      \u0275\u0275elementStart(3, "div", 3)(4, "div", 4)(5, "h2", 5);
      \u0275\u0275text(6, "Road Profile Details");
      \u0275\u0275elementEnd();
      \u0275\u0275conditionalCreate(7, RoadProfileDetailsSectionComponent_Conditional_7_Template, 2, 1, "div", 6);
      \u0275\u0275elementEnd();
      \u0275\u0275elementStart(8, "span");
      \u0275\u0275text(9, "Configure the road modifiers that you want to apply to this profile below.");
      \u0275\u0275elementEnd()()();
      \u0275\u0275conditionalCreate(10, RoadProfileDetailsSectionComponent_Conditional_10_Template, 1, 3, "app-dynamic-form", 7);
      \u0275\u0275conditionalCreate(11, RoadProfileDetailsSectionComponent_Conditional_11_Template, 1, 4, "app-grid", 8);
      \u0275\u0275elementEnd();
    }
    if (rf & 2) {
      \u0275\u0275advance(2);
      \u0275\u0275property("icon", ctx.faIconRoad)("ngClass", \u0275\u0275pureFunction1(5, _c075, ctx.isFormEditable()));
      \u0275\u0275advance(5);
      \u0275\u0275conditional(!ctx.isFormEditable() && !ctx.createMode() ? 7 : -1);
      \u0275\u0275advance(3);
      \u0275\u0275conditional(ctx.isFormEditable() || ctx.createMode() && ctx.formFields.length ? 10 : -1);
      \u0275\u0275advance();
      \u0275\u0275conditional(!ctx.isFormEditable() && !ctx.createMode() ? 11 : -1);
    }
  }, dependencies: [
    CommonModule,
    NgClass,
    ButtonModule,
    GridComponent,
    DynamicFormComponent,
    MessageModule,
    FontAwesomeModule,
    FaIconComponent
  ], encapsulation: 2 });
};
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(RoadProfileDetailsSectionComponent, [{
    type: Component,
    args: [{ selector: "app-road-profile-details-section", imports: [
      CommonModule,
      ButtonModule,
      GridComponent,
      DynamicFormComponent,
      MessageModule,
      FontAwesomeModule
    ], template: `<div class="card pt-2">
  <div class="mb-4 p-2 flex justify-start items-center">
    <fa-icon
      [icon]="faIconRoad"
      class="!text-[2.5rem]"
      [ngClass]="{ 'icon-primary': isFormEditable() }"
    ></fa-icon>

    <div class="pl-6 flex-1">
      <div class="flex justify-between items-center">
        <h2 class="text-xl font-semibold m-0">Road Profile Details</h2>
        @if (!isFormEditable() && !createMode()) {
          <div class="icon-light">
            <span
              class="pi pi-pen-to-square action hover !text-2xl"
              [attr.aria-label]="'Edit road profile details'"
              (click)="onEdit()"
              (keydown.enter)="onEdit()"
            ></span>
          </div>
        }
      </div>
      <span
        >Configure the road modifiers that you want to apply to this profile
        below.</span
      >
    </div>
  </div>

  @if (isFormEditable() || (createMode() && formFields.length)) {
    <app-dynamic-form
      [fields]="formFields"
      [actions]="actions"
      [hideActions]="createMode()"
      (formSubmit)="onSubmit($event)"
      (formValidityChange)="onFormValidityChange($event)"
      (formValueChange)="onFormValueChange($event)"
    >
    </app-dynamic-form>
  }

  @if (!isFormEditable() && !createMode()) {
    <app-grid
      [data]="roadProfileDetails()"
      [columns]="columns"
      [showGridLines]="false"
      [hideHeader]="true"
      tableStyleClass="info-display !w-auto"
    ></app-grid>
  }
</div>
` }]
  }], () => [], { ownerId: [{ type: Input, args: [{ isSignal: true, alias: "ownerId", required: false }] }] });
})();
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && \u0275setClassDebugInfo(RoadProfileDetailsSectionComponent, { className: "RoadProfileDetailsSectionComponent", filePath: "src/app/features/administration/components/road-profiles/road-profile-details-section/road-profile-details-section.component.ts", lineNumber: 57 });
})();

// src/app/features/administration/factories/road-profile-section-config.factory.ts
var RoadProfileSectionConfigFactory = class _RoadProfileSectionConfigFactory {
  /**
   * Create sections for roadProfile information
   * @param roadProfile The roadProfile object to display in the section
   * @returns An array of AdminDetailSection objects representing the roadProfile information sections
   */
  createRoadProfileInformationSections(roadProfile) {
    return [
      {
        id: "road-profile-details",
        title: "Road Profile Details",
        component: RoadProfileDetailsSectionComponent,
        componentInputs: { entity: roadProfile },
        category: "information",
        order: 10
      }
    ];
  }
  /**
   * Create sections for roadProfile changes
   * @param roadProfile The roadProfile object to display in the section
   * @returns An array of AdminDetailSection objects representing the roadProfile changes sections
   */
  createChangesSection(roadProfile) {
    return [
      {
        id: "road-profile-changes",
        title: "Changes",
        component: FeedSectionComponent,
        componentInputs: {
          entity: roadProfile
        },
        category: "feed",
        order: 10
      }
    ];
  }
  /**
   * Create all roadProfile sections in one call
   * @param roadProfile The roadProfile object to display in the sections
   * @returns An array of AdminDetailSection objects representing all roadProfile sections
   */
  createAllRoadProfileSections(roadProfile) {
    return [
      ...this.createRoadProfileInformationSections(roadProfile),
      ...this.createChangesSection(roadProfile)
    ];
  }
  static \u0275fac = function RoadProfileSectionConfigFactory_Factory(__ngFactoryType__) {
    return new (__ngFactoryType__ || _RoadProfileSectionConfigFactory)();
  };
  static \u0275prov = /* @__PURE__ */ \u0275\u0275defineInjectable({ token: _RoadProfileSectionConfigFactory, factory: _RoadProfileSectionConfigFactory.\u0275fac, providedIn: "root" });
};
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(RoadProfileSectionConfigFactory, [{
    type: Injectable,
    args: [{ providedIn: "root" }]
  }], null, null);
})();

// src/app/features/administration/components/geo-lock-profiles/geo-lock-profile-details-section/geo-lock-profile-details-section.component.ts
var _c076 = (a0) => ({ "icon-primary": a0 });
function GeoLockProfileDetailsSectionComponent_Conditional_7_Template(rf, ctx) {
  if (rf & 1) {
    const _r1 = \u0275\u0275getCurrentView();
    \u0275\u0275elementStart(0, "div", 6)(1, "span", 8);
    \u0275\u0275listener("click", function GeoLockProfileDetailsSectionComponent_Conditional_7_Template_span_click_1_listener() {
      \u0275\u0275restoreView(_r1);
      const ctx_r1 = \u0275\u0275nextContext();
      return \u0275\u0275resetView(ctx_r1.onEdit());
    })("keydown.enter", function GeoLockProfileDetailsSectionComponent_Conditional_7_Template_span_keydown_enter_1_listener() {
      \u0275\u0275restoreView(_r1);
      const ctx_r1 = \u0275\u0275nextContext();
      return \u0275\u0275resetView(ctx_r1.onEdit());
    });
    \u0275\u0275elementEnd()();
  }
  if (rf & 2) {
    \u0275\u0275advance();
    \u0275\u0275attribute("aria-label", "Edit geo lock profile details");
  }
}
function GeoLockProfileDetailsSectionComponent_Conditional_10_Template(rf, ctx) {
  if (rf & 1) {
    const _r3 = \u0275\u0275getCurrentView();
    \u0275\u0275elementStart(0, "app-dynamic-form", 9);
    \u0275\u0275listener("formSubmit", function GeoLockProfileDetailsSectionComponent_Conditional_10_Template_app_dynamic_form_formSubmit_0_listener($event) {
      \u0275\u0275restoreView(_r3);
      const ctx_r1 = \u0275\u0275nextContext();
      return \u0275\u0275resetView(ctx_r1.onSubmit($event));
    })("formValidityChange", function GeoLockProfileDetailsSectionComponent_Conditional_10_Template_app_dynamic_form_formValidityChange_0_listener($event) {
      \u0275\u0275restoreView(_r3);
      const ctx_r1 = \u0275\u0275nextContext();
      return \u0275\u0275resetView(ctx_r1.onFormValidityChange($event));
    })("formValueChange", function GeoLockProfileDetailsSectionComponent_Conditional_10_Template_app_dynamic_form_formValueChange_0_listener($event) {
      \u0275\u0275restoreView(_r3);
      const ctx_r1 = \u0275\u0275nextContext();
      return \u0275\u0275resetView(ctx_r1.onFormValueChange($event));
    });
    \u0275\u0275elementEnd();
  }
  if (rf & 2) {
    const ctx_r1 = \u0275\u0275nextContext();
    \u0275\u0275property("fields", ctx_r1.formFields)("actions", ctx_r1.actions)("hideActions", ctx_r1.createMode());
  }
}
function GeoLockProfileDetailsSectionComponent_Conditional_11_Conditional_0_Template(rf, ctx) {
  if (rf & 1) {
    \u0275\u0275elementStart(0, "div", 10)(1, "p-message", 12);
    \u0275\u0275element(2, "span", 13);
    \u0275\u0275text(3);
    \u0275\u0275elementEnd()();
  }
  if (rf & 2) {
    const ctx_r1 = \u0275\u0275nextContext(2);
    \u0275\u0275advance(3);
    \u0275\u0275textInterpolate1(" ", ctx_r1.warning());
  }
}
function GeoLockProfileDetailsSectionComponent_Conditional_11_Template(rf, ctx) {
  if (rf & 1) {
    \u0275\u0275conditionalCreate(0, GeoLockProfileDetailsSectionComponent_Conditional_11_Conditional_0_Template, 4, 1, "div", 10);
    \u0275\u0275element(1, "app-grid", 11);
  }
  if (rf & 2) {
    const ctx_r1 = \u0275\u0275nextContext();
    \u0275\u0275conditional(ctx_r1.warning() ? 0 : -1);
    \u0275\u0275advance();
    \u0275\u0275property("data", ctx_r1.geoLockProfileDetails())("columns", ctx_r1.columns)("showGridLines", false)("hideHeader", true);
  }
}
var GeoLockProfileDetailsSectionComponent = class _GeoLockProfileDetailsSectionComponent extends EntitySectionBaseComponent {
  ownerId = input(null, ...ngDevMode ? [{ debugName: "ownerId" }] : []);
  entitiesService = inject(EntitiesService);
  measurementUnitsService = inject(MeasurementUnitsService);
  http = inject(HttpClient);
  authDataService = inject(AuthDataService);
  geoLockProfileDetails = computed(() => {
    const geoLockProfileDetails = this.entity();
    if (!isDefined(geoLockProfileDetails))
      return [];
    return [
      { key: "Name", value: geoLockProfileDetails.name },
      {
        key: "Radius",
        value: isDefined(geoLockProfileDetails.radiusKm) ? `${this.measurementUnitsService.fromBackend(MeasurementUnitType.DISTANCE, geoLockProfileDetails.radiusKm, 2)} ${this.measurementUnitsService.getUnitConfig(MeasurementUnitType.DISTANCE)}` : "None"
      },
      {
        key: "Times",
        value: isEmpty(geoLockProfileDetails.times) ? "None" : (geoLockProfileDetails.times ?? []).map((time) => {
          const listItem = this.stateItemToListItem(time);
          return `${listItem?.title} - (${listItem?.display})`;
        }).join("\n")
      }
    ];
  }, ...ngDevMode ? [{ debugName: "geoLockProfileDetails" }] : []);
  geoLockProfileItemModalConfig;
  warning = signal(null, ...ngDevMode ? [{ debugName: "warning" }] : []);
  timezones = [];
  constructor() {
    super();
    this.columns = [
      { field: "key", header: "", transform: "uppercase" },
      { field: "value", header: "", transform: "whitespace-pre-line" }
    ];
    effect(() => {
      const geoLockProfileDetails = this.entity();
      if (isNullOrUndefined(geoLockProfileDetails?.times) || geoLockProfileDetails.times.length < 1) {
        this.warning.set("At least one time entry is required for the geo lock profile to be useful.");
      } else {
        this.warning.set(null);
      }
    });
  }
  ngOnInit() {
    this.loadTimezones();
  }
  loadTimezones() {
    this.http.get("/assets/docs/timezones.json").pipe(takeUntilDestroyed(this.destroyRef)).subscribe((data) => {
      this.timezones = data.map((tz) => ({ label: tz.id, value: tz.id })).sort((a, b) => a.label.localeCompare(b.label));
      this.updateFormFields();
    });
  }
  updateFormFields() {
    const geoLockProfile = this.entity();
    this.geoLockProfileItemModalConfig = {
      modalComponent: ModalListFormComponent,
      modalTitle: "Geo lock Times",
      defaultItemProvider: () => ({
        id: v4_default(),
        from: "00:00",
        to: "23:59",
        timeZoneId: this.authDataService.getUserProfile()?.timeZoneId ?? "",
        days: ["0", "1", "2", "3", "4", "5", "6"]
      }),
      listItemFormatter: (item) => this.stateItemToListItem(item),
      modalFields: (item) => {
        return [
          createTextField("id", "ID", item?.id, {
            name: "id",
            hidden: true
          }),
          createDateField("from", "From", "", {
            name: "from",
            placeholder: "Select time",
            props: {
              timeOnly: true,
              showSeconds: true
            },
            style: { width: "100%" }
          }),
          createDateField("to", "To", "", {
            name: "to",
            placeholder: "Select time",
            props: {
              timeOnly: true,
              showSeconds: true
            },
            style: { width: "100%" }
          }),
          createDropdownField("timeZoneId", "Time Zone", this.timezones, "", {
            layout: "horizontal",
            labelWidth: "1/3",
            placeholder: "Select timezone",
            name: "timeZone",
            props: {
              appendTo: "body"
            }
          }),
          createListboxField("days", "Days", [], WEEKDAY_OPTIONS, {
            name: "days",
            validations: [
              {
                name: "required",
                validator: Validators.required,
                message: "Weekdays is required"
              }
            ],
            props: {
              checkmark: true,
              multiple: true
            }
          })
        ];
      },
      subHeader: "Configure the days of the week and times in which the lock is active."
    };
    this.formFields = [
      createTextField("name", "Name", geoLockProfile?.name, {
        name: "name",
        validations: [
          {
            name: "required",
            validator: Validators.required,
            message: "Name is required"
          }
        ]
      }),
      createNumberField("radiusKm", "Radius", isDefined(geoLockProfile?.radiusKm) ? this.measurementUnitsService.fromBackend(MeasurementUnitType.DISTANCE, geoLockProfile?.radiusKm ?? 0, 2) : void 0, {
        name: "radiusKm",
        validations: [
          {
            name: "required",
            validator: Validators.required,
            message: "Radius is required"
          }
        ],
        props: {
          suffix: this.measurementUnitsService.getUnitConfig(MeasurementUnitType.DISTANCE)
        }
      })
    ];
    if (!this.createMode()) {
      this.formFields.push(createModalListField("times", "Geo Lock Times", geoLockProfile?.times ?? [], {
        layout: "horizontal",
        labelWidth: "1/3",
        name: "times",
        props: {
          modalConfig: this.geoLockProfileItemModalConfig
        }
      }));
    }
  }
  submitChanges(formData) {
    const geoLockProfile = this.entity();
    if (isNullOrUndefined(geoLockProfile))
      return;
    const transformedData = this.transformFormData(formData);
    this.entitiesService.updateGeoLockProfile(geoLockProfile.id, transformedData).pipe(takeUntilDestroyed(this.destroyRef)).subscribe({
      next: (response) => {
        this.isFormEditable.set(false);
        this.isSubmitting.set(false);
        this.broadcastService.broadcast("entity-updated", {
          entityType: "geo-lock-profile",
          operation: "update",
          entityId: geoLockProfile.id,
          data: response
        });
      },
      error: () => {
        this.isFormEditable.set(true);
        this.isSubmitting.set(false);
      }
    });
  }
  stateItemToListItem(item) {
    return {
      id: item.id,
      title: item.from && item.to ? `${item.from} to ${item.to}` : "",
      display: isDefined(item.days) ? item.days?.map((day) => WEEKDAY_OPTIONS.find((option) => option.value === String(day))?.label ?? day).join(", ") : "",
      icon: `clock`
    };
  }
  onFormValueChange(formData) {
    const transformedData = this.transformFormData(formData);
    this.formValueChange.emit(transformedData);
  }
  transformFormData(formData) {
    const transformedData = __spreadValues({}, formData);
    if (Array.isArray(transformedData["times"])) {
      transformedData["times"] = transformedData["times"].map((item) => ({
        id: item.id,
        from: item.from.split(":").length === 2 ? `${item.from}:00` : item.from,
        to: item.to.split(":").length === 2 ? `${item.to}:00` : item.to,
        timeZoneId: item.timeZoneId,
        days: item.days
      }));
    }
    if (isDefined(formData["radiusKm"]) && formData["radiusKm"] !== "") {
      transformedData["radiusKm"] = this.measurementUnitsService.toBackend(MeasurementUnitType.DISTANCE, Number(formData["radiusKm"]));
    }
    return transformedData;
  }
  static \u0275fac = function GeoLockProfileDetailsSectionComponent_Factory(__ngFactoryType__) {
    return new (__ngFactoryType__ || _GeoLockProfileDetailsSectionComponent)();
  };
  static \u0275cmp = /* @__PURE__ */ \u0275\u0275defineComponent({ type: _GeoLockProfileDetailsSectionComponent, selectors: [["app-geo-lock-profile-details-section"]], inputs: { ownerId: [1, "ownerId"] }, features: [\u0275\u0275InheritDefinitionFeature], decls: 12, vars: 7, consts: [[1, "card", "pt-2"], [1, "mb-4", "p-2", "flex", "justify-start", "items-center"], [1, "pi", "pi-lock", "!text-[2.5rem]", 3, "ngClass"], [1, "pl-6", "flex-1"], [1, "flex", "justify-between", "items-center"], [1, "text-xl", "font-semibold", "m-0"], [1, "icon-light"], [3, "fields", "actions", "hideActions"], [1, "pi", "pi-pen-to-square", "action", "hover", "!text-2xl", 3, "click", "keydown.enter"], [3, "formSubmit", "formValidityChange", "formValueChange", "fields", "actions", "hideActions"], [1, "mb-4"], ["tableStyleClass", "info-display !w-auto", 3, "data", "columns", "showGridLines", "hideHeader"], ["severity", "warn"], [1, "pi", "pi-exclamation-triangle", "mr-2"]], template: function GeoLockProfileDetailsSectionComponent_Template(rf, ctx) {
    if (rf & 1) {
      \u0275\u0275elementStart(0, "div", 0)(1, "div", 1);
      \u0275\u0275element(2, "span", 2);
      \u0275\u0275elementStart(3, "div", 3)(4, "div", 4)(5, "h2", 5);
      \u0275\u0275text(6, "Geo Lock Profile Details");
      \u0275\u0275elementEnd();
      \u0275\u0275conditionalCreate(7, GeoLockProfileDetailsSectionComponent_Conditional_7_Template, 2, 1, "div", 6);
      \u0275\u0275elementEnd();
      \u0275\u0275elementStart(8, "span");
      \u0275\u0275text(9, "Configure the state change triggers for your geo lock profile.");
      \u0275\u0275elementEnd()()();
      \u0275\u0275conditionalCreate(10, GeoLockProfileDetailsSectionComponent_Conditional_10_Template, 1, 3, "app-dynamic-form", 7);
      \u0275\u0275conditionalCreate(11, GeoLockProfileDetailsSectionComponent_Conditional_11_Template, 2, 5);
      \u0275\u0275elementEnd();
    }
    if (rf & 2) {
      \u0275\u0275advance(2);
      \u0275\u0275property("ngClass", \u0275\u0275pureFunction1(5, _c076, ctx.isFormEditable()));
      \u0275\u0275attribute("aria-label", "lock icon");
      \u0275\u0275advance(5);
      \u0275\u0275conditional(!ctx.isFormEditable() && !ctx.createMode() ? 7 : -1);
      \u0275\u0275advance(3);
      \u0275\u0275conditional(ctx.isFormEditable() || ctx.createMode() && ctx.formFields.length ? 10 : -1);
      \u0275\u0275advance();
      \u0275\u0275conditional(!ctx.isFormEditable() && !ctx.createMode() ? 11 : -1);
    }
  }, dependencies: [
    CommonModule,
    NgClass,
    ButtonModule,
    GridComponent,
    DynamicFormComponent,
    MessageModule,
    Message
  ], encapsulation: 2 });
};
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(GeoLockProfileDetailsSectionComponent, [{
    type: Component,
    args: [{ selector: "app-geo-lock-profile-details-section", imports: [
      CommonModule,
      ButtonModule,
      GridComponent,
      DynamicFormComponent,
      MessageModule
    ], template: `<div class="card pt-2">
  <div class="mb-4 p-2 flex justify-start items-center">
    <span
      class="pi pi-lock !text-[2.5rem]"
      [ngClass]="{ 'icon-primary': isFormEditable() }"
      [attr.aria-label]="'lock icon'"
    ></span>

    <div class="pl-6 flex-1">
      <div class="flex justify-between items-center">
        <h2 class="text-xl font-semibold m-0">Geo Lock Profile Details</h2>
        @if (!isFormEditable() && !createMode()) {
          <div class="icon-light">
            <span
              class="pi pi-pen-to-square action hover !text-2xl"
              [attr.aria-label]="'Edit geo lock profile details'"
              (click)="onEdit()"
              (keydown.enter)="onEdit()"
            ></span>
          </div>
        }
      </div>
      <span
        >Configure the state change triggers for your geo lock profile.</span
      >
    </div>
  </div>

  @if (isFormEditable() || (createMode() && formFields.length)) {
    <app-dynamic-form
      [fields]="formFields"
      [actions]="actions"
      [hideActions]="createMode()"
      (formSubmit)="onSubmit($event)"
      (formValidityChange)="onFormValidityChange($event)"
      (formValueChange)="onFormValueChange($event)"
    >
    </app-dynamic-form>
  }

  @if (!isFormEditable() && !createMode()) {
    @if (warning()) {
      <div class="mb-4">
        <p-message severity="warn">
          <span class="pi pi-exclamation-triangle mr-2"></span>
          {{ warning() }}</p-message
        >
      </div>
    }
    <app-grid
      [data]="geoLockProfileDetails()"
      [columns]="columns"
      [showGridLines]="false"
      [hideHeader]="true"
      tableStyleClass="info-display !w-auto"
    ></app-grid>
  }
</div>
` }]
  }], () => [], { ownerId: [{ type: Input, args: [{ isSignal: true, alias: "ownerId", required: false }] }] });
})();
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && \u0275setClassDebugInfo(GeoLockProfileDetailsSectionComponent, { className: "GeoLockProfileDetailsSectionComponent", filePath: "src/app/features/administration/components/geo-lock-profiles/geo-lock-profile-details-section/geo-lock-profile-details-section.component.ts", lineNumber: 63 });
})();

// src/app/features/administration/factories/geo-lock-profiles-config.factory.ts
var GeoLockProfileSectionConfigFactory = class _GeoLockProfileSectionConfigFactory {
  /**
   * Create sections for geoLockProfile information
   * @param geoLockProfile The geoLockProfile object to display in the section
   * @returns An array of AdminDetailSection objects representing the geoLockProfile information sections
   */
  createGeoLockProfileInformationSections(geoLockProfile) {
    return [
      {
        id: "geo-lock-profile-details",
        title: "Geo Lock Profile Details",
        component: GeoLockProfileDetailsSectionComponent,
        componentInputs: { entity: geoLockProfile },
        category: "information",
        order: 10
      }
    ];
  }
  /**
   * Create sections for geoLockProfile changes
   * @param geoLockProfile The geoLockProfile object to display in the section
   * @returns An array of AdminDetailSection objects representing the geoLockProfile changes sections
   */
  createChangesSection(geoLockProfile) {
    return [
      {
        id: "geo-lock-profile-changes",
        title: "Changes",
        component: FeedSectionComponent,
        componentInputs: {
          entity: geoLockProfile
        },
        category: "feed",
        order: 10
      }
    ];
  }
  /**
   * Create all geoLockProfile sections in one call
   * @param geoLockProfile The geoLockProfile object to display in the sections
   * @returns An array of AdminDetailSection objects representing all geoLockProfile sections
   */
  createAllGeoLockProfileSections(geoLockProfile) {
    return [
      ...this.createGeoLockProfileInformationSections(geoLockProfile),
      ...this.createChangesSection(geoLockProfile)
    ];
  }
  static \u0275fac = function GeoLockProfileSectionConfigFactory_Factory(__ngFactoryType__) {
    return new (__ngFactoryType__ || _GeoLockProfileSectionConfigFactory)();
  };
  static \u0275prov = /* @__PURE__ */ \u0275\u0275defineInjectable({ token: _GeoLockProfileSectionConfigFactory, factory: _GeoLockProfileSectionConfigFactory.\u0275fac, providedIn: "root" });
};
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(GeoLockProfileSectionConfigFactory, [{
    type: Injectable,
    args: [{ providedIn: "root" }]
  }], null, null);
})();

// src/app/features/administration/components/device-types/device-types-io-section/device-types-io-section.component.ts
function DeviceTypesIoSectionComponent_Conditional_2_Template(rf, ctx) {
  if (rf & 1) {
    \u0275\u0275namespaceSVG();
    \u0275\u0275elementStart(0, "svg", 2);
    \u0275\u0275element(1, "use");
    \u0275\u0275elementEnd();
  }
  if (rf & 2) {
    const ctx_r0 = \u0275\u0275nextContext();
    \u0275\u0275attribute("aria-label", ctx_r0.displayTitle() + " icon");
    \u0275\u0275advance();
    \u0275\u0275attribute("href", "assets/sprites/sprite.svg#" + ctx_r0.icon());
  }
}
function DeviceTypesIoSectionComponent_Conditional_3_Template(rf, ctx) {
  if (rf & 1) {
    \u0275\u0275element(0, "span");
  }
  if (rf & 2) {
    const ctx_r0 = \u0275\u0275nextContext();
    \u0275\u0275classMap(ctx_r0.icon() + " !text-[2.5rem]");
    \u0275\u0275attribute("aria-label", ctx_r0.displayTitle() + " icon");
  }
}
function DeviceTypesIoSectionComponent_Conditional_8_Template(rf, ctx) {
  if (rf & 1) {
    const _r2 = \u0275\u0275getCurrentView();
    \u0275\u0275elementStart(0, "div", 7)(1, "span", 10);
    \u0275\u0275listener("click", function DeviceTypesIoSectionComponent_Conditional_8_Template_span_click_1_listener() {
      \u0275\u0275restoreView(_r2);
      const ctx_r0 = \u0275\u0275nextContext();
      return \u0275\u0275resetView(ctx_r0.onEdit());
    })("keydown.enter", function DeviceTypesIoSectionComponent_Conditional_8_Template_span_keydown_enter_1_listener() {
      \u0275\u0275restoreView(_r2);
      const ctx_r0 = \u0275\u0275nextContext();
      return \u0275\u0275resetView(ctx_r0.onEdit());
    });
    \u0275\u0275elementEnd()();
  }
  if (rf & 2) {
    const ctx_r0 = \u0275\u0275nextContext();
    \u0275\u0275advance();
    \u0275\u0275attribute("aria-label", "Edit " + ctx_r0.displayTitle().toLowerCase());
  }
}
function DeviceTypesIoSectionComponent_Conditional_11_Template(rf, ctx) {
  if (rf & 1) {
    const _r3 = \u0275\u0275getCurrentView();
    \u0275\u0275elementStart(0, "app-dynamic-form", 11);
    \u0275\u0275listener("formValueChange", function DeviceTypesIoSectionComponent_Conditional_11_Template_app_dynamic_form_formValueChange_0_listener($event) {
      \u0275\u0275restoreView(_r3);
      const ctx_r0 = \u0275\u0275nextContext();
      return \u0275\u0275resetView(ctx_r0.onFormValueChange($event));
    })("formValidityChange", function DeviceTypesIoSectionComponent_Conditional_11_Template_app_dynamic_form_formValidityChange_0_listener($event) {
      \u0275\u0275restoreView(_r3);
      const ctx_r0 = \u0275\u0275nextContext();
      return \u0275\u0275resetView(ctx_r0.onFormValidityChange($event));
    });
    \u0275\u0275elementEnd();
  }
  if (rf & 2) {
    const ctx_r0 = \u0275\u0275nextContext();
    \u0275\u0275property("fields", ctx_r0.formFields)("actions", ctx_r0.actions);
  }
}
function DeviceTypesIoSectionComponent_Conditional_12_Conditional_1_Template(rf, ctx) {
  if (rf & 1) {
    \u0275\u0275element(0, "app-grid", 12);
  }
  if (rf & 2) {
    const ctx_r0 = \u0275\u0275nextContext(2);
    \u0275\u0275property("data", ctx_r0.ioTypeDetails())("columns", ctx_r0.columns)("showGridLines", false)("hideHeader", false);
  }
}
function DeviceTypesIoSectionComponent_Conditional_12_Conditional_2_Template(rf, ctx) {
  if (rf & 1) {
    \u0275\u0275elementStart(0, "div", 13);
    \u0275\u0275element(1, "i", 14);
    \u0275\u0275elementStart(2, "p");
    \u0275\u0275text(3);
    \u0275\u0275elementEnd()();
  }
  if (rf & 2) {
    const ctx_r0 = \u0275\u0275nextContext(2);
    \u0275\u0275advance(3);
    \u0275\u0275textInterpolate1(" No ", ctx_r0.displayTitle().toLowerCase(), " are currently configured for this device type. ");
  }
}
function DeviceTypesIoSectionComponent_Conditional_12_Template(rf, ctx) {
  if (rf & 1) {
    \u0275\u0275elementStart(0, "div", 9);
    \u0275\u0275conditionalCreate(1, DeviceTypesIoSectionComponent_Conditional_12_Conditional_1_Template, 1, 4, "app-grid", 12)(2, DeviceTypesIoSectionComponent_Conditional_12_Conditional_2_Template, 4, 1, "div", 13);
    \u0275\u0275elementEnd();
  }
  if (rf & 2) {
    const ctx_r0 = \u0275\u0275nextContext();
    \u0275\u0275advance();
    \u0275\u0275conditional(ctx_r0.hasData() ? 1 : 2);
  }
}
var DeviceTypesIoSectionComponent = class _DeviceTypesIoSectionComponent extends EntitySectionBaseComponent {
  ioTypeConfigs = {
    digital_output: {
      additionalFields: ["canPulse", "canToggle", "maxPulseSeconds", "minPulseSeconds"],
      getDefaultValues: () => ({
        canPulse: false,
        canToggle: true,
        maxPulseSeconds: 0,
        minPulseSeconds: 0
      }),
      getModalFields: (item) => [
        createToggleSwitchField("canToggle", "Can Toggle", item?.canToggle ?? true, {
          hint: "When enabled, this output can be toggled on/off.",
          props: {
            layout: "horizontal",
            labelWidth: "1/3",
            onLabel: "Yes",
            offLabel: "No"
          }
        }),
        createToggleSwitchField("canPulse", "Can Pulse", item?.canPulse ?? false, {
          hint: "When enabled, this output can pulse for a specified duration.",
          props: {
            layout: "horizontal",
            labelWidth: "1/3",
            onLabel: "Yes",
            offLabel: "No"
          }
        }),
        createNumberField("minPulseSeconds", "Min Pulse Seconds", item?.minPulseSeconds ?? 0, {
          hint: "Minimum pulse duration in seconds.",
          props: {
            layout: "horizontal",
            labelWidth: "1/3",
            min: 0,
            step: 1
          }
        }),
        createNumberField("maxPulseSeconds", "Max Pulse Seconds", item?.maxPulseSeconds ?? 0, {
          hint: "Maximum pulse duration in seconds.",
          props: {
            layout: "horizontal",
            labelWidth: "1/3",
            min: 0,
            step: 1
          }
        })
      ],
      addPropertiesToDisplayText: (item, parts) => {
        this.addToggleProperty(item, parts);
        this.addPulseProperty(item, parts);
        this.addPulseDurationProperty(item, parts);
      },
      addPropertiesToSaveObject: (item, inputObject) => {
        if (item.canPulse !== void 0) {
          inputObject["canPulse"] = item.canPulse;
        }
        if (item.canToggle !== void 0) {
          inputObject["canToggle"] = item.canToggle;
        }
        if (item.maxPulseSeconds !== void 0) {
          inputObject["maxPulseSeconds"] = item.maxPulseSeconds;
        }
        if (item.minPulseSeconds !== void 0) {
          inputObject["minPulseSeconds"] = item.minPulseSeconds;
        }
      },
      addPropertiesToItem: (item, baseItem) => {
        if (item["canPulse"] !== void 0) {
          baseItem.canPulse = Boolean(item["canPulse"]);
        }
        if (item["canToggle"] !== void 0) {
          baseItem.canToggle = Boolean(item["canToggle"]);
        }
        if (item["maxPulseSeconds"] !== void 0) {
          baseItem.maxPulseSeconds = Number(item["maxPulseSeconds"]);
        }
        if (item["minPulseSeconds"] !== void 0) {
          baseItem.minPulseSeconds = Number(item["minPulseSeconds"]);
        }
      }
    }
    // Add more I/O types here as needed
  };
  constructor() {
    super();
    effect(() => {
      this.columns = this.dynamicColumns();
    });
    effect(() => {
      const entity = this.entity();
      if (entity && !this.createMode()) {
        this.updateFormFields();
      }
    });
  }
  operationRegistry = inject(EntityOperationRegistryService);
  deviceTypesService = inject(DeviceTypesService);
  confirmationService = inject(ConfirmationService);
  entity = input(null, ...ngDevMode ? [{ debugName: "entity" }] : []);
  // Configuration inputs
  ioTypeKey = input.required(...ngDevMode ? [{ debugName: "ioTypeKey" }] : []);
  // 'digital_input', 'digital_output', etc.
  displayTitle = input.required(...ngDevMode ? [{ debugName: "displayTitle" }] : []);
  // 'Digital Inputs', 'Digital Outputs', etc.
  description = input.required(...ngDevMode ? [{ debugName: "description" }] : []);
  // Description text
  icon = input("pi pi-microchip", ...ngDevMode ? [{ debugName: "icon" }] : []);
  // Icon class
  iconType = input("primeng", ...ngDevMode ? [{ debugName: "iconType" }] : []);
  // 'primeng' or 'svg'
  ioInputModalConfig;
  defaultIOConfig = {
    additionalFields: [],
    getDefaultValues: () => ({}),
    getModalFields: () => [],
    addPropertiesToDisplayText: () => {
    },
    addPropertiesToSaveObject: () => {
    },
    addPropertiesToItem: () => {
    }
  };
  getCurrentIOConfig() {
    return this.ioTypeConfigs[this.ioTypeKey()] ?? this.defaultIOConfig;
  }
  // Generic computed property that works for any I/O type
  ioTypeDetails = computed(() => {
    const deviceType = this.entity();
    const ioCapabilities = deviceType?.ioCapabilities;
    const ioTypeData = ioCapabilities?.[this.ioTypeKey()];
    if (isNullOrUndefined(ioTypeData))
      return [];
    return Object.entries(ioTypeData).map(([name, properties]) => {
      const propertiesObj = properties;
      const optional = isDefined(propertiesObj?.["optional"]) ? Boolean(propertiesObj["optional"]) : false;
      const result = {
        name,
        status: optional ? "Optional" : "Required"
      };
      if (isDefined(propertiesObj)) {
        for (const [key, value] of Object.entries(propertiesObj)) {
          if (key !== "optional") {
            result[key] = value;
          }
        }
      }
      return result;
    });
  }, ...ngDevMode ? [{ debugName: "ioTypeDetails" }] : []);
  hasData = computed(() => {
    return this.ioTypeDetails().length > 0;
  }, ...ngDevMode ? [{ debugName: "hasData" }] : []);
  // Convert ioTypeDetails to IOInputItem format for the modal
  ioInputItems = computed(() => {
    return this.ioTypeDetails().map((item) => {
      const baseItem = {
        name: item["name"],
        optional: item["status"] === "Optional"
      };
      this.getCurrentIOConfig().addPropertiesToItem(item, baseItem);
      return baseItem;
    });
  }, ...ngDevMode ? [{ debugName: "ioInputItems" }] : []);
  // Dynamically generate columns based on available properties
  dynamicColumns = computed(() => {
    const data = this.ioTypeDetails();
    if (data.length === 0)
      return [];
    const columns = [
      { field: "name", header: "Name" },
      { field: "status", header: "Required/Optional" }
    ];
    const allKeys = /* @__PURE__ */ new Set();
    for (const item of data) {
      for (const key of Object.keys(item)) {
        if (key !== "name" && key !== "status") {
          allKeys.add(key);
        }
      }
    }
    for (const key of Array.from(allKeys).sort((a, b) => a.localeCompare(b))) {
      columns.push({
        field: key,
        header: this.formatColumnHeader(key)
      });
    }
    return columns;
  }, ...ngDevMode ? [{ debugName: "dynamicColumns" }] : []);
  formatColumnHeader(key) {
    return key.replaceAll(/([A-Z])/g, " $1").replaceAll("_", " ").toLowerCase().split(" ").map((word) => word.charAt(0).toUpperCase() + word.slice(1)).join(" ");
  }
  updateFormFields() {
    this.ioInputModalConfig = {
      modalComponent: ModalListFormComponent,
      modalTitle: `Add ${this.displayTitle().toLowerCase().slice(0, -1)}`,
      defaultItemProvider: () => this.getDefaultItem(),
      listItemFormatter: (item) => ({
        id: item.name,
        title: item.name,
        display: this.formatDisplayText(item),
        icon: this.icon()
      }),
      modalFields: (item) => {
        return this.getModalFields(item);
      },
      onSubmit: async (item) => {
        if (!item.name?.trim()) {
          return false;
        }
        return true;
      },
      onDeleteItem: async (item) => {
        return new Promise((resolve) => {
          this.confirmationService.confirm({
            header: "Confirmation",
            message: `Are you sure you want to delete "${item.name}"?`,
            closable: true,
            closeOnEscape: true,
            icon: "pi pi-exclamation-triangle",
            rejectButtonProps: {
              label: "Cancel",
              severity: "secondary",
              outlined: true
            },
            acceptButtonProps: {
              label: "Delete",
              severity: "danger"
            },
            accept: async () => {
              await this.deleteIOInput(item.name);
              resolve(true);
            },
            reject: () => {
              resolve(false);
            }
          });
        });
      },
      subHeader: "",
      showEditButton: true
    };
    this.formFields = [
      createModalListField("ioInputs", this.displayTitle(), this.ioInputItems(), {
        layout: "horizontal",
        labelWidth: "1/3",
        name: "ioInputs",
        props: {
          modalConfig: this.ioInputModalConfig
        }
      })
    ];
  }
  formatDisplayText(item) {
    const parts = [];
    parts.push(item.optional ? "Optional" : "Required");
    this.getCurrentIOConfig().addPropertiesToDisplayText(item, parts);
    return parts.join(", ");
  }
  addToggleProperty(item, parts) {
    if (item.canToggle !== void 0) {
      parts.push(`Toggle: ${item.canToggle ? "Yes" : "No"}`);
    }
  }
  addPulseProperty(item, parts) {
    if (item.canPulse !== void 0) {
      parts.push(`Pulse: ${item.canPulse ? "Yes" : "No"}`);
    }
  }
  addPulseDurationProperty(item, parts) {
    if (!this.shouldShowPulseDuration(item)) {
      return;
    }
    const min = item.minPulseSeconds ?? 0;
    const max = item.maxPulseSeconds ?? 0;
    if (min === max) {
      parts.push(`Duration: ${min}s`);
    } else {
      parts.push(`Duration: ${min}-${max}s`);
    }
  }
  shouldShowPulseDuration(item) {
    return item.canPulse === true && (isDefined(item.minPulseSeconds) || isDefined(item.maxPulseSeconds));
  }
  getDefaultItem() {
    const baseItem = { name: "", optional: false };
    const defaults = this.getCurrentIOConfig().getDefaultValues();
    return __spreadValues(__spreadValues({}, baseItem), defaults);
  }
  getModalFields(item) {
    const fields = [
      createTextField("name", "Input Name", item?.name ?? "", {
        required: true,
        placeholder: "Enter input name...",
        validations: [
          {
            name: "required",
            validator: Validators.required,
            message: "Input name is required"
          }
        ]
      }),
      createToggleSwitchField("optional", "Optional", item?.optional ?? false, {
        hint: "When enabled, this input is optional. When disabled, this input is required.",
        props: {
          layout: "horizontal",
          labelWidth: "1/3",
          onLabel: "Optional",
          offLabel: "Required"
        }
      })
    ];
    fields.push(...this.getCurrentIOConfig().getModalFields(item));
    return fields;
  }
  async deleteIOInput(inputName) {
    const entity = this.entity();
    if (!entity?.ioCapabilities)
      return;
    const ioTypeKey = this.ioTypeKey();
    const currentInputs = __spreadValues({}, entity.ioCapabilities[ioTypeKey]);
    delete currentInputs[inputName];
    const updatedEntity = __spreadProps(__spreadValues({}, entity), {
      ioCapabilities: __spreadProps(__spreadValues({}, entity.ioCapabilities), {
        [ioTypeKey]: currentInputs
      })
    });
    const updateMethod = this.getUpdateMethod();
    if (updatedEntity.id && isDefined(updateMethod)) {
      await firstValueFrom(updateMethod(updatedEntity.id, updatedEntity));
    }
  }
  getUpdateMethod() {
    return this.operationRegistry.getOperation("device-types", "update") ?? ((id, data) => this.deviceTypesService.updateDeviceType(id, data).pipe(tap((response) => {
      this.entityChange.emit(response);
      this.broadcastService.broadcast("entity-updated", {
        entityType: "device-types",
        operation: "update",
        entityId: response.id,
        data: response
      });
    })));
  }
  ngOnInit() {
    this.updateFormFields();
  }
  static \u0275fac = function DeviceTypesIoSectionComponent_Factory(__ngFactoryType__) {
    return new (__ngFactoryType__ || _DeviceTypesIoSectionComponent)();
  };
  static \u0275cmp = /* @__PURE__ */ \u0275\u0275defineComponent({ type: _DeviceTypesIoSectionComponent, selectors: [["app-device-types-io-section"]], inputs: { entity: [1, "entity"], ioTypeKey: [1, "ioTypeKey"], displayTitle: [1, "displayTitle"], description: [1, "description"], icon: [1, "icon"], iconType: [1, "iconType"] }, features: [\u0275\u0275InheritDefinitionFeature], decls: 13, vars: 6, consts: [[1, "pt-2", "card"], [1, "flex", "justify-start", "items-center", "p-2", "mb-4"], [1, "custom-icon-svg", "w-[2.5rem]", "h-[2.5rem]"], [3, "class"], [1, "flex-1", "pl-6"], [1, "flex", "justify-between", "items-center"], [1, "m-0", "text-xl", "font-semibold"], [1, "icon-light"], [3, "fields", "actions"], [1, "io-capabilities-container"], [1, "pi", "pi-pen-to-square", "action", "hover", "!text-2xl", 3, "click", "keydown.enter"], [3, "formValueChange", "formValidityChange", "fields", "actions"], ["tableStyleClass", "info-display !w-auto", 3, "data", "columns", "showGridLines", "hideHeader"], [1, "no-io-message"], [1, "pi", "pi-info-circle"]], template: function DeviceTypesIoSectionComponent_Template(rf, ctx) {
    if (rf & 1) {
      \u0275\u0275elementStart(0, "div", 0)(1, "div", 1);
      \u0275\u0275conditionalCreate(2, DeviceTypesIoSectionComponent_Conditional_2_Template, 2, 2, ":svg:svg", 2)(3, DeviceTypesIoSectionComponent_Conditional_3_Template, 1, 3, "span", 3);
      \u0275\u0275elementStart(4, "div", 4)(5, "div", 5)(6, "h2", 6);
      \u0275\u0275text(7);
      \u0275\u0275elementEnd();
      \u0275\u0275conditionalCreate(8, DeviceTypesIoSectionComponent_Conditional_8_Template, 2, 1, "div", 7);
      \u0275\u0275elementEnd();
      \u0275\u0275elementStart(9, "span");
      \u0275\u0275text(10);
      \u0275\u0275elementEnd()()();
      \u0275\u0275conditionalCreate(11, DeviceTypesIoSectionComponent_Conditional_11_Template, 1, 2, "app-dynamic-form", 8);
      \u0275\u0275conditionalCreate(12, DeviceTypesIoSectionComponent_Conditional_12_Template, 3, 1, "div", 9);
      \u0275\u0275elementEnd();
    }
    if (rf & 2) {
      \u0275\u0275advance(2);
      \u0275\u0275conditional(ctx.iconType() === "svg" ? 2 : 3);
      \u0275\u0275advance(5);
      \u0275\u0275textInterpolate(ctx.displayTitle());
      \u0275\u0275advance();
      \u0275\u0275conditional(!ctx.isFormEditable() && !ctx.createMode() ? 8 : -1);
      \u0275\u0275advance(2);
      \u0275\u0275textInterpolate(ctx.description());
      \u0275\u0275advance();
      \u0275\u0275conditional(ctx.isFormEditable() ? 11 : -1);
      \u0275\u0275advance();
      \u0275\u0275conditional(!ctx.isFormEditable() && !ctx.createMode() ? 12 : -1);
    }
  }, dependencies: [DynamicFormComponent, GridComponent], encapsulation: 2 });
};
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(DeviceTypesIoSectionComponent, [{
    type: Component,
    args: [{ selector: "app-device-types-io-section", imports: [DynamicFormComponent, GridComponent], template: `<div class="pt-2 card">
  <div class="flex justify-start items-center p-2 mb-4">
    @if (iconType() === 'svg') {
      <svg
        class="custom-icon-svg w-[2.5rem] h-[2.5rem]"
        [attr.aria-label]="displayTitle() + ' icon'"
      >
        <use [attr.href]="'assets/sprites/sprite.svg#' + icon()"></use>
      </svg>
    } @else {
      <span
        [class]="icon() + ' !text-[2.5rem]'"
        [attr.aria-label]="displayTitle() + ' icon'"
      ></span>
    }

    <div class="flex-1 pl-6">
      <div class="flex justify-between items-center">
        <h2 class="m-0 text-xl font-semibold">{{ displayTitle() }}</h2>
        @if (!isFormEditable() && !createMode()) {
          <div class="icon-light">
            <span
              class="pi pi-pen-to-square action hover !text-2xl"
              [attr.aria-label]="'Edit ' + displayTitle().toLowerCase()"
              (click)="onEdit()"
              (keydown.enter)="onEdit()"
            ></span>
          </div>
        }
      </div>
      <span>{{ description() }}</span>
    </div>
  </div>

  @if (isFormEditable()) {
    <!-- Dynamic Form for edit mode only -->
    <app-dynamic-form
      [fields]="formFields"
      [actions]="actions"
      (formValueChange)="onFormValueChange($event)"
      (formValidityChange)="onFormValidityChange($event)"
    >
    </app-dynamic-form>
  }

  @if (!isFormEditable() && !createMode()) {
    <div class="io-capabilities-container">
      @if (hasData()) {
        <app-grid
          [data]="ioTypeDetails()"
          [columns]="columns"
          [showGridLines]="false"
          [hideHeader]="false"
          tableStyleClass="info-display !w-auto"
        ></app-grid>
      } @else {
        <div class="no-io-message">
          <i class="pi pi-info-circle"></i>
          <p>
            No {{ displayTitle().toLowerCase() }} are currently configured for
            this device type.
          </p>
        </div>
      }
    </div>
  }
</div>
` }]
  }], () => [], { entity: [{ type: Input, args: [{ isSignal: true, alias: "entity", required: false }] }], ioTypeKey: [{ type: Input, args: [{ isSignal: true, alias: "ioTypeKey", required: true }] }], displayTitle: [{ type: Input, args: [{ isSignal: true, alias: "displayTitle", required: true }] }], description: [{ type: Input, args: [{ isSignal: true, alias: "description", required: true }] }], icon: [{ type: Input, args: [{ isSignal: true, alias: "icon", required: false }] }], iconType: [{ type: Input, args: [{ isSignal: true, alias: "iconType", required: false }] }] });
})();
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && \u0275setClassDebugInfo(DeviceTypesIoSectionComponent, { className: "DeviceTypesIoSectionComponent", filePath: "src/app/features/administration/components/device-types/device-types-io-section/device-types-io-section.component.ts", lineNumber: 53 });
})();

// src/app/features/administration/components/device-types/device-types-accessories-section/device-types-accessories-section.component.ts
var _c077 = ["actionsTemplate"];
var _c126 = () => [];
var _forTrack04 = ($index, $item) => $item.fieldKey;
function DeviceTypesAccessoriesSectionComponent_Conditional_7_Template(rf, ctx) {
  if (rf & 1) {
    const _r1 = \u0275\u0275getCurrentView();
    \u0275\u0275elementStart(0, "div", 6)(1, "button", 10);
    \u0275\u0275listener("click", function DeviceTypesAccessoriesSectionComponent_Conditional_7_Template_button_click_1_listener() {
      \u0275\u0275restoreView(_r1);
      const ctx_r1 = \u0275\u0275nextContext();
      return \u0275\u0275resetView(ctx_r1.onEdit());
    })("keydown.enter", function DeviceTypesAccessoriesSectionComponent_Conditional_7_Template_button_keydown_enter_1_listener() {
      \u0275\u0275restoreView(_r1);
      const ctx_r1 = \u0275\u0275nextContext();
      return \u0275\u0275resetView(ctx_r1.onEdit());
    })("keydown.space", function DeviceTypesAccessoriesSectionComponent_Conditional_7_Template_button_keydown_space_1_listener($event) {
      \u0275\u0275restoreView(_r1);
      const ctx_r1 = \u0275\u0275nextContext();
      ctx_r1.onEdit();
      return \u0275\u0275resetView($event.preventDefault());
    });
    \u0275\u0275elementEnd()();
  }
  if (rf & 2) {
    const ctx_r1 = \u0275\u0275nextContext();
    \u0275\u0275advance();
    \u0275\u0275attribute("aria-label", "Edit " + ctx_r1.displayTitle().toLowerCase());
  }
}
function DeviceTypesAccessoriesSectionComponent_Conditional_8_Template(rf, ctx) {
  if (rf & 1) {
    const _r3 = \u0275\u0275getCurrentView();
    \u0275\u0275elementStart(0, "div", 7)(1, "button", 11);
    \u0275\u0275listener("click", function DeviceTypesAccessoriesSectionComponent_Conditional_8_Template_button_click_1_listener() {
      \u0275\u0275restoreView(_r3);
      const ctx_r1 = \u0275\u0275nextContext();
      return \u0275\u0275resetView(ctx_r1.onCancel());
    })("keydown.enter", function DeviceTypesAccessoriesSectionComponent_Conditional_8_Template_button_keydown_enter_1_listener() {
      \u0275\u0275restoreView(_r3);
      const ctx_r1 = \u0275\u0275nextContext();
      return \u0275\u0275resetView(ctx_r1.onCancel());
    })("keydown.space", function DeviceTypesAccessoriesSectionComponent_Conditional_8_Template_button_keydown_space_1_listener($event) {
      \u0275\u0275restoreView(_r3);
      const ctx_r1 = \u0275\u0275nextContext();
      ctx_r1.onCancel();
      return \u0275\u0275resetView($event.preventDefault());
    });
    \u0275\u0275text(2, " Cancel ");
    \u0275\u0275elementEnd();
    \u0275\u0275elementStart(3, "button", 11);
    \u0275\u0275listener("click", function DeviceTypesAccessoriesSectionComponent_Conditional_8_Template_button_click_3_listener() {
      \u0275\u0275restoreView(_r3);
      const ctx_r1 = \u0275\u0275nextContext();
      return \u0275\u0275resetView(ctx_r1.onSave());
    })("keydown.enter", function DeviceTypesAccessoriesSectionComponent_Conditional_8_Template_button_keydown_enter_3_listener() {
      \u0275\u0275restoreView(_r3);
      const ctx_r1 = \u0275\u0275nextContext();
      return \u0275\u0275resetView(ctx_r1.onSave());
    })("keydown.space", function DeviceTypesAccessoriesSectionComponent_Conditional_8_Template_button_keydown_space_3_listener($event) {
      \u0275\u0275restoreView(_r3);
      const ctx_r1 = \u0275\u0275nextContext();
      ctx_r1.onSave();
      return \u0275\u0275resetView($event.preventDefault());
    });
    \u0275\u0275text(4, " Save ");
    \u0275\u0275elementEnd()();
  }
  if (rf & 2) {
    const ctx_r1 = \u0275\u0275nextContext();
    \u0275\u0275advance();
    \u0275\u0275attribute("aria-label", "Cancel editing " + ctx_r1.displayTitle().toLowerCase());
    \u0275\u0275advance(2);
    \u0275\u0275attribute("aria-label", "Save " + ctx_r1.displayTitle().toLowerCase());
  }
}
function DeviceTypesAccessoriesSectionComponent_Conditional_12_Conditional_0_Conditional_1_Template(rf, ctx) {
  if (rf & 1) {
    \u0275\u0275elementStart(0, "p-accordion-panel", 14)(1, "p-accordion-header");
    \u0275\u0275text(2, "IO Capabilities");
    \u0275\u0275elementEnd();
    \u0275\u0275elementStart(3, "p-accordion-content");
    \u0275\u0275element(4, "app-grid", 17);
    \u0275\u0275elementEnd()();
  }
  if (rf & 2) {
    const ctx_r1 = \u0275\u0275nextContext(3);
    \u0275\u0275advance(4);
    \u0275\u0275property("data", ctx_r1.ioCapabilitiesGridData())("columns", ctx_r1.ioCapabilitiesColumns)("showGridLines", false)("hideHeader", false);
  }
}
function DeviceTypesAccessoriesSectionComponent_Conditional_12_Conditional_0_Conditional_2_For_5_Template(rf, ctx) {
  if (rf & 1) {
    \u0275\u0275elementStart(0, "div", 19)(1, "h4", 20);
    \u0275\u0275text(2);
    \u0275\u0275elementEnd();
    \u0275\u0275element(3, "app-grid", 21);
    \u0275\u0275elementEnd();
  }
  if (rf & 2) {
    const field_r4 = ctx.$implicit;
    const ctx_r1 = \u0275\u0275nextContext(4);
    \u0275\u0275advance(2);
    \u0275\u0275textInterpolate1(" ", field_r4.fieldTitle, " ");
    \u0275\u0275advance();
    \u0275\u0275property("data", field_r4.gridData)("columns", ctx_r1.fieldGridColumns)("showGridLines", false)("hideHeader", false);
  }
}
function DeviceTypesAccessoriesSectionComponent_Conditional_12_Conditional_0_Conditional_2_Template(rf, ctx) {
  if (rf & 1) {
    \u0275\u0275elementStart(0, "p-accordion-panel", 15)(1, "p-accordion-header");
    \u0275\u0275text(2, "Settings Definition");
    \u0275\u0275elementEnd();
    \u0275\u0275elementStart(3, "p-accordion-content", 18);
    \u0275\u0275repeaterCreate(4, DeviceTypesAccessoriesSectionComponent_Conditional_12_Conditional_0_Conditional_2_For_5_Template, 4, 5, "div", 19, _forTrack04);
    \u0275\u0275elementEnd()();
  }
  if (rf & 2) {
    const ctx_r1 = \u0275\u0275nextContext(3);
    \u0275\u0275advance(4);
    \u0275\u0275repeater(ctx_r1.settingsFieldsGridData());
  }
}
function DeviceTypesAccessoriesSectionComponent_Conditional_12_Conditional_0_Conditional_3_Template(rf, ctx) {
  if (rf & 1) {
    \u0275\u0275elementStart(0, "p-accordion-panel", 16)(1, "p-accordion-header");
    \u0275\u0275text(2, "Features");
    \u0275\u0275elementEnd();
    \u0275\u0275elementStart(3, "p-accordion-content");
    \u0275\u0275element(4, "app-grid", 17);
    \u0275\u0275elementEnd()();
  }
  if (rf & 2) {
    const ctx_r1 = \u0275\u0275nextContext(3);
    \u0275\u0275advance(4);
    \u0275\u0275property("data", ctx_r1.featuresGridData())("columns", ctx_r1.featuresColumns)("showGridLines", false)("hideHeader", false);
  }
}
function DeviceTypesAccessoriesSectionComponent_Conditional_12_Conditional_0_Template(rf, ctx) {
  if (rf & 1) {
    \u0275\u0275elementStart(0, "p-accordion", 12);
    \u0275\u0275conditionalCreate(1, DeviceTypesAccessoriesSectionComponent_Conditional_12_Conditional_0_Conditional_1_Template, 5, 4, "p-accordion-panel", 14);
    \u0275\u0275conditionalCreate(2, DeviceTypesAccessoriesSectionComponent_Conditional_12_Conditional_0_Conditional_2_Template, 6, 0, "p-accordion-panel", 15);
    \u0275\u0275conditionalCreate(3, DeviceTypesAccessoriesSectionComponent_Conditional_12_Conditional_0_Conditional_3_Template, 5, 4, "p-accordion-panel", 16);
    \u0275\u0275elementEnd();
  }
  if (rf & 2) {
    const ctx_r1 = \u0275\u0275nextContext(2);
    \u0275\u0275property("multiple", ctx_r1.isFormEditable())("value", ctx_r1.isFormEditable() ? ctx_r1.getActiveValues() : \u0275\u0275pureFunction0(5, _c126));
    \u0275\u0275advance();
    \u0275\u0275conditional(ctx_r1.hasIoCapabilities() ? 1 : -1);
    \u0275\u0275advance();
    \u0275\u0275conditional(ctx_r1.hasSettingsDefinition() ? 2 : -1);
    \u0275\u0275advance();
    \u0275\u0275conditional(ctx_r1.hasFeatures() ? 3 : -1);
  }
}
function DeviceTypesAccessoriesSectionComponent_Conditional_12_Conditional_1_Template(rf, ctx) {
  if (rf & 1) {
    \u0275\u0275elementStart(0, "div", 13);
    \u0275\u0275element(1, "i", 22);
    \u0275\u0275elementStart(2, "p");
    \u0275\u0275text(3);
    \u0275\u0275elementEnd()();
  }
  if (rf & 2) {
    const ctx_r1 = \u0275\u0275nextContext(2);
    \u0275\u0275advance(3);
    \u0275\u0275textInterpolate1(" No IO capabilities, features, or settings have been configured for this ", ctx_r1.displayTitle(), " accessory. ");
  }
}
function DeviceTypesAccessoriesSectionComponent_Conditional_12_Template(rf, ctx) {
  if (rf & 1) {
    \u0275\u0275conditionalCreate(0, DeviceTypesAccessoriesSectionComponent_Conditional_12_Conditional_0_Template, 4, 6, "p-accordion", 12)(1, DeviceTypesAccessoriesSectionComponent_Conditional_12_Conditional_1_Template, 4, 1, "div", 13);
  }
  if (rf & 2) {
    const ctx_r1 = \u0275\u0275nextContext();
    \u0275\u0275conditional(ctx_r1.hasIoCapabilities() || ctx_r1.hasSettingsDefinition() || ctx_r1.hasFeatures() ? 0 : 1);
  }
}
function DeviceTypesAccessoriesSectionComponent_Conditional_13_Template(rf, ctx) {
  if (rf & 1) {
    \u0275\u0275elementStart(0, "div", 9);
    \u0275\u0275element(1, "i", 22);
    \u0275\u0275elementStart(2, "p");
    \u0275\u0275text(3);
    \u0275\u0275elementEnd()();
  }
  if (rf & 2) {
    const ctx_r1 = \u0275\u0275nextContext();
    \u0275\u0275advance(3);
    \u0275\u0275textInterpolate1("No data available for ", ctx_r1.displayTitle().toLowerCase(), ".");
  }
}
var DeviceTypesAccessoriesSectionComponent = class _DeviceTypesAccessoriesSectionComponent extends EntitySectionBaseComponent {
  constructor() {
    super();
    this.columns = [
      { field: "key", header: "Property" },
      { field: "value", header: "Value" }
    ];
    this.ioCapabilitiesColumns = [
      { field: "type", header: "Type" },
      { field: "details", header: "Available Inputs" }
    ];
    this.settingsDefinitionColumns = [
      { field: "setting", header: "Setting" },
      { field: "value", header: "Value" }
    ];
    this.featuresColumns = [
      { field: "feature", header: "Feature" },
      { field: "value", header: "Value" },
      { field: "type", header: "Type" },
      { field: "enabled", header: "Enabled" }
    ];
    effect(() => {
      const entity = this.entity();
      if (entity && !this.createMode()) {
        this.updateFormFields();
      }
    });
  }
  operationRegistry = inject(EntityOperationRegistryService);
  deviceTypesService = inject(DeviceTypesService);
  actionsTemplate;
  entity = input(null, ...ngDevMode ? [{ debugName: "entity" }] : []);
  // Column definitions for grids
  ioCapabilitiesColumns = [];
  settingsDefinitionColumns = [];
  featuresColumns = [];
  // Configuration inputs
  accessoryKey = input.required(...ngDevMode ? [{ debugName: "accessoryKey" }] : []);
  // The accessory key (e.g., 'mritagreader')
  displayTitle = input.required(...ngDevMode ? [{ debugName: "displayTitle" }] : []);
  // Display name (e.g., 'MRI Tag Reader')
  // Get the specific accessory data
  accessoryData = computed(() => {
    const deviceType = this.entity();
    const accessories = deviceType?.accessories;
    const key = this.accessoryKey();
    if (isNullOrUndefined(accessories) || !key)
      return null;
    return accessories[key] ?? null;
  }, ...ngDevMode ? [{ debugName: "accessoryData" }] : []);
  // Display accessory details in a simple grid format
  accessoryDetails = computed(() => {
    const accessory = this.accessoryData();
    if (isNullOrUndefined(accessory))
      return [];
    const details = [
      {
        key: "Name",
        value: isDefined(accessory.name) && accessory.name.trim() !== "" ? accessory.name : "Unnamed Accessory"
      }
    ];
    if (isDefined(accessory.settingsDefinition)) {
      details.push({
        key: "Settings Definition",
        value: isDefined(accessory.settingsDefinition) && accessory.settingsDefinition.trim() !== "" ? "Configured" : "Not configured"
      });
    } else {
      details.push({ key: "Settings Definition", value: "None" });
    }
    if (isDefined(accessory.ioCapabilities)) {
      const ioSummary = this.getIOCapabilitiesSummary(accessory.ioCapabilities);
      details.push({
        key: "I/O Capabilities",
        value: ioSummary || "None configured"
      });
    } else {
      details.push({ key: "I/O Capabilities", value: "None" });
    }
    if (isDefined(accessory.features)) {
      const featureCount = Object.keys(accessory.features).length;
      const featureNames = Object.keys(accessory.features).join(", ");
      details.push({
        key: "Features",
        value: featureCount > 0 ? `${featureCount} features: ${featureNames}` : "None"
      });
    } else {
      details.push({ key: "Features", value: "None" });
    }
    return details;
  }, ...ngDevMode ? [{ debugName: "accessoryDetails" }] : []);
  hasData = computed(() => {
    return this.accessoryData() !== null;
  }, ...ngDevMode ? [{ debugName: "hasData" }] : []);
  // IO Capabilities grid data
  ioCapabilitiesGridData = computed(() => {
    const accessory = this.accessoryData();
    if (isNullOrUndefined(accessory?.ioCapabilities))
      return [];
    const ioCapabilities = accessory.ioCapabilities;
    const result = [];
    const ioTypes = [
      { key: "digital_input", label: "Digital Input" },
      { key: "digital_output", label: "Digital Output" },
      { key: "analog_input", label: "Analog Input" },
      { key: "temperature_input", label: "Temperature Input" },
      { key: "can_input", label: "CAN Input" },
      { key: "counter_input", label: "Counter Input" },
      { key: "camera_input", label: "Camera Input" },
      { key: "value_input", label: "Value Input" }
    ];
    for (const ioType of ioTypes) {
      const ioData = ioCapabilities[ioType.key];
      if (isDefined(ioData)) {
        const count = Object.keys(ioData).length;
        if (count > 0) {
          const details = Object.keys(ioData).join(", ");
          result.push({
            type: ioType.label,
            details
          });
        }
      }
    }
    return result;
  }, ...ngDevMode ? [{ debugName: "ioCapabilitiesGridData" }] : []);
  hasIoCapabilities = computed(() => {
    return this.ioCapabilitiesGridData().length > 0;
  }, ...ngDevMode ? [{ debugName: "hasIoCapabilities" }] : []);
  // Settings Definition grid data
  settingsDefinitionGridData = computed(() => {
    const accessory = this.accessoryData();
    if (isNullOrUndefined(accessory?.settingsDefinition))
      return [];
    try {
      const settingsJson = JSON.parse(String(accessory.settingsDefinition));
      return Object.entries(settingsJson).map(([key, value]) => ({
        setting: key,
        value: typeof value === "object" && value !== null ? (() => {
          try {
            return JSON.stringify(value);
          } catch {
            return "[object Object]";
          }
        })() : String(value)
      }));
    } catch {
      return [
        {
          setting: "Raw Definition",
          value: String(accessory.settingsDefinition),
          type: "string"
        }
      ];
    }
  }, ...ngDevMode ? [{ debugName: "settingsDefinitionGridData" }] : []);
  // Individual field grid data - creates a grid for each field
  settingsFieldsGridData = computed(() => {
    const accessory = this.accessoryData();
    if (isNullOrUndefined(accessory?.settingsDefinition))
      return [];
    try {
      const settingsJson = JSON.parse(String(accessory.settingsDefinition));
      const fields = settingsJson.fields;
      if (!isDefined(fields) || typeof fields !== "object")
        return [];
      return Object.entries(fields).map(([fieldKey, fieldValue]) => ({
        fieldKey,
        fieldTitle: isDefined(fieldValue?.["id"]) && isDefined(fieldValue?.["title"]) ? `${fieldValue?.["title"]}(${fieldValue?.["id"]})` : fieldKey.charAt(0).toUpperCase() + fieldKey.slice(1).replaceAll(/([A-Z])/g, " $1"),
        gridData: typeof fieldValue === "object" && fieldValue !== null ? Object.entries(fieldValue).map(([key, value]) => ({
          property: key,
          value: typeof value === "object" && value !== null ? JSON.stringify(value) : String(value)
        })) : [{ property: "Value", value: String(fieldValue) }]
      }));
    } catch {
      return [];
    }
  }, ...ngDevMode ? [{ debugName: "settingsFieldsGridData" }] : []);
  // Columns for field grids
  fieldGridColumns = [
    { field: "property", header: "Property" },
    { field: "value", header: "Value" }
  ];
  hasSettingsDefinition = computed(() => {
    return this.settingsDefinitionGridData().length > 0;
  }, ...ngDevMode ? [{ debugName: "hasSettingsDefinition" }] : []);
  // Features grid data
  featuresGridData = computed(() => {
    const accessory = this.accessoryData();
    if (isNullOrUndefined(accessory?.features))
      return [];
    const features = accessory.features;
    return Object.entries(features).map(([key, value]) => ({
      feature: key,
      value: typeof value === "object" && value !== null ? JSON.stringify(value, null, 2) : String(value),
      type: typeof value,
      enabled: Boolean(value)
    }));
  }, ...ngDevMode ? [{ debugName: "featuresGridData" }] : []);
  hasFeatures = computed(() => {
    return this.featuresGridData().length > 0;
  }, ...ngDevMode ? [{ debugName: "hasFeatures" }] : []);
  getIOCapabilitiesSummary(ioCapabilities) {
    if (!isDefined(ioCapabilities))
      return "";
    const ioTypes = [
      { key: "digital_input", label: "Digital In" },
      { key: "digital_output", label: "Digital Out" },
      { key: "analog_input", label: "Analog In" },
      { key: "temperature_input", label: "Temp In" },
      { key: "can_input", label: "CAN In" },
      { key: "counter_input", label: "Counter In" },
      { key: "camera_input", label: "Camera In" },
      { key: "value_input", label: "Value In" }
    ];
    const summary = [];
    for (const ioType of ioTypes) {
      const count = Object.keys(ioCapabilities[ioType.key] ?? {}).length;
      if (count > 0) {
        summary.push(`${count} ${ioType.label}`);
      }
    }
    return summary.join(", ");
  }
  updateFormFields() {
    const accessory = this.accessoryData();
    this.formFields = [
      createTextField("name", "Accessory Name", accessory?.name ?? ""),
      createTextField("settingsDefinition", "Settings Definition", accessory?.settingsDefinition ?? "")
    ];
  }
  getUpdateMethod() {
    return this.operationRegistry.getOperation("device-types", "update") ?? ((id, data) => this.deviceTypesService.updateDeviceType(id, data).pipe(tap((response) => {
      this.entityChange.emit(response);
      this.broadcastService.broadcast("entity-updated", {
        entityType: "device-types",
        operation: "update",
        entityId: response.id,
        data: response
      });
    })));
  }
  ngOnInit() {
    this.updateFormFields();
  }
  onCancel() {
    this.cancelEdit();
  }
  onSave() {
    const formGroup = this.getFormGroup();
    if (formGroup) {
      this.onSubmit(formGroup);
    }
  }
  getActiveValues = computed(() => {
    const activeValues = [];
    if (this.hasIoCapabilities()) {
      activeValues.push("io-capabilities");
    }
    if (this.hasSettingsDefinition()) {
      activeValues.push("settings-definition");
    }
    if (this.hasFeatures()) {
      activeValues.push("features");
    }
    return activeValues;
  }, ...ngDevMode ? [{ debugName: "getActiveValues" }] : []);
  static \u0275fac = function DeviceTypesAccessoriesSectionComponent_Factory(__ngFactoryType__) {
    return new (__ngFactoryType__ || _DeviceTypesAccessoriesSectionComponent)();
  };
  static \u0275cmp = /* @__PURE__ */ \u0275\u0275defineComponent({ type: _DeviceTypesAccessoriesSectionComponent, selectors: [["app-device-types-accessories-section"]], viewQuery: function DeviceTypesAccessoriesSectionComponent_Query(rf, ctx) {
    if (rf & 1) {
      \u0275\u0275viewQuery(_c077, 7);
    }
    if (rf & 2) {
      let _t;
      \u0275\u0275queryRefresh(_t = \u0275\u0275loadQuery()) && (ctx.actionsTemplate = _t.first);
    }
  }, inputs: { entity: [1, "entity"], accessoryKey: [1, "accessoryKey"], displayTitle: [1, "displayTitle"] }, features: [\u0275\u0275InheritDefinitionFeature], decls: 14, vars: 6, consts: [[1, "pt-2", "card"], [1, "flex", "justify-start", "items-center", "p-2", "mb-4"], [1, "pi", "pi-cog", "!text-[2.5rem]"], [1, "flex-1", "pl-6"], [1, "flex", "justify-between", "items-center"], [1, "m-0", "text-xl", "font-semibold"], [1, "icon-light"], [1, "flex", "gap-2"], [1, "ml-16", "accessory-container"], [1, "no-accessory-message"], [1, "pi", "pi-pen-to-square", "action", "hover", "!text-2xl", 3, "click", "keydown.enter", "keydown.space"], [1, "px-4", "py-2", 3, "click", "keydown.enter", "keydown.space"], [3, "multiple", "value"], [1, "flex", "gap-2", "items-center", "no-accessory-content-message"], ["value", "io-capabilities"], ["value", "settings-definition"], ["value", "features"], ["tableStyleClass", "info-display !w-auto", 3, "data", "columns", "showGridLines", "hideHeader"], [1, "ml-8"], [1, "mb-4", "field-section"], [1, "mb-2", "font-medium", "field-title"], ["tableStyleClass", "info-display !w-auto field-grid", 3, "data", "columns", "showGridLines", "hideHeader"], [1, "pi", "pi-info-circle"]], template: function DeviceTypesAccessoriesSectionComponent_Template(rf, ctx) {
    if (rf & 1) {
      \u0275\u0275elementStart(0, "div", 0)(1, "div", 1);
      \u0275\u0275element(2, "span", 2);
      \u0275\u0275elementStart(3, "div", 3)(4, "div", 4)(5, "h2", 5);
      \u0275\u0275text(6);
      \u0275\u0275elementEnd();
      \u0275\u0275conditionalCreate(7, DeviceTypesAccessoriesSectionComponent_Conditional_7_Template, 2, 1, "div", 6);
      \u0275\u0275conditionalCreate(8, DeviceTypesAccessoriesSectionComponent_Conditional_8_Template, 5, 2, "div", 7);
      \u0275\u0275elementEnd();
      \u0275\u0275elementStart(9, "span");
      \u0275\u0275text(10);
      \u0275\u0275elementEnd()()();
      \u0275\u0275elementStart(11, "div", 8);
      \u0275\u0275conditionalCreate(12, DeviceTypesAccessoriesSectionComponent_Conditional_12_Template, 2, 1)(13, DeviceTypesAccessoriesSectionComponent_Conditional_13_Template, 4, 1, "div", 9);
      \u0275\u0275elementEnd()();
    }
    if (rf & 2) {
      \u0275\u0275advance(2);
      \u0275\u0275attribute("aria-label", ctx.displayTitle() + " icon");
      \u0275\u0275advance(4);
      \u0275\u0275textInterpolate(ctx.displayTitle());
      \u0275\u0275advance();
      \u0275\u0275conditional(!ctx.isFormEditable() && !ctx.createMode() ? 7 : -1);
      \u0275\u0275advance();
      \u0275\u0275conditional(ctx.isFormEditable() ? 8 : -1);
      \u0275\u0275advance(2);
      \u0275\u0275textInterpolate1("Configure ", ctx.displayTitle().toLowerCase(), " accessory settings and capabilities.");
      \u0275\u0275advance(2);
      \u0275\u0275conditional(ctx.hasData() ? 12 : 13);
    }
  }, dependencies: [GridComponent, AccordionModule, Accordion, AccordionPanel, AccordionHeader, AccordionContent], styles: ["\n\n.accessory-container[_ngcontent-%COMP%]   .no-accessory-message[_ngcontent-%COMP%] {\n  text-align: center;\n  padding: 2rem;\n}\n.accessory-container[_ngcontent-%COMP%]   .no-accessory-message[_ngcontent-%COMP%]   i[_ngcontent-%COMP%] {\n  font-size: 2rem;\n  margin-bottom: 0.5rem;\n  display: block;\n}\n/*# sourceMappingURL=device-types-accessories-section.component.css.map */"] });
};
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(DeviceTypesAccessoriesSectionComponent, [{
    type: Component,
    args: [{ selector: "app-device-types-accessories-section", imports: [GridComponent, AccordionModule], template: `<div class="pt-2 card">
  <div class="flex justify-start items-center p-2 mb-4">
    <span
      class="pi pi-cog !text-[2.5rem]"
      [attr.aria-label]="displayTitle() + ' icon'"
    ></span>

    <div class="flex-1 pl-6">
      <div class="flex justify-between items-center">
        <h2 class="m-0 text-xl font-semibold">{{ displayTitle() }}</h2>
        @if (!isFormEditable() && !createMode()) {
          <div class="icon-light">
            <button
              class="pi pi-pen-to-square action hover !text-2xl"
              [attr.aria-label]="'Edit ' + displayTitle().toLowerCase()"
              (click)="onEdit()"
              (keydown.enter)="onEdit()"
              (keydown.space)="onEdit(); $event.preventDefault()"
            ></button>
          </div>
        }
        @if (isFormEditable()) {
          <div class="flex gap-2">
            <button
              class="px-4 py-2"
              [attr.aria-label]="
                'Cancel editing ' + displayTitle().toLowerCase()
              "
              (click)="onCancel()"
              (keydown.enter)="onCancel()"
              (keydown.space)="onCancel(); $event.preventDefault()"
            >
              Cancel
            </button>
            <button
              class="px-4 py-2"
              [attr.aria-label]="'Save ' + displayTitle().toLowerCase()"
              (click)="onSave()"
              (keydown.enter)="onSave()"
              (keydown.space)="onSave(); $event.preventDefault()"
            >
              Save
            </button>
          </div>
        }
      </div>
      <span
        >Configure {{ displayTitle().toLowerCase() }} accessory settings and
        capabilities.</span
      >
    </div>
  </div>

  <div class="ml-16 accessory-container">
    @if (hasData()) {
      @if (hasIoCapabilities() || hasSettingsDefinition() || hasFeatures()) {
        <p-accordion
          [multiple]="isFormEditable()"
          [value]="isFormEditable() ? getActiveValues() : []"
        >
          @if (hasIoCapabilities()) {
            <p-accordion-panel value="io-capabilities">
              <p-accordion-header>IO Capabilities</p-accordion-header>
              <p-accordion-content>
                <app-grid
                  [data]="ioCapabilitiesGridData()"
                  [columns]="ioCapabilitiesColumns"
                  [showGridLines]="false"
                  [hideHeader]="false"
                  tableStyleClass="info-display !w-auto"
                ></app-grid>
              </p-accordion-content>
            </p-accordion-panel>
          }

          @if (hasSettingsDefinition()) {
            <p-accordion-panel value="settings-definition">
              <p-accordion-header>Settings Definition</p-accordion-header>
              <p-accordion-content class="ml-8">
                @for (field of settingsFieldsGridData(); track field.fieldKey) {
                  <div class="mb-4 field-section">
                    <h4 class="mb-2 font-medium field-title">
                      {{ field.fieldTitle }}
                    </h4>
                    <app-grid
                      [data]="field.gridData"
                      [columns]="fieldGridColumns"
                      [showGridLines]="false"
                      [hideHeader]="false"
                      tableStyleClass="info-display !w-auto field-grid"
                    ></app-grid>
                  </div>
                }
              </p-accordion-content>
            </p-accordion-panel>
          }

          @if (hasFeatures()) {
            <p-accordion-panel value="features">
              <p-accordion-header>Features</p-accordion-header>
              <p-accordion-content>
                <app-grid
                  [data]="featuresGridData()"
                  [columns]="featuresColumns"
                  [showGridLines]="false"
                  [hideHeader]="false"
                  tableStyleClass="info-display !w-auto"
                ></app-grid>
              </p-accordion-content>
            </p-accordion-panel>
          }
        </p-accordion>
      } @else {
        <div class="flex gap-2 items-center no-accessory-content-message">
          <i class="pi pi-info-circle"></i>
          <p>
            No IO capabilities, features, or settings have been configured for
            this {{ displayTitle() }} accessory.
          </p>
        </div>
      }
    } @else {
      <div class="no-accessory-message">
        <i class="pi pi-info-circle"></i>
        <p>No data available for {{ displayTitle().toLowerCase() }}.</p>
      </div>
    }
  </div>
</div>
`, styles: ["/* src/app/features/administration/components/device-types/device-types-accessories-section/device-types-accessories-section.component.scss */\n.accessory-container .no-accessory-message {\n  text-align: center;\n  padding: 2rem;\n}\n.accessory-container .no-accessory-message i {\n  font-size: 2rem;\n  margin-bottom: 0.5rem;\n  display: block;\n}\n/*# sourceMappingURL=device-types-accessories-section.component.css.map */\n"] }]
  }], () => [], { actionsTemplate: [{
    type: ViewChild,
    args: ["actionsTemplate", { static: true }]
  }], entity: [{ type: Input, args: [{ isSignal: true, alias: "entity", required: false }] }], accessoryKey: [{ type: Input, args: [{ isSignal: true, alias: "accessoryKey", required: true }] }], displayTitle: [{ type: Input, args: [{ isSignal: true, alias: "displayTitle", required: true }] }] });
})();
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && \u0275setClassDebugInfo(DeviceTypesAccessoriesSectionComponent, { className: "DeviceTypesAccessoriesSectionComponent", filePath: "src/app/features/administration/components/device-types/device-types-accessories-section/device-types-accessories-section.component.ts", lineNumber: 27 });
})();

// src/app/features/administration/components/device-types/device-types-features-section/device-types-features-section.component.ts
function DeviceTypesFeaturesSectionComponent_Conditional_7_Template(rf, ctx) {
  if (rf & 1) {
    const _r1 = \u0275\u0275getCurrentView();
    \u0275\u0275elementStart(0, "div", 6)(1, "span", 9);
    \u0275\u0275listener("click", function DeviceTypesFeaturesSectionComponent_Conditional_7_Template_span_click_1_listener() {
      \u0275\u0275restoreView(_r1);
      const ctx_r1 = \u0275\u0275nextContext();
      return \u0275\u0275resetView(ctx_r1.onEdit());
    })("keydown.enter", function DeviceTypesFeaturesSectionComponent_Conditional_7_Template_span_keydown_enter_1_listener() {
      \u0275\u0275restoreView(_r1);
      const ctx_r1 = \u0275\u0275nextContext();
      return \u0275\u0275resetView(ctx_r1.onEdit());
    });
    \u0275\u0275elementEnd()();
  }
  if (rf & 2) {
    \u0275\u0275advance();
    \u0275\u0275attribute("aria-label", "Edit features");
  }
}
function DeviceTypesFeaturesSectionComponent_Conditional_10_Template(rf, ctx) {
  if (rf & 1) {
    const _r3 = \u0275\u0275getCurrentView();
    \u0275\u0275elementStart(0, "app-dynamic-form", 10);
    \u0275\u0275listener("formSubmit", function DeviceTypesFeaturesSectionComponent_Conditional_10_Template_app_dynamic_form_formSubmit_0_listener($event) {
      \u0275\u0275restoreView(_r3);
      const ctx_r1 = \u0275\u0275nextContext();
      return \u0275\u0275resetView(ctx_r1.onSubmit($event));
    })("formValidityChange", function DeviceTypesFeaturesSectionComponent_Conditional_10_Template_app_dynamic_form_formValidityChange_0_listener($event) {
      \u0275\u0275restoreView(_r3);
      const ctx_r1 = \u0275\u0275nextContext();
      return \u0275\u0275resetView(ctx_r1.onFormValidityChange($event));
    })("formValueChange", function DeviceTypesFeaturesSectionComponent_Conditional_10_Template_app_dynamic_form_formValueChange_0_listener($event) {
      \u0275\u0275restoreView(_r3);
      const ctx_r1 = \u0275\u0275nextContext();
      return \u0275\u0275resetView(ctx_r1.onFormValueChange($event));
    });
    \u0275\u0275elementEnd();
  }
  if (rf & 2) {
    const ctx_r1 = \u0275\u0275nextContext();
    \u0275\u0275property("fields", ctx_r1.formFields)("actions", ctx_r1.actions)("hideActions", ctx_r1.createMode());
  }
}
function DeviceTypesFeaturesSectionComponent_Conditional_11_Template(rf, ctx) {
  if (rf & 1) {
    \u0275\u0275element(0, "app-grid", 8);
  }
  if (rf & 2) {
    const ctx_r1 = \u0275\u0275nextContext();
    \u0275\u0275property("data", ctx_r1.featuresDisplay())("columns", ctx_r1.columns)("showGridLines", false)("hideHeader", true);
  }
}
var DeviceTypesFeaturesSectionComponent = class _DeviceTypesFeaturesSectionComponent extends EntitySectionBaseComponent {
  operationRegistry = inject(EntityOperationRegistryService);
  deviceTypesService = inject(DeviceTypesService);
  toastService = inject(ToastService);
  constructor() {
    super();
    this.columns = [
      { field: "key", header: "Property" },
      { field: "value", header: "Value" }
    ];
    effect(() => {
      const entity = this.entity();
      if (entity && !this.createMode()) {
        this.updateFormFields();
      }
    });
  }
  entity = input(null, ...ngDevMode ? [{ debugName: "entity" }] : []);
  // Common device features
  commonFeatures = [
    { key: "remote_output_control", label: "Remote Output Control" },
    { key: "voice_calls", label: "Voice Calls" },
    { key: "firmware_updates", label: "Firmware Updates" },
    { key: "camera_support", label: "Camera Support" },
    { key: "geofencing", label: "Geofencing" },
    { key: "driver_identification", label: "Driver Identification" },
    { key: "harsh_driving_detection", label: "Harsh Driving Detection" },
    { key: "maintenance_alerts", label: "Maintenance Alerts" },
    { key: "fuel_monitoring", label: "Fuel Monitoring" },
    { key: "temperature_monitoring", label: "Temperature Monitoring" }
  ];
  // Display features as a simple grid with comma-separated list
  featuresDisplay = computed(() => {
    const deviceType = this.entity();
    const features = deviceType?.features;
    if (isNullOrUndefined(features)) {
      return [{ key: "Features", value: "No features configured" }];
    }
    const featureNames = Object.keys(features).map((key) => this.getFeatureDisplayName(key)).join(", ");
    return [
      {
        key: "Features",
        value: featureNames || "No features configured"
      }
    ];
  }, ...ngDevMode ? [{ debugName: "featuresDisplay" }] : []);
  getFeatureDisplayName(key) {
    const commonFeature = this.commonFeatures.find((f) => f.key === key);
    return commonFeature ? commonFeature.label : key.replaceAll("_", " ").replaceAll(/\b\w/g, (l) => l.toUpperCase());
  }
  // Get currently enabled features as list for modal
  currentFeaturesList = computed(() => {
    const features = this.entity()?.features || {};
    return Object.keys(features).map((key) => ({
      key,
      label: this.getFeatureDisplayName(key),
      enabled: true
    }));
  }, ...ngDevMode ? [{ debugName: "currentFeaturesList" }] : []);
  updateFormFields() {
    this.formFields = [
      createModalListField("features", "Features", this.currentFeaturesList(), {
        modalConfig: {
          modalComponent: ModalListFormComponent,
          modalTitle: () => "Add Feature",
          modalFields: (item) => this.getModalFields(item),
          listItemFormatter: (item) => ({
            id: item.key,
            title: item.label,
            display: item.key,
            icon: "pi-cog"
          }),
          defaultItemProvider: () => ({ key: "", label: "", enabled: true }),
          onSubmit: async (item) => {
            if (!item.key?.trim()) {
              return false;
            }
            const existing = this.currentFeaturesList().find((existing2) => existing2.key === item.key);
            if (existing) {
              alert("This feature is already enabled.");
              return false;
            }
            await this.saveFeature(item);
            return true;
          },
          onDeleteItem: async (item) => {
            const confirmed = confirm(`Are you sure you want to disable "${item.label}"?`);
            if (confirmed) {
              await this.deleteFeature(item.key);
              return true;
            }
            return false;
          }
        }
      })
    ];
  }
  getModalFields(item) {
    return [
      createTextField("key", "Feature Key", item?.key ?? "", {
        required: true,
        placeholder: "Enter feature key...",
        validations: [
          {
            name: "required",
            validator: Validators.required,
            message: "Feature key is required"
          }
        ]
      }),
      createTextField("label", "Feature Label", item?.label ?? "", {
        required: true,
        placeholder: "Enter feature display name...",
        validations: [
          {
            name: "required",
            validator: Validators.required,
            message: "Feature label is required"
          }
        ]
      })
    ];
  }
  async saveFeature(featureItem) {
    const entity = this.entity();
    if (!entity)
      return;
    const updatedFeatures = __spreadProps(__spreadValues({}, entity.features), {
      [featureItem.key]: { settings: {} }
    });
    const updatedEntity = {
      features: updatedFeatures
    };
    const updateMethod = this.getUpdateMethod();
    if (entity.id && isDefined(updateMethod)) {
      try {
        await firstValueFrom(updateMethod(entity.id, updatedEntity));
      } catch (error) {
        this.toastService.showError("Save Failed", "Failed to save feature. Please try again.");
        throw error;
      }
    }
  }
  async deleteFeature(featureKey) {
    const entity = this.entity();
    if (!entity?.features)
      return;
    const updatedFeatures = __spreadValues({}, entity.features);
    delete updatedFeatures[featureKey];
    const updatedEntity = __spreadProps(__spreadValues({}, entity), {
      features: updatedFeatures
    });
    const updateMethod = this.getUpdateMethod();
    if (updatedEntity.id && isDefined(updateMethod)) {
      try {
        await firstValueFrom(updateMethod(entity.id, updatedEntity));
      } catch (error) {
        console.error("Failed to delete feature:", error);
        this.toastService.showError("Delete Failed", "Failed to delete feature. Please try again.");
        throw error;
      }
    }
  }
  getUpdateMethod() {
    return this.operationRegistry.getOperation("device-types", "update") ?? ((id, data) => this.deviceTypesService.updateDeviceType(id, data).pipe(tap((response) => {
      this.entityChange.emit(response);
      this.broadcastService.broadcast("entity-updated", {
        entityType: "device-types",
        operation: "update",
        entityId: response.id,
        data: response
      });
    })));
  }
  ngOnInit() {
    this.updateFormFields();
  }
  static \u0275fac = function DeviceTypesFeaturesSectionComponent_Factory(__ngFactoryType__) {
    return new (__ngFactoryType__ || _DeviceTypesFeaturesSectionComponent)();
  };
  static \u0275cmp = /* @__PURE__ */ \u0275\u0275defineComponent({ type: _DeviceTypesFeaturesSectionComponent, selectors: [["app-device-types-features-section"]], inputs: { entity: [1, "entity"] }, features: [\u0275\u0275InheritDefinitionFeature], decls: 12, vars: 4, consts: [[1, "pt-2", "card"], [1, "flex", "justify-start", "items-center", "p-2", "mb-4"], [1, "pi", "pi-cog", "!text-[2.5rem]"], [1, "flex-1", "pl-6"], [1, "flex", "justify-between", "items-center"], [1, "m-0", "text-xl", "font-semibold"], [1, "icon-light"], [3, "fields", "actions", "hideActions"], ["tableStyleClass", "info-display !w-auto", 3, "data", "columns", "showGridLines", "hideHeader"], [1, "pi", "pi-pen-to-square", "action", "hover", "!text-2xl", 3, "click", "keydown.enter"], [3, "formSubmit", "formValidityChange", "formValueChange", "fields", "actions", "hideActions"]], template: function DeviceTypesFeaturesSectionComponent_Template(rf, ctx) {
    if (rf & 1) {
      \u0275\u0275elementStart(0, "div", 0)(1, "div", 1);
      \u0275\u0275element(2, "span", 2);
      \u0275\u0275elementStart(3, "div", 3)(4, "div", 4)(5, "h2", 5);
      \u0275\u0275text(6, "Features");
      \u0275\u0275elementEnd();
      \u0275\u0275conditionalCreate(7, DeviceTypesFeaturesSectionComponent_Conditional_7_Template, 2, 1, "div", 6);
      \u0275\u0275elementEnd();
      \u0275\u0275elementStart(8, "span");
      \u0275\u0275text(9, "Enable/disable device features like remote control, voice calls, camera support, etc.");
      \u0275\u0275elementEnd()()();
      \u0275\u0275conditionalCreate(10, DeviceTypesFeaturesSectionComponent_Conditional_10_Template, 1, 3, "app-dynamic-form", 7);
      \u0275\u0275conditionalCreate(11, DeviceTypesFeaturesSectionComponent_Conditional_11_Template, 1, 4, "app-grid", 8);
      \u0275\u0275elementEnd();
    }
    if (rf & 2) {
      \u0275\u0275advance(2);
      \u0275\u0275attribute("aria-label", "Features icon");
      \u0275\u0275advance(5);
      \u0275\u0275conditional(!ctx.isFormEditable() && !ctx.createMode() ? 7 : -1);
      \u0275\u0275advance(3);
      \u0275\u0275conditional(ctx.isFormEditable() || ctx.createMode() && ctx.formFields.length ? 10 : -1);
      \u0275\u0275advance();
      \u0275\u0275conditional(!ctx.isFormEditable() && !ctx.createMode() ? 11 : -1);
    }
  }, dependencies: [DynamicFormComponent, GridComponent], encapsulation: 2 });
};
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(DeviceTypesFeaturesSectionComponent, [{
    type: Component,
    args: [{ selector: "app-device-types-features-section", imports: [DynamicFormComponent, GridComponent], template: `<div class="pt-2 card">
  <div class="flex justify-start items-center p-2 mb-4">
    <span
      class="pi pi-cog !text-[2.5rem]"
      [attr.aria-label]="'Features icon'"
    ></span>

    <div class="flex-1 pl-6">
      <div class="flex justify-between items-center">
        <h2 class="m-0 text-xl font-semibold">Features</h2>
        @if (!isFormEditable() && !createMode()) {
          <div class="icon-light">
            <span
              class="pi pi-pen-to-square action hover !text-2xl"
              [attr.aria-label]="'Edit features'"
              (click)="onEdit()"
              (keydown.enter)="onEdit()"
            ></span>
          </div>
        }
      </div>
      <span
        >Enable/disable device features like remote control, voice calls, camera
        support, etc.</span
      >
    </div>
  </div>

  @if (isFormEditable() || (createMode() && formFields.length)) {
    <app-dynamic-form
      [fields]="formFields"
      [actions]="actions"
      [hideActions]="createMode()"
      (formSubmit)="onSubmit($event)"
      (formValidityChange)="onFormValidityChange($event)"
      (formValueChange)="onFormValueChange($event)"
    >
    </app-dynamic-form>
  }

  @if (!isFormEditable() && !createMode()) {
    <app-grid
      [data]="featuresDisplay()"
      [columns]="columns"
      [showGridLines]="false"
      [hideHeader]="true"
      tableStyleClass="info-display !w-auto"
    ></app-grid>
  }
</div>
` }]
  }], () => [], { entity: [{ type: Input, args: [{ isSignal: true, alias: "entity", required: false }] }] });
})();
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && \u0275setClassDebugInfo(DeviceTypesFeaturesSectionComponent, { className: "DeviceTypesFeaturesSectionComponent", filePath: "src/app/features/administration/components/device-types/device-types-features-section/device-types-features-section.component.ts", lineNumber: 38 });
})();

// src/app/features/administration/components/device-types/device-types-settings-definition-section/device-types-settings-definition-section.component.ts
function DeviceTypesSettingsDefinitionSectionComponent_Conditional_7_Template(rf, ctx) {
  if (rf & 1) {
    const _r1 = \u0275\u0275getCurrentView();
    \u0275\u0275elementStart(0, "div", 6)(1, "button", 9);
    \u0275\u0275listener("click", function DeviceTypesSettingsDefinitionSectionComponent_Conditional_7_Template_button_click_1_listener() {
      \u0275\u0275restoreView(_r1);
      const ctx_r1 = \u0275\u0275nextContext();
      return \u0275\u0275resetView(ctx_r1.onEdit());
    })("keydown.enter", function DeviceTypesSettingsDefinitionSectionComponent_Conditional_7_Template_button_keydown_enter_1_listener() {
      \u0275\u0275restoreView(_r1);
      const ctx_r1 = \u0275\u0275nextContext();
      return \u0275\u0275resetView(ctx_r1.onEdit());
    })("keydown.space", function DeviceTypesSettingsDefinitionSectionComponent_Conditional_7_Template_button_keydown_space_1_listener($event) {
      \u0275\u0275restoreView(_r1);
      const ctx_r1 = \u0275\u0275nextContext();
      ctx_r1.onEdit();
      return \u0275\u0275resetView($event.preventDefault());
    });
    \u0275\u0275elementEnd()();
  }
  if (rf & 2) {
    const ctx_r1 = \u0275\u0275nextContext();
    \u0275\u0275advance();
    \u0275\u0275attribute("aria-label", "Edit " + ctx_r1.displayTitle().toLowerCase());
  }
}
function DeviceTypesSettingsDefinitionSectionComponent_Conditional_10_Template(rf, ctx) {
  if (rf & 1) {
    const _r3 = \u0275\u0275getCurrentView();
    \u0275\u0275elementStart(0, "app-dynamic-form", 10);
    \u0275\u0275listener("formValueChange", function DeviceTypesSettingsDefinitionSectionComponent_Conditional_10_Template_app_dynamic_form_formValueChange_0_listener($event) {
      \u0275\u0275restoreView(_r3);
      const ctx_r1 = \u0275\u0275nextContext();
      return \u0275\u0275resetView(ctx_r1.onFormValueChange($event));
    })("formValidityChange", function DeviceTypesSettingsDefinitionSectionComponent_Conditional_10_Template_app_dynamic_form_formValidityChange_0_listener($event) {
      \u0275\u0275restoreView(_r3);
      const ctx_r1 = \u0275\u0275nextContext();
      return \u0275\u0275resetView(ctx_r1.onFormValidityChange($event));
    });
    \u0275\u0275elementEnd();
  }
  if (rf & 2) {
    const ctx_r1 = \u0275\u0275nextContext();
    \u0275\u0275property("fields", ctx_r1.formFields)("actions", ctx_r1.actions);
  }
}
function DeviceTypesSettingsDefinitionSectionComponent_Conditional_11_Conditional_1_Template(rf, ctx) {
  if (rf & 1) {
    \u0275\u0275element(0, "app-grid", 11);
  }
  if (rf & 2) {
    const ctx_r1 = \u0275\u0275nextContext(2);
    \u0275\u0275property("data", ctx_r1.fieldDetails())("columns", ctx_r1.columns)("showGridLines", false)("hideHeader", true);
  }
}
function DeviceTypesSettingsDefinitionSectionComponent_Conditional_11_Conditional_2_Template(rf, ctx) {
  if (rf & 1) {
    \u0275\u0275elementStart(0, "div", 12);
    \u0275\u0275element(1, "i", 13);
    \u0275\u0275elementStart(2, "p");
    \u0275\u0275text(3);
    \u0275\u0275elementEnd()();
  }
  if (rf & 2) {
    const ctx_r1 = \u0275\u0275nextContext(2);
    \u0275\u0275advance(3);
    \u0275\u0275textInterpolate1("No data available for ", ctx_r1.displayTitle().toLowerCase(), ".");
  }
}
function DeviceTypesSettingsDefinitionSectionComponent_Conditional_11_Template(rf, ctx) {
  if (rf & 1) {
    \u0275\u0275elementStart(0, "div", 8);
    \u0275\u0275conditionalCreate(1, DeviceTypesSettingsDefinitionSectionComponent_Conditional_11_Conditional_1_Template, 1, 4, "app-grid", 11)(2, DeviceTypesSettingsDefinitionSectionComponent_Conditional_11_Conditional_2_Template, 4, 1, "div", 12);
    \u0275\u0275elementEnd();
  }
  if (rf & 2) {
    const ctx_r1 = \u0275\u0275nextContext();
    \u0275\u0275advance();
    \u0275\u0275conditional(ctx_r1.hasData() ? 1 : 2);
  }
}
var DeviceTypesSettingsDefinitionSectionComponent = class _DeviceTypesSettingsDefinitionSectionComponent extends EntitySectionBaseComponent {
  constructor() {
    super();
    this.columns = [
      { field: "key", header: "Property" },
      { field: "value", header: "Value" }
    ];
    effect(() => {
      const entity = this.entity();
      if (entity && !this.createMode()) {
        this.updateFormFields();
      }
    });
  }
  operationRegistry = inject(EntityOperationRegistryService);
  deviceTypesService = inject(DeviceTypesService);
  toastService = inject(ToastService);
  entity = input(null, ...ngDevMode ? [{ debugName: "entity" }] : []);
  // Configuration inputs
  fieldId = input.required(...ngDevMode ? [{ debugName: "fieldId" }] : []);
  // The field id (e.g., 'loggingTime')
  displayTitle = input.required(...ngDevMode ? [{ debugName: "displayTitle" }] : []);
  // Display name (e.g., 'Logging Time')
  // Get the parsed settings definition
  parsedDefinition = computed(() => {
    const entity = this.entity();
    const definition = entity?.settingsDefinition;
    if (isNullOrUndefined(definition) || definition.trim() === "")
      return null;
    try {
      const parsed = JSON.parse(definition);
      return parsed;
    } catch {
      return null;
    }
  }, ...ngDevMode ? [{ debugName: "parsedDefinition" }] : []);
  // Get the specific field data
  fieldData = computed(() => {
    const parsed = this.parsedDefinition();
    const fieldId = this.fieldId();
    if (isNullOrUndefined(parsed) || !fieldId)
      return null;
    if (isDefined(parsed["groups"]) && Array.isArray(parsed["groups"])) {
      for (const group of parsed["groups"]) {
        if (isDefined(group["fields"]) && Array.isArray(group["fields"])) {
          const field = group["fields"].find((f) => f["id"] === fieldId);
          if (isDefined(field))
            return field;
        }
      }
    }
    return null;
  }, ...ngDevMode ? [{ debugName: "fieldData" }] : []);
  // Display field details in a simple grid format
  fieldDetails = computed(() => {
    const field = this.fieldData();
    if (isNullOrUndefined(field))
      return [];
    const details = [
      { key: "ID", value: field["id"] ?? "Unknown" },
      { key: "Title", value: field["title"] ?? "Untitled Field" },
      { key: "Type", value: field["type"] ?? "text" }
    ];
    if (isDefined(field["unit"]) && typeof field["unit"] === "string" && field["unit"].trim() !== "") {
      details.push({ key: "Unit", value: field["unit"] });
    }
    if (isDefined(field["min"])) {
      details.push({ key: "Minimum Value", value: field["min"].toString() });
    }
    if (isDefined(field["max"])) {
      details.push({ key: "Maximum Value", value: field["max"].toString() });
    }
    if (isDefined(field["width"])) {
      details.push({ key: "Width", value: field["width"].toString() });
    }
    if (isDefined(field["defaultValue"])) {
      details.push({
        key: "Default Value",
        value: field["defaultValue"].toString()
      });
    }
    if (isDefined(field["placeholder"]) && typeof field["placeholder"] === "string" && field["placeholder"].trim() !== "") {
      details.push({ key: "Placeholder", value: field["placeholder"] });
    }
    if (isDefined(field["description"]) && typeof field["description"] === "string" && field["description"].trim() !== "") {
      details.push({ key: "Description", value: field["description"] });
    }
    if (isDefined(field["required"])) {
      details.push({
        key: "Required",
        value: field["required"] === true ? "Yes" : "No"
      });
    }
    return details;
  }, ...ngDevMode ? [{ debugName: "fieldDetails" }] : []);
  hasData = computed(() => {
    return this.fieldData() !== null;
  }, ...ngDevMode ? [{ debugName: "hasData" }] : []);
  updateFormFields() {
    const field = this.fieldData();
    if (isNullOrUndefined(field)) {
      this.formFields = [];
      return;
    }
    this.formFields = [];
    if (isDefined(field["title"])) {
      this.formFields.push(createTextField("title", "Title", field["title"]?.toString() ?? ""));
    }
    if (isDefined(field["type"])) {
      this.formFields.push(createTextField("type", "Type", field["type"]?.toString() ?? ""));
    }
    if (isDefined(field["unit"])) {
      this.formFields.push(createTextField("unit", "Unit", field["unit"]?.toString() ?? ""));
    }
    if (isDefined(field["min"])) {
      this.formFields.push(createTextField("min", "Minimum Value", field["min"]?.toString() ?? ""));
    }
    if (isDefined(field["max"])) {
      this.formFields.push(createTextField("max", "Maximum Value", field["max"]?.toString() ?? ""));
    }
    if (isDefined(field["width"])) {
      this.formFields.push(createTextField("width", "Width", field["width"]?.toString() ?? ""));
    }
    if (isDefined(field["defaultValue"])) {
      this.formFields.push(createTextField("defaultValue", "Default Value", field["defaultValue"]?.toString() ?? ""));
    }
    if (isDefined(field["placeholder"])) {
      this.formFields.push(createTextField("placeholder", "Placeholder", field["placeholder"]?.toString() ?? ""));
    }
    if (isDefined(field["description"])) {
      this.formFields.push(createTextField("description", "Description", field["description"]?.toString() ?? ""));
    }
    if (isDefined(field["required"])) {
      this.formFields.push(createToggleSwitchField("required", "Required", field["required"] === true));
    }
  }
  onSubmit(formGroup) {
    const entity = this.entity();
    const fieldId = this.fieldId();
    const formData = formGroup.value;
    if (!this.isValidSubmission(entity, fieldId)) {
      return;
    }
    const parsedDefinition = this.parseSettingsDefinition(entity);
    if (!parsedDefinition) {
      return;
    }
    const updated = this.updateFieldInDefinition(parsedDefinition, fieldId, formData);
    if (updated) {
      this.saveUpdatedDefinition(entity.id, parsedDefinition);
    }
  }
  isValidSubmission(entity, fieldId) {
    return !(isNullOrUndefined(entity?.id) || isNullOrUndefined(fieldId) || fieldId.trim() === "");
  }
  parseSettingsDefinition(entity) {
    try {
      const settingsDefinition = entity.settingsDefinition;
      if (isNullOrUndefined(settingsDefinition) || settingsDefinition.trim() === "") {
        return {};
      }
      return JSON.parse(settingsDefinition);
    } catch {
      console.error("Failed to parse settings definition");
      return null;
    }
  }
  updateFieldInDefinition(parsedDefinition, fieldId, formData) {
    if (!this.hasValidGroups(parsedDefinition)) {
      return false;
    }
    const groups = parsedDefinition["groups"];
    for (const group of groups) {
      if (this.updateFieldInGroup(group, fieldId, formData)) {
        return true;
      }
    }
    return false;
  }
  hasValidGroups(parsedDefinition) {
    return isDefined(parsedDefinition["groups"]) && Array.isArray(parsedDefinition["groups"]);
  }
  updateFieldInGroup(group, fieldId, formData) {
    if (!this.isValidGroup(group)) {
      return false;
    }
    const fields = group["fields"];
    const fieldIndex = fields.findIndex((f) => f["id"] === fieldId);
    if (fieldIndex === -1) {
      return false;
    }
    const updatedField = this.applyFormDataToField(fields[fieldIndex], formData);
    fields[fieldIndex] = updatedField;
    return true;
  }
  isValidGroup(group) {
    return isDefined(group) && typeof group === "object" && isDefined(group["fields"]) && Array.isArray(group["fields"]);
  }
  applyFormDataToField(originalField, formData) {
    const updatedField = __spreadValues({}, originalField);
    for (const [key, value] of Object.entries(formData)) {
      if (key !== "id") {
        updatedField[key] = this.convertFormValue(key, value);
      }
    }
    return updatedField;
  }
  convertFormValue(key, value) {
    if (this.isNumericField(key)) {
      const numValue = Number(value);
      return Number.isNaN(numValue) ? value : numValue;
    }
    if (key === "required") {
      return value === "true" || value === true;
    }
    return value;
  }
  isNumericField(key) {
    return ["min", "max", "width", "defaultValue"].includes(key);
  }
  saveUpdatedDefinition(entityId, parsedDefinition) {
    const updateData = {
      settingsDefinition: JSON.stringify(parsedDefinition)
    };
    this.getUpdateMethod()(entityId, updateData).subscribe({
      next: (response) => {
        this.isFormEditable.set(false);
        this.entityChange.emit(response);
      },
      error: (error) => {
        console.error("Failed to update settings field:", error);
        this.toastService.showError("Update Failed", "Failed to update settings field");
      }
    });
  }
  getUpdateMethod() {
    return this.operationRegistry.getOperation("device-types", "update") ?? ((id, data) => this.deviceTypesService.updateDeviceType(id, data).pipe(tap((response) => {
      this.entityChange.emit(response);
      this.broadcastService.broadcast("entity-updated", {
        entityType: "device-types",
        operation: "update",
        entityId: response.id,
        data: response
      });
    })));
  }
  ngOnInit() {
    this.updateFormFields();
  }
  static \u0275fac = function DeviceTypesSettingsDefinitionSectionComponent_Factory(__ngFactoryType__) {
    return new (__ngFactoryType__ || _DeviceTypesSettingsDefinitionSectionComponent)();
  };
  static \u0275cmp = /* @__PURE__ */ \u0275\u0275defineComponent({ type: _DeviceTypesSettingsDefinitionSectionComponent, selectors: [["app-device-types-settings-definition-section"]], inputs: { entity: [1, "entity"], fieldId: [1, "fieldId"], displayTitle: [1, "displayTitle"] }, features: [\u0275\u0275InheritDefinitionFeature], decls: 12, vars: 6, consts: [[1, "pt-2", "card"], [1, "flex", "justify-start", "items-center", "p-2", "mb-4"], [1, "pi", "pi-cog", "!text-[2.5rem]"], [1, "flex-1", "pl-6"], [1, "flex", "justify-between", "items-center"], [1, "m-0", "text-xl", "font-semibold"], [1, "icon-light"], [3, "fields", "actions"], [1, "settings-field-container"], ["tabIndex", "0", 1, "pi", "pi-pen-to-square", "action", "hover", "!text-2xl", 3, "click", "keydown.enter", "keydown.space"], [3, "formValueChange", "formValidityChange", "fields", "actions"], ["tableStyleClass", "info-display !w-auto", 3, "data", "columns", "showGridLines", "hideHeader"], [1, "no-field-message"], [1, "pi", "pi-info-circle"]], template: function DeviceTypesSettingsDefinitionSectionComponent_Template(rf, ctx) {
    if (rf & 1) {
      \u0275\u0275elementStart(0, "div", 0)(1, "div", 1);
      \u0275\u0275element(2, "span", 2);
      \u0275\u0275elementStart(3, "div", 3)(4, "div", 4)(5, "h2", 5);
      \u0275\u0275text(6);
      \u0275\u0275elementEnd();
      \u0275\u0275conditionalCreate(7, DeviceTypesSettingsDefinitionSectionComponent_Conditional_7_Template, 2, 1, "div", 6);
      \u0275\u0275elementEnd();
      \u0275\u0275elementStart(8, "span");
      \u0275\u0275text(9);
      \u0275\u0275elementEnd()()();
      \u0275\u0275conditionalCreate(10, DeviceTypesSettingsDefinitionSectionComponent_Conditional_10_Template, 1, 2, "app-dynamic-form", 7);
      \u0275\u0275conditionalCreate(11, DeviceTypesSettingsDefinitionSectionComponent_Conditional_11_Template, 3, 1, "div", 8);
      \u0275\u0275elementEnd();
    }
    if (rf & 2) {
      \u0275\u0275advance(2);
      \u0275\u0275attribute("aria-label", ctx.displayTitle() + " icon");
      \u0275\u0275advance(4);
      \u0275\u0275textInterpolate(ctx.displayTitle());
      \u0275\u0275advance();
      \u0275\u0275conditional(!ctx.isFormEditable() && !ctx.createMode() ? 7 : -1);
      \u0275\u0275advance(2);
      \u0275\u0275textInterpolate1("Configure ", ctx.displayTitle().toLowerCase(), " field settings and properties.");
      \u0275\u0275advance();
      \u0275\u0275conditional(ctx.isFormEditable() ? 10 : -1);
      \u0275\u0275advance();
      \u0275\u0275conditional(!ctx.isFormEditable() && !ctx.createMode() ? 11 : -1);
    }
  }, dependencies: [GridComponent, DynamicFormComponent], encapsulation: 2 });
};
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(DeviceTypesSettingsDefinitionSectionComponent, [{
    type: Component,
    args: [{ selector: "app-device-types-settings-definition-section", imports: [GridComponent, DynamicFormComponent], template: `<div class="pt-2 card">
  <div class="flex justify-start items-center p-2 mb-4">
    <span
      class="pi pi-cog !text-[2.5rem]"
      [attr.aria-label]="displayTitle() + ' icon'"
    ></span>

    <div class="flex-1 pl-6">
      <div class="flex justify-between items-center">
        <h2 class="m-0 text-xl font-semibold">{{ displayTitle() }}</h2>
        @if (!isFormEditable() && !createMode()) {
          <div class="icon-light">
            <button
              class="pi pi-pen-to-square action hover !text-2xl"
              [attr.aria-label]="'Edit ' + displayTitle().toLowerCase()"
              (click)="onEdit()"
              (keydown.enter)="onEdit()"
              (keydown.space)="onEdit(); $event.preventDefault()"
              tabIndex="0"
            ></button>
          </div>
        }
      </div>
      <span
        >Configure {{ displayTitle().toLowerCase() }} field settings and
        properties.</span
      >
    </div>
  </div>

  @if (isFormEditable()) {
    <!-- Dynamic Form for edit mode only -->
    <app-dynamic-form
      [fields]="formFields"
      [actions]="actions"
      (formValueChange)="onFormValueChange($event)"
      (formValidityChange)="onFormValidityChange($event)"
    >
    </app-dynamic-form>
  }

  @if (!isFormEditable() && !createMode()) {
    <div class="settings-field-container">
      @if (hasData()) {
        <app-grid
          [data]="fieldDetails()"
          [columns]="columns"
          [showGridLines]="false"
          [hideHeader]="true"
          tableStyleClass="info-display !w-auto"
        ></app-grid>
      } @else {
        <div class="no-field-message">
          <i class="pi pi-info-circle"></i>
          <p>No data available for {{ displayTitle().toLowerCase() }}.</p>
        </div>
      }
    </div>
  }
</div>
` }]
  }], () => [], { entity: [{ type: Input, args: [{ isSignal: true, alias: "entity", required: false }] }], fieldId: [{ type: Input, args: [{ isSignal: true, alias: "fieldId", required: true }] }], displayTitle: [{ type: Input, args: [{ isSignal: true, alias: "displayTitle", required: true }] }] });
})();
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && \u0275setClassDebugInfo(DeviceTypesSettingsDefinitionSectionComponent, { className: "DeviceTypesSettingsDefinitionSectionComponent", filePath: "src/app/features/administration/components/device-types/device-types-settings-definition-section/device-types-settings-definition-section.component.ts", lineNumber: 28 });
})();

// src/app/features/administration/factories/device-types-section-config.factory.ts
var DeviceTypesSectionConfigFactory = class _DeviceTypesSectionConfigFactory {
  /**
   * Create sections for device type information
   * @param deviceType The device type object to display in the section
   * @returns An array of AdminDetailSection objects representing the device type information sections
   */
  createDeviceTypeInformationSections(deviceType) {
    return [
      {
        id: "device-type-details",
        title: "Device Type Details",
        component: DeviceTypesInformationSectionComponent,
        componentInputs: {
          entity: deviceType
        },
        category: "information",
        order: 10
      }
    ];
  }
  /**
   * Create sections for device type features
   * @param deviceType The device type object to display in the section
   * @returns An array of AdminDetailSection objects representing the device type features sections
   */
  createDeviceTypeFeaturesSection(deviceType) {
    if (!deviceType?.features) {
      return [];
    }
    return [
      {
        id: "device-type-features",
        title: "Features",
        component: FeatureSectionComponent,
        componentInputs: {
          entity: deviceType,
          entityType: "device-types",
          features: Object.entries(deviceType.features).map(([key, feature]) => __spreadProps(__spreadValues({}, feature), {
            key
          }))
        },
        category: "features",
        order: 10
      }
    ];
  }
  /**
   * Create sections for device type changes
   * @param deviceType The device type object to display in the section
   * @returns An array of AdminDetailSection objects representing the device type changes sections
   */
  createChangesSection(deviceType) {
    return [
      {
        id: "device-type-changes",
        title: "Changes",
        component: FeedSectionComponent,
        componentInputs: {
          entity: deviceType
        },
        category: "feed",
        order: 10
      }
    ];
  }
  createIOCapabilitiesSections(deviceType) {
    const ioTypes = [
      {
        key: "digital_input",
        title: "Digital Inputs",
        description: "Configure digital input capabilities for this device type.",
        icon: "pi pi-arrow-left",
        iconType: "primeng"
      },
      {
        key: "digital_output",
        title: "Digital Outputs",
        description: "Configure digital output capabilities for this device type.",
        icon: "pi pi-arrow-right",
        iconType: "primeng"
      },
      {
        key: "analog_input",
        title: "Analog Inputs",
        description: "Configure analog input capabilities for this device type.",
        icon: "gauge-simple-high-solid",
        iconType: "svg"
      },
      {
        key: "temperature_input",
        title: "Temperature Sensors",
        description: "Configure temperature sensor capabilities for this device type.",
        icon: "temperature-half-solid",
        iconType: "svg"
      },
      {
        key: "can_input",
        title: "CAN Inputs",
        description: "Configure CAN input capabilities for this device type.",
        icon: "oil-can-solid",
        iconType: "svg"
      },
      {
        key: "counter_input",
        title: "Counter Inputs",
        description: "Configure counter input capabilities for this device type.",
        icon: "pi pi-clock",
        iconType: "primeng"
      },
      {
        key: "camera_input",
        title: "Camera Inputs",
        description: "Configure camera input capabilities for this device type.",
        icon: "pi pi-camera",
        iconType: "primeng"
      },
      {
        key: "value_input",
        title: "Value Inputs",
        description: "Configure value input capabilities for this device type.",
        icon: "pi pi-list-check",
        iconType: "primeng"
      }
    ];
    const sections = [];
    for (const [index, ioType] of ioTypes.entries()) {
      const ioData = deviceType?.ioCapabilities?.[ioType.key];
      if (isDefined(ioData) && Object.keys(ioData).length > 0) {
        sections.push({
          id: `io-${ioType.key}`,
          title: ioType.title,
          component: DeviceTypesIoSectionComponent,
          componentInputs: {
            entity: deviceType,
            entityType: "device-types",
            ioTypeKey: ioType.key,
            displayTitle: ioType.title,
            description: ioType.description,
            icon: ioType.icon,
            iconType: ioType.iconType
          },
          category: "io",
          order: (index + 1) * 10 + 20
        });
      }
    }
    return sections;
  }
  createAccessoriesSection(deviceType) {
    if (!deviceType?.accessories) {
      return [];
    }
    const sections = [];
    const accessories = Object.entries(deviceType.accessories);
    for (const [index, [key, accessory]] of accessories.entries()) {
      const displayTitle = isDefined(accessory.name) && accessory.name.trim() !== "" ? accessory.name : key.replaceAll("_", " ").replaceAll(/\b\w/g, (l) => l.toUpperCase());
      sections.push({
        id: `accessory-${key}`,
        title: displayTitle,
        component: DeviceTypesAccessoriesSectionComponent,
        componentInputs: {
          entity: deviceType,
          entityType: "device-types",
          accessoryKey: key,
          displayTitle
        },
        category: "accessories",
        order: (index + 1) * 10 + 20
        // Start at 30, increment by 10
      });
    }
    return sections;
  }
  createFeaturesSection(deviceType) {
    return [
      {
        id: "device-type-features",
        title: "Features",
        component: DeviceTypesFeaturesSectionComponent,
        componentInputs: {
          entity: deviceType,
          entityType: "device-types"
        },
        category: "features",
        order: 25
        // After accessories (20)
      }
    ];
  }
  createSettingsFieldsSections(deviceType) {
    const parsedDefinition = this.parseSettingsDefinition(deviceType);
    if (!parsedDefinition) {
      return [];
    }
    const groups = this.extractGroupsFromDefinition(parsedDefinition);
    return this.buildSectionsFromGroups(groups, deviceType);
  }
  parseSettingsDefinition(deviceType) {
    if (isNullOrUndefined(deviceType?.settingsDefinition) || deviceType.settingsDefinition.trim() === "") {
      return null;
    }
    try {
      return JSON.parse(deviceType.settingsDefinition);
    } catch {
      return null;
    }
  }
  extractGroupsFromDefinition(parsedDefinition) {
    if (!isDefined(parsedDefinition["groups"]) || !Array.isArray(parsedDefinition["groups"])) {
      return [];
    }
    return parsedDefinition["groups"];
  }
  buildSectionsFromGroups(groups, deviceType) {
    const sections = [];
    for (const group of groups) {
      const groupSections = this.buildSectionsFromGroup(group, deviceType, sections.length);
      sections.push(...groupSections);
    }
    return sections;
  }
  buildSectionsFromGroup(group, deviceType, currentSectionCount) {
    if (!this.isValidGroup(group)) {
      return [];
    }
    const fields = group["fields"];
    return fields.map((field, index) => this.createFieldSection(field, deviceType, currentSectionCount + index));
  }
  isValidGroup(group) {
    return isDefined(group) && typeof group === "object" && isDefined(group["fields"]) && Array.isArray(group["fields"]);
  }
  createFieldSection(field, deviceType, index) {
    const fieldId = this.extractFieldId(field);
    const fieldTitle = this.extractFieldTitle(field);
    const displayTitle = fieldTitle || fieldId || "Unknown Field";
    return {
      id: `settings-field-${fieldId}`,
      title: displayTitle,
      component: DeviceTypesSettingsDefinitionSectionComponent,
      componentInputs: {
        entity: deviceType,
        entityType: "device-types",
        fieldId,
        displayTitle
      },
      category: "settings",
      order: (index + 1) * 10 + 20
    };
  }
  extractFieldId(field) {
    return isDefined(field["id"]) && typeof field["id"] === "string" ? field["id"] : "unknown";
  }
  extractFieldTitle(field) {
    return isDefined(field["title"]) && typeof field["title"] === "string" ? field["title"] : this.extractFieldId(field);
  }
  /**
   * Create all device type sections in one call
   * @param deviceType The device type object to display in the sections
   * @returns An array of AdminDetailSection objects representing all device type sections
   */
  createAllDeviceTypeSections(deviceType) {
    return [
      ...this.createDeviceTypeInformationSections(deviceType),
      ...this.createSettingsFieldsSections(deviceType),
      ...this.createIOCapabilitiesSections(deviceType),
      ...this.createAccessoriesSection(deviceType),
      ...this.createFeaturesSection(deviceType),
      ...this.createChangesSection(deviceType)
    ];
  }
  static \u0275fac = function DeviceTypesSectionConfigFactory_Factory(__ngFactoryType__) {
    return new (__ngFactoryType__ || _DeviceTypesSectionConfigFactory)();
  };
  static \u0275prov = /* @__PURE__ */ \u0275\u0275defineInjectable({ token: _DeviceTypesSectionConfigFactory, factory: _DeviceTypesSectionConfigFactory.\u0275fac, providedIn: "root" });
};
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(DeviceTypesSectionConfigFactory, [{
    type: Injectable,
    args: [{ providedIn: "root" }]
  }], null, null);
})();

export {
  AssetDetailsSectionComponent,
  CacheInvalidationService,
  AssetCategoriesSectionComponent,
  InfoSectionComponent,
  SimCardDetailsSectionComponent,
  AssetTagDetailsSectionComponent,
  DeviceConfigProfileDetailsSectionComponent,
  DeviceDetailsSectionComponent,
  GeofenceDetailsSectionComponent,
  DeviceProviderDetailsSectionComponent,
  DeviceProviderParametersSectionComponent,
  SmsGatewayProviderDetailsSectionComponent,
  SmsGatewayProviderParametersSectionComponent,
  IoTypeDetailsSectionComponent,
  OverspeedProfileDetailsSectionComponent,
  AlertIconStorageService,
  AlertDetailsSectionComponent,
  UserRoleDetailsSectionComponent,
  UserDetailsSectionComponent,
  UserRolesSectionComponent,
  AssetsDataAdapter,
  GeofencesDataAdapter,
  AlertsDataAdapter,
  DevicesDataAdapter,
  AssetTagsDataAdapter,
  DeviceProvidersDataAdapter,
  EmailProvidersDataAdapter,
  SimCardsDataAdapter,
  SmsGatewayProvidersDataAdapter,
  IoTypesDataAdapter,
  DeviceConfigProfilesDataAdapter,
  VendorsDataAdapter,
  AssetRatingProfilesDataAdapter,
  AssetStateProfilesDataAdapter,
  OverspeedProfilesDataAdapter,
  RoadProfilesDataAdapter,
  GeoLockProfilesDataAdapter,
  CustomFieldsDataAdapter,
  CostCentresDataAdapter,
  AssetGroupsDataAdapter,
  AssetCategoriesDataAdapter,
  GeofenceGroupsDataAdapter,
  UsersDataAdapter,
  UserRolesDataAdapter,
  ThemesDataAdapter,
  CompanyGroupsDataAdapter,
  ClientsDataAdapter,
  DistributorsDataAdapter,
  DeviceTypesDataAdapter,
  CustomFieldDetailsSectionComponent,
  EmailProviderDetailsSectionComponent,
  EmailProviderParametersSectionComponent,
  ThemeDetailsSectionComponent,
  CostCentreDetailsSectionComponent,
  GeofenceGroupDetailsSectionComponent,
  AssetGroupDetailsSectionComponent,
  AssetCategoryDetailsSectionComponent,
  AssetStateProfileDetailsSectionComponent,
  CompanyGroupDetailsSectionComponent,
  RoadProfileDetailsSectionComponent,
  GeoLockProfileDetailsSectionComponent,
  EntityDetailsStateService,
  AssetRatingProfileDetailsSectionComponent,
  DetailsComponentFactory,
  GenericDetailsContainerComponent
};
//# sourceMappingURL=chunk-BH5ELTBQ.js.map
