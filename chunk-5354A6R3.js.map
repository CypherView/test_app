{"version":3,"sources":["src/app/features/administration/components/system-health/azure-functions/azure-functions.component.ts","src/app/features/administration/components/system-health/azure-functions/azure-functions.component.html","src/app/features/administration/components/system-health/data-storage/data-storage.component.ts","src/app/features/administration/components/system-health/data-storage/data-storage.component.html","src/app/features/administration/components/system-health/errors-and-alerts/errors-and-alerts.component.ts","src/app/features/administration/components/system-health/errors-and-alerts/errors-and-alerts.component.html","src/app/features/administration/components/system-health/event-flow/event-flow.component.ts","src/app/features/administration/components/system-health/event-flow/event-flow.component.html","node_modules/date-fns/addDays.js","node_modules/date-fns/addMonths.js","node_modules/date-fns/addMilliseconds.js","node_modules/date-fns/addHours.js","node_modules/date-fns/addMinutes.js","node_modules/date-fns/addQuarters.js","node_modules/date-fns/addSeconds.js","node_modules/date-fns/addWeeks.js","node_modules/date-fns/addYears.js","node_modules/date-fns/differenceInCalendarYears.js","node_modules/date-fns/differenceInDays.js","node_modules/date-fns/differenceInHours.js","node_modules/date-fns/differenceInMinutes.js","node_modules/date-fns/differenceInQuarters.js","node_modules/date-fns/differenceInWeeks.js","node_modules/date-fns/differenceInYears.js","node_modules/date-fns/startOfQuarter.js","node_modules/date-fns/startOfMonth.js","node_modules/date-fns/endOfYear.js","node_modules/date-fns/endOfHour.js","node_modules/date-fns/endOfWeek.js","node_modules/date-fns/endOfMinute.js","node_modules/date-fns/endOfQuarter.js","node_modules/date-fns/endOfSecond.js","node_modules/date-fns/getISODay.js","node_modules/date-fns/transpose.js","node_modules/date-fns/parse/_lib/Setter.js","node_modules/date-fns/parse/_lib/Parser.js","node_modules/date-fns/parse/_lib/parsers/EraParser.js","node_modules/date-fns/parse/_lib/constants.js","node_modules/date-fns/parse/_lib/utils.js","node_modules/date-fns/parse/_lib/parsers/YearParser.js","node_modules/date-fns/parse/_lib/parsers/LocalWeekYearParser.js","node_modules/date-fns/parse/_lib/parsers/ISOWeekYearParser.js","node_modules/date-fns/parse/_lib/parsers/ExtendedYearParser.js","node_modules/date-fns/parse/_lib/parsers/QuarterParser.js","node_modules/date-fns/parse/_lib/parsers/StandAloneQuarterParser.js","node_modules/date-fns/parse/_lib/parsers/MonthParser.js","node_modules/date-fns/parse/_lib/parsers/StandAloneMonthParser.js","node_modules/date-fns/setWeek.js","node_modules/date-fns/parse/_lib/parsers/LocalWeekParser.js","node_modules/date-fns/setISOWeek.js","node_modules/date-fns/parse/_lib/parsers/ISOWeekParser.js","node_modules/date-fns/parse/_lib/parsers/DateParser.js","node_modules/date-fns/parse/_lib/parsers/DayOfYearParser.js","node_modules/date-fns/setDay.js","node_modules/date-fns/parse/_lib/parsers/DayParser.js","node_modules/date-fns/parse/_lib/parsers/LocalDayParser.js","node_modules/date-fns/parse/_lib/parsers/StandAloneLocalDayParser.js","node_modules/date-fns/setISODay.js","node_modules/date-fns/parse/_lib/parsers/ISODayParser.js","node_modules/date-fns/parse/_lib/parsers/AMPMParser.js","node_modules/date-fns/parse/_lib/parsers/AMPMMidnightParser.js","node_modules/date-fns/parse/_lib/parsers/DayPeriodParser.js","node_modules/date-fns/parse/_lib/parsers/Hour1to12Parser.js","node_modules/date-fns/parse/_lib/parsers/Hour0to23Parser.js","node_modules/date-fns/parse/_lib/parsers/Hour0To11Parser.js","node_modules/date-fns/parse/_lib/parsers/Hour1To24Parser.js","node_modules/date-fns/parse/_lib/parsers/MinuteParser.js","node_modules/date-fns/parse/_lib/parsers/SecondParser.js","node_modules/date-fns/parse/_lib/parsers/FractionOfSecondParser.js","node_modules/date-fns/parse/_lib/parsers/ISOTimezoneWithZParser.js","node_modules/date-fns/parse/_lib/parsers/ISOTimezoneParser.js","node_modules/date-fns/parse/_lib/parsers/TimestampSecondsParser.js","node_modules/date-fns/parse/_lib/parsers/TimestampMillisecondsParser.js","node_modules/date-fns/parse/_lib/parsers.js","node_modules/date-fns/parse.js","node_modules/date-fns/startOfHour.js","node_modules/date-fns/startOfMinute.js","node_modules/date-fns/startOfSecond.js","node_modules/date-fns/parseISO.js","src/app/features/administration/components/system-health/system-health-container/system-health-container.component.ts","src/app/features/administration/components/system-health/system-health-container/system-health-container.component.html","node_modules/primeng/fesm2022/primeng-tag.mjs","node_modules/chartjs-adapter-date-fns/dist/chartjs-adapter-date-fns.esm.js","src/app/features/administration/services/system-health-broadcast.service.ts","src/app/features/administration/services/mock-system-health.service.ts","src/app/features/administration/services/system-health.service.ts","src/app/features/administration/components/system-health/system-overview/system-overview.component.ts","src/app/features/administration/components/system-health/system-overview/system-overview.component.html","src/app/features/administration/components/system-health/system-health-routing.module.ts"],"sourcesContent":["import { Component } from '@angular/core';\n\n@Component({\n  selector: 'app-azure-functions',\n  imports: [],\n  templateUrl: './azure-functions.component.html',\n  styleUrl: './azure-functions.component.scss',\n})\nexport class AzureFunctionsComponent {}\n","<p>azure-functions works!</p>\n","import { Component } from '@angular/core';\n\n@Component({\n  selector: 'app-data-storage',\n  imports: [],\n  templateUrl: './data-storage.component.html',\n  styleUrl: './data-storage.component.scss',\n})\nexport class DataStorageComponent {}\n","<p>data-storage works!</p>\n","import { Component } from '@angular/core';\n\n@Component({\n  selector: 'app-errors-and-alerts',\n  imports: [],\n  templateUrl: './errors-and-alerts.component.html',\n  styleUrl: './errors-and-alerts.component.scss',\n})\nexport class ErrorsAndAlertsComponent {}\n","<p>errors-and-alerts works!</p>\n","import { Component } from '@angular/core';\n\n@Component({\n  selector: 'app-event-flow',\n  imports: [],\n  templateUrl: './event-flow.component.html',\n  styleUrl: './event-flow.component.scss',\n})\nexport class EventFlowComponent {}\n","<p>event-flow works!</p>\n","import { constructFrom } from \"./constructFrom.js\";\nimport { toDate } from \"./toDate.js\";\n\n/**\n * The {@link addDays} function options.\n */\n\n/**\n * @name addDays\n * @category Day Helpers\n * @summary Add the specified number of days to the given date.\n *\n * @description\n * Add the specified number of days to the given date.\n *\n * @typeParam DateType - The `Date` type, the function operates on. Gets inferred from passed arguments. Allows to use extensions like [`UTCDate`](https://github.com/date-fns/utc).\n * @typeParam ResultDate - The result `Date` type, it is the type returned from the context function if it is passed, or inferred from the arguments.\n *\n * @param date - The date to be changed\n * @param amount - The amount of days to be added.\n * @param options - An object with options\n *\n * @returns The new date with the days added\n *\n * @example\n * // Add 10 days to 1 September 2014:\n * const result = addDays(new Date(2014, 8, 1), 10)\n * //=> Thu Sep 11 2014 00:00:00\n */\nexport function addDays(date, amount, options) {\n  const _date = toDate(date, options?.in);\n  if (isNaN(amount)) return constructFrom(options?.in || date, NaN);\n\n  // If 0 days, no-op to avoid changing times in the hour before end of DST\n  if (!amount) return _date;\n\n  _date.setDate(_date.getDate() + amount);\n  return _date;\n}\n\n// Fallback for modularized imports:\nexport default addDays;\n","import { constructFrom } from \"./constructFrom.js\";\nimport { toDate } from \"./toDate.js\";\n\n/**\n * The {@link addMonths} function options.\n */\n\n/**\n * @name addMonths\n * @category Month Helpers\n * @summary Add the specified number of months to the given date.\n *\n * @description\n * Add the specified number of months to the given date.\n *\n * @typeParam DateType - The `Date` type, the function operates on. Gets inferred from passed arguments. Allows to use extensions like [`UTCDate`](https://github.com/date-fns/utc).\n * @typeParam ResultDate - The result `Date` type, it is the type returned from the context function if it is passed, or inferred from the arguments.\n *\n * @param date - The date to be changed\n * @param amount - The amount of months to be added.\n * @param options - The options object\n *\n * @returns The new date with the months added\n *\n * @example\n * // Add 5 months to 1 September 2014:\n * const result = addMonths(new Date(2014, 8, 1), 5)\n * //=> Sun Feb 01 2015 00:00:00\n *\n * // Add one month to 30 January 2023:\n * const result = addMonths(new Date(2023, 0, 30), 1)\n * //=> Tue Feb 28 2023 00:00:00\n */\nexport function addMonths(date, amount, options) {\n  const _date = toDate(date, options?.in);\n  if (isNaN(amount)) return constructFrom(options?.in || date, NaN);\n  if (!amount) {\n    // If 0 months, no-op to avoid changing times in the hour before end of DST\n    return _date;\n  }\n  const dayOfMonth = _date.getDate();\n\n  // The JS Date object supports date math by accepting out-of-bounds values for\n  // month, day, etc. For example, new Date(2020, 0, 0) returns 31 Dec 2019 and\n  // new Date(2020, 13, 1) returns 1 Feb 2021.  This is *almost* the behavior we\n  // want except that dates will wrap around the end of a month, meaning that\n  // new Date(2020, 13, 31) will return 3 Mar 2021 not 28 Feb 2021 as desired. So\n  // we'll default to the end of the desired month by adding 1 to the desired\n  // month and using a date of 0 to back up one day to the end of the desired\n  // month.\n  const endOfDesiredMonth = constructFrom(options?.in || date, _date.getTime());\n  endOfDesiredMonth.setMonth(_date.getMonth() + amount + 1, 0);\n  const daysInMonth = endOfDesiredMonth.getDate();\n  if (dayOfMonth >= daysInMonth) {\n    // If we're already at the end of the month, then this is the correct date\n    // and we're done.\n    return endOfDesiredMonth;\n  } else {\n    // Otherwise, we now know that setting the original day-of-month value won't\n    // cause an overflow, so set the desired day-of-month. Note that we can't\n    // just set the date of `endOfDesiredMonth` because that object may have had\n    // its time changed in the unusual case where where a DST transition was on\n    // the last day of the month and its local time was in the hour skipped or\n    // repeated next to a DST transition.  So we use `date` instead which is\n    // guaranteed to still have the original time.\n    _date.setFullYear(\n      endOfDesiredMonth.getFullYear(),\n      endOfDesiredMonth.getMonth(),\n      dayOfMonth,\n    );\n    return _date;\n  }\n}\n\n// Fallback for modularized imports:\nexport default addMonths;\n","import { constructFrom } from \"./constructFrom.js\";\nimport { toDate } from \"./toDate.js\";\n\n/**\n * The {@link addMilliseconds} function options.\n */\n\n/**\n * @name addMilliseconds\n * @category Millisecond Helpers\n * @summary Add the specified number of milliseconds to the given date.\n *\n * @description\n * Add the specified number of milliseconds to the given date.\n *\n * @typeParam DateType - The `Date` type, the function operates on. Gets inferred from passed arguments. Allows to use extensions like [`UTCDate`](https://github.com/date-fns/utc).\n * @typeParam ResultDate - The result `Date` type, it is the type returned from the context function if it is passed, or inferred from the arguments.\n *\n * @param date - The date to be changed\n * @param amount - The amount of milliseconds to be added.\n * @param options - The options object\n *\n * @returns The new date with the milliseconds added\n *\n * @example\n * // Add 750 milliseconds to 10 July 2014 12:45:30.000:\n * const result = addMilliseconds(new Date(2014, 6, 10, 12, 45, 30, 0), 750)\n * //=> Thu Jul 10 2014 12:45:30.750\n */\nexport function addMilliseconds(date, amount, options) {\n  return constructFrom(options?.in || date, +toDate(date) + amount);\n}\n\n// Fallback for modularized imports:\nexport default addMilliseconds;\n","import { addMilliseconds } from \"./addMilliseconds.js\";\nimport { millisecondsInHour } from \"./constants.js\";\n\n/**\n * The {@link addHours} function options.\n */\n\n/**\n * @name addHours\n * @category Hour Helpers\n * @summary Add the specified number of hours to the given date.\n *\n * @description\n * Add the specified number of hours to the given date.\n *\n * @typeParam DateType - The `Date` type, the function operates on. Gets inferred from passed arguments. Allows to use extensions like [`UTCDate`](https://github.com/date-fns/utc).\n * @typeParam ResultDate - The result `Date` type, it is the type returned from the context function if it is passed, or inferred from the arguments.\n *\n * @param date - The date to be changed\n * @param amount - The amount of hours to be added\n * @param options - An object with options\n *\n * @returns The new date with the hours added\n *\n * @example\n * // Add 2 hours to 10 July 2014 23:00:00:\n * const result = addHours(new Date(2014, 6, 10, 23, 0), 2)\n * //=> Fri Jul 11 2014 01:00:00\n */\nexport function addHours(date, amount, options) {\n  return addMilliseconds(date, amount * millisecondsInHour, options);\n}\n\n// Fallback for modularized imports:\nexport default addHours;\n","import { millisecondsInMinute } from \"./constants.js\";\nimport { toDate } from \"./toDate.js\";\n\n/**\n * The {@link addMinutes} function options.\n */\n\n/**\n * @name addMinutes\n * @category Minute Helpers\n * @summary Add the specified number of minutes to the given date.\n *\n * @description\n * Add the specified number of minutes to the given date.\n *\n * @typeParam DateType - The `Date` type, the function operates on. Gets inferred from passed arguments. Allows to use extensions like [`UTCDate`](https://github.com/date-fns/utc).\n * @typeParam ResultDate - The result `Date` type, it is the type returned from the context function if it is passed, or inferred from the arguments.\n *\n * @param date - The date to be changed\n * @param amount - The amount of minutes to be added.\n * @param options - An object with options\n *\n * @returns The new date with the minutes added\n *\n * @example\n * // Add 30 minutes to 10 July 2014 12:00:00:\n * const result = addMinutes(new Date(2014, 6, 10, 12, 0), 30)\n * //=> Thu Jul 10 2014 12:30:00\n */\nexport function addMinutes(date, amount, options) {\n  const _date = toDate(date, options?.in);\n  _date.setTime(_date.getTime() + amount * millisecondsInMinute);\n  return _date;\n}\n\n// Fallback for modularized imports:\nexport default addMinutes;\n","import { addMonths } from \"./addMonths.js\";\n\n/**\n * The {@link addQuarters} function options.\n */\n\n/**\n * @name addQuarters\n * @category Quarter Helpers\n * @summary Add the specified number of year quarters to the given date.\n *\n * @description\n * Add the specified number of year quarters to the given date.\n *\n * @typeParam DateType - The `Date` type, the function operates on. Gets inferred from passed arguments. Allows to use extensions like [`UTCDate`](https://github.com/date-fns/utc).\n * @typeParam ResultDate - The result `Date` type, it is the type returned from the context function if it is passed, or inferred from the arguments.\n *\n * @param date - The date to be changed\n * @param amount - The amount of quarters to be added.\n * @param options - An object with options\n *\n * @returns The new date with the quarters added\n *\n * @example\n * // Add 1 quarter to 1 September 2014:\n * const result = addQuarters(new Date(2014, 8, 1), 1)\n * //=; Mon Dec 01 2014 00:00:00\n */\nexport function addQuarters(date, amount, options) {\n  return addMonths(date, amount * 3, options);\n}\n\n// Fallback for modularized imports:\nexport default addQuarters;\n","import { addMilliseconds } from \"./addMilliseconds.js\";\n\n/**\n * The {@link addSeconds} function options.\n */\n\n/**\n * @name addSeconds\n * @category Second Helpers\n * @summary Add the specified number of seconds to the given date.\n *\n * @description\n * Add the specified number of seconds to the given date.\n *\n * @typeParam DateType - The `Date` type, the function operates on. Gets inferred from passed arguments. Allows to use extensions like [`UTCDate`](https://github.com/date-fns/utc).\n * @typeParam ResultDate - The result `Date` type, it is the type returned from the context function if it is passed, or inferred from the arguments.\n *\n * @param date - The date to be changed\n * @param amount - The amount of seconds to be added.\n * @param options - An object with options\n *\n * @returns The new date with the seconds added\n *\n * @example\n * // Add 30 seconds to 10 July 2014 12:45:00:\n * const result = addSeconds(new Date(2014, 6, 10, 12, 45, 0), 30)\n * //=> Thu Jul 10 2014 12:45:30\n */\nexport function addSeconds(date, amount, options) {\n  return addMilliseconds(date, amount * 1000, options);\n}\n\n// Fallback for modularized imports:\nexport default addSeconds;\n","import { addDays } from \"./addDays.js\";\n\n/**\n * The {@link addWeeks} function options.\n */\n\n/**\n * @name addWeeks\n * @category Week Helpers\n * @summary Add the specified number of weeks to the given date.\n *\n * @description\n * Add the specified number of weeks to the given date.\n *\n * @typeParam DateType - The `Date` type, the function operates on. Gets inferred from passed arguments. Allows to use extensions like [`UTCDate`](https://github.com/date-fns/utc).\n * @typeParam ResultDate - The result `Date` type, it is the type returned from the context function if it is passed, or inferred from the arguments.\n *\n * @param date - The date to be changed\n * @param amount - The amount of weeks to be added.\n * @param options - An object with options\n *\n * @returns The new date with the weeks added\n *\n * @example\n * // Add 4 weeks to 1 September 2014:\n * const result = addWeeks(new Date(2014, 8, 1), 4)\n * //=> Mon Sep 29 2014 00:00:00\n */\nexport function addWeeks(date, amount, options) {\n  return addDays(date, amount * 7, options);\n}\n\n// Fallback for modularized imports:\nexport default addWeeks;\n","import { addMonths } from \"./addMonths.js\";\n\n/**\n * The {@link addYears} function options.\n */\n\n/**\n * @name addYears\n * @category Year Helpers\n * @summary Add the specified number of years to the given date.\n *\n * @description\n * Add the specified number of years to the given date.\n *\n * @typeParam DateType - The `Date` type, the function operates on. Gets inferred from passed arguments. Allows to use extensions like [`UTCDate`](https://github.com/date-fns/utc).\n * @typeParam ResultDate - The result `Date` type.\n *\n * @param date - The date to be changed\n * @param amount - The amount of years to be added.\n * @param options - The options\n *\n * @returns The new date with the years added\n *\n * @example\n * // Add 5 years to 1 September 2014:\n * const result = addYears(new Date(2014, 8, 1), 5)\n * //=> Sun Sep 01 2019 00:00:00\n */\nexport function addYears(date, amount, options) {\n  return addMonths(date, amount * 12, options);\n}\n\n// Fallback for modularized imports:\nexport default addYears;\n","import { normalizeDates } from \"./_lib/normalizeDates.js\";\n\n/**\n * The {@link differenceInCalendarYears} function options.\n */\n\n/**\n * @name differenceInCalendarYears\n * @category Year Helpers\n * @summary Get the number of calendar years between the given dates.\n *\n * @description\n * Get the number of calendar years between the given dates.\n *\n * @param laterDate - The later date\n * @param earlierDate - The earlier date\n * @param options - An object with options\n\n * @returns The number of calendar years\n *\n * @example\n * // How many calendar years are between 31 December 2013 and 11 February 2015?\n * const result = differenceInCalendarYears(\n *   new Date(2015, 1, 11),\n *   new Date(2013, 11, 31)\n * );\n * //=> 2\n */\nexport function differenceInCalendarYears(laterDate, earlierDate, options) {\n  const [laterDate_, earlierDate_] = normalizeDates(\n    options?.in,\n    laterDate,\n    earlierDate,\n  );\n  return laterDate_.getFullYear() - earlierDate_.getFullYear();\n}\n\n// Fallback for modularized imports:\nexport default differenceInCalendarYears;\n","import { normalizeDates } from \"./_lib/normalizeDates.js\";\nimport { differenceInCalendarDays } from \"./differenceInCalendarDays.js\";\n\n/**\n * The {@link differenceInDays} function options.\n */\n\n/**\n * @name differenceInDays\n * @category Day Helpers\n * @summary Get the number of full days between the given dates.\n *\n * @description\n * Get the number of full day periods between two dates. Fractional days are\n * truncated towards zero.\n *\n * One \"full day\" is the distance between a local time in one day to the same\n * local time on the next or previous day. A full day can sometimes be less than\n * or more than 24 hours if a daylight savings change happens between two dates.\n *\n * To ignore DST and only measure exact 24-hour periods, use this instead:\n * `Math.trunc(differenceInHours(dateLeft, dateRight)/24)|0`.\n *\n * @param laterDate - The later date\n * @param earlierDate - The earlier date\n * @param options - An object with options\n *\n * @returns The number of full days according to the local timezone\n *\n * @example\n * // How many full days are between\n * // 2 July 2011 23:00:00 and 2 July 2012 00:00:00?\n * const result = differenceInDays(\n *   new Date(2012, 6, 2, 0, 0),\n *   new Date(2011, 6, 2, 23, 0)\n * )\n * //=> 365\n *\n * @example\n * // How many full days are between\n * // 2 July 2011 23:59:00 and 3 July 2011 00:01:00?\n * const result = differenceInDays(\n *   new Date(2011, 6, 3, 0, 1),\n *   new Date(2011, 6, 2, 23, 59)\n * )\n * //=> 0\n *\n * @example\n * // How many full days are between\n * // 1 March 2020 0:00 and 1 June 2020 0:00 ?\n * // Note: because local time is used, the\n * // result will always be 92 days, even in\n * // time zones where DST starts and the\n * // period has only 92*24-1 hours.\n * const result = differenceInDays(\n *   new Date(2020, 5, 1),\n *   new Date(2020, 2, 1)\n * )\n * //=> 92\n */\nexport function differenceInDays(laterDate, earlierDate, options) {\n  const [laterDate_, earlierDate_] = normalizeDates(\n    options?.in,\n    laterDate,\n    earlierDate,\n  );\n\n  const sign = compareLocalAsc(laterDate_, earlierDate_);\n  const difference = Math.abs(\n    differenceInCalendarDays(laterDate_, earlierDate_),\n  );\n\n  laterDate_.setDate(laterDate_.getDate() - sign * difference);\n\n  // Math.abs(diff in full days - diff in calendar days) === 1 if last calendar day is not full\n  // If so, result must be decreased by 1 in absolute value\n  const isLastDayNotFull = Number(\n    compareLocalAsc(laterDate_, earlierDate_) === -sign,\n  );\n\n  const result = sign * (difference - isLastDayNotFull);\n  // Prevent negative zero\n  return result === 0 ? 0 : result;\n}\n\n// Like `compareAsc` but uses local time not UTC, which is needed\n// for accurate equality comparisons of UTC timestamps that end up\n// having the same representation in local time, e.g. one hour before\n// DST ends vs. the instant that DST ends.\nfunction compareLocalAsc(laterDate, earlierDate) {\n  const diff =\n    laterDate.getFullYear() - earlierDate.getFullYear() ||\n    laterDate.getMonth() - earlierDate.getMonth() ||\n    laterDate.getDate() - earlierDate.getDate() ||\n    laterDate.getHours() - earlierDate.getHours() ||\n    laterDate.getMinutes() - earlierDate.getMinutes() ||\n    laterDate.getSeconds() - earlierDate.getSeconds() ||\n    laterDate.getMilliseconds() - earlierDate.getMilliseconds();\n\n  if (diff < 0) return -1;\n  if (diff > 0) return 1;\n\n  // Return 0 if diff is 0; return NaN if diff is NaN\n  return diff;\n}\n\n// Fallback for modularized imports:\nexport default differenceInDays;\n","import { getRoundingMethod } from \"./_lib/getRoundingMethod.js\";\nimport { normalizeDates } from \"./_lib/normalizeDates.js\";\nimport { millisecondsInHour } from \"./constants.js\";\n\n/**\n * The {@link differenceInHours} function options.\n */\n\n/**\n * @name differenceInHours\n * @category Hour Helpers\n * @summary Get the number of hours between the given dates.\n *\n * @description\n * Get the number of hours between the given dates.\n *\n * @param laterDate - The later date\n * @param earlierDate - The earlier date\n * @param options - An object with options.\n *\n * @returns The number of hours\n *\n * @example\n * // How many hours are between 2 July 2014 06:50:00 and 2 July 2014 19:00:00?\n * const result = differenceInHours(\n *   new Date(2014, 6, 2, 19, 0),\n *   new Date(2014, 6, 2, 6, 50)\n * )\n * //=> 12\n */\nexport function differenceInHours(laterDate, earlierDate, options) {\n  const [laterDate_, earlierDate_] = normalizeDates(\n    options?.in,\n    laterDate,\n    earlierDate,\n  );\n  const diff = (+laterDate_ - +earlierDate_) / millisecondsInHour;\n  return getRoundingMethod(options?.roundingMethod)(diff);\n}\n\n// Fallback for modularized imports:\nexport default differenceInHours;\n","import { getRoundingMethod } from \"./_lib/getRoundingMethod.js\";\nimport { millisecondsInMinute } from \"./constants.js\";\nimport { differenceInMilliseconds } from \"./differenceInMilliseconds.js\";\n\n/**\n * The {@link differenceInMinutes} function options.\n */\n\n/**\n * @name differenceInMinutes\n * @category Minute Helpers\n * @summary Get the number of minutes between the given dates.\n *\n * @description\n * Get the signed number of full (rounded towards 0) minutes between the given dates.\n *\n * @param dateLeft - The later date\n * @param dateRight - The earlier date\n * @param options - An object with options.\n *\n * @returns The number of minutes\n *\n * @example\n * // How many minutes are between 2 July 2014 12:07:59 and 2 July 2014 12:20:00?\n * const result = differenceInMinutes(\n *   new Date(2014, 6, 2, 12, 20, 0),\n *   new Date(2014, 6, 2, 12, 7, 59)\n * )\n * //=> 12\n *\n * @example\n * // How many minutes are between 10:01:59 and 10:00:00\n * const result = differenceInMinutes(\n *   new Date(2000, 0, 1, 10, 0, 0),\n *   new Date(2000, 0, 1, 10, 1, 59)\n * )\n * //=> -1\n */\nexport function differenceInMinutes(dateLeft, dateRight, options) {\n  const diff =\n    differenceInMilliseconds(dateLeft, dateRight) / millisecondsInMinute;\n  return getRoundingMethod(options?.roundingMethod)(diff);\n}\n\n// Fallback for modularized imports:\nexport default differenceInMinutes;\n","import { getRoundingMethod } from \"./_lib/getRoundingMethod.js\";\nimport { differenceInMonths } from \"./differenceInMonths.js\";\n\n/**\n * The {@link differenceInQuarters} function options.\n */\n\n/**\n * @name differenceInQuarters\n * @category Quarter Helpers\n * @summary Get the number of quarters between the given dates.\n *\n * @description\n * Get the number of quarters between the given dates.\n *\n * @param laterDate - The later date\n * @param earlierDate - The earlier date\n * @param options - An object with options.\n *\n * @returns The number of full quarters\n *\n * @example\n * // How many full quarters are between 31 December 2013 and 2 July 2014?\n * const result = differenceInQuarters(new Date(2014, 6, 2), new Date(2013, 11, 31))\n * //=> 2\n */\nexport function differenceInQuarters(laterDate, earlierDate, options) {\n  const diff = differenceInMonths(laterDate, earlierDate, options) / 3;\n  return getRoundingMethod(options?.roundingMethod)(diff);\n}\n\n// Fallback for modularized imports:\nexport default differenceInQuarters;\n","import { getRoundingMethod } from \"./_lib/getRoundingMethod.js\";\nimport { differenceInDays } from \"./differenceInDays.js\";\n\n/**\n * The {@link differenceInWeeks} function options.\n */\n\n/**\n * @name differenceInWeeks\n * @category Week Helpers\n * @summary Get the number of full weeks between the given dates.\n *\n * @description\n * Get the number of full weeks between two dates. Fractional weeks are\n * truncated towards zero by default.\n *\n * One \"full week\" is the distance between a local time in one day to the same\n * local time 7 days earlier or later. A full week can sometimes be less than\n * or more than 7*24 hours if a daylight savings change happens between two dates.\n *\n * To ignore DST and only measure exact 7*24-hour periods, use this instead:\n * `Math.trunc(differenceInHours(dateLeft, dateRight)/(7*24))|0`.\n *\n * @param laterDate - The later date\n * @param earlierDate - The earlier date\n * @param options - An object with options\n *\n * @returns The number of full weeks\n *\n * @example\n * // How many full weeks are between 5 July 2014 and 20 July 2014?\n * const result = differenceInWeeks(new Date(2014, 6, 20), new Date(2014, 6, 5))\n * //=> 2\n *\n * @example\n * // How many full weeks are between\n * // 1 March 2020 0:00 and 6 June 2020 0:00 ?\n * // Note: because local time is used, the\n * // result will always be 8 weeks (54 days),\n * // even if DST starts and the period has\n * // only 54*24-1 hours.\n * const result = differenceInWeeks(\n *   new Date(2020, 5, 1),\n *   new Date(2020, 2, 6)\n * )\n * //=> 8\n */\nexport function differenceInWeeks(laterDate, earlierDate, options) {\n  const diff = differenceInDays(laterDate, earlierDate, options) / 7;\n  return getRoundingMethod(options?.roundingMethod)(diff);\n}\n\n// Fallback for modularized imports:\nexport default differenceInWeeks;\n","import { normalizeDates } from \"./_lib/normalizeDates.js\";\nimport { compareAsc } from \"./compareAsc.js\";\nimport { differenceInCalendarYears } from \"./differenceInCalendarYears.js\";\n\n/**\n * The {@link differenceInYears} function options.\n */\n\n/**\n * @name differenceInYears\n * @category Year Helpers\n * @summary Get the number of full years between the given dates.\n *\n * @description\n * Get the number of full years between the given dates.\n *\n * @param laterDate - The later date\n * @param earlierDate - The earlier date\n * @param options - An object with options\n *\n * @returns The number of full years\n *\n * @example\n * // How many full years are between 31 December 2013 and 11 February 2015?\n * const result = differenceInYears(new Date(2015, 1, 11), new Date(2013, 11, 31))\n * //=> 1\n */\nexport function differenceInYears(laterDate, earlierDate, options) {\n  const [laterDate_, earlierDate_] = normalizeDates(\n    options?.in,\n    laterDate,\n    earlierDate,\n  );\n\n  // -1 if the left date is earlier than the right date\n  // 2023-12-31 - 2024-01-01 = -1\n  const sign = compareAsc(laterDate_, earlierDate_);\n\n  // First calculate the difference in calendar years\n  // 2024-01-01 - 2023-12-31 = 1 year\n  const diff = Math.abs(differenceInCalendarYears(laterDate_, earlierDate_));\n\n  // Now we need to calculate if the difference is full. To do that we set\n  // both dates to the same year and check if the both date's month and day\n  // form a full year.\n  laterDate_.setFullYear(1584);\n  earlierDate_.setFullYear(1584);\n\n  // For it to be true, when the later date is indeed later than the earlier date\n  // (2026-02-01 - 2023-12-10 = 3 years), the difference is full if\n  // the normalized later date is also later than the normalized earlier date.\n  // In our example, 1584-02-01 is earlier than 1584-12-10, so the difference\n  // is partial, hence we need to subtract 1 from the difference 3 - 1 = 2.\n  const partial = compareAsc(laterDate_, earlierDate_) === -sign;\n\n  const result = sign * (diff - +partial);\n\n  // Prevent negative zero\n  return result === 0 ? 0 : result;\n}\n\n// Fallback for modularized imports:\nexport default differenceInYears;\n","import { toDate } from \"./toDate.js\";\n\n/**\n * The {@link startOfQuarter} function options.\n */\n\n/**\n * @name startOfQuarter\n * @category Quarter Helpers\n * @summary Return the start of a year quarter for the given date.\n *\n * @description\n * Return the start of a year quarter for the given date.\n * The result will be in the local timezone.\n *\n * @typeParam DateType - The `Date` type, the function operates on. Gets inferred from passed arguments. Allows to use extensions like [`UTCDate`](https://github.com/date-fns/utc).\n * @typeParam ResultDate - The result `Date` type, it is the type returned from the context function if it is passed, or inferred from the arguments.\n *\n * @param date - The original date\n * @param options - The options\n *\n * @returns The start of a quarter\n *\n * @example\n * // The start of a quarter for 2 September 2014 11:55:00:\n * const result = startOfQuarter(new Date(2014, 8, 2, 11, 55, 0))\n * //=> Tue Jul 01 2014 00:00:00\n */\nexport function startOfQuarter(date, options) {\n  const _date = toDate(date, options?.in);\n  const currentMonth = _date.getMonth();\n  const month = currentMonth - (currentMonth % 3);\n  _date.setMonth(month, 1);\n  _date.setHours(0, 0, 0, 0);\n  return _date;\n}\n\n// Fallback for modularized imports:\nexport default startOfQuarter;\n","import { toDate } from \"./toDate.js\";\n\n/**\n * The {@link startOfMonth} function options.\n */\n\n/**\n * @name startOfMonth\n * @category Month Helpers\n * @summary Return the start of a month for the given date.\n *\n * @description\n * Return the start of a month for the given date. The result will be in the local timezone.\n *\n * @typeParam DateType - The `Date` type, the function operates on. Gets inferred from passed arguments.\n * Allows to use extensions like [`UTCDate`](https://github.com/date-fns/utc).\n * @typeParam ResultDate - The result `Date` type, it is the type returned from the context function if it is passed,\n * or inferred from the arguments.\n *\n * @param date - The original date\n * @param options - An object with options\n *\n * @returns The start of a month\n *\n * @example\n * // The start of a month for 2 September 2014 11:55:00:\n * const result = startOfMonth(new Date(2014, 8, 2, 11, 55, 0))\n * //=> Mon Sep 01 2014 00:00:00\n */\nexport function startOfMonth(date, options) {\n  const _date = toDate(date, options?.in);\n  _date.setDate(1);\n  _date.setHours(0, 0, 0, 0);\n  return _date;\n}\n\n// Fallback for modularized imports:\nexport default startOfMonth;\n","import { toDate } from \"./toDate.js\";\n\n/**\n * The {@link endOfYear} function options.\n */\n\n/**\n * @name endOfYear\n * @category Year Helpers\n * @summary Return the end of a year for the given date.\n *\n * @description\n * Return the end of a year for the given date.\n * The result will be in the local timezone.\n *\n * @typeParam DateType - The `Date` type, the function operates on. Gets inferred from passed arguments. Allows to use extensions like [`UTCDate`](https://github.com/date-fns/utc).\n * @typeParam ResultDate - The result `Date` type, it is the type returned from the context function if it is passed, or inferred from the arguments.\n *\n * @param date - The original date\n * @param options - The options\n *\n * @returns The end of a year\n *\n * @example\n * // The end of a year for 2 September 2014 11:55:00:\n * const result = endOfYear(new Date(2014, 8, 2, 11, 55, 0))\n * //=> Wed Dec 31 2014 23:59:59.999\n */\nexport function endOfYear(date, options) {\n  const _date = toDate(date, options?.in);\n  const year = _date.getFullYear();\n  _date.setFullYear(year + 1, 0, 0);\n  _date.setHours(23, 59, 59, 999);\n  return _date;\n}\n\n// Fallback for modularized imports:\nexport default endOfYear;\n","import { toDate } from \"./toDate.js\";\n\n/**\n * The {@link endOfHour} function options.\n */\n\n/**\n * @name endOfHour\n * @category Hour Helpers\n * @summary Return the end of an hour for the given date.\n *\n * @description\n * Return the end of an hour for the given date.\n * The result will be in the local timezone.\n *\n * @typeParam DateType - The `Date` type, the function operates on. Gets inferred from passed arguments. Allows to use extensions like [`UTCDate`](https://github.com/date-fns/utc).\n * @typeParam ResultDate - The result `Date` type, it is the type returned from the context function if it is passed, or inferred from the arguments.\n *\n * @param date - The original date\n * @param options - An object with options\n *\n * @returns The end of an hour\n *\n * @example\n * // The end of an hour for 2 September 2014 11:55:00:\n * const result = endOfHour(new Date(2014, 8, 2, 11, 55))\n * //=> Tue Sep 02 2014 11:59:59.999\n */\nexport function endOfHour(date, options) {\n  const _date = toDate(date, options?.in);\n  _date.setMinutes(59, 59, 999);\n  return _date;\n}\n\n// Fallback for modularized imports:\nexport default endOfHour;\n","import { getDefaultOptions } from \"./_lib/defaultOptions.js\";\nimport { toDate } from \"./toDate.js\";\n\n/**\n * The {@link endOfWeek} function options.\n */\n\n/**\n * @name endOfWeek\n * @category Week Helpers\n * @summary Return the end of a week for the given date.\n *\n * @description\n * Return the end of a week for the given date.\n * The result will be in the local timezone.\n *\n * @typeParam DateType - The `Date` type, the function operates on. Gets inferred from passed arguments. Allows to use extensions like [`UTCDate`](https://github.com/date-fns/utc).\n * @typeParam ResultDate - The result `Date` type, it is the type returned from the context function if it is passed, or inferred from the arguments.\n *\n * @param date - The original date\n * @param options - An object with options\n *\n * @returns The end of a week\n *\n * @example\n * // The end of a week for 2 September 2014 11:55:00:\n * const result = endOfWeek(new Date(2014, 8, 2, 11, 55, 0))\n * //=> Sat Sep 06 2014 23:59:59.999\n *\n * @example\n * // If the week starts on Monday, the end of the week for 2 September 2014 11:55:00:\n * const result = endOfWeek(new Date(2014, 8, 2, 11, 55, 0), { weekStartsOn: 1 })\n * //=> Sun Sep 07 2014 23:59:59.999\n */\nexport function endOfWeek(date, options) {\n  const defaultOptions = getDefaultOptions();\n  const weekStartsOn =\n    options?.weekStartsOn ??\n    options?.locale?.options?.weekStartsOn ??\n    defaultOptions.weekStartsOn ??\n    defaultOptions.locale?.options?.weekStartsOn ??\n    0;\n\n  const _date = toDate(date, options?.in);\n  const day = _date.getDay();\n  const diff = (day < weekStartsOn ? -7 : 0) + 6 - (day - weekStartsOn);\n\n  _date.setDate(_date.getDate() + diff);\n  _date.setHours(23, 59, 59, 999);\n  return _date;\n}\n\n// Fallback for modularized imports:\nexport default endOfWeek;\n","import { toDate } from \"./toDate.js\";\n\n/**\n * The {@link endOfMinute} function options.\n */\n\n/**\n * @name endOfMinute\n * @category Minute Helpers\n * @summary Return the end of a minute for the given date.\n *\n * @description\n * Return the end of a minute for the given date.\n * The result will be in the local timezone or the provided context.\n *\n * @typeParam DateType - The `Date` type, the function operates on. Gets inferred from passed arguments. Allows to use extensions like [`UTCDate`](https://github.com/date-fns/utc).\n * @typeParam ResultDate - The result `Date` type, it is the type returned from the context function if it is passed, or inferred from the arguments.\n *\n * @param date - The original date\n * @param options - An object with options\n *\n * @returns The end of a minute\n *\n * @example\n * // The end of a minute for 1 December 2014 22:15:45.400:\n * const result = endOfMinute(new Date(2014, 11, 1, 22, 15, 45, 400))\n * //=> Mon Dec 01 2014 22:15:59.999\n */\nexport function endOfMinute(date, options) {\n  const _date = toDate(date, options?.in);\n  _date.setSeconds(59, 999);\n  return _date;\n}\n\n// Fallback for modularized imports:\nexport default endOfMinute;\n","import { toDate } from \"./toDate.js\";\n\n/**\n * The {@link endOfQuarter} function options.\n */\n\n/**\n * @name endOfQuarter\n * @category Quarter Helpers\n * @summary Return the end of a year quarter for the given date.\n *\n * @description\n * Return the end of a year quarter for the given date.\n * The result will be in the local timezone.\n *\n * @typeParam DateType - The `Date` type, the function operates on. Gets inferred from passed arguments. Allows to use extensions like [`UTCDate`](https://github.com/date-fns/utc).\n * @typeParam ResultDate - The result `Date` type, it is the type returned from the context function if it is passed, or inferred from the arguments.\n *\n * @param date - The original date\n * @param options - An object with options\n *\n * @returns The end of a quarter\n *\n * @example\n * // The end of a quarter for 2 September 2014 11:55:00:\n * const result = endOfQuarter(new Date(2014, 8, 2, 11, 55, 0))\n * //=> Tue Sep 30 2014 23:59:59.999\n */\nexport function endOfQuarter(date, options) {\n  const _date = toDate(date, options?.in);\n  const currentMonth = _date.getMonth();\n  const month = currentMonth - (currentMonth % 3) + 3;\n  _date.setMonth(month, 0);\n  _date.setHours(23, 59, 59, 999);\n  return _date;\n}\n\n// Fallback for modularized imports:\nexport default endOfQuarter;\n","import { toDate } from \"./toDate.js\";\n\n/**\n * The {@link endOfSecond} function options.\n */\n\n/**\n * @name endOfSecond\n * @category Second Helpers\n * @summary Return the end of a second for the given date.\n *\n * @description\n * Return the end of a second for the given date.\n * The result will be in the local timezone if no `in` option is specified.\n *\n * @typeParam DateType - The `Date` type, the function operates on. Gets inferred from passed arguments. Allows to use extensions like [`UTCDate`](https://github.com/date-fns/utc).\n * @typeParam ResultDate - The result `Date` type, it is the type returned from the context function if it is passed, or inferred from the arguments.\n *\n * @param date - The original date\n * @param options - An object with options\n *\n * @returns The end of a second\n *\n * @example\n * // The end of a second for 1 December 2014 22:15:45.400:\n * const result = endOfSecond(new Date(2014, 11, 1, 22, 15, 45, 400))\n * //=> Mon Dec 01 2014 22:15:45.999\n */\nexport function endOfSecond(date, options) {\n  const _date = toDate(date, options?.in);\n  _date.setMilliseconds(999);\n  return _date;\n}\n\n// Fallback for modularized imports:\nexport default endOfSecond;\n","import { toDate } from \"./toDate.js\";\n\n/**\n * The {@link getISODay} function options.\n */\n\n/**\n * @name getISODay\n * @category Weekday Helpers\n * @summary Get the day of the ISO week of the given date.\n *\n * @description\n * Get the day of the ISO week of the given date,\n * which is 7 for Sunday, 1 for Monday etc.\n *\n * ISO week-numbering year: http://en.wikipedia.org/wiki/ISO_week_date\n *\n * @param date - The given date\n * @param options - An object with options\n *\n * @returns The day of ISO week\n *\n * @example\n * // Which day of the ISO week is 26 February 2012?\n * const result = getISODay(new Date(2012, 1, 26))\n * //=> 7\n */\nexport function getISODay(date, options) {\n  const day = toDate(date, options?.in).getDay();\n  return day === 0 ? 7 : day;\n}\n\n// Fallback for modularized imports:\nexport default getISODay;\n","import { constructFrom } from \"./constructFrom.js\";\n\n/**\n * @name transpose\n * @category Generic Helpers\n * @summary Transpose the date to the given constructor.\n *\n * @description\n * The function transposes the date to the given constructor. It helps you\n * to transpose the date in the system time zone to say `UTCDate` or any other\n * date extension.\n *\n * @typeParam InputDate - The input `Date` type derived from the passed argument.\n * @typeParam ResultDate - The result `Date` type derived from the passed constructor.\n *\n * @param date - The date to use values from\n * @param constructor - The date constructor to use\n *\n * @returns Date transposed to the given constructor\n *\n * @example\n * // Create July 10, 2022 00:00 in locale time zone\n * const date = new Date(2022, 6, 10)\n * //=> 'Sun Jul 10 2022 00:00:00 GMT+0800 (Singapore Standard Time)'\n *\n * @example\n * // Transpose the date to July 10, 2022 00:00 in UTC\n * transpose(date, UTCDate)\n * //=> 'Sun Jul 10 2022 00:00:00 GMT+0000 (Coordinated Universal Time)'\n */\nexport function transpose(date, constructor) {\n  const date_ = isConstructor(constructor)\n    ? new constructor(0)\n    : constructFrom(constructor, 0);\n  date_.setFullYear(date.getFullYear(), date.getMonth(), date.getDate());\n  date_.setHours(\n    date.getHours(),\n    date.getMinutes(),\n    date.getSeconds(),\n    date.getMilliseconds(),\n  );\n  return date_;\n}\n\nfunction isConstructor(constructor) {\n  return (\n    typeof constructor === \"function\" &&\n    constructor.prototype?.constructor === constructor\n  );\n}\n\n// Fallback for modularized imports:\nexport default transpose;\n","import { constructFrom } from \"../../constructFrom.js\";\nimport { transpose } from \"../../transpose.js\";\n\nconst TIMEZONE_UNIT_PRIORITY = 10;\n\nexport class Setter {\n  subPriority = 0;\n\n  validate(_utcDate, _options) {\n    return true;\n  }\n}\n\nexport class ValueSetter extends Setter {\n  constructor(\n    value,\n\n    validateValue,\n\n    setValue,\n\n    priority,\n    subPriority,\n  ) {\n    super();\n    this.value = value;\n    this.validateValue = validateValue;\n    this.setValue = setValue;\n    this.priority = priority;\n    if (subPriority) {\n      this.subPriority = subPriority;\n    }\n  }\n\n  validate(date, options) {\n    return this.validateValue(date, this.value, options);\n  }\n\n  set(date, flags, options) {\n    return this.setValue(date, flags, this.value, options);\n  }\n}\n\nexport class DateTimezoneSetter extends Setter {\n  priority = TIMEZONE_UNIT_PRIORITY;\n  subPriority = -1;\n\n  constructor(context, reference) {\n    super();\n    this.context = context || ((date) => constructFrom(reference, date));\n  }\n\n  set(date, flags) {\n    if (flags.timestampIsSet) return date;\n    return constructFrom(date, transpose(date, this.context));\n  }\n}\n","import { ValueSetter } from \"./Setter.js\";\n\nexport class Parser {\n  run(dateString, token, match, options) {\n    const result = this.parse(dateString, token, match, options);\n    if (!result) {\n      return null;\n    }\n\n    return {\n      setter: new ValueSetter(\n        result.value,\n        this.validate,\n        this.set,\n        this.priority,\n        this.subPriority,\n      ),\n      rest: result.rest,\n    };\n  }\n\n  validate(_utcDate, _value, _options) {\n    return true;\n  }\n}\n","import { Parser } from \"../Parser.js\";\n\nexport class EraParser extends Parser {\n  priority = 140;\n\n  parse(dateString, token, match) {\n    switch (token) {\n      // AD, BC\n      case \"G\":\n      case \"GG\":\n      case \"GGG\":\n        return (\n          match.era(dateString, { width: \"abbreviated\" }) ||\n          match.era(dateString, { width: \"narrow\" })\n        );\n\n      // A, B\n      case \"GGGGG\":\n        return match.era(dateString, { width: \"narrow\" });\n      // Anno Domini, Before Christ\n      case \"GGGG\":\n      default:\n        return (\n          match.era(dateString, { width: \"wide\" }) ||\n          match.era(dateString, { width: \"abbreviated\" }) ||\n          match.era(dateString, { width: \"narrow\" })\n        );\n    }\n  }\n\n  set(date, flags, value) {\n    flags.era = value;\n    date.setFullYear(value, 0, 1);\n    date.setHours(0, 0, 0, 0);\n    return date;\n  }\n\n  incompatibleTokens = [\"R\", \"u\", \"t\", \"T\"];\n}\n","export const numericPatterns = {\n  month: /^(1[0-2]|0?\\d)/, // 0 to 12\n  date: /^(3[0-1]|[0-2]?\\d)/, // 0 to 31\n  dayOfYear: /^(36[0-6]|3[0-5]\\d|[0-2]?\\d?\\d)/, // 0 to 366\n  week: /^(5[0-3]|[0-4]?\\d)/, // 0 to 53\n  hour23h: /^(2[0-3]|[0-1]?\\d)/, // 0 to 23\n  hour24h: /^(2[0-4]|[0-1]?\\d)/, // 0 to 24\n  hour11h: /^(1[0-1]|0?\\d)/, // 0 to 11\n  hour12h: /^(1[0-2]|0?\\d)/, // 0 to 12\n  minute: /^[0-5]?\\d/, // 0 to 59\n  second: /^[0-5]?\\d/, // 0 to 59\n\n  singleDigit: /^\\d/, // 0 to 9\n  twoDigits: /^\\d{1,2}/, // 0 to 99\n  threeDigits: /^\\d{1,3}/, // 0 to 999\n  fourDigits: /^\\d{1,4}/, // 0 to 9999\n\n  anyDigitsSigned: /^-?\\d+/,\n  singleDigitSigned: /^-?\\d/, // 0 to 9, -0 to -9\n  twoDigitsSigned: /^-?\\d{1,2}/, // 0 to 99, -0 to -99\n  threeDigitsSigned: /^-?\\d{1,3}/, // 0 to 999, -0 to -999\n  fourDigitsSigned: /^-?\\d{1,4}/, // 0 to 9999, -0 to -9999\n};\n\nexport const timezonePatterns = {\n  basicOptionalMinutes: /^([+-])(\\d{2})(\\d{2})?|Z/,\n  basic: /^([+-])(\\d{2})(\\d{2})|Z/,\n  basicOptionalSeconds: /^([+-])(\\d{2})(\\d{2})((\\d{2}))?|Z/,\n  extended: /^([+-])(\\d{2}):(\\d{2})|Z/,\n  extendedOptionalSeconds: /^([+-])(\\d{2}):(\\d{2})(:(\\d{2}))?|Z/,\n};\n","import {\n  millisecondsInHour,\n  millisecondsInMinute,\n  millisecondsInSecond,\n} from \"../../constants.js\";\n\nimport { numericPatterns } from \"./constants.js\";\n\nexport function mapValue(parseFnResult, mapFn) {\n  if (!parseFnResult) {\n    return parseFnResult;\n  }\n\n  return {\n    value: mapFn(parseFnResult.value),\n    rest: parseFnResult.rest,\n  };\n}\n\nexport function parseNumericPattern(pattern, dateString) {\n  const matchResult = dateString.match(pattern);\n\n  if (!matchResult) {\n    return null;\n  }\n\n  return {\n    value: parseInt(matchResult[0], 10),\n    rest: dateString.slice(matchResult[0].length),\n  };\n}\n\nexport function parseTimezonePattern(pattern, dateString) {\n  const matchResult = dateString.match(pattern);\n\n  if (!matchResult) {\n    return null;\n  }\n\n  // Input is 'Z'\n  if (matchResult[0] === \"Z\") {\n    return {\n      value: 0,\n      rest: dateString.slice(1),\n    };\n  }\n\n  const sign = matchResult[1] === \"+\" ? 1 : -1;\n  const hours = matchResult[2] ? parseInt(matchResult[2], 10) : 0;\n  const minutes = matchResult[3] ? parseInt(matchResult[3], 10) : 0;\n  const seconds = matchResult[5] ? parseInt(matchResult[5], 10) : 0;\n\n  return {\n    value:\n      sign *\n      (hours * millisecondsInHour +\n        minutes * millisecondsInMinute +\n        seconds * millisecondsInSecond),\n    rest: dateString.slice(matchResult[0].length),\n  };\n}\n\nexport function parseAnyDigitsSigned(dateString) {\n  return parseNumericPattern(numericPatterns.anyDigitsSigned, dateString);\n}\n\nexport function parseNDigits(n, dateString) {\n  switch (n) {\n    case 1:\n      return parseNumericPattern(numericPatterns.singleDigit, dateString);\n    case 2:\n      return parseNumericPattern(numericPatterns.twoDigits, dateString);\n    case 3:\n      return parseNumericPattern(numericPatterns.threeDigits, dateString);\n    case 4:\n      return parseNumericPattern(numericPatterns.fourDigits, dateString);\n    default:\n      return parseNumericPattern(new RegExp(\"^\\\\d{1,\" + n + \"}\"), dateString);\n  }\n}\n\nexport function parseNDigitsSigned(n, dateString) {\n  switch (n) {\n    case 1:\n      return parseNumericPattern(numericPatterns.singleDigitSigned, dateString);\n    case 2:\n      return parseNumericPattern(numericPatterns.twoDigitsSigned, dateString);\n    case 3:\n      return parseNumericPattern(numericPatterns.threeDigitsSigned, dateString);\n    case 4:\n      return parseNumericPattern(numericPatterns.fourDigitsSigned, dateString);\n    default:\n      return parseNumericPattern(new RegExp(\"^-?\\\\d{1,\" + n + \"}\"), dateString);\n  }\n}\n\nexport function dayPeriodEnumToHours(dayPeriod) {\n  switch (dayPeriod) {\n    case \"morning\":\n      return 4;\n    case \"evening\":\n      return 17;\n    case \"pm\":\n    case \"noon\":\n    case \"afternoon\":\n      return 12;\n    case \"am\":\n    case \"midnight\":\n    case \"night\":\n    default:\n      return 0;\n  }\n}\n\nexport function normalizeTwoDigitYear(twoDigitYear, currentYear) {\n  const isCommonEra = currentYear > 0;\n  // Absolute number of the current year:\n  // 1 -> 1 AC\n  // 0 -> 1 BC\n  // -1 -> 2 BC\n  const absCurrentYear = isCommonEra ? currentYear : 1 - currentYear;\n\n  let result;\n  if (absCurrentYear <= 50) {\n    result = twoDigitYear || 100;\n  } else {\n    const rangeEnd = absCurrentYear + 50;\n    const rangeEndCentury = Math.trunc(rangeEnd / 100) * 100;\n    const isPreviousCentury = twoDigitYear >= rangeEnd % 100;\n    result = twoDigitYear + rangeEndCentury - (isPreviousCentury ? 100 : 0);\n  }\n\n  return isCommonEra ? result : 1 - result;\n}\n\nexport function isLeapYearIndex(year) {\n  return year % 400 === 0 || (year % 4 === 0 && year % 100 !== 0);\n}\n","import { Parser } from \"../Parser.js\";\n\nimport { mapValue, normalizeTwoDigitYear, parseNDigits } from \"../utils.js\";\n\n// From http://www.unicode.org/reports/tr35/tr35-31/tr35-dates.html#Date_Format_Patterns\n// | Year     |     y | yy |   yyy |  yyyy | yyyyy |\n// |----------|-------|----|-------|-------|-------|\n// | AD 1     |     1 | 01 |   001 |  0001 | 00001 |\n// | AD 12    |    12 | 12 |   012 |  0012 | 00012 |\n// | AD 123   |   123 | 23 |   123 |  0123 | 00123 |\n// | AD 1234  |  1234 | 34 |  1234 |  1234 | 01234 |\n// | AD 12345 | 12345 | 45 | 12345 | 12345 | 12345 |\nexport class YearParser extends Parser {\n  priority = 130;\n  incompatibleTokens = [\"Y\", \"R\", \"u\", \"w\", \"I\", \"i\", \"e\", \"c\", \"t\", \"T\"];\n\n  parse(dateString, token, match) {\n    const valueCallback = (year) => ({\n      year,\n      isTwoDigitYear: token === \"yy\",\n    });\n\n    switch (token) {\n      case \"y\":\n        return mapValue(parseNDigits(4, dateString), valueCallback);\n      case \"yo\":\n        return mapValue(\n          match.ordinalNumber(dateString, {\n            unit: \"year\",\n          }),\n          valueCallback,\n        );\n      default:\n        return mapValue(parseNDigits(token.length, dateString), valueCallback);\n    }\n  }\n\n  validate(_date, value) {\n    return value.isTwoDigitYear || value.year > 0;\n  }\n\n  set(date, flags, value) {\n    const currentYear = date.getFullYear();\n\n    if (value.isTwoDigitYear) {\n      const normalizedTwoDigitYear = normalizeTwoDigitYear(\n        value.year,\n        currentYear,\n      );\n      date.setFullYear(normalizedTwoDigitYear, 0, 1);\n      date.setHours(0, 0, 0, 0);\n      return date;\n    }\n\n    const year =\n      !(\"era\" in flags) || flags.era === 1 ? value.year : 1 - value.year;\n    date.setFullYear(year, 0, 1);\n    date.setHours(0, 0, 0, 0);\n    return date;\n  }\n}\n","import { getWeekYear } from \"../../../getWeekYear.js\";\n\nimport { startOfWeek } from \"../../../startOfWeek.js\";\nimport { Parser } from \"../Parser.js\";\n\nimport { mapValue, normalizeTwoDigitYear, parseNDigits } from \"../utils.js\";\n\n// Local week-numbering year\nexport class LocalWeekYearParser extends Parser {\n  priority = 130;\n\n  parse(dateString, token, match) {\n    const valueCallback = (year) => ({\n      year,\n      isTwoDigitYear: token === \"YY\",\n    });\n\n    switch (token) {\n      case \"Y\":\n        return mapValue(parseNDigits(4, dateString), valueCallback);\n      case \"Yo\":\n        return mapValue(\n          match.ordinalNumber(dateString, {\n            unit: \"year\",\n          }),\n          valueCallback,\n        );\n      default:\n        return mapValue(parseNDigits(token.length, dateString), valueCallback);\n    }\n  }\n\n  validate(_date, value) {\n    return value.isTwoDigitYear || value.year > 0;\n  }\n\n  set(date, flags, value, options) {\n    const currentYear = getWeekYear(date, options);\n\n    if (value.isTwoDigitYear) {\n      const normalizedTwoDigitYear = normalizeTwoDigitYear(\n        value.year,\n        currentYear,\n      );\n      date.setFullYear(\n        normalizedTwoDigitYear,\n        0,\n        options.firstWeekContainsDate,\n      );\n      date.setHours(0, 0, 0, 0);\n      return startOfWeek(date, options);\n    }\n\n    const year =\n      !(\"era\" in flags) || flags.era === 1 ? value.year : 1 - value.year;\n    date.setFullYear(year, 0, options.firstWeekContainsDate);\n    date.setHours(0, 0, 0, 0);\n    return startOfWeek(date, options);\n  }\n\n  incompatibleTokens = [\n    \"y\",\n    \"R\",\n    \"u\",\n    \"Q\",\n    \"q\",\n    \"M\",\n    \"L\",\n    \"I\",\n    \"d\",\n    \"D\",\n    \"i\",\n    \"t\",\n    \"T\",\n  ];\n}\n","import { startOfISOWeek } from \"../../../startOfISOWeek.js\";\nimport { constructFrom } from \"../../../constructFrom.js\";\nimport { Parser } from \"../Parser.js\";\n\nimport { parseNDigitsSigned } from \"../utils.js\";\n\n// ISO week-numbering year\nexport class ISOWeekYearParser extends Parser {\n  priority = 130;\n\n  parse(dateString, token) {\n    if (token === \"R\") {\n      return parseNDigitsSigned(4, dateString);\n    }\n\n    return parseNDigitsSigned(token.length, dateString);\n  }\n\n  set(date, _flags, value) {\n    const firstWeekOfYear = constructFrom(date, 0);\n    firstWeekOfYear.setFullYear(value, 0, 4);\n    firstWeekOfYear.setHours(0, 0, 0, 0);\n    return startOfISOWeek(firstWeekOfYear);\n  }\n\n  incompatibleTokens = [\n    \"G\",\n    \"y\",\n    \"Y\",\n    \"u\",\n    \"Q\",\n    \"q\",\n    \"M\",\n    \"L\",\n    \"w\",\n    \"d\",\n    \"D\",\n    \"e\",\n    \"c\",\n    \"t\",\n    \"T\",\n  ];\n}\n","import { Parser } from \"../Parser.js\";\n\nimport { parseNDigitsSigned } from \"../utils.js\";\n\nexport class ExtendedYearParser extends Parser {\n  priority = 130;\n\n  parse(dateString, token) {\n    if (token === \"u\") {\n      return parseNDigitsSigned(4, dateString);\n    }\n\n    return parseNDigitsSigned(token.length, dateString);\n  }\n\n  set(date, _flags, value) {\n    date.setFullYear(value, 0, 1);\n    date.setHours(0, 0, 0, 0);\n    return date;\n  }\n\n  incompatibleTokens = [\"G\", \"y\", \"Y\", \"R\", \"w\", \"I\", \"i\", \"e\", \"c\", \"t\", \"T\"];\n}\n","import { Parser } from \"../Parser.js\";\n\nimport { parseNDigits } from \"../utils.js\";\n\nexport class QuarterParser extends Parser {\n  priority = 120;\n\n  parse(dateString, token, match) {\n    switch (token) {\n      // 1, 2, 3, 4\n      case \"Q\":\n      case \"QQ\": // 01, 02, 03, 04\n        return parseNDigits(token.length, dateString);\n      // 1st, 2nd, 3rd, 4th\n      case \"Qo\":\n        return match.ordinalNumber(dateString, { unit: \"quarter\" });\n      // Q1, Q2, Q3, Q4\n      case \"QQQ\":\n        return (\n          match.quarter(dateString, {\n            width: \"abbreviated\",\n            context: \"formatting\",\n          }) ||\n          match.quarter(dateString, {\n            width: \"narrow\",\n            context: \"formatting\",\n          })\n        );\n\n      // 1, 2, 3, 4 (narrow quarter; could be not numerical)\n      case \"QQQQQ\":\n        return match.quarter(dateString, {\n          width: \"narrow\",\n          context: \"formatting\",\n        });\n      // 1st quarter, 2nd quarter, ...\n      case \"QQQQ\":\n      default:\n        return (\n          match.quarter(dateString, {\n            width: \"wide\",\n            context: \"formatting\",\n          }) ||\n          match.quarter(dateString, {\n            width: \"abbreviated\",\n            context: \"formatting\",\n          }) ||\n          match.quarter(dateString, {\n            width: \"narrow\",\n            context: \"formatting\",\n          })\n        );\n    }\n  }\n\n  validate(_date, value) {\n    return value >= 1 && value <= 4;\n  }\n\n  set(date, _flags, value) {\n    date.setMonth((value - 1) * 3, 1);\n    date.setHours(0, 0, 0, 0);\n    return date;\n  }\n\n  incompatibleTokens = [\n    \"Y\",\n    \"R\",\n    \"q\",\n    \"M\",\n    \"L\",\n    \"w\",\n    \"I\",\n    \"d\",\n    \"D\",\n    \"i\",\n    \"e\",\n    \"c\",\n    \"t\",\n    \"T\",\n  ];\n}\n","import { Parser } from \"../Parser.js\";\n\nimport { parseNDigits } from \"../utils.js\";\n\nexport class StandAloneQuarterParser extends Parser {\n  priority = 120;\n\n  parse(dateString, token, match) {\n    switch (token) {\n      // 1, 2, 3, 4\n      case \"q\":\n      case \"qq\": // 01, 02, 03, 04\n        return parseNDigits(token.length, dateString);\n      // 1st, 2nd, 3rd, 4th\n      case \"qo\":\n        return match.ordinalNumber(dateString, { unit: \"quarter\" });\n      // Q1, Q2, Q3, Q4\n      case \"qqq\":\n        return (\n          match.quarter(dateString, {\n            width: \"abbreviated\",\n            context: \"standalone\",\n          }) ||\n          match.quarter(dateString, {\n            width: \"narrow\",\n            context: \"standalone\",\n          })\n        );\n\n      // 1, 2, 3, 4 (narrow quarter; could be not numerical)\n      case \"qqqqq\":\n        return match.quarter(dateString, {\n          width: \"narrow\",\n          context: \"standalone\",\n        });\n      // 1st quarter, 2nd quarter, ...\n      case \"qqqq\":\n      default:\n        return (\n          match.quarter(dateString, {\n            width: \"wide\",\n            context: \"standalone\",\n          }) ||\n          match.quarter(dateString, {\n            width: \"abbreviated\",\n            context: \"standalone\",\n          }) ||\n          match.quarter(dateString, {\n            width: \"narrow\",\n            context: \"standalone\",\n          })\n        );\n    }\n  }\n\n  validate(_date, value) {\n    return value >= 1 && value <= 4;\n  }\n\n  set(date, _flags, value) {\n    date.setMonth((value - 1) * 3, 1);\n    date.setHours(0, 0, 0, 0);\n    return date;\n  }\n\n  incompatibleTokens = [\n    \"Y\",\n    \"R\",\n    \"Q\",\n    \"M\",\n    \"L\",\n    \"w\",\n    \"I\",\n    \"d\",\n    \"D\",\n    \"i\",\n    \"e\",\n    \"c\",\n    \"t\",\n    \"T\",\n  ];\n}\n","import { numericPatterns } from \"../constants.js\";\nimport { Parser } from \"../Parser.js\";\n\nimport { mapValue, parseNDigits, parseNumericPattern } from \"../utils.js\";\n\nexport class MonthParser extends Parser {\n  incompatibleTokens = [\n    \"Y\",\n    \"R\",\n    \"q\",\n    \"Q\",\n    \"L\",\n    \"w\",\n    \"I\",\n    \"D\",\n    \"i\",\n    \"e\",\n    \"c\",\n    \"t\",\n    \"T\",\n  ];\n\n  priority = 110;\n\n  parse(dateString, token, match) {\n    const valueCallback = (value) => value - 1;\n\n    switch (token) {\n      // 1, 2, ..., 12\n      case \"M\":\n        return mapValue(\n          parseNumericPattern(numericPatterns.month, dateString),\n          valueCallback,\n        );\n      // 01, 02, ..., 12\n      case \"MM\":\n        return mapValue(parseNDigits(2, dateString), valueCallback);\n      // 1st, 2nd, ..., 12th\n      case \"Mo\":\n        return mapValue(\n          match.ordinalNumber(dateString, {\n            unit: \"month\",\n          }),\n          valueCallback,\n        );\n      // Jan, Feb, ..., Dec\n      case \"MMM\":\n        return (\n          match.month(dateString, {\n            width: \"abbreviated\",\n            context: \"formatting\",\n          }) ||\n          match.month(dateString, { width: \"narrow\", context: \"formatting\" })\n        );\n\n      // J, F, ..., D\n      case \"MMMMM\":\n        return match.month(dateString, {\n          width: \"narrow\",\n          context: \"formatting\",\n        });\n      // January, February, ..., December\n      case \"MMMM\":\n      default:\n        return (\n          match.month(dateString, { width: \"wide\", context: \"formatting\" }) ||\n          match.month(dateString, {\n            width: \"abbreviated\",\n            context: \"formatting\",\n          }) ||\n          match.month(dateString, { width: \"narrow\", context: \"formatting\" })\n        );\n    }\n  }\n\n  validate(_date, value) {\n    return value >= 0 && value <= 11;\n  }\n\n  set(date, _flags, value) {\n    date.setMonth(value, 1);\n    date.setHours(0, 0, 0, 0);\n    return date;\n  }\n}\n","import { numericPatterns } from \"../constants.js\";\nimport { Parser } from \"../Parser.js\";\n\nimport { mapValue, parseNDigits, parseNumericPattern } from \"../utils.js\";\n\nexport class StandAloneMonthParser extends Parser {\n  priority = 110;\n\n  parse(dateString, token, match) {\n    const valueCallback = (value) => value - 1;\n\n    switch (token) {\n      // 1, 2, ..., 12\n      case \"L\":\n        return mapValue(\n          parseNumericPattern(numericPatterns.month, dateString),\n          valueCallback,\n        );\n      // 01, 02, ..., 12\n      case \"LL\":\n        return mapValue(parseNDigits(2, dateString), valueCallback);\n      // 1st, 2nd, ..., 12th\n      case \"Lo\":\n        return mapValue(\n          match.ordinalNumber(dateString, {\n            unit: \"month\",\n          }),\n          valueCallback,\n        );\n      // Jan, Feb, ..., Dec\n      case \"LLL\":\n        return (\n          match.month(dateString, {\n            width: \"abbreviated\",\n            context: \"standalone\",\n          }) ||\n          match.month(dateString, { width: \"narrow\", context: \"standalone\" })\n        );\n\n      // J, F, ..., D\n      case \"LLLLL\":\n        return match.month(dateString, {\n          width: \"narrow\",\n          context: \"standalone\",\n        });\n      // January, February, ..., December\n      case \"LLLL\":\n      default:\n        return (\n          match.month(dateString, { width: \"wide\", context: \"standalone\" }) ||\n          match.month(dateString, {\n            width: \"abbreviated\",\n            context: \"standalone\",\n          }) ||\n          match.month(dateString, { width: \"narrow\", context: \"standalone\" })\n        );\n    }\n  }\n\n  validate(_date, value) {\n    return value >= 0 && value <= 11;\n  }\n\n  set(date, _flags, value) {\n    date.setMonth(value, 1);\n    date.setHours(0, 0, 0, 0);\n    return date;\n  }\n\n  incompatibleTokens = [\n    \"Y\",\n    \"R\",\n    \"q\",\n    \"Q\",\n    \"M\",\n    \"w\",\n    \"I\",\n    \"D\",\n    \"i\",\n    \"e\",\n    \"c\",\n    \"t\",\n    \"T\",\n  ];\n}\n","import { getWeek } from \"./getWeek.js\";\nimport { toDate } from \"./toDate.js\";\n\n/**\n * The {@link setWeek} function options.\n */\n\n/**\n * @name setWeek\n * @category Week Helpers\n * @summary Set the local week to the given date.\n *\n * @description\n * Set the local week to the given date, saving the weekday number.\n * The exact calculation depends on the values of\n * `options.weekStartsOn` (which is the index of the first day of the week)\n * and `options.firstWeekContainsDate` (which is the day of January, which is always in\n * the first week of the week-numbering year)\n *\n * Week numbering: https://en.wikipedia.org/wiki/Week#The_ISO_week_date_system\n *\n * @typeParam DateType - The `Date` type, the function operates on. Gets inferred from passed arguments. Allows to use extensions like [`UTCDate`](https://github.com/date-fns/utc).\n * @typeParam ResultDate - The result `Date` type, it is the type returned from the context function if it is passed, or inferred from the arguments.\n *\n * @param date - The date to be changed\n * @param week - The week of the new date\n * @param options - An object with options\n *\n * @returns The new date with the local week set\n *\n * @example\n * // Set the 1st week to 2 January 2005 with default options:\n * const result = setWeek(new Date(2005, 0, 2), 1)\n * //=> Sun Dec 26 2004 00:00:00\n *\n * @example\n * // Set the 1st week to 2 January 2005,\n * // if Monday is the first day of the week,\n * // and the first week of the year always contains 4 January:\n * const result = setWeek(new Date(2005, 0, 2), 1, {\n *   weekStartsOn: 1,\n *   firstWeekContainsDate: 4\n * })\n * //=> Sun Jan 4 2004 00:00:00\n */\nexport function setWeek(date, week, options) {\n  const date_ = toDate(date, options?.in);\n  const diff = getWeek(date_, options) - week;\n  date_.setDate(date_.getDate() - diff * 7);\n  return toDate(date_, options?.in);\n}\n\n// Fallback for modularized imports:\nexport default setWeek;\n","import { setWeek } from \"../../../setWeek.js\";\nimport { startOfWeek } from \"../../../startOfWeek.js\";\nimport { numericPatterns } from \"../constants.js\";\nimport { Parser } from \"../Parser.js\";\n\nimport { parseNDigits, parseNumericPattern } from \"../utils.js\";\n\n// Local week of year\nexport class LocalWeekParser extends Parser {\n  priority = 100;\n\n  parse(dateString, token, match) {\n    switch (token) {\n      case \"w\":\n        return parseNumericPattern(numericPatterns.week, dateString);\n      case \"wo\":\n        return match.ordinalNumber(dateString, { unit: \"week\" });\n      default:\n        return parseNDigits(token.length, dateString);\n    }\n  }\n\n  validate(_date, value) {\n    return value >= 1 && value <= 53;\n  }\n\n  set(date, _flags, value, options) {\n    return startOfWeek(setWeek(date, value, options), options);\n  }\n\n  incompatibleTokens = [\n    \"y\",\n    \"R\",\n    \"u\",\n    \"q\",\n    \"Q\",\n    \"M\",\n    \"L\",\n    \"I\",\n    \"d\",\n    \"D\",\n    \"i\",\n    \"t\",\n    \"T\",\n  ];\n}\n","import { getISOWeek } from \"./getISOWeek.js\";\nimport { toDate } from \"./toDate.js\";\n\n/**\n * The {@link setISOWeek} function options.\n */\n\n/**\n * @name setISOWeek\n * @category ISO Week Helpers\n * @summary Set the ISO week to the given date.\n *\n * @description\n * Set the ISO week to the given date, saving the weekday number.\n *\n * ISO week-numbering year: http://en.wikipedia.org/wiki/ISO_week_date\n *\n * @typeParam DateType - The `Date` type, the function operates on. Gets inferred from passed arguments. Allows to use extensions like [`UTCDate`](https://github.com/date-fns/utc).\n * @typeParam ResultDate - The `Date` type of the context function.\n *\n * @param date - The date to be changed\n * @param week - The ISO week of the new date\n * @param options - An object with options\n *\n * @returns The new date with the ISO week set\n *\n * @example\n * // Set the 53rd ISO week to 7 August 2004:\n * const result = setISOWeek(new Date(2004, 7, 7), 53)\n * //=> Sat Jan 01 2005 00:00:00\n */\nexport function setISOWeek(date, week, options) {\n  const _date = toDate(date, options?.in);\n  const diff = getISOWeek(_date, options) - week;\n  _date.setDate(_date.getDate() - diff * 7);\n  return _date;\n}\n\n// Fallback for modularized imports:\nexport default setISOWeek;\n","import { setISOWeek } from \"../../../setISOWeek.js\";\nimport { startOfISOWeek } from \"../../../startOfISOWeek.js\";\nimport { numericPatterns } from \"../constants.js\";\nimport { Parser } from \"../Parser.js\";\n\nimport { parseNDigits, parseNumericPattern } from \"../utils.js\";\n\n// ISO week of year\nexport class ISOWeekParser extends Parser {\n  priority = 100;\n\n  parse(dateString, token, match) {\n    switch (token) {\n      case \"I\":\n        return parseNumericPattern(numericPatterns.week, dateString);\n      case \"Io\":\n        return match.ordinalNumber(dateString, { unit: \"week\" });\n      default:\n        return parseNDigits(token.length, dateString);\n    }\n  }\n\n  validate(_date, value) {\n    return value >= 1 && value <= 53;\n  }\n\n  set(date, _flags, value) {\n    return startOfISOWeek(setISOWeek(date, value));\n  }\n\n  incompatibleTokens = [\n    \"y\",\n    \"Y\",\n    \"u\",\n    \"q\",\n    \"Q\",\n    \"M\",\n    \"L\",\n    \"w\",\n    \"d\",\n    \"D\",\n    \"e\",\n    \"c\",\n    \"t\",\n    \"T\",\n  ];\n}\n","import { numericPatterns } from \"../constants.js\";\nimport { Parser } from \"../Parser.js\";\n\nimport {\n  isLeapYearIndex,\n  parseNDigits,\n  parseNumericPattern,\n} from \"../utils.js\";\n\nconst DAYS_IN_MONTH = [31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31];\nconst DAYS_IN_MONTH_LEAP_YEAR = [\n  31, 29, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31,\n];\n\n// Day of the month\nexport class DateParser extends Parser {\n  priority = 90;\n  subPriority = 1;\n\n  parse(dateString, token, match) {\n    switch (token) {\n      case \"d\":\n        return parseNumericPattern(numericPatterns.date, dateString);\n      case \"do\":\n        return match.ordinalNumber(dateString, { unit: \"date\" });\n      default:\n        return parseNDigits(token.length, dateString);\n    }\n  }\n\n  validate(date, value) {\n    const year = date.getFullYear();\n    const isLeapYear = isLeapYearIndex(year);\n    const month = date.getMonth();\n    if (isLeapYear) {\n      return value >= 1 && value <= DAYS_IN_MONTH_LEAP_YEAR[month];\n    } else {\n      return value >= 1 && value <= DAYS_IN_MONTH[month];\n    }\n  }\n\n  set(date, _flags, value) {\n    date.setDate(value);\n    date.setHours(0, 0, 0, 0);\n    return date;\n  }\n\n  incompatibleTokens = [\n    \"Y\",\n    \"R\",\n    \"q\",\n    \"Q\",\n    \"w\",\n    \"I\",\n    \"D\",\n    \"i\",\n    \"e\",\n    \"c\",\n    \"t\",\n    \"T\",\n  ];\n}\n","import { numericPatterns } from \"../constants.js\";\nimport { Parser } from \"../Parser.js\";\n\nimport {\n  isLeapYearIndex,\n  parseNDigits,\n  parseNumericPattern,\n} from \"../utils.js\";\n\nexport class DayOfYearParser extends Parser {\n  priority = 90;\n\n  subpriority = 1;\n\n  parse(dateString, token, match) {\n    switch (token) {\n      case \"D\":\n      case \"DD\":\n        return parseNumericPattern(numericPatterns.dayOfYear, dateString);\n      case \"Do\":\n        return match.ordinalNumber(dateString, { unit: \"date\" });\n      default:\n        return parseNDigits(token.length, dateString);\n    }\n  }\n\n  validate(date, value) {\n    const year = date.getFullYear();\n    const isLeapYear = isLeapYearIndex(year);\n    if (isLeapYear) {\n      return value >= 1 && value <= 366;\n    } else {\n      return value >= 1 && value <= 365;\n    }\n  }\n\n  set(date, _flags, value) {\n    date.setMonth(0, value);\n    date.setHours(0, 0, 0, 0);\n    return date;\n  }\n\n  incompatibleTokens = [\n    \"Y\",\n    \"R\",\n    \"q\",\n    \"Q\",\n    \"M\",\n    \"L\",\n    \"w\",\n    \"I\",\n    \"d\",\n    \"E\",\n    \"i\",\n    \"e\",\n    \"c\",\n    \"t\",\n    \"T\",\n  ];\n}\n","import { getDefaultOptions } from \"./_lib/defaultOptions.js\";\nimport { addDays } from \"./addDays.js\";\nimport { toDate } from \"./toDate.js\";\n\n/**\n * The {@link setDay} function options.\n */\n\n/**\n * @name setDay\n * @category Weekday Helpers\n * @summary Set the day of the week to the given date.\n *\n * @description\n * Set the day of the week to the given date.\n *\n * @typeParam DateType - The `Date` type, the function operates on. Gets inferred from passed arguments. Allows to use extensions like [`UTCDate`](https://github.com/date-fns/utc).\n * @typeParam ResultDate - The result `Date` type, it is the type returned from the context function if it is passed, or inferred from the arguments.\n *\n * @param date - The date to be changed\n * @param day - The day of the week of the new date\n * @param options - An object with options.\n *\n * @returns The new date with the day of the week set\n *\n * @example\n * // Set week day to Sunday, with the default weekStartsOn of Sunday:\n * const result = setDay(new Date(2014, 8, 1), 0)\n * //=> Sun Aug 31 2014 00:00:00\n *\n * @example\n * // Set week day to Sunday, with a weekStartsOn of Monday:\n * const result = setDay(new Date(2014, 8, 1), 0, { weekStartsOn: 1 })\n * //=> Sun Sep 07 2014 00:00:00\n */\nexport function setDay(date, day, options) {\n  const defaultOptions = getDefaultOptions();\n  const weekStartsOn =\n    options?.weekStartsOn ??\n    options?.locale?.options?.weekStartsOn ??\n    defaultOptions.weekStartsOn ??\n    defaultOptions.locale?.options?.weekStartsOn ??\n    0;\n\n  const date_ = toDate(date, options?.in);\n  const currentDay = date_.getDay();\n\n  const remainder = day % 7;\n  const dayIndex = (remainder + 7) % 7;\n\n  const delta = 7 - weekStartsOn;\n  const diff =\n    day < 0 || day > 6\n      ? day - ((currentDay + delta) % 7)\n      : ((dayIndex + delta) % 7) - ((currentDay + delta) % 7);\n  return addDays(date_, diff, options);\n}\n\n// Fallback for modularized imports:\nexport default setDay;\n","import { setDay } from \"../../../setDay.js\";\nimport { Parser } from \"../Parser.js\";\n\n// Day of week\nexport class DayParser extends Parser {\n  priority = 90;\n\n  parse(dateString, token, match) {\n    switch (token) {\n      // Tue\n      case \"E\":\n      case \"EE\":\n      case \"EEE\":\n        return (\n          match.day(dateString, {\n            width: \"abbreviated\",\n            context: \"formatting\",\n          }) ||\n          match.day(dateString, { width: \"short\", context: \"formatting\" }) ||\n          match.day(dateString, { width: \"narrow\", context: \"formatting\" })\n        );\n\n      // T\n      case \"EEEEE\":\n        return match.day(dateString, {\n          width: \"narrow\",\n          context: \"formatting\",\n        });\n      // Tu\n      case \"EEEEEE\":\n        return (\n          match.day(dateString, { width: \"short\", context: \"formatting\" }) ||\n          match.day(dateString, { width: \"narrow\", context: \"formatting\" })\n        );\n\n      // Tuesday\n      case \"EEEE\":\n      default:\n        return (\n          match.day(dateString, { width: \"wide\", context: \"formatting\" }) ||\n          match.day(dateString, {\n            width: \"abbreviated\",\n            context: \"formatting\",\n          }) ||\n          match.day(dateString, { width: \"short\", context: \"formatting\" }) ||\n          match.day(dateString, { width: \"narrow\", context: \"formatting\" })\n        );\n    }\n  }\n\n  validate(_date, value) {\n    return value >= 0 && value <= 6;\n  }\n\n  set(date, _flags, value, options) {\n    date = setDay(date, value, options);\n    date.setHours(0, 0, 0, 0);\n    return date;\n  }\n\n  incompatibleTokens = [\"D\", \"i\", \"e\", \"c\", \"t\", \"T\"];\n}\n","import { setDay } from \"../../../setDay.js\";\nimport { Parser } from \"../Parser.js\";\n\nimport { mapValue, parseNDigits } from \"../utils.js\";\n\n// Local day of week\nexport class LocalDayParser extends Parser {\n  priority = 90;\n  parse(dateString, token, match, options) {\n    const valueCallback = (value) => {\n      // We want here floor instead of trunc, so we get -7 for value 0 instead of 0\n      const wholeWeekDays = Math.floor((value - 1) / 7) * 7;\n      return ((value + options.weekStartsOn + 6) % 7) + wholeWeekDays;\n    };\n\n    switch (token) {\n      // 3\n      case \"e\":\n      case \"ee\": // 03\n        return mapValue(parseNDigits(token.length, dateString), valueCallback);\n      // 3rd\n      case \"eo\":\n        return mapValue(\n          match.ordinalNumber(dateString, {\n            unit: \"day\",\n          }),\n          valueCallback,\n        );\n      // Tue\n      case \"eee\":\n        return (\n          match.day(dateString, {\n            width: \"abbreviated\",\n            context: \"formatting\",\n          }) ||\n          match.day(dateString, { width: \"short\", context: \"formatting\" }) ||\n          match.day(dateString, { width: \"narrow\", context: \"formatting\" })\n        );\n\n      // T\n      case \"eeeee\":\n        return match.day(dateString, {\n          width: \"narrow\",\n          context: \"formatting\",\n        });\n      // Tu\n      case \"eeeeee\":\n        return (\n          match.day(dateString, { width: \"short\", context: \"formatting\" }) ||\n          match.day(dateString, { width: \"narrow\", context: \"formatting\" })\n        );\n\n      // Tuesday\n      case \"eeee\":\n      default:\n        return (\n          match.day(dateString, { width: \"wide\", context: \"formatting\" }) ||\n          match.day(dateString, {\n            width: \"abbreviated\",\n            context: \"formatting\",\n          }) ||\n          match.day(dateString, { width: \"short\", context: \"formatting\" }) ||\n          match.day(dateString, { width: \"narrow\", context: \"formatting\" })\n        );\n    }\n  }\n\n  validate(_date, value) {\n    return value >= 0 && value <= 6;\n  }\n\n  set(date, _flags, value, options) {\n    date = setDay(date, value, options);\n    date.setHours(0, 0, 0, 0);\n    return date;\n  }\n\n  incompatibleTokens = [\n    \"y\",\n    \"R\",\n    \"u\",\n    \"q\",\n    \"Q\",\n    \"M\",\n    \"L\",\n    \"I\",\n    \"d\",\n    \"D\",\n    \"E\",\n    \"i\",\n    \"c\",\n    \"t\",\n    \"T\",\n  ];\n}\n","import { setDay } from \"../../../setDay.js\";\nimport { Parser } from \"../Parser.js\";\n\nimport { mapValue, parseNDigits } from \"../utils.js\";\n\n// Stand-alone local day of week\nexport class StandAloneLocalDayParser extends Parser {\n  priority = 90;\n\n  parse(dateString, token, match, options) {\n    const valueCallback = (value) => {\n      // We want here floor instead of trunc, so we get -7 for value 0 instead of 0\n      const wholeWeekDays = Math.floor((value - 1) / 7) * 7;\n      return ((value + options.weekStartsOn + 6) % 7) + wholeWeekDays;\n    };\n\n    switch (token) {\n      // 3\n      case \"c\":\n      case \"cc\": // 03\n        return mapValue(parseNDigits(token.length, dateString), valueCallback);\n      // 3rd\n      case \"co\":\n        return mapValue(\n          match.ordinalNumber(dateString, {\n            unit: \"day\",\n          }),\n          valueCallback,\n        );\n      // Tue\n      case \"ccc\":\n        return (\n          match.day(dateString, {\n            width: \"abbreviated\",\n            context: \"standalone\",\n          }) ||\n          match.day(dateString, { width: \"short\", context: \"standalone\" }) ||\n          match.day(dateString, { width: \"narrow\", context: \"standalone\" })\n        );\n\n      // T\n      case \"ccccc\":\n        return match.day(dateString, {\n          width: \"narrow\",\n          context: \"standalone\",\n        });\n      // Tu\n      case \"cccccc\":\n        return (\n          match.day(dateString, { width: \"short\", context: \"standalone\" }) ||\n          match.day(dateString, { width: \"narrow\", context: \"standalone\" })\n        );\n\n      // Tuesday\n      case \"cccc\":\n      default:\n        return (\n          match.day(dateString, { width: \"wide\", context: \"standalone\" }) ||\n          match.day(dateString, {\n            width: \"abbreviated\",\n            context: \"standalone\",\n          }) ||\n          match.day(dateString, { width: \"short\", context: \"standalone\" }) ||\n          match.day(dateString, { width: \"narrow\", context: \"standalone\" })\n        );\n    }\n  }\n\n  validate(_date, value) {\n    return value >= 0 && value <= 6;\n  }\n\n  set(date, _flags, value, options) {\n    date = setDay(date, value, options);\n    date.setHours(0, 0, 0, 0);\n    return date;\n  }\n\n  incompatibleTokens = [\n    \"y\",\n    \"R\",\n    \"u\",\n    \"q\",\n    \"Q\",\n    \"M\",\n    \"L\",\n    \"I\",\n    \"d\",\n    \"D\",\n    \"E\",\n    \"i\",\n    \"e\",\n    \"t\",\n    \"T\",\n  ];\n}\n","import { addDays } from \"./addDays.js\";\nimport { getISODay } from \"./getISODay.js\";\nimport { toDate } from \"./toDate.js\";\n\n/**\n * The {@link setISODay} function options.\n */\n\n/**\n * @name setISODay\n * @category Weekday Helpers\n * @summary Set the day of the ISO week to the given date.\n *\n * @description\n * Set the day of the ISO week to the given date.\n * ISO week starts with Monday.\n * 7 is the index of Sunday, 1 is the index of Monday, etc.\n *\n * @typeParam DateType - The `Date` type, the function operates on. Gets inferred from passed arguments. Allows to use extensions like [`UTCDate`](https://github.com/date-fns/utc).\n * @typeParam ResultDate - The result `Date` type, it is the type returned from the context function if it is passed, or inferred from the arguments.\n *\n * @param date - The date to be changed\n * @param day - The day of the ISO week of the new date\n * @param options - An object with options\n *\n * @returns The new date with the day of the ISO week set\n *\n * @example\n * // Set Sunday to 1 September 2014:\n * const result = setISODay(new Date(2014, 8, 1), 7)\n * //=> Sun Sep 07 2014 00:00:00\n */\nexport function setISODay(date, day, options) {\n  const date_ = toDate(date, options?.in);\n  const currentDay = getISODay(date_, options);\n  const diff = day - currentDay;\n  return addDays(date_, diff, options);\n}\n\n// Fallback for modularized imports:\nexport default setISODay;\n","import { setISODay } from \"../../../setISODay.js\";\nimport { Parser } from \"../Parser.js\";\n\nimport { mapValue, parseNDigits } from \"../utils.js\";\n\n// ISO day of week\nexport class ISODayParser extends Parser {\n  priority = 90;\n\n  parse(dateString, token, match) {\n    const valueCallback = (value) => {\n      if (value === 0) {\n        return 7;\n      }\n      return value;\n    };\n\n    switch (token) {\n      // 2\n      case \"i\":\n      case \"ii\": // 02\n        return parseNDigits(token.length, dateString);\n      // 2nd\n      case \"io\":\n        return match.ordinalNumber(dateString, { unit: \"day\" });\n      // Tue\n      case \"iii\":\n        return mapValue(\n          match.day(dateString, {\n            width: \"abbreviated\",\n            context: \"formatting\",\n          }) ||\n            match.day(dateString, {\n              width: \"short\",\n              context: \"formatting\",\n            }) ||\n            match.day(dateString, {\n              width: \"narrow\",\n              context: \"formatting\",\n            }),\n          valueCallback,\n        );\n      // T\n      case \"iiiii\":\n        return mapValue(\n          match.day(dateString, {\n            width: \"narrow\",\n            context: \"formatting\",\n          }),\n          valueCallback,\n        );\n      // Tu\n      case \"iiiiii\":\n        return mapValue(\n          match.day(dateString, {\n            width: \"short\",\n            context: \"formatting\",\n          }) ||\n            match.day(dateString, {\n              width: \"narrow\",\n              context: \"formatting\",\n            }),\n          valueCallback,\n        );\n      // Tuesday\n      case \"iiii\":\n      default:\n        return mapValue(\n          match.day(dateString, {\n            width: \"wide\",\n            context: \"formatting\",\n          }) ||\n            match.day(dateString, {\n              width: \"abbreviated\",\n              context: \"formatting\",\n            }) ||\n            match.day(dateString, {\n              width: \"short\",\n              context: \"formatting\",\n            }) ||\n            match.day(dateString, {\n              width: \"narrow\",\n              context: \"formatting\",\n            }),\n          valueCallback,\n        );\n    }\n  }\n\n  validate(_date, value) {\n    return value >= 1 && value <= 7;\n  }\n\n  set(date, _flags, value) {\n    date = setISODay(date, value);\n    date.setHours(0, 0, 0, 0);\n    return date;\n  }\n\n  incompatibleTokens = [\n    \"y\",\n    \"Y\",\n    \"u\",\n    \"q\",\n    \"Q\",\n    \"M\",\n    \"L\",\n    \"w\",\n    \"d\",\n    \"D\",\n    \"E\",\n    \"e\",\n    \"c\",\n    \"t\",\n    \"T\",\n  ];\n}\n","import { Parser } from \"../Parser.js\";\n\nimport { dayPeriodEnumToHours } from \"../utils.js\";\n\nexport class AMPMParser extends Parser {\n  priority = 80;\n\n  parse(dateString, token, match) {\n    switch (token) {\n      case \"a\":\n      case \"aa\":\n      case \"aaa\":\n        return (\n          match.dayPeriod(dateString, {\n            width: \"abbreviated\",\n            context: \"formatting\",\n          }) ||\n          match.dayPeriod(dateString, {\n            width: \"narrow\",\n            context: \"formatting\",\n          })\n        );\n\n      case \"aaaaa\":\n        return match.dayPeriod(dateString, {\n          width: \"narrow\",\n          context: \"formatting\",\n        });\n      case \"aaaa\":\n      default:\n        return (\n          match.dayPeriod(dateString, {\n            width: \"wide\",\n            context: \"formatting\",\n          }) ||\n          match.dayPeriod(dateString, {\n            width: \"abbreviated\",\n            context: \"formatting\",\n          }) ||\n          match.dayPeriod(dateString, {\n            width: \"narrow\",\n            context: \"formatting\",\n          })\n        );\n    }\n  }\n\n  set(date, _flags, value) {\n    date.setHours(dayPeriodEnumToHours(value), 0, 0, 0);\n    return date;\n  }\n\n  incompatibleTokens = [\"b\", \"B\", \"H\", \"k\", \"t\", \"T\"];\n}\n","import { Parser } from \"../Parser.js\";\n\nimport { dayPeriodEnumToHours } from \"../utils.js\";\n\nexport class AMPMMidnightParser extends Parser {\n  priority = 80;\n\n  parse(dateString, token, match) {\n    switch (token) {\n      case \"b\":\n      case \"bb\":\n      case \"bbb\":\n        return (\n          match.dayPeriod(dateString, {\n            width: \"abbreviated\",\n            context: \"formatting\",\n          }) ||\n          match.dayPeriod(dateString, {\n            width: \"narrow\",\n            context: \"formatting\",\n          })\n        );\n\n      case \"bbbbb\":\n        return match.dayPeriod(dateString, {\n          width: \"narrow\",\n          context: \"formatting\",\n        });\n      case \"bbbb\":\n      default:\n        return (\n          match.dayPeriod(dateString, {\n            width: \"wide\",\n            context: \"formatting\",\n          }) ||\n          match.dayPeriod(dateString, {\n            width: \"abbreviated\",\n            context: \"formatting\",\n          }) ||\n          match.dayPeriod(dateString, {\n            width: \"narrow\",\n            context: \"formatting\",\n          })\n        );\n    }\n  }\n\n  set(date, _flags, value) {\n    date.setHours(dayPeriodEnumToHours(value), 0, 0, 0);\n    return date;\n  }\n\n  incompatibleTokens = [\"a\", \"B\", \"H\", \"k\", \"t\", \"T\"];\n}\n","import { Parser } from \"../Parser.js\";\n\nimport { dayPeriodEnumToHours } from \"../utils.js\";\n\n// in the morning, in the afternoon, in the evening, at night\nexport class DayPeriodParser extends Parser {\n  priority = 80;\n\n  parse(dateString, token, match) {\n    switch (token) {\n      case \"B\":\n      case \"BB\":\n      case \"BBB\":\n        return (\n          match.dayPeriod(dateString, {\n            width: \"abbreviated\",\n            context: \"formatting\",\n          }) ||\n          match.dayPeriod(dateString, {\n            width: \"narrow\",\n            context: \"formatting\",\n          })\n        );\n\n      case \"BBBBB\":\n        return match.dayPeriod(dateString, {\n          width: \"narrow\",\n          context: \"formatting\",\n        });\n      case \"BBBB\":\n      default:\n        return (\n          match.dayPeriod(dateString, {\n            width: \"wide\",\n            context: \"formatting\",\n          }) ||\n          match.dayPeriod(dateString, {\n            width: \"abbreviated\",\n            context: \"formatting\",\n          }) ||\n          match.dayPeriod(dateString, {\n            width: \"narrow\",\n            context: \"formatting\",\n          })\n        );\n    }\n  }\n\n  set(date, _flags, value) {\n    date.setHours(dayPeriodEnumToHours(value), 0, 0, 0);\n    return date;\n  }\n\n  incompatibleTokens = [\"a\", \"b\", \"t\", \"T\"];\n}\n","import { numericPatterns } from \"../constants.js\";\nimport { Parser } from \"../Parser.js\";\n\nimport { parseNDigits, parseNumericPattern } from \"../utils.js\";\n\nexport class Hour1to12Parser extends Parser {\n  priority = 70;\n\n  parse(dateString, token, match) {\n    switch (token) {\n      case \"h\":\n        return parseNumericPattern(numericPatterns.hour12h, dateString);\n      case \"ho\":\n        return match.ordinalNumber(dateString, { unit: \"hour\" });\n      default:\n        return parseNDigits(token.length, dateString);\n    }\n  }\n\n  validate(_date, value) {\n    return value >= 1 && value <= 12;\n  }\n\n  set(date, _flags, value) {\n    const isPM = date.getHours() >= 12;\n    if (isPM && value < 12) {\n      date.setHours(value + 12, 0, 0, 0);\n    } else if (!isPM && value === 12) {\n      date.setHours(0, 0, 0, 0);\n    } else {\n      date.setHours(value, 0, 0, 0);\n    }\n    return date;\n  }\n\n  incompatibleTokens = [\"H\", \"K\", \"k\", \"t\", \"T\"];\n}\n","import { numericPatterns } from \"../constants.js\";\nimport { Parser } from \"../Parser.js\";\n\nimport { parseNDigits, parseNumericPattern } from \"../utils.js\";\n\nexport class Hour0to23Parser extends Parser {\n  priority = 70;\n\n  parse(dateString, token, match) {\n    switch (token) {\n      case \"H\":\n        return parseNumericPattern(numericPatterns.hour23h, dateString);\n      case \"Ho\":\n        return match.ordinalNumber(dateString, { unit: \"hour\" });\n      default:\n        return parseNDigits(token.length, dateString);\n    }\n  }\n\n  validate(_date, value) {\n    return value >= 0 && value <= 23;\n  }\n\n  set(date, _flags, value) {\n    date.setHours(value, 0, 0, 0);\n    return date;\n  }\n\n  incompatibleTokens = [\"a\", \"b\", \"h\", \"K\", \"k\", \"t\", \"T\"];\n}\n","import { numericPatterns } from \"../constants.js\";\nimport { Parser } from \"../Parser.js\";\n\nimport { parseNDigits, parseNumericPattern } from \"../utils.js\";\n\nexport class Hour0To11Parser extends Parser {\n  priority = 70;\n\n  parse(dateString, token, match) {\n    switch (token) {\n      case \"K\":\n        return parseNumericPattern(numericPatterns.hour11h, dateString);\n      case \"Ko\":\n        return match.ordinalNumber(dateString, { unit: \"hour\" });\n      default:\n        return parseNDigits(token.length, dateString);\n    }\n  }\n\n  validate(_date, value) {\n    return value >= 0 && value <= 11;\n  }\n\n  set(date, _flags, value) {\n    const isPM = date.getHours() >= 12;\n    if (isPM && value < 12) {\n      date.setHours(value + 12, 0, 0, 0);\n    } else {\n      date.setHours(value, 0, 0, 0);\n    }\n    return date;\n  }\n\n  incompatibleTokens = [\"h\", \"H\", \"k\", \"t\", \"T\"];\n}\n","import { numericPatterns } from \"../constants.js\";\nimport { Parser } from \"../Parser.js\";\n\nimport { parseNDigits, parseNumericPattern } from \"../utils.js\";\n\nexport class Hour1To24Parser extends Parser {\n  priority = 70;\n\n  parse(dateString, token, match) {\n    switch (token) {\n      case \"k\":\n        return parseNumericPattern(numericPatterns.hour24h, dateString);\n      case \"ko\":\n        return match.ordinalNumber(dateString, { unit: \"hour\" });\n      default:\n        return parseNDigits(token.length, dateString);\n    }\n  }\n\n  validate(_date, value) {\n    return value >= 1 && value <= 24;\n  }\n\n  set(date, _flags, value) {\n    const hours = value <= 24 ? value % 24 : value;\n    date.setHours(hours, 0, 0, 0);\n    return date;\n  }\n\n  incompatibleTokens = [\"a\", \"b\", \"h\", \"H\", \"K\", \"t\", \"T\"];\n}\n","import { numericPatterns } from \"../constants.js\";\nimport { Parser } from \"../Parser.js\";\n\nimport { parseNDigits, parseNumericPattern } from \"../utils.js\";\n\nexport class MinuteParser extends Parser {\n  priority = 60;\n\n  parse(dateString, token, match) {\n    switch (token) {\n      case \"m\":\n        return parseNumericPattern(numericPatterns.minute, dateString);\n      case \"mo\":\n        return match.ordinalNumber(dateString, { unit: \"minute\" });\n      default:\n        return parseNDigits(token.length, dateString);\n    }\n  }\n\n  validate(_date, value) {\n    return value >= 0 && value <= 59;\n  }\n\n  set(date, _flags, value) {\n    date.setMinutes(value, 0, 0);\n    return date;\n  }\n\n  incompatibleTokens = [\"t\", \"T\"];\n}\n","import { numericPatterns } from \"../constants.js\";\nimport { Parser } from \"../Parser.js\";\n\nimport { parseNDigits, parseNumericPattern } from \"../utils.js\";\n\nexport class SecondParser extends Parser {\n  priority = 50;\n\n  parse(dateString, token, match) {\n    switch (token) {\n      case \"s\":\n        return parseNumericPattern(numericPatterns.second, dateString);\n      case \"so\":\n        return match.ordinalNumber(dateString, { unit: \"second\" });\n      default:\n        return parseNDigits(token.length, dateString);\n    }\n  }\n\n  validate(_date, value) {\n    return value >= 0 && value <= 59;\n  }\n\n  set(date, _flags, value) {\n    date.setSeconds(value, 0);\n    return date;\n  }\n\n  incompatibleTokens = [\"t\", \"T\"];\n}\n","import { Parser } from \"../Parser.js\";\n\nimport { mapValue, parseNDigits } from \"../utils.js\";\n\nexport class FractionOfSecondParser extends Parser {\n  priority = 30;\n\n  parse(dateString, token) {\n    const valueCallback = (value) =>\n      Math.trunc(value * Math.pow(10, -token.length + 3));\n    return mapValue(parseNDigits(token.length, dateString), valueCallback);\n  }\n\n  set(date, _flags, value) {\n    date.setMilliseconds(value);\n    return date;\n  }\n\n  incompatibleTokens = [\"t\", \"T\"];\n}\n","import { constructFrom } from \"../../../constructFrom.js\";\nimport { getTimezoneOffsetInMilliseconds } from \"../../../_lib/getTimezoneOffsetInMilliseconds.js\";\nimport { timezonePatterns } from \"../constants.js\";\nimport { Parser } from \"../Parser.js\";\n\nimport { parseTimezonePattern } from \"../utils.js\";\n\n// Timezone (ISO-8601. +00:00 is `'Z'`)\nexport class ISOTimezoneWithZParser extends Parser {\n  priority = 10;\n\n  parse(dateString, token) {\n    switch (token) {\n      case \"X\":\n        return parseTimezonePattern(\n          timezonePatterns.basicOptionalMinutes,\n          dateString,\n        );\n      case \"XX\":\n        return parseTimezonePattern(timezonePatterns.basic, dateString);\n      case \"XXXX\":\n        return parseTimezonePattern(\n          timezonePatterns.basicOptionalSeconds,\n          dateString,\n        );\n      case \"XXXXX\":\n        return parseTimezonePattern(\n          timezonePatterns.extendedOptionalSeconds,\n          dateString,\n        );\n      case \"XXX\":\n      default:\n        return parseTimezonePattern(timezonePatterns.extended, dateString);\n    }\n  }\n\n  set(date, flags, value) {\n    if (flags.timestampIsSet) return date;\n    return constructFrom(\n      date,\n      date.getTime() - getTimezoneOffsetInMilliseconds(date) - value,\n    );\n  }\n\n  incompatibleTokens = [\"t\", \"T\", \"x\"];\n}\n","import { constructFrom } from \"../../../constructFrom.js\";\nimport { getTimezoneOffsetInMilliseconds } from \"../../../_lib/getTimezoneOffsetInMilliseconds.js\";\nimport { timezonePatterns } from \"../constants.js\";\nimport { Parser } from \"../Parser.js\";\n\nimport { parseTimezonePattern } from \"../utils.js\";\n\n// Timezone (ISO-8601)\nexport class ISOTimezoneParser extends Parser {\n  priority = 10;\n\n  parse(dateString, token) {\n    switch (token) {\n      case \"x\":\n        return parseTimezonePattern(\n          timezonePatterns.basicOptionalMinutes,\n          dateString,\n        );\n      case \"xx\":\n        return parseTimezonePattern(timezonePatterns.basic, dateString);\n      case \"xxxx\":\n        return parseTimezonePattern(\n          timezonePatterns.basicOptionalSeconds,\n          dateString,\n        );\n      case \"xxxxx\":\n        return parseTimezonePattern(\n          timezonePatterns.extendedOptionalSeconds,\n          dateString,\n        );\n      case \"xxx\":\n      default:\n        return parseTimezonePattern(timezonePatterns.extended, dateString);\n    }\n  }\n\n  set(date, flags, value) {\n    if (flags.timestampIsSet) return date;\n    return constructFrom(\n      date,\n      date.getTime() - getTimezoneOffsetInMilliseconds(date) - value,\n    );\n  }\n\n  incompatibleTokens = [\"t\", \"T\", \"X\"];\n}\n","import { constructFrom } from \"../../../constructFrom.js\";\nimport { Parser } from \"../Parser.js\";\n\nimport { parseAnyDigitsSigned } from \"../utils.js\";\n\nexport class TimestampSecondsParser extends Parser {\n  priority = 40;\n\n  parse(dateString) {\n    return parseAnyDigitsSigned(dateString);\n  }\n\n  set(date, _flags, value) {\n    return [constructFrom(date, value * 1000), { timestampIsSet: true }];\n  }\n\n  incompatibleTokens = \"*\";\n}\n","import { constructFrom } from \"../../../constructFrom.js\";\nimport { Parser } from \"../Parser.js\";\n\nimport { parseAnyDigitsSigned } from \"../utils.js\";\n\nexport class TimestampMillisecondsParser extends Parser {\n  priority = 20;\n\n  parse(dateString) {\n    return parseAnyDigitsSigned(dateString);\n  }\n\n  set(date, _flags, value) {\n    return [constructFrom(date, value), { timestampIsSet: true }];\n  }\n\n  incompatibleTokens = \"*\";\n}\n","import { EraParser } from \"./parsers/EraParser.js\";\nimport { YearParser } from \"./parsers/YearParser.js\";\nimport { LocalWeekYearParser } from \"./parsers/LocalWeekYearParser.js\";\nimport { ISOWeekYearParser } from \"./parsers/ISOWeekYearParser.js\";\nimport { ExtendedYearParser } from \"./parsers/ExtendedYearParser.js\";\nimport { QuarterParser } from \"./parsers/QuarterParser.js\";\nimport { StandAloneQuarterParser } from \"./parsers/StandAloneQuarterParser.js\";\nimport { MonthParser } from \"./parsers/MonthParser.js\";\nimport { StandAloneMonthParser } from \"./parsers/StandAloneMonthParser.js\";\nimport { LocalWeekParser } from \"./parsers/LocalWeekParser.js\";\nimport { ISOWeekParser } from \"./parsers/ISOWeekParser.js\";\nimport { DateParser } from \"./parsers/DateParser.js\";\nimport { DayOfYearParser } from \"./parsers/DayOfYearParser.js\";\nimport { DayParser } from \"./parsers/DayParser.js\";\nimport { LocalDayParser } from \"./parsers/LocalDayParser.js\";\nimport { StandAloneLocalDayParser } from \"./parsers/StandAloneLocalDayParser.js\";\nimport { ISODayParser } from \"./parsers/ISODayParser.js\";\nimport { AMPMParser } from \"./parsers/AMPMParser.js\";\nimport { AMPMMidnightParser } from \"./parsers/AMPMMidnightParser.js\";\nimport { DayPeriodParser } from \"./parsers/DayPeriodParser.js\";\nimport { Hour1to12Parser } from \"./parsers/Hour1to12Parser.js\";\nimport { Hour0to23Parser } from \"./parsers/Hour0to23Parser.js\";\nimport { Hour0To11Parser } from \"./parsers/Hour0To11Parser.js\";\nimport { Hour1To24Parser } from \"./parsers/Hour1To24Parser.js\";\nimport { MinuteParser } from \"./parsers/MinuteParser.js\";\nimport { SecondParser } from \"./parsers/SecondParser.js\";\nimport { FractionOfSecondParser } from \"./parsers/FractionOfSecondParser.js\";\nimport { ISOTimezoneWithZParser } from \"./parsers/ISOTimezoneWithZParser.js\";\nimport { ISOTimezoneParser } from \"./parsers/ISOTimezoneParser.js\";\nimport { TimestampSecondsParser } from \"./parsers/TimestampSecondsParser.js\";\nimport { TimestampMillisecondsParser } from \"./parsers/TimestampMillisecondsParser.js\";\n\n/*\n * |     | Unit                           |     | Unit                           |\n * |-----|--------------------------------|-----|--------------------------------|\n * |  a  | AM, PM                         |  A* | Milliseconds in day            |\n * |  b  | AM, PM, noon, midnight         |  B  | Flexible day period            |\n * |  c  | Stand-alone local day of week  |  C* | Localized hour w/ day period   |\n * |  d  | Day of month                   |  D  | Day of year                    |\n * |  e  | Local day of week              |  E  | Day of week                    |\n * |  f  |                                |  F* | Day of week in month           |\n * |  g* | Modified Julian day            |  G  | Era                            |\n * |  h  | Hour [1-12]                    |  H  | Hour [0-23]                    |\n * |  i! | ISO day of week                |  I! | ISO week of year               |\n * |  j* | Localized hour w/ day period   |  J* | Localized hour w/o day period  |\n * |  k  | Hour [1-24]                    |  K  | Hour [0-11]                    |\n * |  l* | (deprecated)                   |  L  | Stand-alone month              |\n * |  m  | Minute                         |  M  | Month                          |\n * |  n  |                                |  N  |                                |\n * |  o! | Ordinal number modifier        |  O* | Timezone (GMT)                 |\n * |  p  |                                |  P  |                                |\n * |  q  | Stand-alone quarter            |  Q  | Quarter                        |\n * |  r* | Related Gregorian year         |  R! | ISO week-numbering year        |\n * |  s  | Second                         |  S  | Fraction of second             |\n * |  t! | Seconds timestamp              |  T! | Milliseconds timestamp         |\n * |  u  | Extended year                  |  U* | Cyclic year                    |\n * |  v* | Timezone (generic non-locat.)  |  V* | Timezone (location)            |\n * |  w  | Local week of year             |  W* | Week of month                  |\n * |  x  | Timezone (ISO-8601 w/o Z)      |  X  | Timezone (ISO-8601)            |\n * |  y  | Year (abs)                     |  Y  | Local week-numbering year      |\n * |  z* | Timezone (specific non-locat.) |  Z* | Timezone (aliases)             |\n *\n * Letters marked by * are not implemented but reserved by Unicode standard.\n *\n * Letters marked by ! are non-standard, but implemented by date-fns:\n * - `o` modifies the previous token to turn it into an ordinal (see `parse` docs)\n * - `i` is ISO day of week. For `i` and `ii` is returns numeric ISO week days,\n *   i.e. 7 for Sunday, 1 for Monday, etc.\n * - `I` is ISO week of year, as opposed to `w` which is local week of year.\n * - `R` is ISO week-numbering year, as opposed to `Y` which is local week-numbering year.\n *   `R` is supposed to be used in conjunction with `I` and `i`\n *   for universal ISO week-numbering date, whereas\n *   `Y` is supposed to be used in conjunction with `w` and `e`\n *   for week-numbering date specific to the locale.\n */\nexport const parsers = {\n  G: new EraParser(),\n  y: new YearParser(),\n  Y: new LocalWeekYearParser(),\n  R: new ISOWeekYearParser(),\n  u: new ExtendedYearParser(),\n  Q: new QuarterParser(),\n  q: new StandAloneQuarterParser(),\n  M: new MonthParser(),\n  L: new StandAloneMonthParser(),\n  w: new LocalWeekParser(),\n  I: new ISOWeekParser(),\n  d: new DateParser(),\n  D: new DayOfYearParser(),\n  E: new DayParser(),\n  e: new LocalDayParser(),\n  c: new StandAloneLocalDayParser(),\n  i: new ISODayParser(),\n  a: new AMPMParser(),\n  b: new AMPMMidnightParser(),\n  B: new DayPeriodParser(),\n  h: new Hour1to12Parser(),\n  H: new Hour0to23Parser(),\n  K: new Hour0To11Parser(),\n  k: new Hour1To24Parser(),\n  m: new MinuteParser(),\n  s: new SecondParser(),\n  S: new FractionOfSecondParser(),\n  X: new ISOTimezoneWithZParser(),\n  x: new ISOTimezoneParser(),\n  t: new TimestampSecondsParser(),\n  T: new TimestampMillisecondsParser(),\n};\n","import { defaultLocale } from \"./_lib/defaultLocale.js\";\nimport { longFormatters } from \"./_lib/format/longFormatters.js\";\nimport {\n  isProtectedDayOfYearToken,\n  isProtectedWeekYearToken,\n  warnOrThrowProtectedError,\n} from \"./_lib/protectedTokens.js\";\nimport { constructFrom } from \"./constructFrom.js\";\nimport { getDefaultOptions } from \"./getDefaultOptions.js\";\nimport { toDate } from \"./toDate.js\";\n\nimport { DateTimezoneSetter } from \"./parse/_lib/Setter.js\";\nimport { parsers } from \"./parse/_lib/parsers.js\";\n\n// Rexports of internal for libraries to use.\n// See: https://github.com/date-fns/date-fns/issues/3638#issuecomment-1877082874\nexport { longFormatters, parsers };\n\n/**\n * The {@link parse} function options.\n */\n\n// This RegExp consists of three parts separated by `|`:\n// - [yYQqMLwIdDecihHKkms]o matches any available ordinal number token\n//   (one of the certain letters followed by `o`)\n// - (\\w)\\1* matches any sequences of the same letter\n// - '' matches two quote characters in a row\n// - '(''|[^'])+('|$) matches anything surrounded by two quote characters ('),\n//   except a single quote symbol, which ends the sequence.\n//   Two quote characters do not end the sequence.\n//   If there is no matching single quote\n//   then the sequence will continue until the end of the string.\n// - . matches any single character unmatched by previous parts of the RegExps\nconst formattingTokensRegExp =\n  /[yYQqMLwIdDecihHKkms]o|(\\w)\\1*|''|'(''|[^'])+('|$)|./g;\n\n// This RegExp catches symbols escaped by quotes, and also\n// sequences of symbols P, p, and the combinations like `PPPPPPPppppp`\nconst longFormattingTokensRegExp = /P+p+|P+|p+|''|'(''|[^'])+('|$)|./g;\n\nconst escapedStringRegExp = /^'([^]*?)'?$/;\nconst doubleQuoteRegExp = /''/g;\n\nconst notWhitespaceRegExp = /\\S/;\nconst unescapedLatinCharacterRegExp = /[a-zA-Z]/;\n\n/**\n * @name parse\n * @category Common Helpers\n * @summary Parse the date.\n *\n * @description\n * Return the date parsed from string using the given format string.\n *\n * > ⚠️ Please note that the `format` tokens differ from Moment.js and other libraries.\n * > See: https://github.com/date-fns/date-fns/blob/master/docs/unicodeTokens.md\n *\n * The characters in the format string wrapped between two single quotes characters (') are escaped.\n * Two single quotes in a row, whether inside or outside a quoted sequence, represent a 'real' single quote.\n *\n * Format of the format string is based on Unicode Technical Standard #35:\n * https://www.unicode.org/reports/tr35/tr35-dates.html#Date_Field_Symbol_Table\n * with a few additions (see note 5 below the table).\n *\n * Not all tokens are compatible. Combinations that don't make sense or could lead to bugs are prohibited\n * and will throw `RangeError`. For example usage of 24-hour format token with AM/PM token will throw an exception:\n *\n * ```javascript\n * parse('23 AM', 'HH a', new Date())\n * //=> RangeError: The format string mustn't contain `HH` and `a` at the same time\n * ```\n *\n * See the compatibility table: https://docs.google.com/spreadsheets/d/e/2PACX-1vQOPU3xUhplll6dyoMmVUXHKl_8CRDs6_ueLmex3SoqwhuolkuN3O05l4rqx5h1dKX8eb46Ul-CCSrq/pubhtml?gid=0&single=true\n *\n * Accepted format string patterns:\n * | Unit                            |Prior| Pattern | Result examples                   | Notes |\n * |---------------------------------|-----|---------|-----------------------------------|-------|\n * | Era                             | 140 | G..GGG  | AD, BC                            |       |\n * |                                 |     | GGGG    | Anno Domini, Before Christ        | 2     |\n * |                                 |     | GGGGG   | A, B                              |       |\n * | Calendar year                   | 130 | y       | 44, 1, 1900, 2017, 9999           | 4     |\n * |                                 |     | yo      | 44th, 1st, 1900th, 9999999th      | 4,5   |\n * |                                 |     | yy      | 44, 01, 00, 17                    | 4     |\n * |                                 |     | yyy     | 044, 001, 123, 999                | 4     |\n * |                                 |     | yyyy    | 0044, 0001, 1900, 2017            | 4     |\n * |                                 |     | yyyyy   | ...                               | 2,4   |\n * | Local week-numbering year       | 130 | Y       | 44, 1, 1900, 2017, 9000           | 4     |\n * |                                 |     | Yo      | 44th, 1st, 1900th, 9999999th      | 4,5   |\n * |                                 |     | YY      | 44, 01, 00, 17                    | 4,6   |\n * |                                 |     | YYY     | 044, 001, 123, 999                | 4     |\n * |                                 |     | YYYY    | 0044, 0001, 1900, 2017            | 4,6   |\n * |                                 |     | YYYYY   | ...                               | 2,4   |\n * | ISO week-numbering year         | 130 | R       | -43, 1, 1900, 2017, 9999, -9999   | 4,5   |\n * |                                 |     | RR      | -43, 01, 00, 17                   | 4,5   |\n * |                                 |     | RRR     | -043, 001, 123, 999, -999         | 4,5   |\n * |                                 |     | RRRR    | -0043, 0001, 2017, 9999, -9999    | 4,5   |\n * |                                 |     | RRRRR   | ...                               | 2,4,5 |\n * | Extended year                   | 130 | u       | -43, 1, 1900, 2017, 9999, -999    | 4     |\n * |                                 |     | uu      | -43, 01, 99, -99                  | 4     |\n * |                                 |     | uuu     | -043, 001, 123, 999, -999         | 4     |\n * |                                 |     | uuuu    | -0043, 0001, 2017, 9999, -9999    | 4     |\n * |                                 |     | uuuuu   | ...                               | 2,4   |\n * | Quarter (formatting)            | 120 | Q       | 1, 2, 3, 4                        |       |\n * |                                 |     | Qo      | 1st, 2nd, 3rd, 4th                | 5     |\n * |                                 |     | QQ      | 01, 02, 03, 04                    |       |\n * |                                 |     | QQQ     | Q1, Q2, Q3, Q4                    |       |\n * |                                 |     | QQQQ    | 1st quarter, 2nd quarter, ...     | 2     |\n * |                                 |     | QQQQQ   | 1, 2, 3, 4                        | 4     |\n * | Quarter (stand-alone)           | 120 | q       | 1, 2, 3, 4                        |       |\n * |                                 |     | qo      | 1st, 2nd, 3rd, 4th                | 5     |\n * |                                 |     | qq      | 01, 02, 03, 04                    |       |\n * |                                 |     | qqq     | Q1, Q2, Q3, Q4                    |       |\n * |                                 |     | qqqq    | 1st quarter, 2nd quarter, ...     | 2     |\n * |                                 |     | qqqqq   | 1, 2, 3, 4                        | 3     |\n * | Month (formatting)              | 110 | M       | 1, 2, ..., 12                     |       |\n * |                                 |     | Mo      | 1st, 2nd, ..., 12th               | 5     |\n * |                                 |     | MM      | 01, 02, ..., 12                   |       |\n * |                                 |     | MMM     | Jan, Feb, ..., Dec                |       |\n * |                                 |     | MMMM    | January, February, ..., December  | 2     |\n * |                                 |     | MMMMM   | J, F, ..., D                      |       |\n * | Month (stand-alone)             | 110 | L       | 1, 2, ..., 12                     |       |\n * |                                 |     | Lo      | 1st, 2nd, ..., 12th               | 5     |\n * |                                 |     | LL      | 01, 02, ..., 12                   |       |\n * |                                 |     | LLL     | Jan, Feb, ..., Dec                |       |\n * |                                 |     | LLLL    | January, February, ..., December  | 2     |\n * |                                 |     | LLLLL   | J, F, ..., D                      |       |\n * | Local week of year              | 100 | w       | 1, 2, ..., 53                     |       |\n * |                                 |     | wo      | 1st, 2nd, ..., 53th               | 5     |\n * |                                 |     | ww      | 01, 02, ..., 53                   |       |\n * | ISO week of year                | 100 | I       | 1, 2, ..., 53                     | 5     |\n * |                                 |     | Io      | 1st, 2nd, ..., 53th               | 5     |\n * |                                 |     | II      | 01, 02, ..., 53                   | 5     |\n * | Day of month                    |  90 | d       | 1, 2, ..., 31                     |       |\n * |                                 |     | do      | 1st, 2nd, ..., 31st               | 5     |\n * |                                 |     | dd      | 01, 02, ..., 31                   |       |\n * | Day of year                     |  90 | D       | 1, 2, ..., 365, 366               | 7     |\n * |                                 |     | Do      | 1st, 2nd, ..., 365th, 366th       | 5     |\n * |                                 |     | DD      | 01, 02, ..., 365, 366             | 7     |\n * |                                 |     | DDD     | 001, 002, ..., 365, 366           |       |\n * |                                 |     | DDDD    | ...                               | 2     |\n * | Day of week (formatting)        |  90 | E..EEE  | Mon, Tue, Wed, ..., Sun           |       |\n * |                                 |     | EEEE    | Monday, Tuesday, ..., Sunday      | 2     |\n * |                                 |     | EEEEE   | M, T, W, T, F, S, S               |       |\n * |                                 |     | EEEEEE  | Mo, Tu, We, Th, Fr, Sa, Su        |       |\n * | ISO day of week (formatting)    |  90 | i       | 1, 2, 3, ..., 7                   | 5     |\n * |                                 |     | io      | 1st, 2nd, ..., 7th                | 5     |\n * |                                 |     | ii      | 01, 02, ..., 07                   | 5     |\n * |                                 |     | iii     | Mon, Tue, Wed, ..., Sun           | 5     |\n * |                                 |     | iiii    | Monday, Tuesday, ..., Sunday      | 2,5   |\n * |                                 |     | iiiii   | M, T, W, T, F, S, S               | 5     |\n * |                                 |     | iiiiii  | Mo, Tu, We, Th, Fr, Sa, Su        | 5     |\n * | Local day of week (formatting)  |  90 | e       | 2, 3, 4, ..., 1                   |       |\n * |                                 |     | eo      | 2nd, 3rd, ..., 1st                | 5     |\n * |                                 |     | ee      | 02, 03, ..., 01                   |       |\n * |                                 |     | eee     | Mon, Tue, Wed, ..., Sun           |       |\n * |                                 |     | eeee    | Monday, Tuesday, ..., Sunday      | 2     |\n * |                                 |     | eeeee   | M, T, W, T, F, S, S               |       |\n * |                                 |     | eeeeee  | Mo, Tu, We, Th, Fr, Sa, Su        |       |\n * | Local day of week (stand-alone) |  90 | c       | 2, 3, 4, ..., 1                   |       |\n * |                                 |     | co      | 2nd, 3rd, ..., 1st                | 5     |\n * |                                 |     | cc      | 02, 03, ..., 01                   |       |\n * |                                 |     | ccc     | Mon, Tue, Wed, ..., Sun           |       |\n * |                                 |     | cccc    | Monday, Tuesday, ..., Sunday      | 2     |\n * |                                 |     | ccccc   | M, T, W, T, F, S, S               |       |\n * |                                 |     | cccccc  | Mo, Tu, We, Th, Fr, Sa, Su        |       |\n * | AM, PM                          |  80 | a..aaa  | AM, PM                            |       |\n * |                                 |     | aaaa    | a.m., p.m.                        | 2     |\n * |                                 |     | aaaaa   | a, p                              |       |\n * | AM, PM, noon, midnight          |  80 | b..bbb  | AM, PM, noon, midnight            |       |\n * |                                 |     | bbbb    | a.m., p.m., noon, midnight        | 2     |\n * |                                 |     | bbbbb   | a, p, n, mi                       |       |\n * | Flexible day period             |  80 | B..BBB  | at night, in the morning, ...     |       |\n * |                                 |     | BBBB    | at night, in the morning, ...     | 2     |\n * |                                 |     | BBBBB   | at night, in the morning, ...     |       |\n * | Hour [1-12]                     |  70 | h       | 1, 2, ..., 11, 12                 |       |\n * |                                 |     | ho      | 1st, 2nd, ..., 11th, 12th         | 5     |\n * |                                 |     | hh      | 01, 02, ..., 11, 12               |       |\n * | Hour [0-23]                     |  70 | H       | 0, 1, 2, ..., 23                  |       |\n * |                                 |     | Ho      | 0th, 1st, 2nd, ..., 23rd          | 5     |\n * |                                 |     | HH      | 00, 01, 02, ..., 23               |       |\n * | Hour [0-11]                     |  70 | K       | 1, 2, ..., 11, 0                  |       |\n * |                                 |     | Ko      | 1st, 2nd, ..., 11th, 0th          | 5     |\n * |                                 |     | KK      | 01, 02, ..., 11, 00               |       |\n * | Hour [1-24]                     |  70 | k       | 24, 1, 2, ..., 23                 |       |\n * |                                 |     | ko      | 24th, 1st, 2nd, ..., 23rd         | 5     |\n * |                                 |     | kk      | 24, 01, 02, ..., 23               |       |\n * | Minute                          |  60 | m       | 0, 1, ..., 59                     |       |\n * |                                 |     | mo      | 0th, 1st, ..., 59th               | 5     |\n * |                                 |     | mm      | 00, 01, ..., 59                   |       |\n * | Second                          |  50 | s       | 0, 1, ..., 59                     |       |\n * |                                 |     | so      | 0th, 1st, ..., 59th               | 5     |\n * |                                 |     | ss      | 00, 01, ..., 59                   |       |\n * | Seconds timestamp               |  40 | t       | 512969520                         |       |\n * |                                 |     | tt      | ...                               | 2     |\n * | Fraction of second              |  30 | S       | 0, 1, ..., 9                      |       |\n * |                                 |     | SS      | 00, 01, ..., 99                   |       |\n * |                                 |     | SSS     | 000, 001, ..., 999                |       |\n * |                                 |     | SSSS    | ...                               | 2     |\n * | Milliseconds timestamp          |  20 | T       | 512969520900                      |       |\n * |                                 |     | TT      | ...                               | 2     |\n * | Timezone (ISO-8601 w/ Z)        |  10 | X       | -08, +0530, Z                     |       |\n * |                                 |     | XX      | -0800, +0530, Z                   |       |\n * |                                 |     | XXX     | -08:00, +05:30, Z                 |       |\n * |                                 |     | XXXX    | -0800, +0530, Z, +123456          | 2     |\n * |                                 |     | XXXXX   | -08:00, +05:30, Z, +12:34:56      |       |\n * | Timezone (ISO-8601 w/o Z)       |  10 | x       | -08, +0530, +00                   |       |\n * |                                 |     | xx      | -0800, +0530, +0000               |       |\n * |                                 |     | xxx     | -08:00, +05:30, +00:00            | 2     |\n * |                                 |     | xxxx    | -0800, +0530, +0000, +123456      |       |\n * |                                 |     | xxxxx   | -08:00, +05:30, +00:00, +12:34:56 |       |\n * | Long localized date             |  NA | P       | 05/29/1453                        | 5,8   |\n * |                                 |     | PP      | May 29, 1453                      |       |\n * |                                 |     | PPP     | May 29th, 1453                    |       |\n * |                                 |     | PPPP    | Sunday, May 29th, 1453            | 2,5,8 |\n * | Long localized time             |  NA | p       | 12:00 AM                          | 5,8   |\n * |                                 |     | pp      | 12:00:00 AM                       |       |\n * | Combination of date and time    |  NA | Pp      | 05/29/1453, 12:00 AM              |       |\n * |                                 |     | PPpp    | May 29, 1453, 12:00:00 AM         |       |\n * |                                 |     | PPPpp   | May 29th, 1453 at ...             |       |\n * |                                 |     | PPPPpp  | Sunday, May 29th, 1453 at ...     | 2,5,8 |\n * Notes:\n * 1. \"Formatting\" units (e.g. formatting quarter) in the default en-US locale\n *    are the same as \"stand-alone\" units, but are different in some languages.\n *    \"Formatting\" units are declined according to the rules of the language\n *    in the context of a date. \"Stand-alone\" units are always nominative singular.\n *    In `format` function, they will produce different result:\n *\n *    `format(new Date(2017, 10, 6), 'do LLLL', {locale: cs}) //=> '6. listopad'`\n *\n *    `format(new Date(2017, 10, 6), 'do MMMM', {locale: cs}) //=> '6. listopadu'`\n *\n *    `parse` will try to match both formatting and stand-alone units interchangeably.\n *\n * 2. Any sequence of the identical letters is a pattern, unless it is escaped by\n *    the single quote characters (see below).\n *    If the sequence is longer than listed in table:\n *    - for numerical units (`yyyyyyyy`) `parse` will try to match a number\n *      as wide as the sequence\n *    - for text units (`MMMMMMMM`) `parse` will try to match the widest variation of the unit.\n *      These variations are marked with \"2\" in the last column of the table.\n *\n * 3. `QQQQQ` and `qqqqq` could be not strictly numerical in some locales.\n *    These tokens represent the shortest form of the quarter.\n *\n * 4. The main difference between `y` and `u` patterns are B.C. years:\n *\n *    | Year | `y` | `u` |\n *    |------|-----|-----|\n *    | AC 1 |   1 |   1 |\n *    | BC 1 |   1 |   0 |\n *    | BC 2 |   2 |  -1 |\n *\n *    Also `yy` will try to guess the century of two digit year by proximity with `referenceDate`:\n *\n *    `parse('50', 'yy', new Date(2018, 0, 1)) //=> Sat Jan 01 2050 00:00:00`\n *\n *    `parse('75', 'yy', new Date(2018, 0, 1)) //=> Wed Jan 01 1975 00:00:00`\n *\n *    while `uu` will just assign the year as is:\n *\n *    `parse('50', 'uu', new Date(2018, 0, 1)) //=> Sat Jan 01 0050 00:00:00`\n *\n *    `parse('75', 'uu', new Date(2018, 0, 1)) //=> Tue Jan 01 0075 00:00:00`\n *\n *    The same difference is true for local and ISO week-numbering years (`Y` and `R`),\n *    except local week-numbering years are dependent on `options.weekStartsOn`\n *    and `options.firstWeekContainsDate` (compare [setISOWeekYear](https://date-fns.org/docs/setISOWeekYear)\n *    and [setWeekYear](https://date-fns.org/docs/setWeekYear)).\n *\n * 5. These patterns are not in the Unicode Technical Standard #35:\n *    - `i`: ISO day of week\n *    - `I`: ISO week of year\n *    - `R`: ISO week-numbering year\n *    - `o`: ordinal number modifier\n *    - `P`: long localized date\n *    - `p`: long localized time\n *\n * 6. `YY` and `YYYY` tokens represent week-numbering years but they are often confused with years.\n *    You should enable `options.useAdditionalWeekYearTokens` to use them. See: https://github.com/date-fns/date-fns/blob/master/docs/unicodeTokens.md\n *\n * 7. `D` and `DD` tokens represent days of the year but they are often confused with days of the month.\n *    You should enable `options.useAdditionalDayOfYearTokens` to use them. See: https://github.com/date-fns/date-fns/blob/master/docs/unicodeTokens.md\n *\n * 8. `P+` tokens do not have a defined priority since they are merely aliases to other tokens based\n *    on the given locale.\n *\n *    using `en-US` locale: `P` => `MM/dd/yyyy`\n *    using `en-US` locale: `p` => `hh:mm a`\n *    using `pt-BR` locale: `P` => `dd/MM/yyyy`\n *    using `pt-BR` locale: `p` => `HH:mm`\n *\n * Values will be assigned to the date in the descending order of its unit's priority.\n * Units of an equal priority overwrite each other in the order of appearance.\n *\n * If no values of higher priority are parsed (e.g. when parsing string 'January 1st' without a year),\n * the values will be taken from 3rd argument `referenceDate` which works as a context of parsing.\n *\n * `referenceDate` must be passed for correct work of the function.\n * If you're not sure which `referenceDate` to supply, create a new instance of Date:\n * `parse('02/11/2014', 'MM/dd/yyyy', new Date())`\n * In this case parsing will be done in the context of the current date.\n * If `referenceDate` is `Invalid Date` or a value not convertible to valid `Date`,\n * then `Invalid Date` will be returned.\n *\n * The result may vary by locale.\n *\n * If `formatString` matches with `dateString` but does not provides tokens, `referenceDate` will be returned.\n *\n * If parsing failed, `Invalid Date` will be returned.\n * Invalid Date is a Date, whose time value is NaN.\n * Time value of Date: http://es5.github.io/#x15.9.1.1\n *\n * @typeParam DateType - The `Date` type, the function operates on. Gets inferred from passed arguments. Allows to use extensions like [`UTCDate`](https://github.com/date-fns/utc).\n * @typeParam ResultDate - The result `Date` type, it is the type returned from the context function if it is passed, or inferred from the arguments.\n *\n * @param dateStr - The string to parse\n * @param formatStr - The string of tokens\n * @param referenceDate - defines values missing from the parsed dateString\n * @param options - An object with options.\n *   see: https://github.com/date-fns/date-fns/blob/master/docs/unicodeTokens.md\n *   see: https://github.com/date-fns/date-fns/blob/master/docs/unicodeTokens.md\n *\n * @returns The parsed date\n *\n * @throws `options.locale` must contain `match` property\n * @throws use `yyyy` instead of `YYYY` for formatting years using [format provided] to the input [input provided]; see: https://github.com/date-fns/date-fns/blob/master/docs/unicodeTokens.md\n * @throws use `yy` instead of `YY` for formatting years using [format provided] to the input [input provided]; see: https://github.com/date-fns/date-fns/blob/master/docs/unicodeTokens.md\n * @throws use `d` instead of `D` for formatting days of the month using [format provided] to the input [input provided]; see: https://github.com/date-fns/date-fns/blob/master/docs/unicodeTokens.md\n * @throws use `dd` instead of `DD` for formatting days of the month using [format provided] to the input [input provided]; see: https://github.com/date-fns/date-fns/blob/master/docs/unicodeTokens.md\n * @throws format string contains an unescaped latin alphabet character\n *\n * @example\n * // Parse 11 February 2014 from middle-endian format:\n * var result = parse('02/11/2014', 'MM/dd/yyyy', new Date())\n * //=> Tue Feb 11 2014 00:00:00\n *\n * @example\n * // Parse 28th of February in Esperanto locale in the context of 2010 year:\n * import eo from 'date-fns/locale/eo'\n * var result = parse('28-a de februaro', \"do 'de' MMMM\", new Date(2010, 0, 1), {\n *   locale: eo\n * })\n * //=> Sun Feb 28 2010 00:00:00\n */\nexport function parse(dateStr, formatStr, referenceDate, options) {\n  const invalidDate = () => constructFrom(options?.in || referenceDate, NaN);\n  const defaultOptions = getDefaultOptions();\n  const locale = options?.locale ?? defaultOptions.locale ?? defaultLocale;\n\n  const firstWeekContainsDate =\n    options?.firstWeekContainsDate ??\n    options?.locale?.options?.firstWeekContainsDate ??\n    defaultOptions.firstWeekContainsDate ??\n    defaultOptions.locale?.options?.firstWeekContainsDate ??\n    1;\n\n  const weekStartsOn =\n    options?.weekStartsOn ??\n    options?.locale?.options?.weekStartsOn ??\n    defaultOptions.weekStartsOn ??\n    defaultOptions.locale?.options?.weekStartsOn ??\n    0;\n\n  if (!formatStr)\n    return dateStr ? invalidDate() : toDate(referenceDate, options?.in);\n\n  const subFnOptions = {\n    firstWeekContainsDate,\n    weekStartsOn,\n    locale,\n  };\n\n  // If timezone isn't specified, it will try to use the context or\n  // the reference date and fallback to the system time zone.\n  const setters = [new DateTimezoneSetter(options?.in, referenceDate)];\n\n  const tokens = formatStr\n    .match(longFormattingTokensRegExp)\n    .map((substring) => {\n      const firstCharacter = substring[0];\n      if (firstCharacter in longFormatters) {\n        const longFormatter = longFormatters[firstCharacter];\n        return longFormatter(substring, locale.formatLong);\n      }\n      return substring;\n    })\n    .join(\"\")\n    .match(formattingTokensRegExp);\n\n  const usedTokens = [];\n\n  for (let token of tokens) {\n    if (\n      !options?.useAdditionalWeekYearTokens &&\n      isProtectedWeekYearToken(token)\n    ) {\n      warnOrThrowProtectedError(token, formatStr, dateStr);\n    }\n    if (\n      !options?.useAdditionalDayOfYearTokens &&\n      isProtectedDayOfYearToken(token)\n    ) {\n      warnOrThrowProtectedError(token, formatStr, dateStr);\n    }\n\n    const firstCharacter = token[0];\n    const parser = parsers[firstCharacter];\n    if (parser) {\n      const { incompatibleTokens } = parser;\n      if (Array.isArray(incompatibleTokens)) {\n        const incompatibleToken = usedTokens.find(\n          (usedToken) =>\n            incompatibleTokens.includes(usedToken.token) ||\n            usedToken.token === firstCharacter,\n        );\n        if (incompatibleToken) {\n          throw new RangeError(\n            `The format string mustn't contain \\`${incompatibleToken.fullToken}\\` and \\`${token}\\` at the same time`,\n          );\n        }\n      } else if (parser.incompatibleTokens === \"*\" && usedTokens.length > 0) {\n        throw new RangeError(\n          `The format string mustn't contain \\`${token}\\` and any other token at the same time`,\n        );\n      }\n\n      usedTokens.push({ token: firstCharacter, fullToken: token });\n\n      const parseResult = parser.run(\n        dateStr,\n        token,\n        locale.match,\n        subFnOptions,\n      );\n\n      if (!parseResult) {\n        return invalidDate();\n      }\n\n      setters.push(parseResult.setter);\n\n      dateStr = parseResult.rest;\n    } else {\n      if (firstCharacter.match(unescapedLatinCharacterRegExp)) {\n        throw new RangeError(\n          \"Format string contains an unescaped latin alphabet character `\" +\n            firstCharacter +\n            \"`\",\n        );\n      }\n\n      // Replace two single quote characters with one single quote character\n      if (token === \"''\") {\n        token = \"'\";\n      } else if (firstCharacter === \"'\") {\n        token = cleanEscapedString(token);\n      }\n\n      // Cut token from string, or, if string doesn't match the token, return Invalid Date\n      if (dateStr.indexOf(token) === 0) {\n        dateStr = dateStr.slice(token.length);\n      } else {\n        return invalidDate();\n      }\n    }\n  }\n\n  // Check if the remaining input contains something other than whitespace\n  if (dateStr.length > 0 && notWhitespaceRegExp.test(dateStr)) {\n    return invalidDate();\n  }\n\n  const uniquePrioritySetters = setters\n    .map((setter) => setter.priority)\n    .sort((a, b) => b - a)\n    .filter((priority, index, array) => array.indexOf(priority) === index)\n    .map((priority) =>\n      setters\n        .filter((setter) => setter.priority === priority)\n        .sort((a, b) => b.subPriority - a.subPriority),\n    )\n    .map((setterArray) => setterArray[0]);\n\n  let date = toDate(referenceDate, options?.in);\n\n  if (isNaN(+date)) return invalidDate();\n\n  const flags = {};\n  for (const setter of uniquePrioritySetters) {\n    if (!setter.validate(date, subFnOptions)) {\n      return invalidDate();\n    }\n\n    const result = setter.set(date, flags, subFnOptions);\n    // Result is tuple (date, flags)\n    if (Array.isArray(result)) {\n      date = result[0];\n      Object.assign(flags, result[1]);\n      // Result is date\n    } else {\n      date = result;\n    }\n  }\n\n  return date;\n}\n\nfunction cleanEscapedString(input) {\n  return input.match(escapedStringRegExp)[1].replace(doubleQuoteRegExp, \"'\");\n}\n\n// Fallback for modularized imports:\nexport default parse;\n","import { toDate } from \"./toDate.js\";\n\n/**\n * The {@link startOfHour} function options.\n */\n\n/**\n * @name startOfHour\n * @category Hour Helpers\n * @summary Return the start of an hour for the given date.\n *\n * @description\n * Return the start of an hour for the given date.\n * The result will be in the local timezone.\n *\n * @typeParam DateType - The `Date` type, the function operates on. Gets inferred from passed arguments. Allows to use extensions like [`UTCDate`](https://github.com/date-fns/utc).\n * @typeParam ResultDate - The result `Date` type, it is the type returned from the context function if it is passed, or inferred from the arguments.\n *\n * @param date - The original date\n * @param options - An object with options\n *\n * @returns The start of an hour\n *\n * @example\n * // The start of an hour for 2 September 2014 11:55:00:\n * const result = startOfHour(new Date(2014, 8, 2, 11, 55))\n * //=> Tue Sep 02 2014 11:00:00\n */\nexport function startOfHour(date, options) {\n  const _date = toDate(date, options?.in);\n  _date.setMinutes(0, 0, 0);\n  return _date;\n}\n\n// Fallback for modularized imports:\nexport default startOfHour;\n","import { toDate } from \"./toDate.js\";\n\n/**\n * The {@link startOfMinute} function options.\n */\n\n/**\n * @name startOfMinute\n * @category Minute Helpers\n * @summary Return the start of a minute for the given date.\n *\n * @description\n * Return the start of a minute for the given date.\n * The result will be in the local timezone.\n *\n * @typeParam DateType - The `Date` type, the function operates on. Gets inferred from passed arguments. Allows to use extensions like [`UTCDate`](https://github.com/date-fns/utc).\n * @typeParam ResultDate - The result `Date` type, it is the type returned from the context function if it is passed, or inferred from the arguments.\n *\n * @param date - The original date\n * @param options - An object with options\n *\n * @returns The start of a minute\n *\n * @example\n * // The start of a minute for 1 December 2014 22:15:45.400:\n * const result = startOfMinute(new Date(2014, 11, 1, 22, 15, 45, 400))\n * //=> Mon Dec 01 2014 22:15:00\n */\nexport function startOfMinute(date, options) {\n  const date_ = toDate(date, options?.in);\n  date_.setSeconds(0, 0);\n  return date_;\n}\n\n// Fallback for modularized imports:\nexport default startOfMinute;\n","import { toDate } from \"./toDate.js\";\n\n/**\n * The {@link startOfSecond} function options.\n */\n\n/**\n * @name startOfSecond\n * @category Second Helpers\n * @summary Return the start of a second for the given date.\n *\n * @description\n * Return the start of a second for the given date.\n * The result will be in the local timezone.\n *\n * @typeParam DateType - The `Date` type, the function operates on. Gets inferred from passed arguments. Allows to use extensions like [`UTCDate`](https://github.com/date-fns/utc).\n * @typeParam ResultDate - The result `Date` type, it is the type returned from the context function if it is passed, or inferred from the arguments.\n *\n * @param date - The original date\n * @param options - The options\n *\n * @returns The start of a second\n *\n * @example\n * // The start of a second for 1 December 2014 22:15:45.400:\n * const result = startOfSecond(new Date(2014, 11, 1, 22, 15, 45, 400))\n * //=> Mon Dec 01 2014 22:15:45.000\n */\nexport function startOfSecond(date, options) {\n  const date_ = toDate(date, options?.in);\n  date_.setMilliseconds(0);\n  return date_;\n}\n\n// Fallback for modularized imports:\nexport default startOfSecond;\n","import {\n  millisecondsInHour,\n  millisecondsInMinute,\n} from \"./constants.js\";\nimport { constructFrom } from \"./constructFrom.js\";\nimport { toDate } from \"./toDate.js\";\n\n/**\n * The {@link parseISO} function options.\n */\n\n/**\n * @name parseISO\n * @category Common Helpers\n * @summary Parse ISO string\n *\n * @description\n * Parse the given string in ISO 8601 format and return an instance of Date.\n *\n * Function accepts complete ISO 8601 formats as well as partial implementations.\n * ISO 8601: http://en.wikipedia.org/wiki/ISO_8601\n *\n * If the argument isn't a string, the function cannot parse the string or\n * the values are invalid, it returns Invalid Date.\n *\n * @typeParam DateType - The `Date` type, the function operates on. Gets inferred from passed arguments. Allows to use extensions like [`UTCDate`](https://github.com/date-fns/utc).\n * @typeParam ResultDate - The result `Date` type, it is the type returned from the context function if it is passed, or inferred from the arguments.\n *\n * @param argument - The value to convert\n * @param options - An object with options\n *\n * @returns The parsed date in the local time zone\n *\n * @example\n * // Convert string '2014-02-11T11:30:30' to date:\n * const result = parseISO('2014-02-11T11:30:30')\n * //=> Tue Feb 11 2014 11:30:30\n *\n * @example\n * // Convert string '+02014101' to date,\n * // if the additional number of digits in the extended year format is 1:\n * const result = parseISO('+02014101', { additionalDigits: 1 })\n * //=> Fri Apr 11 2014 00:00:00\n */\nexport function parseISO(argument, options) {\n  const invalidDate = () => constructFrom(options?.in, NaN);\n\n  const additionalDigits = options?.additionalDigits ?? 2;\n  const dateStrings = splitDateString(argument);\n\n  let date;\n  if (dateStrings.date) {\n    const parseYearResult = parseYear(dateStrings.date, additionalDigits);\n    date = parseDate(parseYearResult.restDateString, parseYearResult.year);\n  }\n\n  if (!date || isNaN(+date)) return invalidDate();\n\n  const timestamp = +date;\n  let time = 0;\n  let offset;\n\n  if (dateStrings.time) {\n    time = parseTime(dateStrings.time);\n    if (isNaN(time)) return invalidDate();\n  }\n\n  if (dateStrings.timezone) {\n    offset = parseTimezone(dateStrings.timezone);\n    if (isNaN(offset)) return invalidDate();\n  } else {\n    const tmpDate = new Date(timestamp + time);\n    const result = toDate(0, options?.in);\n    result.setFullYear(\n      tmpDate.getUTCFullYear(),\n      tmpDate.getUTCMonth(),\n      tmpDate.getUTCDate(),\n    );\n    result.setHours(\n      tmpDate.getUTCHours(),\n      tmpDate.getUTCMinutes(),\n      tmpDate.getUTCSeconds(),\n      tmpDate.getUTCMilliseconds(),\n    );\n    return result;\n  }\n\n  return toDate(timestamp + time + offset, options?.in);\n}\n\nconst patterns = {\n  dateTimeDelimiter: /[T ]/,\n  timeZoneDelimiter: /[Z ]/i,\n  timezone: /([Z+-].*)$/,\n};\n\nconst dateRegex =\n  /^-?(?:(\\d{3})|(\\d{2})(?:-?(\\d{2}))?|W(\\d{2})(?:-?(\\d{1}))?|)$/;\nconst timeRegex =\n  /^(\\d{2}(?:[.,]\\d*)?)(?::?(\\d{2}(?:[.,]\\d*)?))?(?::?(\\d{2}(?:[.,]\\d*)?))?$/;\nconst timezoneRegex = /^([+-])(\\d{2})(?::?(\\d{2}))?$/;\n\nfunction splitDateString(dateString) {\n  const dateStrings = {};\n  const array = dateString.split(patterns.dateTimeDelimiter);\n  let timeString;\n\n  // The regex match should only return at maximum two array elements.\n  // [date], [time], or [date, time].\n  if (array.length > 2) {\n    return dateStrings;\n  }\n\n  if (/:/.test(array[0])) {\n    timeString = array[0];\n  } else {\n    dateStrings.date = array[0];\n    timeString = array[1];\n    if (patterns.timeZoneDelimiter.test(dateStrings.date)) {\n      dateStrings.date = dateString.split(patterns.timeZoneDelimiter)[0];\n      timeString = dateString.substr(\n        dateStrings.date.length,\n        dateString.length,\n      );\n    }\n  }\n\n  if (timeString) {\n    const token = patterns.timezone.exec(timeString);\n    if (token) {\n      dateStrings.time = timeString.replace(token[1], \"\");\n      dateStrings.timezone = token[1];\n    } else {\n      dateStrings.time = timeString;\n    }\n  }\n\n  return dateStrings;\n}\n\nfunction parseYear(dateString, additionalDigits) {\n  const regex = new RegExp(\n    \"^(?:(\\\\d{4}|[+-]\\\\d{\" +\n      (4 + additionalDigits) +\n      \"})|(\\\\d{2}|[+-]\\\\d{\" +\n      (2 + additionalDigits) +\n      \"})$)\",\n  );\n\n  const captures = dateString.match(regex);\n  // Invalid ISO-formatted year\n  if (!captures) return { year: NaN, restDateString: \"\" };\n\n  const year = captures[1] ? parseInt(captures[1]) : null;\n  const century = captures[2] ? parseInt(captures[2]) : null;\n\n  // either year or century is null, not both\n  return {\n    year: century === null ? year : century * 100,\n    restDateString: dateString.slice((captures[1] || captures[2]).length),\n  };\n}\n\nfunction parseDate(dateString, year) {\n  // Invalid ISO-formatted year\n  if (year === null) return new Date(NaN);\n\n  const captures = dateString.match(dateRegex);\n  // Invalid ISO-formatted string\n  if (!captures) return new Date(NaN);\n\n  const isWeekDate = !!captures[4];\n  const dayOfYear = parseDateUnit(captures[1]);\n  const month = parseDateUnit(captures[2]) - 1;\n  const day = parseDateUnit(captures[3]);\n  const week = parseDateUnit(captures[4]);\n  const dayOfWeek = parseDateUnit(captures[5]) - 1;\n\n  if (isWeekDate) {\n    if (!validateWeekDate(year, week, dayOfWeek)) {\n      return new Date(NaN);\n    }\n    return dayOfISOWeekYear(year, week, dayOfWeek);\n  } else {\n    const date = new Date(0);\n    if (\n      !validateDate(year, month, day) ||\n      !validateDayOfYearDate(year, dayOfYear)\n    ) {\n      return new Date(NaN);\n    }\n    date.setUTCFullYear(year, month, Math.max(dayOfYear, day));\n    return date;\n  }\n}\n\nfunction parseDateUnit(value) {\n  return value ? parseInt(value) : 1;\n}\n\nfunction parseTime(timeString) {\n  const captures = timeString.match(timeRegex);\n  if (!captures) return NaN; // Invalid ISO-formatted time\n\n  const hours = parseTimeUnit(captures[1]);\n  const minutes = parseTimeUnit(captures[2]);\n  const seconds = parseTimeUnit(captures[3]);\n\n  if (!validateTime(hours, minutes, seconds)) {\n    return NaN;\n  }\n\n  return (\n    hours * millisecondsInHour + minutes * millisecondsInMinute + seconds * 1000\n  );\n}\n\nfunction parseTimeUnit(value) {\n  return (value && parseFloat(value.replace(\",\", \".\"))) || 0;\n}\n\nfunction parseTimezone(timezoneString) {\n  if (timezoneString === \"Z\") return 0;\n\n  const captures = timezoneString.match(timezoneRegex);\n  if (!captures) return 0;\n\n  const sign = captures[1] === \"+\" ? -1 : 1;\n  const hours = parseInt(captures[2]);\n  const minutes = (captures[3] && parseInt(captures[3])) || 0;\n\n  if (!validateTimezone(hours, minutes)) {\n    return NaN;\n  }\n\n  return sign * (hours * millisecondsInHour + minutes * millisecondsInMinute);\n}\n\nfunction dayOfISOWeekYear(isoWeekYear, week, day) {\n  const date = new Date(0);\n  date.setUTCFullYear(isoWeekYear, 0, 4);\n  const fourthOfJanuaryDay = date.getUTCDay() || 7;\n  const diff = (week - 1) * 7 + day + 1 - fourthOfJanuaryDay;\n  date.setUTCDate(date.getUTCDate() + diff);\n  return date;\n}\n\n// Validation functions\n\n// February is null to handle the leap year (using ||)\nconst daysInMonths = [31, null, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31];\n\nfunction isLeapYearIndex(year) {\n  return year % 400 === 0 || (year % 4 === 0 && year % 100 !== 0);\n}\n\nfunction validateDate(year, month, date) {\n  return (\n    month >= 0 &&\n    month <= 11 &&\n    date >= 1 &&\n    date <= (daysInMonths[month] || (isLeapYearIndex(year) ? 29 : 28))\n  );\n}\n\nfunction validateDayOfYearDate(year, dayOfYear) {\n  return dayOfYear >= 1 && dayOfYear <= (isLeapYearIndex(year) ? 366 : 365);\n}\n\nfunction validateWeekDate(_year, week, day) {\n  return week >= 1 && week <= 53 && day >= 0 && day <= 6;\n}\n\nfunction validateTime(hours, minutes, seconds) {\n  if (hours === 24) {\n    return minutes === 0 && seconds === 0;\n  }\n\n  return (\n    seconds >= 0 &&\n    seconds < 60 &&\n    minutes >= 0 &&\n    minutes < 60 &&\n    hours >= 0 &&\n    hours < 25\n  );\n}\n\nfunction validateTimezone(_hours, minutes) {\n  return minutes >= 0 && minutes <= 59;\n}\n\n// Fallback for modularized imports:\nexport default parseISO;\n","import {\n  AfterViewInit,\n  ChangeDetectorRef,\n  Component,\n  DestroyRef,\n  HostBinding,\n  inject,\n  OnInit,\n  signal,\n  TemplateRef,\n  ViewChild,\n} from '@angular/core';\nimport {\n  ActivatedRoute,\n  Data,\n  NavigationEnd,\n  Router,\n  RouterOutlet,\n} from '@angular/router';\nimport { takeUntilDestroyed } from '@angular/core/rxjs-interop';\nimport { filter, map } from 'rxjs';\n\nimport { DynamicTabPanelComponent } from '../../../../../shared/components/tabs/dynamic-tab-panel/dynamic-tab-panel.component';\nimport { TabConfig } from '../../../../../shared/models';\nimport { EntityDetailsService } from '../../../services/entity/entity-details.service';\nimport { isDefined } from '../../../../../shared/utils';\n\n@Component({\n  selector: 'app-system-health-container',\n  imports: [DynamicTabPanelComponent, RouterOutlet],\n  templateUrl: './system-health-container.component.html',\n  styleUrl: './system-health-container.component.scss',\n})\nexport class SystemHealthContainerComponent implements AfterViewInit, OnInit {\n  private readonly cdr = inject(ChangeDetectorRef);\n\n  @ViewChild('main') mainTemplate!: TemplateRef<unknown>;\n  systemHealthTabs = [\n    { id: 'overview', label: 'System Overview', route: 'overview', level: 0 },\n    {\n      id: 'azure-functions',\n      label: 'Azure Functions',\n      route: 'azure-functions',\n      level: 0,\n    },\n    { id: 'event-flow', label: 'Event Flow', route: 'event-flow', level: 0 },\n    {\n      id: 'data-storage',\n      label: 'Data Storage',\n      route: 'data-storage',\n      level: 0,\n    },\n    {\n      id: 'errors-and-alerts',\n      label: 'Errors & Alerts',\n      route: 'errors-and-alerts',\n      level: 0,\n    },\n  ] as TabConfig[];\n\n  private readonly router = inject(Router);\n  private readonly activatedRoute = inject(ActivatedRoute);\n  private readonly destroyRef = inject(DestroyRef);\n  readonly detailsService = inject(EntityDetailsService);\n  readonly isContentScrollable = signal<boolean>(false); // Signal to control styling\n\n  @HostBinding('class.content-scrollable-inactive')\n  get contentScrollableActive(): boolean {\n    return !this.isContentScrollable();\n  }\n\n  ngAfterViewInit() {\n    this.applyTemplateToTabs(this.systemHealthTabs, this.mainTemplate);\n    this.cdr.detectChanges();\n  }\n\n  private applyTemplateToTabs(\n    tabs: TabConfig[],\n    template: TemplateRef<unknown>,\n  ) {\n    for (const tab of tabs) {\n      tab.template = template;\n      if (tab.children) {\n        this.applyTemplateToTabs(tab.children, template);\n      }\n    }\n  }\n\n  onTabChange() {\n    this.detailsService.closeDetailsPanel();\n  }\n\n  ngOnInit(): void {\n    // Function to get scrollable state from route\n    const getScrollableState = (route: ActivatedRoute): boolean => {\n      let currentRoute = route;\n      while (currentRoute.firstChild) {\n        currentRoute = currentRoute.firstChild;\n      }\n      const routeData: Data = currentRoute.snapshot.data;\n      if (\n        isDefined(routeData) &&\n        typeof routeData['nestedContentScrollable'] === 'boolean'\n      ) {\n        return routeData['nestedContentScrollable'];\n      }\n      return false; // Default to false\n    };\n\n    // Set initial state\n    this.isContentScrollable.set(getScrollableState(this.activatedRoute));\n    this.cdr.detectChanges(); // Ensure initial class binding is applied\n\n    // Subscribe to subsequent navigation events\n    this.router.events\n      .pipe(\n        filter(\n          (event): event is NavigationEnd => event instanceof NavigationEnd,\n        ),\n        map(() => getScrollableState(this.activatedRoute)), // Reuse the logic\n        takeUntilDestroyed(this.destroyRef),\n      )\n      .subscribe((scrollableValue: boolean) => {\n        if (this.isContentScrollable() !== scrollableValue) {\n          this.isContentScrollable.set(scrollableValue);\n          this.cdr.detectChanges(); // Explicitly trigger change detection if needed\n        }\n      });\n  }\n}\n","<div class=\"w-full h-full\">\n  <app-dynamic-tab-panel\n    [tabs]=\"systemHealthTabs\"\n    (tabChange)=\"onTabChange()\"\n    styleClass=\"h-full overflow-hidden\"\n  ></app-dynamic-tab-panel>\n</div>\n\n<ng-template #main>\n  <router-outlet />\n</ng-template>\n","import * as i1 from '@angular/common';\nimport { CommonModule } from '@angular/common';\nimport * as i0 from '@angular/core';\nimport { Injectable, inject, booleanAttribute, ContentChildren, ContentChild, Input, ViewEncapsulation, ChangeDetectionStrategy, Component, NgModule } from '@angular/core';\nimport { SharedModule, PrimeTemplate } from 'primeng/api';\nimport { BaseComponent } from 'primeng/basecomponent';\nimport { style } from '@primeuix/styles/tag';\nimport { BaseStyle } from 'primeng/base';\nconst _c0 = [\"icon\"];\nconst _c1 = [\"*\"];\nfunction Tag_ng_container_1_span_1_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelement(0, \"span\", 3);\n  }\n  if (rf & 2) {\n    const ctx_r0 = i0.ɵɵnextContext(2);\n    i0.ɵɵclassMap(ctx_r0.cx(\"icon\"));\n    i0.ɵɵproperty(\"ngClass\", ctx_r0.icon);\n  }\n}\nfunction Tag_ng_container_1_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementContainerStart(0);\n    i0.ɵɵtemplate(1, Tag_ng_container_1_span_1_Template, 1, 3, \"span\", 2);\n    i0.ɵɵelementContainerEnd();\n  }\n  if (rf & 2) {\n    const ctx_r0 = i0.ɵɵnextContext();\n    i0.ɵɵadvance();\n    i0.ɵɵproperty(\"ngIf\", ctx_r0.icon);\n  }\n}\nfunction Tag_span_2_1_ng_template_0_Template(rf, ctx) {}\nfunction Tag_span_2_1_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵtemplate(0, Tag_span_2_1_ng_template_0_Template, 0, 0, \"ng-template\");\n  }\n}\nfunction Tag_span_2_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"span\");\n    i0.ɵɵtemplate(1, Tag_span_2_1_Template, 1, 0, null, 4);\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const ctx_r0 = i0.ɵɵnextContext();\n    i0.ɵɵclassMap(ctx_r0.cx(\"icon\"));\n    i0.ɵɵadvance();\n    i0.ɵɵproperty(\"ngTemplateOutlet\", ctx_r0.iconTemplate || ctx_r0._iconTemplate);\n  }\n}\nconst classes = {\n  root: ({\n    instance\n  }) => ['p-tag p-component', {\n    'p-tag-info': instance.severity === 'info',\n    'p-tag-success': instance.severity === 'success',\n    'p-tag-warn': instance.severity === 'warn',\n    'p-tag-danger': instance.severity === 'danger',\n    'p-tag-secondary': instance.severity === 'secondary',\n    'p-tag-contrast': instance.severity === 'contrast',\n    'p-tag-rounded': instance.rounded\n  }],\n  icon: 'p-tag-icon',\n  label: 'p-tag-label'\n};\nclass TagStyle extends BaseStyle {\n  name = 'tag';\n  theme = style;\n  classes = classes;\n  static ɵfac = /* @__PURE__ */(() => {\n    let ɵTagStyle_BaseFactory;\n    return function TagStyle_Factory(__ngFactoryType__) {\n      return (ɵTagStyle_BaseFactory || (ɵTagStyle_BaseFactory = i0.ɵɵgetInheritedFactory(TagStyle)))(__ngFactoryType__ || TagStyle);\n    };\n  })();\n  static ɵprov = /* @__PURE__ */i0.ɵɵdefineInjectable({\n    token: TagStyle,\n    factory: TagStyle.ɵfac\n  });\n}\n(() => {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(TagStyle, [{\n    type: Injectable\n  }], null, null);\n})();\n/**\n *\n * Tag component is used to categorize content.\n *\n * [Live Demo](https://www.primeng.org/tag)\n *\n * @module tagstyle\n *\n */\nvar TagClasses;\n(function (TagClasses) {\n  /**\n   * Class name of the root element\n   */\n  TagClasses[\"root\"] = \"p-tag\";\n  /**\n   * Class name of the icon element\n   */\n  TagClasses[\"icon\"] = \"p-tag-icon\";\n  /**\n   * Class name of the label element\n   */\n  TagClasses[\"label\"] = \"p-tag-label\";\n})(TagClasses || (TagClasses = {}));\n\n/**\n * Tag component is used to categorize content.\n * @group Components\n */\nclass Tag extends BaseComponent {\n  /**\n   * Style class of the component.\n   * @deprecated since v20.0.0, use `class` instead.\n   * @group Props\n   */\n  styleClass;\n  /**\n   * Severity type of the tag.\n   * @group Props\n   */\n  severity;\n  /**\n   * Value to display inside the tag.\n   * @group Props\n   */\n  value;\n  /**\n   * Icon of the tag to display next to the value.\n   * @group Props\n   */\n  icon;\n  /**\n   * Whether the corners of the tag are rounded.\n   * @group Props\n   */\n  rounded;\n  iconTemplate;\n  templates;\n  _iconTemplate;\n  _componentStyle = inject(TagStyle);\n  ngAfterContentInit() {\n    this.templates?.forEach(item => {\n      switch (item.getType()) {\n        case 'icon':\n          this._iconTemplate = item.template;\n          break;\n      }\n    });\n  }\n  static ɵfac = /* @__PURE__ */(() => {\n    let ɵTag_BaseFactory;\n    return function Tag_Factory(__ngFactoryType__) {\n      return (ɵTag_BaseFactory || (ɵTag_BaseFactory = i0.ɵɵgetInheritedFactory(Tag)))(__ngFactoryType__ || Tag);\n    };\n  })();\n  static ɵcmp = /* @__PURE__ */i0.ɵɵdefineComponent({\n    type: Tag,\n    selectors: [[\"p-tag\"]],\n    contentQueries: function Tag_ContentQueries(rf, ctx, dirIndex) {\n      if (rf & 1) {\n        i0.ɵɵcontentQuery(dirIndex, _c0, 4);\n        i0.ɵɵcontentQuery(dirIndex, PrimeTemplate, 4);\n      }\n      if (rf & 2) {\n        let _t;\n        i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.iconTemplate = _t.first);\n        i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.templates = _t);\n      }\n    },\n    hostVars: 2,\n    hostBindings: function Tag_HostBindings(rf, ctx) {\n      if (rf & 2) {\n        i0.ɵɵclassMap(ctx.cn(ctx.cx(\"root\"), ctx.styleClass));\n      }\n    },\n    inputs: {\n      styleClass: \"styleClass\",\n      severity: \"severity\",\n      value: \"value\",\n      icon: \"icon\",\n      rounded: [2, \"rounded\", \"rounded\", booleanAttribute]\n    },\n    features: [i0.ɵɵProvidersFeature([TagStyle]), i0.ɵɵInheritDefinitionFeature],\n    ngContentSelectors: _c1,\n    decls: 5,\n    vars: 5,\n    consts: [[4, \"ngIf\"], [3, \"class\", 4, \"ngIf\"], [3, \"class\", \"ngClass\", 4, \"ngIf\"], [3, \"ngClass\"], [4, \"ngTemplateOutlet\"]],\n    template: function Tag_Template(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵprojectionDef();\n        i0.ɵɵprojection(0);\n        i0.ɵɵtemplate(1, Tag_ng_container_1_Template, 2, 1, \"ng-container\", 0)(2, Tag_span_2_Template, 2, 3, \"span\", 1);\n        i0.ɵɵelementStart(3, \"span\");\n        i0.ɵɵtext(4);\n        i0.ɵɵelementEnd();\n      }\n      if (rf & 2) {\n        i0.ɵɵadvance();\n        i0.ɵɵproperty(\"ngIf\", !ctx.iconTemplate && !ctx._iconTemplate);\n        i0.ɵɵadvance();\n        i0.ɵɵproperty(\"ngIf\", ctx.iconTemplate || ctx._iconTemplate);\n        i0.ɵɵadvance();\n        i0.ɵɵclassMap(ctx.cx(\"label\"));\n        i0.ɵɵadvance();\n        i0.ɵɵtextInterpolate(ctx.value);\n      }\n    },\n    dependencies: [CommonModule, i1.NgClass, i1.NgIf, i1.NgTemplateOutlet, SharedModule],\n    encapsulation: 2,\n    changeDetection: 0\n  });\n}\n(() => {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(Tag, [{\n    type: Component,\n    args: [{\n      selector: 'p-tag',\n      standalone: true,\n      imports: [CommonModule, SharedModule],\n      template: `\n        <ng-content></ng-content>\n        <ng-container *ngIf=\"!iconTemplate && !_iconTemplate\">\n            <span [class]=\"cx('icon')\" [ngClass]=\"icon\" *ngIf=\"icon\"></span>\n        </ng-container>\n        <span [class]=\"cx('icon')\" *ngIf=\"iconTemplate || _iconTemplate\">\n            <ng-template *ngTemplateOutlet=\"iconTemplate || _iconTemplate\"></ng-template>\n        </span>\n        <span [class]=\"cx('label')\">{{ value }}</span>\n    `,\n      changeDetection: ChangeDetectionStrategy.OnPush,\n      encapsulation: ViewEncapsulation.None,\n      providers: [TagStyle],\n      host: {\n        '[class]': \"cn(cx('root'), styleClass)\"\n      }\n    }]\n  }], null, {\n    styleClass: [{\n      type: Input\n    }],\n    severity: [{\n      type: Input\n    }],\n    value: [{\n      type: Input\n    }],\n    icon: [{\n      type: Input\n    }],\n    rounded: [{\n      type: Input,\n      args: [{\n        transform: booleanAttribute\n      }]\n    }],\n    iconTemplate: [{\n      type: ContentChild,\n      args: ['icon', {\n        descendants: false\n      }]\n    }],\n    templates: [{\n      type: ContentChildren,\n      args: [PrimeTemplate]\n    }]\n  });\n})();\nclass TagModule {\n  static ɵfac = function TagModule_Factory(__ngFactoryType__) {\n    return new (__ngFactoryType__ || TagModule)();\n  };\n  static ɵmod = /* @__PURE__ */i0.ɵɵdefineNgModule({\n    type: TagModule,\n    imports: [Tag, SharedModule],\n    exports: [Tag, SharedModule]\n  });\n  static ɵinj = /* @__PURE__ */i0.ɵɵdefineInjector({\n    imports: [Tag, SharedModule, SharedModule]\n  });\n}\n(() => {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(TagModule, [{\n    type: NgModule,\n    args: [{\n      imports: [Tag, SharedModule],\n      exports: [Tag, SharedModule]\n    }]\n  }], null, null);\n})();\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { Tag, TagClasses, TagModule, TagStyle };\n","/*!\n * chartjs-adapter-date-fns v3.0.0\n * https://www.chartjs.org\n * (c) 2022 chartjs-adapter-date-fns Contributors\n * Released under the MIT license\n */\nimport { _adapters } from 'chart.js';\nimport { toDate, parse, parseISO, isValid, format, addYears, addQuarters, addMonths, addWeeks, addDays, addHours, addMinutes, addSeconds, addMilliseconds, differenceInYears, differenceInQuarters, differenceInMonths, differenceInWeeks, differenceInDays, differenceInHours, differenceInMinutes, differenceInSeconds, differenceInMilliseconds, startOfYear, startOfQuarter, startOfMonth, startOfWeek, startOfDay, startOfHour, startOfMinute, startOfSecond, endOfYear, endOfQuarter, endOfMonth, endOfWeek, endOfDay, endOfHour, endOfMinute, endOfSecond } from 'date-fns';\n\nconst FORMATS = {\n  datetime: 'MMM d, yyyy, h:mm:ss aaaa',\n  millisecond: 'h:mm:ss.SSS aaaa',\n  second: 'h:mm:ss aaaa',\n  minute: 'h:mm aaaa',\n  hour: 'ha',\n  day: 'MMM d',\n  week: 'PP',\n  month: 'MMM yyyy',\n  quarter: 'qqq - yyyy',\n  year: 'yyyy'\n};\n\n_adapters._date.override({\n  _id: 'date-fns', // DEBUG\n\n  formats: function() {\n    return FORMATS;\n  },\n\n  parse: function(value, fmt) {\n    if (value === null || typeof value === 'undefined') {\n      return null;\n    }\n    const type = typeof value;\n    if (type === 'number' || value instanceof Date) {\n      value = toDate(value);\n    } else if (type === 'string') {\n      if (typeof fmt === 'string') {\n        value = parse(value, fmt, new Date(), this.options);\n      } else {\n        value = parseISO(value, this.options);\n      }\n    }\n    return isValid(value) ? value.getTime() : null;\n  },\n\n  format: function(time, fmt) {\n    return format(time, fmt, this.options);\n  },\n\n  add: function(time, amount, unit) {\n    switch (unit) {\n    case 'millisecond': return addMilliseconds(time, amount);\n    case 'second': return addSeconds(time, amount);\n    case 'minute': return addMinutes(time, amount);\n    case 'hour': return addHours(time, amount);\n    case 'day': return addDays(time, amount);\n    case 'week': return addWeeks(time, amount);\n    case 'month': return addMonths(time, amount);\n    case 'quarter': return addQuarters(time, amount);\n    case 'year': return addYears(time, amount);\n    default: return time;\n    }\n  },\n\n  diff: function(max, min, unit) {\n    switch (unit) {\n    case 'millisecond': return differenceInMilliseconds(max, min);\n    case 'second': return differenceInSeconds(max, min);\n    case 'minute': return differenceInMinutes(max, min);\n    case 'hour': return differenceInHours(max, min);\n    case 'day': return differenceInDays(max, min);\n    case 'week': return differenceInWeeks(max, min);\n    case 'month': return differenceInMonths(max, min);\n    case 'quarter': return differenceInQuarters(max, min);\n    case 'year': return differenceInYears(max, min);\n    default: return 0;\n    }\n  },\n\n  startOf: function(time, unit, weekday) {\n    switch (unit) {\n    case 'second': return startOfSecond(time);\n    case 'minute': return startOfMinute(time);\n    case 'hour': return startOfHour(time);\n    case 'day': return startOfDay(time);\n    case 'week': return startOfWeek(time);\n    case 'isoWeek': return startOfWeek(time, {weekStartsOn: +weekday});\n    case 'month': return startOfMonth(time);\n    case 'quarter': return startOfQuarter(time);\n    case 'year': return startOfYear(time);\n    default: return time;\n    }\n  },\n\n  endOf: function(time, unit) {\n    switch (unit) {\n    case 'second': return endOfSecond(time);\n    case 'minute': return endOfMinute(time);\n    case 'hour': return endOfHour(time);\n    case 'day': return endOfDay(time);\n    case 'week': return endOfWeek(time);\n    case 'month': return endOfMonth(time);\n    case 'quarter': return endOfQuarter(time);\n    case 'year': return endOfYear(time);\n    default: return time;\n    }\n  }\n});\n","import { Injectable, inject } from '@angular/core';\nimport { BroadcastEventMessageService } from '../../../features/administration/services/broadcast-event-messages.service';\nimport { SystemHealthData } from '../models';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class SystemHealthBroadcastService {\n  private readonly broadcastService = inject(BroadcastEventMessageService);\n\n  // Convenience methods for system health events\n  broadcastHealthUpdate(data: SystemHealthData): void {\n    this.broadcastService.broadcast('system-health-update', {\n      data,\n      timestamp: new Date().toISOString(),\n    });\n  }\n\n  broadcastWebSocketStatus(connected: boolean, reason?: string): void {\n    this.broadcastService.broadcast('websocket-status-change', {\n      connected,\n      reason,\n    });\n  }\n\n  broadcastServiceAlert(\n    serviceName: string,\n    severity: 'warning' | 'error' | 'critical',\n    message: string,\n  ): void {\n    this.broadcastService.broadcast('health-service-alert', {\n      serviceName,\n      severity,\n      message,\n    });\n  }\n\n  // Subscription methods\n  onHealthUpdate() {\n    return this.broadcastService.on('system-health-update');\n  }\n\n  onWebSocketStatusChange() {\n    return this.broadcastService.on('websocket-status-change');\n  }\n\n  onServiceAlert() {\n    return this.broadcastService.on('health-service-alert');\n  }\n\n  onDashboardRefreshRequested(source?: string) {\n    return this.broadcastService.broadcast('dashboard-refresh-requested', {\n      source: source ?? 'manual-refresh',\n    });\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { BehaviorSubject, Observable, interval } from 'rxjs';\nimport { map } from 'rxjs/operators';\nimport {\n  SystemHealthData,\n  ServiceStatus,\n  HealthTimelineEntry,\n} from '../models';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class MockSystemHealthService {\n  private readonly healthDataSubject = new BehaviorSubject<SystemHealthData>(\n    this.generateMockData(),\n  );\n\n  // Simulate real-time updates every 30 seconds\n  constructor() {\n    interval(30000).subscribe(() => {\n      this.healthDataSubject.next(this.generateMockData());\n    });\n  }\n\n  getSystemHealth(): Observable<SystemHealthData> {\n    return this.healthDataSubject.asObservable();\n  }\n\n  // Simulate WebSocket connection status\n  getConnectionStatus(): Observable<boolean> {\n    return interval(5000).pipe(\n      map(() => Math.random() > 0.1), // 90% uptime simulation\n    );\n  }\n\n  private generateMockData(): SystemHealthData {\n    const now = new Date();\n\n    return {\n      overview: {\n        services: this.generateServiceStatuses(),\n        overallHealth: this.calculateOverallHealth(),\n        lastUpdated: now.toISOString(),\n      },\n      timeline: this.generateTimeline(),\n      azureFunctions: this.generateFunctionMetrics(),\n      eventFlow: this.generateEventFlowMetrics(),\n      storage: this.generateStorageMetrics(),\n      alerts: this.generateAlerts(),\n    };\n  }\n\n  private generateServiceStatuses(): ServiceStatus[] {\n    const services = [\n      'Azure Functions',\n      'Event Hub',\n      'Cosmos DB',\n      'PostgreSQL',\n      'Blob Storage',\n      'Redis Cache',\n    ];\n\n    return services.map((name) => {\n      const now = new Date();\n      const baseService = {\n        name,\n        status: this.getRandomStatus(),\n        uptime: 95 + Math.random() * 5, // 95-100%\n        errorRate: Math.random() * 2, // 0-2%\n        responseTime: 100 + Math.random() * 400, // 100-500ms\n        lastUpdated: new Date(\n          now.getTime() - Math.random() * 60000,\n        ).toISOString(), // Within last minute\n      };\n\n      // Add service-specific metrics\n      switch (name) {\n        case 'Event Hub':\n          return {\n            ...baseService,\n            eventsPerSecond: Math.floor(1000 + Math.random() * 9000), // 1K-10K events/sec\n          };\n        case 'Cosmos DB':\n          return {\n            ...baseService,\n            ruPerSecond: Math.floor(100 + Math.random() * 900), // 100-1000 RU/s\n            eventsPerSecond: Math.floor(500 + Math.random() * 2000), // 500-2.5K events/sec\n          };\n        case 'Azure Functions':\n          return {\n            ...baseService,\n            eventsPerSecond: Math.floor(200 + Math.random() * 800), // 200-1K events/sec\n          };\n        case 'PostgreSQL':\n          return {\n            ...baseService,\n            eventsPerSecond: Math.floor(100 + Math.random() * 500), // 100-600 events/sec\n          };\n        case 'Redis Cache':\n          return {\n            ...baseService,\n            eventsPerSecond: Math.floor(2000 + Math.random() * 8000), // 2K-10K events/sec\n          };\n        case 'Blob Storage':\n          return {\n            ...baseService,\n            eventsPerSecond: Math.floor(50 + Math.random() * 200), // 50-250 events/sec\n          };\n        default:\n          return baseService;\n      }\n    });\n  }\n\n  private generateTimeline(): HealthTimelineEntry[] {\n    const timeline: HealthTimelineEntry[] = [];\n    const now = new Date();\n\n    // Generate last 24 hours of data\n    for (let i = 0; i < 288; i++) {\n      // 5-minute intervals\n      const timestamp = new Date(now.getTime() - i * 5 * 60 * 1000);\n      const status = this.getRandomStatus();\n\n      timeline.push({\n        timestamp: timestamp.toISOString(),\n        status,\n        incident:\n          status !== 'healthy' ? `${status} condition detected` : undefined,\n      });\n    }\n\n    return timeline.reverse();\n  }\n\n  private generateFunctionMetrics() {\n    const functions = [\n      'ProcessTelemetryData',\n      'ValidateMessages',\n      'EnrichData',\n      'ArchiveOldData',\n      'GenerateReports',\n    ];\n\n    return functions.map((functionName) => ({\n      functionName,\n      executionCount: Math.floor(Math.random() * 10000),\n      errorRate: Math.random() * 5, // 0-5%\n      avgDuration: 200 + Math.random() * 800, // 200-1000ms\n      lastExecution: new Date(\n        Date.now() - Math.random() * 300000,\n      ).toISOString(), // Last 5 minutes\n    }));\n  }\n\n  private generateEventFlowMetrics() {\n    return [\n      {\n        eventHubName: 'telemetry-hub',\n        incomingMessages: Math.floor(Math.random() * 50000),\n        outgoingMessages: Math.floor(Math.random() * 48000),\n        consumerLag: Math.floor(Math.random() * 100),\n        throughputMbps: 10 + Math.random() * 90,\n      },\n    ];\n  }\n\n  private generateStorageMetrics() {\n    return [\n      {\n        serviceName: 'telemetry-cosmosdb',\n        type: 'cosmosdb' as const,\n        operations: Math.floor(Math.random() * 100000),\n        availability: 99.5 + Math.random() * 0.5,\n        latency: 5 + Math.random() * 20,\n        ruConsumption: Math.floor(Math.random() * 10000),\n      },\n      {\n        serviceName: 'analytics-postgresql',\n        type: 'postgresql' as const,\n        operations: Math.floor(Math.random() * 50000),\n        availability: 99.8 + Math.random() * 0.2,\n        latency: 10 + Math.random() * 40,\n      },\n      {\n        serviceName: 'archive-blob',\n        type: 'blob' as const,\n        operations: Math.floor(Math.random() * 25000),\n        availability: 99.9 + Math.random() * 0.1,\n        latency: 50 + Math.random() * 200,\n      },\n    ];\n  }\n\n  private generateAlerts() {\n    const alertMessages = [\n      'High error rate detected in ProcessTelemetryData function',\n      'Event Hub consumer lag increasing',\n      'Cosmos DB RU consumption above threshold',\n      'PostgreSQL connection pool near capacity',\n      'Blob storage latency spike detected',\n    ];\n\n    return alertMessages.map((message, index) => ({\n      id: `alert-${index}`,\n      severity: ['warning', 'error', 'critical'][\n        Math.floor(Math.random() * 3)\n      ] as 'warning' | 'error' | 'critical',\n      message,\n      source: 'Azure Monitor',\n      timestamp: new Date(Date.now() - Math.random() * 3600000).toISOString(), // Last hour\n      resolved: Math.random() > 0.3, // 70% resolved\n    }));\n  }\n\n  private getRandomStatus(): 'healthy' | 'warning' | 'critical' {\n    const rand = Math.random();\n    if (rand < 0.7) return 'healthy';\n    if (rand < 0.9) return 'warning';\n    return 'critical';\n  }\n\n  private calculateOverallHealth(): 'healthy' | 'warning' | 'critical' {\n    // Simple logic for overall health\n    const rand = Math.random();\n    if (rand < 0.8) return 'healthy';\n    if (rand < 0.95) return 'warning';\n    return 'critical';\n  }\n}\n","import { DestroyRef, Injectable, inject } from '@angular/core';\nimport { MockSystemHealthService } from './mock-system-health.service';\nimport { SystemHealthBroadcastService } from './system-health-broadcast.service';\nimport { takeUntilDestroyed } from '@angular/core/rxjs-interop';\nimport { SystemHealthData } from '../models';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class SystemHealthService {\n  private readonly mockService = inject(MockSystemHealthService);\n  private readonly broadcastService = inject(SystemHealthBroadcastService);\n  private readonly destroyRef = inject(DestroyRef);\n\n  readonly systemHealth$ = this.mockService.getSystemHealth();\n  currentHealthData: SystemHealthData | undefined;\n  readonly connectionStatus$ = this.mockService.getConnectionStatus();\n\n  initializeHealthListeners() {\n    this.systemHealth$\n      .pipe(takeUntilDestroyed(this.destroyRef))\n      .subscribe((data) => {\n        this.currentHealthData = data;\n        this.broadcastService.broadcastHealthUpdate(data);\n      });\n\n    // Listen for connection status changes\n    this.mockService\n      .getConnectionStatus()\n      .pipe(takeUntilDestroyed(this.destroyRef))\n      .subscribe((status) => {\n        this.broadcastService.broadcastWebSocketStatus(\n          status,\n          status ? 'Connected' : 'Connection lost',\n        );\n      });\n  }\n\n  refreshData(): void {\n    this.broadcastService.onDashboardRefreshRequested('manual-refresh');\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport {\n  ChangeDetectorRef,\n  Component,\n  DestroyRef,\n  inject,\n  OnInit,\n} from '@angular/core';\nimport { CardModule } from 'primeng/card';\nimport { ChartModule } from 'primeng/chart';\nimport {\n  ChartData,\n  ChartOptions,\n  ScriptableLineSegmentContext,\n} from 'chart.js';\nimport { TableModule } from 'primeng/table';\nimport { TagModule } from 'primeng/tag';\nimport { ProgressBarModule } from 'primeng/progressbar';\nimport { ButtonModule } from 'primeng/button';\n\nimport 'chartjs-adapter-date-fns';\n\nimport { SystemHealthData } from '../../../models';\nimport { SystemHealthBroadcastService } from '../../../services/system-health-broadcast.service';\nimport { SystemHealthService } from '../../../services/system-health.service';\nimport { takeUntilDestroyed } from '@angular/core/rxjs-interop';\nimport { SelectChangeEvent, SelectModule } from 'primeng/select';\nimport { FormsModule } from '@angular/forms';\nimport { isDefined } from '../../../../../shared/utils';\nimport { TimeAgoPipe } from '../../../../../shared/pipes/time-ago.pipe';\n\n@Component({\n  selector: 'app-system-overview',\n  imports: [\n    CommonModule,\n    TableModule,\n    TagModule,\n    CardModule,\n    ProgressBarModule,\n    ChartModule,\n    ButtonModule,\n    SelectModule,\n    FormsModule,\n    TimeAgoPipe,\n  ],\n  templateUrl: './system-overview.component.html',\n  styleUrl: './system-overview.component.scss',\n})\nexport class SystemOverviewComponent implements OnInit {\n  private readonly broadcastService = inject(SystemHealthBroadcastService);\n  private readonly healthService = inject(SystemHealthService);\n  private readonly cdr = inject(ChangeDetectorRef);\n  private readonly destroyRef = inject(DestroyRef);\n  healthData?: SystemHealthData;\n  connected = true;\n\n  // Time range selector\n  timeRanges = [6, 12, 24]; // Hours\n  timeRangeOptions = this.timeRanges.map((range) => ({\n    label: range + 'h',\n    value: range,\n  }));\n  selectedTimeRange = 6; // Default to 6 hours\n\n  // Chart data for system health timeline\n  timelineChartData: ChartData<'line'> = { datasets: [] };\n  timelineChartOptions: ChartOptions<'line'> = {\n    responsive: true,\n    plugins: {\n      legend: {\n        display: false,\n        position: 'bottom',\n        labels: {\n          generateLabels: (_chart) => {\n            // Custom legend with colors for statuses\n            return [\n              {\n                text: 'Healthy',\n                fillStyle: '#10b981', // Green\n                strokeStyle: '#10b981',\n                lineWidth: 2,\n                font: {\n                  family: \"'Ubuntu', sans-serif\",\n                  size: 12,\n                },\n              },\n              {\n                text: 'Warning',\n                fillStyle: '#f59e0b', // Yellow\n                strokeStyle: '#f59e0b',\n                lineWidth: 2,\n                font: {\n                  family: \"'Ubuntu', sans-serif\",\n                  size: 12,\n                },\n              },\n              {\n                text: 'Critical',\n                fillStyle: '#ef4444', // Red\n                strokeStyle: '#ef4444',\n                lineWidth: 2,\n                font: {\n                  family: \"'Ubuntu', sans-serif\",\n                  size: 12,\n                },\n              },\n            ];\n          },\n        },\n      },\n      tooltip: {\n        callbacks: {\n          label: (context) => {\n            const dataPoint = context.raw as {\n              x: Date;\n              y: number;\n              incident?: string;\n            };\n            const status =\n              context.parsed.y === 1\n                ? 'Healthy'\n                : context.parsed.y === 2\n                  ? 'Warning'\n                  : 'Critical';\n            let label = `Status: ${status}`;\n            if (isDefined(dataPoint.incident)) {\n              label += ` | Incident: ${dataPoint.incident}`;\n            }\n            return label;\n          },\n        },\n        titleFont: {\n          family: \"'Ubuntu', sans-serif\",\n        },\n        bodyFont: {\n          family: \"'Ubuntu', sans-serif\",\n        },\n      },\n    },\n    scales: {\n      x: {\n        type: 'time',\n        time: {\n          unit: 'hour',\n        },\n        ticks: {\n          font: {\n            family: \"'Ubuntu' sans-serif\",\n          },\n        },\n      },\n      y: {\n        beginAtZero: true,\n        max: 3,\n        ticks: {\n          stepSize: 1,\n          callback: function (value: string | number) {\n            const labels = ['', 'Healthy', 'Warning', 'Critical'];\n            if (\n              typeof value === 'number' &&\n              value >= 0 &&\n              value < labels.length\n            ) {\n              return labels[value];\n            }\n            return '';\n          },\n          font: {\n            family: \"'Ubuntu', sans-serif\",\n          },\n        },\n      },\n    },\n    elements: {\n      line: {\n        stepped: true,\n      },\n    },\n  };\n\n  ngOnInit() {\n    this.healthService.initializeHealthListeners();\n\n    // Get current value immediately from the service\n    const currentHealthData = this.healthService.currentHealthData;\n    if (currentHealthData) {\n      this.healthData = currentHealthData;\n      this.updateTimelineChart();\n      this.cdr.detectChanges();\n    }\n\n    // Listen for health updates\n    this.broadcastService\n      .onHealthUpdate()\n      .pipe(takeUntilDestroyed(this.destroyRef))\n      .subscribe((update) => {\n        this.healthData = update.data;\n        this.updateTimelineChart();\n        this.cdr.detectChanges();\n      });\n\n    // Listen for connection status\n    this.broadcastService\n      .onWebSocketStatusChange()\n      .pipe(takeUntilDestroyed(this.destroyRef))\n      .subscribe((status) => {\n        this.connected = status.connected;\n      });\n  }\n\n  getStatusSeverity(status: string): string {\n    switch (status) {\n      case 'healthy':\n        return 'success';\n      case 'warning':\n        return 'warn';\n      case 'critical':\n        return 'danger';\n      default:\n        return 'info';\n    }\n  }\n\n  getHealthyServicesCount(): number {\n    const count = this.healthData?.overview?.services?.filter(\n      (s) => s.status === 'healthy',\n    ).length;\n    return count ?? 0;\n  }\n\n  getTotalServicesCount(): number {\n    const count = this.healthData?.overview?.services?.length;\n    return count ?? 0;\n  }\n\n  getAverageErrorRate(): number {\n    const services = this.healthData?.overview?.services;\n    if (!services || services.length === 0) return 0;\n\n    const totalErrorRate = services.reduce((sum, s) => sum + s.errorRate, 0);\n    return totalErrorRate / services.length;\n  }\n\n  getAverageResponseTime(): number {\n    const services = this.healthData?.overview?.services;\n    if (!services || services.length === 0) return 0;\n\n    const totalResponseTime = services.reduce(\n      (sum, s) => sum + s.responseTime,\n      0,\n    );\n    return totalResponseTime / services.length;\n  }\n\n  selectTimeRange(hours: number): void {\n    this.selectedTimeRange = hours;\n    this.updateTimelineChart();\n    this.cdr.detectChanges();\n  }\n\n  onTimeRangeChange(event: SelectChangeEvent): void {\n    this.selectTimeRange(+event.value);\n  }\n\n  private updateTimelineChart() {\n    if (!this.healthData?.timeline) return;\n\n    const now = new Date();\n    const cutoff = new Date(\n      now.getTime() - this.selectedTimeRange * 60 * 60 * 1000,\n    );\n\n    const filteredTimeline = this.healthData.timeline.filter(\n      (entry) => new Date(entry.timestamp) >= cutoff,\n    );\n\n    const data = filteredTimeline.map((entry) => ({\n      x: new Date(entry.timestamp).valueOf(),\n      y: entry.status === 'healthy' ? 1 : entry.status === 'warning' ? 2 : 3,\n      incident: entry.incident,\n    }));\n\n    const getStatusColor = (\n      y: number,\n      type: 'border' | 'background',\n    ): string => {\n      if (y === 3)\n        return type === 'border' ? 'var(--red-500)' : 'rgba(239, 68, 68, 0.2)';\n      if (y === 2)\n        return type === 'border'\n          ? 'var(--yellow-500)'\n          : 'rgba(234, 179, 8, 0.2)';\n      return type === 'border' ? 'var(--green-500)' : 'rgba(34, 197, 94, 0.2)';\n    };\n\n    this.timelineChartData = {\n      datasets: [\n        {\n          label: 'System Health',\n          data: data,\n          fill: true,\n          tension: 0.4,\n          pointRadius: data.map((d) => (isDefined(d.incident) ? 5 : 0)),\n          segment: {\n            borderColor: (ctx: ScriptableLineSegmentContext) => {\n              const y = data[ctx.p0DataIndex].y;\n              return getStatusColor(y, 'border');\n            },\n            backgroundColor: (ctx: ScriptableLineSegmentContext) => {\n              const y = data[ctx.p0DataIndex].y;\n              return getStatusColor(y, 'background');\n            },\n          },\n        },\n      ],\n    };\n    this.cdr.markForCheck();\n  }\n}\n","<div class=\"system-overview\">\n  <!-- Connection Status Banner -->\n  <div\n    class=\"p-4 rounded-md m-4 flex items-center gap-2\"\n    [ngClass]=\"\n      connected ? 'bg-green-100 text-green-800' : 'bg-red-100 text-red-800'\n    \"\n  >\n    <i class=\"pi\" [class.pi-wifi]=\"connected\" [class.pi-times]=\"!connected\"></i>\n    <span>{{\n      connected\n        ? 'Real-time data connected'\n        : 'Connection lost - showing cached data'\n    }}</span>\n  </div>\n\n  <!-- Key Metrics Cards -->\n  <div class=\"grid grid-cols-[repeat(auto-fit,minmax(250px,1fr))] gap-4 m-4\">\n    <p-card header=\"Overall Health\">\n      <div class=\"metric-content\">\n        <p-tag\n          [value]=\"\n            (healthData?.overview?.overallHealth | titlecase) || 'Unknown'\n          \"\n          [severity]=\"\n            getStatusSeverity(healthData?.overview?.overallHealth || 'unknown')\n          \"\n          [rounded]=\"true\"\n        >\n        </p-tag>\n        <small class=\"pl-2\"\n          >Last updated:\n          {{ healthData?.overview?.lastUpdated | date: 'short' }}</small\n        >\n      </div>\n    </p-card>\n\n    <p-card header=\"Active Services\">\n      <div class=\"text-[2rem] font-bold text-primary mb-2\">\n        {{ getHealthyServicesCount() }}\n        /\n        {{ getTotalServicesCount() }}\n      </div>\n      <small>Services running normally</small>\n    </p-card>\n\n    <p-card header=\"Error Rate\">\n      <div class=\"text-[2rem] font-bold text-primary mb-2\">\n        {{ getAverageErrorRate().toFixed(2) }}%\n      </div>\n      <small>Average across all services</small>\n    </p-card>\n\n    <p-card header=\"Avg Response Time\">\n      <div class=\"text-[2rem] font-bold text-primary mb-2\">\n        {{ getAverageResponseTime().toFixed(0) }}ms\n      </div>\n      <small>Average response time</small>\n    </p-card>\n  </div>\n\n  <!-- System Health Timeline -->\n  <p-card\n    header=\"System Health Timeline (Last {{ selectedTimeRange }} Hours)\"\n    class=\"m-4\"\n  >\n    <div class=\"mb-4\">\n      <p-select\n        class=\"p-2\"\n        [(ngModel)]=\"selectedTimeRange\"\n        [options]=\"timeRangeOptions\"\n        (onChange)=\"onTimeRangeChange($event)\"\n      >\n      </p-select>\n    </div>\n    <p-chart\n      type=\"line\"\n      [data]=\"timelineChartData\"\n      [options]=\"timelineChartOptions\"\n      height=\"200px\"\n    ></p-chart>\n  </p-card>\n\n  <!-- Services Status Table -->\n  <p-card header=\"Service Health Status\" class=\"m-4\">\n    <p-table\n      [value]=\"healthData?.overview?.services || []\"\n      [sortMode]=\"'multiple'\"\n    >\n      <ng-template pTemplate=\"header\">\n        <tr>\n          <th pSortableColumn=\"name\" scope=\"col\">\n            Service <p-sortIcon field=\"name\"></p-sortIcon>\n          </th>\n          <th pSortableColumn=\"status\" scope=\"col\">\n            Status <p-sortIcon field=\"status\"></p-sortIcon>\n          </th>\n          <th pSortableColumn=\"responseTime\" scope=\"col\">\n            Response Time <p-sortIcon field=\"responseTime\"></p-sortIcon>\n          </th>\n          <th pSortableColumn=\"eventsPerSecond\" scope=\"col\">\n            Events/sec <p-sortIcon field=\"eventsPerSecond\"></p-sortIcon>\n          </th>\n          <th pSortableColumn=\"ruPerSecond\" scope=\"col\">\n            RU/s <p-sortIcon field=\"ruPerSecond\"></p-sortIcon>\n          </th>\n          <th pSortableColumn=\"lastUpdated\" scope=\"col\">\n            Last Updated <p-sortIcon field=\"lastUpdated\"></p-sortIcon>\n          </th>\n        </tr>\n      </ng-template>\n      <ng-template pTemplate=\"body\" let-service>\n        <tr>\n          <td>{{ service.name }}</td>\n          <td>\n            <p-tag\n              [value]=\"service.status | uppercase\"\n              [severity]=\"getStatusSeverity(service.status)\"\n              [rounded]=\"true\"\n            >\n            </p-tag>\n          </td>\n          <td>{{ service.responseTime.toFixed(0) }}ms</td>\n          <td>\n            <span *ngIf=\"service.eventsPerSecond; else noEvents\">\n              {{ service.eventsPerSecond | number }}\n            </span>\n            <ng-template #noEvents>\n              <span class=\"text-gray-400\">—</span>\n            </ng-template>\n          </td>\n          <td>\n            <span *ngIf=\"service.ruPerSecond; else noRu\">\n              {{ service.ruPerSecond | number }}\n            </span>\n            <ng-template #noRu>\n              <span class=\"text-gray-400\">—</span>\n            </ng-template>\n          </td>\n          <td>\n            <span class=\"text-sm text-gray-600\">\n              {{ service.lastUpdated | timeAgo }}\n            </span>\n          </td>\n        </tr>\n      </ng-template>\n    </p-table>\n  </p-card>\n</div>\n","import { NgModule } from '@angular/core';\nimport { RouterModule, Routes } from '@angular/router';\nimport { AzureFunctionsComponent } from './azure-functions/azure-functions.component';\nimport { DataStorageComponent } from './data-storage/data-storage.component';\nimport { ErrorsAndAlertsComponent } from './errors-and-alerts/errors-and-alerts.component';\nimport { EventFlowComponent } from './event-flow/event-flow.component';\nimport { SystemHealthContainerComponent } from './system-health-container/system-health-container.component';\nimport { SystemOverviewComponent } from './system-overview/system-overview.component';\n\nconst routes: Routes = [\n  {\n    path: '',\n    component: SystemHealthContainerComponent,\n    children: [\n      {\n        path: '',\n        redirectTo: 'overview',\n        pathMatch: 'full',\n      },\n      {\n        path: 'overview',\n        component: SystemOverviewComponent,\n      },\n      {\n        path: 'azure-functions',\n        component: AzureFunctionsComponent,\n      },\n      {\n        path: 'event-flow',\n        component: EventFlowComponent,\n      },\n      {\n        path: 'data-storage',\n        component: DataStorageComponent,\n      },\n      {\n        path: 'errors-and-alerts',\n        component: ErrorsAndAlertsComponent,\n      },\n    ],\n  },\n];\n\n@NgModule({\n  imports: [RouterModule.forChild(routes)],\n  exports: [RouterModule],\n})\nexport class SystemHealthRoutingModule {}\n"],"mappings":"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","names":["getDefaultOptions","isLeapYearIndex","_c0","TagClasses","_c0"],"x_google_ignoreList":[8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,81,82]}