{
  "version": 3,
  "sources": ["src/app/features/administration/components/super-admin/super-admin-container/super-admin-container.component.ts", "src/app/features/administration/components/super-admin/super-admin-container/super-admin-container.component.html", "src/app/features/administration/components/system-analytics/system-analytics-container/system-analytics-container.component.ts", "src/app/features/administration/components/system-settings/system-settings-container/system-settings-container.component.ts", "src/app/features/administration/components/super-admin/super-admin-routing.module.ts", "src/app/features/administration/components/super-admin/super-admin.module.ts"],
  "sourcesContent": ["import {\n  AfterViewInit,\n  ChangeDetectorRef,\n  Component,\n  DestroyRef,\n  HostBinding,\n  inject,\n  OnInit,\n  signal,\n  TemplateRef,\n  ViewChild,\n} from '@angular/core';\nimport { takeUntilDestroyed } from '@angular/core/rxjs-interop';\nimport {\n  RouterModule,\n  Router,\n  ActivatedRoute,\n  Data,\n  NavigationEnd,\n} from '@angular/router';\nimport { filter, map } from 'rxjs';\nimport { DynamicTabPanelComponent } from '../../../../../shared/components/tabs/dynamic-tab-panel/dynamic-tab-panel.component';\nimport { TabConfig } from '../../../../../shared/models';\nimport { EntityDetailsService } from '../../../services/entity/entity-details.service';\nimport { isDefined } from '../../../../../shared/utils';\n\n@Component({\n  selector: 'app-super-admin-container',\n  imports: [DynamicTabPanelComponent, RouterModule],\n  templateUrl: './super-admin-container.component.html',\n  styleUrl: './super-admin-container.component.scss',\n})\nexport class SuperAdminContainerComponent implements AfterViewInit, OnInit {\n  @ViewChild('main') mainTemplate!: TemplateRef<unknown>;\n  superAdminTabs: TabConfig[] = [\n    {\n      id: 'distributors',\n      label: 'Distributors',\n      route: 'distributors',\n      level: 0,\n    },\n    {\n      id: 'system-health',\n      label: 'System Health',\n      route: 'system-health',\n      level: 0,\n    },\n    {\n      id: 'analytics',\n      label: 'Analytics',\n      route: 'analytics',\n      level: 0,\n    },\n    {\n      id: 'settings',\n      label: 'Settings',\n      route: 'settings',\n      level: 0,\n    },\n    {\n      id: 'device-types',\n      label: 'Device Types',\n      route: 'device-types',\n      level: 0,\n    },\n    {\n      id: 'accounts',\n      label: 'Accounts',\n      level: 0,\n      children: [\n        {\n          id: 'system-users',\n          label: 'Users',\n          route: 'accounts/system-users',\n          level: 1,\n        },\n        {\n          id: 'system-user-roles',\n          label: 'User Roles',\n          route: 'accounts/system-user-roles',\n          level: 1,\n        },\n      ],\n    },\n  ];\n\n  readonly detailsService = inject(EntityDetailsService);\n  private readonly cdr = inject(ChangeDetectorRef);\n  private readonly router = inject(Router);\n  private readonly activatedRoute = inject(ActivatedRoute);\n  private readonly destroyRef = inject(DestroyRef);\n  readonly isContentScrollable = signal<boolean>(false); // Signal to control styling\n\n  @HostBinding('class.content-scrollable-inactive')\n  get contentScrollableActive(): boolean {\n    return !this.isContentScrollable();\n  }\n\n  ngAfterViewInit() {\n    this.applyTemplateToTabs(this.superAdminTabs, this.mainTemplate);\n    this.cdr.detectChanges();\n  }\n\n  private applyTemplateToTabs(\n    tabs: TabConfig[],\n    template: TemplateRef<unknown>,\n  ) {\n    for (const tab of tabs) {\n      tab.template = template;\n      if (tab.children) {\n        this.applyTemplateToTabs(tab.children, template);\n      }\n    }\n  }\n\n  onTabChange() {\n    this.detailsService.closeDetailsPanel();\n  }\n\n  ngOnInit(): void {\n    // Function to get scrollable state from route\n    const getScrollableState = (route: ActivatedRoute): boolean => {\n      let currentRoute = route;\n      while (currentRoute.firstChild) {\n        currentRoute = currentRoute.firstChild;\n      }\n      const routeData: Data = currentRoute.snapshot.data;\n      if (\n        isDefined(routeData) &&\n        typeof routeData['nestedContentScrollable'] === 'boolean'\n      ) {\n        return routeData['nestedContentScrollable'];\n      }\n      return false; // Default to false\n    };\n\n    // Set initial state\n    this.isContentScrollable.set(getScrollableState(this.activatedRoute));\n    this.cdr.detectChanges(); // Ensure initial class binding is applied\n\n    // Subscribe to subsequent navigation events\n    this.router.events\n      .pipe(\n        filter(\n          (event): event is NavigationEnd => event instanceof NavigationEnd,\n        ),\n        map(() => getScrollableState(this.activatedRoute)), // Reuse the logic\n        takeUntilDestroyed(this.destroyRef),\n      )\n      .subscribe((scrollableValue: boolean) => {\n        if (this.isContentScrollable() !== scrollableValue) {\n          this.isContentScrollable.set(scrollableValue);\n          this.cdr.detectChanges(); // Explicitly trigger change detection if needed\n        }\n      });\n  }\n}\n", "<div class=\"w-full h-full\">\n  <app-dynamic-tab-panel\n    [tabs]=\"superAdminTabs\"\n    (tabChange)=\"onTabChange()\"\n    styleClass=\"h-full overflow-hidden\"\n  ></app-dynamic-tab-panel>\n</div>\n\n<ng-template #main>\n  <router-outlet />\n</ng-template>\n", "import { Component } from '@angular/core';\n\n@Component({\n  selector: 'app-system-analytics-container',\n  imports: [],\n  templateUrl: './system-analytics-container.component.html',\n  styleUrl: './system-analytics-container.component.scss',\n})\nexport class SystemAnalyticsContainerComponent {}\n", "import { Component } from '@angular/core';\n\n@Component({\n  selector: 'app-system-settings-container',\n  imports: [],\n  templateUrl: './system-settings-container.component.html',\n  styleUrl: './system-settings-container.component.scss',\n})\nexport class SystemSettingsContainerComponent {}\n", "import { NgModule } from '@angular/core';\nimport { RouterModule, Routes } from '@angular/router';\nimport { createGuardedGridRoute } from '../../../../shared/utils';\nimport { AdminGridContainerComponent } from '../admin-grid-container/admin-grid-container.component';\nimport { distributorsGuard } from '../../guards';\nimport { SuperAdminContainerComponent } from './super-admin-container/super-admin-container.component';\nimport { SystemAnalyticsContainerComponent } from '../system-analytics/system-analytics-container/system-analytics-container.component';\nimport { SystemSettingsContainerComponent } from '../system-settings/system-settings-container/system-settings-container.component';\nimport { AdminTreetableContainerComponent } from '../admin-treetable-container/admin-treetable-container.component';\n\nconst routes: Routes = [\n  {\n    path: '',\n    component: SuperAdminContainerComponent,\n    children: [\n      {\n        path: '',\n        redirectTo: 'distributors',\n        pathMatch: 'full',\n      },\n      {\n        path: 'system-health',\n        loadChildren: () =>\n          import('../system-health/system-health-routing.module').then(\n            (m) => m.SystemHealthRoutingModule,\n          ),\n      },\n      {\n        path: 'analytics',\n        component: SystemAnalyticsContainerComponent,\n      },\n      {\n        path: 'settings',\n        component: SystemSettingsContainerComponent,\n      },\n      {\n        path: 'device-types',\n        component: AdminTreetableContainerComponent,\n        data: {\n          type: 'device-types',\n        },\n      },\n      {\n        path: 'accounts',\n        children: [\n          {\n            path: '',\n            redirectTo: 'system-users',\n            pathMatch: 'full',\n          },\n          {\n            path: ':type',\n            component: AdminGridContainerComponent,\n          },\n          {\n            path: ':type/:entityType/:entityId',\n            component: AdminGridContainerComponent,\n          },\n        ],\n      },\n      ...createGuardedGridRoute(\n        'distributors',\n        distributorsGuard,\n        AdminGridContainerComponent,\n      ),\n    ],\n  },\n];\n\n@NgModule({\n  imports: [RouterModule.forChild(routes)],\n  exports: [RouterModule],\n})\nexport class SuperAdminRoutingModule {}\n", "import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\n\nimport { SuperAdminRoutingModule } from './super-admin-routing.module';\n\n@NgModule({\n  declarations: [],\n  imports: [CommonModule, SuperAdminRoutingModule],\n})\nexport class SuperAdminModule {}\n"],
  "mappings": "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",
  "names": []
}
