{"version":3,"sources":["node_modules/primeng/fesm2022/primeng-popover.mjs","src/app/shared/components/grid/column-selector/column-selector.component.ts","src/app/shared/components/grid/column-selector/column-selector.component.html","src/app/shared/services/grid-preference.service.ts","src/app/features/administration/components/admin-grid-container/admin-grid-container.component.ts","src/app/features/administration/components/admin-grid-container/admin-grid-container.component.html","src/app/features/administration/guards/clients.guard.ts"],"sourcesContent":["import { trigger, state, transition, style, animate } from '@angular/animations';\nimport * as i1 from '@angular/common';\nimport { isPlatformBrowser, CommonModule } from '@angular/common';\nimport * as i0 from '@angular/core';\nimport { Injectable, EventEmitter, inject, NgZone, booleanAttribute, numberAttribute, HostListener, ContentChildren, ContentChild, Output, Input, ViewEncapsulation, ChangeDetectionStrategy, Component, NgModule } from '@angular/core';\nimport { isIOS, appendChild, absolutePosition, getOffset, addClass, findSingle, isTouchDevice } from '@primeuix/utils';\nimport { OverlayService, SharedModule, PrimeTemplate } from 'primeng/api';\nimport { BaseComponent } from 'primeng/basecomponent';\nimport { ConnectedOverlayScrollHandler } from 'primeng/dom';\nimport { ZIndexUtils } from 'primeng/utils';\nimport { BaseStyle } from 'primeng/base';\nimport { $dt } from '@primeuix/styled';\nconst _c0 = [\"content\"];\nconst _c1 = [\"*\"];\nconst _c2 = (a0, a1) => ({\n  showTransitionParams: a0,\n  hideTransitionParams: a1\n});\nconst _c3 = (a0, a1) => ({\n  value: a0,\n  params: a1\n});\nconst _c4 = a0 => ({\n  closeCallback: a0\n});\nfunction Popover_div_0_3_ng_template_0_Template(rf, ctx) {}\nfunction Popover_div_0_3_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵtemplate(0, Popover_div_0_3_ng_template_0_Template, 0, 0, \"ng-template\");\n  }\n}\nfunction Popover_div_0_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r1 = i0.ɵɵgetCurrentView();\n    i0.ɵɵelementStart(0, \"div\", 1);\n    i0.ɵɵlistener(\"click\", function Popover_div_0_Template_div_click_0_listener($event) {\n      i0.ɵɵrestoreView(_r1);\n      const ctx_r1 = i0.ɵɵnextContext();\n      return i0.ɵɵresetView(ctx_r1.onOverlayClick($event));\n    })(\"@animation.start\", function Popover_div_0_Template_div_animation_animation_start_0_listener($event) {\n      i0.ɵɵrestoreView(_r1);\n      const ctx_r1 = i0.ɵɵnextContext();\n      return i0.ɵɵresetView(ctx_r1.onAnimationStart($event));\n    })(\"@animation.done\", function Popover_div_0_Template_div_animation_animation_done_0_listener($event) {\n      i0.ɵɵrestoreView(_r1);\n      const ctx_r1 = i0.ɵɵnextContext();\n      return i0.ɵɵresetView(ctx_r1.onAnimationEnd($event));\n    });\n    i0.ɵɵelementStart(1, \"div\", 2);\n    i0.ɵɵlistener(\"click\", function Popover_div_0_Template_div_click_1_listener($event) {\n      i0.ɵɵrestoreView(_r1);\n      const ctx_r1 = i0.ɵɵnextContext();\n      return i0.ɵɵresetView(ctx_r1.onContentClick($event));\n    })(\"mousedown\", function Popover_div_0_Template_div_mousedown_1_listener($event) {\n      i0.ɵɵrestoreView(_r1);\n      const ctx_r1 = i0.ɵɵnextContext();\n      return i0.ɵɵresetView(ctx_r1.onContentClick($event));\n    });\n    i0.ɵɵprojection(2);\n    i0.ɵɵtemplate(3, Popover_div_0_3_Template, 1, 0, null, 3);\n    i0.ɵɵelementEnd()();\n  }\n  if (rf & 2) {\n    const ctx_r1 = i0.ɵɵnextContext();\n    i0.ɵɵclassMap(ctx_r1.cn(ctx_r1.cx(\"root\"), ctx_r1.styleClass));\n    i0.ɵɵproperty(\"ngStyle\", ctx_r1.style)(\"@animation\", i0.ɵɵpureFunction2(14, _c3, ctx_r1.overlayVisible ? \"open\" : \"close\", i0.ɵɵpureFunction2(11, _c2, ctx_r1.showTransitionOptions, ctx_r1.hideTransitionOptions)));\n    i0.ɵɵattribute(\"aria-modal\", ctx_r1.overlayVisible)(\"aria-label\", ctx_r1.ariaLabel)(\"aria-labelledBy\", ctx_r1.ariaLabelledBy);\n    i0.ɵɵadvance();\n    i0.ɵɵclassMap(ctx_r1.cx(\"content\"));\n    i0.ɵɵadvance(2);\n    i0.ɵɵproperty(\"ngTemplateOutlet\", ctx_r1.contentTemplate || ctx_r1._contentTemplate)(\"ngTemplateOutletContext\", i0.ɵɵpureFunction1(17, _c4, ctx_r1.onCloseClick.bind(ctx_r1)));\n  }\n}\nconst theme = /*css*/`\n.p-popover {\n    margin-top: dt('popover.gutter');\n    background: dt('popover.background');\n    color: dt('popover.color');\n    border: 1px solid dt('popover.border.color');\n    border-radius: dt('popover.border.radius');\n    box-shadow: dt('popover.shadow');\n    position: absolute\n}\n\n.p-popover-content {\n    padding: dt('popover.content.padding');\n}\n\n.p-popover-flipped {\n    margin-top: calc(dt('popover.gutter') * -1);\n    margin-bottom: dt('popover.gutter');\n}\n\n.p-popover-enter-from {\n    opacity: 0;\n    transform: scaleY(0.8);\n}\n\n.p-popover-leave-to {\n    opacity: 0;\n}\n\n.p-popover-enter-active {\n    transition: transform 0.12s cubic-bezier(0, 0, 0.2, 1), opacity 0.12s cubic-bezier(0, 0, 0.2, 1);\n}\n\n.p-popover-leave-active {\n    transition: opacity 0.1s linear;\n}\n\n.p-popover:after,\n.p-popover:before {\n    bottom: 100%;\n    left: calc(dt('popover.arrow.offset') + dt('popover.arrow.left'));\n    content: \" \";\n    height: 0;\n    width: 0;\n    position: absolute;\n    pointer-events: none;\n}\n\n.p-popover:after {\n    border-width: calc(dt('popover.gutter') - 2px);\n    margin-left: calc(-1 * (dt('popover.gutter') - 2px));\n    border-style: solid;\n    border-color: transparent;\n    border-bottom-color: dt('popover.background');\n}\n\n.p-popover:before {\n    border-width: dt('popover.gutter');\n    margin-left: calc(-1 * dt('popover.gutter'));\n    border-style: solid;\n    border-color: transparent;\n    border-bottom-color: dt('popover.border.color');\n}\n\n.p-popover-flipped:after,\n.p-popover-flipped:before {\n    bottom: auto;\n    top: 100%;\n}\n\n.p-popover.p-popover-flipped:after {\n    border-bottom-color: transparent;\n    border-top-color: dt('popover.background');\n}\n\n.p-popover.p-popover-flipped:before {\n    border-bottom-color: transparent;\n    border-top-color: dt('popover.border.color');\n}\n\n`;\nconst classes = {\n  root: 'p-popover p-component',\n  content: 'p-popover-content'\n};\nclass PopoverStyle extends BaseStyle {\n  name = 'popover';\n  theme = theme;\n  classes = classes;\n  static ɵfac = /* @__PURE__ */(() => {\n    let ɵPopoverStyle_BaseFactory;\n    return function PopoverStyle_Factory(__ngFactoryType__) {\n      return (ɵPopoverStyle_BaseFactory || (ɵPopoverStyle_BaseFactory = i0.ɵɵgetInheritedFactory(PopoverStyle)))(__ngFactoryType__ || PopoverStyle);\n    };\n  })();\n  static ɵprov = /* @__PURE__ */i0.ɵɵdefineInjectable({\n    token: PopoverStyle,\n    factory: PopoverStyle.ɵfac\n  });\n}\n(() => {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(PopoverStyle, [{\n    type: Injectable\n  }], null, null);\n})();\n\n/**\n * Popover is a container component that can overlay other components on page.\n * @group Components\n */\nclass Popover extends BaseComponent {\n  /**\n   * Defines a string that labels the input for accessibility.\n   * @group Props\n   */\n  ariaLabel;\n  /**\n   * Establishes relationships between the component and label(s) where its value should be one or more element IDs.\n   * @group Props\n   */\n  ariaLabelledBy;\n  /**\n   * Enables to hide the overlay when outside is clicked.\n   * @group Props\n   */\n  dismissable = true;\n  /**\n   * Inline style of the component.\n   * @group Props\n   */\n  style;\n  /**\n   * Style class of the component.\n   * @group Props\n   */\n  styleClass;\n  /**\n   * Target element to attach the panel, valid values are \"body\" or a local ng-template variable of another element (note: use binding with brackets for template variables, e.g. [appendTo]=\"mydiv\" for a div element having #mydiv as variable name).\n   * @group Props\n   */\n  appendTo = 'body';\n  /**\n   * Whether to automatically manage layering.\n   * @group Props\n   */\n  autoZIndex = true;\n  /**\n   * Aria label of the close icon.\n   * @group Props\n   */\n  ariaCloseLabel;\n  /**\n   * Base zIndex value to use in layering.\n   * @group Props\n   */\n  baseZIndex = 0;\n  /**\n   * When enabled, first button receives focus on show.\n   * @group Props\n   */\n  focusOnShow = true;\n  /**\n   * Transition options of the show animation.\n   * @group Props\n   */\n  showTransitionOptions = '.12s cubic-bezier(0, 0, 0.2, 1)';\n  /**\n   * Transition options of the hide animation.\n   * @group Props\n   */\n  hideTransitionOptions = '.1s linear';\n  /**\n   * Callback to invoke when an overlay becomes visible.\n   * @group Emits\n   */\n  onShow = new EventEmitter();\n  /**\n   * Callback to invoke when an overlay gets hidden.\n   * @group Emits\n   */\n  onHide = new EventEmitter();\n  container;\n  overlayVisible = false;\n  render = false;\n  isOverlayAnimationInProgress = false;\n  selfClick = false;\n  documentClickListener;\n  target;\n  willHide;\n  scrollHandler;\n  documentResizeListener;\n  /**\n   * Custom content template.\n   * @group Templates\n   */\n  contentTemplate;\n  templates;\n  _contentTemplate;\n  destroyCallback;\n  overlayEventListener;\n  overlaySubscription;\n  _componentStyle = inject(PopoverStyle);\n  zone = inject(NgZone);\n  overlayService = inject(OverlayService);\n  ngAfterContentInit() {\n    this.templates.forEach(item => {\n      switch (item.getType()) {\n        case 'content':\n          this._contentTemplate = item.template;\n          break;\n      }\n    });\n  }\n  bindDocumentClickListener() {\n    if (isPlatformBrowser(this.platformId)) {\n      if (!this.documentClickListener) {\n        let documentEvent = isIOS() ? 'touchstart' : 'click';\n        const documentTarget = this.el ? this.el.nativeElement.ownerDocument : this.document;\n        this.documentClickListener = this.renderer.listen(documentTarget, documentEvent, event => {\n          if (!this.dismissable) {\n            return;\n          }\n          if (!this.container?.contains(event.target) && this.target !== event.target && !this.target.contains(event.target) && !this.selfClick) {\n            this.hide();\n          }\n          this.selfClick = false;\n          this.cd.markForCheck();\n        });\n      }\n    }\n  }\n  unbindDocumentClickListener() {\n    if (this.documentClickListener) {\n      this.documentClickListener();\n      this.documentClickListener = null;\n      this.selfClick = false;\n    }\n  }\n  /**\n   * Toggles the visibility of the panel.\n   * @param {Event} event - Browser event\n   * @param {Target} target - Target element.\n   * @group Method\n   */\n  toggle(event, target) {\n    if (this.isOverlayAnimationInProgress) {\n      return;\n    }\n    if (this.overlayVisible) {\n      if (this.hasTargetChanged(event, target)) {\n        this.destroyCallback = () => {\n          this.show(null, target || event.currentTarget || event.target);\n        };\n      }\n      this.hide();\n    } else {\n      this.show(event, target);\n    }\n  }\n  /**\n   * Displays the panel.\n   * @param {Event} event - Browser event\n   * @param {Target} target - Target element.\n   * @group Method\n   */\n  show(event, target) {\n    target && event && event.stopPropagation();\n    if (this.isOverlayAnimationInProgress) {\n      return;\n    }\n    this.target = target || event.currentTarget || event.target;\n    this.overlayVisible = true;\n    this.render = true;\n    this.cd.markForCheck();\n  }\n  onOverlayClick(event) {\n    this.overlayService.add({\n      originalEvent: event,\n      target: this.el.nativeElement\n    });\n    this.selfClick = true;\n  }\n  onContentClick(event) {\n    const targetElement = event.target;\n    this.selfClick = event.offsetX < targetElement.clientWidth && event.offsetY < targetElement.clientHeight;\n  }\n  hasTargetChanged(event, target) {\n    return this.target != null && this.target !== (target || event.currentTarget || event.target);\n  }\n  appendContainer() {\n    if (this.appendTo) {\n      if (this.appendTo === 'body') this.renderer.appendChild(this.document.body, this.container);else appendChild(this.appendTo, this.container);\n    }\n  }\n  restoreAppend() {\n    if (this.container && this.appendTo) {\n      this.renderer.appendChild(this.el.nativeElement, this.container);\n    }\n  }\n  align() {\n    if (this.autoZIndex) {\n      ZIndexUtils.set('overlay', this.container, this.baseZIndex + this.config.zIndex.overlay);\n    }\n    absolutePosition(this.container, this.target, false);\n    const containerOffset = getOffset(this.container);\n    const targetOffset = getOffset(this.target);\n    const borderRadius = this.document.defaultView?.getComputedStyle(this.container).getPropertyValue('border-radius');\n    let arrowLeft = 0;\n    if (containerOffset.left < targetOffset.left) {\n      arrowLeft = targetOffset.left - containerOffset.left - parseFloat(borderRadius) * 2;\n    }\n    this.container?.style.setProperty($dt('popover.arrow.left').name, `${arrowLeft}px`);\n    if (containerOffset.top < targetOffset.top) {\n      this.container.setAttribute('data-p-popover-flipped', 'true');\n      addClass(this.container, 'p-popover-flipped');\n    }\n  }\n  onAnimationStart(event) {\n    if (event.toState === 'open') {\n      this.container = event.element;\n      this.container?.setAttribute(this.attrSelector, '');\n      this.appendContainer();\n      this.align();\n      this.bindDocumentClickListener();\n      this.bindDocumentResizeListener();\n      this.bindScrollListener();\n      if (this.focusOnShow) {\n        this.focus();\n      }\n      this.overlayEventListener = e => {\n        if (this.container && this.container.contains(e.target)) {\n          this.selfClick = true;\n        }\n      };\n      this.overlaySubscription = this.overlayService.clickObservable.subscribe(this.overlayEventListener);\n      this.onShow.emit(null);\n    }\n    this.isOverlayAnimationInProgress = true;\n  }\n  onAnimationEnd(event) {\n    switch (event.toState) {\n      case 'void':\n        if (this.destroyCallback) {\n          this.destroyCallback();\n          this.destroyCallback = null;\n        }\n        if (this.overlaySubscription) {\n          this.overlaySubscription.unsubscribe();\n        }\n        break;\n      case 'close':\n        if (this.autoZIndex) {\n          ZIndexUtils.clear(this.container);\n        }\n        if (this.overlaySubscription) {\n          this.overlaySubscription.unsubscribe();\n        }\n        this.onContainerDestroy();\n        this.onHide.emit({});\n        this.render = false;\n        break;\n    }\n    this.isOverlayAnimationInProgress = false;\n  }\n  focus() {\n    let focusable = findSingle(this.container, '[autofocus]');\n    if (focusable) {\n      this.zone.runOutsideAngular(() => {\n        setTimeout(() => focusable.focus(), 5);\n      });\n    }\n  }\n  /**\n   * Hides the panel.\n   * @group Method\n   */\n  hide() {\n    this.overlayVisible = false;\n    this.cd.markForCheck();\n  }\n  onCloseClick(event) {\n    this.hide();\n    event.preventDefault();\n  }\n  onEscapeKeydown(event) {\n    this.hide();\n  }\n  onWindowResize() {\n    if (this.overlayVisible && !isTouchDevice()) {\n      this.hide();\n    }\n  }\n  bindDocumentResizeListener() {\n    if (isPlatformBrowser(this.platformId)) {\n      if (!this.documentResizeListener) {\n        const window = this.document.defaultView;\n        this.documentResizeListener = this.renderer.listen(window, 'resize', this.onWindowResize.bind(this));\n      }\n    }\n  }\n  unbindDocumentResizeListener() {\n    if (this.documentResizeListener) {\n      this.documentResizeListener();\n      this.documentResizeListener = null;\n    }\n  }\n  bindScrollListener() {\n    if (isPlatformBrowser(this.platformId)) {\n      if (!this.scrollHandler) {\n        this.scrollHandler = new ConnectedOverlayScrollHandler(this.target, () => {\n          if (this.overlayVisible) {\n            this.hide();\n          }\n        });\n      }\n      this.scrollHandler.bindScrollListener();\n    }\n  }\n  unbindScrollListener() {\n    if (this.scrollHandler) {\n      this.scrollHandler.unbindScrollListener();\n    }\n  }\n  onContainerDestroy() {\n    if (!this.cd.destroyed) {\n      this.target = null;\n    }\n    this.unbindDocumentClickListener();\n    this.unbindDocumentResizeListener();\n    this.unbindScrollListener();\n  }\n  ngOnDestroy() {\n    if (this.scrollHandler) {\n      this.scrollHandler.destroy();\n      this.scrollHandler = null;\n    }\n    if (this.container && this.autoZIndex) {\n      ZIndexUtils.clear(this.container);\n    }\n    if (!this.cd.destroyed) {\n      this.target = null;\n    }\n    this.destroyCallback = null;\n    if (this.container) {\n      this.restoreAppend();\n      this.onContainerDestroy();\n    }\n    if (this.overlaySubscription) {\n      this.overlaySubscription.unsubscribe();\n    }\n    super.ngOnDestroy();\n  }\n  static ɵfac = /* @__PURE__ */(() => {\n    let ɵPopover_BaseFactory;\n    return function Popover_Factory(__ngFactoryType__) {\n      return (ɵPopover_BaseFactory || (ɵPopover_BaseFactory = i0.ɵɵgetInheritedFactory(Popover)))(__ngFactoryType__ || Popover);\n    };\n  })();\n  static ɵcmp = /* @__PURE__ */i0.ɵɵdefineComponent({\n    type: Popover,\n    selectors: [[\"p-popover\"]],\n    contentQueries: function Popover_ContentQueries(rf, ctx, dirIndex) {\n      if (rf & 1) {\n        i0.ɵɵcontentQuery(dirIndex, _c0, 4);\n        i0.ɵɵcontentQuery(dirIndex, PrimeTemplate, 4);\n      }\n      if (rf & 2) {\n        let _t;\n        i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.contentTemplate = _t.first);\n        i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.templates = _t);\n      }\n    },\n    hostBindings: function Popover_HostBindings(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵlistener(\"keydown.escape\", function Popover_keydown_escape_HostBindingHandler($event) {\n          return ctx.onEscapeKeydown($event);\n        }, i0.ɵɵresolveDocument);\n      }\n    },\n    inputs: {\n      ariaLabel: \"ariaLabel\",\n      ariaLabelledBy: \"ariaLabelledBy\",\n      dismissable: [2, \"dismissable\", \"dismissable\", booleanAttribute],\n      style: \"style\",\n      styleClass: \"styleClass\",\n      appendTo: \"appendTo\",\n      autoZIndex: [2, \"autoZIndex\", \"autoZIndex\", booleanAttribute],\n      ariaCloseLabel: \"ariaCloseLabel\",\n      baseZIndex: [2, \"baseZIndex\", \"baseZIndex\", numberAttribute],\n      focusOnShow: [2, \"focusOnShow\", \"focusOnShow\", booleanAttribute],\n      showTransitionOptions: \"showTransitionOptions\",\n      hideTransitionOptions: \"hideTransitionOptions\"\n    },\n    outputs: {\n      onShow: \"onShow\",\n      onHide: \"onHide\"\n    },\n    features: [i0.ɵɵProvidersFeature([PopoverStyle]), i0.ɵɵInheritDefinitionFeature],\n    ngContentSelectors: _c1,\n    decls: 1,\n    vars: 1,\n    consts: [[\"role\", \"dialog\", 3, \"class\", \"ngStyle\", \"click\", 4, \"ngIf\"], [\"role\", \"dialog\", 3, \"click\", \"ngStyle\"], [3, \"click\", \"mousedown\"], [4, \"ngTemplateOutlet\", \"ngTemplateOutletContext\"]],\n    template: function Popover_Template(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵprojectionDef();\n        i0.ɵɵtemplate(0, Popover_div_0_Template, 4, 19, \"div\", 0);\n      }\n      if (rf & 2) {\n        i0.ɵɵproperty(\"ngIf\", ctx.render);\n      }\n    },\n    dependencies: [CommonModule, i1.NgIf, i1.NgTemplateOutlet, i1.NgStyle, SharedModule],\n    encapsulation: 2,\n    data: {\n      animation: [trigger('animation', [state('void', style({\n        transform: 'scaleY(0.8)',\n        opacity: 0\n      })), state('close', style({\n        opacity: 0\n      })), state('open', style({\n        transform: 'translateY(0)',\n        opacity: 1\n      })), transition('void => open', animate('{{showTransitionParams}}')), transition('open => close', animate('{{hideTransitionParams}}'))])]\n    },\n    changeDetection: 0\n  });\n}\n(() => {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(Popover, [{\n    type: Component,\n    args: [{\n      selector: 'p-popover',\n      standalone: true,\n      imports: [CommonModule, SharedModule],\n      template: `\n        <div\n            *ngIf=\"render\"\n            [class]=\"cn(cx('root'), styleClass)\"\n            [ngStyle]=\"style\"\n            (click)=\"onOverlayClick($event)\"\n            [@animation]=\"{\n                value: overlayVisible ? 'open' : 'close',\n                params: { showTransitionParams: showTransitionOptions, hideTransitionParams: hideTransitionOptions }\n            }\"\n            (@animation.start)=\"onAnimationStart($event)\"\n            (@animation.done)=\"onAnimationEnd($event)\"\n            role=\"dialog\"\n            [attr.aria-modal]=\"overlayVisible\"\n            [attr.aria-label]=\"ariaLabel\"\n            [attr.aria-labelledBy]=\"ariaLabelledBy\"\n        >\n            <div [class]=\"cx('content')\" (click)=\"onContentClick($event)\" (mousedown)=\"onContentClick($event)\">\n                <ng-content></ng-content>\n                <ng-template *ngTemplateOutlet=\"contentTemplate || _contentTemplate; context: { closeCallback: onCloseClick.bind(this) }\"></ng-template>\n            </div>\n        </div>\n    `,\n      animations: [trigger('animation', [state('void', style({\n        transform: 'scaleY(0.8)',\n        opacity: 0\n      })), state('close', style({\n        opacity: 0\n      })), state('open', style({\n        transform: 'translateY(0)',\n        opacity: 1\n      })), transition('void => open', animate('{{showTransitionParams}}')), transition('open => close', animate('{{hideTransitionParams}}'))])],\n      changeDetection: ChangeDetectionStrategy.OnPush,\n      encapsulation: ViewEncapsulation.None,\n      providers: [PopoverStyle]\n    }]\n  }], null, {\n    ariaLabel: [{\n      type: Input\n    }],\n    ariaLabelledBy: [{\n      type: Input\n    }],\n    dismissable: [{\n      type: Input,\n      args: [{\n        transform: booleanAttribute\n      }]\n    }],\n    style: [{\n      type: Input\n    }],\n    styleClass: [{\n      type: Input\n    }],\n    appendTo: [{\n      type: Input\n    }],\n    autoZIndex: [{\n      type: Input,\n      args: [{\n        transform: booleanAttribute\n      }]\n    }],\n    ariaCloseLabel: [{\n      type: Input\n    }],\n    baseZIndex: [{\n      type: Input,\n      args: [{\n        transform: numberAttribute\n      }]\n    }],\n    focusOnShow: [{\n      type: Input,\n      args: [{\n        transform: booleanAttribute\n      }]\n    }],\n    showTransitionOptions: [{\n      type: Input\n    }],\n    hideTransitionOptions: [{\n      type: Input\n    }],\n    onShow: [{\n      type: Output\n    }],\n    onHide: [{\n      type: Output\n    }],\n    contentTemplate: [{\n      type: ContentChild,\n      args: ['content', {\n        descendants: false\n      }]\n    }],\n    templates: [{\n      type: ContentChildren,\n      args: [PrimeTemplate]\n    }],\n    onEscapeKeydown: [{\n      type: HostListener,\n      args: ['document:keydown.escape', ['$event']]\n    }]\n  });\n})();\nclass PopoverModule {\n  static ɵfac = function PopoverModule_Factory(__ngFactoryType__) {\n    return new (__ngFactoryType__ || PopoverModule)();\n  };\n  static ɵmod = /* @__PURE__ */i0.ɵɵdefineNgModule({\n    type: PopoverModule,\n    imports: [Popover, SharedModule],\n    exports: [Popover, SharedModule]\n  });\n  static ɵinj = /* @__PURE__ */i0.ɵɵdefineInjector({\n    imports: [Popover, SharedModule, SharedModule]\n  });\n}\n(() => {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(PopoverModule, [{\n    type: NgModule,\n    args: [{\n      imports: [Popover, SharedModule],\n      exports: [Popover, SharedModule]\n    }]\n  }], null, null);\n})();\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { Popover, PopoverModule, PopoverStyle };\n","import { Component, input, output, signal, effect } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { FormsModule } from '@angular/forms';\nimport { MultiSelectModule, MultiSelectChangeEvent } from 'primeng/multiselect';\nimport { ButtonModule } from 'primeng/button';\nimport { TooltipModule } from 'primeng/tooltip';\nimport { GridColumn } from '../../../models';\nimport { PopoverModule } from 'primeng/popover';\n\nexport interface ColumnOption {\n  label: string;\n  value: string;\n  required?: boolean;\n}\n\n@Component({\n  selector: 'app-column-selector',\n  imports: [\n    CommonModule,\n    FormsModule,\n    MultiSelectModule,\n    ButtonModule,\n    TooltipModule,\n    PopoverModule,\n  ],\n  templateUrl: './column-selector.component.html',\n  styleUrl: './column-selector.component.scss',\n})\nexport class ColumnSelectorComponent<T = unknown> {\n  readonly columns = input.required<GridColumn<T>[]>();\n  readonly selectedColumns = input<string[]>([]);\n  readonly disabled = input<boolean>(false);\n\n  readonly columnChange = output<string[]>();\n\n  readonly columnOptions = signal<ColumnOption[]>([]);\n  readonly selectedValues = signal<string[]>([]);\n\n  constructor() {\n    // Update column options when columns change\n    effect(() => {\n      const cols = this.columns();\n      const options = cols.map((col) => ({\n        label: col.header,\n        value: col.field,\n      }));\n      this.columnOptions.set(options);\n    });\n\n    // Update selected values when selectedColumns input changes\n    effect(() => {\n      const selected = this.selectedColumns();\n      if (selected.length > 0) {\n        this.selectedValues.set(selected);\n      } else {\n        // Default to all columns if none selected\n        const allColumns = this.columns().map((col) => col.field);\n        this.selectedValues.set(allColumns);\n      }\n    });\n  }\n\n  onSelectionChange(event: MultiSelectChangeEvent): void {\n    const values = event.value as string[];\n    this.selectedValues.set(values);\n    this.columnChange.emit(values);\n  }\n\n  selectAll(): void {\n    const allValues = this.columnOptions().map((option) => option.value);\n    this.selectedValues.set(allValues);\n    this.columnChange.emit(allValues);\n  }\n\n  clearAll(): void {\n    // Keep only required columns\n    const requiredValues = this.columnOptions()\n      .filter((option) => option.required === true)\n      .map((option) => option.value);\n    this.selectedValues.set(requiredValues);\n    this.columnChange.emit(requiredValues);\n  }\n\n  resetToDefault(): void {\n    // Reset to all columns (different from selectAll behavior)\n    this.selectAll();\n  }\n}\n","<div class=\"inline-block\">\n  <button\n    type=\"button\"\n    class=\"pi pi-objects-column action hover\"\n    [class.text-primary]=\"selectedValues().length < columnOptions().length\"\n    pTooltip=\"Column Visibility\"\n    tooltipPosition=\"bottom\"\n    [attr.aria-label]=\"'Column visibility selector'\"\n    [attr.aria-disabled]=\"disabled()\"\n    [disabled]=\"disabled()\"\n    (click)=\"overlayPanel.toggle($event)\"\n  ></button>\n\n  <p-popover #overlayPanel [dismissable]=\"true\">\n    <div class=\"min-w-[300px] max-w-[400px]\">\n      <div class=\"flex justify-between items-center mb-3 gap-2\">\n        <h5 class=\"m-0 font-semibold\">Show Columns</h5>\n      </div>\n\n      <div class=\"column-options\">\n        <p-multiSelect\n          [options]=\"columnOptions()\"\n          [(ngModel)]=\"selectedValues\"\n          optionLabel=\"label\"\n          optionValue=\"value\"\n          display=\"chip\"\n          [showToggleAll]=\"true\"\n          [showHeader]=\"true\"\n          [filter]=\"true\"\n          filterBy=\"label\"\n          placeholder=\"Select columns to display\"\n          styleClass=\"w-full\"\n          panelStyleClass=\"column-selector-dropdown\"\n          (onChange)=\"onSelectionChange($event)\"\n          [disabled]=\"disabled()\"\n        >\n          <ng-template let-option pTemplate=\"item\">\n            <div class=\"flex align-items-center gap-2\">\n              <span [class.font-semibold]=\"option.required\">{{\n                option.label\n              }}</span>\n              @if (option.required) {\n                <span class=\"text-xs text-blue-500\">(Required)</span>\n              }\n            </div>\n          </ng-template>\n        </p-multiSelect>\n      </div>\n\n      <div class=\"mt-2 text-sm text-gray-600\">\n        {{ selectedValues().length }} of {{ columnOptions().length }} columns\n        selected\n      </div>\n    </div>\n  </p-popover>\n</div>\n","import { inject, Injectable } from '@angular/core';\nimport { GridConfiguration } from '../models/grid.model';\nimport { LocalStorageService } from './local-storage.service';\nimport { isNullOrUndefined } from '../utils';\n\nconst GRID_PREFERENCES_KEY = 'grid_column_preferences';\n\ninterface GridPreferenceData {\n  visibleColumns: string[];\n  schemaVersion: string;\n  lastUpdated: number;\n}\n\ninterface GridDiagnosticInfo {\n  columnCount: number;\n  schemaVersion: string;\n  lastUpdated: string;\n  columns: string[];\n}\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class GridPreferenceService {\n  private readonly localStorageService = inject(LocalStorageService);\n\n  /**\n   * Generates a schema version hash based on the column fields\n   */\n  private generateSchemaVersion<T>(gridConfig: GridConfiguration<T>): string {\n    const columnFields = gridConfig.columns\n      .map((col) => col.field)\n      .sort((a, b) => a.localeCompare(b))\n      .join('|');\n    return btoa(columnFields).slice(0, 16); // Simple hash for version comparison\n  }\n\n  /**\n   * Validates and syncs stored preferences with current column schema\n   */\n  private validateAndSyncPreferences<T>(\n    gridConfig: GridConfiguration<T>,\n    storedData: GridPreferenceData | null,\n  ): string[] {\n    const currentSchema = this.generateSchemaVersion(gridConfig);\n    const availableFields = new Set(gridConfig.columns.map((col) => col.field));\n\n    // If no stored data or schema mismatch, return defaults\n    if (!storedData || storedData.schemaVersion !== currentSchema) {\n      return this.getDefaultColumns(gridConfig);\n    }\n\n    // Validate stored columns against current schema\n    const validStoredColumns = storedData.visibleColumns.filter((field) =>\n      availableFields.has(field),\n    );\n\n    // Check if new columns were added that should be visible by default\n    const newColumns = this.getNewDefaultColumns(\n      gridConfig,\n      validStoredColumns,\n    );\n\n    return [...validStoredColumns, ...newColumns];\n  }\n\n  /**\n   * Gets default columns based on configuration\n   */\n  private getDefaultColumns<T>(gridConfig: GridConfiguration<T>): string[] {\n    if (gridConfig.defaultVisibleColumns) {\n      return gridConfig.defaultVisibleColumns;\n    }\n    return gridConfig.columns.map((col) => col.field);\n  }\n\n  /**\n   * Identifies new columns that should be visible by default\n   */\n  private getNewDefaultColumns<T>(\n    gridConfig: GridConfiguration<T>,\n    currentVisible: string[],\n  ): string[] {\n    const currentVisibleSet = new Set(currentVisible);\n    const defaultColumns = this.getDefaultColumns(gridConfig);\n\n    return defaultColumns.filter((field) => !currentVisibleSet.has(field));\n  }\n\n  /**\n   * Retrieves the visible columns for a specific grid.\n   * Automatically handles schema changes and maintains sync.\n   *\n   * @param gridConfig - The configuration object for the grid.\n   * @returns An array of strings representing the fields of the columns to be displayed.\n   */\n  getVisibleColumns<T>(gridConfig: GridConfiguration<T>): string[] {\n    const allPreferences =\n      this.localStorageService.getItem<Record<string, GridPreferenceData>>(\n        GRID_PREFERENCES_KEY,\n      ) || {};\n\n    const gridId = gridConfig.entityType;\n    const storedData = allPreferences[gridId];\n\n    // Validate and sync preferences\n    const syncedColumns = this.validateAndSyncPreferences(\n      gridConfig,\n      storedData,\n    );\n\n    // If preferences needed syncing, save the updated version\n    const currentSchema = this.generateSchemaVersion(gridConfig);\n    if (\n      isNullOrUndefined(storedData) ||\n      storedData.schemaVersion !== currentSchema ||\n      JSON.stringify(storedData.visibleColumns) !==\n        JSON.stringify(syncedColumns)\n    ) {\n      this.saveVisibleColumns(gridId, syncedColumns, currentSchema);\n    }\n\n    return syncedColumns;\n  }\n\n  /**\n   * Saves the visible columns for a specific grid with schema versioning.\n   *\n   * @param gridId - A unique identifier for the grid (e.g., 'assets', 'geofences').\n   * @param visibleColumns - An array of strings representing the fields of the visible columns.\n   * @param schemaVersion - Optional schema version. If not provided, will use 'unknown'.\n   */\n  saveVisibleColumns(\n    gridId: string,\n    visibleColumns: string[],\n    schemaVersion?: string,\n  ): void {\n    const allPreferences =\n      this.localStorageService.getItem<Record<string, GridPreferenceData>>(\n        GRID_PREFERENCES_KEY,\n      ) || {};\n\n    allPreferences[gridId] = {\n      visibleColumns,\n      schemaVersion: schemaVersion ?? 'unknown',\n      lastUpdated: Date.now(),\n    };\n\n    this.localStorageService.setItem(GRID_PREFERENCES_KEY, allPreferences);\n  }\n\n  /**\n   * Enhanced save method that includes schema validation\n   */\n  saveVisibleColumnsWithValidation<T>(\n    gridConfig: GridConfiguration<T>,\n    visibleColumns: string[],\n  ): void {\n    const availableFields = new Set(gridConfig.columns.map((col) => col.field));\n    const validColumns = visibleColumns.filter((field) =>\n      availableFields.has(field),\n    );\n\n    if (validColumns.length !== visibleColumns.length) {\n      console.warn(\n        `Some columns were filtered out as they don't exist in current schema for grid ${gridConfig.entityType}`,\n      );\n    }\n\n    const schemaVersion = this.generateSchemaVersion(gridConfig);\n    this.saveVisibleColumns(gridConfig.entityType, validColumns, schemaVersion);\n  }\n\n  /**\n   * Clears stored preferences for a specific grid.\n   *\n   * @param gridId - A unique identifier for the grid.\n   */\n  clearPreferences(gridId: string): void {\n    const allPreferences =\n      this.localStorageService.getItem<Record<string, GridPreferenceData>>(\n        GRID_PREFERENCES_KEY,\n      ) || {};\n    delete allPreferences[gridId];\n    this.localStorageService.setItem(GRID_PREFERENCES_KEY, allPreferences);\n  }\n\n  /**\n   * Clears all grid preferences.\n   */\n  clearAllPreferences(): void {\n    this.localStorageService.removeItem(GRID_PREFERENCES_KEY);\n  }\n\n  /**\n   * Gets diagnostic information about stored preferences\n   */\n  getDiagnosticInfo(): Record<string, GridDiagnosticInfo> {\n    const allPreferences =\n      this.localStorageService.getItem<Record<string, GridPreferenceData>>(\n        GRID_PREFERENCES_KEY,\n      ) || {};\n\n    return Object.entries(allPreferences).reduce(\n      (acc, [gridId, data]) => {\n        acc[gridId] = {\n          columnCount: data.visibleColumns.length,\n          schemaVersion: data.schemaVersion,\n          lastUpdated: new Date(data.lastUpdated).toISOString(),\n          columns: data.visibleColumns,\n        };\n        return acc;\n      },\n      {} as Record<string, GridDiagnosticInfo>,\n    );\n  }\n\n  /**\n   * Force refresh preferences for a specific grid (useful during development)\n   */\n  forceRefreshPreferences<T>(gridConfig: GridConfiguration<T>): void {\n    this.clearPreferences(gridConfig.entityType);\n    this.getVisibleColumns(gridConfig); // This will regenerate with current schema\n  }\n}\n","import {\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  DestroyRef,\n  effect,\n  inject,\n  OnInit,\n  signal,\n  ViewChild,\n} from '@angular/core';\nimport { ActivatedRoute, NavigationEnd, Router } from '@angular/router';\nimport {\n  catchError,\n  debounceTime,\n  defer,\n  EMPTY,\n  filter,\n  finalize,\n  map,\n  merge,\n  Observable,\n  of,\n  Subject,\n  switchMap,\n  tap,\n} from 'rxjs';\n\nimport { ButtonModule } from 'primeng/button';\nimport { TooltipModule } from 'primeng/tooltip';\n\nimport { GridComponent } from '../../../../shared/components/grid/grid.component';\nimport { ColumnSelectorComponent } from '../../../../shared/components/grid/column-selector/column-selector.component';\nimport { GridConfigurationFactory } from '../../../../shared/components/grid/grid-config-factory';\nimport {\n  FilterChangeEvent,\n  FilterValue,\n  GridColumn,\n  GridConfiguration,\n  GridResponse,\n  GridRowData,\n} from '../../../../shared/models';\nimport { TableLazyLoadEvent, TableRowSelectEvent } from 'primeng/table';\nimport { takeUntilDestroyed } from '@angular/core/rxjs-interop';\nimport { GridDataType, GridState } from '../../models/admin-grid.interface';\nimport { DEFAULT_PAGE_SIZE } from '../../../../core/models';\nimport {\n  isDefined,\n  isEmpty,\n  isNullOrUndefined,\n} from '../../../../shared/utils';\nimport { BroadcastEventMessageService } from '../../services/broadcast-event-messages.service';\nimport { DetailsComponentFactory } from '../../factories';\nimport { EntityDetailsService } from '../../services/entity/entity-details.service';\nimport { GridPreferenceService } from '../../../../shared/services/grid-preference.service';\n\n/**\n * Container component that handles the dynamic creation and management of grid configurations.\n * Supports lazy loading and dynamic column configuration based on route parameters.\n */\n@Component({\n  selector: 'app-admin-grid-container',\n  imports: [\n    GridComponent,\n    ColumnSelectorComponent,\n    ButtonModule,\n    TooltipModule,\n  ],\n  templateUrl: './admin-grid-container.component.html',\n  styleUrl: './admin-grid-container.component.scss',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class AdminGridContainerComponent implements OnInit {\n  @ViewChild(GridComponent) readonly grid?: GridComponent;\n  private readonly gridConfigurationFactory = inject(GridConfigurationFactory);\n  private readonly activatedRoute = inject(ActivatedRoute);\n  private readonly destroyRef = inject(DestroyRef);\n  private readonly currentGridState = signal<GridState>(undefined);\n  private readonly filterSubject = new Subject<FilterChangeEvent>();\n  private readonly broadcastService = inject(BroadcastEventMessageService);\n  private readonly detailsFactory = inject(DetailsComponentFactory);\n  readonly detailsService = inject(EntityDetailsService);\n  private readonly gridPreferenceService = inject(GridPreferenceService);\n  private readonly cdr = inject(ChangeDetectorRef);\n\n  protected gridConfiguration = signal<GridConfiguration<GridDataType> | null>(\n    null,\n  );\n  protected columns = signal<GridColumn<GridDataType>[]>([]);\n  protected data = signal<GridDataType[]>([]);\n  protected loading = signal(false);\n  protected totalRecords = signal<number>(0);\n  protected limit = signal<number>(DEFAULT_PAGE_SIZE);\n  readonly showFilters = signal<boolean>(false);\n  protected currentFilters = signal<Record<string, FilterValue>>({});\n  protected visibleColumns = signal<string[]>([]);\n  private readonly router = inject(Router);\n  private readonly forceGridReconfig$ = new Subject<void>();\n  private readonly lastProcessedRouteKey = signal<string | null>(null);\n\n  constructor() {\n    effect(() => {\n      const config = this.gridConfiguration();\n      if (isDefined(config?.columnsSignal)) {\n        this.columns.set(config.columnsSignal());\n      }\n    });\n  }\n\n  ngOnInit(): void {\n    this.initializeGridConfiguration();\n    this.initializeFilterDebounce();\n    this.initializeEntityUpdatesHandler();\n    this.initializeClientChangeHandler();\n    this.initializeGridFilterAndSelect();\n    this.forceGridReconfig$.next();\n  }\n\n  private selectGridItemFromQuery() {\n    this.activatedRoute.queryParams\n      .pipe(\n        takeUntilDestroyed(this.destroyRef),\n        tap((params) => {\n          // If data is already loaded, try to select the item\n          if (this.data().length > 0 && isDefined(params['details'])) {\n            const selectedId = params['details'];\n            const selectedItem = this.data().find(\n              (item) => item.id === selectedId,\n            );\n            if (selectedItem && this.grid) {\n              // Use setTimeout to ensure the view is ready\n              setTimeout(() => {\n                this.grid?.setSelection(selectedItem);\n                this.handleRowSelect({ data: selectedItem });\n              });\n            }\n          }\n        }),\n      )\n      .subscribe();\n  }\n\n  private initializeEntityUpdatesHandler(): void {\n    this.broadcastService\n      .on('entity-updated')\n      .pipe(takeUntilDestroyed(this.destroyRef))\n      .subscribe(() => {\n        // First, save the ID of the currently selected item\n        let currentSelection = null;\n\n        if (this.grid?.selectedRows) {\n          // Store the necessary data to restore selection\n          currentSelection = Array.isArray(this.grid.selectedRows)\n            ? [...this.grid.selectedRows]\n            : { ...this.grid.selectedRows };\n        }\n\n        // Refresh the grid data using the current state\n        this.loadData(this.currentGridState())\n          .pipe(takeUntilDestroyed(this.destroyRef))\n          .subscribe(() => {\n            // After data is loaded, restore selection\n            if (currentSelection) {\n              this.restoreSelection(\n                Array.isArray(currentSelection)\n                  ? currentSelection[0]\n                  : currentSelection,\n              );\n            }\n          });\n      });\n  }\n\n  private initializeClientChangeHandler(): void {\n    const configChanges$ = merge(\n      this.broadcastService.on('client-changed'),\n      this.broadcastService.on('entity-changed'),\n    );\n\n    const dataChanges$ = this.broadcastService.on('entity-deleted');\n\n    // Full grid reconfiguration for client and entity changes\n    configChanges$\n      .pipe(\n        takeUntilDestroyed(this.destroyRef),\n        debounceTime(100), // Prevent multiple rapid refreshes\n      )\n      .subscribe(() => {\n        this.lastProcessedRouteKey.set(null);\n        this.forceGridReconfig$.next();\n      });\n\n    // Data refresh only for entity deletions\n    dataChanges$\n      .pipe(\n        takeUntilDestroyed(this.destroyRef),\n        debounceTime(100), // Prevent multiple rapid refreshes\n      )\n      .subscribe(() => {\n        // Just refresh the data, don't reconfigure the entire grid\n        this.onRefresh();\n      });\n  }\n\n  /**\n   * Tries to restore a previously selected item\n   */\n  private restoreSelection(previousSelection: GridRowData): void {\n    if (isNullOrUndefined(previousSelection) || !this.grid) return;\n\n    if (this.data().length === 0) {\n      console.warn('Cannot restore selection: grid data is empty');\n      return;\n    }\n\n    try {\n      if (Array.isArray(previousSelection)) {\n        const selectedIds = new Set(previousSelection.map((item) => item.id));\n        const refreshedItems = this.data().filter((item) =>\n          selectedIds.has(item.id),\n        );\n\n        if (refreshedItems.length > 0) {\n          setTimeout(() => {\n            this.grid?.setSelection(refreshedItems);\n            if (isDefined(refreshedItems[0])) {\n              this.handleRowSelect({ data: refreshedItems[0] });\n            }\n          }, 0); // Using 0ms for consistency\n        }\n      } else if (isDefined(previousSelection?.['id'])) {\n        const refreshedItem = this.data().find(\n          (item) => item.id === previousSelection['id'],\n        );\n\n        if (refreshedItem) {\n          setTimeout(() => {\n            this.grid?.setSelection(refreshedItem);\n            this.handleRowSelect({ data: refreshedItem });\n          }, 0); // Using 0ms for consistency\n        } else {\n          console.warn(\n            `Item with id ${previousSelection['id']} not found in refreshed data`,\n          );\n        }\n      }\n    } catch (err) {\n      console.error('Error restoring selection:', err);\n    }\n  }\n\n  private initializeGridConfiguration() {\n    const navigationEvents$ = this.router.events.pipe(\n      filter((event): event is NavigationEnd => event instanceof NavigationEnd),\n      map(() => false as boolean),\n    );\n    const forceReconfigEvents$ = this.forceGridReconfig$.pipe(\n      map(() => true as boolean),\n    );\n\n    merge(navigationEvents$, forceReconfigEvents$)\n      .pipe(\n        takeUntilDestroyed(this.destroyRef),\n        switchMap(() => {\n          this.loading.set(true);\n\n          const type = this.activatedRoute.snapshot.paramMap.get('type');\n          const routeParams = this.getRouteParams();\n\n          const ownerId =\n            routeParams['clientId'] ??\n            routeParams['vendorId'] ??\n            routeParams['distributorId'] ??\n            'none';\n          const currentRouteKey = `${type}-${ownerId}`;\n\n          if (this.lastProcessedRouteKey() === currentRouteKey) {\n            this.loading.set(false);\n            return EMPTY;\n          }\n\n          this.lastProcessedRouteKey.set(currentRouteKey);\n\n          if (isNullOrUndefined(type)) {\n            this.gridConfiguration.set(null);\n            this.columns.set([]);\n            this.currentFilters.set({});\n            this.loading.set(false);\n            return EMPTY;\n          }\n\n          const config = this.gridConfigurationFactory.create<GridDataType>(\n            type,\n            routeParams,\n          );\n\n          if (!this.isValidConfig(config)) {\n            console.warn(\n              `AdminGridContainer: Generated configuration for type \"${type}\" (key: ${currentRouteKey}) is invalid.`,\n            );\n            this.gridConfiguration.set(null);\n            this.columns.set([]);\n            this.currentFilters.set({});\n            this.loading.set(false);\n            return EMPTY;\n          }\n\n          this.gridConfiguration.set(config);\n          this.columns.set(config.columns);\n\n          // Load visible columns from preferences, falling back to defaults\n          const savedVisibleColumns =\n            this.gridPreferenceService.getVisibleColumns(config);\n          this.visibleColumns.set(savedVisibleColumns);\n\n          if (isDefined(config.getFilters)) {\n            const filterState = config.getFilters();\n            const initialFilters: Record<string, FilterValue> = {};\n            for (const [field, criteria] of Object.entries(filterState)) {\n              if (isDefined(criteria) && typeof criteria === 'object') {\n                initialFilters[field] = criteria.value;\n              }\n            }\n            this.currentFilters.set(initialFilters);\n          } else {\n            this.currentFilters.set({});\n          }\n          return this.loadData();\n        }),\n        catchError((err) => {\n          console.error(\n            'AdminGridContainer: Error during grid configuration or data load pipeline:',\n            err,\n          );\n          this.loading.set(false);\n          this.data.set([]);\n          this.totalRecords.set(0);\n          this.gridConfiguration.set(null);\n          this.columns.set([]);\n          this.currentFilters.set({});\n          return EMPTY;\n        }),\n      )\n      .subscribe();\n  }\n\n  private getRouteParams(): Record<string, string | number> {\n    let route: ActivatedRoute | null = this.activatedRoute;\n    const paramsList: Record<string, string | number>[] = [];\n\n    while (route) {\n      paramsList.push(route.snapshot.params as Record<string, string | number>);\n      route = route.parent;\n    }\n\n    const finalParams: Record<string, string | number> = {};\n    for (let i = paramsList.length - 1; i >= 0; i--) {\n      Object.assign(finalParams, paramsList[i]);\n    }\n    return finalParams;\n  }\n\n  private isValidConfig(\n    config: GridConfiguration<GridDataType> | null,\n  ): config is GridConfiguration<GridDataType> {\n    // Check for essential parts of the configuration, e.g., dataService.\n    return isDefined(config?.dataService);\n  }\n\n  private initializeFilterDebounce(): void {\n    this.filterSubject\n      .pipe(\n        takeUntilDestroyed(this.destroyRef),\n        debounceTime(300), // Debounce filter changes by 300ms\n        tap((event) => {\n          const config = this.gridConfiguration();\n          if (!config) return;\n\n          config.onFilterChange?.(event.field, event.value);\n          this.loadData(this.currentGridState()).subscribe(() => {});\n        }),\n      )\n      .subscribe();\n  }\n\n  protected loadData(\n    event?: TableLazyLoadEvent,\n  ): Observable<GridResponse<GridDataType>> {\n    return defer(() => {\n      const config = this.gridConfiguration();\n\n      if (!this.isValidConfig(config)) {\n        // Guard against direct calls with invalid config\n        this.loading.set(false); // Ensure loading is off if we bail early\n        return EMPTY;\n      }\n\n      this.loading.set(true); // Explicitly set loading at the start of data fetching.\n\n      this.currentGridState.set(event); // Store the actual event being used.\n\n      return config.dataService.getList(config.getRequestParams(event)).pipe(\n        takeUntilDestroyed(this.destroyRef),\n        tap((response) => {\n          this.data.set(response.items);\n          this.totalRecords.set(response.count);\n          this.selectGridItemFromQuery(); // Attempt to select item after data is loaded.\n        }),\n        catchError((err) => {\n          console.error(\n            `AdminGridContainer: Error loading data for type:`,\n            err,\n          );\n          this.data.set([]); // Clear data on error.\n          this.totalRecords.set(0); // Clear count on error.\n          // loading.set(false) will be handled by finalize.\n          return EMPTY;\n        }),\n        finalize(() => {\n          this.loading.set(false); // Ensure loading is turned off when the stream completes or errors.\n        }),\n      );\n    });\n  }\n\n  protected onExport(): void {\n    this.grid?.exportCSV();\n  }\n\n  protected onRefresh(): void {\n    const config = this.gridConfiguration();\n    if (!this.isValidConfig(config)) {\n      return;\n    }\n\n    // Store details panel state before refresh\n    const hasSelectedItem = this.detailsService.showPanel();\n    const selectedItemId = this.detailsService.getSelectedItemId();\n\n    this.loadData(this.currentGridState())\n      .pipe(\n        takeUntilDestroyed(this.destroyRef),\n        tap(() => {\n          // If we had an item selected, try to refresh its details too\n          if (hasSelectedItem && selectedItemId) {\n            const refreshedItem = this.findItemById(selectedItemId);\n            if (isDefined(refreshedItem)) {\n              this.detailsService.softRefreshSelectedItem(refreshedItem);\n            } else {\n              // Item might have been deleted or changed, soft refresh with loading\n              this.detailsService.softRefreshSelectedItem();\n            }\n          }\n        }),\n      )\n      .subscribe();\n  }\n\n  protected handleFilterChange(event: FilterChangeEvent): void {\n    this.filterSubject.next({\n      field: event.field,\n      value: typeof event.value === 'string' ? event.value.trim() : event.value,\n    });\n  }\n\n  protected handleColumnChange(visibleColumnFields: string[]): void {\n    this.visibleColumns.set(visibleColumnFields);\n\n    // Save the preference with validation when columns change\n    const config = this.gridConfiguration();\n    if (config) {\n      this.gridPreferenceService.saveVisibleColumnsWithValidation(\n        config,\n        visibleColumnFields,\n      );\n    }\n  }\n\n  protected onFilterToggle(): void {\n    const config = this.gridConfiguration();\n    if (!this.grid || !config) return;\n\n    const newValue = !this.showFilters();\n    this.showFilters.set(newValue);\n\n    if (newValue) {\n      // When showing filters, sync the current filter state\n      if (config.getFilters) {\n        const filterState = config.getFilters();\n        const currentFilters: Record<string, FilterValue> = {};\n\n        // Convert FilterCriteria objects to FilterValue\n        for (const [field, criteria] of Object.entries(filterState)) {\n          if (isDefined(criteria) && typeof criteria === 'object') {\n            currentFilters[field] = criteria.value;\n          }\n        }\n\n        this.currentFilters.set(currentFilters);\n      }\n    } else if (this.grid.filterable()) {\n      if (config.clearFilters) {\n        // Call the grid configuration's clearFilters method to restore defaults\n        config.clearFilters();\n\n        // Load data with the updated filters that include defaults\n        this.loadData().pipe(takeUntilDestroyed(this.destroyRef)).subscribe();\n      }\n    }\n  }\n\n  protected handleLazyLoad(event: TableLazyLoadEvent): void {\n    this.loadData(event)\n      .pipe(\n        takeUntilDestroyed(this.destroyRef),\n        catchError(() => {\n          return EMPTY;\n        }),\n      )\n      .subscribe();\n  }\n\n  // Handle row selection from the grid\n  handleRowSelect(event: TableRowSelectEvent): void {\n    if (isEmpty(event) || isEmpty(event.data)) return;\n\n    const routeEntityType = this.detailsFactory.getEntityTypeFromRoute(\n      this.activatedRoute,\n      'type',\n    );\n    const entityType = routeEntityType ?? event.data.type;\n\n    const item = { ...event.data, entityType: entityType };\n\n    this.broadcastService.broadcast('grid-item-selected', {\n      item,\n      componentType: this.detailsFactory.getDetailsComponent(entityType),\n    });\n  }\n\n  /**\n   * Find an item in the current grid data by its ID\n   * Used for soft refreshing details panel after grid refresh\n   */\n  private findItemById(id: string): GridDataType | null {\n    const currentData = this.data();\n    return currentData?.find((item) => String(item.id) === id) ?? null;\n  }\n\n  /**\n   * Handles grid filter and select events from search navigation\n   * Now properly waits for columns to be available before processing\n   */\n  private initializeGridFilterAndSelect(): void {\n    this.broadcastService\n      .on('grid-filter-and-select')\n      .pipe(\n        takeUntilDestroyed(this.destroyRef),\n        debounceTime(100), // Minimal debounce to prevent duplicates\n        switchMap((data) => this.handleGridFilterAndSelectAsync(data)),\n      )\n      .subscribe();\n  }\n\n  /**\n   * Applies filter and selects item in the grid - properly awaits data loading\n   * Now waits for columns to be ready before attempting filter/select\n   */\n  private handleGridFilterAndSelectAsync(data: {\n    entityType: string;\n    entityId: string;\n    entityName: string;\n    filterField?: string;\n  }): Observable<void> {\n    return defer(() => {\n      // Wait for both config and columns to be ready\n      return this.waitForColumnsReady().pipe(\n        switchMap(() => {\n          const config = this.gridConfiguration();\n          if (!config) {\n            console.warn('Grid configuration not ready for filter and select');\n            return EMPTY;\n          }\n\n          const filterField = data.filterField ?? 'name';\n\n          // Check if the column exists and is filterable\n          const targetColumn = this.columns().find(\n            (col) => col.field === filterField,\n          );\n\n          if (isNullOrUndefined(targetColumn?.filter)) {\n            console.warn(\n              `Column ${filterField} is not filterable, falling back to basic selection`,\n            );\n            // Try to select from current data\n            this.selectItemFromCurrentData(data.entityId);\n            return EMPTY;\n          }\n\n          // Apply the filter through the config\n          if (!config.onFilterChange) {\n            console.warn('No filter change handler available');\n            this.selectItemFromCurrentData(data.entityId);\n            return EMPTY;\n          }\n\n          // Apply filter\n          config.onFilterChange(filterField, data.entityName);\n\n          // Show filters so user can see what's applied\n          // This ensures the filter UI is visible and shows the applied filter\n          this.showFilters.set(true);\n\n          // Update the current filters to reflect what was applied\n          // This will populate the filter input fields in the UI\n          this.currentFilters.set({\n            [filterField]: data.entityName,\n          });\n\n          // Enable grid filtering if not already enabled\n          if (this.grid && !this.grid.filterable()) {\n            // The grid component will pick up the filterable state\n            // and render the filter row\n          }\n\n          // Create a fresh load event that resets to first page\n          const currentState = this.currentGridState();\n          const resetEvent: TableLazyLoadEvent = {\n            first: 0, // Reset to page 1\n            rows: currentState?.rows ?? DEFAULT_PAGE_SIZE,\n            sortField: currentState?.sortField,\n            sortOrder: currentState?.sortOrder,\n          };\n\n          // Load data and wait for it to complete\n          return this.loadData(resetEvent).pipe(\n            tap(() => {\n              // Data is now loaded and available in this.data()\n              const item = this.data().find(\n                (i) => String(i.id) === data.entityId,\n              );\n\n              if (item && this.grid) {\n                // Select the item and trigger row select event\n                this.grid.setSelection(item);\n                this.handleRowSelect({ data: item });\n                this.cdr.detectChanges();\n              } else {\n                console.warn(\n                  `Item ${data.entityId} not found in filtered results. ` +\n                    `The item may not match the filter criteria \"${data.entityName}\".`,\n                );\n              }\n            }),\n            map(() => void 0), // Convert to Observable<void>\n            catchError((error) => {\n              console.error('Error during grid filter and select:', error);\n              return EMPTY;\n            }),\n          );\n        }),\n      );\n    });\n  }\n\n  /**\n   * Waits for columns to be ready before processing filter/select\n   * Polls the columns signal until they are populated\n   */\n  private waitForColumnsReady(): Observable<void> {\n    return defer(() => {\n      // If columns are already ready, return immediately\n      if (this.columns().length > 0) {\n        return of(void 0);\n      }\n\n      // Otherwise, wait for columns to be set\n      return new Observable<void>((observer) => {\n        const maxAttempts = 20; // 2 seconds max wait\n        let attempts = 0;\n\n        const checkInterval = setInterval(() => {\n          attempts++;\n\n          if (this.columns().length > 0) {\n            clearInterval(checkInterval);\n            observer.next();\n            observer.complete();\n          } else if (attempts >= maxAttempts) {\n            clearInterval(checkInterval);\n            console.warn('Columns not ready after maximum wait time');\n            observer.error(new Error('Columns not ready'));\n          }\n        }, 100);\n\n        // Cleanup on unsubscribe\n        return () => clearInterval(checkInterval);\n      }).pipe(\n        catchError(() => {\n          // If columns never load, just continue anyway\n          console.warn('Proceeding without columns being ready');\n          return of(void 0);\n        }),\n      );\n    });\n  }\n\n  /**\n   * Selects an item from the current grid data without filtering\n   */\n  private selectItemFromCurrentData(entityId: string): void {\n    const item = this.data().find((i) => String(i.id) === entityId);\n    if (item && this.grid) {\n      this.grid.setSelection(item);\n      this.handleRowSelect({ data: item });\n      this.cdr.detectChanges();\n    } else {\n      console.warn(\n        `Item ${entityId} not found in current grid data. ` +\n          `User may need to navigate pages or adjust filters manually.`,\n      );\n    }\n  }\n}\n","<div class=\"flex flex-col h-full w-full overflow-hidden\">\n  <div class=\"p-4 content-header flex-none w-full\">\n    <div class=\"flex justify-between items-center\">\n      <h2 class=\"text-xl font-semibold truncate\" id=\"gridTitle\">\n        {{ gridConfiguration()?.getTitle() }}\n      </h2>\n      <div\n        class=\"flex-none flex space-x-4 align-center\"\n        aria-label=\"Grid actions\"\n      >\n        <button\n          type=\"button\"\n          class=\"pi pi-plus action hover\"\n          pTooltip=\"Add\"\n          tooltipPosition=\"bottom\"\n          aria-label=\"Add new item\"\n          [attr.aria-disabled]=\"!gridConfiguration()?.onAdd\"\n          (click)=\"gridConfiguration()?.onAdd()\"\n        ></button>\n        <button\n          type=\"button\"\n          class=\"pi pi-refresh action hover\"\n          pTooltip=\"Refresh\"\n          tooltipPosition=\"bottom\"\n          (click)=\"onRefresh()\"\n          aria-label=\"Refresh grid data\"\n          [attr.aria-busy]=\"loading()\"\n        ></button>\n        <button\n          type=\"button\"\n          class=\"pi pi-filter-fill action hover\"\n          pTooltip=\"Filter\"\n          tooltipPosition=\"bottom\"\n          [class.text-primary]=\"showFilters()\"\n          (click)=\"onFilterToggle()\"\n          aria-label=\"Toggle filters\"\n          [attr.aria-disabled]=\"!gridConfiguration()?.filterConfig\"\n        ></button>\n        <app-column-selector\n          [columns]=\"columns()\"\n          [selectedColumns]=\"visibleColumns()\"\n          [disabled]=\"!gridConfiguration()\"\n          (columnChange)=\"handleColumnChange($event)\"\n        ></app-column-selector>\n        <button\n          class=\"pi pi-download action hover\"\n          pTooltip=\"Export CSV\"\n          tooltipPosition=\"bottom\"\n          (click)=\"onExport()\"\n          aria-label=\"Export to CSV\"\n        ></button>\n      </div>\n    </div>\n  </div>\n\n  <div class=\"flex-1 min-h-0 w-full overflow-hidden\">\n    <app-grid\n      [columns]=\"columns()\"\n      [data]=\"data()\"\n      [pagination]=\"true\"\n      [totalRecords]=\"totalRecords()\"\n      [lazy]=\"true\"\n      [filterable]=\"showFilters()\"\n      [visibleColumns]=\"visibleColumns()\"\n      (onLazyLoad)=\"handleLazyLoad($event)\"\n      (onFilterChange)=\"handleFilterChange($event)\"\n      (rowSelect)=\"handleRowSelect($event)\"\n      [selectionMode]=\"'single'\"\n      [loading]=\"loading()\"\n      [scrollable]=\"true\"\n      [scrollHeight]=\"'flex'\"\n      role=\"grid\"\n      [attr.aria-labelledby]=\"'gridTitle'\"\n      [attr.aria-busy]=\"loading()\"\n      [attr.aria-rowcount]=\"totalRecords()\"\n      [initialFilters]=\"currentFilters()\"\n      [sortable]=\"true\"\n      class=\"h-full max-w-full\"\n      styleClass=\"table-height\"\n    ></app-grid>\n  </div>\n  <div class=\"sr-only\" aria-live=\"polite\" aria-atomic=\"true\">\n    {{ loading() ? 'Loading data' : totalRecords() + ' items loaded' }}\n  </div>\n</div>\n","import { inject } from '@angular/core';\nimport { CanActivateFn, Router } from '@angular/router';\nimport { getAllRouteParams, isDefined } from '../../../shared/utils';\n\nexport const clientsGuard: CanActivateFn = (route, _state) => {\n  const router = inject(Router);\n\n  // Get all parameters including those from parent routes\n  const allParams = getAllRouteParams(route);\n  const vendorId = allParams['vendorId'];\n\n  if (isDefined(vendorId)) {\n    return router.createUrlTree([\n      'admin',\n      'vendor',\n      vendorId,\n      'clients',\n      'grid',\n      'vendor-clients',\n    ]);\n  }\n\n  // If no vendorId, don't allow access to the route\n  return false;\n};\n"],"mappings":"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","names":[],"x_google_ignoreList":[0]}