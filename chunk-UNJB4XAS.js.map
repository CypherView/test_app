{
  "version": 3,
  "sources": ["src/app/features/administration/services/entity/entity-adapter.factory.ts", "src/app/features/administration/services/entity/entity-details-loader.service.ts"],
  "sourcesContent": ["import { Injectable, Injector, Type, inject } from '@angular/core';\nimport { EntityDetailsAdapter } from '../../models/entity-details-adapter.interface';\nimport {\n  SimCardsDataAdapter,\n  AssetsDataAdapter,\n  AssetTagsDataAdapter,\n  DeviceConfigProfilesDataAdapter,\n  DevicesDataAdapter,\n  GeofencesDataAdapter,\n  AlertsDataAdapter,\n  DeviceProvidersDataAdapter,\n  SmsGatewayProvidersDataAdapter,\n  IoTypesDataAdapter,\n  OverspeedProfilesDataAdapter,\n  UserRolesDataAdapter,\n  UsersDataAdapter,\n  CustomFieldsDataAdapter,\n  ThemesDataAdapter,\n  CostCentresDataAdapter,\n  GeofenceGroupsDataAdapter,\n  AssetGroupsDataAdapter,\n  AssetCategoriesDataAdapter,\n  ClientsDataAdapter,\n  VendorsDataAdapter,\n  AssetRatingProfilesDataAdapter,\n  DistributorsDataAdapter,\n  AssetStateProfilesDataAdapter,\n  CompanyGroupsDataAdapter,\n  RoadProfilesDataAdapter,\n  GeoLockProfilesDataAdapter,\n  DeviceTypesDataAdapter,\n} from '../adapters';\nimport { EmailProvidersDataAdapter } from '../adapters/email-providers-data-adapter.service';\n\n@Injectable({ providedIn: 'root' })\nexport class EntityAdapterFactory {\n  private readonly adapters = new Map<string, EntityDetailsAdapter>();\n  private readonly injector = inject(Injector);\n\n  /**\n   * Gets the appropriate adapter for the given entity type.\n   * Adapters are lazy-loaded and cached for performance.\n   */\n  getAdapter(entityType: string): EntityDetailsAdapter | null {\n    const cacheKey = entityType.toLowerCase();\n\n    // Return cached adapter if available\n    if (this.adapters.has(cacheKey)) {\n      const cachedAdapter = this.adapters.get(cacheKey);\n      return cachedAdapter ?? null;\n    }\n\n    // Create and cache new adapter\n    const adapter = this.createAdapter(entityType);\n    if (adapter) {\n      this.adapters.set(cacheKey, adapter);\n    }\n\n    return adapter;\n  }\n\n  /**\n   * Creates the appropriate adapter instance for the given entity type\n   */\n  private createAdapter(entityType: string): EntityDetailsAdapter | null {\n    const adapterType = this.getAdapterType(entityType.toLowerCase());\n\n    if (!adapterType) {\n      return null;\n    }\n\n    try {\n      return this.injector.get(adapterType);\n    } catch (error) {\n      console.error(\n        `Failed to create adapter for entity type: ${entityType}`,\n        error,\n      );\n      return null;\n    }\n  }\n\n  /**\n   * Maps entity types to their corresponding adapter classes\n   */\n  private getAdapterType(\n    entityType: string,\n  ): Type<EntityDetailsAdapter> | null {\n    const adapterMap: Record<string, Type<EntityDetailsAdapter>> = {\n      // Sim Cards\n      'client-sim-cards': SimCardsDataAdapter,\n      simcard: SimCardsDataAdapter,\n\n      // Assets\n      'client-assets': AssetsDataAdapter,\n      asset: AssetsDataAdapter,\n\n      // Asset Tags\n      'client-asset-tags': AssetTagsDataAdapter,\n      'asset-tag': AssetTagsDataAdapter,\n\n      // Device Config Profiles\n      'client-device-config-profiles': DeviceConfigProfilesDataAdapter,\n      'vendor-device-config-profiles': DeviceConfigProfilesDataAdapter,\n      'device-config-profile': DeviceConfigProfilesDataAdapter,\n\n      // Devices\n      'client-hardware-devices': DevicesDataAdapter,\n      device: DevicesDataAdapter,\n\n      // Geofences\n      'client-geofences': GeofencesDataAdapter,\n      geofence: GeofencesDataAdapter,\n\n      // Alerts\n      'client-alerts': AlertsDataAdapter,\n      alert: AlertsDataAdapter,\n\n      // Device Providers\n      'client-device-providers': DeviceProvidersDataAdapter,\n      'distributor-device-providers': DeviceProvidersDataAdapter,\n      'device-provider': DeviceProvidersDataAdapter,\n\n      // SMS Gateway Providers\n      'client-sms-gateway-providers': SmsGatewayProvidersDataAdapter,\n      'sms-gateway-provider': SmsGatewayProvidersDataAdapter,\n      'vendor-sms-gateway-providers': SmsGatewayProvidersDataAdapter,\n\n      // Email Providers\n      'email-provider': EmailProvidersDataAdapter,\n      'vendor-email-provider': EmailProvidersDataAdapter,\n\n      // IO Types\n      'client-io-types': IoTypesDataAdapter,\n      'vendor-io-types': IoTypesDataAdapter,\n      'io-type': IoTypesDataAdapter,\n\n      // Overspeed Profiles\n      'client-overspeed-profiles': OverspeedProfilesDataAdapter,\n      'vendor-overspeed-profiles': OverspeedProfilesDataAdapter,\n      'distributor-overspeed-profiles': OverspeedProfilesDataAdapter,\n      'overspeed-profile': OverspeedProfilesDataAdapter,\n\n      // User Roles\n      'client-user-roles': UserRolesDataAdapter,\n      'vendor-user-roles': UserRolesDataAdapter,\n      'distributor-user-roles': UserRolesDataAdapter,\n      'user-role': UserRolesDataAdapter,\n      'system-user-roles': UserRolesDataAdapter,\n\n      // Users\n      'client-users': UsersDataAdapter,\n      'vendor-users': UsersDataAdapter,\n      'distributor-users': UsersDataAdapter,\n      'system-users': UsersDataAdapter,\n      user: UsersDataAdapter,\n\n      // Custom Fields\n      'client-custom-fields': CustomFieldsDataAdapter,\n      'vendor-custom-fields': CustomFieldsDataAdapter,\n      'custom-field': CustomFieldsDataAdapter,\n\n      // Themes\n      'distributor-themes': ThemesDataAdapter,\n      theme: ThemesDataAdapter,\n\n      // Cost Centres\n      'client-cost-centres': CostCentresDataAdapter,\n      'cost-centre': CostCentresDataAdapter,\n\n      // Geofence Groups\n      'client-geofence-groups': GeofenceGroupsDataAdapter,\n      'geofence-group': GeofenceGroupsDataAdapter,\n\n      // Asset Groups\n      'client-asset-groups': AssetGroupsDataAdapter,\n      'asset-group': AssetGroupsDataAdapter,\n\n      // Asset Categories\n      'client-asset-categories': AssetCategoriesDataAdapter,\n      'asset-category': AssetCategoriesDataAdapter,\n\n      // Clients\n      'vendor-clients': ClientsDataAdapter,\n      client: ClientsDataAdapter,\n\n      // Vendors\n      'distributor-vendors': VendorsDataAdapter,\n      vendor: VendorsDataAdapter,\n\n      // Asset Rating Profiles\n      'client-asset-rating-profiles': AssetRatingProfilesDataAdapter,\n      'asset-rating-profile': AssetRatingProfilesDataAdapter,\n\n      // Distributors\n      'super-admin-distributors': DistributorsDataAdapter,\n      distributor: DistributorsDataAdapter,\n\n      // Asset State Profiles\n      'client-asset-state-profiles': AssetStateProfilesDataAdapter,\n      'asset-state-profile': AssetStateProfilesDataAdapter,\n\n      // Company Groups\n      'vendor-company-groups': CompanyGroupsDataAdapter,\n      'company-group': CompanyGroupsDataAdapter,\n\n      // Road Profiles\n      'client-road-profiles': RoadProfilesDataAdapter,\n      'vendor-road-profiles': RoadProfilesDataAdapter,\n      'road-profile': RoadProfilesDataAdapter,\n\n      // Geo Lock Profiles\n      'client-geo-lock-profiles': GeoLockProfilesDataAdapter,\n      'geo-lock-profile': GeoLockProfilesDataAdapter,\n\n      // Device Types\n      'super-admin-device-types': DeviceTypesDataAdapter,\n      'device-types': DeviceTypesDataAdapter,\n    };\n\n    return adapterMap[entityType] ?? null;\n  }\n}\n", "import { Injectable, inject, DestroyRef, Type } from '@angular/core';\nimport { takeUntilDestroyed } from '@angular/core/rxjs-interop';\nimport { MessageService } from 'primeng/api';\nimport { finalize, Observable, map, catchError, of } from 'rxjs';\n\nimport { DetailsComponentFactory } from '../../factories';\nimport { EntityDetailsStateService } from './entity-details.state.service';\nimport { EntityAdapterFactory } from './entity-adapter.factory';\nimport { isDefined } from '../../../../shared/utils';\nimport { BaseEntity } from '../../../../shared/models';\nimport { DeviceTypesDataAdapter } from '../adapters/device-types.adapter.service';\n\n@Injectable({ providedIn: 'root' })\nexport class EntityDetailsLoaderService {\n  private readonly messageService = inject(MessageService);\n  private readonly detailsFactory = inject(DetailsComponentFactory);\n  private readonly stateService = inject(EntityDetailsStateService);\n  private readonly adapterFactory = inject(EntityAdapterFactory);\n  private readonly destroyRef = inject(DestroyRef);\n  private readonly deviceTypesDataAdapter = inject(DeviceTypesDataAdapter);\n\n  /**\n   * Loads entity details from ID and type\n   */\n  loadEntityDetails(entityType: string, entityId: string): void {\n    const component = this.detailsFactory.getDetailsComponent(entityType);\n\n    this.loadEntityWithCallbacks(\n      entityType,\n      entityId,\n      (item) => this.handleLoadSuccess(item, entityType, component),\n      () => this.handleLoadError(entityType),\n      `Failed to load ${entityType} details`,\n    );\n  }\n\n  /**\n   * Soft loads entity details for refresh without affecting UI state like accordion expansion\n   */\n  softLoadEntityDetails(entityType: string, entityId: string): void {\n    this.loadEntityWithCallbacks(\n      entityType,\n      entityId,\n      (item) => this.handleSoftLoadSuccess(item, entityType),\n      () => this.handleSoftLoadError(entityType),\n      `Failed to refresh ${entityType} details`,\n    );\n  }\n\n  /**\n   * Soft loads entity details and returns an Observable for better async handling\n   * This allows the state service to properly manage its own loading state\n   */\n  softLoadEntityDetailsObservable(\n    entityType: string,\n    entityId: string,\n  ): Observable<BaseEntity | null> {\n    try {\n      // Get the appropriate adapter\n      const entityAdapter = this.adapterFactory.getAdapter(entityType);\n\n      if (!entityAdapter) {\n        this.messageService.add({\n          severity: 'error',\n          summary: 'Error',\n          detail: `No adapter available for entity type: ${entityType}`,\n        });\n        return of(null);\n      }\n\n      // Return the observable with proper error handling\n      return entityAdapter.getById(entityId).pipe(\n        takeUntilDestroyed(this.destroyRef),\n        map((item: unknown) => {\n          const baseEntity = item as BaseEntity;\n          if (isDefined(baseEntity)) {\n            // Add entityType if not present\n            return { ...baseEntity, entityType: entityType };\n          }\n          return null;\n        }),\n        catchError((error) => {\n          this.messageService.add({\n            severity: 'error',\n            summary: 'Error',\n            detail: `Failed to refresh ${entityType} details`,\n          });\n          console.error('Soft load error:', error);\n          return of(null);\n        }),\n      );\n    } catch (error) {\n      this.messageService.add({\n        severity: 'error',\n        summary: 'Error',\n        detail: `Failed to refresh ${entityType} details: ${error}`,\n      });\n      return of(null);\n    }\n  }\n\n  /**\n   * Common helper method for loading entity details with custom callbacks\n   */\n  private loadEntityWithCallbacks(\n    entityType: string,\n    entityId: string,\n    onSuccess: (item: BaseEntity) => void,\n    onError: () => void,\n    errorMessage: string,\n  ): void {\n    this.stateService.isLoading.set(true);\n\n    try {\n      // Get the appropriate adapter\n      const entityAdapter = this.adapterFactory.getAdapter(entityType);\n\n      if (!entityAdapter) {\n        this.handleMissingService();\n        return;\n      }\n\n      // Load entity data\n      entityAdapter\n        .getById(entityId)\n        .pipe(\n          takeUntilDestroyed(this.destroyRef),\n          finalize(() => this.stateService.isLoading.set(false)),\n        )\n        .subscribe({\n          next: (item) => onSuccess(item),\n          error: (error) => {\n            console.error(errorMessage, error);\n            onError();\n          },\n        });\n    } catch (error) {\n      this.stateService.isLoading.set(false);\n      this.messageService.add({\n        severity: 'error',\n        summary: 'Error',\n        detail: `${errorMessage}: ${error}`,\n      });\n\n      // Only close panel for hard loads, not soft loads\n      if (errorMessage.includes('Failed to load')) {\n        this.stateService.closeDetailsPanel();\n      }\n    }\n  }\n\n  /**\n   * Handle case when no service is available\n   */\n  private handleMissingService(): void {\n    this.stateService.isLoading.set(false);\n  }\n\n  /**\n   * Handle successful entity load\n   */\n  private handleLoadSuccess(\n    item: BaseEntity,\n    entityType: string,\n    component: Type<unknown>,\n  ): void {\n    if (isDefined(item)) {\n      // Add entityType if not present\n      const itemWithType = { ...item, entityType: entityType };\n      this.stateService.openDetailsPanel(itemWithType, component);\n    } else {\n      this.messageService.add({\n        severity: 'error',\n        summary: 'Not Found',\n        detail: `${entityType} not found`,\n      });\n      this.stateService.closeDetailsPanel();\n    }\n  }\n\n  /**\n   * Handle successful soft entity load (preserves UI state)\n   */\n  private handleSoftLoadSuccess(item: BaseEntity, entityType: string): void {\n    if (isDefined(item)) {\n      // Add entityType if not present and update using soft method\n      const itemWithType = { ...item, entityType: entityType };\n      this.stateService.softRefreshSelectedItem(itemWithType);\n    } else {\n      this.messageService.add({\n        severity: 'error',\n        summary: 'Not Found',\n        detail: `${entityType} not found`,\n      });\n      // Don't close the panel, just clear loading state\n    }\n  }\n\n  /**\n   * Handle entity load error\n   */\n  private handleLoadError(entityType: string): void {\n    this.messageService.add({\n      severity: 'error',\n      summary: 'Error',\n      detail: `Failed to load ${entityType} details`,\n    });\n    this.stateService.closeDetailsPanel();\n  }\n\n  /**\n   * Handle soft entity load error (preserves UI state)\n   */\n  private handleSoftLoadError(entityType: string): void {\n    this.messageService.add({\n      severity: 'error',\n      summary: 'Error',\n      detail: `Failed to refresh ${entityType} details`,\n    });\n    // Don't close the panel, keep existing data visible\n  }\n}\n"],
  "mappings": "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",
  "names": []
}
