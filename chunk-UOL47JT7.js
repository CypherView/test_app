import {
  HttpClient,
  HttpContext,
  HttpHeaders,
  HttpParams,
  Router
} from "./chunk-W5MMOG3B.js";
import {
  Inject,
  Injectable,
  InjectionToken,
  NgModule,
  Optional,
  SkipSelf,
  catchError,
  effect,
  inject,
  of,
  setClassMetadata,
  signal,
  switchMap,
  throwError,
  ɵɵdefineInjectable,
  ɵɵdefineInjector,
  ɵɵdefineNgModule,
  ɵɵinject
} from "./chunk-Q56RWZOJ.js";
import {
  __commonJS,
  __spreadValues,
  __toESM
} from "./chunk-KWSTWQNB.js";

// node_modules/lz-string/libs/lz-string.js
var require_lz_string = __commonJS({
  "node_modules/lz-string/libs/lz-string.js"(exports, module) {
    "use strict";
    var LZString2 = (function() {
      var f = String.fromCharCode;
      var keyStrBase64 = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=";
      var keyStrUriSafe = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+-$";
      var baseReverseDic = {};
      function getBaseValue(alphabet, character) {
        if (!baseReverseDic[alphabet]) {
          baseReverseDic[alphabet] = {};
          for (var i = 0; i < alphabet.length; i++) {
            baseReverseDic[alphabet][alphabet.charAt(i)] = i;
          }
        }
        return baseReverseDic[alphabet][character];
      }
      var LZString3 = {
        compressToBase64: function(input) {
          if (input == null) return "";
          var res = LZString3._compress(input, 6, function(a) {
            return keyStrBase64.charAt(a);
          });
          switch (res.length % 4) {
            // To produce valid Base64
            default:
            // When could this happen ?
            case 0:
              return res;
            case 1:
              return res + "===";
            case 2:
              return res + "==";
            case 3:
              return res + "=";
          }
        },
        decompressFromBase64: function(input) {
          if (input == null) return "";
          if (input == "") return null;
          return LZString3._decompress(input.length, 32, function(index) {
            return getBaseValue(keyStrBase64, input.charAt(index));
          });
        },
        compressToUTF16: function(input) {
          if (input == null) return "";
          return LZString3._compress(input, 15, function(a) {
            return f(a + 32);
          }) + " ";
        },
        decompressFromUTF16: function(compressed) {
          if (compressed == null) return "";
          if (compressed == "") return null;
          return LZString3._decompress(compressed.length, 16384, function(index) {
            return compressed.charCodeAt(index) - 32;
          });
        },
        //compress into uint8array (UCS-2 big endian format)
        compressToUint8Array: function(uncompressed) {
          var compressed = LZString3.compress(uncompressed);
          var buf = new Uint8Array(compressed.length * 2);
          for (var i = 0, TotalLen = compressed.length; i < TotalLen; i++) {
            var current_value = compressed.charCodeAt(i);
            buf[i * 2] = current_value >>> 8;
            buf[i * 2 + 1] = current_value % 256;
          }
          return buf;
        },
        //decompress from uint8array (UCS-2 big endian format)
        decompressFromUint8Array: function(compressed) {
          if (compressed === null || compressed === void 0) {
            return LZString3.decompress(compressed);
          } else {
            var buf = new Array(compressed.length / 2);
            for (var i = 0, TotalLen = buf.length; i < TotalLen; i++) {
              buf[i] = compressed[i * 2] * 256 + compressed[i * 2 + 1];
            }
            var result = [];
            buf.forEach(function(c) {
              result.push(f(c));
            });
            return LZString3.decompress(result.join(""));
          }
        },
        //compress into a string that is already URI encoded
        compressToEncodedURIComponent: function(input) {
          if (input == null) return "";
          return LZString3._compress(input, 6, function(a) {
            return keyStrUriSafe.charAt(a);
          });
        },
        //decompress from an output of compressToEncodedURIComponent
        decompressFromEncodedURIComponent: function(input) {
          if (input == null) return "";
          if (input == "") return null;
          input = input.replace(/ /g, "+");
          return LZString3._decompress(input.length, 32, function(index) {
            return getBaseValue(keyStrUriSafe, input.charAt(index));
          });
        },
        compress: function(uncompressed) {
          return LZString3._compress(uncompressed, 16, function(a) {
            return f(a);
          });
        },
        _compress: function(uncompressed, bitsPerChar, getCharFromInt) {
          if (uncompressed == null) return "";
          var i, value, context_dictionary = {}, context_dictionaryToCreate = {}, context_c = "", context_wc = "", context_w = "", context_enlargeIn = 2, context_dictSize = 3, context_numBits = 2, context_data = [], context_data_val = 0, context_data_position = 0, ii;
          for (ii = 0; ii < uncompressed.length; ii += 1) {
            context_c = uncompressed.charAt(ii);
            if (!Object.prototype.hasOwnProperty.call(context_dictionary, context_c)) {
              context_dictionary[context_c] = context_dictSize++;
              context_dictionaryToCreate[context_c] = true;
            }
            context_wc = context_w + context_c;
            if (Object.prototype.hasOwnProperty.call(context_dictionary, context_wc)) {
              context_w = context_wc;
            } else {
              if (Object.prototype.hasOwnProperty.call(context_dictionaryToCreate, context_w)) {
                if (context_w.charCodeAt(0) < 256) {
                  for (i = 0; i < context_numBits; i++) {
                    context_data_val = context_data_val << 1;
                    if (context_data_position == bitsPerChar - 1) {
                      context_data_position = 0;
                      context_data.push(getCharFromInt(context_data_val));
                      context_data_val = 0;
                    } else {
                      context_data_position++;
                    }
                  }
                  value = context_w.charCodeAt(0);
                  for (i = 0; i < 8; i++) {
                    context_data_val = context_data_val << 1 | value & 1;
                    if (context_data_position == bitsPerChar - 1) {
                      context_data_position = 0;
                      context_data.push(getCharFromInt(context_data_val));
                      context_data_val = 0;
                    } else {
                      context_data_position++;
                    }
                    value = value >> 1;
                  }
                } else {
                  value = 1;
                  for (i = 0; i < context_numBits; i++) {
                    context_data_val = context_data_val << 1 | value;
                    if (context_data_position == bitsPerChar - 1) {
                      context_data_position = 0;
                      context_data.push(getCharFromInt(context_data_val));
                      context_data_val = 0;
                    } else {
                      context_data_position++;
                    }
                    value = 0;
                  }
                  value = context_w.charCodeAt(0);
                  for (i = 0; i < 16; i++) {
                    context_data_val = context_data_val << 1 | value & 1;
                    if (context_data_position == bitsPerChar - 1) {
                      context_data_position = 0;
                      context_data.push(getCharFromInt(context_data_val));
                      context_data_val = 0;
                    } else {
                      context_data_position++;
                    }
                    value = value >> 1;
                  }
                }
                context_enlargeIn--;
                if (context_enlargeIn == 0) {
                  context_enlargeIn = Math.pow(2, context_numBits);
                  context_numBits++;
                }
                delete context_dictionaryToCreate[context_w];
              } else {
                value = context_dictionary[context_w];
                for (i = 0; i < context_numBits; i++) {
                  context_data_val = context_data_val << 1 | value & 1;
                  if (context_data_position == bitsPerChar - 1) {
                    context_data_position = 0;
                    context_data.push(getCharFromInt(context_data_val));
                    context_data_val = 0;
                  } else {
                    context_data_position++;
                  }
                  value = value >> 1;
                }
              }
              context_enlargeIn--;
              if (context_enlargeIn == 0) {
                context_enlargeIn = Math.pow(2, context_numBits);
                context_numBits++;
              }
              context_dictionary[context_wc] = context_dictSize++;
              context_w = String(context_c);
            }
          }
          if (context_w !== "") {
            if (Object.prototype.hasOwnProperty.call(context_dictionaryToCreate, context_w)) {
              if (context_w.charCodeAt(0) < 256) {
                for (i = 0; i < context_numBits; i++) {
                  context_data_val = context_data_val << 1;
                  if (context_data_position == bitsPerChar - 1) {
                    context_data_position = 0;
                    context_data.push(getCharFromInt(context_data_val));
                    context_data_val = 0;
                  } else {
                    context_data_position++;
                  }
                }
                value = context_w.charCodeAt(0);
                for (i = 0; i < 8; i++) {
                  context_data_val = context_data_val << 1 | value & 1;
                  if (context_data_position == bitsPerChar - 1) {
                    context_data_position = 0;
                    context_data.push(getCharFromInt(context_data_val));
                    context_data_val = 0;
                  } else {
                    context_data_position++;
                  }
                  value = value >> 1;
                }
              } else {
                value = 1;
                for (i = 0; i < context_numBits; i++) {
                  context_data_val = context_data_val << 1 | value;
                  if (context_data_position == bitsPerChar - 1) {
                    context_data_position = 0;
                    context_data.push(getCharFromInt(context_data_val));
                    context_data_val = 0;
                  } else {
                    context_data_position++;
                  }
                  value = 0;
                }
                value = context_w.charCodeAt(0);
                for (i = 0; i < 16; i++) {
                  context_data_val = context_data_val << 1 | value & 1;
                  if (context_data_position == bitsPerChar - 1) {
                    context_data_position = 0;
                    context_data.push(getCharFromInt(context_data_val));
                    context_data_val = 0;
                  } else {
                    context_data_position++;
                  }
                  value = value >> 1;
                }
              }
              context_enlargeIn--;
              if (context_enlargeIn == 0) {
                context_enlargeIn = Math.pow(2, context_numBits);
                context_numBits++;
              }
              delete context_dictionaryToCreate[context_w];
            } else {
              value = context_dictionary[context_w];
              for (i = 0; i < context_numBits; i++) {
                context_data_val = context_data_val << 1 | value & 1;
                if (context_data_position == bitsPerChar - 1) {
                  context_data_position = 0;
                  context_data.push(getCharFromInt(context_data_val));
                  context_data_val = 0;
                } else {
                  context_data_position++;
                }
                value = value >> 1;
              }
            }
            context_enlargeIn--;
            if (context_enlargeIn == 0) {
              context_enlargeIn = Math.pow(2, context_numBits);
              context_numBits++;
            }
          }
          value = 2;
          for (i = 0; i < context_numBits; i++) {
            context_data_val = context_data_val << 1 | value & 1;
            if (context_data_position == bitsPerChar - 1) {
              context_data_position = 0;
              context_data.push(getCharFromInt(context_data_val));
              context_data_val = 0;
            } else {
              context_data_position++;
            }
            value = value >> 1;
          }
          while (true) {
            context_data_val = context_data_val << 1;
            if (context_data_position == bitsPerChar - 1) {
              context_data.push(getCharFromInt(context_data_val));
              break;
            } else context_data_position++;
          }
          return context_data.join("");
        },
        decompress: function(compressed) {
          if (compressed == null) return "";
          if (compressed == "") return null;
          return LZString3._decompress(compressed.length, 32768, function(index) {
            return compressed.charCodeAt(index);
          });
        },
        _decompress: function(length, resetValue, getNextValue) {
          var dictionary = [], next, enlargeIn = 4, dictSize = 4, numBits = 3, entry = "", result = [], i, w, bits, resb, maxpower, power, c, data = { val: getNextValue(0), position: resetValue, index: 1 };
          for (i = 0; i < 3; i += 1) {
            dictionary[i] = i;
          }
          bits = 0;
          maxpower = Math.pow(2, 2);
          power = 1;
          while (power != maxpower) {
            resb = data.val & data.position;
            data.position >>= 1;
            if (data.position == 0) {
              data.position = resetValue;
              data.val = getNextValue(data.index++);
            }
            bits |= (resb > 0 ? 1 : 0) * power;
            power <<= 1;
          }
          switch (next = bits) {
            case 0:
              bits = 0;
              maxpower = Math.pow(2, 8);
              power = 1;
              while (power != maxpower) {
                resb = data.val & data.position;
                data.position >>= 1;
                if (data.position == 0) {
                  data.position = resetValue;
                  data.val = getNextValue(data.index++);
                }
                bits |= (resb > 0 ? 1 : 0) * power;
                power <<= 1;
              }
              c = f(bits);
              break;
            case 1:
              bits = 0;
              maxpower = Math.pow(2, 16);
              power = 1;
              while (power != maxpower) {
                resb = data.val & data.position;
                data.position >>= 1;
                if (data.position == 0) {
                  data.position = resetValue;
                  data.val = getNextValue(data.index++);
                }
                bits |= (resb > 0 ? 1 : 0) * power;
                power <<= 1;
              }
              c = f(bits);
              break;
            case 2:
              return "";
          }
          dictionary[3] = c;
          w = c;
          result.push(c);
          while (true) {
            if (data.index > length) {
              return "";
            }
            bits = 0;
            maxpower = Math.pow(2, numBits);
            power = 1;
            while (power != maxpower) {
              resb = data.val & data.position;
              data.position >>= 1;
              if (data.position == 0) {
                data.position = resetValue;
                data.val = getNextValue(data.index++);
              }
              bits |= (resb > 0 ? 1 : 0) * power;
              power <<= 1;
            }
            switch (c = bits) {
              case 0:
                bits = 0;
                maxpower = Math.pow(2, 8);
                power = 1;
                while (power != maxpower) {
                  resb = data.val & data.position;
                  data.position >>= 1;
                  if (data.position == 0) {
                    data.position = resetValue;
                    data.val = getNextValue(data.index++);
                  }
                  bits |= (resb > 0 ? 1 : 0) * power;
                  power <<= 1;
                }
                dictionary[dictSize++] = f(bits);
                c = dictSize - 1;
                enlargeIn--;
                break;
              case 1:
                bits = 0;
                maxpower = Math.pow(2, 16);
                power = 1;
                while (power != maxpower) {
                  resb = data.val & data.position;
                  data.position >>= 1;
                  if (data.position == 0) {
                    data.position = resetValue;
                    data.val = getNextValue(data.index++);
                  }
                  bits |= (resb > 0 ? 1 : 0) * power;
                  power <<= 1;
                }
                dictionary[dictSize++] = f(bits);
                c = dictSize - 1;
                enlargeIn--;
                break;
              case 2:
                return result.join("");
            }
            if (enlargeIn == 0) {
              enlargeIn = Math.pow(2, numBits);
              numBits++;
            }
            if (dictionary[c]) {
              entry = dictionary[c];
            } else {
              if (c === dictSize) {
                entry = w + w.charAt(0);
              } else {
                return null;
              }
            }
            result.push(entry);
            dictionary[dictSize++] = w + entry.charAt(0);
            enlargeIn--;
            w = entry;
            if (enlargeIn == 0) {
              enlargeIn = Math.pow(2, numBits);
              numBits++;
            }
          }
        }
      };
      return LZString3;
    })();
    if (typeof define === "function" && define.amd) {
      define(function() {
        return LZString2;
      });
    } else if (typeof module !== "undefined" && module != null) {
      module.exports = LZString2;
    } else if (typeof angular !== "undefined" && angular != null) {
      angular.module("LZString", []).factory("LZString", function() {
        return LZString2;
      });
    }
  }
});

// src/environments/environment.ts
var environment = {
  production: false,
  showApiDropdown: true,
  apiUrls: [
    "https://v1-test-api.cypherview.net",
    "https://api.us1.kt1.io/fleet/v2",
    "https://api.staging.kt1.io/fleet/v2",
    "https://api.us1.kt1.io/fleet/next/v2"
  ],
  defaultThemeId: "454d57b6-1678-4e61-8688-fb68b8b1f74c",
  flutterUrl: "/assets/flutter/index.html",
  googleMapsApiKey: "AIzaSyC3PVw5GHsMfQiP5MjGxp1EW-Uea43WN48"
};

// src/app/shared/utils/type-guards.ts
function isNullOrUndefined(value) {
  return value === null || value === void 0;
}
function isDefined(value) {
  return value !== null && value !== void 0;
}
function isString(value) {
  return typeof value === "string";
}
function isNumber(value) {
  return typeof value === "number" && !Number.isNaN(value);
}
function isBoolean(value) {
  return typeof value === "boolean";
}
function isArray(value) {
  return Array.isArray(value);
}
function isObject(value) {
  return typeof value === "object" && value !== null && !Array.isArray(value);
}
function isValidDate(value) {
  return value instanceof Date && !Number.isNaN(value.getTime());
}
function isEmpty(value) {
  if (isNullOrUndefined(value))
    return true;
  if (isString(value))
    return value.trim().length === 0;
  if (isArray(value))
    return value.length === 0;
  if (isObject(value))
    return Object.keys(value).length === 0;
  return false;
}
function hasProperty(value, prop) {
  return isObject(value) && prop in value;
}
function isFunction(value) {
  return typeof value === "function";
}
function isSelectOption(value) {
  return isObject(value) && hasProperty(value, "label") && hasProperty(value, "value") && isString(value["label"]);
}
function isDeepEqual(obj1, obj2) {
  if (obj1 === obj2)
    return true;
  if (isNullOrUndefined(obj1) || isNullOrUndefined(obj2))
    return false;
  const type1 = typeof obj1;
  const type2 = typeof obj2;
  if (type1 !== type2)
    return false;
  if (isValidDate(obj1) && isValidDate(obj2)) {
    return obj1.getTime() === obj2.getTime();
  }
  if (isArray(obj1) && isArray(obj2)) {
    if (obj1.length !== obj2.length)
      return false;
    return obj1.every((item, index) => isDeepEqual(item, obj2[index]));
  }
  if (isObject(obj1) && isObject(obj2)) {
    const keys1 = Object.keys(obj1);
    const keys2 = Object.keys(obj2);
    if (keys1.length !== keys2.length)
      return false;
    return keys1.every((key) => {
      return hasProperty(obj2, key) && isDeepEqual(obj1[key], obj2[key]);
    });
  }
  return false;
}

// src/app/shared/utils/route.utils.ts
function getAllRouteParams(route) {
  let currentRoute = route;
  const params = {};
  while (isDefined(currentRoute)) {
    for (const key of currentRoute.paramMap.keys) {
      params[key] = currentRoute.paramMap.get(key);
    }
    currentRoute = currentRoute.parent;
  }
  return params;
}
function createGuardedGridRoute(basePath, guard, gridComponent, baseComponent, gridPath = "grid/:type") {
  return [
    {
      path: basePath,
      canActivate: [guard],
      component: baseComponent || void 0,
      children: []
      // Keep empty children array to allow for future sub components
    },
    {
      path: `${basePath}/${gridPath}`,
      component: gridComponent
    },
    {
      path: `${basePath}/${gridPath}/:entityType/:entityId`,
      component: gridComponent
    }
  ];
}

// src/app/shared/utils/form-utils.ts
function setNestedProperty(target, path, value) {
  if (isNullOrUndefined(target) || !path) {
    return null;
  }
  const keys = path.split(".");
  let current = target;
  for (let i = 0; i < keys.length - 1; i++) {
    const key = keys[i];
    if (current[key] === void 0 || current[key] === null || typeof current[key] !== "object") {
      current[key] = {};
    }
    current = current[key];
  }
  const lastKey = keys[keys.length - 1];
  current[lastKey] = value;
  return target;
}
function enumToSelectOptionValues(enumObj, formatLabel) {
  return Object.entries(enumObj).filter(([key]) => isNaN(Number(key))).map(([key, value]) => ({
    label: formatLabel ? formatLabel(key) : formatEnumKey(key),
    value
  }));
}
function formatEnumKey(key) {
  if (key.includes("_")) {
    return key.split("_").map((word) => capitalizeFirstLetter(word)).join(" ");
  }
  return key.replace(/([A-Z])/g, " $1").trim().split(" ").map((word) => capitalizeFirstLetter(word)).join(" ");
}
function capitalizeFirstLetter(str) {
  if (!str)
    return "";
  return str.charAt(0).toUpperCase() + str.slice(1).toLowerCase();
}

// src/app/shared/utils/map.utils.ts
var SpatialUtils = class _SpatialUtils {
  static earthRadius = 6367;
  // radius in km
  static degToRad(x) {
    return x * Math.PI / 180;
  }
  static radToDeg(x) {
    return x * 180 / Math.PI;
  }
  static calculateCoord(origin, brng, arcLength) {
    const lat1 = _SpatialUtils.degToRad(origin.y);
    const lon1 = _SpatialUtils.degToRad(origin.x);
    const centralAngle = arcLength / _SpatialUtils.earthRadius;
    const lat2 = Math.asin(Math.sin(lat1) * Math.cos(centralAngle) + Math.cos(lat1) * Math.sin(centralAngle) * Math.cos(_SpatialUtils.degToRad(brng)));
    const lon2 = lon1 + Math.atan2(Math.sin(_SpatialUtils.degToRad(brng)) * Math.sin(centralAngle) * Math.cos(lat1), Math.cos(centralAngle) - Math.sin(lat1) * Math.sin(lat2));
    return {
      x: _SpatialUtils.radToDeg(lon2),
      y: _SpatialUtils.radToDeg(lat2)
    };
  }
  static getDistanceFromLatLonInKm(lat1, lon1, lat2, lon2) {
    const dLat = _SpatialUtils.degToRad(lat2 - lat1);
    const dLon = _SpatialUtils.degToRad(lon2 - lon1);
    const a = Math.sin(dLat / 2) * Math.sin(dLat / 2) + Math.cos(_SpatialUtils.degToRad(lat1)) * Math.cos(_SpatialUtils.degToRad(lat2)) * Math.sin(dLon / 2) * Math.sin(dLon / 2);
    const c = 2 * Math.atan2(Math.sqrt(a), Math.sqrt(1 - a));
    const d = _SpatialUtils.earthRadius * c;
    return d;
  }
  static generateRegularPolygon(centerPoint, radius, numberOfPoints) {
    const points = [];
    const centralAngle = 360 / numberOfPoints;
    const offset = numberOfPoints === 4 ? 45 : 0;
    for (let i = 0; i < numberOfPoints; i++) {
      points.push(_SpatialUtils.calculateCoord(centerPoint, (i * centralAngle + offset) % 360, radius));
    }
    return points;
  }
  static pointInPolygon(point, polygon) {
    const { x, y } = point;
    let inside = false;
    for (let i = 0, j = polygon.length - 1; i < polygon.length; j = i++) {
      const xi = polygon[i].x, yi = polygon[i].y;
      const xj = polygon[j].x, yj = polygon[j].y;
      const intersect = yi > y !== yj > y && x < (xj - xi) * (y - yi) / (yj - yi) + xi;
      if (intersect) {
        inside = !inside;
      }
    }
    return inside;
  }
};

// src/app/shared/utils/phone-number-utils.ts
function createPhoneValidator(minDigits, maxDigits, errorKey, numberType) {
  return (control) => {
    if (isNullOrUndefined(control.value)) {
      return null;
    }
    const value = control.value.toString().trim();
    const digits = value.replaceAll(/\D/g, "");
    const validCharsRegex = /^[+]?[\d\s\-().]+$/;
    if (!validCharsRegex.test(value)) {
      return {
        [errorKey]: {
          value: control.value,
          message: `Invalid characters in ${numberType.toLowerCase()}`
        }
      };
    }
    if (digits.length < minDigits || digits.length > maxDigits) {
      return {
        [errorKey]: {
          value: control.value,
          message: `${numberType} must contain ${minDigits}-${maxDigits} digits`
        }
      };
    }
    return null;
  };
}
function phoneValidator() {
  return createPhoneValidator(7, 15, "phone", "Phone number");
}
function mobileValidator() {
  return createPhoneValidator(10, 15, "mobile", "Mobile number");
}

// src/app/core/services/api-url.service.ts
var ApiUrlService = class _ApiUrlService {
  apiUrl = environment.apiUrls[0];
  // Default fallback
  cachedUrlObj = null;
  constructor() {
    const savedUrl = localStorage.getItem("apiUrl");
    this.setApiUrl(isString(savedUrl) ? savedUrl : this.apiUrl);
  }
  setApiUrl(url) {
    if (!url.trim())
      throw new Error("Empty API URL");
    try {
      const urlObj = new URL(url);
      this.cachedUrlObj = urlObj;
      this.apiUrl = url;
      localStorage.setItem("apiUrl", url);
    } catch (error) {
      this.cachedUrlObj = null;
      throw error;
    }
  }
  getCurrentApiUrl() {
    return this.apiUrl;
  }
  getUrlObject() {
    if (!this.cachedUrlObj) {
      throw new Error("No valid API URL configured. Please check your settings.");
    }
    return this.cachedUrlObj;
  }
  static \u0275fac = function ApiUrlService_Factory(__ngFactoryType__) {
    return new (__ngFactoryType__ || _ApiUrlService)();
  };
  static \u0275prov = /* @__PURE__ */ \u0275\u0275defineInjectable({ token: _ApiUrlService, factory: _ApiUrlService.\u0275fac, providedIn: "root" });
};
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(ApiUrlService, [{
    type: Injectable,
    args: [{
      providedIn: "root"
    }]
  }], () => [], null);
})();

// src/app/core/services/auth.service.ts
var AuthService = class _AuthService {
  http = inject(HttpClient);
  apiUrlService = inject(ApiUrlService);
  login(username, password) {
    const currentApiUrl = this.apiUrlService.getCurrentApiUrl();
    return this.http.post(`${currentApiUrl}/auth/signin`, {
      username,
      password
    });
  }
  refreshToken(refreshToken) {
    const currentApiUrl = this.apiUrlService.getCurrentApiUrl();
    return this.http.post(`${currentApiUrl}/auth/refresh`, {
      refreshToken
    });
  }
  isAuthenticated() {
    const expiry = localStorage.getItem("tokenExpiry");
    if (isNullOrUndefined(expiry)) {
      return false;
    }
    return Date.now() < parseInt(expiry, 10);
  }
  static \u0275fac = function AuthService_Factory(__ngFactoryType__) {
    return new (__ngFactoryType__ || _AuthService)();
  };
  static \u0275prov = /* @__PURE__ */ \u0275\u0275defineInjectable({ token: _AuthService, factory: _AuthService.\u0275fac, providedIn: "root" });
};
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(AuthService, [{
    type: Injectable,
    args: [{
      providedIn: "root"
    }]
  }], null, null);
})();

// src/app/core/models/constants.ts
var LOCAL_STORAGE_KEY_SELECTED_CLIENT = "app-client";
var LOCAL_STORAGE_KEY_ACCESS_TOKEN = "accessToken";
var LOCAL_STORAGE_KEY_REFRESH_TOKEN = "refreshToken";
var LOCAL_STORAGE_KEY_TOKEN_EXPIRY = "tokenExpiry";
var LOCAL_STORAGE_KEY_USER_SESSION = "userSession";
var LOCAL_STORAGE_KEY_SELECTED_CLIENT_ID = "selectedClientId";
var LOCAL_STORAGE_SIDEBAR_STATE_KEY = "sidebar-main-visible";
var LOCAL_STORAGE_LAST_AUTHENTICATED_USER_ID = "lastAuthenticatedUserId";
var MOBILE_BREAKPOINT = 768;
var DEFAULT_PAGE_SIZE = 100;
var DEFAULT_PAGE_SIZE_OPTIONS = [10, 25, 50, 100];
var DEFAULT_SYSTEM_ID = "00000000-0000-0000-0000-000000000000";
var SUPER_ADMIN_ROLE_ID = "00000000-0000-0000-0000-000000000001";
var DEFAULT_LIST_SIZE = 100;
var DEFAULT_EMAIL_PROVIDER = {
  id: "00000000-0000-0000-0000-000000000000",
  name: "Default",
  state: "active"
};
var GRID_CONFIGS = new InjectionToken("GRID_CONFIGS");
var TREE_TABLE_CONFIGS = new InjectionToken("TREE_TABLE_CONFIGS");
var COLORS = [
  "blue",
  "lightblue",
  "green",
  "olive",
  "orange",
  "pink",
  "purple",
  "red",
  "teal",
  "yellow",
  "white",
  "gray"
];
var SEARCH_DEBOUNCE_TIME = 300;
var CLIENT_SEARCH_LIMIT = 6;

// src/app/core/models/error-reasons.enum.ts
var ErrorReasons;
(function(ErrorReasons2) {
  ErrorReasons2[ErrorReasons2["AccessTokenExpired"] = 0] = "AccessTokenExpired";
  ErrorReasons2[ErrorReasons2["RefreshTokenExpired"] = 1] = "RefreshTokenExpired";
  ErrorReasons2[ErrorReasons2["TooManyLogins"] = 2] = "TooManyLogins";
  ErrorReasons2[ErrorReasons2["RequestTimeout"] = 3] = "RequestTimeout";
  ErrorReasons2[ErrorReasons2["NoTokenAvailable"] = 4] = "NoTokenAvailable";
  ErrorReasons2[ErrorReasons2["Unknown"] = 5] = "Unknown";
  ErrorReasons2[ErrorReasons2["Unauthorized"] = 6] = "Unauthorized";
  ErrorReasons2[ErrorReasons2["NetworkError"] = 7] = "NetworkError";
  ErrorReasons2[ErrorReasons2["ServerError"] = 8] = "ServerError";
  ErrorReasons2[ErrorReasons2["InvalidEndpoint"] = 9] = "InvalidEndpoint";
  ErrorReasons2[ErrorReasons2["BadRequest"] = 10] = "BadRequest";
  ErrorReasons2[ErrorReasons2["Forbidden"] = 11] = "Forbidden";
})(ErrorReasons || (ErrorReasons = {}));

// src/app/core/models/feature-flags.model.ts
var APP_FEATURE_FLAGS = "fleet-ui-v2";
var BACKEND_FEATURE_FLAGS = "fleet-backend-v2";
var PAGE_ICONS = {
  overview: "compass",
  dashboards: "chart-line",
  alerts: "exclamation-triangle",
  videos: "photo-video",
  replay: "history",
  mapsearch: "search-location",
  reporting: "chart-bar",
  admin: "cog",
  demo: "palette",
  system: "heartbeat",
  external: "window-maximize",
  geofence: "draw-polygon",
  assetperformance: "medal",
  devicehealth: "heart-pulse",
  settings: "sliders",
  maps: "map-marked-alt",
  notifications: "bell"
};
var AppFeatureDefaults = {
  page: {
    overview: {
      enabled: true,
      name: "",
      icon: "",
      layout: "advanced",
      show: {
        activity: true,
        events: true,
        alerts: true,
        videos: false,
        sharing: false,
        tasks: false,
        editing: false
      },
      pageSize: 300,
      customPanels: "",
      group: "",
      order: 10
    },
    /*  dashboards: {
      enabled: false,
      show: {
        hours: false,
      },
      group: '',
      order: 40,
    }, */
    videos: {
      enabled: false,
      maxDuration: 60,
      group: "",
      order: 30
    },
    alerts: {
      enabled: false,
      feedLoadLimit: 30,
      actions: "",
      // an array of allowed action types, separated by commas
      group: "",
      order: 20
    },
    replay: {
      enabled: false,
      group: "",
      order: 50
    },
    /*   mapsearch: {
      enabled: false,
      group: '',
      order: 60,
    },
    assetperformance: {
      enabled: false,
      name: '',
      icon: '',
      group: '',
      order: 61,
    },
    reporting: {
      enabled: false,
      show: {
        analytics: false,
      },
      reports: '', // an array of guid's separated by commas
      dateLimitOverride: false, // enable to remove the standard report date limits and set all to 31 days (not recommended)
      group: '',
      order: 70,
    }, */
    external: {
      enabled: false,
      tabs: ""
      // a list of name:url pairs separated by newlines
    },
    admin: {
      enabled: false,
      customPanels: "",
      show: {
        fuelCards: false
      },
      availableAssetTypes: "",
      // an array of guid's separated by commas
      group: "",
      order: 80
    },
    devicehealth: {
      enabled: false,
      order: 81,
      supportUrl: ""
    },
    geofence: {
      enabled: false,
      group: "",
      order: 90
    }
  },
  maps: {
    enabled: true,
    liveTracking: {
      enabled: true,
      refreshRate: 30
      // seconds
    },
    customMarkers: {
      enabled: true
    },
    geofences: {
      enabled: true,
      alerting: true
    },
    traffic: {
      enabled: true
    }
  },
  reporting: {
    enabled: true,
    exportFormats: {
      pdf: true,
      excel: true,
      csv: true
    },
    scheduling: {
      enabled: true
    }
  },
  notifications: {
    enabled: true,
    channels: {
      email: true,
      sms: true,
      push: true
    }
  },
  settings: {
    userManagement: {
      enabled: true,
      roles: {
        admin: true,
        manager: true,
        user: true
      }
    },
    branding: {
      enabled: true,
      logoCustomization: true,
      colorSchemes: true
    }
  }
};
var BackendFeatureDefaults = {
  geocoding: {
    roadspeed: {
      enabled: false,
      radiusRoads: 100
    }
  },
  shifts: {
    _only: ["system"],
    shifts: {
      enabled: false
    }
  },
  parsing: {
    _only: ["system"],
    native: {
      enabled: false
    },
    linking: {
      enabled: false
    },
    fnol: {
      enabled: false
    },
    v2tripcalculation: {
      enabled: false
    }
  },
  tasks: {
    _only: ["system"],
    taskservice: {
      enabled: false
    }
  },
  reports: {
    _only: ["system"],
    new_processor: {
      enabled: false
    },
    new_renderer: {
      enabled: false
    }
  },
  privacy: {
    _only: ["system"],
    trip_privacy: {
      enabled: false
    }
  },
  api: {
    rateLimit: 100,
    caching: {
      enabled: true,
      ttl: 300
    }
  },
  dataRetention: {
    tripHistory: 90,
    auditLogs: 30
  },
  integrations: {
    enabled: false,
    thirdParty: {
      _only: ["admin"],
      webhook: {
        enabled: false
      },
      restApi: {
        enabled: false
      }
    }
  }
};
var AppFeatures = {};
var AppFeatureFlagDefaults = {};
var AppFeatureSection = class {
  page;
  id;
  icon = "";
  title = "";
  fields = [];
  subfields = [];
  constructor(page, defaultState) {
    this.page = page;
    this.id = page;
    this.title = AppFeatureTranslations[page.toUpperCase()]?.["TITLE"] ?? page.toUpperCase();
    this.icon = PAGE_ICONS[page.split("-")[1]] ?? "cog";
    this.fields.push({
      id: this.page + "-enabled",
      title: "Page",
      type: "dropdown",
      required: true,
      values: [
        { key: "null", value: "Inherit" },
        // Use null for 'Inherit'
        { key: true, value: "Enabled", fields: this.subfields },
        { key: false, value: "Disabled" }
      ]
    });
    this.addDefault("enabled", defaultState);
    AppFeatures[this.page] = this;
  }
  addDefault(id, defaultValue) {
    let separator = ",";
    if (id === "tabs") {
      separator = "\n";
    }
    const valueToStore = Array.isArray(defaultValue) ? defaultValue.join(separator) : defaultValue;
    AppFeatureFlagDefaults[`${this.page}-${id}`] = valueToStore;
  }
  addEnabledToggle(id, defaultValue) {
    this.addDefault(id, defaultValue);
    this.subfields.push({
      id: `${this.page}-${id}`,
      title: AppFeatureTranslations[this.page.toUpperCase()]?.[id.toUpperCase()] ?? id.toUpperCase(),
      type: "dropdown",
      required: true,
      values: [
        { key: "null", value: "Inherit" },
        { key: true, value: "Enabled" },
        { key: false, value: "Disabled" }
      ],
      hint: AppFeatureTranslations[this.page.toUpperCase()]?.[`${id.toUpperCase()}-DESC`] ?? ""
    });
    return this;
  }
  addCombo(id, values, defaultValue) {
    this.addDefault(id, defaultValue);
    this.subfields.push({
      id: `${this.page}-${id}`,
      title: AppFeatureTranslations[this.page.toUpperCase()]?.[id.toUpperCase()] ?? id.toUpperCase(),
      type: "dropdown",
      required: true,
      values: [{ key: "null", value: "Inherit" }, ...values],
      // Add Inherit option
      hint: AppFeatureTranslations[this.page.toUpperCase()]?.[`${id.toUpperCase()}-DESC`] ?? ""
    });
    return this;
  }
  addNumber(id, min, max, defaultValue) {
    this.addDefault(id, defaultValue);
    this.subfields.push({
      id: `${this.page}-${id}`,
      title: AppFeatureTranslations[this.page.toUpperCase()]?.[id.toUpperCase()] ?? id.toUpperCase(),
      type: "number",
      required: false,
      // Numbers are often optional overrides
      min,
      max,
      hint: AppFeatureTranslations[this.page.toUpperCase()]?.[`${id.toUpperCase()}-DESC`] ?? ""
    });
    return this;
  }
  addCheckList(id, lookupKey, defaultValue) {
    this.addDefault(id, defaultValue);
    this.subfields.push({
      id: `${this.page}-${id}`,
      title: AppFeatureTranslations[this.page.toUpperCase()]?.[id.toUpperCase()] ?? id.toUpperCase(),
      type: "checklist",
      required: false,
      values: [],
      valueLookup: lookupKey,
      hint: AppFeatureTranslations[this.page.toUpperCase()]?.[`${id.toUpperCase()}-DESC`] ?? ""
    });
    return this;
  }
  addMemo(id, defaultValue) {
    this.addDefault(id, defaultValue);
    this.subfields.push({
      id: `${this.page}-${id}`,
      title: AppFeatureTranslations[this.page.toUpperCase()]?.[id.toUpperCase()] ?? id.toUpperCase(),
      type: "memo",
      required: false,
      hint: AppFeatureTranslations[this.page.toUpperCase()]?.[`${id.toUpperCase()}-DESC`] ?? ""
    });
    return this;
  }
  addText(id, defaultValue, required) {
    this.addDefault(id, defaultValue);
    this.subfields.push({
      id: `${this.page}-${id}`,
      title: AppFeatureTranslations[this.page.toUpperCase()]?.[id.toUpperCase()] ?? id.toUpperCase(),
      type: "text",
      required,
      hint: AppFeatureTranslations[this.page.toUpperCase()]?.[`${id.toUpperCase()}-DESC`] ?? ""
    });
    return this;
  }
  addList(id) {
    this.addDefault(id, "");
    this.subfields.push({
      id: `${this.page}-${id}`,
      title: AppFeatureTranslations[this.page.toUpperCase()]?.[id.toUpperCase()] ?? id.toUpperCase(),
      type: "list",
      required: false,
      hint: AppFeatureTranslations[this.page.toUpperCase()]?.[`${id.toUpperCase()}-DESC`] ?? ""
    });
    return this;
  }
};
var BackendFeatureSection = class {
  page;
  id;
  icon = "cog";
  title = "";
  fields = [];
  defaults = {};
  constructor(page) {
    this.page = page;
    this.id = page;
    this.title = AppBackendFeatureTranslations[page.toUpperCase()]?.["TITLE"] ?? page.toUpperCase();
  }
  addDefault(id, defaultValue) {
    const valueToStore = Array.isArray(defaultValue) ? defaultValue.join(",") : defaultValue;
    this.defaults[`${this.page}-${id}`] = valueToStore;
  }
  addEnabledToggle(id, defaultValue) {
    this.addDefault(id, defaultValue);
    this.fields.push({
      id: `${this.page}-${id}`,
      title: AppBackendFeatureTranslations[this.page.toUpperCase()]?.[id.toUpperCase()] ?? id.toUpperCase(),
      type: "dropdown",
      required: true,
      values: [
        { key: "null", value: "Inherit" },
        { key: true, value: "Enabled" },
        { key: false, value: "Disabled" }
      ],
      hint: AppBackendFeatureTranslations[this.page.toUpperCase()]?.[`${id.toUpperCase()}-DESC`] ?? ""
    });
    return this;
  }
  addCombo(id, values, defaultValue) {
    this.addDefault(id, defaultValue);
    this.fields.push({
      id: `${this.page}-${id}`,
      title: AppBackendFeatureTranslations[this.page.toUpperCase()]?.[id.toUpperCase()] ?? id.toUpperCase(),
      type: "dropdown",
      required: true,
      values: [{ key: "null", value: "Inherit" }, ...values],
      hint: AppBackendFeatureTranslations[this.page.toUpperCase()]?.[`${id.toUpperCase()}-DESC`] ?? ""
    });
    return this;
  }
  addNumber(id, min, max, defaultValue) {
    this.addDefault(id, defaultValue);
    this.fields.push({
      id: `${this.page}-${id}`,
      title: AppBackendFeatureTranslations[this.page.toUpperCase()]?.[id.toUpperCase()] ?? id.toUpperCase(),
      type: "number",
      required: false,
      min,
      max,
      hint: AppBackendFeatureTranslations[this.page.toUpperCase()]?.[`${id.toUpperCase()}-DESC`] ?? ""
    });
    return this;
  }
  addCheckList(id, lookupKey, defaultValue) {
    this.addDefault(id, defaultValue);
    this.fields.push({
      id: `${this.page}-${id}`,
      title: AppBackendFeatureTranslations[this.page.toUpperCase()]?.[id.toUpperCase()] ?? id.toUpperCase(),
      type: "checklist",
      required: false,
      values: [],
      valueLookup: lookupKey,
      hint: AppBackendFeatureTranslations[this.page.toUpperCase()]?.[`${id.toUpperCase()}-DESC`] ?? ""
    });
    return this;
  }
  addMemo(id, defaultValue) {
    this.addDefault(id, defaultValue);
    this.fields.push({
      id: `${this.page}-${id}`,
      title: AppBackendFeatureTranslations[this.page.toUpperCase()]?.[id.toUpperCase()] ?? id.toUpperCase(),
      type: "memo",
      required: false,
      hint: AppBackendFeatureTranslations[this.page.toUpperCase()]?.[`${id.toUpperCase()}-DESC`] ?? ""
    });
    return this;
  }
  addText(id, defaultValue, required) {
    this.addDefault(id, defaultValue);
    this.fields.push({
      id: `${this.page}-${id}`,
      title: AppBackendFeatureTranslations[this.page.toUpperCase()]?.[id.toUpperCase()] ?? id.toUpperCase(),
      type: "text",
      required,
      hint: AppBackendFeatureTranslations[this.page.toUpperCase()]?.[`${id.toUpperCase()}-DESC`] ?? `${this.page.toUpperCase()}.${id.toUpperCase()}-DESC`
    });
    return this;
  }
  addList(id) {
    this.addDefault(id, "");
    this.fields.push({
      id: `${this.page}-${id}`,
      title: AppBackendFeatureTranslations[this.page.toUpperCase()]?.[id.toUpperCase()] ?? id.toUpperCase(),
      type: "list",
      required: false,
      hint: AppBackendFeatureTranslations[this.page.toUpperCase()]?.[`${id.toUpperCase()}-DESC`] ?? ""
    });
    return this;
  }
};
function createFeature(pageId, defaultState) {
  return new AppFeatureSection("page-" + pageId, defaultState);
}
function getBackendFeatureDefaults(ownerType) {
  const result = {
    bucket: BACKEND_FEATURE_FLAGS,
    sections: {},
    defaults: {}
  };
  Object.keys(BackendFeatureDefaults).forEach((name) => {
    const sectionConfig = BackendFeatureDefaults[name];
    if (isNullOrUndefined(sectionConfig) || // Type guard
    !("_only" in sectionConfig) || Array.isArray(sectionConfig._only) && sectionConfig._only.includes(ownerType)) {
      const section = new BackendFeatureSection(name);
      Object.keys(sectionConfig).forEach((featureKey) => {
        if (featureKey !== "_only") {
          const featureValue = sectionConfig[featureKey];
          if (typeof featureValue === "object" && featureValue !== null && "enabled" in featureValue && typeof featureValue.enabled === "boolean") {
            section.addEnabledToggle(`${featureKey}-enabled`, featureValue.enabled);
          }
          if (isDefined(featureValue) && typeof featureValue === "object" && !Array.isArray(featureValue) && featureValue !== null) {
            Object.keys(featureValue).forEach((propKey) => {
              const propValue = featureValue[propKey];
              if (propKey !== "enabled") {
                if (typeof propValue === "number") {
                  section.addNumber(
                    `${featureKey}-${propKey}`,
                    0,
                    // Default min, adjust if needed
                    propValue * 10 || 1e3,
                    // Default max (10x default or 1000), adjust if needed
                    propValue
                  );
                } else if (typeof propValue === "string") {
                }
              }
            });
          } else if (typeof featureValue === "number") {
            section.addNumber(featureKey, 0, featureValue * 10 || 1e3, featureValue);
          }
        }
      });
      if (section.fields.length > 0) {
        result.sections[name] = section;
        result.defaults = __spreadValues(__spreadValues({}, result.defaults), section.defaults);
      }
    }
  });
  return result;
}
function initializeShowToggles(section, showConfig) {
  Object.keys(showConfig).forEach((featureKey) => {
    const feature = featureKey;
    const defaultValue = showConfig[feature];
    if (typeof defaultValue === "boolean") {
      section.addEnabledToggle(`show-${feature}`, defaultValue);
    }
  });
}
function initializeBasicProperties(section, pageConfig) {
  if (pageConfig.group !== void 0) {
    section.addText("group", pageConfig.group, false);
  }
  if (isDefined(pageConfig.order)) {
    section.addNumber("order", 0, 1e3, pageConfig.order);
  }
  if (isDefined(pageConfig.name)) {
    section.addText("name", pageConfig.name, false);
  }
  if (isDefined(pageConfig.icon)) {
    section.addText("icon", pageConfig.icon, false);
  }
}
function initializeAdvancedProperties(section, pageConfig) {
  if (isDefined(pageConfig.pageSize)) {
    section.addNumber("pageSize", 5, 1e3, pageConfig.pageSize);
  }
  if (isDefined(pageConfig.layout)) {
    section.addCombo("layout", [
      { key: "advanced", value: "Advanced" },
      { key: "basic", value: "Basic" }
    ], pageConfig.layout);
  }
  if (isDefined(pageConfig.maxDuration)) {
    section.addNumber("maxDuration", 1, 600, pageConfig.maxDuration);
  }
  if (isDefined(pageConfig.feedLoadLimit)) {
    section.addNumber("feedLoadLimit", 30, 500, pageConfig.feedLoadLimit);
  }
}
function initializeListProperties(section, pageConfig) {
  if (isDefined(pageConfig.actions)) {
    section.addCheckList("actions", "alert-actions", pageConfig.actions.split(",").filter((a) => a));
  }
  if (isDefined(pageConfig.reports)) {
    section.addCheckList("reports", "reports", pageConfig.reports.split(",").filter((r) => r));
  }
  if (isDefined(pageConfig.tabs)) {
    section.addList("tabs");
  }
  if (isDefined(pageConfig.availableAssetTypes)) {
    section.addCheckList("availableAssetTypes", "assetTypes", pageConfig.availableAssetTypes.split(",").filter((t) => t));
  }
  if (isDefined(pageConfig.customPanels)) {
    section.addList("customPanels");
  }
}
function initializeFeatureDefaults() {
  Object.keys(AppFeatureDefaults.page).forEach((name) => {
    const pageConfig = AppFeatureDefaults.page[name];
    if (isNullOrUndefined(pageConfig))
      return;
    const section = createFeature(name, pageConfig.enabled ?? false);
    if (pageConfig.show) {
      initializeShowToggles(section, pageConfig.show);
    }
    initializeBasicProperties(section, pageConfig);
    initializeAdvancedProperties(section, pageConfig);
    initializeListProperties(section, pageConfig);
    if (isDefined(pageConfig.dateLimitOverride)) {
      section.addEnabledToggle("dateLimitOverride", pageConfig.dateLimitOverride);
    }
    if (isDefined(pageConfig.supportUrl)) {
      section.addText("supportUrl", pageConfig.supportUrl, false);
    }
  });
}
var AppBackendFeatureTranslations = {
  GEOCODING: {
    TITLE: "Geocoding",
    DESC: "Select the geocoding features to enable for this client.",
    "ROADSPEED-ENABLED": "Road Speed",
    "ROADSPEED-ENABLED-DESC": "Enable retrieval of road speed limits.",
    RADIUSROADS: "Road Radius",
    "RADIUSROADS-DESC": "The radius (in meters) around a coordinate that geocoding will search for roads (default 100m, max 1000m)."
  },
  PARSING: {
    TITLE: "Parsing",
    DESC: "Select the parsing features to enable for this client.",
    "NATIVE-ENABLED": "Native",
    "NATIVE-ENABLED-DESC": "Enable native device parsing.",
    "LINKING-ENABLED": "Asset Linking",
    "LINKING-ENABLED-DESC": "Enable automatic asset linking.",
    "FNOL-ENABLED": "FNOL Reports",
    "FNOL-ENABLED-DESC": "Enable First Notice of Loss report generation.",
    "V2TRIPCALCULATION-ENABLED": "V2 Trip Calculation",
    "V2TRIPCALCULATION-ENABLED-DESC": "Use the V2 trip calculation engine."
  },
  SHIFTS: {
    TITLE: "Shifts",
    DESC: "Enable shifts for this client.",
    "SHIFTS-ENABLED": "Enable Shifts",
    "SHIFTS-ENABLED-DESC": "Allow users to define and use work shifts."
  },
  TASKS: {
    TITLE: "Tasks",
    DESC: "Select the task features to enable for this client",
    "TASKSERVICE-ENABLED": "Enable TaskService",
    "TASKSERVICE-ENABLED-DESC": "Activate the task management service."
  },
  REPORTS: {
    TITLE: "Reports",
    DESC: "Select the reporting backend features to enable for this client",
    "NEW_PROCESSOR-ENABLED": "New Processing",
    "NEW_PROCESSOR-ENABLED-DESC": "Use the new report processing engine.",
    "NEW_RENDERER-ENABLED": "New Renderer",
    "NEW_RENDERER-ENABLED-DESC": "Use the new report rendering engine."
  },
  PRIVACY: {
    TITLE: "Privacy Features",
    DESC: "Select the privacy features to enable for this client. Note that enabling these has a performance impact for the client.",
    "TRIP_PRIVACY-ENABLED": "Trip Privacy",
    "TRIP_PRIVACY-ENABLED-DESC": "Enable trip privacy mode features."
  },
  API: {
    TITLE: "API Settings",
    DESC: "Configure API behavior.",
    RATELIMIT: "Rate Limit (requests/minute)",
    "RATELIMIT-DESC": "Set the maximum number of API requests allowed per minute.",
    "CACHING-ENABLED": "Enable Caching",
    "CACHING-ENABLED-DESC": "Enable server-side caching for API responses.",
    TTL: "Cache TTL (seconds)",
    "TTL-DESC": "Set the time-to-live for cached API responses."
  },
  DATARETENTION: {
    TITLE: "Data Retention",
    DESC: "Configure data retention periods.",
    TRIPHISTORY: "Trip History (days)",
    "TRIPHISTORY-DESC": "Number of days to retain trip history data.",
    AUDITLOGS: "Audit Logs (days)",
    "AUDITLOGS-DESC": "Number of days to retain audit log data."
  },
  INTEGRATIONS: {
    TITLE: "Integrations",
    DESC: "Configure third-party integrations.",
    "ENABLED-ENABLED": "Enable Integrations",
    // Assuming top-level enable toggle
    "ENABLED-ENABLED-DESC": "Globally enable or disable third-party integrations.",
    "WEBHOOK-ENABLED": "Webhook Support",
    "WEBHOOK-ENABLED-DESC": "Enable outgoing webhooks for event notifications.",
    "RESTAPI-ENABLED": "REST API Access",
    "RESTAPI-ENABLED-DESC": "Enable access via the third-party REST API."
  }
};
var AppFeatureTranslations = {
  "PAGE-OVERVIEW": {
    TITLE: "Overview Page",
    DESC: "The overview page provides a central page to locate assets and view their recent activity.",
    PAGE: "Page",
    "SHOW-ACTIVITY": "Activity Feed",
    "SHOW-ACTIVITY-DESC": "Enable to display the last couple of trips that an asset has completed.",
    "SHOW-EVENTS": "Event Feed",
    "SHOW-EVENTS-DESC": "Enable to display the most recent events generated by the asset.",
    "SHOW-ALERTS": "Alert Feed",
    "SHOW-ALERTS-DESC": "Enable to display the most recent alerts triggered by the asset.",
    "SHOW-VIDEOS": "Video Feed",
    "SHOW-VIDEOS-DESC": "Enable to display the most recent videos generated by the asset.",
    "SHOW-TASKS": "Tasks Feed",
    // Corrected typo from SHOW-TASK-DESC
    "SHOW-TASKS-DESC": "Enable to display the most recent tasks generated by the asset.",
    "SHOW-SHARING": "Location Sharing",
    "SHOW-SHARING-DESC": "Enable to allow sharing asset locations with third parties.",
    "SHOW-EDITING": "Asset Editing",
    "SHOW-EDITING-DESC": "Enable to allow editing assets from the overview screen.",
    PAGESIZE: "Page Size",
    "PAGESIZE-DESC": "The number of assets to load and display at one time. Larger values will negatively affect performance.",
    NAME: "Title",
    "NAME-DESC": "Optionally specify a new title for the overview page. Leave blank for default.",
    ICON: "Icon",
    "ICON-DESC": "Optionally specify a different icon, any FontAwesome icon name is accepted. Leave blank for default.",
    LAYOUT: "Layout",
    "LAYOUT-DESC": "Choose between Basic or Advanced layouts.",
    CUSTOMPANELS: "Custom Panels",
    "CUSTOMPANELS-DESC": "Add custom panels (title:url format, one per line) to the asset details view.",
    GROUP: "Section",
    "GROUP-DESC": "Choose which section within the navigation panel this page will belong to.",
    ORDER: "Order",
    "ORDER-DESC": "Specify the position of this page within the navigation panel with respect to the other items in its section."
  },
  "PAGE-DASHBOARDS": {
    TITLE: "Dashboard Page",
    DESC: "Pin dashboard graphs to generate a daily metric overview.",
    PAGE: "Page",
    "SHOW-HOURS": "Hours",
    "SHOW-HOURS-DESC": "Enable hourly reports",
    GROUP: "Section",
    "GROUP-DESC": "Choose which section within the navigation panel this page will belong to.",
    ORDER: "Order",
    "ORDER-DESC": "Specify the position of this page within the navigation panel with respect to the other items in its section."
  },
  "PAGE-VIDEOS": {
    TITLE: "Videos Page",
    DESC: "Create, monitor and respond to asset triggered videos.",
    PAGE: "Page",
    MAXDURATION: "Max duration (seconds)",
    "MAXDURATION-DESC": "Set the maximum duration for requested videos.",
    GROUP: "Section",
    "GROUP-DESC": "Choose which section within the navigation panel this page will belong to.",
    ORDER: "Order",
    "ORDER-DESC": "Specify the position of this page within the navigation panel with respect to the other items in its section.",
    "SHOW-SAVEDVIDEOS": "Saved Videos",
    "SHOW-SAVEDVIDEOS-DESC": "Enable to allow saving videos."
  },
  "PAGE-ALERTS": {
    TITLE: "Alerts Page",
    DESC: "Create, monitor and respond to asset triggered event alerts.",
    PAGE: "Page",
    ACTIONS: "Available Actions",
    "ACTIONS-DESC": "Select which actions users can perform on alerts.",
    GROUP: "Section",
    "GROUP-DESC": "Choose which section within the navigation panel this page will belong to.",
    ORDER: "Order",
    "ORDER-DESC": "Specify the position of this page within the navigation panel with respect to the other items in its section.",
    FEEDLOADLIMIT: "Alert Feed Limit",
    "FEEDLOADLIMIT-DESC": "Define the amount of Alerts to display per feed."
  },
  "PAGE-REPLAY": {
    TITLE: "Trip History Page",
    DESC: "Retrieve and replay historic trip information.",
    PAGE: "Page",
    CUSTOMPANELS: "Custom Panels",
    "CUSTOMPANELS-DESC": "Enter each custom panel on a line, in the format <title>:<url>",
    GROUP: "Section",
    "GROUP-DESC": "Choose which section within the navigation panel this page will belong to.",
    ORDER: "Order",
    "ORDER-DESC": "Specify the position of this page within the navigation panel with respect to the other items in its section."
  },
  "PAGE-MAPSEARCH": {
    TITLE: "Map Search Page",
    DESC: "Search for historic activity on a map.",
    PAGE: "Page",
    GROUP: "Section",
    "GROUP-DESC": "Choose which section within the navigation panel this page will belong to.",
    ORDER: "Order",
    "ORDER-DESC": "Specify the position of this page within the navigation panel with respect to the other items in its section."
  },
  "PAGE-ASSETPERFORMANCE": {
    TITLE: "Driver Performance Page",
    DESC: "View performance data for the assets within the system.",
    PAGE: "Page",
    NAME: "Title",
    "NAME-DESC": "Optionally specify a new title for the driver performance. Leave blank for default.",
    ICON: "Icon",
    "ICON-DESC": "Optionally specify a different icon, any FontAwesome icon name is accepted. Leave blank for default.",
    GROUP: "Section",
    "GROUP-DESC": "Choose which section within the navigation panel this page will belong to.",
    ORDER: "Order",
    "ORDER-DESC": "Specify the position of this page within the navigation panel with respect to the other items in its section."
  },
  "PAGE-DEVICEHEALTH": {
    TITLE: "Device Health Page",
    DESC: "Get an overview of device health in a handy dashboard.",
    PAGE: "Page",
    GROUP: "Section",
    "GROUP-DESC": "Choose which section within the navigation panel this page will belong to.",
    ORDER: "Order",
    "ORDER-DESC": "Specify the position of this page within the navigation panel with respect to the other items in its section.",
    SUPPORTURL: "Support Url",
    "SUPPORTURL-DESC": "Enter a URL to redirect to when a user requests support for a device issue."
  },
  "PAGE-REPORTING": {
    TITLE: "Reporting Page",
    DESC: "Generate PDF and live dashboard reports.",
    PAGE: "Page",
    "SHOW-ANALYTICS": "Dashboard Reports",
    "SHOW-ANALYTICS-DESC": "Enable to allow users to run dashboard reports.",
    REPORTS: "Reports",
    "REPORTS-DESC": "Only checked reports will be available for use by clients.",
    DATELIMITOVERRIDE: "Date Limit Override",
    "DATELIMITOVERRIDE-DESC": "WARNING: Removing the report date limits could cause report generation to fail if sufficiently large documents are requested.",
    GROUP: "Section",
    "GROUP-DESC": "Choose which section within the navigation panel this page will belong to.",
    ORDER: "Order",
    "ORDER-DESC": "Specify the position of this page within the navigation panel with respect to the other items in its section."
  },
  "PAGE-ADMIN": {
    TITLE: "Administration Page",
    DESC: "Add, modify and administer entities.",
    PAGE: "Page",
    CUSTOMPANELS: "Custom Panels",
    "CUSTOMPANELS-DESC": "Add custom panels (title:url format, one per line) to specific entity views.",
    "SHOW-FUELCARDS": "Show Fuel Cards",
    "SHOW-FUELCARDS-DESC": "Enable the fuel card management section.",
    AVAILABLEASSETTYPES: "Available Asset Types",
    "AVAILABLEASSETTYPES-DESC": "Select which asset types can be created and managed.",
    GROUP: "Section",
    "GROUP-DESC": "Choose which section within the navigation panel this page will belong to.",
    ORDER: "Order",
    "ORDER-DESC": "Specify the position of this page within the navigation panel with respect to the other items in its section."
  },
  "PAGE-EXTERNAL": {
    TITLE: "External Tabs",
    DESC: "Add external applications to the custom tabs section",
    PAGE: "Page",
    TABS: "Tabs",
    "TABS-DESC": "Add external tabs (title:url format, one per line) to the main navigation."
  },
  "PAGE-GEOFENCE": {
    TITLE: "Geofence Shortcut",
    DESC: "Display a button to open Geofence actions",
    PAGE: "Page",
    GROUP: "Section",
    "GROUP-DESC": "Choose which section within the navigation panel this page will belong to.",
    ORDER: "Order",
    "ORDER-DESC": "Specify the position of this page within the navigation panel with respect to the other items in its section."
  }
};
var AppListsTranslations = {
  MODALS: {
    "EXTERNAL-TABS": {
      TITLE: "External Tab",
      DESC: "Complete the following fields to add an external tab to the main navigation bar."
    },
    "OVERVIEW-TABS": {
      TITLE: "Overview Custom Panel",
      DESC: "Complete the following fields to add a custom tab to the asset details view."
    },
    "ADMIN-ENTITY-TABS": {
      TITLE: "Admin Entity Panel",
      DESC: "Complete the following fields to add a custom panel to an entity view."
    }
  },
  FIELDS: {
    TITLE: "Title",
    URL: "URL",
    ICON: "Icon",
    ENTITY: "Entity",
    SECTION: "Section",
    SECTION_DESC: "Leave blank to place the item in the default 'Applications' sub menu.",
    ORDER: "Order",
    ORDER_DESC: "Specify the position of this page within the navigation panel with respect to the other items in its section."
  }
};

// src/app/core/services/auth-token-manager.service.ts
var AuthTokenManagerService = class _AuthTokenManagerService {
  authService = inject(AuthService);
  // private readonly TOKEN_EXPIRY_BUFFER = 60000*59+55000; // 1 minute before expiry
  TOKEN_EXPIRY_BUFFER = 6e4;
  // 1 minute before expiry
  TOKEN_EXPIRY_TIME = 36e5;
  // 1 hour in milliseconds
  refreshTokenTimeout = null;
  constructor() {
    this.scheduleTokenRefresh();
  }
  // Store tokens in localStorage
  storeTokens(response) {
    localStorage.setItem(LOCAL_STORAGE_KEY_ACCESS_TOKEN, response.accessToken);
    localStorage.setItem(LOCAL_STORAGE_KEY_REFRESH_TOKEN, response.refreshToken);
    localStorage.setItem(LOCAL_STORAGE_KEY_TOKEN_EXPIRY, (Date.now() + this.TOKEN_EXPIRY_TIME).toString());
    localStorage.setItem(LOCAL_STORAGE_KEY_USER_SESSION, JSON.stringify(response.users));
    this.scheduleTokenRefresh();
  }
  // Get access token from localStForage
  getAccessToken() {
    return localStorage.getItem(LOCAL_STORAGE_KEY_ACCESS_TOKEN);
  }
  // Get refresh token from localStorage
  getRefreshToken() {
    return localStorage.getItem(LOCAL_STORAGE_KEY_REFRESH_TOKEN);
  }
  getTokenExpiry() {
    const expiry = localStorage.getItem(LOCAL_STORAGE_KEY_TOKEN_EXPIRY);
    if (!isString(expiry))
      return null;
    const expiryTimestamp = parseInt(expiry, 10);
    if (isNaN(expiryTimestamp))
      return null;
    return new Date(expiryTimestamp).toISOString();
  }
  // Check if the token is expired
  isTokenExpired() {
    const expiry = localStorage.getItem(LOCAL_STORAGE_KEY_TOKEN_EXPIRY);
    if (!isString(expiry))
      return true;
    const expiryTimestamp = parseInt(expiry, 10);
    return isNaN(expiryTimestamp) || Date.now() > expiryTimestamp;
  }
  // Clear tokens from localStorage
  clearTokens() {
    localStorage.removeItem(LOCAL_STORAGE_KEY_ACCESS_TOKEN);
    localStorage.removeItem(LOCAL_STORAGE_KEY_REFRESH_TOKEN);
    localStorage.removeItem(LOCAL_STORAGE_KEY_TOKEN_EXPIRY);
    if (isDefined(this.refreshTokenTimeout)) {
      clearTimeout(this.refreshTokenTimeout);
      this.refreshTokenTimeout = null;
    }
  }
  // Schedule token refresh before expiry
  scheduleTokenRefresh() {
    if (this.isTokenExpired()) {
      this.clearTokens();
      return;
    }
    const expiry = localStorage.getItem(LOCAL_STORAGE_KEY_TOKEN_EXPIRY);
    if (!isString(expiry)) {
      this.clearTokens();
      return;
    }
    const expiryTimestamp = parseInt(expiry, 10);
    if (isNaN(expiryTimestamp)) {
      this.clearTokens();
      return;
    }
    const timeout = expiryTimestamp - Date.now() - this.TOKEN_EXPIRY_BUFFER;
    if (isDefined(this.refreshTokenTimeout)) {
      clearTimeout(this.refreshTokenTimeout);
    }
    setTimeout(() => {
      this.refreshToken().subscribe();
    }, timeout);
  }
  // Refresh the token
  refreshToken() {
    const refreshToken = this.getRefreshToken();
    if (!isString(refreshToken)) {
      this.clearTokens();
      return throwError(() => "No refresh token available");
    }
    return this.authService.refreshToken(refreshToken).pipe(switchMap((response) => {
      this.storeTokens(response);
      return of(response);
    }), catchError((error) => {
      this.clearTokens();
      return throwError(() => error);
    }));
  }
  static \u0275fac = function AuthTokenManagerService_Factory(__ngFactoryType__) {
    return new (__ngFactoryType__ || _AuthTokenManagerService)();
  };
  static \u0275prov = /* @__PURE__ */ \u0275\u0275defineInjectable({ token: _AuthTokenManagerService, factory: _AuthTokenManagerService.\u0275fac, providedIn: "root" });
};
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(AuthTokenManagerService, [{
    type: Injectable,
    args: [{
      providedIn: "root"
    }]
  }], () => [], null);
})();

// src/app/api/configuration.ts
var Configuration = class {
  /**
   *  @deprecated Since 5.0. Use credentials instead
   */
  apiKeys;
  username;
  password;
  /**
   *  @deprecated Since 5.0. Use credentials instead
   */
  accessToken;
  basePath;
  withCredentials;
  /**
   * Takes care of encoding query- and form-parameters.
   */
  encoder;
  /**
   * Encoding of various path parameter
   * <a href="https://github.com/OAI/OpenAPI-Specification/blob/main/versions/3.1.0.md#style-values">styles</a>.
   * <p>
   * See {@link README.md} for more details
   * </p>
   */
  encodeParam;
  /**
   * The keys are the names in the securitySchemes section of the OpenAPI
   * document. They should map to the value used for authentication
   * minus any standard prefixes such as 'Basic' or 'Bearer'.
   */
  credentials;
  constructor(configurationParameters = {}) {
    this.apiKeys = configurationParameters.apiKeys;
    this.username = configurationParameters.username;
    this.password = configurationParameters.password;
    this.accessToken = configurationParameters.accessToken;
    this.basePath = configurationParameters.basePath;
    this.withCredentials = configurationParameters.withCredentials;
    this.encoder = configurationParameters.encoder;
    if (configurationParameters.encodeParam) {
      this.encodeParam = configurationParameters.encodeParam;
    } else {
      this.encodeParam = (param) => this.defaultEncodeParam(param);
    }
    if (configurationParameters.credentials) {
      this.credentials = configurationParameters.credentials;
    } else {
      this.credentials = {};
    }
    if (!this.credentials["access_token"]) {
      this.credentials["access_token"] = () => {
        if (this.apiKeys === null || this.apiKeys === void 0) {
          return void 0;
        } else {
          return this.apiKeys["access_token"] || this.apiKeys["x-access-token"];
        }
      };
    }
  }
  /**
   * Select the correct content-type to use for a request.
   * Uses {@link Configuration#isJsonMime} to determine the correct content-type.
   * If no content type is found return the first found type if the contentTypes is not empty
   * @param contentTypes - the array of content types that are available for selection
   * @returns the selected content-type or <code>undefined</code> if no selection could be made.
   */
  selectHeaderContentType(contentTypes) {
    if (contentTypes.length === 0) {
      return void 0;
    }
    const type = contentTypes.find((x) => this.isJsonMime(x));
    if (type === void 0) {
      return contentTypes[0];
    }
    return type;
  }
  /**
   * Select the correct accept content-type to use for a request.
   * Uses {@link Configuration#isJsonMime} to determine the correct accept content-type.
   * If no content type is found return the first found type if the contentTypes is not empty
   * @param accepts - the array of content types that are available for selection.
   * @returns the selected content-type or <code>undefined</code> if no selection could be made.
   */
  selectHeaderAccept(accepts) {
    if (accepts.length === 0) {
      return void 0;
    }
    const type = accepts.find((x) => this.isJsonMime(x));
    if (type === void 0) {
      return accepts[0];
    }
    return type;
  }
  /**
   * Check if the given MIME is a JSON MIME.
   * JSON MIME examples:
   *   application/json
   *   application/json; charset=UTF8
   *   APPLICATION/JSON
   *   application/vnd.company+json
   * @param mime - MIME (Multipurpose Internet Mail Extensions)
   * @return True if the given MIME is JSON, false otherwise.
   */
  isJsonMime(mime) {
    const jsonMime = new RegExp("^(application/json|[^;/ 	]+/[^;/ 	]+[+]json)[ 	]*(;.*)?$", "i");
    return mime !== null && (jsonMime.test(mime) || mime.toLowerCase() === "application/json-patch+json");
  }
  lookupCredential(key) {
    const value = this.credentials[key];
    return typeof value === "function" ? value() : value;
  }
  defaultEncodeParam(param) {
    const value = param.dataFormat === "date-time" && param.value instanceof Date ? param.value.toISOString() : param.value;
    return encodeURIComponent(String(value));
  }
};

// src/app/api/encoder.ts
var CustomHttpParameterCodec = class {
  encodeKey(k) {
    return encodeURIComponent(k);
  }
  encodeValue(v) {
    return encodeURIComponent(v);
  }
  decodeKey(k) {
    return decodeURIComponent(k);
  }
  decodeValue(v) {
    return decodeURIComponent(v);
  }
};

// src/app/api/variables.ts
var BASE_PATH = new InjectionToken("basePath");

// src/app/api/api/accounts.service.ts
var AccountsService = class _AccountsService {
  httpClient;
  basePath = "";
  defaultHeaders = new HttpHeaders();
  configuration = new Configuration();
  encoder;
  constructor(httpClient, basePath, configuration) {
    this.httpClient = httpClient;
    if (configuration) {
      this.configuration = configuration;
    }
    if (typeof this.configuration.basePath !== "string") {
      const firstBasePath = Array.isArray(basePath) ? basePath[0] : void 0;
      if (firstBasePath != void 0) {
        basePath = firstBasePath;
      }
      if (typeof basePath !== "string") {
        basePath = this.basePath;
      }
      this.configuration.basePath = basePath;
    }
    this.encoder = this.configuration.encoder || new CustomHttpParameterCodec();
  }
  // @ts-ignore
  addToHttpParams(httpParams, value, key) {
    if (typeof value === "object" && value instanceof Date === false) {
      httpParams = this.addToHttpParamsRecursive(httpParams, value);
    } else {
      httpParams = this.addToHttpParamsRecursive(httpParams, value, key);
    }
    return httpParams;
  }
  addToHttpParamsRecursive(httpParams, value, key) {
    if (value == null) {
      return httpParams;
    }
    if (typeof value === "object") {
      if (Array.isArray(value)) {
        value.forEach((elem) => httpParams = this.addToHttpParamsRecursive(httpParams, elem, key));
      } else if (value instanceof Date) {
        if (key != null) {
          httpParams = httpParams.append(key, value.toISOString().substring(0, 10));
        } else {
          throw Error("key may not be null if value is Date");
        }
      } else {
        Object.keys(value).forEach((k) => httpParams = this.addToHttpParamsRecursive(httpParams, value[k], key != null ? `${key}.${k}` : k));
      }
    } else if (key != null) {
      httpParams = httpParams.append(key, value);
    } else {
      throw Error("key may not be null if value is not object or array");
    }
    return httpParams;
  }
  createApiKey(id, request, observe = "body", reportProgress = false, options) {
    if (id === null || id === void 0) {
      throw new Error("Required parameter id was null or undefined when calling createApiKey.");
    }
    if (request === null || request === void 0) {
      throw new Error("Required parameter request was null or undefined when calling createApiKey.");
    }
    let localVarHeaders = this.defaultHeaders;
    let localVarCredential;
    localVarCredential = this.configuration.lookupCredential("access_token");
    if (localVarCredential) {
      localVarHeaders = localVarHeaders.set("x-access-token", localVarCredential);
    }
    let localVarHttpHeaderAcceptSelected = options && options.httpHeaderAccept;
    if (localVarHttpHeaderAcceptSelected === void 0) {
      const httpHeaderAccepts = [
        "application/json"
      ];
      localVarHttpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
    }
    if (localVarHttpHeaderAcceptSelected !== void 0) {
      localVarHeaders = localVarHeaders.set("Accept", localVarHttpHeaderAcceptSelected);
    }
    let localVarHttpContext = options && options.context;
    if (localVarHttpContext === void 0) {
      localVarHttpContext = new HttpContext();
    }
    let localVarTransferCache = options && options.transferCache;
    if (localVarTransferCache === void 0) {
      localVarTransferCache = true;
    }
    const consumes = [
      "application/json"
    ];
    const httpContentTypeSelected = this.configuration.selectHeaderContentType(consumes);
    if (httpContentTypeSelected !== void 0) {
      localVarHeaders = localVarHeaders.set("Content-Type", httpContentTypeSelected);
    }
    let responseType_ = "json";
    if (localVarHttpHeaderAcceptSelected) {
      if (localVarHttpHeaderAcceptSelected.startsWith("text")) {
        responseType_ = "text";
      } else if (this.configuration.isJsonMime(localVarHttpHeaderAcceptSelected)) {
        responseType_ = "json";
      } else {
        responseType_ = "blob";
      }
    }
    let localVarPath = `/accounts/users/${this.configuration.encodeParam({ name: "id", value: id, in: "path", style: "simple", explode: false, dataType: "string", dataFormat: void 0 })}/apikeys`;
    return this.httpClient.request("post", `${this.configuration.basePath}${localVarPath}`, {
      context: localVarHttpContext,
      body: request,
      responseType: responseType_,
      withCredentials: this.configuration.withCredentials,
      headers: localVarHeaders,
      observe,
      transferCache: localVarTransferCache,
      reportProgress
    });
  }
  createClient(request, observe = "body", reportProgress = false, options) {
    if (request === null || request === void 0) {
      throw new Error("Required parameter request was null or undefined when calling createClient.");
    }
    let localVarHeaders = this.defaultHeaders;
    let localVarCredential;
    localVarCredential = this.configuration.lookupCredential("access_token");
    if (localVarCredential) {
      localVarHeaders = localVarHeaders.set("x-access-token", localVarCredential);
    }
    let localVarHttpHeaderAcceptSelected = options && options.httpHeaderAccept;
    if (localVarHttpHeaderAcceptSelected === void 0) {
      const httpHeaderAccepts = [
        "application/json"
      ];
      localVarHttpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
    }
    if (localVarHttpHeaderAcceptSelected !== void 0) {
      localVarHeaders = localVarHeaders.set("Accept", localVarHttpHeaderAcceptSelected);
    }
    let localVarHttpContext = options && options.context;
    if (localVarHttpContext === void 0) {
      localVarHttpContext = new HttpContext();
    }
    let localVarTransferCache = options && options.transferCache;
    if (localVarTransferCache === void 0) {
      localVarTransferCache = true;
    }
    const consumes = [
      "application/json"
    ];
    const httpContentTypeSelected = this.configuration.selectHeaderContentType(consumes);
    if (httpContentTypeSelected !== void 0) {
      localVarHeaders = localVarHeaders.set("Content-Type", httpContentTypeSelected);
    }
    let responseType_ = "json";
    if (localVarHttpHeaderAcceptSelected) {
      if (localVarHttpHeaderAcceptSelected.startsWith("text")) {
        responseType_ = "text";
      } else if (this.configuration.isJsonMime(localVarHttpHeaderAcceptSelected)) {
        responseType_ = "json";
      } else {
        responseType_ = "blob";
      }
    }
    let localVarPath = `/accounts/clients`;
    return this.httpClient.request("post", `${this.configuration.basePath}${localVarPath}`, {
      context: localVarHttpContext,
      body: request,
      responseType: responseType_,
      withCredentials: this.configuration.withCredentials,
      headers: localVarHeaders,
      observe,
      transferCache: localVarTransferCache,
      reportProgress
    });
  }
  createCompanyGroup(request, observe = "body", reportProgress = false, options) {
    if (request === null || request === void 0) {
      throw new Error("Required parameter request was null or undefined when calling createCompanyGroup.");
    }
    let localVarHeaders = this.defaultHeaders;
    let localVarCredential;
    localVarCredential = this.configuration.lookupCredential("access_token");
    if (localVarCredential) {
      localVarHeaders = localVarHeaders.set("x-access-token", localVarCredential);
    }
    let localVarHttpHeaderAcceptSelected = options && options.httpHeaderAccept;
    if (localVarHttpHeaderAcceptSelected === void 0) {
      const httpHeaderAccepts = [
        "application/json"
      ];
      localVarHttpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
    }
    if (localVarHttpHeaderAcceptSelected !== void 0) {
      localVarHeaders = localVarHeaders.set("Accept", localVarHttpHeaderAcceptSelected);
    }
    let localVarHttpContext = options && options.context;
    if (localVarHttpContext === void 0) {
      localVarHttpContext = new HttpContext();
    }
    let localVarTransferCache = options && options.transferCache;
    if (localVarTransferCache === void 0) {
      localVarTransferCache = true;
    }
    const consumes = [
      "application/json"
    ];
    const httpContentTypeSelected = this.configuration.selectHeaderContentType(consumes);
    if (httpContentTypeSelected !== void 0) {
      localVarHeaders = localVarHeaders.set("Content-Type", httpContentTypeSelected);
    }
    let responseType_ = "json";
    if (localVarHttpHeaderAcceptSelected) {
      if (localVarHttpHeaderAcceptSelected.startsWith("text")) {
        responseType_ = "text";
      } else if (this.configuration.isJsonMime(localVarHttpHeaderAcceptSelected)) {
        responseType_ = "json";
      } else {
        responseType_ = "blob";
      }
    }
    let localVarPath = `/accounts/companygroups`;
    return this.httpClient.request("post", `${this.configuration.basePath}${localVarPath}`, {
      context: localVarHttpContext,
      body: request,
      responseType: responseType_,
      withCredentials: this.configuration.withCredentials,
      headers: localVarHeaders,
      observe,
      transferCache: localVarTransferCache,
      reportProgress
    });
  }
  createDistributor(request, observe = "body", reportProgress = false, options) {
    if (request === null || request === void 0) {
      throw new Error("Required parameter request was null or undefined when calling createDistributor.");
    }
    let localVarHeaders = this.defaultHeaders;
    let localVarCredential;
    localVarCredential = this.configuration.lookupCredential("access_token");
    if (localVarCredential) {
      localVarHeaders = localVarHeaders.set("x-access-token", localVarCredential);
    }
    let localVarHttpHeaderAcceptSelected = options && options.httpHeaderAccept;
    if (localVarHttpHeaderAcceptSelected === void 0) {
      const httpHeaderAccepts = [
        "application/json"
      ];
      localVarHttpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
    }
    if (localVarHttpHeaderAcceptSelected !== void 0) {
      localVarHeaders = localVarHeaders.set("Accept", localVarHttpHeaderAcceptSelected);
    }
    let localVarHttpContext = options && options.context;
    if (localVarHttpContext === void 0) {
      localVarHttpContext = new HttpContext();
    }
    let localVarTransferCache = options && options.transferCache;
    if (localVarTransferCache === void 0) {
      localVarTransferCache = true;
    }
    const consumes = [
      "application/json"
    ];
    const httpContentTypeSelected = this.configuration.selectHeaderContentType(consumes);
    if (httpContentTypeSelected !== void 0) {
      localVarHeaders = localVarHeaders.set("Content-Type", httpContentTypeSelected);
    }
    let responseType_ = "json";
    if (localVarHttpHeaderAcceptSelected) {
      if (localVarHttpHeaderAcceptSelected.startsWith("text")) {
        responseType_ = "text";
      } else if (this.configuration.isJsonMime(localVarHttpHeaderAcceptSelected)) {
        responseType_ = "json";
      } else {
        responseType_ = "blob";
      }
    }
    let localVarPath = `/accounts/distributors`;
    return this.httpClient.request("post", `${this.configuration.basePath}${localVarPath}`, {
      context: localVarHttpContext,
      body: request,
      responseType: responseType_,
      withCredentials: this.configuration.withCredentials,
      headers: localVarHeaders,
      observe,
      transferCache: localVarTransferCache,
      reportProgress
    });
  }
  createUser(request, observe = "body", reportProgress = false, options) {
    if (request === null || request === void 0) {
      throw new Error("Required parameter request was null or undefined when calling createUser.");
    }
    let localVarHeaders = this.defaultHeaders;
    let localVarCredential;
    localVarCredential = this.configuration.lookupCredential("access_token");
    if (localVarCredential) {
      localVarHeaders = localVarHeaders.set("x-access-token", localVarCredential);
    }
    let localVarHttpHeaderAcceptSelected = options && options.httpHeaderAccept;
    if (localVarHttpHeaderAcceptSelected === void 0) {
      const httpHeaderAccepts = [
        "application/json"
      ];
      localVarHttpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
    }
    if (localVarHttpHeaderAcceptSelected !== void 0) {
      localVarHeaders = localVarHeaders.set("Accept", localVarHttpHeaderAcceptSelected);
    }
    let localVarHttpContext = options && options.context;
    if (localVarHttpContext === void 0) {
      localVarHttpContext = new HttpContext();
    }
    let localVarTransferCache = options && options.transferCache;
    if (localVarTransferCache === void 0) {
      localVarTransferCache = true;
    }
    const consumes = [
      "application/json"
    ];
    const httpContentTypeSelected = this.configuration.selectHeaderContentType(consumes);
    if (httpContentTypeSelected !== void 0) {
      localVarHeaders = localVarHeaders.set("Content-Type", httpContentTypeSelected);
    }
    let responseType_ = "json";
    if (localVarHttpHeaderAcceptSelected) {
      if (localVarHttpHeaderAcceptSelected.startsWith("text")) {
        responseType_ = "text";
      } else if (this.configuration.isJsonMime(localVarHttpHeaderAcceptSelected)) {
        responseType_ = "json";
      } else {
        responseType_ = "blob";
      }
    }
    let localVarPath = `/accounts/users`;
    return this.httpClient.request("post", `${this.configuration.basePath}${localVarPath}`, {
      context: localVarHttpContext,
      body: request,
      responseType: responseType_,
      withCredentials: this.configuration.withCredentials,
      headers: localVarHeaders,
      observe,
      transferCache: localVarTransferCache,
      reportProgress
    });
  }
  createUserRole(request, observe = "body", reportProgress = false, options) {
    if (request === null || request === void 0) {
      throw new Error("Required parameter request was null or undefined when calling createUserRole.");
    }
    let localVarHeaders = this.defaultHeaders;
    let localVarCredential;
    localVarCredential = this.configuration.lookupCredential("access_token");
    if (localVarCredential) {
      localVarHeaders = localVarHeaders.set("x-access-token", localVarCredential);
    }
    let localVarHttpHeaderAcceptSelected = options && options.httpHeaderAccept;
    if (localVarHttpHeaderAcceptSelected === void 0) {
      const httpHeaderAccepts = [
        "application/json"
      ];
      localVarHttpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
    }
    if (localVarHttpHeaderAcceptSelected !== void 0) {
      localVarHeaders = localVarHeaders.set("Accept", localVarHttpHeaderAcceptSelected);
    }
    let localVarHttpContext = options && options.context;
    if (localVarHttpContext === void 0) {
      localVarHttpContext = new HttpContext();
    }
    let localVarTransferCache = options && options.transferCache;
    if (localVarTransferCache === void 0) {
      localVarTransferCache = true;
    }
    const consumes = [
      "application/json"
    ];
    const httpContentTypeSelected = this.configuration.selectHeaderContentType(consumes);
    if (httpContentTypeSelected !== void 0) {
      localVarHeaders = localVarHeaders.set("Content-Type", httpContentTypeSelected);
    }
    let responseType_ = "json";
    if (localVarHttpHeaderAcceptSelected) {
      if (localVarHttpHeaderAcceptSelected.startsWith("text")) {
        responseType_ = "text";
      } else if (this.configuration.isJsonMime(localVarHttpHeaderAcceptSelected)) {
        responseType_ = "json";
      } else {
        responseType_ = "blob";
      }
    }
    let localVarPath = `/accounts/userroles`;
    return this.httpClient.request("post", `${this.configuration.basePath}${localVarPath}`, {
      context: localVarHttpContext,
      body: request,
      responseType: responseType_,
      withCredentials: this.configuration.withCredentials,
      headers: localVarHeaders,
      observe,
      transferCache: localVarTransferCache,
      reportProgress
    });
  }
  createVendor(request, observe = "body", reportProgress = false, options) {
    if (request === null || request === void 0) {
      throw new Error("Required parameter request was null or undefined when calling createVendor.");
    }
    let localVarHeaders = this.defaultHeaders;
    let localVarCredential;
    localVarCredential = this.configuration.lookupCredential("access_token");
    if (localVarCredential) {
      localVarHeaders = localVarHeaders.set("x-access-token", localVarCredential);
    }
    let localVarHttpHeaderAcceptSelected = options && options.httpHeaderAccept;
    if (localVarHttpHeaderAcceptSelected === void 0) {
      const httpHeaderAccepts = [
        "application/json"
      ];
      localVarHttpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
    }
    if (localVarHttpHeaderAcceptSelected !== void 0) {
      localVarHeaders = localVarHeaders.set("Accept", localVarHttpHeaderAcceptSelected);
    }
    let localVarHttpContext = options && options.context;
    if (localVarHttpContext === void 0) {
      localVarHttpContext = new HttpContext();
    }
    let localVarTransferCache = options && options.transferCache;
    if (localVarTransferCache === void 0) {
      localVarTransferCache = true;
    }
    const consumes = [
      "application/json"
    ];
    const httpContentTypeSelected = this.configuration.selectHeaderContentType(consumes);
    if (httpContentTypeSelected !== void 0) {
      localVarHeaders = localVarHeaders.set("Content-Type", httpContentTypeSelected);
    }
    let responseType_ = "json";
    if (localVarHttpHeaderAcceptSelected) {
      if (localVarHttpHeaderAcceptSelected.startsWith("text")) {
        responseType_ = "text";
      } else if (this.configuration.isJsonMime(localVarHttpHeaderAcceptSelected)) {
        responseType_ = "json";
      } else {
        responseType_ = "blob";
      }
    }
    let localVarPath = `/accounts/vendors`;
    return this.httpClient.request("post", `${this.configuration.basePath}${localVarPath}`, {
      context: localVarHttpContext,
      body: request,
      responseType: responseType_,
      withCredentials: this.configuration.withCredentials,
      headers: localVarHeaders,
      observe,
      transferCache: localVarTransferCache,
      reportProgress
    });
  }
  deleteApiKey(id, keyid, observe = "body", reportProgress = false, options) {
    if (id === null || id === void 0) {
      throw new Error("Required parameter id was null or undefined when calling deleteApiKey.");
    }
    if (keyid === null || keyid === void 0) {
      throw new Error("Required parameter keyid was null or undefined when calling deleteApiKey.");
    }
    let localVarHeaders = this.defaultHeaders;
    let localVarCredential;
    localVarCredential = this.configuration.lookupCredential("access_token");
    if (localVarCredential) {
      localVarHeaders = localVarHeaders.set("x-access-token", localVarCredential);
    }
    let localVarHttpHeaderAcceptSelected = options && options.httpHeaderAccept;
    if (localVarHttpHeaderAcceptSelected === void 0) {
      const httpHeaderAccepts = [
        "application/json"
      ];
      localVarHttpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
    }
    if (localVarHttpHeaderAcceptSelected !== void 0) {
      localVarHeaders = localVarHeaders.set("Accept", localVarHttpHeaderAcceptSelected);
    }
    let localVarHttpContext = options && options.context;
    if (localVarHttpContext === void 0) {
      localVarHttpContext = new HttpContext();
    }
    let localVarTransferCache = options && options.transferCache;
    if (localVarTransferCache === void 0) {
      localVarTransferCache = true;
    }
    let responseType_ = "json";
    if (localVarHttpHeaderAcceptSelected) {
      if (localVarHttpHeaderAcceptSelected.startsWith("text")) {
        responseType_ = "text";
      } else if (this.configuration.isJsonMime(localVarHttpHeaderAcceptSelected)) {
        responseType_ = "json";
      } else {
        responseType_ = "blob";
      }
    }
    let localVarPath = `/accounts/users/${this.configuration.encodeParam({ name: "id", value: id, in: "path", style: "simple", explode: false, dataType: "string", dataFormat: void 0 })}/apikeys/${this.configuration.encodeParam({ name: "keyid", value: keyid, in: "path", style: "simple", explode: false, dataType: "string", dataFormat: void 0 })}`;
    return this.httpClient.request("delete", `${this.configuration.basePath}${localVarPath}`, {
      context: localVarHttpContext,
      responseType: responseType_,
      withCredentials: this.configuration.withCredentials,
      headers: localVarHeaders,
      observe,
      transferCache: localVarTransferCache,
      reportProgress
    });
  }
  deleteClientLogo(id, size, observe = "body", reportProgress = false, options) {
    if (id === null || id === void 0) {
      throw new Error("Required parameter id was null or undefined when calling deleteClientLogo.");
    }
    if (size === null || size === void 0) {
      throw new Error("Required parameter size was null or undefined when calling deleteClientLogo.");
    }
    let localVarQueryParameters = new HttpParams({ encoder: this.encoder });
    if (size !== void 0 && size !== null) {
      localVarQueryParameters = this.addToHttpParams(localVarQueryParameters, size, "size");
    }
    let localVarHeaders = this.defaultHeaders;
    let localVarCredential;
    localVarCredential = this.configuration.lookupCredential("access_token");
    if (localVarCredential) {
      localVarHeaders = localVarHeaders.set("x-access-token", localVarCredential);
    }
    let localVarHttpHeaderAcceptSelected = options && options.httpHeaderAccept;
    if (localVarHttpHeaderAcceptSelected === void 0) {
      const httpHeaderAccepts = [];
      localVarHttpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
    }
    if (localVarHttpHeaderAcceptSelected !== void 0) {
      localVarHeaders = localVarHeaders.set("Accept", localVarHttpHeaderAcceptSelected);
    }
    let localVarHttpContext = options && options.context;
    if (localVarHttpContext === void 0) {
      localVarHttpContext = new HttpContext();
    }
    let localVarTransferCache = options && options.transferCache;
    if (localVarTransferCache === void 0) {
      localVarTransferCache = true;
    }
    let responseType_ = "json";
    if (localVarHttpHeaderAcceptSelected) {
      if (localVarHttpHeaderAcceptSelected.startsWith("text")) {
        responseType_ = "text";
      } else if (this.configuration.isJsonMime(localVarHttpHeaderAcceptSelected)) {
        responseType_ = "json";
      } else {
        responseType_ = "blob";
      }
    }
    let localVarPath = `/accounts/clients/${this.configuration.encodeParam({ name: "id", value: id, in: "path", style: "simple", explode: false, dataType: "string", dataFormat: void 0 })}/logo`;
    return this.httpClient.request("delete", `${this.configuration.basePath}${localVarPath}`, {
      context: localVarHttpContext,
      params: localVarQueryParameters,
      responseType: responseType_,
      withCredentials: this.configuration.withCredentials,
      headers: localVarHeaders,
      observe,
      transferCache: localVarTransferCache,
      reportProgress
    });
  }
  deleteCompanyGroup(id, observe = "body", reportProgress = false, options) {
    if (id === null || id === void 0) {
      throw new Error("Required parameter id was null or undefined when calling deleteCompanyGroup.");
    }
    let localVarHeaders = this.defaultHeaders;
    let localVarCredential;
    localVarCredential = this.configuration.lookupCredential("access_token");
    if (localVarCredential) {
      localVarHeaders = localVarHeaders.set("x-access-token", localVarCredential);
    }
    let localVarHttpHeaderAcceptSelected = options && options.httpHeaderAccept;
    if (localVarHttpHeaderAcceptSelected === void 0) {
      const httpHeaderAccepts = [
        "application/json"
      ];
      localVarHttpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
    }
    if (localVarHttpHeaderAcceptSelected !== void 0) {
      localVarHeaders = localVarHeaders.set("Accept", localVarHttpHeaderAcceptSelected);
    }
    let localVarHttpContext = options && options.context;
    if (localVarHttpContext === void 0) {
      localVarHttpContext = new HttpContext();
    }
    let localVarTransferCache = options && options.transferCache;
    if (localVarTransferCache === void 0) {
      localVarTransferCache = true;
    }
    let responseType_ = "json";
    if (localVarHttpHeaderAcceptSelected) {
      if (localVarHttpHeaderAcceptSelected.startsWith("text")) {
        responseType_ = "text";
      } else if (this.configuration.isJsonMime(localVarHttpHeaderAcceptSelected)) {
        responseType_ = "json";
      } else {
        responseType_ = "blob";
      }
    }
    let localVarPath = `/accounts/companygroups/${this.configuration.encodeParam({ name: "id", value: id, in: "path", style: "simple", explode: false, dataType: "string", dataFormat: void 0 })}`;
    return this.httpClient.request("delete", `${this.configuration.basePath}${localVarPath}`, {
      context: localVarHttpContext,
      responseType: responseType_,
      withCredentials: this.configuration.withCredentials,
      headers: localVarHeaders,
      observe,
      transferCache: localVarTransferCache,
      reportProgress
    });
  }
  deleteDistributorLogo(id, size, observe = "body", reportProgress = false, options) {
    if (id === null || id === void 0) {
      throw new Error("Required parameter id was null or undefined when calling deleteDistributorLogo.");
    }
    if (size === null || size === void 0) {
      throw new Error("Required parameter size was null or undefined when calling deleteDistributorLogo.");
    }
    let localVarQueryParameters = new HttpParams({ encoder: this.encoder });
    if (size !== void 0 && size !== null) {
      localVarQueryParameters = this.addToHttpParams(localVarQueryParameters, size, "size");
    }
    let localVarHeaders = this.defaultHeaders;
    let localVarCredential;
    localVarCredential = this.configuration.lookupCredential("access_token");
    if (localVarCredential) {
      localVarHeaders = localVarHeaders.set("x-access-token", localVarCredential);
    }
    let localVarHttpHeaderAcceptSelected = options && options.httpHeaderAccept;
    if (localVarHttpHeaderAcceptSelected === void 0) {
      const httpHeaderAccepts = [];
      localVarHttpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
    }
    if (localVarHttpHeaderAcceptSelected !== void 0) {
      localVarHeaders = localVarHeaders.set("Accept", localVarHttpHeaderAcceptSelected);
    }
    let localVarHttpContext = options && options.context;
    if (localVarHttpContext === void 0) {
      localVarHttpContext = new HttpContext();
    }
    let localVarTransferCache = options && options.transferCache;
    if (localVarTransferCache === void 0) {
      localVarTransferCache = true;
    }
    let responseType_ = "json";
    if (localVarHttpHeaderAcceptSelected) {
      if (localVarHttpHeaderAcceptSelected.startsWith("text")) {
        responseType_ = "text";
      } else if (this.configuration.isJsonMime(localVarHttpHeaderAcceptSelected)) {
        responseType_ = "json";
      } else {
        responseType_ = "blob";
      }
    }
    let localVarPath = `/accounts/distributors/${this.configuration.encodeParam({ name: "id", value: id, in: "path", style: "simple", explode: false, dataType: "string", dataFormat: void 0 })}/logo`;
    return this.httpClient.request("delete", `${this.configuration.basePath}${localVarPath}`, {
      context: localVarHttpContext,
      params: localVarQueryParameters,
      responseType: responseType_,
      withCredentials: this.configuration.withCredentials,
      headers: localVarHeaders,
      observe,
      transferCache: localVarTransferCache,
      reportProgress
    });
  }
  deleteOTPMethod(id, method, observe = "body", reportProgress = false, options) {
    if (id === null || id === void 0) {
      throw new Error("Required parameter id was null or undefined when calling deleteOTPMethod.");
    }
    if (method === null || method === void 0) {
      throw new Error("Required parameter method was null or undefined when calling deleteOTPMethod.");
    }
    let localVarHeaders = this.defaultHeaders;
    let localVarCredential;
    localVarCredential = this.configuration.lookupCredential("access_token");
    if (localVarCredential) {
      localVarHeaders = localVarHeaders.set("x-access-token", localVarCredential);
    }
    let localVarHttpHeaderAcceptSelected = options && options.httpHeaderAccept;
    if (localVarHttpHeaderAcceptSelected === void 0) {
      const httpHeaderAccepts = [
        "application/json"
      ];
      localVarHttpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
    }
    if (localVarHttpHeaderAcceptSelected !== void 0) {
      localVarHeaders = localVarHeaders.set("Accept", localVarHttpHeaderAcceptSelected);
    }
    let localVarHttpContext = options && options.context;
    if (localVarHttpContext === void 0) {
      localVarHttpContext = new HttpContext();
    }
    let localVarTransferCache = options && options.transferCache;
    if (localVarTransferCache === void 0) {
      localVarTransferCache = true;
    }
    let responseType_ = "json";
    if (localVarHttpHeaderAcceptSelected) {
      if (localVarHttpHeaderAcceptSelected.startsWith("text")) {
        responseType_ = "text";
      } else if (this.configuration.isJsonMime(localVarHttpHeaderAcceptSelected)) {
        responseType_ = "json";
      } else {
        responseType_ = "blob";
      }
    }
    let localVarPath = `/accounts/users/${this.configuration.encodeParam({ name: "id", value: id, in: "path", style: "simple", explode: false, dataType: "string", dataFormat: void 0 })}/otp/${this.configuration.encodeParam({ name: "method", value: method, in: "path", style: "simple", explode: false, dataType: "string", dataFormat: void 0 })}`;
    return this.httpClient.request("delete", `${this.configuration.basePath}${localVarPath}`, {
      context: localVarHttpContext,
      responseType: responseType_,
      withCredentials: this.configuration.withCredentials,
      headers: localVarHeaders,
      observe,
      transferCache: localVarTransferCache,
      reportProgress
    });
  }
  deleteUserAvatar(id, observe = "body", reportProgress = false, options) {
    if (id === null || id === void 0) {
      throw new Error("Required parameter id was null or undefined when calling deleteUserAvatar.");
    }
    let localVarHeaders = this.defaultHeaders;
    let localVarCredential;
    localVarCredential = this.configuration.lookupCredential("access_token");
    if (localVarCredential) {
      localVarHeaders = localVarHeaders.set("x-access-token", localVarCredential);
    }
    let localVarHttpHeaderAcceptSelected = options && options.httpHeaderAccept;
    if (localVarHttpHeaderAcceptSelected === void 0) {
      const httpHeaderAccepts = [];
      localVarHttpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
    }
    if (localVarHttpHeaderAcceptSelected !== void 0) {
      localVarHeaders = localVarHeaders.set("Accept", localVarHttpHeaderAcceptSelected);
    }
    let localVarHttpContext = options && options.context;
    if (localVarHttpContext === void 0) {
      localVarHttpContext = new HttpContext();
    }
    let localVarTransferCache = options && options.transferCache;
    if (localVarTransferCache === void 0) {
      localVarTransferCache = true;
    }
    let responseType_ = "json";
    if (localVarHttpHeaderAcceptSelected) {
      if (localVarHttpHeaderAcceptSelected.startsWith("text")) {
        responseType_ = "text";
      } else if (this.configuration.isJsonMime(localVarHttpHeaderAcceptSelected)) {
        responseType_ = "json";
      } else {
        responseType_ = "blob";
      }
    }
    let localVarPath = `/accounts/users/${this.configuration.encodeParam({ name: "id", value: id, in: "path", style: "simple", explode: false, dataType: "string", dataFormat: void 0 })}/avatar`;
    return this.httpClient.request("delete", `${this.configuration.basePath}${localVarPath}`, {
      context: localVarHttpContext,
      responseType: responseType_,
      withCredentials: this.configuration.withCredentials,
      headers: localVarHeaders,
      observe,
      transferCache: localVarTransferCache,
      reportProgress
    });
  }
  deleteUserRole(id, observe = "body", reportProgress = false, options) {
    if (id === null || id === void 0) {
      throw new Error("Required parameter id was null or undefined when calling deleteUserRole.");
    }
    let localVarHeaders = this.defaultHeaders;
    let localVarCredential;
    localVarCredential = this.configuration.lookupCredential("access_token");
    if (localVarCredential) {
      localVarHeaders = localVarHeaders.set("x-access-token", localVarCredential);
    }
    let localVarHttpHeaderAcceptSelected = options && options.httpHeaderAccept;
    if (localVarHttpHeaderAcceptSelected === void 0) {
      const httpHeaderAccepts = [
        "application/json"
      ];
      localVarHttpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
    }
    if (localVarHttpHeaderAcceptSelected !== void 0) {
      localVarHeaders = localVarHeaders.set("Accept", localVarHttpHeaderAcceptSelected);
    }
    let localVarHttpContext = options && options.context;
    if (localVarHttpContext === void 0) {
      localVarHttpContext = new HttpContext();
    }
    let localVarTransferCache = options && options.transferCache;
    if (localVarTransferCache === void 0) {
      localVarTransferCache = true;
    }
    let responseType_ = "json";
    if (localVarHttpHeaderAcceptSelected) {
      if (localVarHttpHeaderAcceptSelected.startsWith("text")) {
        responseType_ = "text";
      } else if (this.configuration.isJsonMime(localVarHttpHeaderAcceptSelected)) {
        responseType_ = "json";
      } else {
        responseType_ = "blob";
      }
    }
    let localVarPath = `/accounts/userroles/${this.configuration.encodeParam({ name: "id", value: id, in: "path", style: "simple", explode: false, dataType: "string", dataFormat: void 0 })}`;
    return this.httpClient.request("delete", `${this.configuration.basePath}${localVarPath}`, {
      context: localVarHttpContext,
      responseType: responseType_,
      withCredentials: this.configuration.withCredentials,
      headers: localVarHeaders,
      observe,
      transferCache: localVarTransferCache,
      reportProgress
    });
  }
  deleteVendorLogo(id, size, observe = "body", reportProgress = false, options) {
    if (id === null || id === void 0) {
      throw new Error("Required parameter id was null or undefined when calling deleteVendorLogo.");
    }
    if (size === null || size === void 0) {
      throw new Error("Required parameter size was null or undefined when calling deleteVendorLogo.");
    }
    let localVarQueryParameters = new HttpParams({ encoder: this.encoder });
    if (size !== void 0 && size !== null) {
      localVarQueryParameters = this.addToHttpParams(localVarQueryParameters, size, "size");
    }
    let localVarHeaders = this.defaultHeaders;
    let localVarCredential;
    localVarCredential = this.configuration.lookupCredential("access_token");
    if (localVarCredential) {
      localVarHeaders = localVarHeaders.set("x-access-token", localVarCredential);
    }
    let localVarHttpHeaderAcceptSelected = options && options.httpHeaderAccept;
    if (localVarHttpHeaderAcceptSelected === void 0) {
      const httpHeaderAccepts = [];
      localVarHttpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
    }
    if (localVarHttpHeaderAcceptSelected !== void 0) {
      localVarHeaders = localVarHeaders.set("Accept", localVarHttpHeaderAcceptSelected);
    }
    let localVarHttpContext = options && options.context;
    if (localVarHttpContext === void 0) {
      localVarHttpContext = new HttpContext();
    }
    let localVarTransferCache = options && options.transferCache;
    if (localVarTransferCache === void 0) {
      localVarTransferCache = true;
    }
    let responseType_ = "json";
    if (localVarHttpHeaderAcceptSelected) {
      if (localVarHttpHeaderAcceptSelected.startsWith("text")) {
        responseType_ = "text";
      } else if (this.configuration.isJsonMime(localVarHttpHeaderAcceptSelected)) {
        responseType_ = "json";
      } else {
        responseType_ = "blob";
      }
    }
    let localVarPath = `/accounts/vendors/${this.configuration.encodeParam({ name: "id", value: id, in: "path", style: "simple", explode: false, dataType: "string", dataFormat: void 0 })}/logo`;
    return this.httpClient.request("delete", `${this.configuration.basePath}${localVarPath}`, {
      context: localVarHttpContext,
      params: localVarQueryParameters,
      responseType: responseType_,
      withCredentials: this.configuration.withCredentials,
      headers: localVarHeaders,
      observe,
      transferCache: localVarTransferCache,
      reportProgress
    });
  }
  getClient(id, observe = "body", reportProgress = false, options) {
    if (id === null || id === void 0) {
      throw new Error("Required parameter id was null or undefined when calling getClient.");
    }
    let localVarHeaders = this.defaultHeaders;
    let localVarCredential;
    localVarCredential = this.configuration.lookupCredential("access_token");
    if (localVarCredential) {
      localVarHeaders = localVarHeaders.set("x-access-token", localVarCredential);
    }
    let localVarHttpHeaderAcceptSelected = options && options.httpHeaderAccept;
    if (localVarHttpHeaderAcceptSelected === void 0) {
      const httpHeaderAccepts = [
        "application/json"
      ];
      localVarHttpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
    }
    if (localVarHttpHeaderAcceptSelected !== void 0) {
      localVarHeaders = localVarHeaders.set("Accept", localVarHttpHeaderAcceptSelected);
    }
    let localVarHttpContext = options && options.context;
    if (localVarHttpContext === void 0) {
      localVarHttpContext = new HttpContext();
    }
    let localVarTransferCache = options && options.transferCache;
    if (localVarTransferCache === void 0) {
      localVarTransferCache = true;
    }
    let responseType_ = "json";
    if (localVarHttpHeaderAcceptSelected) {
      if (localVarHttpHeaderAcceptSelected.startsWith("text")) {
        responseType_ = "text";
      } else if (this.configuration.isJsonMime(localVarHttpHeaderAcceptSelected)) {
        responseType_ = "json";
      } else {
        responseType_ = "blob";
      }
    }
    let localVarPath = `/accounts/clients/${this.configuration.encodeParam({ name: "id", value: id, in: "path", style: "simple", explode: false, dataType: "string", dataFormat: void 0 })}`;
    return this.httpClient.request("get", `${this.configuration.basePath}${localVarPath}`, {
      context: localVarHttpContext,
      responseType: responseType_,
      withCredentials: this.configuration.withCredentials,
      headers: localVarHeaders,
      observe,
      transferCache: localVarTransferCache,
      reportProgress
    });
  }
  getClientByPin(pin, observe = "body", reportProgress = false, options) {
    if (pin === null || pin === void 0) {
      throw new Error("Required parameter pin was null or undefined when calling getClientByPin.");
    }
    let localVarHeaders = this.defaultHeaders;
    let localVarCredential;
    localVarCredential = this.configuration.lookupCredential("access_token");
    if (localVarCredential) {
      localVarHeaders = localVarHeaders.set("x-access-token", localVarCredential);
    }
    let localVarHttpHeaderAcceptSelected = options && options.httpHeaderAccept;
    if (localVarHttpHeaderAcceptSelected === void 0) {
      const httpHeaderAccepts = [
        "application/json"
      ];
      localVarHttpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
    }
    if (localVarHttpHeaderAcceptSelected !== void 0) {
      localVarHeaders = localVarHeaders.set("Accept", localVarHttpHeaderAcceptSelected);
    }
    let localVarHttpContext = options && options.context;
    if (localVarHttpContext === void 0) {
      localVarHttpContext = new HttpContext();
    }
    let localVarTransferCache = options && options.transferCache;
    if (localVarTransferCache === void 0) {
      localVarTransferCache = true;
    }
    let responseType_ = "json";
    if (localVarHttpHeaderAcceptSelected) {
      if (localVarHttpHeaderAcceptSelected.startsWith("text")) {
        responseType_ = "text";
      } else if (this.configuration.isJsonMime(localVarHttpHeaderAcceptSelected)) {
        responseType_ = "json";
      } else {
        responseType_ = "blob";
      }
    }
    let localVarPath = `/accounts/clients/pin/${this.configuration.encodeParam({ name: "pin", value: pin, in: "path", style: "simple", explode: false, dataType: "string", dataFormat: void 0 })}`;
    return this.httpClient.request("get", `${this.configuration.basePath}${localVarPath}`, {
      context: localVarHttpContext,
      responseType: responseType_,
      withCredentials: this.configuration.withCredentials,
      headers: localVarHeaders,
      observe,
      transferCache: localVarTransferCache,
      reportProgress
    });
  }
  getClientLogo(id, size, observe = "body", reportProgress = false, options) {
    if (id === null || id === void 0) {
      throw new Error("Required parameter id was null or undefined when calling getClientLogo.");
    }
    let localVarQueryParameters = new HttpParams({ encoder: this.encoder });
    if (size !== void 0 && size !== null) {
      localVarQueryParameters = this.addToHttpParams(localVarQueryParameters, size, "size");
    }
    let localVarHeaders = this.defaultHeaders;
    let localVarHttpHeaderAcceptSelected = options && options.httpHeaderAccept;
    if (localVarHttpHeaderAcceptSelected === void 0) {
      const httpHeaderAccepts = [
        "application/json"
      ];
      localVarHttpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
    }
    if (localVarHttpHeaderAcceptSelected !== void 0) {
      localVarHeaders = localVarHeaders.set("Accept", localVarHttpHeaderAcceptSelected);
    }
    let localVarHttpContext = options && options.context;
    if (localVarHttpContext === void 0) {
      localVarHttpContext = new HttpContext();
    }
    let localVarTransferCache = options && options.transferCache;
    if (localVarTransferCache === void 0) {
      localVarTransferCache = true;
    }
    let responseType_ = "json";
    if (localVarHttpHeaderAcceptSelected) {
      if (localVarHttpHeaderAcceptSelected.startsWith("text")) {
        responseType_ = "text";
      } else if (this.configuration.isJsonMime(localVarHttpHeaderAcceptSelected)) {
        responseType_ = "json";
      } else {
        responseType_ = "blob";
      }
    }
    let localVarPath = `/accounts/clients/${this.configuration.encodeParam({ name: "id", value: id, in: "path", style: "simple", explode: false, dataType: "string", dataFormat: void 0 })}/logo`;
    return this.httpClient.request("get", `${this.configuration.basePath}${localVarPath}`, {
      context: localVarHttpContext,
      params: localVarQueryParameters,
      responseType: responseType_,
      withCredentials: this.configuration.withCredentials,
      headers: localVarHeaders,
      observe,
      transferCache: localVarTransferCache,
      reportProgress
    });
  }
  getCompany(id, observe = "body", reportProgress = false, options) {
    if (id === null || id === void 0) {
      throw new Error("Required parameter id was null or undefined when calling getCompany.");
    }
    let localVarHeaders = this.defaultHeaders;
    let localVarCredential;
    localVarCredential = this.configuration.lookupCredential("access_token");
    if (localVarCredential) {
      localVarHeaders = localVarHeaders.set("x-access-token", localVarCredential);
    }
    let localVarHttpHeaderAcceptSelected = options && options.httpHeaderAccept;
    if (localVarHttpHeaderAcceptSelected === void 0) {
      const httpHeaderAccepts = [
        "application/json"
      ];
      localVarHttpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
    }
    if (localVarHttpHeaderAcceptSelected !== void 0) {
      localVarHeaders = localVarHeaders.set("Accept", localVarHttpHeaderAcceptSelected);
    }
    let localVarHttpContext = options && options.context;
    if (localVarHttpContext === void 0) {
      localVarHttpContext = new HttpContext();
    }
    let localVarTransferCache = options && options.transferCache;
    if (localVarTransferCache === void 0) {
      localVarTransferCache = true;
    }
    let responseType_ = "json";
    if (localVarHttpHeaderAcceptSelected) {
      if (localVarHttpHeaderAcceptSelected.startsWith("text")) {
        responseType_ = "text";
      } else if (this.configuration.isJsonMime(localVarHttpHeaderAcceptSelected)) {
        responseType_ = "json";
      } else {
        responseType_ = "blob";
      }
    }
    let localVarPath = `/accounts/companies/${this.configuration.encodeParam({ name: "id", value: id, in: "path", style: "simple", explode: false, dataType: "string", dataFormat: void 0 })}`;
    return this.httpClient.request("get", `${this.configuration.basePath}${localVarPath}`, {
      context: localVarHttpContext,
      responseType: responseType_,
      withCredentials: this.configuration.withCredentials,
      headers: localVarHeaders,
      observe,
      transferCache: localVarTransferCache,
      reportProgress
    });
  }
  getCompanyGroup(id, observe = "body", reportProgress = false, options) {
    if (id === null || id === void 0) {
      throw new Error("Required parameter id was null or undefined when calling getCompanyGroup.");
    }
    let localVarHeaders = this.defaultHeaders;
    let localVarCredential;
    localVarCredential = this.configuration.lookupCredential("access_token");
    if (localVarCredential) {
      localVarHeaders = localVarHeaders.set("x-access-token", localVarCredential);
    }
    let localVarHttpHeaderAcceptSelected = options && options.httpHeaderAccept;
    if (localVarHttpHeaderAcceptSelected === void 0) {
      const httpHeaderAccepts = [
        "application/json"
      ];
      localVarHttpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
    }
    if (localVarHttpHeaderAcceptSelected !== void 0) {
      localVarHeaders = localVarHeaders.set("Accept", localVarHttpHeaderAcceptSelected);
    }
    let localVarHttpContext = options && options.context;
    if (localVarHttpContext === void 0) {
      localVarHttpContext = new HttpContext();
    }
    let localVarTransferCache = options && options.transferCache;
    if (localVarTransferCache === void 0) {
      localVarTransferCache = true;
    }
    let responseType_ = "json";
    if (localVarHttpHeaderAcceptSelected) {
      if (localVarHttpHeaderAcceptSelected.startsWith("text")) {
        responseType_ = "text";
      } else if (this.configuration.isJsonMime(localVarHttpHeaderAcceptSelected)) {
        responseType_ = "json";
      } else {
        responseType_ = "blob";
      }
    }
    let localVarPath = `/accounts/companygroups/${this.configuration.encodeParam({ name: "id", value: id, in: "path", style: "simple", explode: false, dataType: "string", dataFormat: void 0 })}`;
    return this.httpClient.request("get", `${this.configuration.basePath}${localVarPath}`, {
      context: localVarHttpContext,
      responseType: responseType_,
      withCredentials: this.configuration.withCredentials,
      headers: localVarHeaders,
      observe,
      transferCache: localVarTransferCache,
      reportProgress
    });
  }
  getCompanyLogo(id, size, recurse, observe = "body", reportProgress = false, options) {
    if (id === null || id === void 0) {
      throw new Error("Required parameter id was null or undefined when calling getCompanyLogo.");
    }
    if (size === null || size === void 0) {
      throw new Error("Required parameter size was null or undefined when calling getCompanyLogo.");
    }
    let localVarQueryParameters = new HttpParams({ encoder: this.encoder });
    if (size !== void 0 && size !== null) {
      localVarQueryParameters = this.addToHttpParams(localVarQueryParameters, size, "size");
    }
    if (recurse !== void 0 && recurse !== null) {
      localVarQueryParameters = this.addToHttpParams(localVarQueryParameters, recurse, "recurse");
    }
    let localVarHeaders = this.defaultHeaders;
    let localVarHttpHeaderAcceptSelected = options && options.httpHeaderAccept;
    if (localVarHttpHeaderAcceptSelected === void 0) {
      const httpHeaderAccepts = [
        "application/json"
      ];
      localVarHttpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
    }
    if (localVarHttpHeaderAcceptSelected !== void 0) {
      localVarHeaders = localVarHeaders.set("Accept", localVarHttpHeaderAcceptSelected);
    }
    let localVarHttpContext = options && options.context;
    if (localVarHttpContext === void 0) {
      localVarHttpContext = new HttpContext();
    }
    let localVarTransferCache = options && options.transferCache;
    if (localVarTransferCache === void 0) {
      localVarTransferCache = true;
    }
    let responseType_ = "json";
    if (localVarHttpHeaderAcceptSelected) {
      if (localVarHttpHeaderAcceptSelected.startsWith("text")) {
        responseType_ = "text";
      } else if (this.configuration.isJsonMime(localVarHttpHeaderAcceptSelected)) {
        responseType_ = "json";
      } else {
        responseType_ = "blob";
      }
    }
    let localVarPath = `/accounts/companies/${this.configuration.encodeParam({ name: "id", value: id, in: "path", style: "simple", explode: false, dataType: "string", dataFormat: void 0 })}/logo`;
    return this.httpClient.request("get", `${this.configuration.basePath}${localVarPath}`, {
      context: localVarHttpContext,
      params: localVarQueryParameters,
      responseType: responseType_,
      withCredentials: this.configuration.withCredentials,
      headers: localVarHeaders,
      observe,
      transferCache: localVarTransferCache,
      reportProgress
    });
  }
  getDistributor(id, observe = "body", reportProgress = false, options) {
    if (id === null || id === void 0) {
      throw new Error("Required parameter id was null or undefined when calling getDistributor.");
    }
    let localVarHeaders = this.defaultHeaders;
    let localVarCredential;
    localVarCredential = this.configuration.lookupCredential("access_token");
    if (localVarCredential) {
      localVarHeaders = localVarHeaders.set("x-access-token", localVarCredential);
    }
    let localVarHttpHeaderAcceptSelected = options && options.httpHeaderAccept;
    if (localVarHttpHeaderAcceptSelected === void 0) {
      const httpHeaderAccepts = [
        "application/json"
      ];
      localVarHttpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
    }
    if (localVarHttpHeaderAcceptSelected !== void 0) {
      localVarHeaders = localVarHeaders.set("Accept", localVarHttpHeaderAcceptSelected);
    }
    let localVarHttpContext = options && options.context;
    if (localVarHttpContext === void 0) {
      localVarHttpContext = new HttpContext();
    }
    let localVarTransferCache = options && options.transferCache;
    if (localVarTransferCache === void 0) {
      localVarTransferCache = true;
    }
    let responseType_ = "json";
    if (localVarHttpHeaderAcceptSelected) {
      if (localVarHttpHeaderAcceptSelected.startsWith("text")) {
        responseType_ = "text";
      } else if (this.configuration.isJsonMime(localVarHttpHeaderAcceptSelected)) {
        responseType_ = "json";
      } else {
        responseType_ = "blob";
      }
    }
    let localVarPath = `/accounts/distributors/${this.configuration.encodeParam({ name: "id", value: id, in: "path", style: "simple", explode: false, dataType: "string", dataFormat: void 0 })}`;
    return this.httpClient.request("get", `${this.configuration.basePath}${localVarPath}`, {
      context: localVarHttpContext,
      responseType: responseType_,
      withCredentials: this.configuration.withCredentials,
      headers: localVarHeaders,
      observe,
      transferCache: localVarTransferCache,
      reportProgress
    });
  }
  getDistributorLogo(id, size, observe = "body", reportProgress = false, options) {
    if (id === null || id === void 0) {
      throw new Error("Required parameter id was null or undefined when calling getDistributorLogo.");
    }
    let localVarQueryParameters = new HttpParams({ encoder: this.encoder });
    if (size !== void 0 && size !== null) {
      localVarQueryParameters = this.addToHttpParams(localVarQueryParameters, size, "size");
    }
    let localVarHeaders = this.defaultHeaders;
    let localVarHttpHeaderAcceptSelected = options && options.httpHeaderAccept;
    if (localVarHttpHeaderAcceptSelected === void 0) {
      const httpHeaderAccepts = [
        "application/json"
      ];
      localVarHttpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
    }
    if (localVarHttpHeaderAcceptSelected !== void 0) {
      localVarHeaders = localVarHeaders.set("Accept", localVarHttpHeaderAcceptSelected);
    }
    let localVarHttpContext = options && options.context;
    if (localVarHttpContext === void 0) {
      localVarHttpContext = new HttpContext();
    }
    let localVarTransferCache = options && options.transferCache;
    if (localVarTransferCache === void 0) {
      localVarTransferCache = true;
    }
    let responseType_ = "json";
    if (localVarHttpHeaderAcceptSelected) {
      if (localVarHttpHeaderAcceptSelected.startsWith("text")) {
        responseType_ = "text";
      } else if (this.configuration.isJsonMime(localVarHttpHeaderAcceptSelected)) {
        responseType_ = "json";
      } else {
        responseType_ = "blob";
      }
    }
    let localVarPath = `/accounts/distributors/${this.configuration.encodeParam({ name: "id", value: id, in: "path", style: "simple", explode: false, dataType: "string", dataFormat: void 0 })}/logo`;
    return this.httpClient.request("get", `${this.configuration.basePath}${localVarPath}`, {
      context: localVarHttpContext,
      params: localVarQueryParameters,
      responseType: responseType_,
      withCredentials: this.configuration.withCredentials,
      headers: localVarHeaders,
      observe,
      transferCache: localVarTransferCache,
      reportProgress
    });
  }
  getUser(id, observe = "body", reportProgress = false, options) {
    if (id === null || id === void 0) {
      throw new Error("Required parameter id was null or undefined when calling getUser.");
    }
    let localVarHeaders = this.defaultHeaders;
    let localVarCredential;
    localVarCredential = this.configuration.lookupCredential("access_token");
    if (localVarCredential) {
      localVarHeaders = localVarHeaders.set("x-access-token", localVarCredential);
    }
    let localVarHttpHeaderAcceptSelected = options && options.httpHeaderAccept;
    if (localVarHttpHeaderAcceptSelected === void 0) {
      const httpHeaderAccepts = [
        "application/json"
      ];
      localVarHttpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
    }
    if (localVarHttpHeaderAcceptSelected !== void 0) {
      localVarHeaders = localVarHeaders.set("Accept", localVarHttpHeaderAcceptSelected);
    }
    let localVarHttpContext = options && options.context;
    if (localVarHttpContext === void 0) {
      localVarHttpContext = new HttpContext();
    }
    let localVarTransferCache = options && options.transferCache;
    if (localVarTransferCache === void 0) {
      localVarTransferCache = true;
    }
    let responseType_ = "json";
    if (localVarHttpHeaderAcceptSelected) {
      if (localVarHttpHeaderAcceptSelected.startsWith("text")) {
        responseType_ = "text";
      } else if (this.configuration.isJsonMime(localVarHttpHeaderAcceptSelected)) {
        responseType_ = "json";
      } else {
        responseType_ = "blob";
      }
    }
    let localVarPath = `/accounts/users/${this.configuration.encodeParam({ name: "id", value: id, in: "path", style: "simple", explode: false, dataType: "string", dataFormat: void 0 })}`;
    return this.httpClient.request("get", `${this.configuration.basePath}${localVarPath}`, {
      context: localVarHttpContext,
      responseType: responseType_,
      withCredentials: this.configuration.withCredentials,
      headers: localVarHeaders,
      observe,
      transferCache: localVarTransferCache,
      reportProgress
    });
  }
  getUserAvatar(id, observe = "body", reportProgress = false, options) {
    if (id === null || id === void 0) {
      throw new Error("Required parameter id was null or undefined when calling getUserAvatar.");
    }
    let localVarHeaders = this.defaultHeaders;
    let localVarHttpHeaderAcceptSelected = options && options.httpHeaderAccept;
    if (localVarHttpHeaderAcceptSelected === void 0) {
      const httpHeaderAccepts = [
        "application/json"
      ];
      localVarHttpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
    }
    if (localVarHttpHeaderAcceptSelected !== void 0) {
      localVarHeaders = localVarHeaders.set("Accept", localVarHttpHeaderAcceptSelected);
    }
    let localVarHttpContext = options && options.context;
    if (localVarHttpContext === void 0) {
      localVarHttpContext = new HttpContext();
    }
    let localVarTransferCache = options && options.transferCache;
    if (localVarTransferCache === void 0) {
      localVarTransferCache = true;
    }
    let responseType_ = "json";
    if (localVarHttpHeaderAcceptSelected) {
      if (localVarHttpHeaderAcceptSelected.startsWith("text")) {
        responseType_ = "text";
      } else if (this.configuration.isJsonMime(localVarHttpHeaderAcceptSelected)) {
        responseType_ = "json";
      } else {
        responseType_ = "blob";
      }
    }
    let localVarPath = `/accounts/users/${this.configuration.encodeParam({ name: "id", value: id, in: "path", style: "simple", explode: false, dataType: "string", dataFormat: void 0 })}/avatar`;
    return this.httpClient.request("get", `${this.configuration.basePath}${localVarPath}`, {
      context: localVarHttpContext,
      responseType: responseType_,
      withCredentials: this.configuration.withCredentials,
      headers: localVarHeaders,
      observe,
      transferCache: localVarTransferCache,
      reportProgress
    });
  }
  getUserPolicies(id, observe = "body", reportProgress = false, options) {
    if (id === null || id === void 0) {
      throw new Error("Required parameter id was null or undefined when calling getUserPolicies.");
    }
    let localVarHeaders = this.defaultHeaders;
    let localVarCredential;
    localVarCredential = this.configuration.lookupCredential("access_token");
    if (localVarCredential) {
      localVarHeaders = localVarHeaders.set("x-access-token", localVarCredential);
    }
    let localVarHttpHeaderAcceptSelected = options && options.httpHeaderAccept;
    if (localVarHttpHeaderAcceptSelected === void 0) {
      const httpHeaderAccepts = [
        "application/json"
      ];
      localVarHttpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
    }
    if (localVarHttpHeaderAcceptSelected !== void 0) {
      localVarHeaders = localVarHeaders.set("Accept", localVarHttpHeaderAcceptSelected);
    }
    let localVarHttpContext = options && options.context;
    if (localVarHttpContext === void 0) {
      localVarHttpContext = new HttpContext();
    }
    let localVarTransferCache = options && options.transferCache;
    if (localVarTransferCache === void 0) {
      localVarTransferCache = true;
    }
    let responseType_ = "json";
    if (localVarHttpHeaderAcceptSelected) {
      if (localVarHttpHeaderAcceptSelected.startsWith("text")) {
        responseType_ = "text";
      } else if (this.configuration.isJsonMime(localVarHttpHeaderAcceptSelected)) {
        responseType_ = "json";
      } else {
        responseType_ = "blob";
      }
    }
    let localVarPath = `/accounts/users/${this.configuration.encodeParam({ name: "id", value: id, in: "path", style: "simple", explode: false, dataType: "string", dataFormat: void 0 })}/policies`;
    return this.httpClient.request("get", `${this.configuration.basePath}${localVarPath}`, {
      context: localVarHttpContext,
      responseType: responseType_,
      withCredentials: this.configuration.withCredentials,
      headers: localVarHeaders,
      observe,
      transferCache: localVarTransferCache,
      reportProgress
    });
  }
  getUserRole(id, observe = "body", reportProgress = false, options) {
    if (id === null || id === void 0) {
      throw new Error("Required parameter id was null or undefined when calling getUserRole.");
    }
    let localVarHeaders = this.defaultHeaders;
    let localVarCredential;
    localVarCredential = this.configuration.lookupCredential("access_token");
    if (localVarCredential) {
      localVarHeaders = localVarHeaders.set("x-access-token", localVarCredential);
    }
    let localVarHttpHeaderAcceptSelected = options && options.httpHeaderAccept;
    if (localVarHttpHeaderAcceptSelected === void 0) {
      const httpHeaderAccepts = [
        "application/json"
      ];
      localVarHttpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
    }
    if (localVarHttpHeaderAcceptSelected !== void 0) {
      localVarHeaders = localVarHeaders.set("Accept", localVarHttpHeaderAcceptSelected);
    }
    let localVarHttpContext = options && options.context;
    if (localVarHttpContext === void 0) {
      localVarHttpContext = new HttpContext();
    }
    let localVarTransferCache = options && options.transferCache;
    if (localVarTransferCache === void 0) {
      localVarTransferCache = true;
    }
    let responseType_ = "json";
    if (localVarHttpHeaderAcceptSelected) {
      if (localVarHttpHeaderAcceptSelected.startsWith("text")) {
        responseType_ = "text";
      } else if (this.configuration.isJsonMime(localVarHttpHeaderAcceptSelected)) {
        responseType_ = "json";
      } else {
        responseType_ = "blob";
      }
    }
    let localVarPath = `/accounts/userroles/${this.configuration.encodeParam({ name: "id", value: id, in: "path", style: "simple", explode: false, dataType: "string", dataFormat: void 0 })}`;
    return this.httpClient.request("get", `${this.configuration.basePath}${localVarPath}`, {
      context: localVarHttpContext,
      responseType: responseType_,
      withCredentials: this.configuration.withCredentials,
      headers: localVarHeaders,
      observe,
      transferCache: localVarTransferCache,
      reportProgress
    });
  }
  getVendor(id, observe = "body", reportProgress = false, options) {
    if (id === null || id === void 0) {
      throw new Error("Required parameter id was null or undefined when calling getVendor.");
    }
    let localVarHeaders = this.defaultHeaders;
    let localVarCredential;
    localVarCredential = this.configuration.lookupCredential("access_token");
    if (localVarCredential) {
      localVarHeaders = localVarHeaders.set("x-access-token", localVarCredential);
    }
    let localVarHttpHeaderAcceptSelected = options && options.httpHeaderAccept;
    if (localVarHttpHeaderAcceptSelected === void 0) {
      const httpHeaderAccepts = [
        "application/json"
      ];
      localVarHttpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
    }
    if (localVarHttpHeaderAcceptSelected !== void 0) {
      localVarHeaders = localVarHeaders.set("Accept", localVarHttpHeaderAcceptSelected);
    }
    let localVarHttpContext = options && options.context;
    if (localVarHttpContext === void 0) {
      localVarHttpContext = new HttpContext();
    }
    let localVarTransferCache = options && options.transferCache;
    if (localVarTransferCache === void 0) {
      localVarTransferCache = true;
    }
    let responseType_ = "json";
    if (localVarHttpHeaderAcceptSelected) {
      if (localVarHttpHeaderAcceptSelected.startsWith("text")) {
        responseType_ = "text";
      } else if (this.configuration.isJsonMime(localVarHttpHeaderAcceptSelected)) {
        responseType_ = "json";
      } else {
        responseType_ = "blob";
      }
    }
    let localVarPath = `/accounts/vendors/${this.configuration.encodeParam({ name: "id", value: id, in: "path", style: "simple", explode: false, dataType: "string", dataFormat: void 0 })}`;
    return this.httpClient.request("get", `${this.configuration.basePath}${localVarPath}`, {
      context: localVarHttpContext,
      responseType: responseType_,
      withCredentials: this.configuration.withCredentials,
      headers: localVarHeaders,
      observe,
      transferCache: localVarTransferCache,
      reportProgress
    });
  }
  getVendorLogo(id, size, observe = "body", reportProgress = false, options) {
    if (id === null || id === void 0) {
      throw new Error("Required parameter id was null or undefined when calling getVendorLogo.");
    }
    let localVarQueryParameters = new HttpParams({ encoder: this.encoder });
    if (size !== void 0 && size !== null) {
      localVarQueryParameters = this.addToHttpParams(localVarQueryParameters, size, "size");
    }
    let localVarHeaders = this.defaultHeaders;
    let localVarHttpHeaderAcceptSelected = options && options.httpHeaderAccept;
    if (localVarHttpHeaderAcceptSelected === void 0) {
      const httpHeaderAccepts = [
        "application/json"
      ];
      localVarHttpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
    }
    if (localVarHttpHeaderAcceptSelected !== void 0) {
      localVarHeaders = localVarHeaders.set("Accept", localVarHttpHeaderAcceptSelected);
    }
    let localVarHttpContext = options && options.context;
    if (localVarHttpContext === void 0) {
      localVarHttpContext = new HttpContext();
    }
    let localVarTransferCache = options && options.transferCache;
    if (localVarTransferCache === void 0) {
      localVarTransferCache = true;
    }
    let responseType_ = "json";
    if (localVarHttpHeaderAcceptSelected) {
      if (localVarHttpHeaderAcceptSelected.startsWith("text")) {
        responseType_ = "text";
      } else if (this.configuration.isJsonMime(localVarHttpHeaderAcceptSelected)) {
        responseType_ = "json";
      } else {
        responseType_ = "blob";
      }
    }
    let localVarPath = `/accounts/vendors/${this.configuration.encodeParam({ name: "id", value: id, in: "path", style: "simple", explode: false, dataType: "string", dataFormat: void 0 })}/logo`;
    return this.httpClient.request("get", `${this.configuration.basePath}${localVarPath}`, {
      context: localVarHttpContext,
      params: localVarQueryParameters,
      responseType: responseType_,
      withCredentials: this.configuration.withCredentials,
      headers: localVarHeaders,
      observe,
      transferCache: localVarTransferCache,
      reportProgress
    });
  }
  listClients(owner, offset, limit, sort, filter, counts, observe = "body", reportProgress = false, options) {
    if (owner === null || owner === void 0) {
      throw new Error("Required parameter owner was null or undefined when calling listClients.");
    }
    let localVarQueryParameters = new HttpParams({ encoder: this.encoder });
    if (owner !== void 0 && owner !== null) {
      localVarQueryParameters = this.addToHttpParams(localVarQueryParameters, owner, "owner");
    }
    if (offset !== void 0 && offset !== null) {
      localVarQueryParameters = this.addToHttpParams(localVarQueryParameters, offset, "offset");
    }
    if (limit !== void 0 && limit !== null) {
      localVarQueryParameters = this.addToHttpParams(localVarQueryParameters, limit, "limit");
    }
    if (sort !== void 0 && sort !== null) {
      localVarQueryParameters = this.addToHttpParams(localVarQueryParameters, sort, "sort");
    }
    if (filter !== void 0 && filter !== null) {
      localVarQueryParameters = this.addToHttpParams(localVarQueryParameters, filter, "filter");
    }
    if (counts !== void 0 && counts !== null) {
      localVarQueryParameters = this.addToHttpParams(localVarQueryParameters, counts, "counts");
    }
    let localVarHeaders = this.defaultHeaders;
    let localVarCredential;
    localVarCredential = this.configuration.lookupCredential("access_token");
    if (localVarCredential) {
      localVarHeaders = localVarHeaders.set("x-access-token", localVarCredential);
    }
    let localVarHttpHeaderAcceptSelected = options && options.httpHeaderAccept;
    if (localVarHttpHeaderAcceptSelected === void 0) {
      const httpHeaderAccepts = [
        "application/json"
      ];
      localVarHttpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
    }
    if (localVarHttpHeaderAcceptSelected !== void 0) {
      localVarHeaders = localVarHeaders.set("Accept", localVarHttpHeaderAcceptSelected);
    }
    let localVarHttpContext = options && options.context;
    if (localVarHttpContext === void 0) {
      localVarHttpContext = new HttpContext();
    }
    let localVarTransferCache = options && options.transferCache;
    if (localVarTransferCache === void 0) {
      localVarTransferCache = true;
    }
    let responseType_ = "json";
    if (localVarHttpHeaderAcceptSelected) {
      if (localVarHttpHeaderAcceptSelected.startsWith("text")) {
        responseType_ = "text";
      } else if (this.configuration.isJsonMime(localVarHttpHeaderAcceptSelected)) {
        responseType_ = "json";
      } else {
        responseType_ = "blob";
      }
    }
    let localVarPath = `/accounts/clients`;
    return this.httpClient.request("get", `${this.configuration.basePath}${localVarPath}`, {
      context: localVarHttpContext,
      params: localVarQueryParameters,
      responseType: responseType_,
      withCredentials: this.configuration.withCredentials,
      headers: localVarHeaders,
      observe,
      transferCache: localVarTransferCache,
      reportProgress
    });
  }
  listCompanyGroups(owner, offset, limit, sort, filter, observe = "body", reportProgress = false, options) {
    if (owner === null || owner === void 0) {
      throw new Error("Required parameter owner was null or undefined when calling listCompanyGroups.");
    }
    let localVarQueryParameters = new HttpParams({ encoder: this.encoder });
    if (owner !== void 0 && owner !== null) {
      localVarQueryParameters = this.addToHttpParams(localVarQueryParameters, owner, "owner");
    }
    if (offset !== void 0 && offset !== null) {
      localVarQueryParameters = this.addToHttpParams(localVarQueryParameters, offset, "offset");
    }
    if (limit !== void 0 && limit !== null) {
      localVarQueryParameters = this.addToHttpParams(localVarQueryParameters, limit, "limit");
    }
    if (sort !== void 0 && sort !== null) {
      localVarQueryParameters = this.addToHttpParams(localVarQueryParameters, sort, "sort");
    }
    if (filter !== void 0 && filter !== null) {
      localVarQueryParameters = this.addToHttpParams(localVarQueryParameters, filter, "filter");
    }
    let localVarHeaders = this.defaultHeaders;
    let localVarCredential;
    localVarCredential = this.configuration.lookupCredential("access_token");
    if (localVarCredential) {
      localVarHeaders = localVarHeaders.set("x-access-token", localVarCredential);
    }
    let localVarHttpHeaderAcceptSelected = options && options.httpHeaderAccept;
    if (localVarHttpHeaderAcceptSelected === void 0) {
      const httpHeaderAccepts = [
        "application/json"
      ];
      localVarHttpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
    }
    if (localVarHttpHeaderAcceptSelected !== void 0) {
      localVarHeaders = localVarHeaders.set("Accept", localVarHttpHeaderAcceptSelected);
    }
    let localVarHttpContext = options && options.context;
    if (localVarHttpContext === void 0) {
      localVarHttpContext = new HttpContext();
    }
    let localVarTransferCache = options && options.transferCache;
    if (localVarTransferCache === void 0) {
      localVarTransferCache = true;
    }
    let responseType_ = "json";
    if (localVarHttpHeaderAcceptSelected) {
      if (localVarHttpHeaderAcceptSelected.startsWith("text")) {
        responseType_ = "text";
      } else if (this.configuration.isJsonMime(localVarHttpHeaderAcceptSelected)) {
        responseType_ = "json";
      } else {
        responseType_ = "blob";
      }
    }
    let localVarPath = `/accounts/companygroups`;
    return this.httpClient.request("get", `${this.configuration.basePath}${localVarPath}`, {
      context: localVarHttpContext,
      params: localVarQueryParameters,
      responseType: responseType_,
      withCredentials: this.configuration.withCredentials,
      headers: localVarHeaders,
      observe,
      transferCache: localVarTransferCache,
      reportProgress
    });
  }
  listDistributors(owner, offset, limit, sort, filter, counts, observe = "body", reportProgress = false, options) {
    if (owner === null || owner === void 0) {
      throw new Error("Required parameter owner was null or undefined when calling listDistributors.");
    }
    let localVarQueryParameters = new HttpParams({ encoder: this.encoder });
    if (owner !== void 0 && owner !== null) {
      localVarQueryParameters = this.addToHttpParams(localVarQueryParameters, owner, "owner");
    }
    if (offset !== void 0 && offset !== null) {
      localVarQueryParameters = this.addToHttpParams(localVarQueryParameters, offset, "offset");
    }
    if (limit !== void 0 && limit !== null) {
      localVarQueryParameters = this.addToHttpParams(localVarQueryParameters, limit, "limit");
    }
    if (sort !== void 0 && sort !== null) {
      localVarQueryParameters = this.addToHttpParams(localVarQueryParameters, sort, "sort");
    }
    if (filter !== void 0 && filter !== null) {
      localVarQueryParameters = this.addToHttpParams(localVarQueryParameters, filter, "filter");
    }
    if (counts !== void 0 && counts !== null) {
      localVarQueryParameters = this.addToHttpParams(localVarQueryParameters, counts, "counts");
    }
    let localVarHeaders = this.defaultHeaders;
    let localVarCredential;
    localVarCredential = this.configuration.lookupCredential("access_token");
    if (localVarCredential) {
      localVarHeaders = localVarHeaders.set("x-access-token", localVarCredential);
    }
    let localVarHttpHeaderAcceptSelected = options && options.httpHeaderAccept;
    if (localVarHttpHeaderAcceptSelected === void 0) {
      const httpHeaderAccepts = [
        "application/json"
      ];
      localVarHttpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
    }
    if (localVarHttpHeaderAcceptSelected !== void 0) {
      localVarHeaders = localVarHeaders.set("Accept", localVarHttpHeaderAcceptSelected);
    }
    let localVarHttpContext = options && options.context;
    if (localVarHttpContext === void 0) {
      localVarHttpContext = new HttpContext();
    }
    let localVarTransferCache = options && options.transferCache;
    if (localVarTransferCache === void 0) {
      localVarTransferCache = true;
    }
    let responseType_ = "json";
    if (localVarHttpHeaderAcceptSelected) {
      if (localVarHttpHeaderAcceptSelected.startsWith("text")) {
        responseType_ = "text";
      } else if (this.configuration.isJsonMime(localVarHttpHeaderAcceptSelected)) {
        responseType_ = "json";
      } else {
        responseType_ = "blob";
      }
    }
    let localVarPath = `/accounts/distributors`;
    return this.httpClient.request("get", `${this.configuration.basePath}${localVarPath}`, {
      context: localVarHttpContext,
      params: localVarQueryParameters,
      responseType: responseType_,
      withCredentials: this.configuration.withCredentials,
      headers: localVarHeaders,
      observe,
      transferCache: localVarTransferCache,
      reportProgress
    });
  }
  listUserRoles(owner, offset, limit, sort, filter, observe = "body", reportProgress = false, options) {
    if (owner === null || owner === void 0) {
      throw new Error("Required parameter owner was null or undefined when calling listUserRoles.");
    }
    let localVarQueryParameters = new HttpParams({ encoder: this.encoder });
    if (owner !== void 0 && owner !== null) {
      localVarQueryParameters = this.addToHttpParams(localVarQueryParameters, owner, "owner");
    }
    if (offset !== void 0 && offset !== null) {
      localVarQueryParameters = this.addToHttpParams(localVarQueryParameters, offset, "offset");
    }
    if (limit !== void 0 && limit !== null) {
      localVarQueryParameters = this.addToHttpParams(localVarQueryParameters, limit, "limit");
    }
    if (sort !== void 0 && sort !== null) {
      localVarQueryParameters = this.addToHttpParams(localVarQueryParameters, sort, "sort");
    }
    if (filter !== void 0 && filter !== null) {
      localVarQueryParameters = this.addToHttpParams(localVarQueryParameters, filter, "filter");
    }
    let localVarHeaders = this.defaultHeaders;
    let localVarCredential;
    localVarCredential = this.configuration.lookupCredential("access_token");
    if (localVarCredential) {
      localVarHeaders = localVarHeaders.set("x-access-token", localVarCredential);
    }
    let localVarHttpHeaderAcceptSelected = options && options.httpHeaderAccept;
    if (localVarHttpHeaderAcceptSelected === void 0) {
      const httpHeaderAccepts = [
        "application/json"
      ];
      localVarHttpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
    }
    if (localVarHttpHeaderAcceptSelected !== void 0) {
      localVarHeaders = localVarHeaders.set("Accept", localVarHttpHeaderAcceptSelected);
    }
    let localVarHttpContext = options && options.context;
    if (localVarHttpContext === void 0) {
      localVarHttpContext = new HttpContext();
    }
    let localVarTransferCache = options && options.transferCache;
    if (localVarTransferCache === void 0) {
      localVarTransferCache = true;
    }
    let responseType_ = "json";
    if (localVarHttpHeaderAcceptSelected) {
      if (localVarHttpHeaderAcceptSelected.startsWith("text")) {
        responseType_ = "text";
      } else if (this.configuration.isJsonMime(localVarHttpHeaderAcceptSelected)) {
        responseType_ = "json";
      } else {
        responseType_ = "blob";
      }
    }
    let localVarPath = `/accounts/userroles`;
    return this.httpClient.request("get", `${this.configuration.basePath}${localVarPath}`, {
      context: localVarHttpContext,
      params: localVarQueryParameters,
      responseType: responseType_,
      withCredentials: this.configuration.withCredentials,
      headers: localVarHeaders,
      observe,
      transferCache: localVarTransferCache,
      reportProgress
    });
  }
  listUsers(owner, offset, limit, sort, filter, observe = "body", reportProgress = false, options) {
    if (owner === null || owner === void 0) {
      throw new Error("Required parameter owner was null or undefined when calling listUsers.");
    }
    let localVarQueryParameters = new HttpParams({ encoder: this.encoder });
    if (owner !== void 0 && owner !== null) {
      localVarQueryParameters = this.addToHttpParams(localVarQueryParameters, owner, "owner");
    }
    if (offset !== void 0 && offset !== null) {
      localVarQueryParameters = this.addToHttpParams(localVarQueryParameters, offset, "offset");
    }
    if (limit !== void 0 && limit !== null) {
      localVarQueryParameters = this.addToHttpParams(localVarQueryParameters, limit, "limit");
    }
    if (sort !== void 0 && sort !== null) {
      localVarQueryParameters = this.addToHttpParams(localVarQueryParameters, sort, "sort");
    }
    if (filter !== void 0 && filter !== null) {
      localVarQueryParameters = this.addToHttpParams(localVarQueryParameters, filter, "filter");
    }
    let localVarHeaders = this.defaultHeaders;
    let localVarCredential;
    localVarCredential = this.configuration.lookupCredential("access_token");
    if (localVarCredential) {
      localVarHeaders = localVarHeaders.set("x-access-token", localVarCredential);
    }
    let localVarHttpHeaderAcceptSelected = options && options.httpHeaderAccept;
    if (localVarHttpHeaderAcceptSelected === void 0) {
      const httpHeaderAccepts = [
        "application/json"
      ];
      localVarHttpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
    }
    if (localVarHttpHeaderAcceptSelected !== void 0) {
      localVarHeaders = localVarHeaders.set("Accept", localVarHttpHeaderAcceptSelected);
    }
    let localVarHttpContext = options && options.context;
    if (localVarHttpContext === void 0) {
      localVarHttpContext = new HttpContext();
    }
    let localVarTransferCache = options && options.transferCache;
    if (localVarTransferCache === void 0) {
      localVarTransferCache = true;
    }
    let responseType_ = "json";
    if (localVarHttpHeaderAcceptSelected) {
      if (localVarHttpHeaderAcceptSelected.startsWith("text")) {
        responseType_ = "text";
      } else if (this.configuration.isJsonMime(localVarHttpHeaderAcceptSelected)) {
        responseType_ = "json";
      } else {
        responseType_ = "blob";
      }
    }
    let localVarPath = `/accounts/users`;
    return this.httpClient.request("get", `${this.configuration.basePath}${localVarPath}`, {
      context: localVarHttpContext,
      params: localVarQueryParameters,
      responseType: responseType_,
      withCredentials: this.configuration.withCredentials,
      headers: localVarHeaders,
      observe,
      transferCache: localVarTransferCache,
      reportProgress
    });
  }
  listVendors(owner, offset, limit, sort, filter, counts, observe = "body", reportProgress = false, options) {
    if (owner === null || owner === void 0) {
      throw new Error("Required parameter owner was null or undefined when calling listVendors.");
    }
    let localVarQueryParameters = new HttpParams({ encoder: this.encoder });
    if (owner !== void 0 && owner !== null) {
      localVarQueryParameters = this.addToHttpParams(localVarQueryParameters, owner, "owner");
    }
    if (offset !== void 0 && offset !== null) {
      localVarQueryParameters = this.addToHttpParams(localVarQueryParameters, offset, "offset");
    }
    if (limit !== void 0 && limit !== null) {
      localVarQueryParameters = this.addToHttpParams(localVarQueryParameters, limit, "limit");
    }
    if (sort !== void 0 && sort !== null) {
      localVarQueryParameters = this.addToHttpParams(localVarQueryParameters, sort, "sort");
    }
    if (filter !== void 0 && filter !== null) {
      localVarQueryParameters = this.addToHttpParams(localVarQueryParameters, filter, "filter");
    }
    if (counts !== void 0 && counts !== null) {
      localVarQueryParameters = this.addToHttpParams(localVarQueryParameters, counts, "counts");
    }
    let localVarHeaders = this.defaultHeaders;
    let localVarCredential;
    localVarCredential = this.configuration.lookupCredential("access_token");
    if (localVarCredential) {
      localVarHeaders = localVarHeaders.set("x-access-token", localVarCredential);
    }
    let localVarHttpHeaderAcceptSelected = options && options.httpHeaderAccept;
    if (localVarHttpHeaderAcceptSelected === void 0) {
      const httpHeaderAccepts = [
        "application/json"
      ];
      localVarHttpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
    }
    if (localVarHttpHeaderAcceptSelected !== void 0) {
      localVarHeaders = localVarHeaders.set("Accept", localVarHttpHeaderAcceptSelected);
    }
    let localVarHttpContext = options && options.context;
    if (localVarHttpContext === void 0) {
      localVarHttpContext = new HttpContext();
    }
    let localVarTransferCache = options && options.transferCache;
    if (localVarTransferCache === void 0) {
      localVarTransferCache = true;
    }
    let responseType_ = "json";
    if (localVarHttpHeaderAcceptSelected) {
      if (localVarHttpHeaderAcceptSelected.startsWith("text")) {
        responseType_ = "text";
      } else if (this.configuration.isJsonMime(localVarHttpHeaderAcceptSelected)) {
        responseType_ = "json";
      } else {
        responseType_ = "blob";
      }
    }
    let localVarPath = `/accounts/vendors`;
    return this.httpClient.request("get", `${this.configuration.basePath}${localVarPath}`, {
      context: localVarHttpContext,
      params: localVarQueryParameters,
      responseType: responseType_,
      withCredentials: this.configuration.withCredentials,
      headers: localVarHeaders,
      observe,
      transferCache: localVarTransferCache,
      reportProgress
    });
  }
  resetUser(id, request, observe = "body", reportProgress = false, options) {
    if (id === null || id === void 0) {
      throw new Error("Required parameter id was null or undefined when calling resetUser.");
    }
    if (request === null || request === void 0) {
      throw new Error("Required parameter request was null or undefined when calling resetUser.");
    }
    let localVarHeaders = this.defaultHeaders;
    let localVarCredential;
    localVarCredential = this.configuration.lookupCredential("access_token");
    if (localVarCredential) {
      localVarHeaders = localVarHeaders.set("x-access-token", localVarCredential);
    }
    let localVarHttpHeaderAcceptSelected = options && options.httpHeaderAccept;
    if (localVarHttpHeaderAcceptSelected === void 0) {
      const httpHeaderAccepts = [
        "application/json"
      ];
      localVarHttpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
    }
    if (localVarHttpHeaderAcceptSelected !== void 0) {
      localVarHeaders = localVarHeaders.set("Accept", localVarHttpHeaderAcceptSelected);
    }
    let localVarHttpContext = options && options.context;
    if (localVarHttpContext === void 0) {
      localVarHttpContext = new HttpContext();
    }
    let localVarTransferCache = options && options.transferCache;
    if (localVarTransferCache === void 0) {
      localVarTransferCache = true;
    }
    const consumes = [
      "application/json"
    ];
    const httpContentTypeSelected = this.configuration.selectHeaderContentType(consumes);
    if (httpContentTypeSelected !== void 0) {
      localVarHeaders = localVarHeaders.set("Content-Type", httpContentTypeSelected);
    }
    let responseType_ = "json";
    if (localVarHttpHeaderAcceptSelected) {
      if (localVarHttpHeaderAcceptSelected.startsWith("text")) {
        responseType_ = "text";
      } else if (this.configuration.isJsonMime(localVarHttpHeaderAcceptSelected)) {
        responseType_ = "json";
      } else {
        responseType_ = "blob";
      }
    }
    let localVarPath = `/accounts/users/${this.configuration.encodeParam({ name: "id", value: id, in: "path", style: "simple", explode: false, dataType: "string", dataFormat: void 0 })}/reset`;
    return this.httpClient.request("put", `${this.configuration.basePath}${localVarPath}`, {
      context: localVarHttpContext,
      body: request,
      responseType: responseType_,
      withCredentials: this.configuration.withCredentials,
      headers: localVarHeaders,
      observe,
      transferCache: localVarTransferCache,
      reportProgress
    });
  }
  updateClient(id, request, observe = "body", reportProgress = false, options) {
    if (id === null || id === void 0) {
      throw new Error("Required parameter id was null or undefined when calling updateClient.");
    }
    if (request === null || request === void 0) {
      throw new Error("Required parameter request was null or undefined when calling updateClient.");
    }
    let localVarHeaders = this.defaultHeaders;
    let localVarCredential;
    localVarCredential = this.configuration.lookupCredential("access_token");
    if (localVarCredential) {
      localVarHeaders = localVarHeaders.set("x-access-token", localVarCredential);
    }
    let localVarHttpHeaderAcceptSelected = options && options.httpHeaderAccept;
    if (localVarHttpHeaderAcceptSelected === void 0) {
      const httpHeaderAccepts = [
        "application/json"
      ];
      localVarHttpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
    }
    if (localVarHttpHeaderAcceptSelected !== void 0) {
      localVarHeaders = localVarHeaders.set("Accept", localVarHttpHeaderAcceptSelected);
    }
    let localVarHttpContext = options && options.context;
    if (localVarHttpContext === void 0) {
      localVarHttpContext = new HttpContext();
    }
    let localVarTransferCache = options && options.transferCache;
    if (localVarTransferCache === void 0) {
      localVarTransferCache = true;
    }
    const consumes = [
      "application/json"
    ];
    const httpContentTypeSelected = this.configuration.selectHeaderContentType(consumes);
    if (httpContentTypeSelected !== void 0) {
      localVarHeaders = localVarHeaders.set("Content-Type", httpContentTypeSelected);
    }
    let responseType_ = "json";
    if (localVarHttpHeaderAcceptSelected) {
      if (localVarHttpHeaderAcceptSelected.startsWith("text")) {
        responseType_ = "text";
      } else if (this.configuration.isJsonMime(localVarHttpHeaderAcceptSelected)) {
        responseType_ = "json";
      } else {
        responseType_ = "blob";
      }
    }
    let localVarPath = `/accounts/clients/${this.configuration.encodeParam({ name: "id", value: id, in: "path", style: "simple", explode: false, dataType: "string", dataFormat: void 0 })}`;
    return this.httpClient.request("put", `${this.configuration.basePath}${localVarPath}`, {
      context: localVarHttpContext,
      body: request,
      responseType: responseType_,
      withCredentials: this.configuration.withCredentials,
      headers: localVarHeaders,
      observe,
      transferCache: localVarTransferCache,
      reportProgress
    });
  }
  updateClientDetails(id, request, observe = "body", reportProgress = false, options) {
    if (id === null || id === void 0) {
      throw new Error("Required parameter id was null or undefined when calling updateClientDetails.");
    }
    if (request === null || request === void 0) {
      throw new Error("Required parameter request was null or undefined when calling updateClientDetails.");
    }
    let localVarHeaders = this.defaultHeaders;
    let localVarCredential;
    localVarCredential = this.configuration.lookupCredential("access_token");
    if (localVarCredential) {
      localVarHeaders = localVarHeaders.set("x-access-token", localVarCredential);
    }
    let localVarHttpHeaderAcceptSelected = options && options.httpHeaderAccept;
    if (localVarHttpHeaderAcceptSelected === void 0) {
      const httpHeaderAccepts = [
        "application/json"
      ];
      localVarHttpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
    }
    if (localVarHttpHeaderAcceptSelected !== void 0) {
      localVarHeaders = localVarHeaders.set("Accept", localVarHttpHeaderAcceptSelected);
    }
    let localVarHttpContext = options && options.context;
    if (localVarHttpContext === void 0) {
      localVarHttpContext = new HttpContext();
    }
    let localVarTransferCache = options && options.transferCache;
    if (localVarTransferCache === void 0) {
      localVarTransferCache = true;
    }
    const consumes = [
      "application/json"
    ];
    const httpContentTypeSelected = this.configuration.selectHeaderContentType(consumes);
    if (httpContentTypeSelected !== void 0) {
      localVarHeaders = localVarHeaders.set("Content-Type", httpContentTypeSelected);
    }
    let responseType_ = "json";
    if (localVarHttpHeaderAcceptSelected) {
      if (localVarHttpHeaderAcceptSelected.startsWith("text")) {
        responseType_ = "text";
      } else if (this.configuration.isJsonMime(localVarHttpHeaderAcceptSelected)) {
        responseType_ = "json";
      } else {
        responseType_ = "blob";
      }
    }
    let localVarPath = `/accounts/clients/${this.configuration.encodeParam({ name: "id", value: id, in: "path", style: "simple", explode: false, dataType: "string", dataFormat: void 0 })}/details`;
    return this.httpClient.request("put", `${this.configuration.basePath}${localVarPath}`, {
      context: localVarHttpContext,
      body: request,
      responseType: responseType_,
      withCredentials: this.configuration.withCredentials,
      headers: localVarHeaders,
      observe,
      transferCache: localVarTransferCache,
      reportProgress
    });
  }
  updateClientLogo(id, size, observe = "body", reportProgress = false, options) {
    if (id === null || id === void 0) {
      throw new Error("Required parameter id was null or undefined when calling updateClientLogo.");
    }
    if (size === null || size === void 0) {
      throw new Error("Required parameter size was null or undefined when calling updateClientLogo.");
    }
    let localVarQueryParameters = new HttpParams({ encoder: this.encoder });
    if (size !== void 0 && size !== null) {
      localVarQueryParameters = this.addToHttpParams(localVarQueryParameters, size, "size");
    }
    let localVarHeaders = this.defaultHeaders;
    let localVarCredential;
    localVarCredential = this.configuration.lookupCredential("access_token");
    if (localVarCredential) {
      localVarHeaders = localVarHeaders.set("x-access-token", localVarCredential);
    }
    let localVarHttpHeaderAcceptSelected = options && options.httpHeaderAccept;
    if (localVarHttpHeaderAcceptSelected === void 0) {
      const httpHeaderAccepts = [];
      localVarHttpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
    }
    if (localVarHttpHeaderAcceptSelected !== void 0) {
      localVarHeaders = localVarHeaders.set("Accept", localVarHttpHeaderAcceptSelected);
    }
    let localVarHttpContext = options && options.context;
    if (localVarHttpContext === void 0) {
      localVarHttpContext = new HttpContext();
    }
    let localVarTransferCache = options && options.transferCache;
    if (localVarTransferCache === void 0) {
      localVarTransferCache = true;
    }
    let responseType_ = "json";
    if (localVarHttpHeaderAcceptSelected) {
      if (localVarHttpHeaderAcceptSelected.startsWith("text")) {
        responseType_ = "text";
      } else if (this.configuration.isJsonMime(localVarHttpHeaderAcceptSelected)) {
        responseType_ = "json";
      } else {
        responseType_ = "blob";
      }
    }
    let localVarPath = `/accounts/clients/${this.configuration.encodeParam({ name: "id", value: id, in: "path", style: "simple", explode: false, dataType: "string", dataFormat: void 0 })}/logo`;
    return this.httpClient.request("post", `${this.configuration.basePath}${localVarPath}`, {
      context: localVarHttpContext,
      params: localVarQueryParameters,
      responseType: responseType_,
      withCredentials: this.configuration.withCredentials,
      headers: localVarHeaders,
      observe,
      transferCache: localVarTransferCache,
      reportProgress
    });
  }
  updateCompanyGroup(id, request, observe = "body", reportProgress = false, options) {
    if (id === null || id === void 0) {
      throw new Error("Required parameter id was null or undefined when calling updateCompanyGroup.");
    }
    if (request === null || request === void 0) {
      throw new Error("Required parameter request was null or undefined when calling updateCompanyGroup.");
    }
    let localVarHeaders = this.defaultHeaders;
    let localVarCredential;
    localVarCredential = this.configuration.lookupCredential("access_token");
    if (localVarCredential) {
      localVarHeaders = localVarHeaders.set("x-access-token", localVarCredential);
    }
    let localVarHttpHeaderAcceptSelected = options && options.httpHeaderAccept;
    if (localVarHttpHeaderAcceptSelected === void 0) {
      const httpHeaderAccepts = [
        "application/json"
      ];
      localVarHttpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
    }
    if (localVarHttpHeaderAcceptSelected !== void 0) {
      localVarHeaders = localVarHeaders.set("Accept", localVarHttpHeaderAcceptSelected);
    }
    let localVarHttpContext = options && options.context;
    if (localVarHttpContext === void 0) {
      localVarHttpContext = new HttpContext();
    }
    let localVarTransferCache = options && options.transferCache;
    if (localVarTransferCache === void 0) {
      localVarTransferCache = true;
    }
    const consumes = [
      "application/json"
    ];
    const httpContentTypeSelected = this.configuration.selectHeaderContentType(consumes);
    if (httpContentTypeSelected !== void 0) {
      localVarHeaders = localVarHeaders.set("Content-Type", httpContentTypeSelected);
    }
    let responseType_ = "json";
    if (localVarHttpHeaderAcceptSelected) {
      if (localVarHttpHeaderAcceptSelected.startsWith("text")) {
        responseType_ = "text";
      } else if (this.configuration.isJsonMime(localVarHttpHeaderAcceptSelected)) {
        responseType_ = "json";
      } else {
        responseType_ = "blob";
      }
    }
    let localVarPath = `/accounts/companygroups/${this.configuration.encodeParam({ name: "id", value: id, in: "path", style: "simple", explode: false, dataType: "string", dataFormat: void 0 })}`;
    return this.httpClient.request("put", `${this.configuration.basePath}${localVarPath}`, {
      context: localVarHttpContext,
      body: request,
      responseType: responseType_,
      withCredentials: this.configuration.withCredentials,
      headers: localVarHeaders,
      observe,
      transferCache: localVarTransferCache,
      reportProgress
    });
  }
  updateDistributor(id, request, observe = "body", reportProgress = false, options) {
    if (id === null || id === void 0) {
      throw new Error("Required parameter id was null or undefined when calling updateDistributor.");
    }
    if (request === null || request === void 0) {
      throw new Error("Required parameter request was null or undefined when calling updateDistributor.");
    }
    let localVarHeaders = this.defaultHeaders;
    let localVarCredential;
    localVarCredential = this.configuration.lookupCredential("access_token");
    if (localVarCredential) {
      localVarHeaders = localVarHeaders.set("x-access-token", localVarCredential);
    }
    let localVarHttpHeaderAcceptSelected = options && options.httpHeaderAccept;
    if (localVarHttpHeaderAcceptSelected === void 0) {
      const httpHeaderAccepts = [
        "application/json"
      ];
      localVarHttpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
    }
    if (localVarHttpHeaderAcceptSelected !== void 0) {
      localVarHeaders = localVarHeaders.set("Accept", localVarHttpHeaderAcceptSelected);
    }
    let localVarHttpContext = options && options.context;
    if (localVarHttpContext === void 0) {
      localVarHttpContext = new HttpContext();
    }
    let localVarTransferCache = options && options.transferCache;
    if (localVarTransferCache === void 0) {
      localVarTransferCache = true;
    }
    const consumes = [
      "application/json"
    ];
    const httpContentTypeSelected = this.configuration.selectHeaderContentType(consumes);
    if (httpContentTypeSelected !== void 0) {
      localVarHeaders = localVarHeaders.set("Content-Type", httpContentTypeSelected);
    }
    let responseType_ = "json";
    if (localVarHttpHeaderAcceptSelected) {
      if (localVarHttpHeaderAcceptSelected.startsWith("text")) {
        responseType_ = "text";
      } else if (this.configuration.isJsonMime(localVarHttpHeaderAcceptSelected)) {
        responseType_ = "json";
      } else {
        responseType_ = "blob";
      }
    }
    let localVarPath = `/accounts/distributors/${this.configuration.encodeParam({ name: "id", value: id, in: "path", style: "simple", explode: false, dataType: "string", dataFormat: void 0 })}`;
    return this.httpClient.request("put", `${this.configuration.basePath}${localVarPath}`, {
      context: localVarHttpContext,
      body: request,
      responseType: responseType_,
      withCredentials: this.configuration.withCredentials,
      headers: localVarHeaders,
      observe,
      transferCache: localVarTransferCache,
      reportProgress
    });
  }
  updateDistributorDetails(id, request, observe = "body", reportProgress = false, options) {
    if (id === null || id === void 0) {
      throw new Error("Required parameter id was null or undefined when calling updateDistributorDetails.");
    }
    if (request === null || request === void 0) {
      throw new Error("Required parameter request was null or undefined when calling updateDistributorDetails.");
    }
    let localVarHeaders = this.defaultHeaders;
    let localVarCredential;
    localVarCredential = this.configuration.lookupCredential("access_token");
    if (localVarCredential) {
      localVarHeaders = localVarHeaders.set("x-access-token", localVarCredential);
    }
    let localVarHttpHeaderAcceptSelected = options && options.httpHeaderAccept;
    if (localVarHttpHeaderAcceptSelected === void 0) {
      const httpHeaderAccepts = [
        "application/json"
      ];
      localVarHttpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
    }
    if (localVarHttpHeaderAcceptSelected !== void 0) {
      localVarHeaders = localVarHeaders.set("Accept", localVarHttpHeaderAcceptSelected);
    }
    let localVarHttpContext = options && options.context;
    if (localVarHttpContext === void 0) {
      localVarHttpContext = new HttpContext();
    }
    let localVarTransferCache = options && options.transferCache;
    if (localVarTransferCache === void 0) {
      localVarTransferCache = true;
    }
    const consumes = [
      "application/json"
    ];
    const httpContentTypeSelected = this.configuration.selectHeaderContentType(consumes);
    if (httpContentTypeSelected !== void 0) {
      localVarHeaders = localVarHeaders.set("Content-Type", httpContentTypeSelected);
    }
    let responseType_ = "json";
    if (localVarHttpHeaderAcceptSelected) {
      if (localVarHttpHeaderAcceptSelected.startsWith("text")) {
        responseType_ = "text";
      } else if (this.configuration.isJsonMime(localVarHttpHeaderAcceptSelected)) {
        responseType_ = "json";
      } else {
        responseType_ = "blob";
      }
    }
    let localVarPath = `/accounts/distributors/${this.configuration.encodeParam({ name: "id", value: id, in: "path", style: "simple", explode: false, dataType: "string", dataFormat: void 0 })}/details`;
    return this.httpClient.request("put", `${this.configuration.basePath}${localVarPath}`, {
      context: localVarHttpContext,
      body: request,
      responseType: responseType_,
      withCredentials: this.configuration.withCredentials,
      headers: localVarHeaders,
      observe,
      transferCache: localVarTransferCache,
      reportProgress
    });
  }
  updateDistributorLogo(id, size, observe = "body", reportProgress = false, options) {
    if (id === null || id === void 0) {
      throw new Error("Required parameter id was null or undefined when calling updateDistributorLogo.");
    }
    if (size === null || size === void 0) {
      throw new Error("Required parameter size was null or undefined when calling updateDistributorLogo.");
    }
    let localVarQueryParameters = new HttpParams({ encoder: this.encoder });
    if (size !== void 0 && size !== null) {
      localVarQueryParameters = this.addToHttpParams(localVarQueryParameters, size, "size");
    }
    let localVarHeaders = this.defaultHeaders;
    let localVarCredential;
    localVarCredential = this.configuration.lookupCredential("access_token");
    if (localVarCredential) {
      localVarHeaders = localVarHeaders.set("x-access-token", localVarCredential);
    }
    let localVarHttpHeaderAcceptSelected = options && options.httpHeaderAccept;
    if (localVarHttpHeaderAcceptSelected === void 0) {
      const httpHeaderAccepts = [];
      localVarHttpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
    }
    if (localVarHttpHeaderAcceptSelected !== void 0) {
      localVarHeaders = localVarHeaders.set("Accept", localVarHttpHeaderAcceptSelected);
    }
    let localVarHttpContext = options && options.context;
    if (localVarHttpContext === void 0) {
      localVarHttpContext = new HttpContext();
    }
    let localVarTransferCache = options && options.transferCache;
    if (localVarTransferCache === void 0) {
      localVarTransferCache = true;
    }
    let responseType_ = "json";
    if (localVarHttpHeaderAcceptSelected) {
      if (localVarHttpHeaderAcceptSelected.startsWith("text")) {
        responseType_ = "text";
      } else if (this.configuration.isJsonMime(localVarHttpHeaderAcceptSelected)) {
        responseType_ = "json";
      } else {
        responseType_ = "blob";
      }
    }
    let localVarPath = `/accounts/distributors/${this.configuration.encodeParam({ name: "id", value: id, in: "path", style: "simple", explode: false, dataType: "string", dataFormat: void 0 })}/logo`;
    return this.httpClient.request("post", `${this.configuration.basePath}${localVarPath}`, {
      context: localVarHttpContext,
      params: localVarQueryParameters,
      responseType: responseType_,
      withCredentials: this.configuration.withCredentials,
      headers: localVarHeaders,
      observe,
      transferCache: localVarTransferCache,
      reportProgress
    });
  }
  updateUser(id, request, observe = "body", reportProgress = false, options) {
    if (id === null || id === void 0) {
      throw new Error("Required parameter id was null or undefined when calling updateUser.");
    }
    if (request === null || request === void 0) {
      throw new Error("Required parameter request was null or undefined when calling updateUser.");
    }
    let localVarHeaders = this.defaultHeaders;
    let localVarCredential;
    localVarCredential = this.configuration.lookupCredential("access_token");
    if (localVarCredential) {
      localVarHeaders = localVarHeaders.set("x-access-token", localVarCredential);
    }
    let localVarHttpHeaderAcceptSelected = options && options.httpHeaderAccept;
    if (localVarHttpHeaderAcceptSelected === void 0) {
      const httpHeaderAccepts = [
        "application/json"
      ];
      localVarHttpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
    }
    if (localVarHttpHeaderAcceptSelected !== void 0) {
      localVarHeaders = localVarHeaders.set("Accept", localVarHttpHeaderAcceptSelected);
    }
    let localVarHttpContext = options && options.context;
    if (localVarHttpContext === void 0) {
      localVarHttpContext = new HttpContext();
    }
    let localVarTransferCache = options && options.transferCache;
    if (localVarTransferCache === void 0) {
      localVarTransferCache = true;
    }
    const consumes = [
      "application/json"
    ];
    const httpContentTypeSelected = this.configuration.selectHeaderContentType(consumes);
    if (httpContentTypeSelected !== void 0) {
      localVarHeaders = localVarHeaders.set("Content-Type", httpContentTypeSelected);
    }
    let responseType_ = "json";
    if (localVarHttpHeaderAcceptSelected) {
      if (localVarHttpHeaderAcceptSelected.startsWith("text")) {
        responseType_ = "text";
      } else if (this.configuration.isJsonMime(localVarHttpHeaderAcceptSelected)) {
        responseType_ = "json";
      } else {
        responseType_ = "blob";
      }
    }
    let localVarPath = `/accounts/users/${this.configuration.encodeParam({ name: "id", value: id, in: "path", style: "simple", explode: false, dataType: "string", dataFormat: void 0 })}`;
    return this.httpClient.request("put", `${this.configuration.basePath}${localVarPath}`, {
      context: localVarHttpContext,
      body: request,
      responseType: responseType_,
      withCredentials: this.configuration.withCredentials,
      headers: localVarHeaders,
      observe,
      transferCache: localVarTransferCache,
      reportProgress
    });
  }
  updateUserAvatar(id, observe = "body", reportProgress = false, options) {
    if (id === null || id === void 0) {
      throw new Error("Required parameter id was null or undefined when calling updateUserAvatar.");
    }
    let localVarHeaders = this.defaultHeaders;
    let localVarCredential;
    localVarCredential = this.configuration.lookupCredential("access_token");
    if (localVarCredential) {
      localVarHeaders = localVarHeaders.set("x-access-token", localVarCredential);
    }
    let localVarHttpHeaderAcceptSelected = options && options.httpHeaderAccept;
    if (localVarHttpHeaderAcceptSelected === void 0) {
      const httpHeaderAccepts = [];
      localVarHttpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
    }
    if (localVarHttpHeaderAcceptSelected !== void 0) {
      localVarHeaders = localVarHeaders.set("Accept", localVarHttpHeaderAcceptSelected);
    }
    let localVarHttpContext = options && options.context;
    if (localVarHttpContext === void 0) {
      localVarHttpContext = new HttpContext();
    }
    let localVarTransferCache = options && options.transferCache;
    if (localVarTransferCache === void 0) {
      localVarTransferCache = true;
    }
    let responseType_ = "json";
    if (localVarHttpHeaderAcceptSelected) {
      if (localVarHttpHeaderAcceptSelected.startsWith("text")) {
        responseType_ = "text";
      } else if (this.configuration.isJsonMime(localVarHttpHeaderAcceptSelected)) {
        responseType_ = "json";
      } else {
        responseType_ = "blob";
      }
    }
    let localVarPath = `/accounts/users/${this.configuration.encodeParam({ name: "id", value: id, in: "path", style: "simple", explode: false, dataType: "string", dataFormat: void 0 })}/avatar`;
    return this.httpClient.request("post", `${this.configuration.basePath}${localVarPath}`, {
      context: localVarHttpContext,
      responseType: responseType_,
      withCredentials: this.configuration.withCredentials,
      headers: localVarHeaders,
      observe,
      transferCache: localVarTransferCache,
      reportProgress
    });
  }
  updateUserRole(id, request, observe = "body", reportProgress = false, options) {
    if (id === null || id === void 0) {
      throw new Error("Required parameter id was null or undefined when calling updateUserRole.");
    }
    if (request === null || request === void 0) {
      throw new Error("Required parameter request was null or undefined when calling updateUserRole.");
    }
    let localVarHeaders = this.defaultHeaders;
    let localVarCredential;
    localVarCredential = this.configuration.lookupCredential("access_token");
    if (localVarCredential) {
      localVarHeaders = localVarHeaders.set("x-access-token", localVarCredential);
    }
    let localVarHttpHeaderAcceptSelected = options && options.httpHeaderAccept;
    if (localVarHttpHeaderAcceptSelected === void 0) {
      const httpHeaderAccepts = [
        "application/json"
      ];
      localVarHttpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
    }
    if (localVarHttpHeaderAcceptSelected !== void 0) {
      localVarHeaders = localVarHeaders.set("Accept", localVarHttpHeaderAcceptSelected);
    }
    let localVarHttpContext = options && options.context;
    if (localVarHttpContext === void 0) {
      localVarHttpContext = new HttpContext();
    }
    let localVarTransferCache = options && options.transferCache;
    if (localVarTransferCache === void 0) {
      localVarTransferCache = true;
    }
    const consumes = [
      "application/json"
    ];
    const httpContentTypeSelected = this.configuration.selectHeaderContentType(consumes);
    if (httpContentTypeSelected !== void 0) {
      localVarHeaders = localVarHeaders.set("Content-Type", httpContentTypeSelected);
    }
    let responseType_ = "json";
    if (localVarHttpHeaderAcceptSelected) {
      if (localVarHttpHeaderAcceptSelected.startsWith("text")) {
        responseType_ = "text";
      } else if (this.configuration.isJsonMime(localVarHttpHeaderAcceptSelected)) {
        responseType_ = "json";
      } else {
        responseType_ = "blob";
      }
    }
    let localVarPath = `/accounts/userroles/${this.configuration.encodeParam({ name: "id", value: id, in: "path", style: "simple", explode: false, dataType: "string", dataFormat: void 0 })}`;
    return this.httpClient.request("put", `${this.configuration.basePath}${localVarPath}`, {
      context: localVarHttpContext,
      body: request,
      responseType: responseType_,
      withCredentials: this.configuration.withCredentials,
      headers: localVarHeaders,
      observe,
      transferCache: localVarTransferCache,
      reportProgress
    });
  }
  updateVendor(id, request, observe = "body", reportProgress = false, options) {
    if (id === null || id === void 0) {
      throw new Error("Required parameter id was null or undefined when calling updateVendor.");
    }
    if (request === null || request === void 0) {
      throw new Error("Required parameter request was null or undefined when calling updateVendor.");
    }
    let localVarHeaders = this.defaultHeaders;
    let localVarCredential;
    localVarCredential = this.configuration.lookupCredential("access_token");
    if (localVarCredential) {
      localVarHeaders = localVarHeaders.set("x-access-token", localVarCredential);
    }
    let localVarHttpHeaderAcceptSelected = options && options.httpHeaderAccept;
    if (localVarHttpHeaderAcceptSelected === void 0) {
      const httpHeaderAccepts = [
        "application/json"
      ];
      localVarHttpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
    }
    if (localVarHttpHeaderAcceptSelected !== void 0) {
      localVarHeaders = localVarHeaders.set("Accept", localVarHttpHeaderAcceptSelected);
    }
    let localVarHttpContext = options && options.context;
    if (localVarHttpContext === void 0) {
      localVarHttpContext = new HttpContext();
    }
    let localVarTransferCache = options && options.transferCache;
    if (localVarTransferCache === void 0) {
      localVarTransferCache = true;
    }
    const consumes = [
      "application/json"
    ];
    const httpContentTypeSelected = this.configuration.selectHeaderContentType(consumes);
    if (httpContentTypeSelected !== void 0) {
      localVarHeaders = localVarHeaders.set("Content-Type", httpContentTypeSelected);
    }
    let responseType_ = "json";
    if (localVarHttpHeaderAcceptSelected) {
      if (localVarHttpHeaderAcceptSelected.startsWith("text")) {
        responseType_ = "text";
      } else if (this.configuration.isJsonMime(localVarHttpHeaderAcceptSelected)) {
        responseType_ = "json";
      } else {
        responseType_ = "blob";
      }
    }
    let localVarPath = `/accounts/vendors/${this.configuration.encodeParam({ name: "id", value: id, in: "path", style: "simple", explode: false, dataType: "string", dataFormat: void 0 })}`;
    return this.httpClient.request("put", `${this.configuration.basePath}${localVarPath}`, {
      context: localVarHttpContext,
      body: request,
      responseType: responseType_,
      withCredentials: this.configuration.withCredentials,
      headers: localVarHeaders,
      observe,
      transferCache: localVarTransferCache,
      reportProgress
    });
  }
  updateVendorDetails(id, request, observe = "body", reportProgress = false, options) {
    if (id === null || id === void 0) {
      throw new Error("Required parameter id was null or undefined when calling updateVendorDetails.");
    }
    if (request === null || request === void 0) {
      throw new Error("Required parameter request was null or undefined when calling updateVendorDetails.");
    }
    let localVarHeaders = this.defaultHeaders;
    let localVarCredential;
    localVarCredential = this.configuration.lookupCredential("access_token");
    if (localVarCredential) {
      localVarHeaders = localVarHeaders.set("x-access-token", localVarCredential);
    }
    let localVarHttpHeaderAcceptSelected = options && options.httpHeaderAccept;
    if (localVarHttpHeaderAcceptSelected === void 0) {
      const httpHeaderAccepts = [
        "application/json"
      ];
      localVarHttpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
    }
    if (localVarHttpHeaderAcceptSelected !== void 0) {
      localVarHeaders = localVarHeaders.set("Accept", localVarHttpHeaderAcceptSelected);
    }
    let localVarHttpContext = options && options.context;
    if (localVarHttpContext === void 0) {
      localVarHttpContext = new HttpContext();
    }
    let localVarTransferCache = options && options.transferCache;
    if (localVarTransferCache === void 0) {
      localVarTransferCache = true;
    }
    const consumes = [
      "application/json"
    ];
    const httpContentTypeSelected = this.configuration.selectHeaderContentType(consumes);
    if (httpContentTypeSelected !== void 0) {
      localVarHeaders = localVarHeaders.set("Content-Type", httpContentTypeSelected);
    }
    let responseType_ = "json";
    if (localVarHttpHeaderAcceptSelected) {
      if (localVarHttpHeaderAcceptSelected.startsWith("text")) {
        responseType_ = "text";
      } else if (this.configuration.isJsonMime(localVarHttpHeaderAcceptSelected)) {
        responseType_ = "json";
      } else {
        responseType_ = "blob";
      }
    }
    let localVarPath = `/accounts/vendors/${this.configuration.encodeParam({ name: "id", value: id, in: "path", style: "simple", explode: false, dataType: "string", dataFormat: void 0 })}/details`;
    return this.httpClient.request("put", `${this.configuration.basePath}${localVarPath}`, {
      context: localVarHttpContext,
      body: request,
      responseType: responseType_,
      withCredentials: this.configuration.withCredentials,
      headers: localVarHeaders,
      observe,
      transferCache: localVarTransferCache,
      reportProgress
    });
  }
  updateVendorLogo(id, size, observe = "body", reportProgress = false, options) {
    if (id === null || id === void 0) {
      throw new Error("Required parameter id was null or undefined when calling updateVendorLogo.");
    }
    if (size === null || size === void 0) {
      throw new Error("Required parameter size was null or undefined when calling updateVendorLogo.");
    }
    let localVarQueryParameters = new HttpParams({ encoder: this.encoder });
    if (size !== void 0 && size !== null) {
      localVarQueryParameters = this.addToHttpParams(localVarQueryParameters, size, "size");
    }
    let localVarHeaders = this.defaultHeaders;
    let localVarCredential;
    localVarCredential = this.configuration.lookupCredential("access_token");
    if (localVarCredential) {
      localVarHeaders = localVarHeaders.set("x-access-token", localVarCredential);
    }
    let localVarHttpHeaderAcceptSelected = options && options.httpHeaderAccept;
    if (localVarHttpHeaderAcceptSelected === void 0) {
      const httpHeaderAccepts = [];
      localVarHttpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
    }
    if (localVarHttpHeaderAcceptSelected !== void 0) {
      localVarHeaders = localVarHeaders.set("Accept", localVarHttpHeaderAcceptSelected);
    }
    let localVarHttpContext = options && options.context;
    if (localVarHttpContext === void 0) {
      localVarHttpContext = new HttpContext();
    }
    let localVarTransferCache = options && options.transferCache;
    if (localVarTransferCache === void 0) {
      localVarTransferCache = true;
    }
    let responseType_ = "json";
    if (localVarHttpHeaderAcceptSelected) {
      if (localVarHttpHeaderAcceptSelected.startsWith("text")) {
        responseType_ = "text";
      } else if (this.configuration.isJsonMime(localVarHttpHeaderAcceptSelected)) {
        responseType_ = "json";
      } else {
        responseType_ = "blob";
      }
    }
    let localVarPath = `/accounts/vendors/${this.configuration.encodeParam({ name: "id", value: id, in: "path", style: "simple", explode: false, dataType: "string", dataFormat: void 0 })}/logo`;
    return this.httpClient.request("post", `${this.configuration.basePath}${localVarPath}`, {
      context: localVarHttpContext,
      params: localVarQueryParameters,
      responseType: responseType_,
      withCredentials: this.configuration.withCredentials,
      headers: localVarHeaders,
      observe,
      transferCache: localVarTransferCache,
      reportProgress
    });
  }
  static \u0275fac = function AccountsService_Factory(__ngFactoryType__) {
    return new (__ngFactoryType__ || _AccountsService)(\u0275\u0275inject(HttpClient), \u0275\u0275inject(BASE_PATH, 8), \u0275\u0275inject(Configuration, 8));
  };
  static \u0275prov = /* @__PURE__ */ \u0275\u0275defineInjectable({ token: _AccountsService, factory: _AccountsService.\u0275fac, providedIn: "root" });
};
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(AccountsService, [{
    type: Injectable,
    args: [{
      providedIn: "root"
    }]
  }], () => [{ type: HttpClient }, { type: void 0, decorators: [{
    type: Optional
  }, {
    type: Inject,
    args: [BASE_PATH]
  }] }, { type: Configuration, decorators: [{
    type: Optional
  }] }], null);
})();

// src/app/api/api/deviceTypes.service.ts
var DeviceTypesService = class _DeviceTypesService {
  httpClient;
  basePath = "";
  defaultHeaders = new HttpHeaders();
  configuration = new Configuration();
  encoder;
  constructor(httpClient, basePath, configuration) {
    this.httpClient = httpClient;
    if (configuration) {
      this.configuration = configuration;
    }
    if (typeof this.configuration.basePath !== "string") {
      const firstBasePath = Array.isArray(basePath) ? basePath[0] : void 0;
      if (firstBasePath != void 0) {
        basePath = firstBasePath;
      }
      if (typeof basePath !== "string") {
        basePath = this.basePath;
      }
      this.configuration.basePath = basePath;
    }
    this.encoder = this.configuration.encoder || new CustomHttpParameterCodec();
  }
  // @ts-ignore
  addToHttpParams(httpParams, value, key) {
    if (typeof value === "object" && value instanceof Date === false) {
      httpParams = this.addToHttpParamsRecursive(httpParams, value);
    } else {
      httpParams = this.addToHttpParamsRecursive(httpParams, value, key);
    }
    return httpParams;
  }
  addToHttpParamsRecursive(httpParams, value, key) {
    if (value == null) {
      return httpParams;
    }
    if (typeof value === "object") {
      if (Array.isArray(value)) {
        value.forEach((elem) => httpParams = this.addToHttpParamsRecursive(httpParams, elem, key));
      } else if (value instanceof Date) {
        if (key != null) {
          httpParams = httpParams.append(key, value.toISOString().substring(0, 10));
        } else {
          throw Error("key may not be null if value is Date");
        }
      } else {
        Object.keys(value).forEach((k) => httpParams = this.addToHttpParamsRecursive(httpParams, value[k], key != null ? `${key}.${k}` : k));
      }
    } else if (key != null) {
      httpParams = httpParams.append(key, value);
    } else {
      throw Error("key may not be null if value is not object or array");
    }
    return httpParams;
  }
  createDeviceType(request, observe = "body", reportProgress = false, options) {
    if (request === null || request === void 0) {
      throw new Error("Required parameter request was null or undefined when calling createDeviceType.");
    }
    let localVarHeaders = this.defaultHeaders;
    let localVarCredential;
    localVarCredential = this.configuration.lookupCredential("access_token");
    if (localVarCredential) {
      localVarHeaders = localVarHeaders.set("x-access-token", localVarCredential);
    }
    let localVarHttpHeaderAcceptSelected = options && options.httpHeaderAccept;
    if (localVarHttpHeaderAcceptSelected === void 0) {
      const httpHeaderAccepts = [
        "application/json"
      ];
      localVarHttpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
    }
    if (localVarHttpHeaderAcceptSelected !== void 0) {
      localVarHeaders = localVarHeaders.set("Accept", localVarHttpHeaderAcceptSelected);
    }
    let localVarHttpContext = options && options.context;
    if (localVarHttpContext === void 0) {
      localVarHttpContext = new HttpContext();
    }
    let localVarTransferCache = options && options.transferCache;
    if (localVarTransferCache === void 0) {
      localVarTransferCache = true;
    }
    const consumes = [
      "application/json"
    ];
    const httpContentTypeSelected = this.configuration.selectHeaderContentType(consumes);
    if (httpContentTypeSelected !== void 0) {
      localVarHeaders = localVarHeaders.set("Content-Type", httpContentTypeSelected);
    }
    let responseType_ = "json";
    if (localVarHttpHeaderAcceptSelected) {
      if (localVarHttpHeaderAcceptSelected.startsWith("text")) {
        responseType_ = "text";
      } else if (this.configuration.isJsonMime(localVarHttpHeaderAcceptSelected)) {
        responseType_ = "json";
      } else {
        responseType_ = "blob";
      }
    }
    let localVarPath = `/entities/devicetypes`;
    return this.httpClient.request("post", `${this.configuration.basePath}${localVarPath}`, {
      context: localVarHttpContext,
      body: request,
      responseType: responseType_,
      withCredentials: this.configuration.withCredentials,
      headers: localVarHeaders,
      observe,
      transferCache: localVarTransferCache,
      reportProgress
    });
  }
  getDeviceType(id, owner, observe = "body", reportProgress = false, options) {
    if (id === null || id === void 0) {
      throw new Error("Required parameter id was null or undefined when calling getDeviceType.");
    }
    let localVarQueryParameters = new HttpParams({ encoder: this.encoder });
    if (owner !== void 0 && owner !== null) {
      localVarQueryParameters = this.addToHttpParams(localVarQueryParameters, owner, "owner");
    }
    let localVarHeaders = this.defaultHeaders;
    let localVarCredential;
    localVarCredential = this.configuration.lookupCredential("access_token");
    if (localVarCredential) {
      localVarHeaders = localVarHeaders.set("x-access-token", localVarCredential);
    }
    let localVarHttpHeaderAcceptSelected = options && options.httpHeaderAccept;
    if (localVarHttpHeaderAcceptSelected === void 0) {
      const httpHeaderAccepts = [
        "application/json"
      ];
      localVarHttpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
    }
    if (localVarHttpHeaderAcceptSelected !== void 0) {
      localVarHeaders = localVarHeaders.set("Accept", localVarHttpHeaderAcceptSelected);
    }
    let localVarHttpContext = options && options.context;
    if (localVarHttpContext === void 0) {
      localVarHttpContext = new HttpContext();
    }
    let localVarTransferCache = options && options.transferCache;
    if (localVarTransferCache === void 0) {
      localVarTransferCache = true;
    }
    let responseType_ = "json";
    if (localVarHttpHeaderAcceptSelected) {
      if (localVarHttpHeaderAcceptSelected.startsWith("text")) {
        responseType_ = "text";
      } else if (this.configuration.isJsonMime(localVarHttpHeaderAcceptSelected)) {
        responseType_ = "json";
      } else {
        responseType_ = "blob";
      }
    }
    let localVarPath = `/entities/devicetypes/${this.configuration.encodeParam({ name: "id", value: id, in: "path", style: "simple", explode: false, dataType: "string", dataFormat: void 0 })}`;
    return this.httpClient.request("get", `${this.configuration.basePath}${localVarPath}`, {
      context: localVarHttpContext,
      params: localVarQueryParameters,
      responseType: responseType_,
      withCredentials: this.configuration.withCredentials,
      headers: localVarHeaders,
      observe,
      transferCache: localVarTransferCache,
      reportProgress
    });
  }
  listDeviceTypes(owner, recurse, offset, limit, sort, filter, observe = "body", reportProgress = false, options) {
    if (owner === null || owner === void 0) {
      throw new Error("Required parameter owner was null or undefined when calling listDeviceTypes.");
    }
    let localVarQueryParameters = new HttpParams({ encoder: this.encoder });
    if (owner !== void 0 && owner !== null) {
      localVarQueryParameters = this.addToHttpParams(localVarQueryParameters, owner, "owner");
    }
    if (recurse !== void 0 && recurse !== null) {
      localVarQueryParameters = this.addToHttpParams(localVarQueryParameters, recurse, "recurse");
    }
    if (offset !== void 0 && offset !== null) {
      localVarQueryParameters = this.addToHttpParams(localVarQueryParameters, offset, "offset");
    }
    if (limit !== void 0 && limit !== null) {
      localVarQueryParameters = this.addToHttpParams(localVarQueryParameters, limit, "limit");
    }
    if (sort !== void 0 && sort !== null) {
      localVarQueryParameters = this.addToHttpParams(localVarQueryParameters, sort, "sort");
    }
    if (filter !== void 0 && filter !== null) {
      localVarQueryParameters = this.addToHttpParams(localVarQueryParameters, filter, "filter");
    }
    let localVarHeaders = this.defaultHeaders;
    let localVarCredential;
    localVarCredential = this.configuration.lookupCredential("access_token");
    if (localVarCredential) {
      localVarHeaders = localVarHeaders.set("x-access-token", localVarCredential);
    }
    let localVarHttpHeaderAcceptSelected = options && options.httpHeaderAccept;
    if (localVarHttpHeaderAcceptSelected === void 0) {
      const httpHeaderAccepts = [
        "application/json"
      ];
      localVarHttpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
    }
    if (localVarHttpHeaderAcceptSelected !== void 0) {
      localVarHeaders = localVarHeaders.set("Accept", localVarHttpHeaderAcceptSelected);
    }
    let localVarHttpContext = options && options.context;
    if (localVarHttpContext === void 0) {
      localVarHttpContext = new HttpContext();
    }
    let localVarTransferCache = options && options.transferCache;
    if (localVarTransferCache === void 0) {
      localVarTransferCache = true;
    }
    let responseType_ = "json";
    if (localVarHttpHeaderAcceptSelected) {
      if (localVarHttpHeaderAcceptSelected.startsWith("text")) {
        responseType_ = "text";
      } else if (this.configuration.isJsonMime(localVarHttpHeaderAcceptSelected)) {
        responseType_ = "json";
      } else {
        responseType_ = "blob";
      }
    }
    let localVarPath = `/entities/devicetypes`;
    return this.httpClient.request("get", `${this.configuration.basePath}${localVarPath}`, {
      context: localVarHttpContext,
      params: localVarQueryParameters,
      responseType: responseType_,
      withCredentials: this.configuration.withCredentials,
      headers: localVarHeaders,
      observe,
      transferCache: localVarTransferCache,
      reportProgress
    });
  }
  updateDeviceType(id, request, observe = "body", reportProgress = false, options) {
    if (id === null || id === void 0) {
      throw new Error("Required parameter id was null or undefined when calling updateDeviceType.");
    }
    if (request === null || request === void 0) {
      throw new Error("Required parameter request was null or undefined when calling updateDeviceType.");
    }
    let localVarHeaders = this.defaultHeaders;
    let localVarCredential;
    localVarCredential = this.configuration.lookupCredential("access_token");
    if (localVarCredential) {
      localVarHeaders = localVarHeaders.set("x-access-token", localVarCredential);
    }
    let localVarHttpHeaderAcceptSelected = options && options.httpHeaderAccept;
    if (localVarHttpHeaderAcceptSelected === void 0) {
      const httpHeaderAccepts = [
        "application/json"
      ];
      localVarHttpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
    }
    if (localVarHttpHeaderAcceptSelected !== void 0) {
      localVarHeaders = localVarHeaders.set("Accept", localVarHttpHeaderAcceptSelected);
    }
    let localVarHttpContext = options && options.context;
    if (localVarHttpContext === void 0) {
      localVarHttpContext = new HttpContext();
    }
    let localVarTransferCache = options && options.transferCache;
    if (localVarTransferCache === void 0) {
      localVarTransferCache = true;
    }
    const consumes = [
      "application/json"
    ];
    const httpContentTypeSelected = this.configuration.selectHeaderContentType(consumes);
    if (httpContentTypeSelected !== void 0) {
      localVarHeaders = localVarHeaders.set("Content-Type", httpContentTypeSelected);
    }
    let responseType_ = "json";
    if (localVarHttpHeaderAcceptSelected) {
      if (localVarHttpHeaderAcceptSelected.startsWith("text")) {
        responseType_ = "text";
      } else if (this.configuration.isJsonMime(localVarHttpHeaderAcceptSelected)) {
        responseType_ = "json";
      } else {
        responseType_ = "blob";
      }
    }
    let localVarPath = `/entities/devicetypes/${this.configuration.encodeParam({ name: "id", value: id, in: "path", style: "simple", explode: false, dataType: "string", dataFormat: void 0 })}`;
    return this.httpClient.request("put", `${this.configuration.basePath}${localVarPath}`, {
      context: localVarHttpContext,
      body: request,
      responseType: responseType_,
      withCredentials: this.configuration.withCredentials,
      headers: localVarHeaders,
      observe,
      transferCache: localVarTransferCache,
      reportProgress
    });
  }
  static \u0275fac = function DeviceTypesService_Factory(__ngFactoryType__) {
    return new (__ngFactoryType__ || _DeviceTypesService)(\u0275\u0275inject(HttpClient), \u0275\u0275inject(BASE_PATH, 8), \u0275\u0275inject(Configuration, 8));
  };
  static \u0275prov = /* @__PURE__ */ \u0275\u0275defineInjectable({ token: _DeviceTypesService, factory: _DeviceTypesService.\u0275fac, providedIn: "root" });
};
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(DeviceTypesService, [{
    type: Injectable,
    args: [{
      providedIn: "root"
    }]
  }], () => [{ type: HttpClient }, { type: void 0, decorators: [{
    type: Optional
  }, {
    type: Inject,
    args: [BASE_PATH]
  }] }, { type: Configuration, decorators: [{
    type: Optional
  }] }], null);
})();

// src/app/api/api.module.ts
var ApiModule = class _ApiModule {
  static forRoot(configurationFactory) {
    return {
      ngModule: _ApiModule,
      providers: [{ provide: Configuration, useFactory: configurationFactory }]
    };
  }
  constructor(parentModule, http) {
    if (parentModule) {
      throw new Error("ApiModule is already loaded. Import in your base AppModule only.");
    }
    if (!http) {
      throw new Error("You need to import the HttpClientModule in your AppModule! \nSee also https://github.com/angular/angular/issues/20575");
    }
  }
  static \u0275fac = function ApiModule_Factory(__ngFactoryType__) {
    return new (__ngFactoryType__ || _ApiModule)(\u0275\u0275inject(_ApiModule, 12), \u0275\u0275inject(HttpClient, 8));
  };
  static \u0275mod = /* @__PURE__ */ \u0275\u0275defineNgModule({ type: _ApiModule });
  static \u0275inj = /* @__PURE__ */ \u0275\u0275defineInjector({});
};
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(ApiModule, [{
    type: NgModule,
    args: [{
      imports: [],
      declarations: [],
      exports: [],
      providers: []
    }]
  }], () => [{ type: ApiModule, decorators: [{
    type: Optional
  }, {
    type: SkipSelf
  }] }, { type: HttpClient, decorators: [{
    type: Optional
  }] }], null);
})();

// src/app/api/api/alerts.service.ts
var AlertsService = class _AlertsService {
  httpClient;
  basePath = "";
  defaultHeaders = new HttpHeaders();
  configuration = new Configuration();
  encoder;
  constructor(httpClient, basePath, configuration) {
    this.httpClient = httpClient;
    if (configuration) {
      this.configuration = configuration;
    }
    if (typeof this.configuration.basePath !== "string") {
      const firstBasePath = Array.isArray(basePath) ? basePath[0] : void 0;
      if (firstBasePath != void 0) {
        basePath = firstBasePath;
      }
      if (typeof basePath !== "string") {
        basePath = this.basePath;
      }
      this.configuration.basePath = basePath;
    }
    this.encoder = this.configuration.encoder || new CustomHttpParameterCodec();
  }
  // @ts-ignore
  addToHttpParams(httpParams, value, key) {
    if (typeof value === "object" && value instanceof Date === false) {
      httpParams = this.addToHttpParamsRecursive(httpParams, value);
    } else {
      httpParams = this.addToHttpParamsRecursive(httpParams, value, key);
    }
    return httpParams;
  }
  addToHttpParamsRecursive(httpParams, value, key) {
    if (value == null) {
      return httpParams;
    }
    if (typeof value === "object") {
      if (Array.isArray(value)) {
        value.forEach((elem) => httpParams = this.addToHttpParamsRecursive(httpParams, elem, key));
      } else if (value instanceof Date) {
        if (key != null) {
          httpParams = httpParams.append(key, value.toISOString().substring(0, 10));
        } else {
          throw Error("key may not be null if value is Date");
        }
      } else {
        Object.keys(value).forEach((k) => httpParams = this.addToHttpParamsRecursive(httpParams, value[k], key != null ? `${key}.${k}` : k));
      }
    } else if (key != null) {
      httpParams = httpParams.append(key, value);
    } else {
      throw Error("key may not be null if value is not object or array");
    }
    return httpParams;
  }
  createAlert(request, observe = "body", reportProgress = false, options) {
    if (request === null || request === void 0) {
      throw new Error("Required parameter request was null or undefined when calling createAlert.");
    }
    let localVarHeaders = this.defaultHeaders;
    let localVarCredential;
    localVarCredential = this.configuration.lookupCredential("access_token");
    if (localVarCredential) {
      localVarHeaders = localVarHeaders.set("x-access-token", localVarCredential);
    }
    let localVarHttpHeaderAcceptSelected = options && options.httpHeaderAccept;
    if (localVarHttpHeaderAcceptSelected === void 0) {
      const httpHeaderAccepts = [
        "application/json"
      ];
      localVarHttpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
    }
    if (localVarHttpHeaderAcceptSelected !== void 0) {
      localVarHeaders = localVarHeaders.set("Accept", localVarHttpHeaderAcceptSelected);
    }
    let localVarHttpContext = options && options.context;
    if (localVarHttpContext === void 0) {
      localVarHttpContext = new HttpContext();
    }
    let localVarTransferCache = options && options.transferCache;
    if (localVarTransferCache === void 0) {
      localVarTransferCache = true;
    }
    const consumes = [
      "application/json"
    ];
    const httpContentTypeSelected = this.configuration.selectHeaderContentType(consumes);
    if (httpContentTypeSelected !== void 0) {
      localVarHeaders = localVarHeaders.set("Content-Type", httpContentTypeSelected);
    }
    let responseType_ = "json";
    if (localVarHttpHeaderAcceptSelected) {
      if (localVarHttpHeaderAcceptSelected.startsWith("text")) {
        responseType_ = "text";
      } else if (this.configuration.isJsonMime(localVarHttpHeaderAcceptSelected)) {
        responseType_ = "json";
      } else {
        responseType_ = "blob";
      }
    }
    let localVarPath = `/entities/alerts`;
    return this.httpClient.request("post", `${this.configuration.basePath}${localVarPath}`, {
      context: localVarHttpContext,
      body: request,
      responseType: responseType_,
      withCredentials: this.configuration.withCredentials,
      headers: localVarHeaders,
      observe,
      transferCache: localVarTransferCache,
      reportProgress
    });
  }
  getAlert(id, observe = "body", reportProgress = false, options) {
    if (id === null || id === void 0) {
      throw new Error("Required parameter id was null or undefined when calling getAlert.");
    }
    let localVarHeaders = this.defaultHeaders;
    let localVarCredential;
    localVarCredential = this.configuration.lookupCredential("access_token");
    if (localVarCredential) {
      localVarHeaders = localVarHeaders.set("x-access-token", localVarCredential);
    }
    let localVarHttpHeaderAcceptSelected = options && options.httpHeaderAccept;
    if (localVarHttpHeaderAcceptSelected === void 0) {
      const httpHeaderAccepts = [
        "application/json"
      ];
      localVarHttpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
    }
    if (localVarHttpHeaderAcceptSelected !== void 0) {
      localVarHeaders = localVarHeaders.set("Accept", localVarHttpHeaderAcceptSelected);
    }
    let localVarHttpContext = options && options.context;
    if (localVarHttpContext === void 0) {
      localVarHttpContext = new HttpContext();
    }
    let localVarTransferCache = options && options.transferCache;
    if (localVarTransferCache === void 0) {
      localVarTransferCache = true;
    }
    let responseType_ = "json";
    if (localVarHttpHeaderAcceptSelected) {
      if (localVarHttpHeaderAcceptSelected.startsWith("text")) {
        responseType_ = "text";
      } else if (this.configuration.isJsonMime(localVarHttpHeaderAcceptSelected)) {
        responseType_ = "json";
      } else {
        responseType_ = "blob";
      }
    }
    let localVarPath = `/entities/alerts/${this.configuration.encodeParam({ name: "id", value: id, in: "path", style: "simple", explode: false, dataType: "string", dataFormat: void 0 })}`;
    return this.httpClient.request("get", `${this.configuration.basePath}${localVarPath}`, {
      context: localVarHttpContext,
      responseType: responseType_,
      withCredentials: this.configuration.withCredentials,
      headers: localVarHeaders,
      observe,
      transferCache: localVarTransferCache,
      reportProgress
    });
  }
  listAlerts(owner, offset, limit, sort, filter, observe = "body", reportProgress = false, options) {
    if (owner === null || owner === void 0) {
      throw new Error("Required parameter owner was null or undefined when calling listAlerts.");
    }
    let localVarQueryParameters = new HttpParams({ encoder: this.encoder });
    if (owner !== void 0 && owner !== null) {
      localVarQueryParameters = this.addToHttpParams(localVarQueryParameters, owner, "owner");
    }
    if (offset !== void 0 && offset !== null) {
      localVarQueryParameters = this.addToHttpParams(localVarQueryParameters, offset, "offset");
    }
    if (limit !== void 0 && limit !== null) {
      localVarQueryParameters = this.addToHttpParams(localVarQueryParameters, limit, "limit");
    }
    if (sort !== void 0 && sort !== null) {
      localVarQueryParameters = this.addToHttpParams(localVarQueryParameters, sort, "sort");
    }
    if (filter !== void 0 && filter !== null) {
      localVarQueryParameters = this.addToHttpParams(localVarQueryParameters, filter, "filter");
    }
    let localVarHeaders = this.defaultHeaders;
    let localVarCredential;
    localVarCredential = this.configuration.lookupCredential("access_token");
    if (localVarCredential) {
      localVarHeaders = localVarHeaders.set("x-access-token", localVarCredential);
    }
    let localVarHttpHeaderAcceptSelected = options && options.httpHeaderAccept;
    if (localVarHttpHeaderAcceptSelected === void 0) {
      const httpHeaderAccepts = [
        "application/json"
      ];
      localVarHttpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
    }
    if (localVarHttpHeaderAcceptSelected !== void 0) {
      localVarHeaders = localVarHeaders.set("Accept", localVarHttpHeaderAcceptSelected);
    }
    let localVarHttpContext = options && options.context;
    if (localVarHttpContext === void 0) {
      localVarHttpContext = new HttpContext();
    }
    let localVarTransferCache = options && options.transferCache;
    if (localVarTransferCache === void 0) {
      localVarTransferCache = true;
    }
    let responseType_ = "json";
    if (localVarHttpHeaderAcceptSelected) {
      if (localVarHttpHeaderAcceptSelected.startsWith("text")) {
        responseType_ = "text";
      } else if (this.configuration.isJsonMime(localVarHttpHeaderAcceptSelected)) {
        responseType_ = "json";
      } else {
        responseType_ = "blob";
      }
    }
    let localVarPath = `/entities/alerts`;
    return this.httpClient.request("get", `${this.configuration.basePath}${localVarPath}`, {
      context: localVarHttpContext,
      params: localVarQueryParameters,
      responseType: responseType_,
      withCredentials: this.configuration.withCredentials,
      headers: localVarHeaders,
      observe,
      transferCache: localVarTransferCache,
      reportProgress
    });
  }
  updateAlert(id, request, observe = "body", reportProgress = false, options) {
    if (id === null || id === void 0) {
      throw new Error("Required parameter id was null or undefined when calling updateAlert.");
    }
    if (request === null || request === void 0) {
      throw new Error("Required parameter request was null or undefined when calling updateAlert.");
    }
    let localVarHeaders = this.defaultHeaders;
    let localVarCredential;
    localVarCredential = this.configuration.lookupCredential("access_token");
    if (localVarCredential) {
      localVarHeaders = localVarHeaders.set("x-access-token", localVarCredential);
    }
    let localVarHttpHeaderAcceptSelected = options && options.httpHeaderAccept;
    if (localVarHttpHeaderAcceptSelected === void 0) {
      const httpHeaderAccepts = [
        "application/json"
      ];
      localVarHttpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
    }
    if (localVarHttpHeaderAcceptSelected !== void 0) {
      localVarHeaders = localVarHeaders.set("Accept", localVarHttpHeaderAcceptSelected);
    }
    let localVarHttpContext = options && options.context;
    if (localVarHttpContext === void 0) {
      localVarHttpContext = new HttpContext();
    }
    let localVarTransferCache = options && options.transferCache;
    if (localVarTransferCache === void 0) {
      localVarTransferCache = true;
    }
    const consumes = [
      "application/json"
    ];
    const httpContentTypeSelected = this.configuration.selectHeaderContentType(consumes);
    if (httpContentTypeSelected !== void 0) {
      localVarHeaders = localVarHeaders.set("Content-Type", httpContentTypeSelected);
    }
    let responseType_ = "json";
    if (localVarHttpHeaderAcceptSelected) {
      if (localVarHttpHeaderAcceptSelected.startsWith("text")) {
        responseType_ = "text";
      } else if (this.configuration.isJsonMime(localVarHttpHeaderAcceptSelected)) {
        responseType_ = "json";
      } else {
        responseType_ = "blob";
      }
    }
    let localVarPath = `/entities/alerts/${this.configuration.encodeParam({ name: "id", value: id, in: "path", style: "simple", explode: false, dataType: "string", dataFormat: void 0 })}`;
    return this.httpClient.request("put", `${this.configuration.basePath}${localVarPath}`, {
      context: localVarHttpContext,
      body: request,
      responseType: responseType_,
      withCredentials: this.configuration.withCredentials,
      headers: localVarHeaders,
      observe,
      transferCache: localVarTransferCache,
      reportProgress
    });
  }
  static \u0275fac = function AlertsService_Factory(__ngFactoryType__) {
    return new (__ngFactoryType__ || _AlertsService)(\u0275\u0275inject(HttpClient), \u0275\u0275inject(BASE_PATH, 8), \u0275\u0275inject(Configuration, 8));
  };
  static \u0275prov = /* @__PURE__ */ \u0275\u0275defineInjectable({ token: _AlertsService, factory: _AlertsService.\u0275fac, providedIn: "root" });
};
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(AlertsService, [{
    type: Injectable,
    args: [{
      providedIn: "root"
    }]
  }], () => [{ type: HttpClient }, { type: void 0, decorators: [{
    type: Optional
  }, {
    type: Inject,
    args: [BASE_PATH]
  }] }, { type: Configuration, decorators: [{
    type: Optional
  }] }], null);
})();

// src/app/api/api/analytics.service.ts
var AnalyticsService = class _AnalyticsService {
  httpClient;
  basePath = "";
  defaultHeaders = new HttpHeaders();
  configuration = new Configuration();
  encoder;
  constructor(httpClient, basePath, configuration) {
    this.httpClient = httpClient;
    if (configuration) {
      this.configuration = configuration;
    }
    if (typeof this.configuration.basePath !== "string") {
      const firstBasePath = Array.isArray(basePath) ? basePath[0] : void 0;
      if (firstBasePath != void 0) {
        basePath = firstBasePath;
      }
      if (typeof basePath !== "string") {
        basePath = this.basePath;
      }
      this.configuration.basePath = basePath;
    }
    this.encoder = this.configuration.encoder || new CustomHttpParameterCodec();
  }
  // @ts-ignore
  addToHttpParams(httpParams, value, key) {
    if (typeof value === "object" && value instanceof Date === false) {
      httpParams = this.addToHttpParamsRecursive(httpParams, value);
    } else {
      httpParams = this.addToHttpParamsRecursive(httpParams, value, key);
    }
    return httpParams;
  }
  addToHttpParamsRecursive(httpParams, value, key) {
    if (value == null) {
      return httpParams;
    }
    if (typeof value === "object") {
      if (Array.isArray(value)) {
        value.forEach((elem) => httpParams = this.addToHttpParamsRecursive(httpParams, elem, key));
      } else if (value instanceof Date) {
        if (key != null) {
          httpParams = httpParams.append(key, value.toISOString().substring(0, 10));
        } else {
          throw Error("key may not be null if value is Date");
        }
      } else {
        Object.keys(value).forEach((k) => httpParams = this.addToHttpParamsRecursive(httpParams, value[k], key != null ? `${key}.${k}` : k));
      }
    } else if (key != null) {
      httpParams = httpParams.append(key, value);
    } else {
      throw Error("key may not be null if value is not object or array");
    }
    return httpParams;
  }
  getAnalyticsBaseReport(id, observe = "body", reportProgress = false, options) {
    if (id === null || id === void 0) {
      throw new Error("Required parameter id was null or undefined when calling getAnalyticsBaseReport.");
    }
    let localVarHeaders = this.defaultHeaders;
    let localVarCredential;
    localVarCredential = this.configuration.lookupCredential("access_token");
    if (localVarCredential) {
      localVarHeaders = localVarHeaders.set("x-access-token", localVarCredential);
    }
    let localVarHttpHeaderAcceptSelected = options && options.httpHeaderAccept;
    if (localVarHttpHeaderAcceptSelected === void 0) {
      const httpHeaderAccepts = [
        "application/json"
      ];
      localVarHttpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
    }
    if (localVarHttpHeaderAcceptSelected !== void 0) {
      localVarHeaders = localVarHeaders.set("Accept", localVarHttpHeaderAcceptSelected);
    }
    let localVarHttpContext = options && options.context;
    if (localVarHttpContext === void 0) {
      localVarHttpContext = new HttpContext();
    }
    let localVarTransferCache = options && options.transferCache;
    if (localVarTransferCache === void 0) {
      localVarTransferCache = true;
    }
    let responseType_ = "json";
    if (localVarHttpHeaderAcceptSelected) {
      if (localVarHttpHeaderAcceptSelected.startsWith("text")) {
        responseType_ = "text";
      } else if (this.configuration.isJsonMime(localVarHttpHeaderAcceptSelected)) {
        responseType_ = "json";
      } else {
        responseType_ = "blob";
      }
    }
    let localVarPath = `/reports/analytics/${this.configuration.encodeParam({ name: "id", value: id, in: "path", style: "simple", explode: false, dataType: "string", dataFormat: void 0 })}`;
    return this.httpClient.request("get", `${this.configuration.basePath}${localVarPath}`, {
      context: localVarHttpContext,
      responseType: responseType_,
      withCredentials: this.configuration.withCredentials,
      headers: localVarHeaders,
      observe,
      transferCache: localVarTransferCache,
      reportProgress
    });
  }
  listAnalyticsBaseReports(owner, client, user, offset, limit, observe = "body", reportProgress = false, options) {
    let localVarQueryParameters = new HttpParams({ encoder: this.encoder });
    if (owner !== void 0 && owner !== null) {
      localVarQueryParameters = this.addToHttpParams(localVarQueryParameters, owner, "owner");
    }
    if (client !== void 0 && client !== null) {
      localVarQueryParameters = this.addToHttpParams(localVarQueryParameters, client, "client");
    }
    if (user !== void 0 && user !== null) {
      localVarQueryParameters = this.addToHttpParams(localVarQueryParameters, user, "user");
    }
    if (offset !== void 0 && offset !== null) {
      localVarQueryParameters = this.addToHttpParams(localVarQueryParameters, offset, "offset");
    }
    if (limit !== void 0 && limit !== null) {
      localVarQueryParameters = this.addToHttpParams(localVarQueryParameters, limit, "limit");
    }
    let localVarHeaders = this.defaultHeaders;
    let localVarCredential;
    localVarCredential = this.configuration.lookupCredential("access_token");
    if (localVarCredential) {
      localVarHeaders = localVarHeaders.set("x-access-token", localVarCredential);
    }
    let localVarHttpHeaderAcceptSelected = options && options.httpHeaderAccept;
    if (localVarHttpHeaderAcceptSelected === void 0) {
      const httpHeaderAccepts = [
        "application/json"
      ];
      localVarHttpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
    }
    if (localVarHttpHeaderAcceptSelected !== void 0) {
      localVarHeaders = localVarHeaders.set("Accept", localVarHttpHeaderAcceptSelected);
    }
    let localVarHttpContext = options && options.context;
    if (localVarHttpContext === void 0) {
      localVarHttpContext = new HttpContext();
    }
    let localVarTransferCache = options && options.transferCache;
    if (localVarTransferCache === void 0) {
      localVarTransferCache = true;
    }
    let responseType_ = "json";
    if (localVarHttpHeaderAcceptSelected) {
      if (localVarHttpHeaderAcceptSelected.startsWith("text")) {
        responseType_ = "text";
      } else if (this.configuration.isJsonMime(localVarHttpHeaderAcceptSelected)) {
        responseType_ = "json";
      } else {
        responseType_ = "blob";
      }
    }
    let localVarPath = `/reports/analytics`;
    return this.httpClient.request("get", `${this.configuration.basePath}${localVarPath}`, {
      context: localVarHttpContext,
      params: localVarQueryParameters,
      responseType: responseType_,
      withCredentials: this.configuration.withCredentials,
      headers: localVarHeaders,
      observe,
      transferCache: localVarTransferCache,
      reportProgress
    });
  }
  rebuildAnalyticsBaseReport(id, observe = "body", reportProgress = false, options) {
    if (id === null || id === void 0) {
      throw new Error("Required parameter id was null or undefined when calling rebuildAnalyticsBaseReport.");
    }
    let localVarHeaders = this.defaultHeaders;
    let localVarCredential;
    localVarCredential = this.configuration.lookupCredential("access_token");
    if (localVarCredential) {
      localVarHeaders = localVarHeaders.set("x-access-token", localVarCredential);
    }
    let localVarHttpHeaderAcceptSelected = options && options.httpHeaderAccept;
    if (localVarHttpHeaderAcceptSelected === void 0) {
      const httpHeaderAccepts = [];
      localVarHttpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
    }
    if (localVarHttpHeaderAcceptSelected !== void 0) {
      localVarHeaders = localVarHeaders.set("Accept", localVarHttpHeaderAcceptSelected);
    }
    let localVarHttpContext = options && options.context;
    if (localVarHttpContext === void 0) {
      localVarHttpContext = new HttpContext();
    }
    let localVarTransferCache = options && options.transferCache;
    if (localVarTransferCache === void 0) {
      localVarTransferCache = true;
    }
    let responseType_ = "json";
    if (localVarHttpHeaderAcceptSelected) {
      if (localVarHttpHeaderAcceptSelected.startsWith("text")) {
        responseType_ = "text";
      } else if (this.configuration.isJsonMime(localVarHttpHeaderAcceptSelected)) {
        responseType_ = "json";
      } else {
        responseType_ = "blob";
      }
    }
    let localVarPath = `/reports/analytics/${this.configuration.encodeParam({ name: "id", value: id, in: "path", style: "simple", explode: false, dataType: "string", dataFormat: void 0 })}/rebuild`;
    return this.httpClient.request("post", `${this.configuration.basePath}${localVarPath}`, {
      context: localVarHttpContext,
      responseType: responseType_,
      withCredentials: this.configuration.withCredentials,
      headers: localVarHeaders,
      observe,
      transferCache: localVarTransferCache,
      reportProgress
    });
  }
  static \u0275fac = function AnalyticsService_Factory(__ngFactoryType__) {
    return new (__ngFactoryType__ || _AnalyticsService)(\u0275\u0275inject(HttpClient), \u0275\u0275inject(BASE_PATH, 8), \u0275\u0275inject(Configuration, 8));
  };
  static \u0275prov = /* @__PURE__ */ \u0275\u0275defineInjectable({ token: _AnalyticsService, factory: _AnalyticsService.\u0275fac, providedIn: "root" });
};
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(AnalyticsService, [{
    type: Injectable,
    args: [{
      providedIn: "root"
    }]
  }], () => [{ type: HttpClient }, { type: void 0, decorators: [{
    type: Optional
  }, {
    type: Inject,
    args: [BASE_PATH]
  }] }, { type: Configuration, decorators: [{
    type: Optional
  }] }], null);
})();

// src/app/api/api/assetCategories.service.ts
var AssetCategoriesService = class _AssetCategoriesService {
  httpClient;
  basePath = "";
  defaultHeaders = new HttpHeaders();
  configuration = new Configuration();
  encoder;
  constructor(httpClient, basePath, configuration) {
    this.httpClient = httpClient;
    if (configuration) {
      this.configuration = configuration;
    }
    if (typeof this.configuration.basePath !== "string") {
      const firstBasePath = Array.isArray(basePath) ? basePath[0] : void 0;
      if (firstBasePath != void 0) {
        basePath = firstBasePath;
      }
      if (typeof basePath !== "string") {
        basePath = this.basePath;
      }
      this.configuration.basePath = basePath;
    }
    this.encoder = this.configuration.encoder || new CustomHttpParameterCodec();
  }
  // @ts-ignore
  addToHttpParams(httpParams, value, key) {
    if (typeof value === "object" && value instanceof Date === false) {
      httpParams = this.addToHttpParamsRecursive(httpParams, value);
    } else {
      httpParams = this.addToHttpParamsRecursive(httpParams, value, key);
    }
    return httpParams;
  }
  addToHttpParamsRecursive(httpParams, value, key) {
    if (value == null) {
      return httpParams;
    }
    if (typeof value === "object") {
      if (Array.isArray(value)) {
        value.forEach((elem) => httpParams = this.addToHttpParamsRecursive(httpParams, elem, key));
      } else if (value instanceof Date) {
        if (key != null) {
          httpParams = httpParams.append(key, value.toISOString().substring(0, 10));
        } else {
          throw Error("key may not be null if value is Date");
        }
      } else {
        Object.keys(value).forEach((k) => httpParams = this.addToHttpParamsRecursive(httpParams, value[k], key != null ? `${key}.${k}` : k));
      }
    } else if (key != null) {
      httpParams = httpParams.append(key, value);
    } else {
      throw Error("key may not be null if value is not object or array");
    }
    return httpParams;
  }
  createAssetCategory(request, observe = "body", reportProgress = false, options) {
    if (request === null || request === void 0) {
      throw new Error("Required parameter request was null or undefined when calling createAssetCategory.");
    }
    let localVarHeaders = this.defaultHeaders;
    let localVarCredential;
    localVarCredential = this.configuration.lookupCredential("access_token");
    if (localVarCredential) {
      localVarHeaders = localVarHeaders.set("x-access-token", localVarCredential);
    }
    let localVarHttpHeaderAcceptSelected = options && options.httpHeaderAccept;
    if (localVarHttpHeaderAcceptSelected === void 0) {
      const httpHeaderAccepts = [
        "application/json"
      ];
      localVarHttpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
    }
    if (localVarHttpHeaderAcceptSelected !== void 0) {
      localVarHeaders = localVarHeaders.set("Accept", localVarHttpHeaderAcceptSelected);
    }
    let localVarHttpContext = options && options.context;
    if (localVarHttpContext === void 0) {
      localVarHttpContext = new HttpContext();
    }
    let localVarTransferCache = options && options.transferCache;
    if (localVarTransferCache === void 0) {
      localVarTransferCache = true;
    }
    const consumes = [
      "application/json"
    ];
    const httpContentTypeSelected = this.configuration.selectHeaderContentType(consumes);
    if (httpContentTypeSelected !== void 0) {
      localVarHeaders = localVarHeaders.set("Content-Type", httpContentTypeSelected);
    }
    let responseType_ = "json";
    if (localVarHttpHeaderAcceptSelected) {
      if (localVarHttpHeaderAcceptSelected.startsWith("text")) {
        responseType_ = "text";
      } else if (this.configuration.isJsonMime(localVarHttpHeaderAcceptSelected)) {
        responseType_ = "json";
      } else {
        responseType_ = "blob";
      }
    }
    let localVarPath = `/entities/assetcategories`;
    return this.httpClient.request("post", `${this.configuration.basePath}${localVarPath}`, {
      context: localVarHttpContext,
      body: request,
      responseType: responseType_,
      withCredentials: this.configuration.withCredentials,
      headers: localVarHeaders,
      observe,
      transferCache: localVarTransferCache,
      reportProgress
    });
  }
  deleteAssetCategory(id, observe = "body", reportProgress = false, options) {
    if (id === null || id === void 0) {
      throw new Error("Required parameter id was null or undefined when calling deleteAssetCategory.");
    }
    let localVarHeaders = this.defaultHeaders;
    let localVarCredential;
    localVarCredential = this.configuration.lookupCredential("access_token");
    if (localVarCredential) {
      localVarHeaders = localVarHeaders.set("x-access-token", localVarCredential);
    }
    let localVarHttpHeaderAcceptSelected = options && options.httpHeaderAccept;
    if (localVarHttpHeaderAcceptSelected === void 0) {
      const httpHeaderAccepts = [
        "application/json"
      ];
      localVarHttpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
    }
    if (localVarHttpHeaderAcceptSelected !== void 0) {
      localVarHeaders = localVarHeaders.set("Accept", localVarHttpHeaderAcceptSelected);
    }
    let localVarHttpContext = options && options.context;
    if (localVarHttpContext === void 0) {
      localVarHttpContext = new HttpContext();
    }
    let localVarTransferCache = options && options.transferCache;
    if (localVarTransferCache === void 0) {
      localVarTransferCache = true;
    }
    let responseType_ = "json";
    if (localVarHttpHeaderAcceptSelected) {
      if (localVarHttpHeaderAcceptSelected.startsWith("text")) {
        responseType_ = "text";
      } else if (this.configuration.isJsonMime(localVarHttpHeaderAcceptSelected)) {
        responseType_ = "json";
      } else {
        responseType_ = "blob";
      }
    }
    let localVarPath = `/entities/assetcategories/${this.configuration.encodeParam({ name: "id", value: id, in: "path", style: "simple", explode: false, dataType: "string", dataFormat: void 0 })}`;
    return this.httpClient.request("delete", `${this.configuration.basePath}${localVarPath}`, {
      context: localVarHttpContext,
      responseType: responseType_,
      withCredentials: this.configuration.withCredentials,
      headers: localVarHeaders,
      observe,
      transferCache: localVarTransferCache,
      reportProgress
    });
  }
  getAssetCategory(id, observe = "body", reportProgress = false, options) {
    if (id === null || id === void 0) {
      throw new Error("Required parameter id was null or undefined when calling getAssetCategory.");
    }
    let localVarHeaders = this.defaultHeaders;
    let localVarCredential;
    localVarCredential = this.configuration.lookupCredential("access_token");
    if (localVarCredential) {
      localVarHeaders = localVarHeaders.set("x-access-token", localVarCredential);
    }
    let localVarHttpHeaderAcceptSelected = options && options.httpHeaderAccept;
    if (localVarHttpHeaderAcceptSelected === void 0) {
      const httpHeaderAccepts = [
        "application/json"
      ];
      localVarHttpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
    }
    if (localVarHttpHeaderAcceptSelected !== void 0) {
      localVarHeaders = localVarHeaders.set("Accept", localVarHttpHeaderAcceptSelected);
    }
    let localVarHttpContext = options && options.context;
    if (localVarHttpContext === void 0) {
      localVarHttpContext = new HttpContext();
    }
    let localVarTransferCache = options && options.transferCache;
    if (localVarTransferCache === void 0) {
      localVarTransferCache = true;
    }
    let responseType_ = "json";
    if (localVarHttpHeaderAcceptSelected) {
      if (localVarHttpHeaderAcceptSelected.startsWith("text")) {
        responseType_ = "text";
      } else if (this.configuration.isJsonMime(localVarHttpHeaderAcceptSelected)) {
        responseType_ = "json";
      } else {
        responseType_ = "blob";
      }
    }
    let localVarPath = `/entities/assetcategories/${this.configuration.encodeParam({ name: "id", value: id, in: "path", style: "simple", explode: false, dataType: "string", dataFormat: void 0 })}`;
    return this.httpClient.request("get", `${this.configuration.basePath}${localVarPath}`, {
      context: localVarHttpContext,
      responseType: responseType_,
      withCredentials: this.configuration.withCredentials,
      headers: localVarHeaders,
      observe,
      transferCache: localVarTransferCache,
      reportProgress
    });
  }
  listAssetCategories(owner, offset, limit, sort, filter, observe = "body", reportProgress = false, options) {
    if (owner === null || owner === void 0) {
      throw new Error("Required parameter owner was null or undefined when calling listAssetCategories.");
    }
    let localVarQueryParameters = new HttpParams({ encoder: this.encoder });
    if (owner !== void 0 && owner !== null) {
      localVarQueryParameters = this.addToHttpParams(localVarQueryParameters, owner, "owner");
    }
    if (offset !== void 0 && offset !== null) {
      localVarQueryParameters = this.addToHttpParams(localVarQueryParameters, offset, "offset");
    }
    if (limit !== void 0 && limit !== null) {
      localVarQueryParameters = this.addToHttpParams(localVarQueryParameters, limit, "limit");
    }
    if (sort !== void 0 && sort !== null) {
      localVarQueryParameters = this.addToHttpParams(localVarQueryParameters, sort, "sort");
    }
    if (filter !== void 0 && filter !== null) {
      localVarQueryParameters = this.addToHttpParams(localVarQueryParameters, filter, "filter");
    }
    let localVarHeaders = this.defaultHeaders;
    let localVarCredential;
    localVarCredential = this.configuration.lookupCredential("access_token");
    if (localVarCredential) {
      localVarHeaders = localVarHeaders.set("x-access-token", localVarCredential);
    }
    let localVarHttpHeaderAcceptSelected = options && options.httpHeaderAccept;
    if (localVarHttpHeaderAcceptSelected === void 0) {
      const httpHeaderAccepts = [
        "application/json"
      ];
      localVarHttpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
    }
    if (localVarHttpHeaderAcceptSelected !== void 0) {
      localVarHeaders = localVarHeaders.set("Accept", localVarHttpHeaderAcceptSelected);
    }
    let localVarHttpContext = options && options.context;
    if (localVarHttpContext === void 0) {
      localVarHttpContext = new HttpContext();
    }
    let localVarTransferCache = options && options.transferCache;
    if (localVarTransferCache === void 0) {
      localVarTransferCache = true;
    }
    let responseType_ = "json";
    if (localVarHttpHeaderAcceptSelected) {
      if (localVarHttpHeaderAcceptSelected.startsWith("text")) {
        responseType_ = "text";
      } else if (this.configuration.isJsonMime(localVarHttpHeaderAcceptSelected)) {
        responseType_ = "json";
      } else {
        responseType_ = "blob";
      }
    }
    let localVarPath = `/entities/assetcategories`;
    return this.httpClient.request("get", `${this.configuration.basePath}${localVarPath}`, {
      context: localVarHttpContext,
      params: localVarQueryParameters,
      responseType: responseType_,
      withCredentials: this.configuration.withCredentials,
      headers: localVarHeaders,
      observe,
      transferCache: localVarTransferCache,
      reportProgress
    });
  }
  updateAssetCategory(id, request, observe = "body", reportProgress = false, options) {
    if (id === null || id === void 0) {
      throw new Error("Required parameter id was null or undefined when calling updateAssetCategory.");
    }
    if (request === null || request === void 0) {
      throw new Error("Required parameter request was null or undefined when calling updateAssetCategory.");
    }
    let localVarHeaders = this.defaultHeaders;
    let localVarCredential;
    localVarCredential = this.configuration.lookupCredential("access_token");
    if (localVarCredential) {
      localVarHeaders = localVarHeaders.set("x-access-token", localVarCredential);
    }
    let localVarHttpHeaderAcceptSelected = options && options.httpHeaderAccept;
    if (localVarHttpHeaderAcceptSelected === void 0) {
      const httpHeaderAccepts = [
        "application/json"
      ];
      localVarHttpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
    }
    if (localVarHttpHeaderAcceptSelected !== void 0) {
      localVarHeaders = localVarHeaders.set("Accept", localVarHttpHeaderAcceptSelected);
    }
    let localVarHttpContext = options && options.context;
    if (localVarHttpContext === void 0) {
      localVarHttpContext = new HttpContext();
    }
    let localVarTransferCache = options && options.transferCache;
    if (localVarTransferCache === void 0) {
      localVarTransferCache = true;
    }
    const consumes = [
      "application/json"
    ];
    const httpContentTypeSelected = this.configuration.selectHeaderContentType(consumes);
    if (httpContentTypeSelected !== void 0) {
      localVarHeaders = localVarHeaders.set("Content-Type", httpContentTypeSelected);
    }
    let responseType_ = "json";
    if (localVarHttpHeaderAcceptSelected) {
      if (localVarHttpHeaderAcceptSelected.startsWith("text")) {
        responseType_ = "text";
      } else if (this.configuration.isJsonMime(localVarHttpHeaderAcceptSelected)) {
        responseType_ = "json";
      } else {
        responseType_ = "blob";
      }
    }
    let localVarPath = `/entities/assetcategories/${this.configuration.encodeParam({ name: "id", value: id, in: "path", style: "simple", explode: false, dataType: "string", dataFormat: void 0 })}`;
    return this.httpClient.request("put", `${this.configuration.basePath}${localVarPath}`, {
      context: localVarHttpContext,
      body: request,
      responseType: responseType_,
      withCredentials: this.configuration.withCredentials,
      headers: localVarHeaders,
      observe,
      transferCache: localVarTransferCache,
      reportProgress
    });
  }
  static \u0275fac = function AssetCategoriesService_Factory(__ngFactoryType__) {
    return new (__ngFactoryType__ || _AssetCategoriesService)(\u0275\u0275inject(HttpClient), \u0275\u0275inject(BASE_PATH, 8), \u0275\u0275inject(Configuration, 8));
  };
  static \u0275prov = /* @__PURE__ */ \u0275\u0275defineInjectable({ token: _AssetCategoriesService, factory: _AssetCategoriesService.\u0275fac, providedIn: "root" });
};
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(AssetCategoriesService, [{
    type: Injectable,
    args: [{
      providedIn: "root"
    }]
  }], () => [{ type: HttpClient }, { type: void 0, decorators: [{
    type: Optional
  }, {
    type: Inject,
    args: [BASE_PATH]
  }] }, { type: Configuration, decorators: [{
    type: Optional
  }] }], null);
})();

// src/app/api/api/assetGroups.service.ts
var AssetGroupsService = class _AssetGroupsService {
  httpClient;
  basePath = "";
  defaultHeaders = new HttpHeaders();
  configuration = new Configuration();
  encoder;
  constructor(httpClient, basePath, configuration) {
    this.httpClient = httpClient;
    if (configuration) {
      this.configuration = configuration;
    }
    if (typeof this.configuration.basePath !== "string") {
      const firstBasePath = Array.isArray(basePath) ? basePath[0] : void 0;
      if (firstBasePath != void 0) {
        basePath = firstBasePath;
      }
      if (typeof basePath !== "string") {
        basePath = this.basePath;
      }
      this.configuration.basePath = basePath;
    }
    this.encoder = this.configuration.encoder || new CustomHttpParameterCodec();
  }
  // @ts-ignore
  addToHttpParams(httpParams, value, key) {
    if (typeof value === "object" && value instanceof Date === false) {
      httpParams = this.addToHttpParamsRecursive(httpParams, value);
    } else {
      httpParams = this.addToHttpParamsRecursive(httpParams, value, key);
    }
    return httpParams;
  }
  addToHttpParamsRecursive(httpParams, value, key) {
    if (value == null) {
      return httpParams;
    }
    if (typeof value === "object") {
      if (Array.isArray(value)) {
        value.forEach((elem) => httpParams = this.addToHttpParamsRecursive(httpParams, elem, key));
      } else if (value instanceof Date) {
        if (key != null) {
          httpParams = httpParams.append(key, value.toISOString().substring(0, 10));
        } else {
          throw Error("key may not be null if value is Date");
        }
      } else {
        Object.keys(value).forEach((k) => httpParams = this.addToHttpParamsRecursive(httpParams, value[k], key != null ? `${key}.${k}` : k));
      }
    } else if (key != null) {
      httpParams = httpParams.append(key, value);
    } else {
      throw Error("key may not be null if value is not object or array");
    }
    return httpParams;
  }
  createAssetGroup(request, observe = "body", reportProgress = false, options) {
    if (request === null || request === void 0) {
      throw new Error("Required parameter request was null or undefined when calling createAssetGroup.");
    }
    let localVarHeaders = this.defaultHeaders;
    let localVarCredential;
    localVarCredential = this.configuration.lookupCredential("access_token");
    if (localVarCredential) {
      localVarHeaders = localVarHeaders.set("x-access-token", localVarCredential);
    }
    let localVarHttpHeaderAcceptSelected = options && options.httpHeaderAccept;
    if (localVarHttpHeaderAcceptSelected === void 0) {
      const httpHeaderAccepts = [
        "application/json"
      ];
      localVarHttpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
    }
    if (localVarHttpHeaderAcceptSelected !== void 0) {
      localVarHeaders = localVarHeaders.set("Accept", localVarHttpHeaderAcceptSelected);
    }
    let localVarHttpContext = options && options.context;
    if (localVarHttpContext === void 0) {
      localVarHttpContext = new HttpContext();
    }
    let localVarTransferCache = options && options.transferCache;
    if (localVarTransferCache === void 0) {
      localVarTransferCache = true;
    }
    const consumes = [
      "application/json"
    ];
    const httpContentTypeSelected = this.configuration.selectHeaderContentType(consumes);
    if (httpContentTypeSelected !== void 0) {
      localVarHeaders = localVarHeaders.set("Content-Type", httpContentTypeSelected);
    }
    let responseType_ = "json";
    if (localVarHttpHeaderAcceptSelected) {
      if (localVarHttpHeaderAcceptSelected.startsWith("text")) {
        responseType_ = "text";
      } else if (this.configuration.isJsonMime(localVarHttpHeaderAcceptSelected)) {
        responseType_ = "json";
      } else {
        responseType_ = "blob";
      }
    }
    let localVarPath = `/entities/assetgroups`;
    return this.httpClient.request("post", `${this.configuration.basePath}${localVarPath}`, {
      context: localVarHttpContext,
      body: request,
      responseType: responseType_,
      withCredentials: this.configuration.withCredentials,
      headers: localVarHeaders,
      observe,
      transferCache: localVarTransferCache,
      reportProgress
    });
  }
  deleteAssetGroup(id, observe = "body", reportProgress = false, options) {
    if (id === null || id === void 0) {
      throw new Error("Required parameter id was null or undefined when calling deleteAssetGroup.");
    }
    let localVarHeaders = this.defaultHeaders;
    let localVarCredential;
    localVarCredential = this.configuration.lookupCredential("access_token");
    if (localVarCredential) {
      localVarHeaders = localVarHeaders.set("x-access-token", localVarCredential);
    }
    let localVarHttpHeaderAcceptSelected = options && options.httpHeaderAccept;
    if (localVarHttpHeaderAcceptSelected === void 0) {
      const httpHeaderAccepts = [
        "application/json"
      ];
      localVarHttpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
    }
    if (localVarHttpHeaderAcceptSelected !== void 0) {
      localVarHeaders = localVarHeaders.set("Accept", localVarHttpHeaderAcceptSelected);
    }
    let localVarHttpContext = options && options.context;
    if (localVarHttpContext === void 0) {
      localVarHttpContext = new HttpContext();
    }
    let localVarTransferCache = options && options.transferCache;
    if (localVarTransferCache === void 0) {
      localVarTransferCache = true;
    }
    let responseType_ = "json";
    if (localVarHttpHeaderAcceptSelected) {
      if (localVarHttpHeaderAcceptSelected.startsWith("text")) {
        responseType_ = "text";
      } else if (this.configuration.isJsonMime(localVarHttpHeaderAcceptSelected)) {
        responseType_ = "json";
      } else {
        responseType_ = "blob";
      }
    }
    let localVarPath = `/entities/assetgroups/${this.configuration.encodeParam({ name: "id", value: id, in: "path", style: "simple", explode: false, dataType: "string", dataFormat: void 0 })}`;
    return this.httpClient.request("delete", `${this.configuration.basePath}${localVarPath}`, {
      context: localVarHttpContext,
      responseType: responseType_,
      withCredentials: this.configuration.withCredentials,
      headers: localVarHeaders,
      observe,
      transferCache: localVarTransferCache,
      reportProgress
    });
  }
  getAssetGroup(id, observe = "body", reportProgress = false, options) {
    if (id === null || id === void 0) {
      throw new Error("Required parameter id was null or undefined when calling getAssetGroup.");
    }
    let localVarHeaders = this.defaultHeaders;
    let localVarCredential;
    localVarCredential = this.configuration.lookupCredential("access_token");
    if (localVarCredential) {
      localVarHeaders = localVarHeaders.set("x-access-token", localVarCredential);
    }
    let localVarHttpHeaderAcceptSelected = options && options.httpHeaderAccept;
    if (localVarHttpHeaderAcceptSelected === void 0) {
      const httpHeaderAccepts = [
        "application/json"
      ];
      localVarHttpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
    }
    if (localVarHttpHeaderAcceptSelected !== void 0) {
      localVarHeaders = localVarHeaders.set("Accept", localVarHttpHeaderAcceptSelected);
    }
    let localVarHttpContext = options && options.context;
    if (localVarHttpContext === void 0) {
      localVarHttpContext = new HttpContext();
    }
    let localVarTransferCache = options && options.transferCache;
    if (localVarTransferCache === void 0) {
      localVarTransferCache = true;
    }
    let responseType_ = "json";
    if (localVarHttpHeaderAcceptSelected) {
      if (localVarHttpHeaderAcceptSelected.startsWith("text")) {
        responseType_ = "text";
      } else if (this.configuration.isJsonMime(localVarHttpHeaderAcceptSelected)) {
        responseType_ = "json";
      } else {
        responseType_ = "blob";
      }
    }
    let localVarPath = `/entities/assetgroups/${this.configuration.encodeParam({ name: "id", value: id, in: "path", style: "simple", explode: false, dataType: "string", dataFormat: void 0 })}`;
    return this.httpClient.request("get", `${this.configuration.basePath}${localVarPath}`, {
      context: localVarHttpContext,
      responseType: responseType_,
      withCredentials: this.configuration.withCredentials,
      headers: localVarHeaders,
      observe,
      transferCache: localVarTransferCache,
      reportProgress
    });
  }
  listAssetGroups(owner, offset, limit, sort, filter, observe = "body", reportProgress = false, options) {
    if (owner === null || owner === void 0) {
      throw new Error("Required parameter owner was null or undefined when calling listAssetGroups.");
    }
    let localVarQueryParameters = new HttpParams({ encoder: this.encoder });
    if (owner !== void 0 && owner !== null) {
      localVarQueryParameters = this.addToHttpParams(localVarQueryParameters, owner, "owner");
    }
    if (offset !== void 0 && offset !== null) {
      localVarQueryParameters = this.addToHttpParams(localVarQueryParameters, offset, "offset");
    }
    if (limit !== void 0 && limit !== null) {
      localVarQueryParameters = this.addToHttpParams(localVarQueryParameters, limit, "limit");
    }
    if (sort !== void 0 && sort !== null) {
      localVarQueryParameters = this.addToHttpParams(localVarQueryParameters, sort, "sort");
    }
    if (filter !== void 0 && filter !== null) {
      localVarQueryParameters = this.addToHttpParams(localVarQueryParameters, filter, "filter");
    }
    let localVarHeaders = this.defaultHeaders;
    let localVarCredential;
    localVarCredential = this.configuration.lookupCredential("access_token");
    if (localVarCredential) {
      localVarHeaders = localVarHeaders.set("x-access-token", localVarCredential);
    }
    let localVarHttpHeaderAcceptSelected = options && options.httpHeaderAccept;
    if (localVarHttpHeaderAcceptSelected === void 0) {
      const httpHeaderAccepts = [
        "application/json"
      ];
      localVarHttpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
    }
    if (localVarHttpHeaderAcceptSelected !== void 0) {
      localVarHeaders = localVarHeaders.set("Accept", localVarHttpHeaderAcceptSelected);
    }
    let localVarHttpContext = options && options.context;
    if (localVarHttpContext === void 0) {
      localVarHttpContext = new HttpContext();
    }
    let localVarTransferCache = options && options.transferCache;
    if (localVarTransferCache === void 0) {
      localVarTransferCache = true;
    }
    let responseType_ = "json";
    if (localVarHttpHeaderAcceptSelected) {
      if (localVarHttpHeaderAcceptSelected.startsWith("text")) {
        responseType_ = "text";
      } else if (this.configuration.isJsonMime(localVarHttpHeaderAcceptSelected)) {
        responseType_ = "json";
      } else {
        responseType_ = "blob";
      }
    }
    let localVarPath = `/entities/assetgroups`;
    return this.httpClient.request("get", `${this.configuration.basePath}${localVarPath}`, {
      context: localVarHttpContext,
      params: localVarQueryParameters,
      responseType: responseType_,
      withCredentials: this.configuration.withCredentials,
      headers: localVarHeaders,
      observe,
      transferCache: localVarTransferCache,
      reportProgress
    });
  }
  updateAssetGroup(id, request, observe = "body", reportProgress = false, options) {
    if (id === null || id === void 0) {
      throw new Error("Required parameter id was null or undefined when calling updateAssetGroup.");
    }
    if (request === null || request === void 0) {
      throw new Error("Required parameter request was null or undefined when calling updateAssetGroup.");
    }
    let localVarHeaders = this.defaultHeaders;
    let localVarCredential;
    localVarCredential = this.configuration.lookupCredential("access_token");
    if (localVarCredential) {
      localVarHeaders = localVarHeaders.set("x-access-token", localVarCredential);
    }
    let localVarHttpHeaderAcceptSelected = options && options.httpHeaderAccept;
    if (localVarHttpHeaderAcceptSelected === void 0) {
      const httpHeaderAccepts = [
        "application/json"
      ];
      localVarHttpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
    }
    if (localVarHttpHeaderAcceptSelected !== void 0) {
      localVarHeaders = localVarHeaders.set("Accept", localVarHttpHeaderAcceptSelected);
    }
    let localVarHttpContext = options && options.context;
    if (localVarHttpContext === void 0) {
      localVarHttpContext = new HttpContext();
    }
    let localVarTransferCache = options && options.transferCache;
    if (localVarTransferCache === void 0) {
      localVarTransferCache = true;
    }
    const consumes = [
      "application/json"
    ];
    const httpContentTypeSelected = this.configuration.selectHeaderContentType(consumes);
    if (httpContentTypeSelected !== void 0) {
      localVarHeaders = localVarHeaders.set("Content-Type", httpContentTypeSelected);
    }
    let responseType_ = "json";
    if (localVarHttpHeaderAcceptSelected) {
      if (localVarHttpHeaderAcceptSelected.startsWith("text")) {
        responseType_ = "text";
      } else if (this.configuration.isJsonMime(localVarHttpHeaderAcceptSelected)) {
        responseType_ = "json";
      } else {
        responseType_ = "blob";
      }
    }
    let localVarPath = `/entities/assetgroups/${this.configuration.encodeParam({ name: "id", value: id, in: "path", style: "simple", explode: false, dataType: "string", dataFormat: void 0 })}`;
    return this.httpClient.request("put", `${this.configuration.basePath}${localVarPath}`, {
      context: localVarHttpContext,
      body: request,
      responseType: responseType_,
      withCredentials: this.configuration.withCredentials,
      headers: localVarHeaders,
      observe,
      transferCache: localVarTransferCache,
      reportProgress
    });
  }
  static \u0275fac = function AssetGroupsService_Factory(__ngFactoryType__) {
    return new (__ngFactoryType__ || _AssetGroupsService)(\u0275\u0275inject(HttpClient), \u0275\u0275inject(BASE_PATH, 8), \u0275\u0275inject(Configuration, 8));
  };
  static \u0275prov = /* @__PURE__ */ \u0275\u0275defineInjectable({ token: _AssetGroupsService, factory: _AssetGroupsService.\u0275fac, providedIn: "root" });
};
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(AssetGroupsService, [{
    type: Injectable,
    args: [{
      providedIn: "root"
    }]
  }], () => [{ type: HttpClient }, { type: void 0, decorators: [{
    type: Optional
  }, {
    type: Inject,
    args: [BASE_PATH]
  }] }, { type: Configuration, decorators: [{
    type: Optional
  }] }], null);
})();

// src/app/api/api/assetRatingProfiles.service.ts
var AssetRatingProfilesService = class _AssetRatingProfilesService {
  httpClient;
  basePath = "";
  defaultHeaders = new HttpHeaders();
  configuration = new Configuration();
  encoder;
  constructor(httpClient, basePath, configuration) {
    this.httpClient = httpClient;
    if (configuration) {
      this.configuration = configuration;
    }
    if (typeof this.configuration.basePath !== "string") {
      const firstBasePath = Array.isArray(basePath) ? basePath[0] : void 0;
      if (firstBasePath != void 0) {
        basePath = firstBasePath;
      }
      if (typeof basePath !== "string") {
        basePath = this.basePath;
      }
      this.configuration.basePath = basePath;
    }
    this.encoder = this.configuration.encoder || new CustomHttpParameterCodec();
  }
  // @ts-ignore
  addToHttpParams(httpParams, value, key) {
    if (typeof value === "object" && value instanceof Date === false) {
      httpParams = this.addToHttpParamsRecursive(httpParams, value);
    } else {
      httpParams = this.addToHttpParamsRecursive(httpParams, value, key);
    }
    return httpParams;
  }
  addToHttpParamsRecursive(httpParams, value, key) {
    if (value == null) {
      return httpParams;
    }
    if (typeof value === "object") {
      if (Array.isArray(value)) {
        value.forEach((elem) => httpParams = this.addToHttpParamsRecursive(httpParams, elem, key));
      } else if (value instanceof Date) {
        if (key != null) {
          httpParams = httpParams.append(key, value.toISOString().substring(0, 10));
        } else {
          throw Error("key may not be null if value is Date");
        }
      } else {
        Object.keys(value).forEach((k) => httpParams = this.addToHttpParamsRecursive(httpParams, value[k], key != null ? `${key}.${k}` : k));
      }
    } else if (key != null) {
      httpParams = httpParams.append(key, value);
    } else {
      throw Error("key may not be null if value is not object or array");
    }
    return httpParams;
  }
  createAssetRatingProfile(request, observe = "body", reportProgress = false, options) {
    if (request === null || request === void 0) {
      throw new Error("Required parameter request was null or undefined when calling createAssetRatingProfile.");
    }
    let localVarHeaders = this.defaultHeaders;
    let localVarCredential;
    localVarCredential = this.configuration.lookupCredential("access_token");
    if (localVarCredential) {
      localVarHeaders = localVarHeaders.set("x-access-token", localVarCredential);
    }
    let localVarHttpHeaderAcceptSelected = options && options.httpHeaderAccept;
    if (localVarHttpHeaderAcceptSelected === void 0) {
      const httpHeaderAccepts = [
        "application/json"
      ];
      localVarHttpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
    }
    if (localVarHttpHeaderAcceptSelected !== void 0) {
      localVarHeaders = localVarHeaders.set("Accept", localVarHttpHeaderAcceptSelected);
    }
    let localVarHttpContext = options && options.context;
    if (localVarHttpContext === void 0) {
      localVarHttpContext = new HttpContext();
    }
    let localVarTransferCache = options && options.transferCache;
    if (localVarTransferCache === void 0) {
      localVarTransferCache = true;
    }
    const consumes = [
      "application/json"
    ];
    const httpContentTypeSelected = this.configuration.selectHeaderContentType(consumes);
    if (httpContentTypeSelected !== void 0) {
      localVarHeaders = localVarHeaders.set("Content-Type", httpContentTypeSelected);
    }
    let responseType_ = "json";
    if (localVarHttpHeaderAcceptSelected) {
      if (localVarHttpHeaderAcceptSelected.startsWith("text")) {
        responseType_ = "text";
      } else if (this.configuration.isJsonMime(localVarHttpHeaderAcceptSelected)) {
        responseType_ = "json";
      } else {
        responseType_ = "blob";
      }
    }
    let localVarPath = `/entities/assetratingprofiles`;
    return this.httpClient.request("post", `${this.configuration.basePath}${localVarPath}`, {
      context: localVarHttpContext,
      body: request,
      responseType: responseType_,
      withCredentials: this.configuration.withCredentials,
      headers: localVarHeaders,
      observe,
      transferCache: localVarTransferCache,
      reportProgress
    });
  }
  getAssetRatingProfile(id, observe = "body", reportProgress = false, options) {
    if (id === null || id === void 0) {
      throw new Error("Required parameter id was null or undefined when calling getAssetRatingProfile.");
    }
    let localVarHeaders = this.defaultHeaders;
    let localVarCredential;
    localVarCredential = this.configuration.lookupCredential("access_token");
    if (localVarCredential) {
      localVarHeaders = localVarHeaders.set("x-access-token", localVarCredential);
    }
    let localVarHttpHeaderAcceptSelected = options && options.httpHeaderAccept;
    if (localVarHttpHeaderAcceptSelected === void 0) {
      const httpHeaderAccepts = [
        "application/json"
      ];
      localVarHttpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
    }
    if (localVarHttpHeaderAcceptSelected !== void 0) {
      localVarHeaders = localVarHeaders.set("Accept", localVarHttpHeaderAcceptSelected);
    }
    let localVarHttpContext = options && options.context;
    if (localVarHttpContext === void 0) {
      localVarHttpContext = new HttpContext();
    }
    let localVarTransferCache = options && options.transferCache;
    if (localVarTransferCache === void 0) {
      localVarTransferCache = true;
    }
    let responseType_ = "json";
    if (localVarHttpHeaderAcceptSelected) {
      if (localVarHttpHeaderAcceptSelected.startsWith("text")) {
        responseType_ = "text";
      } else if (this.configuration.isJsonMime(localVarHttpHeaderAcceptSelected)) {
        responseType_ = "json";
      } else {
        responseType_ = "blob";
      }
    }
    let localVarPath = `/entities/assetratingprofiles/${this.configuration.encodeParam({ name: "id", value: id, in: "path", style: "simple", explode: false, dataType: "string", dataFormat: void 0 })}`;
    return this.httpClient.request("get", `${this.configuration.basePath}${localVarPath}`, {
      context: localVarHttpContext,
      responseType: responseType_,
      withCredentials: this.configuration.withCredentials,
      headers: localVarHeaders,
      observe,
      transferCache: localVarTransferCache,
      reportProgress
    });
  }
  listAssetRatingProfiles(owner, offset, limit, sort, filter, observe = "body", reportProgress = false, options) {
    if (owner === null || owner === void 0) {
      throw new Error("Required parameter owner was null or undefined when calling listAssetRatingProfiles.");
    }
    let localVarQueryParameters = new HttpParams({ encoder: this.encoder });
    if (owner !== void 0 && owner !== null) {
      localVarQueryParameters = this.addToHttpParams(localVarQueryParameters, owner, "owner");
    }
    if (offset !== void 0 && offset !== null) {
      localVarQueryParameters = this.addToHttpParams(localVarQueryParameters, offset, "offset");
    }
    if (limit !== void 0 && limit !== null) {
      localVarQueryParameters = this.addToHttpParams(localVarQueryParameters, limit, "limit");
    }
    if (sort !== void 0 && sort !== null) {
      localVarQueryParameters = this.addToHttpParams(localVarQueryParameters, sort, "sort");
    }
    if (filter !== void 0 && filter !== null) {
      localVarQueryParameters = this.addToHttpParams(localVarQueryParameters, filter, "filter");
    }
    let localVarHeaders = this.defaultHeaders;
    let localVarCredential;
    localVarCredential = this.configuration.lookupCredential("access_token");
    if (localVarCredential) {
      localVarHeaders = localVarHeaders.set("x-access-token", localVarCredential);
    }
    let localVarHttpHeaderAcceptSelected = options && options.httpHeaderAccept;
    if (localVarHttpHeaderAcceptSelected === void 0) {
      const httpHeaderAccepts = [
        "application/json"
      ];
      localVarHttpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
    }
    if (localVarHttpHeaderAcceptSelected !== void 0) {
      localVarHeaders = localVarHeaders.set("Accept", localVarHttpHeaderAcceptSelected);
    }
    let localVarHttpContext = options && options.context;
    if (localVarHttpContext === void 0) {
      localVarHttpContext = new HttpContext();
    }
    let localVarTransferCache = options && options.transferCache;
    if (localVarTransferCache === void 0) {
      localVarTransferCache = true;
    }
    let responseType_ = "json";
    if (localVarHttpHeaderAcceptSelected) {
      if (localVarHttpHeaderAcceptSelected.startsWith("text")) {
        responseType_ = "text";
      } else if (this.configuration.isJsonMime(localVarHttpHeaderAcceptSelected)) {
        responseType_ = "json";
      } else {
        responseType_ = "blob";
      }
    }
    let localVarPath = `/entities/assetratingprofiles`;
    return this.httpClient.request("get", `${this.configuration.basePath}${localVarPath}`, {
      context: localVarHttpContext,
      params: localVarQueryParameters,
      responseType: responseType_,
      withCredentials: this.configuration.withCredentials,
      headers: localVarHeaders,
      observe,
      transferCache: localVarTransferCache,
      reportProgress
    });
  }
  updateAssetRatingProfile(id, request, observe = "body", reportProgress = false, options) {
    if (id === null || id === void 0) {
      throw new Error("Required parameter id was null or undefined when calling updateAssetRatingProfile.");
    }
    if (request === null || request === void 0) {
      throw new Error("Required parameter request was null or undefined when calling updateAssetRatingProfile.");
    }
    let localVarHeaders = this.defaultHeaders;
    let localVarCredential;
    localVarCredential = this.configuration.lookupCredential("access_token");
    if (localVarCredential) {
      localVarHeaders = localVarHeaders.set("x-access-token", localVarCredential);
    }
    let localVarHttpHeaderAcceptSelected = options && options.httpHeaderAccept;
    if (localVarHttpHeaderAcceptSelected === void 0) {
      const httpHeaderAccepts = [
        "application/json"
      ];
      localVarHttpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
    }
    if (localVarHttpHeaderAcceptSelected !== void 0) {
      localVarHeaders = localVarHeaders.set("Accept", localVarHttpHeaderAcceptSelected);
    }
    let localVarHttpContext = options && options.context;
    if (localVarHttpContext === void 0) {
      localVarHttpContext = new HttpContext();
    }
    let localVarTransferCache = options && options.transferCache;
    if (localVarTransferCache === void 0) {
      localVarTransferCache = true;
    }
    const consumes = [
      "application/json"
    ];
    const httpContentTypeSelected = this.configuration.selectHeaderContentType(consumes);
    if (httpContentTypeSelected !== void 0) {
      localVarHeaders = localVarHeaders.set("Content-Type", httpContentTypeSelected);
    }
    let responseType_ = "json";
    if (localVarHttpHeaderAcceptSelected) {
      if (localVarHttpHeaderAcceptSelected.startsWith("text")) {
        responseType_ = "text";
      } else if (this.configuration.isJsonMime(localVarHttpHeaderAcceptSelected)) {
        responseType_ = "json";
      } else {
        responseType_ = "blob";
      }
    }
    let localVarPath = `/entities/assetratingprofiles/${this.configuration.encodeParam({ name: "id", value: id, in: "path", style: "simple", explode: false, dataType: "string", dataFormat: void 0 })}`;
    return this.httpClient.request("put", `${this.configuration.basePath}${localVarPath}`, {
      context: localVarHttpContext,
      body: request,
      responseType: responseType_,
      withCredentials: this.configuration.withCredentials,
      headers: localVarHeaders,
      observe,
      transferCache: localVarTransferCache,
      reportProgress
    });
  }
  static \u0275fac = function AssetRatingProfilesService_Factory(__ngFactoryType__) {
    return new (__ngFactoryType__ || _AssetRatingProfilesService)(\u0275\u0275inject(HttpClient), \u0275\u0275inject(BASE_PATH, 8), \u0275\u0275inject(Configuration, 8));
  };
  static \u0275prov = /* @__PURE__ */ \u0275\u0275defineInjectable({ token: _AssetRatingProfilesService, factory: _AssetRatingProfilesService.\u0275fac, providedIn: "root" });
};
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(AssetRatingProfilesService, [{
    type: Injectable,
    args: [{
      providedIn: "root"
    }]
  }], () => [{ type: HttpClient }, { type: void 0, decorators: [{
    type: Optional
  }, {
    type: Inject,
    args: [BASE_PATH]
  }] }, { type: Configuration, decorators: [{
    type: Optional
  }] }], null);
})();

// src/app/api/api/assetStateProfiles.service.ts
var AssetStateProfilesService = class _AssetStateProfilesService {
  httpClient;
  basePath = "";
  defaultHeaders = new HttpHeaders();
  configuration = new Configuration();
  encoder;
  constructor(httpClient, basePath, configuration) {
    this.httpClient = httpClient;
    if (configuration) {
      this.configuration = configuration;
    }
    if (typeof this.configuration.basePath !== "string") {
      const firstBasePath = Array.isArray(basePath) ? basePath[0] : void 0;
      if (firstBasePath != void 0) {
        basePath = firstBasePath;
      }
      if (typeof basePath !== "string") {
        basePath = this.basePath;
      }
      this.configuration.basePath = basePath;
    }
    this.encoder = this.configuration.encoder || new CustomHttpParameterCodec();
  }
  // @ts-ignore
  addToHttpParams(httpParams, value, key) {
    if (typeof value === "object" && value instanceof Date === false) {
      httpParams = this.addToHttpParamsRecursive(httpParams, value);
    } else {
      httpParams = this.addToHttpParamsRecursive(httpParams, value, key);
    }
    return httpParams;
  }
  addToHttpParamsRecursive(httpParams, value, key) {
    if (value == null) {
      return httpParams;
    }
    if (typeof value === "object") {
      if (Array.isArray(value)) {
        value.forEach((elem) => httpParams = this.addToHttpParamsRecursive(httpParams, elem, key));
      } else if (value instanceof Date) {
        if (key != null) {
          httpParams = httpParams.append(key, value.toISOString().substring(0, 10));
        } else {
          throw Error("key may not be null if value is Date");
        }
      } else {
        Object.keys(value).forEach((k) => httpParams = this.addToHttpParamsRecursive(httpParams, value[k], key != null ? `${key}.${k}` : k));
      }
    } else if (key != null) {
      httpParams = httpParams.append(key, value);
    } else {
      throw Error("key may not be null if value is not object or array");
    }
    return httpParams;
  }
  createAssetStateProfile(request, observe = "body", reportProgress = false, options) {
    if (request === null || request === void 0) {
      throw new Error("Required parameter request was null or undefined when calling createAssetStateProfile.");
    }
    let localVarHeaders = this.defaultHeaders;
    let localVarCredential;
    localVarCredential = this.configuration.lookupCredential("access_token");
    if (localVarCredential) {
      localVarHeaders = localVarHeaders.set("x-access-token", localVarCredential);
    }
    let localVarHttpHeaderAcceptSelected = options && options.httpHeaderAccept;
    if (localVarHttpHeaderAcceptSelected === void 0) {
      const httpHeaderAccepts = [
        "application/json"
      ];
      localVarHttpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
    }
    if (localVarHttpHeaderAcceptSelected !== void 0) {
      localVarHeaders = localVarHeaders.set("Accept", localVarHttpHeaderAcceptSelected);
    }
    let localVarHttpContext = options && options.context;
    if (localVarHttpContext === void 0) {
      localVarHttpContext = new HttpContext();
    }
    let localVarTransferCache = options && options.transferCache;
    if (localVarTransferCache === void 0) {
      localVarTransferCache = true;
    }
    const consumes = [
      "application/json"
    ];
    const httpContentTypeSelected = this.configuration.selectHeaderContentType(consumes);
    if (httpContentTypeSelected !== void 0) {
      localVarHeaders = localVarHeaders.set("Content-Type", httpContentTypeSelected);
    }
    let responseType_ = "json";
    if (localVarHttpHeaderAcceptSelected) {
      if (localVarHttpHeaderAcceptSelected.startsWith("text")) {
        responseType_ = "text";
      } else if (this.configuration.isJsonMime(localVarHttpHeaderAcceptSelected)) {
        responseType_ = "json";
      } else {
        responseType_ = "blob";
      }
    }
    let localVarPath = `/entities/assetstateprofiles`;
    return this.httpClient.request("post", `${this.configuration.basePath}${localVarPath}`, {
      context: localVarHttpContext,
      body: request,
      responseType: responseType_,
      withCredentials: this.configuration.withCredentials,
      headers: localVarHeaders,
      observe,
      transferCache: localVarTransferCache,
      reportProgress
    });
  }
  getAssetStateProfile(id, observe = "body", reportProgress = false, options) {
    if (id === null || id === void 0) {
      throw new Error("Required parameter id was null or undefined when calling getAssetStateProfile.");
    }
    let localVarHeaders = this.defaultHeaders;
    let localVarCredential;
    localVarCredential = this.configuration.lookupCredential("access_token");
    if (localVarCredential) {
      localVarHeaders = localVarHeaders.set("x-access-token", localVarCredential);
    }
    let localVarHttpHeaderAcceptSelected = options && options.httpHeaderAccept;
    if (localVarHttpHeaderAcceptSelected === void 0) {
      const httpHeaderAccepts = [
        "application/json"
      ];
      localVarHttpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
    }
    if (localVarHttpHeaderAcceptSelected !== void 0) {
      localVarHeaders = localVarHeaders.set("Accept", localVarHttpHeaderAcceptSelected);
    }
    let localVarHttpContext = options && options.context;
    if (localVarHttpContext === void 0) {
      localVarHttpContext = new HttpContext();
    }
    let localVarTransferCache = options && options.transferCache;
    if (localVarTransferCache === void 0) {
      localVarTransferCache = true;
    }
    let responseType_ = "json";
    if (localVarHttpHeaderAcceptSelected) {
      if (localVarHttpHeaderAcceptSelected.startsWith("text")) {
        responseType_ = "text";
      } else if (this.configuration.isJsonMime(localVarHttpHeaderAcceptSelected)) {
        responseType_ = "json";
      } else {
        responseType_ = "blob";
      }
    }
    let localVarPath = `/entities/assetstateprofiles/${this.configuration.encodeParam({ name: "id", value: id, in: "path", style: "simple", explode: false, dataType: "string", dataFormat: void 0 })}`;
    return this.httpClient.request("get", `${this.configuration.basePath}${localVarPath}`, {
      context: localVarHttpContext,
      responseType: responseType_,
      withCredentials: this.configuration.withCredentials,
      headers: localVarHeaders,
      observe,
      transferCache: localVarTransferCache,
      reportProgress
    });
  }
  listAssetStateProfiles(owner, offset, limit, sort, filter, observe = "body", reportProgress = false, options) {
    if (owner === null || owner === void 0) {
      throw new Error("Required parameter owner was null or undefined when calling listAssetStateProfiles.");
    }
    let localVarQueryParameters = new HttpParams({ encoder: this.encoder });
    if (owner !== void 0 && owner !== null) {
      localVarQueryParameters = this.addToHttpParams(localVarQueryParameters, owner, "owner");
    }
    if (offset !== void 0 && offset !== null) {
      localVarQueryParameters = this.addToHttpParams(localVarQueryParameters, offset, "offset");
    }
    if (limit !== void 0 && limit !== null) {
      localVarQueryParameters = this.addToHttpParams(localVarQueryParameters, limit, "limit");
    }
    if (sort !== void 0 && sort !== null) {
      localVarQueryParameters = this.addToHttpParams(localVarQueryParameters, sort, "sort");
    }
    if (filter !== void 0 && filter !== null) {
      localVarQueryParameters = this.addToHttpParams(localVarQueryParameters, filter, "filter");
    }
    let localVarHeaders = this.defaultHeaders;
    let localVarCredential;
    localVarCredential = this.configuration.lookupCredential("access_token");
    if (localVarCredential) {
      localVarHeaders = localVarHeaders.set("x-access-token", localVarCredential);
    }
    let localVarHttpHeaderAcceptSelected = options && options.httpHeaderAccept;
    if (localVarHttpHeaderAcceptSelected === void 0) {
      const httpHeaderAccepts = [
        "application/json"
      ];
      localVarHttpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
    }
    if (localVarHttpHeaderAcceptSelected !== void 0) {
      localVarHeaders = localVarHeaders.set("Accept", localVarHttpHeaderAcceptSelected);
    }
    let localVarHttpContext = options && options.context;
    if (localVarHttpContext === void 0) {
      localVarHttpContext = new HttpContext();
    }
    let localVarTransferCache = options && options.transferCache;
    if (localVarTransferCache === void 0) {
      localVarTransferCache = true;
    }
    let responseType_ = "json";
    if (localVarHttpHeaderAcceptSelected) {
      if (localVarHttpHeaderAcceptSelected.startsWith("text")) {
        responseType_ = "text";
      } else if (this.configuration.isJsonMime(localVarHttpHeaderAcceptSelected)) {
        responseType_ = "json";
      } else {
        responseType_ = "blob";
      }
    }
    let localVarPath = `/entities/assetstateprofiles`;
    return this.httpClient.request("get", `${this.configuration.basePath}${localVarPath}`, {
      context: localVarHttpContext,
      params: localVarQueryParameters,
      responseType: responseType_,
      withCredentials: this.configuration.withCredentials,
      headers: localVarHeaders,
      observe,
      transferCache: localVarTransferCache,
      reportProgress
    });
  }
  updateAssetStateProfile(id, request, observe = "body", reportProgress = false, options) {
    if (id === null || id === void 0) {
      throw new Error("Required parameter id was null or undefined when calling updateAssetStateProfile.");
    }
    if (request === null || request === void 0) {
      throw new Error("Required parameter request was null or undefined when calling updateAssetStateProfile.");
    }
    let localVarHeaders = this.defaultHeaders;
    let localVarCredential;
    localVarCredential = this.configuration.lookupCredential("access_token");
    if (localVarCredential) {
      localVarHeaders = localVarHeaders.set("x-access-token", localVarCredential);
    }
    let localVarHttpHeaderAcceptSelected = options && options.httpHeaderAccept;
    if (localVarHttpHeaderAcceptSelected === void 0) {
      const httpHeaderAccepts = [
        "application/json"
      ];
      localVarHttpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
    }
    if (localVarHttpHeaderAcceptSelected !== void 0) {
      localVarHeaders = localVarHeaders.set("Accept", localVarHttpHeaderAcceptSelected);
    }
    let localVarHttpContext = options && options.context;
    if (localVarHttpContext === void 0) {
      localVarHttpContext = new HttpContext();
    }
    let localVarTransferCache = options && options.transferCache;
    if (localVarTransferCache === void 0) {
      localVarTransferCache = true;
    }
    const consumes = [
      "application/json"
    ];
    const httpContentTypeSelected = this.configuration.selectHeaderContentType(consumes);
    if (httpContentTypeSelected !== void 0) {
      localVarHeaders = localVarHeaders.set("Content-Type", httpContentTypeSelected);
    }
    let responseType_ = "json";
    if (localVarHttpHeaderAcceptSelected) {
      if (localVarHttpHeaderAcceptSelected.startsWith("text")) {
        responseType_ = "text";
      } else if (this.configuration.isJsonMime(localVarHttpHeaderAcceptSelected)) {
        responseType_ = "json";
      } else {
        responseType_ = "blob";
      }
    }
    let localVarPath = `/entities/assetstateprofiles/${this.configuration.encodeParam({ name: "id", value: id, in: "path", style: "simple", explode: false, dataType: "string", dataFormat: void 0 })}`;
    return this.httpClient.request("put", `${this.configuration.basePath}${localVarPath}`, {
      context: localVarHttpContext,
      body: request,
      responseType: responseType_,
      withCredentials: this.configuration.withCredentials,
      headers: localVarHeaders,
      observe,
      transferCache: localVarTransferCache,
      reportProgress
    });
  }
  static \u0275fac = function AssetStateProfilesService_Factory(__ngFactoryType__) {
    return new (__ngFactoryType__ || _AssetStateProfilesService)(\u0275\u0275inject(HttpClient), \u0275\u0275inject(BASE_PATH, 8), \u0275\u0275inject(Configuration, 8));
  };
  static \u0275prov = /* @__PURE__ */ \u0275\u0275defineInjectable({ token: _AssetStateProfilesService, factory: _AssetStateProfilesService.\u0275fac, providedIn: "root" });
};
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(AssetStateProfilesService, [{
    type: Injectable,
    args: [{
      providedIn: "root"
    }]
  }], () => [{ type: HttpClient }, { type: void 0, decorators: [{
    type: Optional
  }, {
    type: Inject,
    args: [BASE_PATH]
  }] }, { type: Configuration, decorators: [{
    type: Optional
  }] }], null);
})();

// src/app/api/api/assetTagTypes.service.ts
var AssetTagTypesService = class _AssetTagTypesService {
  httpClient;
  basePath = "";
  defaultHeaders = new HttpHeaders();
  configuration = new Configuration();
  encoder;
  constructor(httpClient, basePath, configuration) {
    this.httpClient = httpClient;
    if (configuration) {
      this.configuration = configuration;
    }
    if (typeof this.configuration.basePath !== "string") {
      const firstBasePath = Array.isArray(basePath) ? basePath[0] : void 0;
      if (firstBasePath != void 0) {
        basePath = firstBasePath;
      }
      if (typeof basePath !== "string") {
        basePath = this.basePath;
      }
      this.configuration.basePath = basePath;
    }
    this.encoder = this.configuration.encoder || new CustomHttpParameterCodec();
  }
  // @ts-ignore
  addToHttpParams(httpParams, value, key) {
    if (typeof value === "object" && value instanceof Date === false) {
      httpParams = this.addToHttpParamsRecursive(httpParams, value);
    } else {
      httpParams = this.addToHttpParamsRecursive(httpParams, value, key);
    }
    return httpParams;
  }
  addToHttpParamsRecursive(httpParams, value, key) {
    if (value == null) {
      return httpParams;
    }
    if (typeof value === "object") {
      if (Array.isArray(value)) {
        value.forEach((elem) => httpParams = this.addToHttpParamsRecursive(httpParams, elem, key));
      } else if (value instanceof Date) {
        if (key != null) {
          httpParams = httpParams.append(key, value.toISOString().substring(0, 10));
        } else {
          throw Error("key may not be null if value is Date");
        }
      } else {
        Object.keys(value).forEach((k) => httpParams = this.addToHttpParamsRecursive(httpParams, value[k], key != null ? `${key}.${k}` : k));
      }
    } else if (key != null) {
      httpParams = httpParams.append(key, value);
    } else {
      throw Error("key may not be null if value is not object or array");
    }
    return httpParams;
  }
  getAssetTagType(id, observe = "body", reportProgress = false, options) {
    if (id === null || id === void 0) {
      throw new Error("Required parameter id was null or undefined when calling getAssetTagType.");
    }
    let localVarHeaders = this.defaultHeaders;
    let localVarCredential;
    localVarCredential = this.configuration.lookupCredential("access_token");
    if (localVarCredential) {
      localVarHeaders = localVarHeaders.set("x-access-token", localVarCredential);
    }
    let localVarHttpHeaderAcceptSelected = options && options.httpHeaderAccept;
    if (localVarHttpHeaderAcceptSelected === void 0) {
      const httpHeaderAccepts = [
        "application/json"
      ];
      localVarHttpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
    }
    if (localVarHttpHeaderAcceptSelected !== void 0) {
      localVarHeaders = localVarHeaders.set("Accept", localVarHttpHeaderAcceptSelected);
    }
    let localVarHttpContext = options && options.context;
    if (localVarHttpContext === void 0) {
      localVarHttpContext = new HttpContext();
    }
    let localVarTransferCache = options && options.transferCache;
    if (localVarTransferCache === void 0) {
      localVarTransferCache = true;
    }
    let responseType_ = "json";
    if (localVarHttpHeaderAcceptSelected) {
      if (localVarHttpHeaderAcceptSelected.startsWith("text")) {
        responseType_ = "text";
      } else if (this.configuration.isJsonMime(localVarHttpHeaderAcceptSelected)) {
        responseType_ = "json";
      } else {
        responseType_ = "blob";
      }
    }
    let localVarPath = `/entities/assettagtypes/${this.configuration.encodeParam({ name: "id", value: id, in: "path", style: "simple", explode: false, dataType: "string", dataFormat: void 0 })}`;
    return this.httpClient.request("get", `${this.configuration.basePath}${localVarPath}`, {
      context: localVarHttpContext,
      responseType: responseType_,
      withCredentials: this.configuration.withCredentials,
      headers: localVarHeaders,
      observe,
      transferCache: localVarTransferCache,
      reportProgress
    });
  }
  listAssetTagTypes(owner, observe = "body", reportProgress = false, options) {
    if (owner === null || owner === void 0) {
      throw new Error("Required parameter owner was null or undefined when calling listAssetTagTypes.");
    }
    let localVarQueryParameters = new HttpParams({ encoder: this.encoder });
    if (owner !== void 0 && owner !== null) {
      localVarQueryParameters = this.addToHttpParams(localVarQueryParameters, owner, "owner");
    }
    let localVarHeaders = this.defaultHeaders;
    let localVarCredential;
    localVarCredential = this.configuration.lookupCredential("access_token");
    if (localVarCredential) {
      localVarHeaders = localVarHeaders.set("x-access-token", localVarCredential);
    }
    let localVarHttpHeaderAcceptSelected = options && options.httpHeaderAccept;
    if (localVarHttpHeaderAcceptSelected === void 0) {
      const httpHeaderAccepts = [
        "application/json"
      ];
      localVarHttpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
    }
    if (localVarHttpHeaderAcceptSelected !== void 0) {
      localVarHeaders = localVarHeaders.set("Accept", localVarHttpHeaderAcceptSelected);
    }
    let localVarHttpContext = options && options.context;
    if (localVarHttpContext === void 0) {
      localVarHttpContext = new HttpContext();
    }
    let localVarTransferCache = options && options.transferCache;
    if (localVarTransferCache === void 0) {
      localVarTransferCache = true;
    }
    let responseType_ = "json";
    if (localVarHttpHeaderAcceptSelected) {
      if (localVarHttpHeaderAcceptSelected.startsWith("text")) {
        responseType_ = "text";
      } else if (this.configuration.isJsonMime(localVarHttpHeaderAcceptSelected)) {
        responseType_ = "json";
      } else {
        responseType_ = "blob";
      }
    }
    let localVarPath = `/entities/assettagtypes`;
    return this.httpClient.request("get", `${this.configuration.basePath}${localVarPath}`, {
      context: localVarHttpContext,
      params: localVarQueryParameters,
      responseType: responseType_,
      withCredentials: this.configuration.withCredentials,
      headers: localVarHeaders,
      observe,
      transferCache: localVarTransferCache,
      reportProgress
    });
  }
  static \u0275fac = function AssetTagTypesService_Factory(__ngFactoryType__) {
    return new (__ngFactoryType__ || _AssetTagTypesService)(\u0275\u0275inject(HttpClient), \u0275\u0275inject(BASE_PATH, 8), \u0275\u0275inject(Configuration, 8));
  };
  static \u0275prov = /* @__PURE__ */ \u0275\u0275defineInjectable({ token: _AssetTagTypesService, factory: _AssetTagTypesService.\u0275fac, providedIn: "root" });
};
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(AssetTagTypesService, [{
    type: Injectable,
    args: [{
      providedIn: "root"
    }]
  }], () => [{ type: HttpClient }, { type: void 0, decorators: [{
    type: Optional
  }, {
    type: Inject,
    args: [BASE_PATH]
  }] }, { type: Configuration, decorators: [{
    type: Optional
  }] }], null);
})();

// src/app/api/api/assetTags.service.ts
var AssetTagsService = class _AssetTagsService {
  httpClient;
  basePath = "";
  defaultHeaders = new HttpHeaders();
  configuration = new Configuration();
  encoder;
  constructor(httpClient, basePath, configuration) {
    this.httpClient = httpClient;
    if (configuration) {
      this.configuration = configuration;
    }
    if (typeof this.configuration.basePath !== "string") {
      const firstBasePath = Array.isArray(basePath) ? basePath[0] : void 0;
      if (firstBasePath != void 0) {
        basePath = firstBasePath;
      }
      if (typeof basePath !== "string") {
        basePath = this.basePath;
      }
      this.configuration.basePath = basePath;
    }
    this.encoder = this.configuration.encoder || new CustomHttpParameterCodec();
  }
  // @ts-ignore
  addToHttpParams(httpParams, value, key) {
    if (typeof value === "object" && value instanceof Date === false) {
      httpParams = this.addToHttpParamsRecursive(httpParams, value);
    } else {
      httpParams = this.addToHttpParamsRecursive(httpParams, value, key);
    }
    return httpParams;
  }
  addToHttpParamsRecursive(httpParams, value, key) {
    if (value == null) {
      return httpParams;
    }
    if (typeof value === "object") {
      if (Array.isArray(value)) {
        value.forEach((elem) => httpParams = this.addToHttpParamsRecursive(httpParams, elem, key));
      } else if (value instanceof Date) {
        if (key != null) {
          httpParams = httpParams.append(key, value.toISOString().substring(0, 10));
        } else {
          throw Error("key may not be null if value is Date");
        }
      } else {
        Object.keys(value).forEach((k) => httpParams = this.addToHttpParamsRecursive(httpParams, value[k], key != null ? `${key}.${k}` : k));
      }
    } else if (key != null) {
      httpParams = httpParams.append(key, value);
    } else {
      throw Error("key may not be null if value is not object or array");
    }
    return httpParams;
  }
  createAssetTag(request, observe = "body", reportProgress = false, options) {
    if (request === null || request === void 0) {
      throw new Error("Required parameter request was null or undefined when calling createAssetTag.");
    }
    let localVarHeaders = this.defaultHeaders;
    let localVarCredential;
    localVarCredential = this.configuration.lookupCredential("access_token");
    if (localVarCredential) {
      localVarHeaders = localVarHeaders.set("x-access-token", localVarCredential);
    }
    let localVarHttpHeaderAcceptSelected = options && options.httpHeaderAccept;
    if (localVarHttpHeaderAcceptSelected === void 0) {
      const httpHeaderAccepts = [
        "application/json"
      ];
      localVarHttpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
    }
    if (localVarHttpHeaderAcceptSelected !== void 0) {
      localVarHeaders = localVarHeaders.set("Accept", localVarHttpHeaderAcceptSelected);
    }
    let localVarHttpContext = options && options.context;
    if (localVarHttpContext === void 0) {
      localVarHttpContext = new HttpContext();
    }
    let localVarTransferCache = options && options.transferCache;
    if (localVarTransferCache === void 0) {
      localVarTransferCache = true;
    }
    const consumes = [
      "application/json"
    ];
    const httpContentTypeSelected = this.configuration.selectHeaderContentType(consumes);
    if (httpContentTypeSelected !== void 0) {
      localVarHeaders = localVarHeaders.set("Content-Type", httpContentTypeSelected);
    }
    let responseType_ = "json";
    if (localVarHttpHeaderAcceptSelected) {
      if (localVarHttpHeaderAcceptSelected.startsWith("text")) {
        responseType_ = "text";
      } else if (this.configuration.isJsonMime(localVarHttpHeaderAcceptSelected)) {
        responseType_ = "json";
      } else {
        responseType_ = "blob";
      }
    }
    let localVarPath = `/entities/assettags`;
    return this.httpClient.request("post", `${this.configuration.basePath}${localVarPath}`, {
      context: localVarHttpContext,
      body: request,
      responseType: responseType_,
      withCredentials: this.configuration.withCredentials,
      headers: localVarHeaders,
      observe,
      transferCache: localVarTransferCache,
      reportProgress
    });
  }
  getAssetTag(id, observe = "body", reportProgress = false, options) {
    if (id === null || id === void 0) {
      throw new Error("Required parameter id was null or undefined when calling getAssetTag.");
    }
    let localVarHeaders = this.defaultHeaders;
    let localVarCredential;
    localVarCredential = this.configuration.lookupCredential("access_token");
    if (localVarCredential) {
      localVarHeaders = localVarHeaders.set("x-access-token", localVarCredential);
    }
    let localVarHttpHeaderAcceptSelected = options && options.httpHeaderAccept;
    if (localVarHttpHeaderAcceptSelected === void 0) {
      const httpHeaderAccepts = [
        "application/json"
      ];
      localVarHttpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
    }
    if (localVarHttpHeaderAcceptSelected !== void 0) {
      localVarHeaders = localVarHeaders.set("Accept", localVarHttpHeaderAcceptSelected);
    }
    let localVarHttpContext = options && options.context;
    if (localVarHttpContext === void 0) {
      localVarHttpContext = new HttpContext();
    }
    let localVarTransferCache = options && options.transferCache;
    if (localVarTransferCache === void 0) {
      localVarTransferCache = true;
    }
    let responseType_ = "json";
    if (localVarHttpHeaderAcceptSelected) {
      if (localVarHttpHeaderAcceptSelected.startsWith("text")) {
        responseType_ = "text";
      } else if (this.configuration.isJsonMime(localVarHttpHeaderAcceptSelected)) {
        responseType_ = "json";
      } else {
        responseType_ = "blob";
      }
    }
    let localVarPath = `/entities/assettags/${this.configuration.encodeParam({ name: "id", value: id, in: "path", style: "simple", explode: false, dataType: "string", dataFormat: void 0 })}`;
    return this.httpClient.request("get", `${this.configuration.basePath}${localVarPath}`, {
      context: localVarHttpContext,
      responseType: responseType_,
      withCredentials: this.configuration.withCredentials,
      headers: localVarHeaders,
      observe,
      transferCache: localVarTransferCache,
      reportProgress
    });
  }
  listAssetTags(owner, offset, limit, sort, filter, observe = "body", reportProgress = false, options) {
    if (owner === null || owner === void 0) {
      throw new Error("Required parameter owner was null or undefined when calling listAssetTags.");
    }
    let localVarQueryParameters = new HttpParams({ encoder: this.encoder });
    if (owner !== void 0 && owner !== null) {
      localVarQueryParameters = this.addToHttpParams(localVarQueryParameters, owner, "owner");
    }
    if (offset !== void 0 && offset !== null) {
      localVarQueryParameters = this.addToHttpParams(localVarQueryParameters, offset, "offset");
    }
    if (limit !== void 0 && limit !== null) {
      localVarQueryParameters = this.addToHttpParams(localVarQueryParameters, limit, "limit");
    }
    if (sort !== void 0 && sort !== null) {
      localVarQueryParameters = this.addToHttpParams(localVarQueryParameters, sort, "sort");
    }
    if (filter !== void 0 && filter !== null) {
      localVarQueryParameters = this.addToHttpParams(localVarQueryParameters, filter, "filter");
    }
    let localVarHeaders = this.defaultHeaders;
    let localVarCredential;
    localVarCredential = this.configuration.lookupCredential("access_token");
    if (localVarCredential) {
      localVarHeaders = localVarHeaders.set("x-access-token", localVarCredential);
    }
    let localVarHttpHeaderAcceptSelected = options && options.httpHeaderAccept;
    if (localVarHttpHeaderAcceptSelected === void 0) {
      const httpHeaderAccepts = [
        "application/json"
      ];
      localVarHttpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
    }
    if (localVarHttpHeaderAcceptSelected !== void 0) {
      localVarHeaders = localVarHeaders.set("Accept", localVarHttpHeaderAcceptSelected);
    }
    let localVarHttpContext = options && options.context;
    if (localVarHttpContext === void 0) {
      localVarHttpContext = new HttpContext();
    }
    let localVarTransferCache = options && options.transferCache;
    if (localVarTransferCache === void 0) {
      localVarTransferCache = true;
    }
    let responseType_ = "json";
    if (localVarHttpHeaderAcceptSelected) {
      if (localVarHttpHeaderAcceptSelected.startsWith("text")) {
        responseType_ = "text";
      } else if (this.configuration.isJsonMime(localVarHttpHeaderAcceptSelected)) {
        responseType_ = "json";
      } else {
        responseType_ = "blob";
      }
    }
    let localVarPath = `/entities/assettags`;
    return this.httpClient.request("get", `${this.configuration.basePath}${localVarPath}`, {
      context: localVarHttpContext,
      params: localVarQueryParameters,
      responseType: responseType_,
      withCredentials: this.configuration.withCredentials,
      headers: localVarHeaders,
      observe,
      transferCache: localVarTransferCache,
      reportProgress
    });
  }
  updateAssetTag(id, request, observe = "body", reportProgress = false, options) {
    if (id === null || id === void 0) {
      throw new Error("Required parameter id was null or undefined when calling updateAssetTag.");
    }
    if (request === null || request === void 0) {
      throw new Error("Required parameter request was null or undefined when calling updateAssetTag.");
    }
    let localVarHeaders = this.defaultHeaders;
    let localVarCredential;
    localVarCredential = this.configuration.lookupCredential("access_token");
    if (localVarCredential) {
      localVarHeaders = localVarHeaders.set("x-access-token", localVarCredential);
    }
    let localVarHttpHeaderAcceptSelected = options && options.httpHeaderAccept;
    if (localVarHttpHeaderAcceptSelected === void 0) {
      const httpHeaderAccepts = [
        "application/json"
      ];
      localVarHttpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
    }
    if (localVarHttpHeaderAcceptSelected !== void 0) {
      localVarHeaders = localVarHeaders.set("Accept", localVarHttpHeaderAcceptSelected);
    }
    let localVarHttpContext = options && options.context;
    if (localVarHttpContext === void 0) {
      localVarHttpContext = new HttpContext();
    }
    let localVarTransferCache = options && options.transferCache;
    if (localVarTransferCache === void 0) {
      localVarTransferCache = true;
    }
    const consumes = [
      "application/json"
    ];
    const httpContentTypeSelected = this.configuration.selectHeaderContentType(consumes);
    if (httpContentTypeSelected !== void 0) {
      localVarHeaders = localVarHeaders.set("Content-Type", httpContentTypeSelected);
    }
    let responseType_ = "json";
    if (localVarHttpHeaderAcceptSelected) {
      if (localVarHttpHeaderAcceptSelected.startsWith("text")) {
        responseType_ = "text";
      } else if (this.configuration.isJsonMime(localVarHttpHeaderAcceptSelected)) {
        responseType_ = "json";
      } else {
        responseType_ = "blob";
      }
    }
    let localVarPath = `/entities/assettags/${this.configuration.encodeParam({ name: "id", value: id, in: "path", style: "simple", explode: false, dataType: "string", dataFormat: void 0 })}`;
    return this.httpClient.request("put", `${this.configuration.basePath}${localVarPath}`, {
      context: localVarHttpContext,
      body: request,
      responseType: responseType_,
      withCredentials: this.configuration.withCredentials,
      headers: localVarHeaders,
      observe,
      transferCache: localVarTransferCache,
      reportProgress
    });
  }
  static \u0275fac = function AssetTagsService_Factory(__ngFactoryType__) {
    return new (__ngFactoryType__ || _AssetTagsService)(\u0275\u0275inject(HttpClient), \u0275\u0275inject(BASE_PATH, 8), \u0275\u0275inject(Configuration, 8));
  };
  static \u0275prov = /* @__PURE__ */ \u0275\u0275defineInjectable({ token: _AssetTagsService, factory: _AssetTagsService.\u0275fac, providedIn: "root" });
};
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(AssetTagsService, [{
    type: Injectable,
    args: [{
      providedIn: "root"
    }]
  }], () => [{ type: HttpClient }, { type: void 0, decorators: [{
    type: Optional
  }, {
    type: Inject,
    args: [BASE_PATH]
  }] }, { type: Configuration, decorators: [{
    type: Optional
  }] }], null);
})();

// src/app/api/api/assetTypes.service.ts
var AssetTypesService = class _AssetTypesService {
  httpClient;
  basePath = "";
  defaultHeaders = new HttpHeaders();
  configuration = new Configuration();
  encoder;
  constructor(httpClient, basePath, configuration) {
    this.httpClient = httpClient;
    if (configuration) {
      this.configuration = configuration;
    }
    if (typeof this.configuration.basePath !== "string") {
      const firstBasePath = Array.isArray(basePath) ? basePath[0] : void 0;
      if (firstBasePath != void 0) {
        basePath = firstBasePath;
      }
      if (typeof basePath !== "string") {
        basePath = this.basePath;
      }
      this.configuration.basePath = basePath;
    }
    this.encoder = this.configuration.encoder || new CustomHttpParameterCodec();
  }
  // @ts-ignore
  addToHttpParams(httpParams, value, key) {
    if (typeof value === "object" && value instanceof Date === false) {
      httpParams = this.addToHttpParamsRecursive(httpParams, value);
    } else {
      httpParams = this.addToHttpParamsRecursive(httpParams, value, key);
    }
    return httpParams;
  }
  addToHttpParamsRecursive(httpParams, value, key) {
    if (value == null) {
      return httpParams;
    }
    if (typeof value === "object") {
      if (Array.isArray(value)) {
        value.forEach((elem) => httpParams = this.addToHttpParamsRecursive(httpParams, elem, key));
      } else if (value instanceof Date) {
        if (key != null) {
          httpParams = httpParams.append(key, value.toISOString().substring(0, 10));
        } else {
          throw Error("key may not be null if value is Date");
        }
      } else {
        Object.keys(value).forEach((k) => httpParams = this.addToHttpParamsRecursive(httpParams, value[k], key != null ? `${key}.${k}` : k));
      }
    } else if (key != null) {
      httpParams = httpParams.append(key, value);
    } else {
      throw Error("key may not be null if value is not object or array");
    }
    return httpParams;
  }
  getAssetType(id, observe = "body", reportProgress = false, options) {
    if (id === null || id === void 0) {
      throw new Error("Required parameter id was null or undefined when calling getAssetType.");
    }
    let localVarHeaders = this.defaultHeaders;
    let localVarCredential;
    localVarCredential = this.configuration.lookupCredential("access_token");
    if (localVarCredential) {
      localVarHeaders = localVarHeaders.set("x-access-token", localVarCredential);
    }
    let localVarHttpHeaderAcceptSelected = options && options.httpHeaderAccept;
    if (localVarHttpHeaderAcceptSelected === void 0) {
      const httpHeaderAccepts = [
        "application/json"
      ];
      localVarHttpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
    }
    if (localVarHttpHeaderAcceptSelected !== void 0) {
      localVarHeaders = localVarHeaders.set("Accept", localVarHttpHeaderAcceptSelected);
    }
    let localVarHttpContext = options && options.context;
    if (localVarHttpContext === void 0) {
      localVarHttpContext = new HttpContext();
    }
    let localVarTransferCache = options && options.transferCache;
    if (localVarTransferCache === void 0) {
      localVarTransferCache = true;
    }
    let responseType_ = "json";
    if (localVarHttpHeaderAcceptSelected) {
      if (localVarHttpHeaderAcceptSelected.startsWith("text")) {
        responseType_ = "text";
      } else if (this.configuration.isJsonMime(localVarHttpHeaderAcceptSelected)) {
        responseType_ = "json";
      } else {
        responseType_ = "blob";
      }
    }
    let localVarPath = `/entities/assettypes/${this.configuration.encodeParam({ name: "id", value: id, in: "path", style: "simple", explode: false, dataType: "string", dataFormat: void 0 })}`;
    return this.httpClient.request("get", `${this.configuration.basePath}${localVarPath}`, {
      context: localVarHttpContext,
      responseType: responseType_,
      withCredentials: this.configuration.withCredentials,
      headers: localVarHeaders,
      observe,
      transferCache: localVarTransferCache,
      reportProgress
    });
  }
  listAssetTypes(owner, observe = "body", reportProgress = false, options) {
    if (owner === null || owner === void 0) {
      throw new Error("Required parameter owner was null or undefined when calling listAssetTypes.");
    }
    let localVarQueryParameters = new HttpParams({ encoder: this.encoder });
    if (owner !== void 0 && owner !== null) {
      localVarQueryParameters = this.addToHttpParams(localVarQueryParameters, owner, "owner");
    }
    let localVarHeaders = this.defaultHeaders;
    let localVarCredential;
    localVarCredential = this.configuration.lookupCredential("access_token");
    if (localVarCredential) {
      localVarHeaders = localVarHeaders.set("x-access-token", localVarCredential);
    }
    let localVarHttpHeaderAcceptSelected = options && options.httpHeaderAccept;
    if (localVarHttpHeaderAcceptSelected === void 0) {
      const httpHeaderAccepts = [
        "application/json"
      ];
      localVarHttpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
    }
    if (localVarHttpHeaderAcceptSelected !== void 0) {
      localVarHeaders = localVarHeaders.set("Accept", localVarHttpHeaderAcceptSelected);
    }
    let localVarHttpContext = options && options.context;
    if (localVarHttpContext === void 0) {
      localVarHttpContext = new HttpContext();
    }
    let localVarTransferCache = options && options.transferCache;
    if (localVarTransferCache === void 0) {
      localVarTransferCache = true;
    }
    let responseType_ = "json";
    if (localVarHttpHeaderAcceptSelected) {
      if (localVarHttpHeaderAcceptSelected.startsWith("text")) {
        responseType_ = "text";
      } else if (this.configuration.isJsonMime(localVarHttpHeaderAcceptSelected)) {
        responseType_ = "json";
      } else {
        responseType_ = "blob";
      }
    }
    let localVarPath = `/entities/assettypes`;
    return this.httpClient.request("get", `${this.configuration.basePath}${localVarPath}`, {
      context: localVarHttpContext,
      params: localVarQueryParameters,
      responseType: responseType_,
      withCredentials: this.configuration.withCredentials,
      headers: localVarHeaders,
      observe,
      transferCache: localVarTransferCache,
      reportProgress
    });
  }
  static \u0275fac = function AssetTypesService_Factory(__ngFactoryType__) {
    return new (__ngFactoryType__ || _AssetTypesService)(\u0275\u0275inject(HttpClient), \u0275\u0275inject(BASE_PATH, 8), \u0275\u0275inject(Configuration, 8));
  };
  static \u0275prov = /* @__PURE__ */ \u0275\u0275defineInjectable({ token: _AssetTypesService, factory: _AssetTypesService.\u0275fac, providedIn: "root" });
};
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(AssetTypesService, [{
    type: Injectable,
    args: [{
      providedIn: "root"
    }]
  }], () => [{ type: HttpClient }, { type: void 0, decorators: [{
    type: Optional
  }, {
    type: Inject,
    args: [BASE_PATH]
  }] }, { type: Configuration, decorators: [{
    type: Optional
  }] }], null);
})();

// src/app/api/api/assets.service.ts
var AssetsService = class _AssetsService {
  httpClient;
  basePath = "";
  defaultHeaders = new HttpHeaders();
  configuration = new Configuration();
  encoder;
  constructor(httpClient, basePath, configuration) {
    this.httpClient = httpClient;
    if (configuration) {
      this.configuration = configuration;
    }
    if (typeof this.configuration.basePath !== "string") {
      const firstBasePath = Array.isArray(basePath) ? basePath[0] : void 0;
      if (firstBasePath != void 0) {
        basePath = firstBasePath;
      }
      if (typeof basePath !== "string") {
        basePath = this.basePath;
      }
      this.configuration.basePath = basePath;
    }
    this.encoder = this.configuration.encoder || new CustomHttpParameterCodec();
  }
  // @ts-ignore
  addToHttpParams(httpParams, value, key) {
    if (typeof value === "object" && value instanceof Date === false) {
      httpParams = this.addToHttpParamsRecursive(httpParams, value);
    } else {
      httpParams = this.addToHttpParamsRecursive(httpParams, value, key);
    }
    return httpParams;
  }
  addToHttpParamsRecursive(httpParams, value, key) {
    if (value == null) {
      return httpParams;
    }
    if (typeof value === "object") {
      if (Array.isArray(value)) {
        value.forEach((elem) => httpParams = this.addToHttpParamsRecursive(httpParams, elem, key));
      } else if (value instanceof Date) {
        if (key != null) {
          httpParams = httpParams.append(key, value.toISOString().substring(0, 10));
        } else {
          throw Error("key may not be null if value is Date");
        }
      } else {
        Object.keys(value).forEach((k) => httpParams = this.addToHttpParamsRecursive(httpParams, value[k], key != null ? `${key}.${k}` : k));
      }
    } else if (key != null) {
      httpParams = httpParams.append(key, value);
    } else {
      throw Error("key may not be null if value is not object or array");
    }
    return httpParams;
  }
  createAsset(request, observe = "body", reportProgress = false, options) {
    if (request === null || request === void 0) {
      throw new Error("Required parameter request was null or undefined when calling createAsset.");
    }
    let localVarHeaders = this.defaultHeaders;
    let localVarCredential;
    localVarCredential = this.configuration.lookupCredential("access_token");
    if (localVarCredential) {
      localVarHeaders = localVarHeaders.set("x-access-token", localVarCredential);
    }
    let localVarHttpHeaderAcceptSelected = options && options.httpHeaderAccept;
    if (localVarHttpHeaderAcceptSelected === void 0) {
      const httpHeaderAccepts = [
        "application/json"
      ];
      localVarHttpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
    }
    if (localVarHttpHeaderAcceptSelected !== void 0) {
      localVarHeaders = localVarHeaders.set("Accept", localVarHttpHeaderAcceptSelected);
    }
    let localVarHttpContext = options && options.context;
    if (localVarHttpContext === void 0) {
      localVarHttpContext = new HttpContext();
    }
    let localVarTransferCache = options && options.transferCache;
    if (localVarTransferCache === void 0) {
      localVarTransferCache = true;
    }
    const consumes = [
      "application/json"
    ];
    const httpContentTypeSelected = this.configuration.selectHeaderContentType(consumes);
    if (httpContentTypeSelected !== void 0) {
      localVarHeaders = localVarHeaders.set("Content-Type", httpContentTypeSelected);
    }
    let responseType_ = "json";
    if (localVarHttpHeaderAcceptSelected) {
      if (localVarHttpHeaderAcceptSelected.startsWith("text")) {
        responseType_ = "text";
      } else if (this.configuration.isJsonMime(localVarHttpHeaderAcceptSelected)) {
        responseType_ = "json";
      } else {
        responseType_ = "blob";
      }
    }
    let localVarPath = `/entities/assets`;
    return this.httpClient.request("post", `${this.configuration.basePath}${localVarPath}`, {
      context: localVarHttpContext,
      body: request,
      responseType: responseType_,
      withCredentials: this.configuration.withCredentials,
      headers: localVarHeaders,
      observe,
      transferCache: localVarTransferCache,
      reportProgress
    });
  }
  createSharedAssetLocationToken(id, request, observe = "body", reportProgress = false, options) {
    if (id === null || id === void 0) {
      throw new Error("Required parameter id was null or undefined when calling createSharedAssetLocationToken.");
    }
    if (request === null || request === void 0) {
      throw new Error("Required parameter request was null or undefined when calling createSharedAssetLocationToken.");
    }
    let localVarHeaders = this.defaultHeaders;
    let localVarCredential;
    localVarCredential = this.configuration.lookupCredential("access_token");
    if (localVarCredential) {
      localVarHeaders = localVarHeaders.set("x-access-token", localVarCredential);
    }
    let localVarHttpHeaderAcceptSelected = options && options.httpHeaderAccept;
    if (localVarHttpHeaderAcceptSelected === void 0) {
      const httpHeaderAccepts = [
        "application/json"
      ];
      localVarHttpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
    }
    if (localVarHttpHeaderAcceptSelected !== void 0) {
      localVarHeaders = localVarHeaders.set("Accept", localVarHttpHeaderAcceptSelected);
    }
    let localVarHttpContext = options && options.context;
    if (localVarHttpContext === void 0) {
      localVarHttpContext = new HttpContext();
    }
    let localVarTransferCache = options && options.transferCache;
    if (localVarTransferCache === void 0) {
      localVarTransferCache = true;
    }
    const consumes = [
      "application/json"
    ];
    const httpContentTypeSelected = this.configuration.selectHeaderContentType(consumes);
    if (httpContentTypeSelected !== void 0) {
      localVarHeaders = localVarHeaders.set("Content-Type", httpContentTypeSelected);
    }
    let responseType_ = "json";
    if (localVarHttpHeaderAcceptSelected) {
      if (localVarHttpHeaderAcceptSelected.startsWith("text")) {
        responseType_ = "text";
      } else if (this.configuration.isJsonMime(localVarHttpHeaderAcceptSelected)) {
        responseType_ = "json";
      } else {
        responseType_ = "blob";
      }
    }
    let localVarPath = `/entities/assets/shared/location/${this.configuration.encodeParam({ name: "id", value: id, in: "path", style: "simple", explode: false, dataType: "string", dataFormat: void 0 })}`;
    return this.httpClient.request("post", `${this.configuration.basePath}${localVarPath}`, {
      context: localVarHttpContext,
      body: request,
      responseType: responseType_,
      withCredentials: this.configuration.withCredentials,
      headers: localVarHeaders,
      observe,
      transferCache: localVarTransferCache,
      reportProgress
    });
  }
  deleteAssetAvatar(id, observe = "body", reportProgress = false, options) {
    if (id === null || id === void 0) {
      throw new Error("Required parameter id was null or undefined when calling deleteAssetAvatar.");
    }
    let localVarHeaders = this.defaultHeaders;
    let localVarCredential;
    localVarCredential = this.configuration.lookupCredential("access_token");
    if (localVarCredential) {
      localVarHeaders = localVarHeaders.set("x-access-token", localVarCredential);
    }
    let localVarHttpHeaderAcceptSelected = options && options.httpHeaderAccept;
    if (localVarHttpHeaderAcceptSelected === void 0) {
      const httpHeaderAccepts = [];
      localVarHttpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
    }
    if (localVarHttpHeaderAcceptSelected !== void 0) {
      localVarHeaders = localVarHeaders.set("Accept", localVarHttpHeaderAcceptSelected);
    }
    let localVarHttpContext = options && options.context;
    if (localVarHttpContext === void 0) {
      localVarHttpContext = new HttpContext();
    }
    let localVarTransferCache = options && options.transferCache;
    if (localVarTransferCache === void 0) {
      localVarTransferCache = true;
    }
    let responseType_ = "json";
    if (localVarHttpHeaderAcceptSelected) {
      if (localVarHttpHeaderAcceptSelected.startsWith("text")) {
        responseType_ = "text";
      } else if (this.configuration.isJsonMime(localVarHttpHeaderAcceptSelected)) {
        responseType_ = "json";
      } else {
        responseType_ = "blob";
      }
    }
    let localVarPath = `/entities/assets/${this.configuration.encodeParam({ name: "id", value: id, in: "path", style: "simple", explode: false, dataType: "string", dataFormat: void 0 })}/avatar`;
    return this.httpClient.request("delete", `${this.configuration.basePath}${localVarPath}`, {
      context: localVarHttpContext,
      responseType: responseType_,
      withCredentials: this.configuration.withCredentials,
      headers: localVarHeaders,
      observe,
      transferCache: localVarTransferCache,
      reportProgress
    });
  }
  deleteSharedAssetLocationToken(token, observe = "body", reportProgress = false, options) {
    if (token === null || token === void 0) {
      throw new Error("Required parameter token was null or undefined when calling deleteSharedAssetLocationToken.");
    }
    let localVarHeaders = this.defaultHeaders;
    let localVarCredential;
    localVarCredential = this.configuration.lookupCredential("access_token");
    if (localVarCredential) {
      localVarHeaders = localVarHeaders.set("x-access-token", localVarCredential);
    }
    let localVarHttpHeaderAcceptSelected = options && options.httpHeaderAccept;
    if (localVarHttpHeaderAcceptSelected === void 0) {
      const httpHeaderAccepts = [
        "application/json"
      ];
      localVarHttpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
    }
    if (localVarHttpHeaderAcceptSelected !== void 0) {
      localVarHeaders = localVarHeaders.set("Accept", localVarHttpHeaderAcceptSelected);
    }
    let localVarHttpContext = options && options.context;
    if (localVarHttpContext === void 0) {
      localVarHttpContext = new HttpContext();
    }
    let localVarTransferCache = options && options.transferCache;
    if (localVarTransferCache === void 0) {
      localVarTransferCache = true;
    }
    let responseType_ = "json";
    if (localVarHttpHeaderAcceptSelected) {
      if (localVarHttpHeaderAcceptSelected.startsWith("text")) {
        responseType_ = "text";
      } else if (this.configuration.isJsonMime(localVarHttpHeaderAcceptSelected)) {
        responseType_ = "json";
      } else {
        responseType_ = "blob";
      }
    }
    let localVarPath = `/entities/assets/shared/location/${this.configuration.encodeParam({ name: "token", value: token, in: "path", style: "simple", explode: false, dataType: "string", dataFormat: void 0 })}`;
    return this.httpClient.request("delete", `${this.configuration.basePath}${localVarPath}`, {
      context: localVarHttpContext,
      responseType: responseType_,
      withCredentials: this.configuration.withCredentials,
      headers: localVarHeaders,
      observe,
      transferCache: localVarTransferCache,
      reportProgress
    });
  }
  getAsset(id, observe = "body", reportProgress = false, options) {
    if (id === null || id === void 0) {
      throw new Error("Required parameter id was null or undefined when calling getAsset.");
    }
    let localVarHeaders = this.defaultHeaders;
    let localVarCredential;
    localVarCredential = this.configuration.lookupCredential("access_token");
    if (localVarCredential) {
      localVarHeaders = localVarHeaders.set("x-access-token", localVarCredential);
    }
    let localVarHttpHeaderAcceptSelected = options && options.httpHeaderAccept;
    if (localVarHttpHeaderAcceptSelected === void 0) {
      const httpHeaderAccepts = [
        "application/json"
      ];
      localVarHttpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
    }
    if (localVarHttpHeaderAcceptSelected !== void 0) {
      localVarHeaders = localVarHeaders.set("Accept", localVarHttpHeaderAcceptSelected);
    }
    let localVarHttpContext = options && options.context;
    if (localVarHttpContext === void 0) {
      localVarHttpContext = new HttpContext();
    }
    let localVarTransferCache = options && options.transferCache;
    if (localVarTransferCache === void 0) {
      localVarTransferCache = true;
    }
    let responseType_ = "json";
    if (localVarHttpHeaderAcceptSelected) {
      if (localVarHttpHeaderAcceptSelected.startsWith("text")) {
        responseType_ = "text";
      } else if (this.configuration.isJsonMime(localVarHttpHeaderAcceptSelected)) {
        responseType_ = "json";
      } else {
        responseType_ = "blob";
      }
    }
    let localVarPath = `/entities/assets/${this.configuration.encodeParam({ name: "id", value: id, in: "path", style: "simple", explode: false, dataType: "string", dataFormat: void 0 })}`;
    return this.httpClient.request("get", `${this.configuration.basePath}${localVarPath}`, {
      context: localVarHttpContext,
      responseType: responseType_,
      withCredentials: this.configuration.withCredentials,
      headers: localVarHeaders,
      observe,
      transferCache: localVarTransferCache,
      reportProgress
    });
  }
  getAssetAvatar(id, observe = "body", reportProgress = false, options) {
    if (id === null || id === void 0) {
      throw new Error("Required parameter id was null or undefined when calling getAssetAvatar.");
    }
    let localVarHeaders = this.defaultHeaders;
    let localVarCredential;
    localVarCredential = this.configuration.lookupCredential("access_token");
    if (localVarCredential) {
      localVarHeaders = localVarHeaders.set("x-access-token", localVarCredential);
    }
    let localVarHttpHeaderAcceptSelected = options && options.httpHeaderAccept;
    if (localVarHttpHeaderAcceptSelected === void 0) {
      const httpHeaderAccepts = [
        "application/json"
      ];
      localVarHttpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
    }
    if (localVarHttpHeaderAcceptSelected !== void 0) {
      localVarHeaders = localVarHeaders.set("Accept", localVarHttpHeaderAcceptSelected);
    }
    let localVarHttpContext = options && options.context;
    if (localVarHttpContext === void 0) {
      localVarHttpContext = new HttpContext();
    }
    let localVarTransferCache = options && options.transferCache;
    if (localVarTransferCache === void 0) {
      localVarTransferCache = true;
    }
    let responseType_ = "json";
    if (localVarHttpHeaderAcceptSelected) {
      if (localVarHttpHeaderAcceptSelected.startsWith("text")) {
        responseType_ = "text";
      } else if (this.configuration.isJsonMime(localVarHttpHeaderAcceptSelected)) {
        responseType_ = "json";
      } else {
        responseType_ = "blob";
      }
    }
    let localVarPath = `/entities/assets/${this.configuration.encodeParam({ name: "id", value: id, in: "path", style: "simple", explode: false, dataType: "string", dataFormat: void 0 })}/avatar`;
    return this.httpClient.request("get", `${this.configuration.basePath}${localVarPath}`, {
      context: localVarHttpContext,
      responseType: responseType_,
      withCredentials: this.configuration.withCredentials,
      headers: localVarHeaders,
      observe,
      transferCache: localVarTransferCache,
      reportProgress
    });
  }
  getAssetLocation(id, observe = "body", reportProgress = false, options) {
    if (id === null || id === void 0) {
      throw new Error("Required parameter id was null or undefined when calling getAssetLocation.");
    }
    let localVarHeaders = this.defaultHeaders;
    let localVarCredential;
    localVarCredential = this.configuration.lookupCredential("access_token");
    if (localVarCredential) {
      localVarHeaders = localVarHeaders.set("x-access-token", localVarCredential);
    }
    let localVarHttpHeaderAcceptSelected = options && options.httpHeaderAccept;
    if (localVarHttpHeaderAcceptSelected === void 0) {
      const httpHeaderAccepts = [
        "application/json"
      ];
      localVarHttpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
    }
    if (localVarHttpHeaderAcceptSelected !== void 0) {
      localVarHeaders = localVarHeaders.set("Accept", localVarHttpHeaderAcceptSelected);
    }
    let localVarHttpContext = options && options.context;
    if (localVarHttpContext === void 0) {
      localVarHttpContext = new HttpContext();
    }
    let localVarTransferCache = options && options.transferCache;
    if (localVarTransferCache === void 0) {
      localVarTransferCache = true;
    }
    let responseType_ = "json";
    if (localVarHttpHeaderAcceptSelected) {
      if (localVarHttpHeaderAcceptSelected.startsWith("text")) {
        responseType_ = "text";
      } else if (this.configuration.isJsonMime(localVarHttpHeaderAcceptSelected)) {
        responseType_ = "json";
      } else {
        responseType_ = "blob";
      }
    }
    let localVarPath = `/entities/assets/${this.configuration.encodeParam({ name: "id", value: id, in: "path", style: "simple", explode: false, dataType: "string", dataFormat: void 0 })}/location`;
    return this.httpClient.request("get", `${this.configuration.basePath}${localVarPath}`, {
      context: localVarHttpContext,
      responseType: responseType_,
      withCredentials: this.configuration.withCredentials,
      headers: localVarHeaders,
      observe,
      transferCache: localVarTransferCache,
      reportProgress
    });
  }
  getSharedAssetLocation(token, observe = "body", reportProgress = false, options) {
    if (token === null || token === void 0) {
      throw new Error("Required parameter token was null or undefined when calling getSharedAssetLocation.");
    }
    let localVarHeaders = this.defaultHeaders;
    let localVarHttpHeaderAcceptSelected = options && options.httpHeaderAccept;
    if (localVarHttpHeaderAcceptSelected === void 0) {
      const httpHeaderAccepts = [
        "application/json"
      ];
      localVarHttpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
    }
    if (localVarHttpHeaderAcceptSelected !== void 0) {
      localVarHeaders = localVarHeaders.set("Accept", localVarHttpHeaderAcceptSelected);
    }
    let localVarHttpContext = options && options.context;
    if (localVarHttpContext === void 0) {
      localVarHttpContext = new HttpContext();
    }
    let localVarTransferCache = options && options.transferCache;
    if (localVarTransferCache === void 0) {
      localVarTransferCache = true;
    }
    let responseType_ = "json";
    if (localVarHttpHeaderAcceptSelected) {
      if (localVarHttpHeaderAcceptSelected.startsWith("text")) {
        responseType_ = "text";
      } else if (this.configuration.isJsonMime(localVarHttpHeaderAcceptSelected)) {
        responseType_ = "json";
      } else {
        responseType_ = "blob";
      }
    }
    let localVarPath = `/entities/assets/shared/location/${this.configuration.encodeParam({ name: "token", value: token, in: "path", style: "simple", explode: false, dataType: "string", dataFormat: void 0 })}`;
    return this.httpClient.request("get", `${this.configuration.basePath}${localVarPath}`, {
      context: localVarHttpContext,
      responseType: responseType_,
      withCredentials: this.configuration.withCredentials,
      headers: localVarHeaders,
      observe,
      transferCache: localVarTransferCache,
      reportProgress
    });
  }
  linkAssets(id, request, observe = "body", reportProgress = false, options) {
    if (id === null || id === void 0) {
      throw new Error("Required parameter id was null or undefined when calling linkAssets.");
    }
    if (request === null || request === void 0) {
      throw new Error("Required parameter request was null or undefined when calling linkAssets.");
    }
    let localVarHeaders = this.defaultHeaders;
    let localVarCredential;
    localVarCredential = this.configuration.lookupCredential("access_token");
    if (localVarCredential) {
      localVarHeaders = localVarHeaders.set("x-access-token", localVarCredential);
    }
    let localVarHttpHeaderAcceptSelected = options && options.httpHeaderAccept;
    if (localVarHttpHeaderAcceptSelected === void 0) {
      const httpHeaderAccepts = [
        "application/json"
      ];
      localVarHttpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
    }
    if (localVarHttpHeaderAcceptSelected !== void 0) {
      localVarHeaders = localVarHeaders.set("Accept", localVarHttpHeaderAcceptSelected);
    }
    let localVarHttpContext = options && options.context;
    if (localVarHttpContext === void 0) {
      localVarHttpContext = new HttpContext();
    }
    let localVarTransferCache = options && options.transferCache;
    if (localVarTransferCache === void 0) {
      localVarTransferCache = true;
    }
    const consumes = [
      "application/json"
    ];
    const httpContentTypeSelected = this.configuration.selectHeaderContentType(consumes);
    if (httpContentTypeSelected !== void 0) {
      localVarHeaders = localVarHeaders.set("Content-Type", httpContentTypeSelected);
    }
    let responseType_ = "json";
    if (localVarHttpHeaderAcceptSelected) {
      if (localVarHttpHeaderAcceptSelected.startsWith("text")) {
        responseType_ = "text";
      } else if (this.configuration.isJsonMime(localVarHttpHeaderAcceptSelected)) {
        responseType_ = "json";
      } else {
        responseType_ = "blob";
      }
    }
    let localVarPath = `/entities/assets/${this.configuration.encodeParam({ name: "id", value: id, in: "path", style: "simple", explode: false, dataType: "string", dataFormat: void 0 })}/link`;
    return this.httpClient.request("post", `${this.configuration.basePath}${localVarPath}`, {
      context: localVarHttpContext,
      body: request,
      responseType: responseType_,
      withCredentials: this.configuration.withCredentials,
      headers: localVarHeaders,
      observe,
      transferCache: localVarTransferCache,
      reportProgress
    });
  }
  listAssets(owner, offset, limit, sort, filter, observe = "body", reportProgress = false, options) {
    if (owner === null || owner === void 0) {
      throw new Error("Required parameter owner was null or undefined when calling listAssets.");
    }
    let localVarQueryParameters = new HttpParams({ encoder: this.encoder });
    if (owner !== void 0 && owner !== null) {
      localVarQueryParameters = this.addToHttpParams(localVarQueryParameters, owner, "owner");
    }
    if (offset !== void 0 && offset !== null) {
      localVarQueryParameters = this.addToHttpParams(localVarQueryParameters, offset, "offset");
    }
    if (limit !== void 0 && limit !== null) {
      localVarQueryParameters = this.addToHttpParams(localVarQueryParameters, limit, "limit");
    }
    if (sort !== void 0 && sort !== null) {
      localVarQueryParameters = this.addToHttpParams(localVarQueryParameters, sort, "sort");
    }
    if (filter !== void 0 && filter !== null) {
      localVarQueryParameters = this.addToHttpParams(localVarQueryParameters, filter, "filter");
    }
    let localVarHeaders = this.defaultHeaders;
    let localVarCredential;
    localVarCredential = this.configuration.lookupCredential("access_token");
    if (localVarCredential) {
      localVarHeaders = localVarHeaders.set("x-access-token", localVarCredential);
    }
    let localVarHttpHeaderAcceptSelected = options && options.httpHeaderAccept;
    if (localVarHttpHeaderAcceptSelected === void 0) {
      const httpHeaderAccepts = [
        "application/json"
      ];
      localVarHttpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
    }
    if (localVarHttpHeaderAcceptSelected !== void 0) {
      localVarHeaders = localVarHeaders.set("Accept", localVarHttpHeaderAcceptSelected);
    }
    let localVarHttpContext = options && options.context;
    if (localVarHttpContext === void 0) {
      localVarHttpContext = new HttpContext();
    }
    let localVarTransferCache = options && options.transferCache;
    if (localVarTransferCache === void 0) {
      localVarTransferCache = true;
    }
    let responseType_ = "json";
    if (localVarHttpHeaderAcceptSelected) {
      if (localVarHttpHeaderAcceptSelected.startsWith("text")) {
        responseType_ = "text";
      } else if (this.configuration.isJsonMime(localVarHttpHeaderAcceptSelected)) {
        responseType_ = "json";
      } else {
        responseType_ = "blob";
      }
    }
    let localVarPath = `/entities/assets`;
    return this.httpClient.request("get", `${this.configuration.basePath}${localVarPath}`, {
      context: localVarHttpContext,
      params: localVarQueryParameters,
      responseType: responseType_,
      withCredentials: this.configuration.withCredentials,
      headers: localVarHeaders,
      observe,
      transferCache: localVarTransferCache,
      reportProgress
    });
  }
  listSharedAssetLocationTokens(owner, asset, offset, limit, sort, filter, observe = "body", reportProgress = false, options) {
    let localVarQueryParameters = new HttpParams({ encoder: this.encoder });
    if (owner !== void 0 && owner !== null) {
      localVarQueryParameters = this.addToHttpParams(localVarQueryParameters, owner, "owner");
    }
    if (asset !== void 0 && asset !== null) {
      localVarQueryParameters = this.addToHttpParams(localVarQueryParameters, asset, "asset");
    }
    if (offset !== void 0 && offset !== null) {
      localVarQueryParameters = this.addToHttpParams(localVarQueryParameters, offset, "offset");
    }
    if (limit !== void 0 && limit !== null) {
      localVarQueryParameters = this.addToHttpParams(localVarQueryParameters, limit, "limit");
    }
    if (sort !== void 0 && sort !== null) {
      localVarQueryParameters = this.addToHttpParams(localVarQueryParameters, sort, "sort");
    }
    if (filter !== void 0 && filter !== null) {
      localVarQueryParameters = this.addToHttpParams(localVarQueryParameters, filter, "filter");
    }
    let localVarHeaders = this.defaultHeaders;
    let localVarCredential;
    localVarCredential = this.configuration.lookupCredential("access_token");
    if (localVarCredential) {
      localVarHeaders = localVarHeaders.set("x-access-token", localVarCredential);
    }
    let localVarHttpHeaderAcceptSelected = options && options.httpHeaderAccept;
    if (localVarHttpHeaderAcceptSelected === void 0) {
      const httpHeaderAccepts = [
        "application/json"
      ];
      localVarHttpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
    }
    if (localVarHttpHeaderAcceptSelected !== void 0) {
      localVarHeaders = localVarHeaders.set("Accept", localVarHttpHeaderAcceptSelected);
    }
    let localVarHttpContext = options && options.context;
    if (localVarHttpContext === void 0) {
      localVarHttpContext = new HttpContext();
    }
    let localVarTransferCache = options && options.transferCache;
    if (localVarTransferCache === void 0) {
      localVarTransferCache = true;
    }
    let responseType_ = "json";
    if (localVarHttpHeaderAcceptSelected) {
      if (localVarHttpHeaderAcceptSelected.startsWith("text")) {
        responseType_ = "text";
      } else if (this.configuration.isJsonMime(localVarHttpHeaderAcceptSelected)) {
        responseType_ = "json";
      } else {
        responseType_ = "blob";
      }
    }
    let localVarPath = `/entities/assets/shared/location`;
    return this.httpClient.request("get", `${this.configuration.basePath}${localVarPath}`, {
      context: localVarHttpContext,
      params: localVarQueryParameters,
      responseType: responseType_,
      withCredentials: this.configuration.withCredentials,
      headers: localVarHeaders,
      observe,
      transferCache: localVarTransferCache,
      reportProgress
    });
  }
  moveAsset(id, request, observe = "body", reportProgress = false, options) {
    if (id === null || id === void 0) {
      throw new Error("Required parameter id was null or undefined when calling moveAsset.");
    }
    if (request === null || request === void 0) {
      throw new Error("Required parameter request was null or undefined when calling moveAsset.");
    }
    let localVarHeaders = this.defaultHeaders;
    let localVarCredential;
    localVarCredential = this.configuration.lookupCredential("access_token");
    if (localVarCredential) {
      localVarHeaders = localVarHeaders.set("x-access-token", localVarCredential);
    }
    let localVarHttpHeaderAcceptSelected = options && options.httpHeaderAccept;
    if (localVarHttpHeaderAcceptSelected === void 0) {
      const httpHeaderAccepts = [
        "application/json"
      ];
      localVarHttpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
    }
    if (localVarHttpHeaderAcceptSelected !== void 0) {
      localVarHeaders = localVarHeaders.set("Accept", localVarHttpHeaderAcceptSelected);
    }
    let localVarHttpContext = options && options.context;
    if (localVarHttpContext === void 0) {
      localVarHttpContext = new HttpContext();
    }
    let localVarTransferCache = options && options.transferCache;
    if (localVarTransferCache === void 0) {
      localVarTransferCache = true;
    }
    const consumes = [
      "application/json"
    ];
    const httpContentTypeSelected = this.configuration.selectHeaderContentType(consumes);
    if (httpContentTypeSelected !== void 0) {
      localVarHeaders = localVarHeaders.set("Content-Type", httpContentTypeSelected);
    }
    let responseType_ = "json";
    if (localVarHttpHeaderAcceptSelected) {
      if (localVarHttpHeaderAcceptSelected.startsWith("text")) {
        responseType_ = "text";
      } else if (this.configuration.isJsonMime(localVarHttpHeaderAcceptSelected)) {
        responseType_ = "json";
      } else {
        responseType_ = "blob";
      }
    }
    let localVarPath = `/entities/assets/${this.configuration.encodeParam({ name: "id", value: id, in: "path", style: "simple", explode: false, dataType: "string", dataFormat: void 0 })}/move`;
    return this.httpClient.request("post", `${this.configuration.basePath}${localVarPath}`, {
      context: localVarHttpContext,
      body: request,
      responseType: responseType_,
      withCredentials: this.configuration.withCredentials,
      headers: localVarHeaders,
      observe,
      transferCache: localVarTransferCache,
      reportProgress
    });
  }
  unlinkAssets(id, asset, observe = "body", reportProgress = false, options) {
    if (id === null || id === void 0) {
      throw new Error("Required parameter id was null or undefined when calling unlinkAssets.");
    }
    if (asset === null || asset === void 0) {
      throw new Error("Required parameter asset was null or undefined when calling unlinkAssets.");
    }
    let localVarHeaders = this.defaultHeaders;
    let localVarCredential;
    localVarCredential = this.configuration.lookupCredential("access_token");
    if (localVarCredential) {
      localVarHeaders = localVarHeaders.set("x-access-token", localVarCredential);
    }
    let localVarHttpHeaderAcceptSelected = options && options.httpHeaderAccept;
    if (localVarHttpHeaderAcceptSelected === void 0) {
      const httpHeaderAccepts = [
        "application/json"
      ];
      localVarHttpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
    }
    if (localVarHttpHeaderAcceptSelected !== void 0) {
      localVarHeaders = localVarHeaders.set("Accept", localVarHttpHeaderAcceptSelected);
    }
    let localVarHttpContext = options && options.context;
    if (localVarHttpContext === void 0) {
      localVarHttpContext = new HttpContext();
    }
    let localVarTransferCache = options && options.transferCache;
    if (localVarTransferCache === void 0) {
      localVarTransferCache = true;
    }
    let responseType_ = "json";
    if (localVarHttpHeaderAcceptSelected) {
      if (localVarHttpHeaderAcceptSelected.startsWith("text")) {
        responseType_ = "text";
      } else if (this.configuration.isJsonMime(localVarHttpHeaderAcceptSelected)) {
        responseType_ = "json";
      } else {
        responseType_ = "blob";
      }
    }
    let localVarPath = `/entities/assets/${this.configuration.encodeParam({ name: "id", value: id, in: "path", style: "simple", explode: false, dataType: "string", dataFormat: void 0 })}/unlink/${this.configuration.encodeParam({ name: "asset", value: asset, in: "path", style: "simple", explode: false, dataType: "string", dataFormat: void 0 })}`;
    return this.httpClient.request("post", `${this.configuration.basePath}${localVarPath}`, {
      context: localVarHttpContext,
      responseType: responseType_,
      withCredentials: this.configuration.withCredentials,
      headers: localVarHeaders,
      observe,
      transferCache: localVarTransferCache,
      reportProgress
    });
  }
  updateAsset(id, request, observe = "body", reportProgress = false, options) {
    if (id === null || id === void 0) {
      throw new Error("Required parameter id was null or undefined when calling updateAsset.");
    }
    if (request === null || request === void 0) {
      throw new Error("Required parameter request was null or undefined when calling updateAsset.");
    }
    let localVarHeaders = this.defaultHeaders;
    let localVarCredential;
    localVarCredential = this.configuration.lookupCredential("access_token");
    if (localVarCredential) {
      localVarHeaders = localVarHeaders.set("x-access-token", localVarCredential);
    }
    let localVarHttpHeaderAcceptSelected = options && options.httpHeaderAccept;
    if (localVarHttpHeaderAcceptSelected === void 0) {
      const httpHeaderAccepts = [
        "application/json"
      ];
      localVarHttpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
    }
    if (localVarHttpHeaderAcceptSelected !== void 0) {
      localVarHeaders = localVarHeaders.set("Accept", localVarHttpHeaderAcceptSelected);
    }
    let localVarHttpContext = options && options.context;
    if (localVarHttpContext === void 0) {
      localVarHttpContext = new HttpContext();
    }
    let localVarTransferCache = options && options.transferCache;
    if (localVarTransferCache === void 0) {
      localVarTransferCache = true;
    }
    const consumes = [
      "application/json"
    ];
    const httpContentTypeSelected = this.configuration.selectHeaderContentType(consumes);
    if (httpContentTypeSelected !== void 0) {
      localVarHeaders = localVarHeaders.set("Content-Type", httpContentTypeSelected);
    }
    let responseType_ = "json";
    if (localVarHttpHeaderAcceptSelected) {
      if (localVarHttpHeaderAcceptSelected.startsWith("text")) {
        responseType_ = "text";
      } else if (this.configuration.isJsonMime(localVarHttpHeaderAcceptSelected)) {
        responseType_ = "json";
      } else {
        responseType_ = "blob";
      }
    }
    let localVarPath = `/entities/assets/${this.configuration.encodeParam({ name: "id", value: id, in: "path", style: "simple", explode: false, dataType: "string", dataFormat: void 0 })}`;
    return this.httpClient.request("put", `${this.configuration.basePath}${localVarPath}`, {
      context: localVarHttpContext,
      body: request,
      responseType: responseType_,
      withCredentials: this.configuration.withCredentials,
      headers: localVarHeaders,
      observe,
      transferCache: localVarTransferCache,
      reportProgress
    });
  }
  updateAssetAvatar(id, observe = "body", reportProgress = false, options) {
    if (id === null || id === void 0) {
      throw new Error("Required parameter id was null or undefined when calling updateAssetAvatar.");
    }
    let localVarHeaders = this.defaultHeaders;
    let localVarCredential;
    localVarCredential = this.configuration.lookupCredential("access_token");
    if (localVarCredential) {
      localVarHeaders = localVarHeaders.set("x-access-token", localVarCredential);
    }
    let localVarHttpHeaderAcceptSelected = options && options.httpHeaderAccept;
    if (localVarHttpHeaderAcceptSelected === void 0) {
      const httpHeaderAccepts = [];
      localVarHttpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
    }
    if (localVarHttpHeaderAcceptSelected !== void 0) {
      localVarHeaders = localVarHeaders.set("Accept", localVarHttpHeaderAcceptSelected);
    }
    let localVarHttpContext = options && options.context;
    if (localVarHttpContext === void 0) {
      localVarHttpContext = new HttpContext();
    }
    let localVarTransferCache = options && options.transferCache;
    if (localVarTransferCache === void 0) {
      localVarTransferCache = true;
    }
    let responseType_ = "json";
    if (localVarHttpHeaderAcceptSelected) {
      if (localVarHttpHeaderAcceptSelected.startsWith("text")) {
        responseType_ = "text";
      } else if (this.configuration.isJsonMime(localVarHttpHeaderAcceptSelected)) {
        responseType_ = "json";
      } else {
        responseType_ = "blob";
      }
    }
    let localVarPath = `/entities/assets/${this.configuration.encodeParam({ name: "id", value: id, in: "path", style: "simple", explode: false, dataType: "string", dataFormat: void 0 })}/avatar`;
    return this.httpClient.request("post", `${this.configuration.basePath}${localVarPath}`, {
      context: localVarHttpContext,
      responseType: responseType_,
      withCredentials: this.configuration.withCredentials,
      headers: localVarHeaders,
      observe,
      transferCache: localVarTransferCache,
      reportProgress
    });
  }
  updateSharedAssetLocationToken(token, request, observe = "body", reportProgress = false, options) {
    if (token === null || token === void 0) {
      throw new Error("Required parameter token was null or undefined when calling updateSharedAssetLocationToken.");
    }
    if (request === null || request === void 0) {
      throw new Error("Required parameter request was null or undefined when calling updateSharedAssetLocationToken.");
    }
    let localVarHeaders = this.defaultHeaders;
    let localVarCredential;
    localVarCredential = this.configuration.lookupCredential("access_token");
    if (localVarCredential) {
      localVarHeaders = localVarHeaders.set("x-access-token", localVarCredential);
    }
    let localVarHttpHeaderAcceptSelected = options && options.httpHeaderAccept;
    if (localVarHttpHeaderAcceptSelected === void 0) {
      const httpHeaderAccepts = [
        "application/json"
      ];
      localVarHttpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
    }
    if (localVarHttpHeaderAcceptSelected !== void 0) {
      localVarHeaders = localVarHeaders.set("Accept", localVarHttpHeaderAcceptSelected);
    }
    let localVarHttpContext = options && options.context;
    if (localVarHttpContext === void 0) {
      localVarHttpContext = new HttpContext();
    }
    let localVarTransferCache = options && options.transferCache;
    if (localVarTransferCache === void 0) {
      localVarTransferCache = true;
    }
    const consumes = [
      "application/json"
    ];
    const httpContentTypeSelected = this.configuration.selectHeaderContentType(consumes);
    if (httpContentTypeSelected !== void 0) {
      localVarHeaders = localVarHeaders.set("Content-Type", httpContentTypeSelected);
    }
    let responseType_ = "json";
    if (localVarHttpHeaderAcceptSelected) {
      if (localVarHttpHeaderAcceptSelected.startsWith("text")) {
        responseType_ = "text";
      } else if (this.configuration.isJsonMime(localVarHttpHeaderAcceptSelected)) {
        responseType_ = "json";
      } else {
        responseType_ = "blob";
      }
    }
    let localVarPath = `/entities/assets/shared/location/${this.configuration.encodeParam({ name: "token", value: token, in: "path", style: "simple", explode: false, dataType: "string", dataFormat: void 0 })}`;
    return this.httpClient.request("put", `${this.configuration.basePath}${localVarPath}`, {
      context: localVarHttpContext,
      body: request,
      responseType: responseType_,
      withCredentials: this.configuration.withCredentials,
      headers: localVarHeaders,
      observe,
      transferCache: localVarTransferCache,
      reportProgress
    });
  }
  static \u0275fac = function AssetsService_Factory(__ngFactoryType__) {
    return new (__ngFactoryType__ || _AssetsService)(\u0275\u0275inject(HttpClient), \u0275\u0275inject(BASE_PATH, 8), \u0275\u0275inject(Configuration, 8));
  };
  static \u0275prov = /* @__PURE__ */ \u0275\u0275defineInjectable({ token: _AssetsService, factory: _AssetsService.\u0275fac, providedIn: "root" });
};
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(AssetsService, [{
    type: Injectable,
    args: [{
      providedIn: "root"
    }]
  }], () => [{ type: HttpClient }, { type: void 0, decorators: [{
    type: Optional
  }, {
    type: Inject,
    args: [BASE_PATH]
  }] }, { type: Configuration, decorators: [{
    type: Optional
  }] }], null);
})();

// src/app/api/api/auth.service.ts
var AuthService2 = class _AuthService {
  httpClient;
  basePath = "";
  defaultHeaders = new HttpHeaders();
  configuration = new Configuration();
  encoder;
  constructor(httpClient, basePath, configuration) {
    this.httpClient = httpClient;
    if (configuration) {
      this.configuration = configuration;
    }
    if (typeof this.configuration.basePath !== "string") {
      const firstBasePath = Array.isArray(basePath) ? basePath[0] : void 0;
      if (firstBasePath != void 0) {
        basePath = firstBasePath;
      }
      if (typeof basePath !== "string") {
        basePath = this.basePath;
      }
      this.configuration.basePath = basePath;
    }
    this.encoder = this.configuration.encoder || new CustomHttpParameterCodec();
  }
  // @ts-ignore
  addToHttpParams(httpParams, value, key) {
    if (typeof value === "object" && value instanceof Date === false) {
      httpParams = this.addToHttpParamsRecursive(httpParams, value);
    } else {
      httpParams = this.addToHttpParamsRecursive(httpParams, value, key);
    }
    return httpParams;
  }
  addToHttpParamsRecursive(httpParams, value, key) {
    if (value == null) {
      return httpParams;
    }
    if (typeof value === "object") {
      if (Array.isArray(value)) {
        value.forEach((elem) => httpParams = this.addToHttpParamsRecursive(httpParams, elem, key));
      } else if (value instanceof Date) {
        if (key != null) {
          httpParams = httpParams.append(key, value.toISOString().substring(0, 10));
        } else {
          throw Error("key may not be null if value is Date");
        }
      } else {
        Object.keys(value).forEach((k) => httpParams = this.addToHttpParamsRecursive(httpParams, value[k], key != null ? `${key}.${k}` : k));
      }
    } else if (key != null) {
      httpParams = httpParams.append(key, value);
    } else {
      throw Error("key may not be null if value is not object or array");
    }
    return httpParams;
  }
  changePassword(request, observe = "body", reportProgress = false, options) {
    if (request === null || request === void 0) {
      throw new Error("Required parameter request was null or undefined when calling changePassword.");
    }
    let localVarHeaders = this.defaultHeaders;
    let localVarCredential;
    localVarCredential = this.configuration.lookupCredential("access_token");
    if (localVarCredential) {
      localVarHeaders = localVarHeaders.set("x-access-token", localVarCredential);
    }
    let localVarHttpHeaderAcceptSelected = options && options.httpHeaderAccept;
    if (localVarHttpHeaderAcceptSelected === void 0) {
      const httpHeaderAccepts = [
        "application/json"
      ];
      localVarHttpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
    }
    if (localVarHttpHeaderAcceptSelected !== void 0) {
      localVarHeaders = localVarHeaders.set("Accept", localVarHttpHeaderAcceptSelected);
    }
    let localVarHttpContext = options && options.context;
    if (localVarHttpContext === void 0) {
      localVarHttpContext = new HttpContext();
    }
    let localVarTransferCache = options && options.transferCache;
    if (localVarTransferCache === void 0) {
      localVarTransferCache = true;
    }
    const consumes = [
      "application/json"
    ];
    const httpContentTypeSelected = this.configuration.selectHeaderContentType(consumes);
    if (httpContentTypeSelected !== void 0) {
      localVarHeaders = localVarHeaders.set("Content-Type", httpContentTypeSelected);
    }
    let responseType_ = "json";
    if (localVarHttpHeaderAcceptSelected) {
      if (localVarHttpHeaderAcceptSelected.startsWith("text")) {
        responseType_ = "text";
      } else if (this.configuration.isJsonMime(localVarHttpHeaderAcceptSelected)) {
        responseType_ = "json";
      } else {
        responseType_ = "blob";
      }
    }
    let localVarPath = `/auth/user/password`;
    return this.httpClient.request("put", `${this.configuration.basePath}${localVarPath}`, {
      context: localVarHttpContext,
      body: request,
      responseType: responseType_,
      withCredentials: this.configuration.withCredentials,
      headers: localVarHeaders,
      observe,
      transferCache: localVarTransferCache,
      reportProgress
    });
  }
  enrolOTP(method, observe = "body", reportProgress = false, options) {
    if (method === null || method === void 0) {
      throw new Error("Required parameter method was null or undefined when calling enrolOTP.");
    }
    let localVarHeaders = this.defaultHeaders;
    let localVarCredential;
    localVarCredential = this.configuration.lookupCredential("access_token");
    if (localVarCredential) {
      localVarHeaders = localVarHeaders.set("x-access-token", localVarCredential);
    }
    let localVarHttpHeaderAcceptSelected = options && options.httpHeaderAccept;
    if (localVarHttpHeaderAcceptSelected === void 0) {
      const httpHeaderAccepts = [
        "application/json"
      ];
      localVarHttpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
    }
    if (localVarHttpHeaderAcceptSelected !== void 0) {
      localVarHeaders = localVarHeaders.set("Accept", localVarHttpHeaderAcceptSelected);
    }
    let localVarHttpContext = options && options.context;
    if (localVarHttpContext === void 0) {
      localVarHttpContext = new HttpContext();
    }
    let localVarTransferCache = options && options.transferCache;
    if (localVarTransferCache === void 0) {
      localVarTransferCache = true;
    }
    let responseType_ = "json";
    if (localVarHttpHeaderAcceptSelected) {
      if (localVarHttpHeaderAcceptSelected.startsWith("text")) {
        responseType_ = "text";
      } else if (this.configuration.isJsonMime(localVarHttpHeaderAcceptSelected)) {
        responseType_ = "json";
      } else {
        responseType_ = "blob";
      }
    }
    let localVarPath = `/auth/otp/${this.configuration.encodeParam({ name: "method", value: method, in: "path", style: "simple", explode: false, dataType: "string", dataFormat: void 0 })}/enrol`;
    return this.httpClient.request("post", `${this.configuration.basePath}${localVarPath}`, {
      context: localVarHttpContext,
      responseType: responseType_,
      withCredentials: this.configuration.withCredentials,
      headers: localVarHeaders,
      observe,
      transferCache: localVarTransferCache,
      reportProgress
    });
  }
  getCurrentUserAvatar(observe = "body", reportProgress = false, options) {
    let localVarHeaders = this.defaultHeaders;
    let localVarCredential;
    localVarCredential = this.configuration.lookupCredential("access_token");
    if (localVarCredential) {
      localVarHeaders = localVarHeaders.set("x-access-token", localVarCredential);
    }
    let localVarHttpHeaderAcceptSelected = options && options.httpHeaderAccept;
    if (localVarHttpHeaderAcceptSelected === void 0) {
      const httpHeaderAccepts = [
        "application/json"
      ];
      localVarHttpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
    }
    if (localVarHttpHeaderAcceptSelected !== void 0) {
      localVarHeaders = localVarHeaders.set("Accept", localVarHttpHeaderAcceptSelected);
    }
    let localVarHttpContext = options && options.context;
    if (localVarHttpContext === void 0) {
      localVarHttpContext = new HttpContext();
    }
    let localVarTransferCache = options && options.transferCache;
    if (localVarTransferCache === void 0) {
      localVarTransferCache = true;
    }
    let responseType_ = "json";
    if (localVarHttpHeaderAcceptSelected) {
      if (localVarHttpHeaderAcceptSelected.startsWith("text")) {
        responseType_ = "text";
      } else if (this.configuration.isJsonMime(localVarHttpHeaderAcceptSelected)) {
        responseType_ = "json";
      } else {
        responseType_ = "blob";
      }
    }
    let localVarPath = `/auth/user/avatar`;
    return this.httpClient.request("get", `${this.configuration.basePath}${localVarPath}`, {
      context: localVarHttpContext,
      responseType: responseType_,
      withCredentials: this.configuration.withCredentials,
      headers: localVarHeaders,
      observe,
      transferCache: localVarTransferCache,
      reportProgress
    });
  }
  getUserProfile(observe = "body", reportProgress = false, options) {
    let localVarHeaders = this.defaultHeaders;
    let localVarCredential;
    localVarCredential = this.configuration.lookupCredential("access_token");
    if (localVarCredential) {
      localVarHeaders = localVarHeaders.set("x-access-token", localVarCredential);
    }
    let localVarHttpHeaderAcceptSelected = options && options.httpHeaderAccept;
    if (localVarHttpHeaderAcceptSelected === void 0) {
      const httpHeaderAccepts = [
        "application/json"
      ];
      localVarHttpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
    }
    if (localVarHttpHeaderAcceptSelected !== void 0) {
      localVarHeaders = localVarHeaders.set("Accept", localVarHttpHeaderAcceptSelected);
    }
    let localVarHttpContext = options && options.context;
    if (localVarHttpContext === void 0) {
      localVarHttpContext = new HttpContext();
    }
    let localVarTransferCache = options && options.transferCache;
    if (localVarTransferCache === void 0) {
      localVarTransferCache = true;
    }
    let responseType_ = "json";
    if (localVarHttpHeaderAcceptSelected) {
      if (localVarHttpHeaderAcceptSelected.startsWith("text")) {
        responseType_ = "text";
      } else if (this.configuration.isJsonMime(localVarHttpHeaderAcceptSelected)) {
        responseType_ = "json";
      } else {
        responseType_ = "blob";
      }
    }
    let localVarPath = `/auth/user/profile`;
    return this.httpClient.request("get", `${this.configuration.basePath}${localVarPath}`, {
      context: localVarHttpContext,
      responseType: responseType_,
      withCredentials: this.configuration.withCredentials,
      headers: localVarHeaders,
      observe,
      transferCache: localVarTransferCache,
      reportProgress
    });
  }
  refreshTokens(request, observe = "body", reportProgress = false, options) {
    if (request === null || request === void 0) {
      throw new Error("Required parameter request was null or undefined when calling refreshTokens.");
    }
    let localVarHeaders = this.defaultHeaders;
    let localVarCredential;
    localVarCredential = this.configuration.lookupCredential("access_token");
    if (localVarCredential) {
      localVarHeaders = localVarHeaders.set("x-access-token", localVarCredential);
    }
    let localVarHttpHeaderAcceptSelected = options && options.httpHeaderAccept;
    if (localVarHttpHeaderAcceptSelected === void 0) {
      const httpHeaderAccepts = [
        "application/json"
      ];
      localVarHttpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
    }
    if (localVarHttpHeaderAcceptSelected !== void 0) {
      localVarHeaders = localVarHeaders.set("Accept", localVarHttpHeaderAcceptSelected);
    }
    let localVarHttpContext = options && options.context;
    if (localVarHttpContext === void 0) {
      localVarHttpContext = new HttpContext();
    }
    let localVarTransferCache = options && options.transferCache;
    if (localVarTransferCache === void 0) {
      localVarTransferCache = true;
    }
    const consumes = [
      "application/json"
    ];
    const httpContentTypeSelected = this.configuration.selectHeaderContentType(consumes);
    if (httpContentTypeSelected !== void 0) {
      localVarHeaders = localVarHeaders.set("Content-Type", httpContentTypeSelected);
    }
    let responseType_ = "json";
    if (localVarHttpHeaderAcceptSelected) {
      if (localVarHttpHeaderAcceptSelected.startsWith("text")) {
        responseType_ = "text";
      } else if (this.configuration.isJsonMime(localVarHttpHeaderAcceptSelected)) {
        responseType_ = "json";
      } else {
        responseType_ = "blob";
      }
    }
    let localVarPath = `/auth/refresh`;
    return this.httpClient.request("post", `${this.configuration.basePath}${localVarPath}`, {
      context: localVarHttpContext,
      body: request,
      responseType: responseType_,
      withCredentials: this.configuration.withCredentials,
      headers: localVarHeaders,
      observe,
      transferCache: localVarTransferCache,
      reportProgress
    });
  }
  resetPassword(request, observe = "body", reportProgress = false, options) {
    if (request === null || request === void 0) {
      throw new Error("Required parameter request was null or undefined when calling resetPassword.");
    }
    let localVarHeaders = this.defaultHeaders;
    let localVarHttpHeaderAcceptSelected = options && options.httpHeaderAccept;
    if (localVarHttpHeaderAcceptSelected === void 0) {
      const httpHeaderAccepts = [
        "application/json"
      ];
      localVarHttpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
    }
    if (localVarHttpHeaderAcceptSelected !== void 0) {
      localVarHeaders = localVarHeaders.set("Accept", localVarHttpHeaderAcceptSelected);
    }
    let localVarHttpContext = options && options.context;
    if (localVarHttpContext === void 0) {
      localVarHttpContext = new HttpContext();
    }
    let localVarTransferCache = options && options.transferCache;
    if (localVarTransferCache === void 0) {
      localVarTransferCache = true;
    }
    const consumes = [
      "application/json"
    ];
    const httpContentTypeSelected = this.configuration.selectHeaderContentType(consumes);
    if (httpContentTypeSelected !== void 0) {
      localVarHeaders = localVarHeaders.set("Content-Type", httpContentTypeSelected);
    }
    let responseType_ = "json";
    if (localVarHttpHeaderAcceptSelected) {
      if (localVarHttpHeaderAcceptSelected.startsWith("text")) {
        responseType_ = "text";
      } else if (this.configuration.isJsonMime(localVarHttpHeaderAcceptSelected)) {
        responseType_ = "json";
      } else {
        responseType_ = "blob";
      }
    }
    let localVarPath = `/auth/password/reset`;
    return this.httpClient.request("post", `${this.configuration.basePath}${localVarPath}`, {
      context: localVarHttpContext,
      body: request,
      responseType: responseType_,
      withCredentials: this.configuration.withCredentials,
      headers: localVarHeaders,
      observe,
      transferCache: localVarTransferCache,
      reportProgress
    });
  }
  selectUser(id, observe = "body", reportProgress = false, options) {
    if (id === null || id === void 0) {
      throw new Error("Required parameter id was null or undefined when calling selectUser.");
    }
    let localVarHeaders = this.defaultHeaders;
    let localVarCredential;
    localVarCredential = this.configuration.lookupCredential("access_token");
    if (localVarCredential) {
      localVarHeaders = localVarHeaders.set("x-access-token", localVarCredential);
    }
    let localVarHttpHeaderAcceptSelected = options && options.httpHeaderAccept;
    if (localVarHttpHeaderAcceptSelected === void 0) {
      const httpHeaderAccepts = [
        "application/json"
      ];
      localVarHttpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
    }
    if (localVarHttpHeaderAcceptSelected !== void 0) {
      localVarHeaders = localVarHeaders.set("Accept", localVarHttpHeaderAcceptSelected);
    }
    let localVarHttpContext = options && options.context;
    if (localVarHttpContext === void 0) {
      localVarHttpContext = new HttpContext();
    }
    let localVarTransferCache = options && options.transferCache;
    if (localVarTransferCache === void 0) {
      localVarTransferCache = true;
    }
    let responseType_ = "json";
    if (localVarHttpHeaderAcceptSelected) {
      if (localVarHttpHeaderAcceptSelected.startsWith("text")) {
        responseType_ = "text";
      } else if (this.configuration.isJsonMime(localVarHttpHeaderAcceptSelected)) {
        responseType_ = "json";
      } else {
        responseType_ = "blob";
      }
    }
    let localVarPath = `/auth/select/user/${this.configuration.encodeParam({ name: "id", value: id, in: "path", style: "simple", explode: false, dataType: "string", dataFormat: void 0 })}`;
    return this.httpClient.request("get", `${this.configuration.basePath}${localVarPath}`, {
      context: localVarHttpContext,
      responseType: responseType_,
      withCredentials: this.configuration.withCredentials,
      headers: localVarHeaders,
      observe,
      transferCache: localVarTransferCache,
      reportProgress
    });
  }
  sendOTP(method, observe = "body", reportProgress = false, options) {
    if (method === null || method === void 0) {
      throw new Error("Required parameter method was null or undefined when calling sendOTP.");
    }
    let localVarHeaders = this.defaultHeaders;
    let localVarCredential;
    localVarCredential = this.configuration.lookupCredential("access_token");
    if (localVarCredential) {
      localVarHeaders = localVarHeaders.set("x-access-token", localVarCredential);
    }
    let localVarHttpHeaderAcceptSelected = options && options.httpHeaderAccept;
    if (localVarHttpHeaderAcceptSelected === void 0) {
      const httpHeaderAccepts = [
        "application/json"
      ];
      localVarHttpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
    }
    if (localVarHttpHeaderAcceptSelected !== void 0) {
      localVarHeaders = localVarHeaders.set("Accept", localVarHttpHeaderAcceptSelected);
    }
    let localVarHttpContext = options && options.context;
    if (localVarHttpContext === void 0) {
      localVarHttpContext = new HttpContext();
    }
    let localVarTransferCache = options && options.transferCache;
    if (localVarTransferCache === void 0) {
      localVarTransferCache = true;
    }
    let responseType_ = "json";
    if (localVarHttpHeaderAcceptSelected) {
      if (localVarHttpHeaderAcceptSelected.startsWith("text")) {
        responseType_ = "text";
      } else if (this.configuration.isJsonMime(localVarHttpHeaderAcceptSelected)) {
        responseType_ = "json";
      } else {
        responseType_ = "blob";
      }
    }
    let localVarPath = `/auth/otp/${this.configuration.encodeParam({ name: "method", value: method, in: "path", style: "simple", explode: false, dataType: "string", dataFormat: void 0 })}/send`;
    return this.httpClient.request("post", `${this.configuration.basePath}${localVarPath}`, {
      context: localVarHttpContext,
      responseType: responseType_,
      withCredentials: this.configuration.withCredentials,
      headers: localVarHeaders,
      observe,
      transferCache: localVarTransferCache,
      reportProgress
    });
  }
  setPassword(request, observe = "body", reportProgress = false, options) {
    if (request === null || request === void 0) {
      throw new Error("Required parameter request was null or undefined when calling setPassword.");
    }
    let localVarHeaders = this.defaultHeaders;
    let localVarHttpHeaderAcceptSelected = options && options.httpHeaderAccept;
    if (localVarHttpHeaderAcceptSelected === void 0) {
      const httpHeaderAccepts = [
        "application/json"
      ];
      localVarHttpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
    }
    if (localVarHttpHeaderAcceptSelected !== void 0) {
      localVarHeaders = localVarHeaders.set("Accept", localVarHttpHeaderAcceptSelected);
    }
    let localVarHttpContext = options && options.context;
    if (localVarHttpContext === void 0) {
      localVarHttpContext = new HttpContext();
    }
    let localVarTransferCache = options && options.transferCache;
    if (localVarTransferCache === void 0) {
      localVarTransferCache = true;
    }
    const consumes = [
      "application/json"
    ];
    const httpContentTypeSelected = this.configuration.selectHeaderContentType(consumes);
    if (httpContentTypeSelected !== void 0) {
      localVarHeaders = localVarHeaders.set("Content-Type", httpContentTypeSelected);
    }
    let responseType_ = "json";
    if (localVarHttpHeaderAcceptSelected) {
      if (localVarHttpHeaderAcceptSelected.startsWith("text")) {
        responseType_ = "text";
      } else if (this.configuration.isJsonMime(localVarHttpHeaderAcceptSelected)) {
        responseType_ = "json";
      } else {
        responseType_ = "blob";
      }
    }
    let localVarPath = `/auth/password/set`;
    return this.httpClient.request("post", `${this.configuration.basePath}${localVarPath}`, {
      context: localVarHttpContext,
      body: request,
      responseType: responseType_,
      withCredentials: this.configuration.withCredentials,
      headers: localVarHeaders,
      observe,
      transferCache: localVarTransferCache,
      reportProgress
    });
  }
  signIn(request, observe = "body", reportProgress = false, options) {
    if (request === null || request === void 0) {
      throw new Error("Required parameter request was null or undefined when calling signIn.");
    }
    let localVarHeaders = this.defaultHeaders;
    let localVarHttpHeaderAcceptSelected = options && options.httpHeaderAccept;
    if (localVarHttpHeaderAcceptSelected === void 0) {
      const httpHeaderAccepts = [
        "application/json"
      ];
      localVarHttpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
    }
    if (localVarHttpHeaderAcceptSelected !== void 0) {
      localVarHeaders = localVarHeaders.set("Accept", localVarHttpHeaderAcceptSelected);
    }
    let localVarHttpContext = options && options.context;
    if (localVarHttpContext === void 0) {
      localVarHttpContext = new HttpContext();
    }
    let localVarTransferCache = options && options.transferCache;
    if (localVarTransferCache === void 0) {
      localVarTransferCache = true;
    }
    const consumes = [
      "application/json"
    ];
    const httpContentTypeSelected = this.configuration.selectHeaderContentType(consumes);
    if (httpContentTypeSelected !== void 0) {
      localVarHeaders = localVarHeaders.set("Content-Type", httpContentTypeSelected);
    }
    let responseType_ = "json";
    if (localVarHttpHeaderAcceptSelected) {
      if (localVarHttpHeaderAcceptSelected.startsWith("text")) {
        responseType_ = "text";
      } else if (this.configuration.isJsonMime(localVarHttpHeaderAcceptSelected)) {
        responseType_ = "json";
      } else {
        responseType_ = "blob";
      }
    }
    let localVarPath = `/auth/signin`;
    return this.httpClient.request("post", `${this.configuration.basePath}${localVarPath}`, {
      context: localVarHttpContext,
      body: request,
      responseType: responseType_,
      withCredentials: this.configuration.withCredentials,
      headers: localVarHeaders,
      observe,
      transferCache: localVarTransferCache,
      reportProgress
    });
  }
  signOut(request, observe = "body", reportProgress = false, options) {
    if (request === null || request === void 0) {
      throw new Error("Required parameter request was null or undefined when calling signOut.");
    }
    let localVarHeaders = this.defaultHeaders;
    let localVarHttpHeaderAcceptSelected = options && options.httpHeaderAccept;
    if (localVarHttpHeaderAcceptSelected === void 0) {
      const httpHeaderAccepts = [
        "application/json"
      ];
      localVarHttpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
    }
    if (localVarHttpHeaderAcceptSelected !== void 0) {
      localVarHeaders = localVarHeaders.set("Accept", localVarHttpHeaderAcceptSelected);
    }
    let localVarHttpContext = options && options.context;
    if (localVarHttpContext === void 0) {
      localVarHttpContext = new HttpContext();
    }
    let localVarTransferCache = options && options.transferCache;
    if (localVarTransferCache === void 0) {
      localVarTransferCache = true;
    }
    const consumes = [
      "application/json"
    ];
    const httpContentTypeSelected = this.configuration.selectHeaderContentType(consumes);
    if (httpContentTypeSelected !== void 0) {
      localVarHeaders = localVarHeaders.set("Content-Type", httpContentTypeSelected);
    }
    let responseType_ = "json";
    if (localVarHttpHeaderAcceptSelected) {
      if (localVarHttpHeaderAcceptSelected.startsWith("text")) {
        responseType_ = "text";
      } else if (this.configuration.isJsonMime(localVarHttpHeaderAcceptSelected)) {
        responseType_ = "json";
      } else {
        responseType_ = "blob";
      }
    }
    let localVarPath = `/auth/signout`;
    return this.httpClient.request("post", `${this.configuration.basePath}${localVarPath}`, {
      context: localVarHttpContext,
      body: request,
      responseType: responseType_,
      withCredentials: this.configuration.withCredentials,
      headers: localVarHeaders,
      observe,
      transferCache: localVarTransferCache,
      reportProgress
    });
  }
  validateOTP(method, request, observe = "body", reportProgress = false, options) {
    if (method === null || method === void 0) {
      throw new Error("Required parameter method was null or undefined when calling validateOTP.");
    }
    if (request === null || request === void 0) {
      throw new Error("Required parameter request was null or undefined when calling validateOTP.");
    }
    let localVarHeaders = this.defaultHeaders;
    let localVarCredential;
    localVarCredential = this.configuration.lookupCredential("access_token");
    if (localVarCredential) {
      localVarHeaders = localVarHeaders.set("x-access-token", localVarCredential);
    }
    let localVarHttpHeaderAcceptSelected = options && options.httpHeaderAccept;
    if (localVarHttpHeaderAcceptSelected === void 0) {
      const httpHeaderAccepts = [
        "application/json"
      ];
      localVarHttpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
    }
    if (localVarHttpHeaderAcceptSelected !== void 0) {
      localVarHeaders = localVarHeaders.set("Accept", localVarHttpHeaderAcceptSelected);
    }
    let localVarHttpContext = options && options.context;
    if (localVarHttpContext === void 0) {
      localVarHttpContext = new HttpContext();
    }
    let localVarTransferCache = options && options.transferCache;
    if (localVarTransferCache === void 0) {
      localVarTransferCache = true;
    }
    const consumes = [
      "application/json"
    ];
    const httpContentTypeSelected = this.configuration.selectHeaderContentType(consumes);
    if (httpContentTypeSelected !== void 0) {
      localVarHeaders = localVarHeaders.set("Content-Type", httpContentTypeSelected);
    }
    let responseType_ = "json";
    if (localVarHttpHeaderAcceptSelected) {
      if (localVarHttpHeaderAcceptSelected.startsWith("text")) {
        responseType_ = "text";
      } else if (this.configuration.isJsonMime(localVarHttpHeaderAcceptSelected)) {
        responseType_ = "json";
      } else {
        responseType_ = "blob";
      }
    }
    let localVarPath = `/auth/otp/${this.configuration.encodeParam({ name: "method", value: method, in: "path", style: "simple", explode: false, dataType: "string", dataFormat: void 0 })}/validate`;
    return this.httpClient.request("post", `${this.configuration.basePath}${localVarPath}`, {
      context: localVarHttpContext,
      body: request,
      responseType: responseType_,
      withCredentials: this.configuration.withCredentials,
      headers: localVarHeaders,
      observe,
      transferCache: localVarTransferCache,
      reportProgress
    });
  }
  verifyOTP(method, request, observe = "body", reportProgress = false, options) {
    if (method === null || method === void 0) {
      throw new Error("Required parameter method was null or undefined when calling verifyOTP.");
    }
    if (request === null || request === void 0) {
      throw new Error("Required parameter request was null or undefined when calling verifyOTP.");
    }
    let localVarHeaders = this.defaultHeaders;
    let localVarCredential;
    localVarCredential = this.configuration.lookupCredential("access_token");
    if (localVarCredential) {
      localVarHeaders = localVarHeaders.set("x-access-token", localVarCredential);
    }
    let localVarHttpHeaderAcceptSelected = options && options.httpHeaderAccept;
    if (localVarHttpHeaderAcceptSelected === void 0) {
      const httpHeaderAccepts = [
        "application/json"
      ];
      localVarHttpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
    }
    if (localVarHttpHeaderAcceptSelected !== void 0) {
      localVarHeaders = localVarHeaders.set("Accept", localVarHttpHeaderAcceptSelected);
    }
    let localVarHttpContext = options && options.context;
    if (localVarHttpContext === void 0) {
      localVarHttpContext = new HttpContext();
    }
    let localVarTransferCache = options && options.transferCache;
    if (localVarTransferCache === void 0) {
      localVarTransferCache = true;
    }
    const consumes = [
      "application/json"
    ];
    const httpContentTypeSelected = this.configuration.selectHeaderContentType(consumes);
    if (httpContentTypeSelected !== void 0) {
      localVarHeaders = localVarHeaders.set("Content-Type", httpContentTypeSelected);
    }
    let responseType_ = "json";
    if (localVarHttpHeaderAcceptSelected) {
      if (localVarHttpHeaderAcceptSelected.startsWith("text")) {
        responseType_ = "text";
      } else if (this.configuration.isJsonMime(localVarHttpHeaderAcceptSelected)) {
        responseType_ = "json";
      } else {
        responseType_ = "blob";
      }
    }
    let localVarPath = `/auth/otp/${this.configuration.encodeParam({ name: "method", value: method, in: "path", style: "simple", explode: false, dataType: "string", dataFormat: void 0 })}/verify`;
    return this.httpClient.request("post", `${this.configuration.basePath}${localVarPath}`, {
      context: localVarHttpContext,
      body: request,
      responseType: responseType_,
      withCredentials: this.configuration.withCredentials,
      headers: localVarHeaders,
      observe,
      transferCache: localVarTransferCache,
      reportProgress
    });
  }
  static \u0275fac = function AuthService_Factory(__ngFactoryType__) {
    return new (__ngFactoryType__ || _AuthService)(\u0275\u0275inject(HttpClient), \u0275\u0275inject(BASE_PATH, 8), \u0275\u0275inject(Configuration, 8));
  };
  static \u0275prov = /* @__PURE__ */ \u0275\u0275defineInjectable({ token: _AuthService, factory: _AuthService.\u0275fac, providedIn: "root" });
};
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(AuthService2, [{
    type: Injectable,
    args: [{
      providedIn: "root"
    }]
  }], () => [{ type: HttpClient }, { type: void 0, decorators: [{
    type: Optional
  }, {
    type: Inject,
    args: [BASE_PATH]
  }] }, { type: Configuration, decorators: [{
    type: Optional
  }] }], null);
})();

// src/app/api/api/clients.service.ts
var ClientsService = class _ClientsService {
  httpClient;
  basePath = "";
  defaultHeaders = new HttpHeaders();
  configuration = new Configuration();
  encoder;
  constructor(httpClient, basePath, configuration) {
    this.httpClient = httpClient;
    if (configuration) {
      this.configuration = configuration;
    }
    if (typeof this.configuration.basePath !== "string") {
      const firstBasePath = Array.isArray(basePath) ? basePath[0] : void 0;
      if (firstBasePath != void 0) {
        basePath = firstBasePath;
      }
      if (typeof basePath !== "string") {
        basePath = this.basePath;
      }
      this.configuration.basePath = basePath;
    }
    this.encoder = this.configuration.encoder || new CustomHttpParameterCodec();
  }
  // @ts-ignore
  addToHttpParams(httpParams, value, key) {
    if (typeof value === "object" && value instanceof Date === false) {
      httpParams = this.addToHttpParamsRecursive(httpParams, value);
    } else {
      httpParams = this.addToHttpParamsRecursive(httpParams, value, key);
    }
    return httpParams;
  }
  addToHttpParamsRecursive(httpParams, value, key) {
    if (value == null) {
      return httpParams;
    }
    if (typeof value === "object") {
      if (Array.isArray(value)) {
        value.forEach((elem) => httpParams = this.addToHttpParamsRecursive(httpParams, elem, key));
      } else if (value instanceof Date) {
        if (key != null) {
          httpParams = httpParams.append(key, value.toISOString().substring(0, 10));
        } else {
          throw Error("key may not be null if value is Date");
        }
      } else {
        Object.keys(value).forEach((k) => httpParams = this.addToHttpParamsRecursive(httpParams, value[k], key != null ? `${key}.${k}` : k));
      }
    } else if (key != null) {
      httpParams = httpParams.append(key, value);
    } else {
      throw Error("key may not be null if value is not object or array");
    }
    return httpParams;
  }
  createClient(request, observe = "body", reportProgress = false, options) {
    if (request === null || request === void 0) {
      throw new Error("Required parameter request was null or undefined when calling createClient.");
    }
    let localVarHeaders = this.defaultHeaders;
    let localVarCredential;
    localVarCredential = this.configuration.lookupCredential("access_token");
    if (localVarCredential) {
      localVarHeaders = localVarHeaders.set("x-access-token", localVarCredential);
    }
    let localVarHttpHeaderAcceptSelected = options && options.httpHeaderAccept;
    if (localVarHttpHeaderAcceptSelected === void 0) {
      const httpHeaderAccepts = [
        "application/json"
      ];
      localVarHttpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
    }
    if (localVarHttpHeaderAcceptSelected !== void 0) {
      localVarHeaders = localVarHeaders.set("Accept", localVarHttpHeaderAcceptSelected);
    }
    let localVarHttpContext = options && options.context;
    if (localVarHttpContext === void 0) {
      localVarHttpContext = new HttpContext();
    }
    let localVarTransferCache = options && options.transferCache;
    if (localVarTransferCache === void 0) {
      localVarTransferCache = true;
    }
    const consumes = [
      "application/json"
    ];
    const httpContentTypeSelected = this.configuration.selectHeaderContentType(consumes);
    if (httpContentTypeSelected !== void 0) {
      localVarHeaders = localVarHeaders.set("Content-Type", httpContentTypeSelected);
    }
    let responseType_ = "json";
    if (localVarHttpHeaderAcceptSelected) {
      if (localVarHttpHeaderAcceptSelected.startsWith("text")) {
        responseType_ = "text";
      } else if (this.configuration.isJsonMime(localVarHttpHeaderAcceptSelected)) {
        responseType_ = "json";
      } else {
        responseType_ = "blob";
      }
    }
    let localVarPath = `/accounts/clients`;
    return this.httpClient.request("post", `${this.configuration.basePath}${localVarPath}`, {
      context: localVarHttpContext,
      body: request,
      responseType: responseType_,
      withCredentials: this.configuration.withCredentials,
      headers: localVarHeaders,
      observe,
      transferCache: localVarTransferCache,
      reportProgress
    });
  }
  deleteClientLogo(id, size, observe = "body", reportProgress = false, options) {
    if (id === null || id === void 0) {
      throw new Error("Required parameter id was null or undefined when calling deleteClientLogo.");
    }
    if (size === null || size === void 0) {
      throw new Error("Required parameter size was null or undefined when calling deleteClientLogo.");
    }
    let localVarQueryParameters = new HttpParams({ encoder: this.encoder });
    if (size !== void 0 && size !== null) {
      localVarQueryParameters = this.addToHttpParams(localVarQueryParameters, size, "size");
    }
    let localVarHeaders = this.defaultHeaders;
    let localVarCredential;
    localVarCredential = this.configuration.lookupCredential("access_token");
    if (localVarCredential) {
      localVarHeaders = localVarHeaders.set("x-access-token", localVarCredential);
    }
    let localVarHttpHeaderAcceptSelected = options && options.httpHeaderAccept;
    if (localVarHttpHeaderAcceptSelected === void 0) {
      const httpHeaderAccepts = [];
      localVarHttpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
    }
    if (localVarHttpHeaderAcceptSelected !== void 0) {
      localVarHeaders = localVarHeaders.set("Accept", localVarHttpHeaderAcceptSelected);
    }
    let localVarHttpContext = options && options.context;
    if (localVarHttpContext === void 0) {
      localVarHttpContext = new HttpContext();
    }
    let localVarTransferCache = options && options.transferCache;
    if (localVarTransferCache === void 0) {
      localVarTransferCache = true;
    }
    let responseType_ = "json";
    if (localVarHttpHeaderAcceptSelected) {
      if (localVarHttpHeaderAcceptSelected.startsWith("text")) {
        responseType_ = "text";
      } else if (this.configuration.isJsonMime(localVarHttpHeaderAcceptSelected)) {
        responseType_ = "json";
      } else {
        responseType_ = "blob";
      }
    }
    let localVarPath = `/accounts/clients/${this.configuration.encodeParam({ name: "id", value: id, in: "path", style: "simple", explode: false, dataType: "string", dataFormat: void 0 })}/logo`;
    return this.httpClient.request("delete", `${this.configuration.basePath}${localVarPath}`, {
      context: localVarHttpContext,
      params: localVarQueryParameters,
      responseType: responseType_,
      withCredentials: this.configuration.withCredentials,
      headers: localVarHeaders,
      observe,
      transferCache: localVarTransferCache,
      reportProgress
    });
  }
  getClient(id, observe = "body", reportProgress = false, options) {
    if (id === null || id === void 0) {
      throw new Error("Required parameter id was null or undefined when calling getClient.");
    }
    let localVarHeaders = this.defaultHeaders;
    let localVarCredential;
    localVarCredential = this.configuration.lookupCredential("access_token");
    if (localVarCredential) {
      localVarHeaders = localVarHeaders.set("x-access-token", localVarCredential);
    }
    let localVarHttpHeaderAcceptSelected = options && options.httpHeaderAccept;
    if (localVarHttpHeaderAcceptSelected === void 0) {
      const httpHeaderAccepts = [
        "application/json"
      ];
      localVarHttpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
    }
    if (localVarHttpHeaderAcceptSelected !== void 0) {
      localVarHeaders = localVarHeaders.set("Accept", localVarHttpHeaderAcceptSelected);
    }
    let localVarHttpContext = options && options.context;
    if (localVarHttpContext === void 0) {
      localVarHttpContext = new HttpContext();
    }
    let localVarTransferCache = options && options.transferCache;
    if (localVarTransferCache === void 0) {
      localVarTransferCache = true;
    }
    let responseType_ = "json";
    if (localVarHttpHeaderAcceptSelected) {
      if (localVarHttpHeaderAcceptSelected.startsWith("text")) {
        responseType_ = "text";
      } else if (this.configuration.isJsonMime(localVarHttpHeaderAcceptSelected)) {
        responseType_ = "json";
      } else {
        responseType_ = "blob";
      }
    }
    let localVarPath = `/accounts/clients/${this.configuration.encodeParam({ name: "id", value: id, in: "path", style: "simple", explode: false, dataType: "string", dataFormat: void 0 })}`;
    return this.httpClient.request("get", `${this.configuration.basePath}${localVarPath}`, {
      context: localVarHttpContext,
      responseType: responseType_,
      withCredentials: this.configuration.withCredentials,
      headers: localVarHeaders,
      observe,
      transferCache: localVarTransferCache,
      reportProgress
    });
  }
  getClientByPin(pin, observe = "body", reportProgress = false, options) {
    if (pin === null || pin === void 0) {
      throw new Error("Required parameter pin was null or undefined when calling getClientByPin.");
    }
    let localVarHeaders = this.defaultHeaders;
    let localVarCredential;
    localVarCredential = this.configuration.lookupCredential("access_token");
    if (localVarCredential) {
      localVarHeaders = localVarHeaders.set("x-access-token", localVarCredential);
    }
    let localVarHttpHeaderAcceptSelected = options && options.httpHeaderAccept;
    if (localVarHttpHeaderAcceptSelected === void 0) {
      const httpHeaderAccepts = [
        "application/json"
      ];
      localVarHttpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
    }
    if (localVarHttpHeaderAcceptSelected !== void 0) {
      localVarHeaders = localVarHeaders.set("Accept", localVarHttpHeaderAcceptSelected);
    }
    let localVarHttpContext = options && options.context;
    if (localVarHttpContext === void 0) {
      localVarHttpContext = new HttpContext();
    }
    let localVarTransferCache = options && options.transferCache;
    if (localVarTransferCache === void 0) {
      localVarTransferCache = true;
    }
    let responseType_ = "json";
    if (localVarHttpHeaderAcceptSelected) {
      if (localVarHttpHeaderAcceptSelected.startsWith("text")) {
        responseType_ = "text";
      } else if (this.configuration.isJsonMime(localVarHttpHeaderAcceptSelected)) {
        responseType_ = "json";
      } else {
        responseType_ = "blob";
      }
    }
    let localVarPath = `/accounts/clients/pin/${this.configuration.encodeParam({ name: "pin", value: pin, in: "path", style: "simple", explode: false, dataType: "string", dataFormat: void 0 })}`;
    return this.httpClient.request("get", `${this.configuration.basePath}${localVarPath}`, {
      context: localVarHttpContext,
      responseType: responseType_,
      withCredentials: this.configuration.withCredentials,
      headers: localVarHeaders,
      observe,
      transferCache: localVarTransferCache,
      reportProgress
    });
  }
  getClientLogo(id, size, observe = "body", reportProgress = false, options) {
    if (id === null || id === void 0) {
      throw new Error("Required parameter id was null or undefined when calling getClientLogo.");
    }
    let localVarQueryParameters = new HttpParams({ encoder: this.encoder });
    if (size !== void 0 && size !== null) {
      localVarQueryParameters = this.addToHttpParams(localVarQueryParameters, size, "size");
    }
    let localVarHeaders = this.defaultHeaders;
    let localVarHttpHeaderAcceptSelected = options && options.httpHeaderAccept;
    if (localVarHttpHeaderAcceptSelected === void 0) {
      const httpHeaderAccepts = [
        "application/json, text/plain, */*"
      ];
      localVarHttpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
    }
    if (localVarHttpHeaderAcceptSelected !== void 0) {
      localVarHeaders = localVarHeaders.set("Accept", localVarHttpHeaderAcceptSelected);
    }
    let localVarHttpContext = options && options.context;
    if (localVarHttpContext === void 0) {
      localVarHttpContext = new HttpContext();
    }
    let localVarTransferCache = options && options.transferCache;
    if (localVarTransferCache === void 0) {
      localVarTransferCache = true;
    }
    let responseType_ = "json";
    if (localVarHttpHeaderAcceptSelected) {
      if (localVarHttpHeaderAcceptSelected.startsWith("text")) {
        responseType_ = "text";
      } else if (this.configuration.isJsonMime(localVarHttpHeaderAcceptSelected)) {
        responseType_ = "json";
      } else {
        responseType_ = "blob";
      }
    }
    let localVarPath = `/accounts/clients/${this.configuration.encodeParam({ name: "id", value: id, in: "path", style: "simple", explode: false, dataType: "string", dataFormat: void 0 })}/logo`;
    return this.httpClient.request("get", `${this.configuration.basePath}${localVarPath}`, {
      context: localVarHttpContext,
      params: localVarQueryParameters,
      responseType: responseType_,
      withCredentials: this.configuration.withCredentials,
      headers: localVarHeaders,
      observe,
      transferCache: localVarTransferCache,
      reportProgress
    });
  }
  listClients(owner, offset, limit, sort, filter, counts, observe = "body", reportProgress = false, options) {
    if (owner === null || owner === void 0) {
      throw new Error("Required parameter owner was null or undefined when calling listClients.");
    }
    let localVarQueryParameters = new HttpParams({ encoder: this.encoder });
    if (owner !== void 0 && owner !== null) {
      localVarQueryParameters = this.addToHttpParams(localVarQueryParameters, owner, "owner");
    }
    if (offset !== void 0 && offset !== null) {
      localVarQueryParameters = this.addToHttpParams(localVarQueryParameters, offset, "offset");
    }
    if (limit !== void 0 && limit !== null) {
      localVarQueryParameters = this.addToHttpParams(localVarQueryParameters, limit, "limit");
    }
    if (sort !== void 0 && sort !== null) {
      localVarQueryParameters = this.addToHttpParams(localVarQueryParameters, sort, "sort");
    }
    if (filter !== void 0 && filter !== null) {
      localVarQueryParameters = this.addToHttpParams(localVarQueryParameters, filter, "filter");
    }
    if (counts !== void 0 && counts !== null) {
      localVarQueryParameters = this.addToHttpParams(localVarQueryParameters, counts, "counts");
    }
    let localVarHeaders = this.defaultHeaders;
    let localVarCredential;
    localVarCredential = this.configuration.lookupCredential("access_token");
    if (localVarCredential) {
      localVarHeaders = localVarHeaders.set("x-access-token", localVarCredential);
    }
    let localVarHttpHeaderAcceptSelected = options && options.httpHeaderAccept;
    if (localVarHttpHeaderAcceptSelected === void 0) {
      const httpHeaderAccepts = [
        "application/json"
      ];
      localVarHttpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
    }
    if (localVarHttpHeaderAcceptSelected !== void 0) {
      localVarHeaders = localVarHeaders.set("Accept", localVarHttpHeaderAcceptSelected);
    }
    let localVarHttpContext = options && options.context;
    if (localVarHttpContext === void 0) {
      localVarHttpContext = new HttpContext();
    }
    let localVarTransferCache = options && options.transferCache;
    if (localVarTransferCache === void 0) {
      localVarTransferCache = true;
    }
    let responseType_ = "json";
    if (localVarHttpHeaderAcceptSelected) {
      if (localVarHttpHeaderAcceptSelected.startsWith("text")) {
        responseType_ = "text";
      } else if (this.configuration.isJsonMime(localVarHttpHeaderAcceptSelected)) {
        responseType_ = "json";
      } else {
        responseType_ = "blob";
      }
    }
    let localVarPath = `/accounts/clients`;
    return this.httpClient.request("get", `${this.configuration.basePath}${localVarPath}`, {
      context: localVarHttpContext,
      params: localVarQueryParameters,
      responseType: responseType_,
      withCredentials: this.configuration.withCredentials,
      headers: localVarHeaders,
      observe,
      transferCache: localVarTransferCache,
      reportProgress
    });
  }
  updateClient(id, request, observe = "body", reportProgress = false, options) {
    if (id === null || id === void 0) {
      throw new Error("Required parameter id was null or undefined when calling updateClient.");
    }
    if (request === null || request === void 0) {
      throw new Error("Required parameter request was null or undefined when calling updateClient.");
    }
    let localVarHeaders = this.defaultHeaders;
    let localVarCredential;
    localVarCredential = this.configuration.lookupCredential("access_token");
    if (localVarCredential) {
      localVarHeaders = localVarHeaders.set("x-access-token", localVarCredential);
    }
    let localVarHttpHeaderAcceptSelected = options && options.httpHeaderAccept;
    if (localVarHttpHeaderAcceptSelected === void 0) {
      const httpHeaderAccepts = [
        "application/json"
      ];
      localVarHttpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
    }
    if (localVarHttpHeaderAcceptSelected !== void 0) {
      localVarHeaders = localVarHeaders.set("Accept", localVarHttpHeaderAcceptSelected);
    }
    let localVarHttpContext = options && options.context;
    if (localVarHttpContext === void 0) {
      localVarHttpContext = new HttpContext();
    }
    let localVarTransferCache = options && options.transferCache;
    if (localVarTransferCache === void 0) {
      localVarTransferCache = true;
    }
    const consumes = [
      "application/json"
    ];
    const httpContentTypeSelected = this.configuration.selectHeaderContentType(consumes);
    if (httpContentTypeSelected !== void 0) {
      localVarHeaders = localVarHeaders.set("Content-Type", httpContentTypeSelected);
    }
    let responseType_ = "json";
    if (localVarHttpHeaderAcceptSelected) {
      if (localVarHttpHeaderAcceptSelected.startsWith("text")) {
        responseType_ = "text";
      } else if (this.configuration.isJsonMime(localVarHttpHeaderAcceptSelected)) {
        responseType_ = "json";
      } else {
        responseType_ = "blob";
      }
    }
    let localVarPath = `/accounts/clients/${this.configuration.encodeParam({ name: "id", value: id, in: "path", style: "simple", explode: false, dataType: "string", dataFormat: void 0 })}`;
    return this.httpClient.request("put", `${this.configuration.basePath}${localVarPath}`, {
      context: localVarHttpContext,
      body: request,
      responseType: responseType_,
      withCredentials: this.configuration.withCredentials,
      headers: localVarHeaders,
      observe,
      transferCache: localVarTransferCache,
      reportProgress
    });
  }
  updateClientDetails(id, request, observe = "body", reportProgress = false, options) {
    if (id === null || id === void 0) {
      throw new Error("Required parameter id was null or undefined when calling updateClientDetails.");
    }
    if (request === null || request === void 0) {
      throw new Error("Required parameter request was null or undefined when calling updateClientDetails.");
    }
    let localVarHeaders = this.defaultHeaders;
    let localVarCredential;
    localVarCredential = this.configuration.lookupCredential("access_token");
    if (localVarCredential) {
      localVarHeaders = localVarHeaders.set("x-access-token", localVarCredential);
    }
    let localVarHttpHeaderAcceptSelected = options && options.httpHeaderAccept;
    if (localVarHttpHeaderAcceptSelected === void 0) {
      const httpHeaderAccepts = [
        "application/json"
      ];
      localVarHttpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
    }
    if (localVarHttpHeaderAcceptSelected !== void 0) {
      localVarHeaders = localVarHeaders.set("Accept", localVarHttpHeaderAcceptSelected);
    }
    let localVarHttpContext = options && options.context;
    if (localVarHttpContext === void 0) {
      localVarHttpContext = new HttpContext();
    }
    let localVarTransferCache = options && options.transferCache;
    if (localVarTransferCache === void 0) {
      localVarTransferCache = true;
    }
    const consumes = [
      "application/json"
    ];
    const httpContentTypeSelected = this.configuration.selectHeaderContentType(consumes);
    if (httpContentTypeSelected !== void 0) {
      localVarHeaders = localVarHeaders.set("Content-Type", httpContentTypeSelected);
    }
    let responseType_ = "json";
    if (localVarHttpHeaderAcceptSelected) {
      if (localVarHttpHeaderAcceptSelected.startsWith("text")) {
        responseType_ = "text";
      } else if (this.configuration.isJsonMime(localVarHttpHeaderAcceptSelected)) {
        responseType_ = "json";
      } else {
        responseType_ = "blob";
      }
    }
    let localVarPath = `/accounts/clients/${this.configuration.encodeParam({ name: "id", value: id, in: "path", style: "simple", explode: false, dataType: "string", dataFormat: void 0 })}/details`;
    return this.httpClient.request("put", `${this.configuration.basePath}${localVarPath}`, {
      context: localVarHttpContext,
      body: request,
      responseType: responseType_,
      withCredentials: this.configuration.withCredentials,
      headers: localVarHeaders,
      observe,
      transferCache: localVarTransferCache,
      reportProgress
    });
  }
  updateClientLogo(id, size, observe = "body", reportProgress = false, options) {
    if (id === null || id === void 0) {
      throw new Error("Required parameter id was null or undefined when calling updateClientLogo.");
    }
    if (size === null || size === void 0) {
      throw new Error("Required parameter size was null or undefined when calling updateClientLogo.");
    }
    let localVarQueryParameters = new HttpParams({ encoder: this.encoder });
    if (size !== void 0 && size !== null) {
      localVarQueryParameters = this.addToHttpParams(localVarQueryParameters, size, "size");
    }
    let localVarHeaders = this.defaultHeaders;
    let localVarCredential;
    localVarCredential = this.configuration.lookupCredential("access_token");
    if (localVarCredential) {
      localVarHeaders = localVarHeaders.set("x-access-token", localVarCredential);
    }
    let localVarHttpHeaderAcceptSelected = options && options.httpHeaderAccept;
    if (localVarHttpHeaderAcceptSelected === void 0) {
      const httpHeaderAccepts = [];
      localVarHttpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
    }
    if (localVarHttpHeaderAcceptSelected !== void 0) {
      localVarHeaders = localVarHeaders.set("Accept", localVarHttpHeaderAcceptSelected);
    }
    let localVarHttpContext = options && options.context;
    if (localVarHttpContext === void 0) {
      localVarHttpContext = new HttpContext();
    }
    let localVarTransferCache = options && options.transferCache;
    if (localVarTransferCache === void 0) {
      localVarTransferCache = true;
    }
    let responseType_ = "json";
    if (localVarHttpHeaderAcceptSelected) {
      if (localVarHttpHeaderAcceptSelected.startsWith("text")) {
        responseType_ = "text";
      } else if (this.configuration.isJsonMime(localVarHttpHeaderAcceptSelected)) {
        responseType_ = "json";
      } else {
        responseType_ = "blob";
      }
    }
    let localVarPath = `/accounts/clients/${this.configuration.encodeParam({ name: "id", value: id, in: "path", style: "simple", explode: false, dataType: "string", dataFormat: void 0 })}/logo`;
    return this.httpClient.request("post", `${this.configuration.basePath}${localVarPath}`, {
      context: localVarHttpContext,
      params: localVarQueryParameters,
      responseType: responseType_,
      withCredentials: this.configuration.withCredentials,
      headers: localVarHeaders,
      observe,
      transferCache: localVarTransferCache,
      reportProgress
    });
  }
  static \u0275fac = function ClientsService_Factory(__ngFactoryType__) {
    return new (__ngFactoryType__ || _ClientsService)(\u0275\u0275inject(HttpClient), \u0275\u0275inject(BASE_PATH, 8), \u0275\u0275inject(Configuration, 8));
  };
  static \u0275prov = /* @__PURE__ */ \u0275\u0275defineInjectable({ token: _ClientsService, factory: _ClientsService.\u0275fac, providedIn: "root" });
};
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(ClientsService, [{
    type: Injectable,
    args: [{
      providedIn: "root"
    }]
  }], () => [{ type: HttpClient }, { type: void 0, decorators: [{
    type: Optional
  }, {
    type: Inject,
    args: [BASE_PATH]
  }] }, { type: Configuration, decorators: [{
    type: Optional
  }] }], null);
})();

// src/app/api/api/companies.service.ts
var CompaniesService = class _CompaniesService {
  httpClient;
  basePath = "";
  defaultHeaders = new HttpHeaders();
  configuration = new Configuration();
  encoder;
  constructor(httpClient, basePath, configuration) {
    this.httpClient = httpClient;
    if (configuration) {
      this.configuration = configuration;
    }
    if (typeof this.configuration.basePath !== "string") {
      const firstBasePath = Array.isArray(basePath) ? basePath[0] : void 0;
      if (firstBasePath != void 0) {
        basePath = firstBasePath;
      }
      if (typeof basePath !== "string") {
        basePath = this.basePath;
      }
      this.configuration.basePath = basePath;
    }
    this.encoder = this.configuration.encoder || new CustomHttpParameterCodec();
  }
  // @ts-ignore
  addToHttpParams(httpParams, value, key) {
    if (typeof value === "object" && value instanceof Date === false) {
      httpParams = this.addToHttpParamsRecursive(httpParams, value);
    } else {
      httpParams = this.addToHttpParamsRecursive(httpParams, value, key);
    }
    return httpParams;
  }
  addToHttpParamsRecursive(httpParams, value, key) {
    if (value == null) {
      return httpParams;
    }
    if (typeof value === "object") {
      if (Array.isArray(value)) {
        value.forEach((elem) => httpParams = this.addToHttpParamsRecursive(httpParams, elem, key));
      } else if (value instanceof Date) {
        if (key != null) {
          httpParams = httpParams.append(key, value.toISOString().substring(0, 10));
        } else {
          throw Error("key may not be null if value is Date");
        }
      } else {
        Object.keys(value).forEach((k) => httpParams = this.addToHttpParamsRecursive(httpParams, value[k], key != null ? `${key}.${k}` : k));
      }
    } else if (key != null) {
      httpParams = httpParams.append(key, value);
    } else {
      throw Error("key may not be null if value is not object or array");
    }
    return httpParams;
  }
  getCompany(id, observe = "body", reportProgress = false, options) {
    if (id === null || id === void 0) {
      throw new Error("Required parameter id was null or undefined when calling getCompany.");
    }
    let localVarHeaders = this.defaultHeaders;
    let localVarCredential;
    localVarCredential = this.configuration.lookupCredential("access_token");
    if (localVarCredential) {
      localVarHeaders = localVarHeaders.set("x-access-token", localVarCredential);
    }
    let localVarHttpHeaderAcceptSelected = options && options.httpHeaderAccept;
    if (localVarHttpHeaderAcceptSelected === void 0) {
      const httpHeaderAccepts = [
        "application/json"
      ];
      localVarHttpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
    }
    if (localVarHttpHeaderAcceptSelected !== void 0) {
      localVarHeaders = localVarHeaders.set("Accept", localVarHttpHeaderAcceptSelected);
    }
    let localVarHttpContext = options && options.context;
    if (localVarHttpContext === void 0) {
      localVarHttpContext = new HttpContext();
    }
    let localVarTransferCache = options && options.transferCache;
    if (localVarTransferCache === void 0) {
      localVarTransferCache = true;
    }
    let responseType_ = "json";
    if (localVarHttpHeaderAcceptSelected) {
      if (localVarHttpHeaderAcceptSelected.startsWith("text")) {
        responseType_ = "text";
      } else if (this.configuration.isJsonMime(localVarHttpHeaderAcceptSelected)) {
        responseType_ = "json";
      } else {
        responseType_ = "blob";
      }
    }
    let localVarPath = `/accounts/companies/${this.configuration.encodeParam({ name: "id", value: id, in: "path", style: "simple", explode: false, dataType: "string", dataFormat: void 0 })}`;
    return this.httpClient.request("get", `${this.configuration.basePath}${localVarPath}`, {
      context: localVarHttpContext,
      responseType: responseType_,
      withCredentials: this.configuration.withCredentials,
      headers: localVarHeaders,
      observe,
      transferCache: localVarTransferCache,
      reportProgress
    });
  }
  getCompanyLogo(id, size, recurse, observe = "body", reportProgress = false, options) {
    if (id === null || id === void 0) {
      throw new Error("Required parameter id was null or undefined when calling getCompanyLogo.");
    }
    if (size === null || size === void 0) {
      throw new Error("Required parameter size was null or undefined when calling getCompanyLogo.");
    }
    let localVarQueryParameters = new HttpParams({ encoder: this.encoder });
    if (size !== void 0 && size !== null) {
      localVarQueryParameters = this.addToHttpParams(localVarQueryParameters, size, "size");
    }
    if (recurse !== void 0 && recurse !== null) {
      localVarQueryParameters = this.addToHttpParams(localVarQueryParameters, recurse, "recurse");
    }
    let localVarHeaders = this.defaultHeaders;
    let localVarHttpHeaderAcceptSelected = options && options.httpHeaderAccept;
    if (localVarHttpHeaderAcceptSelected === void 0) {
      const httpHeaderAccepts = [
        "application/json"
      ];
      localVarHttpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
    }
    if (localVarHttpHeaderAcceptSelected !== void 0) {
      localVarHeaders = localVarHeaders.set("Accept", localVarHttpHeaderAcceptSelected);
    }
    let localVarHttpContext = options && options.context;
    if (localVarHttpContext === void 0) {
      localVarHttpContext = new HttpContext();
    }
    let localVarTransferCache = options && options.transferCache;
    if (localVarTransferCache === void 0) {
      localVarTransferCache = true;
    }
    let responseType_ = "json";
    if (localVarHttpHeaderAcceptSelected) {
      if (localVarHttpHeaderAcceptSelected.startsWith("text")) {
        responseType_ = "text";
      } else if (this.configuration.isJsonMime(localVarHttpHeaderAcceptSelected)) {
        responseType_ = "json";
      } else {
        responseType_ = "blob";
      }
    }
    let localVarPath = `/accounts/companies/${this.configuration.encodeParam({ name: "id", value: id, in: "path", style: "simple", explode: false, dataType: "string", dataFormat: void 0 })}/logo`;
    return this.httpClient.request("get", `${this.configuration.basePath}${localVarPath}`, {
      context: localVarHttpContext,
      params: localVarQueryParameters,
      responseType: responseType_,
      withCredentials: this.configuration.withCredentials,
      headers: localVarHeaders,
      observe,
      transferCache: localVarTransferCache,
      reportProgress
    });
  }
  static \u0275fac = function CompaniesService_Factory(__ngFactoryType__) {
    return new (__ngFactoryType__ || _CompaniesService)(\u0275\u0275inject(HttpClient), \u0275\u0275inject(BASE_PATH, 8), \u0275\u0275inject(Configuration, 8));
  };
  static \u0275prov = /* @__PURE__ */ \u0275\u0275defineInjectable({ token: _CompaniesService, factory: _CompaniesService.\u0275fac, providedIn: "root" });
};
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(CompaniesService, [{
    type: Injectable,
    args: [{
      providedIn: "root"
    }]
  }], () => [{ type: HttpClient }, { type: void 0, decorators: [{
    type: Optional
  }, {
    type: Inject,
    args: [BASE_PATH]
  }] }, { type: Configuration, decorators: [{
    type: Optional
  }] }], null);
})();

// src/app/api/api/companyGroups.service.ts
var CompanyGroupsService = class _CompanyGroupsService {
  httpClient;
  basePath = "";
  defaultHeaders = new HttpHeaders();
  configuration = new Configuration();
  encoder;
  constructor(httpClient, basePath, configuration) {
    this.httpClient = httpClient;
    if (configuration) {
      this.configuration = configuration;
    }
    if (typeof this.configuration.basePath !== "string") {
      const firstBasePath = Array.isArray(basePath) ? basePath[0] : void 0;
      if (firstBasePath != void 0) {
        basePath = firstBasePath;
      }
      if (typeof basePath !== "string") {
        basePath = this.basePath;
      }
      this.configuration.basePath = basePath;
    }
    this.encoder = this.configuration.encoder || new CustomHttpParameterCodec();
  }
  // @ts-ignore
  addToHttpParams(httpParams, value, key) {
    if (typeof value === "object" && value instanceof Date === false) {
      httpParams = this.addToHttpParamsRecursive(httpParams, value);
    } else {
      httpParams = this.addToHttpParamsRecursive(httpParams, value, key);
    }
    return httpParams;
  }
  addToHttpParamsRecursive(httpParams, value, key) {
    if (value == null) {
      return httpParams;
    }
    if (typeof value === "object") {
      if (Array.isArray(value)) {
        value.forEach((elem) => httpParams = this.addToHttpParamsRecursive(httpParams, elem, key));
      } else if (value instanceof Date) {
        if (key != null) {
          httpParams = httpParams.append(key, value.toISOString().substring(0, 10));
        } else {
          throw Error("key may not be null if value is Date");
        }
      } else {
        Object.keys(value).forEach((k) => httpParams = this.addToHttpParamsRecursive(httpParams, value[k], key != null ? `${key}.${k}` : k));
      }
    } else if (key != null) {
      httpParams = httpParams.append(key, value);
    } else {
      throw Error("key may not be null if value is not object or array");
    }
    return httpParams;
  }
  createCompanyGroup(request, observe = "body", reportProgress = false, options) {
    if (request === null || request === void 0) {
      throw new Error("Required parameter request was null or undefined when calling createCompanyGroup.");
    }
    let localVarHeaders = this.defaultHeaders;
    let localVarCredential;
    localVarCredential = this.configuration.lookupCredential("access_token");
    if (localVarCredential) {
      localVarHeaders = localVarHeaders.set("x-access-token", localVarCredential);
    }
    let localVarHttpHeaderAcceptSelected = options && options.httpHeaderAccept;
    if (localVarHttpHeaderAcceptSelected === void 0) {
      const httpHeaderAccepts = [
        "application/json"
      ];
      localVarHttpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
    }
    if (localVarHttpHeaderAcceptSelected !== void 0) {
      localVarHeaders = localVarHeaders.set("Accept", localVarHttpHeaderAcceptSelected);
    }
    let localVarHttpContext = options && options.context;
    if (localVarHttpContext === void 0) {
      localVarHttpContext = new HttpContext();
    }
    let localVarTransferCache = options && options.transferCache;
    if (localVarTransferCache === void 0) {
      localVarTransferCache = true;
    }
    const consumes = [
      "application/json"
    ];
    const httpContentTypeSelected = this.configuration.selectHeaderContentType(consumes);
    if (httpContentTypeSelected !== void 0) {
      localVarHeaders = localVarHeaders.set("Content-Type", httpContentTypeSelected);
    }
    let responseType_ = "json";
    if (localVarHttpHeaderAcceptSelected) {
      if (localVarHttpHeaderAcceptSelected.startsWith("text")) {
        responseType_ = "text";
      } else if (this.configuration.isJsonMime(localVarHttpHeaderAcceptSelected)) {
        responseType_ = "json";
      } else {
        responseType_ = "blob";
      }
    }
    let localVarPath = `/accounts/companygroups`;
    return this.httpClient.request("post", `${this.configuration.basePath}${localVarPath}`, {
      context: localVarHttpContext,
      body: request,
      responseType: responseType_,
      withCredentials: this.configuration.withCredentials,
      headers: localVarHeaders,
      observe,
      transferCache: localVarTransferCache,
      reportProgress
    });
  }
  deleteCompanyGroup(id, observe = "body", reportProgress = false, options) {
    if (id === null || id === void 0) {
      throw new Error("Required parameter id was null or undefined when calling deleteCompanyGroup.");
    }
    let localVarHeaders = this.defaultHeaders;
    let localVarCredential;
    localVarCredential = this.configuration.lookupCredential("access_token");
    if (localVarCredential) {
      localVarHeaders = localVarHeaders.set("x-access-token", localVarCredential);
    }
    let localVarHttpHeaderAcceptSelected = options && options.httpHeaderAccept;
    if (localVarHttpHeaderAcceptSelected === void 0) {
      const httpHeaderAccepts = [
        "application/json"
      ];
      localVarHttpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
    }
    if (localVarHttpHeaderAcceptSelected !== void 0) {
      localVarHeaders = localVarHeaders.set("Accept", localVarHttpHeaderAcceptSelected);
    }
    let localVarHttpContext = options && options.context;
    if (localVarHttpContext === void 0) {
      localVarHttpContext = new HttpContext();
    }
    let localVarTransferCache = options && options.transferCache;
    if (localVarTransferCache === void 0) {
      localVarTransferCache = true;
    }
    let responseType_ = "json";
    if (localVarHttpHeaderAcceptSelected) {
      if (localVarHttpHeaderAcceptSelected.startsWith("text")) {
        responseType_ = "text";
      } else if (this.configuration.isJsonMime(localVarHttpHeaderAcceptSelected)) {
        responseType_ = "json";
      } else {
        responseType_ = "blob";
      }
    }
    let localVarPath = `/accounts/companygroups/${this.configuration.encodeParam({ name: "id", value: id, in: "path", style: "simple", explode: false, dataType: "string", dataFormat: void 0 })}`;
    return this.httpClient.request("delete", `${this.configuration.basePath}${localVarPath}`, {
      context: localVarHttpContext,
      responseType: responseType_,
      withCredentials: this.configuration.withCredentials,
      headers: localVarHeaders,
      observe,
      transferCache: localVarTransferCache,
      reportProgress
    });
  }
  getCompanyGroup(id, observe = "body", reportProgress = false, options) {
    if (id === null || id === void 0) {
      throw new Error("Required parameter id was null or undefined when calling getCompanyGroup.");
    }
    let localVarHeaders = this.defaultHeaders;
    let localVarCredential;
    localVarCredential = this.configuration.lookupCredential("access_token");
    if (localVarCredential) {
      localVarHeaders = localVarHeaders.set("x-access-token", localVarCredential);
    }
    let localVarHttpHeaderAcceptSelected = options && options.httpHeaderAccept;
    if (localVarHttpHeaderAcceptSelected === void 0) {
      const httpHeaderAccepts = [
        "application/json"
      ];
      localVarHttpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
    }
    if (localVarHttpHeaderAcceptSelected !== void 0) {
      localVarHeaders = localVarHeaders.set("Accept", localVarHttpHeaderAcceptSelected);
    }
    let localVarHttpContext = options && options.context;
    if (localVarHttpContext === void 0) {
      localVarHttpContext = new HttpContext();
    }
    let localVarTransferCache = options && options.transferCache;
    if (localVarTransferCache === void 0) {
      localVarTransferCache = true;
    }
    let responseType_ = "json";
    if (localVarHttpHeaderAcceptSelected) {
      if (localVarHttpHeaderAcceptSelected.startsWith("text")) {
        responseType_ = "text";
      } else if (this.configuration.isJsonMime(localVarHttpHeaderAcceptSelected)) {
        responseType_ = "json";
      } else {
        responseType_ = "blob";
      }
    }
    let localVarPath = `/accounts/companygroups/${this.configuration.encodeParam({ name: "id", value: id, in: "path", style: "simple", explode: false, dataType: "string", dataFormat: void 0 })}`;
    return this.httpClient.request("get", `${this.configuration.basePath}${localVarPath}`, {
      context: localVarHttpContext,
      responseType: responseType_,
      withCredentials: this.configuration.withCredentials,
      headers: localVarHeaders,
      observe,
      transferCache: localVarTransferCache,
      reportProgress
    });
  }
  listCompanyGroups(owner, offset, limit, sort, filter, observe = "body", reportProgress = false, options) {
    if (owner === null || owner === void 0) {
      throw new Error("Required parameter owner was null or undefined when calling listCompanyGroups.");
    }
    let localVarQueryParameters = new HttpParams({ encoder: this.encoder });
    if (owner !== void 0 && owner !== null) {
      localVarQueryParameters = this.addToHttpParams(localVarQueryParameters, owner, "owner");
    }
    if (offset !== void 0 && offset !== null) {
      localVarQueryParameters = this.addToHttpParams(localVarQueryParameters, offset, "offset");
    }
    if (limit !== void 0 && limit !== null) {
      localVarQueryParameters = this.addToHttpParams(localVarQueryParameters, limit, "limit");
    }
    if (sort !== void 0 && sort !== null) {
      localVarQueryParameters = this.addToHttpParams(localVarQueryParameters, sort, "sort");
    }
    if (filter !== void 0 && filter !== null) {
      localVarQueryParameters = this.addToHttpParams(localVarQueryParameters, filter, "filter");
    }
    let localVarHeaders = this.defaultHeaders;
    let localVarCredential;
    localVarCredential = this.configuration.lookupCredential("access_token");
    if (localVarCredential) {
      localVarHeaders = localVarHeaders.set("x-access-token", localVarCredential);
    }
    let localVarHttpHeaderAcceptSelected = options && options.httpHeaderAccept;
    if (localVarHttpHeaderAcceptSelected === void 0) {
      const httpHeaderAccepts = [
        "application/json"
      ];
      localVarHttpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
    }
    if (localVarHttpHeaderAcceptSelected !== void 0) {
      localVarHeaders = localVarHeaders.set("Accept", localVarHttpHeaderAcceptSelected);
    }
    let localVarHttpContext = options && options.context;
    if (localVarHttpContext === void 0) {
      localVarHttpContext = new HttpContext();
    }
    let localVarTransferCache = options && options.transferCache;
    if (localVarTransferCache === void 0) {
      localVarTransferCache = true;
    }
    let responseType_ = "json";
    if (localVarHttpHeaderAcceptSelected) {
      if (localVarHttpHeaderAcceptSelected.startsWith("text")) {
        responseType_ = "text";
      } else if (this.configuration.isJsonMime(localVarHttpHeaderAcceptSelected)) {
        responseType_ = "json";
      } else {
        responseType_ = "blob";
      }
    }
    let localVarPath = `/accounts/companygroups`;
    return this.httpClient.request("get", `${this.configuration.basePath}${localVarPath}`, {
      context: localVarHttpContext,
      params: localVarQueryParameters,
      responseType: responseType_,
      withCredentials: this.configuration.withCredentials,
      headers: localVarHeaders,
      observe,
      transferCache: localVarTransferCache,
      reportProgress
    });
  }
  updateCompanyGroup(id, request, observe = "body", reportProgress = false, options) {
    if (id === null || id === void 0) {
      throw new Error("Required parameter id was null or undefined when calling updateCompanyGroup.");
    }
    if (request === null || request === void 0) {
      throw new Error("Required parameter request was null or undefined when calling updateCompanyGroup.");
    }
    let localVarHeaders = this.defaultHeaders;
    let localVarCredential;
    localVarCredential = this.configuration.lookupCredential("access_token");
    if (localVarCredential) {
      localVarHeaders = localVarHeaders.set("x-access-token", localVarCredential);
    }
    let localVarHttpHeaderAcceptSelected = options && options.httpHeaderAccept;
    if (localVarHttpHeaderAcceptSelected === void 0) {
      const httpHeaderAccepts = [
        "application/json"
      ];
      localVarHttpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
    }
    if (localVarHttpHeaderAcceptSelected !== void 0) {
      localVarHeaders = localVarHeaders.set("Accept", localVarHttpHeaderAcceptSelected);
    }
    let localVarHttpContext = options && options.context;
    if (localVarHttpContext === void 0) {
      localVarHttpContext = new HttpContext();
    }
    let localVarTransferCache = options && options.transferCache;
    if (localVarTransferCache === void 0) {
      localVarTransferCache = true;
    }
    const consumes = [
      "application/json"
    ];
    const httpContentTypeSelected = this.configuration.selectHeaderContentType(consumes);
    if (httpContentTypeSelected !== void 0) {
      localVarHeaders = localVarHeaders.set("Content-Type", httpContentTypeSelected);
    }
    let responseType_ = "json";
    if (localVarHttpHeaderAcceptSelected) {
      if (localVarHttpHeaderAcceptSelected.startsWith("text")) {
        responseType_ = "text";
      } else if (this.configuration.isJsonMime(localVarHttpHeaderAcceptSelected)) {
        responseType_ = "json";
      } else {
        responseType_ = "blob";
      }
    }
    let localVarPath = `/accounts/companygroups/${this.configuration.encodeParam({ name: "id", value: id, in: "path", style: "simple", explode: false, dataType: "string", dataFormat: void 0 })}`;
    return this.httpClient.request("put", `${this.configuration.basePath}${localVarPath}`, {
      context: localVarHttpContext,
      body: request,
      responseType: responseType_,
      withCredentials: this.configuration.withCredentials,
      headers: localVarHeaders,
      observe,
      transferCache: localVarTransferCache,
      reportProgress
    });
  }
  static \u0275fac = function CompanyGroupsService_Factory(__ngFactoryType__) {
    return new (__ngFactoryType__ || _CompanyGroupsService)(\u0275\u0275inject(HttpClient), \u0275\u0275inject(BASE_PATH, 8), \u0275\u0275inject(Configuration, 8));
  };
  static \u0275prov = /* @__PURE__ */ \u0275\u0275defineInjectable({ token: _CompanyGroupsService, factory: _CompanyGroupsService.\u0275fac, providedIn: "root" });
};
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(CompanyGroupsService, [{
    type: Injectable,
    args: [{
      providedIn: "root"
    }]
  }], () => [{ type: HttpClient }, { type: void 0, decorators: [{
    type: Optional
  }, {
    type: Inject,
    args: [BASE_PATH]
  }] }, { type: Configuration, decorators: [{
    type: Optional
  }] }], null);
})();

// src/app/api/api/costCentres.service.ts
var CostCentresService = class _CostCentresService {
  httpClient;
  basePath = "";
  defaultHeaders = new HttpHeaders();
  configuration = new Configuration();
  encoder;
  constructor(httpClient, basePath, configuration) {
    this.httpClient = httpClient;
    if (configuration) {
      this.configuration = configuration;
    }
    if (typeof this.configuration.basePath !== "string") {
      const firstBasePath = Array.isArray(basePath) ? basePath[0] : void 0;
      if (firstBasePath != void 0) {
        basePath = firstBasePath;
      }
      if (typeof basePath !== "string") {
        basePath = this.basePath;
      }
      this.configuration.basePath = basePath;
    }
    this.encoder = this.configuration.encoder || new CustomHttpParameterCodec();
  }
  // @ts-ignore
  addToHttpParams(httpParams, value, key) {
    if (typeof value === "object" && value instanceof Date === false) {
      httpParams = this.addToHttpParamsRecursive(httpParams, value);
    } else {
      httpParams = this.addToHttpParamsRecursive(httpParams, value, key);
    }
    return httpParams;
  }
  addToHttpParamsRecursive(httpParams, value, key) {
    if (value == null) {
      return httpParams;
    }
    if (typeof value === "object") {
      if (Array.isArray(value)) {
        value.forEach((elem) => httpParams = this.addToHttpParamsRecursive(httpParams, elem, key));
      } else if (value instanceof Date) {
        if (key != null) {
          httpParams = httpParams.append(key, value.toISOString().substring(0, 10));
        } else {
          throw Error("key may not be null if value is Date");
        }
      } else {
        Object.keys(value).forEach((k) => httpParams = this.addToHttpParamsRecursive(httpParams, value[k], key != null ? `${key}.${k}` : k));
      }
    } else if (key != null) {
      httpParams = httpParams.append(key, value);
    } else {
      throw Error("key may not be null if value is not object or array");
    }
    return httpParams;
  }
  createCostCentre(request, observe = "body", reportProgress = false, options) {
    if (request === null || request === void 0) {
      throw new Error("Required parameter request was null or undefined when calling createCostCentre.");
    }
    let localVarHeaders = this.defaultHeaders;
    let localVarCredential;
    localVarCredential = this.configuration.lookupCredential("access_token");
    if (localVarCredential) {
      localVarHeaders = localVarHeaders.set("x-access-token", localVarCredential);
    }
    let localVarHttpHeaderAcceptSelected = options && options.httpHeaderAccept;
    if (localVarHttpHeaderAcceptSelected === void 0) {
      const httpHeaderAccepts = [
        "application/json"
      ];
      localVarHttpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
    }
    if (localVarHttpHeaderAcceptSelected !== void 0) {
      localVarHeaders = localVarHeaders.set("Accept", localVarHttpHeaderAcceptSelected);
    }
    let localVarHttpContext = options && options.context;
    if (localVarHttpContext === void 0) {
      localVarHttpContext = new HttpContext();
    }
    let localVarTransferCache = options && options.transferCache;
    if (localVarTransferCache === void 0) {
      localVarTransferCache = true;
    }
    const consumes = [
      "application/json"
    ];
    const httpContentTypeSelected = this.configuration.selectHeaderContentType(consumes);
    if (httpContentTypeSelected !== void 0) {
      localVarHeaders = localVarHeaders.set("Content-Type", httpContentTypeSelected);
    }
    let responseType_ = "json";
    if (localVarHttpHeaderAcceptSelected) {
      if (localVarHttpHeaderAcceptSelected.startsWith("text")) {
        responseType_ = "text";
      } else if (this.configuration.isJsonMime(localVarHttpHeaderAcceptSelected)) {
        responseType_ = "json";
      } else {
        responseType_ = "blob";
      }
    }
    let localVarPath = `/entities/costcentres`;
    return this.httpClient.request("post", `${this.configuration.basePath}${localVarPath}`, {
      context: localVarHttpContext,
      body: request,
      responseType: responseType_,
      withCredentials: this.configuration.withCredentials,
      headers: localVarHeaders,
      observe,
      transferCache: localVarTransferCache,
      reportProgress
    });
  }
  deleteCostCentre(id, observe = "body", reportProgress = false, options) {
    if (id === null || id === void 0) {
      throw new Error("Required parameter id was null or undefined when calling deleteCostCentre.");
    }
    let localVarHeaders = this.defaultHeaders;
    let localVarCredential;
    localVarCredential = this.configuration.lookupCredential("access_token");
    if (localVarCredential) {
      localVarHeaders = localVarHeaders.set("x-access-token", localVarCredential);
    }
    let localVarHttpHeaderAcceptSelected = options && options.httpHeaderAccept;
    if (localVarHttpHeaderAcceptSelected === void 0) {
      const httpHeaderAccepts = [
        "application/json"
      ];
      localVarHttpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
    }
    if (localVarHttpHeaderAcceptSelected !== void 0) {
      localVarHeaders = localVarHeaders.set("Accept", localVarHttpHeaderAcceptSelected);
    }
    let localVarHttpContext = options && options.context;
    if (localVarHttpContext === void 0) {
      localVarHttpContext = new HttpContext();
    }
    let localVarTransferCache = options && options.transferCache;
    if (localVarTransferCache === void 0) {
      localVarTransferCache = true;
    }
    let responseType_ = "json";
    if (localVarHttpHeaderAcceptSelected) {
      if (localVarHttpHeaderAcceptSelected.startsWith("text")) {
        responseType_ = "text";
      } else if (this.configuration.isJsonMime(localVarHttpHeaderAcceptSelected)) {
        responseType_ = "json";
      } else {
        responseType_ = "blob";
      }
    }
    let localVarPath = `/entities/costcentres/${this.configuration.encodeParam({ name: "id", value: id, in: "path", style: "simple", explode: false, dataType: "string", dataFormat: void 0 })}`;
    return this.httpClient.request("delete", `${this.configuration.basePath}${localVarPath}`, {
      context: localVarHttpContext,
      responseType: responseType_,
      withCredentials: this.configuration.withCredentials,
      headers: localVarHeaders,
      observe,
      transferCache: localVarTransferCache,
      reportProgress
    });
  }
  getCostCentre(id, observe = "body", reportProgress = false, options) {
    if (id === null || id === void 0) {
      throw new Error("Required parameter id was null or undefined when calling getCostCentre.");
    }
    let localVarHeaders = this.defaultHeaders;
    let localVarCredential;
    localVarCredential = this.configuration.lookupCredential("access_token");
    if (localVarCredential) {
      localVarHeaders = localVarHeaders.set("x-access-token", localVarCredential);
    }
    let localVarHttpHeaderAcceptSelected = options && options.httpHeaderAccept;
    if (localVarHttpHeaderAcceptSelected === void 0) {
      const httpHeaderAccepts = [
        "application/json"
      ];
      localVarHttpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
    }
    if (localVarHttpHeaderAcceptSelected !== void 0) {
      localVarHeaders = localVarHeaders.set("Accept", localVarHttpHeaderAcceptSelected);
    }
    let localVarHttpContext = options && options.context;
    if (localVarHttpContext === void 0) {
      localVarHttpContext = new HttpContext();
    }
    let localVarTransferCache = options && options.transferCache;
    if (localVarTransferCache === void 0) {
      localVarTransferCache = true;
    }
    let responseType_ = "json";
    if (localVarHttpHeaderAcceptSelected) {
      if (localVarHttpHeaderAcceptSelected.startsWith("text")) {
        responseType_ = "text";
      } else if (this.configuration.isJsonMime(localVarHttpHeaderAcceptSelected)) {
        responseType_ = "json";
      } else {
        responseType_ = "blob";
      }
    }
    let localVarPath = `/entities/costcentres/${this.configuration.encodeParam({ name: "id", value: id, in: "path", style: "simple", explode: false, dataType: "string", dataFormat: void 0 })}`;
    return this.httpClient.request("get", `${this.configuration.basePath}${localVarPath}`, {
      context: localVarHttpContext,
      responseType: responseType_,
      withCredentials: this.configuration.withCredentials,
      headers: localVarHeaders,
      observe,
      transferCache: localVarTransferCache,
      reportProgress
    });
  }
  listCostCentres(owner, offset, limit, sort, filter, observe = "body", reportProgress = false, options) {
    if (owner === null || owner === void 0) {
      throw new Error("Required parameter owner was null or undefined when calling listCostCentres.");
    }
    let localVarQueryParameters = new HttpParams({ encoder: this.encoder });
    if (owner !== void 0 && owner !== null) {
      localVarQueryParameters = this.addToHttpParams(localVarQueryParameters, owner, "owner");
    }
    if (offset !== void 0 && offset !== null) {
      localVarQueryParameters = this.addToHttpParams(localVarQueryParameters, offset, "offset");
    }
    if (limit !== void 0 && limit !== null) {
      localVarQueryParameters = this.addToHttpParams(localVarQueryParameters, limit, "limit");
    }
    if (sort !== void 0 && sort !== null) {
      localVarQueryParameters = this.addToHttpParams(localVarQueryParameters, sort, "sort");
    }
    if (filter !== void 0 && filter !== null) {
      localVarQueryParameters = this.addToHttpParams(localVarQueryParameters, filter, "filter");
    }
    let localVarHeaders = this.defaultHeaders;
    let localVarCredential;
    localVarCredential = this.configuration.lookupCredential("access_token");
    if (localVarCredential) {
      localVarHeaders = localVarHeaders.set("x-access-token", localVarCredential);
    }
    let localVarHttpHeaderAcceptSelected = options && options.httpHeaderAccept;
    if (localVarHttpHeaderAcceptSelected === void 0) {
      const httpHeaderAccepts = [
        "application/json"
      ];
      localVarHttpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
    }
    if (localVarHttpHeaderAcceptSelected !== void 0) {
      localVarHeaders = localVarHeaders.set("Accept", localVarHttpHeaderAcceptSelected);
    }
    let localVarHttpContext = options && options.context;
    if (localVarHttpContext === void 0) {
      localVarHttpContext = new HttpContext();
    }
    let localVarTransferCache = options && options.transferCache;
    if (localVarTransferCache === void 0) {
      localVarTransferCache = true;
    }
    let responseType_ = "json";
    if (localVarHttpHeaderAcceptSelected) {
      if (localVarHttpHeaderAcceptSelected.startsWith("text")) {
        responseType_ = "text";
      } else if (this.configuration.isJsonMime(localVarHttpHeaderAcceptSelected)) {
        responseType_ = "json";
      } else {
        responseType_ = "blob";
      }
    }
    let localVarPath = `/entities/costcentres`;
    return this.httpClient.request("get", `${this.configuration.basePath}${localVarPath}`, {
      context: localVarHttpContext,
      params: localVarQueryParameters,
      responseType: responseType_,
      withCredentials: this.configuration.withCredentials,
      headers: localVarHeaders,
      observe,
      transferCache: localVarTransferCache,
      reportProgress
    });
  }
  updateCostCentre(id, request, observe = "body", reportProgress = false, options) {
    if (id === null || id === void 0) {
      throw new Error("Required parameter id was null or undefined when calling updateCostCentre.");
    }
    if (request === null || request === void 0) {
      throw new Error("Required parameter request was null or undefined when calling updateCostCentre.");
    }
    let localVarHeaders = this.defaultHeaders;
    let localVarCredential;
    localVarCredential = this.configuration.lookupCredential("access_token");
    if (localVarCredential) {
      localVarHeaders = localVarHeaders.set("x-access-token", localVarCredential);
    }
    let localVarHttpHeaderAcceptSelected = options && options.httpHeaderAccept;
    if (localVarHttpHeaderAcceptSelected === void 0) {
      const httpHeaderAccepts = [
        "application/json"
      ];
      localVarHttpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
    }
    if (localVarHttpHeaderAcceptSelected !== void 0) {
      localVarHeaders = localVarHeaders.set("Accept", localVarHttpHeaderAcceptSelected);
    }
    let localVarHttpContext = options && options.context;
    if (localVarHttpContext === void 0) {
      localVarHttpContext = new HttpContext();
    }
    let localVarTransferCache = options && options.transferCache;
    if (localVarTransferCache === void 0) {
      localVarTransferCache = true;
    }
    const consumes = [
      "application/json"
    ];
    const httpContentTypeSelected = this.configuration.selectHeaderContentType(consumes);
    if (httpContentTypeSelected !== void 0) {
      localVarHeaders = localVarHeaders.set("Content-Type", httpContentTypeSelected);
    }
    let responseType_ = "json";
    if (localVarHttpHeaderAcceptSelected) {
      if (localVarHttpHeaderAcceptSelected.startsWith("text")) {
        responseType_ = "text";
      } else if (this.configuration.isJsonMime(localVarHttpHeaderAcceptSelected)) {
        responseType_ = "json";
      } else {
        responseType_ = "blob";
      }
    }
    let localVarPath = `/entities/costcentres/${this.configuration.encodeParam({ name: "id", value: id, in: "path", style: "simple", explode: false, dataType: "string", dataFormat: void 0 })}`;
    return this.httpClient.request("put", `${this.configuration.basePath}${localVarPath}`, {
      context: localVarHttpContext,
      body: request,
      responseType: responseType_,
      withCredentials: this.configuration.withCredentials,
      headers: localVarHeaders,
      observe,
      transferCache: localVarTransferCache,
      reportProgress
    });
  }
  static \u0275fac = function CostCentresService_Factory(__ngFactoryType__) {
    return new (__ngFactoryType__ || _CostCentresService)(\u0275\u0275inject(HttpClient), \u0275\u0275inject(BASE_PATH, 8), \u0275\u0275inject(Configuration, 8));
  };
  static \u0275prov = /* @__PURE__ */ \u0275\u0275defineInjectable({ token: _CostCentresService, factory: _CostCentresService.\u0275fac, providedIn: "root" });
};
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(CostCentresService, [{
    type: Injectable,
    args: [{
      providedIn: "root"
    }]
  }], () => [{ type: HttpClient }, { type: void 0, decorators: [{
    type: Optional
  }, {
    type: Inject,
    args: [BASE_PATH]
  }] }, { type: Configuration, decorators: [{
    type: Optional
  }] }], null);
})();

// src/app/api/api/dashboardTemplates.service.ts
var DashboardTemplatesService = class _DashboardTemplatesService {
  httpClient;
  basePath = "";
  defaultHeaders = new HttpHeaders();
  configuration = new Configuration();
  encoder;
  constructor(httpClient, basePath, configuration) {
    this.httpClient = httpClient;
    if (configuration) {
      this.configuration = configuration;
    }
    if (typeof this.configuration.basePath !== "string") {
      const firstBasePath = Array.isArray(basePath) ? basePath[0] : void 0;
      if (firstBasePath != void 0) {
        basePath = firstBasePath;
      }
      if (typeof basePath !== "string") {
        basePath = this.basePath;
      }
      this.configuration.basePath = basePath;
    }
    this.encoder = this.configuration.encoder || new CustomHttpParameterCodec();
  }
  // @ts-ignore
  addToHttpParams(httpParams, value, key) {
    if (typeof value === "object" && value instanceof Date === false) {
      httpParams = this.addToHttpParamsRecursive(httpParams, value);
    } else {
      httpParams = this.addToHttpParamsRecursive(httpParams, value, key);
    }
    return httpParams;
  }
  addToHttpParamsRecursive(httpParams, value, key) {
    if (value == null) {
      return httpParams;
    }
    if (typeof value === "object") {
      if (Array.isArray(value)) {
        value.forEach((elem) => httpParams = this.addToHttpParamsRecursive(httpParams, elem, key));
      } else if (value instanceof Date) {
        if (key != null) {
          httpParams = httpParams.append(key, value.toISOString().substring(0, 10));
        } else {
          throw Error("key may not be null if value is Date");
        }
      } else {
        Object.keys(value).forEach((k) => httpParams = this.addToHttpParamsRecursive(httpParams, value[k], key != null ? `${key}.${k}` : k));
      }
    } else if (key != null) {
      httpParams = httpParams.append(key, value);
    } else {
      throw Error("key may not be null if value is not object or array");
    }
    return httpParams;
  }
  createDashboardTemplate(request, observe = "body", reportProgress = false, options) {
    if (request === null || request === void 0) {
      throw new Error("Required parameter request was null or undefined when calling createDashboardTemplate.");
    }
    let localVarHeaders = this.defaultHeaders;
    let localVarCredential;
    localVarCredential = this.configuration.lookupCredential("access_token");
    if (localVarCredential) {
      localVarHeaders = localVarHeaders.set("x-access-token", localVarCredential);
    }
    let localVarHttpHeaderAcceptSelected = options && options.httpHeaderAccept;
    if (localVarHttpHeaderAcceptSelected === void 0) {
      const httpHeaderAccepts = [
        "application/json"
      ];
      localVarHttpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
    }
    if (localVarHttpHeaderAcceptSelected !== void 0) {
      localVarHeaders = localVarHeaders.set("Accept", localVarHttpHeaderAcceptSelected);
    }
    let localVarHttpContext = options && options.context;
    if (localVarHttpContext === void 0) {
      localVarHttpContext = new HttpContext();
    }
    let localVarTransferCache = options && options.transferCache;
    if (localVarTransferCache === void 0) {
      localVarTransferCache = true;
    }
    const consumes = [
      "application/json"
    ];
    const httpContentTypeSelected = this.configuration.selectHeaderContentType(consumes);
    if (httpContentTypeSelected !== void 0) {
      localVarHeaders = localVarHeaders.set("Content-Type", httpContentTypeSelected);
    }
    let responseType_ = "json";
    if (localVarHttpHeaderAcceptSelected) {
      if (localVarHttpHeaderAcceptSelected.startsWith("text")) {
        responseType_ = "text";
      } else if (this.configuration.isJsonMime(localVarHttpHeaderAcceptSelected)) {
        responseType_ = "json";
      } else {
        responseType_ = "blob";
      }
    }
    let localVarPath = `/entities/dashboardtemplates`;
    return this.httpClient.request("post", `${this.configuration.basePath}${localVarPath}`, {
      context: localVarHttpContext,
      body: request,
      responseType: responseType_,
      withCredentials: this.configuration.withCredentials,
      headers: localVarHeaders,
      observe,
      transferCache: localVarTransferCache,
      reportProgress
    });
  }
  getDashboardTemplate(id, observe = "body", reportProgress = false, options) {
    if (id === null || id === void 0) {
      throw new Error("Required parameter id was null or undefined when calling getDashboardTemplate.");
    }
    let localVarHeaders = this.defaultHeaders;
    let localVarCredential;
    localVarCredential = this.configuration.lookupCredential("access_token");
    if (localVarCredential) {
      localVarHeaders = localVarHeaders.set("x-access-token", localVarCredential);
    }
    let localVarHttpHeaderAcceptSelected = options && options.httpHeaderAccept;
    if (localVarHttpHeaderAcceptSelected === void 0) {
      const httpHeaderAccepts = [
        "application/json"
      ];
      localVarHttpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
    }
    if (localVarHttpHeaderAcceptSelected !== void 0) {
      localVarHeaders = localVarHeaders.set("Accept", localVarHttpHeaderAcceptSelected);
    }
    let localVarHttpContext = options && options.context;
    if (localVarHttpContext === void 0) {
      localVarHttpContext = new HttpContext();
    }
    let localVarTransferCache = options && options.transferCache;
    if (localVarTransferCache === void 0) {
      localVarTransferCache = true;
    }
    let responseType_ = "json";
    if (localVarHttpHeaderAcceptSelected) {
      if (localVarHttpHeaderAcceptSelected.startsWith("text")) {
        responseType_ = "text";
      } else if (this.configuration.isJsonMime(localVarHttpHeaderAcceptSelected)) {
        responseType_ = "json";
      } else {
        responseType_ = "blob";
      }
    }
    let localVarPath = `/entities/dashboardtemplates/${this.configuration.encodeParam({ name: "id", value: id, in: "path", style: "simple", explode: false, dataType: "string", dataFormat: void 0 })}`;
    return this.httpClient.request("get", `${this.configuration.basePath}${localVarPath}`, {
      context: localVarHttpContext,
      responseType: responseType_,
      withCredentials: this.configuration.withCredentials,
      headers: localVarHeaders,
      observe,
      transferCache: localVarTransferCache,
      reportProgress
    });
  }
  listDashboardTemplates(owner, recurse, offset, limit, sort, filter, observe = "body", reportProgress = false, options) {
    if (owner === null || owner === void 0) {
      throw new Error("Required parameter owner was null or undefined when calling listDashboardTemplates.");
    }
    let localVarQueryParameters = new HttpParams({ encoder: this.encoder });
    if (owner !== void 0 && owner !== null) {
      localVarQueryParameters = this.addToHttpParams(localVarQueryParameters, owner, "owner");
    }
    if (recurse !== void 0 && recurse !== null) {
      localVarQueryParameters = this.addToHttpParams(localVarQueryParameters, recurse, "recurse");
    }
    if (offset !== void 0 && offset !== null) {
      localVarQueryParameters = this.addToHttpParams(localVarQueryParameters, offset, "offset");
    }
    if (limit !== void 0 && limit !== null) {
      localVarQueryParameters = this.addToHttpParams(localVarQueryParameters, limit, "limit");
    }
    if (sort !== void 0 && sort !== null) {
      localVarQueryParameters = this.addToHttpParams(localVarQueryParameters, sort, "sort");
    }
    if (filter !== void 0 && filter !== null) {
      localVarQueryParameters = this.addToHttpParams(localVarQueryParameters, filter, "filter");
    }
    let localVarHeaders = this.defaultHeaders;
    let localVarCredential;
    localVarCredential = this.configuration.lookupCredential("access_token");
    if (localVarCredential) {
      localVarHeaders = localVarHeaders.set("x-access-token", localVarCredential);
    }
    let localVarHttpHeaderAcceptSelected = options && options.httpHeaderAccept;
    if (localVarHttpHeaderAcceptSelected === void 0) {
      const httpHeaderAccepts = [
        "application/json"
      ];
      localVarHttpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
    }
    if (localVarHttpHeaderAcceptSelected !== void 0) {
      localVarHeaders = localVarHeaders.set("Accept", localVarHttpHeaderAcceptSelected);
    }
    let localVarHttpContext = options && options.context;
    if (localVarHttpContext === void 0) {
      localVarHttpContext = new HttpContext();
    }
    let localVarTransferCache = options && options.transferCache;
    if (localVarTransferCache === void 0) {
      localVarTransferCache = true;
    }
    let responseType_ = "json";
    if (localVarHttpHeaderAcceptSelected) {
      if (localVarHttpHeaderAcceptSelected.startsWith("text")) {
        responseType_ = "text";
      } else if (this.configuration.isJsonMime(localVarHttpHeaderAcceptSelected)) {
        responseType_ = "json";
      } else {
        responseType_ = "blob";
      }
    }
    let localVarPath = `/entities/dashboardtemplates`;
    return this.httpClient.request("get", `${this.configuration.basePath}${localVarPath}`, {
      context: localVarHttpContext,
      params: localVarQueryParameters,
      responseType: responseType_,
      withCredentials: this.configuration.withCredentials,
      headers: localVarHeaders,
      observe,
      transferCache: localVarTransferCache,
      reportProgress
    });
  }
  updateDashboardTemplate(id, request, observe = "body", reportProgress = false, options) {
    if (id === null || id === void 0) {
      throw new Error("Required parameter id was null or undefined when calling updateDashboardTemplate.");
    }
    if (request === null || request === void 0) {
      throw new Error("Required parameter request was null or undefined when calling updateDashboardTemplate.");
    }
    let localVarHeaders = this.defaultHeaders;
    let localVarCredential;
    localVarCredential = this.configuration.lookupCredential("access_token");
    if (localVarCredential) {
      localVarHeaders = localVarHeaders.set("x-access-token", localVarCredential);
    }
    let localVarHttpHeaderAcceptSelected = options && options.httpHeaderAccept;
    if (localVarHttpHeaderAcceptSelected === void 0) {
      const httpHeaderAccepts = [
        "application/json"
      ];
      localVarHttpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
    }
    if (localVarHttpHeaderAcceptSelected !== void 0) {
      localVarHeaders = localVarHeaders.set("Accept", localVarHttpHeaderAcceptSelected);
    }
    let localVarHttpContext = options && options.context;
    if (localVarHttpContext === void 0) {
      localVarHttpContext = new HttpContext();
    }
    let localVarTransferCache = options && options.transferCache;
    if (localVarTransferCache === void 0) {
      localVarTransferCache = true;
    }
    const consumes = [
      "application/json"
    ];
    const httpContentTypeSelected = this.configuration.selectHeaderContentType(consumes);
    if (httpContentTypeSelected !== void 0) {
      localVarHeaders = localVarHeaders.set("Content-Type", httpContentTypeSelected);
    }
    let responseType_ = "json";
    if (localVarHttpHeaderAcceptSelected) {
      if (localVarHttpHeaderAcceptSelected.startsWith("text")) {
        responseType_ = "text";
      } else if (this.configuration.isJsonMime(localVarHttpHeaderAcceptSelected)) {
        responseType_ = "json";
      } else {
        responseType_ = "blob";
      }
    }
    let localVarPath = `/entities/dashboardtemplates/${this.configuration.encodeParam({ name: "id", value: id, in: "path", style: "simple", explode: false, dataType: "string", dataFormat: void 0 })}`;
    return this.httpClient.request("put", `${this.configuration.basePath}${localVarPath}`, {
      context: localVarHttpContext,
      body: request,
      responseType: responseType_,
      withCredentials: this.configuration.withCredentials,
      headers: localVarHeaders,
      observe,
      transferCache: localVarTransferCache,
      reportProgress
    });
  }
  static \u0275fac = function DashboardTemplatesService_Factory(__ngFactoryType__) {
    return new (__ngFactoryType__ || _DashboardTemplatesService)(\u0275\u0275inject(HttpClient), \u0275\u0275inject(BASE_PATH, 8), \u0275\u0275inject(Configuration, 8));
  };
  static \u0275prov = /* @__PURE__ */ \u0275\u0275defineInjectable({ token: _DashboardTemplatesService, factory: _DashboardTemplatesService.\u0275fac, providedIn: "root" });
};
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(DashboardTemplatesService, [{
    type: Injectable,
    args: [{
      providedIn: "root"
    }]
  }], () => [{ type: HttpClient }, { type: void 0, decorators: [{
    type: Optional
  }, {
    type: Inject,
    args: [BASE_PATH]
  }] }, { type: Configuration, decorators: [{
    type: Optional
  }] }], null);
})();

// src/app/api/api/dashboards.service.ts
var DashboardsService = class _DashboardsService {
  httpClient;
  basePath = "";
  defaultHeaders = new HttpHeaders();
  configuration = new Configuration();
  encoder;
  constructor(httpClient, basePath, configuration) {
    this.httpClient = httpClient;
    if (configuration) {
      this.configuration = configuration;
    }
    if (typeof this.configuration.basePath !== "string") {
      const firstBasePath = Array.isArray(basePath) ? basePath[0] : void 0;
      if (firstBasePath != void 0) {
        basePath = firstBasePath;
      }
      if (typeof basePath !== "string") {
        basePath = this.basePath;
      }
      this.configuration.basePath = basePath;
    }
    this.encoder = this.configuration.encoder || new CustomHttpParameterCodec();
  }
  // @ts-ignore
  addToHttpParams(httpParams, value, key) {
    if (typeof value === "object" && value instanceof Date === false) {
      httpParams = this.addToHttpParamsRecursive(httpParams, value);
    } else {
      httpParams = this.addToHttpParamsRecursive(httpParams, value, key);
    }
    return httpParams;
  }
  addToHttpParamsRecursive(httpParams, value, key) {
    if (value == null) {
      return httpParams;
    }
    if (typeof value === "object") {
      if (Array.isArray(value)) {
        value.forEach((elem) => httpParams = this.addToHttpParamsRecursive(httpParams, elem, key));
      } else if (value instanceof Date) {
        if (key != null) {
          httpParams = httpParams.append(key, value.toISOString().substring(0, 10));
        } else {
          throw Error("key may not be null if value is Date");
        }
      } else {
        Object.keys(value).forEach((k) => httpParams = this.addToHttpParamsRecursive(httpParams, value[k], key != null ? `${key}.${k}` : k));
      }
    } else if (key != null) {
      httpParams = httpParams.append(key, value);
    } else {
      throw Error("key may not be null if value is not object or array");
    }
    return httpParams;
  }
  createDashboard(request, observe = "body", reportProgress = false, options) {
    if (request === null || request === void 0) {
      throw new Error("Required parameter request was null or undefined when calling createDashboard.");
    }
    let localVarHeaders = this.defaultHeaders;
    let localVarCredential;
    localVarCredential = this.configuration.lookupCredential("access_token");
    if (localVarCredential) {
      localVarHeaders = localVarHeaders.set("x-access-token", localVarCredential);
    }
    let localVarHttpHeaderAcceptSelected = options && options.httpHeaderAccept;
    if (localVarHttpHeaderAcceptSelected === void 0) {
      const httpHeaderAccepts = [
        "application/json"
      ];
      localVarHttpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
    }
    if (localVarHttpHeaderAcceptSelected !== void 0) {
      localVarHeaders = localVarHeaders.set("Accept", localVarHttpHeaderAcceptSelected);
    }
    let localVarHttpContext = options && options.context;
    if (localVarHttpContext === void 0) {
      localVarHttpContext = new HttpContext();
    }
    let localVarTransferCache = options && options.transferCache;
    if (localVarTransferCache === void 0) {
      localVarTransferCache = true;
    }
    const consumes = [
      "application/json"
    ];
    const httpContentTypeSelected = this.configuration.selectHeaderContentType(consumes);
    if (httpContentTypeSelected !== void 0) {
      localVarHeaders = localVarHeaders.set("Content-Type", httpContentTypeSelected);
    }
    let responseType_ = "json";
    if (localVarHttpHeaderAcceptSelected) {
      if (localVarHttpHeaderAcceptSelected.startsWith("text")) {
        responseType_ = "text";
      } else if (this.configuration.isJsonMime(localVarHttpHeaderAcceptSelected)) {
        responseType_ = "json";
      } else {
        responseType_ = "blob";
      }
    }
    let localVarPath = `/entities/dashboards`;
    return this.httpClient.request("post", `${this.configuration.basePath}${localVarPath}`, {
      context: localVarHttpContext,
      body: request,
      responseType: responseType_,
      withCredentials: this.configuration.withCredentials,
      headers: localVarHeaders,
      observe,
      transferCache: localVarTransferCache,
      reportProgress
    });
  }
  deleteDashboard(id, observe = "body", reportProgress = false, options) {
    if (id === null || id === void 0) {
      throw new Error("Required parameter id was null or undefined when calling deleteDashboard.");
    }
    let localVarHeaders = this.defaultHeaders;
    let localVarCredential;
    localVarCredential = this.configuration.lookupCredential("access_token");
    if (localVarCredential) {
      localVarHeaders = localVarHeaders.set("x-access-token", localVarCredential);
    }
    let localVarHttpHeaderAcceptSelected = options && options.httpHeaderAccept;
    if (localVarHttpHeaderAcceptSelected === void 0) {
      const httpHeaderAccepts = [
        "application/json"
      ];
      localVarHttpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
    }
    if (localVarHttpHeaderAcceptSelected !== void 0) {
      localVarHeaders = localVarHeaders.set("Accept", localVarHttpHeaderAcceptSelected);
    }
    let localVarHttpContext = options && options.context;
    if (localVarHttpContext === void 0) {
      localVarHttpContext = new HttpContext();
    }
    let localVarTransferCache = options && options.transferCache;
    if (localVarTransferCache === void 0) {
      localVarTransferCache = true;
    }
    let responseType_ = "json";
    if (localVarHttpHeaderAcceptSelected) {
      if (localVarHttpHeaderAcceptSelected.startsWith("text")) {
        responseType_ = "text";
      } else if (this.configuration.isJsonMime(localVarHttpHeaderAcceptSelected)) {
        responseType_ = "json";
      } else {
        responseType_ = "blob";
      }
    }
    let localVarPath = `/entities/dashboards/${this.configuration.encodeParam({ name: "id", value: id, in: "path", style: "simple", explode: false, dataType: "string", dataFormat: void 0 })}`;
    return this.httpClient.request("delete", `${this.configuration.basePath}${localVarPath}`, {
      context: localVarHttpContext,
      responseType: responseType_,
      withCredentials: this.configuration.withCredentials,
      headers: localVarHeaders,
      observe,
      transferCache: localVarTransferCache,
      reportProgress
    });
  }
  getDashboard(id, observe = "body", reportProgress = false, options) {
    if (id === null || id === void 0) {
      throw new Error("Required parameter id was null or undefined when calling getDashboard.");
    }
    let localVarHeaders = this.defaultHeaders;
    let localVarCredential;
    localVarCredential = this.configuration.lookupCredential("access_token");
    if (localVarCredential) {
      localVarHeaders = localVarHeaders.set("x-access-token", localVarCredential);
    }
    let localVarHttpHeaderAcceptSelected = options && options.httpHeaderAccept;
    if (localVarHttpHeaderAcceptSelected === void 0) {
      const httpHeaderAccepts = [
        "application/json"
      ];
      localVarHttpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
    }
    if (localVarHttpHeaderAcceptSelected !== void 0) {
      localVarHeaders = localVarHeaders.set("Accept", localVarHttpHeaderAcceptSelected);
    }
    let localVarHttpContext = options && options.context;
    if (localVarHttpContext === void 0) {
      localVarHttpContext = new HttpContext();
    }
    let localVarTransferCache = options && options.transferCache;
    if (localVarTransferCache === void 0) {
      localVarTransferCache = true;
    }
    let responseType_ = "json";
    if (localVarHttpHeaderAcceptSelected) {
      if (localVarHttpHeaderAcceptSelected.startsWith("text")) {
        responseType_ = "text";
      } else if (this.configuration.isJsonMime(localVarHttpHeaderAcceptSelected)) {
        responseType_ = "json";
      } else {
        responseType_ = "blob";
      }
    }
    let localVarPath = `/entities/dashboards/${this.configuration.encodeParam({ name: "id", value: id, in: "path", style: "simple", explode: false, dataType: "string", dataFormat: void 0 })}`;
    return this.httpClient.request("get", `${this.configuration.basePath}${localVarPath}`, {
      context: localVarHttpContext,
      responseType: responseType_,
      withCredentials: this.configuration.withCredentials,
      headers: localVarHeaders,
      observe,
      transferCache: localVarTransferCache,
      reportProgress
    });
  }
  listDashboards(owner, offset, limit, sort, filter, observe = "body", reportProgress = false, options) {
    if (owner === null || owner === void 0) {
      throw new Error("Required parameter owner was null or undefined when calling listDashboards.");
    }
    let localVarQueryParameters = new HttpParams({ encoder: this.encoder });
    if (owner !== void 0 && owner !== null) {
      localVarQueryParameters = this.addToHttpParams(localVarQueryParameters, owner, "owner");
    }
    if (offset !== void 0 && offset !== null) {
      localVarQueryParameters = this.addToHttpParams(localVarQueryParameters, offset, "offset");
    }
    if (limit !== void 0 && limit !== null) {
      localVarQueryParameters = this.addToHttpParams(localVarQueryParameters, limit, "limit");
    }
    if (sort !== void 0 && sort !== null) {
      localVarQueryParameters = this.addToHttpParams(localVarQueryParameters, sort, "sort");
    }
    if (filter !== void 0 && filter !== null) {
      localVarQueryParameters = this.addToHttpParams(localVarQueryParameters, filter, "filter");
    }
    let localVarHeaders = this.defaultHeaders;
    let localVarCredential;
    localVarCredential = this.configuration.lookupCredential("access_token");
    if (localVarCredential) {
      localVarHeaders = localVarHeaders.set("x-access-token", localVarCredential);
    }
    let localVarHttpHeaderAcceptSelected = options && options.httpHeaderAccept;
    if (localVarHttpHeaderAcceptSelected === void 0) {
      const httpHeaderAccepts = [
        "application/json"
      ];
      localVarHttpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
    }
    if (localVarHttpHeaderAcceptSelected !== void 0) {
      localVarHeaders = localVarHeaders.set("Accept", localVarHttpHeaderAcceptSelected);
    }
    let localVarHttpContext = options && options.context;
    if (localVarHttpContext === void 0) {
      localVarHttpContext = new HttpContext();
    }
    let localVarTransferCache = options && options.transferCache;
    if (localVarTransferCache === void 0) {
      localVarTransferCache = true;
    }
    let responseType_ = "json";
    if (localVarHttpHeaderAcceptSelected) {
      if (localVarHttpHeaderAcceptSelected.startsWith("text")) {
        responseType_ = "text";
      } else if (this.configuration.isJsonMime(localVarHttpHeaderAcceptSelected)) {
        responseType_ = "json";
      } else {
        responseType_ = "blob";
      }
    }
    let localVarPath = `/entities/dashboards`;
    return this.httpClient.request("get", `${this.configuration.basePath}${localVarPath}`, {
      context: localVarHttpContext,
      params: localVarQueryParameters,
      responseType: responseType_,
      withCredentials: this.configuration.withCredentials,
      headers: localVarHeaders,
      observe,
      transferCache: localVarTransferCache,
      reportProgress
    });
  }
  rebuildDashboardWidget(id, widgetId, observe = "body", reportProgress = false, options) {
    if (id === null || id === void 0) {
      throw new Error("Required parameter id was null or undefined when calling rebuildDashboardWidget.");
    }
    if (widgetId === null || widgetId === void 0) {
      throw new Error("Required parameter widgetId was null or undefined when calling rebuildDashboardWidget.");
    }
    let localVarHeaders = this.defaultHeaders;
    let localVarCredential;
    localVarCredential = this.configuration.lookupCredential("access_token");
    if (localVarCredential) {
      localVarHeaders = localVarHeaders.set("x-access-token", localVarCredential);
    }
    let localVarHttpHeaderAcceptSelected = options && options.httpHeaderAccept;
    if (localVarHttpHeaderAcceptSelected === void 0) {
      const httpHeaderAccepts = [
        "application/json"
      ];
      localVarHttpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
    }
    if (localVarHttpHeaderAcceptSelected !== void 0) {
      localVarHeaders = localVarHeaders.set("Accept", localVarHttpHeaderAcceptSelected);
    }
    let localVarHttpContext = options && options.context;
    if (localVarHttpContext === void 0) {
      localVarHttpContext = new HttpContext();
    }
    let localVarTransferCache = options && options.transferCache;
    if (localVarTransferCache === void 0) {
      localVarTransferCache = true;
    }
    let responseType_ = "json";
    if (localVarHttpHeaderAcceptSelected) {
      if (localVarHttpHeaderAcceptSelected.startsWith("text")) {
        responseType_ = "text";
      } else if (this.configuration.isJsonMime(localVarHttpHeaderAcceptSelected)) {
        responseType_ = "json";
      } else {
        responseType_ = "blob";
      }
    }
    let localVarPath = `/entities/dashboards/${this.configuration.encodeParam({ name: "id", value: id, in: "path", style: "simple", explode: false, dataType: "string", dataFormat: void 0 })}/widgets/${this.configuration.encodeParam({ name: "widgetId", value: widgetId, in: "path", style: "simple", explode: false, dataType: "string", dataFormat: void 0 })}/rebuild`;
    return this.httpClient.request("post", `${this.configuration.basePath}${localVarPath}`, {
      context: localVarHttpContext,
      responseType: responseType_,
      withCredentials: this.configuration.withCredentials,
      headers: localVarHeaders,
      observe,
      transferCache: localVarTransferCache,
      reportProgress
    });
  }
  updateDashboard(id, request, observe = "body", reportProgress = false, options) {
    if (id === null || id === void 0) {
      throw new Error("Required parameter id was null or undefined when calling updateDashboard.");
    }
    if (request === null || request === void 0) {
      throw new Error("Required parameter request was null or undefined when calling updateDashboard.");
    }
    let localVarHeaders = this.defaultHeaders;
    let localVarCredential;
    localVarCredential = this.configuration.lookupCredential("access_token");
    if (localVarCredential) {
      localVarHeaders = localVarHeaders.set("x-access-token", localVarCredential);
    }
    let localVarHttpHeaderAcceptSelected = options && options.httpHeaderAccept;
    if (localVarHttpHeaderAcceptSelected === void 0) {
      const httpHeaderAccepts = [
        "application/json"
      ];
      localVarHttpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
    }
    if (localVarHttpHeaderAcceptSelected !== void 0) {
      localVarHeaders = localVarHeaders.set("Accept", localVarHttpHeaderAcceptSelected);
    }
    let localVarHttpContext = options && options.context;
    if (localVarHttpContext === void 0) {
      localVarHttpContext = new HttpContext();
    }
    let localVarTransferCache = options && options.transferCache;
    if (localVarTransferCache === void 0) {
      localVarTransferCache = true;
    }
    const consumes = [
      "application/json"
    ];
    const httpContentTypeSelected = this.configuration.selectHeaderContentType(consumes);
    if (httpContentTypeSelected !== void 0) {
      localVarHeaders = localVarHeaders.set("Content-Type", httpContentTypeSelected);
    }
    let responseType_ = "json";
    if (localVarHttpHeaderAcceptSelected) {
      if (localVarHttpHeaderAcceptSelected.startsWith("text")) {
        responseType_ = "text";
      } else if (this.configuration.isJsonMime(localVarHttpHeaderAcceptSelected)) {
        responseType_ = "json";
      } else {
        responseType_ = "blob";
      }
    }
    let localVarPath = `/entities/dashboards/${this.configuration.encodeParam({ name: "id", value: id, in: "path", style: "simple", explode: false, dataType: "string", dataFormat: void 0 })}`;
    return this.httpClient.request("put", `${this.configuration.basePath}${localVarPath}`, {
      context: localVarHttpContext,
      body: request,
      responseType: responseType_,
      withCredentials: this.configuration.withCredentials,
      headers: localVarHeaders,
      observe,
      transferCache: localVarTransferCache,
      reportProgress
    });
  }
  static \u0275fac = function DashboardsService_Factory(__ngFactoryType__) {
    return new (__ngFactoryType__ || _DashboardsService)(\u0275\u0275inject(HttpClient), \u0275\u0275inject(BASE_PATH, 8), \u0275\u0275inject(Configuration, 8));
  };
  static \u0275prov = /* @__PURE__ */ \u0275\u0275defineInjectable({ token: _DashboardsService, factory: _DashboardsService.\u0275fac, providedIn: "root" });
};
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(DashboardsService, [{
    type: Injectable,
    args: [{
      providedIn: "root"
    }]
  }], () => [{ type: HttpClient }, { type: void 0, decorators: [{
    type: Optional
  }, {
    type: Inject,
    args: [BASE_PATH]
  }] }, { type: Configuration, decorators: [{
    type: Optional
  }] }], null);
})();

// src/app/api/api/data.service.ts
var DataService = class _DataService {
  httpClient;
  basePath = "";
  defaultHeaders = new HttpHeaders();
  configuration = new Configuration();
  encoder;
  constructor(httpClient, basePath, configuration) {
    this.httpClient = httpClient;
    if (configuration) {
      this.configuration = configuration;
    }
    if (typeof this.configuration.basePath !== "string") {
      const firstBasePath = Array.isArray(basePath) ? basePath[0] : void 0;
      if (firstBasePath != void 0) {
        basePath = firstBasePath;
      }
      if (typeof basePath !== "string") {
        basePath = this.basePath;
      }
      this.configuration.basePath = basePath;
    }
    this.encoder = this.configuration.encoder || new CustomHttpParameterCodec();
  }
  // @ts-ignore
  addToHttpParams(httpParams, value, key) {
    if (typeof value === "object" && value instanceof Date === false) {
      httpParams = this.addToHttpParamsRecursive(httpParams, value);
    } else {
      httpParams = this.addToHttpParamsRecursive(httpParams, value, key);
    }
    return httpParams;
  }
  addToHttpParamsRecursive(httpParams, value, key) {
    if (value == null) {
      return httpParams;
    }
    if (typeof value === "object") {
      if (Array.isArray(value)) {
        value.forEach((elem) => httpParams = this.addToHttpParamsRecursive(httpParams, elem, key));
      } else if (value instanceof Date) {
        if (key != null) {
          httpParams = httpParams.append(key, value.toISOString().substring(0, 10));
        } else {
          throw Error("key may not be null if value is Date");
        }
      } else {
        Object.keys(value).forEach((k) => httpParams = this.addToHttpParamsRecursive(httpParams, value[k], key != null ? `${key}.${k}` : k));
      }
    } else if (key != null) {
      httpParams = httpParams.append(key, value);
    } else {
      throw Error("key may not be null if value is not object or array");
    }
    return httpParams;
  }
  acknowledgeAlert(client, alert, request, observe = "body", reportProgress = false, options) {
    if (client === null || client === void 0) {
      throw new Error("Required parameter client was null or undefined when calling acknowledgeAlert.");
    }
    if (alert === null || alert === void 0) {
      throw new Error("Required parameter alert was null or undefined when calling acknowledgeAlert.");
    }
    if (request === null || request === void 0) {
      throw new Error("Required parameter request was null or undefined when calling acknowledgeAlert.");
    }
    let localVarHeaders = this.defaultHeaders;
    let localVarCredential;
    localVarCredential = this.configuration.lookupCredential("access_token");
    if (localVarCredential) {
      localVarHeaders = localVarHeaders.set("x-access-token", localVarCredential);
    }
    let localVarHttpHeaderAcceptSelected = options && options.httpHeaderAccept;
    if (localVarHttpHeaderAcceptSelected === void 0) {
      const httpHeaderAccepts = [
        "application/json"
      ];
      localVarHttpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
    }
    if (localVarHttpHeaderAcceptSelected !== void 0) {
      localVarHeaders = localVarHeaders.set("Accept", localVarHttpHeaderAcceptSelected);
    }
    let localVarHttpContext = options && options.context;
    if (localVarHttpContext === void 0) {
      localVarHttpContext = new HttpContext();
    }
    let localVarTransferCache = options && options.transferCache;
    if (localVarTransferCache === void 0) {
      localVarTransferCache = true;
    }
    const consumes = [
      "application/json"
    ];
    const httpContentTypeSelected = this.configuration.selectHeaderContentType(consumes);
    if (httpContentTypeSelected !== void 0) {
      localVarHeaders = localVarHeaders.set("Content-Type", httpContentTypeSelected);
    }
    let responseType_ = "json";
    if (localVarHttpHeaderAcceptSelected) {
      if (localVarHttpHeaderAcceptSelected.startsWith("text")) {
        responseType_ = "text";
      } else if (this.configuration.isJsonMime(localVarHttpHeaderAcceptSelected)) {
        responseType_ = "json";
      } else {
        responseType_ = "blob";
      }
    }
    let localVarPath = `/data/feeds/alerts/${this.configuration.encodeParam({ name: "client", value: client, in: "path", style: "simple", explode: false, dataType: "string", dataFormat: void 0 })}/acknowledge/${this.configuration.encodeParam({ name: "alert", value: alert, in: "path", style: "simple", explode: false, dataType: "string", dataFormat: void 0 })}`;
    return this.httpClient.request("post", `${this.configuration.basePath}${localVarPath}`, {
      context: localVarHttpContext,
      body: request,
      responseType: responseType_,
      withCredentials: this.configuration.withCredentials,
      headers: localVarHeaders,
      observe,
      transferCache: localVarTransferCache,
      reportProgress
    });
  }
  addTripLabels(asset, date, request, observe = "body", reportProgress = false, options) {
    if (asset === null || asset === void 0) {
      throw new Error("Required parameter asset was null or undefined when calling addTripLabels.");
    }
    if (date === null || date === void 0) {
      throw new Error("Required parameter date was null or undefined when calling addTripLabels.");
    }
    if (request === null || request === void 0) {
      throw new Error("Required parameter request was null or undefined when calling addTripLabels.");
    }
    let localVarHeaders = this.defaultHeaders;
    let localVarCredential;
    localVarCredential = this.configuration.lookupCredential("access_token");
    if (localVarCredential) {
      localVarHeaders = localVarHeaders.set("x-access-token", localVarCredential);
    }
    let localVarHttpHeaderAcceptSelected = options && options.httpHeaderAccept;
    if (localVarHttpHeaderAcceptSelected === void 0) {
      const httpHeaderAccepts = [
        "application/json"
      ];
      localVarHttpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
    }
    if (localVarHttpHeaderAcceptSelected !== void 0) {
      localVarHeaders = localVarHeaders.set("Accept", localVarHttpHeaderAcceptSelected);
    }
    let localVarHttpContext = options && options.context;
    if (localVarHttpContext === void 0) {
      localVarHttpContext = new HttpContext();
    }
    let localVarTransferCache = options && options.transferCache;
    if (localVarTransferCache === void 0) {
      localVarTransferCache = true;
    }
    const consumes = [
      "application/json"
    ];
    const httpContentTypeSelected = this.configuration.selectHeaderContentType(consumes);
    if (httpContentTypeSelected !== void 0) {
      localVarHeaders = localVarHeaders.set("Content-Type", httpContentTypeSelected);
    }
    let responseType_ = "json";
    if (localVarHttpHeaderAcceptSelected) {
      if (localVarHttpHeaderAcceptSelected.startsWith("text")) {
        responseType_ = "text";
      } else if (this.configuration.isJsonMime(localVarHttpHeaderAcceptSelected)) {
        responseType_ = "json";
      } else {
        responseType_ = "blob";
      }
    }
    let localVarPath = `/data/history/trips/${this.configuration.encodeParam({ name: "asset", value: asset, in: "path", style: "simple", explode: false, dataType: "string", dataFormat: void 0 })}/${this.configuration.encodeParam({ name: "date", value: date, in: "path", style: "simple", explode: false, dataType: "string", dataFormat: void 0 })}/labels`;
    return this.httpClient.request("post", `${this.configuration.basePath}${localVarPath}`, {
      context: localVarHttpContext,
      body: request,
      responseType: responseType_,
      withCredentials: this.configuration.withCredentials,
      headers: localVarHeaders,
      observe,
      transferCache: localVarTransferCache,
      reportProgress
    });
  }
  commentAlert(client, alert, request, observe = "body", reportProgress = false, options) {
    if (client === null || client === void 0) {
      throw new Error("Required parameter client was null or undefined when calling commentAlert.");
    }
    if (alert === null || alert === void 0) {
      throw new Error("Required parameter alert was null or undefined when calling commentAlert.");
    }
    if (request === null || request === void 0) {
      throw new Error("Required parameter request was null or undefined when calling commentAlert.");
    }
    let localVarHeaders = this.defaultHeaders;
    let localVarCredential;
    localVarCredential = this.configuration.lookupCredential("access_token");
    if (localVarCredential) {
      localVarHeaders = localVarHeaders.set("x-access-token", localVarCredential);
    }
    let localVarHttpHeaderAcceptSelected = options && options.httpHeaderAccept;
    if (localVarHttpHeaderAcceptSelected === void 0) {
      const httpHeaderAccepts = [
        "application/json"
      ];
      localVarHttpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
    }
    if (localVarHttpHeaderAcceptSelected !== void 0) {
      localVarHeaders = localVarHeaders.set("Accept", localVarHttpHeaderAcceptSelected);
    }
    let localVarHttpContext = options && options.context;
    if (localVarHttpContext === void 0) {
      localVarHttpContext = new HttpContext();
    }
    let localVarTransferCache = options && options.transferCache;
    if (localVarTransferCache === void 0) {
      localVarTransferCache = true;
    }
    const consumes = [
      "application/json"
    ];
    const httpContentTypeSelected = this.configuration.selectHeaderContentType(consumes);
    if (httpContentTypeSelected !== void 0) {
      localVarHeaders = localVarHeaders.set("Content-Type", httpContentTypeSelected);
    }
    let responseType_ = "json";
    if (localVarHttpHeaderAcceptSelected) {
      if (localVarHttpHeaderAcceptSelected.startsWith("text")) {
        responseType_ = "text";
      } else if (this.configuration.isJsonMime(localVarHttpHeaderAcceptSelected)) {
        responseType_ = "json";
      } else {
        responseType_ = "blob";
      }
    }
    let localVarPath = `/data/feeds/alerts/${this.configuration.encodeParam({ name: "client", value: client, in: "path", style: "simple", explode: false, dataType: "string", dataFormat: void 0 })}/comment/${this.configuration.encodeParam({ name: "alert", value: alert, in: "path", style: "simple", explode: false, dataType: "string", dataFormat: void 0 })}`;
    return this.httpClient.request("post", `${this.configuration.basePath}${localVarPath}`, {
      context: localVarHttpContext,
      body: request,
      responseType: responseType_,
      withCredentials: this.configuration.withCredentials,
      headers: localVarHeaders,
      observe,
      transferCache: localVarTransferCache,
      reportProgress
    });
  }
  getAlertFeed(client, sequence, direction, limit, asset, alert, observe = "body", reportProgress = false, options) {
    if (client === null || client === void 0) {
      throw new Error("Required parameter client was null or undefined when calling getAlertFeed.");
    }
    if (sequence === null || sequence === void 0) {
      throw new Error("Required parameter sequence was null or undefined when calling getAlertFeed.");
    }
    if (direction === null || direction === void 0) {
      throw new Error("Required parameter direction was null or undefined when calling getAlertFeed.");
    }
    let localVarQueryParameters = new HttpParams({ encoder: this.encoder });
    if (sequence !== void 0 && sequence !== null) {
      localVarQueryParameters = this.addToHttpParams(localVarQueryParameters, sequence, "sequence");
    }
    if (direction !== void 0 && direction !== null) {
      localVarQueryParameters = this.addToHttpParams(localVarQueryParameters, direction, "direction");
    }
    if (limit !== void 0 && limit !== null) {
      localVarQueryParameters = this.addToHttpParams(localVarQueryParameters, limit, "limit");
    }
    if (asset !== void 0 && asset !== null) {
      localVarQueryParameters = this.addToHttpParams(localVarQueryParameters, asset, "asset");
    }
    if (alert !== void 0 && alert !== null) {
      localVarQueryParameters = this.addToHttpParams(localVarQueryParameters, alert, "alert");
    }
    let localVarHeaders = this.defaultHeaders;
    let localVarCredential;
    localVarCredential = this.configuration.lookupCredential("access_token");
    if (localVarCredential) {
      localVarHeaders = localVarHeaders.set("x-access-token", localVarCredential);
    }
    let localVarHttpHeaderAcceptSelected = options && options.httpHeaderAccept;
    if (localVarHttpHeaderAcceptSelected === void 0) {
      const httpHeaderAccepts = [
        "application/json"
      ];
      localVarHttpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
    }
    if (localVarHttpHeaderAcceptSelected !== void 0) {
      localVarHeaders = localVarHeaders.set("Accept", localVarHttpHeaderAcceptSelected);
    }
    let localVarHttpContext = options && options.context;
    if (localVarHttpContext === void 0) {
      localVarHttpContext = new HttpContext();
    }
    let localVarTransferCache = options && options.transferCache;
    if (localVarTransferCache === void 0) {
      localVarTransferCache = true;
    }
    let responseType_ = "json";
    if (localVarHttpHeaderAcceptSelected) {
      if (localVarHttpHeaderAcceptSelected.startsWith("text")) {
        responseType_ = "text";
      } else if (this.configuration.isJsonMime(localVarHttpHeaderAcceptSelected)) {
        responseType_ = "json";
      } else {
        responseType_ = "blob";
      }
    }
    let localVarPath = `/data/feeds/alerts/${this.configuration.encodeParam({ name: "client", value: client, in: "path", style: "simple", explode: false, dataType: "string", dataFormat: void 0 })}`;
    return this.httpClient.request("get", `${this.configuration.basePath}${localVarPath}`, {
      context: localVarHttpContext,
      params: localVarQueryParameters,
      responseType: responseType_,
      withCredentials: this.configuration.withCredentials,
      headers: localVarHeaders,
      observe,
      transferCache: localVarTransferCache,
      reportProgress
    });
  }
  getAlertHistory(id, start, end, limit, observe = "body", reportProgress = false, options) {
    if (id === null || id === void 0) {
      throw new Error("Required parameter id was null or undefined when calling getAlertHistory.");
    }
    if (start === null || start === void 0) {
      throw new Error("Required parameter start was null or undefined when calling getAlertHistory.");
    }
    if (end === null || end === void 0) {
      throw new Error("Required parameter end was null or undefined when calling getAlertHistory.");
    }
    let localVarQueryParameters = new HttpParams({ encoder: this.encoder });
    if (start !== void 0 && start !== null) {
      localVarQueryParameters = this.addToHttpParams(localVarQueryParameters, start, "start");
    }
    if (end !== void 0 && end !== null) {
      localVarQueryParameters = this.addToHttpParams(localVarQueryParameters, end, "end");
    }
    if (limit !== void 0 && limit !== null) {
      localVarQueryParameters = this.addToHttpParams(localVarQueryParameters, limit, "limit");
    }
    let localVarHeaders = this.defaultHeaders;
    let localVarCredential;
    localVarCredential = this.configuration.lookupCredential("access_token");
    if (localVarCredential) {
      localVarHeaders = localVarHeaders.set("x-access-token", localVarCredential);
    }
    let localVarHttpHeaderAcceptSelected = options && options.httpHeaderAccept;
    if (localVarHttpHeaderAcceptSelected === void 0) {
      const httpHeaderAccepts = [
        "application/json"
      ];
      localVarHttpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
    }
    if (localVarHttpHeaderAcceptSelected !== void 0) {
      localVarHeaders = localVarHeaders.set("Accept", localVarHttpHeaderAcceptSelected);
    }
    let localVarHttpContext = options && options.context;
    if (localVarHttpContext === void 0) {
      localVarHttpContext = new HttpContext();
    }
    let localVarTransferCache = options && options.transferCache;
    if (localVarTransferCache === void 0) {
      localVarTransferCache = true;
    }
    let responseType_ = "json";
    if (localVarHttpHeaderAcceptSelected) {
      if (localVarHttpHeaderAcceptSelected.startsWith("text")) {
        responseType_ = "text";
      } else if (this.configuration.isJsonMime(localVarHttpHeaderAcceptSelected)) {
        responseType_ = "json";
      } else {
        responseType_ = "blob";
      }
    }
    let localVarPath = `/data/history/alerts/${this.configuration.encodeParam({ name: "id", value: id, in: "path", style: "simple", explode: false, dataType: "string", dataFormat: void 0 })}`;
    return this.httpClient.request("get", `${this.configuration.basePath}${localVarPath}`, {
      context: localVarHttpContext,
      params: localVarQueryParameters,
      responseType: responseType_,
      withCredentials: this.configuration.withCredentials,
      headers: localVarHeaders,
      observe,
      transferCache: localVarTransferCache,
      reportProgress
    });
  }
  getAuditFeedForEntity(company, entity, sequence, direction, limit, observe = "body", reportProgress = false, options) {
    if (company === null || company === void 0) {
      throw new Error("Required parameter company was null or undefined when calling getAuditFeedForEntity.");
    }
    if (entity === null || entity === void 0) {
      throw new Error("Required parameter entity was null or undefined when calling getAuditFeedForEntity.");
    }
    if (sequence === null || sequence === void 0) {
      throw new Error("Required parameter sequence was null or undefined when calling getAuditFeedForEntity.");
    }
    if (direction === null || direction === void 0) {
      throw new Error("Required parameter direction was null or undefined when calling getAuditFeedForEntity.");
    }
    if (limit === null || limit === void 0) {
      throw new Error("Required parameter limit was null or undefined when calling getAuditFeedForEntity.");
    }
    let localVarQueryParameters = new HttpParams({ encoder: this.encoder });
    if (sequence !== void 0 && sequence !== null) {
      localVarQueryParameters = this.addToHttpParams(localVarQueryParameters, sequence, "sequence");
    }
    if (direction !== void 0 && direction !== null) {
      localVarQueryParameters = this.addToHttpParams(localVarQueryParameters, direction, "direction");
    }
    if (limit !== void 0 && limit !== null) {
      localVarQueryParameters = this.addToHttpParams(localVarQueryParameters, limit, "limit");
    }
    let localVarHeaders = this.defaultHeaders;
    let localVarCredential;
    localVarCredential = this.configuration.lookupCredential("access_token");
    if (localVarCredential) {
      localVarHeaders = localVarHeaders.set("x-access-token", localVarCredential);
    }
    let localVarHttpHeaderAcceptSelected = options && options.httpHeaderAccept;
    if (localVarHttpHeaderAcceptSelected === void 0) {
      const httpHeaderAccepts = [
        "application/json"
      ];
      localVarHttpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
    }
    if (localVarHttpHeaderAcceptSelected !== void 0) {
      localVarHeaders = localVarHeaders.set("Accept", localVarHttpHeaderAcceptSelected);
    }
    let localVarHttpContext = options && options.context;
    if (localVarHttpContext === void 0) {
      localVarHttpContext = new HttpContext();
    }
    let localVarTransferCache = options && options.transferCache;
    if (localVarTransferCache === void 0) {
      localVarTransferCache = true;
    }
    let responseType_ = "json";
    if (localVarHttpHeaderAcceptSelected) {
      if (localVarHttpHeaderAcceptSelected.startsWith("text")) {
        responseType_ = "text";
      } else if (this.configuration.isJsonMime(localVarHttpHeaderAcceptSelected)) {
        responseType_ = "json";
      } else {
        responseType_ = "blob";
      }
    }
    let localVarPath = `/data/feeds/audit/${this.configuration.encodeParam({ name: "company", value: company, in: "path", style: "simple", explode: false, dataType: "string", dataFormat: void 0 })}/entity/${this.configuration.encodeParam({ name: "entity", value: entity, in: "path", style: "simple", explode: false, dataType: "string", dataFormat: void 0 })}`;
    return this.httpClient.request("get", `${this.configuration.basePath}${localVarPath}`, {
      context: localVarHttpContext,
      params: localVarQueryParameters,
      responseType: responseType_,
      withCredentials: this.configuration.withCredentials,
      headers: localVarHeaders,
      observe,
      transferCache: localVarTransferCache,
      reportProgress
    });
  }
  getEventFeed(client, sequence, direction, limit, asset, observe = "body", reportProgress = false, options) {
    if (client === null || client === void 0) {
      throw new Error("Required parameter client was null or undefined when calling getEventFeed.");
    }
    if (sequence === null || sequence === void 0) {
      throw new Error("Required parameter sequence was null or undefined when calling getEventFeed.");
    }
    if (direction === null || direction === void 0) {
      throw new Error("Required parameter direction was null or undefined when calling getEventFeed.");
    }
    let localVarQueryParameters = new HttpParams({ encoder: this.encoder });
    if (sequence !== void 0 && sequence !== null) {
      localVarQueryParameters = this.addToHttpParams(localVarQueryParameters, sequence, "sequence");
    }
    if (direction !== void 0 && direction !== null) {
      localVarQueryParameters = this.addToHttpParams(localVarQueryParameters, direction, "direction");
    }
    if (limit !== void 0 && limit !== null) {
      localVarQueryParameters = this.addToHttpParams(localVarQueryParameters, limit, "limit");
    }
    if (asset !== void 0 && asset !== null) {
      localVarQueryParameters = this.addToHttpParams(localVarQueryParameters, asset, "asset");
    }
    let localVarHeaders = this.defaultHeaders;
    let localVarCredential;
    localVarCredential = this.configuration.lookupCredential("access_token");
    if (localVarCredential) {
      localVarHeaders = localVarHeaders.set("x-access-token", localVarCredential);
    }
    let localVarHttpHeaderAcceptSelected = options && options.httpHeaderAccept;
    if (localVarHttpHeaderAcceptSelected === void 0) {
      const httpHeaderAccepts = [
        "application/json"
      ];
      localVarHttpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
    }
    if (localVarHttpHeaderAcceptSelected !== void 0) {
      localVarHeaders = localVarHeaders.set("Accept", localVarHttpHeaderAcceptSelected);
    }
    let localVarHttpContext = options && options.context;
    if (localVarHttpContext === void 0) {
      localVarHttpContext = new HttpContext();
    }
    let localVarTransferCache = options && options.transferCache;
    if (localVarTransferCache === void 0) {
      localVarTransferCache = true;
    }
    let responseType_ = "json";
    if (localVarHttpHeaderAcceptSelected) {
      if (localVarHttpHeaderAcceptSelected.startsWith("text")) {
        responseType_ = "text";
      } else if (this.configuration.isJsonMime(localVarHttpHeaderAcceptSelected)) {
        responseType_ = "json";
      } else {
        responseType_ = "blob";
      }
    }
    let localVarPath = `/data/feeds/events/${this.configuration.encodeParam({ name: "client", value: client, in: "path", style: "simple", explode: false, dataType: "string", dataFormat: void 0 })}`;
    return this.httpClient.request("get", `${this.configuration.basePath}${localVarPath}`, {
      context: localVarHttpContext,
      params: localVarQueryParameters,
      responseType: responseType_,
      withCredentials: this.configuration.withCredentials,
      headers: localVarHeaders,
      observe,
      transferCache: localVarTransferCache,
      reportProgress
    });
  }
  getEventHistory(id, start, end, limit, observe = "body", reportProgress = false, options) {
    if (id === null || id === void 0) {
      throw new Error("Required parameter id was null or undefined when calling getEventHistory.");
    }
    if (start === null || start === void 0) {
      throw new Error("Required parameter start was null or undefined when calling getEventHistory.");
    }
    if (end === null || end === void 0) {
      throw new Error("Required parameter end was null or undefined when calling getEventHistory.");
    }
    let localVarQueryParameters = new HttpParams({ encoder: this.encoder });
    if (start !== void 0 && start !== null) {
      localVarQueryParameters = this.addToHttpParams(localVarQueryParameters, start, "start");
    }
    if (end !== void 0 && end !== null) {
      localVarQueryParameters = this.addToHttpParams(localVarQueryParameters, end, "end");
    }
    if (limit !== void 0 && limit !== null) {
      localVarQueryParameters = this.addToHttpParams(localVarQueryParameters, limit, "limit");
    }
    let localVarHeaders = this.defaultHeaders;
    let localVarCredential;
    localVarCredential = this.configuration.lookupCredential("access_token");
    if (localVarCredential) {
      localVarHeaders = localVarHeaders.set("x-access-token", localVarCredential);
    }
    let localVarHttpHeaderAcceptSelected = options && options.httpHeaderAccept;
    if (localVarHttpHeaderAcceptSelected === void 0) {
      const httpHeaderAccepts = [
        "application/json"
      ];
      localVarHttpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
    }
    if (localVarHttpHeaderAcceptSelected !== void 0) {
      localVarHeaders = localVarHeaders.set("Accept", localVarHttpHeaderAcceptSelected);
    }
    let localVarHttpContext = options && options.context;
    if (localVarHttpContext === void 0) {
      localVarHttpContext = new HttpContext();
    }
    let localVarTransferCache = options && options.transferCache;
    if (localVarTransferCache === void 0) {
      localVarTransferCache = true;
    }
    let responseType_ = "json";
    if (localVarHttpHeaderAcceptSelected) {
      if (localVarHttpHeaderAcceptSelected.startsWith("text")) {
        responseType_ = "text";
      } else if (this.configuration.isJsonMime(localVarHttpHeaderAcceptSelected)) {
        responseType_ = "json";
      } else {
        responseType_ = "blob";
      }
    }
    let localVarPath = `/data/history/events/${this.configuration.encodeParam({ name: "id", value: id, in: "path", style: "simple", explode: false, dataType: "string", dataFormat: void 0 })}`;
    return this.httpClient.request("get", `${this.configuration.basePath}${localVarPath}`, {
      context: localVarHttpContext,
      params: localVarQueryParameters,
      responseType: responseType_,
      withCredentials: this.configuration.withCredentials,
      headers: localVarHeaders,
      observe,
      transferCache: localVarTransferCache,
      reportProgress
    });
  }
  getLocationFeed(client, sequence, offset, limit, sort, filter, observe = "body", reportProgress = false, options) {
    if (client === null || client === void 0) {
      throw new Error("Required parameter client was null or undefined when calling getLocationFeed.");
    }
    if (sequence === null || sequence === void 0) {
      throw new Error("Required parameter sequence was null or undefined when calling getLocationFeed.");
    }
    let localVarQueryParameters = new HttpParams({ encoder: this.encoder });
    if (sequence !== void 0 && sequence !== null) {
      localVarQueryParameters = this.addToHttpParams(localVarQueryParameters, sequence, "sequence");
    }
    if (offset !== void 0 && offset !== null) {
      localVarQueryParameters = this.addToHttpParams(localVarQueryParameters, offset, "offset");
    }
    if (limit !== void 0 && limit !== null) {
      localVarQueryParameters = this.addToHttpParams(localVarQueryParameters, limit, "limit");
    }
    if (sort !== void 0 && sort !== null) {
      localVarQueryParameters = this.addToHttpParams(localVarQueryParameters, sort, "sort");
    }
    if (filter !== void 0 && filter !== null) {
      localVarQueryParameters = this.addToHttpParams(localVarQueryParameters, filter, "filter");
    }
    let localVarHeaders = this.defaultHeaders;
    let localVarCredential;
    localVarCredential = this.configuration.lookupCredential("access_token");
    if (localVarCredential) {
      localVarHeaders = localVarHeaders.set("x-access-token", localVarCredential);
    }
    let localVarHttpHeaderAcceptSelected = options && options.httpHeaderAccept;
    if (localVarHttpHeaderAcceptSelected === void 0) {
      const httpHeaderAccepts = [
        "application/json"
      ];
      localVarHttpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
    }
    if (localVarHttpHeaderAcceptSelected !== void 0) {
      localVarHeaders = localVarHeaders.set("Accept", localVarHttpHeaderAcceptSelected);
    }
    let localVarHttpContext = options && options.context;
    if (localVarHttpContext === void 0) {
      localVarHttpContext = new HttpContext();
    }
    let localVarTransferCache = options && options.transferCache;
    if (localVarTransferCache === void 0) {
      localVarTransferCache = true;
    }
    let responseType_ = "json";
    if (localVarHttpHeaderAcceptSelected) {
      if (localVarHttpHeaderAcceptSelected.startsWith("text")) {
        responseType_ = "text";
      } else if (this.configuration.isJsonMime(localVarHttpHeaderAcceptSelected)) {
        responseType_ = "json";
      } else {
        responseType_ = "blob";
      }
    }
    let localVarPath = `/data/feeds/location/${this.configuration.encodeParam({ name: "client", value: client, in: "path", style: "simple", explode: false, dataType: "string", dataFormat: void 0 })}`;
    return this.httpClient.request("get", `${this.configuration.basePath}${localVarPath}`, {
      context: localVarHttpContext,
      params: localVarQueryParameters,
      responseType: responseType_,
      withCredentials: this.configuration.withCredentials,
      headers: localVarHeaders,
      observe,
      transferCache: localVarTransferCache,
      reportProgress
    });
  }
  getLogHistoryForEntity(entityType, id, start, end, limit, levels, observe = "body", reportProgress = false, options) {
    if (entityType === null || entityType === void 0) {
      throw new Error("Required parameter entityType was null or undefined when calling getLogHistoryForEntity.");
    }
    if (id === null || id === void 0) {
      throw new Error("Required parameter id was null or undefined when calling getLogHistoryForEntity.");
    }
    let localVarQueryParameters = new HttpParams({ encoder: this.encoder });
    if (start !== void 0 && start !== null) {
      localVarQueryParameters = this.addToHttpParams(localVarQueryParameters, start, "start");
    }
    if (end !== void 0 && end !== null) {
      localVarQueryParameters = this.addToHttpParams(localVarQueryParameters, end, "end");
    }
    if (limit !== void 0 && limit !== null) {
      localVarQueryParameters = this.addToHttpParams(localVarQueryParameters, limit, "limit");
    }
    if (levels !== void 0 && levels !== null) {
      localVarQueryParameters = this.addToHttpParams(localVarQueryParameters, levels, "levels");
    }
    let localVarHeaders = this.defaultHeaders;
    let localVarCredential;
    localVarCredential = this.configuration.lookupCredential("access_token");
    if (localVarCredential) {
      localVarHeaders = localVarHeaders.set("x-access-token", localVarCredential);
    }
    let localVarHttpHeaderAcceptSelected = options && options.httpHeaderAccept;
    if (localVarHttpHeaderAcceptSelected === void 0) {
      const httpHeaderAccepts = [
        "application/json"
      ];
      localVarHttpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
    }
    if (localVarHttpHeaderAcceptSelected !== void 0) {
      localVarHeaders = localVarHeaders.set("Accept", localVarHttpHeaderAcceptSelected);
    }
    let localVarHttpContext = options && options.context;
    if (localVarHttpContext === void 0) {
      localVarHttpContext = new HttpContext();
    }
    let localVarTransferCache = options && options.transferCache;
    if (localVarTransferCache === void 0) {
      localVarTransferCache = true;
    }
    let responseType_ = "json";
    if (localVarHttpHeaderAcceptSelected) {
      if (localVarHttpHeaderAcceptSelected.startsWith("text")) {
        responseType_ = "text";
      } else if (this.configuration.isJsonMime(localVarHttpHeaderAcceptSelected)) {
        responseType_ = "json";
      } else {
        responseType_ = "blob";
      }
    }
    let localVarPath = `/data/history/logs/${this.configuration.encodeParam({ name: "entityType", value: entityType, in: "path", style: "simple", explode: false, dataType: "string", dataFormat: void 0 })}/${this.configuration.encodeParam({ name: "id", value: id, in: "path", style: "simple", explode: false, dataType: "string", dataFormat: void 0 })}`;
    return this.httpClient.request("get", `${this.configuration.basePath}${localVarPath}`, {
      context: localVarHttpContext,
      params: localVarQueryParameters,
      responseType: responseType_,
      withCredentials: this.configuration.withCredentials,
      headers: localVarHeaders,
      observe,
      transferCache: localVarTransferCache,
      reportProgress
    });
  }
  getNotificationFeed(sequence, direction, limit, observe = "body", reportProgress = false, options) {
    if (sequence === null || sequence === void 0) {
      throw new Error("Required parameter sequence was null or undefined when calling getNotificationFeed.");
    }
    if (direction === null || direction === void 0) {
      throw new Error("Required parameter direction was null or undefined when calling getNotificationFeed.");
    }
    let localVarQueryParameters = new HttpParams({ encoder: this.encoder });
    if (sequence !== void 0 && sequence !== null) {
      localVarQueryParameters = this.addToHttpParams(localVarQueryParameters, sequence, "sequence");
    }
    if (direction !== void 0 && direction !== null) {
      localVarQueryParameters = this.addToHttpParams(localVarQueryParameters, direction, "direction");
    }
    if (limit !== void 0 && limit !== null) {
      localVarQueryParameters = this.addToHttpParams(localVarQueryParameters, limit, "limit");
    }
    let localVarHeaders = this.defaultHeaders;
    let localVarCredential;
    localVarCredential = this.configuration.lookupCredential("access_token");
    if (localVarCredential) {
      localVarHeaders = localVarHeaders.set("x-access-token", localVarCredential);
    }
    let localVarHttpHeaderAcceptSelected = options && options.httpHeaderAccept;
    if (localVarHttpHeaderAcceptSelected === void 0) {
      const httpHeaderAccepts = [
        "application/json"
      ];
      localVarHttpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
    }
    if (localVarHttpHeaderAcceptSelected !== void 0) {
      localVarHeaders = localVarHeaders.set("Accept", localVarHttpHeaderAcceptSelected);
    }
    let localVarHttpContext = options && options.context;
    if (localVarHttpContext === void 0) {
      localVarHttpContext = new HttpContext();
    }
    let localVarTransferCache = options && options.transferCache;
    if (localVarTransferCache === void 0) {
      localVarTransferCache = true;
    }
    let responseType_ = "json";
    if (localVarHttpHeaderAcceptSelected) {
      if (localVarHttpHeaderAcceptSelected.startsWith("text")) {
        responseType_ = "text";
      } else if (this.configuration.isJsonMime(localVarHttpHeaderAcceptSelected)) {
        responseType_ = "json";
      } else {
        responseType_ = "blob";
      }
    }
    let localVarPath = `/data/feeds/notifications`;
    return this.httpClient.request("get", `${this.configuration.basePath}${localVarPath}`, {
      context: localVarHttpContext,
      params: localVarQueryParameters,
      responseType: responseType_,
      withCredentials: this.configuration.withCredentials,
      headers: localVarHeaders,
      observe,
      transferCache: localVarTransferCache,
      reportProgress
    });
  }
  getTelemetryHistory(id, start, end, limit, observe = "body", reportProgress = false, options) {
    if (id === null || id === void 0) {
      throw new Error("Required parameter id was null or undefined when calling getTelemetryHistory.");
    }
    if (start === null || start === void 0) {
      throw new Error("Required parameter start was null or undefined when calling getTelemetryHistory.");
    }
    if (end === null || end === void 0) {
      throw new Error("Required parameter end was null or undefined when calling getTelemetryHistory.");
    }
    let localVarQueryParameters = new HttpParams({ encoder: this.encoder });
    if (start !== void 0 && start !== null) {
      localVarQueryParameters = this.addToHttpParams(localVarQueryParameters, start, "start");
    }
    if (end !== void 0 && end !== null) {
      localVarQueryParameters = this.addToHttpParams(localVarQueryParameters, end, "end");
    }
    if (limit !== void 0 && limit !== null) {
      localVarQueryParameters = this.addToHttpParams(localVarQueryParameters, limit, "limit");
    }
    let localVarHeaders = this.defaultHeaders;
    let localVarCredential;
    localVarCredential = this.configuration.lookupCredential("access_token");
    if (localVarCredential) {
      localVarHeaders = localVarHeaders.set("x-access-token", localVarCredential);
    }
    let localVarHttpHeaderAcceptSelected = options && options.httpHeaderAccept;
    if (localVarHttpHeaderAcceptSelected === void 0) {
      const httpHeaderAccepts = [
        "application/json"
      ];
      localVarHttpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
    }
    if (localVarHttpHeaderAcceptSelected !== void 0) {
      localVarHeaders = localVarHeaders.set("Accept", localVarHttpHeaderAcceptSelected);
    }
    let localVarHttpContext = options && options.context;
    if (localVarHttpContext === void 0) {
      localVarHttpContext = new HttpContext();
    }
    let localVarTransferCache = options && options.transferCache;
    if (localVarTransferCache === void 0) {
      localVarTransferCache = true;
    }
    let responseType_ = "json";
    if (localVarHttpHeaderAcceptSelected) {
      if (localVarHttpHeaderAcceptSelected.startsWith("text")) {
        responseType_ = "text";
      } else if (this.configuration.isJsonMime(localVarHttpHeaderAcceptSelected)) {
        responseType_ = "json";
      } else {
        responseType_ = "blob";
      }
    }
    let localVarPath = `/data/history/telemetry/${this.configuration.encodeParam({ name: "id", value: id, in: "path", style: "simple", explode: false, dataType: "string", dataFormat: void 0 })}`;
    return this.httpClient.request("get", `${this.configuration.basePath}${localVarPath}`, {
      context: localVarHttpContext,
      params: localVarQueryParameters,
      responseType: responseType_,
      withCredentials: this.configuration.withCredentials,
      headers: localVarHeaders,
      observe,
      transferCache: localVarTransferCache,
      reportProgress
    });
  }
  getTripFeed(client, sequence, direction, limit, asset, observe = "body", reportProgress = false, options) {
    if (client === null || client === void 0) {
      throw new Error("Required parameter client was null or undefined when calling getTripFeed.");
    }
    if (sequence === null || sequence === void 0) {
      throw new Error("Required parameter sequence was null or undefined when calling getTripFeed.");
    }
    if (direction === null || direction === void 0) {
      throw new Error("Required parameter direction was null or undefined when calling getTripFeed.");
    }
    let localVarQueryParameters = new HttpParams({ encoder: this.encoder });
    if (sequence !== void 0 && sequence !== null) {
      localVarQueryParameters = this.addToHttpParams(localVarQueryParameters, sequence, "sequence");
    }
    if (direction !== void 0 && direction !== null) {
      localVarQueryParameters = this.addToHttpParams(localVarQueryParameters, direction, "direction");
    }
    if (limit !== void 0 && limit !== null) {
      localVarQueryParameters = this.addToHttpParams(localVarQueryParameters, limit, "limit");
    }
    if (asset !== void 0 && asset !== null) {
      localVarQueryParameters = this.addToHttpParams(localVarQueryParameters, asset, "asset");
    }
    let localVarHeaders = this.defaultHeaders;
    let localVarCredential;
    localVarCredential = this.configuration.lookupCredential("access_token");
    if (localVarCredential) {
      localVarHeaders = localVarHeaders.set("x-access-token", localVarCredential);
    }
    let localVarHttpHeaderAcceptSelected = options && options.httpHeaderAccept;
    if (localVarHttpHeaderAcceptSelected === void 0) {
      const httpHeaderAccepts = [
        "application/json"
      ];
      localVarHttpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
    }
    if (localVarHttpHeaderAcceptSelected !== void 0) {
      localVarHeaders = localVarHeaders.set("Accept", localVarHttpHeaderAcceptSelected);
    }
    let localVarHttpContext = options && options.context;
    if (localVarHttpContext === void 0) {
      localVarHttpContext = new HttpContext();
    }
    let localVarTransferCache = options && options.transferCache;
    if (localVarTransferCache === void 0) {
      localVarTransferCache = true;
    }
    let responseType_ = "json";
    if (localVarHttpHeaderAcceptSelected) {
      if (localVarHttpHeaderAcceptSelected.startsWith("text")) {
        responseType_ = "text";
      } else if (this.configuration.isJsonMime(localVarHttpHeaderAcceptSelected)) {
        responseType_ = "json";
      } else {
        responseType_ = "blob";
      }
    }
    let localVarPath = `/data/feeds/trips/${this.configuration.encodeParam({ name: "client", value: client, in: "path", style: "simple", explode: false, dataType: "string", dataFormat: void 0 })}`;
    return this.httpClient.request("get", `${this.configuration.basePath}${localVarPath}`, {
      context: localVarHttpContext,
      params: localVarQueryParameters,
      responseType: responseType_,
      withCredentials: this.configuration.withCredentials,
      headers: localVarHeaders,
      observe,
      transferCache: localVarTransferCache,
      reportProgress
    });
  }
  getTripHistory(id, start, end, date, limit, observe = "body", reportProgress = false, options) {
    if (id === null || id === void 0) {
      throw new Error("Required parameter id was null or undefined when calling getTripHistory.");
    }
    let localVarQueryParameters = new HttpParams({ encoder: this.encoder });
    if (start !== void 0 && start !== null) {
      localVarQueryParameters = this.addToHttpParams(localVarQueryParameters, start, "start");
    }
    if (end !== void 0 && end !== null) {
      localVarQueryParameters = this.addToHttpParams(localVarQueryParameters, end, "end");
    }
    if (date !== void 0 && date !== null) {
      localVarQueryParameters = this.addToHttpParams(localVarQueryParameters, date, "date");
    }
    if (limit !== void 0 && limit !== null) {
      localVarQueryParameters = this.addToHttpParams(localVarQueryParameters, limit, "limit");
    }
    let localVarHeaders = this.defaultHeaders;
    let localVarCredential;
    localVarCredential = this.configuration.lookupCredential("access_token");
    if (localVarCredential) {
      localVarHeaders = localVarHeaders.set("x-access-token", localVarCredential);
    }
    let localVarHttpHeaderAcceptSelected = options && options.httpHeaderAccept;
    if (localVarHttpHeaderAcceptSelected === void 0) {
      const httpHeaderAccepts = [
        "application/json"
      ];
      localVarHttpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
    }
    if (localVarHttpHeaderAcceptSelected !== void 0) {
      localVarHeaders = localVarHeaders.set("Accept", localVarHttpHeaderAcceptSelected);
    }
    let localVarHttpContext = options && options.context;
    if (localVarHttpContext === void 0) {
      localVarHttpContext = new HttpContext();
    }
    let localVarTransferCache = options && options.transferCache;
    if (localVarTransferCache === void 0) {
      localVarTransferCache = true;
    }
    let responseType_ = "json";
    if (localVarHttpHeaderAcceptSelected) {
      if (localVarHttpHeaderAcceptSelected.startsWith("text")) {
        responseType_ = "text";
      } else if (this.configuration.isJsonMime(localVarHttpHeaderAcceptSelected)) {
        responseType_ = "json";
      } else {
        responseType_ = "blob";
      }
    }
    let localVarPath = `/data/history/trips/${this.configuration.encodeParam({ name: "id", value: id, in: "path", style: "simple", explode: false, dataType: "string", dataFormat: void 0 })}`;
    return this.httpClient.request("get", `${this.configuration.basePath}${localVarPath}`, {
      context: localVarHttpContext,
      params: localVarQueryParameters,
      responseType: responseType_,
      withCredentials: this.configuration.withCredentials,
      headers: localVarHeaders,
      observe,
      transferCache: localVarTransferCache,
      reportProgress
    });
  }
  removeTripLabels(asset, date, request, observe = "body", reportProgress = false, options) {
    if (asset === null || asset === void 0) {
      throw new Error("Required parameter asset was null or undefined when calling removeTripLabels.");
    }
    if (date === null || date === void 0) {
      throw new Error("Required parameter date was null or undefined when calling removeTripLabels.");
    }
    if (request === null || request === void 0) {
      throw new Error("Required parameter request was null or undefined when calling removeTripLabels.");
    }
    let localVarHeaders = this.defaultHeaders;
    let localVarCredential;
    localVarCredential = this.configuration.lookupCredential("access_token");
    if (localVarCredential) {
      localVarHeaders = localVarHeaders.set("x-access-token", localVarCredential);
    }
    let localVarHttpHeaderAcceptSelected = options && options.httpHeaderAccept;
    if (localVarHttpHeaderAcceptSelected === void 0) {
      const httpHeaderAccepts = [
        "application/json"
      ];
      localVarHttpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
    }
    if (localVarHttpHeaderAcceptSelected !== void 0) {
      localVarHeaders = localVarHeaders.set("Accept", localVarHttpHeaderAcceptSelected);
    }
    let localVarHttpContext = options && options.context;
    if (localVarHttpContext === void 0) {
      localVarHttpContext = new HttpContext();
    }
    let localVarTransferCache = options && options.transferCache;
    if (localVarTransferCache === void 0) {
      localVarTransferCache = true;
    }
    const consumes = [
      "application/json"
    ];
    const httpContentTypeSelected = this.configuration.selectHeaderContentType(consumes);
    if (httpContentTypeSelected !== void 0) {
      localVarHeaders = localVarHeaders.set("Content-Type", httpContentTypeSelected);
    }
    let responseType_ = "json";
    if (localVarHttpHeaderAcceptSelected) {
      if (localVarHttpHeaderAcceptSelected.startsWith("text")) {
        responseType_ = "text";
      } else if (this.configuration.isJsonMime(localVarHttpHeaderAcceptSelected)) {
        responseType_ = "json";
      } else {
        responseType_ = "blob";
      }
    }
    let localVarPath = `/data/history/trips/${this.configuration.encodeParam({ name: "asset", value: asset, in: "path", style: "simple", explode: false, dataType: "string", dataFormat: void 0 })}/${this.configuration.encodeParam({ name: "date", value: date, in: "path", style: "simple", explode: false, dataType: "string", dataFormat: void 0 })}/labels`;
    return this.httpClient.request("delete", `${this.configuration.basePath}${localVarPath}`, {
      context: localVarHttpContext,
      body: request,
      responseType: responseType_,
      withCredentials: this.configuration.withCredentials,
      headers: localVarHeaders,
      observe,
      transferCache: localVarTransferCache,
      reportProgress
    });
  }
  static \u0275fac = function DataService_Factory(__ngFactoryType__) {
    return new (__ngFactoryType__ || _DataService)(\u0275\u0275inject(HttpClient), \u0275\u0275inject(BASE_PATH, 8), \u0275\u0275inject(Configuration, 8));
  };
  static \u0275prov = /* @__PURE__ */ \u0275\u0275defineInjectable({ token: _DataService, factory: _DataService.\u0275fac, providedIn: "root" });
};
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(DataService, [{
    type: Injectable,
    args: [{
      providedIn: "root"
    }]
  }], () => [{ type: HttpClient }, { type: void 0, decorators: [{
    type: Optional
  }, {
    type: Inject,
    args: [BASE_PATH]
  }] }, { type: Configuration, decorators: [{
    type: Optional
  }] }], null);
})();

// src/app/api/api/deviceConfigProfiles.service.ts
var DeviceConfigProfilesService = class _DeviceConfigProfilesService {
  httpClient;
  basePath = "";
  defaultHeaders = new HttpHeaders();
  configuration = new Configuration();
  encoder;
  constructor(httpClient, basePath, configuration) {
    this.httpClient = httpClient;
    if (configuration) {
      this.configuration = configuration;
    }
    if (typeof this.configuration.basePath !== "string") {
      const firstBasePath = Array.isArray(basePath) ? basePath[0] : void 0;
      if (firstBasePath != void 0) {
        basePath = firstBasePath;
      }
      if (typeof basePath !== "string") {
        basePath = this.basePath;
      }
      this.configuration.basePath = basePath;
    }
    this.encoder = this.configuration.encoder || new CustomHttpParameterCodec();
  }
  // @ts-ignore
  addToHttpParams(httpParams, value, key) {
    if (typeof value === "object" && value instanceof Date === false) {
      httpParams = this.addToHttpParamsRecursive(httpParams, value);
    } else {
      httpParams = this.addToHttpParamsRecursive(httpParams, value, key);
    }
    return httpParams;
  }
  addToHttpParamsRecursive(httpParams, value, key) {
    if (value == null) {
      return httpParams;
    }
    if (typeof value === "object") {
      if (Array.isArray(value)) {
        value.forEach((elem) => httpParams = this.addToHttpParamsRecursive(httpParams, elem, key));
      } else if (value instanceof Date) {
        if (key != null) {
          httpParams = httpParams.append(key, value.toISOString().substring(0, 10));
        } else {
          throw Error("key may not be null if value is Date");
        }
      } else {
        Object.keys(value).forEach((k) => httpParams = this.addToHttpParamsRecursive(httpParams, value[k], key != null ? `${key}.${k}` : k));
      }
    } else if (key != null) {
      httpParams = httpParams.append(key, value);
    } else {
      throw Error("key may not be null if value is not object or array");
    }
    return httpParams;
  }
  createDeviceConfigProfile(request, observe = "body", reportProgress = false, options) {
    if (request === null || request === void 0) {
      throw new Error("Required parameter request was null or undefined when calling createDeviceConfigProfile.");
    }
    let localVarHeaders = this.defaultHeaders;
    let localVarCredential;
    localVarCredential = this.configuration.lookupCredential("access_token");
    if (localVarCredential) {
      localVarHeaders = localVarHeaders.set("x-access-token", localVarCredential);
    }
    let localVarHttpHeaderAcceptSelected = options && options.httpHeaderAccept;
    if (localVarHttpHeaderAcceptSelected === void 0) {
      const httpHeaderAccepts = [
        "application/json"
      ];
      localVarHttpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
    }
    if (localVarHttpHeaderAcceptSelected !== void 0) {
      localVarHeaders = localVarHeaders.set("Accept", localVarHttpHeaderAcceptSelected);
    }
    let localVarHttpContext = options && options.context;
    if (localVarHttpContext === void 0) {
      localVarHttpContext = new HttpContext();
    }
    let localVarTransferCache = options && options.transferCache;
    if (localVarTransferCache === void 0) {
      localVarTransferCache = true;
    }
    const consumes = [
      "application/json"
    ];
    const httpContentTypeSelected = this.configuration.selectHeaderContentType(consumes);
    if (httpContentTypeSelected !== void 0) {
      localVarHeaders = localVarHeaders.set("Content-Type", httpContentTypeSelected);
    }
    let responseType_ = "json";
    if (localVarHttpHeaderAcceptSelected) {
      if (localVarHttpHeaderAcceptSelected.startsWith("text")) {
        responseType_ = "text";
      } else if (this.configuration.isJsonMime(localVarHttpHeaderAcceptSelected)) {
        responseType_ = "json";
      } else {
        responseType_ = "blob";
      }
    }
    let localVarPath = `/entities/deviceconfigprofiles`;
    return this.httpClient.request("post", `${this.configuration.basePath}${localVarPath}`, {
      context: localVarHttpContext,
      body: request,
      responseType: responseType_,
      withCredentials: this.configuration.withCredentials,
      headers: localVarHeaders,
      observe,
      transferCache: localVarTransferCache,
      reportProgress
    });
  }
  getDeviceConfigProfile(id, observe = "body", reportProgress = false, options) {
    if (id === null || id === void 0) {
      throw new Error("Required parameter id was null or undefined when calling getDeviceConfigProfile.");
    }
    let localVarHeaders = this.defaultHeaders;
    let localVarCredential;
    localVarCredential = this.configuration.lookupCredential("access_token");
    if (localVarCredential) {
      localVarHeaders = localVarHeaders.set("x-access-token", localVarCredential);
    }
    let localVarHttpHeaderAcceptSelected = options && options.httpHeaderAccept;
    if (localVarHttpHeaderAcceptSelected === void 0) {
      const httpHeaderAccepts = [
        "application/json"
      ];
      localVarHttpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
    }
    if (localVarHttpHeaderAcceptSelected !== void 0) {
      localVarHeaders = localVarHeaders.set("Accept", localVarHttpHeaderAcceptSelected);
    }
    let localVarHttpContext = options && options.context;
    if (localVarHttpContext === void 0) {
      localVarHttpContext = new HttpContext();
    }
    let localVarTransferCache = options && options.transferCache;
    if (localVarTransferCache === void 0) {
      localVarTransferCache = true;
    }
    let responseType_ = "json";
    if (localVarHttpHeaderAcceptSelected) {
      if (localVarHttpHeaderAcceptSelected.startsWith("text")) {
        responseType_ = "text";
      } else if (this.configuration.isJsonMime(localVarHttpHeaderAcceptSelected)) {
        responseType_ = "json";
      } else {
        responseType_ = "blob";
      }
    }
    let localVarPath = `/entities/deviceconfigprofiles/${this.configuration.encodeParam({ name: "id", value: id, in: "path", style: "simple", explode: false, dataType: "string", dataFormat: void 0 })}`;
    return this.httpClient.request("get", `${this.configuration.basePath}${localVarPath}`, {
      context: localVarHttpContext,
      responseType: responseType_,
      withCredentials: this.configuration.withCredentials,
      headers: localVarHeaders,
      observe,
      transferCache: localVarTransferCache,
      reportProgress
    });
  }
  listDeviceConfigProfiles(owner, recurse, offset, limit, sort, filter, observe = "body", reportProgress = false, options) {
    if (owner === null || owner === void 0) {
      throw new Error("Required parameter owner was null or undefined when calling listDeviceConfigProfiles.");
    }
    let localVarQueryParameters = new HttpParams({ encoder: this.encoder });
    if (owner !== void 0 && owner !== null) {
      localVarQueryParameters = this.addToHttpParams(localVarQueryParameters, owner, "owner");
    }
    if (recurse !== void 0 && recurse !== null) {
      localVarQueryParameters = this.addToHttpParams(localVarQueryParameters, recurse, "recurse");
    }
    if (offset !== void 0 && offset !== null) {
      localVarQueryParameters = this.addToHttpParams(localVarQueryParameters, offset, "offset");
    }
    if (limit !== void 0 && limit !== null) {
      localVarQueryParameters = this.addToHttpParams(localVarQueryParameters, limit, "limit");
    }
    if (sort !== void 0 && sort !== null) {
      localVarQueryParameters = this.addToHttpParams(localVarQueryParameters, sort, "sort");
    }
    if (filter !== void 0 && filter !== null) {
      localVarQueryParameters = this.addToHttpParams(localVarQueryParameters, filter, "filter");
    }
    let localVarHeaders = this.defaultHeaders;
    let localVarCredential;
    localVarCredential = this.configuration.lookupCredential("access_token");
    if (localVarCredential) {
      localVarHeaders = localVarHeaders.set("x-access-token", localVarCredential);
    }
    let localVarHttpHeaderAcceptSelected = options && options.httpHeaderAccept;
    if (localVarHttpHeaderAcceptSelected === void 0) {
      const httpHeaderAccepts = [
        "application/json"
      ];
      localVarHttpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
    }
    if (localVarHttpHeaderAcceptSelected !== void 0) {
      localVarHeaders = localVarHeaders.set("Accept", localVarHttpHeaderAcceptSelected);
    }
    let localVarHttpContext = options && options.context;
    if (localVarHttpContext === void 0) {
      localVarHttpContext = new HttpContext();
    }
    let localVarTransferCache = options && options.transferCache;
    if (localVarTransferCache === void 0) {
      localVarTransferCache = true;
    }
    let responseType_ = "json";
    if (localVarHttpHeaderAcceptSelected) {
      if (localVarHttpHeaderAcceptSelected.startsWith("text")) {
        responseType_ = "text";
      } else if (this.configuration.isJsonMime(localVarHttpHeaderAcceptSelected)) {
        responseType_ = "json";
      } else {
        responseType_ = "blob";
      }
    }
    let localVarPath = `/entities/deviceconfigprofiles`;
    return this.httpClient.request("get", `${this.configuration.basePath}${localVarPath}`, {
      context: localVarHttpContext,
      params: localVarQueryParameters,
      responseType: responseType_,
      withCredentials: this.configuration.withCredentials,
      headers: localVarHeaders,
      observe,
      transferCache: localVarTransferCache,
      reportProgress
    });
  }
  updateDeviceConfigProfile(id, request, observe = "body", reportProgress = false, options) {
    if (id === null || id === void 0) {
      throw new Error("Required parameter id was null or undefined when calling updateDeviceConfigProfile.");
    }
    if (request === null || request === void 0) {
      throw new Error("Required parameter request was null or undefined when calling updateDeviceConfigProfile.");
    }
    let localVarHeaders = this.defaultHeaders;
    let localVarCredential;
    localVarCredential = this.configuration.lookupCredential("access_token");
    if (localVarCredential) {
      localVarHeaders = localVarHeaders.set("x-access-token", localVarCredential);
    }
    let localVarHttpHeaderAcceptSelected = options && options.httpHeaderAccept;
    if (localVarHttpHeaderAcceptSelected === void 0) {
      const httpHeaderAccepts = [
        "application/json"
      ];
      localVarHttpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
    }
    if (localVarHttpHeaderAcceptSelected !== void 0) {
      localVarHeaders = localVarHeaders.set("Accept", localVarHttpHeaderAcceptSelected);
    }
    let localVarHttpContext = options && options.context;
    if (localVarHttpContext === void 0) {
      localVarHttpContext = new HttpContext();
    }
    let localVarTransferCache = options && options.transferCache;
    if (localVarTransferCache === void 0) {
      localVarTransferCache = true;
    }
    const consumes = [
      "application/json"
    ];
    const httpContentTypeSelected = this.configuration.selectHeaderContentType(consumes);
    if (httpContentTypeSelected !== void 0) {
      localVarHeaders = localVarHeaders.set("Content-Type", httpContentTypeSelected);
    }
    let responseType_ = "json";
    if (localVarHttpHeaderAcceptSelected) {
      if (localVarHttpHeaderAcceptSelected.startsWith("text")) {
        responseType_ = "text";
      } else if (this.configuration.isJsonMime(localVarHttpHeaderAcceptSelected)) {
        responseType_ = "json";
      } else {
        responseType_ = "blob";
      }
    }
    let localVarPath = `/entities/deviceconfigprofiles/${this.configuration.encodeParam({ name: "id", value: id, in: "path", style: "simple", explode: false, dataType: "string", dataFormat: void 0 })}`;
    return this.httpClient.request("put", `${this.configuration.basePath}${localVarPath}`, {
      context: localVarHttpContext,
      body: request,
      responseType: responseType_,
      withCredentials: this.configuration.withCredentials,
      headers: localVarHeaders,
      observe,
      transferCache: localVarTransferCache,
      reportProgress
    });
  }
  static \u0275fac = function DeviceConfigProfilesService_Factory(__ngFactoryType__) {
    return new (__ngFactoryType__ || _DeviceConfigProfilesService)(\u0275\u0275inject(HttpClient), \u0275\u0275inject(BASE_PATH, 8), \u0275\u0275inject(Configuration, 8));
  };
  static \u0275prov = /* @__PURE__ */ \u0275\u0275defineInjectable({ token: _DeviceConfigProfilesService, factory: _DeviceConfigProfilesService.\u0275fac, providedIn: "root" });
};
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(DeviceConfigProfilesService, [{
    type: Injectable,
    args: [{
      providedIn: "root"
    }]
  }], () => [{ type: HttpClient }, { type: void 0, decorators: [{
    type: Optional
  }, {
    type: Inject,
    args: [BASE_PATH]
  }] }, { type: Configuration, decorators: [{
    type: Optional
  }] }], null);
})();

// src/app/api/api/deviceProviderTypes.service.ts
var DeviceProviderTypesService = class _DeviceProviderTypesService {
  httpClient;
  basePath = "";
  defaultHeaders = new HttpHeaders();
  configuration = new Configuration();
  encoder;
  constructor(httpClient, basePath, configuration) {
    this.httpClient = httpClient;
    if (configuration) {
      this.configuration = configuration;
    }
    if (typeof this.configuration.basePath !== "string") {
      const firstBasePath = Array.isArray(basePath) ? basePath[0] : void 0;
      if (firstBasePath != void 0) {
        basePath = firstBasePath;
      }
      if (typeof basePath !== "string") {
        basePath = this.basePath;
      }
      this.configuration.basePath = basePath;
    }
    this.encoder = this.configuration.encoder || new CustomHttpParameterCodec();
  }
  // @ts-ignore
  addToHttpParams(httpParams, value, key) {
    if (typeof value === "object" && value instanceof Date === false) {
      httpParams = this.addToHttpParamsRecursive(httpParams, value);
    } else {
      httpParams = this.addToHttpParamsRecursive(httpParams, value, key);
    }
    return httpParams;
  }
  addToHttpParamsRecursive(httpParams, value, key) {
    if (value == null) {
      return httpParams;
    }
    if (typeof value === "object") {
      if (Array.isArray(value)) {
        value.forEach((elem) => httpParams = this.addToHttpParamsRecursive(httpParams, elem, key));
      } else if (value instanceof Date) {
        if (key != null) {
          httpParams = httpParams.append(key, value.toISOString().substring(0, 10));
        } else {
          throw Error("key may not be null if value is Date");
        }
      } else {
        Object.keys(value).forEach((k) => httpParams = this.addToHttpParamsRecursive(httpParams, value[k], key != null ? `${key}.${k}` : k));
      }
    } else if (key != null) {
      httpParams = httpParams.append(key, value);
    } else {
      throw Error("key may not be null if value is not object or array");
    }
    return httpParams;
  }
  getDeviceProviderType(id, observe = "body", reportProgress = false, options) {
    if (id === null || id === void 0) {
      throw new Error("Required parameter id was null or undefined when calling getDeviceProviderType.");
    }
    let localVarHeaders = this.defaultHeaders;
    let localVarCredential;
    localVarCredential = this.configuration.lookupCredential("access_token");
    if (localVarCredential) {
      localVarHeaders = localVarHeaders.set("x-access-token", localVarCredential);
    }
    let localVarHttpHeaderAcceptSelected = options && options.httpHeaderAccept;
    if (localVarHttpHeaderAcceptSelected === void 0) {
      const httpHeaderAccepts = [
        "application/json"
      ];
      localVarHttpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
    }
    if (localVarHttpHeaderAcceptSelected !== void 0) {
      localVarHeaders = localVarHeaders.set("Accept", localVarHttpHeaderAcceptSelected);
    }
    let localVarHttpContext = options && options.context;
    if (localVarHttpContext === void 0) {
      localVarHttpContext = new HttpContext();
    }
    let localVarTransferCache = options && options.transferCache;
    if (localVarTransferCache === void 0) {
      localVarTransferCache = true;
    }
    let responseType_ = "json";
    if (localVarHttpHeaderAcceptSelected) {
      if (localVarHttpHeaderAcceptSelected.startsWith("text")) {
        responseType_ = "text";
      } else if (this.configuration.isJsonMime(localVarHttpHeaderAcceptSelected)) {
        responseType_ = "json";
      } else {
        responseType_ = "blob";
      }
    }
    let localVarPath = `/entities/deviceprovidertypes/${this.configuration.encodeParam({ name: "id", value: id, in: "path", style: "simple", explode: false, dataType: "string", dataFormat: void 0 })}`;
    return this.httpClient.request("get", `${this.configuration.basePath}${localVarPath}`, {
      context: localVarHttpContext,
      responseType: responseType_,
      withCredentials: this.configuration.withCredentials,
      headers: localVarHeaders,
      observe,
      transferCache: localVarTransferCache,
      reportProgress
    });
  }
  listDeviceProviderTypes(owner, offset, limit, sort, filter, observe = "body", reportProgress = false, options) {
    if (owner === null || owner === void 0) {
      throw new Error("Required parameter owner was null or undefined when calling listDeviceProviderTypes.");
    }
    let localVarQueryParameters = new HttpParams({ encoder: this.encoder });
    if (owner !== void 0 && owner !== null) {
      localVarQueryParameters = this.addToHttpParams(localVarQueryParameters, owner, "owner");
    }
    if (offset !== void 0 && offset !== null) {
      localVarQueryParameters = this.addToHttpParams(localVarQueryParameters, offset, "offset");
    }
    if (limit !== void 0 && limit !== null) {
      localVarQueryParameters = this.addToHttpParams(localVarQueryParameters, limit, "limit");
    }
    if (sort !== void 0 && sort !== null) {
      localVarQueryParameters = this.addToHttpParams(localVarQueryParameters, sort, "sort");
    }
    if (filter !== void 0 && filter !== null) {
      localVarQueryParameters = this.addToHttpParams(localVarQueryParameters, filter, "filter");
    }
    let localVarHeaders = this.defaultHeaders;
    let localVarCredential;
    localVarCredential = this.configuration.lookupCredential("access_token");
    if (localVarCredential) {
      localVarHeaders = localVarHeaders.set("x-access-token", localVarCredential);
    }
    let localVarHttpHeaderAcceptSelected = options && options.httpHeaderAccept;
    if (localVarHttpHeaderAcceptSelected === void 0) {
      const httpHeaderAccepts = [
        "application/json"
      ];
      localVarHttpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
    }
    if (localVarHttpHeaderAcceptSelected !== void 0) {
      localVarHeaders = localVarHeaders.set("Accept", localVarHttpHeaderAcceptSelected);
    }
    let localVarHttpContext = options && options.context;
    if (localVarHttpContext === void 0) {
      localVarHttpContext = new HttpContext();
    }
    let localVarTransferCache = options && options.transferCache;
    if (localVarTransferCache === void 0) {
      localVarTransferCache = true;
    }
    let responseType_ = "json";
    if (localVarHttpHeaderAcceptSelected) {
      if (localVarHttpHeaderAcceptSelected.startsWith("text")) {
        responseType_ = "text";
      } else if (this.configuration.isJsonMime(localVarHttpHeaderAcceptSelected)) {
        responseType_ = "json";
      } else {
        responseType_ = "blob";
      }
    }
    let localVarPath = `/entities/deviceprovidertypes`;
    return this.httpClient.request("get", `${this.configuration.basePath}${localVarPath}`, {
      context: localVarHttpContext,
      params: localVarQueryParameters,
      responseType: responseType_,
      withCredentials: this.configuration.withCredentials,
      headers: localVarHeaders,
      observe,
      transferCache: localVarTransferCache,
      reportProgress
    });
  }
  static \u0275fac = function DeviceProviderTypesService_Factory(__ngFactoryType__) {
    return new (__ngFactoryType__ || _DeviceProviderTypesService)(\u0275\u0275inject(HttpClient), \u0275\u0275inject(BASE_PATH, 8), \u0275\u0275inject(Configuration, 8));
  };
  static \u0275prov = /* @__PURE__ */ \u0275\u0275defineInjectable({ token: _DeviceProviderTypesService, factory: _DeviceProviderTypesService.\u0275fac, providedIn: "root" });
};
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(DeviceProviderTypesService, [{
    type: Injectable,
    args: [{
      providedIn: "root"
    }]
  }], () => [{ type: HttpClient }, { type: void 0, decorators: [{
    type: Optional
  }, {
    type: Inject,
    args: [BASE_PATH]
  }] }, { type: Configuration, decorators: [{
    type: Optional
  }] }], null);
})();

// src/app/api/api/deviceProviders.service.ts
var DeviceProvidersService = class _DeviceProvidersService {
  httpClient;
  basePath = "";
  defaultHeaders = new HttpHeaders();
  configuration = new Configuration();
  encoder;
  constructor(httpClient, basePath, configuration) {
    this.httpClient = httpClient;
    if (configuration) {
      this.configuration = configuration;
    }
    if (typeof this.configuration.basePath !== "string") {
      const firstBasePath = Array.isArray(basePath) ? basePath[0] : void 0;
      if (firstBasePath != void 0) {
        basePath = firstBasePath;
      }
      if (typeof basePath !== "string") {
        basePath = this.basePath;
      }
      this.configuration.basePath = basePath;
    }
    this.encoder = this.configuration.encoder || new CustomHttpParameterCodec();
  }
  // @ts-ignore
  addToHttpParams(httpParams, value, key) {
    if (typeof value === "object" && value instanceof Date === false) {
      httpParams = this.addToHttpParamsRecursive(httpParams, value);
    } else {
      httpParams = this.addToHttpParamsRecursive(httpParams, value, key);
    }
    return httpParams;
  }
  addToHttpParamsRecursive(httpParams, value, key) {
    if (value == null) {
      return httpParams;
    }
    if (typeof value === "object") {
      if (Array.isArray(value)) {
        value.forEach((elem) => httpParams = this.addToHttpParamsRecursive(httpParams, elem, key));
      } else if (value instanceof Date) {
        if (key != null) {
          httpParams = httpParams.append(key, value.toISOString().substring(0, 10));
        } else {
          throw Error("key may not be null if value is Date");
        }
      } else {
        Object.keys(value).forEach((k) => httpParams = this.addToHttpParamsRecursive(httpParams, value[k], key != null ? `${key}.${k}` : k));
      }
    } else if (key != null) {
      httpParams = httpParams.append(key, value);
    } else {
      throw Error("key may not be null if value is not object or array");
    }
    return httpParams;
  }
  createDeviceProvider(request, observe = "body", reportProgress = false, options) {
    if (request === null || request === void 0) {
      throw new Error("Required parameter request was null or undefined when calling createDeviceProvider.");
    }
    let localVarHeaders = this.defaultHeaders;
    let localVarCredential;
    localVarCredential = this.configuration.lookupCredential("access_token");
    if (localVarCredential) {
      localVarHeaders = localVarHeaders.set("x-access-token", localVarCredential);
    }
    let localVarHttpHeaderAcceptSelected = options && options.httpHeaderAccept;
    if (localVarHttpHeaderAcceptSelected === void 0) {
      const httpHeaderAccepts = [
        "application/json"
      ];
      localVarHttpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
    }
    if (localVarHttpHeaderAcceptSelected !== void 0) {
      localVarHeaders = localVarHeaders.set("Accept", localVarHttpHeaderAcceptSelected);
    }
    let localVarHttpContext = options && options.context;
    if (localVarHttpContext === void 0) {
      localVarHttpContext = new HttpContext();
    }
    let localVarTransferCache = options && options.transferCache;
    if (localVarTransferCache === void 0) {
      localVarTransferCache = true;
    }
    const consumes = [
      "application/json"
    ];
    const httpContentTypeSelected = this.configuration.selectHeaderContentType(consumes);
    if (httpContentTypeSelected !== void 0) {
      localVarHeaders = localVarHeaders.set("Content-Type", httpContentTypeSelected);
    }
    let responseType_ = "json";
    if (localVarHttpHeaderAcceptSelected) {
      if (localVarHttpHeaderAcceptSelected.startsWith("text")) {
        responseType_ = "text";
      } else if (this.configuration.isJsonMime(localVarHttpHeaderAcceptSelected)) {
        responseType_ = "json";
      } else {
        responseType_ = "blob";
      }
    }
    let localVarPath = `/entities/deviceproviders`;
    return this.httpClient.request("post", `${this.configuration.basePath}${localVarPath}`, {
      context: localVarHttpContext,
      body: request,
      responseType: responseType_,
      withCredentials: this.configuration.withCredentials,
      headers: localVarHeaders,
      observe,
      transferCache: localVarTransferCache,
      reportProgress
    });
  }
  getDeviceProvider(id, observe = "body", reportProgress = false, options) {
    if (id === null || id === void 0) {
      throw new Error("Required parameter id was null or undefined when calling getDeviceProvider.");
    }
    let localVarHeaders = this.defaultHeaders;
    let localVarCredential;
    localVarCredential = this.configuration.lookupCredential("access_token");
    if (localVarCredential) {
      localVarHeaders = localVarHeaders.set("x-access-token", localVarCredential);
    }
    let localVarHttpHeaderAcceptSelected = options && options.httpHeaderAccept;
    if (localVarHttpHeaderAcceptSelected === void 0) {
      const httpHeaderAccepts = [
        "application/json"
      ];
      localVarHttpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
    }
    if (localVarHttpHeaderAcceptSelected !== void 0) {
      localVarHeaders = localVarHeaders.set("Accept", localVarHttpHeaderAcceptSelected);
    }
    let localVarHttpContext = options && options.context;
    if (localVarHttpContext === void 0) {
      localVarHttpContext = new HttpContext();
    }
    let localVarTransferCache = options && options.transferCache;
    if (localVarTransferCache === void 0) {
      localVarTransferCache = true;
    }
    let responseType_ = "json";
    if (localVarHttpHeaderAcceptSelected) {
      if (localVarHttpHeaderAcceptSelected.startsWith("text")) {
        responseType_ = "text";
      } else if (this.configuration.isJsonMime(localVarHttpHeaderAcceptSelected)) {
        responseType_ = "json";
      } else {
        responseType_ = "blob";
      }
    }
    let localVarPath = `/entities/deviceproviders/${this.configuration.encodeParam({ name: "id", value: id, in: "path", style: "simple", explode: false, dataType: "string", dataFormat: void 0 })}`;
    return this.httpClient.request("get", `${this.configuration.basePath}${localVarPath}`, {
      context: localVarHttpContext,
      responseType: responseType_,
      withCredentials: this.configuration.withCredentials,
      headers: localVarHeaders,
      observe,
      transferCache: localVarTransferCache,
      reportProgress
    });
  }
  listDeviceProviders(owner, recurse, offset, limit, sort, filter, observe = "body", reportProgress = false, options) {
    if (owner === null || owner === void 0) {
      throw new Error("Required parameter owner was null or undefined when calling listDeviceProviders.");
    }
    let localVarQueryParameters = new HttpParams({ encoder: this.encoder });
    if (owner !== void 0 && owner !== null) {
      localVarQueryParameters = this.addToHttpParams(localVarQueryParameters, owner, "owner");
    }
    if (recurse !== void 0 && recurse !== null) {
      localVarQueryParameters = this.addToHttpParams(localVarQueryParameters, recurse, "recurse");
    }
    if (offset !== void 0 && offset !== null) {
      localVarQueryParameters = this.addToHttpParams(localVarQueryParameters, offset, "offset");
    }
    if (limit !== void 0 && limit !== null) {
      localVarQueryParameters = this.addToHttpParams(localVarQueryParameters, limit, "limit");
    }
    if (sort !== void 0 && sort !== null) {
      localVarQueryParameters = this.addToHttpParams(localVarQueryParameters, sort, "sort");
    }
    if (filter !== void 0 && filter !== null) {
      localVarQueryParameters = this.addToHttpParams(localVarQueryParameters, filter, "filter");
    }
    let localVarHeaders = this.defaultHeaders;
    let localVarCredential;
    localVarCredential = this.configuration.lookupCredential("access_token");
    if (localVarCredential) {
      localVarHeaders = localVarHeaders.set("x-access-token", localVarCredential);
    }
    let localVarHttpHeaderAcceptSelected = options && options.httpHeaderAccept;
    if (localVarHttpHeaderAcceptSelected === void 0) {
      const httpHeaderAccepts = [
        "application/json"
      ];
      localVarHttpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
    }
    if (localVarHttpHeaderAcceptSelected !== void 0) {
      localVarHeaders = localVarHeaders.set("Accept", localVarHttpHeaderAcceptSelected);
    }
    let localVarHttpContext = options && options.context;
    if (localVarHttpContext === void 0) {
      localVarHttpContext = new HttpContext();
    }
    let localVarTransferCache = options && options.transferCache;
    if (localVarTransferCache === void 0) {
      localVarTransferCache = true;
    }
    let responseType_ = "json";
    if (localVarHttpHeaderAcceptSelected) {
      if (localVarHttpHeaderAcceptSelected.startsWith("text")) {
        responseType_ = "text";
      } else if (this.configuration.isJsonMime(localVarHttpHeaderAcceptSelected)) {
        responseType_ = "json";
      } else {
        responseType_ = "blob";
      }
    }
    let localVarPath = `/entities/deviceproviders`;
    return this.httpClient.request("get", `${this.configuration.basePath}${localVarPath}`, {
      context: localVarHttpContext,
      params: localVarQueryParameters,
      responseType: responseType_,
      withCredentials: this.configuration.withCredentials,
      headers: localVarHeaders,
      observe,
      transferCache: localVarTransferCache,
      reportProgress
    });
  }
  updateDeviceProvider(id, request, observe = "body", reportProgress = false, options) {
    if (id === null || id === void 0) {
      throw new Error("Required parameter id was null or undefined when calling updateDeviceProvider.");
    }
    if (request === null || request === void 0) {
      throw new Error("Required parameter request was null or undefined when calling updateDeviceProvider.");
    }
    let localVarHeaders = this.defaultHeaders;
    let localVarCredential;
    localVarCredential = this.configuration.lookupCredential("access_token");
    if (localVarCredential) {
      localVarHeaders = localVarHeaders.set("x-access-token", localVarCredential);
    }
    let localVarHttpHeaderAcceptSelected = options && options.httpHeaderAccept;
    if (localVarHttpHeaderAcceptSelected === void 0) {
      const httpHeaderAccepts = [
        "application/json"
      ];
      localVarHttpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
    }
    if (localVarHttpHeaderAcceptSelected !== void 0) {
      localVarHeaders = localVarHeaders.set("Accept", localVarHttpHeaderAcceptSelected);
    }
    let localVarHttpContext = options && options.context;
    if (localVarHttpContext === void 0) {
      localVarHttpContext = new HttpContext();
    }
    let localVarTransferCache = options && options.transferCache;
    if (localVarTransferCache === void 0) {
      localVarTransferCache = true;
    }
    const consumes = [
      "application/json"
    ];
    const httpContentTypeSelected = this.configuration.selectHeaderContentType(consumes);
    if (httpContentTypeSelected !== void 0) {
      localVarHeaders = localVarHeaders.set("Content-Type", httpContentTypeSelected);
    }
    let responseType_ = "json";
    if (localVarHttpHeaderAcceptSelected) {
      if (localVarHttpHeaderAcceptSelected.startsWith("text")) {
        responseType_ = "text";
      } else if (this.configuration.isJsonMime(localVarHttpHeaderAcceptSelected)) {
        responseType_ = "json";
      } else {
        responseType_ = "blob";
      }
    }
    let localVarPath = `/entities/deviceproviders/${this.configuration.encodeParam({ name: "id", value: id, in: "path", style: "simple", explode: false, dataType: "string", dataFormat: void 0 })}`;
    return this.httpClient.request("put", `${this.configuration.basePath}${localVarPath}`, {
      context: localVarHttpContext,
      body: request,
      responseType: responseType_,
      withCredentials: this.configuration.withCredentials,
      headers: localVarHeaders,
      observe,
      transferCache: localVarTransferCache,
      reportProgress
    });
  }
  static \u0275fac = function DeviceProvidersService_Factory(__ngFactoryType__) {
    return new (__ngFactoryType__ || _DeviceProvidersService)(\u0275\u0275inject(HttpClient), \u0275\u0275inject(BASE_PATH, 8), \u0275\u0275inject(Configuration, 8));
  };
  static \u0275prov = /* @__PURE__ */ \u0275\u0275defineInjectable({ token: _DeviceProvidersService, factory: _DeviceProvidersService.\u0275fac, providedIn: "root" });
};
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(DeviceProvidersService, [{
    type: Injectable,
    args: [{
      providedIn: "root"
    }]
  }], () => [{ type: HttpClient }, { type: void 0, decorators: [{
    type: Optional
  }, {
    type: Inject,
    args: [BASE_PATH]
  }] }, { type: Configuration, decorators: [{
    type: Optional
  }] }], null);
})();

// src/app/api/api/devices.service.ts
var DevicesService = class _DevicesService {
  httpClient;
  basePath = "";
  defaultHeaders = new HttpHeaders();
  configuration = new Configuration();
  encoder;
  constructor(httpClient, basePath, configuration) {
    this.httpClient = httpClient;
    if (configuration) {
      this.configuration = configuration;
    }
    if (typeof this.configuration.basePath !== "string") {
      const firstBasePath = Array.isArray(basePath) ? basePath[0] : void 0;
      if (firstBasePath != void 0) {
        basePath = firstBasePath;
      }
      if (typeof basePath !== "string") {
        basePath = this.basePath;
      }
      this.configuration.basePath = basePath;
    }
    this.encoder = this.configuration.encoder || new CustomHttpParameterCodec();
  }
  // @ts-ignore
  addToHttpParams(httpParams, value, key) {
    if (typeof value === "object" && value instanceof Date === false) {
      httpParams = this.addToHttpParamsRecursive(httpParams, value);
    } else {
      httpParams = this.addToHttpParamsRecursive(httpParams, value, key);
    }
    return httpParams;
  }
  addToHttpParamsRecursive(httpParams, value, key) {
    if (value == null) {
      return httpParams;
    }
    if (typeof value === "object") {
      if (Array.isArray(value)) {
        value.forEach((elem) => httpParams = this.addToHttpParamsRecursive(httpParams, elem, key));
      } else if (value instanceof Date) {
        if (key != null) {
          httpParams = httpParams.append(key, value.toISOString().substring(0, 10));
        } else {
          throw Error("key may not be null if value is Date");
        }
      } else {
        Object.keys(value).forEach((k) => httpParams = this.addToHttpParamsRecursive(httpParams, value[k], key != null ? `${key}.${k}` : k));
      }
    } else if (key != null) {
      httpParams = httpParams.append(key, value);
    } else {
      throw Error("key may not be null if value is not object or array");
    }
    return httpParams;
  }
  createDevice(request, observe = "body", reportProgress = false, options) {
    if (request === null || request === void 0) {
      throw new Error("Required parameter request was null or undefined when calling createDevice.");
    }
    let localVarHeaders = this.defaultHeaders;
    let localVarCredential;
    localVarCredential = this.configuration.lookupCredential("access_token");
    if (localVarCredential) {
      localVarHeaders = localVarHeaders.set("x-access-token", localVarCredential);
    }
    let localVarHttpHeaderAcceptSelected = options && options.httpHeaderAccept;
    if (localVarHttpHeaderAcceptSelected === void 0) {
      const httpHeaderAccepts = [
        "application/json"
      ];
      localVarHttpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
    }
    if (localVarHttpHeaderAcceptSelected !== void 0) {
      localVarHeaders = localVarHeaders.set("Accept", localVarHttpHeaderAcceptSelected);
    }
    let localVarHttpContext = options && options.context;
    if (localVarHttpContext === void 0) {
      localVarHttpContext = new HttpContext();
    }
    let localVarTransferCache = options && options.transferCache;
    if (localVarTransferCache === void 0) {
      localVarTransferCache = true;
    }
    const consumes = [
      "application/json"
    ];
    const httpContentTypeSelected = this.configuration.selectHeaderContentType(consumes);
    if (httpContentTypeSelected !== void 0) {
      localVarHeaders = localVarHeaders.set("Content-Type", httpContentTypeSelected);
    }
    let responseType_ = "json";
    if (localVarHttpHeaderAcceptSelected) {
      if (localVarHttpHeaderAcceptSelected.startsWith("text")) {
        responseType_ = "text";
      } else if (this.configuration.isJsonMime(localVarHttpHeaderAcceptSelected)) {
        responseType_ = "json";
      } else {
        responseType_ = "blob";
      }
    }
    let localVarPath = `/entities/devices`;
    return this.httpClient.request("post", `${this.configuration.basePath}${localVarPath}`, {
      context: localVarHttpContext,
      body: request,
      responseType: responseType_,
      withCredentials: this.configuration.withCredentials,
      headers: localVarHeaders,
      observe,
      transferCache: localVarTransferCache,
      reportProgress
    });
  }
  getDevice(id, observe = "body", reportProgress = false, options) {
    if (id === null || id === void 0) {
      throw new Error("Required parameter id was null or undefined when calling getDevice.");
    }
    let localVarHeaders = this.defaultHeaders;
    let localVarCredential;
    localVarCredential = this.configuration.lookupCredential("access_token");
    if (localVarCredential) {
      localVarHeaders = localVarHeaders.set("x-access-token", localVarCredential);
    }
    let localVarHttpHeaderAcceptSelected = options && options.httpHeaderAccept;
    if (localVarHttpHeaderAcceptSelected === void 0) {
      const httpHeaderAccepts = [
        "application/json"
      ];
      localVarHttpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
    }
    if (localVarHttpHeaderAcceptSelected !== void 0) {
      localVarHeaders = localVarHeaders.set("Accept", localVarHttpHeaderAcceptSelected);
    }
    let localVarHttpContext = options && options.context;
    if (localVarHttpContext === void 0) {
      localVarHttpContext = new HttpContext();
    }
    let localVarTransferCache = options && options.transferCache;
    if (localVarTransferCache === void 0) {
      localVarTransferCache = true;
    }
    let responseType_ = "json";
    if (localVarHttpHeaderAcceptSelected) {
      if (localVarHttpHeaderAcceptSelected.startsWith("text")) {
        responseType_ = "text";
      } else if (this.configuration.isJsonMime(localVarHttpHeaderAcceptSelected)) {
        responseType_ = "json";
      } else {
        responseType_ = "blob";
      }
    }
    let localVarPath = `/entities/devices/${this.configuration.encodeParam({ name: "id", value: id, in: "path", style: "simple", explode: false, dataType: "string", dataFormat: void 0 })}`;
    return this.httpClient.request("get", `${this.configuration.basePath}${localVarPath}`, {
      context: localVarHttpContext,
      responseType: responseType_,
      withCredentials: this.configuration.withCredentials,
      headers: localVarHeaders,
      observe,
      transferCache: localVarTransferCache,
      reportProgress
    });
  }
  getDeviceByName(deviceType, deviceName, observe = "body", reportProgress = false, options) {
    if (deviceType === null || deviceType === void 0) {
      throw new Error("Required parameter deviceType was null or undefined when calling getDeviceByName.");
    }
    if (deviceName === null || deviceName === void 0) {
      throw new Error("Required parameter deviceName was null or undefined when calling getDeviceByName.");
    }
    let localVarHeaders = this.defaultHeaders;
    let localVarCredential;
    localVarCredential = this.configuration.lookupCredential("access_token");
    if (localVarCredential) {
      localVarHeaders = localVarHeaders.set("x-access-token", localVarCredential);
    }
    let localVarHttpHeaderAcceptSelected = options && options.httpHeaderAccept;
    if (localVarHttpHeaderAcceptSelected === void 0) {
      const httpHeaderAccepts = [
        "application/json"
      ];
      localVarHttpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
    }
    if (localVarHttpHeaderAcceptSelected !== void 0) {
      localVarHeaders = localVarHeaders.set("Accept", localVarHttpHeaderAcceptSelected);
    }
    let localVarHttpContext = options && options.context;
    if (localVarHttpContext === void 0) {
      localVarHttpContext = new HttpContext();
    }
    let localVarTransferCache = options && options.transferCache;
    if (localVarTransferCache === void 0) {
      localVarTransferCache = true;
    }
    let responseType_ = "json";
    if (localVarHttpHeaderAcceptSelected) {
      if (localVarHttpHeaderAcceptSelected.startsWith("text")) {
        responseType_ = "text";
      } else if (this.configuration.isJsonMime(localVarHttpHeaderAcceptSelected)) {
        responseType_ = "json";
      } else {
        responseType_ = "blob";
      }
    }
    let localVarPath = `/entities/devices/name/${this.configuration.encodeParam({ name: "deviceType", value: deviceType, in: "path", style: "simple", explode: false, dataType: "string", dataFormat: void 0 })}/${this.configuration.encodeParam({ name: "deviceName", value: deviceName, in: "path", style: "simple", explode: false, dataType: "string", dataFormat: void 0 })}`;
    return this.httpClient.request("get", `${this.configuration.basePath}${localVarPath}`, {
      context: localVarHttpContext,
      responseType: responseType_,
      withCredentials: this.configuration.withCredentials,
      headers: localVarHeaders,
      observe,
      transferCache: localVarTransferCache,
      reportProgress
    });
  }
  listDevices(owner, offset, limit, sort, filter, observe = "body", reportProgress = false, options) {
    if (owner === null || owner === void 0) {
      throw new Error("Required parameter owner was null or undefined when calling listDevices.");
    }
    let localVarQueryParameters = new HttpParams({ encoder: this.encoder });
    if (owner !== void 0 && owner !== null) {
      localVarQueryParameters = this.addToHttpParams(localVarQueryParameters, owner, "owner");
    }
    if (offset !== void 0 && offset !== null) {
      localVarQueryParameters = this.addToHttpParams(localVarQueryParameters, offset, "offset");
    }
    if (limit !== void 0 && limit !== null) {
      localVarQueryParameters = this.addToHttpParams(localVarQueryParameters, limit, "limit");
    }
    if (sort !== void 0 && sort !== null) {
      localVarQueryParameters = this.addToHttpParams(localVarQueryParameters, sort, "sort");
    }
    if (filter !== void 0 && filter !== null) {
      localVarQueryParameters = this.addToHttpParams(localVarQueryParameters, filter, "filter");
    }
    let localVarHeaders = this.defaultHeaders;
    let localVarCredential;
    localVarCredential = this.configuration.lookupCredential("access_token");
    if (localVarCredential) {
      localVarHeaders = localVarHeaders.set("x-access-token", localVarCredential);
    }
    let localVarHttpHeaderAcceptSelected = options && options.httpHeaderAccept;
    if (localVarHttpHeaderAcceptSelected === void 0) {
      const httpHeaderAccepts = [
        "application/json"
      ];
      localVarHttpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
    }
    if (localVarHttpHeaderAcceptSelected !== void 0) {
      localVarHeaders = localVarHeaders.set("Accept", localVarHttpHeaderAcceptSelected);
    }
    let localVarHttpContext = options && options.context;
    if (localVarHttpContext === void 0) {
      localVarHttpContext = new HttpContext();
    }
    let localVarTransferCache = options && options.transferCache;
    if (localVarTransferCache === void 0) {
      localVarTransferCache = true;
    }
    let responseType_ = "json";
    if (localVarHttpHeaderAcceptSelected) {
      if (localVarHttpHeaderAcceptSelected.startsWith("text")) {
        responseType_ = "text";
      } else if (this.configuration.isJsonMime(localVarHttpHeaderAcceptSelected)) {
        responseType_ = "json";
      } else {
        responseType_ = "blob";
      }
    }
    let localVarPath = `/entities/devices`;
    return this.httpClient.request("get", `${this.configuration.basePath}${localVarPath}`, {
      context: localVarHttpContext,
      params: localVarQueryParameters,
      responseType: responseType_,
      withCredentials: this.configuration.withCredentials,
      headers: localVarHeaders,
      observe,
      transferCache: localVarTransferCache,
      reportProgress
    });
  }
  updateDevice(id, request, observe = "body", reportProgress = false, options) {
    if (id === null || id === void 0) {
      throw new Error("Required parameter id was null or undefined when calling updateDevice.");
    }
    if (request === null || request === void 0) {
      throw new Error("Required parameter request was null or undefined when calling updateDevice.");
    }
    let localVarHeaders = this.defaultHeaders;
    let localVarCredential;
    localVarCredential = this.configuration.lookupCredential("access_token");
    if (localVarCredential) {
      localVarHeaders = localVarHeaders.set("x-access-token", localVarCredential);
    }
    let localVarHttpHeaderAcceptSelected = options && options.httpHeaderAccept;
    if (localVarHttpHeaderAcceptSelected === void 0) {
      const httpHeaderAccepts = [
        "application/json"
      ];
      localVarHttpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
    }
    if (localVarHttpHeaderAcceptSelected !== void 0) {
      localVarHeaders = localVarHeaders.set("Accept", localVarHttpHeaderAcceptSelected);
    }
    let localVarHttpContext = options && options.context;
    if (localVarHttpContext === void 0) {
      localVarHttpContext = new HttpContext();
    }
    let localVarTransferCache = options && options.transferCache;
    if (localVarTransferCache === void 0) {
      localVarTransferCache = true;
    }
    const consumes = [
      "application/json"
    ];
    const httpContentTypeSelected = this.configuration.selectHeaderContentType(consumes);
    if (httpContentTypeSelected !== void 0) {
      localVarHeaders = localVarHeaders.set("Content-Type", httpContentTypeSelected);
    }
    let responseType_ = "json";
    if (localVarHttpHeaderAcceptSelected) {
      if (localVarHttpHeaderAcceptSelected.startsWith("text")) {
        responseType_ = "text";
      } else if (this.configuration.isJsonMime(localVarHttpHeaderAcceptSelected)) {
        responseType_ = "json";
      } else {
        responseType_ = "blob";
      }
    }
    let localVarPath = `/entities/devices/${this.configuration.encodeParam({ name: "id", value: id, in: "path", style: "simple", explode: false, dataType: "string", dataFormat: void 0 })}`;
    return this.httpClient.request("put", `${this.configuration.basePath}${localVarPath}`, {
      context: localVarHttpContext,
      body: request,
      responseType: responseType_,
      withCredentials: this.configuration.withCredentials,
      headers: localVarHeaders,
      observe,
      transferCache: localVarTransferCache,
      reportProgress
    });
  }
  static \u0275fac = function DevicesService_Factory(__ngFactoryType__) {
    return new (__ngFactoryType__ || _DevicesService)(\u0275\u0275inject(HttpClient), \u0275\u0275inject(BASE_PATH, 8), \u0275\u0275inject(Configuration, 8));
  };
  static \u0275prov = /* @__PURE__ */ \u0275\u0275defineInjectable({ token: _DevicesService, factory: _DevicesService.\u0275fac, providedIn: "root" });
};
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(DevicesService, [{
    type: Injectable,
    args: [{
      providedIn: "root"
    }]
  }], () => [{ type: HttpClient }, { type: void 0, decorators: [{
    type: Optional
  }, {
    type: Inject,
    args: [BASE_PATH]
  }] }, { type: Configuration, decorators: [{
    type: Optional
  }] }], null);
})();

// src/app/api/api/distributors.service.ts
var DistributorsService = class _DistributorsService {
  httpClient;
  basePath = "";
  defaultHeaders = new HttpHeaders();
  configuration = new Configuration();
  encoder;
  constructor(httpClient, basePath, configuration) {
    this.httpClient = httpClient;
    if (configuration) {
      this.configuration = configuration;
    }
    if (typeof this.configuration.basePath !== "string") {
      const firstBasePath = Array.isArray(basePath) ? basePath[0] : void 0;
      if (firstBasePath != void 0) {
        basePath = firstBasePath;
      }
      if (typeof basePath !== "string") {
        basePath = this.basePath;
      }
      this.configuration.basePath = basePath;
    }
    this.encoder = this.configuration.encoder || new CustomHttpParameterCodec();
  }
  // @ts-ignore
  addToHttpParams(httpParams, value, key) {
    if (typeof value === "object" && value instanceof Date === false) {
      httpParams = this.addToHttpParamsRecursive(httpParams, value);
    } else {
      httpParams = this.addToHttpParamsRecursive(httpParams, value, key);
    }
    return httpParams;
  }
  addToHttpParamsRecursive(httpParams, value, key) {
    if (value == null) {
      return httpParams;
    }
    if (typeof value === "object") {
      if (Array.isArray(value)) {
        value.forEach((elem) => httpParams = this.addToHttpParamsRecursive(httpParams, elem, key));
      } else if (value instanceof Date) {
        if (key != null) {
          httpParams = httpParams.append(key, value.toISOString().substring(0, 10));
        } else {
          throw Error("key may not be null if value is Date");
        }
      } else {
        Object.keys(value).forEach((k) => httpParams = this.addToHttpParamsRecursive(httpParams, value[k], key != null ? `${key}.${k}` : k));
      }
    } else if (key != null) {
      httpParams = httpParams.append(key, value);
    } else {
      throw Error("key may not be null if value is not object or array");
    }
    return httpParams;
  }
  createDistributor(request, observe = "body", reportProgress = false, options) {
    if (request === null || request === void 0) {
      throw new Error("Required parameter request was null or undefined when calling createDistributor.");
    }
    let localVarHeaders = this.defaultHeaders;
    let localVarCredential;
    localVarCredential = this.configuration.lookupCredential("access_token");
    if (localVarCredential) {
      localVarHeaders = localVarHeaders.set("x-access-token", localVarCredential);
    }
    let localVarHttpHeaderAcceptSelected = options && options.httpHeaderAccept;
    if (localVarHttpHeaderAcceptSelected === void 0) {
      const httpHeaderAccepts = [
        "application/json"
      ];
      localVarHttpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
    }
    if (localVarHttpHeaderAcceptSelected !== void 0) {
      localVarHeaders = localVarHeaders.set("Accept", localVarHttpHeaderAcceptSelected);
    }
    let localVarHttpContext = options && options.context;
    if (localVarHttpContext === void 0) {
      localVarHttpContext = new HttpContext();
    }
    let localVarTransferCache = options && options.transferCache;
    if (localVarTransferCache === void 0) {
      localVarTransferCache = true;
    }
    const consumes = [
      "application/json"
    ];
    const httpContentTypeSelected = this.configuration.selectHeaderContentType(consumes);
    if (httpContentTypeSelected !== void 0) {
      localVarHeaders = localVarHeaders.set("Content-Type", httpContentTypeSelected);
    }
    let responseType_ = "json";
    if (localVarHttpHeaderAcceptSelected) {
      if (localVarHttpHeaderAcceptSelected.startsWith("text")) {
        responseType_ = "text";
      } else if (this.configuration.isJsonMime(localVarHttpHeaderAcceptSelected)) {
        responseType_ = "json";
      } else {
        responseType_ = "blob";
      }
    }
    let localVarPath = `/accounts/distributors`;
    return this.httpClient.request("post", `${this.configuration.basePath}${localVarPath}`, {
      context: localVarHttpContext,
      body: request,
      responseType: responseType_,
      withCredentials: this.configuration.withCredentials,
      headers: localVarHeaders,
      observe,
      transferCache: localVarTransferCache,
      reportProgress
    });
  }
  deleteDistributorLogo(id, size, observe = "body", reportProgress = false, options) {
    if (id === null || id === void 0) {
      throw new Error("Required parameter id was null or undefined when calling deleteDistributorLogo.");
    }
    if (size === null || size === void 0) {
      throw new Error("Required parameter size was null or undefined when calling deleteDistributorLogo.");
    }
    let localVarQueryParameters = new HttpParams({ encoder: this.encoder });
    if (size !== void 0 && size !== null) {
      localVarQueryParameters = this.addToHttpParams(localVarQueryParameters, size, "size");
    }
    let localVarHeaders = this.defaultHeaders;
    let localVarCredential;
    localVarCredential = this.configuration.lookupCredential("access_token");
    if (localVarCredential) {
      localVarHeaders = localVarHeaders.set("x-access-token", localVarCredential);
    }
    let localVarHttpHeaderAcceptSelected = options && options.httpHeaderAccept;
    if (localVarHttpHeaderAcceptSelected === void 0) {
      const httpHeaderAccepts = [];
      localVarHttpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
    }
    if (localVarHttpHeaderAcceptSelected !== void 0) {
      localVarHeaders = localVarHeaders.set("Accept", localVarHttpHeaderAcceptSelected);
    }
    let localVarHttpContext = options && options.context;
    if (localVarHttpContext === void 0) {
      localVarHttpContext = new HttpContext();
    }
    let localVarTransferCache = options && options.transferCache;
    if (localVarTransferCache === void 0) {
      localVarTransferCache = true;
    }
    let responseType_ = "json";
    if (localVarHttpHeaderAcceptSelected) {
      if (localVarHttpHeaderAcceptSelected.startsWith("text")) {
        responseType_ = "text";
      } else if (this.configuration.isJsonMime(localVarHttpHeaderAcceptSelected)) {
        responseType_ = "json";
      } else {
        responseType_ = "blob";
      }
    }
    let localVarPath = `/accounts/distributors/${this.configuration.encodeParam({ name: "id", value: id, in: "path", style: "simple", explode: false, dataType: "string", dataFormat: void 0 })}/logo`;
    return this.httpClient.request("delete", `${this.configuration.basePath}${localVarPath}`, {
      context: localVarHttpContext,
      params: localVarQueryParameters,
      responseType: responseType_,
      withCredentials: this.configuration.withCredentials,
      headers: localVarHeaders,
      observe,
      transferCache: localVarTransferCache,
      reportProgress
    });
  }
  getDistributor(id, observe = "body", reportProgress = false, options) {
    if (id === null || id === void 0) {
      throw new Error("Required parameter id was null or undefined when calling getDistributor.");
    }
    let localVarHeaders = this.defaultHeaders;
    let localVarCredential;
    localVarCredential = this.configuration.lookupCredential("access_token");
    if (localVarCredential) {
      localVarHeaders = localVarHeaders.set("x-access-token", localVarCredential);
    }
    let localVarHttpHeaderAcceptSelected = options && options.httpHeaderAccept;
    if (localVarHttpHeaderAcceptSelected === void 0) {
      const httpHeaderAccepts = [
        "application/json"
      ];
      localVarHttpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
    }
    if (localVarHttpHeaderAcceptSelected !== void 0) {
      localVarHeaders = localVarHeaders.set("Accept", localVarHttpHeaderAcceptSelected);
    }
    let localVarHttpContext = options && options.context;
    if (localVarHttpContext === void 0) {
      localVarHttpContext = new HttpContext();
    }
    let localVarTransferCache = options && options.transferCache;
    if (localVarTransferCache === void 0) {
      localVarTransferCache = true;
    }
    let responseType_ = "json";
    if (localVarHttpHeaderAcceptSelected) {
      if (localVarHttpHeaderAcceptSelected.startsWith("text")) {
        responseType_ = "text";
      } else if (this.configuration.isJsonMime(localVarHttpHeaderAcceptSelected)) {
        responseType_ = "json";
      } else {
        responseType_ = "blob";
      }
    }
    let localVarPath = `/accounts/distributors/${this.configuration.encodeParam({ name: "id", value: id, in: "path", style: "simple", explode: false, dataType: "string", dataFormat: void 0 })}`;
    return this.httpClient.request("get", `${this.configuration.basePath}${localVarPath}`, {
      context: localVarHttpContext,
      responseType: responseType_,
      withCredentials: this.configuration.withCredentials,
      headers: localVarHeaders,
      observe,
      transferCache: localVarTransferCache,
      reportProgress
    });
  }
  getDistributorLogo(id, size, observe = "body", reportProgress = false, options) {
    if (id === null || id === void 0) {
      throw new Error("Required parameter id was null or undefined when calling getDistributorLogo.");
    }
    let localVarQueryParameters = new HttpParams({ encoder: this.encoder });
    if (size !== void 0 && size !== null) {
      localVarQueryParameters = this.addToHttpParams(localVarQueryParameters, size, "size");
    }
    let localVarHeaders = this.defaultHeaders;
    let localVarHttpHeaderAcceptSelected = options && options.httpHeaderAccept;
    if (localVarHttpHeaderAcceptSelected === void 0) {
      const httpHeaderAccepts = [
        "application/json"
      ];
      localVarHttpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
    }
    if (localVarHttpHeaderAcceptSelected !== void 0) {
      localVarHeaders = localVarHeaders.set("Accept", localVarHttpHeaderAcceptSelected);
    }
    let localVarHttpContext = options && options.context;
    if (localVarHttpContext === void 0) {
      localVarHttpContext = new HttpContext();
    }
    let localVarTransferCache = options && options.transferCache;
    if (localVarTransferCache === void 0) {
      localVarTransferCache = true;
    }
    let responseType_ = "json";
    if (localVarHttpHeaderAcceptSelected) {
      if (localVarHttpHeaderAcceptSelected.startsWith("text")) {
        responseType_ = "text";
      } else if (this.configuration.isJsonMime(localVarHttpHeaderAcceptSelected)) {
        responseType_ = "json";
      } else {
        responseType_ = "blob";
      }
    }
    let localVarPath = `/accounts/distributors/${this.configuration.encodeParam({ name: "id", value: id, in: "path", style: "simple", explode: false, dataType: "string", dataFormat: void 0 })}/logo`;
    return this.httpClient.request("get", `${this.configuration.basePath}${localVarPath}`, {
      context: localVarHttpContext,
      params: localVarQueryParameters,
      responseType: responseType_,
      withCredentials: this.configuration.withCredentials,
      headers: localVarHeaders,
      observe,
      transferCache: localVarTransferCache,
      reportProgress
    });
  }
  listDistributors(owner, offset, limit, sort, filter, counts, observe = "body", reportProgress = false, options) {
    if (owner === null || owner === void 0) {
      throw new Error("Required parameter owner was null or undefined when calling listDistributors.");
    }
    let localVarQueryParameters = new HttpParams({ encoder: this.encoder });
    if (owner !== void 0 && owner !== null) {
      localVarQueryParameters = this.addToHttpParams(localVarQueryParameters, owner, "owner");
    }
    if (offset !== void 0 && offset !== null) {
      localVarQueryParameters = this.addToHttpParams(localVarQueryParameters, offset, "offset");
    }
    if (limit !== void 0 && limit !== null) {
      localVarQueryParameters = this.addToHttpParams(localVarQueryParameters, limit, "limit");
    }
    if (sort !== void 0 && sort !== null) {
      localVarQueryParameters = this.addToHttpParams(localVarQueryParameters, sort, "sort");
    }
    if (filter !== void 0 && filter !== null) {
      localVarQueryParameters = this.addToHttpParams(localVarQueryParameters, filter, "filter");
    }
    if (counts !== void 0 && counts !== null) {
      localVarQueryParameters = this.addToHttpParams(localVarQueryParameters, counts, "counts");
    }
    let localVarHeaders = this.defaultHeaders;
    let localVarCredential;
    localVarCredential = this.configuration.lookupCredential("access_token");
    if (localVarCredential) {
      localVarHeaders = localVarHeaders.set("x-access-token", localVarCredential);
    }
    let localVarHttpHeaderAcceptSelected = options && options.httpHeaderAccept;
    if (localVarHttpHeaderAcceptSelected === void 0) {
      const httpHeaderAccepts = [
        "application/json"
      ];
      localVarHttpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
    }
    if (localVarHttpHeaderAcceptSelected !== void 0) {
      localVarHeaders = localVarHeaders.set("Accept", localVarHttpHeaderAcceptSelected);
    }
    let localVarHttpContext = options && options.context;
    if (localVarHttpContext === void 0) {
      localVarHttpContext = new HttpContext();
    }
    let localVarTransferCache = options && options.transferCache;
    if (localVarTransferCache === void 0) {
      localVarTransferCache = true;
    }
    let responseType_ = "json";
    if (localVarHttpHeaderAcceptSelected) {
      if (localVarHttpHeaderAcceptSelected.startsWith("text")) {
        responseType_ = "text";
      } else if (this.configuration.isJsonMime(localVarHttpHeaderAcceptSelected)) {
        responseType_ = "json";
      } else {
        responseType_ = "blob";
      }
    }
    let localVarPath = `/accounts/distributors`;
    return this.httpClient.request("get", `${this.configuration.basePath}${localVarPath}`, {
      context: localVarHttpContext,
      params: localVarQueryParameters,
      responseType: responseType_,
      withCredentials: this.configuration.withCredentials,
      headers: localVarHeaders,
      observe,
      transferCache: localVarTransferCache,
      reportProgress
    });
  }
  updateDistributor(id, request, observe = "body", reportProgress = false, options) {
    if (id === null || id === void 0) {
      throw new Error("Required parameter id was null or undefined when calling updateDistributor.");
    }
    if (request === null || request === void 0) {
      throw new Error("Required parameter request was null or undefined when calling updateDistributor.");
    }
    let localVarHeaders = this.defaultHeaders;
    let localVarCredential;
    localVarCredential = this.configuration.lookupCredential("access_token");
    if (localVarCredential) {
      localVarHeaders = localVarHeaders.set("x-access-token", localVarCredential);
    }
    let localVarHttpHeaderAcceptSelected = options && options.httpHeaderAccept;
    if (localVarHttpHeaderAcceptSelected === void 0) {
      const httpHeaderAccepts = [
        "application/json"
      ];
      localVarHttpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
    }
    if (localVarHttpHeaderAcceptSelected !== void 0) {
      localVarHeaders = localVarHeaders.set("Accept", localVarHttpHeaderAcceptSelected);
    }
    let localVarHttpContext = options && options.context;
    if (localVarHttpContext === void 0) {
      localVarHttpContext = new HttpContext();
    }
    let localVarTransferCache = options && options.transferCache;
    if (localVarTransferCache === void 0) {
      localVarTransferCache = true;
    }
    const consumes = [
      "application/json"
    ];
    const httpContentTypeSelected = this.configuration.selectHeaderContentType(consumes);
    if (httpContentTypeSelected !== void 0) {
      localVarHeaders = localVarHeaders.set("Content-Type", httpContentTypeSelected);
    }
    let responseType_ = "json";
    if (localVarHttpHeaderAcceptSelected) {
      if (localVarHttpHeaderAcceptSelected.startsWith("text")) {
        responseType_ = "text";
      } else if (this.configuration.isJsonMime(localVarHttpHeaderAcceptSelected)) {
        responseType_ = "json";
      } else {
        responseType_ = "blob";
      }
    }
    let localVarPath = `/accounts/distributors/${this.configuration.encodeParam({ name: "id", value: id, in: "path", style: "simple", explode: false, dataType: "string", dataFormat: void 0 })}`;
    return this.httpClient.request("put", `${this.configuration.basePath}${localVarPath}`, {
      context: localVarHttpContext,
      body: request,
      responseType: responseType_,
      withCredentials: this.configuration.withCredentials,
      headers: localVarHeaders,
      observe,
      transferCache: localVarTransferCache,
      reportProgress
    });
  }
  updateDistributorDetails(id, request, observe = "body", reportProgress = false, options) {
    if (id === null || id === void 0) {
      throw new Error("Required parameter id was null or undefined when calling updateDistributorDetails.");
    }
    if (request === null || request === void 0) {
      throw new Error("Required parameter request was null or undefined when calling updateDistributorDetails.");
    }
    let localVarHeaders = this.defaultHeaders;
    let localVarCredential;
    localVarCredential = this.configuration.lookupCredential("access_token");
    if (localVarCredential) {
      localVarHeaders = localVarHeaders.set("x-access-token", localVarCredential);
    }
    let localVarHttpHeaderAcceptSelected = options && options.httpHeaderAccept;
    if (localVarHttpHeaderAcceptSelected === void 0) {
      const httpHeaderAccepts = [
        "application/json"
      ];
      localVarHttpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
    }
    if (localVarHttpHeaderAcceptSelected !== void 0) {
      localVarHeaders = localVarHeaders.set("Accept", localVarHttpHeaderAcceptSelected);
    }
    let localVarHttpContext = options && options.context;
    if (localVarHttpContext === void 0) {
      localVarHttpContext = new HttpContext();
    }
    let localVarTransferCache = options && options.transferCache;
    if (localVarTransferCache === void 0) {
      localVarTransferCache = true;
    }
    const consumes = [
      "application/json"
    ];
    const httpContentTypeSelected = this.configuration.selectHeaderContentType(consumes);
    if (httpContentTypeSelected !== void 0) {
      localVarHeaders = localVarHeaders.set("Content-Type", httpContentTypeSelected);
    }
    let responseType_ = "json";
    if (localVarHttpHeaderAcceptSelected) {
      if (localVarHttpHeaderAcceptSelected.startsWith("text")) {
        responseType_ = "text";
      } else if (this.configuration.isJsonMime(localVarHttpHeaderAcceptSelected)) {
        responseType_ = "json";
      } else {
        responseType_ = "blob";
      }
    }
    let localVarPath = `/accounts/distributors/${this.configuration.encodeParam({ name: "id", value: id, in: "path", style: "simple", explode: false, dataType: "string", dataFormat: void 0 })}/details`;
    return this.httpClient.request("put", `${this.configuration.basePath}${localVarPath}`, {
      context: localVarHttpContext,
      body: request,
      responseType: responseType_,
      withCredentials: this.configuration.withCredentials,
      headers: localVarHeaders,
      observe,
      transferCache: localVarTransferCache,
      reportProgress
    });
  }
  updateDistributorLogo(id, size, observe = "body", reportProgress = false, options) {
    if (id === null || id === void 0) {
      throw new Error("Required parameter id was null or undefined when calling updateDistributorLogo.");
    }
    if (size === null || size === void 0) {
      throw new Error("Required parameter size was null or undefined when calling updateDistributorLogo.");
    }
    let localVarQueryParameters = new HttpParams({ encoder: this.encoder });
    if (size !== void 0 && size !== null) {
      localVarQueryParameters = this.addToHttpParams(localVarQueryParameters, size, "size");
    }
    let localVarHeaders = this.defaultHeaders;
    let localVarCredential;
    localVarCredential = this.configuration.lookupCredential("access_token");
    if (localVarCredential) {
      localVarHeaders = localVarHeaders.set("x-access-token", localVarCredential);
    }
    let localVarHttpHeaderAcceptSelected = options && options.httpHeaderAccept;
    if (localVarHttpHeaderAcceptSelected === void 0) {
      const httpHeaderAccepts = [];
      localVarHttpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
    }
    if (localVarHttpHeaderAcceptSelected !== void 0) {
      localVarHeaders = localVarHeaders.set("Accept", localVarHttpHeaderAcceptSelected);
    }
    let localVarHttpContext = options && options.context;
    if (localVarHttpContext === void 0) {
      localVarHttpContext = new HttpContext();
    }
    let localVarTransferCache = options && options.transferCache;
    if (localVarTransferCache === void 0) {
      localVarTransferCache = true;
    }
    let responseType_ = "json";
    if (localVarHttpHeaderAcceptSelected) {
      if (localVarHttpHeaderAcceptSelected.startsWith("text")) {
        responseType_ = "text";
      } else if (this.configuration.isJsonMime(localVarHttpHeaderAcceptSelected)) {
        responseType_ = "json";
      } else {
        responseType_ = "blob";
      }
    }
    let localVarPath = `/accounts/distributors/${this.configuration.encodeParam({ name: "id", value: id, in: "path", style: "simple", explode: false, dataType: "string", dataFormat: void 0 })}/logo`;
    return this.httpClient.request("post", `${this.configuration.basePath}${localVarPath}`, {
      context: localVarHttpContext,
      params: localVarQueryParameters,
      responseType: responseType_,
      withCredentials: this.configuration.withCredentials,
      headers: localVarHeaders,
      observe,
      transferCache: localVarTransferCache,
      reportProgress
    });
  }
  static \u0275fac = function DistributorsService_Factory(__ngFactoryType__) {
    return new (__ngFactoryType__ || _DistributorsService)(\u0275\u0275inject(HttpClient), \u0275\u0275inject(BASE_PATH, 8), \u0275\u0275inject(Configuration, 8));
  };
  static \u0275prov = /* @__PURE__ */ \u0275\u0275defineInjectable({ token: _DistributorsService, factory: _DistributorsService.\u0275fac, providedIn: "root" });
};
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(DistributorsService, [{
    type: Injectable,
    args: [{
      providedIn: "root"
    }]
  }], () => [{ type: HttpClient }, { type: void 0, decorators: [{
    type: Optional
  }, {
    type: Inject,
    args: [BASE_PATH]
  }] }, { type: Configuration, decorators: [{
    type: Optional
  }] }], null);
})();

// src/app/api/api/emailProviders.service.ts
var EmailProvidersService = class _EmailProvidersService {
  httpClient;
  basePath = "";
  defaultHeaders = new HttpHeaders();
  configuration = new Configuration();
  encoder;
  constructor(httpClient, basePath, configuration) {
    this.httpClient = httpClient;
    if (configuration) {
      this.configuration = configuration;
    }
    if (typeof this.configuration.basePath !== "string") {
      const firstBasePath = Array.isArray(basePath) ? basePath[0] : void 0;
      if (firstBasePath != void 0) {
        basePath = firstBasePath;
      }
      if (typeof basePath !== "string") {
        basePath = this.basePath;
      }
      this.configuration.basePath = basePath;
    }
    this.encoder = this.configuration.encoder || new CustomHttpParameterCodec();
  }
  // @ts-ignore
  addToHttpParams(httpParams, value, key) {
    if (typeof value === "object" && value instanceof Date === false) {
      httpParams = this.addToHttpParamsRecursive(httpParams, value);
    } else {
      httpParams = this.addToHttpParamsRecursive(httpParams, value, key);
    }
    return httpParams;
  }
  addToHttpParamsRecursive(httpParams, value, key) {
    if (value == null) {
      return httpParams;
    }
    if (typeof value === "object") {
      if (Array.isArray(value)) {
        value.forEach((elem) => httpParams = this.addToHttpParamsRecursive(httpParams, elem, key));
      } else if (value instanceof Date) {
        if (key != null) {
          httpParams = httpParams.append(key, value.toISOString().substring(0, 10));
        } else {
          throw Error("key may not be null if value is Date");
        }
      } else {
        Object.keys(value).forEach((k) => httpParams = this.addToHttpParamsRecursive(httpParams, value[k], key != null ? `${key}.${k}` : k));
      }
    } else if (key != null) {
      httpParams = httpParams.append(key, value);
    } else {
      throw Error("key may not be null if value is not object or array");
    }
    return httpParams;
  }
  createEmailProvider(request, observe = "body", reportProgress = false, options) {
    if (request === null || request === void 0) {
      throw new Error("Required parameter request was null or undefined when calling createEmailProvider.");
    }
    let localVarHeaders = this.defaultHeaders;
    let localVarCredential;
    localVarCredential = this.configuration.lookupCredential("access_token");
    if (localVarCredential) {
      localVarHeaders = localVarHeaders.set("x-access-token", localVarCredential);
    }
    let localVarHttpHeaderAcceptSelected = options && options.httpHeaderAccept;
    if (localVarHttpHeaderAcceptSelected === void 0) {
      const httpHeaderAccepts = [
        "application/json"
      ];
      localVarHttpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
    }
    if (localVarHttpHeaderAcceptSelected !== void 0) {
      localVarHeaders = localVarHeaders.set("Accept", localVarHttpHeaderAcceptSelected);
    }
    let localVarHttpContext = options && options.context;
    if (localVarHttpContext === void 0) {
      localVarHttpContext = new HttpContext();
    }
    let localVarTransferCache = options && options.transferCache;
    if (localVarTransferCache === void 0) {
      localVarTransferCache = true;
    }
    const consumes = [
      "application/json"
    ];
    const httpContentTypeSelected = this.configuration.selectHeaderContentType(consumes);
    if (httpContentTypeSelected !== void 0) {
      localVarHeaders = localVarHeaders.set("Content-Type", httpContentTypeSelected);
    }
    let responseType_ = "json";
    if (localVarHttpHeaderAcceptSelected) {
      if (localVarHttpHeaderAcceptSelected.startsWith("text")) {
        responseType_ = "text";
      } else if (this.configuration.isJsonMime(localVarHttpHeaderAcceptSelected)) {
        responseType_ = "json";
      } else {
        responseType_ = "blob";
      }
    }
    let localVarPath = `/entities/emailproviders`;
    return this.httpClient.request("post", `${this.configuration.basePath}${localVarPath}`, {
      context: localVarHttpContext,
      body: request,
      responseType: responseType_,
      withCredentials: this.configuration.withCredentials,
      headers: localVarHeaders,
      observe,
      transferCache: localVarTransferCache,
      reportProgress
    });
  }
  getEmailProvider(id, observe = "body", reportProgress = false, options) {
    if (id === null || id === void 0) {
      throw new Error("Required parameter id was null or undefined when calling getEmailProvider.");
    }
    let localVarHeaders = this.defaultHeaders;
    let localVarCredential;
    localVarCredential = this.configuration.lookupCredential("access_token");
    if (localVarCredential) {
      localVarHeaders = localVarHeaders.set("x-access-token", localVarCredential);
    }
    let localVarHttpHeaderAcceptSelected = options && options.httpHeaderAccept;
    if (localVarHttpHeaderAcceptSelected === void 0) {
      const httpHeaderAccepts = [
        "application/json"
      ];
      localVarHttpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
    }
    if (localVarHttpHeaderAcceptSelected !== void 0) {
      localVarHeaders = localVarHeaders.set("Accept", localVarHttpHeaderAcceptSelected);
    }
    let localVarHttpContext = options && options.context;
    if (localVarHttpContext === void 0) {
      localVarHttpContext = new HttpContext();
    }
    let localVarTransferCache = options && options.transferCache;
    if (localVarTransferCache === void 0) {
      localVarTransferCache = true;
    }
    let responseType_ = "json";
    if (localVarHttpHeaderAcceptSelected) {
      if (localVarHttpHeaderAcceptSelected.startsWith("text")) {
        responseType_ = "text";
      } else if (this.configuration.isJsonMime(localVarHttpHeaderAcceptSelected)) {
        responseType_ = "json";
      } else {
        responseType_ = "blob";
      }
    }
    let localVarPath = `/entities/emailproviders/${this.configuration.encodeParam({ name: "id", value: id, in: "path", style: "simple", explode: false, dataType: "string", dataFormat: void 0 })}`;
    return this.httpClient.request("get", `${this.configuration.basePath}${localVarPath}`, {
      context: localVarHttpContext,
      responseType: responseType_,
      withCredentials: this.configuration.withCredentials,
      headers: localVarHeaders,
      observe,
      transferCache: localVarTransferCache,
      reportProgress
    });
  }
  listEmailProviders(owner, offset, limit, sort, filter, observe = "body", reportProgress = false, options) {
    if (owner === null || owner === void 0) {
      throw new Error("Required parameter owner was null or undefined when calling listEmailProviders.");
    }
    let localVarQueryParameters = new HttpParams({ encoder: this.encoder });
    if (owner !== void 0 && owner !== null) {
      localVarQueryParameters = this.addToHttpParams(localVarQueryParameters, owner, "owner");
    }
    if (offset !== void 0 && offset !== null) {
      localVarQueryParameters = this.addToHttpParams(localVarQueryParameters, offset, "offset");
    }
    if (limit !== void 0 && limit !== null) {
      localVarQueryParameters = this.addToHttpParams(localVarQueryParameters, limit, "limit");
    }
    if (sort !== void 0 && sort !== null) {
      localVarQueryParameters = this.addToHttpParams(localVarQueryParameters, sort, "sort");
    }
    if (filter !== void 0 && filter !== null) {
      localVarQueryParameters = this.addToHttpParams(localVarQueryParameters, filter, "filter");
    }
    let localVarHeaders = this.defaultHeaders;
    let localVarCredential;
    localVarCredential = this.configuration.lookupCredential("access_token");
    if (localVarCredential) {
      localVarHeaders = localVarHeaders.set("x-access-token", localVarCredential);
    }
    let localVarHttpHeaderAcceptSelected = options && options.httpHeaderAccept;
    if (localVarHttpHeaderAcceptSelected === void 0) {
      const httpHeaderAccepts = [
        "application/json"
      ];
      localVarHttpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
    }
    if (localVarHttpHeaderAcceptSelected !== void 0) {
      localVarHeaders = localVarHeaders.set("Accept", localVarHttpHeaderAcceptSelected);
    }
    let localVarHttpContext = options && options.context;
    if (localVarHttpContext === void 0) {
      localVarHttpContext = new HttpContext();
    }
    let localVarTransferCache = options && options.transferCache;
    if (localVarTransferCache === void 0) {
      localVarTransferCache = true;
    }
    let responseType_ = "json";
    if (localVarHttpHeaderAcceptSelected) {
      if (localVarHttpHeaderAcceptSelected.startsWith("text")) {
        responseType_ = "text";
      } else if (this.configuration.isJsonMime(localVarHttpHeaderAcceptSelected)) {
        responseType_ = "json";
      } else {
        responseType_ = "blob";
      }
    }
    let localVarPath = `/entities/emailproviders`;
    return this.httpClient.request("get", `${this.configuration.basePath}${localVarPath}`, {
      context: localVarHttpContext,
      params: localVarQueryParameters,
      responseType: responseType_,
      withCredentials: this.configuration.withCredentials,
      headers: localVarHeaders,
      observe,
      transferCache: localVarTransferCache,
      reportProgress
    });
  }
  updateEmailProvider(id, request, observe = "body", reportProgress = false, options) {
    if (id === null || id === void 0) {
      throw new Error("Required parameter id was null or undefined when calling updateEmailProvider.");
    }
    if (request === null || request === void 0) {
      throw new Error("Required parameter request was null or undefined when calling updateEmailProvider.");
    }
    let localVarHeaders = this.defaultHeaders;
    let localVarCredential;
    localVarCredential = this.configuration.lookupCredential("access_token");
    if (localVarCredential) {
      localVarHeaders = localVarHeaders.set("x-access-token", localVarCredential);
    }
    let localVarHttpHeaderAcceptSelected = options && options.httpHeaderAccept;
    if (localVarHttpHeaderAcceptSelected === void 0) {
      const httpHeaderAccepts = [
        "application/json"
      ];
      localVarHttpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
    }
    if (localVarHttpHeaderAcceptSelected !== void 0) {
      localVarHeaders = localVarHeaders.set("Accept", localVarHttpHeaderAcceptSelected);
    }
    let localVarHttpContext = options && options.context;
    if (localVarHttpContext === void 0) {
      localVarHttpContext = new HttpContext();
    }
    let localVarTransferCache = options && options.transferCache;
    if (localVarTransferCache === void 0) {
      localVarTransferCache = true;
    }
    const consumes = [
      "application/json"
    ];
    const httpContentTypeSelected = this.configuration.selectHeaderContentType(consumes);
    if (httpContentTypeSelected !== void 0) {
      localVarHeaders = localVarHeaders.set("Content-Type", httpContentTypeSelected);
    }
    let responseType_ = "json";
    if (localVarHttpHeaderAcceptSelected) {
      if (localVarHttpHeaderAcceptSelected.startsWith("text")) {
        responseType_ = "text";
      } else if (this.configuration.isJsonMime(localVarHttpHeaderAcceptSelected)) {
        responseType_ = "json";
      } else {
        responseType_ = "blob";
      }
    }
    let localVarPath = `/entities/emailproviders/${this.configuration.encodeParam({ name: "id", value: id, in: "path", style: "simple", explode: false, dataType: "string", dataFormat: void 0 })}`;
    return this.httpClient.request("put", `${this.configuration.basePath}${localVarPath}`, {
      context: localVarHttpContext,
      body: request,
      responseType: responseType_,
      withCredentials: this.configuration.withCredentials,
      headers: localVarHeaders,
      observe,
      transferCache: localVarTransferCache,
      reportProgress
    });
  }
  static \u0275fac = function EmailProvidersService_Factory(__ngFactoryType__) {
    return new (__ngFactoryType__ || _EmailProvidersService)(\u0275\u0275inject(HttpClient), \u0275\u0275inject(BASE_PATH, 8), \u0275\u0275inject(Configuration, 8));
  };
  static \u0275prov = /* @__PURE__ */ \u0275\u0275defineInjectable({ token: _EmailProvidersService, factory: _EmailProvidersService.\u0275fac, providedIn: "root" });
};
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(EmailProvidersService, [{
    type: Injectable,
    args: [{
      providedIn: "root"
    }]
  }], () => [{ type: HttpClient }, { type: void 0, decorators: [{
    type: Optional
  }, {
    type: Inject,
    args: [BASE_PATH]
  }] }, { type: Configuration, decorators: [{
    type: Optional
  }] }], null);
})();

// src/app/api/api/emailProvidersTypes.service.ts
var EmailProvidersTypesService = class _EmailProvidersTypesService {
  httpClient;
  basePath = "";
  defaultHeaders = new HttpHeaders();
  configuration = new Configuration();
  encoder;
  constructor(httpClient, basePath, configuration) {
    this.httpClient = httpClient;
    if (configuration) {
      this.configuration = configuration;
    }
    if (typeof this.configuration.basePath !== "string") {
      const firstBasePath = Array.isArray(basePath) ? basePath[0] : void 0;
      if (firstBasePath != void 0) {
        basePath = firstBasePath;
      }
      if (typeof basePath !== "string") {
        basePath = this.basePath;
      }
      this.configuration.basePath = basePath;
    }
    this.encoder = this.configuration.encoder || new CustomHttpParameterCodec();
  }
  // @ts-ignore
  addToHttpParams(httpParams, value, key) {
    if (typeof value === "object" && value instanceof Date === false) {
      httpParams = this.addToHttpParamsRecursive(httpParams, value);
    } else {
      httpParams = this.addToHttpParamsRecursive(httpParams, value, key);
    }
    return httpParams;
  }
  addToHttpParamsRecursive(httpParams, value, key) {
    if (value == null) {
      return httpParams;
    }
    if (typeof value === "object") {
      if (Array.isArray(value)) {
        value.forEach((elem) => httpParams = this.addToHttpParamsRecursive(httpParams, elem, key));
      } else if (value instanceof Date) {
        if (key != null) {
          httpParams = httpParams.append(key, value.toISOString().substring(0, 10));
        } else {
          throw Error("key may not be null if value is Date");
        }
      } else {
        Object.keys(value).forEach((k) => httpParams = this.addToHttpParamsRecursive(httpParams, value[k], key != null ? `${key}.${k}` : k));
      }
    } else if (key != null) {
      httpParams = httpParams.append(key, value);
    } else {
      throw Error("key may not be null if value is not object or array");
    }
    return httpParams;
  }
  getEmailProviderType(id, observe = "body", reportProgress = false, options) {
    if (id === null || id === void 0) {
      throw new Error("Required parameter id was null or undefined when calling getEmailProviderType.");
    }
    let localVarHeaders = this.defaultHeaders;
    let localVarCredential;
    localVarCredential = this.configuration.lookupCredential("access_token");
    if (localVarCredential) {
      localVarHeaders = localVarHeaders.set("x-access-token", localVarCredential);
    }
    let localVarHttpHeaderAcceptSelected = options && options.httpHeaderAccept;
    if (localVarHttpHeaderAcceptSelected === void 0) {
      const httpHeaderAccepts = [
        "application/json"
      ];
      localVarHttpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
    }
    if (localVarHttpHeaderAcceptSelected !== void 0) {
      localVarHeaders = localVarHeaders.set("Accept", localVarHttpHeaderAcceptSelected);
    }
    let localVarHttpContext = options && options.context;
    if (localVarHttpContext === void 0) {
      localVarHttpContext = new HttpContext();
    }
    let localVarTransferCache = options && options.transferCache;
    if (localVarTransferCache === void 0) {
      localVarTransferCache = true;
    }
    let responseType_ = "json";
    if (localVarHttpHeaderAcceptSelected) {
      if (localVarHttpHeaderAcceptSelected.startsWith("text")) {
        responseType_ = "text";
      } else if (this.configuration.isJsonMime(localVarHttpHeaderAcceptSelected)) {
        responseType_ = "json";
      } else {
        responseType_ = "blob";
      }
    }
    let localVarPath = `/entities/emailprovidertypes/${this.configuration.encodeParam({ name: "id", value: id, in: "path", style: "simple", explode: false, dataType: "string", dataFormat: void 0 })}`;
    return this.httpClient.request("get", `${this.configuration.basePath}${localVarPath}`, {
      context: localVarHttpContext,
      responseType: responseType_,
      withCredentials: this.configuration.withCredentials,
      headers: localVarHeaders,
      observe,
      transferCache: localVarTransferCache,
      reportProgress
    });
  }
  listEmailProviderTypes(owner, offset, limit, sort, filter, observe = "body", reportProgress = false, options) {
    if (owner === null || owner === void 0) {
      throw new Error("Required parameter owner was null or undefined when calling listEmailProviderTypes.");
    }
    let localVarQueryParameters = new HttpParams({ encoder: this.encoder });
    if (owner !== void 0 && owner !== null) {
      localVarQueryParameters = this.addToHttpParams(localVarQueryParameters, owner, "owner");
    }
    if (offset !== void 0 && offset !== null) {
      localVarQueryParameters = this.addToHttpParams(localVarQueryParameters, offset, "offset");
    }
    if (limit !== void 0 && limit !== null) {
      localVarQueryParameters = this.addToHttpParams(localVarQueryParameters, limit, "limit");
    }
    if (sort !== void 0 && sort !== null) {
      localVarQueryParameters = this.addToHttpParams(localVarQueryParameters, sort, "sort");
    }
    if (filter !== void 0 && filter !== null) {
      localVarQueryParameters = this.addToHttpParams(localVarQueryParameters, filter, "filter");
    }
    let localVarHeaders = this.defaultHeaders;
    let localVarCredential;
    localVarCredential = this.configuration.lookupCredential("access_token");
    if (localVarCredential) {
      localVarHeaders = localVarHeaders.set("x-access-token", localVarCredential);
    }
    let localVarHttpHeaderAcceptSelected = options && options.httpHeaderAccept;
    if (localVarHttpHeaderAcceptSelected === void 0) {
      const httpHeaderAccepts = [
        "application/json"
      ];
      localVarHttpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
    }
    if (localVarHttpHeaderAcceptSelected !== void 0) {
      localVarHeaders = localVarHeaders.set("Accept", localVarHttpHeaderAcceptSelected);
    }
    let localVarHttpContext = options && options.context;
    if (localVarHttpContext === void 0) {
      localVarHttpContext = new HttpContext();
    }
    let localVarTransferCache = options && options.transferCache;
    if (localVarTransferCache === void 0) {
      localVarTransferCache = true;
    }
    let responseType_ = "json";
    if (localVarHttpHeaderAcceptSelected) {
      if (localVarHttpHeaderAcceptSelected.startsWith("text")) {
        responseType_ = "text";
      } else if (this.configuration.isJsonMime(localVarHttpHeaderAcceptSelected)) {
        responseType_ = "json";
      } else {
        responseType_ = "blob";
      }
    }
    let localVarPath = `/entities/emailprovidertypes`;
    return this.httpClient.request("get", `${this.configuration.basePath}${localVarPath}`, {
      context: localVarHttpContext,
      params: localVarQueryParameters,
      responseType: responseType_,
      withCredentials: this.configuration.withCredentials,
      headers: localVarHeaders,
      observe,
      transferCache: localVarTransferCache,
      reportProgress
    });
  }
  static \u0275fac = function EmailProvidersTypesService_Factory(__ngFactoryType__) {
    return new (__ngFactoryType__ || _EmailProvidersTypesService)(\u0275\u0275inject(HttpClient), \u0275\u0275inject(BASE_PATH, 8), \u0275\u0275inject(Configuration, 8));
  };
  static \u0275prov = /* @__PURE__ */ \u0275\u0275defineInjectable({ token: _EmailProvidersTypesService, factory: _EmailProvidersTypesService.\u0275fac, providedIn: "root" });
};
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(EmailProvidersTypesService, [{
    type: Injectable,
    args: [{
      providedIn: "root"
    }]
  }], () => [{ type: HttpClient }, { type: void 0, decorators: [{
    type: Optional
  }, {
    type: Inject,
    args: [BASE_PATH]
  }] }, { type: Configuration, decorators: [{
    type: Optional
  }] }], null);
})();

// src/app/api/api/entities.service.ts
var EntitiesService = class _EntitiesService {
  httpClient;
  basePath = "";
  defaultHeaders = new HttpHeaders();
  configuration = new Configuration();
  encoder;
  constructor(httpClient, basePath, configuration) {
    this.httpClient = httpClient;
    if (configuration) {
      this.configuration = configuration;
    }
    if (typeof this.configuration.basePath !== "string") {
      const firstBasePath = Array.isArray(basePath) ? basePath[0] : void 0;
      if (firstBasePath != void 0) {
        basePath = firstBasePath;
      }
      if (typeof basePath !== "string") {
        basePath = this.basePath;
      }
      this.configuration.basePath = basePath;
    }
    this.encoder = this.configuration.encoder || new CustomHttpParameterCodec();
  }
  // @ts-ignore
  addToHttpParams(httpParams, value, key) {
    if (typeof value === "object" && value instanceof Date === false) {
      httpParams = this.addToHttpParamsRecursive(httpParams, value);
    } else {
      httpParams = this.addToHttpParamsRecursive(httpParams, value, key);
    }
    return httpParams;
  }
  addToHttpParamsRecursive(httpParams, value, key) {
    if (value == null) {
      return httpParams;
    }
    if (typeof value === "object") {
      if (Array.isArray(value)) {
        value.forEach((elem) => httpParams = this.addToHttpParamsRecursive(httpParams, elem, key));
      } else if (value instanceof Date) {
        if (key != null) {
          httpParams = httpParams.append(key, value.toISOString().substring(0, 10));
        } else {
          throw Error("key may not be null if value is Date");
        }
      } else {
        Object.keys(value).forEach((k) => httpParams = this.addToHttpParamsRecursive(httpParams, value[k], key != null ? `${key}.${k}` : k));
      }
    } else if (key != null) {
      httpParams = httpParams.append(key, value);
    } else {
      throw Error("key may not be null if value is not object or array");
    }
    return httpParams;
  }
  createAlert(request, observe = "body", reportProgress = false, options) {
    if (request === null || request === void 0) {
      throw new Error("Required parameter request was null or undefined when calling createAlert.");
    }
    let localVarHeaders = this.defaultHeaders;
    let localVarCredential;
    localVarCredential = this.configuration.lookupCredential("access_token");
    if (localVarCredential) {
      localVarHeaders = localVarHeaders.set("x-access-token", localVarCredential);
    }
    let localVarHttpHeaderAcceptSelected = options && options.httpHeaderAccept;
    if (localVarHttpHeaderAcceptSelected === void 0) {
      const httpHeaderAccepts = [
        "application/json"
      ];
      localVarHttpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
    }
    if (localVarHttpHeaderAcceptSelected !== void 0) {
      localVarHeaders = localVarHeaders.set("Accept", localVarHttpHeaderAcceptSelected);
    }
    let localVarHttpContext = options && options.context;
    if (localVarHttpContext === void 0) {
      localVarHttpContext = new HttpContext();
    }
    let localVarTransferCache = options && options.transferCache;
    if (localVarTransferCache === void 0) {
      localVarTransferCache = true;
    }
    const consumes = [
      "application/json"
    ];
    const httpContentTypeSelected = this.configuration.selectHeaderContentType(consumes);
    if (httpContentTypeSelected !== void 0) {
      localVarHeaders = localVarHeaders.set("Content-Type", httpContentTypeSelected);
    }
    let responseType_ = "json";
    if (localVarHttpHeaderAcceptSelected) {
      if (localVarHttpHeaderAcceptSelected.startsWith("text")) {
        responseType_ = "text";
      } else if (this.configuration.isJsonMime(localVarHttpHeaderAcceptSelected)) {
        responseType_ = "json";
      } else {
        responseType_ = "blob";
      }
    }
    let localVarPath = `/entities/alerts`;
    return this.httpClient.request("post", `${this.configuration.basePath}${localVarPath}`, {
      context: localVarHttpContext,
      body: request,
      responseType: responseType_,
      withCredentials: this.configuration.withCredentials,
      headers: localVarHeaders,
      observe,
      transferCache: localVarTransferCache,
      reportProgress
    });
  }
  createAsset(request, observe = "body", reportProgress = false, options) {
    if (request === null || request === void 0) {
      throw new Error("Required parameter request was null or undefined when calling createAsset.");
    }
    let localVarHeaders = this.defaultHeaders;
    let localVarCredential;
    localVarCredential = this.configuration.lookupCredential("access_token");
    if (localVarCredential) {
      localVarHeaders = localVarHeaders.set("x-access-token", localVarCredential);
    }
    let localVarHttpHeaderAcceptSelected = options && options.httpHeaderAccept;
    if (localVarHttpHeaderAcceptSelected === void 0) {
      const httpHeaderAccepts = [
        "application/json"
      ];
      localVarHttpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
    }
    if (localVarHttpHeaderAcceptSelected !== void 0) {
      localVarHeaders = localVarHeaders.set("Accept", localVarHttpHeaderAcceptSelected);
    }
    let localVarHttpContext = options && options.context;
    if (localVarHttpContext === void 0) {
      localVarHttpContext = new HttpContext();
    }
    let localVarTransferCache = options && options.transferCache;
    if (localVarTransferCache === void 0) {
      localVarTransferCache = true;
    }
    const consumes = [
      "application/json"
    ];
    const httpContentTypeSelected = this.configuration.selectHeaderContentType(consumes);
    if (httpContentTypeSelected !== void 0) {
      localVarHeaders = localVarHeaders.set("Content-Type", httpContentTypeSelected);
    }
    let responseType_ = "json";
    if (localVarHttpHeaderAcceptSelected) {
      if (localVarHttpHeaderAcceptSelected.startsWith("text")) {
        responseType_ = "text";
      } else if (this.configuration.isJsonMime(localVarHttpHeaderAcceptSelected)) {
        responseType_ = "json";
      } else {
        responseType_ = "blob";
      }
    }
    let localVarPath = `/entities/assets`;
    return this.httpClient.request("post", `${this.configuration.basePath}${localVarPath}`, {
      context: localVarHttpContext,
      body: request,
      responseType: responseType_,
      withCredentials: this.configuration.withCredentials,
      headers: localVarHeaders,
      observe,
      transferCache: localVarTransferCache,
      reportProgress
    });
  }
  createAssetCategory(request, observe = "body", reportProgress = false, options) {
    if (request === null || request === void 0) {
      throw new Error("Required parameter request was null or undefined when calling createAssetCategory.");
    }
    let localVarHeaders = this.defaultHeaders;
    let localVarCredential;
    localVarCredential = this.configuration.lookupCredential("access_token");
    if (localVarCredential) {
      localVarHeaders = localVarHeaders.set("x-access-token", localVarCredential);
    }
    let localVarHttpHeaderAcceptSelected = options && options.httpHeaderAccept;
    if (localVarHttpHeaderAcceptSelected === void 0) {
      const httpHeaderAccepts = [
        "application/json"
      ];
      localVarHttpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
    }
    if (localVarHttpHeaderAcceptSelected !== void 0) {
      localVarHeaders = localVarHeaders.set("Accept", localVarHttpHeaderAcceptSelected);
    }
    let localVarHttpContext = options && options.context;
    if (localVarHttpContext === void 0) {
      localVarHttpContext = new HttpContext();
    }
    let localVarTransferCache = options && options.transferCache;
    if (localVarTransferCache === void 0) {
      localVarTransferCache = true;
    }
    const consumes = [
      "application/json"
    ];
    const httpContentTypeSelected = this.configuration.selectHeaderContentType(consumes);
    if (httpContentTypeSelected !== void 0) {
      localVarHeaders = localVarHeaders.set("Content-Type", httpContentTypeSelected);
    }
    let responseType_ = "json";
    if (localVarHttpHeaderAcceptSelected) {
      if (localVarHttpHeaderAcceptSelected.startsWith("text")) {
        responseType_ = "text";
      } else if (this.configuration.isJsonMime(localVarHttpHeaderAcceptSelected)) {
        responseType_ = "json";
      } else {
        responseType_ = "blob";
      }
    }
    let localVarPath = `/entities/assetcategories`;
    return this.httpClient.request("post", `${this.configuration.basePath}${localVarPath}`, {
      context: localVarHttpContext,
      body: request,
      responseType: responseType_,
      withCredentials: this.configuration.withCredentials,
      headers: localVarHeaders,
      observe,
      transferCache: localVarTransferCache,
      reportProgress
    });
  }
  createAssetGroup(request, observe = "body", reportProgress = false, options) {
    if (request === null || request === void 0) {
      throw new Error("Required parameter request was null or undefined when calling createAssetGroup.");
    }
    let localVarHeaders = this.defaultHeaders;
    let localVarCredential;
    localVarCredential = this.configuration.lookupCredential("access_token");
    if (localVarCredential) {
      localVarHeaders = localVarHeaders.set("x-access-token", localVarCredential);
    }
    let localVarHttpHeaderAcceptSelected = options && options.httpHeaderAccept;
    if (localVarHttpHeaderAcceptSelected === void 0) {
      const httpHeaderAccepts = [
        "application/json"
      ];
      localVarHttpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
    }
    if (localVarHttpHeaderAcceptSelected !== void 0) {
      localVarHeaders = localVarHeaders.set("Accept", localVarHttpHeaderAcceptSelected);
    }
    let localVarHttpContext = options && options.context;
    if (localVarHttpContext === void 0) {
      localVarHttpContext = new HttpContext();
    }
    let localVarTransferCache = options && options.transferCache;
    if (localVarTransferCache === void 0) {
      localVarTransferCache = true;
    }
    const consumes = [
      "application/json"
    ];
    const httpContentTypeSelected = this.configuration.selectHeaderContentType(consumes);
    if (httpContentTypeSelected !== void 0) {
      localVarHeaders = localVarHeaders.set("Content-Type", httpContentTypeSelected);
    }
    let responseType_ = "json";
    if (localVarHttpHeaderAcceptSelected) {
      if (localVarHttpHeaderAcceptSelected.startsWith("text")) {
        responseType_ = "text";
      } else if (this.configuration.isJsonMime(localVarHttpHeaderAcceptSelected)) {
        responseType_ = "json";
      } else {
        responseType_ = "blob";
      }
    }
    let localVarPath = `/entities/assetgroups`;
    return this.httpClient.request("post", `${this.configuration.basePath}${localVarPath}`, {
      context: localVarHttpContext,
      body: request,
      responseType: responseType_,
      withCredentials: this.configuration.withCredentials,
      headers: localVarHeaders,
      observe,
      transferCache: localVarTransferCache,
      reportProgress
    });
  }
  createAssetRatingProfile(request, observe = "body", reportProgress = false, options) {
    if (request === null || request === void 0) {
      throw new Error("Required parameter request was null or undefined when calling createAssetRatingProfile.");
    }
    let localVarHeaders = this.defaultHeaders;
    let localVarCredential;
    localVarCredential = this.configuration.lookupCredential("access_token");
    if (localVarCredential) {
      localVarHeaders = localVarHeaders.set("x-access-token", localVarCredential);
    }
    let localVarHttpHeaderAcceptSelected = options && options.httpHeaderAccept;
    if (localVarHttpHeaderAcceptSelected === void 0) {
      const httpHeaderAccepts = [
        "application/json"
      ];
      localVarHttpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
    }
    if (localVarHttpHeaderAcceptSelected !== void 0) {
      localVarHeaders = localVarHeaders.set("Accept", localVarHttpHeaderAcceptSelected);
    }
    let localVarHttpContext = options && options.context;
    if (localVarHttpContext === void 0) {
      localVarHttpContext = new HttpContext();
    }
    let localVarTransferCache = options && options.transferCache;
    if (localVarTransferCache === void 0) {
      localVarTransferCache = true;
    }
    const consumes = [
      "application/json"
    ];
    const httpContentTypeSelected = this.configuration.selectHeaderContentType(consumes);
    if (httpContentTypeSelected !== void 0) {
      localVarHeaders = localVarHeaders.set("Content-Type", httpContentTypeSelected);
    }
    let responseType_ = "json";
    if (localVarHttpHeaderAcceptSelected) {
      if (localVarHttpHeaderAcceptSelected.startsWith("text")) {
        responseType_ = "text";
      } else if (this.configuration.isJsonMime(localVarHttpHeaderAcceptSelected)) {
        responseType_ = "json";
      } else {
        responseType_ = "blob";
      }
    }
    let localVarPath = `/entities/assetratingprofiles`;
    return this.httpClient.request("post", `${this.configuration.basePath}${localVarPath}`, {
      context: localVarHttpContext,
      body: request,
      responseType: responseType_,
      withCredentials: this.configuration.withCredentials,
      headers: localVarHeaders,
      observe,
      transferCache: localVarTransferCache,
      reportProgress
    });
  }
  createAssetStateProfile(request, observe = "body", reportProgress = false, options) {
    if (request === null || request === void 0) {
      throw new Error("Required parameter request was null or undefined when calling createAssetStateProfile.");
    }
    let localVarHeaders = this.defaultHeaders;
    let localVarCredential;
    localVarCredential = this.configuration.lookupCredential("access_token");
    if (localVarCredential) {
      localVarHeaders = localVarHeaders.set("x-access-token", localVarCredential);
    }
    let localVarHttpHeaderAcceptSelected = options && options.httpHeaderAccept;
    if (localVarHttpHeaderAcceptSelected === void 0) {
      const httpHeaderAccepts = [
        "application/json"
      ];
      localVarHttpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
    }
    if (localVarHttpHeaderAcceptSelected !== void 0) {
      localVarHeaders = localVarHeaders.set("Accept", localVarHttpHeaderAcceptSelected);
    }
    let localVarHttpContext = options && options.context;
    if (localVarHttpContext === void 0) {
      localVarHttpContext = new HttpContext();
    }
    let localVarTransferCache = options && options.transferCache;
    if (localVarTransferCache === void 0) {
      localVarTransferCache = true;
    }
    const consumes = [
      "application/json"
    ];
    const httpContentTypeSelected = this.configuration.selectHeaderContentType(consumes);
    if (httpContentTypeSelected !== void 0) {
      localVarHeaders = localVarHeaders.set("Content-Type", httpContentTypeSelected);
    }
    let responseType_ = "json";
    if (localVarHttpHeaderAcceptSelected) {
      if (localVarHttpHeaderAcceptSelected.startsWith("text")) {
        responseType_ = "text";
      } else if (this.configuration.isJsonMime(localVarHttpHeaderAcceptSelected)) {
        responseType_ = "json";
      } else {
        responseType_ = "blob";
      }
    }
    let localVarPath = `/entities/assetstateprofiles`;
    return this.httpClient.request("post", `${this.configuration.basePath}${localVarPath}`, {
      context: localVarHttpContext,
      body: request,
      responseType: responseType_,
      withCredentials: this.configuration.withCredentials,
      headers: localVarHeaders,
      observe,
      transferCache: localVarTransferCache,
      reportProgress
    });
  }
  createAssetTag(request, observe = "body", reportProgress = false, options) {
    if (request === null || request === void 0) {
      throw new Error("Required parameter request was null or undefined when calling createAssetTag.");
    }
    let localVarHeaders = this.defaultHeaders;
    let localVarCredential;
    localVarCredential = this.configuration.lookupCredential("access_token");
    if (localVarCredential) {
      localVarHeaders = localVarHeaders.set("x-access-token", localVarCredential);
    }
    let localVarHttpHeaderAcceptSelected = options && options.httpHeaderAccept;
    if (localVarHttpHeaderAcceptSelected === void 0) {
      const httpHeaderAccepts = [
        "application/json"
      ];
      localVarHttpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
    }
    if (localVarHttpHeaderAcceptSelected !== void 0) {
      localVarHeaders = localVarHeaders.set("Accept", localVarHttpHeaderAcceptSelected);
    }
    let localVarHttpContext = options && options.context;
    if (localVarHttpContext === void 0) {
      localVarHttpContext = new HttpContext();
    }
    let localVarTransferCache = options && options.transferCache;
    if (localVarTransferCache === void 0) {
      localVarTransferCache = true;
    }
    const consumes = [
      "application/json"
    ];
    const httpContentTypeSelected = this.configuration.selectHeaderContentType(consumes);
    if (httpContentTypeSelected !== void 0) {
      localVarHeaders = localVarHeaders.set("Content-Type", httpContentTypeSelected);
    }
    let responseType_ = "json";
    if (localVarHttpHeaderAcceptSelected) {
      if (localVarHttpHeaderAcceptSelected.startsWith("text")) {
        responseType_ = "text";
      } else if (this.configuration.isJsonMime(localVarHttpHeaderAcceptSelected)) {
        responseType_ = "json";
      } else {
        responseType_ = "blob";
      }
    }
    let localVarPath = `/entities/assettags`;
    return this.httpClient.request("post", `${this.configuration.basePath}${localVarPath}`, {
      context: localVarHttpContext,
      body: request,
      responseType: responseType_,
      withCredentials: this.configuration.withCredentials,
      headers: localVarHeaders,
      observe,
      transferCache: localVarTransferCache,
      reportProgress
    });
  }
  createCostCentre(request, observe = "body", reportProgress = false, options) {
    if (request === null || request === void 0) {
      throw new Error("Required parameter request was null or undefined when calling createCostCentre.");
    }
    let localVarHeaders = this.defaultHeaders;
    let localVarCredential;
    localVarCredential = this.configuration.lookupCredential("access_token");
    if (localVarCredential) {
      localVarHeaders = localVarHeaders.set("x-access-token", localVarCredential);
    }
    let localVarHttpHeaderAcceptSelected = options && options.httpHeaderAccept;
    if (localVarHttpHeaderAcceptSelected === void 0) {
      const httpHeaderAccepts = [
        "application/json"
      ];
      localVarHttpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
    }
    if (localVarHttpHeaderAcceptSelected !== void 0) {
      localVarHeaders = localVarHeaders.set("Accept", localVarHttpHeaderAcceptSelected);
    }
    let localVarHttpContext = options && options.context;
    if (localVarHttpContext === void 0) {
      localVarHttpContext = new HttpContext();
    }
    let localVarTransferCache = options && options.transferCache;
    if (localVarTransferCache === void 0) {
      localVarTransferCache = true;
    }
    const consumes = [
      "application/json"
    ];
    const httpContentTypeSelected = this.configuration.selectHeaderContentType(consumes);
    if (httpContentTypeSelected !== void 0) {
      localVarHeaders = localVarHeaders.set("Content-Type", httpContentTypeSelected);
    }
    let responseType_ = "json";
    if (localVarHttpHeaderAcceptSelected) {
      if (localVarHttpHeaderAcceptSelected.startsWith("text")) {
        responseType_ = "text";
      } else if (this.configuration.isJsonMime(localVarHttpHeaderAcceptSelected)) {
        responseType_ = "json";
      } else {
        responseType_ = "blob";
      }
    }
    let localVarPath = `/entities/costcentres`;
    return this.httpClient.request("post", `${this.configuration.basePath}${localVarPath}`, {
      context: localVarHttpContext,
      body: request,
      responseType: responseType_,
      withCredentials: this.configuration.withCredentials,
      headers: localVarHeaders,
      observe,
      transferCache: localVarTransferCache,
      reportProgress
    });
  }
  createDashboard(request, observe = "body", reportProgress = false, options) {
    if (request === null || request === void 0) {
      throw new Error("Required parameter request was null or undefined when calling createDashboard.");
    }
    let localVarHeaders = this.defaultHeaders;
    let localVarCredential;
    localVarCredential = this.configuration.lookupCredential("access_token");
    if (localVarCredential) {
      localVarHeaders = localVarHeaders.set("x-access-token", localVarCredential);
    }
    let localVarHttpHeaderAcceptSelected = options && options.httpHeaderAccept;
    if (localVarHttpHeaderAcceptSelected === void 0) {
      const httpHeaderAccepts = [
        "application/json"
      ];
      localVarHttpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
    }
    if (localVarHttpHeaderAcceptSelected !== void 0) {
      localVarHeaders = localVarHeaders.set("Accept", localVarHttpHeaderAcceptSelected);
    }
    let localVarHttpContext = options && options.context;
    if (localVarHttpContext === void 0) {
      localVarHttpContext = new HttpContext();
    }
    let localVarTransferCache = options && options.transferCache;
    if (localVarTransferCache === void 0) {
      localVarTransferCache = true;
    }
    const consumes = [
      "application/json"
    ];
    const httpContentTypeSelected = this.configuration.selectHeaderContentType(consumes);
    if (httpContentTypeSelected !== void 0) {
      localVarHeaders = localVarHeaders.set("Content-Type", httpContentTypeSelected);
    }
    let responseType_ = "json";
    if (localVarHttpHeaderAcceptSelected) {
      if (localVarHttpHeaderAcceptSelected.startsWith("text")) {
        responseType_ = "text";
      } else if (this.configuration.isJsonMime(localVarHttpHeaderAcceptSelected)) {
        responseType_ = "json";
      } else {
        responseType_ = "blob";
      }
    }
    let localVarPath = `/entities/dashboards`;
    return this.httpClient.request("post", `${this.configuration.basePath}${localVarPath}`, {
      context: localVarHttpContext,
      body: request,
      responseType: responseType_,
      withCredentials: this.configuration.withCredentials,
      headers: localVarHeaders,
      observe,
      transferCache: localVarTransferCache,
      reportProgress
    });
  }
  createDashboardTemplate(request, observe = "body", reportProgress = false, options) {
    if (request === null || request === void 0) {
      throw new Error("Required parameter request was null or undefined when calling createDashboardTemplate.");
    }
    let localVarHeaders = this.defaultHeaders;
    let localVarCredential;
    localVarCredential = this.configuration.lookupCredential("access_token");
    if (localVarCredential) {
      localVarHeaders = localVarHeaders.set("x-access-token", localVarCredential);
    }
    let localVarHttpHeaderAcceptSelected = options && options.httpHeaderAccept;
    if (localVarHttpHeaderAcceptSelected === void 0) {
      const httpHeaderAccepts = [
        "application/json"
      ];
      localVarHttpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
    }
    if (localVarHttpHeaderAcceptSelected !== void 0) {
      localVarHeaders = localVarHeaders.set("Accept", localVarHttpHeaderAcceptSelected);
    }
    let localVarHttpContext = options && options.context;
    if (localVarHttpContext === void 0) {
      localVarHttpContext = new HttpContext();
    }
    let localVarTransferCache = options && options.transferCache;
    if (localVarTransferCache === void 0) {
      localVarTransferCache = true;
    }
    const consumes = [
      "application/json"
    ];
    const httpContentTypeSelected = this.configuration.selectHeaderContentType(consumes);
    if (httpContentTypeSelected !== void 0) {
      localVarHeaders = localVarHeaders.set("Content-Type", httpContentTypeSelected);
    }
    let responseType_ = "json";
    if (localVarHttpHeaderAcceptSelected) {
      if (localVarHttpHeaderAcceptSelected.startsWith("text")) {
        responseType_ = "text";
      } else if (this.configuration.isJsonMime(localVarHttpHeaderAcceptSelected)) {
        responseType_ = "json";
      } else {
        responseType_ = "blob";
      }
    }
    let localVarPath = `/entities/dashboardtemplates`;
    return this.httpClient.request("post", `${this.configuration.basePath}${localVarPath}`, {
      context: localVarHttpContext,
      body: request,
      responseType: responseType_,
      withCredentials: this.configuration.withCredentials,
      headers: localVarHeaders,
      observe,
      transferCache: localVarTransferCache,
      reportProgress
    });
  }
  createDevice(request, observe = "body", reportProgress = false, options) {
    if (request === null || request === void 0) {
      throw new Error("Required parameter request was null or undefined when calling createDevice.");
    }
    let localVarHeaders = this.defaultHeaders;
    let localVarCredential;
    localVarCredential = this.configuration.lookupCredential("access_token");
    if (localVarCredential) {
      localVarHeaders = localVarHeaders.set("x-access-token", localVarCredential);
    }
    let localVarHttpHeaderAcceptSelected = options && options.httpHeaderAccept;
    if (localVarHttpHeaderAcceptSelected === void 0) {
      const httpHeaderAccepts = [
        "application/json"
      ];
      localVarHttpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
    }
    if (localVarHttpHeaderAcceptSelected !== void 0) {
      localVarHeaders = localVarHeaders.set("Accept", localVarHttpHeaderAcceptSelected);
    }
    let localVarHttpContext = options && options.context;
    if (localVarHttpContext === void 0) {
      localVarHttpContext = new HttpContext();
    }
    let localVarTransferCache = options && options.transferCache;
    if (localVarTransferCache === void 0) {
      localVarTransferCache = true;
    }
    const consumes = [
      "application/json"
    ];
    const httpContentTypeSelected = this.configuration.selectHeaderContentType(consumes);
    if (httpContentTypeSelected !== void 0) {
      localVarHeaders = localVarHeaders.set("Content-Type", httpContentTypeSelected);
    }
    let responseType_ = "json";
    if (localVarHttpHeaderAcceptSelected) {
      if (localVarHttpHeaderAcceptSelected.startsWith("text")) {
        responseType_ = "text";
      } else if (this.configuration.isJsonMime(localVarHttpHeaderAcceptSelected)) {
        responseType_ = "json";
      } else {
        responseType_ = "blob";
      }
    }
    let localVarPath = `/entities/devices`;
    return this.httpClient.request("post", `${this.configuration.basePath}${localVarPath}`, {
      context: localVarHttpContext,
      body: request,
      responseType: responseType_,
      withCredentials: this.configuration.withCredentials,
      headers: localVarHeaders,
      observe,
      transferCache: localVarTransferCache,
      reportProgress
    });
  }
  createDeviceConfigProfile(request, observe = "body", reportProgress = false, options) {
    if (request === null || request === void 0) {
      throw new Error("Required parameter request was null or undefined when calling createDeviceConfigProfile.");
    }
    let localVarHeaders = this.defaultHeaders;
    let localVarCredential;
    localVarCredential = this.configuration.lookupCredential("access_token");
    if (localVarCredential) {
      localVarHeaders = localVarHeaders.set("x-access-token", localVarCredential);
    }
    let localVarHttpHeaderAcceptSelected = options && options.httpHeaderAccept;
    if (localVarHttpHeaderAcceptSelected === void 0) {
      const httpHeaderAccepts = [
        "application/json"
      ];
      localVarHttpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
    }
    if (localVarHttpHeaderAcceptSelected !== void 0) {
      localVarHeaders = localVarHeaders.set("Accept", localVarHttpHeaderAcceptSelected);
    }
    let localVarHttpContext = options && options.context;
    if (localVarHttpContext === void 0) {
      localVarHttpContext = new HttpContext();
    }
    let localVarTransferCache = options && options.transferCache;
    if (localVarTransferCache === void 0) {
      localVarTransferCache = true;
    }
    const consumes = [
      "application/json"
    ];
    const httpContentTypeSelected = this.configuration.selectHeaderContentType(consumes);
    if (httpContentTypeSelected !== void 0) {
      localVarHeaders = localVarHeaders.set("Content-Type", httpContentTypeSelected);
    }
    let responseType_ = "json";
    if (localVarHttpHeaderAcceptSelected) {
      if (localVarHttpHeaderAcceptSelected.startsWith("text")) {
        responseType_ = "text";
      } else if (this.configuration.isJsonMime(localVarHttpHeaderAcceptSelected)) {
        responseType_ = "json";
      } else {
        responseType_ = "blob";
      }
    }
    let localVarPath = `/entities/deviceconfigprofiles`;
    return this.httpClient.request("post", `${this.configuration.basePath}${localVarPath}`, {
      context: localVarHttpContext,
      body: request,
      responseType: responseType_,
      withCredentials: this.configuration.withCredentials,
      headers: localVarHeaders,
      observe,
      transferCache: localVarTransferCache,
      reportProgress
    });
  }
  createDeviceProvider(request, observe = "body", reportProgress = false, options) {
    if (request === null || request === void 0) {
      throw new Error("Required parameter request was null or undefined when calling createDeviceProvider.");
    }
    let localVarHeaders = this.defaultHeaders;
    let localVarCredential;
    localVarCredential = this.configuration.lookupCredential("access_token");
    if (localVarCredential) {
      localVarHeaders = localVarHeaders.set("x-access-token", localVarCredential);
    }
    let localVarHttpHeaderAcceptSelected = options && options.httpHeaderAccept;
    if (localVarHttpHeaderAcceptSelected === void 0) {
      const httpHeaderAccepts = [
        "application/json"
      ];
      localVarHttpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
    }
    if (localVarHttpHeaderAcceptSelected !== void 0) {
      localVarHeaders = localVarHeaders.set("Accept", localVarHttpHeaderAcceptSelected);
    }
    let localVarHttpContext = options && options.context;
    if (localVarHttpContext === void 0) {
      localVarHttpContext = new HttpContext();
    }
    let localVarTransferCache = options && options.transferCache;
    if (localVarTransferCache === void 0) {
      localVarTransferCache = true;
    }
    const consumes = [
      "application/json"
    ];
    const httpContentTypeSelected = this.configuration.selectHeaderContentType(consumes);
    if (httpContentTypeSelected !== void 0) {
      localVarHeaders = localVarHeaders.set("Content-Type", httpContentTypeSelected);
    }
    let responseType_ = "json";
    if (localVarHttpHeaderAcceptSelected) {
      if (localVarHttpHeaderAcceptSelected.startsWith("text")) {
        responseType_ = "text";
      } else if (this.configuration.isJsonMime(localVarHttpHeaderAcceptSelected)) {
        responseType_ = "json";
      } else {
        responseType_ = "blob";
      }
    }
    let localVarPath = `/entities/deviceproviders`;
    return this.httpClient.request("post", `${this.configuration.basePath}${localVarPath}`, {
      context: localVarHttpContext,
      body: request,
      responseType: responseType_,
      withCredentials: this.configuration.withCredentials,
      headers: localVarHeaders,
      observe,
      transferCache: localVarTransferCache,
      reportProgress
    });
  }
  createDeviceType(request, observe = "body", reportProgress = false, options) {
    if (request === null || request === void 0) {
      throw new Error("Required parameter request was null or undefined when calling createDeviceType.");
    }
    let localVarHeaders = this.defaultHeaders;
    let localVarCredential;
    localVarCredential = this.configuration.lookupCredential("access_token");
    if (localVarCredential) {
      localVarHeaders = localVarHeaders.set("x-access-token", localVarCredential);
    }
    let localVarHttpHeaderAcceptSelected = options && options.httpHeaderAccept;
    if (localVarHttpHeaderAcceptSelected === void 0) {
      const httpHeaderAccepts = [
        "application/json"
      ];
      localVarHttpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
    }
    if (localVarHttpHeaderAcceptSelected !== void 0) {
      localVarHeaders = localVarHeaders.set("Accept", localVarHttpHeaderAcceptSelected);
    }
    let localVarHttpContext = options && options.context;
    if (localVarHttpContext === void 0) {
      localVarHttpContext = new HttpContext();
    }
    let localVarTransferCache = options && options.transferCache;
    if (localVarTransferCache === void 0) {
      localVarTransferCache = true;
    }
    const consumes = [
      "application/json"
    ];
    const httpContentTypeSelected = this.configuration.selectHeaderContentType(consumes);
    if (httpContentTypeSelected !== void 0) {
      localVarHeaders = localVarHeaders.set("Content-Type", httpContentTypeSelected);
    }
    let responseType_ = "json";
    if (localVarHttpHeaderAcceptSelected) {
      if (localVarHttpHeaderAcceptSelected.startsWith("text")) {
        responseType_ = "text";
      } else if (this.configuration.isJsonMime(localVarHttpHeaderAcceptSelected)) {
        responseType_ = "json";
      } else {
        responseType_ = "blob";
      }
    }
    let localVarPath = `/entities/devicetypes`;
    return this.httpClient.request("post", `${this.configuration.basePath}${localVarPath}`, {
      context: localVarHttpContext,
      body: request,
      responseType: responseType_,
      withCredentials: this.configuration.withCredentials,
      headers: localVarHeaders,
      observe,
      transferCache: localVarTransferCache,
      reportProgress
    });
  }
  createEmailProvider(request, observe = "body", reportProgress = false, options) {
    if (request === null || request === void 0) {
      throw new Error("Required parameter request was null or undefined when calling createEmailProvider.");
    }
    let localVarHeaders = this.defaultHeaders;
    let localVarCredential;
    localVarCredential = this.configuration.lookupCredential("access_token");
    if (localVarCredential) {
      localVarHeaders = localVarHeaders.set("x-access-token", localVarCredential);
    }
    let localVarHttpHeaderAcceptSelected = options && options.httpHeaderAccept;
    if (localVarHttpHeaderAcceptSelected === void 0) {
      const httpHeaderAccepts = [
        "application/json"
      ];
      localVarHttpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
    }
    if (localVarHttpHeaderAcceptSelected !== void 0) {
      localVarHeaders = localVarHeaders.set("Accept", localVarHttpHeaderAcceptSelected);
    }
    let localVarHttpContext = options && options.context;
    if (localVarHttpContext === void 0) {
      localVarHttpContext = new HttpContext();
    }
    let localVarTransferCache = options && options.transferCache;
    if (localVarTransferCache === void 0) {
      localVarTransferCache = true;
    }
    const consumes = [
      "application/json"
    ];
    const httpContentTypeSelected = this.configuration.selectHeaderContentType(consumes);
    if (httpContentTypeSelected !== void 0) {
      localVarHeaders = localVarHeaders.set("Content-Type", httpContentTypeSelected);
    }
    let responseType_ = "json";
    if (localVarHttpHeaderAcceptSelected) {
      if (localVarHttpHeaderAcceptSelected.startsWith("text")) {
        responseType_ = "text";
      } else if (this.configuration.isJsonMime(localVarHttpHeaderAcceptSelected)) {
        responseType_ = "json";
      } else {
        responseType_ = "blob";
      }
    }
    let localVarPath = `/entities/emailproviders`;
    return this.httpClient.request("post", `${this.configuration.basePath}${localVarPath}`, {
      context: localVarHttpContext,
      body: request,
      responseType: responseType_,
      withCredentials: this.configuration.withCredentials,
      headers: localVarHeaders,
      observe,
      transferCache: localVarTransferCache,
      reportProgress
    });
  }
  createExportTask(request, observe = "body", reportProgress = false, options) {
    if (request === null || request === void 0) {
      throw new Error("Required parameter request was null or undefined when calling createExportTask.");
    }
    let localVarHeaders = this.defaultHeaders;
    let localVarCredential;
    localVarCredential = this.configuration.lookupCredential("access_token");
    if (localVarCredential) {
      localVarHeaders = localVarHeaders.set("x-access-token", localVarCredential);
    }
    let localVarHttpHeaderAcceptSelected = options && options.httpHeaderAccept;
    if (localVarHttpHeaderAcceptSelected === void 0) {
      const httpHeaderAccepts = [
        "application/json"
      ];
      localVarHttpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
    }
    if (localVarHttpHeaderAcceptSelected !== void 0) {
      localVarHeaders = localVarHeaders.set("Accept", localVarHttpHeaderAcceptSelected);
    }
    let localVarHttpContext = options && options.context;
    if (localVarHttpContext === void 0) {
      localVarHttpContext = new HttpContext();
    }
    let localVarTransferCache = options && options.transferCache;
    if (localVarTransferCache === void 0) {
      localVarTransferCache = true;
    }
    const consumes = [
      "application/json"
    ];
    const httpContentTypeSelected = this.configuration.selectHeaderContentType(consumes);
    if (httpContentTypeSelected !== void 0) {
      localVarHeaders = localVarHeaders.set("Content-Type", httpContentTypeSelected);
    }
    let responseType_ = "json";
    if (localVarHttpHeaderAcceptSelected) {
      if (localVarHttpHeaderAcceptSelected.startsWith("text")) {
        responseType_ = "text";
      } else if (this.configuration.isJsonMime(localVarHttpHeaderAcceptSelected)) {
        responseType_ = "json";
      } else {
        responseType_ = "blob";
      }
    }
    let localVarPath = `/entities/exporttasks`;
    return this.httpClient.request("post", `${this.configuration.basePath}${localVarPath}`, {
      context: localVarHttpContext,
      body: request,
      responseType: responseType_,
      withCredentials: this.configuration.withCredentials,
      headers: localVarHeaders,
      observe,
      transferCache: localVarTransferCache,
      reportProgress
    });
  }
  createFuelCard(request, observe = "body", reportProgress = false, options) {
    if (request === null || request === void 0) {
      throw new Error("Required parameter request was null or undefined when calling createFuelCard.");
    }
    let localVarHeaders = this.defaultHeaders;
    let localVarCredential;
    localVarCredential = this.configuration.lookupCredential("access_token");
    if (localVarCredential) {
      localVarHeaders = localVarHeaders.set("x-access-token", localVarCredential);
    }
    let localVarHttpHeaderAcceptSelected = options && options.httpHeaderAccept;
    if (localVarHttpHeaderAcceptSelected === void 0) {
      const httpHeaderAccepts = [
        "application/json"
      ];
      localVarHttpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
    }
    if (localVarHttpHeaderAcceptSelected !== void 0) {
      localVarHeaders = localVarHeaders.set("Accept", localVarHttpHeaderAcceptSelected);
    }
    let localVarHttpContext = options && options.context;
    if (localVarHttpContext === void 0) {
      localVarHttpContext = new HttpContext();
    }
    let localVarTransferCache = options && options.transferCache;
    if (localVarTransferCache === void 0) {
      localVarTransferCache = true;
    }
    const consumes = [
      "application/json"
    ];
    const httpContentTypeSelected = this.configuration.selectHeaderContentType(consumes);
    if (httpContentTypeSelected !== void 0) {
      localVarHeaders = localVarHeaders.set("Content-Type", httpContentTypeSelected);
    }
    let responseType_ = "json";
    if (localVarHttpHeaderAcceptSelected) {
      if (localVarHttpHeaderAcceptSelected.startsWith("text")) {
        responseType_ = "text";
      } else if (this.configuration.isJsonMime(localVarHttpHeaderAcceptSelected)) {
        responseType_ = "json";
      } else {
        responseType_ = "blob";
      }
    }
    let localVarPath = `/entities/fuelcards`;
    return this.httpClient.request("post", `${this.configuration.basePath}${localVarPath}`, {
      context: localVarHttpContext,
      body: request,
      responseType: responseType_,
      withCredentials: this.configuration.withCredentials,
      headers: localVarHeaders,
      observe,
      transferCache: localVarTransferCache,
      reportProgress
    });
  }
  createGeoLockProfile(request, observe = "body", reportProgress = false, options) {
    if (request === null || request === void 0) {
      throw new Error("Required parameter request was null or undefined when calling createGeoLockProfile.");
    }
    let localVarHeaders = this.defaultHeaders;
    let localVarCredential;
    localVarCredential = this.configuration.lookupCredential("access_token");
    if (localVarCredential) {
      localVarHeaders = localVarHeaders.set("x-access-token", localVarCredential);
    }
    let localVarHttpHeaderAcceptSelected = options && options.httpHeaderAccept;
    if (localVarHttpHeaderAcceptSelected === void 0) {
      const httpHeaderAccepts = [
        "application/json"
      ];
      localVarHttpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
    }
    if (localVarHttpHeaderAcceptSelected !== void 0) {
      localVarHeaders = localVarHeaders.set("Accept", localVarHttpHeaderAcceptSelected);
    }
    let localVarHttpContext = options && options.context;
    if (localVarHttpContext === void 0) {
      localVarHttpContext = new HttpContext();
    }
    let localVarTransferCache = options && options.transferCache;
    if (localVarTransferCache === void 0) {
      localVarTransferCache = true;
    }
    const consumes = [
      "application/json"
    ];
    const httpContentTypeSelected = this.configuration.selectHeaderContentType(consumes);
    if (httpContentTypeSelected !== void 0) {
      localVarHeaders = localVarHeaders.set("Content-Type", httpContentTypeSelected);
    }
    let responseType_ = "json";
    if (localVarHttpHeaderAcceptSelected) {
      if (localVarHttpHeaderAcceptSelected.startsWith("text")) {
        responseType_ = "text";
      } else if (this.configuration.isJsonMime(localVarHttpHeaderAcceptSelected)) {
        responseType_ = "json";
      } else {
        responseType_ = "blob";
      }
    }
    let localVarPath = `/entities/geolockprofiles`;
    return this.httpClient.request("post", `${this.configuration.basePath}${localVarPath}`, {
      context: localVarHttpContext,
      body: request,
      responseType: responseType_,
      withCredentials: this.configuration.withCredentials,
      headers: localVarHeaders,
      observe,
      transferCache: localVarTransferCache,
      reportProgress
    });
  }
  createIoType(request, observe = "body", reportProgress = false, options) {
    if (request === null || request === void 0) {
      throw new Error("Required parameter request was null or undefined when calling createIoType.");
    }
    let localVarHeaders = this.defaultHeaders;
    let localVarCredential;
    localVarCredential = this.configuration.lookupCredential("access_token");
    if (localVarCredential) {
      localVarHeaders = localVarHeaders.set("x-access-token", localVarCredential);
    }
    let localVarHttpHeaderAcceptSelected = options && options.httpHeaderAccept;
    if (localVarHttpHeaderAcceptSelected === void 0) {
      const httpHeaderAccepts = [
        "application/json"
      ];
      localVarHttpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
    }
    if (localVarHttpHeaderAcceptSelected !== void 0) {
      localVarHeaders = localVarHeaders.set("Accept", localVarHttpHeaderAcceptSelected);
    }
    let localVarHttpContext = options && options.context;
    if (localVarHttpContext === void 0) {
      localVarHttpContext = new HttpContext();
    }
    let localVarTransferCache = options && options.transferCache;
    if (localVarTransferCache === void 0) {
      localVarTransferCache = true;
    }
    const consumes = [
      "application/json"
    ];
    const httpContentTypeSelected = this.configuration.selectHeaderContentType(consumes);
    if (httpContentTypeSelected !== void 0) {
      localVarHeaders = localVarHeaders.set("Content-Type", httpContentTypeSelected);
    }
    let responseType_ = "json";
    if (localVarHttpHeaderAcceptSelected) {
      if (localVarHttpHeaderAcceptSelected.startsWith("text")) {
        responseType_ = "text";
      } else if (this.configuration.isJsonMime(localVarHttpHeaderAcceptSelected)) {
        responseType_ = "json";
      } else {
        responseType_ = "blob";
      }
    }
    let localVarPath = `/entities/iotypes`;
    return this.httpClient.request("post", `${this.configuration.basePath}${localVarPath}`, {
      context: localVarHttpContext,
      body: request,
      responseType: responseType_,
      withCredentials: this.configuration.withCredentials,
      headers: localVarHeaders,
      observe,
      transferCache: localVarTransferCache,
      reportProgress
    });
  }
  createLabel(request, observe = "body", reportProgress = false, options) {
    if (request === null || request === void 0) {
      throw new Error("Required parameter request was null or undefined when calling createLabel.");
    }
    let localVarHeaders = this.defaultHeaders;
    let localVarCredential;
    localVarCredential = this.configuration.lookupCredential("access_token");
    if (localVarCredential) {
      localVarHeaders = localVarHeaders.set("x-access-token", localVarCredential);
    }
    let localVarHttpHeaderAcceptSelected = options && options.httpHeaderAccept;
    if (localVarHttpHeaderAcceptSelected === void 0) {
      const httpHeaderAccepts = [
        "application/json"
      ];
      localVarHttpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
    }
    if (localVarHttpHeaderAcceptSelected !== void 0) {
      localVarHeaders = localVarHeaders.set("Accept", localVarHttpHeaderAcceptSelected);
    }
    let localVarHttpContext = options && options.context;
    if (localVarHttpContext === void 0) {
      localVarHttpContext = new HttpContext();
    }
    let localVarTransferCache = options && options.transferCache;
    if (localVarTransferCache === void 0) {
      localVarTransferCache = true;
    }
    const consumes = [
      "application/json"
    ];
    const httpContentTypeSelected = this.configuration.selectHeaderContentType(consumes);
    if (httpContentTypeSelected !== void 0) {
      localVarHeaders = localVarHeaders.set("Content-Type", httpContentTypeSelected);
    }
    let responseType_ = "json";
    if (localVarHttpHeaderAcceptSelected) {
      if (localVarHttpHeaderAcceptSelected.startsWith("text")) {
        responseType_ = "text";
      } else if (this.configuration.isJsonMime(localVarHttpHeaderAcceptSelected)) {
        responseType_ = "json";
      } else {
        responseType_ = "blob";
      }
    }
    let localVarPath = `/entities/labels`;
    return this.httpClient.request("post", `${this.configuration.basePath}${localVarPath}`, {
      context: localVarHttpContext,
      body: request,
      responseType: responseType_,
      withCredentials: this.configuration.withCredentials,
      headers: localVarHeaders,
      observe,
      transferCache: localVarTransferCache,
      reportProgress
    });
  }
  createMapSet(request, observe = "body", reportProgress = false, options) {
    if (request === null || request === void 0) {
      throw new Error("Required parameter request was null or undefined when calling createMapSet.");
    }
    let localVarHeaders = this.defaultHeaders;
    let localVarCredential;
    localVarCredential = this.configuration.lookupCredential("access_token");
    if (localVarCredential) {
      localVarHeaders = localVarHeaders.set("x-access-token", localVarCredential);
    }
    let localVarHttpHeaderAcceptSelected = options && options.httpHeaderAccept;
    if (localVarHttpHeaderAcceptSelected === void 0) {
      const httpHeaderAccepts = [
        "application/json"
      ];
      localVarHttpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
    }
    if (localVarHttpHeaderAcceptSelected !== void 0) {
      localVarHeaders = localVarHeaders.set("Accept", localVarHttpHeaderAcceptSelected);
    }
    let localVarHttpContext = options && options.context;
    if (localVarHttpContext === void 0) {
      localVarHttpContext = new HttpContext();
    }
    let localVarTransferCache = options && options.transferCache;
    if (localVarTransferCache === void 0) {
      localVarTransferCache = true;
    }
    const consumes = [
      "application/json"
    ];
    const httpContentTypeSelected = this.configuration.selectHeaderContentType(consumes);
    if (httpContentTypeSelected !== void 0) {
      localVarHeaders = localVarHeaders.set("Content-Type", httpContentTypeSelected);
    }
    let responseType_ = "json";
    if (localVarHttpHeaderAcceptSelected) {
      if (localVarHttpHeaderAcceptSelected.startsWith("text")) {
        responseType_ = "text";
      } else if (this.configuration.isJsonMime(localVarHttpHeaderAcceptSelected)) {
        responseType_ = "json";
      } else {
        responseType_ = "blob";
      }
    }
    let localVarPath = `/entities/mapsets`;
    return this.httpClient.request("post", `${this.configuration.basePath}${localVarPath}`, {
      context: localVarHttpContext,
      body: request,
      responseType: responseType_,
      withCredentials: this.configuration.withCredentials,
      headers: localVarHeaders,
      observe,
      transferCache: localVarTransferCache,
      reportProgress
    });
  }
  createOverspeedProfile(request, observe = "body", reportProgress = false, options) {
    if (request === null || request === void 0) {
      throw new Error("Required parameter request was null or undefined when calling createOverspeedProfile.");
    }
    let localVarHeaders = this.defaultHeaders;
    let localVarCredential;
    localVarCredential = this.configuration.lookupCredential("access_token");
    if (localVarCredential) {
      localVarHeaders = localVarHeaders.set("x-access-token", localVarCredential);
    }
    let localVarHttpHeaderAcceptSelected = options && options.httpHeaderAccept;
    if (localVarHttpHeaderAcceptSelected === void 0) {
      const httpHeaderAccepts = [
        "application/json"
      ];
      localVarHttpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
    }
    if (localVarHttpHeaderAcceptSelected !== void 0) {
      localVarHeaders = localVarHeaders.set("Accept", localVarHttpHeaderAcceptSelected);
    }
    let localVarHttpContext = options && options.context;
    if (localVarHttpContext === void 0) {
      localVarHttpContext = new HttpContext();
    }
    let localVarTransferCache = options && options.transferCache;
    if (localVarTransferCache === void 0) {
      localVarTransferCache = true;
    }
    const consumes = [
      "application/json"
    ];
    const httpContentTypeSelected = this.configuration.selectHeaderContentType(consumes);
    if (httpContentTypeSelected !== void 0) {
      localVarHeaders = localVarHeaders.set("Content-Type", httpContentTypeSelected);
    }
    let responseType_ = "json";
    if (localVarHttpHeaderAcceptSelected) {
      if (localVarHttpHeaderAcceptSelected.startsWith("text")) {
        responseType_ = "text";
      } else if (this.configuration.isJsonMime(localVarHttpHeaderAcceptSelected)) {
        responseType_ = "json";
      } else {
        responseType_ = "blob";
      }
    }
    let localVarPath = `/entities/overspeedprofiles`;
    return this.httpClient.request("post", `${this.configuration.basePath}${localVarPath}`, {
      context: localVarHttpContext,
      body: request,
      responseType: responseType_,
      withCredentials: this.configuration.withCredentials,
      headers: localVarHeaders,
      observe,
      transferCache: localVarTransferCache,
      reportProgress
    });
  }
  createReminder(request, observe = "body", reportProgress = false, options) {
    if (request === null || request === void 0) {
      throw new Error("Required parameter request was null or undefined when calling createReminder.");
    }
    let localVarHeaders = this.defaultHeaders;
    let localVarCredential;
    localVarCredential = this.configuration.lookupCredential("access_token");
    if (localVarCredential) {
      localVarHeaders = localVarHeaders.set("x-access-token", localVarCredential);
    }
    let localVarHttpHeaderAcceptSelected = options && options.httpHeaderAccept;
    if (localVarHttpHeaderAcceptSelected === void 0) {
      const httpHeaderAccepts = [
        "application/json"
      ];
      localVarHttpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
    }
    if (localVarHttpHeaderAcceptSelected !== void 0) {
      localVarHeaders = localVarHeaders.set("Accept", localVarHttpHeaderAcceptSelected);
    }
    let localVarHttpContext = options && options.context;
    if (localVarHttpContext === void 0) {
      localVarHttpContext = new HttpContext();
    }
    let localVarTransferCache = options && options.transferCache;
    if (localVarTransferCache === void 0) {
      localVarTransferCache = true;
    }
    const consumes = [
      "application/json"
    ];
    const httpContentTypeSelected = this.configuration.selectHeaderContentType(consumes);
    if (httpContentTypeSelected !== void 0) {
      localVarHeaders = localVarHeaders.set("Content-Type", httpContentTypeSelected);
    }
    let responseType_ = "json";
    if (localVarHttpHeaderAcceptSelected) {
      if (localVarHttpHeaderAcceptSelected.startsWith("text")) {
        responseType_ = "text";
      } else if (this.configuration.isJsonMime(localVarHttpHeaderAcceptSelected)) {
        responseType_ = "json";
      } else {
        responseType_ = "blob";
      }
    }
    let localVarPath = `/entities/reminders`;
    return this.httpClient.request("post", `${this.configuration.basePath}${localVarPath}`, {
      context: localVarHttpContext,
      body: request,
      responseType: responseType_,
      withCredentials: this.configuration.withCredentials,
      headers: localVarHeaders,
      observe,
      transferCache: localVarTransferCache,
      reportProgress
    });
  }
  createReportTemplate(request, observe = "body", reportProgress = false, options) {
    if (request === null || request === void 0) {
      throw new Error("Required parameter request was null or undefined when calling createReportTemplate.");
    }
    let localVarHeaders = this.defaultHeaders;
    let localVarCredential;
    localVarCredential = this.configuration.lookupCredential("access_token");
    if (localVarCredential) {
      localVarHeaders = localVarHeaders.set("x-access-token", localVarCredential);
    }
    let localVarHttpHeaderAcceptSelected = options && options.httpHeaderAccept;
    if (localVarHttpHeaderAcceptSelected === void 0) {
      const httpHeaderAccepts = [
        "application/json"
      ];
      localVarHttpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
    }
    if (localVarHttpHeaderAcceptSelected !== void 0) {
      localVarHeaders = localVarHeaders.set("Accept", localVarHttpHeaderAcceptSelected);
    }
    let localVarHttpContext = options && options.context;
    if (localVarHttpContext === void 0) {
      localVarHttpContext = new HttpContext();
    }
    let localVarTransferCache = options && options.transferCache;
    if (localVarTransferCache === void 0) {
      localVarTransferCache = true;
    }
    const consumes = [
      "application/json"
    ];
    const httpContentTypeSelected = this.configuration.selectHeaderContentType(consumes);
    if (httpContentTypeSelected !== void 0) {
      localVarHeaders = localVarHeaders.set("Content-Type", httpContentTypeSelected);
    }
    let responseType_ = "json";
    if (localVarHttpHeaderAcceptSelected) {
      if (localVarHttpHeaderAcceptSelected.startsWith("text")) {
        responseType_ = "text";
      } else if (this.configuration.isJsonMime(localVarHttpHeaderAcceptSelected)) {
        responseType_ = "json";
      } else {
        responseType_ = "blob";
      }
    }
    let localVarPath = `/entities/reporttemplates`;
    return this.httpClient.request("post", `${this.configuration.basePath}${localVarPath}`, {
      context: localVarHttpContext,
      body: request,
      responseType: responseType_,
      withCredentials: this.configuration.withCredentials,
      headers: localVarHeaders,
      observe,
      transferCache: localVarTransferCache,
      reportProgress
    });
  }
  createRoadProfile(request, observe = "body", reportProgress = false, options) {
    if (request === null || request === void 0) {
      throw new Error("Required parameter request was null or undefined when calling createRoadProfile.");
    }
    let localVarHeaders = this.defaultHeaders;
    let localVarCredential;
    localVarCredential = this.configuration.lookupCredential("access_token");
    if (localVarCredential) {
      localVarHeaders = localVarHeaders.set("x-access-token", localVarCredential);
    }
    let localVarHttpHeaderAcceptSelected = options && options.httpHeaderAccept;
    if (localVarHttpHeaderAcceptSelected === void 0) {
      const httpHeaderAccepts = [
        "application/json"
      ];
      localVarHttpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
    }
    if (localVarHttpHeaderAcceptSelected !== void 0) {
      localVarHeaders = localVarHeaders.set("Accept", localVarHttpHeaderAcceptSelected);
    }
    let localVarHttpContext = options && options.context;
    if (localVarHttpContext === void 0) {
      localVarHttpContext = new HttpContext();
    }
    let localVarTransferCache = options && options.transferCache;
    if (localVarTransferCache === void 0) {
      localVarTransferCache = true;
    }
    const consumes = [
      "application/json"
    ];
    const httpContentTypeSelected = this.configuration.selectHeaderContentType(consumes);
    if (httpContentTypeSelected !== void 0) {
      localVarHeaders = localVarHeaders.set("Content-Type", httpContentTypeSelected);
    }
    let responseType_ = "json";
    if (localVarHttpHeaderAcceptSelected) {
      if (localVarHttpHeaderAcceptSelected.startsWith("text")) {
        responseType_ = "text";
      } else if (this.configuration.isJsonMime(localVarHttpHeaderAcceptSelected)) {
        responseType_ = "json";
      } else {
        responseType_ = "blob";
      }
    }
    let localVarPath = `/entities/roadprofiles`;
    return this.httpClient.request("post", `${this.configuration.basePath}${localVarPath}`, {
      context: localVarHttpContext,
      body: request,
      responseType: responseType_,
      withCredentials: this.configuration.withCredentials,
      headers: localVarHeaders,
      observe,
      transferCache: localVarTransferCache,
      reportProgress
    });
  }
  createScheduledReport(request, observe = "body", reportProgress = false, options) {
    if (request === null || request === void 0) {
      throw new Error("Required parameter request was null or undefined when calling createScheduledReport.");
    }
    let localVarHeaders = this.defaultHeaders;
    let localVarCredential;
    localVarCredential = this.configuration.lookupCredential("access_token");
    if (localVarCredential) {
      localVarHeaders = localVarHeaders.set("x-access-token", localVarCredential);
    }
    let localVarHttpHeaderAcceptSelected = options && options.httpHeaderAccept;
    if (localVarHttpHeaderAcceptSelected === void 0) {
      const httpHeaderAccepts = [
        "application/json"
      ];
      localVarHttpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
    }
    if (localVarHttpHeaderAcceptSelected !== void 0) {
      localVarHeaders = localVarHeaders.set("Accept", localVarHttpHeaderAcceptSelected);
    }
    let localVarHttpContext = options && options.context;
    if (localVarHttpContext === void 0) {
      localVarHttpContext = new HttpContext();
    }
    let localVarTransferCache = options && options.transferCache;
    if (localVarTransferCache === void 0) {
      localVarTransferCache = true;
    }
    const consumes = [
      "application/json"
    ];
    const httpContentTypeSelected = this.configuration.selectHeaderContentType(consumes);
    if (httpContentTypeSelected !== void 0) {
      localVarHeaders = localVarHeaders.set("Content-Type", httpContentTypeSelected);
    }
    let responseType_ = "json";
    if (localVarHttpHeaderAcceptSelected) {
      if (localVarHttpHeaderAcceptSelected.startsWith("text")) {
        responseType_ = "text";
      } else if (this.configuration.isJsonMime(localVarHttpHeaderAcceptSelected)) {
        responseType_ = "json";
      } else {
        responseType_ = "blob";
      }
    }
    let localVarPath = `/entities/scheduledreports`;
    return this.httpClient.request("post", `${this.configuration.basePath}${localVarPath}`, {
      context: localVarHttpContext,
      body: request,
      responseType: responseType_,
      withCredentials: this.configuration.withCredentials,
      headers: localVarHeaders,
      observe,
      transferCache: localVarTransferCache,
      reportProgress
    });
  }
  createSharedAssetLocationToken(id, request, observe = "body", reportProgress = false, options) {
    if (id === null || id === void 0) {
      throw new Error("Required parameter id was null or undefined when calling createSharedAssetLocationToken.");
    }
    if (request === null || request === void 0) {
      throw new Error("Required parameter request was null or undefined when calling createSharedAssetLocationToken.");
    }
    let localVarHeaders = this.defaultHeaders;
    let localVarCredential;
    localVarCredential = this.configuration.lookupCredential("access_token");
    if (localVarCredential) {
      localVarHeaders = localVarHeaders.set("x-access-token", localVarCredential);
    }
    let localVarHttpHeaderAcceptSelected = options && options.httpHeaderAccept;
    if (localVarHttpHeaderAcceptSelected === void 0) {
      const httpHeaderAccepts = [
        "application/json"
      ];
      localVarHttpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
    }
    if (localVarHttpHeaderAcceptSelected !== void 0) {
      localVarHeaders = localVarHeaders.set("Accept", localVarHttpHeaderAcceptSelected);
    }
    let localVarHttpContext = options && options.context;
    if (localVarHttpContext === void 0) {
      localVarHttpContext = new HttpContext();
    }
    let localVarTransferCache = options && options.transferCache;
    if (localVarTransferCache === void 0) {
      localVarTransferCache = true;
    }
    const consumes = [
      "application/json"
    ];
    const httpContentTypeSelected = this.configuration.selectHeaderContentType(consumes);
    if (httpContentTypeSelected !== void 0) {
      localVarHeaders = localVarHeaders.set("Content-Type", httpContentTypeSelected);
    }
    let responseType_ = "json";
    if (localVarHttpHeaderAcceptSelected) {
      if (localVarHttpHeaderAcceptSelected.startsWith("text")) {
        responseType_ = "text";
      } else if (this.configuration.isJsonMime(localVarHttpHeaderAcceptSelected)) {
        responseType_ = "json";
      } else {
        responseType_ = "blob";
      }
    }
    let localVarPath = `/entities/assets/shared/location/${this.configuration.encodeParam({ name: "id", value: id, in: "path", style: "simple", explode: false, dataType: "string", dataFormat: void 0 })}`;
    return this.httpClient.request("post", `${this.configuration.basePath}${localVarPath}`, {
      context: localVarHttpContext,
      body: request,
      responseType: responseType_,
      withCredentials: this.configuration.withCredentials,
      headers: localVarHeaders,
      observe,
      transferCache: localVarTransferCache,
      reportProgress
    });
  }
  createSimCard(request, observe = "body", reportProgress = false, options) {
    if (request === null || request === void 0) {
      throw new Error("Required parameter request was null or undefined when calling createSimCard.");
    }
    let localVarHeaders = this.defaultHeaders;
    let localVarCredential;
    localVarCredential = this.configuration.lookupCredential("access_token");
    if (localVarCredential) {
      localVarHeaders = localVarHeaders.set("x-access-token", localVarCredential);
    }
    let localVarHttpHeaderAcceptSelected = options && options.httpHeaderAccept;
    if (localVarHttpHeaderAcceptSelected === void 0) {
      const httpHeaderAccepts = [
        "application/json"
      ];
      localVarHttpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
    }
    if (localVarHttpHeaderAcceptSelected !== void 0) {
      localVarHeaders = localVarHeaders.set("Accept", localVarHttpHeaderAcceptSelected);
    }
    let localVarHttpContext = options && options.context;
    if (localVarHttpContext === void 0) {
      localVarHttpContext = new HttpContext();
    }
    let localVarTransferCache = options && options.transferCache;
    if (localVarTransferCache === void 0) {
      localVarTransferCache = true;
    }
    const consumes = [
      "application/json"
    ];
    const httpContentTypeSelected = this.configuration.selectHeaderContentType(consumes);
    if (httpContentTypeSelected !== void 0) {
      localVarHeaders = localVarHeaders.set("Content-Type", httpContentTypeSelected);
    }
    let responseType_ = "json";
    if (localVarHttpHeaderAcceptSelected) {
      if (localVarHttpHeaderAcceptSelected.startsWith("text")) {
        responseType_ = "text";
      } else if (this.configuration.isJsonMime(localVarHttpHeaderAcceptSelected)) {
        responseType_ = "json";
      } else {
        responseType_ = "blob";
      }
    }
    let localVarPath = `/entities/simcards`;
    return this.httpClient.request("post", `${this.configuration.basePath}${localVarPath}`, {
      context: localVarHttpContext,
      body: request,
      responseType: responseType_,
      withCredentials: this.configuration.withCredentials,
      headers: localVarHeaders,
      observe,
      transferCache: localVarTransferCache,
      reportProgress
    });
  }
  createSmsGatewayProvider(request, observe = "body", reportProgress = false, options) {
    if (request === null || request === void 0) {
      throw new Error("Required parameter request was null or undefined when calling createSmsGatewayProvider.");
    }
    let localVarHeaders = this.defaultHeaders;
    let localVarCredential;
    localVarCredential = this.configuration.lookupCredential("access_token");
    if (localVarCredential) {
      localVarHeaders = localVarHeaders.set("x-access-token", localVarCredential);
    }
    let localVarHttpHeaderAcceptSelected = options && options.httpHeaderAccept;
    if (localVarHttpHeaderAcceptSelected === void 0) {
      const httpHeaderAccepts = [
        "application/json"
      ];
      localVarHttpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
    }
    if (localVarHttpHeaderAcceptSelected !== void 0) {
      localVarHeaders = localVarHeaders.set("Accept", localVarHttpHeaderAcceptSelected);
    }
    let localVarHttpContext = options && options.context;
    if (localVarHttpContext === void 0) {
      localVarHttpContext = new HttpContext();
    }
    let localVarTransferCache = options && options.transferCache;
    if (localVarTransferCache === void 0) {
      localVarTransferCache = true;
    }
    const consumes = [
      "application/json"
    ];
    const httpContentTypeSelected = this.configuration.selectHeaderContentType(consumes);
    if (httpContentTypeSelected !== void 0) {
      localVarHeaders = localVarHeaders.set("Content-Type", httpContentTypeSelected);
    }
    let responseType_ = "json";
    if (localVarHttpHeaderAcceptSelected) {
      if (localVarHttpHeaderAcceptSelected.startsWith("text")) {
        responseType_ = "text";
      } else if (this.configuration.isJsonMime(localVarHttpHeaderAcceptSelected)) {
        responseType_ = "json";
      } else {
        responseType_ = "blob";
      }
    }
    let localVarPath = `/entities/smsgatewayproviders`;
    return this.httpClient.request("post", `${this.configuration.basePath}${localVarPath}`, {
      context: localVarHttpContext,
      body: request,
      responseType: responseType_,
      withCredentials: this.configuration.withCredentials,
      headers: localVarHeaders,
      observe,
      transferCache: localVarTransferCache,
      reportProgress
    });
  }
  createSslCertificate(request, observe = "body", reportProgress = false, options) {
    if (request === null || request === void 0) {
      throw new Error("Required parameter request was null or undefined when calling createSslCertificate.");
    }
    let localVarHeaders = this.defaultHeaders;
    let localVarCredential;
    localVarCredential = this.configuration.lookupCredential("access_token");
    if (localVarCredential) {
      localVarHeaders = localVarHeaders.set("x-access-token", localVarCredential);
    }
    let localVarHttpHeaderAcceptSelected = options && options.httpHeaderAccept;
    if (localVarHttpHeaderAcceptSelected === void 0) {
      const httpHeaderAccepts = [
        "application/json"
      ];
      localVarHttpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
    }
    if (localVarHttpHeaderAcceptSelected !== void 0) {
      localVarHeaders = localVarHeaders.set("Accept", localVarHttpHeaderAcceptSelected);
    }
    let localVarHttpContext = options && options.context;
    if (localVarHttpContext === void 0) {
      localVarHttpContext = new HttpContext();
    }
    let localVarTransferCache = options && options.transferCache;
    if (localVarTransferCache === void 0) {
      localVarTransferCache = true;
    }
    const consumes = [
      "application/json"
    ];
    const httpContentTypeSelected = this.configuration.selectHeaderContentType(consumes);
    if (httpContentTypeSelected !== void 0) {
      localVarHeaders = localVarHeaders.set("Content-Type", httpContentTypeSelected);
    }
    let responseType_ = "json";
    if (localVarHttpHeaderAcceptSelected) {
      if (localVarHttpHeaderAcceptSelected.startsWith("text")) {
        responseType_ = "text";
      } else if (this.configuration.isJsonMime(localVarHttpHeaderAcceptSelected)) {
        responseType_ = "json";
      } else {
        responseType_ = "blob";
      }
    }
    let localVarPath = `/entities/sslcertificates`;
    return this.httpClient.request("post", `${this.configuration.basePath}${localVarPath}`, {
      context: localVarHttpContext,
      body: request,
      responseType: responseType_,
      withCredentials: this.configuration.withCredentials,
      headers: localVarHeaders,
      observe,
      transferCache: localVarTransferCache,
      reportProgress
    });
  }
  createTheme(request, observe = "body", reportProgress = false, options) {
    if (request === null || request === void 0) {
      throw new Error("Required parameter request was null or undefined when calling createTheme.");
    }
    let localVarHeaders = this.defaultHeaders;
    let localVarCredential;
    localVarCredential = this.configuration.lookupCredential("access_token");
    if (localVarCredential) {
      localVarHeaders = localVarHeaders.set("x-access-token", localVarCredential);
    }
    let localVarHttpHeaderAcceptSelected = options && options.httpHeaderAccept;
    if (localVarHttpHeaderAcceptSelected === void 0) {
      const httpHeaderAccepts = [
        "application/json"
      ];
      localVarHttpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
    }
    if (localVarHttpHeaderAcceptSelected !== void 0) {
      localVarHeaders = localVarHeaders.set("Accept", localVarHttpHeaderAcceptSelected);
    }
    let localVarHttpContext = options && options.context;
    if (localVarHttpContext === void 0) {
      localVarHttpContext = new HttpContext();
    }
    let localVarTransferCache = options && options.transferCache;
    if (localVarTransferCache === void 0) {
      localVarTransferCache = true;
    }
    const consumes = [
      "application/json"
    ];
    const httpContentTypeSelected = this.configuration.selectHeaderContentType(consumes);
    if (httpContentTypeSelected !== void 0) {
      localVarHeaders = localVarHeaders.set("Content-Type", httpContentTypeSelected);
    }
    let responseType_ = "json";
    if (localVarHttpHeaderAcceptSelected) {
      if (localVarHttpHeaderAcceptSelected.startsWith("text")) {
        responseType_ = "text";
      } else if (this.configuration.isJsonMime(localVarHttpHeaderAcceptSelected)) {
        responseType_ = "json";
      } else {
        responseType_ = "blob";
      }
    }
    let localVarPath = `/entities/themes`;
    return this.httpClient.request("post", `${this.configuration.basePath}${localVarPath}`, {
      context: localVarHttpContext,
      body: request,
      responseType: responseType_,
      withCredentials: this.configuration.withCredentials,
      headers: localVarHeaders,
      observe,
      transferCache: localVarTransferCache,
      reportProgress
    });
  }
  createZone(request, observe = "body", reportProgress = false, options) {
    if (request === null || request === void 0) {
      throw new Error("Required parameter request was null or undefined when calling createZone.");
    }
    let localVarHeaders = this.defaultHeaders;
    let localVarCredential;
    localVarCredential = this.configuration.lookupCredential("access_token");
    if (localVarCredential) {
      localVarHeaders = localVarHeaders.set("x-access-token", localVarCredential);
    }
    let localVarHttpHeaderAcceptSelected = options && options.httpHeaderAccept;
    if (localVarHttpHeaderAcceptSelected === void 0) {
      const httpHeaderAccepts = [
        "application/json"
      ];
      localVarHttpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
    }
    if (localVarHttpHeaderAcceptSelected !== void 0) {
      localVarHeaders = localVarHeaders.set("Accept", localVarHttpHeaderAcceptSelected);
    }
    let localVarHttpContext = options && options.context;
    if (localVarHttpContext === void 0) {
      localVarHttpContext = new HttpContext();
    }
    let localVarTransferCache = options && options.transferCache;
    if (localVarTransferCache === void 0) {
      localVarTransferCache = true;
    }
    const consumes = [
      "application/json"
    ];
    const httpContentTypeSelected = this.configuration.selectHeaderContentType(consumes);
    if (httpContentTypeSelected !== void 0) {
      localVarHeaders = localVarHeaders.set("Content-Type", httpContentTypeSelected);
    }
    let responseType_ = "json";
    if (localVarHttpHeaderAcceptSelected) {
      if (localVarHttpHeaderAcceptSelected.startsWith("text")) {
        responseType_ = "text";
      } else if (this.configuration.isJsonMime(localVarHttpHeaderAcceptSelected)) {
        responseType_ = "json";
      } else {
        responseType_ = "blob";
      }
    }
    let localVarPath = `/entities/zones`;
    return this.httpClient.request("post", `${this.configuration.basePath}${localVarPath}`, {
      context: localVarHttpContext,
      body: request,
      responseType: responseType_,
      withCredentials: this.configuration.withCredentials,
      headers: localVarHeaders,
      observe,
      transferCache: localVarTransferCache,
      reportProgress
    });
  }
  createZoneGroup(request, observe = "body", reportProgress = false, options) {
    if (request === null || request === void 0) {
      throw new Error("Required parameter request was null or undefined when calling createZoneGroup.");
    }
    let localVarHeaders = this.defaultHeaders;
    let localVarCredential;
    localVarCredential = this.configuration.lookupCredential("access_token");
    if (localVarCredential) {
      localVarHeaders = localVarHeaders.set("x-access-token", localVarCredential);
    }
    let localVarHttpHeaderAcceptSelected = options && options.httpHeaderAccept;
    if (localVarHttpHeaderAcceptSelected === void 0) {
      const httpHeaderAccepts = [
        "application/json"
      ];
      localVarHttpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
    }
    if (localVarHttpHeaderAcceptSelected !== void 0) {
      localVarHeaders = localVarHeaders.set("Accept", localVarHttpHeaderAcceptSelected);
    }
    let localVarHttpContext = options && options.context;
    if (localVarHttpContext === void 0) {
      localVarHttpContext = new HttpContext();
    }
    let localVarTransferCache = options && options.transferCache;
    if (localVarTransferCache === void 0) {
      localVarTransferCache = true;
    }
    const consumes = [
      "application/json"
    ];
    const httpContentTypeSelected = this.configuration.selectHeaderContentType(consumes);
    if (httpContentTypeSelected !== void 0) {
      localVarHeaders = localVarHeaders.set("Content-Type", httpContentTypeSelected);
    }
    let responseType_ = "json";
    if (localVarHttpHeaderAcceptSelected) {
      if (localVarHttpHeaderAcceptSelected.startsWith("text")) {
        responseType_ = "text";
      } else if (this.configuration.isJsonMime(localVarHttpHeaderAcceptSelected)) {
        responseType_ = "json";
      } else {
        responseType_ = "blob";
      }
    }
    let localVarPath = `/entities/zonegroups`;
    return this.httpClient.request("post", `${this.configuration.basePath}${localVarPath}`, {
      context: localVarHttpContext,
      body: request,
      responseType: responseType_,
      withCredentials: this.configuration.withCredentials,
      headers: localVarHeaders,
      observe,
      transferCache: localVarTransferCache,
      reportProgress
    });
  }
  deleteAssetAvatar(id, observe = "body", reportProgress = false, options) {
    if (id === null || id === void 0) {
      throw new Error("Required parameter id was null or undefined when calling deleteAssetAvatar.");
    }
    let localVarHeaders = this.defaultHeaders;
    let localVarCredential;
    localVarCredential = this.configuration.lookupCredential("access_token");
    if (localVarCredential) {
      localVarHeaders = localVarHeaders.set("x-access-token", localVarCredential);
    }
    let localVarHttpHeaderAcceptSelected = options && options.httpHeaderAccept;
    if (localVarHttpHeaderAcceptSelected === void 0) {
      const httpHeaderAccepts = [];
      localVarHttpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
    }
    if (localVarHttpHeaderAcceptSelected !== void 0) {
      localVarHeaders = localVarHeaders.set("Accept", localVarHttpHeaderAcceptSelected);
    }
    let localVarHttpContext = options && options.context;
    if (localVarHttpContext === void 0) {
      localVarHttpContext = new HttpContext();
    }
    let localVarTransferCache = options && options.transferCache;
    if (localVarTransferCache === void 0) {
      localVarTransferCache = true;
    }
    let responseType_ = "json";
    if (localVarHttpHeaderAcceptSelected) {
      if (localVarHttpHeaderAcceptSelected.startsWith("text")) {
        responseType_ = "text";
      } else if (this.configuration.isJsonMime(localVarHttpHeaderAcceptSelected)) {
        responseType_ = "json";
      } else {
        responseType_ = "blob";
      }
    }
    let localVarPath = `/entities/assets/${this.configuration.encodeParam({ name: "id", value: id, in: "path", style: "simple", explode: false, dataType: "string", dataFormat: void 0 })}/avatar`;
    return this.httpClient.request("delete", `${this.configuration.basePath}${localVarPath}`, {
      context: localVarHttpContext,
      responseType: responseType_,
      withCredentials: this.configuration.withCredentials,
      headers: localVarHeaders,
      observe,
      transferCache: localVarTransferCache,
      reportProgress
    });
  }
  deleteAssetCategory(id, observe = "body", reportProgress = false, options) {
    if (id === null || id === void 0) {
      throw new Error("Required parameter id was null or undefined when calling deleteAssetCategory.");
    }
    let localVarHeaders = this.defaultHeaders;
    let localVarCredential;
    localVarCredential = this.configuration.lookupCredential("access_token");
    if (localVarCredential) {
      localVarHeaders = localVarHeaders.set("x-access-token", localVarCredential);
    }
    let localVarHttpHeaderAcceptSelected = options && options.httpHeaderAccept;
    if (localVarHttpHeaderAcceptSelected === void 0) {
      const httpHeaderAccepts = [
        "application/json"
      ];
      localVarHttpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
    }
    if (localVarHttpHeaderAcceptSelected !== void 0) {
      localVarHeaders = localVarHeaders.set("Accept", localVarHttpHeaderAcceptSelected);
    }
    let localVarHttpContext = options && options.context;
    if (localVarHttpContext === void 0) {
      localVarHttpContext = new HttpContext();
    }
    let localVarTransferCache = options && options.transferCache;
    if (localVarTransferCache === void 0) {
      localVarTransferCache = true;
    }
    let responseType_ = "json";
    if (localVarHttpHeaderAcceptSelected) {
      if (localVarHttpHeaderAcceptSelected.startsWith("text")) {
        responseType_ = "text";
      } else if (this.configuration.isJsonMime(localVarHttpHeaderAcceptSelected)) {
        responseType_ = "json";
      } else {
        responseType_ = "blob";
      }
    }
    let localVarPath = `/entities/assetcategories/${this.configuration.encodeParam({ name: "id", value: id, in: "path", style: "simple", explode: false, dataType: "string", dataFormat: void 0 })}`;
    return this.httpClient.request("delete", `${this.configuration.basePath}${localVarPath}`, {
      context: localVarHttpContext,
      responseType: responseType_,
      withCredentials: this.configuration.withCredentials,
      headers: localVarHeaders,
      observe,
      transferCache: localVarTransferCache,
      reportProgress
    });
  }
  deleteAssetGroup(id, observe = "body", reportProgress = false, options) {
    if (id === null || id === void 0) {
      throw new Error("Required parameter id was null or undefined when calling deleteAssetGroup.");
    }
    let localVarHeaders = this.defaultHeaders;
    let localVarCredential;
    localVarCredential = this.configuration.lookupCredential("access_token");
    if (localVarCredential) {
      localVarHeaders = localVarHeaders.set("x-access-token", localVarCredential);
    }
    let localVarHttpHeaderAcceptSelected = options && options.httpHeaderAccept;
    if (localVarHttpHeaderAcceptSelected === void 0) {
      const httpHeaderAccepts = [
        "application/json"
      ];
      localVarHttpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
    }
    if (localVarHttpHeaderAcceptSelected !== void 0) {
      localVarHeaders = localVarHeaders.set("Accept", localVarHttpHeaderAcceptSelected);
    }
    let localVarHttpContext = options && options.context;
    if (localVarHttpContext === void 0) {
      localVarHttpContext = new HttpContext();
    }
    let localVarTransferCache = options && options.transferCache;
    if (localVarTransferCache === void 0) {
      localVarTransferCache = true;
    }
    let responseType_ = "json";
    if (localVarHttpHeaderAcceptSelected) {
      if (localVarHttpHeaderAcceptSelected.startsWith("text")) {
        responseType_ = "text";
      } else if (this.configuration.isJsonMime(localVarHttpHeaderAcceptSelected)) {
        responseType_ = "json";
      } else {
        responseType_ = "blob";
      }
    }
    let localVarPath = `/entities/assetgroups/${this.configuration.encodeParam({ name: "id", value: id, in: "path", style: "simple", explode: false, dataType: "string", dataFormat: void 0 })}`;
    return this.httpClient.request("delete", `${this.configuration.basePath}${localVarPath}`, {
      context: localVarHttpContext,
      responseType: responseType_,
      withCredentials: this.configuration.withCredentials,
      headers: localVarHeaders,
      observe,
      transferCache: localVarTransferCache,
      reportProgress
    });
  }
  deleteCostCentre(id, observe = "body", reportProgress = false, options) {
    if (id === null || id === void 0) {
      throw new Error("Required parameter id was null or undefined when calling deleteCostCentre.");
    }
    let localVarHeaders = this.defaultHeaders;
    let localVarCredential;
    localVarCredential = this.configuration.lookupCredential("access_token");
    if (localVarCredential) {
      localVarHeaders = localVarHeaders.set("x-access-token", localVarCredential);
    }
    let localVarHttpHeaderAcceptSelected = options && options.httpHeaderAccept;
    if (localVarHttpHeaderAcceptSelected === void 0) {
      const httpHeaderAccepts = [
        "application/json"
      ];
      localVarHttpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
    }
    if (localVarHttpHeaderAcceptSelected !== void 0) {
      localVarHeaders = localVarHeaders.set("Accept", localVarHttpHeaderAcceptSelected);
    }
    let localVarHttpContext = options && options.context;
    if (localVarHttpContext === void 0) {
      localVarHttpContext = new HttpContext();
    }
    let localVarTransferCache = options && options.transferCache;
    if (localVarTransferCache === void 0) {
      localVarTransferCache = true;
    }
    let responseType_ = "json";
    if (localVarHttpHeaderAcceptSelected) {
      if (localVarHttpHeaderAcceptSelected.startsWith("text")) {
        responseType_ = "text";
      } else if (this.configuration.isJsonMime(localVarHttpHeaderAcceptSelected)) {
        responseType_ = "json";
      } else {
        responseType_ = "blob";
      }
    }
    let localVarPath = `/entities/costcentres/${this.configuration.encodeParam({ name: "id", value: id, in: "path", style: "simple", explode: false, dataType: "string", dataFormat: void 0 })}`;
    return this.httpClient.request("delete", `${this.configuration.basePath}${localVarPath}`, {
      context: localVarHttpContext,
      responseType: responseType_,
      withCredentials: this.configuration.withCredentials,
      headers: localVarHeaders,
      observe,
      transferCache: localVarTransferCache,
      reportProgress
    });
  }
  deleteDashboard(id, observe = "body", reportProgress = false, options) {
    if (id === null || id === void 0) {
      throw new Error("Required parameter id was null or undefined when calling deleteDashboard.");
    }
    let localVarHeaders = this.defaultHeaders;
    let localVarCredential;
    localVarCredential = this.configuration.lookupCredential("access_token");
    if (localVarCredential) {
      localVarHeaders = localVarHeaders.set("x-access-token", localVarCredential);
    }
    let localVarHttpHeaderAcceptSelected = options && options.httpHeaderAccept;
    if (localVarHttpHeaderAcceptSelected === void 0) {
      const httpHeaderAccepts = [
        "application/json"
      ];
      localVarHttpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
    }
    if (localVarHttpHeaderAcceptSelected !== void 0) {
      localVarHeaders = localVarHeaders.set("Accept", localVarHttpHeaderAcceptSelected);
    }
    let localVarHttpContext = options && options.context;
    if (localVarHttpContext === void 0) {
      localVarHttpContext = new HttpContext();
    }
    let localVarTransferCache = options && options.transferCache;
    if (localVarTransferCache === void 0) {
      localVarTransferCache = true;
    }
    let responseType_ = "json";
    if (localVarHttpHeaderAcceptSelected) {
      if (localVarHttpHeaderAcceptSelected.startsWith("text")) {
        responseType_ = "text";
      } else if (this.configuration.isJsonMime(localVarHttpHeaderAcceptSelected)) {
        responseType_ = "json";
      } else {
        responseType_ = "blob";
      }
    }
    let localVarPath = `/entities/dashboards/${this.configuration.encodeParam({ name: "id", value: id, in: "path", style: "simple", explode: false, dataType: "string", dataFormat: void 0 })}`;
    return this.httpClient.request("delete", `${this.configuration.basePath}${localVarPath}`, {
      context: localVarHttpContext,
      responseType: responseType_,
      withCredentials: this.configuration.withCredentials,
      headers: localVarHeaders,
      observe,
      transferCache: localVarTransferCache,
      reportProgress
    });
  }
  deleteReminder(id, observe = "body", reportProgress = false, options) {
    if (id === null || id === void 0) {
      throw new Error("Required parameter id was null or undefined when calling deleteReminder.");
    }
    let localVarHeaders = this.defaultHeaders;
    let localVarCredential;
    localVarCredential = this.configuration.lookupCredential("access_token");
    if (localVarCredential) {
      localVarHeaders = localVarHeaders.set("x-access-token", localVarCredential);
    }
    let localVarHttpHeaderAcceptSelected = options && options.httpHeaderAccept;
    if (localVarHttpHeaderAcceptSelected === void 0) {
      const httpHeaderAccepts = [
        "application/json"
      ];
      localVarHttpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
    }
    if (localVarHttpHeaderAcceptSelected !== void 0) {
      localVarHeaders = localVarHeaders.set("Accept", localVarHttpHeaderAcceptSelected);
    }
    let localVarHttpContext = options && options.context;
    if (localVarHttpContext === void 0) {
      localVarHttpContext = new HttpContext();
    }
    let localVarTransferCache = options && options.transferCache;
    if (localVarTransferCache === void 0) {
      localVarTransferCache = true;
    }
    let responseType_ = "json";
    if (localVarHttpHeaderAcceptSelected) {
      if (localVarHttpHeaderAcceptSelected.startsWith("text")) {
        responseType_ = "text";
      } else if (this.configuration.isJsonMime(localVarHttpHeaderAcceptSelected)) {
        responseType_ = "json";
      } else {
        responseType_ = "blob";
      }
    }
    let localVarPath = `/entities/reminders/${this.configuration.encodeParam({ name: "id", value: id, in: "path", style: "simple", explode: false, dataType: "string", dataFormat: void 0 })}`;
    return this.httpClient.request("delete", `${this.configuration.basePath}${localVarPath}`, {
      context: localVarHttpContext,
      responseType: responseType_,
      withCredentials: this.configuration.withCredentials,
      headers: localVarHeaders,
      observe,
      transferCache: localVarTransferCache,
      reportProgress
    });
  }
  deleteReportTemplate(id, observe = "body", reportProgress = false, options) {
    if (id === null || id === void 0) {
      throw new Error("Required parameter id was null or undefined when calling deleteReportTemplate.");
    }
    let localVarHeaders = this.defaultHeaders;
    let localVarCredential;
    localVarCredential = this.configuration.lookupCredential("access_token");
    if (localVarCredential) {
      localVarHeaders = localVarHeaders.set("x-access-token", localVarCredential);
    }
    let localVarHttpHeaderAcceptSelected = options && options.httpHeaderAccept;
    if (localVarHttpHeaderAcceptSelected === void 0) {
      const httpHeaderAccepts = [
        "application/json"
      ];
      localVarHttpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
    }
    if (localVarHttpHeaderAcceptSelected !== void 0) {
      localVarHeaders = localVarHeaders.set("Accept", localVarHttpHeaderAcceptSelected);
    }
    let localVarHttpContext = options && options.context;
    if (localVarHttpContext === void 0) {
      localVarHttpContext = new HttpContext();
    }
    let localVarTransferCache = options && options.transferCache;
    if (localVarTransferCache === void 0) {
      localVarTransferCache = true;
    }
    let responseType_ = "json";
    if (localVarHttpHeaderAcceptSelected) {
      if (localVarHttpHeaderAcceptSelected.startsWith("text")) {
        responseType_ = "text";
      } else if (this.configuration.isJsonMime(localVarHttpHeaderAcceptSelected)) {
        responseType_ = "json";
      } else {
        responseType_ = "blob";
      }
    }
    let localVarPath = `/entities/reporttemplates/${this.configuration.encodeParam({ name: "id", value: id, in: "path", style: "simple", explode: false, dataType: "string", dataFormat: void 0 })}`;
    return this.httpClient.request("delete", `${this.configuration.basePath}${localVarPath}`, {
      context: localVarHttpContext,
      responseType: responseType_,
      withCredentials: this.configuration.withCredentials,
      headers: localVarHeaders,
      observe,
      transferCache: localVarTransferCache,
      reportProgress
    });
  }
  deleteSharedAssetLocationToken(token, observe = "body", reportProgress = false, options) {
    if (token === null || token === void 0) {
      throw new Error("Required parameter token was null or undefined when calling deleteSharedAssetLocationToken.");
    }
    let localVarHeaders = this.defaultHeaders;
    let localVarCredential;
    localVarCredential = this.configuration.lookupCredential("access_token");
    if (localVarCredential) {
      localVarHeaders = localVarHeaders.set("x-access-token", localVarCredential);
    }
    let localVarHttpHeaderAcceptSelected = options && options.httpHeaderAccept;
    if (localVarHttpHeaderAcceptSelected === void 0) {
      const httpHeaderAccepts = [
        "application/json"
      ];
      localVarHttpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
    }
    if (localVarHttpHeaderAcceptSelected !== void 0) {
      localVarHeaders = localVarHeaders.set("Accept", localVarHttpHeaderAcceptSelected);
    }
    let localVarHttpContext = options && options.context;
    if (localVarHttpContext === void 0) {
      localVarHttpContext = new HttpContext();
    }
    let localVarTransferCache = options && options.transferCache;
    if (localVarTransferCache === void 0) {
      localVarTransferCache = true;
    }
    let responseType_ = "json";
    if (localVarHttpHeaderAcceptSelected) {
      if (localVarHttpHeaderAcceptSelected.startsWith("text")) {
        responseType_ = "text";
      } else if (this.configuration.isJsonMime(localVarHttpHeaderAcceptSelected)) {
        responseType_ = "json";
      } else {
        responseType_ = "blob";
      }
    }
    let localVarPath = `/entities/assets/shared/location/${this.configuration.encodeParam({ name: "token", value: token, in: "path", style: "simple", explode: false, dataType: "string", dataFormat: void 0 })}`;
    return this.httpClient.request("delete", `${this.configuration.basePath}${localVarPath}`, {
      context: localVarHttpContext,
      responseType: responseType_,
      withCredentials: this.configuration.withCredentials,
      headers: localVarHeaders,
      observe,
      transferCache: localVarTransferCache,
      reportProgress
    });
  }
  deleteZoneGroup(id, observe = "body", reportProgress = false, options) {
    if (id === null || id === void 0) {
      throw new Error("Required parameter id was null or undefined when calling deleteZoneGroup.");
    }
    let localVarHeaders = this.defaultHeaders;
    let localVarCredential;
    localVarCredential = this.configuration.lookupCredential("access_token");
    if (localVarCredential) {
      localVarHeaders = localVarHeaders.set("x-access-token", localVarCredential);
    }
    let localVarHttpHeaderAcceptSelected = options && options.httpHeaderAccept;
    if (localVarHttpHeaderAcceptSelected === void 0) {
      const httpHeaderAccepts = [
        "application/json"
      ];
      localVarHttpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
    }
    if (localVarHttpHeaderAcceptSelected !== void 0) {
      localVarHeaders = localVarHeaders.set("Accept", localVarHttpHeaderAcceptSelected);
    }
    let localVarHttpContext = options && options.context;
    if (localVarHttpContext === void 0) {
      localVarHttpContext = new HttpContext();
    }
    let localVarTransferCache = options && options.transferCache;
    if (localVarTransferCache === void 0) {
      localVarTransferCache = true;
    }
    let responseType_ = "json";
    if (localVarHttpHeaderAcceptSelected) {
      if (localVarHttpHeaderAcceptSelected.startsWith("text")) {
        responseType_ = "text";
      } else if (this.configuration.isJsonMime(localVarHttpHeaderAcceptSelected)) {
        responseType_ = "json";
      } else {
        responseType_ = "blob";
      }
    }
    let localVarPath = `/entities/zonegroups/${this.configuration.encodeParam({ name: "id", value: id, in: "path", style: "simple", explode: false, dataType: "string", dataFormat: void 0 })}`;
    return this.httpClient.request("delete", `${this.configuration.basePath}${localVarPath}`, {
      context: localVarHttpContext,
      responseType: responseType_,
      withCredentials: this.configuration.withCredentials,
      headers: localVarHeaders,
      observe,
      transferCache: localVarTransferCache,
      reportProgress
    });
  }
  getAlert(id, observe = "body", reportProgress = false, options) {
    if (id === null || id === void 0) {
      throw new Error("Required parameter id was null or undefined when calling getAlert.");
    }
    let localVarHeaders = this.defaultHeaders;
    let localVarCredential;
    localVarCredential = this.configuration.lookupCredential("access_token");
    if (localVarCredential) {
      localVarHeaders = localVarHeaders.set("x-access-token", localVarCredential);
    }
    let localVarHttpHeaderAcceptSelected = options && options.httpHeaderAccept;
    if (localVarHttpHeaderAcceptSelected === void 0) {
      const httpHeaderAccepts = [
        "application/json"
      ];
      localVarHttpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
    }
    if (localVarHttpHeaderAcceptSelected !== void 0) {
      localVarHeaders = localVarHeaders.set("Accept", localVarHttpHeaderAcceptSelected);
    }
    let localVarHttpContext = options && options.context;
    if (localVarHttpContext === void 0) {
      localVarHttpContext = new HttpContext();
    }
    let localVarTransferCache = options && options.transferCache;
    if (localVarTransferCache === void 0) {
      localVarTransferCache = true;
    }
    let responseType_ = "json";
    if (localVarHttpHeaderAcceptSelected) {
      if (localVarHttpHeaderAcceptSelected.startsWith("text")) {
        responseType_ = "text";
      } else if (this.configuration.isJsonMime(localVarHttpHeaderAcceptSelected)) {
        responseType_ = "json";
      } else {
        responseType_ = "blob";
      }
    }
    let localVarPath = `/entities/alerts/${this.configuration.encodeParam({ name: "id", value: id, in: "path", style: "simple", explode: false, dataType: "string", dataFormat: void 0 })}`;
    return this.httpClient.request("get", `${this.configuration.basePath}${localVarPath}`, {
      context: localVarHttpContext,
      responseType: responseType_,
      withCredentials: this.configuration.withCredentials,
      headers: localVarHeaders,
      observe,
      transferCache: localVarTransferCache,
      reportProgress
    });
  }
  getAsset(id, observe = "body", reportProgress = false, options) {
    if (id === null || id === void 0) {
      throw new Error("Required parameter id was null or undefined when calling getAsset.");
    }
    let localVarHeaders = this.defaultHeaders;
    let localVarCredential;
    localVarCredential = this.configuration.lookupCredential("access_token");
    if (localVarCredential) {
      localVarHeaders = localVarHeaders.set("x-access-token", localVarCredential);
    }
    let localVarHttpHeaderAcceptSelected = options && options.httpHeaderAccept;
    if (localVarHttpHeaderAcceptSelected === void 0) {
      const httpHeaderAccepts = [
        "application/json"
      ];
      localVarHttpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
    }
    if (localVarHttpHeaderAcceptSelected !== void 0) {
      localVarHeaders = localVarHeaders.set("Accept", localVarHttpHeaderAcceptSelected);
    }
    let localVarHttpContext = options && options.context;
    if (localVarHttpContext === void 0) {
      localVarHttpContext = new HttpContext();
    }
    let localVarTransferCache = options && options.transferCache;
    if (localVarTransferCache === void 0) {
      localVarTransferCache = true;
    }
    let responseType_ = "json";
    if (localVarHttpHeaderAcceptSelected) {
      if (localVarHttpHeaderAcceptSelected.startsWith("text")) {
        responseType_ = "text";
      } else if (this.configuration.isJsonMime(localVarHttpHeaderAcceptSelected)) {
        responseType_ = "json";
      } else {
        responseType_ = "blob";
      }
    }
    let localVarPath = `/entities/assets/${this.configuration.encodeParam({ name: "id", value: id, in: "path", style: "simple", explode: false, dataType: "string", dataFormat: void 0 })}`;
    return this.httpClient.request("get", `${this.configuration.basePath}${localVarPath}`, {
      context: localVarHttpContext,
      responseType: responseType_,
      withCredentials: this.configuration.withCredentials,
      headers: localVarHeaders,
      observe,
      transferCache: localVarTransferCache,
      reportProgress
    });
  }
  getAssetAvatar(id, observe = "body", reportProgress = false, options) {
    if (id === null || id === void 0) {
      throw new Error("Required parameter id was null or undefined when calling getAssetAvatar.");
    }
    let localVarHeaders = this.defaultHeaders;
    let localVarCredential;
    localVarCredential = this.configuration.lookupCredential("access_token");
    if (localVarCredential) {
      localVarHeaders = localVarHeaders.set("x-access-token", localVarCredential);
    }
    let localVarHttpHeaderAcceptSelected = options && options.httpHeaderAccept;
    if (localVarHttpHeaderAcceptSelected === void 0) {
      const httpHeaderAccepts = [
        "application/json"
      ];
      localVarHttpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
    }
    if (localVarHttpHeaderAcceptSelected !== void 0) {
      localVarHeaders = localVarHeaders.set("Accept", localVarHttpHeaderAcceptSelected);
    }
    let localVarHttpContext = options && options.context;
    if (localVarHttpContext === void 0) {
      localVarHttpContext = new HttpContext();
    }
    let localVarTransferCache = options && options.transferCache;
    if (localVarTransferCache === void 0) {
      localVarTransferCache = true;
    }
    let responseType_ = "json";
    if (localVarHttpHeaderAcceptSelected) {
      if (localVarHttpHeaderAcceptSelected.startsWith("text")) {
        responseType_ = "text";
      } else if (this.configuration.isJsonMime(localVarHttpHeaderAcceptSelected)) {
        responseType_ = "json";
      } else {
        responseType_ = "blob";
      }
    }
    let localVarPath = `/entities/assets/${this.configuration.encodeParam({ name: "id", value: id, in: "path", style: "simple", explode: false, dataType: "string", dataFormat: void 0 })}/avatar`;
    return this.httpClient.request("get", `${this.configuration.basePath}${localVarPath}`, {
      context: localVarHttpContext,
      responseType: responseType_,
      withCredentials: this.configuration.withCredentials,
      headers: localVarHeaders,
      observe,
      transferCache: localVarTransferCache,
      reportProgress
    });
  }
  getAssetCategory(id, observe = "body", reportProgress = false, options) {
    if (id === null || id === void 0) {
      throw new Error("Required parameter id was null or undefined when calling getAssetCategory.");
    }
    let localVarHeaders = this.defaultHeaders;
    let localVarCredential;
    localVarCredential = this.configuration.lookupCredential("access_token");
    if (localVarCredential) {
      localVarHeaders = localVarHeaders.set("x-access-token", localVarCredential);
    }
    let localVarHttpHeaderAcceptSelected = options && options.httpHeaderAccept;
    if (localVarHttpHeaderAcceptSelected === void 0) {
      const httpHeaderAccepts = [
        "application/json"
      ];
      localVarHttpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
    }
    if (localVarHttpHeaderAcceptSelected !== void 0) {
      localVarHeaders = localVarHeaders.set("Accept", localVarHttpHeaderAcceptSelected);
    }
    let localVarHttpContext = options && options.context;
    if (localVarHttpContext === void 0) {
      localVarHttpContext = new HttpContext();
    }
    let localVarTransferCache = options && options.transferCache;
    if (localVarTransferCache === void 0) {
      localVarTransferCache = true;
    }
    let responseType_ = "json";
    if (localVarHttpHeaderAcceptSelected) {
      if (localVarHttpHeaderAcceptSelected.startsWith("text")) {
        responseType_ = "text";
      } else if (this.configuration.isJsonMime(localVarHttpHeaderAcceptSelected)) {
        responseType_ = "json";
      } else {
        responseType_ = "blob";
      }
    }
    let localVarPath = `/entities/assetcategories/${this.configuration.encodeParam({ name: "id", value: id, in: "path", style: "simple", explode: false, dataType: "string", dataFormat: void 0 })}`;
    return this.httpClient.request("get", `${this.configuration.basePath}${localVarPath}`, {
      context: localVarHttpContext,
      responseType: responseType_,
      withCredentials: this.configuration.withCredentials,
      headers: localVarHeaders,
      observe,
      transferCache: localVarTransferCache,
      reportProgress
    });
  }
  getAssetGroup(id, observe = "body", reportProgress = false, options) {
    if (id === null || id === void 0) {
      throw new Error("Required parameter id was null or undefined when calling getAssetGroup.");
    }
    let localVarHeaders = this.defaultHeaders;
    let localVarCredential;
    localVarCredential = this.configuration.lookupCredential("access_token");
    if (localVarCredential) {
      localVarHeaders = localVarHeaders.set("x-access-token", localVarCredential);
    }
    let localVarHttpHeaderAcceptSelected = options && options.httpHeaderAccept;
    if (localVarHttpHeaderAcceptSelected === void 0) {
      const httpHeaderAccepts = [
        "application/json"
      ];
      localVarHttpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
    }
    if (localVarHttpHeaderAcceptSelected !== void 0) {
      localVarHeaders = localVarHeaders.set("Accept", localVarHttpHeaderAcceptSelected);
    }
    let localVarHttpContext = options && options.context;
    if (localVarHttpContext === void 0) {
      localVarHttpContext = new HttpContext();
    }
    let localVarTransferCache = options && options.transferCache;
    if (localVarTransferCache === void 0) {
      localVarTransferCache = true;
    }
    let responseType_ = "json";
    if (localVarHttpHeaderAcceptSelected) {
      if (localVarHttpHeaderAcceptSelected.startsWith("text")) {
        responseType_ = "text";
      } else if (this.configuration.isJsonMime(localVarHttpHeaderAcceptSelected)) {
        responseType_ = "json";
      } else {
        responseType_ = "blob";
      }
    }
    let localVarPath = `/entities/assetgroups/${this.configuration.encodeParam({ name: "id", value: id, in: "path", style: "simple", explode: false, dataType: "string", dataFormat: void 0 })}`;
    return this.httpClient.request("get", `${this.configuration.basePath}${localVarPath}`, {
      context: localVarHttpContext,
      responseType: responseType_,
      withCredentials: this.configuration.withCredentials,
      headers: localVarHeaders,
      observe,
      transferCache: localVarTransferCache,
      reportProgress
    });
  }
  getAssetLocation(id, observe = "body", reportProgress = false, options) {
    if (id === null || id === void 0) {
      throw new Error("Required parameter id was null or undefined when calling getAssetLocation.");
    }
    let localVarHeaders = this.defaultHeaders;
    let localVarCredential;
    localVarCredential = this.configuration.lookupCredential("access_token");
    if (localVarCredential) {
      localVarHeaders = localVarHeaders.set("x-access-token", localVarCredential);
    }
    let localVarHttpHeaderAcceptSelected = options && options.httpHeaderAccept;
    if (localVarHttpHeaderAcceptSelected === void 0) {
      const httpHeaderAccepts = [
        "application/json"
      ];
      localVarHttpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
    }
    if (localVarHttpHeaderAcceptSelected !== void 0) {
      localVarHeaders = localVarHeaders.set("Accept", localVarHttpHeaderAcceptSelected);
    }
    let localVarHttpContext = options && options.context;
    if (localVarHttpContext === void 0) {
      localVarHttpContext = new HttpContext();
    }
    let localVarTransferCache = options && options.transferCache;
    if (localVarTransferCache === void 0) {
      localVarTransferCache = true;
    }
    let responseType_ = "json";
    if (localVarHttpHeaderAcceptSelected) {
      if (localVarHttpHeaderAcceptSelected.startsWith("text")) {
        responseType_ = "text";
      } else if (this.configuration.isJsonMime(localVarHttpHeaderAcceptSelected)) {
        responseType_ = "json";
      } else {
        responseType_ = "blob";
      }
    }
    let localVarPath = `/entities/assets/${this.configuration.encodeParam({ name: "id", value: id, in: "path", style: "simple", explode: false, dataType: "string", dataFormat: void 0 })}/location`;
    return this.httpClient.request("get", `${this.configuration.basePath}${localVarPath}`, {
      context: localVarHttpContext,
      responseType: responseType_,
      withCredentials: this.configuration.withCredentials,
      headers: localVarHeaders,
      observe,
      transferCache: localVarTransferCache,
      reportProgress
    });
  }
  getAssetRatingProfile(id, observe = "body", reportProgress = false, options) {
    if (id === null || id === void 0) {
      throw new Error("Required parameter id was null or undefined when calling getAssetRatingProfile.");
    }
    let localVarHeaders = this.defaultHeaders;
    let localVarCredential;
    localVarCredential = this.configuration.lookupCredential("access_token");
    if (localVarCredential) {
      localVarHeaders = localVarHeaders.set("x-access-token", localVarCredential);
    }
    let localVarHttpHeaderAcceptSelected = options && options.httpHeaderAccept;
    if (localVarHttpHeaderAcceptSelected === void 0) {
      const httpHeaderAccepts = [
        "application/json"
      ];
      localVarHttpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
    }
    if (localVarHttpHeaderAcceptSelected !== void 0) {
      localVarHeaders = localVarHeaders.set("Accept", localVarHttpHeaderAcceptSelected);
    }
    let localVarHttpContext = options && options.context;
    if (localVarHttpContext === void 0) {
      localVarHttpContext = new HttpContext();
    }
    let localVarTransferCache = options && options.transferCache;
    if (localVarTransferCache === void 0) {
      localVarTransferCache = true;
    }
    let responseType_ = "json";
    if (localVarHttpHeaderAcceptSelected) {
      if (localVarHttpHeaderAcceptSelected.startsWith("text")) {
        responseType_ = "text";
      } else if (this.configuration.isJsonMime(localVarHttpHeaderAcceptSelected)) {
        responseType_ = "json";
      } else {
        responseType_ = "blob";
      }
    }
    let localVarPath = `/entities/assetratingprofiles/${this.configuration.encodeParam({ name: "id", value: id, in: "path", style: "simple", explode: false, dataType: "string", dataFormat: void 0 })}`;
    return this.httpClient.request("get", `${this.configuration.basePath}${localVarPath}`, {
      context: localVarHttpContext,
      responseType: responseType_,
      withCredentials: this.configuration.withCredentials,
      headers: localVarHeaders,
      observe,
      transferCache: localVarTransferCache,
      reportProgress
    });
  }
  getAssetStateProfile(id, observe = "body", reportProgress = false, options) {
    if (id === null || id === void 0) {
      throw new Error("Required parameter id was null or undefined when calling getAssetStateProfile.");
    }
    let localVarHeaders = this.defaultHeaders;
    let localVarCredential;
    localVarCredential = this.configuration.lookupCredential("access_token");
    if (localVarCredential) {
      localVarHeaders = localVarHeaders.set("x-access-token", localVarCredential);
    }
    let localVarHttpHeaderAcceptSelected = options && options.httpHeaderAccept;
    if (localVarHttpHeaderAcceptSelected === void 0) {
      const httpHeaderAccepts = [
        "application/json"
      ];
      localVarHttpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
    }
    if (localVarHttpHeaderAcceptSelected !== void 0) {
      localVarHeaders = localVarHeaders.set("Accept", localVarHttpHeaderAcceptSelected);
    }
    let localVarHttpContext = options && options.context;
    if (localVarHttpContext === void 0) {
      localVarHttpContext = new HttpContext();
    }
    let localVarTransferCache = options && options.transferCache;
    if (localVarTransferCache === void 0) {
      localVarTransferCache = true;
    }
    let responseType_ = "json";
    if (localVarHttpHeaderAcceptSelected) {
      if (localVarHttpHeaderAcceptSelected.startsWith("text")) {
        responseType_ = "text";
      } else if (this.configuration.isJsonMime(localVarHttpHeaderAcceptSelected)) {
        responseType_ = "json";
      } else {
        responseType_ = "blob";
      }
    }
    let localVarPath = `/entities/assetstateprofiles/${this.configuration.encodeParam({ name: "id", value: id, in: "path", style: "simple", explode: false, dataType: "string", dataFormat: void 0 })}`;
    return this.httpClient.request("get", `${this.configuration.basePath}${localVarPath}`, {
      context: localVarHttpContext,
      responseType: responseType_,
      withCredentials: this.configuration.withCredentials,
      headers: localVarHeaders,
      observe,
      transferCache: localVarTransferCache,
      reportProgress
    });
  }
  getAssetTag(id, observe = "body", reportProgress = false, options) {
    if (id === null || id === void 0) {
      throw new Error("Required parameter id was null or undefined when calling getAssetTag.");
    }
    let localVarHeaders = this.defaultHeaders;
    let localVarCredential;
    localVarCredential = this.configuration.lookupCredential("access_token");
    if (localVarCredential) {
      localVarHeaders = localVarHeaders.set("x-access-token", localVarCredential);
    }
    let localVarHttpHeaderAcceptSelected = options && options.httpHeaderAccept;
    if (localVarHttpHeaderAcceptSelected === void 0) {
      const httpHeaderAccepts = [
        "application/json"
      ];
      localVarHttpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
    }
    if (localVarHttpHeaderAcceptSelected !== void 0) {
      localVarHeaders = localVarHeaders.set("Accept", localVarHttpHeaderAcceptSelected);
    }
    let localVarHttpContext = options && options.context;
    if (localVarHttpContext === void 0) {
      localVarHttpContext = new HttpContext();
    }
    let localVarTransferCache = options && options.transferCache;
    if (localVarTransferCache === void 0) {
      localVarTransferCache = true;
    }
    let responseType_ = "json";
    if (localVarHttpHeaderAcceptSelected) {
      if (localVarHttpHeaderAcceptSelected.startsWith("text")) {
        responseType_ = "text";
      } else if (this.configuration.isJsonMime(localVarHttpHeaderAcceptSelected)) {
        responseType_ = "json";
      } else {
        responseType_ = "blob";
      }
    }
    let localVarPath = `/entities/assettags/${this.configuration.encodeParam({ name: "id", value: id, in: "path", style: "simple", explode: false, dataType: "string", dataFormat: void 0 })}`;
    return this.httpClient.request("get", `${this.configuration.basePath}${localVarPath}`, {
      context: localVarHttpContext,
      responseType: responseType_,
      withCredentials: this.configuration.withCredentials,
      headers: localVarHeaders,
      observe,
      transferCache: localVarTransferCache,
      reportProgress
    });
  }
  getAssetTagType(id, observe = "body", reportProgress = false, options) {
    if (id === null || id === void 0) {
      throw new Error("Required parameter id was null or undefined when calling getAssetTagType.");
    }
    let localVarHeaders = this.defaultHeaders;
    let localVarCredential;
    localVarCredential = this.configuration.lookupCredential("access_token");
    if (localVarCredential) {
      localVarHeaders = localVarHeaders.set("x-access-token", localVarCredential);
    }
    let localVarHttpHeaderAcceptSelected = options && options.httpHeaderAccept;
    if (localVarHttpHeaderAcceptSelected === void 0) {
      const httpHeaderAccepts = [
        "application/json"
      ];
      localVarHttpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
    }
    if (localVarHttpHeaderAcceptSelected !== void 0) {
      localVarHeaders = localVarHeaders.set("Accept", localVarHttpHeaderAcceptSelected);
    }
    let localVarHttpContext = options && options.context;
    if (localVarHttpContext === void 0) {
      localVarHttpContext = new HttpContext();
    }
    let localVarTransferCache = options && options.transferCache;
    if (localVarTransferCache === void 0) {
      localVarTransferCache = true;
    }
    let responseType_ = "json";
    if (localVarHttpHeaderAcceptSelected) {
      if (localVarHttpHeaderAcceptSelected.startsWith("text")) {
        responseType_ = "text";
      } else if (this.configuration.isJsonMime(localVarHttpHeaderAcceptSelected)) {
        responseType_ = "json";
      } else {
        responseType_ = "blob";
      }
    }
    let localVarPath = `/entities/assettagtypes/${this.configuration.encodeParam({ name: "id", value: id, in: "path", style: "simple", explode: false, dataType: "string", dataFormat: void 0 })}`;
    return this.httpClient.request("get", `${this.configuration.basePath}${localVarPath}`, {
      context: localVarHttpContext,
      responseType: responseType_,
      withCredentials: this.configuration.withCredentials,
      headers: localVarHeaders,
      observe,
      transferCache: localVarTransferCache,
      reportProgress
    });
  }
  getAssetType(id, observe = "body", reportProgress = false, options) {
    if (id === null || id === void 0) {
      throw new Error("Required parameter id was null or undefined when calling getAssetType.");
    }
    let localVarHeaders = this.defaultHeaders;
    let localVarCredential;
    localVarCredential = this.configuration.lookupCredential("access_token");
    if (localVarCredential) {
      localVarHeaders = localVarHeaders.set("x-access-token", localVarCredential);
    }
    let localVarHttpHeaderAcceptSelected = options && options.httpHeaderAccept;
    if (localVarHttpHeaderAcceptSelected === void 0) {
      const httpHeaderAccepts = [
        "application/json"
      ];
      localVarHttpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
    }
    if (localVarHttpHeaderAcceptSelected !== void 0) {
      localVarHeaders = localVarHeaders.set("Accept", localVarHttpHeaderAcceptSelected);
    }
    let localVarHttpContext = options && options.context;
    if (localVarHttpContext === void 0) {
      localVarHttpContext = new HttpContext();
    }
    let localVarTransferCache = options && options.transferCache;
    if (localVarTransferCache === void 0) {
      localVarTransferCache = true;
    }
    let responseType_ = "json";
    if (localVarHttpHeaderAcceptSelected) {
      if (localVarHttpHeaderAcceptSelected.startsWith("text")) {
        responseType_ = "text";
      } else if (this.configuration.isJsonMime(localVarHttpHeaderAcceptSelected)) {
        responseType_ = "json";
      } else {
        responseType_ = "blob";
      }
    }
    let localVarPath = `/entities/assettypes/${this.configuration.encodeParam({ name: "id", value: id, in: "path", style: "simple", explode: false, dataType: "string", dataFormat: void 0 })}`;
    return this.httpClient.request("get", `${this.configuration.basePath}${localVarPath}`, {
      context: localVarHttpContext,
      responseType: responseType_,
      withCredentials: this.configuration.withCredentials,
      headers: localVarHeaders,
      observe,
      transferCache: localVarTransferCache,
      reportProgress
    });
  }
  getCostCentre(id, observe = "body", reportProgress = false, options) {
    if (id === null || id === void 0) {
      throw new Error("Required parameter id was null or undefined when calling getCostCentre.");
    }
    let localVarHeaders = this.defaultHeaders;
    let localVarCredential;
    localVarCredential = this.configuration.lookupCredential("access_token");
    if (localVarCredential) {
      localVarHeaders = localVarHeaders.set("x-access-token", localVarCredential);
    }
    let localVarHttpHeaderAcceptSelected = options && options.httpHeaderAccept;
    if (localVarHttpHeaderAcceptSelected === void 0) {
      const httpHeaderAccepts = [
        "application/json"
      ];
      localVarHttpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
    }
    if (localVarHttpHeaderAcceptSelected !== void 0) {
      localVarHeaders = localVarHeaders.set("Accept", localVarHttpHeaderAcceptSelected);
    }
    let localVarHttpContext = options && options.context;
    if (localVarHttpContext === void 0) {
      localVarHttpContext = new HttpContext();
    }
    let localVarTransferCache = options && options.transferCache;
    if (localVarTransferCache === void 0) {
      localVarTransferCache = true;
    }
    let responseType_ = "json";
    if (localVarHttpHeaderAcceptSelected) {
      if (localVarHttpHeaderAcceptSelected.startsWith("text")) {
        responseType_ = "text";
      } else if (this.configuration.isJsonMime(localVarHttpHeaderAcceptSelected)) {
        responseType_ = "json";
      } else {
        responseType_ = "blob";
      }
    }
    let localVarPath = `/entities/costcentres/${this.configuration.encodeParam({ name: "id", value: id, in: "path", style: "simple", explode: false, dataType: "string", dataFormat: void 0 })}`;
    return this.httpClient.request("get", `${this.configuration.basePath}${localVarPath}`, {
      context: localVarHttpContext,
      responseType: responseType_,
      withCredentials: this.configuration.withCredentials,
      headers: localVarHeaders,
      observe,
      transferCache: localVarTransferCache,
      reportProgress
    });
  }
  getDashboard(id, observe = "body", reportProgress = false, options) {
    if (id === null || id === void 0) {
      throw new Error("Required parameter id was null or undefined when calling getDashboard.");
    }
    let localVarHeaders = this.defaultHeaders;
    let localVarCredential;
    localVarCredential = this.configuration.lookupCredential("access_token");
    if (localVarCredential) {
      localVarHeaders = localVarHeaders.set("x-access-token", localVarCredential);
    }
    let localVarHttpHeaderAcceptSelected = options && options.httpHeaderAccept;
    if (localVarHttpHeaderAcceptSelected === void 0) {
      const httpHeaderAccepts = [
        "application/json"
      ];
      localVarHttpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
    }
    if (localVarHttpHeaderAcceptSelected !== void 0) {
      localVarHeaders = localVarHeaders.set("Accept", localVarHttpHeaderAcceptSelected);
    }
    let localVarHttpContext = options && options.context;
    if (localVarHttpContext === void 0) {
      localVarHttpContext = new HttpContext();
    }
    let localVarTransferCache = options && options.transferCache;
    if (localVarTransferCache === void 0) {
      localVarTransferCache = true;
    }
    let responseType_ = "json";
    if (localVarHttpHeaderAcceptSelected) {
      if (localVarHttpHeaderAcceptSelected.startsWith("text")) {
        responseType_ = "text";
      } else if (this.configuration.isJsonMime(localVarHttpHeaderAcceptSelected)) {
        responseType_ = "json";
      } else {
        responseType_ = "blob";
      }
    }
    let localVarPath = `/entities/dashboards/${this.configuration.encodeParam({ name: "id", value: id, in: "path", style: "simple", explode: false, dataType: "string", dataFormat: void 0 })}`;
    return this.httpClient.request("get", `${this.configuration.basePath}${localVarPath}`, {
      context: localVarHttpContext,
      responseType: responseType_,
      withCredentials: this.configuration.withCredentials,
      headers: localVarHeaders,
      observe,
      transferCache: localVarTransferCache,
      reportProgress
    });
  }
  getDashboardTemplate(id, observe = "body", reportProgress = false, options) {
    if (id === null || id === void 0) {
      throw new Error("Required parameter id was null or undefined when calling getDashboardTemplate.");
    }
    let localVarHeaders = this.defaultHeaders;
    let localVarCredential;
    localVarCredential = this.configuration.lookupCredential("access_token");
    if (localVarCredential) {
      localVarHeaders = localVarHeaders.set("x-access-token", localVarCredential);
    }
    let localVarHttpHeaderAcceptSelected = options && options.httpHeaderAccept;
    if (localVarHttpHeaderAcceptSelected === void 0) {
      const httpHeaderAccepts = [
        "application/json"
      ];
      localVarHttpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
    }
    if (localVarHttpHeaderAcceptSelected !== void 0) {
      localVarHeaders = localVarHeaders.set("Accept", localVarHttpHeaderAcceptSelected);
    }
    let localVarHttpContext = options && options.context;
    if (localVarHttpContext === void 0) {
      localVarHttpContext = new HttpContext();
    }
    let localVarTransferCache = options && options.transferCache;
    if (localVarTransferCache === void 0) {
      localVarTransferCache = true;
    }
    let responseType_ = "json";
    if (localVarHttpHeaderAcceptSelected) {
      if (localVarHttpHeaderAcceptSelected.startsWith("text")) {
        responseType_ = "text";
      } else if (this.configuration.isJsonMime(localVarHttpHeaderAcceptSelected)) {
        responseType_ = "json";
      } else {
        responseType_ = "blob";
      }
    }
    let localVarPath = `/entities/dashboardtemplates/${this.configuration.encodeParam({ name: "id", value: id, in: "path", style: "simple", explode: false, dataType: "string", dataFormat: void 0 })}`;
    return this.httpClient.request("get", `${this.configuration.basePath}${localVarPath}`, {
      context: localVarHttpContext,
      responseType: responseType_,
      withCredentials: this.configuration.withCredentials,
      headers: localVarHeaders,
      observe,
      transferCache: localVarTransferCache,
      reportProgress
    });
  }
  getDevice(id, observe = "body", reportProgress = false, options) {
    if (id === null || id === void 0) {
      throw new Error("Required parameter id was null or undefined when calling getDevice.");
    }
    let localVarHeaders = this.defaultHeaders;
    let localVarCredential;
    localVarCredential = this.configuration.lookupCredential("access_token");
    if (localVarCredential) {
      localVarHeaders = localVarHeaders.set("x-access-token", localVarCredential);
    }
    let localVarHttpHeaderAcceptSelected = options && options.httpHeaderAccept;
    if (localVarHttpHeaderAcceptSelected === void 0) {
      const httpHeaderAccepts = [
        "application/json"
      ];
      localVarHttpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
    }
    if (localVarHttpHeaderAcceptSelected !== void 0) {
      localVarHeaders = localVarHeaders.set("Accept", localVarHttpHeaderAcceptSelected);
    }
    let localVarHttpContext = options && options.context;
    if (localVarHttpContext === void 0) {
      localVarHttpContext = new HttpContext();
    }
    let localVarTransferCache = options && options.transferCache;
    if (localVarTransferCache === void 0) {
      localVarTransferCache = true;
    }
    let responseType_ = "json";
    if (localVarHttpHeaderAcceptSelected) {
      if (localVarHttpHeaderAcceptSelected.startsWith("text")) {
        responseType_ = "text";
      } else if (this.configuration.isJsonMime(localVarHttpHeaderAcceptSelected)) {
        responseType_ = "json";
      } else {
        responseType_ = "blob";
      }
    }
    let localVarPath = `/entities/devices/${this.configuration.encodeParam({ name: "id", value: id, in: "path", style: "simple", explode: false, dataType: "string", dataFormat: void 0 })}`;
    return this.httpClient.request("get", `${this.configuration.basePath}${localVarPath}`, {
      context: localVarHttpContext,
      responseType: responseType_,
      withCredentials: this.configuration.withCredentials,
      headers: localVarHeaders,
      observe,
      transferCache: localVarTransferCache,
      reportProgress
    });
  }
  getDeviceByName(deviceType, deviceName, observe = "body", reportProgress = false, options) {
    if (deviceType === null || deviceType === void 0) {
      throw new Error("Required parameter deviceType was null or undefined when calling getDeviceByName.");
    }
    if (deviceName === null || deviceName === void 0) {
      throw new Error("Required parameter deviceName was null or undefined when calling getDeviceByName.");
    }
    let localVarHeaders = this.defaultHeaders;
    let localVarCredential;
    localVarCredential = this.configuration.lookupCredential("access_token");
    if (localVarCredential) {
      localVarHeaders = localVarHeaders.set("x-access-token", localVarCredential);
    }
    let localVarHttpHeaderAcceptSelected = options && options.httpHeaderAccept;
    if (localVarHttpHeaderAcceptSelected === void 0) {
      const httpHeaderAccepts = [
        "application/json"
      ];
      localVarHttpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
    }
    if (localVarHttpHeaderAcceptSelected !== void 0) {
      localVarHeaders = localVarHeaders.set("Accept", localVarHttpHeaderAcceptSelected);
    }
    let localVarHttpContext = options && options.context;
    if (localVarHttpContext === void 0) {
      localVarHttpContext = new HttpContext();
    }
    let localVarTransferCache = options && options.transferCache;
    if (localVarTransferCache === void 0) {
      localVarTransferCache = true;
    }
    let responseType_ = "json";
    if (localVarHttpHeaderAcceptSelected) {
      if (localVarHttpHeaderAcceptSelected.startsWith("text")) {
        responseType_ = "text";
      } else if (this.configuration.isJsonMime(localVarHttpHeaderAcceptSelected)) {
        responseType_ = "json";
      } else {
        responseType_ = "blob";
      }
    }
    let localVarPath = `/entities/devices/name/${this.configuration.encodeParam({ name: "deviceType", value: deviceType, in: "path", style: "simple", explode: false, dataType: "string", dataFormat: void 0 })}/${this.configuration.encodeParam({ name: "deviceName", value: deviceName, in: "path", style: "simple", explode: false, dataType: "string", dataFormat: void 0 })}`;
    return this.httpClient.request("get", `${this.configuration.basePath}${localVarPath}`, {
      context: localVarHttpContext,
      responseType: responseType_,
      withCredentials: this.configuration.withCredentials,
      headers: localVarHeaders,
      observe,
      transferCache: localVarTransferCache,
      reportProgress
    });
  }
  getDeviceConfigProfile(id, observe = "body", reportProgress = false, options) {
    if (id === null || id === void 0) {
      throw new Error("Required parameter id was null or undefined when calling getDeviceConfigProfile.");
    }
    let localVarHeaders = this.defaultHeaders;
    let localVarCredential;
    localVarCredential = this.configuration.lookupCredential("access_token");
    if (localVarCredential) {
      localVarHeaders = localVarHeaders.set("x-access-token", localVarCredential);
    }
    let localVarHttpHeaderAcceptSelected = options && options.httpHeaderAccept;
    if (localVarHttpHeaderAcceptSelected === void 0) {
      const httpHeaderAccepts = [
        "application/json"
      ];
      localVarHttpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
    }
    if (localVarHttpHeaderAcceptSelected !== void 0) {
      localVarHeaders = localVarHeaders.set("Accept", localVarHttpHeaderAcceptSelected);
    }
    let localVarHttpContext = options && options.context;
    if (localVarHttpContext === void 0) {
      localVarHttpContext = new HttpContext();
    }
    let localVarTransferCache = options && options.transferCache;
    if (localVarTransferCache === void 0) {
      localVarTransferCache = true;
    }
    let responseType_ = "json";
    if (localVarHttpHeaderAcceptSelected) {
      if (localVarHttpHeaderAcceptSelected.startsWith("text")) {
        responseType_ = "text";
      } else if (this.configuration.isJsonMime(localVarHttpHeaderAcceptSelected)) {
        responseType_ = "json";
      } else {
        responseType_ = "blob";
      }
    }
    let localVarPath = `/entities/deviceconfigprofiles/${this.configuration.encodeParam({ name: "id", value: id, in: "path", style: "simple", explode: false, dataType: "string", dataFormat: void 0 })}`;
    return this.httpClient.request("get", `${this.configuration.basePath}${localVarPath}`, {
      context: localVarHttpContext,
      responseType: responseType_,
      withCredentials: this.configuration.withCredentials,
      headers: localVarHeaders,
      observe,
      transferCache: localVarTransferCache,
      reportProgress
    });
  }
  getDeviceProvider(id, observe = "body", reportProgress = false, options) {
    if (id === null || id === void 0) {
      throw new Error("Required parameter id was null or undefined when calling getDeviceProvider.");
    }
    let localVarHeaders = this.defaultHeaders;
    let localVarCredential;
    localVarCredential = this.configuration.lookupCredential("access_token");
    if (localVarCredential) {
      localVarHeaders = localVarHeaders.set("x-access-token", localVarCredential);
    }
    let localVarHttpHeaderAcceptSelected = options && options.httpHeaderAccept;
    if (localVarHttpHeaderAcceptSelected === void 0) {
      const httpHeaderAccepts = [
        "application/json"
      ];
      localVarHttpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
    }
    if (localVarHttpHeaderAcceptSelected !== void 0) {
      localVarHeaders = localVarHeaders.set("Accept", localVarHttpHeaderAcceptSelected);
    }
    let localVarHttpContext = options && options.context;
    if (localVarHttpContext === void 0) {
      localVarHttpContext = new HttpContext();
    }
    let localVarTransferCache = options && options.transferCache;
    if (localVarTransferCache === void 0) {
      localVarTransferCache = true;
    }
    let responseType_ = "json";
    if (localVarHttpHeaderAcceptSelected) {
      if (localVarHttpHeaderAcceptSelected.startsWith("text")) {
        responseType_ = "text";
      } else if (this.configuration.isJsonMime(localVarHttpHeaderAcceptSelected)) {
        responseType_ = "json";
      } else {
        responseType_ = "blob";
      }
    }
    let localVarPath = `/entities/deviceproviders/${this.configuration.encodeParam({ name: "id", value: id, in: "path", style: "simple", explode: false, dataType: "string", dataFormat: void 0 })}`;
    return this.httpClient.request("get", `${this.configuration.basePath}${localVarPath}`, {
      context: localVarHttpContext,
      responseType: responseType_,
      withCredentials: this.configuration.withCredentials,
      headers: localVarHeaders,
      observe,
      transferCache: localVarTransferCache,
      reportProgress
    });
  }
  getDeviceProviderType(id, observe = "body", reportProgress = false, options) {
    if (id === null || id === void 0) {
      throw new Error("Required parameter id was null or undefined when calling getDeviceProviderType.");
    }
    let localVarHeaders = this.defaultHeaders;
    let localVarCredential;
    localVarCredential = this.configuration.lookupCredential("access_token");
    if (localVarCredential) {
      localVarHeaders = localVarHeaders.set("x-access-token", localVarCredential);
    }
    let localVarHttpHeaderAcceptSelected = options && options.httpHeaderAccept;
    if (localVarHttpHeaderAcceptSelected === void 0) {
      const httpHeaderAccepts = [
        "application/json"
      ];
      localVarHttpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
    }
    if (localVarHttpHeaderAcceptSelected !== void 0) {
      localVarHeaders = localVarHeaders.set("Accept", localVarHttpHeaderAcceptSelected);
    }
    let localVarHttpContext = options && options.context;
    if (localVarHttpContext === void 0) {
      localVarHttpContext = new HttpContext();
    }
    let localVarTransferCache = options && options.transferCache;
    if (localVarTransferCache === void 0) {
      localVarTransferCache = true;
    }
    let responseType_ = "json";
    if (localVarHttpHeaderAcceptSelected) {
      if (localVarHttpHeaderAcceptSelected.startsWith("text")) {
        responseType_ = "text";
      } else if (this.configuration.isJsonMime(localVarHttpHeaderAcceptSelected)) {
        responseType_ = "json";
      } else {
        responseType_ = "blob";
      }
    }
    let localVarPath = `/entities/deviceprovidertypes/${this.configuration.encodeParam({ name: "id", value: id, in: "path", style: "simple", explode: false, dataType: "string", dataFormat: void 0 })}`;
    return this.httpClient.request("get", `${this.configuration.basePath}${localVarPath}`, {
      context: localVarHttpContext,
      responseType: responseType_,
      withCredentials: this.configuration.withCredentials,
      headers: localVarHeaders,
      observe,
      transferCache: localVarTransferCache,
      reportProgress
    });
  }
  getDeviceType(id, owner, observe = "body", reportProgress = false, options) {
    if (id === null || id === void 0) {
      throw new Error("Required parameter id was null or undefined when calling getDeviceType.");
    }
    let localVarQueryParameters = new HttpParams({ encoder: this.encoder });
    if (owner !== void 0 && owner !== null) {
      localVarQueryParameters = this.addToHttpParams(localVarQueryParameters, owner, "owner");
    }
    let localVarHeaders = this.defaultHeaders;
    let localVarCredential;
    localVarCredential = this.configuration.lookupCredential("access_token");
    if (localVarCredential) {
      localVarHeaders = localVarHeaders.set("x-access-token", localVarCredential);
    }
    let localVarHttpHeaderAcceptSelected = options && options.httpHeaderAccept;
    if (localVarHttpHeaderAcceptSelected === void 0) {
      const httpHeaderAccepts = [
        "application/json"
      ];
      localVarHttpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
    }
    if (localVarHttpHeaderAcceptSelected !== void 0) {
      localVarHeaders = localVarHeaders.set("Accept", localVarHttpHeaderAcceptSelected);
    }
    let localVarHttpContext = options && options.context;
    if (localVarHttpContext === void 0) {
      localVarHttpContext = new HttpContext();
    }
    let localVarTransferCache = options && options.transferCache;
    if (localVarTransferCache === void 0) {
      localVarTransferCache = true;
    }
    let responseType_ = "json";
    if (localVarHttpHeaderAcceptSelected) {
      if (localVarHttpHeaderAcceptSelected.startsWith("text")) {
        responseType_ = "text";
      } else if (this.configuration.isJsonMime(localVarHttpHeaderAcceptSelected)) {
        responseType_ = "json";
      } else {
        responseType_ = "blob";
      }
    }
    let localVarPath = `/entities/devicetypes/${this.configuration.encodeParam({ name: "id", value: id, in: "path", style: "simple", explode: false, dataType: "string", dataFormat: void 0 })}`;
    return this.httpClient.request("get", `${this.configuration.basePath}${localVarPath}`, {
      context: localVarHttpContext,
      params: localVarQueryParameters,
      responseType: responseType_,
      withCredentials: this.configuration.withCredentials,
      headers: localVarHeaders,
      observe,
      transferCache: localVarTransferCache,
      reportProgress
    });
  }
  getEmailProvider(id, observe = "body", reportProgress = false, options) {
    if (id === null || id === void 0) {
      throw new Error("Required parameter id was null or undefined when calling getEmailProvider.");
    }
    let localVarHeaders = this.defaultHeaders;
    let localVarCredential;
    localVarCredential = this.configuration.lookupCredential("access_token");
    if (localVarCredential) {
      localVarHeaders = localVarHeaders.set("x-access-token", localVarCredential);
    }
    let localVarHttpHeaderAcceptSelected = options && options.httpHeaderAccept;
    if (localVarHttpHeaderAcceptSelected === void 0) {
      const httpHeaderAccepts = [
        "application/json"
      ];
      localVarHttpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
    }
    if (localVarHttpHeaderAcceptSelected !== void 0) {
      localVarHeaders = localVarHeaders.set("Accept", localVarHttpHeaderAcceptSelected);
    }
    let localVarHttpContext = options && options.context;
    if (localVarHttpContext === void 0) {
      localVarHttpContext = new HttpContext();
    }
    let localVarTransferCache = options && options.transferCache;
    if (localVarTransferCache === void 0) {
      localVarTransferCache = true;
    }
    let responseType_ = "json";
    if (localVarHttpHeaderAcceptSelected) {
      if (localVarHttpHeaderAcceptSelected.startsWith("text")) {
        responseType_ = "text";
      } else if (this.configuration.isJsonMime(localVarHttpHeaderAcceptSelected)) {
        responseType_ = "json";
      } else {
        responseType_ = "blob";
      }
    }
    let localVarPath = `/entities/emailproviders/${this.configuration.encodeParam({ name: "id", value: id, in: "path", style: "simple", explode: false, dataType: "string", dataFormat: void 0 })}`;
    return this.httpClient.request("get", `${this.configuration.basePath}${localVarPath}`, {
      context: localVarHttpContext,
      responseType: responseType_,
      withCredentials: this.configuration.withCredentials,
      headers: localVarHeaders,
      observe,
      transferCache: localVarTransferCache,
      reportProgress
    });
  }
  getEmailProviderType(id, observe = "body", reportProgress = false, options) {
    if (id === null || id === void 0) {
      throw new Error("Required parameter id was null or undefined when calling getEmailProviderType.");
    }
    let localVarHeaders = this.defaultHeaders;
    let localVarCredential;
    localVarCredential = this.configuration.lookupCredential("access_token");
    if (localVarCredential) {
      localVarHeaders = localVarHeaders.set("x-access-token", localVarCredential);
    }
    let localVarHttpHeaderAcceptSelected = options && options.httpHeaderAccept;
    if (localVarHttpHeaderAcceptSelected === void 0) {
      const httpHeaderAccepts = [
        "application/json"
      ];
      localVarHttpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
    }
    if (localVarHttpHeaderAcceptSelected !== void 0) {
      localVarHeaders = localVarHeaders.set("Accept", localVarHttpHeaderAcceptSelected);
    }
    let localVarHttpContext = options && options.context;
    if (localVarHttpContext === void 0) {
      localVarHttpContext = new HttpContext();
    }
    let localVarTransferCache = options && options.transferCache;
    if (localVarTransferCache === void 0) {
      localVarTransferCache = true;
    }
    let responseType_ = "json";
    if (localVarHttpHeaderAcceptSelected) {
      if (localVarHttpHeaderAcceptSelected.startsWith("text")) {
        responseType_ = "text";
      } else if (this.configuration.isJsonMime(localVarHttpHeaderAcceptSelected)) {
        responseType_ = "json";
      } else {
        responseType_ = "blob";
      }
    }
    let localVarPath = `/entities/emailprovidertypes/${this.configuration.encodeParam({ name: "id", value: id, in: "path", style: "simple", explode: false, dataType: "string", dataFormat: void 0 })}`;
    return this.httpClient.request("get", `${this.configuration.basePath}${localVarPath}`, {
      context: localVarHttpContext,
      responseType: responseType_,
      withCredentials: this.configuration.withCredentials,
      headers: localVarHeaders,
      observe,
      transferCache: localVarTransferCache,
      reportProgress
    });
  }
  getExportTask(id, observe = "body", reportProgress = false, options) {
    if (id === null || id === void 0) {
      throw new Error("Required parameter id was null or undefined when calling getExportTask.");
    }
    let localVarHeaders = this.defaultHeaders;
    let localVarCredential;
    localVarCredential = this.configuration.lookupCredential("access_token");
    if (localVarCredential) {
      localVarHeaders = localVarHeaders.set("x-access-token", localVarCredential);
    }
    let localVarHttpHeaderAcceptSelected = options && options.httpHeaderAccept;
    if (localVarHttpHeaderAcceptSelected === void 0) {
      const httpHeaderAccepts = [
        "application/json"
      ];
      localVarHttpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
    }
    if (localVarHttpHeaderAcceptSelected !== void 0) {
      localVarHeaders = localVarHeaders.set("Accept", localVarHttpHeaderAcceptSelected);
    }
    let localVarHttpContext = options && options.context;
    if (localVarHttpContext === void 0) {
      localVarHttpContext = new HttpContext();
    }
    let localVarTransferCache = options && options.transferCache;
    if (localVarTransferCache === void 0) {
      localVarTransferCache = true;
    }
    let responseType_ = "json";
    if (localVarHttpHeaderAcceptSelected) {
      if (localVarHttpHeaderAcceptSelected.startsWith("text")) {
        responseType_ = "text";
      } else if (this.configuration.isJsonMime(localVarHttpHeaderAcceptSelected)) {
        responseType_ = "json";
      } else {
        responseType_ = "blob";
      }
    }
    let localVarPath = `/entities/exporttasks/${this.configuration.encodeParam({ name: "id", value: id, in: "path", style: "simple", explode: false, dataType: "string", dataFormat: void 0 })}`;
    return this.httpClient.request("get", `${this.configuration.basePath}${localVarPath}`, {
      context: localVarHttpContext,
      responseType: responseType_,
      withCredentials: this.configuration.withCredentials,
      headers: localVarHeaders,
      observe,
      transferCache: localVarTransferCache,
      reportProgress
    });
  }
  getFuelCard(id, observe = "body", reportProgress = false, options) {
    if (id === null || id === void 0) {
      throw new Error("Required parameter id was null or undefined when calling getFuelCard.");
    }
    let localVarHeaders = this.defaultHeaders;
    let localVarCredential;
    localVarCredential = this.configuration.lookupCredential("access_token");
    if (localVarCredential) {
      localVarHeaders = localVarHeaders.set("x-access-token", localVarCredential);
    }
    let localVarHttpHeaderAcceptSelected = options && options.httpHeaderAccept;
    if (localVarHttpHeaderAcceptSelected === void 0) {
      const httpHeaderAccepts = [
        "application/json"
      ];
      localVarHttpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
    }
    if (localVarHttpHeaderAcceptSelected !== void 0) {
      localVarHeaders = localVarHeaders.set("Accept", localVarHttpHeaderAcceptSelected);
    }
    let localVarHttpContext = options && options.context;
    if (localVarHttpContext === void 0) {
      localVarHttpContext = new HttpContext();
    }
    let localVarTransferCache = options && options.transferCache;
    if (localVarTransferCache === void 0) {
      localVarTransferCache = true;
    }
    let responseType_ = "json";
    if (localVarHttpHeaderAcceptSelected) {
      if (localVarHttpHeaderAcceptSelected.startsWith("text")) {
        responseType_ = "text";
      } else if (this.configuration.isJsonMime(localVarHttpHeaderAcceptSelected)) {
        responseType_ = "json";
      } else {
        responseType_ = "blob";
      }
    }
    let localVarPath = `/entities/fuelcards/${this.configuration.encodeParam({ name: "id", value: id, in: "path", style: "simple", explode: false, dataType: "string", dataFormat: void 0 })}`;
    return this.httpClient.request("get", `${this.configuration.basePath}${localVarPath}`, {
      context: localVarHttpContext,
      responseType: responseType_,
      withCredentials: this.configuration.withCredentials,
      headers: localVarHeaders,
      observe,
      transferCache: localVarTransferCache,
      reportProgress
    });
  }
  getGeoLockProfile(id, observe = "body", reportProgress = false, options) {
    if (id === null || id === void 0) {
      throw new Error("Required parameter id was null or undefined when calling getGeoLockProfile.");
    }
    let localVarHeaders = this.defaultHeaders;
    let localVarCredential;
    localVarCredential = this.configuration.lookupCredential("access_token");
    if (localVarCredential) {
      localVarHeaders = localVarHeaders.set("x-access-token", localVarCredential);
    }
    let localVarHttpHeaderAcceptSelected = options && options.httpHeaderAccept;
    if (localVarHttpHeaderAcceptSelected === void 0) {
      const httpHeaderAccepts = [
        "application/json"
      ];
      localVarHttpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
    }
    if (localVarHttpHeaderAcceptSelected !== void 0) {
      localVarHeaders = localVarHeaders.set("Accept", localVarHttpHeaderAcceptSelected);
    }
    let localVarHttpContext = options && options.context;
    if (localVarHttpContext === void 0) {
      localVarHttpContext = new HttpContext();
    }
    let localVarTransferCache = options && options.transferCache;
    if (localVarTransferCache === void 0) {
      localVarTransferCache = true;
    }
    let responseType_ = "json";
    if (localVarHttpHeaderAcceptSelected) {
      if (localVarHttpHeaderAcceptSelected.startsWith("text")) {
        responseType_ = "text";
      } else if (this.configuration.isJsonMime(localVarHttpHeaderAcceptSelected)) {
        responseType_ = "json";
      } else {
        responseType_ = "blob";
      }
    }
    let localVarPath = `/entities/geolockprofiles/${this.configuration.encodeParam({ name: "id", value: id, in: "path", style: "simple", explode: false, dataType: "string", dataFormat: void 0 })}`;
    return this.httpClient.request("get", `${this.configuration.basePath}${localVarPath}`, {
      context: localVarHttpContext,
      responseType: responseType_,
      withCredentials: this.configuration.withCredentials,
      headers: localVarHeaders,
      observe,
      transferCache: localVarTransferCache,
      reportProgress
    });
  }
  getIoType(id, observe = "body", reportProgress = false, options) {
    if (id === null || id === void 0) {
      throw new Error("Required parameter id was null or undefined when calling getIoType.");
    }
    let localVarHeaders = this.defaultHeaders;
    let localVarCredential;
    localVarCredential = this.configuration.lookupCredential("access_token");
    if (localVarCredential) {
      localVarHeaders = localVarHeaders.set("x-access-token", localVarCredential);
    }
    let localVarHttpHeaderAcceptSelected = options && options.httpHeaderAccept;
    if (localVarHttpHeaderAcceptSelected === void 0) {
      const httpHeaderAccepts = [
        "application/json"
      ];
      localVarHttpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
    }
    if (localVarHttpHeaderAcceptSelected !== void 0) {
      localVarHeaders = localVarHeaders.set("Accept", localVarHttpHeaderAcceptSelected);
    }
    let localVarHttpContext = options && options.context;
    if (localVarHttpContext === void 0) {
      localVarHttpContext = new HttpContext();
    }
    let localVarTransferCache = options && options.transferCache;
    if (localVarTransferCache === void 0) {
      localVarTransferCache = true;
    }
    let responseType_ = "json";
    if (localVarHttpHeaderAcceptSelected) {
      if (localVarHttpHeaderAcceptSelected.startsWith("text")) {
        responseType_ = "text";
      } else if (this.configuration.isJsonMime(localVarHttpHeaderAcceptSelected)) {
        responseType_ = "json";
      } else {
        responseType_ = "blob";
      }
    }
    let localVarPath = `/entities/iotypes/${this.configuration.encodeParam({ name: "id", value: id, in: "path", style: "simple", explode: false, dataType: "string", dataFormat: void 0 })}`;
    return this.httpClient.request("get", `${this.configuration.basePath}${localVarPath}`, {
      context: localVarHttpContext,
      responseType: responseType_,
      withCredentials: this.configuration.withCredentials,
      headers: localVarHeaders,
      observe,
      transferCache: localVarTransferCache,
      reportProgress
    });
  }
  getLabel(id, observe = "body", reportProgress = false, options) {
    if (id === null || id === void 0) {
      throw new Error("Required parameter id was null or undefined when calling getLabel.");
    }
    let localVarHeaders = this.defaultHeaders;
    let localVarCredential;
    localVarCredential = this.configuration.lookupCredential("access_token");
    if (localVarCredential) {
      localVarHeaders = localVarHeaders.set("x-access-token", localVarCredential);
    }
    let localVarHttpHeaderAcceptSelected = options && options.httpHeaderAccept;
    if (localVarHttpHeaderAcceptSelected === void 0) {
      const httpHeaderAccepts = [
        "application/json"
      ];
      localVarHttpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
    }
    if (localVarHttpHeaderAcceptSelected !== void 0) {
      localVarHeaders = localVarHeaders.set("Accept", localVarHttpHeaderAcceptSelected);
    }
    let localVarHttpContext = options && options.context;
    if (localVarHttpContext === void 0) {
      localVarHttpContext = new HttpContext();
    }
    let localVarTransferCache = options && options.transferCache;
    if (localVarTransferCache === void 0) {
      localVarTransferCache = true;
    }
    let responseType_ = "json";
    if (localVarHttpHeaderAcceptSelected) {
      if (localVarHttpHeaderAcceptSelected.startsWith("text")) {
        responseType_ = "text";
      } else if (this.configuration.isJsonMime(localVarHttpHeaderAcceptSelected)) {
        responseType_ = "json";
      } else {
        responseType_ = "blob";
      }
    }
    let localVarPath = `/entities/labels/${this.configuration.encodeParam({ name: "id", value: id, in: "path", style: "simple", explode: false, dataType: "string", dataFormat: void 0 })}`;
    return this.httpClient.request("get", `${this.configuration.basePath}${localVarPath}`, {
      context: localVarHttpContext,
      responseType: responseType_,
      withCredentials: this.configuration.withCredentials,
      headers: localVarHeaders,
      observe,
      transferCache: localVarTransferCache,
      reportProgress
    });
  }
  getLookups(entity, observe = "body", reportProgress = false, options) {
    if (entity === null || entity === void 0) {
      throw new Error("Required parameter entity was null or undefined when calling getLookups.");
    }
    let localVarHeaders = this.defaultHeaders;
    let localVarCredential;
    localVarCredential = this.configuration.lookupCredential("access_token");
    if (localVarCredential) {
      localVarHeaders = localVarHeaders.set("x-access-token", localVarCredential);
    }
    let localVarHttpHeaderAcceptSelected = options && options.httpHeaderAccept;
    if (localVarHttpHeaderAcceptSelected === void 0) {
      const httpHeaderAccepts = [
        "application/json"
      ];
      localVarHttpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
    }
    if (localVarHttpHeaderAcceptSelected !== void 0) {
      localVarHeaders = localVarHeaders.set("Accept", localVarHttpHeaderAcceptSelected);
    }
    let localVarHttpContext = options && options.context;
    if (localVarHttpContext === void 0) {
      localVarHttpContext = new HttpContext();
    }
    let localVarTransferCache = options && options.transferCache;
    if (localVarTransferCache === void 0) {
      localVarTransferCache = true;
    }
    let responseType_ = "json";
    if (localVarHttpHeaderAcceptSelected) {
      if (localVarHttpHeaderAcceptSelected.startsWith("text")) {
        responseType_ = "text";
      } else if (this.configuration.isJsonMime(localVarHttpHeaderAcceptSelected)) {
        responseType_ = "json";
      } else {
        responseType_ = "blob";
      }
    }
    let localVarPath = `/entities/lookups/${this.configuration.encodeParam({ name: "entity", value: entity, in: "path", style: "simple", explode: false, dataType: "string", dataFormat: void 0 })}`;
    return this.httpClient.request("get", `${this.configuration.basePath}${localVarPath}`, {
      context: localVarHttpContext,
      responseType: responseType_,
      withCredentials: this.configuration.withCredentials,
      headers: localVarHeaders,
      observe,
      transferCache: localVarTransferCache,
      reportProgress
    });
  }
  getMapSet(id, observe = "body", reportProgress = false, options) {
    if (id === null || id === void 0) {
      throw new Error("Required parameter id was null or undefined when calling getMapSet.");
    }
    let localVarHeaders = this.defaultHeaders;
    let localVarCredential;
    localVarCredential = this.configuration.lookupCredential("access_token");
    if (localVarCredential) {
      localVarHeaders = localVarHeaders.set("x-access-token", localVarCredential);
    }
    let localVarHttpHeaderAcceptSelected = options && options.httpHeaderAccept;
    if (localVarHttpHeaderAcceptSelected === void 0) {
      const httpHeaderAccepts = [
        "application/json"
      ];
      localVarHttpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
    }
    if (localVarHttpHeaderAcceptSelected !== void 0) {
      localVarHeaders = localVarHeaders.set("Accept", localVarHttpHeaderAcceptSelected);
    }
    let localVarHttpContext = options && options.context;
    if (localVarHttpContext === void 0) {
      localVarHttpContext = new HttpContext();
    }
    let localVarTransferCache = options && options.transferCache;
    if (localVarTransferCache === void 0) {
      localVarTransferCache = true;
    }
    let responseType_ = "json";
    if (localVarHttpHeaderAcceptSelected) {
      if (localVarHttpHeaderAcceptSelected.startsWith("text")) {
        responseType_ = "text";
      } else if (this.configuration.isJsonMime(localVarHttpHeaderAcceptSelected)) {
        responseType_ = "json";
      } else {
        responseType_ = "blob";
      }
    }
    let localVarPath = `/entities/mapsets/${this.configuration.encodeParam({ name: "id", value: id, in: "path", style: "simple", explode: false, dataType: "string", dataFormat: void 0 })}`;
    return this.httpClient.request("get", `${this.configuration.basePath}${localVarPath}`, {
      context: localVarHttpContext,
      responseType: responseType_,
      withCredentials: this.configuration.withCredentials,
      headers: localVarHeaders,
      observe,
      transferCache: localVarTransferCache,
      reportProgress
    });
  }
  getOverspeedProfile(id, observe = "body", reportProgress = false, options) {
    if (id === null || id === void 0) {
      throw new Error("Required parameter id was null or undefined when calling getOverspeedProfile.");
    }
    let localVarHeaders = this.defaultHeaders;
    let localVarCredential;
    localVarCredential = this.configuration.lookupCredential("access_token");
    if (localVarCredential) {
      localVarHeaders = localVarHeaders.set("x-access-token", localVarCredential);
    }
    let localVarHttpHeaderAcceptSelected = options && options.httpHeaderAccept;
    if (localVarHttpHeaderAcceptSelected === void 0) {
      const httpHeaderAccepts = [
        "application/json"
      ];
      localVarHttpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
    }
    if (localVarHttpHeaderAcceptSelected !== void 0) {
      localVarHeaders = localVarHeaders.set("Accept", localVarHttpHeaderAcceptSelected);
    }
    let localVarHttpContext = options && options.context;
    if (localVarHttpContext === void 0) {
      localVarHttpContext = new HttpContext();
    }
    let localVarTransferCache = options && options.transferCache;
    if (localVarTransferCache === void 0) {
      localVarTransferCache = true;
    }
    let responseType_ = "json";
    if (localVarHttpHeaderAcceptSelected) {
      if (localVarHttpHeaderAcceptSelected.startsWith("text")) {
        responseType_ = "text";
      } else if (this.configuration.isJsonMime(localVarHttpHeaderAcceptSelected)) {
        responseType_ = "json";
      } else {
        responseType_ = "blob";
      }
    }
    let localVarPath = `/entities/overspeedprofiles/${this.configuration.encodeParam({ name: "id", value: id, in: "path", style: "simple", explode: false, dataType: "string", dataFormat: void 0 })}`;
    return this.httpClient.request("get", `${this.configuration.basePath}${localVarPath}`, {
      context: localVarHttpContext,
      responseType: responseType_,
      withCredentials: this.configuration.withCredentials,
      headers: localVarHeaders,
      observe,
      transferCache: localVarTransferCache,
      reportProgress
    });
  }
  getReminder(id, observe = "body", reportProgress = false, options) {
    if (id === null || id === void 0) {
      throw new Error("Required parameter id was null or undefined when calling getReminder.");
    }
    let localVarHeaders = this.defaultHeaders;
    let localVarCredential;
    localVarCredential = this.configuration.lookupCredential("access_token");
    if (localVarCredential) {
      localVarHeaders = localVarHeaders.set("x-access-token", localVarCredential);
    }
    let localVarHttpHeaderAcceptSelected = options && options.httpHeaderAccept;
    if (localVarHttpHeaderAcceptSelected === void 0) {
      const httpHeaderAccepts = [
        "application/json"
      ];
      localVarHttpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
    }
    if (localVarHttpHeaderAcceptSelected !== void 0) {
      localVarHeaders = localVarHeaders.set("Accept", localVarHttpHeaderAcceptSelected);
    }
    let localVarHttpContext = options && options.context;
    if (localVarHttpContext === void 0) {
      localVarHttpContext = new HttpContext();
    }
    let localVarTransferCache = options && options.transferCache;
    if (localVarTransferCache === void 0) {
      localVarTransferCache = true;
    }
    let responseType_ = "json";
    if (localVarHttpHeaderAcceptSelected) {
      if (localVarHttpHeaderAcceptSelected.startsWith("text")) {
        responseType_ = "text";
      } else if (this.configuration.isJsonMime(localVarHttpHeaderAcceptSelected)) {
        responseType_ = "json";
      } else {
        responseType_ = "blob";
      }
    }
    let localVarPath = `/entities/reminders/${this.configuration.encodeParam({ name: "id", value: id, in: "path", style: "simple", explode: false, dataType: "string", dataFormat: void 0 })}`;
    return this.httpClient.request("get", `${this.configuration.basePath}${localVarPath}`, {
      context: localVarHttpContext,
      responseType: responseType_,
      withCredentials: this.configuration.withCredentials,
      headers: localVarHeaders,
      observe,
      transferCache: localVarTransferCache,
      reportProgress
    });
  }
  getReportDefinition(id, observe = "body", reportProgress = false, options) {
    if (id === null || id === void 0) {
      throw new Error("Required parameter id was null or undefined when calling getReportDefinition.");
    }
    let localVarHeaders = this.defaultHeaders;
    let localVarCredential;
    localVarCredential = this.configuration.lookupCredential("access_token");
    if (localVarCredential) {
      localVarHeaders = localVarHeaders.set("x-access-token", localVarCredential);
    }
    let localVarHttpHeaderAcceptSelected = options && options.httpHeaderAccept;
    if (localVarHttpHeaderAcceptSelected === void 0) {
      const httpHeaderAccepts = [
        "application/json"
      ];
      localVarHttpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
    }
    if (localVarHttpHeaderAcceptSelected !== void 0) {
      localVarHeaders = localVarHeaders.set("Accept", localVarHttpHeaderAcceptSelected);
    }
    let localVarHttpContext = options && options.context;
    if (localVarHttpContext === void 0) {
      localVarHttpContext = new HttpContext();
    }
    let localVarTransferCache = options && options.transferCache;
    if (localVarTransferCache === void 0) {
      localVarTransferCache = true;
    }
    let responseType_ = "json";
    if (localVarHttpHeaderAcceptSelected) {
      if (localVarHttpHeaderAcceptSelected.startsWith("text")) {
        responseType_ = "text";
      } else if (this.configuration.isJsonMime(localVarHttpHeaderAcceptSelected)) {
        responseType_ = "json";
      } else {
        responseType_ = "blob";
      }
    }
    let localVarPath = `/entities/reportdefinitions/${this.configuration.encodeParam({ name: "id", value: id, in: "path", style: "simple", explode: false, dataType: "string", dataFormat: void 0 })}`;
    return this.httpClient.request("get", `${this.configuration.basePath}${localVarPath}`, {
      context: localVarHttpContext,
      responseType: responseType_,
      withCredentials: this.configuration.withCredentials,
      headers: localVarHeaders,
      observe,
      transferCache: localVarTransferCache,
      reportProgress
    });
  }
  getReportTemplate(id, observe = "body", reportProgress = false, options) {
    if (id === null || id === void 0) {
      throw new Error("Required parameter id was null or undefined when calling getReportTemplate.");
    }
    let localVarHeaders = this.defaultHeaders;
    let localVarCredential;
    localVarCredential = this.configuration.lookupCredential("access_token");
    if (localVarCredential) {
      localVarHeaders = localVarHeaders.set("x-access-token", localVarCredential);
    }
    let localVarHttpHeaderAcceptSelected = options && options.httpHeaderAccept;
    if (localVarHttpHeaderAcceptSelected === void 0) {
      const httpHeaderAccepts = [
        "application/json"
      ];
      localVarHttpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
    }
    if (localVarHttpHeaderAcceptSelected !== void 0) {
      localVarHeaders = localVarHeaders.set("Accept", localVarHttpHeaderAcceptSelected);
    }
    let localVarHttpContext = options && options.context;
    if (localVarHttpContext === void 0) {
      localVarHttpContext = new HttpContext();
    }
    let localVarTransferCache = options && options.transferCache;
    if (localVarTransferCache === void 0) {
      localVarTransferCache = true;
    }
    let responseType_ = "json";
    if (localVarHttpHeaderAcceptSelected) {
      if (localVarHttpHeaderAcceptSelected.startsWith("text")) {
        responseType_ = "text";
      } else if (this.configuration.isJsonMime(localVarHttpHeaderAcceptSelected)) {
        responseType_ = "json";
      } else {
        responseType_ = "blob";
      }
    }
    let localVarPath = `/entities/reporttemplates/${this.configuration.encodeParam({ name: "id", value: id, in: "path", style: "simple", explode: false, dataType: "string", dataFormat: void 0 })}`;
    return this.httpClient.request("get", `${this.configuration.basePath}${localVarPath}`, {
      context: localVarHttpContext,
      responseType: responseType_,
      withCredentials: this.configuration.withCredentials,
      headers: localVarHeaders,
      observe,
      transferCache: localVarTransferCache,
      reportProgress
    });
  }
  getRoadProfile(id, observe = "body", reportProgress = false, options) {
    if (id === null || id === void 0) {
      throw new Error("Required parameter id was null or undefined when calling getRoadProfile.");
    }
    let localVarHeaders = this.defaultHeaders;
    let localVarCredential;
    localVarCredential = this.configuration.lookupCredential("access_token");
    if (localVarCredential) {
      localVarHeaders = localVarHeaders.set("x-access-token", localVarCredential);
    }
    let localVarHttpHeaderAcceptSelected = options && options.httpHeaderAccept;
    if (localVarHttpHeaderAcceptSelected === void 0) {
      const httpHeaderAccepts = [
        "application/json"
      ];
      localVarHttpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
    }
    if (localVarHttpHeaderAcceptSelected !== void 0) {
      localVarHeaders = localVarHeaders.set("Accept", localVarHttpHeaderAcceptSelected);
    }
    let localVarHttpContext = options && options.context;
    if (localVarHttpContext === void 0) {
      localVarHttpContext = new HttpContext();
    }
    let localVarTransferCache = options && options.transferCache;
    if (localVarTransferCache === void 0) {
      localVarTransferCache = true;
    }
    let responseType_ = "json";
    if (localVarHttpHeaderAcceptSelected) {
      if (localVarHttpHeaderAcceptSelected.startsWith("text")) {
        responseType_ = "text";
      } else if (this.configuration.isJsonMime(localVarHttpHeaderAcceptSelected)) {
        responseType_ = "json";
      } else {
        responseType_ = "blob";
      }
    }
    let localVarPath = `/entities/roadprofiles/${this.configuration.encodeParam({ name: "id", value: id, in: "path", style: "simple", explode: false, dataType: "string", dataFormat: void 0 })}`;
    return this.httpClient.request("get", `${this.configuration.basePath}${localVarPath}`, {
      context: localVarHttpContext,
      responseType: responseType_,
      withCredentials: this.configuration.withCredentials,
      headers: localVarHeaders,
      observe,
      transferCache: localVarTransferCache,
      reportProgress
    });
  }
  getScheduledReport(id, observe = "body", reportProgress = false, options) {
    if (id === null || id === void 0) {
      throw new Error("Required parameter id was null or undefined when calling getScheduledReport.");
    }
    let localVarHeaders = this.defaultHeaders;
    let localVarCredential;
    localVarCredential = this.configuration.lookupCredential("access_token");
    if (localVarCredential) {
      localVarHeaders = localVarHeaders.set("x-access-token", localVarCredential);
    }
    let localVarHttpHeaderAcceptSelected = options && options.httpHeaderAccept;
    if (localVarHttpHeaderAcceptSelected === void 0) {
      const httpHeaderAccepts = [
        "application/json"
      ];
      localVarHttpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
    }
    if (localVarHttpHeaderAcceptSelected !== void 0) {
      localVarHeaders = localVarHeaders.set("Accept", localVarHttpHeaderAcceptSelected);
    }
    let localVarHttpContext = options && options.context;
    if (localVarHttpContext === void 0) {
      localVarHttpContext = new HttpContext();
    }
    let localVarTransferCache = options && options.transferCache;
    if (localVarTransferCache === void 0) {
      localVarTransferCache = true;
    }
    let responseType_ = "json";
    if (localVarHttpHeaderAcceptSelected) {
      if (localVarHttpHeaderAcceptSelected.startsWith("text")) {
        responseType_ = "text";
      } else if (this.configuration.isJsonMime(localVarHttpHeaderAcceptSelected)) {
        responseType_ = "json";
      } else {
        responseType_ = "blob";
      }
    }
    let localVarPath = `/entities/scheduledreports/${this.configuration.encodeParam({ name: "id", value: id, in: "path", style: "simple", explode: false, dataType: "string", dataFormat: void 0 })}`;
    return this.httpClient.request("get", `${this.configuration.basePath}${localVarPath}`, {
      context: localVarHttpContext,
      responseType: responseType_,
      withCredentials: this.configuration.withCredentials,
      headers: localVarHeaders,
      observe,
      transferCache: localVarTransferCache,
      reportProgress
    });
  }
  getSharedAssetLocation(token, observe = "body", reportProgress = false, options) {
    if (token === null || token === void 0) {
      throw new Error("Required parameter token was null or undefined when calling getSharedAssetLocation.");
    }
    let localVarHeaders = this.defaultHeaders;
    let localVarHttpHeaderAcceptSelected = options && options.httpHeaderAccept;
    if (localVarHttpHeaderAcceptSelected === void 0) {
      const httpHeaderAccepts = [
        "application/json"
      ];
      localVarHttpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
    }
    if (localVarHttpHeaderAcceptSelected !== void 0) {
      localVarHeaders = localVarHeaders.set("Accept", localVarHttpHeaderAcceptSelected);
    }
    let localVarHttpContext = options && options.context;
    if (localVarHttpContext === void 0) {
      localVarHttpContext = new HttpContext();
    }
    let localVarTransferCache = options && options.transferCache;
    if (localVarTransferCache === void 0) {
      localVarTransferCache = true;
    }
    let responseType_ = "json";
    if (localVarHttpHeaderAcceptSelected) {
      if (localVarHttpHeaderAcceptSelected.startsWith("text")) {
        responseType_ = "text";
      } else if (this.configuration.isJsonMime(localVarHttpHeaderAcceptSelected)) {
        responseType_ = "json";
      } else {
        responseType_ = "blob";
      }
    }
    let localVarPath = `/entities/assets/shared/location/${this.configuration.encodeParam({ name: "token", value: token, in: "path", style: "simple", explode: false, dataType: "string", dataFormat: void 0 })}`;
    return this.httpClient.request("get", `${this.configuration.basePath}${localVarPath}`, {
      context: localVarHttpContext,
      responseType: responseType_,
      withCredentials: this.configuration.withCredentials,
      headers: localVarHeaders,
      observe,
      transferCache: localVarTransferCache,
      reportProgress
    });
  }
  getSimCard(id, observe = "body", reportProgress = false, options) {
    if (id === null || id === void 0) {
      throw new Error("Required parameter id was null or undefined when calling getSimCard.");
    }
    let localVarHeaders = this.defaultHeaders;
    let localVarCredential;
    localVarCredential = this.configuration.lookupCredential("access_token");
    if (localVarCredential) {
      localVarHeaders = localVarHeaders.set("x-access-token", localVarCredential);
    }
    let localVarHttpHeaderAcceptSelected = options && options.httpHeaderAccept;
    if (localVarHttpHeaderAcceptSelected === void 0) {
      const httpHeaderAccepts = [
        "application/json"
      ];
      localVarHttpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
    }
    if (localVarHttpHeaderAcceptSelected !== void 0) {
      localVarHeaders = localVarHeaders.set("Accept", localVarHttpHeaderAcceptSelected);
    }
    let localVarHttpContext = options && options.context;
    if (localVarHttpContext === void 0) {
      localVarHttpContext = new HttpContext();
    }
    let localVarTransferCache = options && options.transferCache;
    if (localVarTransferCache === void 0) {
      localVarTransferCache = true;
    }
    let responseType_ = "json";
    if (localVarHttpHeaderAcceptSelected) {
      if (localVarHttpHeaderAcceptSelected.startsWith("text")) {
        responseType_ = "text";
      } else if (this.configuration.isJsonMime(localVarHttpHeaderAcceptSelected)) {
        responseType_ = "json";
      } else {
        responseType_ = "blob";
      }
    }
    let localVarPath = `/entities/simcards/${this.configuration.encodeParam({ name: "id", value: id, in: "path", style: "simple", explode: false, dataType: "string", dataFormat: void 0 })}`;
    return this.httpClient.request("get", `${this.configuration.basePath}${localVarPath}`, {
      context: localVarHttpContext,
      responseType: responseType_,
      withCredentials: this.configuration.withCredentials,
      headers: localVarHeaders,
      observe,
      transferCache: localVarTransferCache,
      reportProgress
    });
  }
  getSmsGatewayProvider(id, observe = "body", reportProgress = false, options) {
    if (id === null || id === void 0) {
      throw new Error("Required parameter id was null or undefined when calling getSmsGatewayProvider.");
    }
    let localVarHeaders = this.defaultHeaders;
    let localVarCredential;
    localVarCredential = this.configuration.lookupCredential("access_token");
    if (localVarCredential) {
      localVarHeaders = localVarHeaders.set("x-access-token", localVarCredential);
    }
    let localVarHttpHeaderAcceptSelected = options && options.httpHeaderAccept;
    if (localVarHttpHeaderAcceptSelected === void 0) {
      const httpHeaderAccepts = [
        "application/json"
      ];
      localVarHttpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
    }
    if (localVarHttpHeaderAcceptSelected !== void 0) {
      localVarHeaders = localVarHeaders.set("Accept", localVarHttpHeaderAcceptSelected);
    }
    let localVarHttpContext = options && options.context;
    if (localVarHttpContext === void 0) {
      localVarHttpContext = new HttpContext();
    }
    let localVarTransferCache = options && options.transferCache;
    if (localVarTransferCache === void 0) {
      localVarTransferCache = true;
    }
    let responseType_ = "json";
    if (localVarHttpHeaderAcceptSelected) {
      if (localVarHttpHeaderAcceptSelected.startsWith("text")) {
        responseType_ = "text";
      } else if (this.configuration.isJsonMime(localVarHttpHeaderAcceptSelected)) {
        responseType_ = "json";
      } else {
        responseType_ = "blob";
      }
    }
    let localVarPath = `/entities/smsgatewayproviders/${this.configuration.encodeParam({ name: "id", value: id, in: "path", style: "simple", explode: false, dataType: "string", dataFormat: void 0 })}`;
    return this.httpClient.request("get", `${this.configuration.basePath}${localVarPath}`, {
      context: localVarHttpContext,
      responseType: responseType_,
      withCredentials: this.configuration.withCredentials,
      headers: localVarHeaders,
      observe,
      transferCache: localVarTransferCache,
      reportProgress
    });
  }
  getSmsGatewayProviderType(id, observe = "body", reportProgress = false, options) {
    if (id === null || id === void 0) {
      throw new Error("Required parameter id was null or undefined when calling getSmsGatewayProviderType.");
    }
    let localVarHeaders = this.defaultHeaders;
    let localVarCredential;
    localVarCredential = this.configuration.lookupCredential("access_token");
    if (localVarCredential) {
      localVarHeaders = localVarHeaders.set("x-access-token", localVarCredential);
    }
    let localVarHttpHeaderAcceptSelected = options && options.httpHeaderAccept;
    if (localVarHttpHeaderAcceptSelected === void 0) {
      const httpHeaderAccepts = [
        "application/json"
      ];
      localVarHttpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
    }
    if (localVarHttpHeaderAcceptSelected !== void 0) {
      localVarHeaders = localVarHeaders.set("Accept", localVarHttpHeaderAcceptSelected);
    }
    let localVarHttpContext = options && options.context;
    if (localVarHttpContext === void 0) {
      localVarHttpContext = new HttpContext();
    }
    let localVarTransferCache = options && options.transferCache;
    if (localVarTransferCache === void 0) {
      localVarTransferCache = true;
    }
    let responseType_ = "json";
    if (localVarHttpHeaderAcceptSelected) {
      if (localVarHttpHeaderAcceptSelected.startsWith("text")) {
        responseType_ = "text";
      } else if (this.configuration.isJsonMime(localVarHttpHeaderAcceptSelected)) {
        responseType_ = "json";
      } else {
        responseType_ = "blob";
      }
    }
    let localVarPath = `/entities/smsgatewayprovidertypes/${this.configuration.encodeParam({ name: "id", value: id, in: "path", style: "simple", explode: false, dataType: "string", dataFormat: void 0 })}`;
    return this.httpClient.request("get", `${this.configuration.basePath}${localVarPath}`, {
      context: localVarHttpContext,
      responseType: responseType_,
      withCredentials: this.configuration.withCredentials,
      headers: localVarHeaders,
      observe,
      transferCache: localVarTransferCache,
      reportProgress
    });
  }
  getSslCertificate(id, observe = "body", reportProgress = false, options) {
    if (id === null || id === void 0) {
      throw new Error("Required parameter id was null or undefined when calling getSslCertificate.");
    }
    let localVarHeaders = this.defaultHeaders;
    let localVarCredential;
    localVarCredential = this.configuration.lookupCredential("access_token");
    if (localVarCredential) {
      localVarHeaders = localVarHeaders.set("x-access-token", localVarCredential);
    }
    let localVarHttpHeaderAcceptSelected = options && options.httpHeaderAccept;
    if (localVarHttpHeaderAcceptSelected === void 0) {
      const httpHeaderAccepts = [
        "application/json"
      ];
      localVarHttpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
    }
    if (localVarHttpHeaderAcceptSelected !== void 0) {
      localVarHeaders = localVarHeaders.set("Accept", localVarHttpHeaderAcceptSelected);
    }
    let localVarHttpContext = options && options.context;
    if (localVarHttpContext === void 0) {
      localVarHttpContext = new HttpContext();
    }
    let localVarTransferCache = options && options.transferCache;
    if (localVarTransferCache === void 0) {
      localVarTransferCache = true;
    }
    let responseType_ = "json";
    if (localVarHttpHeaderAcceptSelected) {
      if (localVarHttpHeaderAcceptSelected.startsWith("text")) {
        responseType_ = "text";
      } else if (this.configuration.isJsonMime(localVarHttpHeaderAcceptSelected)) {
        responseType_ = "json";
      } else {
        responseType_ = "blob";
      }
    }
    let localVarPath = `/entities/sslcertificates/${this.configuration.encodeParam({ name: "id", value: id, in: "path", style: "simple", explode: false, dataType: "string", dataFormat: void 0 })}`;
    return this.httpClient.request("get", `${this.configuration.basePath}${localVarPath}`, {
      context: localVarHttpContext,
      responseType: responseType_,
      withCredentials: this.configuration.withCredentials,
      headers: localVarHeaders,
      observe,
      transferCache: localVarTransferCache,
      reportProgress
    });
  }
  getTheme(id, observe = "body", reportProgress = false, options) {
    if (id === null || id === void 0) {
      throw new Error("Required parameter id was null or undefined when calling getTheme.");
    }
    let localVarHeaders = this.defaultHeaders;
    let localVarCredential;
    localVarCredential = this.configuration.lookupCredential("access_token");
    if (localVarCredential) {
      localVarHeaders = localVarHeaders.set("x-access-token", localVarCredential);
    }
    let localVarHttpHeaderAcceptSelected = options && options.httpHeaderAccept;
    if (localVarHttpHeaderAcceptSelected === void 0) {
      const httpHeaderAccepts = [
        "application/json"
      ];
      localVarHttpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
    }
    if (localVarHttpHeaderAcceptSelected !== void 0) {
      localVarHeaders = localVarHeaders.set("Accept", localVarHttpHeaderAcceptSelected);
    }
    let localVarHttpContext = options && options.context;
    if (localVarHttpContext === void 0) {
      localVarHttpContext = new HttpContext();
    }
    let localVarTransferCache = options && options.transferCache;
    if (localVarTransferCache === void 0) {
      localVarTransferCache = true;
    }
    let responseType_ = "json";
    if (localVarHttpHeaderAcceptSelected) {
      if (localVarHttpHeaderAcceptSelected.startsWith("text")) {
        responseType_ = "text";
      } else if (this.configuration.isJsonMime(localVarHttpHeaderAcceptSelected)) {
        responseType_ = "json";
      } else {
        responseType_ = "blob";
      }
    }
    let localVarPath = `/entities/themes/${this.configuration.encodeParam({ name: "id", value: id, in: "path", style: "simple", explode: false, dataType: "string", dataFormat: void 0 })}`;
    return this.httpClient.request("get", `${this.configuration.basePath}${localVarPath}`, {
      context: localVarHttpContext,
      responseType: responseType_,
      withCredentials: this.configuration.withCredentials,
      headers: localVarHeaders,
      observe,
      transferCache: localVarTransferCache,
      reportProgress
    });
  }
  getThemeForDomain(domain, observe = "body", reportProgress = false, options) {
    if (domain === null || domain === void 0) {
      throw new Error("Required parameter domain was null or undefined when calling getThemeForDomain.");
    }
    let localVarHeaders = this.defaultHeaders;
    let localVarHttpHeaderAcceptSelected = options && options.httpHeaderAccept;
    if (localVarHttpHeaderAcceptSelected === void 0) {
      const httpHeaderAccepts = [
        "application/json"
      ];
      localVarHttpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
    }
    if (localVarHttpHeaderAcceptSelected !== void 0) {
      localVarHeaders = localVarHeaders.set("Accept", localVarHttpHeaderAcceptSelected);
    }
    let localVarHttpContext = options && options.context;
    if (localVarHttpContext === void 0) {
      localVarHttpContext = new HttpContext();
    }
    let localVarTransferCache = options && options.transferCache;
    if (localVarTransferCache === void 0) {
      localVarTransferCache = true;
    }
    let responseType_ = "json";
    if (localVarHttpHeaderAcceptSelected) {
      if (localVarHttpHeaderAcceptSelected.startsWith("text")) {
        responseType_ = "text";
      } else if (this.configuration.isJsonMime(localVarHttpHeaderAcceptSelected)) {
        responseType_ = "json";
      } else {
        responseType_ = "blob";
      }
    }
    let localVarPath = `/entities/themes/domain/${this.configuration.encodeParam({ name: "domain", value: domain, in: "path", style: "simple", explode: false, dataType: "string", dataFormat: void 0 })}`;
    return this.httpClient.request("get", `${this.configuration.basePath}${localVarPath}`, {
      context: localVarHttpContext,
      responseType: responseType_,
      withCredentials: this.configuration.withCredentials,
      headers: localVarHeaders,
      observe,
      transferCache: localVarTransferCache,
      reportProgress
    });
  }
  getZone(id, observe = "body", reportProgress = false, options) {
    if (id === null || id === void 0) {
      throw new Error("Required parameter id was null or undefined when calling getZone.");
    }
    let localVarHeaders = this.defaultHeaders;
    let localVarCredential;
    localVarCredential = this.configuration.lookupCredential("access_token");
    if (localVarCredential) {
      localVarHeaders = localVarHeaders.set("x-access-token", localVarCredential);
    }
    let localVarHttpHeaderAcceptSelected = options && options.httpHeaderAccept;
    if (localVarHttpHeaderAcceptSelected === void 0) {
      const httpHeaderAccepts = [
        "application/json"
      ];
      localVarHttpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
    }
    if (localVarHttpHeaderAcceptSelected !== void 0) {
      localVarHeaders = localVarHeaders.set("Accept", localVarHttpHeaderAcceptSelected);
    }
    let localVarHttpContext = options && options.context;
    if (localVarHttpContext === void 0) {
      localVarHttpContext = new HttpContext();
    }
    let localVarTransferCache = options && options.transferCache;
    if (localVarTransferCache === void 0) {
      localVarTransferCache = true;
    }
    let responseType_ = "json";
    if (localVarHttpHeaderAcceptSelected) {
      if (localVarHttpHeaderAcceptSelected.startsWith("text")) {
        responseType_ = "text";
      } else if (this.configuration.isJsonMime(localVarHttpHeaderAcceptSelected)) {
        responseType_ = "json";
      } else {
        responseType_ = "blob";
      }
    }
    let localVarPath = `/entities/zones/${this.configuration.encodeParam({ name: "id", value: id, in: "path", style: "simple", explode: false, dataType: "string", dataFormat: void 0 })}`;
    return this.httpClient.request("get", `${this.configuration.basePath}${localVarPath}`, {
      context: localVarHttpContext,
      responseType: responseType_,
      withCredentials: this.configuration.withCredentials,
      headers: localVarHeaders,
      observe,
      transferCache: localVarTransferCache,
      reportProgress
    });
  }
  getZoneGroup(id, observe = "body", reportProgress = false, options) {
    if (id === null || id === void 0) {
      throw new Error("Required parameter id was null or undefined when calling getZoneGroup.");
    }
    let localVarHeaders = this.defaultHeaders;
    let localVarCredential;
    localVarCredential = this.configuration.lookupCredential("access_token");
    if (localVarCredential) {
      localVarHeaders = localVarHeaders.set("x-access-token", localVarCredential);
    }
    let localVarHttpHeaderAcceptSelected = options && options.httpHeaderAccept;
    if (localVarHttpHeaderAcceptSelected === void 0) {
      const httpHeaderAccepts = [
        "application/json"
      ];
      localVarHttpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
    }
    if (localVarHttpHeaderAcceptSelected !== void 0) {
      localVarHeaders = localVarHeaders.set("Accept", localVarHttpHeaderAcceptSelected);
    }
    let localVarHttpContext = options && options.context;
    if (localVarHttpContext === void 0) {
      localVarHttpContext = new HttpContext();
    }
    let localVarTransferCache = options && options.transferCache;
    if (localVarTransferCache === void 0) {
      localVarTransferCache = true;
    }
    let responseType_ = "json";
    if (localVarHttpHeaderAcceptSelected) {
      if (localVarHttpHeaderAcceptSelected.startsWith("text")) {
        responseType_ = "text";
      } else if (this.configuration.isJsonMime(localVarHttpHeaderAcceptSelected)) {
        responseType_ = "json";
      } else {
        responseType_ = "blob";
      }
    }
    let localVarPath = `/entities/zonegroups/${this.configuration.encodeParam({ name: "id", value: id, in: "path", style: "simple", explode: false, dataType: "string", dataFormat: void 0 })}`;
    return this.httpClient.request("get", `${this.configuration.basePath}${localVarPath}`, {
      context: localVarHttpContext,
      responseType: responseType_,
      withCredentials: this.configuration.withCredentials,
      headers: localVarHeaders,
      observe,
      transferCache: localVarTransferCache,
      reportProgress
    });
  }
  linkAssets(id, request, observe = "body", reportProgress = false, options) {
    if (id === null || id === void 0) {
      throw new Error("Required parameter id was null or undefined when calling linkAssets.");
    }
    if (request === null || request === void 0) {
      throw new Error("Required parameter request was null or undefined when calling linkAssets.");
    }
    let localVarHeaders = this.defaultHeaders;
    let localVarCredential;
    localVarCredential = this.configuration.lookupCredential("access_token");
    if (localVarCredential) {
      localVarHeaders = localVarHeaders.set("x-access-token", localVarCredential);
    }
    let localVarHttpHeaderAcceptSelected = options && options.httpHeaderAccept;
    if (localVarHttpHeaderAcceptSelected === void 0) {
      const httpHeaderAccepts = [
        "application/json"
      ];
      localVarHttpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
    }
    if (localVarHttpHeaderAcceptSelected !== void 0) {
      localVarHeaders = localVarHeaders.set("Accept", localVarHttpHeaderAcceptSelected);
    }
    let localVarHttpContext = options && options.context;
    if (localVarHttpContext === void 0) {
      localVarHttpContext = new HttpContext();
    }
    let localVarTransferCache = options && options.transferCache;
    if (localVarTransferCache === void 0) {
      localVarTransferCache = true;
    }
    const consumes = [
      "application/json"
    ];
    const httpContentTypeSelected = this.configuration.selectHeaderContentType(consumes);
    if (httpContentTypeSelected !== void 0) {
      localVarHeaders = localVarHeaders.set("Content-Type", httpContentTypeSelected);
    }
    let responseType_ = "json";
    if (localVarHttpHeaderAcceptSelected) {
      if (localVarHttpHeaderAcceptSelected.startsWith("text")) {
        responseType_ = "text";
      } else if (this.configuration.isJsonMime(localVarHttpHeaderAcceptSelected)) {
        responseType_ = "json";
      } else {
        responseType_ = "blob";
      }
    }
    let localVarPath = `/entities/assets/${this.configuration.encodeParam({ name: "id", value: id, in: "path", style: "simple", explode: false, dataType: "string", dataFormat: void 0 })}/link`;
    return this.httpClient.request("post", `${this.configuration.basePath}${localVarPath}`, {
      context: localVarHttpContext,
      body: request,
      responseType: responseType_,
      withCredentials: this.configuration.withCredentials,
      headers: localVarHeaders,
      observe,
      transferCache: localVarTransferCache,
      reportProgress
    });
  }
  listAlerts(owner, offset, limit, sort, filter, observe = "body", reportProgress = false, options) {
    if (owner === null || owner === void 0) {
      throw new Error("Required parameter owner was null or undefined when calling listAlerts.");
    }
    let localVarQueryParameters = new HttpParams({ encoder: this.encoder });
    if (owner !== void 0 && owner !== null) {
      localVarQueryParameters = this.addToHttpParams(localVarQueryParameters, owner, "owner");
    }
    if (offset !== void 0 && offset !== null) {
      localVarQueryParameters = this.addToHttpParams(localVarQueryParameters, offset, "offset");
    }
    if (limit !== void 0 && limit !== null) {
      localVarQueryParameters = this.addToHttpParams(localVarQueryParameters, limit, "limit");
    }
    if (sort !== void 0 && sort !== null) {
      localVarQueryParameters = this.addToHttpParams(localVarQueryParameters, sort, "sort");
    }
    if (filter !== void 0 && filter !== null) {
      localVarQueryParameters = this.addToHttpParams(localVarQueryParameters, filter, "filter");
    }
    let localVarHeaders = this.defaultHeaders;
    let localVarCredential;
    localVarCredential = this.configuration.lookupCredential("access_token");
    if (localVarCredential) {
      localVarHeaders = localVarHeaders.set("x-access-token", localVarCredential);
    }
    let localVarHttpHeaderAcceptSelected = options && options.httpHeaderAccept;
    if (localVarHttpHeaderAcceptSelected === void 0) {
      const httpHeaderAccepts = [
        "application/json"
      ];
      localVarHttpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
    }
    if (localVarHttpHeaderAcceptSelected !== void 0) {
      localVarHeaders = localVarHeaders.set("Accept", localVarHttpHeaderAcceptSelected);
    }
    let localVarHttpContext = options && options.context;
    if (localVarHttpContext === void 0) {
      localVarHttpContext = new HttpContext();
    }
    let localVarTransferCache = options && options.transferCache;
    if (localVarTransferCache === void 0) {
      localVarTransferCache = true;
    }
    let responseType_ = "json";
    if (localVarHttpHeaderAcceptSelected) {
      if (localVarHttpHeaderAcceptSelected.startsWith("text")) {
        responseType_ = "text";
      } else if (this.configuration.isJsonMime(localVarHttpHeaderAcceptSelected)) {
        responseType_ = "json";
      } else {
        responseType_ = "blob";
      }
    }
    let localVarPath = `/entities/alerts`;
    return this.httpClient.request("get", `${this.configuration.basePath}${localVarPath}`, {
      context: localVarHttpContext,
      params: localVarQueryParameters,
      responseType: responseType_,
      withCredentials: this.configuration.withCredentials,
      headers: localVarHeaders,
      observe,
      transferCache: localVarTransferCache,
      reportProgress
    });
  }
  listAssetCategories(owner, offset, limit, sort, filter, observe = "body", reportProgress = false, options) {
    if (owner === null || owner === void 0) {
      throw new Error("Required parameter owner was null or undefined when calling listAssetCategories.");
    }
    let localVarQueryParameters = new HttpParams({ encoder: this.encoder });
    if (owner !== void 0 && owner !== null) {
      localVarQueryParameters = this.addToHttpParams(localVarQueryParameters, owner, "owner");
    }
    if (offset !== void 0 && offset !== null) {
      localVarQueryParameters = this.addToHttpParams(localVarQueryParameters, offset, "offset");
    }
    if (limit !== void 0 && limit !== null) {
      localVarQueryParameters = this.addToHttpParams(localVarQueryParameters, limit, "limit");
    }
    if (sort !== void 0 && sort !== null) {
      localVarQueryParameters = this.addToHttpParams(localVarQueryParameters, sort, "sort");
    }
    if (filter !== void 0 && filter !== null) {
      localVarQueryParameters = this.addToHttpParams(localVarQueryParameters, filter, "filter");
    }
    let localVarHeaders = this.defaultHeaders;
    let localVarCredential;
    localVarCredential = this.configuration.lookupCredential("access_token");
    if (localVarCredential) {
      localVarHeaders = localVarHeaders.set("x-access-token", localVarCredential);
    }
    let localVarHttpHeaderAcceptSelected = options && options.httpHeaderAccept;
    if (localVarHttpHeaderAcceptSelected === void 0) {
      const httpHeaderAccepts = [
        "application/json"
      ];
      localVarHttpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
    }
    if (localVarHttpHeaderAcceptSelected !== void 0) {
      localVarHeaders = localVarHeaders.set("Accept", localVarHttpHeaderAcceptSelected);
    }
    let localVarHttpContext = options && options.context;
    if (localVarHttpContext === void 0) {
      localVarHttpContext = new HttpContext();
    }
    let localVarTransferCache = options && options.transferCache;
    if (localVarTransferCache === void 0) {
      localVarTransferCache = true;
    }
    let responseType_ = "json";
    if (localVarHttpHeaderAcceptSelected) {
      if (localVarHttpHeaderAcceptSelected.startsWith("text")) {
        responseType_ = "text";
      } else if (this.configuration.isJsonMime(localVarHttpHeaderAcceptSelected)) {
        responseType_ = "json";
      } else {
        responseType_ = "blob";
      }
    }
    let localVarPath = `/entities/assetcategories`;
    return this.httpClient.request("get", `${this.configuration.basePath}${localVarPath}`, {
      context: localVarHttpContext,
      params: localVarQueryParameters,
      responseType: responseType_,
      withCredentials: this.configuration.withCredentials,
      headers: localVarHeaders,
      observe,
      transferCache: localVarTransferCache,
      reportProgress
    });
  }
  listAssetGroups(owner, offset, limit, sort, filter, observe = "body", reportProgress = false, options) {
    if (owner === null || owner === void 0) {
      throw new Error("Required parameter owner was null or undefined when calling listAssetGroups.");
    }
    let localVarQueryParameters = new HttpParams({ encoder: this.encoder });
    if (owner !== void 0 && owner !== null) {
      localVarQueryParameters = this.addToHttpParams(localVarQueryParameters, owner, "owner");
    }
    if (offset !== void 0 && offset !== null) {
      localVarQueryParameters = this.addToHttpParams(localVarQueryParameters, offset, "offset");
    }
    if (limit !== void 0 && limit !== null) {
      localVarQueryParameters = this.addToHttpParams(localVarQueryParameters, limit, "limit");
    }
    if (sort !== void 0 && sort !== null) {
      localVarQueryParameters = this.addToHttpParams(localVarQueryParameters, sort, "sort");
    }
    if (filter !== void 0 && filter !== null) {
      localVarQueryParameters = this.addToHttpParams(localVarQueryParameters, filter, "filter");
    }
    let localVarHeaders = this.defaultHeaders;
    let localVarCredential;
    localVarCredential = this.configuration.lookupCredential("access_token");
    if (localVarCredential) {
      localVarHeaders = localVarHeaders.set("x-access-token", localVarCredential);
    }
    let localVarHttpHeaderAcceptSelected = options && options.httpHeaderAccept;
    if (localVarHttpHeaderAcceptSelected === void 0) {
      const httpHeaderAccepts = [
        "application/json"
      ];
      localVarHttpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
    }
    if (localVarHttpHeaderAcceptSelected !== void 0) {
      localVarHeaders = localVarHeaders.set("Accept", localVarHttpHeaderAcceptSelected);
    }
    let localVarHttpContext = options && options.context;
    if (localVarHttpContext === void 0) {
      localVarHttpContext = new HttpContext();
    }
    let localVarTransferCache = options && options.transferCache;
    if (localVarTransferCache === void 0) {
      localVarTransferCache = true;
    }
    let responseType_ = "json";
    if (localVarHttpHeaderAcceptSelected) {
      if (localVarHttpHeaderAcceptSelected.startsWith("text")) {
        responseType_ = "text";
      } else if (this.configuration.isJsonMime(localVarHttpHeaderAcceptSelected)) {
        responseType_ = "json";
      } else {
        responseType_ = "blob";
      }
    }
    let localVarPath = `/entities/assetgroups`;
    return this.httpClient.request("get", `${this.configuration.basePath}${localVarPath}`, {
      context: localVarHttpContext,
      params: localVarQueryParameters,
      responseType: responseType_,
      withCredentials: this.configuration.withCredentials,
      headers: localVarHeaders,
      observe,
      transferCache: localVarTransferCache,
      reportProgress
    });
  }
  listAssetRatingProfiles(owner, offset, limit, sort, filter, observe = "body", reportProgress = false, options) {
    if (owner === null || owner === void 0) {
      throw new Error("Required parameter owner was null or undefined when calling listAssetRatingProfiles.");
    }
    let localVarQueryParameters = new HttpParams({ encoder: this.encoder });
    if (owner !== void 0 && owner !== null) {
      localVarQueryParameters = this.addToHttpParams(localVarQueryParameters, owner, "owner");
    }
    if (offset !== void 0 && offset !== null) {
      localVarQueryParameters = this.addToHttpParams(localVarQueryParameters, offset, "offset");
    }
    if (limit !== void 0 && limit !== null) {
      localVarQueryParameters = this.addToHttpParams(localVarQueryParameters, limit, "limit");
    }
    if (sort !== void 0 && sort !== null) {
      localVarQueryParameters = this.addToHttpParams(localVarQueryParameters, sort, "sort");
    }
    if (filter !== void 0 && filter !== null) {
      localVarQueryParameters = this.addToHttpParams(localVarQueryParameters, filter, "filter");
    }
    let localVarHeaders = this.defaultHeaders;
    let localVarCredential;
    localVarCredential = this.configuration.lookupCredential("access_token");
    if (localVarCredential) {
      localVarHeaders = localVarHeaders.set("x-access-token", localVarCredential);
    }
    let localVarHttpHeaderAcceptSelected = options && options.httpHeaderAccept;
    if (localVarHttpHeaderAcceptSelected === void 0) {
      const httpHeaderAccepts = [
        "application/json"
      ];
      localVarHttpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
    }
    if (localVarHttpHeaderAcceptSelected !== void 0) {
      localVarHeaders = localVarHeaders.set("Accept", localVarHttpHeaderAcceptSelected);
    }
    let localVarHttpContext = options && options.context;
    if (localVarHttpContext === void 0) {
      localVarHttpContext = new HttpContext();
    }
    let localVarTransferCache = options && options.transferCache;
    if (localVarTransferCache === void 0) {
      localVarTransferCache = true;
    }
    let responseType_ = "json";
    if (localVarHttpHeaderAcceptSelected) {
      if (localVarHttpHeaderAcceptSelected.startsWith("text")) {
        responseType_ = "text";
      } else if (this.configuration.isJsonMime(localVarHttpHeaderAcceptSelected)) {
        responseType_ = "json";
      } else {
        responseType_ = "blob";
      }
    }
    let localVarPath = `/entities/assetratingprofiles`;
    return this.httpClient.request("get", `${this.configuration.basePath}${localVarPath}`, {
      context: localVarHttpContext,
      params: localVarQueryParameters,
      responseType: responseType_,
      withCredentials: this.configuration.withCredentials,
      headers: localVarHeaders,
      observe,
      transferCache: localVarTransferCache,
      reportProgress
    });
  }
  listAssetStateProfiles(owner, offset, limit, sort, filter, observe = "body", reportProgress = false, options) {
    if (owner === null || owner === void 0) {
      throw new Error("Required parameter owner was null or undefined when calling listAssetStateProfiles.");
    }
    let localVarQueryParameters = new HttpParams({ encoder: this.encoder });
    if (owner !== void 0 && owner !== null) {
      localVarQueryParameters = this.addToHttpParams(localVarQueryParameters, owner, "owner");
    }
    if (offset !== void 0 && offset !== null) {
      localVarQueryParameters = this.addToHttpParams(localVarQueryParameters, offset, "offset");
    }
    if (limit !== void 0 && limit !== null) {
      localVarQueryParameters = this.addToHttpParams(localVarQueryParameters, limit, "limit");
    }
    if (sort !== void 0 && sort !== null) {
      localVarQueryParameters = this.addToHttpParams(localVarQueryParameters, sort, "sort");
    }
    if (filter !== void 0 && filter !== null) {
      localVarQueryParameters = this.addToHttpParams(localVarQueryParameters, filter, "filter");
    }
    let localVarHeaders = this.defaultHeaders;
    let localVarCredential;
    localVarCredential = this.configuration.lookupCredential("access_token");
    if (localVarCredential) {
      localVarHeaders = localVarHeaders.set("x-access-token", localVarCredential);
    }
    let localVarHttpHeaderAcceptSelected = options && options.httpHeaderAccept;
    if (localVarHttpHeaderAcceptSelected === void 0) {
      const httpHeaderAccepts = [
        "application/json"
      ];
      localVarHttpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
    }
    if (localVarHttpHeaderAcceptSelected !== void 0) {
      localVarHeaders = localVarHeaders.set("Accept", localVarHttpHeaderAcceptSelected);
    }
    let localVarHttpContext = options && options.context;
    if (localVarHttpContext === void 0) {
      localVarHttpContext = new HttpContext();
    }
    let localVarTransferCache = options && options.transferCache;
    if (localVarTransferCache === void 0) {
      localVarTransferCache = true;
    }
    let responseType_ = "json";
    if (localVarHttpHeaderAcceptSelected) {
      if (localVarHttpHeaderAcceptSelected.startsWith("text")) {
        responseType_ = "text";
      } else if (this.configuration.isJsonMime(localVarHttpHeaderAcceptSelected)) {
        responseType_ = "json";
      } else {
        responseType_ = "blob";
      }
    }
    let localVarPath = `/entities/assetstateprofiles`;
    return this.httpClient.request("get", `${this.configuration.basePath}${localVarPath}`, {
      context: localVarHttpContext,
      params: localVarQueryParameters,
      responseType: responseType_,
      withCredentials: this.configuration.withCredentials,
      headers: localVarHeaders,
      observe,
      transferCache: localVarTransferCache,
      reportProgress
    });
  }
  listAssetTagTypes(owner, observe = "body", reportProgress = false, options) {
    if (owner === null || owner === void 0) {
      throw new Error("Required parameter owner was null or undefined when calling listAssetTagTypes.");
    }
    let localVarQueryParameters = new HttpParams({ encoder: this.encoder });
    if (owner !== void 0 && owner !== null) {
      localVarQueryParameters = this.addToHttpParams(localVarQueryParameters, owner, "owner");
    }
    let localVarHeaders = this.defaultHeaders;
    let localVarCredential;
    localVarCredential = this.configuration.lookupCredential("access_token");
    if (localVarCredential) {
      localVarHeaders = localVarHeaders.set("x-access-token", localVarCredential);
    }
    let localVarHttpHeaderAcceptSelected = options && options.httpHeaderAccept;
    if (localVarHttpHeaderAcceptSelected === void 0) {
      const httpHeaderAccepts = [
        "application/json"
      ];
      localVarHttpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
    }
    if (localVarHttpHeaderAcceptSelected !== void 0) {
      localVarHeaders = localVarHeaders.set("Accept", localVarHttpHeaderAcceptSelected);
    }
    let localVarHttpContext = options && options.context;
    if (localVarHttpContext === void 0) {
      localVarHttpContext = new HttpContext();
    }
    let localVarTransferCache = options && options.transferCache;
    if (localVarTransferCache === void 0) {
      localVarTransferCache = true;
    }
    let responseType_ = "json";
    if (localVarHttpHeaderAcceptSelected) {
      if (localVarHttpHeaderAcceptSelected.startsWith("text")) {
        responseType_ = "text";
      } else if (this.configuration.isJsonMime(localVarHttpHeaderAcceptSelected)) {
        responseType_ = "json";
      } else {
        responseType_ = "blob";
      }
    }
    let localVarPath = `/entities/assettagtypes`;
    return this.httpClient.request("get", `${this.configuration.basePath}${localVarPath}`, {
      context: localVarHttpContext,
      params: localVarQueryParameters,
      responseType: responseType_,
      withCredentials: this.configuration.withCredentials,
      headers: localVarHeaders,
      observe,
      transferCache: localVarTransferCache,
      reportProgress
    });
  }
  listAssetTags(owner, offset, limit, sort, filter, observe = "body", reportProgress = false, options) {
    if (owner === null || owner === void 0) {
      throw new Error("Required parameter owner was null or undefined when calling listAssetTags.");
    }
    let localVarQueryParameters = new HttpParams({ encoder: this.encoder });
    if (owner !== void 0 && owner !== null) {
      localVarQueryParameters = this.addToHttpParams(localVarQueryParameters, owner, "owner");
    }
    if (offset !== void 0 && offset !== null) {
      localVarQueryParameters = this.addToHttpParams(localVarQueryParameters, offset, "offset");
    }
    if (limit !== void 0 && limit !== null) {
      localVarQueryParameters = this.addToHttpParams(localVarQueryParameters, limit, "limit");
    }
    if (sort !== void 0 && sort !== null) {
      localVarQueryParameters = this.addToHttpParams(localVarQueryParameters, sort, "sort");
    }
    if (filter !== void 0 && filter !== null) {
      localVarQueryParameters = this.addToHttpParams(localVarQueryParameters, filter, "filter");
    }
    let localVarHeaders = this.defaultHeaders;
    let localVarCredential;
    localVarCredential = this.configuration.lookupCredential("access_token");
    if (localVarCredential) {
      localVarHeaders = localVarHeaders.set("x-access-token", localVarCredential);
    }
    let localVarHttpHeaderAcceptSelected = options && options.httpHeaderAccept;
    if (localVarHttpHeaderAcceptSelected === void 0) {
      const httpHeaderAccepts = [
        "application/json"
      ];
      localVarHttpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
    }
    if (localVarHttpHeaderAcceptSelected !== void 0) {
      localVarHeaders = localVarHeaders.set("Accept", localVarHttpHeaderAcceptSelected);
    }
    let localVarHttpContext = options && options.context;
    if (localVarHttpContext === void 0) {
      localVarHttpContext = new HttpContext();
    }
    let localVarTransferCache = options && options.transferCache;
    if (localVarTransferCache === void 0) {
      localVarTransferCache = true;
    }
    let responseType_ = "json";
    if (localVarHttpHeaderAcceptSelected) {
      if (localVarHttpHeaderAcceptSelected.startsWith("text")) {
        responseType_ = "text";
      } else if (this.configuration.isJsonMime(localVarHttpHeaderAcceptSelected)) {
        responseType_ = "json";
      } else {
        responseType_ = "blob";
      }
    }
    let localVarPath = `/entities/assettags`;
    return this.httpClient.request("get", `${this.configuration.basePath}${localVarPath}`, {
      context: localVarHttpContext,
      params: localVarQueryParameters,
      responseType: responseType_,
      withCredentials: this.configuration.withCredentials,
      headers: localVarHeaders,
      observe,
      transferCache: localVarTransferCache,
      reportProgress
    });
  }
  listAssetTypes(owner, observe = "body", reportProgress = false, options) {
    if (owner === null || owner === void 0) {
      throw new Error("Required parameter owner was null or undefined when calling listAssetTypes.");
    }
    let localVarQueryParameters = new HttpParams({ encoder: this.encoder });
    if (owner !== void 0 && owner !== null) {
      localVarQueryParameters = this.addToHttpParams(localVarQueryParameters, owner, "owner");
    }
    let localVarHeaders = this.defaultHeaders;
    let localVarCredential;
    localVarCredential = this.configuration.lookupCredential("access_token");
    if (localVarCredential) {
      localVarHeaders = localVarHeaders.set("x-access-token", localVarCredential);
    }
    let localVarHttpHeaderAcceptSelected = options && options.httpHeaderAccept;
    if (localVarHttpHeaderAcceptSelected === void 0) {
      const httpHeaderAccepts = [
        "application/json"
      ];
      localVarHttpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
    }
    if (localVarHttpHeaderAcceptSelected !== void 0) {
      localVarHeaders = localVarHeaders.set("Accept", localVarHttpHeaderAcceptSelected);
    }
    let localVarHttpContext = options && options.context;
    if (localVarHttpContext === void 0) {
      localVarHttpContext = new HttpContext();
    }
    let localVarTransferCache = options && options.transferCache;
    if (localVarTransferCache === void 0) {
      localVarTransferCache = true;
    }
    let responseType_ = "json";
    if (localVarHttpHeaderAcceptSelected) {
      if (localVarHttpHeaderAcceptSelected.startsWith("text")) {
        responseType_ = "text";
      } else if (this.configuration.isJsonMime(localVarHttpHeaderAcceptSelected)) {
        responseType_ = "json";
      } else {
        responseType_ = "blob";
      }
    }
    let localVarPath = `/entities/assettypes`;
    return this.httpClient.request("get", `${this.configuration.basePath}${localVarPath}`, {
      context: localVarHttpContext,
      params: localVarQueryParameters,
      responseType: responseType_,
      withCredentials: this.configuration.withCredentials,
      headers: localVarHeaders,
      observe,
      transferCache: localVarTransferCache,
      reportProgress
    });
  }
  listAssets(owner, offset, limit, sort, filter, observe = "body", reportProgress = false, options) {
    if (owner === null || owner === void 0) {
      throw new Error("Required parameter owner was null or undefined when calling listAssets.");
    }
    let localVarQueryParameters = new HttpParams({ encoder: this.encoder });
    if (owner !== void 0 && owner !== null) {
      localVarQueryParameters = this.addToHttpParams(localVarQueryParameters, owner, "owner");
    }
    if (offset !== void 0 && offset !== null) {
      localVarQueryParameters = this.addToHttpParams(localVarQueryParameters, offset, "offset");
    }
    if (limit !== void 0 && limit !== null) {
      localVarQueryParameters = this.addToHttpParams(localVarQueryParameters, limit, "limit");
    }
    if (sort !== void 0 && sort !== null) {
      localVarQueryParameters = this.addToHttpParams(localVarQueryParameters, sort, "sort");
    }
    if (filter !== void 0 && filter !== null) {
      localVarQueryParameters = this.addToHttpParams(localVarQueryParameters, filter, "filter");
    }
    let localVarHeaders = this.defaultHeaders;
    let localVarCredential;
    localVarCredential = this.configuration.lookupCredential("access_token");
    if (localVarCredential) {
      localVarHeaders = localVarHeaders.set("x-access-token", localVarCredential);
    }
    let localVarHttpHeaderAcceptSelected = options && options.httpHeaderAccept;
    if (localVarHttpHeaderAcceptSelected === void 0) {
      const httpHeaderAccepts = [
        "application/json"
      ];
      localVarHttpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
    }
    if (localVarHttpHeaderAcceptSelected !== void 0) {
      localVarHeaders = localVarHeaders.set("Accept", localVarHttpHeaderAcceptSelected);
    }
    let localVarHttpContext = options && options.context;
    if (localVarHttpContext === void 0) {
      localVarHttpContext = new HttpContext();
    }
    let localVarTransferCache = options && options.transferCache;
    if (localVarTransferCache === void 0) {
      localVarTransferCache = true;
    }
    let responseType_ = "json";
    if (localVarHttpHeaderAcceptSelected) {
      if (localVarHttpHeaderAcceptSelected.startsWith("text")) {
        responseType_ = "text";
      } else if (this.configuration.isJsonMime(localVarHttpHeaderAcceptSelected)) {
        responseType_ = "json";
      } else {
        responseType_ = "blob";
      }
    }
    let localVarPath = `/entities/assets`;
    return this.httpClient.request("get", `${this.configuration.basePath}${localVarPath}`, {
      context: localVarHttpContext,
      params: localVarQueryParameters,
      responseType: responseType_,
      withCredentials: this.configuration.withCredentials,
      headers: localVarHeaders,
      observe,
      transferCache: localVarTransferCache,
      reportProgress
    });
  }
  listCostCentres(owner, offset, limit, sort, filter, observe = "body", reportProgress = false, options) {
    if (owner === null || owner === void 0) {
      throw new Error("Required parameter owner was null or undefined when calling listCostCentres.");
    }
    let localVarQueryParameters = new HttpParams({ encoder: this.encoder });
    if (owner !== void 0 && owner !== null) {
      localVarQueryParameters = this.addToHttpParams(localVarQueryParameters, owner, "owner");
    }
    if (offset !== void 0 && offset !== null) {
      localVarQueryParameters = this.addToHttpParams(localVarQueryParameters, offset, "offset");
    }
    if (limit !== void 0 && limit !== null) {
      localVarQueryParameters = this.addToHttpParams(localVarQueryParameters, limit, "limit");
    }
    if (sort !== void 0 && sort !== null) {
      localVarQueryParameters = this.addToHttpParams(localVarQueryParameters, sort, "sort");
    }
    if (filter !== void 0 && filter !== null) {
      localVarQueryParameters = this.addToHttpParams(localVarQueryParameters, filter, "filter");
    }
    let localVarHeaders = this.defaultHeaders;
    let localVarCredential;
    localVarCredential = this.configuration.lookupCredential("access_token");
    if (localVarCredential) {
      localVarHeaders = localVarHeaders.set("x-access-token", localVarCredential);
    }
    let localVarHttpHeaderAcceptSelected = options && options.httpHeaderAccept;
    if (localVarHttpHeaderAcceptSelected === void 0) {
      const httpHeaderAccepts = [
        "application/json"
      ];
      localVarHttpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
    }
    if (localVarHttpHeaderAcceptSelected !== void 0) {
      localVarHeaders = localVarHeaders.set("Accept", localVarHttpHeaderAcceptSelected);
    }
    let localVarHttpContext = options && options.context;
    if (localVarHttpContext === void 0) {
      localVarHttpContext = new HttpContext();
    }
    let localVarTransferCache = options && options.transferCache;
    if (localVarTransferCache === void 0) {
      localVarTransferCache = true;
    }
    let responseType_ = "json";
    if (localVarHttpHeaderAcceptSelected) {
      if (localVarHttpHeaderAcceptSelected.startsWith("text")) {
        responseType_ = "text";
      } else if (this.configuration.isJsonMime(localVarHttpHeaderAcceptSelected)) {
        responseType_ = "json";
      } else {
        responseType_ = "blob";
      }
    }
    let localVarPath = `/entities/costcentres`;
    return this.httpClient.request("get", `${this.configuration.basePath}${localVarPath}`, {
      context: localVarHttpContext,
      params: localVarQueryParameters,
      responseType: responseType_,
      withCredentials: this.configuration.withCredentials,
      headers: localVarHeaders,
      observe,
      transferCache: localVarTransferCache,
      reportProgress
    });
  }
  listDashboardTemplates(owner, recurse, offset, limit, sort, filter, observe = "body", reportProgress = false, options) {
    if (owner === null || owner === void 0) {
      throw new Error("Required parameter owner was null or undefined when calling listDashboardTemplates.");
    }
    let localVarQueryParameters = new HttpParams({ encoder: this.encoder });
    if (owner !== void 0 && owner !== null) {
      localVarQueryParameters = this.addToHttpParams(localVarQueryParameters, owner, "owner");
    }
    if (recurse !== void 0 && recurse !== null) {
      localVarQueryParameters = this.addToHttpParams(localVarQueryParameters, recurse, "recurse");
    }
    if (offset !== void 0 && offset !== null) {
      localVarQueryParameters = this.addToHttpParams(localVarQueryParameters, offset, "offset");
    }
    if (limit !== void 0 && limit !== null) {
      localVarQueryParameters = this.addToHttpParams(localVarQueryParameters, limit, "limit");
    }
    if (sort !== void 0 && sort !== null) {
      localVarQueryParameters = this.addToHttpParams(localVarQueryParameters, sort, "sort");
    }
    if (filter !== void 0 && filter !== null) {
      localVarQueryParameters = this.addToHttpParams(localVarQueryParameters, filter, "filter");
    }
    let localVarHeaders = this.defaultHeaders;
    let localVarCredential;
    localVarCredential = this.configuration.lookupCredential("access_token");
    if (localVarCredential) {
      localVarHeaders = localVarHeaders.set("x-access-token", localVarCredential);
    }
    let localVarHttpHeaderAcceptSelected = options && options.httpHeaderAccept;
    if (localVarHttpHeaderAcceptSelected === void 0) {
      const httpHeaderAccepts = [
        "application/json"
      ];
      localVarHttpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
    }
    if (localVarHttpHeaderAcceptSelected !== void 0) {
      localVarHeaders = localVarHeaders.set("Accept", localVarHttpHeaderAcceptSelected);
    }
    let localVarHttpContext = options && options.context;
    if (localVarHttpContext === void 0) {
      localVarHttpContext = new HttpContext();
    }
    let localVarTransferCache = options && options.transferCache;
    if (localVarTransferCache === void 0) {
      localVarTransferCache = true;
    }
    let responseType_ = "json";
    if (localVarHttpHeaderAcceptSelected) {
      if (localVarHttpHeaderAcceptSelected.startsWith("text")) {
        responseType_ = "text";
      } else if (this.configuration.isJsonMime(localVarHttpHeaderAcceptSelected)) {
        responseType_ = "json";
      } else {
        responseType_ = "blob";
      }
    }
    let localVarPath = `/entities/dashboardtemplates`;
    return this.httpClient.request("get", `${this.configuration.basePath}${localVarPath}`, {
      context: localVarHttpContext,
      params: localVarQueryParameters,
      responseType: responseType_,
      withCredentials: this.configuration.withCredentials,
      headers: localVarHeaders,
      observe,
      transferCache: localVarTransferCache,
      reportProgress
    });
  }
  listDashboards(owner, offset, limit, sort, filter, observe = "body", reportProgress = false, options) {
    if (owner === null || owner === void 0) {
      throw new Error("Required parameter owner was null or undefined when calling listDashboards.");
    }
    let localVarQueryParameters = new HttpParams({ encoder: this.encoder });
    if (owner !== void 0 && owner !== null) {
      localVarQueryParameters = this.addToHttpParams(localVarQueryParameters, owner, "owner");
    }
    if (offset !== void 0 && offset !== null) {
      localVarQueryParameters = this.addToHttpParams(localVarQueryParameters, offset, "offset");
    }
    if (limit !== void 0 && limit !== null) {
      localVarQueryParameters = this.addToHttpParams(localVarQueryParameters, limit, "limit");
    }
    if (sort !== void 0 && sort !== null) {
      localVarQueryParameters = this.addToHttpParams(localVarQueryParameters, sort, "sort");
    }
    if (filter !== void 0 && filter !== null) {
      localVarQueryParameters = this.addToHttpParams(localVarQueryParameters, filter, "filter");
    }
    let localVarHeaders = this.defaultHeaders;
    let localVarCredential;
    localVarCredential = this.configuration.lookupCredential("access_token");
    if (localVarCredential) {
      localVarHeaders = localVarHeaders.set("x-access-token", localVarCredential);
    }
    let localVarHttpHeaderAcceptSelected = options && options.httpHeaderAccept;
    if (localVarHttpHeaderAcceptSelected === void 0) {
      const httpHeaderAccepts = [
        "application/json"
      ];
      localVarHttpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
    }
    if (localVarHttpHeaderAcceptSelected !== void 0) {
      localVarHeaders = localVarHeaders.set("Accept", localVarHttpHeaderAcceptSelected);
    }
    let localVarHttpContext = options && options.context;
    if (localVarHttpContext === void 0) {
      localVarHttpContext = new HttpContext();
    }
    let localVarTransferCache = options && options.transferCache;
    if (localVarTransferCache === void 0) {
      localVarTransferCache = true;
    }
    let responseType_ = "json";
    if (localVarHttpHeaderAcceptSelected) {
      if (localVarHttpHeaderAcceptSelected.startsWith("text")) {
        responseType_ = "text";
      } else if (this.configuration.isJsonMime(localVarHttpHeaderAcceptSelected)) {
        responseType_ = "json";
      } else {
        responseType_ = "blob";
      }
    }
    let localVarPath = `/entities/dashboards`;
    return this.httpClient.request("get", `${this.configuration.basePath}${localVarPath}`, {
      context: localVarHttpContext,
      params: localVarQueryParameters,
      responseType: responseType_,
      withCredentials: this.configuration.withCredentials,
      headers: localVarHeaders,
      observe,
      transferCache: localVarTransferCache,
      reportProgress
    });
  }
  listDeviceConfigProfiles(owner, recurse, offset, limit, sort, filter, observe = "body", reportProgress = false, options) {
    if (owner === null || owner === void 0) {
      throw new Error("Required parameter owner was null or undefined when calling listDeviceConfigProfiles.");
    }
    let localVarQueryParameters = new HttpParams({ encoder: this.encoder });
    if (owner !== void 0 && owner !== null) {
      localVarQueryParameters = this.addToHttpParams(localVarQueryParameters, owner, "owner");
    }
    if (recurse !== void 0 && recurse !== null) {
      localVarQueryParameters = this.addToHttpParams(localVarQueryParameters, recurse, "recurse");
    }
    if (offset !== void 0 && offset !== null) {
      localVarQueryParameters = this.addToHttpParams(localVarQueryParameters, offset, "offset");
    }
    if (limit !== void 0 && limit !== null) {
      localVarQueryParameters = this.addToHttpParams(localVarQueryParameters, limit, "limit");
    }
    if (sort !== void 0 && sort !== null) {
      localVarQueryParameters = this.addToHttpParams(localVarQueryParameters, sort, "sort");
    }
    if (filter !== void 0 && filter !== null) {
      localVarQueryParameters = this.addToHttpParams(localVarQueryParameters, filter, "filter");
    }
    let localVarHeaders = this.defaultHeaders;
    let localVarCredential;
    localVarCredential = this.configuration.lookupCredential("access_token");
    if (localVarCredential) {
      localVarHeaders = localVarHeaders.set("x-access-token", localVarCredential);
    }
    let localVarHttpHeaderAcceptSelected = options && options.httpHeaderAccept;
    if (localVarHttpHeaderAcceptSelected === void 0) {
      const httpHeaderAccepts = [
        "application/json"
      ];
      localVarHttpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
    }
    if (localVarHttpHeaderAcceptSelected !== void 0) {
      localVarHeaders = localVarHeaders.set("Accept", localVarHttpHeaderAcceptSelected);
    }
    let localVarHttpContext = options && options.context;
    if (localVarHttpContext === void 0) {
      localVarHttpContext = new HttpContext();
    }
    let localVarTransferCache = options && options.transferCache;
    if (localVarTransferCache === void 0) {
      localVarTransferCache = true;
    }
    let responseType_ = "json";
    if (localVarHttpHeaderAcceptSelected) {
      if (localVarHttpHeaderAcceptSelected.startsWith("text")) {
        responseType_ = "text";
      } else if (this.configuration.isJsonMime(localVarHttpHeaderAcceptSelected)) {
        responseType_ = "json";
      } else {
        responseType_ = "blob";
      }
    }
    let localVarPath = `/entities/deviceconfigprofiles`;
    return this.httpClient.request("get", `${this.configuration.basePath}${localVarPath}`, {
      context: localVarHttpContext,
      params: localVarQueryParameters,
      responseType: responseType_,
      withCredentials: this.configuration.withCredentials,
      headers: localVarHeaders,
      observe,
      transferCache: localVarTransferCache,
      reportProgress
    });
  }
  listDeviceProviderTypes(owner, offset, limit, sort, filter, observe = "body", reportProgress = false, options) {
    if (owner === null || owner === void 0) {
      throw new Error("Required parameter owner was null or undefined when calling listDeviceProviderTypes.");
    }
    let localVarQueryParameters = new HttpParams({ encoder: this.encoder });
    if (owner !== void 0 && owner !== null) {
      localVarQueryParameters = this.addToHttpParams(localVarQueryParameters, owner, "owner");
    }
    if (offset !== void 0 && offset !== null) {
      localVarQueryParameters = this.addToHttpParams(localVarQueryParameters, offset, "offset");
    }
    if (limit !== void 0 && limit !== null) {
      localVarQueryParameters = this.addToHttpParams(localVarQueryParameters, limit, "limit");
    }
    if (sort !== void 0 && sort !== null) {
      localVarQueryParameters = this.addToHttpParams(localVarQueryParameters, sort, "sort");
    }
    if (filter !== void 0 && filter !== null) {
      localVarQueryParameters = this.addToHttpParams(localVarQueryParameters, filter, "filter");
    }
    let localVarHeaders = this.defaultHeaders;
    let localVarCredential;
    localVarCredential = this.configuration.lookupCredential("access_token");
    if (localVarCredential) {
      localVarHeaders = localVarHeaders.set("x-access-token", localVarCredential);
    }
    let localVarHttpHeaderAcceptSelected = options && options.httpHeaderAccept;
    if (localVarHttpHeaderAcceptSelected === void 0) {
      const httpHeaderAccepts = [
        "application/json"
      ];
      localVarHttpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
    }
    if (localVarHttpHeaderAcceptSelected !== void 0) {
      localVarHeaders = localVarHeaders.set("Accept", localVarHttpHeaderAcceptSelected);
    }
    let localVarHttpContext = options && options.context;
    if (localVarHttpContext === void 0) {
      localVarHttpContext = new HttpContext();
    }
    let localVarTransferCache = options && options.transferCache;
    if (localVarTransferCache === void 0) {
      localVarTransferCache = true;
    }
    let responseType_ = "json";
    if (localVarHttpHeaderAcceptSelected) {
      if (localVarHttpHeaderAcceptSelected.startsWith("text")) {
        responseType_ = "text";
      } else if (this.configuration.isJsonMime(localVarHttpHeaderAcceptSelected)) {
        responseType_ = "json";
      } else {
        responseType_ = "blob";
      }
    }
    let localVarPath = `/entities/deviceprovidertypes`;
    return this.httpClient.request("get", `${this.configuration.basePath}${localVarPath}`, {
      context: localVarHttpContext,
      params: localVarQueryParameters,
      responseType: responseType_,
      withCredentials: this.configuration.withCredentials,
      headers: localVarHeaders,
      observe,
      transferCache: localVarTransferCache,
      reportProgress
    });
  }
  listDeviceProviders(owner, recurse, offset, limit, sort, filter, observe = "body", reportProgress = false, options) {
    if (owner === null || owner === void 0) {
      throw new Error("Required parameter owner was null or undefined when calling listDeviceProviders.");
    }
    let localVarQueryParameters = new HttpParams({ encoder: this.encoder });
    if (owner !== void 0 && owner !== null) {
      localVarQueryParameters = this.addToHttpParams(localVarQueryParameters, owner, "owner");
    }
    if (recurse !== void 0 && recurse !== null) {
      localVarQueryParameters = this.addToHttpParams(localVarQueryParameters, recurse, "recurse");
    }
    if (offset !== void 0 && offset !== null) {
      localVarQueryParameters = this.addToHttpParams(localVarQueryParameters, offset, "offset");
    }
    if (limit !== void 0 && limit !== null) {
      localVarQueryParameters = this.addToHttpParams(localVarQueryParameters, limit, "limit");
    }
    if (sort !== void 0 && sort !== null) {
      localVarQueryParameters = this.addToHttpParams(localVarQueryParameters, sort, "sort");
    }
    if (filter !== void 0 && filter !== null) {
      localVarQueryParameters = this.addToHttpParams(localVarQueryParameters, filter, "filter");
    }
    let localVarHeaders = this.defaultHeaders;
    let localVarCredential;
    localVarCredential = this.configuration.lookupCredential("access_token");
    if (localVarCredential) {
      localVarHeaders = localVarHeaders.set("x-access-token", localVarCredential);
    }
    let localVarHttpHeaderAcceptSelected = options && options.httpHeaderAccept;
    if (localVarHttpHeaderAcceptSelected === void 0) {
      const httpHeaderAccepts = [
        "application/json"
      ];
      localVarHttpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
    }
    if (localVarHttpHeaderAcceptSelected !== void 0) {
      localVarHeaders = localVarHeaders.set("Accept", localVarHttpHeaderAcceptSelected);
    }
    let localVarHttpContext = options && options.context;
    if (localVarHttpContext === void 0) {
      localVarHttpContext = new HttpContext();
    }
    let localVarTransferCache = options && options.transferCache;
    if (localVarTransferCache === void 0) {
      localVarTransferCache = true;
    }
    let responseType_ = "json";
    if (localVarHttpHeaderAcceptSelected) {
      if (localVarHttpHeaderAcceptSelected.startsWith("text")) {
        responseType_ = "text";
      } else if (this.configuration.isJsonMime(localVarHttpHeaderAcceptSelected)) {
        responseType_ = "json";
      } else {
        responseType_ = "blob";
      }
    }
    let localVarPath = `/entities/deviceproviders`;
    return this.httpClient.request("get", `${this.configuration.basePath}${localVarPath}`, {
      context: localVarHttpContext,
      params: localVarQueryParameters,
      responseType: responseType_,
      withCredentials: this.configuration.withCredentials,
      headers: localVarHeaders,
      observe,
      transferCache: localVarTransferCache,
      reportProgress
    });
  }
  listDeviceTypes(owner, recurse, offset, limit, sort, filter, observe = "body", reportProgress = false, options) {
    if (owner === null || owner === void 0) {
      throw new Error("Required parameter owner was null or undefined when calling listDeviceTypes.");
    }
    let localVarQueryParameters = new HttpParams({ encoder: this.encoder });
    if (owner !== void 0 && owner !== null) {
      localVarQueryParameters = this.addToHttpParams(localVarQueryParameters, owner, "owner");
    }
    if (recurse !== void 0 && recurse !== null) {
      localVarQueryParameters = this.addToHttpParams(localVarQueryParameters, recurse, "recurse");
    }
    if (offset !== void 0 && offset !== null) {
      localVarQueryParameters = this.addToHttpParams(localVarQueryParameters, offset, "offset");
    }
    if (limit !== void 0 && limit !== null) {
      localVarQueryParameters = this.addToHttpParams(localVarQueryParameters, limit, "limit");
    }
    if (sort !== void 0 && sort !== null) {
      localVarQueryParameters = this.addToHttpParams(localVarQueryParameters, sort, "sort");
    }
    if (filter !== void 0 && filter !== null) {
      localVarQueryParameters = this.addToHttpParams(localVarQueryParameters, filter, "filter");
    }
    let localVarHeaders = this.defaultHeaders;
    let localVarCredential;
    localVarCredential = this.configuration.lookupCredential("access_token");
    if (localVarCredential) {
      localVarHeaders = localVarHeaders.set("x-access-token", localVarCredential);
    }
    let localVarHttpHeaderAcceptSelected = options && options.httpHeaderAccept;
    if (localVarHttpHeaderAcceptSelected === void 0) {
      const httpHeaderAccepts = [
        "application/json"
      ];
      localVarHttpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
    }
    if (localVarHttpHeaderAcceptSelected !== void 0) {
      localVarHeaders = localVarHeaders.set("Accept", localVarHttpHeaderAcceptSelected);
    }
    let localVarHttpContext = options && options.context;
    if (localVarHttpContext === void 0) {
      localVarHttpContext = new HttpContext();
    }
    let localVarTransferCache = options && options.transferCache;
    if (localVarTransferCache === void 0) {
      localVarTransferCache = true;
    }
    let responseType_ = "json";
    if (localVarHttpHeaderAcceptSelected) {
      if (localVarHttpHeaderAcceptSelected.startsWith("text")) {
        responseType_ = "text";
      } else if (this.configuration.isJsonMime(localVarHttpHeaderAcceptSelected)) {
        responseType_ = "json";
      } else {
        responseType_ = "blob";
      }
    }
    let localVarPath = `/entities/devicetypes`;
    return this.httpClient.request("get", `${this.configuration.basePath}${localVarPath}`, {
      context: localVarHttpContext,
      params: localVarQueryParameters,
      responseType: responseType_,
      withCredentials: this.configuration.withCredentials,
      headers: localVarHeaders,
      observe,
      transferCache: localVarTransferCache,
      reportProgress
    });
  }
  listDevices(owner, offset, limit, sort, filter, observe = "body", reportProgress = false, options) {
    if (owner === null || owner === void 0) {
      throw new Error("Required parameter owner was null or undefined when calling listDevices.");
    }
    let localVarQueryParameters = new HttpParams({ encoder: this.encoder });
    if (owner !== void 0 && owner !== null) {
      localVarQueryParameters = this.addToHttpParams(localVarQueryParameters, owner, "owner");
    }
    if (offset !== void 0 && offset !== null) {
      localVarQueryParameters = this.addToHttpParams(localVarQueryParameters, offset, "offset");
    }
    if (limit !== void 0 && limit !== null) {
      localVarQueryParameters = this.addToHttpParams(localVarQueryParameters, limit, "limit");
    }
    if (sort !== void 0 && sort !== null) {
      localVarQueryParameters = this.addToHttpParams(localVarQueryParameters, sort, "sort");
    }
    if (filter !== void 0 && filter !== null) {
      localVarQueryParameters = this.addToHttpParams(localVarQueryParameters, filter, "filter");
    }
    let localVarHeaders = this.defaultHeaders;
    let localVarCredential;
    localVarCredential = this.configuration.lookupCredential("access_token");
    if (localVarCredential) {
      localVarHeaders = localVarHeaders.set("x-access-token", localVarCredential);
    }
    let localVarHttpHeaderAcceptSelected = options && options.httpHeaderAccept;
    if (localVarHttpHeaderAcceptSelected === void 0) {
      const httpHeaderAccepts = [
        "application/json"
      ];
      localVarHttpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
    }
    if (localVarHttpHeaderAcceptSelected !== void 0) {
      localVarHeaders = localVarHeaders.set("Accept", localVarHttpHeaderAcceptSelected);
    }
    let localVarHttpContext = options && options.context;
    if (localVarHttpContext === void 0) {
      localVarHttpContext = new HttpContext();
    }
    let localVarTransferCache = options && options.transferCache;
    if (localVarTransferCache === void 0) {
      localVarTransferCache = true;
    }
    let responseType_ = "json";
    if (localVarHttpHeaderAcceptSelected) {
      if (localVarHttpHeaderAcceptSelected.startsWith("text")) {
        responseType_ = "text";
      } else if (this.configuration.isJsonMime(localVarHttpHeaderAcceptSelected)) {
        responseType_ = "json";
      } else {
        responseType_ = "blob";
      }
    }
    let localVarPath = `/entities/devices`;
    return this.httpClient.request("get", `${this.configuration.basePath}${localVarPath}`, {
      context: localVarHttpContext,
      params: localVarQueryParameters,
      responseType: responseType_,
      withCredentials: this.configuration.withCredentials,
      headers: localVarHeaders,
      observe,
      transferCache: localVarTransferCache,
      reportProgress
    });
  }
  listEmailProviderTypes(owner, offset, limit, sort, filter, observe = "body", reportProgress = false, options) {
    if (owner === null || owner === void 0) {
      throw new Error("Required parameter owner was null or undefined when calling listEmailProviderTypes.");
    }
    let localVarQueryParameters = new HttpParams({ encoder: this.encoder });
    if (owner !== void 0 && owner !== null) {
      localVarQueryParameters = this.addToHttpParams(localVarQueryParameters, owner, "owner");
    }
    if (offset !== void 0 && offset !== null) {
      localVarQueryParameters = this.addToHttpParams(localVarQueryParameters, offset, "offset");
    }
    if (limit !== void 0 && limit !== null) {
      localVarQueryParameters = this.addToHttpParams(localVarQueryParameters, limit, "limit");
    }
    if (sort !== void 0 && sort !== null) {
      localVarQueryParameters = this.addToHttpParams(localVarQueryParameters, sort, "sort");
    }
    if (filter !== void 0 && filter !== null) {
      localVarQueryParameters = this.addToHttpParams(localVarQueryParameters, filter, "filter");
    }
    let localVarHeaders = this.defaultHeaders;
    let localVarCredential;
    localVarCredential = this.configuration.lookupCredential("access_token");
    if (localVarCredential) {
      localVarHeaders = localVarHeaders.set("x-access-token", localVarCredential);
    }
    let localVarHttpHeaderAcceptSelected = options && options.httpHeaderAccept;
    if (localVarHttpHeaderAcceptSelected === void 0) {
      const httpHeaderAccepts = [
        "application/json"
      ];
      localVarHttpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
    }
    if (localVarHttpHeaderAcceptSelected !== void 0) {
      localVarHeaders = localVarHeaders.set("Accept", localVarHttpHeaderAcceptSelected);
    }
    let localVarHttpContext = options && options.context;
    if (localVarHttpContext === void 0) {
      localVarHttpContext = new HttpContext();
    }
    let localVarTransferCache = options && options.transferCache;
    if (localVarTransferCache === void 0) {
      localVarTransferCache = true;
    }
    let responseType_ = "json";
    if (localVarHttpHeaderAcceptSelected) {
      if (localVarHttpHeaderAcceptSelected.startsWith("text")) {
        responseType_ = "text";
      } else if (this.configuration.isJsonMime(localVarHttpHeaderAcceptSelected)) {
        responseType_ = "json";
      } else {
        responseType_ = "blob";
      }
    }
    let localVarPath = `/entities/emailprovidertypes`;
    return this.httpClient.request("get", `${this.configuration.basePath}${localVarPath}`, {
      context: localVarHttpContext,
      params: localVarQueryParameters,
      responseType: responseType_,
      withCredentials: this.configuration.withCredentials,
      headers: localVarHeaders,
      observe,
      transferCache: localVarTransferCache,
      reportProgress
    });
  }
  listEmailProviders(owner, offset, limit, sort, filter, observe = "body", reportProgress = false, options) {
    if (owner === null || owner === void 0) {
      throw new Error("Required parameter owner was null or undefined when calling listEmailProviders.");
    }
    let localVarQueryParameters = new HttpParams({ encoder: this.encoder });
    if (owner !== void 0 && owner !== null) {
      localVarQueryParameters = this.addToHttpParams(localVarQueryParameters, owner, "owner");
    }
    if (offset !== void 0 && offset !== null) {
      localVarQueryParameters = this.addToHttpParams(localVarQueryParameters, offset, "offset");
    }
    if (limit !== void 0 && limit !== null) {
      localVarQueryParameters = this.addToHttpParams(localVarQueryParameters, limit, "limit");
    }
    if (sort !== void 0 && sort !== null) {
      localVarQueryParameters = this.addToHttpParams(localVarQueryParameters, sort, "sort");
    }
    if (filter !== void 0 && filter !== null) {
      localVarQueryParameters = this.addToHttpParams(localVarQueryParameters, filter, "filter");
    }
    let localVarHeaders = this.defaultHeaders;
    let localVarCredential;
    localVarCredential = this.configuration.lookupCredential("access_token");
    if (localVarCredential) {
      localVarHeaders = localVarHeaders.set("x-access-token", localVarCredential);
    }
    let localVarHttpHeaderAcceptSelected = options && options.httpHeaderAccept;
    if (localVarHttpHeaderAcceptSelected === void 0) {
      const httpHeaderAccepts = [
        "application/json"
      ];
      localVarHttpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
    }
    if (localVarHttpHeaderAcceptSelected !== void 0) {
      localVarHeaders = localVarHeaders.set("Accept", localVarHttpHeaderAcceptSelected);
    }
    let localVarHttpContext = options && options.context;
    if (localVarHttpContext === void 0) {
      localVarHttpContext = new HttpContext();
    }
    let localVarTransferCache = options && options.transferCache;
    if (localVarTransferCache === void 0) {
      localVarTransferCache = true;
    }
    let responseType_ = "json";
    if (localVarHttpHeaderAcceptSelected) {
      if (localVarHttpHeaderAcceptSelected.startsWith("text")) {
        responseType_ = "text";
      } else if (this.configuration.isJsonMime(localVarHttpHeaderAcceptSelected)) {
        responseType_ = "json";
      } else {
        responseType_ = "blob";
      }
    }
    let localVarPath = `/entities/emailproviders`;
    return this.httpClient.request("get", `${this.configuration.basePath}${localVarPath}`, {
      context: localVarHttpContext,
      params: localVarQueryParameters,
      responseType: responseType_,
      withCredentials: this.configuration.withCredentials,
      headers: localVarHeaders,
      observe,
      transferCache: localVarTransferCache,
      reportProgress
    });
  }
  listExportTasks(owner, offset, limit, sort, filter, observe = "body", reportProgress = false, options) {
    if (owner === null || owner === void 0) {
      throw new Error("Required parameter owner was null or undefined when calling listExportTasks.");
    }
    let localVarQueryParameters = new HttpParams({ encoder: this.encoder });
    if (owner !== void 0 && owner !== null) {
      localVarQueryParameters = this.addToHttpParams(localVarQueryParameters, owner, "owner");
    }
    if (offset !== void 0 && offset !== null) {
      localVarQueryParameters = this.addToHttpParams(localVarQueryParameters, offset, "offset");
    }
    if (limit !== void 0 && limit !== null) {
      localVarQueryParameters = this.addToHttpParams(localVarQueryParameters, limit, "limit");
    }
    if (sort !== void 0 && sort !== null) {
      localVarQueryParameters = this.addToHttpParams(localVarQueryParameters, sort, "sort");
    }
    if (filter !== void 0 && filter !== null) {
      localVarQueryParameters = this.addToHttpParams(localVarQueryParameters, filter, "filter");
    }
    let localVarHeaders = this.defaultHeaders;
    let localVarCredential;
    localVarCredential = this.configuration.lookupCredential("access_token");
    if (localVarCredential) {
      localVarHeaders = localVarHeaders.set("x-access-token", localVarCredential);
    }
    let localVarHttpHeaderAcceptSelected = options && options.httpHeaderAccept;
    if (localVarHttpHeaderAcceptSelected === void 0) {
      const httpHeaderAccepts = [
        "application/json"
      ];
      localVarHttpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
    }
    if (localVarHttpHeaderAcceptSelected !== void 0) {
      localVarHeaders = localVarHeaders.set("Accept", localVarHttpHeaderAcceptSelected);
    }
    let localVarHttpContext = options && options.context;
    if (localVarHttpContext === void 0) {
      localVarHttpContext = new HttpContext();
    }
    let localVarTransferCache = options && options.transferCache;
    if (localVarTransferCache === void 0) {
      localVarTransferCache = true;
    }
    let responseType_ = "json";
    if (localVarHttpHeaderAcceptSelected) {
      if (localVarHttpHeaderAcceptSelected.startsWith("text")) {
        responseType_ = "text";
      } else if (this.configuration.isJsonMime(localVarHttpHeaderAcceptSelected)) {
        responseType_ = "json";
      } else {
        responseType_ = "blob";
      }
    }
    let localVarPath = `/entities/exporttasks`;
    return this.httpClient.request("get", `${this.configuration.basePath}${localVarPath}`, {
      context: localVarHttpContext,
      params: localVarQueryParameters,
      responseType: responseType_,
      withCredentials: this.configuration.withCredentials,
      headers: localVarHeaders,
      observe,
      transferCache: localVarTransferCache,
      reportProgress
    });
  }
  listFuelCards(owner, offset, limit, sort, filter, observe = "body", reportProgress = false, options) {
    if (owner === null || owner === void 0) {
      throw new Error("Required parameter owner was null or undefined when calling listFuelCards.");
    }
    let localVarQueryParameters = new HttpParams({ encoder: this.encoder });
    if (owner !== void 0 && owner !== null) {
      localVarQueryParameters = this.addToHttpParams(localVarQueryParameters, owner, "owner");
    }
    if (offset !== void 0 && offset !== null) {
      localVarQueryParameters = this.addToHttpParams(localVarQueryParameters, offset, "offset");
    }
    if (limit !== void 0 && limit !== null) {
      localVarQueryParameters = this.addToHttpParams(localVarQueryParameters, limit, "limit");
    }
    if (sort !== void 0 && sort !== null) {
      localVarQueryParameters = this.addToHttpParams(localVarQueryParameters, sort, "sort");
    }
    if (filter !== void 0 && filter !== null) {
      localVarQueryParameters = this.addToHttpParams(localVarQueryParameters, filter, "filter");
    }
    let localVarHeaders = this.defaultHeaders;
    let localVarCredential;
    localVarCredential = this.configuration.lookupCredential("access_token");
    if (localVarCredential) {
      localVarHeaders = localVarHeaders.set("x-access-token", localVarCredential);
    }
    let localVarHttpHeaderAcceptSelected = options && options.httpHeaderAccept;
    if (localVarHttpHeaderAcceptSelected === void 0) {
      const httpHeaderAccepts = [
        "application/json"
      ];
      localVarHttpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
    }
    if (localVarHttpHeaderAcceptSelected !== void 0) {
      localVarHeaders = localVarHeaders.set("Accept", localVarHttpHeaderAcceptSelected);
    }
    let localVarHttpContext = options && options.context;
    if (localVarHttpContext === void 0) {
      localVarHttpContext = new HttpContext();
    }
    let localVarTransferCache = options && options.transferCache;
    if (localVarTransferCache === void 0) {
      localVarTransferCache = true;
    }
    let responseType_ = "json";
    if (localVarHttpHeaderAcceptSelected) {
      if (localVarHttpHeaderAcceptSelected.startsWith("text")) {
        responseType_ = "text";
      } else if (this.configuration.isJsonMime(localVarHttpHeaderAcceptSelected)) {
        responseType_ = "json";
      } else {
        responseType_ = "blob";
      }
    }
    let localVarPath = `/entities/fuelcards`;
    return this.httpClient.request("get", `${this.configuration.basePath}${localVarPath}`, {
      context: localVarHttpContext,
      params: localVarQueryParameters,
      responseType: responseType_,
      withCredentials: this.configuration.withCredentials,
      headers: localVarHeaders,
      observe,
      transferCache: localVarTransferCache,
      reportProgress
    });
  }
  listGeoLockProfiles(owner, recurse, offset, limit, sort, filter, observe = "body", reportProgress = false, options) {
    if (owner === null || owner === void 0) {
      throw new Error("Required parameter owner was null or undefined when calling listGeoLockProfiles.");
    }
    let localVarQueryParameters = new HttpParams({ encoder: this.encoder });
    if (owner !== void 0 && owner !== null) {
      localVarQueryParameters = this.addToHttpParams(localVarQueryParameters, owner, "owner");
    }
    if (recurse !== void 0 && recurse !== null) {
      localVarQueryParameters = this.addToHttpParams(localVarQueryParameters, recurse, "recurse");
    }
    if (offset !== void 0 && offset !== null) {
      localVarQueryParameters = this.addToHttpParams(localVarQueryParameters, offset, "offset");
    }
    if (limit !== void 0 && limit !== null) {
      localVarQueryParameters = this.addToHttpParams(localVarQueryParameters, limit, "limit");
    }
    if (sort !== void 0 && sort !== null) {
      localVarQueryParameters = this.addToHttpParams(localVarQueryParameters, sort, "sort");
    }
    if (filter !== void 0 && filter !== null) {
      localVarQueryParameters = this.addToHttpParams(localVarQueryParameters, filter, "filter");
    }
    let localVarHeaders = this.defaultHeaders;
    let localVarCredential;
    localVarCredential = this.configuration.lookupCredential("access_token");
    if (localVarCredential) {
      localVarHeaders = localVarHeaders.set("x-access-token", localVarCredential);
    }
    let localVarHttpHeaderAcceptSelected = options && options.httpHeaderAccept;
    if (localVarHttpHeaderAcceptSelected === void 0) {
      const httpHeaderAccepts = [
        "application/json"
      ];
      localVarHttpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
    }
    if (localVarHttpHeaderAcceptSelected !== void 0) {
      localVarHeaders = localVarHeaders.set("Accept", localVarHttpHeaderAcceptSelected);
    }
    let localVarHttpContext = options && options.context;
    if (localVarHttpContext === void 0) {
      localVarHttpContext = new HttpContext();
    }
    let localVarTransferCache = options && options.transferCache;
    if (localVarTransferCache === void 0) {
      localVarTransferCache = true;
    }
    let responseType_ = "json";
    if (localVarHttpHeaderAcceptSelected) {
      if (localVarHttpHeaderAcceptSelected.startsWith("text")) {
        responseType_ = "text";
      } else if (this.configuration.isJsonMime(localVarHttpHeaderAcceptSelected)) {
        responseType_ = "json";
      } else {
        responseType_ = "blob";
      }
    }
    let localVarPath = `/entities/geolockprofiles`;
    return this.httpClient.request("get", `${this.configuration.basePath}${localVarPath}`, {
      context: localVarHttpContext,
      params: localVarQueryParameters,
      responseType: responseType_,
      withCredentials: this.configuration.withCredentials,
      headers: localVarHeaders,
      observe,
      transferCache: localVarTransferCache,
      reportProgress
    });
  }
  listIoTypes(owner, recurse, offset, limit, sort, filter, observe = "body", reportProgress = false, options) {
    if (owner === null || owner === void 0) {
      throw new Error("Required parameter owner was null or undefined when calling listIoTypes.");
    }
    let localVarQueryParameters = new HttpParams({ encoder: this.encoder });
    if (owner !== void 0 && owner !== null) {
      localVarQueryParameters = this.addToHttpParams(localVarQueryParameters, owner, "owner");
    }
    if (recurse !== void 0 && recurse !== null) {
      localVarQueryParameters = this.addToHttpParams(localVarQueryParameters, recurse, "recurse");
    }
    if (offset !== void 0 && offset !== null) {
      localVarQueryParameters = this.addToHttpParams(localVarQueryParameters, offset, "offset");
    }
    if (limit !== void 0 && limit !== null) {
      localVarQueryParameters = this.addToHttpParams(localVarQueryParameters, limit, "limit");
    }
    if (sort !== void 0 && sort !== null) {
      localVarQueryParameters = this.addToHttpParams(localVarQueryParameters, sort, "sort");
    }
    if (filter !== void 0 && filter !== null) {
      localVarQueryParameters = this.addToHttpParams(localVarQueryParameters, filter, "filter");
    }
    let localVarHeaders = this.defaultHeaders;
    let localVarCredential;
    localVarCredential = this.configuration.lookupCredential("access_token");
    if (localVarCredential) {
      localVarHeaders = localVarHeaders.set("x-access-token", localVarCredential);
    }
    let localVarHttpHeaderAcceptSelected = options && options.httpHeaderAccept;
    if (localVarHttpHeaderAcceptSelected === void 0) {
      const httpHeaderAccepts = [
        "application/json"
      ];
      localVarHttpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
    }
    if (localVarHttpHeaderAcceptSelected !== void 0) {
      localVarHeaders = localVarHeaders.set("Accept", localVarHttpHeaderAcceptSelected);
    }
    let localVarHttpContext = options && options.context;
    if (localVarHttpContext === void 0) {
      localVarHttpContext = new HttpContext();
    }
    let localVarTransferCache = options && options.transferCache;
    if (localVarTransferCache === void 0) {
      localVarTransferCache = true;
    }
    let responseType_ = "json";
    if (localVarHttpHeaderAcceptSelected) {
      if (localVarHttpHeaderAcceptSelected.startsWith("text")) {
        responseType_ = "text";
      } else if (this.configuration.isJsonMime(localVarHttpHeaderAcceptSelected)) {
        responseType_ = "json";
      } else {
        responseType_ = "blob";
      }
    }
    let localVarPath = `/entities/iotypes`;
    return this.httpClient.request("get", `${this.configuration.basePath}${localVarPath}`, {
      context: localVarHttpContext,
      params: localVarQueryParameters,
      responseType: responseType_,
      withCredentials: this.configuration.withCredentials,
      headers: localVarHeaders,
      observe,
      transferCache: localVarTransferCache,
      reportProgress
    });
  }
  listLabels(owner, recurse, offset, limit, sort, filter, observe = "body", reportProgress = false, options) {
    if (owner === null || owner === void 0) {
      throw new Error("Required parameter owner was null or undefined when calling listLabels.");
    }
    let localVarQueryParameters = new HttpParams({ encoder: this.encoder });
    if (owner !== void 0 && owner !== null) {
      localVarQueryParameters = this.addToHttpParams(localVarQueryParameters, owner, "owner");
    }
    if (recurse !== void 0 && recurse !== null) {
      localVarQueryParameters = this.addToHttpParams(localVarQueryParameters, recurse, "recurse");
    }
    if (offset !== void 0 && offset !== null) {
      localVarQueryParameters = this.addToHttpParams(localVarQueryParameters, offset, "offset");
    }
    if (limit !== void 0 && limit !== null) {
      localVarQueryParameters = this.addToHttpParams(localVarQueryParameters, limit, "limit");
    }
    if (sort !== void 0 && sort !== null) {
      localVarQueryParameters = this.addToHttpParams(localVarQueryParameters, sort, "sort");
    }
    if (filter !== void 0 && filter !== null) {
      localVarQueryParameters = this.addToHttpParams(localVarQueryParameters, filter, "filter");
    }
    let localVarHeaders = this.defaultHeaders;
    let localVarCredential;
    localVarCredential = this.configuration.lookupCredential("access_token");
    if (localVarCredential) {
      localVarHeaders = localVarHeaders.set("x-access-token", localVarCredential);
    }
    let localVarHttpHeaderAcceptSelected = options && options.httpHeaderAccept;
    if (localVarHttpHeaderAcceptSelected === void 0) {
      const httpHeaderAccepts = [
        "application/json"
      ];
      localVarHttpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
    }
    if (localVarHttpHeaderAcceptSelected !== void 0) {
      localVarHeaders = localVarHeaders.set("Accept", localVarHttpHeaderAcceptSelected);
    }
    let localVarHttpContext = options && options.context;
    if (localVarHttpContext === void 0) {
      localVarHttpContext = new HttpContext();
    }
    let localVarTransferCache = options && options.transferCache;
    if (localVarTransferCache === void 0) {
      localVarTransferCache = true;
    }
    let responseType_ = "json";
    if (localVarHttpHeaderAcceptSelected) {
      if (localVarHttpHeaderAcceptSelected.startsWith("text")) {
        responseType_ = "text";
      } else if (this.configuration.isJsonMime(localVarHttpHeaderAcceptSelected)) {
        responseType_ = "json";
      } else {
        responseType_ = "blob";
      }
    }
    let localVarPath = `/entities/labels`;
    return this.httpClient.request("get", `${this.configuration.basePath}${localVarPath}`, {
      context: localVarHttpContext,
      params: localVarQueryParameters,
      responseType: responseType_,
      withCredentials: this.configuration.withCredentials,
      headers: localVarHeaders,
      observe,
      transferCache: localVarTransferCache,
      reportProgress
    });
  }
  listMapSets(owner, offset, limit, sort, filter, observe = "body", reportProgress = false, options) {
    if (owner === null || owner === void 0) {
      throw new Error("Required parameter owner was null or undefined when calling listMapSets.");
    }
    let localVarQueryParameters = new HttpParams({ encoder: this.encoder });
    if (owner !== void 0 && owner !== null) {
      localVarQueryParameters = this.addToHttpParams(localVarQueryParameters, owner, "owner");
    }
    if (offset !== void 0 && offset !== null) {
      localVarQueryParameters = this.addToHttpParams(localVarQueryParameters, offset, "offset");
    }
    if (limit !== void 0 && limit !== null) {
      localVarQueryParameters = this.addToHttpParams(localVarQueryParameters, limit, "limit");
    }
    if (sort !== void 0 && sort !== null) {
      localVarQueryParameters = this.addToHttpParams(localVarQueryParameters, sort, "sort");
    }
    if (filter !== void 0 && filter !== null) {
      localVarQueryParameters = this.addToHttpParams(localVarQueryParameters, filter, "filter");
    }
    let localVarHeaders = this.defaultHeaders;
    let localVarCredential;
    localVarCredential = this.configuration.lookupCredential("access_token");
    if (localVarCredential) {
      localVarHeaders = localVarHeaders.set("x-access-token", localVarCredential);
    }
    let localVarHttpHeaderAcceptSelected = options && options.httpHeaderAccept;
    if (localVarHttpHeaderAcceptSelected === void 0) {
      const httpHeaderAccepts = [
        "application/json"
      ];
      localVarHttpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
    }
    if (localVarHttpHeaderAcceptSelected !== void 0) {
      localVarHeaders = localVarHeaders.set("Accept", localVarHttpHeaderAcceptSelected);
    }
    let localVarHttpContext = options && options.context;
    if (localVarHttpContext === void 0) {
      localVarHttpContext = new HttpContext();
    }
    let localVarTransferCache = options && options.transferCache;
    if (localVarTransferCache === void 0) {
      localVarTransferCache = true;
    }
    let responseType_ = "json";
    if (localVarHttpHeaderAcceptSelected) {
      if (localVarHttpHeaderAcceptSelected.startsWith("text")) {
        responseType_ = "text";
      } else if (this.configuration.isJsonMime(localVarHttpHeaderAcceptSelected)) {
        responseType_ = "json";
      } else {
        responseType_ = "blob";
      }
    }
    let localVarPath = `/entities/mapsets`;
    return this.httpClient.request("get", `${this.configuration.basePath}${localVarPath}`, {
      context: localVarHttpContext,
      params: localVarQueryParameters,
      responseType: responseType_,
      withCredentials: this.configuration.withCredentials,
      headers: localVarHeaders,
      observe,
      transferCache: localVarTransferCache,
      reportProgress
    });
  }
  listOverspeedProfiles(owner, recurse, offset, limit, sort, filter, observe = "body", reportProgress = false, options) {
    if (owner === null || owner === void 0) {
      throw new Error("Required parameter owner was null or undefined when calling listOverspeedProfiles.");
    }
    let localVarQueryParameters = new HttpParams({ encoder: this.encoder });
    if (owner !== void 0 && owner !== null) {
      localVarQueryParameters = this.addToHttpParams(localVarQueryParameters, owner, "owner");
    }
    if (recurse !== void 0 && recurse !== null) {
      localVarQueryParameters = this.addToHttpParams(localVarQueryParameters, recurse, "recurse");
    }
    if (offset !== void 0 && offset !== null) {
      localVarQueryParameters = this.addToHttpParams(localVarQueryParameters, offset, "offset");
    }
    if (limit !== void 0 && limit !== null) {
      localVarQueryParameters = this.addToHttpParams(localVarQueryParameters, limit, "limit");
    }
    if (sort !== void 0 && sort !== null) {
      localVarQueryParameters = this.addToHttpParams(localVarQueryParameters, sort, "sort");
    }
    if (filter !== void 0 && filter !== null) {
      localVarQueryParameters = this.addToHttpParams(localVarQueryParameters, filter, "filter");
    }
    let localVarHeaders = this.defaultHeaders;
    let localVarCredential;
    localVarCredential = this.configuration.lookupCredential("access_token");
    if (localVarCredential) {
      localVarHeaders = localVarHeaders.set("x-access-token", localVarCredential);
    }
    let localVarHttpHeaderAcceptSelected = options && options.httpHeaderAccept;
    if (localVarHttpHeaderAcceptSelected === void 0) {
      const httpHeaderAccepts = [
        "application/json"
      ];
      localVarHttpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
    }
    if (localVarHttpHeaderAcceptSelected !== void 0) {
      localVarHeaders = localVarHeaders.set("Accept", localVarHttpHeaderAcceptSelected);
    }
    let localVarHttpContext = options && options.context;
    if (localVarHttpContext === void 0) {
      localVarHttpContext = new HttpContext();
    }
    let localVarTransferCache = options && options.transferCache;
    if (localVarTransferCache === void 0) {
      localVarTransferCache = true;
    }
    let responseType_ = "json";
    if (localVarHttpHeaderAcceptSelected) {
      if (localVarHttpHeaderAcceptSelected.startsWith("text")) {
        responseType_ = "text";
      } else if (this.configuration.isJsonMime(localVarHttpHeaderAcceptSelected)) {
        responseType_ = "json";
      } else {
        responseType_ = "blob";
      }
    }
    let localVarPath = `/entities/overspeedprofiles`;
    return this.httpClient.request("get", `${this.configuration.basePath}${localVarPath}`, {
      context: localVarHttpContext,
      params: localVarQueryParameters,
      responseType: responseType_,
      withCredentials: this.configuration.withCredentials,
      headers: localVarHeaders,
      observe,
      transferCache: localVarTransferCache,
      reportProgress
    });
  }
  listReminders(owner, target, offset, limit, sort, filter, observe = "body", reportProgress = false, options) {
    if (owner === null || owner === void 0) {
      throw new Error("Required parameter owner was null or undefined when calling listReminders.");
    }
    let localVarQueryParameters = new HttpParams({ encoder: this.encoder });
    if (owner !== void 0 && owner !== null) {
      localVarQueryParameters = this.addToHttpParams(localVarQueryParameters, owner, "owner");
    }
    if (target !== void 0 && target !== null) {
      localVarQueryParameters = this.addToHttpParams(localVarQueryParameters, target, "target");
    }
    if (offset !== void 0 && offset !== null) {
      localVarQueryParameters = this.addToHttpParams(localVarQueryParameters, offset, "offset");
    }
    if (limit !== void 0 && limit !== null) {
      localVarQueryParameters = this.addToHttpParams(localVarQueryParameters, limit, "limit");
    }
    if (sort !== void 0 && sort !== null) {
      localVarQueryParameters = this.addToHttpParams(localVarQueryParameters, sort, "sort");
    }
    if (filter !== void 0 && filter !== null) {
      localVarQueryParameters = this.addToHttpParams(localVarQueryParameters, filter, "filter");
    }
    let localVarHeaders = this.defaultHeaders;
    let localVarCredential;
    localVarCredential = this.configuration.lookupCredential("access_token");
    if (localVarCredential) {
      localVarHeaders = localVarHeaders.set("x-access-token", localVarCredential);
    }
    let localVarHttpHeaderAcceptSelected = options && options.httpHeaderAccept;
    if (localVarHttpHeaderAcceptSelected === void 0) {
      const httpHeaderAccepts = [
        "application/json"
      ];
      localVarHttpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
    }
    if (localVarHttpHeaderAcceptSelected !== void 0) {
      localVarHeaders = localVarHeaders.set("Accept", localVarHttpHeaderAcceptSelected);
    }
    let localVarHttpContext = options && options.context;
    if (localVarHttpContext === void 0) {
      localVarHttpContext = new HttpContext();
    }
    let localVarTransferCache = options && options.transferCache;
    if (localVarTransferCache === void 0) {
      localVarTransferCache = true;
    }
    let responseType_ = "json";
    if (localVarHttpHeaderAcceptSelected) {
      if (localVarHttpHeaderAcceptSelected.startsWith("text")) {
        responseType_ = "text";
      } else if (this.configuration.isJsonMime(localVarHttpHeaderAcceptSelected)) {
        responseType_ = "json";
      } else {
        responseType_ = "blob";
      }
    }
    let localVarPath = `/entities/reminders`;
    return this.httpClient.request("get", `${this.configuration.basePath}${localVarPath}`, {
      context: localVarHttpContext,
      params: localVarQueryParameters,
      responseType: responseType_,
      withCredentials: this.configuration.withCredentials,
      headers: localVarHeaders,
      observe,
      transferCache: localVarTransferCache,
      reportProgress
    });
  }
  listReportDefinitions(owner, observe = "body", reportProgress = false, options) {
    if (owner === null || owner === void 0) {
      throw new Error("Required parameter owner was null or undefined when calling listReportDefinitions.");
    }
    let localVarQueryParameters = new HttpParams({ encoder: this.encoder });
    if (owner !== void 0 && owner !== null) {
      localVarQueryParameters = this.addToHttpParams(localVarQueryParameters, owner, "owner");
    }
    let localVarHeaders = this.defaultHeaders;
    let localVarCredential;
    localVarCredential = this.configuration.lookupCredential("access_token");
    if (localVarCredential) {
      localVarHeaders = localVarHeaders.set("x-access-token", localVarCredential);
    }
    let localVarHttpHeaderAcceptSelected = options && options.httpHeaderAccept;
    if (localVarHttpHeaderAcceptSelected === void 0) {
      const httpHeaderAccepts = [
        "application/json"
      ];
      localVarHttpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
    }
    if (localVarHttpHeaderAcceptSelected !== void 0) {
      localVarHeaders = localVarHeaders.set("Accept", localVarHttpHeaderAcceptSelected);
    }
    let localVarHttpContext = options && options.context;
    if (localVarHttpContext === void 0) {
      localVarHttpContext = new HttpContext();
    }
    let localVarTransferCache = options && options.transferCache;
    if (localVarTransferCache === void 0) {
      localVarTransferCache = true;
    }
    let responseType_ = "json";
    if (localVarHttpHeaderAcceptSelected) {
      if (localVarHttpHeaderAcceptSelected.startsWith("text")) {
        responseType_ = "text";
      } else if (this.configuration.isJsonMime(localVarHttpHeaderAcceptSelected)) {
        responseType_ = "json";
      } else {
        responseType_ = "blob";
      }
    }
    let localVarPath = `/entities/reportdefinitions`;
    return this.httpClient.request("get", `${this.configuration.basePath}${localVarPath}`, {
      context: localVarHttpContext,
      params: localVarQueryParameters,
      responseType: responseType_,
      withCredentials: this.configuration.withCredentials,
      headers: localVarHeaders,
      observe,
      transferCache: localVarTransferCache,
      reportProgress
    });
  }
  listReportTemplates(owner, offset, limit, sort, filter, observe = "body", reportProgress = false, options) {
    if (owner === null || owner === void 0) {
      throw new Error("Required parameter owner was null or undefined when calling listReportTemplates.");
    }
    let localVarQueryParameters = new HttpParams({ encoder: this.encoder });
    if (owner !== void 0 && owner !== null) {
      localVarQueryParameters = this.addToHttpParams(localVarQueryParameters, owner, "owner");
    }
    if (offset !== void 0 && offset !== null) {
      localVarQueryParameters = this.addToHttpParams(localVarQueryParameters, offset, "offset");
    }
    if (limit !== void 0 && limit !== null) {
      localVarQueryParameters = this.addToHttpParams(localVarQueryParameters, limit, "limit");
    }
    if (sort !== void 0 && sort !== null) {
      localVarQueryParameters = this.addToHttpParams(localVarQueryParameters, sort, "sort");
    }
    if (filter !== void 0 && filter !== null) {
      localVarQueryParameters = this.addToHttpParams(localVarQueryParameters, filter, "filter");
    }
    let localVarHeaders = this.defaultHeaders;
    let localVarCredential;
    localVarCredential = this.configuration.lookupCredential("access_token");
    if (localVarCredential) {
      localVarHeaders = localVarHeaders.set("x-access-token", localVarCredential);
    }
    let localVarHttpHeaderAcceptSelected = options && options.httpHeaderAccept;
    if (localVarHttpHeaderAcceptSelected === void 0) {
      const httpHeaderAccepts = [
        "application/json"
      ];
      localVarHttpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
    }
    if (localVarHttpHeaderAcceptSelected !== void 0) {
      localVarHeaders = localVarHeaders.set("Accept", localVarHttpHeaderAcceptSelected);
    }
    let localVarHttpContext = options && options.context;
    if (localVarHttpContext === void 0) {
      localVarHttpContext = new HttpContext();
    }
    let localVarTransferCache = options && options.transferCache;
    if (localVarTransferCache === void 0) {
      localVarTransferCache = true;
    }
    let responseType_ = "json";
    if (localVarHttpHeaderAcceptSelected) {
      if (localVarHttpHeaderAcceptSelected.startsWith("text")) {
        responseType_ = "text";
      } else if (this.configuration.isJsonMime(localVarHttpHeaderAcceptSelected)) {
        responseType_ = "json";
      } else {
        responseType_ = "blob";
      }
    }
    let localVarPath = `/entities/reporttemplates`;
    return this.httpClient.request("get", `${this.configuration.basePath}${localVarPath}`, {
      context: localVarHttpContext,
      params: localVarQueryParameters,
      responseType: responseType_,
      withCredentials: this.configuration.withCredentials,
      headers: localVarHeaders,
      observe,
      transferCache: localVarTransferCache,
      reportProgress
    });
  }
  listRoadProfiles(owner, recurse, offset, limit, sort, filter, observe = "body", reportProgress = false, options) {
    if (owner === null || owner === void 0) {
      throw new Error("Required parameter owner was null or undefined when calling listRoadProfiles.");
    }
    let localVarQueryParameters = new HttpParams({ encoder: this.encoder });
    if (owner !== void 0 && owner !== null) {
      localVarQueryParameters = this.addToHttpParams(localVarQueryParameters, owner, "owner");
    }
    if (recurse !== void 0 && recurse !== null) {
      localVarQueryParameters = this.addToHttpParams(localVarQueryParameters, recurse, "recurse");
    }
    if (offset !== void 0 && offset !== null) {
      localVarQueryParameters = this.addToHttpParams(localVarQueryParameters, offset, "offset");
    }
    if (limit !== void 0 && limit !== null) {
      localVarQueryParameters = this.addToHttpParams(localVarQueryParameters, limit, "limit");
    }
    if (sort !== void 0 && sort !== null) {
      localVarQueryParameters = this.addToHttpParams(localVarQueryParameters, sort, "sort");
    }
    if (filter !== void 0 && filter !== null) {
      localVarQueryParameters = this.addToHttpParams(localVarQueryParameters, filter, "filter");
    }
    let localVarHeaders = this.defaultHeaders;
    let localVarCredential;
    localVarCredential = this.configuration.lookupCredential("access_token");
    if (localVarCredential) {
      localVarHeaders = localVarHeaders.set("x-access-token", localVarCredential);
    }
    let localVarHttpHeaderAcceptSelected = options && options.httpHeaderAccept;
    if (localVarHttpHeaderAcceptSelected === void 0) {
      const httpHeaderAccepts = [
        "application/json"
      ];
      localVarHttpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
    }
    if (localVarHttpHeaderAcceptSelected !== void 0) {
      localVarHeaders = localVarHeaders.set("Accept", localVarHttpHeaderAcceptSelected);
    }
    let localVarHttpContext = options && options.context;
    if (localVarHttpContext === void 0) {
      localVarHttpContext = new HttpContext();
    }
    let localVarTransferCache = options && options.transferCache;
    if (localVarTransferCache === void 0) {
      localVarTransferCache = true;
    }
    let responseType_ = "json";
    if (localVarHttpHeaderAcceptSelected) {
      if (localVarHttpHeaderAcceptSelected.startsWith("text")) {
        responseType_ = "text";
      } else if (this.configuration.isJsonMime(localVarHttpHeaderAcceptSelected)) {
        responseType_ = "json";
      } else {
        responseType_ = "blob";
      }
    }
    let localVarPath = `/entities/roadprofiles`;
    return this.httpClient.request("get", `${this.configuration.basePath}${localVarPath}`, {
      context: localVarHttpContext,
      params: localVarQueryParameters,
      responseType: responseType_,
      withCredentials: this.configuration.withCredentials,
      headers: localVarHeaders,
      observe,
      transferCache: localVarTransferCache,
      reportProgress
    });
  }
  listScheduledReports(owner, offset, limit, sort, filter, observe = "body", reportProgress = false, options) {
    if (owner === null || owner === void 0) {
      throw new Error("Required parameter owner was null or undefined when calling listScheduledReports.");
    }
    let localVarQueryParameters = new HttpParams({ encoder: this.encoder });
    if (owner !== void 0 && owner !== null) {
      localVarQueryParameters = this.addToHttpParams(localVarQueryParameters, owner, "owner");
    }
    if (offset !== void 0 && offset !== null) {
      localVarQueryParameters = this.addToHttpParams(localVarQueryParameters, offset, "offset");
    }
    if (limit !== void 0 && limit !== null) {
      localVarQueryParameters = this.addToHttpParams(localVarQueryParameters, limit, "limit");
    }
    if (sort !== void 0 && sort !== null) {
      localVarQueryParameters = this.addToHttpParams(localVarQueryParameters, sort, "sort");
    }
    if (filter !== void 0 && filter !== null) {
      localVarQueryParameters = this.addToHttpParams(localVarQueryParameters, filter, "filter");
    }
    let localVarHeaders = this.defaultHeaders;
    let localVarCredential;
    localVarCredential = this.configuration.lookupCredential("access_token");
    if (localVarCredential) {
      localVarHeaders = localVarHeaders.set("x-access-token", localVarCredential);
    }
    let localVarHttpHeaderAcceptSelected = options && options.httpHeaderAccept;
    if (localVarHttpHeaderAcceptSelected === void 0) {
      const httpHeaderAccepts = [
        "application/json"
      ];
      localVarHttpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
    }
    if (localVarHttpHeaderAcceptSelected !== void 0) {
      localVarHeaders = localVarHeaders.set("Accept", localVarHttpHeaderAcceptSelected);
    }
    let localVarHttpContext = options && options.context;
    if (localVarHttpContext === void 0) {
      localVarHttpContext = new HttpContext();
    }
    let localVarTransferCache = options && options.transferCache;
    if (localVarTransferCache === void 0) {
      localVarTransferCache = true;
    }
    let responseType_ = "json";
    if (localVarHttpHeaderAcceptSelected) {
      if (localVarHttpHeaderAcceptSelected.startsWith("text")) {
        responseType_ = "text";
      } else if (this.configuration.isJsonMime(localVarHttpHeaderAcceptSelected)) {
        responseType_ = "json";
      } else {
        responseType_ = "blob";
      }
    }
    let localVarPath = `/entities/scheduledreports`;
    return this.httpClient.request("get", `${this.configuration.basePath}${localVarPath}`, {
      context: localVarHttpContext,
      params: localVarQueryParameters,
      responseType: responseType_,
      withCredentials: this.configuration.withCredentials,
      headers: localVarHeaders,
      observe,
      transferCache: localVarTransferCache,
      reportProgress
    });
  }
  listSharedAssetLocationTokens(owner, asset, offset, limit, sort, filter, observe = "body", reportProgress = false, options) {
    let localVarQueryParameters = new HttpParams({ encoder: this.encoder });
    if (owner !== void 0 && owner !== null) {
      localVarQueryParameters = this.addToHttpParams(localVarQueryParameters, owner, "owner");
    }
    if (asset !== void 0 && asset !== null) {
      localVarQueryParameters = this.addToHttpParams(localVarQueryParameters, asset, "asset");
    }
    if (offset !== void 0 && offset !== null) {
      localVarQueryParameters = this.addToHttpParams(localVarQueryParameters, offset, "offset");
    }
    if (limit !== void 0 && limit !== null) {
      localVarQueryParameters = this.addToHttpParams(localVarQueryParameters, limit, "limit");
    }
    if (sort !== void 0 && sort !== null) {
      localVarQueryParameters = this.addToHttpParams(localVarQueryParameters, sort, "sort");
    }
    if (filter !== void 0 && filter !== null) {
      localVarQueryParameters = this.addToHttpParams(localVarQueryParameters, filter, "filter");
    }
    let localVarHeaders = this.defaultHeaders;
    let localVarCredential;
    localVarCredential = this.configuration.lookupCredential("access_token");
    if (localVarCredential) {
      localVarHeaders = localVarHeaders.set("x-access-token", localVarCredential);
    }
    let localVarHttpHeaderAcceptSelected = options && options.httpHeaderAccept;
    if (localVarHttpHeaderAcceptSelected === void 0) {
      const httpHeaderAccepts = [
        "application/json"
      ];
      localVarHttpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
    }
    if (localVarHttpHeaderAcceptSelected !== void 0) {
      localVarHeaders = localVarHeaders.set("Accept", localVarHttpHeaderAcceptSelected);
    }
    let localVarHttpContext = options && options.context;
    if (localVarHttpContext === void 0) {
      localVarHttpContext = new HttpContext();
    }
    let localVarTransferCache = options && options.transferCache;
    if (localVarTransferCache === void 0) {
      localVarTransferCache = true;
    }
    let responseType_ = "json";
    if (localVarHttpHeaderAcceptSelected) {
      if (localVarHttpHeaderAcceptSelected.startsWith("text")) {
        responseType_ = "text";
      } else if (this.configuration.isJsonMime(localVarHttpHeaderAcceptSelected)) {
        responseType_ = "json";
      } else {
        responseType_ = "blob";
      }
    }
    let localVarPath = `/entities/assets/shared/location`;
    return this.httpClient.request("get", `${this.configuration.basePath}${localVarPath}`, {
      context: localVarHttpContext,
      params: localVarQueryParameters,
      responseType: responseType_,
      withCredentials: this.configuration.withCredentials,
      headers: localVarHeaders,
      observe,
      transferCache: localVarTransferCache,
      reportProgress
    });
  }
  listSimCards(owner, offset, limit, sort, filter, observe = "body", reportProgress = false, options) {
    if (owner === null || owner === void 0) {
      throw new Error("Required parameter owner was null or undefined when calling listSimCards.");
    }
    let localVarQueryParameters = new HttpParams({ encoder: this.encoder });
    if (owner !== void 0 && owner !== null) {
      localVarQueryParameters = this.addToHttpParams(localVarQueryParameters, owner, "owner");
    }
    if (offset !== void 0 && offset !== null) {
      localVarQueryParameters = this.addToHttpParams(localVarQueryParameters, offset, "offset");
    }
    if (limit !== void 0 && limit !== null) {
      localVarQueryParameters = this.addToHttpParams(localVarQueryParameters, limit, "limit");
    }
    if (sort !== void 0 && sort !== null) {
      localVarQueryParameters = this.addToHttpParams(localVarQueryParameters, sort, "sort");
    }
    if (filter !== void 0 && filter !== null) {
      localVarQueryParameters = this.addToHttpParams(localVarQueryParameters, filter, "filter");
    }
    let localVarHeaders = this.defaultHeaders;
    let localVarCredential;
    localVarCredential = this.configuration.lookupCredential("access_token");
    if (localVarCredential) {
      localVarHeaders = localVarHeaders.set("x-access-token", localVarCredential);
    }
    let localVarHttpHeaderAcceptSelected = options && options.httpHeaderAccept;
    if (localVarHttpHeaderAcceptSelected === void 0) {
      const httpHeaderAccepts = [
        "application/json"
      ];
      localVarHttpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
    }
    if (localVarHttpHeaderAcceptSelected !== void 0) {
      localVarHeaders = localVarHeaders.set("Accept", localVarHttpHeaderAcceptSelected);
    }
    let localVarHttpContext = options && options.context;
    if (localVarHttpContext === void 0) {
      localVarHttpContext = new HttpContext();
    }
    let localVarTransferCache = options && options.transferCache;
    if (localVarTransferCache === void 0) {
      localVarTransferCache = true;
    }
    let responseType_ = "json";
    if (localVarHttpHeaderAcceptSelected) {
      if (localVarHttpHeaderAcceptSelected.startsWith("text")) {
        responseType_ = "text";
      } else if (this.configuration.isJsonMime(localVarHttpHeaderAcceptSelected)) {
        responseType_ = "json";
      } else {
        responseType_ = "blob";
      }
    }
    let localVarPath = `/entities/simcards`;
    return this.httpClient.request("get", `${this.configuration.basePath}${localVarPath}`, {
      context: localVarHttpContext,
      params: localVarQueryParameters,
      responseType: responseType_,
      withCredentials: this.configuration.withCredentials,
      headers: localVarHeaders,
      observe,
      transferCache: localVarTransferCache,
      reportProgress
    });
  }
  listSmsGatewayProviderTypes(owner, offset, limit, sort, filter, observe = "body", reportProgress = false, options) {
    if (owner === null || owner === void 0) {
      throw new Error("Required parameter owner was null or undefined when calling listSmsGatewayProviderTypes.");
    }
    let localVarQueryParameters = new HttpParams({ encoder: this.encoder });
    if (owner !== void 0 && owner !== null) {
      localVarQueryParameters = this.addToHttpParams(localVarQueryParameters, owner, "owner");
    }
    if (offset !== void 0 && offset !== null) {
      localVarQueryParameters = this.addToHttpParams(localVarQueryParameters, offset, "offset");
    }
    if (limit !== void 0 && limit !== null) {
      localVarQueryParameters = this.addToHttpParams(localVarQueryParameters, limit, "limit");
    }
    if (sort !== void 0 && sort !== null) {
      localVarQueryParameters = this.addToHttpParams(localVarQueryParameters, sort, "sort");
    }
    if (filter !== void 0 && filter !== null) {
      localVarQueryParameters = this.addToHttpParams(localVarQueryParameters, filter, "filter");
    }
    let localVarHeaders = this.defaultHeaders;
    let localVarCredential;
    localVarCredential = this.configuration.lookupCredential("access_token");
    if (localVarCredential) {
      localVarHeaders = localVarHeaders.set("x-access-token", localVarCredential);
    }
    let localVarHttpHeaderAcceptSelected = options && options.httpHeaderAccept;
    if (localVarHttpHeaderAcceptSelected === void 0) {
      const httpHeaderAccepts = [
        "application/json"
      ];
      localVarHttpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
    }
    if (localVarHttpHeaderAcceptSelected !== void 0) {
      localVarHeaders = localVarHeaders.set("Accept", localVarHttpHeaderAcceptSelected);
    }
    let localVarHttpContext = options && options.context;
    if (localVarHttpContext === void 0) {
      localVarHttpContext = new HttpContext();
    }
    let localVarTransferCache = options && options.transferCache;
    if (localVarTransferCache === void 0) {
      localVarTransferCache = true;
    }
    let responseType_ = "json";
    if (localVarHttpHeaderAcceptSelected) {
      if (localVarHttpHeaderAcceptSelected.startsWith("text")) {
        responseType_ = "text";
      } else if (this.configuration.isJsonMime(localVarHttpHeaderAcceptSelected)) {
        responseType_ = "json";
      } else {
        responseType_ = "blob";
      }
    }
    let localVarPath = `/entities/smsgatewayprovidertypes`;
    return this.httpClient.request("get", `${this.configuration.basePath}${localVarPath}`, {
      context: localVarHttpContext,
      params: localVarQueryParameters,
      responseType: responseType_,
      withCredentials: this.configuration.withCredentials,
      headers: localVarHeaders,
      observe,
      transferCache: localVarTransferCache,
      reportProgress
    });
  }
  listSmsGatewayProviders(owner, offset, limit, sort, filter, observe = "body", reportProgress = false, options) {
    if (owner === null || owner === void 0) {
      throw new Error("Required parameter owner was null or undefined when calling listSmsGatewayProviders.");
    }
    let localVarQueryParameters = new HttpParams({ encoder: this.encoder });
    if (owner !== void 0 && owner !== null) {
      localVarQueryParameters = this.addToHttpParams(localVarQueryParameters, owner, "owner");
    }
    if (offset !== void 0 && offset !== null) {
      localVarQueryParameters = this.addToHttpParams(localVarQueryParameters, offset, "offset");
    }
    if (limit !== void 0 && limit !== null) {
      localVarQueryParameters = this.addToHttpParams(localVarQueryParameters, limit, "limit");
    }
    if (sort !== void 0 && sort !== null) {
      localVarQueryParameters = this.addToHttpParams(localVarQueryParameters, sort, "sort");
    }
    if (filter !== void 0 && filter !== null) {
      localVarQueryParameters = this.addToHttpParams(localVarQueryParameters, filter, "filter");
    }
    let localVarHeaders = this.defaultHeaders;
    let localVarCredential;
    localVarCredential = this.configuration.lookupCredential("access_token");
    if (localVarCredential) {
      localVarHeaders = localVarHeaders.set("x-access-token", localVarCredential);
    }
    let localVarHttpHeaderAcceptSelected = options && options.httpHeaderAccept;
    if (localVarHttpHeaderAcceptSelected === void 0) {
      const httpHeaderAccepts = [
        "application/json"
      ];
      localVarHttpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
    }
    if (localVarHttpHeaderAcceptSelected !== void 0) {
      localVarHeaders = localVarHeaders.set("Accept", localVarHttpHeaderAcceptSelected);
    }
    let localVarHttpContext = options && options.context;
    if (localVarHttpContext === void 0) {
      localVarHttpContext = new HttpContext();
    }
    let localVarTransferCache = options && options.transferCache;
    if (localVarTransferCache === void 0) {
      localVarTransferCache = true;
    }
    let responseType_ = "json";
    if (localVarHttpHeaderAcceptSelected) {
      if (localVarHttpHeaderAcceptSelected.startsWith("text")) {
        responseType_ = "text";
      } else if (this.configuration.isJsonMime(localVarHttpHeaderAcceptSelected)) {
        responseType_ = "json";
      } else {
        responseType_ = "blob";
      }
    }
    let localVarPath = `/entities/smsgatewayproviders`;
    return this.httpClient.request("get", `${this.configuration.basePath}${localVarPath}`, {
      context: localVarHttpContext,
      params: localVarQueryParameters,
      responseType: responseType_,
      withCredentials: this.configuration.withCredentials,
      headers: localVarHeaders,
      observe,
      transferCache: localVarTransferCache,
      reportProgress
    });
  }
  listSslCertificates(owner, offset, limit, sort, filter, observe = "body", reportProgress = false, options) {
    if (owner === null || owner === void 0) {
      throw new Error("Required parameter owner was null or undefined when calling listSslCertificates.");
    }
    let localVarQueryParameters = new HttpParams({ encoder: this.encoder });
    if (owner !== void 0 && owner !== null) {
      localVarQueryParameters = this.addToHttpParams(localVarQueryParameters, owner, "owner");
    }
    if (offset !== void 0 && offset !== null) {
      localVarQueryParameters = this.addToHttpParams(localVarQueryParameters, offset, "offset");
    }
    if (limit !== void 0 && limit !== null) {
      localVarQueryParameters = this.addToHttpParams(localVarQueryParameters, limit, "limit");
    }
    if (sort !== void 0 && sort !== null) {
      localVarQueryParameters = this.addToHttpParams(localVarQueryParameters, sort, "sort");
    }
    if (filter !== void 0 && filter !== null) {
      localVarQueryParameters = this.addToHttpParams(localVarQueryParameters, filter, "filter");
    }
    let localVarHeaders = this.defaultHeaders;
    let localVarCredential;
    localVarCredential = this.configuration.lookupCredential("access_token");
    if (localVarCredential) {
      localVarHeaders = localVarHeaders.set("x-access-token", localVarCredential);
    }
    let localVarHttpHeaderAcceptSelected = options && options.httpHeaderAccept;
    if (localVarHttpHeaderAcceptSelected === void 0) {
      const httpHeaderAccepts = [
        "application/json"
      ];
      localVarHttpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
    }
    if (localVarHttpHeaderAcceptSelected !== void 0) {
      localVarHeaders = localVarHeaders.set("Accept", localVarHttpHeaderAcceptSelected);
    }
    let localVarHttpContext = options && options.context;
    if (localVarHttpContext === void 0) {
      localVarHttpContext = new HttpContext();
    }
    let localVarTransferCache = options && options.transferCache;
    if (localVarTransferCache === void 0) {
      localVarTransferCache = true;
    }
    let responseType_ = "json";
    if (localVarHttpHeaderAcceptSelected) {
      if (localVarHttpHeaderAcceptSelected.startsWith("text")) {
        responseType_ = "text";
      } else if (this.configuration.isJsonMime(localVarHttpHeaderAcceptSelected)) {
        responseType_ = "json";
      } else {
        responseType_ = "blob";
      }
    }
    let localVarPath = `/entities/sslcertificates`;
    return this.httpClient.request("get", `${this.configuration.basePath}${localVarPath}`, {
      context: localVarHttpContext,
      params: localVarQueryParameters,
      responseType: responseType_,
      withCredentials: this.configuration.withCredentials,
      headers: localVarHeaders,
      observe,
      transferCache: localVarTransferCache,
      reportProgress
    });
  }
  listThemes(owner, recurse, offset, limit, sort, filter, observe = "body", reportProgress = false, options) {
    if (owner === null || owner === void 0) {
      throw new Error("Required parameter owner was null or undefined when calling listThemes.");
    }
    let localVarQueryParameters = new HttpParams({ encoder: this.encoder });
    if (owner !== void 0 && owner !== null) {
      localVarQueryParameters = this.addToHttpParams(localVarQueryParameters, owner, "owner");
    }
    if (recurse !== void 0 && recurse !== null) {
      localVarQueryParameters = this.addToHttpParams(localVarQueryParameters, recurse, "recurse");
    }
    if (offset !== void 0 && offset !== null) {
      localVarQueryParameters = this.addToHttpParams(localVarQueryParameters, offset, "offset");
    }
    if (limit !== void 0 && limit !== null) {
      localVarQueryParameters = this.addToHttpParams(localVarQueryParameters, limit, "limit");
    }
    if (sort !== void 0 && sort !== null) {
      localVarQueryParameters = this.addToHttpParams(localVarQueryParameters, sort, "sort");
    }
    if (filter !== void 0 && filter !== null) {
      localVarQueryParameters = this.addToHttpParams(localVarQueryParameters, filter, "filter");
    }
    let localVarHeaders = this.defaultHeaders;
    let localVarCredential;
    localVarCredential = this.configuration.lookupCredential("access_token");
    if (localVarCredential) {
      localVarHeaders = localVarHeaders.set("x-access-token", localVarCredential);
    }
    let localVarHttpHeaderAcceptSelected = options && options.httpHeaderAccept;
    if (localVarHttpHeaderAcceptSelected === void 0) {
      const httpHeaderAccepts = [
        "application/json"
      ];
      localVarHttpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
    }
    if (localVarHttpHeaderAcceptSelected !== void 0) {
      localVarHeaders = localVarHeaders.set("Accept", localVarHttpHeaderAcceptSelected);
    }
    let localVarHttpContext = options && options.context;
    if (localVarHttpContext === void 0) {
      localVarHttpContext = new HttpContext();
    }
    let localVarTransferCache = options && options.transferCache;
    if (localVarTransferCache === void 0) {
      localVarTransferCache = true;
    }
    let responseType_ = "json";
    if (localVarHttpHeaderAcceptSelected) {
      if (localVarHttpHeaderAcceptSelected.startsWith("text")) {
        responseType_ = "text";
      } else if (this.configuration.isJsonMime(localVarHttpHeaderAcceptSelected)) {
        responseType_ = "json";
      } else {
        responseType_ = "blob";
      }
    }
    let localVarPath = `/entities/themes`;
    return this.httpClient.request("get", `${this.configuration.basePath}${localVarPath}`, {
      context: localVarHttpContext,
      params: localVarQueryParameters,
      responseType: responseType_,
      withCredentials: this.configuration.withCredentials,
      headers: localVarHeaders,
      observe,
      transferCache: localVarTransferCache,
      reportProgress
    });
  }
  listZoneGroups(owner, offset, limit, sort, filter, observe = "body", reportProgress = false, options) {
    if (owner === null || owner === void 0) {
      throw new Error("Required parameter owner was null or undefined when calling listZoneGroups.");
    }
    let localVarQueryParameters = new HttpParams({ encoder: this.encoder });
    if (owner !== void 0 && owner !== null) {
      localVarQueryParameters = this.addToHttpParams(localVarQueryParameters, owner, "owner");
    }
    if (offset !== void 0 && offset !== null) {
      localVarQueryParameters = this.addToHttpParams(localVarQueryParameters, offset, "offset");
    }
    if (limit !== void 0 && limit !== null) {
      localVarQueryParameters = this.addToHttpParams(localVarQueryParameters, limit, "limit");
    }
    if (sort !== void 0 && sort !== null) {
      localVarQueryParameters = this.addToHttpParams(localVarQueryParameters, sort, "sort");
    }
    if (filter !== void 0 && filter !== null) {
      localVarQueryParameters = this.addToHttpParams(localVarQueryParameters, filter, "filter");
    }
    let localVarHeaders = this.defaultHeaders;
    let localVarCredential;
    localVarCredential = this.configuration.lookupCredential("access_token");
    if (localVarCredential) {
      localVarHeaders = localVarHeaders.set("x-access-token", localVarCredential);
    }
    let localVarHttpHeaderAcceptSelected = options && options.httpHeaderAccept;
    if (localVarHttpHeaderAcceptSelected === void 0) {
      const httpHeaderAccepts = [
        "application/json"
      ];
      localVarHttpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
    }
    if (localVarHttpHeaderAcceptSelected !== void 0) {
      localVarHeaders = localVarHeaders.set("Accept", localVarHttpHeaderAcceptSelected);
    }
    let localVarHttpContext = options && options.context;
    if (localVarHttpContext === void 0) {
      localVarHttpContext = new HttpContext();
    }
    let localVarTransferCache = options && options.transferCache;
    if (localVarTransferCache === void 0) {
      localVarTransferCache = true;
    }
    let responseType_ = "json";
    if (localVarHttpHeaderAcceptSelected) {
      if (localVarHttpHeaderAcceptSelected.startsWith("text")) {
        responseType_ = "text";
      } else if (this.configuration.isJsonMime(localVarHttpHeaderAcceptSelected)) {
        responseType_ = "json";
      } else {
        responseType_ = "blob";
      }
    }
    let localVarPath = `/entities/zonegroups`;
    return this.httpClient.request("get", `${this.configuration.basePath}${localVarPath}`, {
      context: localVarHttpContext,
      params: localVarQueryParameters,
      responseType: responseType_,
      withCredentials: this.configuration.withCredentials,
      headers: localVarHeaders,
      observe,
      transferCache: localVarTransferCache,
      reportProgress
    });
  }
  listZones(owner, offset, limit, sort, filter, bounds, observe = "body", reportProgress = false, options) {
    if (owner === null || owner === void 0) {
      throw new Error("Required parameter owner was null or undefined when calling listZones.");
    }
    let localVarQueryParameters = new HttpParams({ encoder: this.encoder });
    if (owner !== void 0 && owner !== null) {
      localVarQueryParameters = this.addToHttpParams(localVarQueryParameters, owner, "owner");
    }
    if (offset !== void 0 && offset !== null) {
      localVarQueryParameters = this.addToHttpParams(localVarQueryParameters, offset, "offset");
    }
    if (limit !== void 0 && limit !== null) {
      localVarQueryParameters = this.addToHttpParams(localVarQueryParameters, limit, "limit");
    }
    if (sort !== void 0 && sort !== null) {
      localVarQueryParameters = this.addToHttpParams(localVarQueryParameters, sort, "sort");
    }
    if (filter !== void 0 && filter !== null) {
      localVarQueryParameters = this.addToHttpParams(localVarQueryParameters, filter, "filter");
    }
    if (bounds !== void 0 && bounds !== null) {
      localVarQueryParameters = this.addToHttpParams(localVarQueryParameters, bounds, "bounds");
    }
    let localVarHeaders = this.defaultHeaders;
    let localVarCredential;
    localVarCredential = this.configuration.lookupCredential("access_token");
    if (localVarCredential) {
      localVarHeaders = localVarHeaders.set("x-access-token", localVarCredential);
    }
    let localVarHttpHeaderAcceptSelected = options && options.httpHeaderAccept;
    if (localVarHttpHeaderAcceptSelected === void 0) {
      const httpHeaderAccepts = [
        "application/json"
      ];
      localVarHttpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
    }
    if (localVarHttpHeaderAcceptSelected !== void 0) {
      localVarHeaders = localVarHeaders.set("Accept", localVarHttpHeaderAcceptSelected);
    }
    let localVarHttpContext = options && options.context;
    if (localVarHttpContext === void 0) {
      localVarHttpContext = new HttpContext();
    }
    let localVarTransferCache = options && options.transferCache;
    if (localVarTransferCache === void 0) {
      localVarTransferCache = true;
    }
    let responseType_ = "json";
    if (localVarHttpHeaderAcceptSelected) {
      if (localVarHttpHeaderAcceptSelected.startsWith("text")) {
        responseType_ = "text";
      } else if (this.configuration.isJsonMime(localVarHttpHeaderAcceptSelected)) {
        responseType_ = "json";
      } else {
        responseType_ = "blob";
      }
    }
    let localVarPath = `/entities/zones`;
    return this.httpClient.request("get", `${this.configuration.basePath}${localVarPath}`, {
      context: localVarHttpContext,
      params: localVarQueryParameters,
      responseType: responseType_,
      withCredentials: this.configuration.withCredentials,
      headers: localVarHeaders,
      observe,
      transferCache: localVarTransferCache,
      reportProgress
    });
  }
  moveAsset(id, request, observe = "body", reportProgress = false, options) {
    if (id === null || id === void 0) {
      throw new Error("Required parameter id was null or undefined when calling moveAsset.");
    }
    if (request === null || request === void 0) {
      throw new Error("Required parameter request was null or undefined when calling moveAsset.");
    }
    let localVarHeaders = this.defaultHeaders;
    let localVarCredential;
    localVarCredential = this.configuration.lookupCredential("access_token");
    if (localVarCredential) {
      localVarHeaders = localVarHeaders.set("x-access-token", localVarCredential);
    }
    let localVarHttpHeaderAcceptSelected = options && options.httpHeaderAccept;
    if (localVarHttpHeaderAcceptSelected === void 0) {
      const httpHeaderAccepts = [
        "application/json"
      ];
      localVarHttpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
    }
    if (localVarHttpHeaderAcceptSelected !== void 0) {
      localVarHeaders = localVarHeaders.set("Accept", localVarHttpHeaderAcceptSelected);
    }
    let localVarHttpContext = options && options.context;
    if (localVarHttpContext === void 0) {
      localVarHttpContext = new HttpContext();
    }
    let localVarTransferCache = options && options.transferCache;
    if (localVarTransferCache === void 0) {
      localVarTransferCache = true;
    }
    const consumes = [
      "application/json"
    ];
    const httpContentTypeSelected = this.configuration.selectHeaderContentType(consumes);
    if (httpContentTypeSelected !== void 0) {
      localVarHeaders = localVarHeaders.set("Content-Type", httpContentTypeSelected);
    }
    let responseType_ = "json";
    if (localVarHttpHeaderAcceptSelected) {
      if (localVarHttpHeaderAcceptSelected.startsWith("text")) {
        responseType_ = "text";
      } else if (this.configuration.isJsonMime(localVarHttpHeaderAcceptSelected)) {
        responseType_ = "json";
      } else {
        responseType_ = "blob";
      }
    }
    let localVarPath = `/entities/assets/${this.configuration.encodeParam({ name: "id", value: id, in: "path", style: "simple", explode: false, dataType: "string", dataFormat: void 0 })}/move`;
    return this.httpClient.request("post", `${this.configuration.basePath}${localVarPath}`, {
      context: localVarHttpContext,
      body: request,
      responseType: responseType_,
      withCredentials: this.configuration.withCredentials,
      headers: localVarHeaders,
      observe,
      transferCache: localVarTransferCache,
      reportProgress
    });
  }
  provisionSslCertificate(id, observe = "body", reportProgress = false, options) {
    if (id === null || id === void 0) {
      throw new Error("Required parameter id was null or undefined when calling provisionSslCertificate.");
    }
    let localVarHeaders = this.defaultHeaders;
    let localVarCredential;
    localVarCredential = this.configuration.lookupCredential("access_token");
    if (localVarCredential) {
      localVarHeaders = localVarHeaders.set("x-access-token", localVarCredential);
    }
    let localVarHttpHeaderAcceptSelected = options && options.httpHeaderAccept;
    if (localVarHttpHeaderAcceptSelected === void 0) {
      const httpHeaderAccepts = [
        "application/json"
      ];
      localVarHttpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
    }
    if (localVarHttpHeaderAcceptSelected !== void 0) {
      localVarHeaders = localVarHeaders.set("Accept", localVarHttpHeaderAcceptSelected);
    }
    let localVarHttpContext = options && options.context;
    if (localVarHttpContext === void 0) {
      localVarHttpContext = new HttpContext();
    }
    let localVarTransferCache = options && options.transferCache;
    if (localVarTransferCache === void 0) {
      localVarTransferCache = true;
    }
    let responseType_ = "json";
    if (localVarHttpHeaderAcceptSelected) {
      if (localVarHttpHeaderAcceptSelected.startsWith("text")) {
        responseType_ = "text";
      } else if (this.configuration.isJsonMime(localVarHttpHeaderAcceptSelected)) {
        responseType_ = "json";
      } else {
        responseType_ = "blob";
      }
    }
    let localVarPath = `/entities/sslcertificates/${this.configuration.encodeParam({ name: "id", value: id, in: "path", style: "simple", explode: false, dataType: "string", dataFormat: void 0 })}/provision`;
    return this.httpClient.request("post", `${this.configuration.basePath}${localVarPath}`, {
      context: localVarHttpContext,
      responseType: responseType_,
      withCredentials: this.configuration.withCredentials,
      headers: localVarHeaders,
      observe,
      transferCache: localVarTransferCache,
      reportProgress
    });
  }
  rebuildDashboardWidget(id, widgetId, observe = "body", reportProgress = false, options) {
    if (id === null || id === void 0) {
      throw new Error("Required parameter id was null or undefined when calling rebuildDashboardWidget.");
    }
    if (widgetId === null || widgetId === void 0) {
      throw new Error("Required parameter widgetId was null or undefined when calling rebuildDashboardWidget.");
    }
    let localVarHeaders = this.defaultHeaders;
    let localVarCredential;
    localVarCredential = this.configuration.lookupCredential("access_token");
    if (localVarCredential) {
      localVarHeaders = localVarHeaders.set("x-access-token", localVarCredential);
    }
    let localVarHttpHeaderAcceptSelected = options && options.httpHeaderAccept;
    if (localVarHttpHeaderAcceptSelected === void 0) {
      const httpHeaderAccepts = [
        "application/json"
      ];
      localVarHttpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
    }
    if (localVarHttpHeaderAcceptSelected !== void 0) {
      localVarHeaders = localVarHeaders.set("Accept", localVarHttpHeaderAcceptSelected);
    }
    let localVarHttpContext = options && options.context;
    if (localVarHttpContext === void 0) {
      localVarHttpContext = new HttpContext();
    }
    let localVarTransferCache = options && options.transferCache;
    if (localVarTransferCache === void 0) {
      localVarTransferCache = true;
    }
    let responseType_ = "json";
    if (localVarHttpHeaderAcceptSelected) {
      if (localVarHttpHeaderAcceptSelected.startsWith("text")) {
        responseType_ = "text";
      } else if (this.configuration.isJsonMime(localVarHttpHeaderAcceptSelected)) {
        responseType_ = "json";
      } else {
        responseType_ = "blob";
      }
    }
    let localVarPath = `/entities/dashboards/${this.configuration.encodeParam({ name: "id", value: id, in: "path", style: "simple", explode: false, dataType: "string", dataFormat: void 0 })}/widgets/${this.configuration.encodeParam({ name: "widgetId", value: widgetId, in: "path", style: "simple", explode: false, dataType: "string", dataFormat: void 0 })}/rebuild`;
    return this.httpClient.request("post", `${this.configuration.basePath}${localVarPath}`, {
      context: localVarHttpContext,
      responseType: responseType_,
      withCredentials: this.configuration.withCredentials,
      headers: localVarHeaders,
      observe,
      transferCache: localVarTransferCache,
      reportProgress
    });
  }
  unlinkAssets(id, asset, observe = "body", reportProgress = false, options) {
    if (id === null || id === void 0) {
      throw new Error("Required parameter id was null or undefined when calling unlinkAssets.");
    }
    if (asset === null || asset === void 0) {
      throw new Error("Required parameter asset was null or undefined when calling unlinkAssets.");
    }
    let localVarHeaders = this.defaultHeaders;
    let localVarCredential;
    localVarCredential = this.configuration.lookupCredential("access_token");
    if (localVarCredential) {
      localVarHeaders = localVarHeaders.set("x-access-token", localVarCredential);
    }
    let localVarHttpHeaderAcceptSelected = options && options.httpHeaderAccept;
    if (localVarHttpHeaderAcceptSelected === void 0) {
      const httpHeaderAccepts = [
        "application/json"
      ];
      localVarHttpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
    }
    if (localVarHttpHeaderAcceptSelected !== void 0) {
      localVarHeaders = localVarHeaders.set("Accept", localVarHttpHeaderAcceptSelected);
    }
    let localVarHttpContext = options && options.context;
    if (localVarHttpContext === void 0) {
      localVarHttpContext = new HttpContext();
    }
    let localVarTransferCache = options && options.transferCache;
    if (localVarTransferCache === void 0) {
      localVarTransferCache = true;
    }
    let responseType_ = "json";
    if (localVarHttpHeaderAcceptSelected) {
      if (localVarHttpHeaderAcceptSelected.startsWith("text")) {
        responseType_ = "text";
      } else if (this.configuration.isJsonMime(localVarHttpHeaderAcceptSelected)) {
        responseType_ = "json";
      } else {
        responseType_ = "blob";
      }
    }
    let localVarPath = `/entities/assets/${this.configuration.encodeParam({ name: "id", value: id, in: "path", style: "simple", explode: false, dataType: "string", dataFormat: void 0 })}/unlink/${this.configuration.encodeParam({ name: "asset", value: asset, in: "path", style: "simple", explode: false, dataType: "string", dataFormat: void 0 })}`;
    return this.httpClient.request("post", `${this.configuration.basePath}${localVarPath}`, {
      context: localVarHttpContext,
      responseType: responseType_,
      withCredentials: this.configuration.withCredentials,
      headers: localVarHeaders,
      observe,
      transferCache: localVarTransferCache,
      reportProgress
    });
  }
  updateAlert(id, request, observe = "body", reportProgress = false, options) {
    if (id === null || id === void 0) {
      throw new Error("Required parameter id was null or undefined when calling updateAlert.");
    }
    if (request === null || request === void 0) {
      throw new Error("Required parameter request was null or undefined when calling updateAlert.");
    }
    let localVarHeaders = this.defaultHeaders;
    let localVarCredential;
    localVarCredential = this.configuration.lookupCredential("access_token");
    if (localVarCredential) {
      localVarHeaders = localVarHeaders.set("x-access-token", localVarCredential);
    }
    let localVarHttpHeaderAcceptSelected = options && options.httpHeaderAccept;
    if (localVarHttpHeaderAcceptSelected === void 0) {
      const httpHeaderAccepts = [
        "application/json"
      ];
      localVarHttpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
    }
    if (localVarHttpHeaderAcceptSelected !== void 0) {
      localVarHeaders = localVarHeaders.set("Accept", localVarHttpHeaderAcceptSelected);
    }
    let localVarHttpContext = options && options.context;
    if (localVarHttpContext === void 0) {
      localVarHttpContext = new HttpContext();
    }
    let localVarTransferCache = options && options.transferCache;
    if (localVarTransferCache === void 0) {
      localVarTransferCache = true;
    }
    const consumes = [
      "application/json"
    ];
    const httpContentTypeSelected = this.configuration.selectHeaderContentType(consumes);
    if (httpContentTypeSelected !== void 0) {
      localVarHeaders = localVarHeaders.set("Content-Type", httpContentTypeSelected);
    }
    let responseType_ = "json";
    if (localVarHttpHeaderAcceptSelected) {
      if (localVarHttpHeaderAcceptSelected.startsWith("text")) {
        responseType_ = "text";
      } else if (this.configuration.isJsonMime(localVarHttpHeaderAcceptSelected)) {
        responseType_ = "json";
      } else {
        responseType_ = "blob";
      }
    }
    let localVarPath = `/entities/alerts/${this.configuration.encodeParam({ name: "id", value: id, in: "path", style: "simple", explode: false, dataType: "string", dataFormat: void 0 })}`;
    return this.httpClient.request("put", `${this.configuration.basePath}${localVarPath}`, {
      context: localVarHttpContext,
      body: request,
      responseType: responseType_,
      withCredentials: this.configuration.withCredentials,
      headers: localVarHeaders,
      observe,
      transferCache: localVarTransferCache,
      reportProgress
    });
  }
  updateAsset(id, request, observe = "body", reportProgress = false, options) {
    if (id === null || id === void 0) {
      throw new Error("Required parameter id was null or undefined when calling updateAsset.");
    }
    if (request === null || request === void 0) {
      throw new Error("Required parameter request was null or undefined when calling updateAsset.");
    }
    let localVarHeaders = this.defaultHeaders;
    let localVarCredential;
    localVarCredential = this.configuration.lookupCredential("access_token");
    if (localVarCredential) {
      localVarHeaders = localVarHeaders.set("x-access-token", localVarCredential);
    }
    let localVarHttpHeaderAcceptSelected = options && options.httpHeaderAccept;
    if (localVarHttpHeaderAcceptSelected === void 0) {
      const httpHeaderAccepts = [
        "application/json"
      ];
      localVarHttpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
    }
    if (localVarHttpHeaderAcceptSelected !== void 0) {
      localVarHeaders = localVarHeaders.set("Accept", localVarHttpHeaderAcceptSelected);
    }
    let localVarHttpContext = options && options.context;
    if (localVarHttpContext === void 0) {
      localVarHttpContext = new HttpContext();
    }
    let localVarTransferCache = options && options.transferCache;
    if (localVarTransferCache === void 0) {
      localVarTransferCache = true;
    }
    const consumes = [
      "application/json"
    ];
    const httpContentTypeSelected = this.configuration.selectHeaderContentType(consumes);
    if (httpContentTypeSelected !== void 0) {
      localVarHeaders = localVarHeaders.set("Content-Type", httpContentTypeSelected);
    }
    let responseType_ = "json";
    if (localVarHttpHeaderAcceptSelected) {
      if (localVarHttpHeaderAcceptSelected.startsWith("text")) {
        responseType_ = "text";
      } else if (this.configuration.isJsonMime(localVarHttpHeaderAcceptSelected)) {
        responseType_ = "json";
      } else {
        responseType_ = "blob";
      }
    }
    let localVarPath = `/entities/assets/${this.configuration.encodeParam({ name: "id", value: id, in: "path", style: "simple", explode: false, dataType: "string", dataFormat: void 0 })}`;
    return this.httpClient.request("put", `${this.configuration.basePath}${localVarPath}`, {
      context: localVarHttpContext,
      body: request,
      responseType: responseType_,
      withCredentials: this.configuration.withCredentials,
      headers: localVarHeaders,
      observe,
      transferCache: localVarTransferCache,
      reportProgress
    });
  }
  updateAssetAvatar(id, observe = "body", reportProgress = false, options) {
    if (id === null || id === void 0) {
      throw new Error("Required parameter id was null or undefined when calling updateAssetAvatar.");
    }
    let localVarHeaders = this.defaultHeaders;
    let localVarCredential;
    localVarCredential = this.configuration.lookupCredential("access_token");
    if (localVarCredential) {
      localVarHeaders = localVarHeaders.set("x-access-token", localVarCredential);
    }
    let localVarHttpHeaderAcceptSelected = options && options.httpHeaderAccept;
    if (localVarHttpHeaderAcceptSelected === void 0) {
      const httpHeaderAccepts = [];
      localVarHttpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
    }
    if (localVarHttpHeaderAcceptSelected !== void 0) {
      localVarHeaders = localVarHeaders.set("Accept", localVarHttpHeaderAcceptSelected);
    }
    let localVarHttpContext = options && options.context;
    if (localVarHttpContext === void 0) {
      localVarHttpContext = new HttpContext();
    }
    let localVarTransferCache = options && options.transferCache;
    if (localVarTransferCache === void 0) {
      localVarTransferCache = true;
    }
    let responseType_ = "json";
    if (localVarHttpHeaderAcceptSelected) {
      if (localVarHttpHeaderAcceptSelected.startsWith("text")) {
        responseType_ = "text";
      } else if (this.configuration.isJsonMime(localVarHttpHeaderAcceptSelected)) {
        responseType_ = "json";
      } else {
        responseType_ = "blob";
      }
    }
    let localVarPath = `/entities/assets/${this.configuration.encodeParam({ name: "id", value: id, in: "path", style: "simple", explode: false, dataType: "string", dataFormat: void 0 })}/avatar`;
    return this.httpClient.request("post", `${this.configuration.basePath}${localVarPath}`, {
      context: localVarHttpContext,
      responseType: responseType_,
      withCredentials: this.configuration.withCredentials,
      headers: localVarHeaders,
      observe,
      transferCache: localVarTransferCache,
      reportProgress
    });
  }
  updateAssetCategory(id, request, observe = "body", reportProgress = false, options) {
    if (id === null || id === void 0) {
      throw new Error("Required parameter id was null or undefined when calling updateAssetCategory.");
    }
    if (request === null || request === void 0) {
      throw new Error("Required parameter request was null or undefined when calling updateAssetCategory.");
    }
    let localVarHeaders = this.defaultHeaders;
    let localVarCredential;
    localVarCredential = this.configuration.lookupCredential("access_token");
    if (localVarCredential) {
      localVarHeaders = localVarHeaders.set("x-access-token", localVarCredential);
    }
    let localVarHttpHeaderAcceptSelected = options && options.httpHeaderAccept;
    if (localVarHttpHeaderAcceptSelected === void 0) {
      const httpHeaderAccepts = [
        "application/json"
      ];
      localVarHttpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
    }
    if (localVarHttpHeaderAcceptSelected !== void 0) {
      localVarHeaders = localVarHeaders.set("Accept", localVarHttpHeaderAcceptSelected);
    }
    let localVarHttpContext = options && options.context;
    if (localVarHttpContext === void 0) {
      localVarHttpContext = new HttpContext();
    }
    let localVarTransferCache = options && options.transferCache;
    if (localVarTransferCache === void 0) {
      localVarTransferCache = true;
    }
    const consumes = [
      "application/json"
    ];
    const httpContentTypeSelected = this.configuration.selectHeaderContentType(consumes);
    if (httpContentTypeSelected !== void 0) {
      localVarHeaders = localVarHeaders.set("Content-Type", httpContentTypeSelected);
    }
    let responseType_ = "json";
    if (localVarHttpHeaderAcceptSelected) {
      if (localVarHttpHeaderAcceptSelected.startsWith("text")) {
        responseType_ = "text";
      } else if (this.configuration.isJsonMime(localVarHttpHeaderAcceptSelected)) {
        responseType_ = "json";
      } else {
        responseType_ = "blob";
      }
    }
    let localVarPath = `/entities/assetcategories/${this.configuration.encodeParam({ name: "id", value: id, in: "path", style: "simple", explode: false, dataType: "string", dataFormat: void 0 })}`;
    return this.httpClient.request("put", `${this.configuration.basePath}${localVarPath}`, {
      context: localVarHttpContext,
      body: request,
      responseType: responseType_,
      withCredentials: this.configuration.withCredentials,
      headers: localVarHeaders,
      observe,
      transferCache: localVarTransferCache,
      reportProgress
    });
  }
  updateAssetGroup(id, request, observe = "body", reportProgress = false, options) {
    if (id === null || id === void 0) {
      throw new Error("Required parameter id was null or undefined when calling updateAssetGroup.");
    }
    if (request === null || request === void 0) {
      throw new Error("Required parameter request was null or undefined when calling updateAssetGroup.");
    }
    let localVarHeaders = this.defaultHeaders;
    let localVarCredential;
    localVarCredential = this.configuration.lookupCredential("access_token");
    if (localVarCredential) {
      localVarHeaders = localVarHeaders.set("x-access-token", localVarCredential);
    }
    let localVarHttpHeaderAcceptSelected = options && options.httpHeaderAccept;
    if (localVarHttpHeaderAcceptSelected === void 0) {
      const httpHeaderAccepts = [
        "application/json"
      ];
      localVarHttpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
    }
    if (localVarHttpHeaderAcceptSelected !== void 0) {
      localVarHeaders = localVarHeaders.set("Accept", localVarHttpHeaderAcceptSelected);
    }
    let localVarHttpContext = options && options.context;
    if (localVarHttpContext === void 0) {
      localVarHttpContext = new HttpContext();
    }
    let localVarTransferCache = options && options.transferCache;
    if (localVarTransferCache === void 0) {
      localVarTransferCache = true;
    }
    const consumes = [
      "application/json"
    ];
    const httpContentTypeSelected = this.configuration.selectHeaderContentType(consumes);
    if (httpContentTypeSelected !== void 0) {
      localVarHeaders = localVarHeaders.set("Content-Type", httpContentTypeSelected);
    }
    let responseType_ = "json";
    if (localVarHttpHeaderAcceptSelected) {
      if (localVarHttpHeaderAcceptSelected.startsWith("text")) {
        responseType_ = "text";
      } else if (this.configuration.isJsonMime(localVarHttpHeaderAcceptSelected)) {
        responseType_ = "json";
      } else {
        responseType_ = "blob";
      }
    }
    let localVarPath = `/entities/assetgroups/${this.configuration.encodeParam({ name: "id", value: id, in: "path", style: "simple", explode: false, dataType: "string", dataFormat: void 0 })}`;
    return this.httpClient.request("put", `${this.configuration.basePath}${localVarPath}`, {
      context: localVarHttpContext,
      body: request,
      responseType: responseType_,
      withCredentials: this.configuration.withCredentials,
      headers: localVarHeaders,
      observe,
      transferCache: localVarTransferCache,
      reportProgress
    });
  }
  updateAssetRatingProfile(id, request, observe = "body", reportProgress = false, options) {
    if (id === null || id === void 0) {
      throw new Error("Required parameter id was null or undefined when calling updateAssetRatingProfile.");
    }
    if (request === null || request === void 0) {
      throw new Error("Required parameter request was null or undefined when calling updateAssetRatingProfile.");
    }
    let localVarHeaders = this.defaultHeaders;
    let localVarCredential;
    localVarCredential = this.configuration.lookupCredential("access_token");
    if (localVarCredential) {
      localVarHeaders = localVarHeaders.set("x-access-token", localVarCredential);
    }
    let localVarHttpHeaderAcceptSelected = options && options.httpHeaderAccept;
    if (localVarHttpHeaderAcceptSelected === void 0) {
      const httpHeaderAccepts = [
        "application/json"
      ];
      localVarHttpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
    }
    if (localVarHttpHeaderAcceptSelected !== void 0) {
      localVarHeaders = localVarHeaders.set("Accept", localVarHttpHeaderAcceptSelected);
    }
    let localVarHttpContext = options && options.context;
    if (localVarHttpContext === void 0) {
      localVarHttpContext = new HttpContext();
    }
    let localVarTransferCache = options && options.transferCache;
    if (localVarTransferCache === void 0) {
      localVarTransferCache = true;
    }
    const consumes = [
      "application/json"
    ];
    const httpContentTypeSelected = this.configuration.selectHeaderContentType(consumes);
    if (httpContentTypeSelected !== void 0) {
      localVarHeaders = localVarHeaders.set("Content-Type", httpContentTypeSelected);
    }
    let responseType_ = "json";
    if (localVarHttpHeaderAcceptSelected) {
      if (localVarHttpHeaderAcceptSelected.startsWith("text")) {
        responseType_ = "text";
      } else if (this.configuration.isJsonMime(localVarHttpHeaderAcceptSelected)) {
        responseType_ = "json";
      } else {
        responseType_ = "blob";
      }
    }
    let localVarPath = `/entities/assetratingprofiles/${this.configuration.encodeParam({ name: "id", value: id, in: "path", style: "simple", explode: false, dataType: "string", dataFormat: void 0 })}`;
    return this.httpClient.request("put", `${this.configuration.basePath}${localVarPath}`, {
      context: localVarHttpContext,
      body: request,
      responseType: responseType_,
      withCredentials: this.configuration.withCredentials,
      headers: localVarHeaders,
      observe,
      transferCache: localVarTransferCache,
      reportProgress
    });
  }
  updateAssetStateProfile(id, request, observe = "body", reportProgress = false, options) {
    if (id === null || id === void 0) {
      throw new Error("Required parameter id was null or undefined when calling updateAssetStateProfile.");
    }
    if (request === null || request === void 0) {
      throw new Error("Required parameter request was null or undefined when calling updateAssetStateProfile.");
    }
    let localVarHeaders = this.defaultHeaders;
    let localVarCredential;
    localVarCredential = this.configuration.lookupCredential("access_token");
    if (localVarCredential) {
      localVarHeaders = localVarHeaders.set("x-access-token", localVarCredential);
    }
    let localVarHttpHeaderAcceptSelected = options && options.httpHeaderAccept;
    if (localVarHttpHeaderAcceptSelected === void 0) {
      const httpHeaderAccepts = [
        "application/json"
      ];
      localVarHttpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
    }
    if (localVarHttpHeaderAcceptSelected !== void 0) {
      localVarHeaders = localVarHeaders.set("Accept", localVarHttpHeaderAcceptSelected);
    }
    let localVarHttpContext = options && options.context;
    if (localVarHttpContext === void 0) {
      localVarHttpContext = new HttpContext();
    }
    let localVarTransferCache = options && options.transferCache;
    if (localVarTransferCache === void 0) {
      localVarTransferCache = true;
    }
    const consumes = [
      "application/json"
    ];
    const httpContentTypeSelected = this.configuration.selectHeaderContentType(consumes);
    if (httpContentTypeSelected !== void 0) {
      localVarHeaders = localVarHeaders.set("Content-Type", httpContentTypeSelected);
    }
    let responseType_ = "json";
    if (localVarHttpHeaderAcceptSelected) {
      if (localVarHttpHeaderAcceptSelected.startsWith("text")) {
        responseType_ = "text";
      } else if (this.configuration.isJsonMime(localVarHttpHeaderAcceptSelected)) {
        responseType_ = "json";
      } else {
        responseType_ = "blob";
      }
    }
    let localVarPath = `/entities/assetstateprofiles/${this.configuration.encodeParam({ name: "id", value: id, in: "path", style: "simple", explode: false, dataType: "string", dataFormat: void 0 })}`;
    return this.httpClient.request("put", `${this.configuration.basePath}${localVarPath}`, {
      context: localVarHttpContext,
      body: request,
      responseType: responseType_,
      withCredentials: this.configuration.withCredentials,
      headers: localVarHeaders,
      observe,
      transferCache: localVarTransferCache,
      reportProgress
    });
  }
  updateAssetTag(id, request, observe = "body", reportProgress = false, options) {
    if (id === null || id === void 0) {
      throw new Error("Required parameter id was null or undefined when calling updateAssetTag.");
    }
    if (request === null || request === void 0) {
      throw new Error("Required parameter request was null or undefined when calling updateAssetTag.");
    }
    let localVarHeaders = this.defaultHeaders;
    let localVarCredential;
    localVarCredential = this.configuration.lookupCredential("access_token");
    if (localVarCredential) {
      localVarHeaders = localVarHeaders.set("x-access-token", localVarCredential);
    }
    let localVarHttpHeaderAcceptSelected = options && options.httpHeaderAccept;
    if (localVarHttpHeaderAcceptSelected === void 0) {
      const httpHeaderAccepts = [
        "application/json"
      ];
      localVarHttpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
    }
    if (localVarHttpHeaderAcceptSelected !== void 0) {
      localVarHeaders = localVarHeaders.set("Accept", localVarHttpHeaderAcceptSelected);
    }
    let localVarHttpContext = options && options.context;
    if (localVarHttpContext === void 0) {
      localVarHttpContext = new HttpContext();
    }
    let localVarTransferCache = options && options.transferCache;
    if (localVarTransferCache === void 0) {
      localVarTransferCache = true;
    }
    const consumes = [
      "application/json"
    ];
    const httpContentTypeSelected = this.configuration.selectHeaderContentType(consumes);
    if (httpContentTypeSelected !== void 0) {
      localVarHeaders = localVarHeaders.set("Content-Type", httpContentTypeSelected);
    }
    let responseType_ = "json";
    if (localVarHttpHeaderAcceptSelected) {
      if (localVarHttpHeaderAcceptSelected.startsWith("text")) {
        responseType_ = "text";
      } else if (this.configuration.isJsonMime(localVarHttpHeaderAcceptSelected)) {
        responseType_ = "json";
      } else {
        responseType_ = "blob";
      }
    }
    let localVarPath = `/entities/assettags/${this.configuration.encodeParam({ name: "id", value: id, in: "path", style: "simple", explode: false, dataType: "string", dataFormat: void 0 })}`;
    return this.httpClient.request("put", `${this.configuration.basePath}${localVarPath}`, {
      context: localVarHttpContext,
      body: request,
      responseType: responseType_,
      withCredentials: this.configuration.withCredentials,
      headers: localVarHeaders,
      observe,
      transferCache: localVarTransferCache,
      reportProgress
    });
  }
  updateCostCentre(id, request, observe = "body", reportProgress = false, options) {
    if (id === null || id === void 0) {
      throw new Error("Required parameter id was null or undefined when calling updateCostCentre.");
    }
    if (request === null || request === void 0) {
      throw new Error("Required parameter request was null or undefined when calling updateCostCentre.");
    }
    let localVarHeaders = this.defaultHeaders;
    let localVarCredential;
    localVarCredential = this.configuration.lookupCredential("access_token");
    if (localVarCredential) {
      localVarHeaders = localVarHeaders.set("x-access-token", localVarCredential);
    }
    let localVarHttpHeaderAcceptSelected = options && options.httpHeaderAccept;
    if (localVarHttpHeaderAcceptSelected === void 0) {
      const httpHeaderAccepts = [
        "application/json"
      ];
      localVarHttpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
    }
    if (localVarHttpHeaderAcceptSelected !== void 0) {
      localVarHeaders = localVarHeaders.set("Accept", localVarHttpHeaderAcceptSelected);
    }
    let localVarHttpContext = options && options.context;
    if (localVarHttpContext === void 0) {
      localVarHttpContext = new HttpContext();
    }
    let localVarTransferCache = options && options.transferCache;
    if (localVarTransferCache === void 0) {
      localVarTransferCache = true;
    }
    const consumes = [
      "application/json"
    ];
    const httpContentTypeSelected = this.configuration.selectHeaderContentType(consumes);
    if (httpContentTypeSelected !== void 0) {
      localVarHeaders = localVarHeaders.set("Content-Type", httpContentTypeSelected);
    }
    let responseType_ = "json";
    if (localVarHttpHeaderAcceptSelected) {
      if (localVarHttpHeaderAcceptSelected.startsWith("text")) {
        responseType_ = "text";
      } else if (this.configuration.isJsonMime(localVarHttpHeaderAcceptSelected)) {
        responseType_ = "json";
      } else {
        responseType_ = "blob";
      }
    }
    let localVarPath = `/entities/costcentres/${this.configuration.encodeParam({ name: "id", value: id, in: "path", style: "simple", explode: false, dataType: "string", dataFormat: void 0 })}`;
    return this.httpClient.request("put", `${this.configuration.basePath}${localVarPath}`, {
      context: localVarHttpContext,
      body: request,
      responseType: responseType_,
      withCredentials: this.configuration.withCredentials,
      headers: localVarHeaders,
      observe,
      transferCache: localVarTransferCache,
      reportProgress
    });
  }
  updateDashboard(id, request, observe = "body", reportProgress = false, options) {
    if (id === null || id === void 0) {
      throw new Error("Required parameter id was null or undefined when calling updateDashboard.");
    }
    if (request === null || request === void 0) {
      throw new Error("Required parameter request was null or undefined when calling updateDashboard.");
    }
    let localVarHeaders = this.defaultHeaders;
    let localVarCredential;
    localVarCredential = this.configuration.lookupCredential("access_token");
    if (localVarCredential) {
      localVarHeaders = localVarHeaders.set("x-access-token", localVarCredential);
    }
    let localVarHttpHeaderAcceptSelected = options && options.httpHeaderAccept;
    if (localVarHttpHeaderAcceptSelected === void 0) {
      const httpHeaderAccepts = [
        "application/json"
      ];
      localVarHttpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
    }
    if (localVarHttpHeaderAcceptSelected !== void 0) {
      localVarHeaders = localVarHeaders.set("Accept", localVarHttpHeaderAcceptSelected);
    }
    let localVarHttpContext = options && options.context;
    if (localVarHttpContext === void 0) {
      localVarHttpContext = new HttpContext();
    }
    let localVarTransferCache = options && options.transferCache;
    if (localVarTransferCache === void 0) {
      localVarTransferCache = true;
    }
    const consumes = [
      "application/json"
    ];
    const httpContentTypeSelected = this.configuration.selectHeaderContentType(consumes);
    if (httpContentTypeSelected !== void 0) {
      localVarHeaders = localVarHeaders.set("Content-Type", httpContentTypeSelected);
    }
    let responseType_ = "json";
    if (localVarHttpHeaderAcceptSelected) {
      if (localVarHttpHeaderAcceptSelected.startsWith("text")) {
        responseType_ = "text";
      } else if (this.configuration.isJsonMime(localVarHttpHeaderAcceptSelected)) {
        responseType_ = "json";
      } else {
        responseType_ = "blob";
      }
    }
    let localVarPath = `/entities/dashboards/${this.configuration.encodeParam({ name: "id", value: id, in: "path", style: "simple", explode: false, dataType: "string", dataFormat: void 0 })}`;
    return this.httpClient.request("put", `${this.configuration.basePath}${localVarPath}`, {
      context: localVarHttpContext,
      body: request,
      responseType: responseType_,
      withCredentials: this.configuration.withCredentials,
      headers: localVarHeaders,
      observe,
      transferCache: localVarTransferCache,
      reportProgress
    });
  }
  updateDashboardTemplate(id, request, observe = "body", reportProgress = false, options) {
    if (id === null || id === void 0) {
      throw new Error("Required parameter id was null or undefined when calling updateDashboardTemplate.");
    }
    if (request === null || request === void 0) {
      throw new Error("Required parameter request was null or undefined when calling updateDashboardTemplate.");
    }
    let localVarHeaders = this.defaultHeaders;
    let localVarCredential;
    localVarCredential = this.configuration.lookupCredential("access_token");
    if (localVarCredential) {
      localVarHeaders = localVarHeaders.set("x-access-token", localVarCredential);
    }
    let localVarHttpHeaderAcceptSelected = options && options.httpHeaderAccept;
    if (localVarHttpHeaderAcceptSelected === void 0) {
      const httpHeaderAccepts = [
        "application/json"
      ];
      localVarHttpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
    }
    if (localVarHttpHeaderAcceptSelected !== void 0) {
      localVarHeaders = localVarHeaders.set("Accept", localVarHttpHeaderAcceptSelected);
    }
    let localVarHttpContext = options && options.context;
    if (localVarHttpContext === void 0) {
      localVarHttpContext = new HttpContext();
    }
    let localVarTransferCache = options && options.transferCache;
    if (localVarTransferCache === void 0) {
      localVarTransferCache = true;
    }
    const consumes = [
      "application/json"
    ];
    const httpContentTypeSelected = this.configuration.selectHeaderContentType(consumes);
    if (httpContentTypeSelected !== void 0) {
      localVarHeaders = localVarHeaders.set("Content-Type", httpContentTypeSelected);
    }
    let responseType_ = "json";
    if (localVarHttpHeaderAcceptSelected) {
      if (localVarHttpHeaderAcceptSelected.startsWith("text")) {
        responseType_ = "text";
      } else if (this.configuration.isJsonMime(localVarHttpHeaderAcceptSelected)) {
        responseType_ = "json";
      } else {
        responseType_ = "blob";
      }
    }
    let localVarPath = `/entities/dashboardtemplates/${this.configuration.encodeParam({ name: "id", value: id, in: "path", style: "simple", explode: false, dataType: "string", dataFormat: void 0 })}`;
    return this.httpClient.request("put", `${this.configuration.basePath}${localVarPath}`, {
      context: localVarHttpContext,
      body: request,
      responseType: responseType_,
      withCredentials: this.configuration.withCredentials,
      headers: localVarHeaders,
      observe,
      transferCache: localVarTransferCache,
      reportProgress
    });
  }
  updateDevice(id, request, observe = "body", reportProgress = false, options) {
    if (id === null || id === void 0) {
      throw new Error("Required parameter id was null or undefined when calling updateDevice.");
    }
    if (request === null || request === void 0) {
      throw new Error("Required parameter request was null or undefined when calling updateDevice.");
    }
    let localVarHeaders = this.defaultHeaders;
    let localVarCredential;
    localVarCredential = this.configuration.lookupCredential("access_token");
    if (localVarCredential) {
      localVarHeaders = localVarHeaders.set("x-access-token", localVarCredential);
    }
    let localVarHttpHeaderAcceptSelected = options && options.httpHeaderAccept;
    if (localVarHttpHeaderAcceptSelected === void 0) {
      const httpHeaderAccepts = [
        "application/json"
      ];
      localVarHttpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
    }
    if (localVarHttpHeaderAcceptSelected !== void 0) {
      localVarHeaders = localVarHeaders.set("Accept", localVarHttpHeaderAcceptSelected);
    }
    let localVarHttpContext = options && options.context;
    if (localVarHttpContext === void 0) {
      localVarHttpContext = new HttpContext();
    }
    let localVarTransferCache = options && options.transferCache;
    if (localVarTransferCache === void 0) {
      localVarTransferCache = true;
    }
    const consumes = [
      "application/json"
    ];
    const httpContentTypeSelected = this.configuration.selectHeaderContentType(consumes);
    if (httpContentTypeSelected !== void 0) {
      localVarHeaders = localVarHeaders.set("Content-Type", httpContentTypeSelected);
    }
    let responseType_ = "json";
    if (localVarHttpHeaderAcceptSelected) {
      if (localVarHttpHeaderAcceptSelected.startsWith("text")) {
        responseType_ = "text";
      } else if (this.configuration.isJsonMime(localVarHttpHeaderAcceptSelected)) {
        responseType_ = "json";
      } else {
        responseType_ = "blob";
      }
    }
    let localVarPath = `/entities/devices/${this.configuration.encodeParam({ name: "id", value: id, in: "path", style: "simple", explode: false, dataType: "string", dataFormat: void 0 })}`;
    return this.httpClient.request("put", `${this.configuration.basePath}${localVarPath}`, {
      context: localVarHttpContext,
      body: request,
      responseType: responseType_,
      withCredentials: this.configuration.withCredentials,
      headers: localVarHeaders,
      observe,
      transferCache: localVarTransferCache,
      reportProgress
    });
  }
  updateDeviceConfigProfile(id, request, observe = "body", reportProgress = false, options) {
    if (id === null || id === void 0) {
      throw new Error("Required parameter id was null or undefined when calling updateDeviceConfigProfile.");
    }
    if (request === null || request === void 0) {
      throw new Error("Required parameter request was null or undefined when calling updateDeviceConfigProfile.");
    }
    let localVarHeaders = this.defaultHeaders;
    let localVarCredential;
    localVarCredential = this.configuration.lookupCredential("access_token");
    if (localVarCredential) {
      localVarHeaders = localVarHeaders.set("x-access-token", localVarCredential);
    }
    let localVarHttpHeaderAcceptSelected = options && options.httpHeaderAccept;
    if (localVarHttpHeaderAcceptSelected === void 0) {
      const httpHeaderAccepts = [
        "application/json"
      ];
      localVarHttpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
    }
    if (localVarHttpHeaderAcceptSelected !== void 0) {
      localVarHeaders = localVarHeaders.set("Accept", localVarHttpHeaderAcceptSelected);
    }
    let localVarHttpContext = options && options.context;
    if (localVarHttpContext === void 0) {
      localVarHttpContext = new HttpContext();
    }
    let localVarTransferCache = options && options.transferCache;
    if (localVarTransferCache === void 0) {
      localVarTransferCache = true;
    }
    const consumes = [
      "application/json"
    ];
    const httpContentTypeSelected = this.configuration.selectHeaderContentType(consumes);
    if (httpContentTypeSelected !== void 0) {
      localVarHeaders = localVarHeaders.set("Content-Type", httpContentTypeSelected);
    }
    let responseType_ = "json";
    if (localVarHttpHeaderAcceptSelected) {
      if (localVarHttpHeaderAcceptSelected.startsWith("text")) {
        responseType_ = "text";
      } else if (this.configuration.isJsonMime(localVarHttpHeaderAcceptSelected)) {
        responseType_ = "json";
      } else {
        responseType_ = "blob";
      }
    }
    let localVarPath = `/entities/deviceconfigprofiles/${this.configuration.encodeParam({ name: "id", value: id, in: "path", style: "simple", explode: false, dataType: "string", dataFormat: void 0 })}`;
    return this.httpClient.request("put", `${this.configuration.basePath}${localVarPath}`, {
      context: localVarHttpContext,
      body: request,
      responseType: responseType_,
      withCredentials: this.configuration.withCredentials,
      headers: localVarHeaders,
      observe,
      transferCache: localVarTransferCache,
      reportProgress
    });
  }
  updateDeviceProvider(id, request, observe = "body", reportProgress = false, options) {
    if (id === null || id === void 0) {
      throw new Error("Required parameter id was null or undefined when calling updateDeviceProvider.");
    }
    if (request === null || request === void 0) {
      throw new Error("Required parameter request was null or undefined when calling updateDeviceProvider.");
    }
    let localVarHeaders = this.defaultHeaders;
    let localVarCredential;
    localVarCredential = this.configuration.lookupCredential("access_token");
    if (localVarCredential) {
      localVarHeaders = localVarHeaders.set("x-access-token", localVarCredential);
    }
    let localVarHttpHeaderAcceptSelected = options && options.httpHeaderAccept;
    if (localVarHttpHeaderAcceptSelected === void 0) {
      const httpHeaderAccepts = [
        "application/json"
      ];
      localVarHttpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
    }
    if (localVarHttpHeaderAcceptSelected !== void 0) {
      localVarHeaders = localVarHeaders.set("Accept", localVarHttpHeaderAcceptSelected);
    }
    let localVarHttpContext = options && options.context;
    if (localVarHttpContext === void 0) {
      localVarHttpContext = new HttpContext();
    }
    let localVarTransferCache = options && options.transferCache;
    if (localVarTransferCache === void 0) {
      localVarTransferCache = true;
    }
    const consumes = [
      "application/json"
    ];
    const httpContentTypeSelected = this.configuration.selectHeaderContentType(consumes);
    if (httpContentTypeSelected !== void 0) {
      localVarHeaders = localVarHeaders.set("Content-Type", httpContentTypeSelected);
    }
    let responseType_ = "json";
    if (localVarHttpHeaderAcceptSelected) {
      if (localVarHttpHeaderAcceptSelected.startsWith("text")) {
        responseType_ = "text";
      } else if (this.configuration.isJsonMime(localVarHttpHeaderAcceptSelected)) {
        responseType_ = "json";
      } else {
        responseType_ = "blob";
      }
    }
    let localVarPath = `/entities/deviceproviders/${this.configuration.encodeParam({ name: "id", value: id, in: "path", style: "simple", explode: false, dataType: "string", dataFormat: void 0 })}`;
    return this.httpClient.request("put", `${this.configuration.basePath}${localVarPath}`, {
      context: localVarHttpContext,
      body: request,
      responseType: responseType_,
      withCredentials: this.configuration.withCredentials,
      headers: localVarHeaders,
      observe,
      transferCache: localVarTransferCache,
      reportProgress
    });
  }
  updateDeviceType(id, request, observe = "body", reportProgress = false, options) {
    if (id === null || id === void 0) {
      throw new Error("Required parameter id was null or undefined when calling updateDeviceType.");
    }
    if (request === null || request === void 0) {
      throw new Error("Required parameter request was null or undefined when calling updateDeviceType.");
    }
    let localVarHeaders = this.defaultHeaders;
    let localVarCredential;
    localVarCredential = this.configuration.lookupCredential("access_token");
    if (localVarCredential) {
      localVarHeaders = localVarHeaders.set("x-access-token", localVarCredential);
    }
    let localVarHttpHeaderAcceptSelected = options && options.httpHeaderAccept;
    if (localVarHttpHeaderAcceptSelected === void 0) {
      const httpHeaderAccepts = [
        "application/json"
      ];
      localVarHttpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
    }
    if (localVarHttpHeaderAcceptSelected !== void 0) {
      localVarHeaders = localVarHeaders.set("Accept", localVarHttpHeaderAcceptSelected);
    }
    let localVarHttpContext = options && options.context;
    if (localVarHttpContext === void 0) {
      localVarHttpContext = new HttpContext();
    }
    let localVarTransferCache = options && options.transferCache;
    if (localVarTransferCache === void 0) {
      localVarTransferCache = true;
    }
    const consumes = [
      "application/json"
    ];
    const httpContentTypeSelected = this.configuration.selectHeaderContentType(consumes);
    if (httpContentTypeSelected !== void 0) {
      localVarHeaders = localVarHeaders.set("Content-Type", httpContentTypeSelected);
    }
    let responseType_ = "json";
    if (localVarHttpHeaderAcceptSelected) {
      if (localVarHttpHeaderAcceptSelected.startsWith("text")) {
        responseType_ = "text";
      } else if (this.configuration.isJsonMime(localVarHttpHeaderAcceptSelected)) {
        responseType_ = "json";
      } else {
        responseType_ = "blob";
      }
    }
    let localVarPath = `/entities/devicetypes/${this.configuration.encodeParam({ name: "id", value: id, in: "path", style: "simple", explode: false, dataType: "string", dataFormat: void 0 })}`;
    return this.httpClient.request("put", `${this.configuration.basePath}${localVarPath}`, {
      context: localVarHttpContext,
      body: request,
      responseType: responseType_,
      withCredentials: this.configuration.withCredentials,
      headers: localVarHeaders,
      observe,
      transferCache: localVarTransferCache,
      reportProgress
    });
  }
  updateEmailProvider(id, request, observe = "body", reportProgress = false, options) {
    if (id === null || id === void 0) {
      throw new Error("Required parameter id was null or undefined when calling updateEmailProvider.");
    }
    if (request === null || request === void 0) {
      throw new Error("Required parameter request was null or undefined when calling updateEmailProvider.");
    }
    let localVarHeaders = this.defaultHeaders;
    let localVarCredential;
    localVarCredential = this.configuration.lookupCredential("access_token");
    if (localVarCredential) {
      localVarHeaders = localVarHeaders.set("x-access-token", localVarCredential);
    }
    let localVarHttpHeaderAcceptSelected = options && options.httpHeaderAccept;
    if (localVarHttpHeaderAcceptSelected === void 0) {
      const httpHeaderAccepts = [
        "application/json"
      ];
      localVarHttpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
    }
    if (localVarHttpHeaderAcceptSelected !== void 0) {
      localVarHeaders = localVarHeaders.set("Accept", localVarHttpHeaderAcceptSelected);
    }
    let localVarHttpContext = options && options.context;
    if (localVarHttpContext === void 0) {
      localVarHttpContext = new HttpContext();
    }
    let localVarTransferCache = options && options.transferCache;
    if (localVarTransferCache === void 0) {
      localVarTransferCache = true;
    }
    const consumes = [
      "application/json"
    ];
    const httpContentTypeSelected = this.configuration.selectHeaderContentType(consumes);
    if (httpContentTypeSelected !== void 0) {
      localVarHeaders = localVarHeaders.set("Content-Type", httpContentTypeSelected);
    }
    let responseType_ = "json";
    if (localVarHttpHeaderAcceptSelected) {
      if (localVarHttpHeaderAcceptSelected.startsWith("text")) {
        responseType_ = "text";
      } else if (this.configuration.isJsonMime(localVarHttpHeaderAcceptSelected)) {
        responseType_ = "json";
      } else {
        responseType_ = "blob";
      }
    }
    let localVarPath = `/entities/emailproviders/${this.configuration.encodeParam({ name: "id", value: id, in: "path", style: "simple", explode: false, dataType: "string", dataFormat: void 0 })}`;
    return this.httpClient.request("put", `${this.configuration.basePath}${localVarPath}`, {
      context: localVarHttpContext,
      body: request,
      responseType: responseType_,
      withCredentials: this.configuration.withCredentials,
      headers: localVarHeaders,
      observe,
      transferCache: localVarTransferCache,
      reportProgress
    });
  }
  updateExportTask(id, request, observe = "body", reportProgress = false, options) {
    if (id === null || id === void 0) {
      throw new Error("Required parameter id was null or undefined when calling updateExportTask.");
    }
    if (request === null || request === void 0) {
      throw new Error("Required parameter request was null or undefined when calling updateExportTask.");
    }
    let localVarHeaders = this.defaultHeaders;
    let localVarCredential;
    localVarCredential = this.configuration.lookupCredential("access_token");
    if (localVarCredential) {
      localVarHeaders = localVarHeaders.set("x-access-token", localVarCredential);
    }
    let localVarHttpHeaderAcceptSelected = options && options.httpHeaderAccept;
    if (localVarHttpHeaderAcceptSelected === void 0) {
      const httpHeaderAccepts = [
        "application/json"
      ];
      localVarHttpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
    }
    if (localVarHttpHeaderAcceptSelected !== void 0) {
      localVarHeaders = localVarHeaders.set("Accept", localVarHttpHeaderAcceptSelected);
    }
    let localVarHttpContext = options && options.context;
    if (localVarHttpContext === void 0) {
      localVarHttpContext = new HttpContext();
    }
    let localVarTransferCache = options && options.transferCache;
    if (localVarTransferCache === void 0) {
      localVarTransferCache = true;
    }
    const consumes = [
      "application/json"
    ];
    const httpContentTypeSelected = this.configuration.selectHeaderContentType(consumes);
    if (httpContentTypeSelected !== void 0) {
      localVarHeaders = localVarHeaders.set("Content-Type", httpContentTypeSelected);
    }
    let responseType_ = "json";
    if (localVarHttpHeaderAcceptSelected) {
      if (localVarHttpHeaderAcceptSelected.startsWith("text")) {
        responseType_ = "text";
      } else if (this.configuration.isJsonMime(localVarHttpHeaderAcceptSelected)) {
        responseType_ = "json";
      } else {
        responseType_ = "blob";
      }
    }
    let localVarPath = `/entities/exporttasks/${this.configuration.encodeParam({ name: "id", value: id, in: "path", style: "simple", explode: false, dataType: "string", dataFormat: void 0 })}`;
    return this.httpClient.request("put", `${this.configuration.basePath}${localVarPath}`, {
      context: localVarHttpContext,
      body: request,
      responseType: responseType_,
      withCredentials: this.configuration.withCredentials,
      headers: localVarHeaders,
      observe,
      transferCache: localVarTransferCache,
      reportProgress
    });
  }
  updateFuelCard(id, request, observe = "body", reportProgress = false, options) {
    if (id === null || id === void 0) {
      throw new Error("Required parameter id was null or undefined when calling updateFuelCard.");
    }
    if (request === null || request === void 0) {
      throw new Error("Required parameter request was null or undefined when calling updateFuelCard.");
    }
    let localVarHeaders = this.defaultHeaders;
    let localVarCredential;
    localVarCredential = this.configuration.lookupCredential("access_token");
    if (localVarCredential) {
      localVarHeaders = localVarHeaders.set("x-access-token", localVarCredential);
    }
    let localVarHttpHeaderAcceptSelected = options && options.httpHeaderAccept;
    if (localVarHttpHeaderAcceptSelected === void 0) {
      const httpHeaderAccepts = [
        "application/json"
      ];
      localVarHttpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
    }
    if (localVarHttpHeaderAcceptSelected !== void 0) {
      localVarHeaders = localVarHeaders.set("Accept", localVarHttpHeaderAcceptSelected);
    }
    let localVarHttpContext = options && options.context;
    if (localVarHttpContext === void 0) {
      localVarHttpContext = new HttpContext();
    }
    let localVarTransferCache = options && options.transferCache;
    if (localVarTransferCache === void 0) {
      localVarTransferCache = true;
    }
    const consumes = [
      "application/json"
    ];
    const httpContentTypeSelected = this.configuration.selectHeaderContentType(consumes);
    if (httpContentTypeSelected !== void 0) {
      localVarHeaders = localVarHeaders.set("Content-Type", httpContentTypeSelected);
    }
    let responseType_ = "json";
    if (localVarHttpHeaderAcceptSelected) {
      if (localVarHttpHeaderAcceptSelected.startsWith("text")) {
        responseType_ = "text";
      } else if (this.configuration.isJsonMime(localVarHttpHeaderAcceptSelected)) {
        responseType_ = "json";
      } else {
        responseType_ = "blob";
      }
    }
    let localVarPath = `/entities/fuelcards/${this.configuration.encodeParam({ name: "id", value: id, in: "path", style: "simple", explode: false, dataType: "string", dataFormat: void 0 })}`;
    return this.httpClient.request("put", `${this.configuration.basePath}${localVarPath}`, {
      context: localVarHttpContext,
      body: request,
      responseType: responseType_,
      withCredentials: this.configuration.withCredentials,
      headers: localVarHeaders,
      observe,
      transferCache: localVarTransferCache,
      reportProgress
    });
  }
  updateGeoLockProfile(id, request, observe = "body", reportProgress = false, options) {
    if (id === null || id === void 0) {
      throw new Error("Required parameter id was null or undefined when calling updateGeoLockProfile.");
    }
    if (request === null || request === void 0) {
      throw new Error("Required parameter request was null or undefined when calling updateGeoLockProfile.");
    }
    let localVarHeaders = this.defaultHeaders;
    let localVarCredential;
    localVarCredential = this.configuration.lookupCredential("access_token");
    if (localVarCredential) {
      localVarHeaders = localVarHeaders.set("x-access-token", localVarCredential);
    }
    let localVarHttpHeaderAcceptSelected = options && options.httpHeaderAccept;
    if (localVarHttpHeaderAcceptSelected === void 0) {
      const httpHeaderAccepts = [
        "application/json"
      ];
      localVarHttpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
    }
    if (localVarHttpHeaderAcceptSelected !== void 0) {
      localVarHeaders = localVarHeaders.set("Accept", localVarHttpHeaderAcceptSelected);
    }
    let localVarHttpContext = options && options.context;
    if (localVarHttpContext === void 0) {
      localVarHttpContext = new HttpContext();
    }
    let localVarTransferCache = options && options.transferCache;
    if (localVarTransferCache === void 0) {
      localVarTransferCache = true;
    }
    const consumes = [
      "application/json"
    ];
    const httpContentTypeSelected = this.configuration.selectHeaderContentType(consumes);
    if (httpContentTypeSelected !== void 0) {
      localVarHeaders = localVarHeaders.set("Content-Type", httpContentTypeSelected);
    }
    let responseType_ = "json";
    if (localVarHttpHeaderAcceptSelected) {
      if (localVarHttpHeaderAcceptSelected.startsWith("text")) {
        responseType_ = "text";
      } else if (this.configuration.isJsonMime(localVarHttpHeaderAcceptSelected)) {
        responseType_ = "json";
      } else {
        responseType_ = "blob";
      }
    }
    let localVarPath = `/entities/geolockprofiles/${this.configuration.encodeParam({ name: "id", value: id, in: "path", style: "simple", explode: false, dataType: "string", dataFormat: void 0 })}`;
    return this.httpClient.request("put", `${this.configuration.basePath}${localVarPath}`, {
      context: localVarHttpContext,
      body: request,
      responseType: responseType_,
      withCredentials: this.configuration.withCredentials,
      headers: localVarHeaders,
      observe,
      transferCache: localVarTransferCache,
      reportProgress
    });
  }
  updateIoType(id, request, observe = "body", reportProgress = false, options) {
    if (id === null || id === void 0) {
      throw new Error("Required parameter id was null or undefined when calling updateIoType.");
    }
    if (request === null || request === void 0) {
      throw new Error("Required parameter request was null or undefined when calling updateIoType.");
    }
    let localVarHeaders = this.defaultHeaders;
    let localVarCredential;
    localVarCredential = this.configuration.lookupCredential("access_token");
    if (localVarCredential) {
      localVarHeaders = localVarHeaders.set("x-access-token", localVarCredential);
    }
    let localVarHttpHeaderAcceptSelected = options && options.httpHeaderAccept;
    if (localVarHttpHeaderAcceptSelected === void 0) {
      const httpHeaderAccepts = [
        "application/json"
      ];
      localVarHttpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
    }
    if (localVarHttpHeaderAcceptSelected !== void 0) {
      localVarHeaders = localVarHeaders.set("Accept", localVarHttpHeaderAcceptSelected);
    }
    let localVarHttpContext = options && options.context;
    if (localVarHttpContext === void 0) {
      localVarHttpContext = new HttpContext();
    }
    let localVarTransferCache = options && options.transferCache;
    if (localVarTransferCache === void 0) {
      localVarTransferCache = true;
    }
    const consumes = [
      "application/json"
    ];
    const httpContentTypeSelected = this.configuration.selectHeaderContentType(consumes);
    if (httpContentTypeSelected !== void 0) {
      localVarHeaders = localVarHeaders.set("Content-Type", httpContentTypeSelected);
    }
    let responseType_ = "json";
    if (localVarHttpHeaderAcceptSelected) {
      if (localVarHttpHeaderAcceptSelected.startsWith("text")) {
        responseType_ = "text";
      } else if (this.configuration.isJsonMime(localVarHttpHeaderAcceptSelected)) {
        responseType_ = "json";
      } else {
        responseType_ = "blob";
      }
    }
    let localVarPath = `/entities/iotypes/${this.configuration.encodeParam({ name: "id", value: id, in: "path", style: "simple", explode: false, dataType: "string", dataFormat: void 0 })}`;
    return this.httpClient.request("put", `${this.configuration.basePath}${localVarPath}`, {
      context: localVarHttpContext,
      body: request,
      responseType: responseType_,
      withCredentials: this.configuration.withCredentials,
      headers: localVarHeaders,
      observe,
      transferCache: localVarTransferCache,
      reportProgress
    });
  }
  updateLabel(id, request, observe = "body", reportProgress = false, options) {
    if (id === null || id === void 0) {
      throw new Error("Required parameter id was null or undefined when calling updateLabel.");
    }
    if (request === null || request === void 0) {
      throw new Error("Required parameter request was null or undefined when calling updateLabel.");
    }
    let localVarHeaders = this.defaultHeaders;
    let localVarCredential;
    localVarCredential = this.configuration.lookupCredential("access_token");
    if (localVarCredential) {
      localVarHeaders = localVarHeaders.set("x-access-token", localVarCredential);
    }
    let localVarHttpHeaderAcceptSelected = options && options.httpHeaderAccept;
    if (localVarHttpHeaderAcceptSelected === void 0) {
      const httpHeaderAccepts = [
        "application/json"
      ];
      localVarHttpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
    }
    if (localVarHttpHeaderAcceptSelected !== void 0) {
      localVarHeaders = localVarHeaders.set("Accept", localVarHttpHeaderAcceptSelected);
    }
    let localVarHttpContext = options && options.context;
    if (localVarHttpContext === void 0) {
      localVarHttpContext = new HttpContext();
    }
    let localVarTransferCache = options && options.transferCache;
    if (localVarTransferCache === void 0) {
      localVarTransferCache = true;
    }
    const consumes = [
      "application/json"
    ];
    const httpContentTypeSelected = this.configuration.selectHeaderContentType(consumes);
    if (httpContentTypeSelected !== void 0) {
      localVarHeaders = localVarHeaders.set("Content-Type", httpContentTypeSelected);
    }
    let responseType_ = "json";
    if (localVarHttpHeaderAcceptSelected) {
      if (localVarHttpHeaderAcceptSelected.startsWith("text")) {
        responseType_ = "text";
      } else if (this.configuration.isJsonMime(localVarHttpHeaderAcceptSelected)) {
        responseType_ = "json";
      } else {
        responseType_ = "blob";
      }
    }
    let localVarPath = `/entities/labels/${this.configuration.encodeParam({ name: "id", value: id, in: "path", style: "simple", explode: false, dataType: "string", dataFormat: void 0 })}`;
    return this.httpClient.request("put", `${this.configuration.basePath}${localVarPath}`, {
      context: localVarHttpContext,
      body: request,
      responseType: responseType_,
      withCredentials: this.configuration.withCredentials,
      headers: localVarHeaders,
      observe,
      transferCache: localVarTransferCache,
      reportProgress
    });
  }
  updateMapSet(id, request, observe = "body", reportProgress = false, options) {
    if (id === null || id === void 0) {
      throw new Error("Required parameter id was null or undefined when calling updateMapSet.");
    }
    if (request === null || request === void 0) {
      throw new Error("Required parameter request was null or undefined when calling updateMapSet.");
    }
    let localVarHeaders = this.defaultHeaders;
    let localVarCredential;
    localVarCredential = this.configuration.lookupCredential("access_token");
    if (localVarCredential) {
      localVarHeaders = localVarHeaders.set("x-access-token", localVarCredential);
    }
    let localVarHttpHeaderAcceptSelected = options && options.httpHeaderAccept;
    if (localVarHttpHeaderAcceptSelected === void 0) {
      const httpHeaderAccepts = [
        "application/json"
      ];
      localVarHttpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
    }
    if (localVarHttpHeaderAcceptSelected !== void 0) {
      localVarHeaders = localVarHeaders.set("Accept", localVarHttpHeaderAcceptSelected);
    }
    let localVarHttpContext = options && options.context;
    if (localVarHttpContext === void 0) {
      localVarHttpContext = new HttpContext();
    }
    let localVarTransferCache = options && options.transferCache;
    if (localVarTransferCache === void 0) {
      localVarTransferCache = true;
    }
    const consumes = [
      "application/json"
    ];
    const httpContentTypeSelected = this.configuration.selectHeaderContentType(consumes);
    if (httpContentTypeSelected !== void 0) {
      localVarHeaders = localVarHeaders.set("Content-Type", httpContentTypeSelected);
    }
    let responseType_ = "json";
    if (localVarHttpHeaderAcceptSelected) {
      if (localVarHttpHeaderAcceptSelected.startsWith("text")) {
        responseType_ = "text";
      } else if (this.configuration.isJsonMime(localVarHttpHeaderAcceptSelected)) {
        responseType_ = "json";
      } else {
        responseType_ = "blob";
      }
    }
    let localVarPath = `/entities/mapsets/${this.configuration.encodeParam({ name: "id", value: id, in: "path", style: "simple", explode: false, dataType: "string", dataFormat: void 0 })}`;
    return this.httpClient.request("put", `${this.configuration.basePath}${localVarPath}`, {
      context: localVarHttpContext,
      body: request,
      responseType: responseType_,
      withCredentials: this.configuration.withCredentials,
      headers: localVarHeaders,
      observe,
      transferCache: localVarTransferCache,
      reportProgress
    });
  }
  updateOverspeedProfile(id, request, observe = "body", reportProgress = false, options) {
    if (id === null || id === void 0) {
      throw new Error("Required parameter id was null or undefined when calling updateOverspeedProfile.");
    }
    if (request === null || request === void 0) {
      throw new Error("Required parameter request was null or undefined when calling updateOverspeedProfile.");
    }
    let localVarHeaders = this.defaultHeaders;
    let localVarCredential;
    localVarCredential = this.configuration.lookupCredential("access_token");
    if (localVarCredential) {
      localVarHeaders = localVarHeaders.set("x-access-token", localVarCredential);
    }
    let localVarHttpHeaderAcceptSelected = options && options.httpHeaderAccept;
    if (localVarHttpHeaderAcceptSelected === void 0) {
      const httpHeaderAccepts = [
        "application/json"
      ];
      localVarHttpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
    }
    if (localVarHttpHeaderAcceptSelected !== void 0) {
      localVarHeaders = localVarHeaders.set("Accept", localVarHttpHeaderAcceptSelected);
    }
    let localVarHttpContext = options && options.context;
    if (localVarHttpContext === void 0) {
      localVarHttpContext = new HttpContext();
    }
    let localVarTransferCache = options && options.transferCache;
    if (localVarTransferCache === void 0) {
      localVarTransferCache = true;
    }
    const consumes = [
      "application/json"
    ];
    const httpContentTypeSelected = this.configuration.selectHeaderContentType(consumes);
    if (httpContentTypeSelected !== void 0) {
      localVarHeaders = localVarHeaders.set("Content-Type", httpContentTypeSelected);
    }
    let responseType_ = "json";
    if (localVarHttpHeaderAcceptSelected) {
      if (localVarHttpHeaderAcceptSelected.startsWith("text")) {
        responseType_ = "text";
      } else if (this.configuration.isJsonMime(localVarHttpHeaderAcceptSelected)) {
        responseType_ = "json";
      } else {
        responseType_ = "blob";
      }
    }
    let localVarPath = `/entities/overspeedprofiles/${this.configuration.encodeParam({ name: "id", value: id, in: "path", style: "simple", explode: false, dataType: "string", dataFormat: void 0 })}`;
    return this.httpClient.request("put", `${this.configuration.basePath}${localVarPath}`, {
      context: localVarHttpContext,
      body: request,
      responseType: responseType_,
      withCredentials: this.configuration.withCredentials,
      headers: localVarHeaders,
      observe,
      transferCache: localVarTransferCache,
      reportProgress
    });
  }
  updateReminder(id, request, observe = "body", reportProgress = false, options) {
    if (id === null || id === void 0) {
      throw new Error("Required parameter id was null or undefined when calling updateReminder.");
    }
    if (request === null || request === void 0) {
      throw new Error("Required parameter request was null or undefined when calling updateReminder.");
    }
    let localVarHeaders = this.defaultHeaders;
    let localVarCredential;
    localVarCredential = this.configuration.lookupCredential("access_token");
    if (localVarCredential) {
      localVarHeaders = localVarHeaders.set("x-access-token", localVarCredential);
    }
    let localVarHttpHeaderAcceptSelected = options && options.httpHeaderAccept;
    if (localVarHttpHeaderAcceptSelected === void 0) {
      const httpHeaderAccepts = [
        "application/json"
      ];
      localVarHttpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
    }
    if (localVarHttpHeaderAcceptSelected !== void 0) {
      localVarHeaders = localVarHeaders.set("Accept", localVarHttpHeaderAcceptSelected);
    }
    let localVarHttpContext = options && options.context;
    if (localVarHttpContext === void 0) {
      localVarHttpContext = new HttpContext();
    }
    let localVarTransferCache = options && options.transferCache;
    if (localVarTransferCache === void 0) {
      localVarTransferCache = true;
    }
    const consumes = [
      "application/json"
    ];
    const httpContentTypeSelected = this.configuration.selectHeaderContentType(consumes);
    if (httpContentTypeSelected !== void 0) {
      localVarHeaders = localVarHeaders.set("Content-Type", httpContentTypeSelected);
    }
    let responseType_ = "json";
    if (localVarHttpHeaderAcceptSelected) {
      if (localVarHttpHeaderAcceptSelected.startsWith("text")) {
        responseType_ = "text";
      } else if (this.configuration.isJsonMime(localVarHttpHeaderAcceptSelected)) {
        responseType_ = "json";
      } else {
        responseType_ = "blob";
      }
    }
    let localVarPath = `/entities/reminders/${this.configuration.encodeParam({ name: "id", value: id, in: "path", style: "simple", explode: false, dataType: "string", dataFormat: void 0 })}`;
    return this.httpClient.request("put", `${this.configuration.basePath}${localVarPath}`, {
      context: localVarHttpContext,
      body: request,
      responseType: responseType_,
      withCredentials: this.configuration.withCredentials,
      headers: localVarHeaders,
      observe,
      transferCache: localVarTransferCache,
      reportProgress
    });
  }
  updateReportTemplate(id, request, observe = "body", reportProgress = false, options) {
    if (id === null || id === void 0) {
      throw new Error("Required parameter id was null or undefined when calling updateReportTemplate.");
    }
    if (request === null || request === void 0) {
      throw new Error("Required parameter request was null or undefined when calling updateReportTemplate.");
    }
    let localVarHeaders = this.defaultHeaders;
    let localVarCredential;
    localVarCredential = this.configuration.lookupCredential("access_token");
    if (localVarCredential) {
      localVarHeaders = localVarHeaders.set("x-access-token", localVarCredential);
    }
    let localVarHttpHeaderAcceptSelected = options && options.httpHeaderAccept;
    if (localVarHttpHeaderAcceptSelected === void 0) {
      const httpHeaderAccepts = [
        "application/json"
      ];
      localVarHttpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
    }
    if (localVarHttpHeaderAcceptSelected !== void 0) {
      localVarHeaders = localVarHeaders.set("Accept", localVarHttpHeaderAcceptSelected);
    }
    let localVarHttpContext = options && options.context;
    if (localVarHttpContext === void 0) {
      localVarHttpContext = new HttpContext();
    }
    let localVarTransferCache = options && options.transferCache;
    if (localVarTransferCache === void 0) {
      localVarTransferCache = true;
    }
    const consumes = [
      "application/json"
    ];
    const httpContentTypeSelected = this.configuration.selectHeaderContentType(consumes);
    if (httpContentTypeSelected !== void 0) {
      localVarHeaders = localVarHeaders.set("Content-Type", httpContentTypeSelected);
    }
    let responseType_ = "json";
    if (localVarHttpHeaderAcceptSelected) {
      if (localVarHttpHeaderAcceptSelected.startsWith("text")) {
        responseType_ = "text";
      } else if (this.configuration.isJsonMime(localVarHttpHeaderAcceptSelected)) {
        responseType_ = "json";
      } else {
        responseType_ = "blob";
      }
    }
    let localVarPath = `/entities/reporttemplates/${this.configuration.encodeParam({ name: "id", value: id, in: "path", style: "simple", explode: false, dataType: "string", dataFormat: void 0 })}`;
    return this.httpClient.request("put", `${this.configuration.basePath}${localVarPath}`, {
      context: localVarHttpContext,
      body: request,
      responseType: responseType_,
      withCredentials: this.configuration.withCredentials,
      headers: localVarHeaders,
      observe,
      transferCache: localVarTransferCache,
      reportProgress
    });
  }
  updateRoadProfile(id, request, observe = "body", reportProgress = false, options) {
    if (id === null || id === void 0) {
      throw new Error("Required parameter id was null or undefined when calling updateRoadProfile.");
    }
    if (request === null || request === void 0) {
      throw new Error("Required parameter request was null or undefined when calling updateRoadProfile.");
    }
    let localVarHeaders = this.defaultHeaders;
    let localVarCredential;
    localVarCredential = this.configuration.lookupCredential("access_token");
    if (localVarCredential) {
      localVarHeaders = localVarHeaders.set("x-access-token", localVarCredential);
    }
    let localVarHttpHeaderAcceptSelected = options && options.httpHeaderAccept;
    if (localVarHttpHeaderAcceptSelected === void 0) {
      const httpHeaderAccepts = [
        "application/json"
      ];
      localVarHttpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
    }
    if (localVarHttpHeaderAcceptSelected !== void 0) {
      localVarHeaders = localVarHeaders.set("Accept", localVarHttpHeaderAcceptSelected);
    }
    let localVarHttpContext = options && options.context;
    if (localVarHttpContext === void 0) {
      localVarHttpContext = new HttpContext();
    }
    let localVarTransferCache = options && options.transferCache;
    if (localVarTransferCache === void 0) {
      localVarTransferCache = true;
    }
    const consumes = [
      "application/json"
    ];
    const httpContentTypeSelected = this.configuration.selectHeaderContentType(consumes);
    if (httpContentTypeSelected !== void 0) {
      localVarHeaders = localVarHeaders.set("Content-Type", httpContentTypeSelected);
    }
    let responseType_ = "json";
    if (localVarHttpHeaderAcceptSelected) {
      if (localVarHttpHeaderAcceptSelected.startsWith("text")) {
        responseType_ = "text";
      } else if (this.configuration.isJsonMime(localVarHttpHeaderAcceptSelected)) {
        responseType_ = "json";
      } else {
        responseType_ = "blob";
      }
    }
    let localVarPath = `/entities/roadprofiles/${this.configuration.encodeParam({ name: "id", value: id, in: "path", style: "simple", explode: false, dataType: "string", dataFormat: void 0 })}`;
    return this.httpClient.request("put", `${this.configuration.basePath}${localVarPath}`, {
      context: localVarHttpContext,
      body: request,
      responseType: responseType_,
      withCredentials: this.configuration.withCredentials,
      headers: localVarHeaders,
      observe,
      transferCache: localVarTransferCache,
      reportProgress
    });
  }
  updateScheduledReport(id, request, observe = "body", reportProgress = false, options) {
    if (id === null || id === void 0) {
      throw new Error("Required parameter id was null or undefined when calling updateScheduledReport.");
    }
    if (request === null || request === void 0) {
      throw new Error("Required parameter request was null or undefined when calling updateScheduledReport.");
    }
    let localVarHeaders = this.defaultHeaders;
    let localVarCredential;
    localVarCredential = this.configuration.lookupCredential("access_token");
    if (localVarCredential) {
      localVarHeaders = localVarHeaders.set("x-access-token", localVarCredential);
    }
    let localVarHttpHeaderAcceptSelected = options && options.httpHeaderAccept;
    if (localVarHttpHeaderAcceptSelected === void 0) {
      const httpHeaderAccepts = [
        "application/json"
      ];
      localVarHttpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
    }
    if (localVarHttpHeaderAcceptSelected !== void 0) {
      localVarHeaders = localVarHeaders.set("Accept", localVarHttpHeaderAcceptSelected);
    }
    let localVarHttpContext = options && options.context;
    if (localVarHttpContext === void 0) {
      localVarHttpContext = new HttpContext();
    }
    let localVarTransferCache = options && options.transferCache;
    if (localVarTransferCache === void 0) {
      localVarTransferCache = true;
    }
    const consumes = [
      "application/json"
    ];
    const httpContentTypeSelected = this.configuration.selectHeaderContentType(consumes);
    if (httpContentTypeSelected !== void 0) {
      localVarHeaders = localVarHeaders.set("Content-Type", httpContentTypeSelected);
    }
    let responseType_ = "json";
    if (localVarHttpHeaderAcceptSelected) {
      if (localVarHttpHeaderAcceptSelected.startsWith("text")) {
        responseType_ = "text";
      } else if (this.configuration.isJsonMime(localVarHttpHeaderAcceptSelected)) {
        responseType_ = "json";
      } else {
        responseType_ = "blob";
      }
    }
    let localVarPath = `/entities/scheduledreports/${this.configuration.encodeParam({ name: "id", value: id, in: "path", style: "simple", explode: false, dataType: "string", dataFormat: void 0 })}`;
    return this.httpClient.request("put", `${this.configuration.basePath}${localVarPath}`, {
      context: localVarHttpContext,
      body: request,
      responseType: responseType_,
      withCredentials: this.configuration.withCredentials,
      headers: localVarHeaders,
      observe,
      transferCache: localVarTransferCache,
      reportProgress
    });
  }
  updateSharedAssetLocationToken(token, request, observe = "body", reportProgress = false, options) {
    if (token === null || token === void 0) {
      throw new Error("Required parameter token was null or undefined when calling updateSharedAssetLocationToken.");
    }
    if (request === null || request === void 0) {
      throw new Error("Required parameter request was null or undefined when calling updateSharedAssetLocationToken.");
    }
    let localVarHeaders = this.defaultHeaders;
    let localVarCredential;
    localVarCredential = this.configuration.lookupCredential("access_token");
    if (localVarCredential) {
      localVarHeaders = localVarHeaders.set("x-access-token", localVarCredential);
    }
    let localVarHttpHeaderAcceptSelected = options && options.httpHeaderAccept;
    if (localVarHttpHeaderAcceptSelected === void 0) {
      const httpHeaderAccepts = [
        "application/json"
      ];
      localVarHttpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
    }
    if (localVarHttpHeaderAcceptSelected !== void 0) {
      localVarHeaders = localVarHeaders.set("Accept", localVarHttpHeaderAcceptSelected);
    }
    let localVarHttpContext = options && options.context;
    if (localVarHttpContext === void 0) {
      localVarHttpContext = new HttpContext();
    }
    let localVarTransferCache = options && options.transferCache;
    if (localVarTransferCache === void 0) {
      localVarTransferCache = true;
    }
    const consumes = [
      "application/json"
    ];
    const httpContentTypeSelected = this.configuration.selectHeaderContentType(consumes);
    if (httpContentTypeSelected !== void 0) {
      localVarHeaders = localVarHeaders.set("Content-Type", httpContentTypeSelected);
    }
    let responseType_ = "json";
    if (localVarHttpHeaderAcceptSelected) {
      if (localVarHttpHeaderAcceptSelected.startsWith("text")) {
        responseType_ = "text";
      } else if (this.configuration.isJsonMime(localVarHttpHeaderAcceptSelected)) {
        responseType_ = "json";
      } else {
        responseType_ = "blob";
      }
    }
    let localVarPath = `/entities/assets/shared/location/${this.configuration.encodeParam({ name: "token", value: token, in: "path", style: "simple", explode: false, dataType: "string", dataFormat: void 0 })}`;
    return this.httpClient.request("put", `${this.configuration.basePath}${localVarPath}`, {
      context: localVarHttpContext,
      body: request,
      responseType: responseType_,
      withCredentials: this.configuration.withCredentials,
      headers: localVarHeaders,
      observe,
      transferCache: localVarTransferCache,
      reportProgress
    });
  }
  updateSimCard(id, request, observe = "body", reportProgress = false, options) {
    if (id === null || id === void 0) {
      throw new Error("Required parameter id was null or undefined when calling updateSimCard.");
    }
    if (request === null || request === void 0) {
      throw new Error("Required parameter request was null or undefined when calling updateSimCard.");
    }
    let localVarHeaders = this.defaultHeaders;
    let localVarCredential;
    localVarCredential = this.configuration.lookupCredential("access_token");
    if (localVarCredential) {
      localVarHeaders = localVarHeaders.set("x-access-token", localVarCredential);
    }
    let localVarHttpHeaderAcceptSelected = options && options.httpHeaderAccept;
    if (localVarHttpHeaderAcceptSelected === void 0) {
      const httpHeaderAccepts = [
        "application/json"
      ];
      localVarHttpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
    }
    if (localVarHttpHeaderAcceptSelected !== void 0) {
      localVarHeaders = localVarHeaders.set("Accept", localVarHttpHeaderAcceptSelected);
    }
    let localVarHttpContext = options && options.context;
    if (localVarHttpContext === void 0) {
      localVarHttpContext = new HttpContext();
    }
    let localVarTransferCache = options && options.transferCache;
    if (localVarTransferCache === void 0) {
      localVarTransferCache = true;
    }
    const consumes = [
      "application/json"
    ];
    const httpContentTypeSelected = this.configuration.selectHeaderContentType(consumes);
    if (httpContentTypeSelected !== void 0) {
      localVarHeaders = localVarHeaders.set("Content-Type", httpContentTypeSelected);
    }
    let responseType_ = "json";
    if (localVarHttpHeaderAcceptSelected) {
      if (localVarHttpHeaderAcceptSelected.startsWith("text")) {
        responseType_ = "text";
      } else if (this.configuration.isJsonMime(localVarHttpHeaderAcceptSelected)) {
        responseType_ = "json";
      } else {
        responseType_ = "blob";
      }
    }
    let localVarPath = `/entities/simcards/${this.configuration.encodeParam({ name: "id", value: id, in: "path", style: "simple", explode: false, dataType: "string", dataFormat: void 0 })}`;
    return this.httpClient.request("put", `${this.configuration.basePath}${localVarPath}`, {
      context: localVarHttpContext,
      body: request,
      responseType: responseType_,
      withCredentials: this.configuration.withCredentials,
      headers: localVarHeaders,
      observe,
      transferCache: localVarTransferCache,
      reportProgress
    });
  }
  updateSmsGatewayProvider(id, request, observe = "body", reportProgress = false, options) {
    if (id === null || id === void 0) {
      throw new Error("Required parameter id was null or undefined when calling updateSmsGatewayProvider.");
    }
    if (request === null || request === void 0) {
      throw new Error("Required parameter request was null or undefined when calling updateSmsGatewayProvider.");
    }
    let localVarHeaders = this.defaultHeaders;
    let localVarCredential;
    localVarCredential = this.configuration.lookupCredential("access_token");
    if (localVarCredential) {
      localVarHeaders = localVarHeaders.set("x-access-token", localVarCredential);
    }
    let localVarHttpHeaderAcceptSelected = options && options.httpHeaderAccept;
    if (localVarHttpHeaderAcceptSelected === void 0) {
      const httpHeaderAccepts = [
        "application/json"
      ];
      localVarHttpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
    }
    if (localVarHttpHeaderAcceptSelected !== void 0) {
      localVarHeaders = localVarHeaders.set("Accept", localVarHttpHeaderAcceptSelected);
    }
    let localVarHttpContext = options && options.context;
    if (localVarHttpContext === void 0) {
      localVarHttpContext = new HttpContext();
    }
    let localVarTransferCache = options && options.transferCache;
    if (localVarTransferCache === void 0) {
      localVarTransferCache = true;
    }
    const consumes = [
      "application/json"
    ];
    const httpContentTypeSelected = this.configuration.selectHeaderContentType(consumes);
    if (httpContentTypeSelected !== void 0) {
      localVarHeaders = localVarHeaders.set("Content-Type", httpContentTypeSelected);
    }
    let responseType_ = "json";
    if (localVarHttpHeaderAcceptSelected) {
      if (localVarHttpHeaderAcceptSelected.startsWith("text")) {
        responseType_ = "text";
      } else if (this.configuration.isJsonMime(localVarHttpHeaderAcceptSelected)) {
        responseType_ = "json";
      } else {
        responseType_ = "blob";
      }
    }
    let localVarPath = `/entities/smsgatewayproviders/${this.configuration.encodeParam({ name: "id", value: id, in: "path", style: "simple", explode: false, dataType: "string", dataFormat: void 0 })}`;
    return this.httpClient.request("put", `${this.configuration.basePath}${localVarPath}`, {
      context: localVarHttpContext,
      body: request,
      responseType: responseType_,
      withCredentials: this.configuration.withCredentials,
      headers: localVarHeaders,
      observe,
      transferCache: localVarTransferCache,
      reportProgress
    });
  }
  updateSslCertificate(id, request, observe = "body", reportProgress = false, options) {
    if (id === null || id === void 0) {
      throw new Error("Required parameter id was null or undefined when calling updateSslCertificate.");
    }
    if (request === null || request === void 0) {
      throw new Error("Required parameter request was null or undefined when calling updateSslCertificate.");
    }
    let localVarHeaders = this.defaultHeaders;
    let localVarCredential;
    localVarCredential = this.configuration.lookupCredential("access_token");
    if (localVarCredential) {
      localVarHeaders = localVarHeaders.set("x-access-token", localVarCredential);
    }
    let localVarHttpHeaderAcceptSelected = options && options.httpHeaderAccept;
    if (localVarHttpHeaderAcceptSelected === void 0) {
      const httpHeaderAccepts = [
        "application/json"
      ];
      localVarHttpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
    }
    if (localVarHttpHeaderAcceptSelected !== void 0) {
      localVarHeaders = localVarHeaders.set("Accept", localVarHttpHeaderAcceptSelected);
    }
    let localVarHttpContext = options && options.context;
    if (localVarHttpContext === void 0) {
      localVarHttpContext = new HttpContext();
    }
    let localVarTransferCache = options && options.transferCache;
    if (localVarTransferCache === void 0) {
      localVarTransferCache = true;
    }
    const consumes = [
      "application/json"
    ];
    const httpContentTypeSelected = this.configuration.selectHeaderContentType(consumes);
    if (httpContentTypeSelected !== void 0) {
      localVarHeaders = localVarHeaders.set("Content-Type", httpContentTypeSelected);
    }
    let responseType_ = "json";
    if (localVarHttpHeaderAcceptSelected) {
      if (localVarHttpHeaderAcceptSelected.startsWith("text")) {
        responseType_ = "text";
      } else if (this.configuration.isJsonMime(localVarHttpHeaderAcceptSelected)) {
        responseType_ = "json";
      } else {
        responseType_ = "blob";
      }
    }
    let localVarPath = `/entities/sslcertificates/${this.configuration.encodeParam({ name: "id", value: id, in: "path", style: "simple", explode: false, dataType: "string", dataFormat: void 0 })}`;
    return this.httpClient.request("put", `${this.configuration.basePath}${localVarPath}`, {
      context: localVarHttpContext,
      body: request,
      responseType: responseType_,
      withCredentials: this.configuration.withCredentials,
      headers: localVarHeaders,
      observe,
      transferCache: localVarTransferCache,
      reportProgress
    });
  }
  updateTheme(id, request, observe = "body", reportProgress = false, options) {
    if (id === null || id === void 0) {
      throw new Error("Required parameter id was null or undefined when calling updateTheme.");
    }
    if (request === null || request === void 0) {
      throw new Error("Required parameter request was null or undefined when calling updateTheme.");
    }
    let localVarHeaders = this.defaultHeaders;
    let localVarCredential;
    localVarCredential = this.configuration.lookupCredential("access_token");
    if (localVarCredential) {
      localVarHeaders = localVarHeaders.set("x-access-token", localVarCredential);
    }
    let localVarHttpHeaderAcceptSelected = options && options.httpHeaderAccept;
    if (localVarHttpHeaderAcceptSelected === void 0) {
      const httpHeaderAccepts = [
        "application/json"
      ];
      localVarHttpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
    }
    if (localVarHttpHeaderAcceptSelected !== void 0) {
      localVarHeaders = localVarHeaders.set("Accept", localVarHttpHeaderAcceptSelected);
    }
    let localVarHttpContext = options && options.context;
    if (localVarHttpContext === void 0) {
      localVarHttpContext = new HttpContext();
    }
    let localVarTransferCache = options && options.transferCache;
    if (localVarTransferCache === void 0) {
      localVarTransferCache = true;
    }
    const consumes = [
      "application/json"
    ];
    const httpContentTypeSelected = this.configuration.selectHeaderContentType(consumes);
    if (httpContentTypeSelected !== void 0) {
      localVarHeaders = localVarHeaders.set("Content-Type", httpContentTypeSelected);
    }
    let responseType_ = "json";
    if (localVarHttpHeaderAcceptSelected) {
      if (localVarHttpHeaderAcceptSelected.startsWith("text")) {
        responseType_ = "text";
      } else if (this.configuration.isJsonMime(localVarHttpHeaderAcceptSelected)) {
        responseType_ = "json";
      } else {
        responseType_ = "blob";
      }
    }
    let localVarPath = `/entities/themes/${this.configuration.encodeParam({ name: "id", value: id, in: "path", style: "simple", explode: false, dataType: "string", dataFormat: void 0 })}`;
    return this.httpClient.request("put", `${this.configuration.basePath}${localVarPath}`, {
      context: localVarHttpContext,
      body: request,
      responseType: responseType_,
      withCredentials: this.configuration.withCredentials,
      headers: localVarHeaders,
      observe,
      transferCache: localVarTransferCache,
      reportProgress
    });
  }
  updateZone(id, request, observe = "body", reportProgress = false, options) {
    if (id === null || id === void 0) {
      throw new Error("Required parameter id was null or undefined when calling updateZone.");
    }
    if (request === null || request === void 0) {
      throw new Error("Required parameter request was null or undefined when calling updateZone.");
    }
    let localVarHeaders = this.defaultHeaders;
    let localVarCredential;
    localVarCredential = this.configuration.lookupCredential("access_token");
    if (localVarCredential) {
      localVarHeaders = localVarHeaders.set("x-access-token", localVarCredential);
    }
    let localVarHttpHeaderAcceptSelected = options && options.httpHeaderAccept;
    if (localVarHttpHeaderAcceptSelected === void 0) {
      const httpHeaderAccepts = [
        "application/json"
      ];
      localVarHttpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
    }
    if (localVarHttpHeaderAcceptSelected !== void 0) {
      localVarHeaders = localVarHeaders.set("Accept", localVarHttpHeaderAcceptSelected);
    }
    let localVarHttpContext = options && options.context;
    if (localVarHttpContext === void 0) {
      localVarHttpContext = new HttpContext();
    }
    let localVarTransferCache = options && options.transferCache;
    if (localVarTransferCache === void 0) {
      localVarTransferCache = true;
    }
    const consumes = [
      "application/json"
    ];
    const httpContentTypeSelected = this.configuration.selectHeaderContentType(consumes);
    if (httpContentTypeSelected !== void 0) {
      localVarHeaders = localVarHeaders.set("Content-Type", httpContentTypeSelected);
    }
    let responseType_ = "json";
    if (localVarHttpHeaderAcceptSelected) {
      if (localVarHttpHeaderAcceptSelected.startsWith("text")) {
        responseType_ = "text";
      } else if (this.configuration.isJsonMime(localVarHttpHeaderAcceptSelected)) {
        responseType_ = "json";
      } else {
        responseType_ = "blob";
      }
    }
    let localVarPath = `/entities/zones/${this.configuration.encodeParam({ name: "id", value: id, in: "path", style: "simple", explode: false, dataType: "string", dataFormat: void 0 })}`;
    return this.httpClient.request("put", `${this.configuration.basePath}${localVarPath}`, {
      context: localVarHttpContext,
      body: request,
      responseType: responseType_,
      withCredentials: this.configuration.withCredentials,
      headers: localVarHeaders,
      observe,
      transferCache: localVarTransferCache,
      reportProgress
    });
  }
  updateZoneGroup(id, request, observe = "body", reportProgress = false, options) {
    if (id === null || id === void 0) {
      throw new Error("Required parameter id was null or undefined when calling updateZoneGroup.");
    }
    if (request === null || request === void 0) {
      throw new Error("Required parameter request was null or undefined when calling updateZoneGroup.");
    }
    let localVarHeaders = this.defaultHeaders;
    let localVarCredential;
    localVarCredential = this.configuration.lookupCredential("access_token");
    if (localVarCredential) {
      localVarHeaders = localVarHeaders.set("x-access-token", localVarCredential);
    }
    let localVarHttpHeaderAcceptSelected = options && options.httpHeaderAccept;
    if (localVarHttpHeaderAcceptSelected === void 0) {
      const httpHeaderAccepts = [
        "application/json"
      ];
      localVarHttpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
    }
    if (localVarHttpHeaderAcceptSelected !== void 0) {
      localVarHeaders = localVarHeaders.set("Accept", localVarHttpHeaderAcceptSelected);
    }
    let localVarHttpContext = options && options.context;
    if (localVarHttpContext === void 0) {
      localVarHttpContext = new HttpContext();
    }
    let localVarTransferCache = options && options.transferCache;
    if (localVarTransferCache === void 0) {
      localVarTransferCache = true;
    }
    const consumes = [
      "application/json"
    ];
    const httpContentTypeSelected = this.configuration.selectHeaderContentType(consumes);
    if (httpContentTypeSelected !== void 0) {
      localVarHeaders = localVarHeaders.set("Content-Type", httpContentTypeSelected);
    }
    let responseType_ = "json";
    if (localVarHttpHeaderAcceptSelected) {
      if (localVarHttpHeaderAcceptSelected.startsWith("text")) {
        responseType_ = "text";
      } else if (this.configuration.isJsonMime(localVarHttpHeaderAcceptSelected)) {
        responseType_ = "json";
      } else {
        responseType_ = "blob";
      }
    }
    let localVarPath = `/entities/zonegroups/${this.configuration.encodeParam({ name: "id", value: id, in: "path", style: "simple", explode: false, dataType: "string", dataFormat: void 0 })}`;
    return this.httpClient.request("put", `${this.configuration.basePath}${localVarPath}`, {
      context: localVarHttpContext,
      body: request,
      responseType: responseType_,
      withCredentials: this.configuration.withCredentials,
      headers: localVarHeaders,
      observe,
      transferCache: localVarTransferCache,
      reportProgress
    });
  }
  validateSslCertificate(id, observe = "body", reportProgress = false, options) {
    if (id === null || id === void 0) {
      throw new Error("Required parameter id was null or undefined when calling validateSslCertificate.");
    }
    let localVarHeaders = this.defaultHeaders;
    let localVarCredential;
    localVarCredential = this.configuration.lookupCredential("access_token");
    if (localVarCredential) {
      localVarHeaders = localVarHeaders.set("x-access-token", localVarCredential);
    }
    let localVarHttpHeaderAcceptSelected = options && options.httpHeaderAccept;
    if (localVarHttpHeaderAcceptSelected === void 0) {
      const httpHeaderAccepts = [
        "application/json"
      ];
      localVarHttpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
    }
    if (localVarHttpHeaderAcceptSelected !== void 0) {
      localVarHeaders = localVarHeaders.set("Accept", localVarHttpHeaderAcceptSelected);
    }
    let localVarHttpContext = options && options.context;
    if (localVarHttpContext === void 0) {
      localVarHttpContext = new HttpContext();
    }
    let localVarTransferCache = options && options.transferCache;
    if (localVarTransferCache === void 0) {
      localVarTransferCache = true;
    }
    let responseType_ = "json";
    if (localVarHttpHeaderAcceptSelected) {
      if (localVarHttpHeaderAcceptSelected.startsWith("text")) {
        responseType_ = "text";
      } else if (this.configuration.isJsonMime(localVarHttpHeaderAcceptSelected)) {
        responseType_ = "json";
      } else {
        responseType_ = "blob";
      }
    }
    let localVarPath = `/entities/sslcertificates/${this.configuration.encodeParam({ name: "id", value: id, in: "path", style: "simple", explode: false, dataType: "string", dataFormat: void 0 })}/validate`;
    return this.httpClient.request("post", `${this.configuration.basePath}${localVarPath}`, {
      context: localVarHttpContext,
      responseType: responseType_,
      withCredentials: this.configuration.withCredentials,
      headers: localVarHeaders,
      observe,
      transferCache: localVarTransferCache,
      reportProgress
    });
  }
  static \u0275fac = function EntitiesService_Factory(__ngFactoryType__) {
    return new (__ngFactoryType__ || _EntitiesService)(\u0275\u0275inject(HttpClient), \u0275\u0275inject(BASE_PATH, 8), \u0275\u0275inject(Configuration, 8));
  };
  static \u0275prov = /* @__PURE__ */ \u0275\u0275defineInjectable({ token: _EntitiesService, factory: _EntitiesService.\u0275fac, providedIn: "root" });
};
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(EntitiesService, [{
    type: Injectable,
    args: [{
      providedIn: "root"
    }]
  }], () => [{ type: HttpClient }, { type: void 0, decorators: [{
    type: Optional
  }, {
    type: Inject,
    args: [BASE_PATH]
  }] }, { type: Configuration, decorators: [{
    type: Optional
  }] }], null);
})();

// src/app/api/api/exportTasks.service.ts
var ExportTasksService = class _ExportTasksService {
  httpClient;
  basePath = "";
  defaultHeaders = new HttpHeaders();
  configuration = new Configuration();
  encoder;
  constructor(httpClient, basePath, configuration) {
    this.httpClient = httpClient;
    if (configuration) {
      this.configuration = configuration;
    }
    if (typeof this.configuration.basePath !== "string") {
      const firstBasePath = Array.isArray(basePath) ? basePath[0] : void 0;
      if (firstBasePath != void 0) {
        basePath = firstBasePath;
      }
      if (typeof basePath !== "string") {
        basePath = this.basePath;
      }
      this.configuration.basePath = basePath;
    }
    this.encoder = this.configuration.encoder || new CustomHttpParameterCodec();
  }
  // @ts-ignore
  addToHttpParams(httpParams, value, key) {
    if (typeof value === "object" && value instanceof Date === false) {
      httpParams = this.addToHttpParamsRecursive(httpParams, value);
    } else {
      httpParams = this.addToHttpParamsRecursive(httpParams, value, key);
    }
    return httpParams;
  }
  addToHttpParamsRecursive(httpParams, value, key) {
    if (value == null) {
      return httpParams;
    }
    if (typeof value === "object") {
      if (Array.isArray(value)) {
        value.forEach((elem) => httpParams = this.addToHttpParamsRecursive(httpParams, elem, key));
      } else if (value instanceof Date) {
        if (key != null) {
          httpParams = httpParams.append(key, value.toISOString().substring(0, 10));
        } else {
          throw Error("key may not be null if value is Date");
        }
      } else {
        Object.keys(value).forEach((k) => httpParams = this.addToHttpParamsRecursive(httpParams, value[k], key != null ? `${key}.${k}` : k));
      }
    } else if (key != null) {
      httpParams = httpParams.append(key, value);
    } else {
      throw Error("key may not be null if value is not object or array");
    }
    return httpParams;
  }
  createExportTask(request, observe = "body", reportProgress = false, options) {
    if (request === null || request === void 0) {
      throw new Error("Required parameter request was null or undefined when calling createExportTask.");
    }
    let localVarHeaders = this.defaultHeaders;
    let localVarCredential;
    localVarCredential = this.configuration.lookupCredential("access_token");
    if (localVarCredential) {
      localVarHeaders = localVarHeaders.set("x-access-token", localVarCredential);
    }
    let localVarHttpHeaderAcceptSelected = options && options.httpHeaderAccept;
    if (localVarHttpHeaderAcceptSelected === void 0) {
      const httpHeaderAccepts = [
        "application/json"
      ];
      localVarHttpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
    }
    if (localVarHttpHeaderAcceptSelected !== void 0) {
      localVarHeaders = localVarHeaders.set("Accept", localVarHttpHeaderAcceptSelected);
    }
    let localVarHttpContext = options && options.context;
    if (localVarHttpContext === void 0) {
      localVarHttpContext = new HttpContext();
    }
    let localVarTransferCache = options && options.transferCache;
    if (localVarTransferCache === void 0) {
      localVarTransferCache = true;
    }
    const consumes = [
      "application/json"
    ];
    const httpContentTypeSelected = this.configuration.selectHeaderContentType(consumes);
    if (httpContentTypeSelected !== void 0) {
      localVarHeaders = localVarHeaders.set("Content-Type", httpContentTypeSelected);
    }
    let responseType_ = "json";
    if (localVarHttpHeaderAcceptSelected) {
      if (localVarHttpHeaderAcceptSelected.startsWith("text")) {
        responseType_ = "text";
      } else if (this.configuration.isJsonMime(localVarHttpHeaderAcceptSelected)) {
        responseType_ = "json";
      } else {
        responseType_ = "blob";
      }
    }
    let localVarPath = `/entities/exporttasks`;
    return this.httpClient.request("post", `${this.configuration.basePath}${localVarPath}`, {
      context: localVarHttpContext,
      body: request,
      responseType: responseType_,
      withCredentials: this.configuration.withCredentials,
      headers: localVarHeaders,
      observe,
      transferCache: localVarTransferCache,
      reportProgress
    });
  }
  getExportTask(id, observe = "body", reportProgress = false, options) {
    if (id === null || id === void 0) {
      throw new Error("Required parameter id was null or undefined when calling getExportTask.");
    }
    let localVarHeaders = this.defaultHeaders;
    let localVarCredential;
    localVarCredential = this.configuration.lookupCredential("access_token");
    if (localVarCredential) {
      localVarHeaders = localVarHeaders.set("x-access-token", localVarCredential);
    }
    let localVarHttpHeaderAcceptSelected = options && options.httpHeaderAccept;
    if (localVarHttpHeaderAcceptSelected === void 0) {
      const httpHeaderAccepts = [
        "application/json"
      ];
      localVarHttpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
    }
    if (localVarHttpHeaderAcceptSelected !== void 0) {
      localVarHeaders = localVarHeaders.set("Accept", localVarHttpHeaderAcceptSelected);
    }
    let localVarHttpContext = options && options.context;
    if (localVarHttpContext === void 0) {
      localVarHttpContext = new HttpContext();
    }
    let localVarTransferCache = options && options.transferCache;
    if (localVarTransferCache === void 0) {
      localVarTransferCache = true;
    }
    let responseType_ = "json";
    if (localVarHttpHeaderAcceptSelected) {
      if (localVarHttpHeaderAcceptSelected.startsWith("text")) {
        responseType_ = "text";
      } else if (this.configuration.isJsonMime(localVarHttpHeaderAcceptSelected)) {
        responseType_ = "json";
      } else {
        responseType_ = "blob";
      }
    }
    let localVarPath = `/entities/exporttasks/${this.configuration.encodeParam({ name: "id", value: id, in: "path", style: "simple", explode: false, dataType: "string", dataFormat: void 0 })}`;
    return this.httpClient.request("get", `${this.configuration.basePath}${localVarPath}`, {
      context: localVarHttpContext,
      responseType: responseType_,
      withCredentials: this.configuration.withCredentials,
      headers: localVarHeaders,
      observe,
      transferCache: localVarTransferCache,
      reportProgress
    });
  }
  listExportTasks(owner, offset, limit, sort, filter, observe = "body", reportProgress = false, options) {
    if (owner === null || owner === void 0) {
      throw new Error("Required parameter owner was null or undefined when calling listExportTasks.");
    }
    let localVarQueryParameters = new HttpParams({ encoder: this.encoder });
    if (owner !== void 0 && owner !== null) {
      localVarQueryParameters = this.addToHttpParams(localVarQueryParameters, owner, "owner");
    }
    if (offset !== void 0 && offset !== null) {
      localVarQueryParameters = this.addToHttpParams(localVarQueryParameters, offset, "offset");
    }
    if (limit !== void 0 && limit !== null) {
      localVarQueryParameters = this.addToHttpParams(localVarQueryParameters, limit, "limit");
    }
    if (sort !== void 0 && sort !== null) {
      localVarQueryParameters = this.addToHttpParams(localVarQueryParameters, sort, "sort");
    }
    if (filter !== void 0 && filter !== null) {
      localVarQueryParameters = this.addToHttpParams(localVarQueryParameters, filter, "filter");
    }
    let localVarHeaders = this.defaultHeaders;
    let localVarCredential;
    localVarCredential = this.configuration.lookupCredential("access_token");
    if (localVarCredential) {
      localVarHeaders = localVarHeaders.set("x-access-token", localVarCredential);
    }
    let localVarHttpHeaderAcceptSelected = options && options.httpHeaderAccept;
    if (localVarHttpHeaderAcceptSelected === void 0) {
      const httpHeaderAccepts = [
        "application/json"
      ];
      localVarHttpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
    }
    if (localVarHttpHeaderAcceptSelected !== void 0) {
      localVarHeaders = localVarHeaders.set("Accept", localVarHttpHeaderAcceptSelected);
    }
    let localVarHttpContext = options && options.context;
    if (localVarHttpContext === void 0) {
      localVarHttpContext = new HttpContext();
    }
    let localVarTransferCache = options && options.transferCache;
    if (localVarTransferCache === void 0) {
      localVarTransferCache = true;
    }
    let responseType_ = "json";
    if (localVarHttpHeaderAcceptSelected) {
      if (localVarHttpHeaderAcceptSelected.startsWith("text")) {
        responseType_ = "text";
      } else if (this.configuration.isJsonMime(localVarHttpHeaderAcceptSelected)) {
        responseType_ = "json";
      } else {
        responseType_ = "blob";
      }
    }
    let localVarPath = `/entities/exporttasks`;
    return this.httpClient.request("get", `${this.configuration.basePath}${localVarPath}`, {
      context: localVarHttpContext,
      params: localVarQueryParameters,
      responseType: responseType_,
      withCredentials: this.configuration.withCredentials,
      headers: localVarHeaders,
      observe,
      transferCache: localVarTransferCache,
      reportProgress
    });
  }
  updateExportTask(id, request, observe = "body", reportProgress = false, options) {
    if (id === null || id === void 0) {
      throw new Error("Required parameter id was null or undefined when calling updateExportTask.");
    }
    if (request === null || request === void 0) {
      throw new Error("Required parameter request was null or undefined when calling updateExportTask.");
    }
    let localVarHeaders = this.defaultHeaders;
    let localVarCredential;
    localVarCredential = this.configuration.lookupCredential("access_token");
    if (localVarCredential) {
      localVarHeaders = localVarHeaders.set("x-access-token", localVarCredential);
    }
    let localVarHttpHeaderAcceptSelected = options && options.httpHeaderAccept;
    if (localVarHttpHeaderAcceptSelected === void 0) {
      const httpHeaderAccepts = [
        "application/json"
      ];
      localVarHttpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
    }
    if (localVarHttpHeaderAcceptSelected !== void 0) {
      localVarHeaders = localVarHeaders.set("Accept", localVarHttpHeaderAcceptSelected);
    }
    let localVarHttpContext = options && options.context;
    if (localVarHttpContext === void 0) {
      localVarHttpContext = new HttpContext();
    }
    let localVarTransferCache = options && options.transferCache;
    if (localVarTransferCache === void 0) {
      localVarTransferCache = true;
    }
    const consumes = [
      "application/json"
    ];
    const httpContentTypeSelected = this.configuration.selectHeaderContentType(consumes);
    if (httpContentTypeSelected !== void 0) {
      localVarHeaders = localVarHeaders.set("Content-Type", httpContentTypeSelected);
    }
    let responseType_ = "json";
    if (localVarHttpHeaderAcceptSelected) {
      if (localVarHttpHeaderAcceptSelected.startsWith("text")) {
        responseType_ = "text";
      } else if (this.configuration.isJsonMime(localVarHttpHeaderAcceptSelected)) {
        responseType_ = "json";
      } else {
        responseType_ = "blob";
      }
    }
    let localVarPath = `/entities/exporttasks/${this.configuration.encodeParam({ name: "id", value: id, in: "path", style: "simple", explode: false, dataType: "string", dataFormat: void 0 })}`;
    return this.httpClient.request("put", `${this.configuration.basePath}${localVarPath}`, {
      context: localVarHttpContext,
      body: request,
      responseType: responseType_,
      withCredentials: this.configuration.withCredentials,
      headers: localVarHeaders,
      observe,
      transferCache: localVarTransferCache,
      reportProgress
    });
  }
  static \u0275fac = function ExportTasksService_Factory(__ngFactoryType__) {
    return new (__ngFactoryType__ || _ExportTasksService)(\u0275\u0275inject(HttpClient), \u0275\u0275inject(BASE_PATH, 8), \u0275\u0275inject(Configuration, 8));
  };
  static \u0275prov = /* @__PURE__ */ \u0275\u0275defineInjectable({ token: _ExportTasksService, factory: _ExportTasksService.\u0275fac, providedIn: "root" });
};
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(ExportTasksService, [{
    type: Injectable,
    args: [{
      providedIn: "root"
    }]
  }], () => [{ type: HttpClient }, { type: void 0, decorators: [{
    type: Optional
  }, {
    type: Inject,
    args: [BASE_PATH]
  }] }, { type: Configuration, decorators: [{
    type: Optional
  }] }], null);
})();

// src/app/api/api/feeds.service.ts
var FeedsService = class _FeedsService {
  httpClient;
  basePath = "";
  defaultHeaders = new HttpHeaders();
  configuration = new Configuration();
  encoder;
  constructor(httpClient, basePath, configuration) {
    this.httpClient = httpClient;
    if (configuration) {
      this.configuration = configuration;
    }
    if (typeof this.configuration.basePath !== "string") {
      const firstBasePath = Array.isArray(basePath) ? basePath[0] : void 0;
      if (firstBasePath != void 0) {
        basePath = firstBasePath;
      }
      if (typeof basePath !== "string") {
        basePath = this.basePath;
      }
      this.configuration.basePath = basePath;
    }
    this.encoder = this.configuration.encoder || new CustomHttpParameterCodec();
  }
  // @ts-ignore
  addToHttpParams(httpParams, value, key) {
    if (typeof value === "object" && value instanceof Date === false) {
      httpParams = this.addToHttpParamsRecursive(httpParams, value);
    } else {
      httpParams = this.addToHttpParamsRecursive(httpParams, value, key);
    }
    return httpParams;
  }
  addToHttpParamsRecursive(httpParams, value, key) {
    if (value == null) {
      return httpParams;
    }
    if (typeof value === "object") {
      if (Array.isArray(value)) {
        value.forEach((elem) => httpParams = this.addToHttpParamsRecursive(httpParams, elem, key));
      } else if (value instanceof Date) {
        if (key != null) {
          httpParams = httpParams.append(key, value.toISOString().substring(0, 10));
        } else {
          throw Error("key may not be null if value is Date");
        }
      } else {
        Object.keys(value).forEach((k) => httpParams = this.addToHttpParamsRecursive(httpParams, value[k], key != null ? `${key}.${k}` : k));
      }
    } else if (key != null) {
      httpParams = httpParams.append(key, value);
    } else {
      throw Error("key may not be null if value is not object or array");
    }
    return httpParams;
  }
  acknowledgeAlert(client, alert, request, observe = "body", reportProgress = false, options) {
    if (client === null || client === void 0) {
      throw new Error("Required parameter client was null or undefined when calling acknowledgeAlert.");
    }
    if (alert === null || alert === void 0) {
      throw new Error("Required parameter alert was null or undefined when calling acknowledgeAlert.");
    }
    if (request === null || request === void 0) {
      throw new Error("Required parameter request was null or undefined when calling acknowledgeAlert.");
    }
    let localVarHeaders = this.defaultHeaders;
    let localVarCredential;
    localVarCredential = this.configuration.lookupCredential("access_token");
    if (localVarCredential) {
      localVarHeaders = localVarHeaders.set("x-access-token", localVarCredential);
    }
    let localVarHttpHeaderAcceptSelected = options && options.httpHeaderAccept;
    if (localVarHttpHeaderAcceptSelected === void 0) {
      const httpHeaderAccepts = [
        "application/json"
      ];
      localVarHttpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
    }
    if (localVarHttpHeaderAcceptSelected !== void 0) {
      localVarHeaders = localVarHeaders.set("Accept", localVarHttpHeaderAcceptSelected);
    }
    let localVarHttpContext = options && options.context;
    if (localVarHttpContext === void 0) {
      localVarHttpContext = new HttpContext();
    }
    let localVarTransferCache = options && options.transferCache;
    if (localVarTransferCache === void 0) {
      localVarTransferCache = true;
    }
    const consumes = [
      "application/json"
    ];
    const httpContentTypeSelected = this.configuration.selectHeaderContentType(consumes);
    if (httpContentTypeSelected !== void 0) {
      localVarHeaders = localVarHeaders.set("Content-Type", httpContentTypeSelected);
    }
    let responseType_ = "json";
    if (localVarHttpHeaderAcceptSelected) {
      if (localVarHttpHeaderAcceptSelected.startsWith("text")) {
        responseType_ = "text";
      } else if (this.configuration.isJsonMime(localVarHttpHeaderAcceptSelected)) {
        responseType_ = "json";
      } else {
        responseType_ = "blob";
      }
    }
    let localVarPath = `/data/feeds/alerts/${this.configuration.encodeParam({ name: "client", value: client, in: "path", style: "simple", explode: false, dataType: "string", dataFormat: void 0 })}/acknowledge/${this.configuration.encodeParam({ name: "alert", value: alert, in: "path", style: "simple", explode: false, dataType: "string", dataFormat: void 0 })}`;
    return this.httpClient.request("post", `${this.configuration.basePath}${localVarPath}`, {
      context: localVarHttpContext,
      body: request,
      responseType: responseType_,
      withCredentials: this.configuration.withCredentials,
      headers: localVarHeaders,
      observe,
      transferCache: localVarTransferCache,
      reportProgress
    });
  }
  commentAlert(client, alert, request, observe = "body", reportProgress = false, options) {
    if (client === null || client === void 0) {
      throw new Error("Required parameter client was null or undefined when calling commentAlert.");
    }
    if (alert === null || alert === void 0) {
      throw new Error("Required parameter alert was null or undefined when calling commentAlert.");
    }
    if (request === null || request === void 0) {
      throw new Error("Required parameter request was null or undefined when calling commentAlert.");
    }
    let localVarHeaders = this.defaultHeaders;
    let localVarCredential;
    localVarCredential = this.configuration.lookupCredential("access_token");
    if (localVarCredential) {
      localVarHeaders = localVarHeaders.set("x-access-token", localVarCredential);
    }
    let localVarHttpHeaderAcceptSelected = options && options.httpHeaderAccept;
    if (localVarHttpHeaderAcceptSelected === void 0) {
      const httpHeaderAccepts = [
        "application/json"
      ];
      localVarHttpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
    }
    if (localVarHttpHeaderAcceptSelected !== void 0) {
      localVarHeaders = localVarHeaders.set("Accept", localVarHttpHeaderAcceptSelected);
    }
    let localVarHttpContext = options && options.context;
    if (localVarHttpContext === void 0) {
      localVarHttpContext = new HttpContext();
    }
    let localVarTransferCache = options && options.transferCache;
    if (localVarTransferCache === void 0) {
      localVarTransferCache = true;
    }
    const consumes = [
      "application/json"
    ];
    const httpContentTypeSelected = this.configuration.selectHeaderContentType(consumes);
    if (httpContentTypeSelected !== void 0) {
      localVarHeaders = localVarHeaders.set("Content-Type", httpContentTypeSelected);
    }
    let responseType_ = "json";
    if (localVarHttpHeaderAcceptSelected) {
      if (localVarHttpHeaderAcceptSelected.startsWith("text")) {
        responseType_ = "text";
      } else if (this.configuration.isJsonMime(localVarHttpHeaderAcceptSelected)) {
        responseType_ = "json";
      } else {
        responseType_ = "blob";
      }
    }
    let localVarPath = `/data/feeds/alerts/${this.configuration.encodeParam({ name: "client", value: client, in: "path", style: "simple", explode: false, dataType: "string", dataFormat: void 0 })}/comment/${this.configuration.encodeParam({ name: "alert", value: alert, in: "path", style: "simple", explode: false, dataType: "string", dataFormat: void 0 })}`;
    return this.httpClient.request("post", `${this.configuration.basePath}${localVarPath}`, {
      context: localVarHttpContext,
      body: request,
      responseType: responseType_,
      withCredentials: this.configuration.withCredentials,
      headers: localVarHeaders,
      observe,
      transferCache: localVarTransferCache,
      reportProgress
    });
  }
  getAlertFeed(client, sequence, direction, limit, asset, alert, observe = "body", reportProgress = false, options) {
    if (client === null || client === void 0) {
      throw new Error("Required parameter client was null or undefined when calling getAlertFeed.");
    }
    if (sequence === null || sequence === void 0) {
      throw new Error("Required parameter sequence was null or undefined when calling getAlertFeed.");
    }
    if (direction === null || direction === void 0) {
      throw new Error("Required parameter direction was null or undefined when calling getAlertFeed.");
    }
    let localVarQueryParameters = new HttpParams({ encoder: this.encoder });
    if (sequence !== void 0 && sequence !== null) {
      localVarQueryParameters = this.addToHttpParams(localVarQueryParameters, sequence, "sequence");
    }
    if (direction !== void 0 && direction !== null) {
      localVarQueryParameters = this.addToHttpParams(localVarQueryParameters, direction, "direction");
    }
    if (limit !== void 0 && limit !== null) {
      localVarQueryParameters = this.addToHttpParams(localVarQueryParameters, limit, "limit");
    }
    if (asset !== void 0 && asset !== null) {
      localVarQueryParameters = this.addToHttpParams(localVarQueryParameters, asset, "asset");
    }
    if (alert !== void 0 && alert !== null) {
      localVarQueryParameters = this.addToHttpParams(localVarQueryParameters, alert, "alert");
    }
    let localVarHeaders = this.defaultHeaders;
    let localVarCredential;
    localVarCredential = this.configuration.lookupCredential("access_token");
    if (localVarCredential) {
      localVarHeaders = localVarHeaders.set("x-access-token", localVarCredential);
    }
    let localVarHttpHeaderAcceptSelected = options && options.httpHeaderAccept;
    if (localVarHttpHeaderAcceptSelected === void 0) {
      const httpHeaderAccepts = [
        "application/json"
      ];
      localVarHttpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
    }
    if (localVarHttpHeaderAcceptSelected !== void 0) {
      localVarHeaders = localVarHeaders.set("Accept", localVarHttpHeaderAcceptSelected);
    }
    let localVarHttpContext = options && options.context;
    if (localVarHttpContext === void 0) {
      localVarHttpContext = new HttpContext();
    }
    let localVarTransferCache = options && options.transferCache;
    if (localVarTransferCache === void 0) {
      localVarTransferCache = true;
    }
    let responseType_ = "json";
    if (localVarHttpHeaderAcceptSelected) {
      if (localVarHttpHeaderAcceptSelected.startsWith("text")) {
        responseType_ = "text";
      } else if (this.configuration.isJsonMime(localVarHttpHeaderAcceptSelected)) {
        responseType_ = "json";
      } else {
        responseType_ = "blob";
      }
    }
    let localVarPath = `/data/feeds/alerts/${this.configuration.encodeParam({ name: "client", value: client, in: "path", style: "simple", explode: false, dataType: "string", dataFormat: void 0 })}`;
    return this.httpClient.request("get", `${this.configuration.basePath}${localVarPath}`, {
      context: localVarHttpContext,
      params: localVarQueryParameters,
      responseType: responseType_,
      withCredentials: this.configuration.withCredentials,
      headers: localVarHeaders,
      observe,
      transferCache: localVarTransferCache,
      reportProgress
    });
  }
  getAuditFeedForEntity(company, entity, sequence, direction, limit, observe = "body", reportProgress = false, options) {
    if (company === null || company === void 0) {
      throw new Error("Required parameter company was null or undefined when calling getAuditFeedForEntity.");
    }
    if (entity === null || entity === void 0) {
      throw new Error("Required parameter entity was null or undefined when calling getAuditFeedForEntity.");
    }
    if (sequence === null || sequence === void 0) {
      throw new Error("Required parameter sequence was null or undefined when calling getAuditFeedForEntity.");
    }
    if (direction === null || direction === void 0) {
      throw new Error("Required parameter direction was null or undefined when calling getAuditFeedForEntity.");
    }
    if (limit === null || limit === void 0) {
      throw new Error("Required parameter limit was null or undefined when calling getAuditFeedForEntity.");
    }
    let localVarQueryParameters = new HttpParams({ encoder: this.encoder });
    if (sequence !== void 0 && sequence !== null) {
      localVarQueryParameters = this.addToHttpParams(localVarQueryParameters, sequence, "sequence");
    }
    if (direction !== void 0 && direction !== null) {
      localVarQueryParameters = this.addToHttpParams(localVarQueryParameters, direction, "direction");
    }
    if (limit !== void 0 && limit !== null) {
      localVarQueryParameters = this.addToHttpParams(localVarQueryParameters, limit, "limit");
    }
    let localVarHeaders = this.defaultHeaders;
    let localVarCredential;
    localVarCredential = this.configuration.lookupCredential("access_token");
    if (localVarCredential) {
      localVarHeaders = localVarHeaders.set("x-access-token", localVarCredential);
    }
    let localVarHttpHeaderAcceptSelected = options && options.httpHeaderAccept;
    if (localVarHttpHeaderAcceptSelected === void 0) {
      const httpHeaderAccepts = [
        "application/json"
      ];
      localVarHttpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
    }
    if (localVarHttpHeaderAcceptSelected !== void 0) {
      localVarHeaders = localVarHeaders.set("Accept", localVarHttpHeaderAcceptSelected);
    }
    let localVarHttpContext = options && options.context;
    if (localVarHttpContext === void 0) {
      localVarHttpContext = new HttpContext();
    }
    let localVarTransferCache = options && options.transferCache;
    if (localVarTransferCache === void 0) {
      localVarTransferCache = true;
    }
    let responseType_ = "json";
    if (localVarHttpHeaderAcceptSelected) {
      if (localVarHttpHeaderAcceptSelected.startsWith("text")) {
        responseType_ = "text";
      } else if (this.configuration.isJsonMime(localVarHttpHeaderAcceptSelected)) {
        responseType_ = "json";
      } else {
        responseType_ = "blob";
      }
    }
    let localVarPath = `/data/feeds/audit/${this.configuration.encodeParam({ name: "company", value: company, in: "path", style: "simple", explode: false, dataType: "string", dataFormat: void 0 })}/entity/${this.configuration.encodeParam({ name: "entity", value: entity, in: "path", style: "simple", explode: false, dataType: "string", dataFormat: void 0 })}`;
    return this.httpClient.request("get", `${this.configuration.basePath}${localVarPath}`, {
      context: localVarHttpContext,
      params: localVarQueryParameters,
      responseType: responseType_,
      withCredentials: this.configuration.withCredentials,
      headers: localVarHeaders,
      observe,
      transferCache: localVarTransferCache,
      reportProgress
    });
  }
  getEventFeed(client, sequence, direction, limit, asset, observe = "body", reportProgress = false, options) {
    if (client === null || client === void 0) {
      throw new Error("Required parameter client was null or undefined when calling getEventFeed.");
    }
    if (sequence === null || sequence === void 0) {
      throw new Error("Required parameter sequence was null or undefined when calling getEventFeed.");
    }
    if (direction === null || direction === void 0) {
      throw new Error("Required parameter direction was null or undefined when calling getEventFeed.");
    }
    let localVarQueryParameters = new HttpParams({ encoder: this.encoder });
    if (sequence !== void 0 && sequence !== null) {
      localVarQueryParameters = this.addToHttpParams(localVarQueryParameters, sequence, "sequence");
    }
    if (direction !== void 0 && direction !== null) {
      localVarQueryParameters = this.addToHttpParams(localVarQueryParameters, direction, "direction");
    }
    if (limit !== void 0 && limit !== null) {
      localVarQueryParameters = this.addToHttpParams(localVarQueryParameters, limit, "limit");
    }
    if (asset !== void 0 && asset !== null) {
      localVarQueryParameters = this.addToHttpParams(localVarQueryParameters, asset, "asset");
    }
    let localVarHeaders = this.defaultHeaders;
    let localVarCredential;
    localVarCredential = this.configuration.lookupCredential("access_token");
    if (localVarCredential) {
      localVarHeaders = localVarHeaders.set("x-access-token", localVarCredential);
    }
    let localVarHttpHeaderAcceptSelected = options && options.httpHeaderAccept;
    if (localVarHttpHeaderAcceptSelected === void 0) {
      const httpHeaderAccepts = [
        "application/json"
      ];
      localVarHttpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
    }
    if (localVarHttpHeaderAcceptSelected !== void 0) {
      localVarHeaders = localVarHeaders.set("Accept", localVarHttpHeaderAcceptSelected);
    }
    let localVarHttpContext = options && options.context;
    if (localVarHttpContext === void 0) {
      localVarHttpContext = new HttpContext();
    }
    let localVarTransferCache = options && options.transferCache;
    if (localVarTransferCache === void 0) {
      localVarTransferCache = true;
    }
    let responseType_ = "json";
    if (localVarHttpHeaderAcceptSelected) {
      if (localVarHttpHeaderAcceptSelected.startsWith("text")) {
        responseType_ = "text";
      } else if (this.configuration.isJsonMime(localVarHttpHeaderAcceptSelected)) {
        responseType_ = "json";
      } else {
        responseType_ = "blob";
      }
    }
    let localVarPath = `/data/feeds/events/${this.configuration.encodeParam({ name: "client", value: client, in: "path", style: "simple", explode: false, dataType: "string", dataFormat: void 0 })}`;
    return this.httpClient.request("get", `${this.configuration.basePath}${localVarPath}`, {
      context: localVarHttpContext,
      params: localVarQueryParameters,
      responseType: responseType_,
      withCredentials: this.configuration.withCredentials,
      headers: localVarHeaders,
      observe,
      transferCache: localVarTransferCache,
      reportProgress
    });
  }
  getLocationFeed(client, sequence, offset, limit, sort, filter, observe = "body", reportProgress = false, options) {
    if (client === null || client === void 0) {
      throw new Error("Required parameter client was null or undefined when calling getLocationFeed.");
    }
    if (sequence === null || sequence === void 0) {
      throw new Error("Required parameter sequence was null or undefined when calling getLocationFeed.");
    }
    let localVarQueryParameters = new HttpParams({ encoder: this.encoder });
    if (sequence !== void 0 && sequence !== null) {
      localVarQueryParameters = this.addToHttpParams(localVarQueryParameters, sequence, "sequence");
    }
    if (offset !== void 0 && offset !== null) {
      localVarQueryParameters = this.addToHttpParams(localVarQueryParameters, offset, "offset");
    }
    if (limit !== void 0 && limit !== null) {
      localVarQueryParameters = this.addToHttpParams(localVarQueryParameters, limit, "limit");
    }
    if (sort !== void 0 && sort !== null) {
      localVarQueryParameters = this.addToHttpParams(localVarQueryParameters, sort, "sort");
    }
    if (filter !== void 0 && filter !== null) {
      localVarQueryParameters = this.addToHttpParams(localVarQueryParameters, filter, "filter");
    }
    let localVarHeaders = this.defaultHeaders;
    let localVarCredential;
    localVarCredential = this.configuration.lookupCredential("access_token");
    if (localVarCredential) {
      localVarHeaders = localVarHeaders.set("x-access-token", localVarCredential);
    }
    let localVarHttpHeaderAcceptSelected = options && options.httpHeaderAccept;
    if (localVarHttpHeaderAcceptSelected === void 0) {
      const httpHeaderAccepts = [
        "application/json"
      ];
      localVarHttpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
    }
    if (localVarHttpHeaderAcceptSelected !== void 0) {
      localVarHeaders = localVarHeaders.set("Accept", localVarHttpHeaderAcceptSelected);
    }
    let localVarHttpContext = options && options.context;
    if (localVarHttpContext === void 0) {
      localVarHttpContext = new HttpContext();
    }
    let localVarTransferCache = options && options.transferCache;
    if (localVarTransferCache === void 0) {
      localVarTransferCache = true;
    }
    let responseType_ = "json";
    if (localVarHttpHeaderAcceptSelected) {
      if (localVarHttpHeaderAcceptSelected.startsWith("text")) {
        responseType_ = "text";
      } else if (this.configuration.isJsonMime(localVarHttpHeaderAcceptSelected)) {
        responseType_ = "json";
      } else {
        responseType_ = "blob";
      }
    }
    let localVarPath = `/data/feeds/location/${this.configuration.encodeParam({ name: "client", value: client, in: "path", style: "simple", explode: false, dataType: "string", dataFormat: void 0 })}`;
    return this.httpClient.request("get", `${this.configuration.basePath}${localVarPath}`, {
      context: localVarHttpContext,
      params: localVarQueryParameters,
      responseType: responseType_,
      withCredentials: this.configuration.withCredentials,
      headers: localVarHeaders,
      observe,
      transferCache: localVarTransferCache,
      reportProgress
    });
  }
  getNotificationFeed(sequence, direction, limit, observe = "body", reportProgress = false, options) {
    if (sequence === null || sequence === void 0) {
      throw new Error("Required parameter sequence was null or undefined when calling getNotificationFeed.");
    }
    if (direction === null || direction === void 0) {
      throw new Error("Required parameter direction was null or undefined when calling getNotificationFeed.");
    }
    let localVarQueryParameters = new HttpParams({ encoder: this.encoder });
    if (sequence !== void 0 && sequence !== null) {
      localVarQueryParameters = this.addToHttpParams(localVarQueryParameters, sequence, "sequence");
    }
    if (direction !== void 0 && direction !== null) {
      localVarQueryParameters = this.addToHttpParams(localVarQueryParameters, direction, "direction");
    }
    if (limit !== void 0 && limit !== null) {
      localVarQueryParameters = this.addToHttpParams(localVarQueryParameters, limit, "limit");
    }
    let localVarHeaders = this.defaultHeaders;
    let localVarCredential;
    localVarCredential = this.configuration.lookupCredential("access_token");
    if (localVarCredential) {
      localVarHeaders = localVarHeaders.set("x-access-token", localVarCredential);
    }
    let localVarHttpHeaderAcceptSelected = options && options.httpHeaderAccept;
    if (localVarHttpHeaderAcceptSelected === void 0) {
      const httpHeaderAccepts = [
        "application/json"
      ];
      localVarHttpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
    }
    if (localVarHttpHeaderAcceptSelected !== void 0) {
      localVarHeaders = localVarHeaders.set("Accept", localVarHttpHeaderAcceptSelected);
    }
    let localVarHttpContext = options && options.context;
    if (localVarHttpContext === void 0) {
      localVarHttpContext = new HttpContext();
    }
    let localVarTransferCache = options && options.transferCache;
    if (localVarTransferCache === void 0) {
      localVarTransferCache = true;
    }
    let responseType_ = "json";
    if (localVarHttpHeaderAcceptSelected) {
      if (localVarHttpHeaderAcceptSelected.startsWith("text")) {
        responseType_ = "text";
      } else if (this.configuration.isJsonMime(localVarHttpHeaderAcceptSelected)) {
        responseType_ = "json";
      } else {
        responseType_ = "blob";
      }
    }
    let localVarPath = `/data/feeds/notifications`;
    return this.httpClient.request("get", `${this.configuration.basePath}${localVarPath}`, {
      context: localVarHttpContext,
      params: localVarQueryParameters,
      responseType: responseType_,
      withCredentials: this.configuration.withCredentials,
      headers: localVarHeaders,
      observe,
      transferCache: localVarTransferCache,
      reportProgress
    });
  }
  getTripFeed(client, sequence, direction, limit, asset, observe = "body", reportProgress = false, options) {
    if (client === null || client === void 0) {
      throw new Error("Required parameter client was null or undefined when calling getTripFeed.");
    }
    if (sequence === null || sequence === void 0) {
      throw new Error("Required parameter sequence was null or undefined when calling getTripFeed.");
    }
    if (direction === null || direction === void 0) {
      throw new Error("Required parameter direction was null or undefined when calling getTripFeed.");
    }
    let localVarQueryParameters = new HttpParams({ encoder: this.encoder });
    if (sequence !== void 0 && sequence !== null) {
      localVarQueryParameters = this.addToHttpParams(localVarQueryParameters, sequence, "sequence");
    }
    if (direction !== void 0 && direction !== null) {
      localVarQueryParameters = this.addToHttpParams(localVarQueryParameters, direction, "direction");
    }
    if (limit !== void 0 && limit !== null) {
      localVarQueryParameters = this.addToHttpParams(localVarQueryParameters, limit, "limit");
    }
    if (asset !== void 0 && asset !== null) {
      localVarQueryParameters = this.addToHttpParams(localVarQueryParameters, asset, "asset");
    }
    let localVarHeaders = this.defaultHeaders;
    let localVarCredential;
    localVarCredential = this.configuration.lookupCredential("access_token");
    if (localVarCredential) {
      localVarHeaders = localVarHeaders.set("x-access-token", localVarCredential);
    }
    let localVarHttpHeaderAcceptSelected = options && options.httpHeaderAccept;
    if (localVarHttpHeaderAcceptSelected === void 0) {
      const httpHeaderAccepts = [
        "application/json"
      ];
      localVarHttpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
    }
    if (localVarHttpHeaderAcceptSelected !== void 0) {
      localVarHeaders = localVarHeaders.set("Accept", localVarHttpHeaderAcceptSelected);
    }
    let localVarHttpContext = options && options.context;
    if (localVarHttpContext === void 0) {
      localVarHttpContext = new HttpContext();
    }
    let localVarTransferCache = options && options.transferCache;
    if (localVarTransferCache === void 0) {
      localVarTransferCache = true;
    }
    let responseType_ = "json";
    if (localVarHttpHeaderAcceptSelected) {
      if (localVarHttpHeaderAcceptSelected.startsWith("text")) {
        responseType_ = "text";
      } else if (this.configuration.isJsonMime(localVarHttpHeaderAcceptSelected)) {
        responseType_ = "json";
      } else {
        responseType_ = "blob";
      }
    }
    let localVarPath = `/data/feeds/trips/${this.configuration.encodeParam({ name: "client", value: client, in: "path", style: "simple", explode: false, dataType: "string", dataFormat: void 0 })}`;
    return this.httpClient.request("get", `${this.configuration.basePath}${localVarPath}`, {
      context: localVarHttpContext,
      params: localVarQueryParameters,
      responseType: responseType_,
      withCredentials: this.configuration.withCredentials,
      headers: localVarHeaders,
      observe,
      transferCache: localVarTransferCache,
      reportProgress
    });
  }
  static \u0275fac = function FeedsService_Factory(__ngFactoryType__) {
    return new (__ngFactoryType__ || _FeedsService)(\u0275\u0275inject(HttpClient), \u0275\u0275inject(BASE_PATH, 8), \u0275\u0275inject(Configuration, 8));
  };
  static \u0275prov = /* @__PURE__ */ \u0275\u0275defineInjectable({ token: _FeedsService, factory: _FeedsService.\u0275fac, providedIn: "root" });
};
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(FeedsService, [{
    type: Injectable,
    args: [{
      providedIn: "root"
    }]
  }], () => [{ type: HttpClient }, { type: void 0, decorators: [{
    type: Optional
  }, {
    type: Inject,
    args: [BASE_PATH]
  }] }, { type: Configuration, decorators: [{
    type: Optional
  }] }], null);
})();

// src/app/api/api/fuelCards.service.ts
var FuelCardsService = class _FuelCardsService {
  httpClient;
  basePath = "";
  defaultHeaders = new HttpHeaders();
  configuration = new Configuration();
  encoder;
  constructor(httpClient, basePath, configuration) {
    this.httpClient = httpClient;
    if (configuration) {
      this.configuration = configuration;
    }
    if (typeof this.configuration.basePath !== "string") {
      const firstBasePath = Array.isArray(basePath) ? basePath[0] : void 0;
      if (firstBasePath != void 0) {
        basePath = firstBasePath;
      }
      if (typeof basePath !== "string") {
        basePath = this.basePath;
      }
      this.configuration.basePath = basePath;
    }
    this.encoder = this.configuration.encoder || new CustomHttpParameterCodec();
  }
  // @ts-ignore
  addToHttpParams(httpParams, value, key) {
    if (typeof value === "object" && value instanceof Date === false) {
      httpParams = this.addToHttpParamsRecursive(httpParams, value);
    } else {
      httpParams = this.addToHttpParamsRecursive(httpParams, value, key);
    }
    return httpParams;
  }
  addToHttpParamsRecursive(httpParams, value, key) {
    if (value == null) {
      return httpParams;
    }
    if (typeof value === "object") {
      if (Array.isArray(value)) {
        value.forEach((elem) => httpParams = this.addToHttpParamsRecursive(httpParams, elem, key));
      } else if (value instanceof Date) {
        if (key != null) {
          httpParams = httpParams.append(key, value.toISOString().substring(0, 10));
        } else {
          throw Error("key may not be null if value is Date");
        }
      } else {
        Object.keys(value).forEach((k) => httpParams = this.addToHttpParamsRecursive(httpParams, value[k], key != null ? `${key}.${k}` : k));
      }
    } else if (key != null) {
      httpParams = httpParams.append(key, value);
    } else {
      throw Error("key may not be null if value is not object or array");
    }
    return httpParams;
  }
  createFuelCard(request, observe = "body", reportProgress = false, options) {
    if (request === null || request === void 0) {
      throw new Error("Required parameter request was null or undefined when calling createFuelCard.");
    }
    let localVarHeaders = this.defaultHeaders;
    let localVarCredential;
    localVarCredential = this.configuration.lookupCredential("access_token");
    if (localVarCredential) {
      localVarHeaders = localVarHeaders.set("x-access-token", localVarCredential);
    }
    let localVarHttpHeaderAcceptSelected = options && options.httpHeaderAccept;
    if (localVarHttpHeaderAcceptSelected === void 0) {
      const httpHeaderAccepts = [
        "application/json"
      ];
      localVarHttpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
    }
    if (localVarHttpHeaderAcceptSelected !== void 0) {
      localVarHeaders = localVarHeaders.set("Accept", localVarHttpHeaderAcceptSelected);
    }
    let localVarHttpContext = options && options.context;
    if (localVarHttpContext === void 0) {
      localVarHttpContext = new HttpContext();
    }
    let localVarTransferCache = options && options.transferCache;
    if (localVarTransferCache === void 0) {
      localVarTransferCache = true;
    }
    const consumes = [
      "application/json"
    ];
    const httpContentTypeSelected = this.configuration.selectHeaderContentType(consumes);
    if (httpContentTypeSelected !== void 0) {
      localVarHeaders = localVarHeaders.set("Content-Type", httpContentTypeSelected);
    }
    let responseType_ = "json";
    if (localVarHttpHeaderAcceptSelected) {
      if (localVarHttpHeaderAcceptSelected.startsWith("text")) {
        responseType_ = "text";
      } else if (this.configuration.isJsonMime(localVarHttpHeaderAcceptSelected)) {
        responseType_ = "json";
      } else {
        responseType_ = "blob";
      }
    }
    let localVarPath = `/entities/fuelcards`;
    return this.httpClient.request("post", `${this.configuration.basePath}${localVarPath}`, {
      context: localVarHttpContext,
      body: request,
      responseType: responseType_,
      withCredentials: this.configuration.withCredentials,
      headers: localVarHeaders,
      observe,
      transferCache: localVarTransferCache,
      reportProgress
    });
  }
  getFuelCard(id, observe = "body", reportProgress = false, options) {
    if (id === null || id === void 0) {
      throw new Error("Required parameter id was null or undefined when calling getFuelCard.");
    }
    let localVarHeaders = this.defaultHeaders;
    let localVarCredential;
    localVarCredential = this.configuration.lookupCredential("access_token");
    if (localVarCredential) {
      localVarHeaders = localVarHeaders.set("x-access-token", localVarCredential);
    }
    let localVarHttpHeaderAcceptSelected = options && options.httpHeaderAccept;
    if (localVarHttpHeaderAcceptSelected === void 0) {
      const httpHeaderAccepts = [
        "application/json"
      ];
      localVarHttpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
    }
    if (localVarHttpHeaderAcceptSelected !== void 0) {
      localVarHeaders = localVarHeaders.set("Accept", localVarHttpHeaderAcceptSelected);
    }
    let localVarHttpContext = options && options.context;
    if (localVarHttpContext === void 0) {
      localVarHttpContext = new HttpContext();
    }
    let localVarTransferCache = options && options.transferCache;
    if (localVarTransferCache === void 0) {
      localVarTransferCache = true;
    }
    let responseType_ = "json";
    if (localVarHttpHeaderAcceptSelected) {
      if (localVarHttpHeaderAcceptSelected.startsWith("text")) {
        responseType_ = "text";
      } else if (this.configuration.isJsonMime(localVarHttpHeaderAcceptSelected)) {
        responseType_ = "json";
      } else {
        responseType_ = "blob";
      }
    }
    let localVarPath = `/entities/fuelcards/${this.configuration.encodeParam({ name: "id", value: id, in: "path", style: "simple", explode: false, dataType: "string", dataFormat: void 0 })}`;
    return this.httpClient.request("get", `${this.configuration.basePath}${localVarPath}`, {
      context: localVarHttpContext,
      responseType: responseType_,
      withCredentials: this.configuration.withCredentials,
      headers: localVarHeaders,
      observe,
      transferCache: localVarTransferCache,
      reportProgress
    });
  }
  listFuelCards(owner, offset, limit, sort, filter, observe = "body", reportProgress = false, options) {
    if (owner === null || owner === void 0) {
      throw new Error("Required parameter owner was null or undefined when calling listFuelCards.");
    }
    let localVarQueryParameters = new HttpParams({ encoder: this.encoder });
    if (owner !== void 0 && owner !== null) {
      localVarQueryParameters = this.addToHttpParams(localVarQueryParameters, owner, "owner");
    }
    if (offset !== void 0 && offset !== null) {
      localVarQueryParameters = this.addToHttpParams(localVarQueryParameters, offset, "offset");
    }
    if (limit !== void 0 && limit !== null) {
      localVarQueryParameters = this.addToHttpParams(localVarQueryParameters, limit, "limit");
    }
    if (sort !== void 0 && sort !== null) {
      localVarQueryParameters = this.addToHttpParams(localVarQueryParameters, sort, "sort");
    }
    if (filter !== void 0 && filter !== null) {
      localVarQueryParameters = this.addToHttpParams(localVarQueryParameters, filter, "filter");
    }
    let localVarHeaders = this.defaultHeaders;
    let localVarCredential;
    localVarCredential = this.configuration.lookupCredential("access_token");
    if (localVarCredential) {
      localVarHeaders = localVarHeaders.set("x-access-token", localVarCredential);
    }
    let localVarHttpHeaderAcceptSelected = options && options.httpHeaderAccept;
    if (localVarHttpHeaderAcceptSelected === void 0) {
      const httpHeaderAccepts = [
        "application/json"
      ];
      localVarHttpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
    }
    if (localVarHttpHeaderAcceptSelected !== void 0) {
      localVarHeaders = localVarHeaders.set("Accept", localVarHttpHeaderAcceptSelected);
    }
    let localVarHttpContext = options && options.context;
    if (localVarHttpContext === void 0) {
      localVarHttpContext = new HttpContext();
    }
    let localVarTransferCache = options && options.transferCache;
    if (localVarTransferCache === void 0) {
      localVarTransferCache = true;
    }
    let responseType_ = "json";
    if (localVarHttpHeaderAcceptSelected) {
      if (localVarHttpHeaderAcceptSelected.startsWith("text")) {
        responseType_ = "text";
      } else if (this.configuration.isJsonMime(localVarHttpHeaderAcceptSelected)) {
        responseType_ = "json";
      } else {
        responseType_ = "blob";
      }
    }
    let localVarPath = `/entities/fuelcards`;
    return this.httpClient.request("get", `${this.configuration.basePath}${localVarPath}`, {
      context: localVarHttpContext,
      params: localVarQueryParameters,
      responseType: responseType_,
      withCredentials: this.configuration.withCredentials,
      headers: localVarHeaders,
      observe,
      transferCache: localVarTransferCache,
      reportProgress
    });
  }
  updateFuelCard(id, request, observe = "body", reportProgress = false, options) {
    if (id === null || id === void 0) {
      throw new Error("Required parameter id was null or undefined when calling updateFuelCard.");
    }
    if (request === null || request === void 0) {
      throw new Error("Required parameter request was null or undefined when calling updateFuelCard.");
    }
    let localVarHeaders = this.defaultHeaders;
    let localVarCredential;
    localVarCredential = this.configuration.lookupCredential("access_token");
    if (localVarCredential) {
      localVarHeaders = localVarHeaders.set("x-access-token", localVarCredential);
    }
    let localVarHttpHeaderAcceptSelected = options && options.httpHeaderAccept;
    if (localVarHttpHeaderAcceptSelected === void 0) {
      const httpHeaderAccepts = [
        "application/json"
      ];
      localVarHttpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
    }
    if (localVarHttpHeaderAcceptSelected !== void 0) {
      localVarHeaders = localVarHeaders.set("Accept", localVarHttpHeaderAcceptSelected);
    }
    let localVarHttpContext = options && options.context;
    if (localVarHttpContext === void 0) {
      localVarHttpContext = new HttpContext();
    }
    let localVarTransferCache = options && options.transferCache;
    if (localVarTransferCache === void 0) {
      localVarTransferCache = true;
    }
    const consumes = [
      "application/json"
    ];
    const httpContentTypeSelected = this.configuration.selectHeaderContentType(consumes);
    if (httpContentTypeSelected !== void 0) {
      localVarHeaders = localVarHeaders.set("Content-Type", httpContentTypeSelected);
    }
    let responseType_ = "json";
    if (localVarHttpHeaderAcceptSelected) {
      if (localVarHttpHeaderAcceptSelected.startsWith("text")) {
        responseType_ = "text";
      } else if (this.configuration.isJsonMime(localVarHttpHeaderAcceptSelected)) {
        responseType_ = "json";
      } else {
        responseType_ = "blob";
      }
    }
    let localVarPath = `/entities/fuelcards/${this.configuration.encodeParam({ name: "id", value: id, in: "path", style: "simple", explode: false, dataType: "string", dataFormat: void 0 })}`;
    return this.httpClient.request("put", `${this.configuration.basePath}${localVarPath}`, {
      context: localVarHttpContext,
      body: request,
      responseType: responseType_,
      withCredentials: this.configuration.withCredentials,
      headers: localVarHeaders,
      observe,
      transferCache: localVarTransferCache,
      reportProgress
    });
  }
  static \u0275fac = function FuelCardsService_Factory(__ngFactoryType__) {
    return new (__ngFactoryType__ || _FuelCardsService)(\u0275\u0275inject(HttpClient), \u0275\u0275inject(BASE_PATH, 8), \u0275\u0275inject(Configuration, 8));
  };
  static \u0275prov = /* @__PURE__ */ \u0275\u0275defineInjectable({ token: _FuelCardsService, factory: _FuelCardsService.\u0275fac, providedIn: "root" });
};
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(FuelCardsService, [{
    type: Injectable,
    args: [{
      providedIn: "root"
    }]
  }], () => [{ type: HttpClient }, { type: void 0, decorators: [{
    type: Optional
  }, {
    type: Inject,
    args: [BASE_PATH]
  }] }, { type: Configuration, decorators: [{
    type: Optional
  }] }], null);
})();

// src/app/api/api/geoLockProfiles.service.ts
var GeoLockProfilesService = class _GeoLockProfilesService {
  httpClient;
  basePath = "";
  defaultHeaders = new HttpHeaders();
  configuration = new Configuration();
  encoder;
  constructor(httpClient, basePath, configuration) {
    this.httpClient = httpClient;
    if (configuration) {
      this.configuration = configuration;
    }
    if (typeof this.configuration.basePath !== "string") {
      const firstBasePath = Array.isArray(basePath) ? basePath[0] : void 0;
      if (firstBasePath != void 0) {
        basePath = firstBasePath;
      }
      if (typeof basePath !== "string") {
        basePath = this.basePath;
      }
      this.configuration.basePath = basePath;
    }
    this.encoder = this.configuration.encoder || new CustomHttpParameterCodec();
  }
  // @ts-ignore
  addToHttpParams(httpParams, value, key) {
    if (typeof value === "object" && value instanceof Date === false) {
      httpParams = this.addToHttpParamsRecursive(httpParams, value);
    } else {
      httpParams = this.addToHttpParamsRecursive(httpParams, value, key);
    }
    return httpParams;
  }
  addToHttpParamsRecursive(httpParams, value, key) {
    if (value == null) {
      return httpParams;
    }
    if (typeof value === "object") {
      if (Array.isArray(value)) {
        value.forEach((elem) => httpParams = this.addToHttpParamsRecursive(httpParams, elem, key));
      } else if (value instanceof Date) {
        if (key != null) {
          httpParams = httpParams.append(key, value.toISOString().substring(0, 10));
        } else {
          throw Error("key may not be null if value is Date");
        }
      } else {
        Object.keys(value).forEach((k) => httpParams = this.addToHttpParamsRecursive(httpParams, value[k], key != null ? `${key}.${k}` : k));
      }
    } else if (key != null) {
      httpParams = httpParams.append(key, value);
    } else {
      throw Error("key may not be null if value is not object or array");
    }
    return httpParams;
  }
  createGeoLockProfile(request, observe = "body", reportProgress = false, options) {
    if (request === null || request === void 0) {
      throw new Error("Required parameter request was null or undefined when calling createGeoLockProfile.");
    }
    let localVarHeaders = this.defaultHeaders;
    let localVarCredential;
    localVarCredential = this.configuration.lookupCredential("access_token");
    if (localVarCredential) {
      localVarHeaders = localVarHeaders.set("x-access-token", localVarCredential);
    }
    let localVarHttpHeaderAcceptSelected = options && options.httpHeaderAccept;
    if (localVarHttpHeaderAcceptSelected === void 0) {
      const httpHeaderAccepts = [
        "application/json"
      ];
      localVarHttpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
    }
    if (localVarHttpHeaderAcceptSelected !== void 0) {
      localVarHeaders = localVarHeaders.set("Accept", localVarHttpHeaderAcceptSelected);
    }
    let localVarHttpContext = options && options.context;
    if (localVarHttpContext === void 0) {
      localVarHttpContext = new HttpContext();
    }
    let localVarTransferCache = options && options.transferCache;
    if (localVarTransferCache === void 0) {
      localVarTransferCache = true;
    }
    const consumes = [
      "application/json"
    ];
    const httpContentTypeSelected = this.configuration.selectHeaderContentType(consumes);
    if (httpContentTypeSelected !== void 0) {
      localVarHeaders = localVarHeaders.set("Content-Type", httpContentTypeSelected);
    }
    let responseType_ = "json";
    if (localVarHttpHeaderAcceptSelected) {
      if (localVarHttpHeaderAcceptSelected.startsWith("text")) {
        responseType_ = "text";
      } else if (this.configuration.isJsonMime(localVarHttpHeaderAcceptSelected)) {
        responseType_ = "json";
      } else {
        responseType_ = "blob";
      }
    }
    let localVarPath = `/entities/geolockprofiles`;
    return this.httpClient.request("post", `${this.configuration.basePath}${localVarPath}`, {
      context: localVarHttpContext,
      body: request,
      responseType: responseType_,
      withCredentials: this.configuration.withCredentials,
      headers: localVarHeaders,
      observe,
      transferCache: localVarTransferCache,
      reportProgress
    });
  }
  getGeoLockProfile(id, observe = "body", reportProgress = false, options) {
    if (id === null || id === void 0) {
      throw new Error("Required parameter id was null or undefined when calling getGeoLockProfile.");
    }
    let localVarHeaders = this.defaultHeaders;
    let localVarCredential;
    localVarCredential = this.configuration.lookupCredential("access_token");
    if (localVarCredential) {
      localVarHeaders = localVarHeaders.set("x-access-token", localVarCredential);
    }
    let localVarHttpHeaderAcceptSelected = options && options.httpHeaderAccept;
    if (localVarHttpHeaderAcceptSelected === void 0) {
      const httpHeaderAccepts = [
        "application/json"
      ];
      localVarHttpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
    }
    if (localVarHttpHeaderAcceptSelected !== void 0) {
      localVarHeaders = localVarHeaders.set("Accept", localVarHttpHeaderAcceptSelected);
    }
    let localVarHttpContext = options && options.context;
    if (localVarHttpContext === void 0) {
      localVarHttpContext = new HttpContext();
    }
    let localVarTransferCache = options && options.transferCache;
    if (localVarTransferCache === void 0) {
      localVarTransferCache = true;
    }
    let responseType_ = "json";
    if (localVarHttpHeaderAcceptSelected) {
      if (localVarHttpHeaderAcceptSelected.startsWith("text")) {
        responseType_ = "text";
      } else if (this.configuration.isJsonMime(localVarHttpHeaderAcceptSelected)) {
        responseType_ = "json";
      } else {
        responseType_ = "blob";
      }
    }
    let localVarPath = `/entities/geolockprofiles/${this.configuration.encodeParam({ name: "id", value: id, in: "path", style: "simple", explode: false, dataType: "string", dataFormat: void 0 })}`;
    return this.httpClient.request("get", `${this.configuration.basePath}${localVarPath}`, {
      context: localVarHttpContext,
      responseType: responseType_,
      withCredentials: this.configuration.withCredentials,
      headers: localVarHeaders,
      observe,
      transferCache: localVarTransferCache,
      reportProgress
    });
  }
  listGeoLockProfiles(owner, recurse, offset, limit, sort, filter, observe = "body", reportProgress = false, options) {
    if (owner === null || owner === void 0) {
      throw new Error("Required parameter owner was null or undefined when calling listGeoLockProfiles.");
    }
    let localVarQueryParameters = new HttpParams({ encoder: this.encoder });
    if (owner !== void 0 && owner !== null) {
      localVarQueryParameters = this.addToHttpParams(localVarQueryParameters, owner, "owner");
    }
    if (recurse !== void 0 && recurse !== null) {
      localVarQueryParameters = this.addToHttpParams(localVarQueryParameters, recurse, "recurse");
    }
    if (offset !== void 0 && offset !== null) {
      localVarQueryParameters = this.addToHttpParams(localVarQueryParameters, offset, "offset");
    }
    if (limit !== void 0 && limit !== null) {
      localVarQueryParameters = this.addToHttpParams(localVarQueryParameters, limit, "limit");
    }
    if (sort !== void 0 && sort !== null) {
      localVarQueryParameters = this.addToHttpParams(localVarQueryParameters, sort, "sort");
    }
    if (filter !== void 0 && filter !== null) {
      localVarQueryParameters = this.addToHttpParams(localVarQueryParameters, filter, "filter");
    }
    let localVarHeaders = this.defaultHeaders;
    let localVarCredential;
    localVarCredential = this.configuration.lookupCredential("access_token");
    if (localVarCredential) {
      localVarHeaders = localVarHeaders.set("x-access-token", localVarCredential);
    }
    let localVarHttpHeaderAcceptSelected = options && options.httpHeaderAccept;
    if (localVarHttpHeaderAcceptSelected === void 0) {
      const httpHeaderAccepts = [
        "application/json"
      ];
      localVarHttpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
    }
    if (localVarHttpHeaderAcceptSelected !== void 0) {
      localVarHeaders = localVarHeaders.set("Accept", localVarHttpHeaderAcceptSelected);
    }
    let localVarHttpContext = options && options.context;
    if (localVarHttpContext === void 0) {
      localVarHttpContext = new HttpContext();
    }
    let localVarTransferCache = options && options.transferCache;
    if (localVarTransferCache === void 0) {
      localVarTransferCache = true;
    }
    let responseType_ = "json";
    if (localVarHttpHeaderAcceptSelected) {
      if (localVarHttpHeaderAcceptSelected.startsWith("text")) {
        responseType_ = "text";
      } else if (this.configuration.isJsonMime(localVarHttpHeaderAcceptSelected)) {
        responseType_ = "json";
      } else {
        responseType_ = "blob";
      }
    }
    let localVarPath = `/entities/geolockprofiles`;
    return this.httpClient.request("get", `${this.configuration.basePath}${localVarPath}`, {
      context: localVarHttpContext,
      params: localVarQueryParameters,
      responseType: responseType_,
      withCredentials: this.configuration.withCredentials,
      headers: localVarHeaders,
      observe,
      transferCache: localVarTransferCache,
      reportProgress
    });
  }
  updateGeoLockProfile(id, request, observe = "body", reportProgress = false, options) {
    if (id === null || id === void 0) {
      throw new Error("Required parameter id was null or undefined when calling updateGeoLockProfile.");
    }
    if (request === null || request === void 0) {
      throw new Error("Required parameter request was null or undefined when calling updateGeoLockProfile.");
    }
    let localVarHeaders = this.defaultHeaders;
    let localVarCredential;
    localVarCredential = this.configuration.lookupCredential("access_token");
    if (localVarCredential) {
      localVarHeaders = localVarHeaders.set("x-access-token", localVarCredential);
    }
    let localVarHttpHeaderAcceptSelected = options && options.httpHeaderAccept;
    if (localVarHttpHeaderAcceptSelected === void 0) {
      const httpHeaderAccepts = [
        "application/json"
      ];
      localVarHttpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
    }
    if (localVarHttpHeaderAcceptSelected !== void 0) {
      localVarHeaders = localVarHeaders.set("Accept", localVarHttpHeaderAcceptSelected);
    }
    let localVarHttpContext = options && options.context;
    if (localVarHttpContext === void 0) {
      localVarHttpContext = new HttpContext();
    }
    let localVarTransferCache = options && options.transferCache;
    if (localVarTransferCache === void 0) {
      localVarTransferCache = true;
    }
    const consumes = [
      "application/json"
    ];
    const httpContentTypeSelected = this.configuration.selectHeaderContentType(consumes);
    if (httpContentTypeSelected !== void 0) {
      localVarHeaders = localVarHeaders.set("Content-Type", httpContentTypeSelected);
    }
    let responseType_ = "json";
    if (localVarHttpHeaderAcceptSelected) {
      if (localVarHttpHeaderAcceptSelected.startsWith("text")) {
        responseType_ = "text";
      } else if (this.configuration.isJsonMime(localVarHttpHeaderAcceptSelected)) {
        responseType_ = "json";
      } else {
        responseType_ = "blob";
      }
    }
    let localVarPath = `/entities/geolockprofiles/${this.configuration.encodeParam({ name: "id", value: id, in: "path", style: "simple", explode: false, dataType: "string", dataFormat: void 0 })}`;
    return this.httpClient.request("put", `${this.configuration.basePath}${localVarPath}`, {
      context: localVarHttpContext,
      body: request,
      responseType: responseType_,
      withCredentials: this.configuration.withCredentials,
      headers: localVarHeaders,
      observe,
      transferCache: localVarTransferCache,
      reportProgress
    });
  }
  static \u0275fac = function GeoLockProfilesService_Factory(__ngFactoryType__) {
    return new (__ngFactoryType__ || _GeoLockProfilesService)(\u0275\u0275inject(HttpClient), \u0275\u0275inject(BASE_PATH, 8), \u0275\u0275inject(Configuration, 8));
  };
  static \u0275prov = /* @__PURE__ */ \u0275\u0275defineInjectable({ token: _GeoLockProfilesService, factory: _GeoLockProfilesService.\u0275fac, providedIn: "root" });
};
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(GeoLockProfilesService, [{
    type: Injectable,
    args: [{
      providedIn: "root"
    }]
  }], () => [{ type: HttpClient }, { type: void 0, decorators: [{
    type: Optional
  }, {
    type: Inject,
    args: [BASE_PATH]
  }] }, { type: Configuration, decorators: [{
    type: Optional
  }] }], null);
})();

// src/app/api/api/health.service.ts
var HealthService = class _HealthService {
  httpClient;
  basePath = "";
  defaultHeaders = new HttpHeaders();
  configuration = new Configuration();
  encoder;
  constructor(httpClient, basePath, configuration) {
    this.httpClient = httpClient;
    if (configuration) {
      this.configuration = configuration;
    }
    if (typeof this.configuration.basePath !== "string") {
      const firstBasePath = Array.isArray(basePath) ? basePath[0] : void 0;
      if (firstBasePath != void 0) {
        basePath = firstBasePath;
      }
      if (typeof basePath !== "string") {
        basePath = this.basePath;
      }
      this.configuration.basePath = basePath;
    }
    this.encoder = this.configuration.encoder || new CustomHttpParameterCodec();
  }
  // @ts-ignore
  addToHttpParams(httpParams, value, key) {
    if (typeof value === "object" && value instanceof Date === false) {
      httpParams = this.addToHttpParamsRecursive(httpParams, value);
    } else {
      httpParams = this.addToHttpParamsRecursive(httpParams, value, key);
    }
    return httpParams;
  }
  addToHttpParamsRecursive(httpParams, value, key) {
    if (value == null) {
      return httpParams;
    }
    if (typeof value === "object") {
      if (Array.isArray(value)) {
        value.forEach((elem) => httpParams = this.addToHttpParamsRecursive(httpParams, elem, key));
      } else if (value instanceof Date) {
        if (key != null) {
          httpParams = httpParams.append(key, value.toISOString().substring(0, 10));
        } else {
          throw Error("key may not be null if value is Date");
        }
      } else {
        Object.keys(value).forEach((k) => httpParams = this.addToHttpParamsRecursive(httpParams, value[k], key != null ? `${key}.${k}` : k));
      }
    } else if (key != null) {
      httpParams = httpParams.append(key, value);
    } else {
      throw Error("key may not be null if value is not object or array");
    }
    return httpParams;
  }
  getIssue(id, observe = "body", reportProgress = false, options) {
    if (id === null || id === void 0) {
      throw new Error("Required parameter id was null or undefined when calling getIssue.");
    }
    let localVarHeaders = this.defaultHeaders;
    let localVarCredential;
    localVarCredential = this.configuration.lookupCredential("access_token");
    if (localVarCredential) {
      localVarHeaders = localVarHeaders.set("x-access-token", localVarCredential);
    }
    let localVarHttpHeaderAcceptSelected = options && options.httpHeaderAccept;
    if (localVarHttpHeaderAcceptSelected === void 0) {
      const httpHeaderAccepts = [
        "application/json"
      ];
      localVarHttpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
    }
    if (localVarHttpHeaderAcceptSelected !== void 0) {
      localVarHeaders = localVarHeaders.set("Accept", localVarHttpHeaderAcceptSelected);
    }
    let localVarHttpContext = options && options.context;
    if (localVarHttpContext === void 0) {
      localVarHttpContext = new HttpContext();
    }
    let localVarTransferCache = options && options.transferCache;
    if (localVarTransferCache === void 0) {
      localVarTransferCache = true;
    }
    let responseType_ = "json";
    if (localVarHttpHeaderAcceptSelected) {
      if (localVarHttpHeaderAcceptSelected.startsWith("text")) {
        responseType_ = "text";
      } else if (this.configuration.isJsonMime(localVarHttpHeaderAcceptSelected)) {
        responseType_ = "json";
      } else {
        responseType_ = "blob";
      }
    }
    let localVarPath = `/health/issues/${this.configuration.encodeParam({ name: "id", value: id, in: "path", style: "simple", explode: false, dataType: "string", dataFormat: void 0 })}`;
    return this.httpClient.request("get", `${this.configuration.basePath}${localVarPath}`, {
      context: localVarHttpContext,
      responseType: responseType_,
      withCredentials: this.configuration.withCredentials,
      headers: localVarHeaders,
      observe,
      transferCache: localVarTransferCache,
      reportProgress
    });
  }
  listIssues(owner, targetId, resolved, offset, limit, observe = "body", reportProgress = false, options) {
    let localVarQueryParameters = new HttpParams({ encoder: this.encoder });
    if (owner !== void 0 && owner !== null) {
      localVarQueryParameters = this.addToHttpParams(localVarQueryParameters, owner, "owner");
    }
    if (targetId !== void 0 && targetId !== null) {
      localVarQueryParameters = this.addToHttpParams(localVarQueryParameters, targetId, "targetId");
    }
    if (resolved !== void 0 && resolved !== null) {
      localVarQueryParameters = this.addToHttpParams(localVarQueryParameters, resolved, "resolved");
    }
    if (offset !== void 0 && offset !== null) {
      localVarQueryParameters = this.addToHttpParams(localVarQueryParameters, offset, "offset");
    }
    if (limit !== void 0 && limit !== null) {
      localVarQueryParameters = this.addToHttpParams(localVarQueryParameters, limit, "limit");
    }
    let localVarHeaders = this.defaultHeaders;
    let localVarCredential;
    localVarCredential = this.configuration.lookupCredential("access_token");
    if (localVarCredential) {
      localVarHeaders = localVarHeaders.set("x-access-token", localVarCredential);
    }
    let localVarHttpHeaderAcceptSelected = options && options.httpHeaderAccept;
    if (localVarHttpHeaderAcceptSelected === void 0) {
      const httpHeaderAccepts = [
        "application/json"
      ];
      localVarHttpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
    }
    if (localVarHttpHeaderAcceptSelected !== void 0) {
      localVarHeaders = localVarHeaders.set("Accept", localVarHttpHeaderAcceptSelected);
    }
    let localVarHttpContext = options && options.context;
    if (localVarHttpContext === void 0) {
      localVarHttpContext = new HttpContext();
    }
    let localVarTransferCache = options && options.transferCache;
    if (localVarTransferCache === void 0) {
      localVarTransferCache = true;
    }
    let responseType_ = "json";
    if (localVarHttpHeaderAcceptSelected) {
      if (localVarHttpHeaderAcceptSelected.startsWith("text")) {
        responseType_ = "text";
      } else if (this.configuration.isJsonMime(localVarHttpHeaderAcceptSelected)) {
        responseType_ = "json";
      } else {
        responseType_ = "blob";
      }
    }
    let localVarPath = `/health/issues`;
    return this.httpClient.request("get", `${this.configuration.basePath}${localVarPath}`, {
      context: localVarHttpContext,
      params: localVarQueryParameters,
      responseType: responseType_,
      withCredentials: this.configuration.withCredentials,
      headers: localVarHeaders,
      observe,
      transferCache: localVarTransferCache,
      reportProgress
    });
  }
  updateIssue(id, request, observe = "body", reportProgress = false, options) {
    if (id === null || id === void 0) {
      throw new Error("Required parameter id was null or undefined when calling updateIssue.");
    }
    if (request === null || request === void 0) {
      throw new Error("Required parameter request was null or undefined when calling updateIssue.");
    }
    let localVarHeaders = this.defaultHeaders;
    let localVarCredential;
    localVarCredential = this.configuration.lookupCredential("access_token");
    if (localVarCredential) {
      localVarHeaders = localVarHeaders.set("x-access-token", localVarCredential);
    }
    let localVarHttpHeaderAcceptSelected = options && options.httpHeaderAccept;
    if (localVarHttpHeaderAcceptSelected === void 0) {
      const httpHeaderAccepts = [
        "application/json"
      ];
      localVarHttpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
    }
    if (localVarHttpHeaderAcceptSelected !== void 0) {
      localVarHeaders = localVarHeaders.set("Accept", localVarHttpHeaderAcceptSelected);
    }
    let localVarHttpContext = options && options.context;
    if (localVarHttpContext === void 0) {
      localVarHttpContext = new HttpContext();
    }
    let localVarTransferCache = options && options.transferCache;
    if (localVarTransferCache === void 0) {
      localVarTransferCache = true;
    }
    const consumes = [
      "application/json"
    ];
    const httpContentTypeSelected = this.configuration.selectHeaderContentType(consumes);
    if (httpContentTypeSelected !== void 0) {
      localVarHeaders = localVarHeaders.set("Content-Type", httpContentTypeSelected);
    }
    let responseType_ = "json";
    if (localVarHttpHeaderAcceptSelected) {
      if (localVarHttpHeaderAcceptSelected.startsWith("text")) {
        responseType_ = "text";
      } else if (this.configuration.isJsonMime(localVarHttpHeaderAcceptSelected)) {
        responseType_ = "json";
      } else {
        responseType_ = "blob";
      }
    }
    let localVarPath = `/health/issues/${this.configuration.encodeParam({ name: "id", value: id, in: "path", style: "simple", explode: false, dataType: "string", dataFormat: void 0 })}`;
    return this.httpClient.request("put", `${this.configuration.basePath}${localVarPath}`, {
      context: localVarHttpContext,
      body: request,
      responseType: responseType_,
      withCredentials: this.configuration.withCredentials,
      headers: localVarHeaders,
      observe,
      transferCache: localVarTransferCache,
      reportProgress
    });
  }
  static \u0275fac = function HealthService_Factory(__ngFactoryType__) {
    return new (__ngFactoryType__ || _HealthService)(\u0275\u0275inject(HttpClient), \u0275\u0275inject(BASE_PATH, 8), \u0275\u0275inject(Configuration, 8));
  };
  static \u0275prov = /* @__PURE__ */ \u0275\u0275defineInjectable({ token: _HealthService, factory: _HealthService.\u0275fac, providedIn: "root" });
};
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(HealthService, [{
    type: Injectable,
    args: [{
      providedIn: "root"
    }]
  }], () => [{ type: HttpClient }, { type: void 0, decorators: [{
    type: Optional
  }, {
    type: Inject,
    args: [BASE_PATH]
  }] }, { type: Configuration, decorators: [{
    type: Optional
  }] }], null);
})();

// src/app/api/api/history.service.ts
var HistoryService = class _HistoryService {
  httpClient;
  basePath = "";
  defaultHeaders = new HttpHeaders();
  configuration = new Configuration();
  encoder;
  constructor(httpClient, basePath, configuration) {
    this.httpClient = httpClient;
    if (configuration) {
      this.configuration = configuration;
    }
    if (typeof this.configuration.basePath !== "string") {
      const firstBasePath = Array.isArray(basePath) ? basePath[0] : void 0;
      if (firstBasePath != void 0) {
        basePath = firstBasePath;
      }
      if (typeof basePath !== "string") {
        basePath = this.basePath;
      }
      this.configuration.basePath = basePath;
    }
    this.encoder = this.configuration.encoder || new CustomHttpParameterCodec();
  }
  // @ts-ignore
  addToHttpParams(httpParams, value, key) {
    if (typeof value === "object" && value instanceof Date === false) {
      httpParams = this.addToHttpParamsRecursive(httpParams, value);
    } else {
      httpParams = this.addToHttpParamsRecursive(httpParams, value, key);
    }
    return httpParams;
  }
  addToHttpParamsRecursive(httpParams, value, key) {
    if (value == null) {
      return httpParams;
    }
    if (typeof value === "object") {
      if (Array.isArray(value)) {
        value.forEach((elem) => httpParams = this.addToHttpParamsRecursive(httpParams, elem, key));
      } else if (value instanceof Date) {
        if (key != null) {
          httpParams = httpParams.append(key, value.toISOString().substring(0, 10));
        } else {
          throw Error("key may not be null if value is Date");
        }
      } else {
        Object.keys(value).forEach((k) => httpParams = this.addToHttpParamsRecursive(httpParams, value[k], key != null ? `${key}.${k}` : k));
      }
    } else if (key != null) {
      httpParams = httpParams.append(key, value);
    } else {
      throw Error("key may not be null if value is not object or array");
    }
    return httpParams;
  }
  addTripLabels(asset, date, request, observe = "body", reportProgress = false, options) {
    if (asset === null || asset === void 0) {
      throw new Error("Required parameter asset was null or undefined when calling addTripLabels.");
    }
    if (date === null || date === void 0) {
      throw new Error("Required parameter date was null or undefined when calling addTripLabels.");
    }
    if (request === null || request === void 0) {
      throw new Error("Required parameter request was null or undefined when calling addTripLabels.");
    }
    let localVarHeaders = this.defaultHeaders;
    let localVarCredential;
    localVarCredential = this.configuration.lookupCredential("access_token");
    if (localVarCredential) {
      localVarHeaders = localVarHeaders.set("x-access-token", localVarCredential);
    }
    let localVarHttpHeaderAcceptSelected = options && options.httpHeaderAccept;
    if (localVarHttpHeaderAcceptSelected === void 0) {
      const httpHeaderAccepts = [
        "application/json"
      ];
      localVarHttpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
    }
    if (localVarHttpHeaderAcceptSelected !== void 0) {
      localVarHeaders = localVarHeaders.set("Accept", localVarHttpHeaderAcceptSelected);
    }
    let localVarHttpContext = options && options.context;
    if (localVarHttpContext === void 0) {
      localVarHttpContext = new HttpContext();
    }
    let localVarTransferCache = options && options.transferCache;
    if (localVarTransferCache === void 0) {
      localVarTransferCache = true;
    }
    const consumes = [
      "application/json"
    ];
    const httpContentTypeSelected = this.configuration.selectHeaderContentType(consumes);
    if (httpContentTypeSelected !== void 0) {
      localVarHeaders = localVarHeaders.set("Content-Type", httpContentTypeSelected);
    }
    let responseType_ = "json";
    if (localVarHttpHeaderAcceptSelected) {
      if (localVarHttpHeaderAcceptSelected.startsWith("text")) {
        responseType_ = "text";
      } else if (this.configuration.isJsonMime(localVarHttpHeaderAcceptSelected)) {
        responseType_ = "json";
      } else {
        responseType_ = "blob";
      }
    }
    let localVarPath = `/data/history/trips/${this.configuration.encodeParam({ name: "asset", value: asset, in: "path", style: "simple", explode: false, dataType: "string", dataFormat: void 0 })}/${this.configuration.encodeParam({ name: "date", value: date, in: "path", style: "simple", explode: false, dataType: "string", dataFormat: void 0 })}/labels`;
    return this.httpClient.request("post", `${this.configuration.basePath}${localVarPath}`, {
      context: localVarHttpContext,
      body: request,
      responseType: responseType_,
      withCredentials: this.configuration.withCredentials,
      headers: localVarHeaders,
      observe,
      transferCache: localVarTransferCache,
      reportProgress
    });
  }
  getAlertHistory(id, start, end, limit, observe = "body", reportProgress = false, options) {
    if (id === null || id === void 0) {
      throw new Error("Required parameter id was null or undefined when calling getAlertHistory.");
    }
    if (start === null || start === void 0) {
      throw new Error("Required parameter start was null or undefined when calling getAlertHistory.");
    }
    if (end === null || end === void 0) {
      throw new Error("Required parameter end was null or undefined when calling getAlertHistory.");
    }
    let localVarQueryParameters = new HttpParams({ encoder: this.encoder });
    if (start !== void 0 && start !== null) {
      localVarQueryParameters = this.addToHttpParams(localVarQueryParameters, start, "start");
    }
    if (end !== void 0 && end !== null) {
      localVarQueryParameters = this.addToHttpParams(localVarQueryParameters, end, "end");
    }
    if (limit !== void 0 && limit !== null) {
      localVarQueryParameters = this.addToHttpParams(localVarQueryParameters, limit, "limit");
    }
    let localVarHeaders = this.defaultHeaders;
    let localVarCredential;
    localVarCredential = this.configuration.lookupCredential("access_token");
    if (localVarCredential) {
      localVarHeaders = localVarHeaders.set("x-access-token", localVarCredential);
    }
    let localVarHttpHeaderAcceptSelected = options && options.httpHeaderAccept;
    if (localVarHttpHeaderAcceptSelected === void 0) {
      const httpHeaderAccepts = [
        "application/json"
      ];
      localVarHttpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
    }
    if (localVarHttpHeaderAcceptSelected !== void 0) {
      localVarHeaders = localVarHeaders.set("Accept", localVarHttpHeaderAcceptSelected);
    }
    let localVarHttpContext = options && options.context;
    if (localVarHttpContext === void 0) {
      localVarHttpContext = new HttpContext();
    }
    let localVarTransferCache = options && options.transferCache;
    if (localVarTransferCache === void 0) {
      localVarTransferCache = true;
    }
    let responseType_ = "json";
    if (localVarHttpHeaderAcceptSelected) {
      if (localVarHttpHeaderAcceptSelected.startsWith("text")) {
        responseType_ = "text";
      } else if (this.configuration.isJsonMime(localVarHttpHeaderAcceptSelected)) {
        responseType_ = "json";
      } else {
        responseType_ = "blob";
      }
    }
    let localVarPath = `/data/history/alerts/${this.configuration.encodeParam({ name: "id", value: id, in: "path", style: "simple", explode: false, dataType: "string", dataFormat: void 0 })}`;
    return this.httpClient.request("get", `${this.configuration.basePath}${localVarPath}`, {
      context: localVarHttpContext,
      params: localVarQueryParameters,
      responseType: responseType_,
      withCredentials: this.configuration.withCredentials,
      headers: localVarHeaders,
      observe,
      transferCache: localVarTransferCache,
      reportProgress
    });
  }
  getCompletedReport(id, observe = "body", reportProgress = false, options) {
    if (id === null || id === void 0) {
      throw new Error("Required parameter id was null or undefined when calling getCompletedReport.");
    }
    let localVarHeaders = this.defaultHeaders;
    let localVarCredential;
    localVarCredential = this.configuration.lookupCredential("access_token");
    if (localVarCredential) {
      localVarHeaders = localVarHeaders.set("x-access-token", localVarCredential);
    }
    let localVarHttpHeaderAcceptSelected = options && options.httpHeaderAccept;
    if (localVarHttpHeaderAcceptSelected === void 0) {
      const httpHeaderAccepts = [
        "application/json"
      ];
      localVarHttpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
    }
    if (localVarHttpHeaderAcceptSelected !== void 0) {
      localVarHeaders = localVarHeaders.set("Accept", localVarHttpHeaderAcceptSelected);
    }
    let localVarHttpContext = options && options.context;
    if (localVarHttpContext === void 0) {
      localVarHttpContext = new HttpContext();
    }
    let localVarTransferCache = options && options.transferCache;
    if (localVarTransferCache === void 0) {
      localVarTransferCache = true;
    }
    let responseType_ = "json";
    if (localVarHttpHeaderAcceptSelected) {
      if (localVarHttpHeaderAcceptSelected.startsWith("text")) {
        responseType_ = "text";
      } else if (this.configuration.isJsonMime(localVarHttpHeaderAcceptSelected)) {
        responseType_ = "json";
      } else {
        responseType_ = "blob";
      }
    }
    let localVarPath = `/reports/history/${this.configuration.encodeParam({ name: "id", value: id, in: "path", style: "simple", explode: false, dataType: "string", dataFormat: void 0 })}`;
    return this.httpClient.request("get", `${this.configuration.basePath}${localVarPath}`, {
      context: localVarHttpContext,
      responseType: responseType_,
      withCredentials: this.configuration.withCredentials,
      headers: localVarHeaders,
      observe,
      transferCache: localVarTransferCache,
      reportProgress
    });
  }
  getCompletedReportData(id, filename, observe = "body", reportProgress = false, options) {
    if (id === null || id === void 0) {
      throw new Error("Required parameter id was null or undefined when calling getCompletedReportData.");
    }
    if (filename === null || filename === void 0) {
      throw new Error("Required parameter filename was null or undefined when calling getCompletedReportData.");
    }
    let localVarHeaders = this.defaultHeaders;
    let localVarHttpHeaderAcceptSelected = options && options.httpHeaderAccept;
    if (localVarHttpHeaderAcceptSelected === void 0) {
      const httpHeaderAccepts = [
        "application/json"
      ];
      localVarHttpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
    }
    if (localVarHttpHeaderAcceptSelected !== void 0) {
      localVarHeaders = localVarHeaders.set("Accept", localVarHttpHeaderAcceptSelected);
    }
    let localVarHttpContext = options && options.context;
    if (localVarHttpContext === void 0) {
      localVarHttpContext = new HttpContext();
    }
    let localVarTransferCache = options && options.transferCache;
    if (localVarTransferCache === void 0) {
      localVarTransferCache = true;
    }
    let responseType_ = "json";
    if (localVarHttpHeaderAcceptSelected) {
      if (localVarHttpHeaderAcceptSelected.startsWith("text")) {
        responseType_ = "text";
      } else if (this.configuration.isJsonMime(localVarHttpHeaderAcceptSelected)) {
        responseType_ = "json";
      } else {
        responseType_ = "blob";
      }
    }
    let localVarPath = `/reports/history/${this.configuration.encodeParam({ name: "id", value: id, in: "path", style: "simple", explode: false, dataType: "string", dataFormat: void 0 })}/${this.configuration.encodeParam({ name: "filename", value: filename, in: "path", style: "simple", explode: false, dataType: "string", dataFormat: void 0 })}`;
    return this.httpClient.request("get", `${this.configuration.basePath}${localVarPath}`, {
      context: localVarHttpContext,
      responseType: responseType_,
      withCredentials: this.configuration.withCredentials,
      headers: localVarHeaders,
      observe,
      transferCache: localVarTransferCache,
      reportProgress
    });
  }
  getCompletedReportDataStream(id, filename, outputFormat, observe = "body", reportProgress = false, options) {
    if (id === null || id === void 0) {
      throw new Error("Required parameter id was null or undefined when calling getCompletedReportDataStream.");
    }
    if (filename === null || filename === void 0) {
      throw new Error("Required parameter filename was null or undefined when calling getCompletedReportDataStream.");
    }
    let localVarQueryParameters = new HttpParams({ encoder: this.encoder });
    if (outputFormat !== void 0 && outputFormat !== null) {
      localVarQueryParameters = this.addToHttpParams(localVarQueryParameters, outputFormat, "outputFormat");
    }
    let localVarHeaders = this.defaultHeaders;
    let localVarHttpHeaderAcceptSelected = options && options.httpHeaderAccept;
    if (localVarHttpHeaderAcceptSelected === void 0) {
      const httpHeaderAccepts = [
        "application/json"
      ];
      localVarHttpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
    }
    if (localVarHttpHeaderAcceptSelected !== void 0) {
      localVarHeaders = localVarHeaders.set("Accept", localVarHttpHeaderAcceptSelected);
    }
    let localVarHttpContext = options && options.context;
    if (localVarHttpContext === void 0) {
      localVarHttpContext = new HttpContext();
    }
    let localVarTransferCache = options && options.transferCache;
    if (localVarTransferCache === void 0) {
      localVarTransferCache = true;
    }
    let responseType_ = "json";
    if (localVarHttpHeaderAcceptSelected) {
      if (localVarHttpHeaderAcceptSelected.startsWith("text")) {
        responseType_ = "text";
      } else if (this.configuration.isJsonMime(localVarHttpHeaderAcceptSelected)) {
        responseType_ = "json";
      } else {
        responseType_ = "blob";
      }
    }
    let localVarPath = `/reports/history/${this.configuration.encodeParam({ name: "id", value: id, in: "path", style: "simple", explode: false, dataType: "string", dataFormat: void 0 })}/stream/${this.configuration.encodeParam({ name: "filename", value: filename, in: "path", style: "simple", explode: false, dataType: "string", dataFormat: void 0 })}`;
    return this.httpClient.request("get", `${this.configuration.basePath}${localVarPath}`, {
      context: localVarHttpContext,
      params: localVarQueryParameters,
      responseType: responseType_,
      withCredentials: this.configuration.withCredentials,
      headers: localVarHeaders,
      observe,
      transferCache: localVarTransferCache,
      reportProgress
    });
  }
  getCompletedReportDataWithOptions(id, filename, options, observe = "body", reportProgress = false, httpOptions) {
    if (id === null || id === void 0) {
      throw new Error("Required parameter id was null or undefined when calling getCompletedReportDataWithOptions.");
    }
    if (filename === null || filename === void 0) {
      throw new Error("Required parameter filename was null or undefined when calling getCompletedReportDataWithOptions.");
    }
    if (options === null || options === void 0) {
      throw new Error("Required parameter options was null or undefined when calling getCompletedReportDataWithOptions.");
    }
    let localVarHeaders = this.defaultHeaders;
    let localVarCredential;
    localVarCredential = this.configuration.lookupCredential("access_token");
    if (localVarCredential) {
      localVarHeaders = localVarHeaders.set("x-access-token", localVarCredential);
    }
    let localVarHttpHeaderAcceptSelected = httpOptions && httpOptions.httpHeaderAccept;
    if (localVarHttpHeaderAcceptSelected === void 0) {
      const httpHeaderAccepts = [
        "application/json"
      ];
      localVarHttpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
    }
    if (localVarHttpHeaderAcceptSelected !== void 0) {
      localVarHeaders = localVarHeaders.set("Accept", localVarHttpHeaderAcceptSelected);
    }
    let localVarHttpContext = httpOptions && httpOptions.context;
    if (localVarHttpContext === void 0) {
      localVarHttpContext = new HttpContext();
    }
    let localVarTransferCache = httpOptions && httpOptions.transferCache;
    if (localVarTransferCache === void 0) {
      localVarTransferCache = true;
    }
    const consumes = [
      "application/json"
    ];
    const httpContentTypeSelected = this.configuration.selectHeaderContentType(consumes);
    if (httpContentTypeSelected !== void 0) {
      localVarHeaders = localVarHeaders.set("Content-Type", httpContentTypeSelected);
    }
    let responseType_ = "json";
    if (localVarHttpHeaderAcceptSelected) {
      if (localVarHttpHeaderAcceptSelected.startsWith("text")) {
        responseType_ = "text";
      } else if (this.configuration.isJsonMime(localVarHttpHeaderAcceptSelected)) {
        responseType_ = "json";
      } else {
        responseType_ = "blob";
      }
    }
    let localVarPath = `/reports/history/${this.configuration.encodeParam({ name: "id", value: id, in: "path", style: "simple", explode: false, dataType: "string", dataFormat: void 0 })}/${this.configuration.encodeParam({ name: "filename", value: filename, in: "path", style: "simple", explode: false, dataType: "string", dataFormat: void 0 })}`;
    return this.httpClient.request("post", `${this.configuration.basePath}${localVarPath}`, {
      context: localVarHttpContext,
      body: options,
      responseType: responseType_,
      withCredentials: this.configuration.withCredentials,
      headers: localVarHeaders,
      observe,
      transferCache: localVarTransferCache,
      reportProgress
    });
  }
  getCompletedReportWithOptions(id, options, observe = "body", reportProgress = false, httpOptions) {
    if (id === null || id === void 0) {
      throw new Error("Required parameter id was null or undefined when calling getCompletedReportWithOptions.");
    }
    if (options === null || options === void 0) {
      throw new Error("Required parameter options was null or undefined when calling getCompletedReportWithOptions.");
    }
    let localVarHeaders = this.defaultHeaders;
    let localVarCredential;
    localVarCredential = this.configuration.lookupCredential("access_token");
    if (localVarCredential) {
      localVarHeaders = localVarHeaders.set("x-access-token", localVarCredential);
    }
    let localVarHttpHeaderAcceptSelected = httpOptions && httpOptions.httpHeaderAccept;
    if (localVarHttpHeaderAcceptSelected === void 0) {
      const httpHeaderAccepts = [
        "application/json"
      ];
      localVarHttpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
    }
    if (localVarHttpHeaderAcceptSelected !== void 0) {
      localVarHeaders = localVarHeaders.set("Accept", localVarHttpHeaderAcceptSelected);
    }
    let localVarHttpContext = httpOptions && httpOptions.context;
    if (localVarHttpContext === void 0) {
      localVarHttpContext = new HttpContext();
    }
    let localVarTransferCache = httpOptions && httpOptions.transferCache;
    if (localVarTransferCache === void 0) {
      localVarTransferCache = true;
    }
    const consumes = [
      "application/json"
    ];
    const httpContentTypeSelected = this.configuration.selectHeaderContentType(consumes);
    if (httpContentTypeSelected !== void 0) {
      localVarHeaders = localVarHeaders.set("Content-Type", httpContentTypeSelected);
    }
    let responseType_ = "json";
    if (localVarHttpHeaderAcceptSelected) {
      if (localVarHttpHeaderAcceptSelected.startsWith("text")) {
        responseType_ = "text";
      } else if (this.configuration.isJsonMime(localVarHttpHeaderAcceptSelected)) {
        responseType_ = "json";
      } else {
        responseType_ = "blob";
      }
    }
    let localVarPath = `/reports/history/${this.configuration.encodeParam({ name: "id", value: id, in: "path", style: "simple", explode: false, dataType: "string", dataFormat: void 0 })}`;
    return this.httpClient.request("post", `${this.configuration.basePath}${localVarPath}`, {
      context: localVarHttpContext,
      body: options,
      responseType: responseType_,
      withCredentials: this.configuration.withCredentials,
      headers: localVarHeaders,
      observe,
      transferCache: localVarTransferCache,
      reportProgress
    });
  }
  getEventHistory(id, start, end, limit, observe = "body", reportProgress = false, options) {
    if (id === null || id === void 0) {
      throw new Error("Required parameter id was null or undefined when calling getEventHistory.");
    }
    if (start === null || start === void 0) {
      throw new Error("Required parameter start was null or undefined when calling getEventHistory.");
    }
    if (end === null || end === void 0) {
      throw new Error("Required parameter end was null or undefined when calling getEventHistory.");
    }
    let localVarQueryParameters = new HttpParams({ encoder: this.encoder });
    if (start !== void 0 && start !== null) {
      localVarQueryParameters = this.addToHttpParams(localVarQueryParameters, start, "start");
    }
    if (end !== void 0 && end !== null) {
      localVarQueryParameters = this.addToHttpParams(localVarQueryParameters, end, "end");
    }
    if (limit !== void 0 && limit !== null) {
      localVarQueryParameters = this.addToHttpParams(localVarQueryParameters, limit, "limit");
    }
    let localVarHeaders = this.defaultHeaders;
    let localVarCredential;
    localVarCredential = this.configuration.lookupCredential("access_token");
    if (localVarCredential) {
      localVarHeaders = localVarHeaders.set("x-access-token", localVarCredential);
    }
    let localVarHttpHeaderAcceptSelected = options && options.httpHeaderAccept;
    if (localVarHttpHeaderAcceptSelected === void 0) {
      const httpHeaderAccepts = [
        "application/json"
      ];
      localVarHttpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
    }
    if (localVarHttpHeaderAcceptSelected !== void 0) {
      localVarHeaders = localVarHeaders.set("Accept", localVarHttpHeaderAcceptSelected);
    }
    let localVarHttpContext = options && options.context;
    if (localVarHttpContext === void 0) {
      localVarHttpContext = new HttpContext();
    }
    let localVarTransferCache = options && options.transferCache;
    if (localVarTransferCache === void 0) {
      localVarTransferCache = true;
    }
    let responseType_ = "json";
    if (localVarHttpHeaderAcceptSelected) {
      if (localVarHttpHeaderAcceptSelected.startsWith("text")) {
        responseType_ = "text";
      } else if (this.configuration.isJsonMime(localVarHttpHeaderAcceptSelected)) {
        responseType_ = "json";
      } else {
        responseType_ = "blob";
      }
    }
    let localVarPath = `/data/history/events/${this.configuration.encodeParam({ name: "id", value: id, in: "path", style: "simple", explode: false, dataType: "string", dataFormat: void 0 })}`;
    return this.httpClient.request("get", `${this.configuration.basePath}${localVarPath}`, {
      context: localVarHttpContext,
      params: localVarQueryParameters,
      responseType: responseType_,
      withCredentials: this.configuration.withCredentials,
      headers: localVarHeaders,
      observe,
      transferCache: localVarTransferCache,
      reportProgress
    });
  }
  getLogHistoryForEntity(entityType, id, start, end, limit, levels, observe = "body", reportProgress = false, options) {
    if (entityType === null || entityType === void 0) {
      throw new Error("Required parameter entityType was null or undefined when calling getLogHistoryForEntity.");
    }
    if (id === null || id === void 0) {
      throw new Error("Required parameter id was null or undefined when calling getLogHistoryForEntity.");
    }
    let localVarQueryParameters = new HttpParams({ encoder: this.encoder });
    if (start !== void 0 && start !== null) {
      localVarQueryParameters = this.addToHttpParams(localVarQueryParameters, start, "start");
    }
    if (end !== void 0 && end !== null) {
      localVarQueryParameters = this.addToHttpParams(localVarQueryParameters, end, "end");
    }
    if (limit !== void 0 && limit !== null) {
      localVarQueryParameters = this.addToHttpParams(localVarQueryParameters, limit, "limit");
    }
    if (levels !== void 0 && levels !== null) {
      localVarQueryParameters = this.addToHttpParams(localVarQueryParameters, levels, "levels");
    }
    let localVarHeaders = this.defaultHeaders;
    let localVarCredential;
    localVarCredential = this.configuration.lookupCredential("access_token");
    if (localVarCredential) {
      localVarHeaders = localVarHeaders.set("x-access-token", localVarCredential);
    }
    let localVarHttpHeaderAcceptSelected = options && options.httpHeaderAccept;
    if (localVarHttpHeaderAcceptSelected === void 0) {
      const httpHeaderAccepts = [
        "application/json"
      ];
      localVarHttpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
    }
    if (localVarHttpHeaderAcceptSelected !== void 0) {
      localVarHeaders = localVarHeaders.set("Accept", localVarHttpHeaderAcceptSelected);
    }
    let localVarHttpContext = options && options.context;
    if (localVarHttpContext === void 0) {
      localVarHttpContext = new HttpContext();
    }
    let localVarTransferCache = options && options.transferCache;
    if (localVarTransferCache === void 0) {
      localVarTransferCache = true;
    }
    let responseType_ = "json";
    if (localVarHttpHeaderAcceptSelected) {
      if (localVarHttpHeaderAcceptSelected.startsWith("text")) {
        responseType_ = "text";
      } else if (this.configuration.isJsonMime(localVarHttpHeaderAcceptSelected)) {
        responseType_ = "json";
      } else {
        responseType_ = "blob";
      }
    }
    let localVarPath = `/data/history/logs/${this.configuration.encodeParam({ name: "entityType", value: entityType, in: "path", style: "simple", explode: false, dataType: "string", dataFormat: void 0 })}/${this.configuration.encodeParam({ name: "id", value: id, in: "path", style: "simple", explode: false, dataType: "string", dataFormat: void 0 })}`;
    return this.httpClient.request("get", `${this.configuration.basePath}${localVarPath}`, {
      context: localVarHttpContext,
      params: localVarQueryParameters,
      responseType: responseType_,
      withCredentials: this.configuration.withCredentials,
      headers: localVarHeaders,
      observe,
      transferCache: localVarTransferCache,
      reportProgress
    });
  }
  getTelemetryHistory(id, start, end, limit, observe = "body", reportProgress = false, options) {
    if (id === null || id === void 0) {
      throw new Error("Required parameter id was null or undefined when calling getTelemetryHistory.");
    }
    if (start === null || start === void 0) {
      throw new Error("Required parameter start was null or undefined when calling getTelemetryHistory.");
    }
    if (end === null || end === void 0) {
      throw new Error("Required parameter end was null or undefined when calling getTelemetryHistory.");
    }
    let localVarQueryParameters = new HttpParams({ encoder: this.encoder });
    if (start !== void 0 && start !== null) {
      localVarQueryParameters = this.addToHttpParams(localVarQueryParameters, start, "start");
    }
    if (end !== void 0 && end !== null) {
      localVarQueryParameters = this.addToHttpParams(localVarQueryParameters, end, "end");
    }
    if (limit !== void 0 && limit !== null) {
      localVarQueryParameters = this.addToHttpParams(localVarQueryParameters, limit, "limit");
    }
    let localVarHeaders = this.defaultHeaders;
    let localVarCredential;
    localVarCredential = this.configuration.lookupCredential("access_token");
    if (localVarCredential) {
      localVarHeaders = localVarHeaders.set("x-access-token", localVarCredential);
    }
    let localVarHttpHeaderAcceptSelected = options && options.httpHeaderAccept;
    if (localVarHttpHeaderAcceptSelected === void 0) {
      const httpHeaderAccepts = [
        "application/json"
      ];
      localVarHttpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
    }
    if (localVarHttpHeaderAcceptSelected !== void 0) {
      localVarHeaders = localVarHeaders.set("Accept", localVarHttpHeaderAcceptSelected);
    }
    let localVarHttpContext = options && options.context;
    if (localVarHttpContext === void 0) {
      localVarHttpContext = new HttpContext();
    }
    let localVarTransferCache = options && options.transferCache;
    if (localVarTransferCache === void 0) {
      localVarTransferCache = true;
    }
    let responseType_ = "json";
    if (localVarHttpHeaderAcceptSelected) {
      if (localVarHttpHeaderAcceptSelected.startsWith("text")) {
        responseType_ = "text";
      } else if (this.configuration.isJsonMime(localVarHttpHeaderAcceptSelected)) {
        responseType_ = "json";
      } else {
        responseType_ = "blob";
      }
    }
    let localVarPath = `/data/history/telemetry/${this.configuration.encodeParam({ name: "id", value: id, in: "path", style: "simple", explode: false, dataType: "string", dataFormat: void 0 })}`;
    return this.httpClient.request("get", `${this.configuration.basePath}${localVarPath}`, {
      context: localVarHttpContext,
      params: localVarQueryParameters,
      responseType: responseType_,
      withCredentials: this.configuration.withCredentials,
      headers: localVarHeaders,
      observe,
      transferCache: localVarTransferCache,
      reportProgress
    });
  }
  getTripHistory(id, start, end, date, limit, observe = "body", reportProgress = false, options) {
    if (id === null || id === void 0) {
      throw new Error("Required parameter id was null or undefined when calling getTripHistory.");
    }
    let localVarQueryParameters = new HttpParams({ encoder: this.encoder });
    if (start !== void 0 && start !== null) {
      localVarQueryParameters = this.addToHttpParams(localVarQueryParameters, start, "start");
    }
    if (end !== void 0 && end !== null) {
      localVarQueryParameters = this.addToHttpParams(localVarQueryParameters, end, "end");
    }
    if (date !== void 0 && date !== null) {
      localVarQueryParameters = this.addToHttpParams(localVarQueryParameters, date, "date");
    }
    if (limit !== void 0 && limit !== null) {
      localVarQueryParameters = this.addToHttpParams(localVarQueryParameters, limit, "limit");
    }
    let localVarHeaders = this.defaultHeaders;
    let localVarCredential;
    localVarCredential = this.configuration.lookupCredential("access_token");
    if (localVarCredential) {
      localVarHeaders = localVarHeaders.set("x-access-token", localVarCredential);
    }
    let localVarHttpHeaderAcceptSelected = options && options.httpHeaderAccept;
    if (localVarHttpHeaderAcceptSelected === void 0) {
      const httpHeaderAccepts = [
        "application/json"
      ];
      localVarHttpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
    }
    if (localVarHttpHeaderAcceptSelected !== void 0) {
      localVarHeaders = localVarHeaders.set("Accept", localVarHttpHeaderAcceptSelected);
    }
    let localVarHttpContext = options && options.context;
    if (localVarHttpContext === void 0) {
      localVarHttpContext = new HttpContext();
    }
    let localVarTransferCache = options && options.transferCache;
    if (localVarTransferCache === void 0) {
      localVarTransferCache = true;
    }
    let responseType_ = "json";
    if (localVarHttpHeaderAcceptSelected) {
      if (localVarHttpHeaderAcceptSelected.startsWith("text")) {
        responseType_ = "text";
      } else if (this.configuration.isJsonMime(localVarHttpHeaderAcceptSelected)) {
        responseType_ = "json";
      } else {
        responseType_ = "blob";
      }
    }
    let localVarPath = `/data/history/trips/${this.configuration.encodeParam({ name: "id", value: id, in: "path", style: "simple", explode: false, dataType: "string", dataFormat: void 0 })}`;
    return this.httpClient.request("get", `${this.configuration.basePath}${localVarPath}`, {
      context: localVarHttpContext,
      params: localVarQueryParameters,
      responseType: responseType_,
      withCredentials: this.configuration.withCredentials,
      headers: localVarHeaders,
      observe,
      transferCache: localVarTransferCache,
      reportProgress
    });
  }
  listCompletedReports(start, end, client, user, observe = "body", reportProgress = false, options) {
    if (start === null || start === void 0) {
      throw new Error("Required parameter start was null or undefined when calling listCompletedReports.");
    }
    if (end === null || end === void 0) {
      throw new Error("Required parameter end was null or undefined when calling listCompletedReports.");
    }
    let localVarQueryParameters = new HttpParams({ encoder: this.encoder });
    if (start !== void 0 && start !== null) {
      localVarQueryParameters = this.addToHttpParams(localVarQueryParameters, start, "start");
    }
    if (end !== void 0 && end !== null) {
      localVarQueryParameters = this.addToHttpParams(localVarQueryParameters, end, "end");
    }
    if (client !== void 0 && client !== null) {
      localVarQueryParameters = this.addToHttpParams(localVarQueryParameters, client, "client");
    }
    if (user !== void 0 && user !== null) {
      localVarQueryParameters = this.addToHttpParams(localVarQueryParameters, user, "user");
    }
    let localVarHeaders = this.defaultHeaders;
    let localVarCredential;
    localVarCredential = this.configuration.lookupCredential("access_token");
    if (localVarCredential) {
      localVarHeaders = localVarHeaders.set("x-access-token", localVarCredential);
    }
    let localVarHttpHeaderAcceptSelected = options && options.httpHeaderAccept;
    if (localVarHttpHeaderAcceptSelected === void 0) {
      const httpHeaderAccepts = [
        "application/json"
      ];
      localVarHttpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
    }
    if (localVarHttpHeaderAcceptSelected !== void 0) {
      localVarHeaders = localVarHeaders.set("Accept", localVarHttpHeaderAcceptSelected);
    }
    let localVarHttpContext = options && options.context;
    if (localVarHttpContext === void 0) {
      localVarHttpContext = new HttpContext();
    }
    let localVarTransferCache = options && options.transferCache;
    if (localVarTransferCache === void 0) {
      localVarTransferCache = true;
    }
    let responseType_ = "json";
    if (localVarHttpHeaderAcceptSelected) {
      if (localVarHttpHeaderAcceptSelected.startsWith("text")) {
        responseType_ = "text";
      } else if (this.configuration.isJsonMime(localVarHttpHeaderAcceptSelected)) {
        responseType_ = "json";
      } else {
        responseType_ = "blob";
      }
    }
    let localVarPath = `/reports/history`;
    return this.httpClient.request("get", `${this.configuration.basePath}${localVarPath}`, {
      context: localVarHttpContext,
      params: localVarQueryParameters,
      responseType: responseType_,
      withCredentials: this.configuration.withCredentials,
      headers: localVarHeaders,
      observe,
      transferCache: localVarTransferCache,
      reportProgress
    });
  }
  removeTripLabels(asset, date, request, observe = "body", reportProgress = false, options) {
    if (asset === null || asset === void 0) {
      throw new Error("Required parameter asset was null or undefined when calling removeTripLabels.");
    }
    if (date === null || date === void 0) {
      throw new Error("Required parameter date was null or undefined when calling removeTripLabels.");
    }
    if (request === null || request === void 0) {
      throw new Error("Required parameter request was null or undefined when calling removeTripLabels.");
    }
    let localVarHeaders = this.defaultHeaders;
    let localVarCredential;
    localVarCredential = this.configuration.lookupCredential("access_token");
    if (localVarCredential) {
      localVarHeaders = localVarHeaders.set("x-access-token", localVarCredential);
    }
    let localVarHttpHeaderAcceptSelected = options && options.httpHeaderAccept;
    if (localVarHttpHeaderAcceptSelected === void 0) {
      const httpHeaderAccepts = [
        "application/json"
      ];
      localVarHttpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
    }
    if (localVarHttpHeaderAcceptSelected !== void 0) {
      localVarHeaders = localVarHeaders.set("Accept", localVarHttpHeaderAcceptSelected);
    }
    let localVarHttpContext = options && options.context;
    if (localVarHttpContext === void 0) {
      localVarHttpContext = new HttpContext();
    }
    let localVarTransferCache = options && options.transferCache;
    if (localVarTransferCache === void 0) {
      localVarTransferCache = true;
    }
    const consumes = [
      "application/json"
    ];
    const httpContentTypeSelected = this.configuration.selectHeaderContentType(consumes);
    if (httpContentTypeSelected !== void 0) {
      localVarHeaders = localVarHeaders.set("Content-Type", httpContentTypeSelected);
    }
    let responseType_ = "json";
    if (localVarHttpHeaderAcceptSelected) {
      if (localVarHttpHeaderAcceptSelected.startsWith("text")) {
        responseType_ = "text";
      } else if (this.configuration.isJsonMime(localVarHttpHeaderAcceptSelected)) {
        responseType_ = "json";
      } else {
        responseType_ = "blob";
      }
    }
    let localVarPath = `/data/history/trips/${this.configuration.encodeParam({ name: "asset", value: asset, in: "path", style: "simple", explode: false, dataType: "string", dataFormat: void 0 })}/${this.configuration.encodeParam({ name: "date", value: date, in: "path", style: "simple", explode: false, dataType: "string", dataFormat: void 0 })}/labels`;
    return this.httpClient.request("delete", `${this.configuration.basePath}${localVarPath}`, {
      context: localVarHttpContext,
      body: request,
      responseType: responseType_,
      withCredentials: this.configuration.withCredentials,
      headers: localVarHeaders,
      observe,
      transferCache: localVarTransferCache,
      reportProgress
    });
  }
  updateCompletedReport(id, report, observe = "body", reportProgress = false, options) {
    if (id === null || id === void 0) {
      throw new Error("Required parameter id was null or undefined when calling updateCompletedReport.");
    }
    if (report === null || report === void 0) {
      throw new Error("Required parameter report was null or undefined when calling updateCompletedReport.");
    }
    let localVarHeaders = this.defaultHeaders;
    let localVarCredential;
    localVarCredential = this.configuration.lookupCredential("access_token");
    if (localVarCredential) {
      localVarHeaders = localVarHeaders.set("x-access-token", localVarCredential);
    }
    let localVarHttpHeaderAcceptSelected = options && options.httpHeaderAccept;
    if (localVarHttpHeaderAcceptSelected === void 0) {
      const httpHeaderAccepts = [
        "application/json"
      ];
      localVarHttpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
    }
    if (localVarHttpHeaderAcceptSelected !== void 0) {
      localVarHeaders = localVarHeaders.set("Accept", localVarHttpHeaderAcceptSelected);
    }
    let localVarHttpContext = options && options.context;
    if (localVarHttpContext === void 0) {
      localVarHttpContext = new HttpContext();
    }
    let localVarTransferCache = options && options.transferCache;
    if (localVarTransferCache === void 0) {
      localVarTransferCache = true;
    }
    const consumes = [
      "application/json"
    ];
    const httpContentTypeSelected = this.configuration.selectHeaderContentType(consumes);
    if (httpContentTypeSelected !== void 0) {
      localVarHeaders = localVarHeaders.set("Content-Type", httpContentTypeSelected);
    }
    let responseType_ = "json";
    if (localVarHttpHeaderAcceptSelected) {
      if (localVarHttpHeaderAcceptSelected.startsWith("text")) {
        responseType_ = "text";
      } else if (this.configuration.isJsonMime(localVarHttpHeaderAcceptSelected)) {
        responseType_ = "json";
      } else {
        responseType_ = "blob";
      }
    }
    let localVarPath = `/reports/history/${this.configuration.encodeParam({ name: "id", value: id, in: "path", style: "simple", explode: false, dataType: "string", dataFormat: void 0 })}`;
    return this.httpClient.request("put", `${this.configuration.basePath}${localVarPath}`, {
      context: localVarHttpContext,
      body: report,
      responseType: responseType_,
      withCredentials: this.configuration.withCredentials,
      headers: localVarHeaders,
      observe,
      transferCache: localVarTransferCache,
      reportProgress
    });
  }
  static \u0275fac = function HistoryService_Factory(__ngFactoryType__) {
    return new (__ngFactoryType__ || _HistoryService)(\u0275\u0275inject(HttpClient), \u0275\u0275inject(BASE_PATH, 8), \u0275\u0275inject(Configuration, 8));
  };
  static \u0275prov = /* @__PURE__ */ \u0275\u0275defineInjectable({ token: _HistoryService, factory: _HistoryService.\u0275fac, providedIn: "root" });
};
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(HistoryService, [{
    type: Injectable,
    args: [{
      providedIn: "root"
    }]
  }], () => [{ type: HttpClient }, { type: void 0, decorators: [{
    type: Optional
  }, {
    type: Inject,
    args: [BASE_PATH]
  }] }, { type: Configuration, decorators: [{
    type: Optional
  }] }], null);
})();

// src/app/api/api/ioTypes.service.ts
var IoTypesService = class _IoTypesService {
  httpClient;
  basePath = "";
  defaultHeaders = new HttpHeaders();
  configuration = new Configuration();
  encoder;
  constructor(httpClient, basePath, configuration) {
    this.httpClient = httpClient;
    if (configuration) {
      this.configuration = configuration;
    }
    if (typeof this.configuration.basePath !== "string") {
      const firstBasePath = Array.isArray(basePath) ? basePath[0] : void 0;
      if (firstBasePath != void 0) {
        basePath = firstBasePath;
      }
      if (typeof basePath !== "string") {
        basePath = this.basePath;
      }
      this.configuration.basePath = basePath;
    }
    this.encoder = this.configuration.encoder || new CustomHttpParameterCodec();
  }
  // @ts-ignore
  addToHttpParams(httpParams, value, key) {
    if (typeof value === "object" && value instanceof Date === false) {
      httpParams = this.addToHttpParamsRecursive(httpParams, value);
    } else {
      httpParams = this.addToHttpParamsRecursive(httpParams, value, key);
    }
    return httpParams;
  }
  addToHttpParamsRecursive(httpParams, value, key) {
    if (value == null) {
      return httpParams;
    }
    if (typeof value === "object") {
      if (Array.isArray(value)) {
        value.forEach((elem) => httpParams = this.addToHttpParamsRecursive(httpParams, elem, key));
      } else if (value instanceof Date) {
        if (key != null) {
          httpParams = httpParams.append(key, value.toISOString().substring(0, 10));
        } else {
          throw Error("key may not be null if value is Date");
        }
      } else {
        Object.keys(value).forEach((k) => httpParams = this.addToHttpParamsRecursive(httpParams, value[k], key != null ? `${key}.${k}` : k));
      }
    } else if (key != null) {
      httpParams = httpParams.append(key, value);
    } else {
      throw Error("key may not be null if value is not object or array");
    }
    return httpParams;
  }
  createIoType(request, observe = "body", reportProgress = false, options) {
    if (request === null || request === void 0) {
      throw new Error("Required parameter request was null or undefined when calling createIoType.");
    }
    let localVarHeaders = this.defaultHeaders;
    let localVarCredential;
    localVarCredential = this.configuration.lookupCredential("access_token");
    if (localVarCredential) {
      localVarHeaders = localVarHeaders.set("x-access-token", localVarCredential);
    }
    let localVarHttpHeaderAcceptSelected = options && options.httpHeaderAccept;
    if (localVarHttpHeaderAcceptSelected === void 0) {
      const httpHeaderAccepts = [
        "application/json"
      ];
      localVarHttpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
    }
    if (localVarHttpHeaderAcceptSelected !== void 0) {
      localVarHeaders = localVarHeaders.set("Accept", localVarHttpHeaderAcceptSelected);
    }
    let localVarHttpContext = options && options.context;
    if (localVarHttpContext === void 0) {
      localVarHttpContext = new HttpContext();
    }
    let localVarTransferCache = options && options.transferCache;
    if (localVarTransferCache === void 0) {
      localVarTransferCache = true;
    }
    const consumes = [
      "application/json"
    ];
    const httpContentTypeSelected = this.configuration.selectHeaderContentType(consumes);
    if (httpContentTypeSelected !== void 0) {
      localVarHeaders = localVarHeaders.set("Content-Type", httpContentTypeSelected);
    }
    let responseType_ = "json";
    if (localVarHttpHeaderAcceptSelected) {
      if (localVarHttpHeaderAcceptSelected.startsWith("text")) {
        responseType_ = "text";
      } else if (this.configuration.isJsonMime(localVarHttpHeaderAcceptSelected)) {
        responseType_ = "json";
      } else {
        responseType_ = "blob";
      }
    }
    let localVarPath = `/entities/iotypes`;
    return this.httpClient.request("post", `${this.configuration.basePath}${localVarPath}`, {
      context: localVarHttpContext,
      body: request,
      responseType: responseType_,
      withCredentials: this.configuration.withCredentials,
      headers: localVarHeaders,
      observe,
      transferCache: localVarTransferCache,
      reportProgress
    });
  }
  getIoType(id, observe = "body", reportProgress = false, options) {
    if (id === null || id === void 0) {
      throw new Error("Required parameter id was null or undefined when calling getIoType.");
    }
    let localVarHeaders = this.defaultHeaders;
    let localVarCredential;
    localVarCredential = this.configuration.lookupCredential("access_token");
    if (localVarCredential) {
      localVarHeaders = localVarHeaders.set("x-access-token", localVarCredential);
    }
    let localVarHttpHeaderAcceptSelected = options && options.httpHeaderAccept;
    if (localVarHttpHeaderAcceptSelected === void 0) {
      const httpHeaderAccepts = [
        "application/json"
      ];
      localVarHttpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
    }
    if (localVarHttpHeaderAcceptSelected !== void 0) {
      localVarHeaders = localVarHeaders.set("Accept", localVarHttpHeaderAcceptSelected);
    }
    let localVarHttpContext = options && options.context;
    if (localVarHttpContext === void 0) {
      localVarHttpContext = new HttpContext();
    }
    let localVarTransferCache = options && options.transferCache;
    if (localVarTransferCache === void 0) {
      localVarTransferCache = true;
    }
    let responseType_ = "json";
    if (localVarHttpHeaderAcceptSelected) {
      if (localVarHttpHeaderAcceptSelected.startsWith("text")) {
        responseType_ = "text";
      } else if (this.configuration.isJsonMime(localVarHttpHeaderAcceptSelected)) {
        responseType_ = "json";
      } else {
        responseType_ = "blob";
      }
    }
    let localVarPath = `/entities/iotypes/${this.configuration.encodeParam({ name: "id", value: id, in: "path", style: "simple", explode: false, dataType: "string", dataFormat: void 0 })}`;
    return this.httpClient.request("get", `${this.configuration.basePath}${localVarPath}`, {
      context: localVarHttpContext,
      responseType: responseType_,
      withCredentials: this.configuration.withCredentials,
      headers: localVarHeaders,
      observe,
      transferCache: localVarTransferCache,
      reportProgress
    });
  }
  listIoTypes(owner, recurse, offset, limit, sort, filter, observe = "body", reportProgress = false, options) {
    if (owner === null || owner === void 0) {
      throw new Error("Required parameter owner was null or undefined when calling listIoTypes.");
    }
    let localVarQueryParameters = new HttpParams({ encoder: this.encoder });
    if (owner !== void 0 && owner !== null) {
      localVarQueryParameters = this.addToHttpParams(localVarQueryParameters, owner, "owner");
    }
    if (recurse !== void 0 && recurse !== null) {
      localVarQueryParameters = this.addToHttpParams(localVarQueryParameters, recurse, "recurse");
    }
    if (offset !== void 0 && offset !== null) {
      localVarQueryParameters = this.addToHttpParams(localVarQueryParameters, offset, "offset");
    }
    if (limit !== void 0 && limit !== null) {
      localVarQueryParameters = this.addToHttpParams(localVarQueryParameters, limit, "limit");
    }
    if (sort !== void 0 && sort !== null) {
      localVarQueryParameters = this.addToHttpParams(localVarQueryParameters, sort, "sort");
    }
    if (filter !== void 0 && filter !== null) {
      localVarQueryParameters = this.addToHttpParams(localVarQueryParameters, filter, "filter");
    }
    let localVarHeaders = this.defaultHeaders;
    let localVarCredential;
    localVarCredential = this.configuration.lookupCredential("access_token");
    if (localVarCredential) {
      localVarHeaders = localVarHeaders.set("x-access-token", localVarCredential);
    }
    let localVarHttpHeaderAcceptSelected = options && options.httpHeaderAccept;
    if (localVarHttpHeaderAcceptSelected === void 0) {
      const httpHeaderAccepts = [
        "application/json"
      ];
      localVarHttpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
    }
    if (localVarHttpHeaderAcceptSelected !== void 0) {
      localVarHeaders = localVarHeaders.set("Accept", localVarHttpHeaderAcceptSelected);
    }
    let localVarHttpContext = options && options.context;
    if (localVarHttpContext === void 0) {
      localVarHttpContext = new HttpContext();
    }
    let localVarTransferCache = options && options.transferCache;
    if (localVarTransferCache === void 0) {
      localVarTransferCache = true;
    }
    let responseType_ = "json";
    if (localVarHttpHeaderAcceptSelected) {
      if (localVarHttpHeaderAcceptSelected.startsWith("text")) {
        responseType_ = "text";
      } else if (this.configuration.isJsonMime(localVarHttpHeaderAcceptSelected)) {
        responseType_ = "json";
      } else {
        responseType_ = "blob";
      }
    }
    let localVarPath = `/entities/iotypes`;
    return this.httpClient.request("get", `${this.configuration.basePath}${localVarPath}`, {
      context: localVarHttpContext,
      params: localVarQueryParameters,
      responseType: responseType_,
      withCredentials: this.configuration.withCredentials,
      headers: localVarHeaders,
      observe,
      transferCache: localVarTransferCache,
      reportProgress
    });
  }
  updateIoType(id, request, observe = "body", reportProgress = false, options) {
    if (id === null || id === void 0) {
      throw new Error("Required parameter id was null or undefined when calling updateIoType.");
    }
    if (request === null || request === void 0) {
      throw new Error("Required parameter request was null or undefined when calling updateIoType.");
    }
    let localVarHeaders = this.defaultHeaders;
    let localVarCredential;
    localVarCredential = this.configuration.lookupCredential("access_token");
    if (localVarCredential) {
      localVarHeaders = localVarHeaders.set("x-access-token", localVarCredential);
    }
    let localVarHttpHeaderAcceptSelected = options && options.httpHeaderAccept;
    if (localVarHttpHeaderAcceptSelected === void 0) {
      const httpHeaderAccepts = [
        "application/json"
      ];
      localVarHttpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
    }
    if (localVarHttpHeaderAcceptSelected !== void 0) {
      localVarHeaders = localVarHeaders.set("Accept", localVarHttpHeaderAcceptSelected);
    }
    let localVarHttpContext = options && options.context;
    if (localVarHttpContext === void 0) {
      localVarHttpContext = new HttpContext();
    }
    let localVarTransferCache = options && options.transferCache;
    if (localVarTransferCache === void 0) {
      localVarTransferCache = true;
    }
    const consumes = [
      "application/json"
    ];
    const httpContentTypeSelected = this.configuration.selectHeaderContentType(consumes);
    if (httpContentTypeSelected !== void 0) {
      localVarHeaders = localVarHeaders.set("Content-Type", httpContentTypeSelected);
    }
    let responseType_ = "json";
    if (localVarHttpHeaderAcceptSelected) {
      if (localVarHttpHeaderAcceptSelected.startsWith("text")) {
        responseType_ = "text";
      } else if (this.configuration.isJsonMime(localVarHttpHeaderAcceptSelected)) {
        responseType_ = "json";
      } else {
        responseType_ = "blob";
      }
    }
    let localVarPath = `/entities/iotypes/${this.configuration.encodeParam({ name: "id", value: id, in: "path", style: "simple", explode: false, dataType: "string", dataFormat: void 0 })}`;
    return this.httpClient.request("put", `${this.configuration.basePath}${localVarPath}`, {
      context: localVarHttpContext,
      body: request,
      responseType: responseType_,
      withCredentials: this.configuration.withCredentials,
      headers: localVarHeaders,
      observe,
      transferCache: localVarTransferCache,
      reportProgress
    });
  }
  static \u0275fac = function IoTypesService_Factory(__ngFactoryType__) {
    return new (__ngFactoryType__ || _IoTypesService)(\u0275\u0275inject(HttpClient), \u0275\u0275inject(BASE_PATH, 8), \u0275\u0275inject(Configuration, 8));
  };
  static \u0275prov = /* @__PURE__ */ \u0275\u0275defineInjectable({ token: _IoTypesService, factory: _IoTypesService.\u0275fac, providedIn: "root" });
};
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(IoTypesService, [{
    type: Injectable,
    args: [{
      providedIn: "root"
    }]
  }], () => [{ type: HttpClient }, { type: void 0, decorators: [{
    type: Optional
  }, {
    type: Inject,
    args: [BASE_PATH]
  }] }, { type: Configuration, decorators: [{
    type: Optional
  }] }], null);
})();

// src/app/api/api/labels.service.ts
var LabelsService = class _LabelsService {
  httpClient;
  basePath = "";
  defaultHeaders = new HttpHeaders();
  configuration = new Configuration();
  encoder;
  constructor(httpClient, basePath, configuration) {
    this.httpClient = httpClient;
    if (configuration) {
      this.configuration = configuration;
    }
    if (typeof this.configuration.basePath !== "string") {
      const firstBasePath = Array.isArray(basePath) ? basePath[0] : void 0;
      if (firstBasePath != void 0) {
        basePath = firstBasePath;
      }
      if (typeof basePath !== "string") {
        basePath = this.basePath;
      }
      this.configuration.basePath = basePath;
    }
    this.encoder = this.configuration.encoder || new CustomHttpParameterCodec();
  }
  // @ts-ignore
  addToHttpParams(httpParams, value, key) {
    if (typeof value === "object" && value instanceof Date === false) {
      httpParams = this.addToHttpParamsRecursive(httpParams, value);
    } else {
      httpParams = this.addToHttpParamsRecursive(httpParams, value, key);
    }
    return httpParams;
  }
  addToHttpParamsRecursive(httpParams, value, key) {
    if (value == null) {
      return httpParams;
    }
    if (typeof value === "object") {
      if (Array.isArray(value)) {
        value.forEach((elem) => httpParams = this.addToHttpParamsRecursive(httpParams, elem, key));
      } else if (value instanceof Date) {
        if (key != null) {
          httpParams = httpParams.append(key, value.toISOString().substring(0, 10));
        } else {
          throw Error("key may not be null if value is Date");
        }
      } else {
        Object.keys(value).forEach((k) => httpParams = this.addToHttpParamsRecursive(httpParams, value[k], key != null ? `${key}.${k}` : k));
      }
    } else if (key != null) {
      httpParams = httpParams.append(key, value);
    } else {
      throw Error("key may not be null if value is not object or array");
    }
    return httpParams;
  }
  createLabel(request, observe = "body", reportProgress = false, options) {
    if (request === null || request === void 0) {
      throw new Error("Required parameter request was null or undefined when calling createLabel.");
    }
    let localVarHeaders = this.defaultHeaders;
    let localVarCredential;
    localVarCredential = this.configuration.lookupCredential("access_token");
    if (localVarCredential) {
      localVarHeaders = localVarHeaders.set("x-access-token", localVarCredential);
    }
    let localVarHttpHeaderAcceptSelected = options && options.httpHeaderAccept;
    if (localVarHttpHeaderAcceptSelected === void 0) {
      const httpHeaderAccepts = [
        "application/json"
      ];
      localVarHttpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
    }
    if (localVarHttpHeaderAcceptSelected !== void 0) {
      localVarHeaders = localVarHeaders.set("Accept", localVarHttpHeaderAcceptSelected);
    }
    let localVarHttpContext = options && options.context;
    if (localVarHttpContext === void 0) {
      localVarHttpContext = new HttpContext();
    }
    let localVarTransferCache = options && options.transferCache;
    if (localVarTransferCache === void 0) {
      localVarTransferCache = true;
    }
    const consumes = [
      "application/json"
    ];
    const httpContentTypeSelected = this.configuration.selectHeaderContentType(consumes);
    if (httpContentTypeSelected !== void 0) {
      localVarHeaders = localVarHeaders.set("Content-Type", httpContentTypeSelected);
    }
    let responseType_ = "json";
    if (localVarHttpHeaderAcceptSelected) {
      if (localVarHttpHeaderAcceptSelected.startsWith("text")) {
        responseType_ = "text";
      } else if (this.configuration.isJsonMime(localVarHttpHeaderAcceptSelected)) {
        responseType_ = "json";
      } else {
        responseType_ = "blob";
      }
    }
    let localVarPath = `/entities/labels`;
    return this.httpClient.request("post", `${this.configuration.basePath}${localVarPath}`, {
      context: localVarHttpContext,
      body: request,
      responseType: responseType_,
      withCredentials: this.configuration.withCredentials,
      headers: localVarHeaders,
      observe,
      transferCache: localVarTransferCache,
      reportProgress
    });
  }
  getLabel(id, observe = "body", reportProgress = false, options) {
    if (id === null || id === void 0) {
      throw new Error("Required parameter id was null or undefined when calling getLabel.");
    }
    let localVarHeaders = this.defaultHeaders;
    let localVarCredential;
    localVarCredential = this.configuration.lookupCredential("access_token");
    if (localVarCredential) {
      localVarHeaders = localVarHeaders.set("x-access-token", localVarCredential);
    }
    let localVarHttpHeaderAcceptSelected = options && options.httpHeaderAccept;
    if (localVarHttpHeaderAcceptSelected === void 0) {
      const httpHeaderAccepts = [
        "application/json"
      ];
      localVarHttpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
    }
    if (localVarHttpHeaderAcceptSelected !== void 0) {
      localVarHeaders = localVarHeaders.set("Accept", localVarHttpHeaderAcceptSelected);
    }
    let localVarHttpContext = options && options.context;
    if (localVarHttpContext === void 0) {
      localVarHttpContext = new HttpContext();
    }
    let localVarTransferCache = options && options.transferCache;
    if (localVarTransferCache === void 0) {
      localVarTransferCache = true;
    }
    let responseType_ = "json";
    if (localVarHttpHeaderAcceptSelected) {
      if (localVarHttpHeaderAcceptSelected.startsWith("text")) {
        responseType_ = "text";
      } else if (this.configuration.isJsonMime(localVarHttpHeaderAcceptSelected)) {
        responseType_ = "json";
      } else {
        responseType_ = "blob";
      }
    }
    let localVarPath = `/entities/labels/${this.configuration.encodeParam({ name: "id", value: id, in: "path", style: "simple", explode: false, dataType: "string", dataFormat: void 0 })}`;
    return this.httpClient.request("get", `${this.configuration.basePath}${localVarPath}`, {
      context: localVarHttpContext,
      responseType: responseType_,
      withCredentials: this.configuration.withCredentials,
      headers: localVarHeaders,
      observe,
      transferCache: localVarTransferCache,
      reportProgress
    });
  }
  listLabels(owner, recurse, offset, limit, sort, filter, observe = "body", reportProgress = false, options) {
    if (owner === null || owner === void 0) {
      throw new Error("Required parameter owner was null or undefined when calling listLabels.");
    }
    let localVarQueryParameters = new HttpParams({ encoder: this.encoder });
    if (owner !== void 0 && owner !== null) {
      localVarQueryParameters = this.addToHttpParams(localVarQueryParameters, owner, "owner");
    }
    if (recurse !== void 0 && recurse !== null) {
      localVarQueryParameters = this.addToHttpParams(localVarQueryParameters, recurse, "recurse");
    }
    if (offset !== void 0 && offset !== null) {
      localVarQueryParameters = this.addToHttpParams(localVarQueryParameters, offset, "offset");
    }
    if (limit !== void 0 && limit !== null) {
      localVarQueryParameters = this.addToHttpParams(localVarQueryParameters, limit, "limit");
    }
    if (sort !== void 0 && sort !== null) {
      localVarQueryParameters = this.addToHttpParams(localVarQueryParameters, sort, "sort");
    }
    if (filter !== void 0 && filter !== null) {
      localVarQueryParameters = this.addToHttpParams(localVarQueryParameters, filter, "filter");
    }
    let localVarHeaders = this.defaultHeaders;
    let localVarCredential;
    localVarCredential = this.configuration.lookupCredential("access_token");
    if (localVarCredential) {
      localVarHeaders = localVarHeaders.set("x-access-token", localVarCredential);
    }
    let localVarHttpHeaderAcceptSelected = options && options.httpHeaderAccept;
    if (localVarHttpHeaderAcceptSelected === void 0) {
      const httpHeaderAccepts = [
        "application/json"
      ];
      localVarHttpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
    }
    if (localVarHttpHeaderAcceptSelected !== void 0) {
      localVarHeaders = localVarHeaders.set("Accept", localVarHttpHeaderAcceptSelected);
    }
    let localVarHttpContext = options && options.context;
    if (localVarHttpContext === void 0) {
      localVarHttpContext = new HttpContext();
    }
    let localVarTransferCache = options && options.transferCache;
    if (localVarTransferCache === void 0) {
      localVarTransferCache = true;
    }
    let responseType_ = "json";
    if (localVarHttpHeaderAcceptSelected) {
      if (localVarHttpHeaderAcceptSelected.startsWith("text")) {
        responseType_ = "text";
      } else if (this.configuration.isJsonMime(localVarHttpHeaderAcceptSelected)) {
        responseType_ = "json";
      } else {
        responseType_ = "blob";
      }
    }
    let localVarPath = `/entities/labels`;
    return this.httpClient.request("get", `${this.configuration.basePath}${localVarPath}`, {
      context: localVarHttpContext,
      params: localVarQueryParameters,
      responseType: responseType_,
      withCredentials: this.configuration.withCredentials,
      headers: localVarHeaders,
      observe,
      transferCache: localVarTransferCache,
      reportProgress
    });
  }
  updateLabel(id, request, observe = "body", reportProgress = false, options) {
    if (id === null || id === void 0) {
      throw new Error("Required parameter id was null or undefined when calling updateLabel.");
    }
    if (request === null || request === void 0) {
      throw new Error("Required parameter request was null or undefined when calling updateLabel.");
    }
    let localVarHeaders = this.defaultHeaders;
    let localVarCredential;
    localVarCredential = this.configuration.lookupCredential("access_token");
    if (localVarCredential) {
      localVarHeaders = localVarHeaders.set("x-access-token", localVarCredential);
    }
    let localVarHttpHeaderAcceptSelected = options && options.httpHeaderAccept;
    if (localVarHttpHeaderAcceptSelected === void 0) {
      const httpHeaderAccepts = [
        "application/json"
      ];
      localVarHttpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
    }
    if (localVarHttpHeaderAcceptSelected !== void 0) {
      localVarHeaders = localVarHeaders.set("Accept", localVarHttpHeaderAcceptSelected);
    }
    let localVarHttpContext = options && options.context;
    if (localVarHttpContext === void 0) {
      localVarHttpContext = new HttpContext();
    }
    let localVarTransferCache = options && options.transferCache;
    if (localVarTransferCache === void 0) {
      localVarTransferCache = true;
    }
    const consumes = [
      "application/json"
    ];
    const httpContentTypeSelected = this.configuration.selectHeaderContentType(consumes);
    if (httpContentTypeSelected !== void 0) {
      localVarHeaders = localVarHeaders.set("Content-Type", httpContentTypeSelected);
    }
    let responseType_ = "json";
    if (localVarHttpHeaderAcceptSelected) {
      if (localVarHttpHeaderAcceptSelected.startsWith("text")) {
        responseType_ = "text";
      } else if (this.configuration.isJsonMime(localVarHttpHeaderAcceptSelected)) {
        responseType_ = "json";
      } else {
        responseType_ = "blob";
      }
    }
    let localVarPath = `/entities/labels/${this.configuration.encodeParam({ name: "id", value: id, in: "path", style: "simple", explode: false, dataType: "string", dataFormat: void 0 })}`;
    return this.httpClient.request("put", `${this.configuration.basePath}${localVarPath}`, {
      context: localVarHttpContext,
      body: request,
      responseType: responseType_,
      withCredentials: this.configuration.withCredentials,
      headers: localVarHeaders,
      observe,
      transferCache: localVarTransferCache,
      reportProgress
    });
  }
  static \u0275fac = function LabelsService_Factory(__ngFactoryType__) {
    return new (__ngFactoryType__ || _LabelsService)(\u0275\u0275inject(HttpClient), \u0275\u0275inject(BASE_PATH, 8), \u0275\u0275inject(Configuration, 8));
  };
  static \u0275prov = /* @__PURE__ */ \u0275\u0275defineInjectable({ token: _LabelsService, factory: _LabelsService.\u0275fac, providedIn: "root" });
};
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(LabelsService, [{
    type: Injectable,
    args: [{
      providedIn: "root"
    }]
  }], () => [{ type: HttpClient }, { type: void 0, decorators: [{
    type: Optional
  }, {
    type: Inject,
    args: [BASE_PATH]
  }] }, { type: Configuration, decorators: [{
    type: Optional
  }] }], null);
})();

// src/app/api/api/lookups.service.ts
var LookupsService = class _LookupsService {
  httpClient;
  basePath = "";
  defaultHeaders = new HttpHeaders();
  configuration = new Configuration();
  encoder;
  constructor(httpClient, basePath, configuration) {
    this.httpClient = httpClient;
    if (configuration) {
      this.configuration = configuration;
    }
    if (typeof this.configuration.basePath !== "string") {
      const firstBasePath = Array.isArray(basePath) ? basePath[0] : void 0;
      if (firstBasePath != void 0) {
        basePath = firstBasePath;
      }
      if (typeof basePath !== "string") {
        basePath = this.basePath;
      }
      this.configuration.basePath = basePath;
    }
    this.encoder = this.configuration.encoder || new CustomHttpParameterCodec();
  }
  // @ts-ignore
  addToHttpParams(httpParams, value, key) {
    if (typeof value === "object" && value instanceof Date === false) {
      httpParams = this.addToHttpParamsRecursive(httpParams, value);
    } else {
      httpParams = this.addToHttpParamsRecursive(httpParams, value, key);
    }
    return httpParams;
  }
  addToHttpParamsRecursive(httpParams, value, key) {
    if (value == null) {
      return httpParams;
    }
    if (typeof value === "object") {
      if (Array.isArray(value)) {
        value.forEach((elem) => httpParams = this.addToHttpParamsRecursive(httpParams, elem, key));
      } else if (value instanceof Date) {
        if (key != null) {
          httpParams = httpParams.append(key, value.toISOString().substring(0, 10));
        } else {
          throw Error("key may not be null if value is Date");
        }
      } else {
        Object.keys(value).forEach((k) => httpParams = this.addToHttpParamsRecursive(httpParams, value[k], key != null ? `${key}.${k}` : k));
      }
    } else if (key != null) {
      httpParams = httpParams.append(key, value);
    } else {
      throw Error("key may not be null if value is not object or array");
    }
    return httpParams;
  }
  getLookups(entity, observe = "body", reportProgress = false, options) {
    if (entity === null || entity === void 0) {
      throw new Error("Required parameter entity was null or undefined when calling getLookups.");
    }
    let localVarHeaders = this.defaultHeaders;
    let localVarCredential;
    localVarCredential = this.configuration.lookupCredential("access_token");
    if (localVarCredential) {
      localVarHeaders = localVarHeaders.set("x-access-token", localVarCredential);
    }
    let localVarHttpHeaderAcceptSelected = options && options.httpHeaderAccept;
    if (localVarHttpHeaderAcceptSelected === void 0) {
      const httpHeaderAccepts = [
        "application/json"
      ];
      localVarHttpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
    }
    if (localVarHttpHeaderAcceptSelected !== void 0) {
      localVarHeaders = localVarHeaders.set("Accept", localVarHttpHeaderAcceptSelected);
    }
    let localVarHttpContext = options && options.context;
    if (localVarHttpContext === void 0) {
      localVarHttpContext = new HttpContext();
    }
    let localVarTransferCache = options && options.transferCache;
    if (localVarTransferCache === void 0) {
      localVarTransferCache = true;
    }
    let responseType_ = "json";
    if (localVarHttpHeaderAcceptSelected) {
      if (localVarHttpHeaderAcceptSelected.startsWith("text")) {
        responseType_ = "text";
      } else if (this.configuration.isJsonMime(localVarHttpHeaderAcceptSelected)) {
        responseType_ = "json";
      } else {
        responseType_ = "blob";
      }
    }
    let localVarPath = `/entities/lookups/${this.configuration.encodeParam({ name: "entity", value: entity, in: "path", style: "simple", explode: false, dataType: "string", dataFormat: void 0 })}`;
    return this.httpClient.request("get", `${this.configuration.basePath}${localVarPath}`, {
      context: localVarHttpContext,
      responseType: responseType_,
      withCredentials: this.configuration.withCredentials,
      headers: localVarHeaders,
      observe,
      transferCache: localVarTransferCache,
      reportProgress
    });
  }
  static \u0275fac = function LookupsService_Factory(__ngFactoryType__) {
    return new (__ngFactoryType__ || _LookupsService)(\u0275\u0275inject(HttpClient), \u0275\u0275inject(BASE_PATH, 8), \u0275\u0275inject(Configuration, 8));
  };
  static \u0275prov = /* @__PURE__ */ \u0275\u0275defineInjectable({ token: _LookupsService, factory: _LookupsService.\u0275fac, providedIn: "root" });
};
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(LookupsService, [{
    type: Injectable,
    args: [{
      providedIn: "root"
    }]
  }], () => [{ type: HttpClient }, { type: void 0, decorators: [{
    type: Optional
  }, {
    type: Inject,
    args: [BASE_PATH]
  }] }, { type: Configuration, decorators: [{
    type: Optional
  }] }], null);
})();

// src/app/api/api/map.service.ts
var MapService = class _MapService {
  httpClient;
  basePath = "";
  defaultHeaders = new HttpHeaders();
  configuration = new Configuration();
  encoder;
  constructor(httpClient, basePath, configuration) {
    this.httpClient = httpClient;
    if (configuration) {
      this.configuration = configuration;
    }
    if (typeof this.configuration.basePath !== "string") {
      const firstBasePath = Array.isArray(basePath) ? basePath[0] : void 0;
      if (firstBasePath != void 0) {
        basePath = firstBasePath;
      }
      if (typeof basePath !== "string") {
        basePath = this.basePath;
      }
      this.configuration.basePath = basePath;
    }
    this.encoder = this.configuration.encoder || new CustomHttpParameterCodec();
  }
  // @ts-ignore
  addToHttpParams(httpParams, value, key) {
    if (typeof value === "object" && value instanceof Date === false) {
      httpParams = this.addToHttpParamsRecursive(httpParams, value);
    } else {
      httpParams = this.addToHttpParamsRecursive(httpParams, value, key);
    }
    return httpParams;
  }
  addToHttpParamsRecursive(httpParams, value, key) {
    if (value == null) {
      return httpParams;
    }
    if (typeof value === "object") {
      if (Array.isArray(value)) {
        value.forEach((elem) => httpParams = this.addToHttpParamsRecursive(httpParams, elem, key));
      } else if (value instanceof Date) {
        if (key != null) {
          httpParams = httpParams.append(key, value.toISOString().substring(0, 10));
        } else {
          throw Error("key may not be null if value is Date");
        }
      } else {
        Object.keys(value).forEach((k) => httpParams = this.addToHttpParamsRecursive(httpParams, value[k], key != null ? `${key}.${k}` : k));
      }
    } else if (key != null) {
      httpParams = httpParams.append(key, value);
    } else {
      throw Error("key may not be null if value is not object or array");
    }
    return httpParams;
  }
  geocodeForward(client, query, observe = "body", reportProgress = false, options) {
    if (client === null || client === void 0) {
      throw new Error("Required parameter client was null or undefined when calling geocodeForward.");
    }
    if (query === null || query === void 0) {
      throw new Error("Required parameter query was null or undefined when calling geocodeForward.");
    }
    let localVarQueryParameters = new HttpParams({ encoder: this.encoder });
    if (query !== void 0 && query !== null) {
      localVarQueryParameters = this.addToHttpParams(localVarQueryParameters, query, "query");
    }
    let localVarHeaders = this.defaultHeaders;
    let localVarCredential;
    localVarCredential = this.configuration.lookupCredential("access_token");
    if (localVarCredential) {
      localVarHeaders = localVarHeaders.set("x-access-token", localVarCredential);
    }
    let localVarHttpHeaderAcceptSelected = options && options.httpHeaderAccept;
    if (localVarHttpHeaderAcceptSelected === void 0) {
      const httpHeaderAccepts = [
        "application/json"
      ];
      localVarHttpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
    }
    if (localVarHttpHeaderAcceptSelected !== void 0) {
      localVarHeaders = localVarHeaders.set("Accept", localVarHttpHeaderAcceptSelected);
    }
    let localVarHttpContext = options && options.context;
    if (localVarHttpContext === void 0) {
      localVarHttpContext = new HttpContext();
    }
    let localVarTransferCache = options && options.transferCache;
    if (localVarTransferCache === void 0) {
      localVarTransferCache = true;
    }
    let responseType_ = "json";
    if (localVarHttpHeaderAcceptSelected) {
      if (localVarHttpHeaderAcceptSelected.startsWith("text")) {
        responseType_ = "text";
      } else if (this.configuration.isJsonMime(localVarHttpHeaderAcceptSelected)) {
        responseType_ = "json";
      } else {
        responseType_ = "blob";
      }
    }
    let localVarPath = `/map/geocode/${this.configuration.encodeParam({ name: "client", value: client, in: "path", style: "simple", explode: false, dataType: "string", dataFormat: void 0 })}/forward`;
    return this.httpClient.request("get", `${this.configuration.basePath}${localVarPath}`, {
      context: localVarHttpContext,
      params: localVarQueryParameters,
      responseType: responseType_,
      withCredentials: this.configuration.withCredentials,
      headers: localVarHeaders,
      observe,
      transferCache: localVarTransferCache,
      reportProgress
    });
  }
  geocodeReverse(client, lat, lon, observe = "body", reportProgress = false, options) {
    if (client === null || client === void 0) {
      throw new Error("Required parameter client was null or undefined when calling geocodeReverse.");
    }
    if (lat === null || lat === void 0) {
      throw new Error("Required parameter lat was null or undefined when calling geocodeReverse.");
    }
    if (lon === null || lon === void 0) {
      throw new Error("Required parameter lon was null or undefined when calling geocodeReverse.");
    }
    let localVarQueryParameters = new HttpParams({ encoder: this.encoder });
    if (lat !== void 0 && lat !== null) {
      localVarQueryParameters = this.addToHttpParams(localVarQueryParameters, lat, "lat");
    }
    if (lon !== void 0 && lon !== null) {
      localVarQueryParameters = this.addToHttpParams(localVarQueryParameters, lon, "lon");
    }
    let localVarHeaders = this.defaultHeaders;
    let localVarCredential;
    localVarCredential = this.configuration.lookupCredential("access_token");
    if (localVarCredential) {
      localVarHeaders = localVarHeaders.set("x-access-token", localVarCredential);
    }
    let localVarHttpHeaderAcceptSelected = options && options.httpHeaderAccept;
    if (localVarHttpHeaderAcceptSelected === void 0) {
      const httpHeaderAccepts = [
        "application/json"
      ];
      localVarHttpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
    }
    if (localVarHttpHeaderAcceptSelected !== void 0) {
      localVarHeaders = localVarHeaders.set("Accept", localVarHttpHeaderAcceptSelected);
    }
    let localVarHttpContext = options && options.context;
    if (localVarHttpContext === void 0) {
      localVarHttpContext = new HttpContext();
    }
    let localVarTransferCache = options && options.transferCache;
    if (localVarTransferCache === void 0) {
      localVarTransferCache = true;
    }
    let responseType_ = "json";
    if (localVarHttpHeaderAcceptSelected) {
      if (localVarHttpHeaderAcceptSelected.startsWith("text")) {
        responseType_ = "text";
      } else if (this.configuration.isJsonMime(localVarHttpHeaderAcceptSelected)) {
        responseType_ = "json";
      } else {
        responseType_ = "blob";
      }
    }
    let localVarPath = `/map/geocode/${this.configuration.encodeParam({ name: "client", value: client, in: "path", style: "simple", explode: false, dataType: "string", dataFormat: void 0 })}/reverse`;
    return this.httpClient.request("get", `${this.configuration.basePath}${localVarPath}`, {
      context: localVarHttpContext,
      params: localVarQueryParameters,
      responseType: responseType_,
      withCredentials: this.configuration.withCredentials,
      headers: localVarHeaders,
      observe,
      transferCache: localVarTransferCache,
      reportProgress
    });
  }
  getRoute(client, strategy, coords, src, observe = "body", reportProgress = false, options) {
    if (client === null || client === void 0) {
      throw new Error("Required parameter client was null or undefined when calling getRoute.");
    }
    if (strategy === null || strategy === void 0) {
      throw new Error("Required parameter strategy was null or undefined when calling getRoute.");
    }
    if (coords === null || coords === void 0) {
      throw new Error("Required parameter coords was null or undefined when calling getRoute.");
    }
    let localVarQueryParameters = new HttpParams({ encoder: this.encoder });
    if (strategy !== void 0 && strategy !== null) {
      localVarQueryParameters = this.addToHttpParams(localVarQueryParameters, strategy, "strategy");
    }
    if (coords !== void 0 && coords !== null) {
      localVarQueryParameters = this.addToHttpParams(localVarQueryParameters, coords, "coords");
    }
    if (src !== void 0 && src !== null) {
      localVarQueryParameters = this.addToHttpParams(localVarQueryParameters, src, "src");
    }
    let localVarHeaders = this.defaultHeaders;
    let localVarCredential;
    localVarCredential = this.configuration.lookupCredential("access_token");
    if (localVarCredential) {
      localVarHeaders = localVarHeaders.set("x-access-token", localVarCredential);
    }
    let localVarHttpHeaderAcceptSelected = options && options.httpHeaderAccept;
    if (localVarHttpHeaderAcceptSelected === void 0) {
      const httpHeaderAccepts = [
        "application/json"
      ];
      localVarHttpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
    }
    if (localVarHttpHeaderAcceptSelected !== void 0) {
      localVarHeaders = localVarHeaders.set("Accept", localVarHttpHeaderAcceptSelected);
    }
    let localVarHttpContext = options && options.context;
    if (localVarHttpContext === void 0) {
      localVarHttpContext = new HttpContext();
    }
    let localVarTransferCache = options && options.transferCache;
    if (localVarTransferCache === void 0) {
      localVarTransferCache = true;
    }
    let responseType_ = "json";
    if (localVarHttpHeaderAcceptSelected) {
      if (localVarHttpHeaderAcceptSelected.startsWith("text")) {
        responseType_ = "text";
      } else if (this.configuration.isJsonMime(localVarHttpHeaderAcceptSelected)) {
        responseType_ = "json";
      } else {
        responseType_ = "blob";
      }
    }
    let localVarPath = `/map/routing/${this.configuration.encodeParam({ name: "client", value: client, in: "path", style: "simple", explode: false, dataType: "string", dataFormat: void 0 })}/route`;
    return this.httpClient.request("get", `${this.configuration.basePath}${localVarPath}`, {
      context: localVarHttpContext,
      params: localVarQueryParameters,
      responseType: responseType_,
      withCredentials: this.configuration.withCredentials,
      headers: localVarHeaders,
      observe,
      transferCache: localVarTransferCache,
      reportProgress
    });
  }
  static \u0275fac = function MapService_Factory(__ngFactoryType__) {
    return new (__ngFactoryType__ || _MapService)(\u0275\u0275inject(HttpClient), \u0275\u0275inject(BASE_PATH, 8), \u0275\u0275inject(Configuration, 8));
  };
  static \u0275prov = /* @__PURE__ */ \u0275\u0275defineInjectable({ token: _MapService, factory: _MapService.\u0275fac, providedIn: "root" });
};
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(MapService, [{
    type: Injectable,
    args: [{
      providedIn: "root"
    }]
  }], () => [{ type: HttpClient }, { type: void 0, decorators: [{
    type: Optional
  }, {
    type: Inject,
    args: [BASE_PATH]
  }] }, { type: Configuration, decorators: [{
    type: Optional
  }] }], null);
})();

// src/app/api/api/mapSets.service.ts
var MapSetsService = class _MapSetsService {
  httpClient;
  basePath = "";
  defaultHeaders = new HttpHeaders();
  configuration = new Configuration();
  encoder;
  constructor(httpClient, basePath, configuration) {
    this.httpClient = httpClient;
    if (configuration) {
      this.configuration = configuration;
    }
    if (typeof this.configuration.basePath !== "string") {
      const firstBasePath = Array.isArray(basePath) ? basePath[0] : void 0;
      if (firstBasePath != void 0) {
        basePath = firstBasePath;
      }
      if (typeof basePath !== "string") {
        basePath = this.basePath;
      }
      this.configuration.basePath = basePath;
    }
    this.encoder = this.configuration.encoder || new CustomHttpParameterCodec();
  }
  // @ts-ignore
  addToHttpParams(httpParams, value, key) {
    if (typeof value === "object" && value instanceof Date === false) {
      httpParams = this.addToHttpParamsRecursive(httpParams, value);
    } else {
      httpParams = this.addToHttpParamsRecursive(httpParams, value, key);
    }
    return httpParams;
  }
  addToHttpParamsRecursive(httpParams, value, key) {
    if (value == null) {
      return httpParams;
    }
    if (typeof value === "object") {
      if (Array.isArray(value)) {
        value.forEach((elem) => httpParams = this.addToHttpParamsRecursive(httpParams, elem, key));
      } else if (value instanceof Date) {
        if (key != null) {
          httpParams = httpParams.append(key, value.toISOString().substring(0, 10));
        } else {
          throw Error("key may not be null if value is Date");
        }
      } else {
        Object.keys(value).forEach((k) => httpParams = this.addToHttpParamsRecursive(httpParams, value[k], key != null ? `${key}.${k}` : k));
      }
    } else if (key != null) {
      httpParams = httpParams.append(key, value);
    } else {
      throw Error("key may not be null if value is not object or array");
    }
    return httpParams;
  }
  createMapSet(request, observe = "body", reportProgress = false, options) {
    if (request === null || request === void 0) {
      throw new Error("Required parameter request was null or undefined when calling createMapSet.");
    }
    let localVarHeaders = this.defaultHeaders;
    let localVarCredential;
    localVarCredential = this.configuration.lookupCredential("access_token");
    if (localVarCredential) {
      localVarHeaders = localVarHeaders.set("x-access-token", localVarCredential);
    }
    let localVarHttpHeaderAcceptSelected = options && options.httpHeaderAccept;
    if (localVarHttpHeaderAcceptSelected === void 0) {
      const httpHeaderAccepts = [
        "application/json"
      ];
      localVarHttpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
    }
    if (localVarHttpHeaderAcceptSelected !== void 0) {
      localVarHeaders = localVarHeaders.set("Accept", localVarHttpHeaderAcceptSelected);
    }
    let localVarHttpContext = options && options.context;
    if (localVarHttpContext === void 0) {
      localVarHttpContext = new HttpContext();
    }
    let localVarTransferCache = options && options.transferCache;
    if (localVarTransferCache === void 0) {
      localVarTransferCache = true;
    }
    const consumes = [
      "application/json"
    ];
    const httpContentTypeSelected = this.configuration.selectHeaderContentType(consumes);
    if (httpContentTypeSelected !== void 0) {
      localVarHeaders = localVarHeaders.set("Content-Type", httpContentTypeSelected);
    }
    let responseType_ = "json";
    if (localVarHttpHeaderAcceptSelected) {
      if (localVarHttpHeaderAcceptSelected.startsWith("text")) {
        responseType_ = "text";
      } else if (this.configuration.isJsonMime(localVarHttpHeaderAcceptSelected)) {
        responseType_ = "json";
      } else {
        responseType_ = "blob";
      }
    }
    let localVarPath = `/entities/mapsets`;
    return this.httpClient.request("post", `${this.configuration.basePath}${localVarPath}`, {
      context: localVarHttpContext,
      body: request,
      responseType: responseType_,
      withCredentials: this.configuration.withCredentials,
      headers: localVarHeaders,
      observe,
      transferCache: localVarTransferCache,
      reportProgress
    });
  }
  getMapSet(id, observe = "body", reportProgress = false, options) {
    if (id === null || id === void 0) {
      throw new Error("Required parameter id was null or undefined when calling getMapSet.");
    }
    let localVarHeaders = this.defaultHeaders;
    let localVarCredential;
    localVarCredential = this.configuration.lookupCredential("access_token");
    if (localVarCredential) {
      localVarHeaders = localVarHeaders.set("x-access-token", localVarCredential);
    }
    let localVarHttpHeaderAcceptSelected = options && options.httpHeaderAccept;
    if (localVarHttpHeaderAcceptSelected === void 0) {
      const httpHeaderAccepts = [
        "application/json"
      ];
      localVarHttpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
    }
    if (localVarHttpHeaderAcceptSelected !== void 0) {
      localVarHeaders = localVarHeaders.set("Accept", localVarHttpHeaderAcceptSelected);
    }
    let localVarHttpContext = options && options.context;
    if (localVarHttpContext === void 0) {
      localVarHttpContext = new HttpContext();
    }
    let localVarTransferCache = options && options.transferCache;
    if (localVarTransferCache === void 0) {
      localVarTransferCache = true;
    }
    let responseType_ = "json";
    if (localVarHttpHeaderAcceptSelected) {
      if (localVarHttpHeaderAcceptSelected.startsWith("text")) {
        responseType_ = "text";
      } else if (this.configuration.isJsonMime(localVarHttpHeaderAcceptSelected)) {
        responseType_ = "json";
      } else {
        responseType_ = "blob";
      }
    }
    let localVarPath = `/entities/mapsets/${this.configuration.encodeParam({ name: "id", value: id, in: "path", style: "simple", explode: false, dataType: "string", dataFormat: void 0 })}`;
    return this.httpClient.request("get", `${this.configuration.basePath}${localVarPath}`, {
      context: localVarHttpContext,
      responseType: responseType_,
      withCredentials: this.configuration.withCredentials,
      headers: localVarHeaders,
      observe,
      transferCache: localVarTransferCache,
      reportProgress
    });
  }
  listMapSets(owner, offset, limit, sort, filter, observe = "body", reportProgress = false, options) {
    if (owner === null || owner === void 0) {
      throw new Error("Required parameter owner was null or undefined when calling listMapSets.");
    }
    let localVarQueryParameters = new HttpParams({ encoder: this.encoder });
    if (owner !== void 0 && owner !== null) {
      localVarQueryParameters = this.addToHttpParams(localVarQueryParameters, owner, "owner");
    }
    if (offset !== void 0 && offset !== null) {
      localVarQueryParameters = this.addToHttpParams(localVarQueryParameters, offset, "offset");
    }
    if (limit !== void 0 && limit !== null) {
      localVarQueryParameters = this.addToHttpParams(localVarQueryParameters, limit, "limit");
    }
    if (sort !== void 0 && sort !== null) {
      localVarQueryParameters = this.addToHttpParams(localVarQueryParameters, sort, "sort");
    }
    if (filter !== void 0 && filter !== null) {
      localVarQueryParameters = this.addToHttpParams(localVarQueryParameters, filter, "filter");
    }
    let localVarHeaders = this.defaultHeaders;
    let localVarCredential;
    localVarCredential = this.configuration.lookupCredential("access_token");
    if (localVarCredential) {
      localVarHeaders = localVarHeaders.set("x-access-token", localVarCredential);
    }
    let localVarHttpHeaderAcceptSelected = options && options.httpHeaderAccept;
    if (localVarHttpHeaderAcceptSelected === void 0) {
      const httpHeaderAccepts = [
        "application/json"
      ];
      localVarHttpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
    }
    if (localVarHttpHeaderAcceptSelected !== void 0) {
      localVarHeaders = localVarHeaders.set("Accept", localVarHttpHeaderAcceptSelected);
    }
    let localVarHttpContext = options && options.context;
    if (localVarHttpContext === void 0) {
      localVarHttpContext = new HttpContext();
    }
    let localVarTransferCache = options && options.transferCache;
    if (localVarTransferCache === void 0) {
      localVarTransferCache = true;
    }
    let responseType_ = "json";
    if (localVarHttpHeaderAcceptSelected) {
      if (localVarHttpHeaderAcceptSelected.startsWith("text")) {
        responseType_ = "text";
      } else if (this.configuration.isJsonMime(localVarHttpHeaderAcceptSelected)) {
        responseType_ = "json";
      } else {
        responseType_ = "blob";
      }
    }
    let localVarPath = `/entities/mapsets`;
    return this.httpClient.request("get", `${this.configuration.basePath}${localVarPath}`, {
      context: localVarHttpContext,
      params: localVarQueryParameters,
      responseType: responseType_,
      withCredentials: this.configuration.withCredentials,
      headers: localVarHeaders,
      observe,
      transferCache: localVarTransferCache,
      reportProgress
    });
  }
  updateMapSet(id, request, observe = "body", reportProgress = false, options) {
    if (id === null || id === void 0) {
      throw new Error("Required parameter id was null or undefined when calling updateMapSet.");
    }
    if (request === null || request === void 0) {
      throw new Error("Required parameter request was null or undefined when calling updateMapSet.");
    }
    let localVarHeaders = this.defaultHeaders;
    let localVarCredential;
    localVarCredential = this.configuration.lookupCredential("access_token");
    if (localVarCredential) {
      localVarHeaders = localVarHeaders.set("x-access-token", localVarCredential);
    }
    let localVarHttpHeaderAcceptSelected = options && options.httpHeaderAccept;
    if (localVarHttpHeaderAcceptSelected === void 0) {
      const httpHeaderAccepts = [
        "application/json"
      ];
      localVarHttpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
    }
    if (localVarHttpHeaderAcceptSelected !== void 0) {
      localVarHeaders = localVarHeaders.set("Accept", localVarHttpHeaderAcceptSelected);
    }
    let localVarHttpContext = options && options.context;
    if (localVarHttpContext === void 0) {
      localVarHttpContext = new HttpContext();
    }
    let localVarTransferCache = options && options.transferCache;
    if (localVarTransferCache === void 0) {
      localVarTransferCache = true;
    }
    const consumes = [
      "application/json"
    ];
    const httpContentTypeSelected = this.configuration.selectHeaderContentType(consumes);
    if (httpContentTypeSelected !== void 0) {
      localVarHeaders = localVarHeaders.set("Content-Type", httpContentTypeSelected);
    }
    let responseType_ = "json";
    if (localVarHttpHeaderAcceptSelected) {
      if (localVarHttpHeaderAcceptSelected.startsWith("text")) {
        responseType_ = "text";
      } else if (this.configuration.isJsonMime(localVarHttpHeaderAcceptSelected)) {
        responseType_ = "json";
      } else {
        responseType_ = "blob";
      }
    }
    let localVarPath = `/entities/mapsets/${this.configuration.encodeParam({ name: "id", value: id, in: "path", style: "simple", explode: false, dataType: "string", dataFormat: void 0 })}`;
    return this.httpClient.request("put", `${this.configuration.basePath}${localVarPath}`, {
      context: localVarHttpContext,
      body: request,
      responseType: responseType_,
      withCredentials: this.configuration.withCredentials,
      headers: localVarHeaders,
      observe,
      transferCache: localVarTransferCache,
      reportProgress
    });
  }
  static \u0275fac = function MapSetsService_Factory(__ngFactoryType__) {
    return new (__ngFactoryType__ || _MapSetsService)(\u0275\u0275inject(HttpClient), \u0275\u0275inject(BASE_PATH, 8), \u0275\u0275inject(Configuration, 8));
  };
  static \u0275prov = /* @__PURE__ */ \u0275\u0275defineInjectable({ token: _MapSetsService, factory: _MapSetsService.\u0275fac, providedIn: "root" });
};
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(MapSetsService, [{
    type: Injectable,
    args: [{
      providedIn: "root"
    }]
  }], () => [{ type: HttpClient }, { type: void 0, decorators: [{
    type: Optional
  }, {
    type: Inject,
    args: [BASE_PATH]
  }] }, { type: Configuration, decorators: [{
    type: Optional
  }] }], null);
})();

// src/app/api/api/media.service.ts
var MediaService = class _MediaService {
  httpClient;
  basePath = "";
  defaultHeaders = new HttpHeaders();
  configuration = new Configuration();
  encoder;
  constructor(httpClient, basePath, configuration) {
    this.httpClient = httpClient;
    if (configuration) {
      this.configuration = configuration;
    }
    if (typeof this.configuration.basePath !== "string") {
      const firstBasePath = Array.isArray(basePath) ? basePath[0] : void 0;
      if (firstBasePath != void 0) {
        basePath = firstBasePath;
      }
      if (typeof basePath !== "string") {
        basePath = this.basePath;
      }
      this.configuration.basePath = basePath;
    }
    this.encoder = this.configuration.encoder || new CustomHttpParameterCodec();
  }
  // @ts-ignore
  addToHttpParams(httpParams, value, key) {
    if (typeof value === "object" && value instanceof Date === false) {
      httpParams = this.addToHttpParamsRecursive(httpParams, value);
    } else {
      httpParams = this.addToHttpParamsRecursive(httpParams, value, key);
    }
    return httpParams;
  }
  addToHttpParamsRecursive(httpParams, value, key) {
    if (value == null) {
      return httpParams;
    }
    if (typeof value === "object") {
      if (Array.isArray(value)) {
        value.forEach((elem) => httpParams = this.addToHttpParamsRecursive(httpParams, elem, key));
      } else if (value instanceof Date) {
        if (key != null) {
          httpParams = httpParams.append(key, value.toISOString().substring(0, 10));
        } else {
          throw Error("key may not be null if value is Date");
        }
      } else {
        Object.keys(value).forEach((k) => httpParams = this.addToHttpParamsRecursive(httpParams, value[k], key != null ? `${key}.${k}` : k));
      }
    } else if (key != null) {
      httpParams = httpParams.append(key, value);
    } else {
      throw Error("key may not be null if value is not object or array");
    }
    return httpParams;
  }
  cancelMedia(id, observe = "body", reportProgress = false, options) {
    if (id === null || id === void 0) {
      throw new Error("Required parameter id was null or undefined when calling cancelMedia.");
    }
    let localVarHeaders = this.defaultHeaders;
    let localVarCredential;
    localVarCredential = this.configuration.lookupCredential("access_token");
    if (localVarCredential) {
      localVarHeaders = localVarHeaders.set("x-access-token", localVarCredential);
    }
    let localVarHttpHeaderAcceptSelected = options && options.httpHeaderAccept;
    if (localVarHttpHeaderAcceptSelected === void 0) {
      const httpHeaderAccepts = [
        "application/json"
      ];
      localVarHttpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
    }
    if (localVarHttpHeaderAcceptSelected !== void 0) {
      localVarHeaders = localVarHeaders.set("Accept", localVarHttpHeaderAcceptSelected);
    }
    let localVarHttpContext = options && options.context;
    if (localVarHttpContext === void 0) {
      localVarHttpContext = new HttpContext();
    }
    let localVarTransferCache = options && options.transferCache;
    if (localVarTransferCache === void 0) {
      localVarTransferCache = true;
    }
    let responseType_ = "json";
    if (localVarHttpHeaderAcceptSelected) {
      if (localVarHttpHeaderAcceptSelected.startsWith("text")) {
        responseType_ = "text";
      } else if (this.configuration.isJsonMime(localVarHttpHeaderAcceptSelected)) {
        responseType_ = "json";
      } else {
        responseType_ = "blob";
      }
    }
    let localVarPath = `/media/${this.configuration.encodeParam({ name: "id", value: id, in: "path", style: "simple", explode: false, dataType: "string", dataFormat: void 0 })}/cancel`;
    return this.httpClient.request("post", `${this.configuration.basePath}${localVarPath}`, {
      context: localVarHttpContext,
      responseType: responseType_,
      withCredentials: this.configuration.withCredentials,
      headers: localVarHeaders,
      observe,
      transferCache: localVarTransferCache,
      reportProgress
    });
  }
  createVideoEvent(request, observe = "body", reportProgress = false, options) {
    if (request === null || request === void 0) {
      throw new Error("Required parameter request was null or undefined when calling createVideoEvent.");
    }
    let localVarHeaders = this.defaultHeaders;
    let localVarCredential;
    localVarCredential = this.configuration.lookupCredential("access_token");
    if (localVarCredential) {
      localVarHeaders = localVarHeaders.set("x-access-token", localVarCredential);
    }
    let localVarHttpHeaderAcceptSelected = options && options.httpHeaderAccept;
    if (localVarHttpHeaderAcceptSelected === void 0) {
      const httpHeaderAccepts = [
        "application/json"
      ];
      localVarHttpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
    }
    if (localVarHttpHeaderAcceptSelected !== void 0) {
      localVarHeaders = localVarHeaders.set("Accept", localVarHttpHeaderAcceptSelected);
    }
    let localVarHttpContext = options && options.context;
    if (localVarHttpContext === void 0) {
      localVarHttpContext = new HttpContext();
    }
    let localVarTransferCache = options && options.transferCache;
    if (localVarTransferCache === void 0) {
      localVarTransferCache = true;
    }
    const consumes = [
      "application/json"
    ];
    const httpContentTypeSelected = this.configuration.selectHeaderContentType(consumes);
    if (httpContentTypeSelected !== void 0) {
      localVarHeaders = localVarHeaders.set("Content-Type", httpContentTypeSelected);
    }
    let responseType_ = "json";
    if (localVarHttpHeaderAcceptSelected) {
      if (localVarHttpHeaderAcceptSelected.startsWith("text")) {
        responseType_ = "text";
      } else if (this.configuration.isJsonMime(localVarHttpHeaderAcceptSelected)) {
        responseType_ = "json";
      } else {
        responseType_ = "blob";
      }
    }
    let localVarPath = `/media/video/event`;
    return this.httpClient.request("post", `${this.configuration.basePath}${localVarPath}`, {
      context: localVarHttpContext,
      body: request,
      responseType: responseType_,
      withCredentials: this.configuration.withCredentials,
      headers: localVarHeaders,
      observe,
      transferCache: localVarTransferCache,
      reportProgress
    });
  }
  deleteMediaFile(id, observe = "body", reportProgress = false, options) {
    if (id === null || id === void 0) {
      throw new Error("Required parameter id was null or undefined when calling deleteMediaFile.");
    }
    let localVarHeaders = this.defaultHeaders;
    let localVarCredential;
    localVarCredential = this.configuration.lookupCredential("access_token");
    if (localVarCredential) {
      localVarHeaders = localVarHeaders.set("x-access-token", localVarCredential);
    }
    let localVarHttpHeaderAcceptSelected = options && options.httpHeaderAccept;
    if (localVarHttpHeaderAcceptSelected === void 0) {
      const httpHeaderAccepts = [
        "application/json"
      ];
      localVarHttpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
    }
    if (localVarHttpHeaderAcceptSelected !== void 0) {
      localVarHeaders = localVarHeaders.set("Accept", localVarHttpHeaderAcceptSelected);
    }
    let localVarHttpContext = options && options.context;
    if (localVarHttpContext === void 0) {
      localVarHttpContext = new HttpContext();
    }
    let localVarTransferCache = options && options.transferCache;
    if (localVarTransferCache === void 0) {
      localVarTransferCache = true;
    }
    let responseType_ = "json";
    if (localVarHttpHeaderAcceptSelected) {
      if (localVarHttpHeaderAcceptSelected.startsWith("text")) {
        responseType_ = "text";
      } else if (this.configuration.isJsonMime(localVarHttpHeaderAcceptSelected)) {
        responseType_ = "json";
      } else {
        responseType_ = "blob";
      }
    }
    let localVarPath = `/media/${this.configuration.encodeParam({ name: "id", value: id, in: "path", style: "simple", explode: false, dataType: "string", dataFormat: void 0 })}/file`;
    return this.httpClient.request("delete", `${this.configuration.basePath}${localVarPath}`, {
      context: localVarHttpContext,
      responseType: responseType_,
      withCredentials: this.configuration.withCredentials,
      headers: localVarHeaders,
      observe,
      transferCache: localVarTransferCache,
      reportProgress
    });
  }
  getMedia(id, observe = "body", reportProgress = false, options) {
    if (id === null || id === void 0) {
      throw new Error("Required parameter id was null or undefined when calling getMedia.");
    }
    let localVarHeaders = this.defaultHeaders;
    let localVarCredential;
    localVarCredential = this.configuration.lookupCredential("access_token");
    if (localVarCredential) {
      localVarHeaders = localVarHeaders.set("x-access-token", localVarCredential);
    }
    let localVarHttpHeaderAcceptSelected = options && options.httpHeaderAccept;
    if (localVarHttpHeaderAcceptSelected === void 0) {
      const httpHeaderAccepts = [
        "application/json"
      ];
      localVarHttpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
    }
    if (localVarHttpHeaderAcceptSelected !== void 0) {
      localVarHeaders = localVarHeaders.set("Accept", localVarHttpHeaderAcceptSelected);
    }
    let localVarHttpContext = options && options.context;
    if (localVarHttpContext === void 0) {
      localVarHttpContext = new HttpContext();
    }
    let localVarTransferCache = options && options.transferCache;
    if (localVarTransferCache === void 0) {
      localVarTransferCache = true;
    }
    let responseType_ = "json";
    if (localVarHttpHeaderAcceptSelected) {
      if (localVarHttpHeaderAcceptSelected.startsWith("text")) {
        responseType_ = "text";
      } else if (this.configuration.isJsonMime(localVarHttpHeaderAcceptSelected)) {
        responseType_ = "json";
      } else {
        responseType_ = "blob";
      }
    }
    let localVarPath = `/media/${this.configuration.encodeParam({ name: "id", value: id, in: "path", style: "simple", explode: false, dataType: "string", dataFormat: void 0 })}`;
    return this.httpClient.request("get", `${this.configuration.basePath}${localVarPath}`, {
      context: localVarHttpContext,
      responseType: responseType_,
      withCredentials: this.configuration.withCredentials,
      headers: localVarHeaders,
      observe,
      transferCache: localVarTransferCache,
      reportProgress
    });
  }
  getMediaFile(asset, filename, observe = "body", reportProgress = false, options) {
    if (asset === null || asset === void 0) {
      throw new Error("Required parameter asset was null or undefined when calling getMediaFile.");
    }
    if (filename === null || filename === void 0) {
      throw new Error("Required parameter filename was null or undefined when calling getMediaFile.");
    }
    let localVarQueryParameters = new HttpParams({ encoder: this.encoder });
    if (filename !== void 0 && filename !== null) {
      localVarQueryParameters = this.addToHttpParams(localVarQueryParameters, filename, "filename");
    }
    let localVarHeaders = this.defaultHeaders;
    let localVarCredential;
    localVarCredential = this.configuration.lookupCredential("access_token");
    if (localVarCredential) {
      localVarHeaders = localVarHeaders.set("x-access-token", localVarCredential);
    }
    let localVarHttpHeaderAcceptSelected = options && options.httpHeaderAccept;
    if (localVarHttpHeaderAcceptSelected === void 0) {
      const httpHeaderAccepts = [];
      localVarHttpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
    }
    if (localVarHttpHeaderAcceptSelected !== void 0) {
      localVarHeaders = localVarHeaders.set("Accept", localVarHttpHeaderAcceptSelected);
    }
    let localVarHttpContext = options && options.context;
    if (localVarHttpContext === void 0) {
      localVarHttpContext = new HttpContext();
    }
    let localVarTransferCache = options && options.transferCache;
    if (localVarTransferCache === void 0) {
      localVarTransferCache = true;
    }
    let responseType_ = "json";
    if (localVarHttpHeaderAcceptSelected) {
      if (localVarHttpHeaderAcceptSelected.startsWith("text")) {
        responseType_ = "text";
      } else if (this.configuration.isJsonMime(localVarHttpHeaderAcceptSelected)) {
        responseType_ = "json";
      } else {
        responseType_ = "blob";
      }
    }
    let localVarPath = `/media/${this.configuration.encodeParam({ name: "asset", value: asset, in: "path", style: "simple", explode: false, dataType: "string", dataFormat: void 0 })}/file`;
    return this.httpClient.request("get", `${this.configuration.basePath}${localVarPath}`, {
      context: localVarHttpContext,
      params: localVarQueryParameters,
      responseType: responseType_,
      withCredentials: this.configuration.withCredentials,
      headers: localVarHeaders,
      observe,
      transferCache: localVarTransferCache,
      reportProgress
    });
  }
  getMediaInfo(asset, filename, observe = "body", reportProgress = false, options) {
    if (asset === null || asset === void 0) {
      throw new Error("Required parameter asset was null or undefined when calling getMediaInfo.");
    }
    if (filename === null || filename === void 0) {
      throw new Error("Required parameter filename was null or undefined when calling getMediaInfo.");
    }
    let localVarQueryParameters = new HttpParams({ encoder: this.encoder });
    if (filename !== void 0 && filename !== null) {
      localVarQueryParameters = this.addToHttpParams(localVarQueryParameters, filename, "filename");
    }
    let localVarHeaders = this.defaultHeaders;
    let localVarCredential;
    localVarCredential = this.configuration.lookupCredential("access_token");
    if (localVarCredential) {
      localVarHeaders = localVarHeaders.set("x-access-token", localVarCredential);
    }
    let localVarHttpHeaderAcceptSelected = options && options.httpHeaderAccept;
    if (localVarHttpHeaderAcceptSelected === void 0) {
      const httpHeaderAccepts = [
        "application/json"
      ];
      localVarHttpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
    }
    if (localVarHttpHeaderAcceptSelected !== void 0) {
      localVarHeaders = localVarHeaders.set("Accept", localVarHttpHeaderAcceptSelected);
    }
    let localVarHttpContext = options && options.context;
    if (localVarHttpContext === void 0) {
      localVarHttpContext = new HttpContext();
    }
    let localVarTransferCache = options && options.transferCache;
    if (localVarTransferCache === void 0) {
      localVarTransferCache = true;
    }
    let responseType_ = "json";
    if (localVarHttpHeaderAcceptSelected) {
      if (localVarHttpHeaderAcceptSelected.startsWith("text")) {
        responseType_ = "text";
      } else if (this.configuration.isJsonMime(localVarHttpHeaderAcceptSelected)) {
        responseType_ = "json";
      } else {
        responseType_ = "blob";
      }
    }
    let localVarPath = `/media/${this.configuration.encodeParam({ name: "asset", value: asset, in: "path", style: "simple", explode: false, dataType: "string", dataFormat: void 0 })}/info`;
    return this.httpClient.request("get", `${this.configuration.basePath}${localVarPath}`, {
      context: localVarHttpContext,
      params: localVarQueryParameters,
      responseType: responseType_,
      withCredentials: this.configuration.withCredentials,
      headers: localVarHeaders,
      observe,
      transferCache: localVarTransferCache,
      reportProgress
    });
  }
  getMediaInfoDeprecated(owner, asset, filename, observe = "body", reportProgress = false, options) {
    if (owner === null || owner === void 0) {
      throw new Error("Required parameter owner was null or undefined when calling getMediaInfoDeprecated.");
    }
    if (asset === null || asset === void 0) {
      throw new Error("Required parameter asset was null or undefined when calling getMediaInfoDeprecated.");
    }
    if (filename === null || filename === void 0) {
      throw new Error("Required parameter filename was null or undefined when calling getMediaInfoDeprecated.");
    }
    let localVarHeaders = this.defaultHeaders;
    let localVarCredential;
    localVarCredential = this.configuration.lookupCredential("access_token");
    if (localVarCredential) {
      localVarHeaders = localVarHeaders.set("x-access-token", localVarCredential);
    }
    let localVarHttpHeaderAcceptSelected = options && options.httpHeaderAccept;
    if (localVarHttpHeaderAcceptSelected === void 0) {
      const httpHeaderAccepts = [
        "application/json"
      ];
      localVarHttpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
    }
    if (localVarHttpHeaderAcceptSelected !== void 0) {
      localVarHeaders = localVarHeaders.set("Accept", localVarHttpHeaderAcceptSelected);
    }
    let localVarHttpContext = options && options.context;
    if (localVarHttpContext === void 0) {
      localVarHttpContext = new HttpContext();
    }
    let localVarTransferCache = options && options.transferCache;
    if (localVarTransferCache === void 0) {
      localVarTransferCache = true;
    }
    let responseType_ = "json";
    if (localVarHttpHeaderAcceptSelected) {
      if (localVarHttpHeaderAcceptSelected.startsWith("text")) {
        responseType_ = "text";
      } else if (this.configuration.isJsonMime(localVarHttpHeaderAcceptSelected)) {
        responseType_ = "json";
      } else {
        responseType_ = "blob";
      }
    }
    let localVarPath = `/media/info/${this.configuration.encodeParam({ name: "owner", value: owner, in: "path", style: "simple", explode: false, dataType: "string", dataFormat: void 0 })}/${this.configuration.encodeParam({ name: "asset", value: asset, in: "path", style: "simple", explode: false, dataType: "string", dataFormat: void 0 })}/${this.configuration.encodeParam({ name: "filename", value: filename, in: "path", style: "simple", explode: false, dataType: "string", dataFormat: void 0 })}`;
    return this.httpClient.request("get", `${this.configuration.basePath}${localVarPath}`, {
      context: localVarHttpContext,
      responseType: responseType_,
      withCredentials: this.configuration.withCredentials,
      headers: localVarHeaders,
      observe,
      transferCache: localVarTransferCache,
      reportProgress
    });
  }
  listMedia(owner, offset, limit, filter, observe = "body", reportProgress = false, options) {
    if (owner === null || owner === void 0) {
      throw new Error("Required parameter owner was null or undefined when calling listMedia.");
    }
    let localVarQueryParameters = new HttpParams({ encoder: this.encoder });
    if (owner !== void 0 && owner !== null) {
      localVarQueryParameters = this.addToHttpParams(localVarQueryParameters, owner, "owner");
    }
    if (offset !== void 0 && offset !== null) {
      localVarQueryParameters = this.addToHttpParams(localVarQueryParameters, offset, "offset");
    }
    if (limit !== void 0 && limit !== null) {
      localVarQueryParameters = this.addToHttpParams(localVarQueryParameters, limit, "limit");
    }
    if (filter !== void 0 && filter !== null) {
      localVarQueryParameters = this.addToHttpParams(localVarQueryParameters, filter, "filter");
    }
    let localVarHeaders = this.defaultHeaders;
    let localVarCredential;
    localVarCredential = this.configuration.lookupCredential("access_token");
    if (localVarCredential) {
      localVarHeaders = localVarHeaders.set("x-access-token", localVarCredential);
    }
    let localVarHttpHeaderAcceptSelected = options && options.httpHeaderAccept;
    if (localVarHttpHeaderAcceptSelected === void 0) {
      const httpHeaderAccepts = [
        "application/json"
      ];
      localVarHttpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
    }
    if (localVarHttpHeaderAcceptSelected !== void 0) {
      localVarHeaders = localVarHeaders.set("Accept", localVarHttpHeaderAcceptSelected);
    }
    let localVarHttpContext = options && options.context;
    if (localVarHttpContext === void 0) {
      localVarHttpContext = new HttpContext();
    }
    let localVarTransferCache = options && options.transferCache;
    if (localVarTransferCache === void 0) {
      localVarTransferCache = true;
    }
    let responseType_ = "json";
    if (localVarHttpHeaderAcceptSelected) {
      if (localVarHttpHeaderAcceptSelected.startsWith("text")) {
        responseType_ = "text";
      } else if (this.configuration.isJsonMime(localVarHttpHeaderAcceptSelected)) {
        responseType_ = "json";
      } else {
        responseType_ = "blob";
      }
    }
    let localVarPath = `/media`;
    return this.httpClient.request("get", `${this.configuration.basePath}${localVarPath}`, {
      context: localVarHttpContext,
      params: localVarQueryParameters,
      responseType: responseType_,
      withCredentials: this.configuration.withCredentials,
      headers: localVarHeaders,
      observe,
      transferCache: localVarTransferCache,
      reportProgress
    });
  }
  startVideoLiveStream(asset, request, observe = "body", reportProgress = false, options) {
    if (asset === null || asset === void 0) {
      throw new Error("Required parameter asset was null or undefined when calling startVideoLiveStream.");
    }
    if (request === null || request === void 0) {
      throw new Error("Required parameter request was null or undefined when calling startVideoLiveStream.");
    }
    let localVarHeaders = this.defaultHeaders;
    let localVarCredential;
    localVarCredential = this.configuration.lookupCredential("access_token");
    if (localVarCredential) {
      localVarHeaders = localVarHeaders.set("x-access-token", localVarCredential);
    }
    let localVarHttpHeaderAcceptSelected = options && options.httpHeaderAccept;
    if (localVarHttpHeaderAcceptSelected === void 0) {
      const httpHeaderAccepts = [
        "application/json"
      ];
      localVarHttpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
    }
    if (localVarHttpHeaderAcceptSelected !== void 0) {
      localVarHeaders = localVarHeaders.set("Accept", localVarHttpHeaderAcceptSelected);
    }
    let localVarHttpContext = options && options.context;
    if (localVarHttpContext === void 0) {
      localVarHttpContext = new HttpContext();
    }
    let localVarTransferCache = options && options.transferCache;
    if (localVarTransferCache === void 0) {
      localVarTransferCache = true;
    }
    const consumes = [
      "application/json"
    ];
    const httpContentTypeSelected = this.configuration.selectHeaderContentType(consumes);
    if (httpContentTypeSelected !== void 0) {
      localVarHeaders = localVarHeaders.set("Content-Type", httpContentTypeSelected);
    }
    let responseType_ = "json";
    if (localVarHttpHeaderAcceptSelected) {
      if (localVarHttpHeaderAcceptSelected.startsWith("text")) {
        responseType_ = "text";
      } else if (this.configuration.isJsonMime(localVarHttpHeaderAcceptSelected)) {
        responseType_ = "json";
      } else {
        responseType_ = "blob";
      }
    }
    let localVarPath = `/media/${this.configuration.encodeParam({ name: "asset", value: asset, in: "path", style: "simple", explode: false, dataType: "string", dataFormat: void 0 })}/livestream`;
    return this.httpClient.request("post", `${this.configuration.basePath}${localVarPath}`, {
      context: localVarHttpContext,
      body: request,
      responseType: responseType_,
      withCredentials: this.configuration.withCredentials,
      headers: localVarHeaders,
      observe,
      transferCache: localVarTransferCache,
      reportProgress
    });
  }
  updateVideoEvent(owner, event, request, observe = "body", reportProgress = false, options) {
    if (owner === null || owner === void 0) {
      throw new Error("Required parameter owner was null or undefined when calling updateVideoEvent.");
    }
    if (event === null || event === void 0) {
      throw new Error("Required parameter event was null or undefined when calling updateVideoEvent.");
    }
    if (request === null || request === void 0) {
      throw new Error("Required parameter request was null or undefined when calling updateVideoEvent.");
    }
    let localVarHeaders = this.defaultHeaders;
    let localVarCredential;
    localVarCredential = this.configuration.lookupCredential("access_token");
    if (localVarCredential) {
      localVarHeaders = localVarHeaders.set("x-access-token", localVarCredential);
    }
    let localVarHttpHeaderAcceptSelected = options && options.httpHeaderAccept;
    if (localVarHttpHeaderAcceptSelected === void 0) {
      const httpHeaderAccepts = [
        "application/json"
      ];
      localVarHttpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
    }
    if (localVarHttpHeaderAcceptSelected !== void 0) {
      localVarHeaders = localVarHeaders.set("Accept", localVarHttpHeaderAcceptSelected);
    }
    let localVarHttpContext = options && options.context;
    if (localVarHttpContext === void 0) {
      localVarHttpContext = new HttpContext();
    }
    let localVarTransferCache = options && options.transferCache;
    if (localVarTransferCache === void 0) {
      localVarTransferCache = true;
    }
    const consumes = [
      "application/json"
    ];
    const httpContentTypeSelected = this.configuration.selectHeaderContentType(consumes);
    if (httpContentTypeSelected !== void 0) {
      localVarHeaders = localVarHeaders.set("Content-Type", httpContentTypeSelected);
    }
    let responseType_ = "json";
    if (localVarHttpHeaderAcceptSelected) {
      if (localVarHttpHeaderAcceptSelected.startsWith("text")) {
        responseType_ = "text";
      } else if (this.configuration.isJsonMime(localVarHttpHeaderAcceptSelected)) {
        responseType_ = "json";
      } else {
        responseType_ = "blob";
      }
    }
    let localVarPath = `/media/video/event/${this.configuration.encodeParam({ name: "owner", value: owner, in: "path", style: "simple", explode: false, dataType: "string", dataFormat: void 0 })}/${this.configuration.encodeParam({ name: "event", value: event, in: "path", style: "simple", explode: false, dataType: "string", dataFormat: void 0 })}`;
    return this.httpClient.request("put", `${this.configuration.basePath}${localVarPath}`, {
      context: localVarHttpContext,
      body: request,
      responseType: responseType_,
      withCredentials: this.configuration.withCredentials,
      headers: localVarHeaders,
      observe,
      transferCache: localVarTransferCache,
      reportProgress
    });
  }
  static \u0275fac = function MediaService_Factory(__ngFactoryType__) {
    return new (__ngFactoryType__ || _MediaService)(\u0275\u0275inject(HttpClient), \u0275\u0275inject(BASE_PATH, 8), \u0275\u0275inject(Configuration, 8));
  };
  static \u0275prov = /* @__PURE__ */ \u0275\u0275defineInjectable({ token: _MediaService, factory: _MediaService.\u0275fac, providedIn: "root" });
};
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(MediaService, [{
    type: Injectable,
    args: [{
      providedIn: "root"
    }]
  }], () => [{ type: HttpClient }, { type: void 0, decorators: [{
    type: Optional
  }, {
    type: Inject,
    args: [BASE_PATH]
  }] }, { type: Configuration, decorators: [{
    type: Optional
  }] }], null);
})();

// src/app/api/api/notifications.service.ts
var NotificationsService = class _NotificationsService {
  httpClient;
  basePath = "";
  defaultHeaders = new HttpHeaders();
  configuration = new Configuration();
  encoder;
  constructor(httpClient, basePath, configuration) {
    this.httpClient = httpClient;
    if (configuration) {
      this.configuration = configuration;
    }
    if (typeof this.configuration.basePath !== "string") {
      const firstBasePath = Array.isArray(basePath) ? basePath[0] : void 0;
      if (firstBasePath != void 0) {
        basePath = firstBasePath;
      }
      if (typeof basePath !== "string") {
        basePath = this.basePath;
      }
      this.configuration.basePath = basePath;
    }
    this.encoder = this.configuration.encoder || new CustomHttpParameterCodec();
  }
  // @ts-ignore
  addToHttpParams(httpParams, value, key) {
    if (typeof value === "object" && value instanceof Date === false) {
      httpParams = this.addToHttpParamsRecursive(httpParams, value);
    } else {
      httpParams = this.addToHttpParamsRecursive(httpParams, value, key);
    }
    return httpParams;
  }
  addToHttpParamsRecursive(httpParams, value, key) {
    if (value == null) {
      return httpParams;
    }
    if (typeof value === "object") {
      if (Array.isArray(value)) {
        value.forEach((elem) => httpParams = this.addToHttpParamsRecursive(httpParams, elem, key));
      } else if (value instanceof Date) {
        if (key != null) {
          httpParams = httpParams.append(key, value.toISOString().substring(0, 10));
        } else {
          throw Error("key may not be null if value is Date");
        }
      } else {
        Object.keys(value).forEach((k) => httpParams = this.addToHttpParamsRecursive(httpParams, value[k], key != null ? `${key}.${k}` : k));
      }
    } else if (key != null) {
      httpParams = httpParams.append(key, value);
    } else {
      throw Error("key may not be null if value is not object or array");
    }
    return httpParams;
  }
  testNotification(request, observe = "body", reportProgress = false, options) {
    if (request === null || request === void 0) {
      throw new Error("Required parameter request was null or undefined when calling testNotification.");
    }
    let localVarHeaders = this.defaultHeaders;
    let localVarCredential;
    localVarCredential = this.configuration.lookupCredential("access_token");
    if (localVarCredential) {
      localVarHeaders = localVarHeaders.set("x-access-token", localVarCredential);
    }
    let localVarHttpHeaderAcceptSelected = options && options.httpHeaderAccept;
    if (localVarHttpHeaderAcceptSelected === void 0) {
      const httpHeaderAccepts = [
        "application/json"
      ];
      localVarHttpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
    }
    if (localVarHttpHeaderAcceptSelected !== void 0) {
      localVarHeaders = localVarHeaders.set("Accept", localVarHttpHeaderAcceptSelected);
    }
    let localVarHttpContext = options && options.context;
    if (localVarHttpContext === void 0) {
      localVarHttpContext = new HttpContext();
    }
    let localVarTransferCache = options && options.transferCache;
    if (localVarTransferCache === void 0) {
      localVarTransferCache = true;
    }
    const consumes = [
      "application/json"
    ];
    const httpContentTypeSelected = this.configuration.selectHeaderContentType(consumes);
    if (httpContentTypeSelected !== void 0) {
      localVarHeaders = localVarHeaders.set("Content-Type", httpContentTypeSelected);
    }
    let responseType_ = "json";
    if (localVarHttpHeaderAcceptSelected) {
      if (localVarHttpHeaderAcceptSelected.startsWith("text")) {
        responseType_ = "text";
      } else if (this.configuration.isJsonMime(localVarHttpHeaderAcceptSelected)) {
        responseType_ = "json";
      } else {
        responseType_ = "blob";
      }
    }
    let localVarPath = `/notifications/test`;
    return this.httpClient.request("post", `${this.configuration.basePath}${localVarPath}`, {
      context: localVarHttpContext,
      body: request,
      responseType: responseType_,
      withCredentials: this.configuration.withCredentials,
      headers: localVarHeaders,
      observe,
      transferCache: localVarTransferCache,
      reportProgress
    });
  }
  static \u0275fac = function NotificationsService_Factory(__ngFactoryType__) {
    return new (__ngFactoryType__ || _NotificationsService)(\u0275\u0275inject(HttpClient), \u0275\u0275inject(BASE_PATH, 8), \u0275\u0275inject(Configuration, 8));
  };
  static \u0275prov = /* @__PURE__ */ \u0275\u0275defineInjectable({ token: _NotificationsService, factory: _NotificationsService.\u0275fac, providedIn: "root" });
};
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(NotificationsService, [{
    type: Injectable,
    args: [{
      providedIn: "root"
    }]
  }], () => [{ type: HttpClient }, { type: void 0, decorators: [{
    type: Optional
  }, {
    type: Inject,
    args: [BASE_PATH]
  }] }, { type: Configuration, decorators: [{
    type: Optional
  }] }], null);
})();

// src/app/api/api/overspeedProfiles.service.ts
var OverspeedProfilesService = class _OverspeedProfilesService {
  httpClient;
  basePath = "";
  defaultHeaders = new HttpHeaders();
  configuration = new Configuration();
  encoder;
  constructor(httpClient, basePath, configuration) {
    this.httpClient = httpClient;
    if (configuration) {
      this.configuration = configuration;
    }
    if (typeof this.configuration.basePath !== "string") {
      const firstBasePath = Array.isArray(basePath) ? basePath[0] : void 0;
      if (firstBasePath != void 0) {
        basePath = firstBasePath;
      }
      if (typeof basePath !== "string") {
        basePath = this.basePath;
      }
      this.configuration.basePath = basePath;
    }
    this.encoder = this.configuration.encoder || new CustomHttpParameterCodec();
  }
  // @ts-ignore
  addToHttpParams(httpParams, value, key) {
    if (typeof value === "object" && value instanceof Date === false) {
      httpParams = this.addToHttpParamsRecursive(httpParams, value);
    } else {
      httpParams = this.addToHttpParamsRecursive(httpParams, value, key);
    }
    return httpParams;
  }
  addToHttpParamsRecursive(httpParams, value, key) {
    if (value == null) {
      return httpParams;
    }
    if (typeof value === "object") {
      if (Array.isArray(value)) {
        value.forEach((elem) => httpParams = this.addToHttpParamsRecursive(httpParams, elem, key));
      } else if (value instanceof Date) {
        if (key != null) {
          httpParams = httpParams.append(key, value.toISOString().substring(0, 10));
        } else {
          throw Error("key may not be null if value is Date");
        }
      } else {
        Object.keys(value).forEach((k) => httpParams = this.addToHttpParamsRecursive(httpParams, value[k], key != null ? `${key}.${k}` : k));
      }
    } else if (key != null) {
      httpParams = httpParams.append(key, value);
    } else {
      throw Error("key may not be null if value is not object or array");
    }
    return httpParams;
  }
  createOverspeedProfile(request, observe = "body", reportProgress = false, options) {
    if (request === null || request === void 0) {
      throw new Error("Required parameter request was null or undefined when calling createOverspeedProfile.");
    }
    let localVarHeaders = this.defaultHeaders;
    let localVarCredential;
    localVarCredential = this.configuration.lookupCredential("access_token");
    if (localVarCredential) {
      localVarHeaders = localVarHeaders.set("x-access-token", localVarCredential);
    }
    let localVarHttpHeaderAcceptSelected = options && options.httpHeaderAccept;
    if (localVarHttpHeaderAcceptSelected === void 0) {
      const httpHeaderAccepts = [
        "application/json"
      ];
      localVarHttpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
    }
    if (localVarHttpHeaderAcceptSelected !== void 0) {
      localVarHeaders = localVarHeaders.set("Accept", localVarHttpHeaderAcceptSelected);
    }
    let localVarHttpContext = options && options.context;
    if (localVarHttpContext === void 0) {
      localVarHttpContext = new HttpContext();
    }
    let localVarTransferCache = options && options.transferCache;
    if (localVarTransferCache === void 0) {
      localVarTransferCache = true;
    }
    const consumes = [
      "application/json"
    ];
    const httpContentTypeSelected = this.configuration.selectHeaderContentType(consumes);
    if (httpContentTypeSelected !== void 0) {
      localVarHeaders = localVarHeaders.set("Content-Type", httpContentTypeSelected);
    }
    let responseType_ = "json";
    if (localVarHttpHeaderAcceptSelected) {
      if (localVarHttpHeaderAcceptSelected.startsWith("text")) {
        responseType_ = "text";
      } else if (this.configuration.isJsonMime(localVarHttpHeaderAcceptSelected)) {
        responseType_ = "json";
      } else {
        responseType_ = "blob";
      }
    }
    let localVarPath = `/entities/overspeedprofiles`;
    return this.httpClient.request("post", `${this.configuration.basePath}${localVarPath}`, {
      context: localVarHttpContext,
      body: request,
      responseType: responseType_,
      withCredentials: this.configuration.withCredentials,
      headers: localVarHeaders,
      observe,
      transferCache: localVarTransferCache,
      reportProgress
    });
  }
  getOverspeedProfile(id, observe = "body", reportProgress = false, options) {
    if (id === null || id === void 0) {
      throw new Error("Required parameter id was null or undefined when calling getOverspeedProfile.");
    }
    let localVarHeaders = this.defaultHeaders;
    let localVarCredential;
    localVarCredential = this.configuration.lookupCredential("access_token");
    if (localVarCredential) {
      localVarHeaders = localVarHeaders.set("x-access-token", localVarCredential);
    }
    let localVarHttpHeaderAcceptSelected = options && options.httpHeaderAccept;
    if (localVarHttpHeaderAcceptSelected === void 0) {
      const httpHeaderAccepts = [
        "application/json"
      ];
      localVarHttpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
    }
    if (localVarHttpHeaderAcceptSelected !== void 0) {
      localVarHeaders = localVarHeaders.set("Accept", localVarHttpHeaderAcceptSelected);
    }
    let localVarHttpContext = options && options.context;
    if (localVarHttpContext === void 0) {
      localVarHttpContext = new HttpContext();
    }
    let localVarTransferCache = options && options.transferCache;
    if (localVarTransferCache === void 0) {
      localVarTransferCache = true;
    }
    let responseType_ = "json";
    if (localVarHttpHeaderAcceptSelected) {
      if (localVarHttpHeaderAcceptSelected.startsWith("text")) {
        responseType_ = "text";
      } else if (this.configuration.isJsonMime(localVarHttpHeaderAcceptSelected)) {
        responseType_ = "json";
      } else {
        responseType_ = "blob";
      }
    }
    let localVarPath = `/entities/overspeedprofiles/${this.configuration.encodeParam({ name: "id", value: id, in: "path", style: "simple", explode: false, dataType: "string", dataFormat: void 0 })}`;
    return this.httpClient.request("get", `${this.configuration.basePath}${localVarPath}`, {
      context: localVarHttpContext,
      responseType: responseType_,
      withCredentials: this.configuration.withCredentials,
      headers: localVarHeaders,
      observe,
      transferCache: localVarTransferCache,
      reportProgress
    });
  }
  listOverspeedProfiles(owner, recurse, offset, limit, sort, filter, observe = "body", reportProgress = false, options) {
    if (owner === null || owner === void 0) {
      throw new Error("Required parameter owner was null or undefined when calling listOverspeedProfiles.");
    }
    let localVarQueryParameters = new HttpParams({ encoder: this.encoder });
    if (owner !== void 0 && owner !== null) {
      localVarQueryParameters = this.addToHttpParams(localVarQueryParameters, owner, "owner");
    }
    if (recurse !== void 0 && recurse !== null) {
      localVarQueryParameters = this.addToHttpParams(localVarQueryParameters, recurse, "recurse");
    }
    if (offset !== void 0 && offset !== null) {
      localVarQueryParameters = this.addToHttpParams(localVarQueryParameters, offset, "offset");
    }
    if (limit !== void 0 && limit !== null) {
      localVarQueryParameters = this.addToHttpParams(localVarQueryParameters, limit, "limit");
    }
    if (sort !== void 0 && sort !== null) {
      localVarQueryParameters = this.addToHttpParams(localVarQueryParameters, sort, "sort");
    }
    if (filter !== void 0 && filter !== null) {
      localVarQueryParameters = this.addToHttpParams(localVarQueryParameters, filter, "filter");
    }
    let localVarHeaders = this.defaultHeaders;
    let localVarCredential;
    localVarCredential = this.configuration.lookupCredential("access_token");
    if (localVarCredential) {
      localVarHeaders = localVarHeaders.set("x-access-token", localVarCredential);
    }
    let localVarHttpHeaderAcceptSelected = options && options.httpHeaderAccept;
    if (localVarHttpHeaderAcceptSelected === void 0) {
      const httpHeaderAccepts = [
        "application/json"
      ];
      localVarHttpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
    }
    if (localVarHttpHeaderAcceptSelected !== void 0) {
      localVarHeaders = localVarHeaders.set("Accept", localVarHttpHeaderAcceptSelected);
    }
    let localVarHttpContext = options && options.context;
    if (localVarHttpContext === void 0) {
      localVarHttpContext = new HttpContext();
    }
    let localVarTransferCache = options && options.transferCache;
    if (localVarTransferCache === void 0) {
      localVarTransferCache = true;
    }
    let responseType_ = "json";
    if (localVarHttpHeaderAcceptSelected) {
      if (localVarHttpHeaderAcceptSelected.startsWith("text")) {
        responseType_ = "text";
      } else if (this.configuration.isJsonMime(localVarHttpHeaderAcceptSelected)) {
        responseType_ = "json";
      } else {
        responseType_ = "blob";
      }
    }
    let localVarPath = `/entities/overspeedprofiles`;
    return this.httpClient.request("get", `${this.configuration.basePath}${localVarPath}`, {
      context: localVarHttpContext,
      params: localVarQueryParameters,
      responseType: responseType_,
      withCredentials: this.configuration.withCredentials,
      headers: localVarHeaders,
      observe,
      transferCache: localVarTransferCache,
      reportProgress
    });
  }
  updateOverspeedProfile(id, request, observe = "body", reportProgress = false, options) {
    if (id === null || id === void 0) {
      throw new Error("Required parameter id was null or undefined when calling updateOverspeedProfile.");
    }
    if (request === null || request === void 0) {
      throw new Error("Required parameter request was null or undefined when calling updateOverspeedProfile.");
    }
    let localVarHeaders = this.defaultHeaders;
    let localVarCredential;
    localVarCredential = this.configuration.lookupCredential("access_token");
    if (localVarCredential) {
      localVarHeaders = localVarHeaders.set("x-access-token", localVarCredential);
    }
    let localVarHttpHeaderAcceptSelected = options && options.httpHeaderAccept;
    if (localVarHttpHeaderAcceptSelected === void 0) {
      const httpHeaderAccepts = [
        "application/json"
      ];
      localVarHttpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
    }
    if (localVarHttpHeaderAcceptSelected !== void 0) {
      localVarHeaders = localVarHeaders.set("Accept", localVarHttpHeaderAcceptSelected);
    }
    let localVarHttpContext = options && options.context;
    if (localVarHttpContext === void 0) {
      localVarHttpContext = new HttpContext();
    }
    let localVarTransferCache = options && options.transferCache;
    if (localVarTransferCache === void 0) {
      localVarTransferCache = true;
    }
    const consumes = [
      "application/json"
    ];
    const httpContentTypeSelected = this.configuration.selectHeaderContentType(consumes);
    if (httpContentTypeSelected !== void 0) {
      localVarHeaders = localVarHeaders.set("Content-Type", httpContentTypeSelected);
    }
    let responseType_ = "json";
    if (localVarHttpHeaderAcceptSelected) {
      if (localVarHttpHeaderAcceptSelected.startsWith("text")) {
        responseType_ = "text";
      } else if (this.configuration.isJsonMime(localVarHttpHeaderAcceptSelected)) {
        responseType_ = "json";
      } else {
        responseType_ = "blob";
      }
    }
    let localVarPath = `/entities/overspeedprofiles/${this.configuration.encodeParam({ name: "id", value: id, in: "path", style: "simple", explode: false, dataType: "string", dataFormat: void 0 })}`;
    return this.httpClient.request("put", `${this.configuration.basePath}${localVarPath}`, {
      context: localVarHttpContext,
      body: request,
      responseType: responseType_,
      withCredentials: this.configuration.withCredentials,
      headers: localVarHeaders,
      observe,
      transferCache: localVarTransferCache,
      reportProgress
    });
  }
  static \u0275fac = function OverspeedProfilesService_Factory(__ngFactoryType__) {
    return new (__ngFactoryType__ || _OverspeedProfilesService)(\u0275\u0275inject(HttpClient), \u0275\u0275inject(BASE_PATH, 8), \u0275\u0275inject(Configuration, 8));
  };
  static \u0275prov = /* @__PURE__ */ \u0275\u0275defineInjectable({ token: _OverspeedProfilesService, factory: _OverspeedProfilesService.\u0275fac, providedIn: "root" });
};
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(OverspeedProfilesService, [{
    type: Injectable,
    args: [{
      providedIn: "root"
    }]
  }], () => [{ type: HttpClient }, { type: void 0, decorators: [{
    type: Optional
  }, {
    type: Inject,
    args: [BASE_PATH]
  }] }, { type: Configuration, decorators: [{
    type: Optional
  }] }], null);
})();

// src/app/api/api/queues.service.ts
var QueuesService = class _QueuesService {
  httpClient;
  basePath = "";
  defaultHeaders = new HttpHeaders();
  configuration = new Configuration();
  encoder;
  constructor(httpClient, basePath, configuration) {
    this.httpClient = httpClient;
    if (configuration) {
      this.configuration = configuration;
    }
    if (typeof this.configuration.basePath !== "string") {
      const firstBasePath = Array.isArray(basePath) ? basePath[0] : void 0;
      if (firstBasePath != void 0) {
        basePath = firstBasePath;
      }
      if (typeof basePath !== "string") {
        basePath = this.basePath;
      }
      this.configuration.basePath = basePath;
    }
    this.encoder = this.configuration.encoder || new CustomHttpParameterCodec();
  }
  // @ts-ignore
  addToHttpParams(httpParams, value, key) {
    if (typeof value === "object" && value instanceof Date === false) {
      httpParams = this.addToHttpParamsRecursive(httpParams, value);
    } else {
      httpParams = this.addToHttpParamsRecursive(httpParams, value, key);
    }
    return httpParams;
  }
  addToHttpParamsRecursive(httpParams, value, key) {
    if (value == null) {
      return httpParams;
    }
    if (typeof value === "object") {
      if (Array.isArray(value)) {
        value.forEach((elem) => httpParams = this.addToHttpParamsRecursive(httpParams, elem, key));
      } else if (value instanceof Date) {
        if (key != null) {
          httpParams = httpParams.append(key, value.toISOString().substring(0, 10));
        } else {
          throw Error("key may not be null if value is Date");
        }
      } else {
        Object.keys(value).forEach((k) => httpParams = this.addToHttpParamsRecursive(httpParams, value[k], key != null ? `${key}.${k}` : k));
      }
    } else if (key != null) {
      httpParams = httpParams.append(key, value);
    } else {
      throw Error("key may not be null if value is not object or array");
    }
    return httpParams;
  }
  cancelReport(id, observe = "body", reportProgress = false, options) {
    if (id === null || id === void 0) {
      throw new Error("Required parameter id was null or undefined when calling cancelReport.");
    }
    let localVarHeaders = this.defaultHeaders;
    let localVarCredential;
    localVarCredential = this.configuration.lookupCredential("access_token");
    if (localVarCredential) {
      localVarHeaders = localVarHeaders.set("x-access-token", localVarCredential);
    }
    let localVarHttpHeaderAcceptSelected = options && options.httpHeaderAccept;
    if (localVarHttpHeaderAcceptSelected === void 0) {
      const httpHeaderAccepts = [
        "application/json"
      ];
      localVarHttpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
    }
    if (localVarHttpHeaderAcceptSelected !== void 0) {
      localVarHeaders = localVarHeaders.set("Accept", localVarHttpHeaderAcceptSelected);
    }
    let localVarHttpContext = options && options.context;
    if (localVarHttpContext === void 0) {
      localVarHttpContext = new HttpContext();
    }
    let localVarTransferCache = options && options.transferCache;
    if (localVarTransferCache === void 0) {
      localVarTransferCache = true;
    }
    let responseType_ = "json";
    if (localVarHttpHeaderAcceptSelected) {
      if (localVarHttpHeaderAcceptSelected.startsWith("text")) {
        responseType_ = "text";
      } else if (this.configuration.isJsonMime(localVarHttpHeaderAcceptSelected)) {
        responseType_ = "json";
      } else {
        responseType_ = "blob";
      }
    }
    let localVarPath = `/reports/queues/${this.configuration.encodeParam({ name: "id", value: id, in: "path", style: "simple", explode: false, dataType: "string", dataFormat: void 0 })}`;
    return this.httpClient.request("delete", `${this.configuration.basePath}${localVarPath}`, {
      context: localVarHttpContext,
      responseType: responseType_,
      withCredentials: this.configuration.withCredentials,
      headers: localVarHeaders,
      observe,
      transferCache: localVarTransferCache,
      reportProgress
    });
  }
  getQueuedReport(id, observe = "body", reportProgress = false, options) {
    if (id === null || id === void 0) {
      throw new Error("Required parameter id was null or undefined when calling getQueuedReport.");
    }
    let localVarHeaders = this.defaultHeaders;
    let localVarCredential;
    localVarCredential = this.configuration.lookupCredential("access_token");
    if (localVarCredential) {
      localVarHeaders = localVarHeaders.set("x-access-token", localVarCredential);
    }
    let localVarHttpHeaderAcceptSelected = options && options.httpHeaderAccept;
    if (localVarHttpHeaderAcceptSelected === void 0) {
      const httpHeaderAccepts = [
        "application/json"
      ];
      localVarHttpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
    }
    if (localVarHttpHeaderAcceptSelected !== void 0) {
      localVarHeaders = localVarHeaders.set("Accept", localVarHttpHeaderAcceptSelected);
    }
    let localVarHttpContext = options && options.context;
    if (localVarHttpContext === void 0) {
      localVarHttpContext = new HttpContext();
    }
    let localVarTransferCache = options && options.transferCache;
    if (localVarTransferCache === void 0) {
      localVarTransferCache = true;
    }
    let responseType_ = "json";
    if (localVarHttpHeaderAcceptSelected) {
      if (localVarHttpHeaderAcceptSelected.startsWith("text")) {
        responseType_ = "text";
      } else if (this.configuration.isJsonMime(localVarHttpHeaderAcceptSelected)) {
        responseType_ = "json";
      } else {
        responseType_ = "blob";
      }
    }
    let localVarPath = `/reports/queues/${this.configuration.encodeParam({ name: "id", value: id, in: "path", style: "simple", explode: false, dataType: "string", dataFormat: void 0 })}`;
    return this.httpClient.request("get", `${this.configuration.basePath}${localVarPath}`, {
      context: localVarHttpContext,
      responseType: responseType_,
      withCredentials: this.configuration.withCredentials,
      headers: localVarHeaders,
      observe,
      transferCache: localVarTransferCache,
      reportProgress
    });
  }
  listQueuedReports(client, user, server, observe = "body", reportProgress = false, options) {
    let localVarQueryParameters = new HttpParams({ encoder: this.encoder });
    if (client !== void 0 && client !== null) {
      localVarQueryParameters = this.addToHttpParams(localVarQueryParameters, client, "client");
    }
    if (user !== void 0 && user !== null) {
      localVarQueryParameters = this.addToHttpParams(localVarQueryParameters, user, "user");
    }
    if (server !== void 0 && server !== null) {
      localVarQueryParameters = this.addToHttpParams(localVarQueryParameters, server, "server");
    }
    let localVarHeaders = this.defaultHeaders;
    let localVarCredential;
    localVarCredential = this.configuration.lookupCredential("access_token");
    if (localVarCredential) {
      localVarHeaders = localVarHeaders.set("x-access-token", localVarCredential);
    }
    let localVarHttpHeaderAcceptSelected = options && options.httpHeaderAccept;
    if (localVarHttpHeaderAcceptSelected === void 0) {
      const httpHeaderAccepts = [
        "application/json"
      ];
      localVarHttpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
    }
    if (localVarHttpHeaderAcceptSelected !== void 0) {
      localVarHeaders = localVarHeaders.set("Accept", localVarHttpHeaderAcceptSelected);
    }
    let localVarHttpContext = options && options.context;
    if (localVarHttpContext === void 0) {
      localVarHttpContext = new HttpContext();
    }
    let localVarTransferCache = options && options.transferCache;
    if (localVarTransferCache === void 0) {
      localVarTransferCache = true;
    }
    let responseType_ = "json";
    if (localVarHttpHeaderAcceptSelected) {
      if (localVarHttpHeaderAcceptSelected.startsWith("text")) {
        responseType_ = "text";
      } else if (this.configuration.isJsonMime(localVarHttpHeaderAcceptSelected)) {
        responseType_ = "json";
      } else {
        responseType_ = "blob";
      }
    }
    let localVarPath = `/reports/queues`;
    return this.httpClient.request("get", `${this.configuration.basePath}${localVarPath}`, {
      context: localVarHttpContext,
      params: localVarQueryParameters,
      responseType: responseType_,
      withCredentials: this.configuration.withCredentials,
      headers: localVarHeaders,
      observe,
      transferCache: localVarTransferCache,
      reportProgress
    });
  }
  queueReport(request, observe = "body", reportProgress = false, options) {
    if (request === null || request === void 0) {
      throw new Error("Required parameter request was null or undefined when calling queueReport.");
    }
    let localVarHeaders = this.defaultHeaders;
    let localVarCredential;
    localVarCredential = this.configuration.lookupCredential("access_token");
    if (localVarCredential) {
      localVarHeaders = localVarHeaders.set("x-access-token", localVarCredential);
    }
    let localVarHttpHeaderAcceptSelected = options && options.httpHeaderAccept;
    if (localVarHttpHeaderAcceptSelected === void 0) {
      const httpHeaderAccepts = [
        "application/json"
      ];
      localVarHttpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
    }
    if (localVarHttpHeaderAcceptSelected !== void 0) {
      localVarHeaders = localVarHeaders.set("Accept", localVarHttpHeaderAcceptSelected);
    }
    let localVarHttpContext = options && options.context;
    if (localVarHttpContext === void 0) {
      localVarHttpContext = new HttpContext();
    }
    let localVarTransferCache = options && options.transferCache;
    if (localVarTransferCache === void 0) {
      localVarTransferCache = true;
    }
    const consumes = [
      "application/json"
    ];
    const httpContentTypeSelected = this.configuration.selectHeaderContentType(consumes);
    if (httpContentTypeSelected !== void 0) {
      localVarHeaders = localVarHeaders.set("Content-Type", httpContentTypeSelected);
    }
    let responseType_ = "json";
    if (localVarHttpHeaderAcceptSelected) {
      if (localVarHttpHeaderAcceptSelected.startsWith("text")) {
        responseType_ = "text";
      } else if (this.configuration.isJsonMime(localVarHttpHeaderAcceptSelected)) {
        responseType_ = "json";
      } else {
        responseType_ = "blob";
      }
    }
    let localVarPath = `/reports/queues`;
    return this.httpClient.request("post", `${this.configuration.basePath}${localVarPath}`, {
      context: localVarHttpContext,
      body: request,
      responseType: responseType_,
      withCredentials: this.configuration.withCredentials,
      headers: localVarHeaders,
      observe,
      transferCache: localVarTransferCache,
      reportProgress
    });
  }
  static \u0275fac = function QueuesService_Factory(__ngFactoryType__) {
    return new (__ngFactoryType__ || _QueuesService)(\u0275\u0275inject(HttpClient), \u0275\u0275inject(BASE_PATH, 8), \u0275\u0275inject(Configuration, 8));
  };
  static \u0275prov = /* @__PURE__ */ \u0275\u0275defineInjectable({ token: _QueuesService, factory: _QueuesService.\u0275fac, providedIn: "root" });
};
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(QueuesService, [{
    type: Injectable,
    args: [{
      providedIn: "root"
    }]
  }], () => [{ type: HttpClient }, { type: void 0, decorators: [{
    type: Optional
  }, {
    type: Inject,
    args: [BASE_PATH]
  }] }, { type: Configuration, decorators: [{
    type: Optional
  }] }], null);
})();

// src/app/api/api/redirect.service.ts
var RedirectService = class _RedirectService {
  httpClient;
  basePath = "";
  defaultHeaders = new HttpHeaders();
  configuration = new Configuration();
  encoder;
  constructor(httpClient, basePath, configuration) {
    this.httpClient = httpClient;
    if (configuration) {
      this.configuration = configuration;
    }
    if (typeof this.configuration.basePath !== "string") {
      const firstBasePath = Array.isArray(basePath) ? basePath[0] : void 0;
      if (firstBasePath != void 0) {
        basePath = firstBasePath;
      }
      if (typeof basePath !== "string") {
        basePath = this.basePath;
      }
      this.configuration.basePath = basePath;
    }
    this.encoder = this.configuration.encoder || new CustomHttpParameterCodec();
  }
  // @ts-ignore
  addToHttpParams(httpParams, value, key) {
    if (typeof value === "object" && value instanceof Date === false) {
      httpParams = this.addToHttpParamsRecursive(httpParams, value);
    } else {
      httpParams = this.addToHttpParamsRecursive(httpParams, value, key);
    }
    return httpParams;
  }
  addToHttpParamsRecursive(httpParams, value, key) {
    if (value == null) {
      return httpParams;
    }
    if (typeof value === "object") {
      if (Array.isArray(value)) {
        value.forEach((elem) => httpParams = this.addToHttpParamsRecursive(httpParams, elem, key));
      } else if (value instanceof Date) {
        if (key != null) {
          httpParams = httpParams.append(key, value.toISOString().substring(0, 10));
        } else {
          throw Error("key may not be null if value is Date");
        }
      } else {
        Object.keys(value).forEach((k) => httpParams = this.addToHttpParamsRecursive(httpParams, value[k], key != null ? `${key}.${k}` : k));
      }
    } else if (key != null) {
      httpParams = httpParams.append(key, value);
    } else {
      throw Error("key may not be null if value is not object or array");
    }
    return httpParams;
  }
  redirect(id, options, observe = "body", reportProgress = false, httpOptions) {
    if (id === null || id === void 0) {
      throw new Error("Required parameter id was null or undefined when calling redirect.");
    }
    let localVarQueryParameters = new HttpParams({ encoder: this.encoder });
    if (id !== void 0 && id !== null) {
      localVarQueryParameters = this.addToHttpParams(localVarQueryParameters, id, "id");
    }
    if (options !== void 0 && options !== null) {
      localVarQueryParameters = this.addToHttpParams(localVarQueryParameters, options, "options");
    }
    let localVarHeaders = this.defaultHeaders;
    let localVarCredential;
    localVarCredential = this.configuration.lookupCredential("access_token");
    if (localVarCredential) {
      localVarHeaders = localVarHeaders.set("x-access-token", localVarCredential);
    }
    let localVarHttpHeaderAcceptSelected = httpOptions && httpOptions.httpHeaderAccept;
    if (localVarHttpHeaderAcceptSelected === void 0) {
      const httpHeaderAccepts = [];
      localVarHttpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
    }
    if (localVarHttpHeaderAcceptSelected !== void 0) {
      localVarHeaders = localVarHeaders.set("Accept", localVarHttpHeaderAcceptSelected);
    }
    let localVarHttpContext = httpOptions && httpOptions.context;
    if (localVarHttpContext === void 0) {
      localVarHttpContext = new HttpContext();
    }
    let localVarTransferCache = httpOptions && httpOptions.transferCache;
    if (localVarTransferCache === void 0) {
      localVarTransferCache = true;
    }
    let responseType_ = "json";
    if (localVarHttpHeaderAcceptSelected) {
      if (localVarHttpHeaderAcceptSelected.startsWith("text")) {
        responseType_ = "text";
      } else if (this.configuration.isJsonMime(localVarHttpHeaderAcceptSelected)) {
        responseType_ = "json";
      } else {
        responseType_ = "blob";
      }
    }
    let localVarPath = `/redirect`;
    return this.httpClient.request("get", `${this.configuration.basePath}${localVarPath}`, {
      context: localVarHttpContext,
      params: localVarQueryParameters,
      responseType: responseType_,
      withCredentials: this.configuration.withCredentials,
      headers: localVarHeaders,
      observe,
      transferCache: localVarTransferCache,
      reportProgress
    });
  }
  static \u0275fac = function RedirectService_Factory(__ngFactoryType__) {
    return new (__ngFactoryType__ || _RedirectService)(\u0275\u0275inject(HttpClient), \u0275\u0275inject(BASE_PATH, 8), \u0275\u0275inject(Configuration, 8));
  };
  static \u0275prov = /* @__PURE__ */ \u0275\u0275defineInjectable({ token: _RedirectService, factory: _RedirectService.\u0275fac, providedIn: "root" });
};
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(RedirectService, [{
    type: Injectable,
    args: [{
      providedIn: "root"
    }]
  }], () => [{ type: HttpClient }, { type: void 0, decorators: [{
    type: Optional
  }, {
    type: Inject,
    args: [BASE_PATH]
  }] }, { type: Configuration, decorators: [{
    type: Optional
  }] }], null);
})();

// src/app/api/api/reminders.service.ts
var RemindersService = class _RemindersService {
  httpClient;
  basePath = "";
  defaultHeaders = new HttpHeaders();
  configuration = new Configuration();
  encoder;
  constructor(httpClient, basePath, configuration) {
    this.httpClient = httpClient;
    if (configuration) {
      this.configuration = configuration;
    }
    if (typeof this.configuration.basePath !== "string") {
      const firstBasePath = Array.isArray(basePath) ? basePath[0] : void 0;
      if (firstBasePath != void 0) {
        basePath = firstBasePath;
      }
      if (typeof basePath !== "string") {
        basePath = this.basePath;
      }
      this.configuration.basePath = basePath;
    }
    this.encoder = this.configuration.encoder || new CustomHttpParameterCodec();
  }
  // @ts-ignore
  addToHttpParams(httpParams, value, key) {
    if (typeof value === "object" && value instanceof Date === false) {
      httpParams = this.addToHttpParamsRecursive(httpParams, value);
    } else {
      httpParams = this.addToHttpParamsRecursive(httpParams, value, key);
    }
    return httpParams;
  }
  addToHttpParamsRecursive(httpParams, value, key) {
    if (value == null) {
      return httpParams;
    }
    if (typeof value === "object") {
      if (Array.isArray(value)) {
        value.forEach((elem) => httpParams = this.addToHttpParamsRecursive(httpParams, elem, key));
      } else if (value instanceof Date) {
        if (key != null) {
          httpParams = httpParams.append(key, value.toISOString().substring(0, 10));
        } else {
          throw Error("key may not be null if value is Date");
        }
      } else {
        Object.keys(value).forEach((k) => httpParams = this.addToHttpParamsRecursive(httpParams, value[k], key != null ? `${key}.${k}` : k));
      }
    } else if (key != null) {
      httpParams = httpParams.append(key, value);
    } else {
      throw Error("key may not be null if value is not object or array");
    }
    return httpParams;
  }
  createReminder(request, observe = "body", reportProgress = false, options) {
    if (request === null || request === void 0) {
      throw new Error("Required parameter request was null or undefined when calling createReminder.");
    }
    let localVarHeaders = this.defaultHeaders;
    let localVarCredential;
    localVarCredential = this.configuration.lookupCredential("access_token");
    if (localVarCredential) {
      localVarHeaders = localVarHeaders.set("x-access-token", localVarCredential);
    }
    let localVarHttpHeaderAcceptSelected = options && options.httpHeaderAccept;
    if (localVarHttpHeaderAcceptSelected === void 0) {
      const httpHeaderAccepts = [
        "application/json"
      ];
      localVarHttpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
    }
    if (localVarHttpHeaderAcceptSelected !== void 0) {
      localVarHeaders = localVarHeaders.set("Accept", localVarHttpHeaderAcceptSelected);
    }
    let localVarHttpContext = options && options.context;
    if (localVarHttpContext === void 0) {
      localVarHttpContext = new HttpContext();
    }
    let localVarTransferCache = options && options.transferCache;
    if (localVarTransferCache === void 0) {
      localVarTransferCache = true;
    }
    const consumes = [
      "application/json"
    ];
    const httpContentTypeSelected = this.configuration.selectHeaderContentType(consumes);
    if (httpContentTypeSelected !== void 0) {
      localVarHeaders = localVarHeaders.set("Content-Type", httpContentTypeSelected);
    }
    let responseType_ = "json";
    if (localVarHttpHeaderAcceptSelected) {
      if (localVarHttpHeaderAcceptSelected.startsWith("text")) {
        responseType_ = "text";
      } else if (this.configuration.isJsonMime(localVarHttpHeaderAcceptSelected)) {
        responseType_ = "json";
      } else {
        responseType_ = "blob";
      }
    }
    let localVarPath = `/entities/reminders`;
    return this.httpClient.request("post", `${this.configuration.basePath}${localVarPath}`, {
      context: localVarHttpContext,
      body: request,
      responseType: responseType_,
      withCredentials: this.configuration.withCredentials,
      headers: localVarHeaders,
      observe,
      transferCache: localVarTransferCache,
      reportProgress
    });
  }
  deleteReminder(id, observe = "body", reportProgress = false, options) {
    if (id === null || id === void 0) {
      throw new Error("Required parameter id was null or undefined when calling deleteReminder.");
    }
    let localVarHeaders = this.defaultHeaders;
    let localVarCredential;
    localVarCredential = this.configuration.lookupCredential("access_token");
    if (localVarCredential) {
      localVarHeaders = localVarHeaders.set("x-access-token", localVarCredential);
    }
    let localVarHttpHeaderAcceptSelected = options && options.httpHeaderAccept;
    if (localVarHttpHeaderAcceptSelected === void 0) {
      const httpHeaderAccepts = [
        "application/json"
      ];
      localVarHttpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
    }
    if (localVarHttpHeaderAcceptSelected !== void 0) {
      localVarHeaders = localVarHeaders.set("Accept", localVarHttpHeaderAcceptSelected);
    }
    let localVarHttpContext = options && options.context;
    if (localVarHttpContext === void 0) {
      localVarHttpContext = new HttpContext();
    }
    let localVarTransferCache = options && options.transferCache;
    if (localVarTransferCache === void 0) {
      localVarTransferCache = true;
    }
    let responseType_ = "json";
    if (localVarHttpHeaderAcceptSelected) {
      if (localVarHttpHeaderAcceptSelected.startsWith("text")) {
        responseType_ = "text";
      } else if (this.configuration.isJsonMime(localVarHttpHeaderAcceptSelected)) {
        responseType_ = "json";
      } else {
        responseType_ = "blob";
      }
    }
    let localVarPath = `/entities/reminders/${this.configuration.encodeParam({ name: "id", value: id, in: "path", style: "simple", explode: false, dataType: "string", dataFormat: void 0 })}`;
    return this.httpClient.request("delete", `${this.configuration.basePath}${localVarPath}`, {
      context: localVarHttpContext,
      responseType: responseType_,
      withCredentials: this.configuration.withCredentials,
      headers: localVarHeaders,
      observe,
      transferCache: localVarTransferCache,
      reportProgress
    });
  }
  getReminder(id, observe = "body", reportProgress = false, options) {
    if (id === null || id === void 0) {
      throw new Error("Required parameter id was null or undefined when calling getReminder.");
    }
    let localVarHeaders = this.defaultHeaders;
    let localVarCredential;
    localVarCredential = this.configuration.lookupCredential("access_token");
    if (localVarCredential) {
      localVarHeaders = localVarHeaders.set("x-access-token", localVarCredential);
    }
    let localVarHttpHeaderAcceptSelected = options && options.httpHeaderAccept;
    if (localVarHttpHeaderAcceptSelected === void 0) {
      const httpHeaderAccepts = [
        "application/json"
      ];
      localVarHttpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
    }
    if (localVarHttpHeaderAcceptSelected !== void 0) {
      localVarHeaders = localVarHeaders.set("Accept", localVarHttpHeaderAcceptSelected);
    }
    let localVarHttpContext = options && options.context;
    if (localVarHttpContext === void 0) {
      localVarHttpContext = new HttpContext();
    }
    let localVarTransferCache = options && options.transferCache;
    if (localVarTransferCache === void 0) {
      localVarTransferCache = true;
    }
    let responseType_ = "json";
    if (localVarHttpHeaderAcceptSelected) {
      if (localVarHttpHeaderAcceptSelected.startsWith("text")) {
        responseType_ = "text";
      } else if (this.configuration.isJsonMime(localVarHttpHeaderAcceptSelected)) {
        responseType_ = "json";
      } else {
        responseType_ = "blob";
      }
    }
    let localVarPath = `/entities/reminders/${this.configuration.encodeParam({ name: "id", value: id, in: "path", style: "simple", explode: false, dataType: "string", dataFormat: void 0 })}`;
    return this.httpClient.request("get", `${this.configuration.basePath}${localVarPath}`, {
      context: localVarHttpContext,
      responseType: responseType_,
      withCredentials: this.configuration.withCredentials,
      headers: localVarHeaders,
      observe,
      transferCache: localVarTransferCache,
      reportProgress
    });
  }
  listReminders(owner, target, offset, limit, sort, filter, observe = "body", reportProgress = false, options) {
    if (owner === null || owner === void 0) {
      throw new Error("Required parameter owner was null or undefined when calling listReminders.");
    }
    let localVarQueryParameters = new HttpParams({ encoder: this.encoder });
    if (owner !== void 0 && owner !== null) {
      localVarQueryParameters = this.addToHttpParams(localVarQueryParameters, owner, "owner");
    }
    if (target !== void 0 && target !== null) {
      localVarQueryParameters = this.addToHttpParams(localVarQueryParameters, target, "target");
    }
    if (offset !== void 0 && offset !== null) {
      localVarQueryParameters = this.addToHttpParams(localVarQueryParameters, offset, "offset");
    }
    if (limit !== void 0 && limit !== null) {
      localVarQueryParameters = this.addToHttpParams(localVarQueryParameters, limit, "limit");
    }
    if (sort !== void 0 && sort !== null) {
      localVarQueryParameters = this.addToHttpParams(localVarQueryParameters, sort, "sort");
    }
    if (filter !== void 0 && filter !== null) {
      localVarQueryParameters = this.addToHttpParams(localVarQueryParameters, filter, "filter");
    }
    let localVarHeaders = this.defaultHeaders;
    let localVarCredential;
    localVarCredential = this.configuration.lookupCredential("access_token");
    if (localVarCredential) {
      localVarHeaders = localVarHeaders.set("x-access-token", localVarCredential);
    }
    let localVarHttpHeaderAcceptSelected = options && options.httpHeaderAccept;
    if (localVarHttpHeaderAcceptSelected === void 0) {
      const httpHeaderAccepts = [
        "application/json"
      ];
      localVarHttpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
    }
    if (localVarHttpHeaderAcceptSelected !== void 0) {
      localVarHeaders = localVarHeaders.set("Accept", localVarHttpHeaderAcceptSelected);
    }
    let localVarHttpContext = options && options.context;
    if (localVarHttpContext === void 0) {
      localVarHttpContext = new HttpContext();
    }
    let localVarTransferCache = options && options.transferCache;
    if (localVarTransferCache === void 0) {
      localVarTransferCache = true;
    }
    let responseType_ = "json";
    if (localVarHttpHeaderAcceptSelected) {
      if (localVarHttpHeaderAcceptSelected.startsWith("text")) {
        responseType_ = "text";
      } else if (this.configuration.isJsonMime(localVarHttpHeaderAcceptSelected)) {
        responseType_ = "json";
      } else {
        responseType_ = "blob";
      }
    }
    let localVarPath = `/entities/reminders`;
    return this.httpClient.request("get", `${this.configuration.basePath}${localVarPath}`, {
      context: localVarHttpContext,
      params: localVarQueryParameters,
      responseType: responseType_,
      withCredentials: this.configuration.withCredentials,
      headers: localVarHeaders,
      observe,
      transferCache: localVarTransferCache,
      reportProgress
    });
  }
  updateReminder(id, request, observe = "body", reportProgress = false, options) {
    if (id === null || id === void 0) {
      throw new Error("Required parameter id was null or undefined when calling updateReminder.");
    }
    if (request === null || request === void 0) {
      throw new Error("Required parameter request was null or undefined when calling updateReminder.");
    }
    let localVarHeaders = this.defaultHeaders;
    let localVarCredential;
    localVarCredential = this.configuration.lookupCredential("access_token");
    if (localVarCredential) {
      localVarHeaders = localVarHeaders.set("x-access-token", localVarCredential);
    }
    let localVarHttpHeaderAcceptSelected = options && options.httpHeaderAccept;
    if (localVarHttpHeaderAcceptSelected === void 0) {
      const httpHeaderAccepts = [
        "application/json"
      ];
      localVarHttpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
    }
    if (localVarHttpHeaderAcceptSelected !== void 0) {
      localVarHeaders = localVarHeaders.set("Accept", localVarHttpHeaderAcceptSelected);
    }
    let localVarHttpContext = options && options.context;
    if (localVarHttpContext === void 0) {
      localVarHttpContext = new HttpContext();
    }
    let localVarTransferCache = options && options.transferCache;
    if (localVarTransferCache === void 0) {
      localVarTransferCache = true;
    }
    const consumes = [
      "application/json"
    ];
    const httpContentTypeSelected = this.configuration.selectHeaderContentType(consumes);
    if (httpContentTypeSelected !== void 0) {
      localVarHeaders = localVarHeaders.set("Content-Type", httpContentTypeSelected);
    }
    let responseType_ = "json";
    if (localVarHttpHeaderAcceptSelected) {
      if (localVarHttpHeaderAcceptSelected.startsWith("text")) {
        responseType_ = "text";
      } else if (this.configuration.isJsonMime(localVarHttpHeaderAcceptSelected)) {
        responseType_ = "json";
      } else {
        responseType_ = "blob";
      }
    }
    let localVarPath = `/entities/reminders/${this.configuration.encodeParam({ name: "id", value: id, in: "path", style: "simple", explode: false, dataType: "string", dataFormat: void 0 })}`;
    return this.httpClient.request("put", `${this.configuration.basePath}${localVarPath}`, {
      context: localVarHttpContext,
      body: request,
      responseType: responseType_,
      withCredentials: this.configuration.withCredentials,
      headers: localVarHeaders,
      observe,
      transferCache: localVarTransferCache,
      reportProgress
    });
  }
  static \u0275fac = function RemindersService_Factory(__ngFactoryType__) {
    return new (__ngFactoryType__ || _RemindersService)(\u0275\u0275inject(HttpClient), \u0275\u0275inject(BASE_PATH, 8), \u0275\u0275inject(Configuration, 8));
  };
  static \u0275prov = /* @__PURE__ */ \u0275\u0275defineInjectable({ token: _RemindersService, factory: _RemindersService.\u0275fac, providedIn: "root" });
};
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(RemindersService, [{
    type: Injectable,
    args: [{
      providedIn: "root"
    }]
  }], () => [{ type: HttpClient }, { type: void 0, decorators: [{
    type: Optional
  }, {
    type: Inject,
    args: [BASE_PATH]
  }] }, { type: Configuration, decorators: [{
    type: Optional
  }] }], null);
})();

// src/app/api/api/reportDefinitions.service.ts
var ReportDefinitionsService = class _ReportDefinitionsService {
  httpClient;
  basePath = "";
  defaultHeaders = new HttpHeaders();
  configuration = new Configuration();
  encoder;
  constructor(httpClient, basePath, configuration) {
    this.httpClient = httpClient;
    if (configuration) {
      this.configuration = configuration;
    }
    if (typeof this.configuration.basePath !== "string") {
      const firstBasePath = Array.isArray(basePath) ? basePath[0] : void 0;
      if (firstBasePath != void 0) {
        basePath = firstBasePath;
      }
      if (typeof basePath !== "string") {
        basePath = this.basePath;
      }
      this.configuration.basePath = basePath;
    }
    this.encoder = this.configuration.encoder || new CustomHttpParameterCodec();
  }
  // @ts-ignore
  addToHttpParams(httpParams, value, key) {
    if (typeof value === "object" && value instanceof Date === false) {
      httpParams = this.addToHttpParamsRecursive(httpParams, value);
    } else {
      httpParams = this.addToHttpParamsRecursive(httpParams, value, key);
    }
    return httpParams;
  }
  addToHttpParamsRecursive(httpParams, value, key) {
    if (value == null) {
      return httpParams;
    }
    if (typeof value === "object") {
      if (Array.isArray(value)) {
        value.forEach((elem) => httpParams = this.addToHttpParamsRecursive(httpParams, elem, key));
      } else if (value instanceof Date) {
        if (key != null) {
          httpParams = httpParams.append(key, value.toISOString().substring(0, 10));
        } else {
          throw Error("key may not be null if value is Date");
        }
      } else {
        Object.keys(value).forEach((k) => httpParams = this.addToHttpParamsRecursive(httpParams, value[k], key != null ? `${key}.${k}` : k));
      }
    } else if (key != null) {
      httpParams = httpParams.append(key, value);
    } else {
      throw Error("key may not be null if value is not object or array");
    }
    return httpParams;
  }
  getReportDefinition(id, observe = "body", reportProgress = false, options) {
    if (id === null || id === void 0) {
      throw new Error("Required parameter id was null or undefined when calling getReportDefinition.");
    }
    let localVarHeaders = this.defaultHeaders;
    let localVarCredential;
    localVarCredential = this.configuration.lookupCredential("access_token");
    if (localVarCredential) {
      localVarHeaders = localVarHeaders.set("x-access-token", localVarCredential);
    }
    let localVarHttpHeaderAcceptSelected = options && options.httpHeaderAccept;
    if (localVarHttpHeaderAcceptSelected === void 0) {
      const httpHeaderAccepts = [
        "application/json"
      ];
      localVarHttpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
    }
    if (localVarHttpHeaderAcceptSelected !== void 0) {
      localVarHeaders = localVarHeaders.set("Accept", localVarHttpHeaderAcceptSelected);
    }
    let localVarHttpContext = options && options.context;
    if (localVarHttpContext === void 0) {
      localVarHttpContext = new HttpContext();
    }
    let localVarTransferCache = options && options.transferCache;
    if (localVarTransferCache === void 0) {
      localVarTransferCache = true;
    }
    let responseType_ = "json";
    if (localVarHttpHeaderAcceptSelected) {
      if (localVarHttpHeaderAcceptSelected.startsWith("text")) {
        responseType_ = "text";
      } else if (this.configuration.isJsonMime(localVarHttpHeaderAcceptSelected)) {
        responseType_ = "json";
      } else {
        responseType_ = "blob";
      }
    }
    let localVarPath = `/entities/reportdefinitions/${this.configuration.encodeParam({ name: "id", value: id, in: "path", style: "simple", explode: false, dataType: "string", dataFormat: void 0 })}`;
    return this.httpClient.request("get", `${this.configuration.basePath}${localVarPath}`, {
      context: localVarHttpContext,
      responseType: responseType_,
      withCredentials: this.configuration.withCredentials,
      headers: localVarHeaders,
      observe,
      transferCache: localVarTransferCache,
      reportProgress
    });
  }
  listReportDefinitions(owner, observe = "body", reportProgress = false, options) {
    if (owner === null || owner === void 0) {
      throw new Error("Required parameter owner was null or undefined when calling listReportDefinitions.");
    }
    let localVarQueryParameters = new HttpParams({ encoder: this.encoder });
    if (owner !== void 0 && owner !== null) {
      localVarQueryParameters = this.addToHttpParams(localVarQueryParameters, owner, "owner");
    }
    let localVarHeaders = this.defaultHeaders;
    let localVarCredential;
    localVarCredential = this.configuration.lookupCredential("access_token");
    if (localVarCredential) {
      localVarHeaders = localVarHeaders.set("x-access-token", localVarCredential);
    }
    let localVarHttpHeaderAcceptSelected = options && options.httpHeaderAccept;
    if (localVarHttpHeaderAcceptSelected === void 0) {
      const httpHeaderAccepts = [
        "application/json"
      ];
      localVarHttpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
    }
    if (localVarHttpHeaderAcceptSelected !== void 0) {
      localVarHeaders = localVarHeaders.set("Accept", localVarHttpHeaderAcceptSelected);
    }
    let localVarHttpContext = options && options.context;
    if (localVarHttpContext === void 0) {
      localVarHttpContext = new HttpContext();
    }
    let localVarTransferCache = options && options.transferCache;
    if (localVarTransferCache === void 0) {
      localVarTransferCache = true;
    }
    let responseType_ = "json";
    if (localVarHttpHeaderAcceptSelected) {
      if (localVarHttpHeaderAcceptSelected.startsWith("text")) {
        responseType_ = "text";
      } else if (this.configuration.isJsonMime(localVarHttpHeaderAcceptSelected)) {
        responseType_ = "json";
      } else {
        responseType_ = "blob";
      }
    }
    let localVarPath = `/entities/reportdefinitions`;
    return this.httpClient.request("get", `${this.configuration.basePath}${localVarPath}`, {
      context: localVarHttpContext,
      params: localVarQueryParameters,
      responseType: responseType_,
      withCredentials: this.configuration.withCredentials,
      headers: localVarHeaders,
      observe,
      transferCache: localVarTransferCache,
      reportProgress
    });
  }
  static \u0275fac = function ReportDefinitionsService_Factory(__ngFactoryType__) {
    return new (__ngFactoryType__ || _ReportDefinitionsService)(\u0275\u0275inject(HttpClient), \u0275\u0275inject(BASE_PATH, 8), \u0275\u0275inject(Configuration, 8));
  };
  static \u0275prov = /* @__PURE__ */ \u0275\u0275defineInjectable({ token: _ReportDefinitionsService, factory: _ReportDefinitionsService.\u0275fac, providedIn: "root" });
};
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(ReportDefinitionsService, [{
    type: Injectable,
    args: [{
      providedIn: "root"
    }]
  }], () => [{ type: HttpClient }, { type: void 0, decorators: [{
    type: Optional
  }, {
    type: Inject,
    args: [BASE_PATH]
  }] }, { type: Configuration, decorators: [{
    type: Optional
  }] }], null);
})();

// src/app/api/api/reportTemplates.service.ts
var ReportTemplatesService = class _ReportTemplatesService {
  httpClient;
  basePath = "";
  defaultHeaders = new HttpHeaders();
  configuration = new Configuration();
  encoder;
  constructor(httpClient, basePath, configuration) {
    this.httpClient = httpClient;
    if (configuration) {
      this.configuration = configuration;
    }
    if (typeof this.configuration.basePath !== "string") {
      const firstBasePath = Array.isArray(basePath) ? basePath[0] : void 0;
      if (firstBasePath != void 0) {
        basePath = firstBasePath;
      }
      if (typeof basePath !== "string") {
        basePath = this.basePath;
      }
      this.configuration.basePath = basePath;
    }
    this.encoder = this.configuration.encoder || new CustomHttpParameterCodec();
  }
  // @ts-ignore
  addToHttpParams(httpParams, value, key) {
    if (typeof value === "object" && value instanceof Date === false) {
      httpParams = this.addToHttpParamsRecursive(httpParams, value);
    } else {
      httpParams = this.addToHttpParamsRecursive(httpParams, value, key);
    }
    return httpParams;
  }
  addToHttpParamsRecursive(httpParams, value, key) {
    if (value == null) {
      return httpParams;
    }
    if (typeof value === "object") {
      if (Array.isArray(value)) {
        value.forEach((elem) => httpParams = this.addToHttpParamsRecursive(httpParams, elem, key));
      } else if (value instanceof Date) {
        if (key != null) {
          httpParams = httpParams.append(key, value.toISOString().substring(0, 10));
        } else {
          throw Error("key may not be null if value is Date");
        }
      } else {
        Object.keys(value).forEach((k) => httpParams = this.addToHttpParamsRecursive(httpParams, value[k], key != null ? `${key}.${k}` : k));
      }
    } else if (key != null) {
      httpParams = httpParams.append(key, value);
    } else {
      throw Error("key may not be null if value is not object or array");
    }
    return httpParams;
  }
  createReportTemplate(request, observe = "body", reportProgress = false, options) {
    if (request === null || request === void 0) {
      throw new Error("Required parameter request was null or undefined when calling createReportTemplate.");
    }
    let localVarHeaders = this.defaultHeaders;
    let localVarCredential;
    localVarCredential = this.configuration.lookupCredential("access_token");
    if (localVarCredential) {
      localVarHeaders = localVarHeaders.set("x-access-token", localVarCredential);
    }
    let localVarHttpHeaderAcceptSelected = options && options.httpHeaderAccept;
    if (localVarHttpHeaderAcceptSelected === void 0) {
      const httpHeaderAccepts = [
        "application/json"
      ];
      localVarHttpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
    }
    if (localVarHttpHeaderAcceptSelected !== void 0) {
      localVarHeaders = localVarHeaders.set("Accept", localVarHttpHeaderAcceptSelected);
    }
    let localVarHttpContext = options && options.context;
    if (localVarHttpContext === void 0) {
      localVarHttpContext = new HttpContext();
    }
    let localVarTransferCache = options && options.transferCache;
    if (localVarTransferCache === void 0) {
      localVarTransferCache = true;
    }
    const consumes = [
      "application/json"
    ];
    const httpContentTypeSelected = this.configuration.selectHeaderContentType(consumes);
    if (httpContentTypeSelected !== void 0) {
      localVarHeaders = localVarHeaders.set("Content-Type", httpContentTypeSelected);
    }
    let responseType_ = "json";
    if (localVarHttpHeaderAcceptSelected) {
      if (localVarHttpHeaderAcceptSelected.startsWith("text")) {
        responseType_ = "text";
      } else if (this.configuration.isJsonMime(localVarHttpHeaderAcceptSelected)) {
        responseType_ = "json";
      } else {
        responseType_ = "blob";
      }
    }
    let localVarPath = `/entities/reporttemplates`;
    return this.httpClient.request("post", `${this.configuration.basePath}${localVarPath}`, {
      context: localVarHttpContext,
      body: request,
      responseType: responseType_,
      withCredentials: this.configuration.withCredentials,
      headers: localVarHeaders,
      observe,
      transferCache: localVarTransferCache,
      reportProgress
    });
  }
  deleteReportTemplate(id, observe = "body", reportProgress = false, options) {
    if (id === null || id === void 0) {
      throw new Error("Required parameter id was null or undefined when calling deleteReportTemplate.");
    }
    let localVarHeaders = this.defaultHeaders;
    let localVarCredential;
    localVarCredential = this.configuration.lookupCredential("access_token");
    if (localVarCredential) {
      localVarHeaders = localVarHeaders.set("x-access-token", localVarCredential);
    }
    let localVarHttpHeaderAcceptSelected = options && options.httpHeaderAccept;
    if (localVarHttpHeaderAcceptSelected === void 0) {
      const httpHeaderAccepts = [
        "application/json"
      ];
      localVarHttpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
    }
    if (localVarHttpHeaderAcceptSelected !== void 0) {
      localVarHeaders = localVarHeaders.set("Accept", localVarHttpHeaderAcceptSelected);
    }
    let localVarHttpContext = options && options.context;
    if (localVarHttpContext === void 0) {
      localVarHttpContext = new HttpContext();
    }
    let localVarTransferCache = options && options.transferCache;
    if (localVarTransferCache === void 0) {
      localVarTransferCache = true;
    }
    let responseType_ = "json";
    if (localVarHttpHeaderAcceptSelected) {
      if (localVarHttpHeaderAcceptSelected.startsWith("text")) {
        responseType_ = "text";
      } else if (this.configuration.isJsonMime(localVarHttpHeaderAcceptSelected)) {
        responseType_ = "json";
      } else {
        responseType_ = "blob";
      }
    }
    let localVarPath = `/entities/reporttemplates/${this.configuration.encodeParam({ name: "id", value: id, in: "path", style: "simple", explode: false, dataType: "string", dataFormat: void 0 })}`;
    return this.httpClient.request("delete", `${this.configuration.basePath}${localVarPath}`, {
      context: localVarHttpContext,
      responseType: responseType_,
      withCredentials: this.configuration.withCredentials,
      headers: localVarHeaders,
      observe,
      transferCache: localVarTransferCache,
      reportProgress
    });
  }
  getReportTemplate(id, observe = "body", reportProgress = false, options) {
    if (id === null || id === void 0) {
      throw new Error("Required parameter id was null or undefined when calling getReportTemplate.");
    }
    let localVarHeaders = this.defaultHeaders;
    let localVarCredential;
    localVarCredential = this.configuration.lookupCredential("access_token");
    if (localVarCredential) {
      localVarHeaders = localVarHeaders.set("x-access-token", localVarCredential);
    }
    let localVarHttpHeaderAcceptSelected = options && options.httpHeaderAccept;
    if (localVarHttpHeaderAcceptSelected === void 0) {
      const httpHeaderAccepts = [
        "application/json"
      ];
      localVarHttpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
    }
    if (localVarHttpHeaderAcceptSelected !== void 0) {
      localVarHeaders = localVarHeaders.set("Accept", localVarHttpHeaderAcceptSelected);
    }
    let localVarHttpContext = options && options.context;
    if (localVarHttpContext === void 0) {
      localVarHttpContext = new HttpContext();
    }
    let localVarTransferCache = options && options.transferCache;
    if (localVarTransferCache === void 0) {
      localVarTransferCache = true;
    }
    let responseType_ = "json";
    if (localVarHttpHeaderAcceptSelected) {
      if (localVarHttpHeaderAcceptSelected.startsWith("text")) {
        responseType_ = "text";
      } else if (this.configuration.isJsonMime(localVarHttpHeaderAcceptSelected)) {
        responseType_ = "json";
      } else {
        responseType_ = "blob";
      }
    }
    let localVarPath = `/entities/reporttemplates/${this.configuration.encodeParam({ name: "id", value: id, in: "path", style: "simple", explode: false, dataType: "string", dataFormat: void 0 })}`;
    return this.httpClient.request("get", `${this.configuration.basePath}${localVarPath}`, {
      context: localVarHttpContext,
      responseType: responseType_,
      withCredentials: this.configuration.withCredentials,
      headers: localVarHeaders,
      observe,
      transferCache: localVarTransferCache,
      reportProgress
    });
  }
  listReportTemplates(owner, offset, limit, sort, filter, observe = "body", reportProgress = false, options) {
    if (owner === null || owner === void 0) {
      throw new Error("Required parameter owner was null or undefined when calling listReportTemplates.");
    }
    let localVarQueryParameters = new HttpParams({ encoder: this.encoder });
    if (owner !== void 0 && owner !== null) {
      localVarQueryParameters = this.addToHttpParams(localVarQueryParameters, owner, "owner");
    }
    if (offset !== void 0 && offset !== null) {
      localVarQueryParameters = this.addToHttpParams(localVarQueryParameters, offset, "offset");
    }
    if (limit !== void 0 && limit !== null) {
      localVarQueryParameters = this.addToHttpParams(localVarQueryParameters, limit, "limit");
    }
    if (sort !== void 0 && sort !== null) {
      localVarQueryParameters = this.addToHttpParams(localVarQueryParameters, sort, "sort");
    }
    if (filter !== void 0 && filter !== null) {
      localVarQueryParameters = this.addToHttpParams(localVarQueryParameters, filter, "filter");
    }
    let localVarHeaders = this.defaultHeaders;
    let localVarCredential;
    localVarCredential = this.configuration.lookupCredential("access_token");
    if (localVarCredential) {
      localVarHeaders = localVarHeaders.set("x-access-token", localVarCredential);
    }
    let localVarHttpHeaderAcceptSelected = options && options.httpHeaderAccept;
    if (localVarHttpHeaderAcceptSelected === void 0) {
      const httpHeaderAccepts = [
        "application/json"
      ];
      localVarHttpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
    }
    if (localVarHttpHeaderAcceptSelected !== void 0) {
      localVarHeaders = localVarHeaders.set("Accept", localVarHttpHeaderAcceptSelected);
    }
    let localVarHttpContext = options && options.context;
    if (localVarHttpContext === void 0) {
      localVarHttpContext = new HttpContext();
    }
    let localVarTransferCache = options && options.transferCache;
    if (localVarTransferCache === void 0) {
      localVarTransferCache = true;
    }
    let responseType_ = "json";
    if (localVarHttpHeaderAcceptSelected) {
      if (localVarHttpHeaderAcceptSelected.startsWith("text")) {
        responseType_ = "text";
      } else if (this.configuration.isJsonMime(localVarHttpHeaderAcceptSelected)) {
        responseType_ = "json";
      } else {
        responseType_ = "blob";
      }
    }
    let localVarPath = `/entities/reporttemplates`;
    return this.httpClient.request("get", `${this.configuration.basePath}${localVarPath}`, {
      context: localVarHttpContext,
      params: localVarQueryParameters,
      responseType: responseType_,
      withCredentials: this.configuration.withCredentials,
      headers: localVarHeaders,
      observe,
      transferCache: localVarTransferCache,
      reportProgress
    });
  }
  updateReportTemplate(id, request, observe = "body", reportProgress = false, options) {
    if (id === null || id === void 0) {
      throw new Error("Required parameter id was null or undefined when calling updateReportTemplate.");
    }
    if (request === null || request === void 0) {
      throw new Error("Required parameter request was null or undefined when calling updateReportTemplate.");
    }
    let localVarHeaders = this.defaultHeaders;
    let localVarCredential;
    localVarCredential = this.configuration.lookupCredential("access_token");
    if (localVarCredential) {
      localVarHeaders = localVarHeaders.set("x-access-token", localVarCredential);
    }
    let localVarHttpHeaderAcceptSelected = options && options.httpHeaderAccept;
    if (localVarHttpHeaderAcceptSelected === void 0) {
      const httpHeaderAccepts = [
        "application/json"
      ];
      localVarHttpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
    }
    if (localVarHttpHeaderAcceptSelected !== void 0) {
      localVarHeaders = localVarHeaders.set("Accept", localVarHttpHeaderAcceptSelected);
    }
    let localVarHttpContext = options && options.context;
    if (localVarHttpContext === void 0) {
      localVarHttpContext = new HttpContext();
    }
    let localVarTransferCache = options && options.transferCache;
    if (localVarTransferCache === void 0) {
      localVarTransferCache = true;
    }
    const consumes = [
      "application/json"
    ];
    const httpContentTypeSelected = this.configuration.selectHeaderContentType(consumes);
    if (httpContentTypeSelected !== void 0) {
      localVarHeaders = localVarHeaders.set("Content-Type", httpContentTypeSelected);
    }
    let responseType_ = "json";
    if (localVarHttpHeaderAcceptSelected) {
      if (localVarHttpHeaderAcceptSelected.startsWith("text")) {
        responseType_ = "text";
      } else if (this.configuration.isJsonMime(localVarHttpHeaderAcceptSelected)) {
        responseType_ = "json";
      } else {
        responseType_ = "blob";
      }
    }
    let localVarPath = `/entities/reporttemplates/${this.configuration.encodeParam({ name: "id", value: id, in: "path", style: "simple", explode: false, dataType: "string", dataFormat: void 0 })}`;
    return this.httpClient.request("put", `${this.configuration.basePath}${localVarPath}`, {
      context: localVarHttpContext,
      body: request,
      responseType: responseType_,
      withCredentials: this.configuration.withCredentials,
      headers: localVarHeaders,
      observe,
      transferCache: localVarTransferCache,
      reportProgress
    });
  }
  static \u0275fac = function ReportTemplatesService_Factory(__ngFactoryType__) {
    return new (__ngFactoryType__ || _ReportTemplatesService)(\u0275\u0275inject(HttpClient), \u0275\u0275inject(BASE_PATH, 8), \u0275\u0275inject(Configuration, 8));
  };
  static \u0275prov = /* @__PURE__ */ \u0275\u0275defineInjectable({ token: _ReportTemplatesService, factory: _ReportTemplatesService.\u0275fac, providedIn: "root" });
};
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(ReportTemplatesService, [{
    type: Injectable,
    args: [{
      providedIn: "root"
    }]
  }], () => [{ type: HttpClient }, { type: void 0, decorators: [{
    type: Optional
  }, {
    type: Inject,
    args: [BASE_PATH]
  }] }, { type: Configuration, decorators: [{
    type: Optional
  }] }], null);
})();

// src/app/api/api/reports.service.ts
var ReportsService = class _ReportsService {
  httpClient;
  basePath = "";
  defaultHeaders = new HttpHeaders();
  configuration = new Configuration();
  encoder;
  constructor(httpClient, basePath, configuration) {
    this.httpClient = httpClient;
    if (configuration) {
      this.configuration = configuration;
    }
    if (typeof this.configuration.basePath !== "string") {
      const firstBasePath = Array.isArray(basePath) ? basePath[0] : void 0;
      if (firstBasePath != void 0) {
        basePath = firstBasePath;
      }
      if (typeof basePath !== "string") {
        basePath = this.basePath;
      }
      this.configuration.basePath = basePath;
    }
    this.encoder = this.configuration.encoder || new CustomHttpParameterCodec();
  }
  // @ts-ignore
  addToHttpParams(httpParams, value, key) {
    if (typeof value === "object" && value instanceof Date === false) {
      httpParams = this.addToHttpParamsRecursive(httpParams, value);
    } else {
      httpParams = this.addToHttpParamsRecursive(httpParams, value, key);
    }
    return httpParams;
  }
  addToHttpParamsRecursive(httpParams, value, key) {
    if (value == null) {
      return httpParams;
    }
    if (typeof value === "object") {
      if (Array.isArray(value)) {
        value.forEach((elem) => httpParams = this.addToHttpParamsRecursive(httpParams, elem, key));
      } else if (value instanceof Date) {
        if (key != null) {
          httpParams = httpParams.append(key, value.toISOString().substring(0, 10));
        } else {
          throw Error("key may not be null if value is Date");
        }
      } else {
        Object.keys(value).forEach((k) => httpParams = this.addToHttpParamsRecursive(httpParams, value[k], key != null ? `${key}.${k}` : k));
      }
    } else if (key != null) {
      httpParams = httpParams.append(key, value);
    } else {
      throw Error("key may not be null if value is not object or array");
    }
    return httpParams;
  }
  cancelReport(id, observe = "body", reportProgress = false, options) {
    if (id === null || id === void 0) {
      throw new Error("Required parameter id was null or undefined when calling cancelReport.");
    }
    let localVarHeaders = this.defaultHeaders;
    let localVarCredential;
    localVarCredential = this.configuration.lookupCredential("access_token");
    if (localVarCredential) {
      localVarHeaders = localVarHeaders.set("x-access-token", localVarCredential);
    }
    let localVarHttpHeaderAcceptSelected = options && options.httpHeaderAccept;
    if (localVarHttpHeaderAcceptSelected === void 0) {
      const httpHeaderAccepts = [
        "application/json"
      ];
      localVarHttpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
    }
    if (localVarHttpHeaderAcceptSelected !== void 0) {
      localVarHeaders = localVarHeaders.set("Accept", localVarHttpHeaderAcceptSelected);
    }
    let localVarHttpContext = options && options.context;
    if (localVarHttpContext === void 0) {
      localVarHttpContext = new HttpContext();
    }
    let localVarTransferCache = options && options.transferCache;
    if (localVarTransferCache === void 0) {
      localVarTransferCache = true;
    }
    let responseType_ = "json";
    if (localVarHttpHeaderAcceptSelected) {
      if (localVarHttpHeaderAcceptSelected.startsWith("text")) {
        responseType_ = "text";
      } else if (this.configuration.isJsonMime(localVarHttpHeaderAcceptSelected)) {
        responseType_ = "json";
      } else {
        responseType_ = "blob";
      }
    }
    let localVarPath = `/reports/queues/${this.configuration.encodeParam({ name: "id", value: id, in: "path", style: "simple", explode: false, dataType: "string", dataFormat: void 0 })}`;
    return this.httpClient.request("delete", `${this.configuration.basePath}${localVarPath}`, {
      context: localVarHttpContext,
      responseType: responseType_,
      withCredentials: this.configuration.withCredentials,
      headers: localVarHeaders,
      observe,
      transferCache: localVarTransferCache,
      reportProgress
    });
  }
  getAnalyticsBaseReport(id, observe = "body", reportProgress = false, options) {
    if (id === null || id === void 0) {
      throw new Error("Required parameter id was null or undefined when calling getAnalyticsBaseReport.");
    }
    let localVarHeaders = this.defaultHeaders;
    let localVarCredential;
    localVarCredential = this.configuration.lookupCredential("access_token");
    if (localVarCredential) {
      localVarHeaders = localVarHeaders.set("x-access-token", localVarCredential);
    }
    let localVarHttpHeaderAcceptSelected = options && options.httpHeaderAccept;
    if (localVarHttpHeaderAcceptSelected === void 0) {
      const httpHeaderAccepts = [
        "application/json"
      ];
      localVarHttpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
    }
    if (localVarHttpHeaderAcceptSelected !== void 0) {
      localVarHeaders = localVarHeaders.set("Accept", localVarHttpHeaderAcceptSelected);
    }
    let localVarHttpContext = options && options.context;
    if (localVarHttpContext === void 0) {
      localVarHttpContext = new HttpContext();
    }
    let localVarTransferCache = options && options.transferCache;
    if (localVarTransferCache === void 0) {
      localVarTransferCache = true;
    }
    let responseType_ = "json";
    if (localVarHttpHeaderAcceptSelected) {
      if (localVarHttpHeaderAcceptSelected.startsWith("text")) {
        responseType_ = "text";
      } else if (this.configuration.isJsonMime(localVarHttpHeaderAcceptSelected)) {
        responseType_ = "json";
      } else {
        responseType_ = "blob";
      }
    }
    let localVarPath = `/reports/analytics/${this.configuration.encodeParam({ name: "id", value: id, in: "path", style: "simple", explode: false, dataType: "string", dataFormat: void 0 })}`;
    return this.httpClient.request("get", `${this.configuration.basePath}${localVarPath}`, {
      context: localVarHttpContext,
      responseType: responseType_,
      withCredentials: this.configuration.withCredentials,
      headers: localVarHeaders,
      observe,
      transferCache: localVarTransferCache,
      reportProgress
    });
  }
  getCompletedReport(id, observe = "body", reportProgress = false, options) {
    if (id === null || id === void 0) {
      throw new Error("Required parameter id was null or undefined when calling getCompletedReport.");
    }
    let localVarHeaders = this.defaultHeaders;
    let localVarCredential;
    localVarCredential = this.configuration.lookupCredential("access_token");
    if (localVarCredential) {
      localVarHeaders = localVarHeaders.set("x-access-token", localVarCredential);
    }
    let localVarHttpHeaderAcceptSelected = options && options.httpHeaderAccept;
    if (localVarHttpHeaderAcceptSelected === void 0) {
      const httpHeaderAccepts = [
        "application/json"
      ];
      localVarHttpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
    }
    if (localVarHttpHeaderAcceptSelected !== void 0) {
      localVarHeaders = localVarHeaders.set("Accept", localVarHttpHeaderAcceptSelected);
    }
    let localVarHttpContext = options && options.context;
    if (localVarHttpContext === void 0) {
      localVarHttpContext = new HttpContext();
    }
    let localVarTransferCache = options && options.transferCache;
    if (localVarTransferCache === void 0) {
      localVarTransferCache = true;
    }
    let responseType_ = "json";
    if (localVarHttpHeaderAcceptSelected) {
      if (localVarHttpHeaderAcceptSelected.startsWith("text")) {
        responseType_ = "text";
      } else if (this.configuration.isJsonMime(localVarHttpHeaderAcceptSelected)) {
        responseType_ = "json";
      } else {
        responseType_ = "blob";
      }
    }
    let localVarPath = `/reports/history/${this.configuration.encodeParam({ name: "id", value: id, in: "path", style: "simple", explode: false, dataType: "string", dataFormat: void 0 })}`;
    return this.httpClient.request("get", `${this.configuration.basePath}${localVarPath}`, {
      context: localVarHttpContext,
      responseType: responseType_,
      withCredentials: this.configuration.withCredentials,
      headers: localVarHeaders,
      observe,
      transferCache: localVarTransferCache,
      reportProgress
    });
  }
  getCompletedReportData(id, filename, observe = "body", reportProgress = false, options) {
    if (id === null || id === void 0) {
      throw new Error("Required parameter id was null or undefined when calling getCompletedReportData.");
    }
    if (filename === null || filename === void 0) {
      throw new Error("Required parameter filename was null or undefined when calling getCompletedReportData.");
    }
    let localVarHeaders = this.defaultHeaders;
    let localVarHttpHeaderAcceptSelected = options && options.httpHeaderAccept;
    if (localVarHttpHeaderAcceptSelected === void 0) {
      const httpHeaderAccepts = [
        "application/json"
      ];
      localVarHttpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
    }
    if (localVarHttpHeaderAcceptSelected !== void 0) {
      localVarHeaders = localVarHeaders.set("Accept", localVarHttpHeaderAcceptSelected);
    }
    let localVarHttpContext = options && options.context;
    if (localVarHttpContext === void 0) {
      localVarHttpContext = new HttpContext();
    }
    let localVarTransferCache = options && options.transferCache;
    if (localVarTransferCache === void 0) {
      localVarTransferCache = true;
    }
    let responseType_ = "json";
    if (localVarHttpHeaderAcceptSelected) {
      if (localVarHttpHeaderAcceptSelected.startsWith("text")) {
        responseType_ = "text";
      } else if (this.configuration.isJsonMime(localVarHttpHeaderAcceptSelected)) {
        responseType_ = "json";
      } else {
        responseType_ = "blob";
      }
    }
    let localVarPath = `/reports/history/${this.configuration.encodeParam({ name: "id", value: id, in: "path", style: "simple", explode: false, dataType: "string", dataFormat: void 0 })}/${this.configuration.encodeParam({ name: "filename", value: filename, in: "path", style: "simple", explode: false, dataType: "string", dataFormat: void 0 })}`;
    return this.httpClient.request("get", `${this.configuration.basePath}${localVarPath}`, {
      context: localVarHttpContext,
      responseType: responseType_,
      withCredentials: this.configuration.withCredentials,
      headers: localVarHeaders,
      observe,
      transferCache: localVarTransferCache,
      reportProgress
    });
  }
  getCompletedReportDataStream(id, filename, outputFormat, observe = "body", reportProgress = false, httpOptions) {
    if (id === null || id === void 0) {
      throw new Error("Required parameter id was null or undefined when calling getCompletedReportDataStream.");
    }
    if (filename === null || filename === void 0) {
      throw new Error("Required parameter filename was null or undefined when calling getCompletedReportDataStream.");
    }
    let localVarQueryParameters = new HttpParams({ encoder: this.encoder });
    if (outputFormat !== void 0 && outputFormat !== null) {
      localVarQueryParameters = this.addToHttpParams(localVarQueryParameters, outputFormat, "outputFormat");
    }
    let localVarHeaders = this.defaultHeaders;
    let localVarHttpHeaderAcceptSelected = httpOptions && httpOptions.httpHeaderAccept;
    if (localVarHttpHeaderAcceptSelected === void 0) {
      const httpHeaderAccepts = [
        "application/json"
      ];
      localVarHttpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
    }
    if (localVarHttpHeaderAcceptSelected !== void 0) {
      localVarHeaders = localVarHeaders.set("Accept", localVarHttpHeaderAcceptSelected);
    }
    let localVarHttpContext = httpOptions && httpOptions.context;
    if (localVarHttpContext === void 0) {
      localVarHttpContext = new HttpContext();
    }
    let localVarTransferCache = httpOptions && httpOptions.transferCache;
    if (localVarTransferCache === void 0) {
      localVarTransferCache = true;
    }
    let responseType_ = "json";
    if (localVarHttpHeaderAcceptSelected) {
      if (localVarHttpHeaderAcceptSelected.startsWith("text")) {
        responseType_ = "text";
      } else if (this.configuration.isJsonMime(localVarHttpHeaderAcceptSelected)) {
        responseType_ = "json";
      } else {
        responseType_ = "blob";
      }
    }
    let localVarPath = `/reports/history/${this.configuration.encodeParam({ name: "id", value: id, in: "path", style: "simple", explode: false, dataType: "string", dataFormat: void 0 })}/stream/${this.configuration.encodeParam({ name: "filename", value: filename, in: "path", style: "simple", explode: false, dataType: "string", dataFormat: void 0 })}`;
    return this.httpClient.request("get", `${this.configuration.basePath}${localVarPath}`, {
      context: localVarHttpContext,
      params: localVarQueryParameters,
      responseType: responseType_,
      withCredentials: this.configuration.withCredentials,
      headers: localVarHeaders,
      observe,
      transferCache: localVarTransferCache,
      reportProgress
    });
  }
  getCompletedReportDataWithOptions(id, filename, options, observe = "body", reportProgress = false, httpOptions) {
    if (id === null || id === void 0) {
      throw new Error("Required parameter id was null or undefined when calling getCompletedReportDataWithOptions.");
    }
    if (filename === null || filename === void 0) {
      throw new Error("Required parameter filename was null or undefined when calling getCompletedReportDataWithOptions.");
    }
    if (options === null || options === void 0) {
      throw new Error("Required parameter options was null or undefined when calling getCompletedReportDataWithOptions.");
    }
    let localVarHeaders = this.defaultHeaders;
    let localVarCredential;
    localVarCredential = this.configuration.lookupCredential("access_token");
    if (localVarCredential) {
      localVarHeaders = localVarHeaders.set("x-access-token", localVarCredential);
    }
    let localVarHttpHeaderAcceptSelected = httpOptions && httpOptions.httpHeaderAccept;
    if (localVarHttpHeaderAcceptSelected === void 0) {
      const httpHeaderAccepts = [
        "application/json"
      ];
      localVarHttpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
    }
    if (localVarHttpHeaderAcceptSelected !== void 0) {
      localVarHeaders = localVarHeaders.set("Accept", localVarHttpHeaderAcceptSelected);
    }
    let localVarHttpContext = httpOptions && httpOptions.context;
    if (localVarHttpContext === void 0) {
      localVarHttpContext = new HttpContext();
    }
    let localVarTransferCache = httpOptions && httpOptions.transferCache;
    if (localVarTransferCache === void 0) {
      localVarTransferCache = true;
    }
    const consumes = [
      "application/json"
    ];
    const httpContentTypeSelected = this.configuration.selectHeaderContentType(consumes);
    if (httpContentTypeSelected !== void 0) {
      localVarHeaders = localVarHeaders.set("Content-Type", httpContentTypeSelected);
    }
    let responseType_ = "json";
    if (localVarHttpHeaderAcceptSelected) {
      if (localVarHttpHeaderAcceptSelected.startsWith("text")) {
        responseType_ = "text";
      } else if (this.configuration.isJsonMime(localVarHttpHeaderAcceptSelected)) {
        responseType_ = "json";
      } else {
        responseType_ = "blob";
      }
    }
    let localVarPath = `/reports/history/${this.configuration.encodeParam({ name: "id", value: id, in: "path", style: "simple", explode: false, dataType: "string", dataFormat: void 0 })}/${this.configuration.encodeParam({ name: "filename", value: filename, in: "path", style: "simple", explode: false, dataType: "string", dataFormat: void 0 })}`;
    return this.httpClient.request("post", `${this.configuration.basePath}${localVarPath}`, {
      context: localVarHttpContext,
      body: options,
      responseType: responseType_,
      withCredentials: this.configuration.withCredentials,
      headers: localVarHeaders,
      observe,
      transferCache: localVarTransferCache,
      reportProgress
    });
  }
  getCompletedReportWithOptions(id, options, observe = "body", reportProgress = false, httpOptions) {
    if (id === null || id === void 0) {
      throw new Error("Required parameter id was null or undefined when calling getCompletedReportWithOptions.");
    }
    if (options === null || options === void 0) {
      throw new Error("Required parameter options was null or undefined when calling getCompletedReportWithOptions.");
    }
    let localVarHeaders = this.defaultHeaders;
    let localVarCredential;
    localVarCredential = this.configuration.lookupCredential("access_token");
    if (localVarCredential) {
      localVarHeaders = localVarHeaders.set("x-access-token", localVarCredential);
    }
    let localVarHttpHeaderAcceptSelected = httpOptions && httpOptions.httpHeaderAccept;
    if (localVarHttpHeaderAcceptSelected === void 0) {
      const httpHeaderAccepts = [
        "application/json"
      ];
      localVarHttpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
    }
    if (localVarHttpHeaderAcceptSelected !== void 0) {
      localVarHeaders = localVarHeaders.set("Accept", localVarHttpHeaderAcceptSelected);
    }
    let localVarHttpContext = httpOptions && httpOptions.context;
    if (localVarHttpContext === void 0) {
      localVarHttpContext = new HttpContext();
    }
    let localVarTransferCache = httpOptions && httpOptions.transferCache;
    if (localVarTransferCache === void 0) {
      localVarTransferCache = true;
    }
    const consumes = [
      "application/json"
    ];
    const httpContentTypeSelected = this.configuration.selectHeaderContentType(consumes);
    if (httpContentTypeSelected !== void 0) {
      localVarHeaders = localVarHeaders.set("Content-Type", httpContentTypeSelected);
    }
    let responseType_ = "json";
    if (localVarHttpHeaderAcceptSelected) {
      if (localVarHttpHeaderAcceptSelected.startsWith("text")) {
        responseType_ = "text";
      } else if (this.configuration.isJsonMime(localVarHttpHeaderAcceptSelected)) {
        responseType_ = "json";
      } else {
        responseType_ = "blob";
      }
    }
    let localVarPath = `/reports/history/${this.configuration.encodeParam({ name: "id", value: id, in: "path", style: "simple", explode: false, dataType: "string", dataFormat: void 0 })}`;
    return this.httpClient.request("post", `${this.configuration.basePath}${localVarPath}`, {
      context: localVarHttpContext,
      body: options,
      responseType: responseType_,
      withCredentials: this.configuration.withCredentials,
      headers: localVarHeaders,
      observe,
      transferCache: localVarTransferCache,
      reportProgress
    });
  }
  getQueuedReport(id, observe = "body", reportProgress = false, options) {
    if (id === null || id === void 0) {
      throw new Error("Required parameter id was null or undefined when calling getQueuedReport.");
    }
    let localVarHeaders = this.defaultHeaders;
    let localVarCredential;
    localVarCredential = this.configuration.lookupCredential("access_token");
    if (localVarCredential) {
      localVarHeaders = localVarHeaders.set("x-access-token", localVarCredential);
    }
    let localVarHttpHeaderAcceptSelected = options && options.httpHeaderAccept;
    if (localVarHttpHeaderAcceptSelected === void 0) {
      const httpHeaderAccepts = [
        "application/json"
      ];
      localVarHttpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
    }
    if (localVarHttpHeaderAcceptSelected !== void 0) {
      localVarHeaders = localVarHeaders.set("Accept", localVarHttpHeaderAcceptSelected);
    }
    let localVarHttpContext = options && options.context;
    if (localVarHttpContext === void 0) {
      localVarHttpContext = new HttpContext();
    }
    let localVarTransferCache = options && options.transferCache;
    if (localVarTransferCache === void 0) {
      localVarTransferCache = true;
    }
    let responseType_ = "json";
    if (localVarHttpHeaderAcceptSelected) {
      if (localVarHttpHeaderAcceptSelected.startsWith("text")) {
        responseType_ = "text";
      } else if (this.configuration.isJsonMime(localVarHttpHeaderAcceptSelected)) {
        responseType_ = "json";
      } else {
        responseType_ = "blob";
      }
    }
    let localVarPath = `/reports/queues/${this.configuration.encodeParam({ name: "id", value: id, in: "path", style: "simple", explode: false, dataType: "string", dataFormat: void 0 })}`;
    return this.httpClient.request("get", `${this.configuration.basePath}${localVarPath}`, {
      context: localVarHttpContext,
      responseType: responseType_,
      withCredentials: this.configuration.withCredentials,
      headers: localVarHeaders,
      observe,
      transferCache: localVarTransferCache,
      reportProgress
    });
  }
  listAnalyticsBaseReports(owner, client, user, offset, limit, observe = "body", reportProgress = false, options) {
    let localVarQueryParameters = new HttpParams({ encoder: this.encoder });
    if (owner !== void 0 && owner !== null) {
      localVarQueryParameters = this.addToHttpParams(localVarQueryParameters, owner, "owner");
    }
    if (client !== void 0 && client !== null) {
      localVarQueryParameters = this.addToHttpParams(localVarQueryParameters, client, "client");
    }
    if (user !== void 0 && user !== null) {
      localVarQueryParameters = this.addToHttpParams(localVarQueryParameters, user, "user");
    }
    if (offset !== void 0 && offset !== null) {
      localVarQueryParameters = this.addToHttpParams(localVarQueryParameters, offset, "offset");
    }
    if (limit !== void 0 && limit !== null) {
      localVarQueryParameters = this.addToHttpParams(localVarQueryParameters, limit, "limit");
    }
    let localVarHeaders = this.defaultHeaders;
    let localVarCredential;
    localVarCredential = this.configuration.lookupCredential("access_token");
    if (localVarCredential) {
      localVarHeaders = localVarHeaders.set("x-access-token", localVarCredential);
    }
    let localVarHttpHeaderAcceptSelected = options && options.httpHeaderAccept;
    if (localVarHttpHeaderAcceptSelected === void 0) {
      const httpHeaderAccepts = [
        "application/json"
      ];
      localVarHttpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
    }
    if (localVarHttpHeaderAcceptSelected !== void 0) {
      localVarHeaders = localVarHeaders.set("Accept", localVarHttpHeaderAcceptSelected);
    }
    let localVarHttpContext = options && options.context;
    if (localVarHttpContext === void 0) {
      localVarHttpContext = new HttpContext();
    }
    let localVarTransferCache = options && options.transferCache;
    if (localVarTransferCache === void 0) {
      localVarTransferCache = true;
    }
    let responseType_ = "json";
    if (localVarHttpHeaderAcceptSelected) {
      if (localVarHttpHeaderAcceptSelected.startsWith("text")) {
        responseType_ = "text";
      } else if (this.configuration.isJsonMime(localVarHttpHeaderAcceptSelected)) {
        responseType_ = "json";
      } else {
        responseType_ = "blob";
      }
    }
    let localVarPath = `/reports/analytics`;
    return this.httpClient.request("get", `${this.configuration.basePath}${localVarPath}`, {
      context: localVarHttpContext,
      params: localVarQueryParameters,
      responseType: responseType_,
      withCredentials: this.configuration.withCredentials,
      headers: localVarHeaders,
      observe,
      transferCache: localVarTransferCache,
      reportProgress
    });
  }
  listCompletedReports(start, end, client, user, observe = "body", reportProgress = false, options) {
    if (start === null || start === void 0) {
      throw new Error("Required parameter start was null or undefined when calling listCompletedReports.");
    }
    if (end === null || end === void 0) {
      throw new Error("Required parameter end was null or undefined when calling listCompletedReports.");
    }
    let localVarQueryParameters = new HttpParams({ encoder: this.encoder });
    if (start !== void 0 && start !== null) {
      localVarQueryParameters = this.addToHttpParams(localVarQueryParameters, start, "start");
    }
    if (end !== void 0 && end !== null) {
      localVarQueryParameters = this.addToHttpParams(localVarQueryParameters, end, "end");
    }
    if (client !== void 0 && client !== null) {
      localVarQueryParameters = this.addToHttpParams(localVarQueryParameters, client, "client");
    }
    if (user !== void 0 && user !== null) {
      localVarQueryParameters = this.addToHttpParams(localVarQueryParameters, user, "user");
    }
    let localVarHeaders = this.defaultHeaders;
    let localVarCredential;
    localVarCredential = this.configuration.lookupCredential("access_token");
    if (localVarCredential) {
      localVarHeaders = localVarHeaders.set("x-access-token", localVarCredential);
    }
    let localVarHttpHeaderAcceptSelected = options && options.httpHeaderAccept;
    if (localVarHttpHeaderAcceptSelected === void 0) {
      const httpHeaderAccepts = [
        "application/json"
      ];
      localVarHttpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
    }
    if (localVarHttpHeaderAcceptSelected !== void 0) {
      localVarHeaders = localVarHeaders.set("Accept", localVarHttpHeaderAcceptSelected);
    }
    let localVarHttpContext = options && options.context;
    if (localVarHttpContext === void 0) {
      localVarHttpContext = new HttpContext();
    }
    let localVarTransferCache = options && options.transferCache;
    if (localVarTransferCache === void 0) {
      localVarTransferCache = true;
    }
    let responseType_ = "json";
    if (localVarHttpHeaderAcceptSelected) {
      if (localVarHttpHeaderAcceptSelected.startsWith("text")) {
        responseType_ = "text";
      } else if (this.configuration.isJsonMime(localVarHttpHeaderAcceptSelected)) {
        responseType_ = "json";
      } else {
        responseType_ = "blob";
      }
    }
    let localVarPath = `/reports/history`;
    return this.httpClient.request("get", `${this.configuration.basePath}${localVarPath}`, {
      context: localVarHttpContext,
      params: localVarQueryParameters,
      responseType: responseType_,
      withCredentials: this.configuration.withCredentials,
      headers: localVarHeaders,
      observe,
      transferCache: localVarTransferCache,
      reportProgress
    });
  }
  listQueuedReports(client, user, server, observe = "body", reportProgress = false, options) {
    let localVarQueryParameters = new HttpParams({ encoder: this.encoder });
    if (client !== void 0 && client !== null) {
      localVarQueryParameters = this.addToHttpParams(localVarQueryParameters, client, "client");
    }
    if (user !== void 0 && user !== null) {
      localVarQueryParameters = this.addToHttpParams(localVarQueryParameters, user, "user");
    }
    if (server !== void 0 && server !== null) {
      localVarQueryParameters = this.addToHttpParams(localVarQueryParameters, server, "server");
    }
    let localVarHeaders = this.defaultHeaders;
    let localVarCredential;
    localVarCredential = this.configuration.lookupCredential("access_token");
    if (localVarCredential) {
      localVarHeaders = localVarHeaders.set("x-access-token", localVarCredential);
    }
    let localVarHttpHeaderAcceptSelected = options && options.httpHeaderAccept;
    if (localVarHttpHeaderAcceptSelected === void 0) {
      const httpHeaderAccepts = [
        "application/json"
      ];
      localVarHttpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
    }
    if (localVarHttpHeaderAcceptSelected !== void 0) {
      localVarHeaders = localVarHeaders.set("Accept", localVarHttpHeaderAcceptSelected);
    }
    let localVarHttpContext = options && options.context;
    if (localVarHttpContext === void 0) {
      localVarHttpContext = new HttpContext();
    }
    let localVarTransferCache = options && options.transferCache;
    if (localVarTransferCache === void 0) {
      localVarTransferCache = true;
    }
    let responseType_ = "json";
    if (localVarHttpHeaderAcceptSelected) {
      if (localVarHttpHeaderAcceptSelected.startsWith("text")) {
        responseType_ = "text";
      } else if (this.configuration.isJsonMime(localVarHttpHeaderAcceptSelected)) {
        responseType_ = "json";
      } else {
        responseType_ = "blob";
      }
    }
    let localVarPath = `/reports/queues`;
    return this.httpClient.request("get", `${this.configuration.basePath}${localVarPath}`, {
      context: localVarHttpContext,
      params: localVarQueryParameters,
      responseType: responseType_,
      withCredentials: this.configuration.withCredentials,
      headers: localVarHeaders,
      observe,
      transferCache: localVarTransferCache,
      reportProgress
    });
  }
  queueReport(request, observe = "body", reportProgress = false, options) {
    if (request === null || request === void 0) {
      throw new Error("Required parameter request was null or undefined when calling queueReport.");
    }
    let localVarHeaders = this.defaultHeaders;
    let localVarCredential;
    localVarCredential = this.configuration.lookupCredential("access_token");
    if (localVarCredential) {
      localVarHeaders = localVarHeaders.set("x-access-token", localVarCredential);
    }
    let localVarHttpHeaderAcceptSelected = options && options.httpHeaderAccept;
    if (localVarHttpHeaderAcceptSelected === void 0) {
      const httpHeaderAccepts = [
        "application/json"
      ];
      localVarHttpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
    }
    if (localVarHttpHeaderAcceptSelected !== void 0) {
      localVarHeaders = localVarHeaders.set("Accept", localVarHttpHeaderAcceptSelected);
    }
    let localVarHttpContext = options && options.context;
    if (localVarHttpContext === void 0) {
      localVarHttpContext = new HttpContext();
    }
    let localVarTransferCache = options && options.transferCache;
    if (localVarTransferCache === void 0) {
      localVarTransferCache = true;
    }
    const consumes = [
      "application/json"
    ];
    const httpContentTypeSelected = this.configuration.selectHeaderContentType(consumes);
    if (httpContentTypeSelected !== void 0) {
      localVarHeaders = localVarHeaders.set("Content-Type", httpContentTypeSelected);
    }
    let responseType_ = "json";
    if (localVarHttpHeaderAcceptSelected) {
      if (localVarHttpHeaderAcceptSelected.startsWith("text")) {
        responseType_ = "text";
      } else if (this.configuration.isJsonMime(localVarHttpHeaderAcceptSelected)) {
        responseType_ = "json";
      } else {
        responseType_ = "blob";
      }
    }
    let localVarPath = `/reports/queues`;
    return this.httpClient.request("post", `${this.configuration.basePath}${localVarPath}`, {
      context: localVarHttpContext,
      body: request,
      responseType: responseType_,
      withCredentials: this.configuration.withCredentials,
      headers: localVarHeaders,
      observe,
      transferCache: localVarTransferCache,
      reportProgress
    });
  }
  rebuildAnalyticsBaseReport(id, observe = "body", reportProgress = false, options) {
    if (id === null || id === void 0) {
      throw new Error("Required parameter id was null or undefined when calling rebuildAnalyticsBaseReport.");
    }
    let localVarHeaders = this.defaultHeaders;
    let localVarCredential;
    localVarCredential = this.configuration.lookupCredential("access_token");
    if (localVarCredential) {
      localVarHeaders = localVarHeaders.set("x-access-token", localVarCredential);
    }
    let localVarHttpHeaderAcceptSelected = options && options.httpHeaderAccept;
    if (localVarHttpHeaderAcceptSelected === void 0) {
      const httpHeaderAccepts = [];
      localVarHttpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
    }
    if (localVarHttpHeaderAcceptSelected !== void 0) {
      localVarHeaders = localVarHeaders.set("Accept", localVarHttpHeaderAcceptSelected);
    }
    let localVarHttpContext = options && options.context;
    if (localVarHttpContext === void 0) {
      localVarHttpContext = new HttpContext();
    }
    let localVarTransferCache = options && options.transferCache;
    if (localVarTransferCache === void 0) {
      localVarTransferCache = true;
    }
    let responseType_ = "json";
    if (localVarHttpHeaderAcceptSelected) {
      if (localVarHttpHeaderAcceptSelected.startsWith("text")) {
        responseType_ = "text";
      } else if (this.configuration.isJsonMime(localVarHttpHeaderAcceptSelected)) {
        responseType_ = "json";
      } else {
        responseType_ = "blob";
      }
    }
    let localVarPath = `/reports/analytics/${this.configuration.encodeParam({ name: "id", value: id, in: "path", style: "simple", explode: false, dataType: "string", dataFormat: void 0 })}/rebuild`;
    return this.httpClient.request("post", `${this.configuration.basePath}${localVarPath}`, {
      context: localVarHttpContext,
      responseType: responseType_,
      withCredentials: this.configuration.withCredentials,
      headers: localVarHeaders,
      observe,
      transferCache: localVarTransferCache,
      reportProgress
    });
  }
  updateCompletedReport(id, report, observe = "body", reportProgress = false, options) {
    if (id === null || id === void 0) {
      throw new Error("Required parameter id was null or undefined when calling updateCompletedReport.");
    }
    if (report === null || report === void 0) {
      throw new Error("Required parameter report was null or undefined when calling updateCompletedReport.");
    }
    let localVarHeaders = this.defaultHeaders;
    let localVarCredential;
    localVarCredential = this.configuration.lookupCredential("access_token");
    if (localVarCredential) {
      localVarHeaders = localVarHeaders.set("x-access-token", localVarCredential);
    }
    let localVarHttpHeaderAcceptSelected = options && options.httpHeaderAccept;
    if (localVarHttpHeaderAcceptSelected === void 0) {
      const httpHeaderAccepts = [
        "application/json"
      ];
      localVarHttpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
    }
    if (localVarHttpHeaderAcceptSelected !== void 0) {
      localVarHeaders = localVarHeaders.set("Accept", localVarHttpHeaderAcceptSelected);
    }
    let localVarHttpContext = options && options.context;
    if (localVarHttpContext === void 0) {
      localVarHttpContext = new HttpContext();
    }
    let localVarTransferCache = options && options.transferCache;
    if (localVarTransferCache === void 0) {
      localVarTransferCache = true;
    }
    const consumes = [
      "application/json"
    ];
    const httpContentTypeSelected = this.configuration.selectHeaderContentType(consumes);
    if (httpContentTypeSelected !== void 0) {
      localVarHeaders = localVarHeaders.set("Content-Type", httpContentTypeSelected);
    }
    let responseType_ = "json";
    if (localVarHttpHeaderAcceptSelected) {
      if (localVarHttpHeaderAcceptSelected.startsWith("text")) {
        responseType_ = "text";
      } else if (this.configuration.isJsonMime(localVarHttpHeaderAcceptSelected)) {
        responseType_ = "json";
      } else {
        responseType_ = "blob";
      }
    }
    let localVarPath = `/reports/history/${this.configuration.encodeParam({ name: "id", value: id, in: "path", style: "simple", explode: false, dataType: "string", dataFormat: void 0 })}`;
    return this.httpClient.request("put", `${this.configuration.basePath}${localVarPath}`, {
      context: localVarHttpContext,
      body: report,
      responseType: responseType_,
      withCredentials: this.configuration.withCredentials,
      headers: localVarHeaders,
      observe,
      transferCache: localVarTransferCache,
      reportProgress
    });
  }
  static \u0275fac = function ReportsService_Factory(__ngFactoryType__) {
    return new (__ngFactoryType__ || _ReportsService)(\u0275\u0275inject(HttpClient), \u0275\u0275inject(BASE_PATH, 8), \u0275\u0275inject(Configuration, 8));
  };
  static \u0275prov = /* @__PURE__ */ \u0275\u0275defineInjectable({ token: _ReportsService, factory: _ReportsService.\u0275fac, providedIn: "root" });
};
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(ReportsService, [{
    type: Injectable,
    args: [{
      providedIn: "root"
    }]
  }], () => [{ type: HttpClient }, { type: void 0, decorators: [{
    type: Optional
  }, {
    type: Inject,
    args: [BASE_PATH]
  }] }, { type: Configuration, decorators: [{
    type: Optional
  }] }], null);
})();

// src/app/api/api/roadProfiles.service.ts
var RoadProfilesService = class _RoadProfilesService {
  httpClient;
  basePath = "";
  defaultHeaders = new HttpHeaders();
  configuration = new Configuration();
  encoder;
  constructor(httpClient, basePath, configuration) {
    this.httpClient = httpClient;
    if (configuration) {
      this.configuration = configuration;
    }
    if (typeof this.configuration.basePath !== "string") {
      const firstBasePath = Array.isArray(basePath) ? basePath[0] : void 0;
      if (firstBasePath != void 0) {
        basePath = firstBasePath;
      }
      if (typeof basePath !== "string") {
        basePath = this.basePath;
      }
      this.configuration.basePath = basePath;
    }
    this.encoder = this.configuration.encoder || new CustomHttpParameterCodec();
  }
  // @ts-ignore
  addToHttpParams(httpParams, value, key) {
    if (typeof value === "object" && value instanceof Date === false) {
      httpParams = this.addToHttpParamsRecursive(httpParams, value);
    } else {
      httpParams = this.addToHttpParamsRecursive(httpParams, value, key);
    }
    return httpParams;
  }
  addToHttpParamsRecursive(httpParams, value, key) {
    if (value == null) {
      return httpParams;
    }
    if (typeof value === "object") {
      if (Array.isArray(value)) {
        value.forEach((elem) => httpParams = this.addToHttpParamsRecursive(httpParams, elem, key));
      } else if (value instanceof Date) {
        if (key != null) {
          httpParams = httpParams.append(key, value.toISOString().substring(0, 10));
        } else {
          throw Error("key may not be null if value is Date");
        }
      } else {
        Object.keys(value).forEach((k) => httpParams = this.addToHttpParamsRecursive(httpParams, value[k], key != null ? `${key}.${k}` : k));
      }
    } else if (key != null) {
      httpParams = httpParams.append(key, value);
    } else {
      throw Error("key may not be null if value is not object or array");
    }
    return httpParams;
  }
  createRoadProfile(request, observe = "body", reportProgress = false, options) {
    if (request === null || request === void 0) {
      throw new Error("Required parameter request was null or undefined when calling createRoadProfile.");
    }
    let localVarHeaders = this.defaultHeaders;
    let localVarCredential;
    localVarCredential = this.configuration.lookupCredential("access_token");
    if (localVarCredential) {
      localVarHeaders = localVarHeaders.set("x-access-token", localVarCredential);
    }
    let localVarHttpHeaderAcceptSelected = options && options.httpHeaderAccept;
    if (localVarHttpHeaderAcceptSelected === void 0) {
      const httpHeaderAccepts = [
        "application/json"
      ];
      localVarHttpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
    }
    if (localVarHttpHeaderAcceptSelected !== void 0) {
      localVarHeaders = localVarHeaders.set("Accept", localVarHttpHeaderAcceptSelected);
    }
    let localVarHttpContext = options && options.context;
    if (localVarHttpContext === void 0) {
      localVarHttpContext = new HttpContext();
    }
    let localVarTransferCache = options && options.transferCache;
    if (localVarTransferCache === void 0) {
      localVarTransferCache = true;
    }
    const consumes = [
      "application/json"
    ];
    const httpContentTypeSelected = this.configuration.selectHeaderContentType(consumes);
    if (httpContentTypeSelected !== void 0) {
      localVarHeaders = localVarHeaders.set("Content-Type", httpContentTypeSelected);
    }
    let responseType_ = "json";
    if (localVarHttpHeaderAcceptSelected) {
      if (localVarHttpHeaderAcceptSelected.startsWith("text")) {
        responseType_ = "text";
      } else if (this.configuration.isJsonMime(localVarHttpHeaderAcceptSelected)) {
        responseType_ = "json";
      } else {
        responseType_ = "blob";
      }
    }
    let localVarPath = `/entities/roadprofiles`;
    return this.httpClient.request("post", `${this.configuration.basePath}${localVarPath}`, {
      context: localVarHttpContext,
      body: request,
      responseType: responseType_,
      withCredentials: this.configuration.withCredentials,
      headers: localVarHeaders,
      observe,
      transferCache: localVarTransferCache,
      reportProgress
    });
  }
  getRoadProfile(id, observe = "body", reportProgress = false, options) {
    if (id === null || id === void 0) {
      throw new Error("Required parameter id was null or undefined when calling getRoadProfile.");
    }
    let localVarHeaders = this.defaultHeaders;
    let localVarCredential;
    localVarCredential = this.configuration.lookupCredential("access_token");
    if (localVarCredential) {
      localVarHeaders = localVarHeaders.set("x-access-token", localVarCredential);
    }
    let localVarHttpHeaderAcceptSelected = options && options.httpHeaderAccept;
    if (localVarHttpHeaderAcceptSelected === void 0) {
      const httpHeaderAccepts = [
        "application/json"
      ];
      localVarHttpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
    }
    if (localVarHttpHeaderAcceptSelected !== void 0) {
      localVarHeaders = localVarHeaders.set("Accept", localVarHttpHeaderAcceptSelected);
    }
    let localVarHttpContext = options && options.context;
    if (localVarHttpContext === void 0) {
      localVarHttpContext = new HttpContext();
    }
    let localVarTransferCache = options && options.transferCache;
    if (localVarTransferCache === void 0) {
      localVarTransferCache = true;
    }
    let responseType_ = "json";
    if (localVarHttpHeaderAcceptSelected) {
      if (localVarHttpHeaderAcceptSelected.startsWith("text")) {
        responseType_ = "text";
      } else if (this.configuration.isJsonMime(localVarHttpHeaderAcceptSelected)) {
        responseType_ = "json";
      } else {
        responseType_ = "blob";
      }
    }
    let localVarPath = `/entities/roadprofiles/${this.configuration.encodeParam({ name: "id", value: id, in: "path", style: "simple", explode: false, dataType: "string", dataFormat: void 0 })}`;
    return this.httpClient.request("get", `${this.configuration.basePath}${localVarPath}`, {
      context: localVarHttpContext,
      responseType: responseType_,
      withCredentials: this.configuration.withCredentials,
      headers: localVarHeaders,
      observe,
      transferCache: localVarTransferCache,
      reportProgress
    });
  }
  listRoadProfiles(owner, recurse, offset, limit, sort, filter, observe = "body", reportProgress = false, options) {
    if (owner === null || owner === void 0) {
      throw new Error("Required parameter owner was null or undefined when calling listRoadProfiles.");
    }
    let localVarQueryParameters = new HttpParams({ encoder: this.encoder });
    if (owner !== void 0 && owner !== null) {
      localVarQueryParameters = this.addToHttpParams(localVarQueryParameters, owner, "owner");
    }
    if (recurse !== void 0 && recurse !== null) {
      localVarQueryParameters = this.addToHttpParams(localVarQueryParameters, recurse, "recurse");
    }
    if (offset !== void 0 && offset !== null) {
      localVarQueryParameters = this.addToHttpParams(localVarQueryParameters, offset, "offset");
    }
    if (limit !== void 0 && limit !== null) {
      localVarQueryParameters = this.addToHttpParams(localVarQueryParameters, limit, "limit");
    }
    if (sort !== void 0 && sort !== null) {
      localVarQueryParameters = this.addToHttpParams(localVarQueryParameters, sort, "sort");
    }
    if (filter !== void 0 && filter !== null) {
      localVarQueryParameters = this.addToHttpParams(localVarQueryParameters, filter, "filter");
    }
    let localVarHeaders = this.defaultHeaders;
    let localVarCredential;
    localVarCredential = this.configuration.lookupCredential("access_token");
    if (localVarCredential) {
      localVarHeaders = localVarHeaders.set("x-access-token", localVarCredential);
    }
    let localVarHttpHeaderAcceptSelected = options && options.httpHeaderAccept;
    if (localVarHttpHeaderAcceptSelected === void 0) {
      const httpHeaderAccepts = [
        "application/json"
      ];
      localVarHttpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
    }
    if (localVarHttpHeaderAcceptSelected !== void 0) {
      localVarHeaders = localVarHeaders.set("Accept", localVarHttpHeaderAcceptSelected);
    }
    let localVarHttpContext = options && options.context;
    if (localVarHttpContext === void 0) {
      localVarHttpContext = new HttpContext();
    }
    let localVarTransferCache = options && options.transferCache;
    if (localVarTransferCache === void 0) {
      localVarTransferCache = true;
    }
    let responseType_ = "json";
    if (localVarHttpHeaderAcceptSelected) {
      if (localVarHttpHeaderAcceptSelected.startsWith("text")) {
        responseType_ = "text";
      } else if (this.configuration.isJsonMime(localVarHttpHeaderAcceptSelected)) {
        responseType_ = "json";
      } else {
        responseType_ = "blob";
      }
    }
    let localVarPath = `/entities/roadprofiles`;
    return this.httpClient.request("get", `${this.configuration.basePath}${localVarPath}`, {
      context: localVarHttpContext,
      params: localVarQueryParameters,
      responseType: responseType_,
      withCredentials: this.configuration.withCredentials,
      headers: localVarHeaders,
      observe,
      transferCache: localVarTransferCache,
      reportProgress
    });
  }
  updateRoadProfile(id, request, observe = "body", reportProgress = false, options) {
    if (id === null || id === void 0) {
      throw new Error("Required parameter id was null or undefined when calling updateRoadProfile.");
    }
    if (request === null || request === void 0) {
      throw new Error("Required parameter request was null or undefined when calling updateRoadProfile.");
    }
    let localVarHeaders = this.defaultHeaders;
    let localVarCredential;
    localVarCredential = this.configuration.lookupCredential("access_token");
    if (localVarCredential) {
      localVarHeaders = localVarHeaders.set("x-access-token", localVarCredential);
    }
    let localVarHttpHeaderAcceptSelected = options && options.httpHeaderAccept;
    if (localVarHttpHeaderAcceptSelected === void 0) {
      const httpHeaderAccepts = [
        "application/json"
      ];
      localVarHttpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
    }
    if (localVarHttpHeaderAcceptSelected !== void 0) {
      localVarHeaders = localVarHeaders.set("Accept", localVarHttpHeaderAcceptSelected);
    }
    let localVarHttpContext = options && options.context;
    if (localVarHttpContext === void 0) {
      localVarHttpContext = new HttpContext();
    }
    let localVarTransferCache = options && options.transferCache;
    if (localVarTransferCache === void 0) {
      localVarTransferCache = true;
    }
    const consumes = [
      "application/json"
    ];
    const httpContentTypeSelected = this.configuration.selectHeaderContentType(consumes);
    if (httpContentTypeSelected !== void 0) {
      localVarHeaders = localVarHeaders.set("Content-Type", httpContentTypeSelected);
    }
    let responseType_ = "json";
    if (localVarHttpHeaderAcceptSelected) {
      if (localVarHttpHeaderAcceptSelected.startsWith("text")) {
        responseType_ = "text";
      } else if (this.configuration.isJsonMime(localVarHttpHeaderAcceptSelected)) {
        responseType_ = "json";
      } else {
        responseType_ = "blob";
      }
    }
    let localVarPath = `/entities/roadprofiles/${this.configuration.encodeParam({ name: "id", value: id, in: "path", style: "simple", explode: false, dataType: "string", dataFormat: void 0 })}`;
    return this.httpClient.request("put", `${this.configuration.basePath}${localVarPath}`, {
      context: localVarHttpContext,
      body: request,
      responseType: responseType_,
      withCredentials: this.configuration.withCredentials,
      headers: localVarHeaders,
      observe,
      transferCache: localVarTransferCache,
      reportProgress
    });
  }
  static \u0275fac = function RoadProfilesService_Factory(__ngFactoryType__) {
    return new (__ngFactoryType__ || _RoadProfilesService)(\u0275\u0275inject(HttpClient), \u0275\u0275inject(BASE_PATH, 8), \u0275\u0275inject(Configuration, 8));
  };
  static \u0275prov = /* @__PURE__ */ \u0275\u0275defineInjectable({ token: _RoadProfilesService, factory: _RoadProfilesService.\u0275fac, providedIn: "root" });
};
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(RoadProfilesService, [{
    type: Injectable,
    args: [{
      providedIn: "root"
    }]
  }], () => [{ type: HttpClient }, { type: void 0, decorators: [{
    type: Optional
  }, {
    type: Inject,
    args: [BASE_PATH]
  }] }, { type: Configuration, decorators: [{
    type: Optional
  }] }], null);
})();

// src/app/api/api/scheduledReports.service.ts
var ScheduledReportsService = class _ScheduledReportsService {
  httpClient;
  basePath = "";
  defaultHeaders = new HttpHeaders();
  configuration = new Configuration();
  encoder;
  constructor(httpClient, basePath, configuration) {
    this.httpClient = httpClient;
    if (configuration) {
      this.configuration = configuration;
    }
    if (typeof this.configuration.basePath !== "string") {
      const firstBasePath = Array.isArray(basePath) ? basePath[0] : void 0;
      if (firstBasePath != void 0) {
        basePath = firstBasePath;
      }
      if (typeof basePath !== "string") {
        basePath = this.basePath;
      }
      this.configuration.basePath = basePath;
    }
    this.encoder = this.configuration.encoder || new CustomHttpParameterCodec();
  }
  // @ts-ignore
  addToHttpParams(httpParams, value, key) {
    if (typeof value === "object" && value instanceof Date === false) {
      httpParams = this.addToHttpParamsRecursive(httpParams, value);
    } else {
      httpParams = this.addToHttpParamsRecursive(httpParams, value, key);
    }
    return httpParams;
  }
  addToHttpParamsRecursive(httpParams, value, key) {
    if (value == null) {
      return httpParams;
    }
    if (typeof value === "object") {
      if (Array.isArray(value)) {
        value.forEach((elem) => httpParams = this.addToHttpParamsRecursive(httpParams, elem, key));
      } else if (value instanceof Date) {
        if (key != null) {
          httpParams = httpParams.append(key, value.toISOString().substring(0, 10));
        } else {
          throw Error("key may not be null if value is Date");
        }
      } else {
        Object.keys(value).forEach((k) => httpParams = this.addToHttpParamsRecursive(httpParams, value[k], key != null ? `${key}.${k}` : k));
      }
    } else if (key != null) {
      httpParams = httpParams.append(key, value);
    } else {
      throw Error("key may not be null if value is not object or array");
    }
    return httpParams;
  }
  createScheduledReport(request, observe = "body", reportProgress = false, options) {
    if (request === null || request === void 0) {
      throw new Error("Required parameter request was null or undefined when calling createScheduledReport.");
    }
    let localVarHeaders = this.defaultHeaders;
    let localVarCredential;
    localVarCredential = this.configuration.lookupCredential("access_token");
    if (localVarCredential) {
      localVarHeaders = localVarHeaders.set("x-access-token", localVarCredential);
    }
    let localVarHttpHeaderAcceptSelected = options && options.httpHeaderAccept;
    if (localVarHttpHeaderAcceptSelected === void 0) {
      const httpHeaderAccepts = [
        "application/json"
      ];
      localVarHttpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
    }
    if (localVarHttpHeaderAcceptSelected !== void 0) {
      localVarHeaders = localVarHeaders.set("Accept", localVarHttpHeaderAcceptSelected);
    }
    let localVarHttpContext = options && options.context;
    if (localVarHttpContext === void 0) {
      localVarHttpContext = new HttpContext();
    }
    let localVarTransferCache = options && options.transferCache;
    if (localVarTransferCache === void 0) {
      localVarTransferCache = true;
    }
    const consumes = [
      "application/json"
    ];
    const httpContentTypeSelected = this.configuration.selectHeaderContentType(consumes);
    if (httpContentTypeSelected !== void 0) {
      localVarHeaders = localVarHeaders.set("Content-Type", httpContentTypeSelected);
    }
    let responseType_ = "json";
    if (localVarHttpHeaderAcceptSelected) {
      if (localVarHttpHeaderAcceptSelected.startsWith("text")) {
        responseType_ = "text";
      } else if (this.configuration.isJsonMime(localVarHttpHeaderAcceptSelected)) {
        responseType_ = "json";
      } else {
        responseType_ = "blob";
      }
    }
    let localVarPath = `/entities/scheduledreports`;
    return this.httpClient.request("post", `${this.configuration.basePath}${localVarPath}`, {
      context: localVarHttpContext,
      body: request,
      responseType: responseType_,
      withCredentials: this.configuration.withCredentials,
      headers: localVarHeaders,
      observe,
      transferCache: localVarTransferCache,
      reportProgress
    });
  }
  getScheduledReport(id, observe = "body", reportProgress = false, options) {
    if (id === null || id === void 0) {
      throw new Error("Required parameter id was null or undefined when calling getScheduledReport.");
    }
    let localVarHeaders = this.defaultHeaders;
    let localVarCredential;
    localVarCredential = this.configuration.lookupCredential("access_token");
    if (localVarCredential) {
      localVarHeaders = localVarHeaders.set("x-access-token", localVarCredential);
    }
    let localVarHttpHeaderAcceptSelected = options && options.httpHeaderAccept;
    if (localVarHttpHeaderAcceptSelected === void 0) {
      const httpHeaderAccepts = [
        "application/json"
      ];
      localVarHttpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
    }
    if (localVarHttpHeaderAcceptSelected !== void 0) {
      localVarHeaders = localVarHeaders.set("Accept", localVarHttpHeaderAcceptSelected);
    }
    let localVarHttpContext = options && options.context;
    if (localVarHttpContext === void 0) {
      localVarHttpContext = new HttpContext();
    }
    let localVarTransferCache = options && options.transferCache;
    if (localVarTransferCache === void 0) {
      localVarTransferCache = true;
    }
    let responseType_ = "json";
    if (localVarHttpHeaderAcceptSelected) {
      if (localVarHttpHeaderAcceptSelected.startsWith("text")) {
        responseType_ = "text";
      } else if (this.configuration.isJsonMime(localVarHttpHeaderAcceptSelected)) {
        responseType_ = "json";
      } else {
        responseType_ = "blob";
      }
    }
    let localVarPath = `/entities/scheduledreports/${this.configuration.encodeParam({ name: "id", value: id, in: "path", style: "simple", explode: false, dataType: "string", dataFormat: void 0 })}`;
    return this.httpClient.request("get", `${this.configuration.basePath}${localVarPath}`, {
      context: localVarHttpContext,
      responseType: responseType_,
      withCredentials: this.configuration.withCredentials,
      headers: localVarHeaders,
      observe,
      transferCache: localVarTransferCache,
      reportProgress
    });
  }
  listScheduledReports(owner, offset, limit, sort, filter, observe = "body", reportProgress = false, options) {
    if (owner === null || owner === void 0) {
      throw new Error("Required parameter owner was null or undefined when calling listScheduledReports.");
    }
    let localVarQueryParameters = new HttpParams({ encoder: this.encoder });
    if (owner !== void 0 && owner !== null) {
      localVarQueryParameters = this.addToHttpParams(localVarQueryParameters, owner, "owner");
    }
    if (offset !== void 0 && offset !== null) {
      localVarQueryParameters = this.addToHttpParams(localVarQueryParameters, offset, "offset");
    }
    if (limit !== void 0 && limit !== null) {
      localVarQueryParameters = this.addToHttpParams(localVarQueryParameters, limit, "limit");
    }
    if (sort !== void 0 && sort !== null) {
      localVarQueryParameters = this.addToHttpParams(localVarQueryParameters, sort, "sort");
    }
    if (filter !== void 0 && filter !== null) {
      localVarQueryParameters = this.addToHttpParams(localVarQueryParameters, filter, "filter");
    }
    let localVarHeaders = this.defaultHeaders;
    let localVarCredential;
    localVarCredential = this.configuration.lookupCredential("access_token");
    if (localVarCredential) {
      localVarHeaders = localVarHeaders.set("x-access-token", localVarCredential);
    }
    let localVarHttpHeaderAcceptSelected = options && options.httpHeaderAccept;
    if (localVarHttpHeaderAcceptSelected === void 0) {
      const httpHeaderAccepts = [
        "application/json"
      ];
      localVarHttpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
    }
    if (localVarHttpHeaderAcceptSelected !== void 0) {
      localVarHeaders = localVarHeaders.set("Accept", localVarHttpHeaderAcceptSelected);
    }
    let localVarHttpContext = options && options.context;
    if (localVarHttpContext === void 0) {
      localVarHttpContext = new HttpContext();
    }
    let localVarTransferCache = options && options.transferCache;
    if (localVarTransferCache === void 0) {
      localVarTransferCache = true;
    }
    let responseType_ = "json";
    if (localVarHttpHeaderAcceptSelected) {
      if (localVarHttpHeaderAcceptSelected.startsWith("text")) {
        responseType_ = "text";
      } else if (this.configuration.isJsonMime(localVarHttpHeaderAcceptSelected)) {
        responseType_ = "json";
      } else {
        responseType_ = "blob";
      }
    }
    let localVarPath = `/entities/scheduledreports`;
    return this.httpClient.request("get", `${this.configuration.basePath}${localVarPath}`, {
      context: localVarHttpContext,
      params: localVarQueryParameters,
      responseType: responseType_,
      withCredentials: this.configuration.withCredentials,
      headers: localVarHeaders,
      observe,
      transferCache: localVarTransferCache,
      reportProgress
    });
  }
  updateScheduledReport(id, request, observe = "body", reportProgress = false, options) {
    if (id === null || id === void 0) {
      throw new Error("Required parameter id was null or undefined when calling updateScheduledReport.");
    }
    if (request === null || request === void 0) {
      throw new Error("Required parameter request was null or undefined when calling updateScheduledReport.");
    }
    let localVarHeaders = this.defaultHeaders;
    let localVarCredential;
    localVarCredential = this.configuration.lookupCredential("access_token");
    if (localVarCredential) {
      localVarHeaders = localVarHeaders.set("x-access-token", localVarCredential);
    }
    let localVarHttpHeaderAcceptSelected = options && options.httpHeaderAccept;
    if (localVarHttpHeaderAcceptSelected === void 0) {
      const httpHeaderAccepts = [
        "application/json"
      ];
      localVarHttpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
    }
    if (localVarHttpHeaderAcceptSelected !== void 0) {
      localVarHeaders = localVarHeaders.set("Accept", localVarHttpHeaderAcceptSelected);
    }
    let localVarHttpContext = options && options.context;
    if (localVarHttpContext === void 0) {
      localVarHttpContext = new HttpContext();
    }
    let localVarTransferCache = options && options.transferCache;
    if (localVarTransferCache === void 0) {
      localVarTransferCache = true;
    }
    const consumes = [
      "application/json"
    ];
    const httpContentTypeSelected = this.configuration.selectHeaderContentType(consumes);
    if (httpContentTypeSelected !== void 0) {
      localVarHeaders = localVarHeaders.set("Content-Type", httpContentTypeSelected);
    }
    let responseType_ = "json";
    if (localVarHttpHeaderAcceptSelected) {
      if (localVarHttpHeaderAcceptSelected.startsWith("text")) {
        responseType_ = "text";
      } else if (this.configuration.isJsonMime(localVarHttpHeaderAcceptSelected)) {
        responseType_ = "json";
      } else {
        responseType_ = "blob";
      }
    }
    let localVarPath = `/entities/scheduledreports/${this.configuration.encodeParam({ name: "id", value: id, in: "path", style: "simple", explode: false, dataType: "string", dataFormat: void 0 })}`;
    return this.httpClient.request("put", `${this.configuration.basePath}${localVarPath}`, {
      context: localVarHttpContext,
      body: request,
      responseType: responseType_,
      withCredentials: this.configuration.withCredentials,
      headers: localVarHeaders,
      observe,
      transferCache: localVarTransferCache,
      reportProgress
    });
  }
  static \u0275fac = function ScheduledReportsService_Factory(__ngFactoryType__) {
    return new (__ngFactoryType__ || _ScheduledReportsService)(\u0275\u0275inject(HttpClient), \u0275\u0275inject(BASE_PATH, 8), \u0275\u0275inject(Configuration, 8));
  };
  static \u0275prov = /* @__PURE__ */ \u0275\u0275defineInjectable({ token: _ScheduledReportsService, factory: _ScheduledReportsService.\u0275fac, providedIn: "root" });
};
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(ScheduledReportsService, [{
    type: Injectable,
    args: [{
      providedIn: "root"
    }]
  }], () => [{ type: HttpClient }, { type: void 0, decorators: [{
    type: Optional
  }, {
    type: Inject,
    args: [BASE_PATH]
  }] }, { type: Configuration, decorators: [{
    type: Optional
  }] }], null);
})();

// src/app/api/api/search.service.ts
var SearchService = class _SearchService {
  httpClient;
  basePath = "";
  defaultHeaders = new HttpHeaders();
  configuration = new Configuration();
  encoder;
  constructor(httpClient, basePath, configuration) {
    this.httpClient = httpClient;
    if (configuration) {
      this.configuration = configuration;
    }
    if (typeof this.configuration.basePath !== "string") {
      const firstBasePath = Array.isArray(basePath) ? basePath[0] : void 0;
      if (firstBasePath != void 0) {
        basePath = firstBasePath;
      }
      if (typeof basePath !== "string") {
        basePath = this.basePath;
      }
      this.configuration.basePath = basePath;
    }
    this.encoder = this.configuration.encoder || new CustomHttpParameterCodec();
  }
  // @ts-ignore
  addToHttpParams(httpParams, value, key) {
    if (typeof value === "object" && value instanceof Date === false) {
      httpParams = this.addToHttpParamsRecursive(httpParams, value);
    } else {
      httpParams = this.addToHttpParamsRecursive(httpParams, value, key);
    }
    return httpParams;
  }
  addToHttpParamsRecursive(httpParams, value, key) {
    if (value == null) {
      return httpParams;
    }
    if (typeof value === "object") {
      if (Array.isArray(value)) {
        value.forEach((elem) => httpParams = this.addToHttpParamsRecursive(httpParams, elem, key));
      } else if (value instanceof Date) {
        if (key != null) {
          httpParams = httpParams.append(key, value.toISOString().substring(0, 10));
        } else {
          throw Error("key may not be null if value is Date");
        }
      } else {
        Object.keys(value).forEach((k) => httpParams = this.addToHttpParamsRecursive(httpParams, value[k], key != null ? `${key}.${k}` : k));
      }
    } else if (key != null) {
      httpParams = httpParams.append(key, value);
    } else {
      throw Error("key may not be null if value is not object or array");
    }
    return httpParams;
  }
  searchEntities(query, deleted, observe = "body", reportProgress = false, options) {
    if (query === null || query === void 0) {
      throw new Error("Required parameter query was null or undefined when calling searchEntities.");
    }
    let localVarQueryParameters = new HttpParams({ encoder: this.encoder });
    if (query !== void 0 && query !== null) {
      localVarQueryParameters = this.addToHttpParams(localVarQueryParameters, query, "query");
    }
    if (deleted !== void 0 && deleted !== null) {
      localVarQueryParameters = this.addToHttpParams(localVarQueryParameters, deleted, "deleted");
    }
    let localVarHeaders = this.defaultHeaders;
    let localVarCredential;
    localVarCredential = this.configuration.lookupCredential("access_token");
    if (localVarCredential) {
      localVarHeaders = localVarHeaders.set("x-access-token", localVarCredential);
    }
    let localVarHttpHeaderAcceptSelected = options && options.httpHeaderAccept;
    if (localVarHttpHeaderAcceptSelected === void 0) {
      const httpHeaderAccepts = [
        "application/json"
      ];
      localVarHttpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
    }
    if (localVarHttpHeaderAcceptSelected !== void 0) {
      localVarHeaders = localVarHeaders.set("Accept", localVarHttpHeaderAcceptSelected);
    }
    let localVarHttpContext = options && options.context;
    if (localVarHttpContext === void 0) {
      localVarHttpContext = new HttpContext();
    }
    let localVarTransferCache = options && options.transferCache;
    if (localVarTransferCache === void 0) {
      localVarTransferCache = true;
    }
    let responseType_ = "json";
    if (localVarHttpHeaderAcceptSelected) {
      if (localVarHttpHeaderAcceptSelected.startsWith("text")) {
        responseType_ = "text";
      } else if (this.configuration.isJsonMime(localVarHttpHeaderAcceptSelected)) {
        responseType_ = "json";
      } else {
        responseType_ = "blob";
      }
    }
    let localVarPath = `/search/entities`;
    return this.httpClient.request("get", `${this.configuration.basePath}${localVarPath}`, {
      context: localVarHttpContext,
      params: localVarQueryParameters,
      responseType: responseType_,
      withCredentials: this.configuration.withCredentials,
      headers: localVarHeaders,
      observe,
      transferCache: localVarTransferCache,
      reportProgress
    });
  }
  static \u0275fac = function SearchService_Factory(__ngFactoryType__) {
    return new (__ngFactoryType__ || _SearchService)(\u0275\u0275inject(HttpClient), \u0275\u0275inject(BASE_PATH, 8), \u0275\u0275inject(Configuration, 8));
  };
  static \u0275prov = /* @__PURE__ */ \u0275\u0275defineInjectable({ token: _SearchService, factory: _SearchService.\u0275fac, providedIn: "root" });
};
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(SearchService, [{
    type: Injectable,
    args: [{
      providedIn: "root"
    }]
  }], () => [{ type: HttpClient }, { type: void 0, decorators: [{
    type: Optional
  }, {
    type: Inject,
    args: [BASE_PATH]
  }] }, { type: Configuration, decorators: [{
    type: Optional
  }] }], null);
})();

// src/app/api/api/simCards.service.ts
var SimCardsService = class _SimCardsService {
  httpClient;
  basePath = "";
  defaultHeaders = new HttpHeaders();
  configuration = new Configuration();
  encoder;
  constructor(httpClient, basePath, configuration) {
    this.httpClient = httpClient;
    if (configuration) {
      this.configuration = configuration;
    }
    if (typeof this.configuration.basePath !== "string") {
      const firstBasePath = Array.isArray(basePath) ? basePath[0] : void 0;
      if (firstBasePath != void 0) {
        basePath = firstBasePath;
      }
      if (typeof basePath !== "string") {
        basePath = this.basePath;
      }
      this.configuration.basePath = basePath;
    }
    this.encoder = this.configuration.encoder || new CustomHttpParameterCodec();
  }
  // @ts-ignore
  addToHttpParams(httpParams, value, key) {
    if (typeof value === "object" && value instanceof Date === false) {
      httpParams = this.addToHttpParamsRecursive(httpParams, value);
    } else {
      httpParams = this.addToHttpParamsRecursive(httpParams, value, key);
    }
    return httpParams;
  }
  addToHttpParamsRecursive(httpParams, value, key) {
    if (value == null) {
      return httpParams;
    }
    if (typeof value === "object") {
      if (Array.isArray(value)) {
        value.forEach((elem) => httpParams = this.addToHttpParamsRecursive(httpParams, elem, key));
      } else if (value instanceof Date) {
        if (key != null) {
          httpParams = httpParams.append(key, value.toISOString().substring(0, 10));
        } else {
          throw Error("key may not be null if value is Date");
        }
      } else {
        Object.keys(value).forEach((k) => httpParams = this.addToHttpParamsRecursive(httpParams, value[k], key != null ? `${key}.${k}` : k));
      }
    } else if (key != null) {
      httpParams = httpParams.append(key, value);
    } else {
      throw Error("key may not be null if value is not object or array");
    }
    return httpParams;
  }
  createSimCard(request, observe = "body", reportProgress = false, options) {
    if (request === null || request === void 0) {
      throw new Error("Required parameter request was null or undefined when calling createSimCard.");
    }
    let localVarHeaders = this.defaultHeaders;
    let localVarCredential;
    localVarCredential = this.configuration.lookupCredential("access_token");
    if (localVarCredential) {
      localVarHeaders = localVarHeaders.set("x-access-token", localVarCredential);
    }
    let localVarHttpHeaderAcceptSelected = options && options.httpHeaderAccept;
    if (localVarHttpHeaderAcceptSelected === void 0) {
      const httpHeaderAccepts = [
        "application/json"
      ];
      localVarHttpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
    }
    if (localVarHttpHeaderAcceptSelected !== void 0) {
      localVarHeaders = localVarHeaders.set("Accept", localVarHttpHeaderAcceptSelected);
    }
    let localVarHttpContext = options && options.context;
    if (localVarHttpContext === void 0) {
      localVarHttpContext = new HttpContext();
    }
    let localVarTransferCache = options && options.transferCache;
    if (localVarTransferCache === void 0) {
      localVarTransferCache = true;
    }
    const consumes = [
      "application/json"
    ];
    const httpContentTypeSelected = this.configuration.selectHeaderContentType(consumes);
    if (httpContentTypeSelected !== void 0) {
      localVarHeaders = localVarHeaders.set("Content-Type", httpContentTypeSelected);
    }
    let responseType_ = "json";
    if (localVarHttpHeaderAcceptSelected) {
      if (localVarHttpHeaderAcceptSelected.startsWith("text")) {
        responseType_ = "text";
      } else if (this.configuration.isJsonMime(localVarHttpHeaderAcceptSelected)) {
        responseType_ = "json";
      } else {
        responseType_ = "blob";
      }
    }
    let localVarPath = `/entities/simcards`;
    return this.httpClient.request("post", `${this.configuration.basePath}${localVarPath}`, {
      context: localVarHttpContext,
      body: request,
      responseType: responseType_,
      withCredentials: this.configuration.withCredentials,
      headers: localVarHeaders,
      observe,
      transferCache: localVarTransferCache,
      reportProgress
    });
  }
  getSimCard(id, observe = "body", reportProgress = false, options) {
    if (id === null || id === void 0) {
      throw new Error("Required parameter id was null or undefined when calling getSimCard.");
    }
    let localVarHeaders = this.defaultHeaders;
    let localVarCredential;
    localVarCredential = this.configuration.lookupCredential("access_token");
    if (localVarCredential) {
      localVarHeaders = localVarHeaders.set("x-access-token", localVarCredential);
    }
    let localVarHttpHeaderAcceptSelected = options && options.httpHeaderAccept;
    if (localVarHttpHeaderAcceptSelected === void 0) {
      const httpHeaderAccepts = [
        "application/json"
      ];
      localVarHttpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
    }
    if (localVarHttpHeaderAcceptSelected !== void 0) {
      localVarHeaders = localVarHeaders.set("Accept", localVarHttpHeaderAcceptSelected);
    }
    let localVarHttpContext = options && options.context;
    if (localVarHttpContext === void 0) {
      localVarHttpContext = new HttpContext();
    }
    let localVarTransferCache = options && options.transferCache;
    if (localVarTransferCache === void 0) {
      localVarTransferCache = true;
    }
    let responseType_ = "json";
    if (localVarHttpHeaderAcceptSelected) {
      if (localVarHttpHeaderAcceptSelected.startsWith("text")) {
        responseType_ = "text";
      } else if (this.configuration.isJsonMime(localVarHttpHeaderAcceptSelected)) {
        responseType_ = "json";
      } else {
        responseType_ = "blob";
      }
    }
    let localVarPath = `/entities/simcards/${this.configuration.encodeParam({ name: "id", value: id, in: "path", style: "simple", explode: false, dataType: "string", dataFormat: void 0 })}`;
    return this.httpClient.request("get", `${this.configuration.basePath}${localVarPath}`, {
      context: localVarHttpContext,
      responseType: responseType_,
      withCredentials: this.configuration.withCredentials,
      headers: localVarHeaders,
      observe,
      transferCache: localVarTransferCache,
      reportProgress
    });
  }
  listSimCards(owner, offset, limit, sort, filter, observe = "body", reportProgress = false, options) {
    if (owner === null || owner === void 0) {
      throw new Error("Required parameter owner was null or undefined when calling listSimCards.");
    }
    let localVarQueryParameters = new HttpParams({ encoder: this.encoder });
    if (owner !== void 0 && owner !== null) {
      localVarQueryParameters = this.addToHttpParams(localVarQueryParameters, owner, "owner");
    }
    if (offset !== void 0 && offset !== null) {
      localVarQueryParameters = this.addToHttpParams(localVarQueryParameters, offset, "offset");
    }
    if (limit !== void 0 && limit !== null) {
      localVarQueryParameters = this.addToHttpParams(localVarQueryParameters, limit, "limit");
    }
    if (sort !== void 0 && sort !== null) {
      localVarQueryParameters = this.addToHttpParams(localVarQueryParameters, sort, "sort");
    }
    if (filter !== void 0 && filter !== null) {
      localVarQueryParameters = this.addToHttpParams(localVarQueryParameters, filter, "filter");
    }
    let localVarHeaders = this.defaultHeaders;
    let localVarCredential;
    localVarCredential = this.configuration.lookupCredential("access_token");
    if (localVarCredential) {
      localVarHeaders = localVarHeaders.set("x-access-token", localVarCredential);
    }
    let localVarHttpHeaderAcceptSelected = options && options.httpHeaderAccept;
    if (localVarHttpHeaderAcceptSelected === void 0) {
      const httpHeaderAccepts = [
        "application/json"
      ];
      localVarHttpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
    }
    if (localVarHttpHeaderAcceptSelected !== void 0) {
      localVarHeaders = localVarHeaders.set("Accept", localVarHttpHeaderAcceptSelected);
    }
    let localVarHttpContext = options && options.context;
    if (localVarHttpContext === void 0) {
      localVarHttpContext = new HttpContext();
    }
    let localVarTransferCache = options && options.transferCache;
    if (localVarTransferCache === void 0) {
      localVarTransferCache = true;
    }
    let responseType_ = "json";
    if (localVarHttpHeaderAcceptSelected) {
      if (localVarHttpHeaderAcceptSelected.startsWith("text")) {
        responseType_ = "text";
      } else if (this.configuration.isJsonMime(localVarHttpHeaderAcceptSelected)) {
        responseType_ = "json";
      } else {
        responseType_ = "blob";
      }
    }
    let localVarPath = `/entities/simcards`;
    return this.httpClient.request("get", `${this.configuration.basePath}${localVarPath}`, {
      context: localVarHttpContext,
      params: localVarQueryParameters,
      responseType: responseType_,
      withCredentials: this.configuration.withCredentials,
      headers: localVarHeaders,
      observe,
      transferCache: localVarTransferCache,
      reportProgress
    });
  }
  updateSimCard(id, request, observe = "body", reportProgress = false, options) {
    if (id === null || id === void 0) {
      throw new Error("Required parameter id was null or undefined when calling updateSimCard.");
    }
    if (request === null || request === void 0) {
      throw new Error("Required parameter request was null or undefined when calling updateSimCard.");
    }
    let localVarHeaders = this.defaultHeaders;
    let localVarCredential;
    localVarCredential = this.configuration.lookupCredential("access_token");
    if (localVarCredential) {
      localVarHeaders = localVarHeaders.set("x-access-token", localVarCredential);
    }
    let localVarHttpHeaderAcceptSelected = options && options.httpHeaderAccept;
    if (localVarHttpHeaderAcceptSelected === void 0) {
      const httpHeaderAccepts = [
        "application/json"
      ];
      localVarHttpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
    }
    if (localVarHttpHeaderAcceptSelected !== void 0) {
      localVarHeaders = localVarHeaders.set("Accept", localVarHttpHeaderAcceptSelected);
    }
    let localVarHttpContext = options && options.context;
    if (localVarHttpContext === void 0) {
      localVarHttpContext = new HttpContext();
    }
    let localVarTransferCache = options && options.transferCache;
    if (localVarTransferCache === void 0) {
      localVarTransferCache = true;
    }
    const consumes = [
      "application/json"
    ];
    const httpContentTypeSelected = this.configuration.selectHeaderContentType(consumes);
    if (httpContentTypeSelected !== void 0) {
      localVarHeaders = localVarHeaders.set("Content-Type", httpContentTypeSelected);
    }
    let responseType_ = "json";
    if (localVarHttpHeaderAcceptSelected) {
      if (localVarHttpHeaderAcceptSelected.startsWith("text")) {
        responseType_ = "text";
      } else if (this.configuration.isJsonMime(localVarHttpHeaderAcceptSelected)) {
        responseType_ = "json";
      } else {
        responseType_ = "blob";
      }
    }
    let localVarPath = `/entities/simcards/${this.configuration.encodeParam({ name: "id", value: id, in: "path", style: "simple", explode: false, dataType: "string", dataFormat: void 0 })}`;
    return this.httpClient.request("put", `${this.configuration.basePath}${localVarPath}`, {
      context: localVarHttpContext,
      body: request,
      responseType: responseType_,
      withCredentials: this.configuration.withCredentials,
      headers: localVarHeaders,
      observe,
      transferCache: localVarTransferCache,
      reportProgress
    });
  }
  static \u0275fac = function SimCardsService_Factory(__ngFactoryType__) {
    return new (__ngFactoryType__ || _SimCardsService)(\u0275\u0275inject(HttpClient), \u0275\u0275inject(BASE_PATH, 8), \u0275\u0275inject(Configuration, 8));
  };
  static \u0275prov = /* @__PURE__ */ \u0275\u0275defineInjectable({ token: _SimCardsService, factory: _SimCardsService.\u0275fac, providedIn: "root" });
};
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(SimCardsService, [{
    type: Injectable,
    args: [{
      providedIn: "root"
    }]
  }], () => [{ type: HttpClient }, { type: void 0, decorators: [{
    type: Optional
  }, {
    type: Inject,
    args: [BASE_PATH]
  }] }, { type: Configuration, decorators: [{
    type: Optional
  }] }], null);
})();

// src/app/api/api/smsGatewayProviders.service.ts
var SmsGatewayProvidersService = class _SmsGatewayProvidersService {
  httpClient;
  basePath = "";
  defaultHeaders = new HttpHeaders();
  configuration = new Configuration();
  encoder;
  constructor(httpClient, basePath, configuration) {
    this.httpClient = httpClient;
    if (configuration) {
      this.configuration = configuration;
    }
    if (typeof this.configuration.basePath !== "string") {
      const firstBasePath = Array.isArray(basePath) ? basePath[0] : void 0;
      if (firstBasePath != void 0) {
        basePath = firstBasePath;
      }
      if (typeof basePath !== "string") {
        basePath = this.basePath;
      }
      this.configuration.basePath = basePath;
    }
    this.encoder = this.configuration.encoder || new CustomHttpParameterCodec();
  }
  // @ts-ignore
  addToHttpParams(httpParams, value, key) {
    if (typeof value === "object" && value instanceof Date === false) {
      httpParams = this.addToHttpParamsRecursive(httpParams, value);
    } else {
      httpParams = this.addToHttpParamsRecursive(httpParams, value, key);
    }
    return httpParams;
  }
  addToHttpParamsRecursive(httpParams, value, key) {
    if (value == null) {
      return httpParams;
    }
    if (typeof value === "object") {
      if (Array.isArray(value)) {
        value.forEach((elem) => httpParams = this.addToHttpParamsRecursive(httpParams, elem, key));
      } else if (value instanceof Date) {
        if (key != null) {
          httpParams = httpParams.append(key, value.toISOString().substring(0, 10));
        } else {
          throw Error("key may not be null if value is Date");
        }
      } else {
        Object.keys(value).forEach((k) => httpParams = this.addToHttpParamsRecursive(httpParams, value[k], key != null ? `${key}.${k}` : k));
      }
    } else if (key != null) {
      httpParams = httpParams.append(key, value);
    } else {
      throw Error("key may not be null if value is not object or array");
    }
    return httpParams;
  }
  createSmsGatewayProvider(request, observe = "body", reportProgress = false, options) {
    if (request === null || request === void 0) {
      throw new Error("Required parameter request was null or undefined when calling createSmsGatewayProvider.");
    }
    let localVarHeaders = this.defaultHeaders;
    let localVarCredential;
    localVarCredential = this.configuration.lookupCredential("access_token");
    if (localVarCredential) {
      localVarHeaders = localVarHeaders.set("x-access-token", localVarCredential);
    }
    let localVarHttpHeaderAcceptSelected = options && options.httpHeaderAccept;
    if (localVarHttpHeaderAcceptSelected === void 0) {
      const httpHeaderAccepts = [
        "application/json"
      ];
      localVarHttpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
    }
    if (localVarHttpHeaderAcceptSelected !== void 0) {
      localVarHeaders = localVarHeaders.set("Accept", localVarHttpHeaderAcceptSelected);
    }
    let localVarHttpContext = options && options.context;
    if (localVarHttpContext === void 0) {
      localVarHttpContext = new HttpContext();
    }
    let localVarTransferCache = options && options.transferCache;
    if (localVarTransferCache === void 0) {
      localVarTransferCache = true;
    }
    const consumes = [
      "application/json"
    ];
    const httpContentTypeSelected = this.configuration.selectHeaderContentType(consumes);
    if (httpContentTypeSelected !== void 0) {
      localVarHeaders = localVarHeaders.set("Content-Type", httpContentTypeSelected);
    }
    let responseType_ = "json";
    if (localVarHttpHeaderAcceptSelected) {
      if (localVarHttpHeaderAcceptSelected.startsWith("text")) {
        responseType_ = "text";
      } else if (this.configuration.isJsonMime(localVarHttpHeaderAcceptSelected)) {
        responseType_ = "json";
      } else {
        responseType_ = "blob";
      }
    }
    let localVarPath = `/entities/smsgatewayproviders`;
    return this.httpClient.request("post", `${this.configuration.basePath}${localVarPath}`, {
      context: localVarHttpContext,
      body: request,
      responseType: responseType_,
      withCredentials: this.configuration.withCredentials,
      headers: localVarHeaders,
      observe,
      transferCache: localVarTransferCache,
      reportProgress
    });
  }
  getSmsGatewayProvider(id, observe = "body", reportProgress = false, options) {
    if (id === null || id === void 0) {
      throw new Error("Required parameter id was null or undefined when calling getSmsGatewayProvider.");
    }
    let localVarHeaders = this.defaultHeaders;
    let localVarCredential;
    localVarCredential = this.configuration.lookupCredential("access_token");
    if (localVarCredential) {
      localVarHeaders = localVarHeaders.set("x-access-token", localVarCredential);
    }
    let localVarHttpHeaderAcceptSelected = options && options.httpHeaderAccept;
    if (localVarHttpHeaderAcceptSelected === void 0) {
      const httpHeaderAccepts = [
        "application/json"
      ];
      localVarHttpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
    }
    if (localVarHttpHeaderAcceptSelected !== void 0) {
      localVarHeaders = localVarHeaders.set("Accept", localVarHttpHeaderAcceptSelected);
    }
    let localVarHttpContext = options && options.context;
    if (localVarHttpContext === void 0) {
      localVarHttpContext = new HttpContext();
    }
    let localVarTransferCache = options && options.transferCache;
    if (localVarTransferCache === void 0) {
      localVarTransferCache = true;
    }
    let responseType_ = "json";
    if (localVarHttpHeaderAcceptSelected) {
      if (localVarHttpHeaderAcceptSelected.startsWith("text")) {
        responseType_ = "text";
      } else if (this.configuration.isJsonMime(localVarHttpHeaderAcceptSelected)) {
        responseType_ = "json";
      } else {
        responseType_ = "blob";
      }
    }
    let localVarPath = `/entities/smsgatewayproviders/${this.configuration.encodeParam({ name: "id", value: id, in: "path", style: "simple", explode: false, dataType: "string", dataFormat: void 0 })}`;
    return this.httpClient.request("get", `${this.configuration.basePath}${localVarPath}`, {
      context: localVarHttpContext,
      responseType: responseType_,
      withCredentials: this.configuration.withCredentials,
      headers: localVarHeaders,
      observe,
      transferCache: localVarTransferCache,
      reportProgress
    });
  }
  listSmsGatewayProviders(owner, offset, limit, sort, filter, observe = "body", reportProgress = false, options) {
    if (owner === null || owner === void 0) {
      throw new Error("Required parameter owner was null or undefined when calling listSmsGatewayProviders.");
    }
    let localVarQueryParameters = new HttpParams({ encoder: this.encoder });
    if (owner !== void 0 && owner !== null) {
      localVarQueryParameters = this.addToHttpParams(localVarQueryParameters, owner, "owner");
    }
    if (offset !== void 0 && offset !== null) {
      localVarQueryParameters = this.addToHttpParams(localVarQueryParameters, offset, "offset");
    }
    if (limit !== void 0 && limit !== null) {
      localVarQueryParameters = this.addToHttpParams(localVarQueryParameters, limit, "limit");
    }
    if (sort !== void 0 && sort !== null) {
      localVarQueryParameters = this.addToHttpParams(localVarQueryParameters, sort, "sort");
    }
    if (filter !== void 0 && filter !== null) {
      localVarQueryParameters = this.addToHttpParams(localVarQueryParameters, filter, "filter");
    }
    let localVarHeaders = this.defaultHeaders;
    let localVarCredential;
    localVarCredential = this.configuration.lookupCredential("access_token");
    if (localVarCredential) {
      localVarHeaders = localVarHeaders.set("x-access-token", localVarCredential);
    }
    let localVarHttpHeaderAcceptSelected = options && options.httpHeaderAccept;
    if (localVarHttpHeaderAcceptSelected === void 0) {
      const httpHeaderAccepts = [
        "application/json"
      ];
      localVarHttpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
    }
    if (localVarHttpHeaderAcceptSelected !== void 0) {
      localVarHeaders = localVarHeaders.set("Accept", localVarHttpHeaderAcceptSelected);
    }
    let localVarHttpContext = options && options.context;
    if (localVarHttpContext === void 0) {
      localVarHttpContext = new HttpContext();
    }
    let localVarTransferCache = options && options.transferCache;
    if (localVarTransferCache === void 0) {
      localVarTransferCache = true;
    }
    let responseType_ = "json";
    if (localVarHttpHeaderAcceptSelected) {
      if (localVarHttpHeaderAcceptSelected.startsWith("text")) {
        responseType_ = "text";
      } else if (this.configuration.isJsonMime(localVarHttpHeaderAcceptSelected)) {
        responseType_ = "json";
      } else {
        responseType_ = "blob";
      }
    }
    let localVarPath = `/entities/smsgatewayproviders`;
    return this.httpClient.request("get", `${this.configuration.basePath}${localVarPath}`, {
      context: localVarHttpContext,
      params: localVarQueryParameters,
      responseType: responseType_,
      withCredentials: this.configuration.withCredentials,
      headers: localVarHeaders,
      observe,
      transferCache: localVarTransferCache,
      reportProgress
    });
  }
  updateSmsGatewayProvider(id, request, observe = "body", reportProgress = false, options) {
    if (id === null || id === void 0) {
      throw new Error("Required parameter id was null or undefined when calling updateSmsGatewayProvider.");
    }
    if (request === null || request === void 0) {
      throw new Error("Required parameter request was null or undefined when calling updateSmsGatewayProvider.");
    }
    let localVarHeaders = this.defaultHeaders;
    let localVarCredential;
    localVarCredential = this.configuration.lookupCredential("access_token");
    if (localVarCredential) {
      localVarHeaders = localVarHeaders.set("x-access-token", localVarCredential);
    }
    let localVarHttpHeaderAcceptSelected = options && options.httpHeaderAccept;
    if (localVarHttpHeaderAcceptSelected === void 0) {
      const httpHeaderAccepts = [
        "application/json"
      ];
      localVarHttpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
    }
    if (localVarHttpHeaderAcceptSelected !== void 0) {
      localVarHeaders = localVarHeaders.set("Accept", localVarHttpHeaderAcceptSelected);
    }
    let localVarHttpContext = options && options.context;
    if (localVarHttpContext === void 0) {
      localVarHttpContext = new HttpContext();
    }
    let localVarTransferCache = options && options.transferCache;
    if (localVarTransferCache === void 0) {
      localVarTransferCache = true;
    }
    const consumes = [
      "application/json"
    ];
    const httpContentTypeSelected = this.configuration.selectHeaderContentType(consumes);
    if (httpContentTypeSelected !== void 0) {
      localVarHeaders = localVarHeaders.set("Content-Type", httpContentTypeSelected);
    }
    let responseType_ = "json";
    if (localVarHttpHeaderAcceptSelected) {
      if (localVarHttpHeaderAcceptSelected.startsWith("text")) {
        responseType_ = "text";
      } else if (this.configuration.isJsonMime(localVarHttpHeaderAcceptSelected)) {
        responseType_ = "json";
      } else {
        responseType_ = "blob";
      }
    }
    let localVarPath = `/entities/smsgatewayproviders/${this.configuration.encodeParam({ name: "id", value: id, in: "path", style: "simple", explode: false, dataType: "string", dataFormat: void 0 })}`;
    return this.httpClient.request("put", `${this.configuration.basePath}${localVarPath}`, {
      context: localVarHttpContext,
      body: request,
      responseType: responseType_,
      withCredentials: this.configuration.withCredentials,
      headers: localVarHeaders,
      observe,
      transferCache: localVarTransferCache,
      reportProgress
    });
  }
  static \u0275fac = function SmsGatewayProvidersService_Factory(__ngFactoryType__) {
    return new (__ngFactoryType__ || _SmsGatewayProvidersService)(\u0275\u0275inject(HttpClient), \u0275\u0275inject(BASE_PATH, 8), \u0275\u0275inject(Configuration, 8));
  };
  static \u0275prov = /* @__PURE__ */ \u0275\u0275defineInjectable({ token: _SmsGatewayProvidersService, factory: _SmsGatewayProvidersService.\u0275fac, providedIn: "root" });
};
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(SmsGatewayProvidersService, [{
    type: Injectable,
    args: [{
      providedIn: "root"
    }]
  }], () => [{ type: HttpClient }, { type: void 0, decorators: [{
    type: Optional
  }, {
    type: Inject,
    args: [BASE_PATH]
  }] }, { type: Configuration, decorators: [{
    type: Optional
  }] }], null);
})();

// src/app/api/api/smsGatewayProvidersTypes.service.ts
var SmsGatewayProvidersTypesService = class _SmsGatewayProvidersTypesService {
  httpClient;
  basePath = "";
  defaultHeaders = new HttpHeaders();
  configuration = new Configuration();
  encoder;
  constructor(httpClient, basePath, configuration) {
    this.httpClient = httpClient;
    if (configuration) {
      this.configuration = configuration;
    }
    if (typeof this.configuration.basePath !== "string") {
      const firstBasePath = Array.isArray(basePath) ? basePath[0] : void 0;
      if (firstBasePath != void 0) {
        basePath = firstBasePath;
      }
      if (typeof basePath !== "string") {
        basePath = this.basePath;
      }
      this.configuration.basePath = basePath;
    }
    this.encoder = this.configuration.encoder || new CustomHttpParameterCodec();
  }
  // @ts-ignore
  addToHttpParams(httpParams, value, key) {
    if (typeof value === "object" && value instanceof Date === false) {
      httpParams = this.addToHttpParamsRecursive(httpParams, value);
    } else {
      httpParams = this.addToHttpParamsRecursive(httpParams, value, key);
    }
    return httpParams;
  }
  addToHttpParamsRecursive(httpParams, value, key) {
    if (value == null) {
      return httpParams;
    }
    if (typeof value === "object") {
      if (Array.isArray(value)) {
        value.forEach((elem) => httpParams = this.addToHttpParamsRecursive(httpParams, elem, key));
      } else if (value instanceof Date) {
        if (key != null) {
          httpParams = httpParams.append(key, value.toISOString().substring(0, 10));
        } else {
          throw Error("key may not be null if value is Date");
        }
      } else {
        Object.keys(value).forEach((k) => httpParams = this.addToHttpParamsRecursive(httpParams, value[k], key != null ? `${key}.${k}` : k));
      }
    } else if (key != null) {
      httpParams = httpParams.append(key, value);
    } else {
      throw Error("key may not be null if value is not object or array");
    }
    return httpParams;
  }
  getSmsGatewayProviderType(id, observe = "body", reportProgress = false, options) {
    if (id === null || id === void 0) {
      throw new Error("Required parameter id was null or undefined when calling getSmsGatewayProviderType.");
    }
    let localVarHeaders = this.defaultHeaders;
    let localVarCredential;
    localVarCredential = this.configuration.lookupCredential("access_token");
    if (localVarCredential) {
      localVarHeaders = localVarHeaders.set("x-access-token", localVarCredential);
    }
    let localVarHttpHeaderAcceptSelected = options && options.httpHeaderAccept;
    if (localVarHttpHeaderAcceptSelected === void 0) {
      const httpHeaderAccepts = [
        "application/json"
      ];
      localVarHttpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
    }
    if (localVarHttpHeaderAcceptSelected !== void 0) {
      localVarHeaders = localVarHeaders.set("Accept", localVarHttpHeaderAcceptSelected);
    }
    let localVarHttpContext = options && options.context;
    if (localVarHttpContext === void 0) {
      localVarHttpContext = new HttpContext();
    }
    let localVarTransferCache = options && options.transferCache;
    if (localVarTransferCache === void 0) {
      localVarTransferCache = true;
    }
    let responseType_ = "json";
    if (localVarHttpHeaderAcceptSelected) {
      if (localVarHttpHeaderAcceptSelected.startsWith("text")) {
        responseType_ = "text";
      } else if (this.configuration.isJsonMime(localVarHttpHeaderAcceptSelected)) {
        responseType_ = "json";
      } else {
        responseType_ = "blob";
      }
    }
    let localVarPath = `/entities/smsgatewayprovidertypes/${this.configuration.encodeParam({ name: "id", value: id, in: "path", style: "simple", explode: false, dataType: "string", dataFormat: void 0 })}`;
    return this.httpClient.request("get", `${this.configuration.basePath}${localVarPath}`, {
      context: localVarHttpContext,
      responseType: responseType_,
      withCredentials: this.configuration.withCredentials,
      headers: localVarHeaders,
      observe,
      transferCache: localVarTransferCache,
      reportProgress
    });
  }
  listSmsGatewayProviderTypes(owner, offset, limit, sort, filter, observe = "body", reportProgress = false, options) {
    if (owner === null || owner === void 0) {
      throw new Error("Required parameter owner was null or undefined when calling listSmsGatewayProviderTypes.");
    }
    let localVarQueryParameters = new HttpParams({ encoder: this.encoder });
    if (owner !== void 0 && owner !== null) {
      localVarQueryParameters = this.addToHttpParams(localVarQueryParameters, owner, "owner");
    }
    if (offset !== void 0 && offset !== null) {
      localVarQueryParameters = this.addToHttpParams(localVarQueryParameters, offset, "offset");
    }
    if (limit !== void 0 && limit !== null) {
      localVarQueryParameters = this.addToHttpParams(localVarQueryParameters, limit, "limit");
    }
    if (sort !== void 0 && sort !== null) {
      localVarQueryParameters = this.addToHttpParams(localVarQueryParameters, sort, "sort");
    }
    if (filter !== void 0 && filter !== null) {
      localVarQueryParameters = this.addToHttpParams(localVarQueryParameters, filter, "filter");
    }
    let localVarHeaders = this.defaultHeaders;
    let localVarCredential;
    localVarCredential = this.configuration.lookupCredential("access_token");
    if (localVarCredential) {
      localVarHeaders = localVarHeaders.set("x-access-token", localVarCredential);
    }
    let localVarHttpHeaderAcceptSelected = options && options.httpHeaderAccept;
    if (localVarHttpHeaderAcceptSelected === void 0) {
      const httpHeaderAccepts = [
        "application/json"
      ];
      localVarHttpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
    }
    if (localVarHttpHeaderAcceptSelected !== void 0) {
      localVarHeaders = localVarHeaders.set("Accept", localVarHttpHeaderAcceptSelected);
    }
    let localVarHttpContext = options && options.context;
    if (localVarHttpContext === void 0) {
      localVarHttpContext = new HttpContext();
    }
    let localVarTransferCache = options && options.transferCache;
    if (localVarTransferCache === void 0) {
      localVarTransferCache = true;
    }
    let responseType_ = "json";
    if (localVarHttpHeaderAcceptSelected) {
      if (localVarHttpHeaderAcceptSelected.startsWith("text")) {
        responseType_ = "text";
      } else if (this.configuration.isJsonMime(localVarHttpHeaderAcceptSelected)) {
        responseType_ = "json";
      } else {
        responseType_ = "blob";
      }
    }
    let localVarPath = `/entities/smsgatewayprovidertypes`;
    return this.httpClient.request("get", `${this.configuration.basePath}${localVarPath}`, {
      context: localVarHttpContext,
      params: localVarQueryParameters,
      responseType: responseType_,
      withCredentials: this.configuration.withCredentials,
      headers: localVarHeaders,
      observe,
      transferCache: localVarTransferCache,
      reportProgress
    });
  }
  static \u0275fac = function SmsGatewayProvidersTypesService_Factory(__ngFactoryType__) {
    return new (__ngFactoryType__ || _SmsGatewayProvidersTypesService)(\u0275\u0275inject(HttpClient), \u0275\u0275inject(BASE_PATH, 8), \u0275\u0275inject(Configuration, 8));
  };
  static \u0275prov = /* @__PURE__ */ \u0275\u0275defineInjectable({ token: _SmsGatewayProvidersTypesService, factory: _SmsGatewayProvidersTypesService.\u0275fac, providedIn: "root" });
};
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(SmsGatewayProvidersTypesService, [{
    type: Injectable,
    args: [{
      providedIn: "root"
    }]
  }], () => [{ type: HttpClient }, { type: void 0, decorators: [{
    type: Optional
  }, {
    type: Inject,
    args: [BASE_PATH]
  }] }, { type: Configuration, decorators: [{
    type: Optional
  }] }], null);
})();

// src/app/api/api/sslCertificates.service.ts
var SslCertificatesService = class _SslCertificatesService {
  httpClient;
  basePath = "";
  defaultHeaders = new HttpHeaders();
  configuration = new Configuration();
  encoder;
  constructor(httpClient, basePath, configuration) {
    this.httpClient = httpClient;
    if (configuration) {
      this.configuration = configuration;
    }
    if (typeof this.configuration.basePath !== "string") {
      const firstBasePath = Array.isArray(basePath) ? basePath[0] : void 0;
      if (firstBasePath != void 0) {
        basePath = firstBasePath;
      }
      if (typeof basePath !== "string") {
        basePath = this.basePath;
      }
      this.configuration.basePath = basePath;
    }
    this.encoder = this.configuration.encoder || new CustomHttpParameterCodec();
  }
  // @ts-ignore
  addToHttpParams(httpParams, value, key) {
    if (typeof value === "object" && value instanceof Date === false) {
      httpParams = this.addToHttpParamsRecursive(httpParams, value);
    } else {
      httpParams = this.addToHttpParamsRecursive(httpParams, value, key);
    }
    return httpParams;
  }
  addToHttpParamsRecursive(httpParams, value, key) {
    if (value == null) {
      return httpParams;
    }
    if (typeof value === "object") {
      if (Array.isArray(value)) {
        value.forEach((elem) => httpParams = this.addToHttpParamsRecursive(httpParams, elem, key));
      } else if (value instanceof Date) {
        if (key != null) {
          httpParams = httpParams.append(key, value.toISOString().substring(0, 10));
        } else {
          throw Error("key may not be null if value is Date");
        }
      } else {
        Object.keys(value).forEach((k) => httpParams = this.addToHttpParamsRecursive(httpParams, value[k], key != null ? `${key}.${k}` : k));
      }
    } else if (key != null) {
      httpParams = httpParams.append(key, value);
    } else {
      throw Error("key may not be null if value is not object or array");
    }
    return httpParams;
  }
  createSslCertificate(request, observe = "body", reportProgress = false, options) {
    if (request === null || request === void 0) {
      throw new Error("Required parameter request was null or undefined when calling createSslCertificate.");
    }
    let localVarHeaders = this.defaultHeaders;
    let localVarCredential;
    localVarCredential = this.configuration.lookupCredential("access_token");
    if (localVarCredential) {
      localVarHeaders = localVarHeaders.set("x-access-token", localVarCredential);
    }
    let localVarHttpHeaderAcceptSelected = options && options.httpHeaderAccept;
    if (localVarHttpHeaderAcceptSelected === void 0) {
      const httpHeaderAccepts = [
        "application/json"
      ];
      localVarHttpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
    }
    if (localVarHttpHeaderAcceptSelected !== void 0) {
      localVarHeaders = localVarHeaders.set("Accept", localVarHttpHeaderAcceptSelected);
    }
    let localVarHttpContext = options && options.context;
    if (localVarHttpContext === void 0) {
      localVarHttpContext = new HttpContext();
    }
    let localVarTransferCache = options && options.transferCache;
    if (localVarTransferCache === void 0) {
      localVarTransferCache = true;
    }
    const consumes = [
      "application/json"
    ];
    const httpContentTypeSelected = this.configuration.selectHeaderContentType(consumes);
    if (httpContentTypeSelected !== void 0) {
      localVarHeaders = localVarHeaders.set("Content-Type", httpContentTypeSelected);
    }
    let responseType_ = "json";
    if (localVarHttpHeaderAcceptSelected) {
      if (localVarHttpHeaderAcceptSelected.startsWith("text")) {
        responseType_ = "text";
      } else if (this.configuration.isJsonMime(localVarHttpHeaderAcceptSelected)) {
        responseType_ = "json";
      } else {
        responseType_ = "blob";
      }
    }
    let localVarPath = `/entities/sslcertificates`;
    return this.httpClient.request("post", `${this.configuration.basePath}${localVarPath}`, {
      context: localVarHttpContext,
      body: request,
      responseType: responseType_,
      withCredentials: this.configuration.withCredentials,
      headers: localVarHeaders,
      observe,
      transferCache: localVarTransferCache,
      reportProgress
    });
  }
  getSslCertificate(id, observe = "body", reportProgress = false, options) {
    if (id === null || id === void 0) {
      throw new Error("Required parameter id was null or undefined when calling getSslCertificate.");
    }
    let localVarHeaders = this.defaultHeaders;
    let localVarCredential;
    localVarCredential = this.configuration.lookupCredential("access_token");
    if (localVarCredential) {
      localVarHeaders = localVarHeaders.set("x-access-token", localVarCredential);
    }
    let localVarHttpHeaderAcceptSelected = options && options.httpHeaderAccept;
    if (localVarHttpHeaderAcceptSelected === void 0) {
      const httpHeaderAccepts = [
        "application/json"
      ];
      localVarHttpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
    }
    if (localVarHttpHeaderAcceptSelected !== void 0) {
      localVarHeaders = localVarHeaders.set("Accept", localVarHttpHeaderAcceptSelected);
    }
    let localVarHttpContext = options && options.context;
    if (localVarHttpContext === void 0) {
      localVarHttpContext = new HttpContext();
    }
    let localVarTransferCache = options && options.transferCache;
    if (localVarTransferCache === void 0) {
      localVarTransferCache = true;
    }
    let responseType_ = "json";
    if (localVarHttpHeaderAcceptSelected) {
      if (localVarHttpHeaderAcceptSelected.startsWith("text")) {
        responseType_ = "text";
      } else if (this.configuration.isJsonMime(localVarHttpHeaderAcceptSelected)) {
        responseType_ = "json";
      } else {
        responseType_ = "blob";
      }
    }
    let localVarPath = `/entities/sslcertificates/${this.configuration.encodeParam({ name: "id", value: id, in: "path", style: "simple", explode: false, dataType: "string", dataFormat: void 0 })}`;
    return this.httpClient.request("get", `${this.configuration.basePath}${localVarPath}`, {
      context: localVarHttpContext,
      responseType: responseType_,
      withCredentials: this.configuration.withCredentials,
      headers: localVarHeaders,
      observe,
      transferCache: localVarTransferCache,
      reportProgress
    });
  }
  listSslCertificates(owner, offset, limit, sort, filter, observe = "body", reportProgress = false, options) {
    if (owner === null || owner === void 0) {
      throw new Error("Required parameter owner was null or undefined when calling listSslCertificates.");
    }
    let localVarQueryParameters = new HttpParams({ encoder: this.encoder });
    if (owner !== void 0 && owner !== null) {
      localVarQueryParameters = this.addToHttpParams(localVarQueryParameters, owner, "owner");
    }
    if (offset !== void 0 && offset !== null) {
      localVarQueryParameters = this.addToHttpParams(localVarQueryParameters, offset, "offset");
    }
    if (limit !== void 0 && limit !== null) {
      localVarQueryParameters = this.addToHttpParams(localVarQueryParameters, limit, "limit");
    }
    if (sort !== void 0 && sort !== null) {
      localVarQueryParameters = this.addToHttpParams(localVarQueryParameters, sort, "sort");
    }
    if (filter !== void 0 && filter !== null) {
      localVarQueryParameters = this.addToHttpParams(localVarQueryParameters, filter, "filter");
    }
    let localVarHeaders = this.defaultHeaders;
    let localVarCredential;
    localVarCredential = this.configuration.lookupCredential("access_token");
    if (localVarCredential) {
      localVarHeaders = localVarHeaders.set("x-access-token", localVarCredential);
    }
    let localVarHttpHeaderAcceptSelected = options && options.httpHeaderAccept;
    if (localVarHttpHeaderAcceptSelected === void 0) {
      const httpHeaderAccepts = [
        "application/json"
      ];
      localVarHttpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
    }
    if (localVarHttpHeaderAcceptSelected !== void 0) {
      localVarHeaders = localVarHeaders.set("Accept", localVarHttpHeaderAcceptSelected);
    }
    let localVarHttpContext = options && options.context;
    if (localVarHttpContext === void 0) {
      localVarHttpContext = new HttpContext();
    }
    let localVarTransferCache = options && options.transferCache;
    if (localVarTransferCache === void 0) {
      localVarTransferCache = true;
    }
    let responseType_ = "json";
    if (localVarHttpHeaderAcceptSelected) {
      if (localVarHttpHeaderAcceptSelected.startsWith("text")) {
        responseType_ = "text";
      } else if (this.configuration.isJsonMime(localVarHttpHeaderAcceptSelected)) {
        responseType_ = "json";
      } else {
        responseType_ = "blob";
      }
    }
    let localVarPath = `/entities/sslcertificates`;
    return this.httpClient.request("get", `${this.configuration.basePath}${localVarPath}`, {
      context: localVarHttpContext,
      params: localVarQueryParameters,
      responseType: responseType_,
      withCredentials: this.configuration.withCredentials,
      headers: localVarHeaders,
      observe,
      transferCache: localVarTransferCache,
      reportProgress
    });
  }
  provisionSslCertificate(id, observe = "body", reportProgress = false, options) {
    if (id === null || id === void 0) {
      throw new Error("Required parameter id was null or undefined when calling provisionSslCertificate.");
    }
    let localVarHeaders = this.defaultHeaders;
    let localVarCredential;
    localVarCredential = this.configuration.lookupCredential("access_token");
    if (localVarCredential) {
      localVarHeaders = localVarHeaders.set("x-access-token", localVarCredential);
    }
    let localVarHttpHeaderAcceptSelected = options && options.httpHeaderAccept;
    if (localVarHttpHeaderAcceptSelected === void 0) {
      const httpHeaderAccepts = [
        "application/json"
      ];
      localVarHttpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
    }
    if (localVarHttpHeaderAcceptSelected !== void 0) {
      localVarHeaders = localVarHeaders.set("Accept", localVarHttpHeaderAcceptSelected);
    }
    let localVarHttpContext = options && options.context;
    if (localVarHttpContext === void 0) {
      localVarHttpContext = new HttpContext();
    }
    let localVarTransferCache = options && options.transferCache;
    if (localVarTransferCache === void 0) {
      localVarTransferCache = true;
    }
    let responseType_ = "json";
    if (localVarHttpHeaderAcceptSelected) {
      if (localVarHttpHeaderAcceptSelected.startsWith("text")) {
        responseType_ = "text";
      } else if (this.configuration.isJsonMime(localVarHttpHeaderAcceptSelected)) {
        responseType_ = "json";
      } else {
        responseType_ = "blob";
      }
    }
    let localVarPath = `/entities/sslcertificates/${this.configuration.encodeParam({ name: "id", value: id, in: "path", style: "simple", explode: false, dataType: "string", dataFormat: void 0 })}/provision`;
    return this.httpClient.request("post", `${this.configuration.basePath}${localVarPath}`, {
      context: localVarHttpContext,
      responseType: responseType_,
      withCredentials: this.configuration.withCredentials,
      headers: localVarHeaders,
      observe,
      transferCache: localVarTransferCache,
      reportProgress
    });
  }
  updateSslCertificate(id, request, observe = "body", reportProgress = false, options) {
    if (id === null || id === void 0) {
      throw new Error("Required parameter id was null or undefined when calling updateSslCertificate.");
    }
    if (request === null || request === void 0) {
      throw new Error("Required parameter request was null or undefined when calling updateSslCertificate.");
    }
    let localVarHeaders = this.defaultHeaders;
    let localVarCredential;
    localVarCredential = this.configuration.lookupCredential("access_token");
    if (localVarCredential) {
      localVarHeaders = localVarHeaders.set("x-access-token", localVarCredential);
    }
    let localVarHttpHeaderAcceptSelected = options && options.httpHeaderAccept;
    if (localVarHttpHeaderAcceptSelected === void 0) {
      const httpHeaderAccepts = [
        "application/json"
      ];
      localVarHttpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
    }
    if (localVarHttpHeaderAcceptSelected !== void 0) {
      localVarHeaders = localVarHeaders.set("Accept", localVarHttpHeaderAcceptSelected);
    }
    let localVarHttpContext = options && options.context;
    if (localVarHttpContext === void 0) {
      localVarHttpContext = new HttpContext();
    }
    let localVarTransferCache = options && options.transferCache;
    if (localVarTransferCache === void 0) {
      localVarTransferCache = true;
    }
    const consumes = [
      "application/json"
    ];
    const httpContentTypeSelected = this.configuration.selectHeaderContentType(consumes);
    if (httpContentTypeSelected !== void 0) {
      localVarHeaders = localVarHeaders.set("Content-Type", httpContentTypeSelected);
    }
    let responseType_ = "json";
    if (localVarHttpHeaderAcceptSelected) {
      if (localVarHttpHeaderAcceptSelected.startsWith("text")) {
        responseType_ = "text";
      } else if (this.configuration.isJsonMime(localVarHttpHeaderAcceptSelected)) {
        responseType_ = "json";
      } else {
        responseType_ = "blob";
      }
    }
    let localVarPath = `/entities/sslcertificates/${this.configuration.encodeParam({ name: "id", value: id, in: "path", style: "simple", explode: false, dataType: "string", dataFormat: void 0 })}`;
    return this.httpClient.request("put", `${this.configuration.basePath}${localVarPath}`, {
      context: localVarHttpContext,
      body: request,
      responseType: responseType_,
      withCredentials: this.configuration.withCredentials,
      headers: localVarHeaders,
      observe,
      transferCache: localVarTransferCache,
      reportProgress
    });
  }
  validateSslCertificate(id, observe = "body", reportProgress = false, options) {
    if (id === null || id === void 0) {
      throw new Error("Required parameter id was null or undefined when calling validateSslCertificate.");
    }
    let localVarHeaders = this.defaultHeaders;
    let localVarCredential;
    localVarCredential = this.configuration.lookupCredential("access_token");
    if (localVarCredential) {
      localVarHeaders = localVarHeaders.set("x-access-token", localVarCredential);
    }
    let localVarHttpHeaderAcceptSelected = options && options.httpHeaderAccept;
    if (localVarHttpHeaderAcceptSelected === void 0) {
      const httpHeaderAccepts = [
        "application/json"
      ];
      localVarHttpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
    }
    if (localVarHttpHeaderAcceptSelected !== void 0) {
      localVarHeaders = localVarHeaders.set("Accept", localVarHttpHeaderAcceptSelected);
    }
    let localVarHttpContext = options && options.context;
    if (localVarHttpContext === void 0) {
      localVarHttpContext = new HttpContext();
    }
    let localVarTransferCache = options && options.transferCache;
    if (localVarTransferCache === void 0) {
      localVarTransferCache = true;
    }
    let responseType_ = "json";
    if (localVarHttpHeaderAcceptSelected) {
      if (localVarHttpHeaderAcceptSelected.startsWith("text")) {
        responseType_ = "text";
      } else if (this.configuration.isJsonMime(localVarHttpHeaderAcceptSelected)) {
        responseType_ = "json";
      } else {
        responseType_ = "blob";
      }
    }
    let localVarPath = `/entities/sslcertificates/${this.configuration.encodeParam({ name: "id", value: id, in: "path", style: "simple", explode: false, dataType: "string", dataFormat: void 0 })}/validate`;
    return this.httpClient.request("post", `${this.configuration.basePath}${localVarPath}`, {
      context: localVarHttpContext,
      responseType: responseType_,
      withCredentials: this.configuration.withCredentials,
      headers: localVarHeaders,
      observe,
      transferCache: localVarTransferCache,
      reportProgress
    });
  }
  static \u0275fac = function SslCertificatesService_Factory(__ngFactoryType__) {
    return new (__ngFactoryType__ || _SslCertificatesService)(\u0275\u0275inject(HttpClient), \u0275\u0275inject(BASE_PATH, 8), \u0275\u0275inject(Configuration, 8));
  };
  static \u0275prov = /* @__PURE__ */ \u0275\u0275defineInjectable({ token: _SslCertificatesService, factory: _SslCertificatesService.\u0275fac, providedIn: "root" });
};
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(SslCertificatesService, [{
    type: Injectable,
    args: [{
      providedIn: "root"
    }]
  }], () => [{ type: HttpClient }, { type: void 0, decorators: [{
    type: Optional
  }, {
    type: Inject,
    args: [BASE_PATH]
  }] }, { type: Configuration, decorators: [{
    type: Optional
  }] }], null);
})();

// src/app/api/api/stats.service.ts
var StatsService = class _StatsService {
  httpClient;
  basePath = "";
  defaultHeaders = new HttpHeaders();
  configuration = new Configuration();
  encoder;
  constructor(httpClient, basePath, configuration) {
    this.httpClient = httpClient;
    if (configuration) {
      this.configuration = configuration;
    }
    if (typeof this.configuration.basePath !== "string") {
      const firstBasePath = Array.isArray(basePath) ? basePath[0] : void 0;
      if (firstBasePath != void 0) {
        basePath = firstBasePath;
      }
      if (typeof basePath !== "string") {
        basePath = this.basePath;
      }
      this.configuration.basePath = basePath;
    }
    this.encoder = this.configuration.encoder || new CustomHttpParameterCodec();
  }
  // @ts-ignore
  addToHttpParams(httpParams, value, key) {
    if (typeof value === "object" && value instanceof Date === false) {
      httpParams = this.addToHttpParamsRecursive(httpParams, value);
    } else {
      httpParams = this.addToHttpParamsRecursive(httpParams, value, key);
    }
    return httpParams;
  }
  addToHttpParamsRecursive(httpParams, value, key) {
    if (value == null) {
      return httpParams;
    }
    if (typeof value === "object") {
      if (Array.isArray(value)) {
        value.forEach((elem) => httpParams = this.addToHttpParamsRecursive(httpParams, elem, key));
      } else if (value instanceof Date) {
        if (key != null) {
          httpParams = httpParams.append(key, value.toISOString().substring(0, 10));
        } else {
          throw Error("key may not be null if value is Date");
        }
      } else {
        Object.keys(value).forEach((k) => httpParams = this.addToHttpParamsRecursive(httpParams, value[k], key != null ? `${key}.${k}` : k));
      }
    } else if (key != null) {
      httpParams = httpParams.append(key, value);
    } else {
      throw Error("key may not be null if value is not object or array");
    }
    return httpParams;
  }
  getOutputForEntity(type, id, metric, options, observe = "body", reportProgress = false, httpOptions) {
    if (type === null || type === void 0) {
      throw new Error("Required parameter type was null or undefined when calling getOutputForEntity.");
    }
    if (id === null || id === void 0) {
      throw new Error("Required parameter id was null or undefined when calling getOutputForEntity.");
    }
    if (metric === null || metric === void 0) {
      throw new Error("Required parameter metric was null or undefined when calling getOutputForEntity.");
    }
    if (options === null || options === void 0) {
      throw new Error("Required parameter options was null or undefined when calling getOutputForEntity.");
    }
    let localVarHeaders = this.defaultHeaders;
    let localVarCredential;
    localVarCredential = this.configuration.lookupCredential("access_token");
    if (localVarCredential) {
      localVarHeaders = localVarHeaders.set("x-access-token", localVarCredential);
    }
    let localVarHttpHeaderAcceptSelected = httpOptions && httpOptions.httpHeaderAccept;
    if (localVarHttpHeaderAcceptSelected === void 0) {
      const httpHeaderAccepts = [
        "application/json"
      ];
      localVarHttpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
    }
    if (localVarHttpHeaderAcceptSelected !== void 0) {
      localVarHeaders = localVarHeaders.set("Accept", localVarHttpHeaderAcceptSelected);
    }
    let localVarHttpContext = httpOptions && httpOptions.context;
    if (localVarHttpContext === void 0) {
      localVarHttpContext = new HttpContext();
    }
    let localVarTransferCache = httpOptions && httpOptions.transferCache;
    if (localVarTransferCache === void 0) {
      localVarTransferCache = true;
    }
    const consumes = [
      "application/json"
    ];
    const httpContentTypeSelected = this.configuration.selectHeaderContentType(consumes);
    if (httpContentTypeSelected !== void 0) {
      localVarHeaders = localVarHeaders.set("Content-Type", httpContentTypeSelected);
    }
    let responseType_ = "json";
    if (localVarHttpHeaderAcceptSelected) {
      if (localVarHttpHeaderAcceptSelected.startsWith("text")) {
        responseType_ = "text";
      } else if (this.configuration.isJsonMime(localVarHttpHeaderAcceptSelected)) {
        responseType_ = "json";
      } else {
        responseType_ = "blob";
      }
    }
    let localVarPath = `/stats/entity/${this.configuration.encodeParam({ name: "type", value: type, in: "path", style: "simple", explode: false, dataType: "'client' | 'vendor' | 'distributor' | 'system' | 'user' | 'device'", dataFormat: void 0 })}/${this.configuration.encodeParam({ name: "id", value: id, in: "path", style: "simple", explode: false, dataType: "string", dataFormat: void 0 })}/${this.configuration.encodeParam({ name: "metric", value: metric, in: "path", style: "simple", explode: false, dataType: "'devices' | 'users' | 'assets' | 'companion-cameras' | 'distributors' | 'vendors' | 'clients' | 'records' | 'bytes' | 'connections' | 'minutes'", dataFormat: void 0 })}`;
    return this.httpClient.request("post", `${this.configuration.basePath}${localVarPath}`, {
      context: localVarHttpContext,
      body: options,
      responseType: responseType_,
      withCredentials: this.configuration.withCredentials,
      headers: localVarHeaders,
      observe,
      transferCache: localVarTransferCache,
      reportProgress
    });
  }
  static \u0275fac = function StatsService_Factory(__ngFactoryType__) {
    return new (__ngFactoryType__ || _StatsService)(\u0275\u0275inject(HttpClient), \u0275\u0275inject(BASE_PATH, 8), \u0275\u0275inject(Configuration, 8));
  };
  static \u0275prov = /* @__PURE__ */ \u0275\u0275defineInjectable({ token: _StatsService, factory: _StatsService.\u0275fac, providedIn: "root" });
};
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(StatsService, [{
    type: Injectable,
    args: [{
      providedIn: "root"
    }]
  }], () => [{ type: HttpClient }, { type: void 0, decorators: [{
    type: Optional
  }, {
    type: Inject,
    args: [BASE_PATH]
  }] }, { type: Configuration, decorators: [{
    type: Optional
  }] }], null);
})();

// src/app/api/api/tasks.service.ts
var TasksService = class _TasksService {
  httpClient;
  basePath = "";
  defaultHeaders = new HttpHeaders();
  configuration = new Configuration();
  encoder;
  constructor(httpClient, basePath, configuration) {
    this.httpClient = httpClient;
    if (configuration) {
      this.configuration = configuration;
    }
    if (typeof this.configuration.basePath !== "string") {
      const firstBasePath = Array.isArray(basePath) ? basePath[0] : void 0;
      if (firstBasePath != void 0) {
        basePath = firstBasePath;
      }
      if (typeof basePath !== "string") {
        basePath = this.basePath;
      }
      this.configuration.basePath = basePath;
    }
    this.encoder = this.configuration.encoder || new CustomHttpParameterCodec();
  }
  // @ts-ignore
  addToHttpParams(httpParams, value, key) {
    if (typeof value === "object" && value instanceof Date === false) {
      httpParams = this.addToHttpParamsRecursive(httpParams, value);
    } else {
      httpParams = this.addToHttpParamsRecursive(httpParams, value, key);
    }
    return httpParams;
  }
  addToHttpParamsRecursive(httpParams, value, key) {
    if (value == null) {
      return httpParams;
    }
    if (typeof value === "object") {
      if (Array.isArray(value)) {
        value.forEach((elem) => httpParams = this.addToHttpParamsRecursive(httpParams, elem, key));
      } else if (value instanceof Date) {
        if (key != null) {
          httpParams = httpParams.append(key, value.toISOString().substring(0, 10));
        } else {
          throw Error("key may not be null if value is Date");
        }
      } else {
        Object.keys(value).forEach((k) => httpParams = this.addToHttpParamsRecursive(httpParams, value[k], key != null ? `${key}.${k}` : k));
      }
    } else if (key != null) {
      httpParams = httpParams.append(key, value);
    } else {
      throw Error("key may not be null if value is not object or array");
    }
    return httpParams;
  }
  cancelTask(id, observe = "body", reportProgress = false, options) {
    if (id === null || id === void 0) {
      throw new Error("Required parameter id was null or undefined when calling cancelTask.");
    }
    let localVarHeaders = this.defaultHeaders;
    let localVarCredential;
    localVarCredential = this.configuration.lookupCredential("access_token");
    if (localVarCredential) {
      localVarHeaders = localVarHeaders.set("x-access-token", localVarCredential);
    }
    let localVarHttpHeaderAcceptSelected = options && options.httpHeaderAccept;
    if (localVarHttpHeaderAcceptSelected === void 0) {
      const httpHeaderAccepts = [
        "application/json"
      ];
      localVarHttpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
    }
    if (localVarHttpHeaderAcceptSelected !== void 0) {
      localVarHeaders = localVarHeaders.set("Accept", localVarHttpHeaderAcceptSelected);
    }
    let localVarHttpContext = options && options.context;
    if (localVarHttpContext === void 0) {
      localVarHttpContext = new HttpContext();
    }
    let localVarTransferCache = options && options.transferCache;
    if (localVarTransferCache === void 0) {
      localVarTransferCache = true;
    }
    let responseType_ = "json";
    if (localVarHttpHeaderAcceptSelected) {
      if (localVarHttpHeaderAcceptSelected.startsWith("text")) {
        responseType_ = "text";
      } else if (this.configuration.isJsonMime(localVarHttpHeaderAcceptSelected)) {
        responseType_ = "json";
      } else {
        responseType_ = "blob";
      }
    }
    let localVarPath = `/tasks/${this.configuration.encodeParam({ name: "id", value: id, in: "path", style: "simple", explode: false, dataType: "string", dataFormat: void 0 })}`;
    return this.httpClient.request("delete", `${this.configuration.basePath}${localVarPath}`, {
      context: localVarHttpContext,
      responseType: responseType_,
      withCredentials: this.configuration.withCredentials,
      headers: localVarHeaders,
      observe,
      transferCache: localVarTransferCache,
      reportProgress
    });
  }
  createTask(request, observe = "body", reportProgress = false, options) {
    if (request === null || request === void 0) {
      throw new Error("Required parameter request was null or undefined when calling createTask.");
    }
    let localVarHeaders = this.defaultHeaders;
    let localVarCredential;
    localVarCredential = this.configuration.lookupCredential("access_token");
    if (localVarCredential) {
      localVarHeaders = localVarHeaders.set("x-access-token", localVarCredential);
    }
    let localVarHttpHeaderAcceptSelected = options && options.httpHeaderAccept;
    if (localVarHttpHeaderAcceptSelected === void 0) {
      const httpHeaderAccepts = [
        "application/json"
      ];
      localVarHttpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
    }
    if (localVarHttpHeaderAcceptSelected !== void 0) {
      localVarHeaders = localVarHeaders.set("Accept", localVarHttpHeaderAcceptSelected);
    }
    let localVarHttpContext = options && options.context;
    if (localVarHttpContext === void 0) {
      localVarHttpContext = new HttpContext();
    }
    let localVarTransferCache = options && options.transferCache;
    if (localVarTransferCache === void 0) {
      localVarTransferCache = true;
    }
    const consumes = [
      "application/json"
    ];
    const httpContentTypeSelected = this.configuration.selectHeaderContentType(consumes);
    if (httpContentTypeSelected !== void 0) {
      localVarHeaders = localVarHeaders.set("Content-Type", httpContentTypeSelected);
    }
    let responseType_ = "json";
    if (localVarHttpHeaderAcceptSelected) {
      if (localVarHttpHeaderAcceptSelected.startsWith("text")) {
        responseType_ = "text";
      } else if (this.configuration.isJsonMime(localVarHttpHeaderAcceptSelected)) {
        responseType_ = "json";
      } else {
        responseType_ = "blob";
      }
    }
    let localVarPath = `/tasks`;
    return this.httpClient.request("post", `${this.configuration.basePath}${localVarPath}`, {
      context: localVarHttpContext,
      body: request,
      responseType: responseType_,
      withCredentials: this.configuration.withCredentials,
      headers: localVarHeaders,
      observe,
      transferCache: localVarTransferCache,
      reportProgress
    });
  }
  getTask(id, observe = "body", reportProgress = false, options) {
    if (id === null || id === void 0) {
      throw new Error("Required parameter id was null or undefined when calling getTask.");
    }
    let localVarHeaders = this.defaultHeaders;
    let localVarCredential;
    localVarCredential = this.configuration.lookupCredential("access_token");
    if (localVarCredential) {
      localVarHeaders = localVarHeaders.set("x-access-token", localVarCredential);
    }
    let localVarHttpHeaderAcceptSelected = options && options.httpHeaderAccept;
    if (localVarHttpHeaderAcceptSelected === void 0) {
      const httpHeaderAccepts = [
        "application/json"
      ];
      localVarHttpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
    }
    if (localVarHttpHeaderAcceptSelected !== void 0) {
      localVarHeaders = localVarHeaders.set("Accept", localVarHttpHeaderAcceptSelected);
    }
    let localVarHttpContext = options && options.context;
    if (localVarHttpContext === void 0) {
      localVarHttpContext = new HttpContext();
    }
    let localVarTransferCache = options && options.transferCache;
    if (localVarTransferCache === void 0) {
      localVarTransferCache = true;
    }
    let responseType_ = "json";
    if (localVarHttpHeaderAcceptSelected) {
      if (localVarHttpHeaderAcceptSelected.startsWith("text")) {
        responseType_ = "text";
      } else if (this.configuration.isJsonMime(localVarHttpHeaderAcceptSelected)) {
        responseType_ = "json";
      } else {
        responseType_ = "blob";
      }
    }
    let localVarPath = `/tasks/${this.configuration.encodeParam({ name: "id", value: id, in: "path", style: "simple", explode: false, dataType: "string", dataFormat: void 0 })}`;
    return this.httpClient.request("get", `${this.configuration.basePath}${localVarPath}`, {
      context: localVarHttpContext,
      responseType: responseType_,
      withCredentials: this.configuration.withCredentials,
      headers: localVarHeaders,
      observe,
      transferCache: localVarTransferCache,
      reportProgress
    });
  }
  listTasks(entity, offset, limit, sort, filter, observe = "body", reportProgress = false, options) {
    if (entity === null || entity === void 0) {
      throw new Error("Required parameter entity was null or undefined when calling listTasks.");
    }
    let localVarQueryParameters = new HttpParams({ encoder: this.encoder });
    if (entity !== void 0 && entity !== null) {
      localVarQueryParameters = this.addToHttpParams(localVarQueryParameters, entity, "entity");
    }
    if (offset !== void 0 && offset !== null) {
      localVarQueryParameters = this.addToHttpParams(localVarQueryParameters, offset, "offset");
    }
    if (limit !== void 0 && limit !== null) {
      localVarQueryParameters = this.addToHttpParams(localVarQueryParameters, limit, "limit");
    }
    if (sort !== void 0 && sort !== null) {
      localVarQueryParameters = this.addToHttpParams(localVarQueryParameters, sort, "sort");
    }
    if (filter !== void 0 && filter !== null) {
      localVarQueryParameters = this.addToHttpParams(localVarQueryParameters, filter, "filter");
    }
    let localVarHeaders = this.defaultHeaders;
    let localVarCredential;
    localVarCredential = this.configuration.lookupCredential("access_token");
    if (localVarCredential) {
      localVarHeaders = localVarHeaders.set("x-access-token", localVarCredential);
    }
    let localVarHttpHeaderAcceptSelected = options && options.httpHeaderAccept;
    if (localVarHttpHeaderAcceptSelected === void 0) {
      const httpHeaderAccepts = [
        "application/json"
      ];
      localVarHttpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
    }
    if (localVarHttpHeaderAcceptSelected !== void 0) {
      localVarHeaders = localVarHeaders.set("Accept", localVarHttpHeaderAcceptSelected);
    }
    let localVarHttpContext = options && options.context;
    if (localVarHttpContext === void 0) {
      localVarHttpContext = new HttpContext();
    }
    let localVarTransferCache = options && options.transferCache;
    if (localVarTransferCache === void 0) {
      localVarTransferCache = true;
    }
    let responseType_ = "json";
    if (localVarHttpHeaderAcceptSelected) {
      if (localVarHttpHeaderAcceptSelected.startsWith("text")) {
        responseType_ = "text";
      } else if (this.configuration.isJsonMime(localVarHttpHeaderAcceptSelected)) {
        responseType_ = "json";
      } else {
        responseType_ = "blob";
      }
    }
    let localVarPath = `/tasks`;
    return this.httpClient.request("get", `${this.configuration.basePath}${localVarPath}`, {
      context: localVarHttpContext,
      params: localVarQueryParameters,
      responseType: responseType_,
      withCredentials: this.configuration.withCredentials,
      headers: localVarHeaders,
      observe,
      transferCache: localVarTransferCache,
      reportProgress
    });
  }
  static \u0275fac = function TasksService_Factory(__ngFactoryType__) {
    return new (__ngFactoryType__ || _TasksService)(\u0275\u0275inject(HttpClient), \u0275\u0275inject(BASE_PATH, 8), \u0275\u0275inject(Configuration, 8));
  };
  static \u0275prov = /* @__PURE__ */ \u0275\u0275defineInjectable({ token: _TasksService, factory: _TasksService.\u0275fac, providedIn: "root" });
};
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(TasksService, [{
    type: Injectable,
    args: [{
      providedIn: "root"
    }]
  }], () => [{ type: HttpClient }, { type: void 0, decorators: [{
    type: Optional
  }, {
    type: Inject,
    args: [BASE_PATH]
  }] }, { type: Configuration, decorators: [{
    type: Optional
  }] }], null);
})();

// src/app/api/api/themes.service.ts
var ThemesService = class _ThemesService {
  httpClient;
  basePath = "";
  defaultHeaders = new HttpHeaders();
  configuration = new Configuration();
  encoder;
  constructor(httpClient, basePath, configuration) {
    this.httpClient = httpClient;
    if (configuration) {
      this.configuration = configuration;
    }
    if (typeof this.configuration.basePath !== "string") {
      const firstBasePath = Array.isArray(basePath) ? basePath[0] : void 0;
      if (firstBasePath != void 0) {
        basePath = firstBasePath;
      }
      if (typeof basePath !== "string") {
        basePath = this.basePath;
      }
      this.configuration.basePath = basePath;
    }
    this.encoder = this.configuration.encoder || new CustomHttpParameterCodec();
  }
  // @ts-ignore
  addToHttpParams(httpParams, value, key) {
    if (typeof value === "object" && value instanceof Date === false) {
      httpParams = this.addToHttpParamsRecursive(httpParams, value);
    } else {
      httpParams = this.addToHttpParamsRecursive(httpParams, value, key);
    }
    return httpParams;
  }
  addToHttpParamsRecursive(httpParams, value, key) {
    if (value == null) {
      return httpParams;
    }
    if (typeof value === "object") {
      if (Array.isArray(value)) {
        value.forEach((elem) => httpParams = this.addToHttpParamsRecursive(httpParams, elem, key));
      } else if (value instanceof Date) {
        if (key != null) {
          httpParams = httpParams.append(key, value.toISOString().substring(0, 10));
        } else {
          throw Error("key may not be null if value is Date");
        }
      } else {
        Object.keys(value).forEach((k) => httpParams = this.addToHttpParamsRecursive(httpParams, value[k], key != null ? `${key}.${k}` : k));
      }
    } else if (key != null) {
      httpParams = httpParams.append(key, value);
    } else {
      throw Error("key may not be null if value is not object or array");
    }
    return httpParams;
  }
  createTheme(request, observe = "body", reportProgress = false, options) {
    if (request === null || request === void 0) {
      throw new Error("Required parameter request was null or undefined when calling createTheme.");
    }
    let localVarHeaders = this.defaultHeaders;
    let localVarCredential;
    localVarCredential = this.configuration.lookupCredential("access_token");
    if (localVarCredential) {
      localVarHeaders = localVarHeaders.set("x-access-token", localVarCredential);
    }
    let localVarHttpHeaderAcceptSelected = options && options.httpHeaderAccept;
    if (localVarHttpHeaderAcceptSelected === void 0) {
      const httpHeaderAccepts = [
        "application/json"
      ];
      localVarHttpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
    }
    if (localVarHttpHeaderAcceptSelected !== void 0) {
      localVarHeaders = localVarHeaders.set("Accept", localVarHttpHeaderAcceptSelected);
    }
    let localVarHttpContext = options && options.context;
    if (localVarHttpContext === void 0) {
      localVarHttpContext = new HttpContext();
    }
    let localVarTransferCache = options && options.transferCache;
    if (localVarTransferCache === void 0) {
      localVarTransferCache = true;
    }
    const consumes = [
      "application/json"
    ];
    const httpContentTypeSelected = this.configuration.selectHeaderContentType(consumes);
    if (httpContentTypeSelected !== void 0) {
      localVarHeaders = localVarHeaders.set("Content-Type", httpContentTypeSelected);
    }
    let responseType_ = "json";
    if (localVarHttpHeaderAcceptSelected) {
      if (localVarHttpHeaderAcceptSelected.startsWith("text")) {
        responseType_ = "text";
      } else if (this.configuration.isJsonMime(localVarHttpHeaderAcceptSelected)) {
        responseType_ = "json";
      } else {
        responseType_ = "blob";
      }
    }
    let localVarPath = `/entities/themes`;
    return this.httpClient.request("post", `${this.configuration.basePath}${localVarPath}`, {
      context: localVarHttpContext,
      body: request,
      responseType: responseType_,
      withCredentials: this.configuration.withCredentials,
      headers: localVarHeaders,
      observe,
      transferCache: localVarTransferCache,
      reportProgress
    });
  }
  getTheme(id, observe = "body", reportProgress = false, options) {
    if (id === null || id === void 0) {
      throw new Error("Required parameter id was null or undefined when calling getTheme.");
    }
    let localVarHeaders = this.defaultHeaders;
    let localVarCredential;
    localVarCredential = this.configuration.lookupCredential("access_token");
    if (localVarCredential) {
      localVarHeaders = localVarHeaders.set("x-access-token", localVarCredential);
    }
    let localVarHttpHeaderAcceptSelected = options && options.httpHeaderAccept;
    if (localVarHttpHeaderAcceptSelected === void 0) {
      const httpHeaderAccepts = [
        "application/json"
      ];
      localVarHttpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
    }
    if (localVarHttpHeaderAcceptSelected !== void 0) {
      localVarHeaders = localVarHeaders.set("Accept", localVarHttpHeaderAcceptSelected);
    }
    let localVarHttpContext = options && options.context;
    if (localVarHttpContext === void 0) {
      localVarHttpContext = new HttpContext();
    }
    let localVarTransferCache = options && options.transferCache;
    if (localVarTransferCache === void 0) {
      localVarTransferCache = true;
    }
    let responseType_ = "json";
    if (localVarHttpHeaderAcceptSelected) {
      if (localVarHttpHeaderAcceptSelected.startsWith("text")) {
        responseType_ = "text";
      } else if (this.configuration.isJsonMime(localVarHttpHeaderAcceptSelected)) {
        responseType_ = "json";
      } else {
        responseType_ = "blob";
      }
    }
    let localVarPath = `/entities/themes/${this.configuration.encodeParam({ name: "id", value: id, in: "path", style: "simple", explode: false, dataType: "string", dataFormat: void 0 })}`;
    return this.httpClient.request("get", `${this.configuration.basePath}${localVarPath}`, {
      context: localVarHttpContext,
      responseType: responseType_,
      withCredentials: this.configuration.withCredentials,
      headers: localVarHeaders,
      observe,
      transferCache: localVarTransferCache,
      reportProgress
    });
  }
  getThemeForDomain(domain, observe = "body", reportProgress = false, options) {
    if (domain === null || domain === void 0) {
      throw new Error("Required parameter domain was null or undefined when calling getThemeForDomain.");
    }
    let localVarHeaders = this.defaultHeaders;
    let localVarHttpHeaderAcceptSelected = options && options.httpHeaderAccept;
    if (localVarHttpHeaderAcceptSelected === void 0) {
      const httpHeaderAccepts = [
        "application/json"
      ];
      localVarHttpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
    }
    if (localVarHttpHeaderAcceptSelected !== void 0) {
      localVarHeaders = localVarHeaders.set("Accept", localVarHttpHeaderAcceptSelected);
    }
    let localVarHttpContext = options && options.context;
    if (localVarHttpContext === void 0) {
      localVarHttpContext = new HttpContext();
    }
    let localVarTransferCache = options && options.transferCache;
    if (localVarTransferCache === void 0) {
      localVarTransferCache = true;
    }
    let responseType_ = "json";
    if (localVarHttpHeaderAcceptSelected) {
      if (localVarHttpHeaderAcceptSelected.startsWith("text")) {
        responseType_ = "text";
      } else if (this.configuration.isJsonMime(localVarHttpHeaderAcceptSelected)) {
        responseType_ = "json";
      } else {
        responseType_ = "blob";
      }
    }
    let localVarPath = `/entities/themes/domain/${this.configuration.encodeParam({ name: "domain", value: domain, in: "path", style: "simple", explode: false, dataType: "string", dataFormat: void 0 })}`;
    return this.httpClient.request("get", `${this.configuration.basePath}${localVarPath}`, {
      context: localVarHttpContext,
      responseType: responseType_,
      withCredentials: this.configuration.withCredentials,
      headers: localVarHeaders,
      observe,
      transferCache: localVarTransferCache,
      reportProgress
    });
  }
  listThemes(owner, recurse, offset, limit, sort, filter, observe = "body", reportProgress = false, options) {
    if (owner === null || owner === void 0) {
      throw new Error("Required parameter owner was null or undefined when calling listThemes.");
    }
    let localVarQueryParameters = new HttpParams({ encoder: this.encoder });
    if (owner !== void 0 && owner !== null) {
      localVarQueryParameters = this.addToHttpParams(localVarQueryParameters, owner, "owner");
    }
    if (recurse !== void 0 && recurse !== null) {
      localVarQueryParameters = this.addToHttpParams(localVarQueryParameters, recurse, "recurse");
    }
    if (offset !== void 0 && offset !== null) {
      localVarQueryParameters = this.addToHttpParams(localVarQueryParameters, offset, "offset");
    }
    if (limit !== void 0 && limit !== null) {
      localVarQueryParameters = this.addToHttpParams(localVarQueryParameters, limit, "limit");
    }
    if (sort !== void 0 && sort !== null) {
      localVarQueryParameters = this.addToHttpParams(localVarQueryParameters, sort, "sort");
    }
    if (filter !== void 0 && filter !== null) {
      localVarQueryParameters = this.addToHttpParams(localVarQueryParameters, filter, "filter");
    }
    let localVarHeaders = this.defaultHeaders;
    let localVarCredential;
    localVarCredential = this.configuration.lookupCredential("access_token");
    if (localVarCredential) {
      localVarHeaders = localVarHeaders.set("x-access-token", localVarCredential);
    }
    let localVarHttpHeaderAcceptSelected = options && options.httpHeaderAccept;
    if (localVarHttpHeaderAcceptSelected === void 0) {
      const httpHeaderAccepts = [
        "application/json"
      ];
      localVarHttpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
    }
    if (localVarHttpHeaderAcceptSelected !== void 0) {
      localVarHeaders = localVarHeaders.set("Accept", localVarHttpHeaderAcceptSelected);
    }
    let localVarHttpContext = options && options.context;
    if (localVarHttpContext === void 0) {
      localVarHttpContext = new HttpContext();
    }
    let localVarTransferCache = options && options.transferCache;
    if (localVarTransferCache === void 0) {
      localVarTransferCache = true;
    }
    let responseType_ = "json";
    if (localVarHttpHeaderAcceptSelected) {
      if (localVarHttpHeaderAcceptSelected.startsWith("text")) {
        responseType_ = "text";
      } else if (this.configuration.isJsonMime(localVarHttpHeaderAcceptSelected)) {
        responseType_ = "json";
      } else {
        responseType_ = "blob";
      }
    }
    let localVarPath = `/entities/themes`;
    return this.httpClient.request("get", `${this.configuration.basePath}${localVarPath}`, {
      context: localVarHttpContext,
      params: localVarQueryParameters,
      responseType: responseType_,
      withCredentials: this.configuration.withCredentials,
      headers: localVarHeaders,
      observe,
      transferCache: localVarTransferCache,
      reportProgress
    });
  }
  updateTheme(id, request, observe = "body", reportProgress = false, options) {
    if (id === null || id === void 0) {
      throw new Error("Required parameter id was null or undefined when calling updateTheme.");
    }
    if (request === null || request === void 0) {
      throw new Error("Required parameter request was null or undefined when calling updateTheme.");
    }
    let localVarHeaders = this.defaultHeaders;
    let localVarCredential;
    localVarCredential = this.configuration.lookupCredential("access_token");
    if (localVarCredential) {
      localVarHeaders = localVarHeaders.set("x-access-token", localVarCredential);
    }
    let localVarHttpHeaderAcceptSelected = options && options.httpHeaderAccept;
    if (localVarHttpHeaderAcceptSelected === void 0) {
      const httpHeaderAccepts = [
        "application/json"
      ];
      localVarHttpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
    }
    if (localVarHttpHeaderAcceptSelected !== void 0) {
      localVarHeaders = localVarHeaders.set("Accept", localVarHttpHeaderAcceptSelected);
    }
    let localVarHttpContext = options && options.context;
    if (localVarHttpContext === void 0) {
      localVarHttpContext = new HttpContext();
    }
    let localVarTransferCache = options && options.transferCache;
    if (localVarTransferCache === void 0) {
      localVarTransferCache = true;
    }
    const consumes = [
      "application/json"
    ];
    const httpContentTypeSelected = this.configuration.selectHeaderContentType(consumes);
    if (httpContentTypeSelected !== void 0) {
      localVarHeaders = localVarHeaders.set("Content-Type", httpContentTypeSelected);
    }
    let responseType_ = "json";
    if (localVarHttpHeaderAcceptSelected) {
      if (localVarHttpHeaderAcceptSelected.startsWith("text")) {
        responseType_ = "text";
      } else if (this.configuration.isJsonMime(localVarHttpHeaderAcceptSelected)) {
        responseType_ = "json";
      } else {
        responseType_ = "blob";
      }
    }
    let localVarPath = `/entities/themes/${this.configuration.encodeParam({ name: "id", value: id, in: "path", style: "simple", explode: false, dataType: "string", dataFormat: void 0 })}`;
    return this.httpClient.request("put", `${this.configuration.basePath}${localVarPath}`, {
      context: localVarHttpContext,
      body: request,
      responseType: responseType_,
      withCredentials: this.configuration.withCredentials,
      headers: localVarHeaders,
      observe,
      transferCache: localVarTransferCache,
      reportProgress
    });
  }
  static \u0275fac = function ThemesService_Factory(__ngFactoryType__) {
    return new (__ngFactoryType__ || _ThemesService)(\u0275\u0275inject(HttpClient), \u0275\u0275inject(BASE_PATH, 8), \u0275\u0275inject(Configuration, 8));
  };
  static \u0275prov = /* @__PURE__ */ \u0275\u0275defineInjectable({ token: _ThemesService, factory: _ThemesService.\u0275fac, providedIn: "root" });
};
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(ThemesService, [{
    type: Injectable,
    args: [{
      providedIn: "root"
    }]
  }], () => [{ type: HttpClient }, { type: void 0, decorators: [{
    type: Optional
  }, {
    type: Inject,
    args: [BASE_PATH]
  }] }, { type: Configuration, decorators: [{
    type: Optional
  }] }], null);
})();

// src/app/api/api/translate.service.ts
var TranslateService = class _TranslateService {
  httpClient;
  basePath = "";
  defaultHeaders = new HttpHeaders();
  configuration = new Configuration();
  encoder;
  constructor(httpClient, basePath, configuration) {
    this.httpClient = httpClient;
    if (configuration) {
      this.configuration = configuration;
    }
    if (typeof this.configuration.basePath !== "string") {
      const firstBasePath = Array.isArray(basePath) ? basePath[0] : void 0;
      if (firstBasePath != void 0) {
        basePath = firstBasePath;
      }
      if (typeof basePath !== "string") {
        basePath = this.basePath;
      }
      this.configuration.basePath = basePath;
    }
    this.encoder = this.configuration.encoder || new CustomHttpParameterCodec();
  }
  // @ts-ignore
  addToHttpParams(httpParams, value, key) {
    if (typeof value === "object" && value instanceof Date === false) {
      httpParams = this.addToHttpParamsRecursive(httpParams, value);
    } else {
      httpParams = this.addToHttpParamsRecursive(httpParams, value, key);
    }
    return httpParams;
  }
  addToHttpParamsRecursive(httpParams, value, key) {
    if (value == null) {
      return httpParams;
    }
    if (typeof value === "object") {
      if (Array.isArray(value)) {
        value.forEach((elem) => httpParams = this.addToHttpParamsRecursive(httpParams, elem, key));
      } else if (value instanceof Date) {
        if (key != null) {
          httpParams = httpParams.append(key, value.toISOString().substring(0, 10));
        } else {
          throw Error("key may not be null if value is Date");
        }
      } else {
        Object.keys(value).forEach((k) => httpParams = this.addToHttpParamsRecursive(httpParams, value[k], key != null ? `${key}.${k}` : k));
      }
    } else if (key != null) {
      httpParams = httpParams.append(key, value);
    } else {
      throw Error("key may not be null if value is not object or array");
    }
    return httpParams;
  }
  exportLanguage(language, observe = "body", reportProgress = false, options) {
    if (language === null || language === void 0) {
      throw new Error("Required parameter language was null or undefined when calling exportLanguage.");
    }
    let localVarHeaders = this.defaultHeaders;
    let localVarHttpHeaderAcceptSelected = options && options.httpHeaderAccept;
    if (localVarHttpHeaderAcceptSelected === void 0) {
      const httpHeaderAccepts = [
        "application/json"
      ];
      localVarHttpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
    }
    if (localVarHttpHeaderAcceptSelected !== void 0) {
      localVarHeaders = localVarHeaders.set("Accept", localVarHttpHeaderAcceptSelected);
    }
    let localVarHttpContext = options && options.context;
    if (localVarHttpContext === void 0) {
      localVarHttpContext = new HttpContext();
    }
    let localVarTransferCache = options && options.transferCache;
    if (localVarTransferCache === void 0) {
      localVarTransferCache = true;
    }
    let responseType_ = "json";
    if (localVarHttpHeaderAcceptSelected) {
      if (localVarHttpHeaderAcceptSelected.startsWith("text")) {
        responseType_ = "text";
      } else if (this.configuration.isJsonMime(localVarHttpHeaderAcceptSelected)) {
        responseType_ = "json";
      } else {
        responseType_ = "blob";
      }
    }
    let localVarPath = `/translate/${this.configuration.encodeParam({ name: "language", value: language, in: "path", style: "simple", explode: false, dataType: "string", dataFormat: void 0 })}/export`;
    return this.httpClient.request("get", `${this.configuration.basePath}${localVarPath}`, {
      context: localVarHttpContext,
      responseType: responseType_,
      withCredentials: this.configuration.withCredentials,
      headers: localVarHeaders,
      observe,
      transferCache: localVarTransferCache,
      reportProgress
    });
  }
  static \u0275fac = function TranslateService_Factory(__ngFactoryType__) {
    return new (__ngFactoryType__ || _TranslateService)(\u0275\u0275inject(HttpClient), \u0275\u0275inject(BASE_PATH, 8), \u0275\u0275inject(Configuration, 8));
  };
  static \u0275prov = /* @__PURE__ */ \u0275\u0275defineInjectable({ token: _TranslateService, factory: _TranslateService.\u0275fac, providedIn: "root" });
};
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(TranslateService, [{
    type: Injectable,
    args: [{
      providedIn: "root"
    }]
  }], () => [{ type: HttpClient }, { type: void 0, decorators: [{
    type: Optional
  }, {
    type: Inject,
    args: [BASE_PATH]
  }] }, { type: Configuration, decorators: [{
    type: Optional
  }] }], null);
})();

// src/app/api/api/userRoles.service.ts
var UserRolesService = class _UserRolesService {
  httpClient;
  basePath = "";
  defaultHeaders = new HttpHeaders();
  configuration = new Configuration();
  encoder;
  constructor(httpClient, basePath, configuration) {
    this.httpClient = httpClient;
    if (configuration) {
      this.configuration = configuration;
    }
    if (typeof this.configuration.basePath !== "string") {
      const firstBasePath = Array.isArray(basePath) ? basePath[0] : void 0;
      if (firstBasePath != void 0) {
        basePath = firstBasePath;
      }
      if (typeof basePath !== "string") {
        basePath = this.basePath;
      }
      this.configuration.basePath = basePath;
    }
    this.encoder = this.configuration.encoder || new CustomHttpParameterCodec();
  }
  // @ts-ignore
  addToHttpParams(httpParams, value, key) {
    if (typeof value === "object" && value instanceof Date === false) {
      httpParams = this.addToHttpParamsRecursive(httpParams, value);
    } else {
      httpParams = this.addToHttpParamsRecursive(httpParams, value, key);
    }
    return httpParams;
  }
  addToHttpParamsRecursive(httpParams, value, key) {
    if (value == null) {
      return httpParams;
    }
    if (typeof value === "object") {
      if (Array.isArray(value)) {
        value.forEach((elem) => httpParams = this.addToHttpParamsRecursive(httpParams, elem, key));
      } else if (value instanceof Date) {
        if (key != null) {
          httpParams = httpParams.append(key, value.toISOString().substring(0, 10));
        } else {
          throw Error("key may not be null if value is Date");
        }
      } else {
        Object.keys(value).forEach((k) => httpParams = this.addToHttpParamsRecursive(httpParams, value[k], key != null ? `${key}.${k}` : k));
      }
    } else if (key != null) {
      httpParams = httpParams.append(key, value);
    } else {
      throw Error("key may not be null if value is not object or array");
    }
    return httpParams;
  }
  createUserRole(request, observe = "body", reportProgress = false, options) {
    if (request === null || request === void 0) {
      throw new Error("Required parameter request was null or undefined when calling createUserRole.");
    }
    let localVarHeaders = this.defaultHeaders;
    let localVarCredential;
    localVarCredential = this.configuration.lookupCredential("access_token");
    if (localVarCredential) {
      localVarHeaders = localVarHeaders.set("x-access-token", localVarCredential);
    }
    let localVarHttpHeaderAcceptSelected = options && options.httpHeaderAccept;
    if (localVarHttpHeaderAcceptSelected === void 0) {
      const httpHeaderAccepts = [
        "application/json"
      ];
      localVarHttpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
    }
    if (localVarHttpHeaderAcceptSelected !== void 0) {
      localVarHeaders = localVarHeaders.set("Accept", localVarHttpHeaderAcceptSelected);
    }
    let localVarHttpContext = options && options.context;
    if (localVarHttpContext === void 0) {
      localVarHttpContext = new HttpContext();
    }
    let localVarTransferCache = options && options.transferCache;
    if (localVarTransferCache === void 0) {
      localVarTransferCache = true;
    }
    const consumes = [
      "application/json"
    ];
    const httpContentTypeSelected = this.configuration.selectHeaderContentType(consumes);
    if (httpContentTypeSelected !== void 0) {
      localVarHeaders = localVarHeaders.set("Content-Type", httpContentTypeSelected);
    }
    let responseType_ = "json";
    if (localVarHttpHeaderAcceptSelected) {
      if (localVarHttpHeaderAcceptSelected.startsWith("text")) {
        responseType_ = "text";
      } else if (this.configuration.isJsonMime(localVarHttpHeaderAcceptSelected)) {
        responseType_ = "json";
      } else {
        responseType_ = "blob";
      }
    }
    let localVarPath = `/accounts/userroles`;
    return this.httpClient.request("post", `${this.configuration.basePath}${localVarPath}`, {
      context: localVarHttpContext,
      body: request,
      responseType: responseType_,
      withCredentials: this.configuration.withCredentials,
      headers: localVarHeaders,
      observe,
      transferCache: localVarTransferCache,
      reportProgress
    });
  }
  deleteUserRole(id, observe = "body", reportProgress = false, options) {
    if (id === null || id === void 0) {
      throw new Error("Required parameter id was null or undefined when calling deleteUserRole.");
    }
    let localVarHeaders = this.defaultHeaders;
    let localVarCredential;
    localVarCredential = this.configuration.lookupCredential("access_token");
    if (localVarCredential) {
      localVarHeaders = localVarHeaders.set("x-access-token", localVarCredential);
    }
    let localVarHttpHeaderAcceptSelected = options && options.httpHeaderAccept;
    if (localVarHttpHeaderAcceptSelected === void 0) {
      const httpHeaderAccepts = [
        "application/json"
      ];
      localVarHttpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
    }
    if (localVarHttpHeaderAcceptSelected !== void 0) {
      localVarHeaders = localVarHeaders.set("Accept", localVarHttpHeaderAcceptSelected);
    }
    let localVarHttpContext = options && options.context;
    if (localVarHttpContext === void 0) {
      localVarHttpContext = new HttpContext();
    }
    let localVarTransferCache = options && options.transferCache;
    if (localVarTransferCache === void 0) {
      localVarTransferCache = true;
    }
    let responseType_ = "json";
    if (localVarHttpHeaderAcceptSelected) {
      if (localVarHttpHeaderAcceptSelected.startsWith("text")) {
        responseType_ = "text";
      } else if (this.configuration.isJsonMime(localVarHttpHeaderAcceptSelected)) {
        responseType_ = "json";
      } else {
        responseType_ = "blob";
      }
    }
    let localVarPath = `/accounts/userroles/${this.configuration.encodeParam({ name: "id", value: id, in: "path", style: "simple", explode: false, dataType: "string", dataFormat: void 0 })}`;
    return this.httpClient.request("delete", `${this.configuration.basePath}${localVarPath}`, {
      context: localVarHttpContext,
      responseType: responseType_,
      withCredentials: this.configuration.withCredentials,
      headers: localVarHeaders,
      observe,
      transferCache: localVarTransferCache,
      reportProgress
    });
  }
  getUserRole(id, observe = "body", reportProgress = false, options) {
    if (id === null || id === void 0) {
      throw new Error("Required parameter id was null or undefined when calling getUserRole.");
    }
    let localVarHeaders = this.defaultHeaders;
    let localVarCredential;
    localVarCredential = this.configuration.lookupCredential("access_token");
    if (localVarCredential) {
      localVarHeaders = localVarHeaders.set("x-access-token", localVarCredential);
    }
    let localVarHttpHeaderAcceptSelected = options && options.httpHeaderAccept;
    if (localVarHttpHeaderAcceptSelected === void 0) {
      const httpHeaderAccepts = [
        "application/json"
      ];
      localVarHttpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
    }
    if (localVarHttpHeaderAcceptSelected !== void 0) {
      localVarHeaders = localVarHeaders.set("Accept", localVarHttpHeaderAcceptSelected);
    }
    let localVarHttpContext = options && options.context;
    if (localVarHttpContext === void 0) {
      localVarHttpContext = new HttpContext();
    }
    let localVarTransferCache = options && options.transferCache;
    if (localVarTransferCache === void 0) {
      localVarTransferCache = true;
    }
    let responseType_ = "json";
    if (localVarHttpHeaderAcceptSelected) {
      if (localVarHttpHeaderAcceptSelected.startsWith("text")) {
        responseType_ = "text";
      } else if (this.configuration.isJsonMime(localVarHttpHeaderAcceptSelected)) {
        responseType_ = "json";
      } else {
        responseType_ = "blob";
      }
    }
    let localVarPath = `/accounts/userroles/${this.configuration.encodeParam({ name: "id", value: id, in: "path", style: "simple", explode: false, dataType: "string", dataFormat: void 0 })}`;
    return this.httpClient.request("get", `${this.configuration.basePath}${localVarPath}`, {
      context: localVarHttpContext,
      responseType: responseType_,
      withCredentials: this.configuration.withCredentials,
      headers: localVarHeaders,
      observe,
      transferCache: localVarTransferCache,
      reportProgress
    });
  }
  listUserRoles(owner, offset, limit, sort, filter, observe = "body", reportProgress = false, options) {
    if (owner === null || owner === void 0) {
      throw new Error("Required parameter owner was null or undefined when calling listUserRoles.");
    }
    let localVarQueryParameters = new HttpParams({ encoder: this.encoder });
    if (owner !== void 0 && owner !== null) {
      localVarQueryParameters = this.addToHttpParams(localVarQueryParameters, owner, "owner");
    }
    if (offset !== void 0 && offset !== null) {
      localVarQueryParameters = this.addToHttpParams(localVarQueryParameters, offset, "offset");
    }
    if (limit !== void 0 && limit !== null) {
      localVarQueryParameters = this.addToHttpParams(localVarQueryParameters, limit, "limit");
    }
    if (sort !== void 0 && sort !== null) {
      localVarQueryParameters = this.addToHttpParams(localVarQueryParameters, sort, "sort");
    }
    if (filter !== void 0 && filter !== null) {
      localVarQueryParameters = this.addToHttpParams(localVarQueryParameters, filter, "filter");
    }
    let localVarHeaders = this.defaultHeaders;
    let localVarCredential;
    localVarCredential = this.configuration.lookupCredential("access_token");
    if (localVarCredential) {
      localVarHeaders = localVarHeaders.set("x-access-token", localVarCredential);
    }
    let localVarHttpHeaderAcceptSelected = options && options.httpHeaderAccept;
    if (localVarHttpHeaderAcceptSelected === void 0) {
      const httpHeaderAccepts = [
        "application/json"
      ];
      localVarHttpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
    }
    if (localVarHttpHeaderAcceptSelected !== void 0) {
      localVarHeaders = localVarHeaders.set("Accept", localVarHttpHeaderAcceptSelected);
    }
    let localVarHttpContext = options && options.context;
    if (localVarHttpContext === void 0) {
      localVarHttpContext = new HttpContext();
    }
    let localVarTransferCache = options && options.transferCache;
    if (localVarTransferCache === void 0) {
      localVarTransferCache = true;
    }
    let responseType_ = "json";
    if (localVarHttpHeaderAcceptSelected) {
      if (localVarHttpHeaderAcceptSelected.startsWith("text")) {
        responseType_ = "text";
      } else if (this.configuration.isJsonMime(localVarHttpHeaderAcceptSelected)) {
        responseType_ = "json";
      } else {
        responseType_ = "blob";
      }
    }
    let localVarPath = `/accounts/userroles`;
    return this.httpClient.request("get", `${this.configuration.basePath}${localVarPath}`, {
      context: localVarHttpContext,
      params: localVarQueryParameters,
      responseType: responseType_,
      withCredentials: this.configuration.withCredentials,
      headers: localVarHeaders,
      observe,
      transferCache: localVarTransferCache,
      reportProgress
    });
  }
  updateUserRole(id, request, observe = "body", reportProgress = false, options) {
    if (id === null || id === void 0) {
      throw new Error("Required parameter id was null or undefined when calling updateUserRole.");
    }
    if (request === null || request === void 0) {
      throw new Error("Required parameter request was null or undefined when calling updateUserRole.");
    }
    let localVarHeaders = this.defaultHeaders;
    let localVarCredential;
    localVarCredential = this.configuration.lookupCredential("access_token");
    if (localVarCredential) {
      localVarHeaders = localVarHeaders.set("x-access-token", localVarCredential);
    }
    let localVarHttpHeaderAcceptSelected = options && options.httpHeaderAccept;
    if (localVarHttpHeaderAcceptSelected === void 0) {
      const httpHeaderAccepts = [
        "application/json"
      ];
      localVarHttpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
    }
    if (localVarHttpHeaderAcceptSelected !== void 0) {
      localVarHeaders = localVarHeaders.set("Accept", localVarHttpHeaderAcceptSelected);
    }
    let localVarHttpContext = options && options.context;
    if (localVarHttpContext === void 0) {
      localVarHttpContext = new HttpContext();
    }
    let localVarTransferCache = options && options.transferCache;
    if (localVarTransferCache === void 0) {
      localVarTransferCache = true;
    }
    const consumes = [
      "application/json"
    ];
    const httpContentTypeSelected = this.configuration.selectHeaderContentType(consumes);
    if (httpContentTypeSelected !== void 0) {
      localVarHeaders = localVarHeaders.set("Content-Type", httpContentTypeSelected);
    }
    let responseType_ = "json";
    if (localVarHttpHeaderAcceptSelected) {
      if (localVarHttpHeaderAcceptSelected.startsWith("text")) {
        responseType_ = "text";
      } else if (this.configuration.isJsonMime(localVarHttpHeaderAcceptSelected)) {
        responseType_ = "json";
      } else {
        responseType_ = "blob";
      }
    }
    let localVarPath = `/accounts/userroles/${this.configuration.encodeParam({ name: "id", value: id, in: "path", style: "simple", explode: false, dataType: "string", dataFormat: void 0 })}`;
    return this.httpClient.request("put", `${this.configuration.basePath}${localVarPath}`, {
      context: localVarHttpContext,
      body: request,
      responseType: responseType_,
      withCredentials: this.configuration.withCredentials,
      headers: localVarHeaders,
      observe,
      transferCache: localVarTransferCache,
      reportProgress
    });
  }
  static \u0275fac = function UserRolesService_Factory(__ngFactoryType__) {
    return new (__ngFactoryType__ || _UserRolesService)(\u0275\u0275inject(HttpClient), \u0275\u0275inject(BASE_PATH, 8), \u0275\u0275inject(Configuration, 8));
  };
  static \u0275prov = /* @__PURE__ */ \u0275\u0275defineInjectable({ token: _UserRolesService, factory: _UserRolesService.\u0275fac, providedIn: "root" });
};
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(UserRolesService, [{
    type: Injectable,
    args: [{
      providedIn: "root"
    }]
  }], () => [{ type: HttpClient }, { type: void 0, decorators: [{
    type: Optional
  }, {
    type: Inject,
    args: [BASE_PATH]
  }] }, { type: Configuration, decorators: [{
    type: Optional
  }] }], null);
})();

// src/app/api/api/users.service.ts
var UsersService = class _UsersService {
  httpClient;
  basePath = "";
  defaultHeaders = new HttpHeaders();
  configuration = new Configuration();
  encoder;
  constructor(httpClient, basePath, configuration) {
    this.httpClient = httpClient;
    if (configuration) {
      this.configuration = configuration;
    }
    if (typeof this.configuration.basePath !== "string") {
      const firstBasePath = Array.isArray(basePath) ? basePath[0] : void 0;
      if (firstBasePath != void 0) {
        basePath = firstBasePath;
      }
      if (typeof basePath !== "string") {
        basePath = this.basePath;
      }
      this.configuration.basePath = basePath;
    }
    this.encoder = this.configuration.encoder || new CustomHttpParameterCodec();
  }
  // @ts-ignore
  addToHttpParams(httpParams, value, key) {
    if (typeof value === "object" && value instanceof Date === false) {
      httpParams = this.addToHttpParamsRecursive(httpParams, value);
    } else {
      httpParams = this.addToHttpParamsRecursive(httpParams, value, key);
    }
    return httpParams;
  }
  addToHttpParamsRecursive(httpParams, value, key) {
    if (value == null) {
      return httpParams;
    }
    if (typeof value === "object") {
      if (Array.isArray(value)) {
        value.forEach((elem) => httpParams = this.addToHttpParamsRecursive(httpParams, elem, key));
      } else if (value instanceof Date) {
        if (key != null) {
          httpParams = httpParams.append(key, value.toISOString().substring(0, 10));
        } else {
          throw Error("key may not be null if value is Date");
        }
      } else {
        Object.keys(value).forEach((k) => httpParams = this.addToHttpParamsRecursive(httpParams, value[k], key != null ? `${key}.${k}` : k));
      }
    } else if (key != null) {
      httpParams = httpParams.append(key, value);
    } else {
      throw Error("key may not be null if value is not object or array");
    }
    return httpParams;
  }
  createApiKey(id, request, observe = "body", reportProgress = false, options) {
    if (id === null || id === void 0) {
      throw new Error("Required parameter id was null or undefined when calling createApiKey.");
    }
    if (request === null || request === void 0) {
      throw new Error("Required parameter request was null or undefined when calling createApiKey.");
    }
    let localVarHeaders = this.defaultHeaders;
    let localVarCredential;
    localVarCredential = this.configuration.lookupCredential("access_token");
    if (localVarCredential) {
      localVarHeaders = localVarHeaders.set("x-access-token", localVarCredential);
    }
    let localVarHttpHeaderAcceptSelected = options && options.httpHeaderAccept;
    if (localVarHttpHeaderAcceptSelected === void 0) {
      const httpHeaderAccepts = [
        "application/json"
      ];
      localVarHttpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
    }
    if (localVarHttpHeaderAcceptSelected !== void 0) {
      localVarHeaders = localVarHeaders.set("Accept", localVarHttpHeaderAcceptSelected);
    }
    let localVarHttpContext = options && options.context;
    if (localVarHttpContext === void 0) {
      localVarHttpContext = new HttpContext();
    }
    let localVarTransferCache = options && options.transferCache;
    if (localVarTransferCache === void 0) {
      localVarTransferCache = true;
    }
    const consumes = [
      "application/json"
    ];
    const httpContentTypeSelected = this.configuration.selectHeaderContentType(consumes);
    if (httpContentTypeSelected !== void 0) {
      localVarHeaders = localVarHeaders.set("Content-Type", httpContentTypeSelected);
    }
    let responseType_ = "json";
    if (localVarHttpHeaderAcceptSelected) {
      if (localVarHttpHeaderAcceptSelected.startsWith("text")) {
        responseType_ = "text";
      } else if (this.configuration.isJsonMime(localVarHttpHeaderAcceptSelected)) {
        responseType_ = "json";
      } else {
        responseType_ = "blob";
      }
    }
    let localVarPath = `/accounts/users/${this.configuration.encodeParam({ name: "id", value: id, in: "path", style: "simple", explode: false, dataType: "string", dataFormat: void 0 })}/apikeys`;
    return this.httpClient.request("post", `${this.configuration.basePath}${localVarPath}`, {
      context: localVarHttpContext,
      body: request,
      responseType: responseType_,
      withCredentials: this.configuration.withCredentials,
      headers: localVarHeaders,
      observe,
      transferCache: localVarTransferCache,
      reportProgress
    });
  }
  createUser(request, observe = "body", reportProgress = false, options) {
    if (request === null || request === void 0) {
      throw new Error("Required parameter request was null or undefined when calling createUser.");
    }
    let localVarHeaders = this.defaultHeaders;
    let localVarCredential;
    localVarCredential = this.configuration.lookupCredential("access_token");
    if (localVarCredential) {
      localVarHeaders = localVarHeaders.set("x-access-token", localVarCredential);
    }
    let localVarHttpHeaderAcceptSelected = options && options.httpHeaderAccept;
    if (localVarHttpHeaderAcceptSelected === void 0) {
      const httpHeaderAccepts = [
        "application/json"
      ];
      localVarHttpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
    }
    if (localVarHttpHeaderAcceptSelected !== void 0) {
      localVarHeaders = localVarHeaders.set("Accept", localVarHttpHeaderAcceptSelected);
    }
    let localVarHttpContext = options && options.context;
    if (localVarHttpContext === void 0) {
      localVarHttpContext = new HttpContext();
    }
    let localVarTransferCache = options && options.transferCache;
    if (localVarTransferCache === void 0) {
      localVarTransferCache = true;
    }
    const consumes = [
      "application/json"
    ];
    const httpContentTypeSelected = this.configuration.selectHeaderContentType(consumes);
    if (httpContentTypeSelected !== void 0) {
      localVarHeaders = localVarHeaders.set("Content-Type", httpContentTypeSelected);
    }
    let responseType_ = "json";
    if (localVarHttpHeaderAcceptSelected) {
      if (localVarHttpHeaderAcceptSelected.startsWith("text")) {
        responseType_ = "text";
      } else if (this.configuration.isJsonMime(localVarHttpHeaderAcceptSelected)) {
        responseType_ = "json";
      } else {
        responseType_ = "blob";
      }
    }
    let localVarPath = `/accounts/users`;
    return this.httpClient.request("post", `${this.configuration.basePath}${localVarPath}`, {
      context: localVarHttpContext,
      body: request,
      responseType: responseType_,
      withCredentials: this.configuration.withCredentials,
      headers: localVarHeaders,
      observe,
      transferCache: localVarTransferCache,
      reportProgress
    });
  }
  deleteApiKey(id, keyid, observe = "body", reportProgress = false, options) {
    if (id === null || id === void 0) {
      throw new Error("Required parameter id was null or undefined when calling deleteApiKey.");
    }
    if (keyid === null || keyid === void 0) {
      throw new Error("Required parameter keyid was null or undefined when calling deleteApiKey.");
    }
    let localVarHeaders = this.defaultHeaders;
    let localVarCredential;
    localVarCredential = this.configuration.lookupCredential("access_token");
    if (localVarCredential) {
      localVarHeaders = localVarHeaders.set("x-access-token", localVarCredential);
    }
    let localVarHttpHeaderAcceptSelected = options && options.httpHeaderAccept;
    if (localVarHttpHeaderAcceptSelected === void 0) {
      const httpHeaderAccepts = [
        "application/json"
      ];
      localVarHttpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
    }
    if (localVarHttpHeaderAcceptSelected !== void 0) {
      localVarHeaders = localVarHeaders.set("Accept", localVarHttpHeaderAcceptSelected);
    }
    let localVarHttpContext = options && options.context;
    if (localVarHttpContext === void 0) {
      localVarHttpContext = new HttpContext();
    }
    let localVarTransferCache = options && options.transferCache;
    if (localVarTransferCache === void 0) {
      localVarTransferCache = true;
    }
    let responseType_ = "json";
    if (localVarHttpHeaderAcceptSelected) {
      if (localVarHttpHeaderAcceptSelected.startsWith("text")) {
        responseType_ = "text";
      } else if (this.configuration.isJsonMime(localVarHttpHeaderAcceptSelected)) {
        responseType_ = "json";
      } else {
        responseType_ = "blob";
      }
    }
    let localVarPath = `/accounts/users/${this.configuration.encodeParam({ name: "id", value: id, in: "path", style: "simple", explode: false, dataType: "string", dataFormat: void 0 })}/apikeys/${this.configuration.encodeParam({ name: "keyid", value: keyid, in: "path", style: "simple", explode: false, dataType: "string", dataFormat: void 0 })}`;
    return this.httpClient.request("delete", `${this.configuration.basePath}${localVarPath}`, {
      context: localVarHttpContext,
      responseType: responseType_,
      withCredentials: this.configuration.withCredentials,
      headers: localVarHeaders,
      observe,
      transferCache: localVarTransferCache,
      reportProgress
    });
  }
  deleteOTPMethod(id, method, observe = "body", reportProgress = false, options) {
    if (id === null || id === void 0) {
      throw new Error("Required parameter id was null or undefined when calling deleteOTPMethod.");
    }
    if (method === null || method === void 0) {
      throw new Error("Required parameter method was null or undefined when calling deleteOTPMethod.");
    }
    let localVarHeaders = this.defaultHeaders;
    let localVarCredential;
    localVarCredential = this.configuration.lookupCredential("access_token");
    if (localVarCredential) {
      localVarHeaders = localVarHeaders.set("x-access-token", localVarCredential);
    }
    let localVarHttpHeaderAcceptSelected = options && options.httpHeaderAccept;
    if (localVarHttpHeaderAcceptSelected === void 0) {
      const httpHeaderAccepts = [
        "application/json"
      ];
      localVarHttpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
    }
    if (localVarHttpHeaderAcceptSelected !== void 0) {
      localVarHeaders = localVarHeaders.set("Accept", localVarHttpHeaderAcceptSelected);
    }
    let localVarHttpContext = options && options.context;
    if (localVarHttpContext === void 0) {
      localVarHttpContext = new HttpContext();
    }
    let localVarTransferCache = options && options.transferCache;
    if (localVarTransferCache === void 0) {
      localVarTransferCache = true;
    }
    let responseType_ = "json";
    if (localVarHttpHeaderAcceptSelected) {
      if (localVarHttpHeaderAcceptSelected.startsWith("text")) {
        responseType_ = "text";
      } else if (this.configuration.isJsonMime(localVarHttpHeaderAcceptSelected)) {
        responseType_ = "json";
      } else {
        responseType_ = "blob";
      }
    }
    let localVarPath = `/accounts/users/${this.configuration.encodeParam({ name: "id", value: id, in: "path", style: "simple", explode: false, dataType: "string", dataFormat: void 0 })}/otp/${this.configuration.encodeParam({ name: "method", value: method, in: "path", style: "simple", explode: false, dataType: "string", dataFormat: void 0 })}`;
    return this.httpClient.request("delete", `${this.configuration.basePath}${localVarPath}`, {
      context: localVarHttpContext,
      responseType: responseType_,
      withCredentials: this.configuration.withCredentials,
      headers: localVarHeaders,
      observe,
      transferCache: localVarTransferCache,
      reportProgress
    });
  }
  deleteUserAvatar(id, observe = "body", reportProgress = false, options) {
    if (id === null || id === void 0) {
      throw new Error("Required parameter id was null or undefined when calling deleteUserAvatar.");
    }
    let localVarHeaders = this.defaultHeaders;
    let localVarCredential;
    localVarCredential = this.configuration.lookupCredential("access_token");
    if (localVarCredential) {
      localVarHeaders = localVarHeaders.set("x-access-token", localVarCredential);
    }
    let localVarHttpHeaderAcceptSelected = options && options.httpHeaderAccept;
    if (localVarHttpHeaderAcceptSelected === void 0) {
      const httpHeaderAccepts = [];
      localVarHttpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
    }
    if (localVarHttpHeaderAcceptSelected !== void 0) {
      localVarHeaders = localVarHeaders.set("Accept", localVarHttpHeaderAcceptSelected);
    }
    let localVarHttpContext = options && options.context;
    if (localVarHttpContext === void 0) {
      localVarHttpContext = new HttpContext();
    }
    let localVarTransferCache = options && options.transferCache;
    if (localVarTransferCache === void 0) {
      localVarTransferCache = true;
    }
    let responseType_ = "json";
    if (localVarHttpHeaderAcceptSelected) {
      if (localVarHttpHeaderAcceptSelected.startsWith("text")) {
        responseType_ = "text";
      } else if (this.configuration.isJsonMime(localVarHttpHeaderAcceptSelected)) {
        responseType_ = "json";
      } else {
        responseType_ = "blob";
      }
    }
    let localVarPath = `/accounts/users/${this.configuration.encodeParam({ name: "id", value: id, in: "path", style: "simple", explode: false, dataType: "string", dataFormat: void 0 })}/avatar`;
    return this.httpClient.request("delete", `${this.configuration.basePath}${localVarPath}`, {
      context: localVarHttpContext,
      responseType: responseType_,
      withCredentials: this.configuration.withCredentials,
      headers: localVarHeaders,
      observe,
      transferCache: localVarTransferCache,
      reportProgress
    });
  }
  getUser(id, observe = "body", reportProgress = false, options) {
    if (id === null || id === void 0) {
      throw new Error("Required parameter id was null or undefined when calling getUser.");
    }
    let localVarHeaders = this.defaultHeaders;
    let localVarCredential;
    localVarCredential = this.configuration.lookupCredential("access_token");
    if (localVarCredential) {
      localVarHeaders = localVarHeaders.set("x-access-token", localVarCredential);
    }
    let localVarHttpHeaderAcceptSelected = options && options.httpHeaderAccept;
    if (localVarHttpHeaderAcceptSelected === void 0) {
      const httpHeaderAccepts = [
        "application/json"
      ];
      localVarHttpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
    }
    if (localVarHttpHeaderAcceptSelected !== void 0) {
      localVarHeaders = localVarHeaders.set("Accept", localVarHttpHeaderAcceptSelected);
    }
    let localVarHttpContext = options && options.context;
    if (localVarHttpContext === void 0) {
      localVarHttpContext = new HttpContext();
    }
    let localVarTransferCache = options && options.transferCache;
    if (localVarTransferCache === void 0) {
      localVarTransferCache = true;
    }
    let responseType_ = "json";
    if (localVarHttpHeaderAcceptSelected) {
      if (localVarHttpHeaderAcceptSelected.startsWith("text")) {
        responseType_ = "text";
      } else if (this.configuration.isJsonMime(localVarHttpHeaderAcceptSelected)) {
        responseType_ = "json";
      } else {
        responseType_ = "blob";
      }
    }
    let localVarPath = `/accounts/users/${this.configuration.encodeParam({ name: "id", value: id, in: "path", style: "simple", explode: false, dataType: "string", dataFormat: void 0 })}`;
    return this.httpClient.request("get", `${this.configuration.basePath}${localVarPath}`, {
      context: localVarHttpContext,
      responseType: responseType_,
      withCredentials: this.configuration.withCredentials,
      headers: localVarHeaders,
      observe,
      transferCache: localVarTransferCache,
      reportProgress
    });
  }
  getUserAvatar(id, observe = "body", reportProgress = false, options) {
    if (id === null || id === void 0) {
      throw new Error("Required parameter id was null or undefined when calling getUserAvatar.");
    }
    let localVarHeaders = this.defaultHeaders;
    let localVarHttpHeaderAcceptSelected = options && options.httpHeaderAccept;
    if (localVarHttpHeaderAcceptSelected === void 0) {
      const httpHeaderAccepts = [
        "application/json"
      ];
      localVarHttpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
    }
    if (localVarHttpHeaderAcceptSelected !== void 0) {
      localVarHeaders = localVarHeaders.set("Accept", localVarHttpHeaderAcceptSelected);
    }
    let localVarHttpContext = options && options.context;
    if (localVarHttpContext === void 0) {
      localVarHttpContext = new HttpContext();
    }
    let localVarTransferCache = options && options.transferCache;
    if (localVarTransferCache === void 0) {
      localVarTransferCache = true;
    }
    let responseType_ = "json";
    if (localVarHttpHeaderAcceptSelected) {
      if (localVarHttpHeaderAcceptSelected.startsWith("text")) {
        responseType_ = "text";
      } else if (this.configuration.isJsonMime(localVarHttpHeaderAcceptSelected)) {
        responseType_ = "json";
      } else {
        responseType_ = "blob";
      }
    }
    let localVarPath = `/accounts/users/${this.configuration.encodeParam({ name: "id", value: id, in: "path", style: "simple", explode: false, dataType: "string", dataFormat: void 0 })}/avatar`;
    return this.httpClient.request("get", `${this.configuration.basePath}${localVarPath}`, {
      context: localVarHttpContext,
      responseType: responseType_,
      withCredentials: this.configuration.withCredentials,
      headers: localVarHeaders,
      observe,
      transferCache: localVarTransferCache,
      reportProgress
    });
  }
  getUserPolicies(id, observe = "body", reportProgress = false, options) {
    if (id === null || id === void 0) {
      throw new Error("Required parameter id was null or undefined when calling getUserPolicies.");
    }
    let localVarHeaders = this.defaultHeaders;
    let localVarCredential;
    localVarCredential = this.configuration.lookupCredential("access_token");
    if (localVarCredential) {
      localVarHeaders = localVarHeaders.set("x-access-token", localVarCredential);
    }
    let localVarHttpHeaderAcceptSelected = options && options.httpHeaderAccept;
    if (localVarHttpHeaderAcceptSelected === void 0) {
      const httpHeaderAccepts = [
        "application/json"
      ];
      localVarHttpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
    }
    if (localVarHttpHeaderAcceptSelected !== void 0) {
      localVarHeaders = localVarHeaders.set("Accept", localVarHttpHeaderAcceptSelected);
    }
    let localVarHttpContext = options && options.context;
    if (localVarHttpContext === void 0) {
      localVarHttpContext = new HttpContext();
    }
    let localVarTransferCache = options && options.transferCache;
    if (localVarTransferCache === void 0) {
      localVarTransferCache = true;
    }
    let responseType_ = "json";
    if (localVarHttpHeaderAcceptSelected) {
      if (localVarHttpHeaderAcceptSelected.startsWith("text")) {
        responseType_ = "text";
      } else if (this.configuration.isJsonMime(localVarHttpHeaderAcceptSelected)) {
        responseType_ = "json";
      } else {
        responseType_ = "blob";
      }
    }
    let localVarPath = `/accounts/users/${this.configuration.encodeParam({ name: "id", value: id, in: "path", style: "simple", explode: false, dataType: "string", dataFormat: void 0 })}/policies`;
    return this.httpClient.request("get", `${this.configuration.basePath}${localVarPath}`, {
      context: localVarHttpContext,
      responseType: responseType_,
      withCredentials: this.configuration.withCredentials,
      headers: localVarHeaders,
      observe,
      transferCache: localVarTransferCache,
      reportProgress
    });
  }
  listUsers(owner, offset, limit, sort, filter, observe = "body", reportProgress = false, options) {
    if (owner === null || owner === void 0) {
      throw new Error("Required parameter owner was null or undefined when calling listUsers.");
    }
    let localVarQueryParameters = new HttpParams({ encoder: this.encoder });
    if (owner !== void 0 && owner !== null) {
      localVarQueryParameters = this.addToHttpParams(localVarQueryParameters, owner, "owner");
    }
    if (offset !== void 0 && offset !== null) {
      localVarQueryParameters = this.addToHttpParams(localVarQueryParameters, offset, "offset");
    }
    if (limit !== void 0 && limit !== null) {
      localVarQueryParameters = this.addToHttpParams(localVarQueryParameters, limit, "limit");
    }
    if (sort !== void 0 && sort !== null) {
      localVarQueryParameters = this.addToHttpParams(localVarQueryParameters, sort, "sort");
    }
    if (filter !== void 0 && filter !== null) {
      localVarQueryParameters = this.addToHttpParams(localVarQueryParameters, filter, "filter");
    }
    let localVarHeaders = this.defaultHeaders;
    let localVarCredential;
    localVarCredential = this.configuration.lookupCredential("access_token");
    if (localVarCredential) {
      localVarHeaders = localVarHeaders.set("x-access-token", localVarCredential);
    }
    let localVarHttpHeaderAcceptSelected = options && options.httpHeaderAccept;
    if (localVarHttpHeaderAcceptSelected === void 0) {
      const httpHeaderAccepts = [
        "application/json"
      ];
      localVarHttpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
    }
    if (localVarHttpHeaderAcceptSelected !== void 0) {
      localVarHeaders = localVarHeaders.set("Accept", localVarHttpHeaderAcceptSelected);
    }
    let localVarHttpContext = options && options.context;
    if (localVarHttpContext === void 0) {
      localVarHttpContext = new HttpContext();
    }
    let localVarTransferCache = options && options.transferCache;
    if (localVarTransferCache === void 0) {
      localVarTransferCache = true;
    }
    let responseType_ = "json";
    if (localVarHttpHeaderAcceptSelected) {
      if (localVarHttpHeaderAcceptSelected.startsWith("text")) {
        responseType_ = "text";
      } else if (this.configuration.isJsonMime(localVarHttpHeaderAcceptSelected)) {
        responseType_ = "json";
      } else {
        responseType_ = "blob";
      }
    }
    let localVarPath = `/accounts/users`;
    return this.httpClient.request("get", `${this.configuration.basePath}${localVarPath}`, {
      context: localVarHttpContext,
      params: localVarQueryParameters,
      responseType: responseType_,
      withCredentials: this.configuration.withCredentials,
      headers: localVarHeaders,
      observe,
      transferCache: localVarTransferCache,
      reportProgress
    });
  }
  resetUser(id, request, observe = "body", reportProgress = false, options) {
    if (id === null || id === void 0) {
      throw new Error("Required parameter id was null or undefined when calling resetUser.");
    }
    if (request === null || request === void 0) {
      throw new Error("Required parameter request was null or undefined when calling resetUser.");
    }
    let localVarHeaders = this.defaultHeaders;
    let localVarCredential;
    localVarCredential = this.configuration.lookupCredential("access_token");
    if (localVarCredential) {
      localVarHeaders = localVarHeaders.set("x-access-token", localVarCredential);
    }
    let localVarHttpHeaderAcceptSelected = options && options.httpHeaderAccept;
    if (localVarHttpHeaderAcceptSelected === void 0) {
      const httpHeaderAccepts = [
        "application/json"
      ];
      localVarHttpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
    }
    if (localVarHttpHeaderAcceptSelected !== void 0) {
      localVarHeaders = localVarHeaders.set("Accept", localVarHttpHeaderAcceptSelected);
    }
    let localVarHttpContext = options && options.context;
    if (localVarHttpContext === void 0) {
      localVarHttpContext = new HttpContext();
    }
    let localVarTransferCache = options && options.transferCache;
    if (localVarTransferCache === void 0) {
      localVarTransferCache = true;
    }
    const consumes = [
      "application/json"
    ];
    const httpContentTypeSelected = this.configuration.selectHeaderContentType(consumes);
    if (httpContentTypeSelected !== void 0) {
      localVarHeaders = localVarHeaders.set("Content-Type", httpContentTypeSelected);
    }
    let responseType_ = "json";
    if (localVarHttpHeaderAcceptSelected) {
      if (localVarHttpHeaderAcceptSelected.startsWith("text")) {
        responseType_ = "text";
      } else if (this.configuration.isJsonMime(localVarHttpHeaderAcceptSelected)) {
        responseType_ = "json";
      } else {
        responseType_ = "blob";
      }
    }
    let localVarPath = `/accounts/users/${this.configuration.encodeParam({ name: "id", value: id, in: "path", style: "simple", explode: false, dataType: "string", dataFormat: void 0 })}/reset`;
    return this.httpClient.request("put", `${this.configuration.basePath}${localVarPath}`, {
      context: localVarHttpContext,
      body: request,
      responseType: responseType_,
      withCredentials: this.configuration.withCredentials,
      headers: localVarHeaders,
      observe,
      transferCache: localVarTransferCache,
      reportProgress
    });
  }
  updateUser(id, request, observe = "body", reportProgress = false, options) {
    if (id === null || id === void 0) {
      throw new Error("Required parameter id was null or undefined when calling updateUser.");
    }
    if (request === null || request === void 0) {
      throw new Error("Required parameter request was null or undefined when calling updateUser.");
    }
    let localVarHeaders = this.defaultHeaders;
    let localVarCredential;
    localVarCredential = this.configuration.lookupCredential("access_token");
    if (localVarCredential) {
      localVarHeaders = localVarHeaders.set("x-access-token", localVarCredential);
    }
    let localVarHttpHeaderAcceptSelected = options && options.httpHeaderAccept;
    if (localVarHttpHeaderAcceptSelected === void 0) {
      const httpHeaderAccepts = [
        "application/json"
      ];
      localVarHttpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
    }
    if (localVarHttpHeaderAcceptSelected !== void 0) {
      localVarHeaders = localVarHeaders.set("Accept", localVarHttpHeaderAcceptSelected);
    }
    let localVarHttpContext = options && options.context;
    if (localVarHttpContext === void 0) {
      localVarHttpContext = new HttpContext();
    }
    let localVarTransferCache = options && options.transferCache;
    if (localVarTransferCache === void 0) {
      localVarTransferCache = true;
    }
    const consumes = [
      "application/json"
    ];
    const httpContentTypeSelected = this.configuration.selectHeaderContentType(consumes);
    if (httpContentTypeSelected !== void 0) {
      localVarHeaders = localVarHeaders.set("Content-Type", httpContentTypeSelected);
    }
    let responseType_ = "json";
    if (localVarHttpHeaderAcceptSelected) {
      if (localVarHttpHeaderAcceptSelected.startsWith("text")) {
        responseType_ = "text";
      } else if (this.configuration.isJsonMime(localVarHttpHeaderAcceptSelected)) {
        responseType_ = "json";
      } else {
        responseType_ = "blob";
      }
    }
    let localVarPath = `/accounts/users/${this.configuration.encodeParam({ name: "id", value: id, in: "path", style: "simple", explode: false, dataType: "string", dataFormat: void 0 })}`;
    return this.httpClient.request("put", `${this.configuration.basePath}${localVarPath}`, {
      context: localVarHttpContext,
      body: request,
      responseType: responseType_,
      withCredentials: this.configuration.withCredentials,
      headers: localVarHeaders,
      observe,
      transferCache: localVarTransferCache,
      reportProgress
    });
  }
  updateUserAvatar(id, observe = "body", reportProgress = false, options) {
    if (id === null || id === void 0) {
      throw new Error("Required parameter id was null or undefined when calling updateUserAvatar.");
    }
    let localVarHeaders = this.defaultHeaders;
    let localVarCredential;
    localVarCredential = this.configuration.lookupCredential("access_token");
    if (localVarCredential) {
      localVarHeaders = localVarHeaders.set("x-access-token", localVarCredential);
    }
    let localVarHttpHeaderAcceptSelected = options && options.httpHeaderAccept;
    if (localVarHttpHeaderAcceptSelected === void 0) {
      const httpHeaderAccepts = [];
      localVarHttpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
    }
    if (localVarHttpHeaderAcceptSelected !== void 0) {
      localVarHeaders = localVarHeaders.set("Accept", localVarHttpHeaderAcceptSelected);
    }
    let localVarHttpContext = options && options.context;
    if (localVarHttpContext === void 0) {
      localVarHttpContext = new HttpContext();
    }
    let localVarTransferCache = options && options.transferCache;
    if (localVarTransferCache === void 0) {
      localVarTransferCache = true;
    }
    let responseType_ = "json";
    if (localVarHttpHeaderAcceptSelected) {
      if (localVarHttpHeaderAcceptSelected.startsWith("text")) {
        responseType_ = "text";
      } else if (this.configuration.isJsonMime(localVarHttpHeaderAcceptSelected)) {
        responseType_ = "json";
      } else {
        responseType_ = "blob";
      }
    }
    let localVarPath = `/accounts/users/${this.configuration.encodeParam({ name: "id", value: id, in: "path", style: "simple", explode: false, dataType: "string", dataFormat: void 0 })}/avatar`;
    return this.httpClient.request("post", `${this.configuration.basePath}${localVarPath}`, {
      context: localVarHttpContext,
      responseType: responseType_,
      withCredentials: this.configuration.withCredentials,
      headers: localVarHeaders,
      observe,
      transferCache: localVarTransferCache,
      reportProgress
    });
  }
  static \u0275fac = function UsersService_Factory(__ngFactoryType__) {
    return new (__ngFactoryType__ || _UsersService)(\u0275\u0275inject(HttpClient), \u0275\u0275inject(BASE_PATH, 8), \u0275\u0275inject(Configuration, 8));
  };
  static \u0275prov = /* @__PURE__ */ \u0275\u0275defineInjectable({ token: _UsersService, factory: _UsersService.\u0275fac, providedIn: "root" });
};
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(UsersService, [{
    type: Injectable,
    args: [{
      providedIn: "root"
    }]
  }], () => [{ type: HttpClient }, { type: void 0, decorators: [{
    type: Optional
  }, {
    type: Inject,
    args: [BASE_PATH]
  }] }, { type: Configuration, decorators: [{
    type: Optional
  }] }], null);
})();

// src/app/api/api/vendors.service.ts
var VendorsService = class _VendorsService {
  httpClient;
  basePath = "";
  defaultHeaders = new HttpHeaders();
  configuration = new Configuration();
  encoder;
  constructor(httpClient, basePath, configuration) {
    this.httpClient = httpClient;
    if (configuration) {
      this.configuration = configuration;
    }
    if (typeof this.configuration.basePath !== "string") {
      const firstBasePath = Array.isArray(basePath) ? basePath[0] : void 0;
      if (firstBasePath != void 0) {
        basePath = firstBasePath;
      }
      if (typeof basePath !== "string") {
        basePath = this.basePath;
      }
      this.configuration.basePath = basePath;
    }
    this.encoder = this.configuration.encoder || new CustomHttpParameterCodec();
  }
  // @ts-ignore
  addToHttpParams(httpParams, value, key) {
    if (typeof value === "object" && value instanceof Date === false) {
      httpParams = this.addToHttpParamsRecursive(httpParams, value);
    } else {
      httpParams = this.addToHttpParamsRecursive(httpParams, value, key);
    }
    return httpParams;
  }
  addToHttpParamsRecursive(httpParams, value, key) {
    if (value == null) {
      return httpParams;
    }
    if (typeof value === "object") {
      if (Array.isArray(value)) {
        value.forEach((elem) => httpParams = this.addToHttpParamsRecursive(httpParams, elem, key));
      } else if (value instanceof Date) {
        if (key != null) {
          httpParams = httpParams.append(key, value.toISOString().substring(0, 10));
        } else {
          throw Error("key may not be null if value is Date");
        }
      } else {
        Object.keys(value).forEach((k) => httpParams = this.addToHttpParamsRecursive(httpParams, value[k], key != null ? `${key}.${k}` : k));
      }
    } else if (key != null) {
      httpParams = httpParams.append(key, value);
    } else {
      throw Error("key may not be null if value is not object or array");
    }
    return httpParams;
  }
  createVendor(request, observe = "body", reportProgress = false, options) {
    if (request === null || request === void 0) {
      throw new Error("Required parameter request was null or undefined when calling createVendor.");
    }
    let localVarHeaders = this.defaultHeaders;
    let localVarCredential;
    localVarCredential = this.configuration.lookupCredential("access_token");
    if (localVarCredential) {
      localVarHeaders = localVarHeaders.set("x-access-token", localVarCredential);
    }
    let localVarHttpHeaderAcceptSelected = options && options.httpHeaderAccept;
    if (localVarHttpHeaderAcceptSelected === void 0) {
      const httpHeaderAccepts = [
        "application/json"
      ];
      localVarHttpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
    }
    if (localVarHttpHeaderAcceptSelected !== void 0) {
      localVarHeaders = localVarHeaders.set("Accept", localVarHttpHeaderAcceptSelected);
    }
    let localVarHttpContext = options && options.context;
    if (localVarHttpContext === void 0) {
      localVarHttpContext = new HttpContext();
    }
    let localVarTransferCache = options && options.transferCache;
    if (localVarTransferCache === void 0) {
      localVarTransferCache = true;
    }
    const consumes = [
      "application/json"
    ];
    const httpContentTypeSelected = this.configuration.selectHeaderContentType(consumes);
    if (httpContentTypeSelected !== void 0) {
      localVarHeaders = localVarHeaders.set("Content-Type", httpContentTypeSelected);
    }
    let responseType_ = "json";
    if (localVarHttpHeaderAcceptSelected) {
      if (localVarHttpHeaderAcceptSelected.startsWith("text")) {
        responseType_ = "text";
      } else if (this.configuration.isJsonMime(localVarHttpHeaderAcceptSelected)) {
        responseType_ = "json";
      } else {
        responseType_ = "blob";
      }
    }
    let localVarPath = `/accounts/vendors`;
    return this.httpClient.request("post", `${this.configuration.basePath}${localVarPath}`, {
      context: localVarHttpContext,
      body: request,
      responseType: responseType_,
      withCredentials: this.configuration.withCredentials,
      headers: localVarHeaders,
      observe,
      transferCache: localVarTransferCache,
      reportProgress
    });
  }
  deleteVendorLogo(id, size, observe = "body", reportProgress = false, options) {
    if (id === null || id === void 0) {
      throw new Error("Required parameter id was null or undefined when calling deleteVendorLogo.");
    }
    if (size === null || size === void 0) {
      throw new Error("Required parameter size was null or undefined when calling deleteVendorLogo.");
    }
    let localVarQueryParameters = new HttpParams({ encoder: this.encoder });
    if (size !== void 0 && size !== null) {
      localVarQueryParameters = this.addToHttpParams(localVarQueryParameters, size, "size");
    }
    let localVarHeaders = this.defaultHeaders;
    let localVarCredential;
    localVarCredential = this.configuration.lookupCredential("access_token");
    if (localVarCredential) {
      localVarHeaders = localVarHeaders.set("x-access-token", localVarCredential);
    }
    let localVarHttpHeaderAcceptSelected = options && options.httpHeaderAccept;
    if (localVarHttpHeaderAcceptSelected === void 0) {
      const httpHeaderAccepts = [];
      localVarHttpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
    }
    if (localVarHttpHeaderAcceptSelected !== void 0) {
      localVarHeaders = localVarHeaders.set("Accept", localVarHttpHeaderAcceptSelected);
    }
    let localVarHttpContext = options && options.context;
    if (localVarHttpContext === void 0) {
      localVarHttpContext = new HttpContext();
    }
    let localVarTransferCache = options && options.transferCache;
    if (localVarTransferCache === void 0) {
      localVarTransferCache = true;
    }
    let responseType_ = "json";
    if (localVarHttpHeaderAcceptSelected) {
      if (localVarHttpHeaderAcceptSelected.startsWith("text")) {
        responseType_ = "text";
      } else if (this.configuration.isJsonMime(localVarHttpHeaderAcceptSelected)) {
        responseType_ = "json";
      } else {
        responseType_ = "blob";
      }
    }
    let localVarPath = `/accounts/vendors/${this.configuration.encodeParam({ name: "id", value: id, in: "path", style: "simple", explode: false, dataType: "string", dataFormat: void 0 })}/logo`;
    return this.httpClient.request("delete", `${this.configuration.basePath}${localVarPath}`, {
      context: localVarHttpContext,
      params: localVarQueryParameters,
      responseType: responseType_,
      withCredentials: this.configuration.withCredentials,
      headers: localVarHeaders,
      observe,
      transferCache: localVarTransferCache,
      reportProgress
    });
  }
  getVendor(id, observe = "body", reportProgress = false, options) {
    if (id === null || id === void 0) {
      throw new Error("Required parameter id was null or undefined when calling getVendor.");
    }
    let localVarHeaders = this.defaultHeaders;
    let localVarCredential;
    localVarCredential = this.configuration.lookupCredential("access_token");
    if (localVarCredential) {
      localVarHeaders = localVarHeaders.set("x-access-token", localVarCredential);
    }
    let localVarHttpHeaderAcceptSelected = options && options.httpHeaderAccept;
    if (localVarHttpHeaderAcceptSelected === void 0) {
      const httpHeaderAccepts = [
        "application/json"
      ];
      localVarHttpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
    }
    if (localVarHttpHeaderAcceptSelected !== void 0) {
      localVarHeaders = localVarHeaders.set("Accept", localVarHttpHeaderAcceptSelected);
    }
    let localVarHttpContext = options && options.context;
    if (localVarHttpContext === void 0) {
      localVarHttpContext = new HttpContext();
    }
    let localVarTransferCache = options && options.transferCache;
    if (localVarTransferCache === void 0) {
      localVarTransferCache = true;
    }
    let responseType_ = "json";
    if (localVarHttpHeaderAcceptSelected) {
      if (localVarHttpHeaderAcceptSelected.startsWith("text")) {
        responseType_ = "text";
      } else if (this.configuration.isJsonMime(localVarHttpHeaderAcceptSelected)) {
        responseType_ = "json";
      } else {
        responseType_ = "blob";
      }
    }
    let localVarPath = `/accounts/vendors/${this.configuration.encodeParam({ name: "id", value: id, in: "path", style: "simple", explode: false, dataType: "string", dataFormat: void 0 })}`;
    return this.httpClient.request("get", `${this.configuration.basePath}${localVarPath}`, {
      context: localVarHttpContext,
      responseType: responseType_,
      withCredentials: this.configuration.withCredentials,
      headers: localVarHeaders,
      observe,
      transferCache: localVarTransferCache,
      reportProgress
    });
  }
  getVendorLogo(id, size, observe = "body", reportProgress = false, options) {
    if (id === null || id === void 0) {
      throw new Error("Required parameter id was null or undefined when calling getVendorLogo.");
    }
    let localVarQueryParameters = new HttpParams({ encoder: this.encoder });
    if (size !== void 0 && size !== null) {
      localVarQueryParameters = this.addToHttpParams(localVarQueryParameters, size, "size");
    }
    let localVarHeaders = this.defaultHeaders;
    let localVarHttpHeaderAcceptSelected = options && options.httpHeaderAccept;
    if (localVarHttpHeaderAcceptSelected === void 0) {
      const httpHeaderAccepts = [
        "application/json"
      ];
      localVarHttpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
    }
    if (localVarHttpHeaderAcceptSelected !== void 0) {
      localVarHeaders = localVarHeaders.set("Accept", localVarHttpHeaderAcceptSelected);
    }
    let localVarHttpContext = options && options.context;
    if (localVarHttpContext === void 0) {
      localVarHttpContext = new HttpContext();
    }
    let localVarTransferCache = options && options.transferCache;
    if (localVarTransferCache === void 0) {
      localVarTransferCache = true;
    }
    let responseType_ = "json";
    if (localVarHttpHeaderAcceptSelected) {
      if (localVarHttpHeaderAcceptSelected.startsWith("text")) {
        responseType_ = "text";
      } else if (this.configuration.isJsonMime(localVarHttpHeaderAcceptSelected)) {
        responseType_ = "json";
      } else {
        responseType_ = "blob";
      }
    }
    let localVarPath = `/accounts/vendors/${this.configuration.encodeParam({ name: "id", value: id, in: "path", style: "simple", explode: false, dataType: "string", dataFormat: void 0 })}/logo`;
    return this.httpClient.request("get", `${this.configuration.basePath}${localVarPath}`, {
      context: localVarHttpContext,
      params: localVarQueryParameters,
      responseType: responseType_,
      withCredentials: this.configuration.withCredentials,
      headers: localVarHeaders,
      observe,
      transferCache: localVarTransferCache,
      reportProgress
    });
  }
  listVendors(owner, offset, limit, sort, filter, counts, observe = "body", reportProgress = false, options) {
    if (owner === null || owner === void 0) {
      throw new Error("Required parameter owner was null or undefined when calling listVendors.");
    }
    let localVarQueryParameters = new HttpParams({ encoder: this.encoder });
    if (owner !== void 0 && owner !== null) {
      localVarQueryParameters = this.addToHttpParams(localVarQueryParameters, owner, "owner");
    }
    if (offset !== void 0 && offset !== null) {
      localVarQueryParameters = this.addToHttpParams(localVarQueryParameters, offset, "offset");
    }
    if (limit !== void 0 && limit !== null) {
      localVarQueryParameters = this.addToHttpParams(localVarQueryParameters, limit, "limit");
    }
    if (sort !== void 0 && sort !== null) {
      localVarQueryParameters = this.addToHttpParams(localVarQueryParameters, sort, "sort");
    }
    if (filter !== void 0 && filter !== null) {
      localVarQueryParameters = this.addToHttpParams(localVarQueryParameters, filter, "filter");
    }
    if (counts !== void 0 && counts !== null) {
      localVarQueryParameters = this.addToHttpParams(localVarQueryParameters, counts, "counts");
    }
    let localVarHeaders = this.defaultHeaders;
    let localVarCredential;
    localVarCredential = this.configuration.lookupCredential("access_token");
    if (localVarCredential) {
      localVarHeaders = localVarHeaders.set("x-access-token", localVarCredential);
    }
    let localVarHttpHeaderAcceptSelected = options && options.httpHeaderAccept;
    if (localVarHttpHeaderAcceptSelected === void 0) {
      const httpHeaderAccepts = [
        "application/json"
      ];
      localVarHttpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
    }
    if (localVarHttpHeaderAcceptSelected !== void 0) {
      localVarHeaders = localVarHeaders.set("Accept", localVarHttpHeaderAcceptSelected);
    }
    let localVarHttpContext = options && options.context;
    if (localVarHttpContext === void 0) {
      localVarHttpContext = new HttpContext();
    }
    let localVarTransferCache = options && options.transferCache;
    if (localVarTransferCache === void 0) {
      localVarTransferCache = true;
    }
    let responseType_ = "json";
    if (localVarHttpHeaderAcceptSelected) {
      if (localVarHttpHeaderAcceptSelected.startsWith("text")) {
        responseType_ = "text";
      } else if (this.configuration.isJsonMime(localVarHttpHeaderAcceptSelected)) {
        responseType_ = "json";
      } else {
        responseType_ = "blob";
      }
    }
    let localVarPath = `/accounts/vendors`;
    return this.httpClient.request("get", `${this.configuration.basePath}${localVarPath}`, {
      context: localVarHttpContext,
      params: localVarQueryParameters,
      responseType: responseType_,
      withCredentials: this.configuration.withCredentials,
      headers: localVarHeaders,
      observe,
      transferCache: localVarTransferCache,
      reportProgress
    });
  }
  updateVendor(id, request, observe = "body", reportProgress = false, options) {
    if (id === null || id === void 0) {
      throw new Error("Required parameter id was null or undefined when calling updateVendor.");
    }
    if (request === null || request === void 0) {
      throw new Error("Required parameter request was null or undefined when calling updateVendor.");
    }
    let localVarHeaders = this.defaultHeaders;
    let localVarCredential;
    localVarCredential = this.configuration.lookupCredential("access_token");
    if (localVarCredential) {
      localVarHeaders = localVarHeaders.set("x-access-token", localVarCredential);
    }
    let localVarHttpHeaderAcceptSelected = options && options.httpHeaderAccept;
    if (localVarHttpHeaderAcceptSelected === void 0) {
      const httpHeaderAccepts = [
        "application/json"
      ];
      localVarHttpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
    }
    if (localVarHttpHeaderAcceptSelected !== void 0) {
      localVarHeaders = localVarHeaders.set("Accept", localVarHttpHeaderAcceptSelected);
    }
    let localVarHttpContext = options && options.context;
    if (localVarHttpContext === void 0) {
      localVarHttpContext = new HttpContext();
    }
    let localVarTransferCache = options && options.transferCache;
    if (localVarTransferCache === void 0) {
      localVarTransferCache = true;
    }
    const consumes = [
      "application/json"
    ];
    const httpContentTypeSelected = this.configuration.selectHeaderContentType(consumes);
    if (httpContentTypeSelected !== void 0) {
      localVarHeaders = localVarHeaders.set("Content-Type", httpContentTypeSelected);
    }
    let responseType_ = "json";
    if (localVarHttpHeaderAcceptSelected) {
      if (localVarHttpHeaderAcceptSelected.startsWith("text")) {
        responseType_ = "text";
      } else if (this.configuration.isJsonMime(localVarHttpHeaderAcceptSelected)) {
        responseType_ = "json";
      } else {
        responseType_ = "blob";
      }
    }
    let localVarPath = `/accounts/vendors/${this.configuration.encodeParam({ name: "id", value: id, in: "path", style: "simple", explode: false, dataType: "string", dataFormat: void 0 })}`;
    return this.httpClient.request("put", `${this.configuration.basePath}${localVarPath}`, {
      context: localVarHttpContext,
      body: request,
      responseType: responseType_,
      withCredentials: this.configuration.withCredentials,
      headers: localVarHeaders,
      observe,
      transferCache: localVarTransferCache,
      reportProgress
    });
  }
  updateVendorDetails(id, request, observe = "body", reportProgress = false, options) {
    if (id === null || id === void 0) {
      throw new Error("Required parameter id was null or undefined when calling updateVendorDetails.");
    }
    if (request === null || request === void 0) {
      throw new Error("Required parameter request was null or undefined when calling updateVendorDetails.");
    }
    let localVarHeaders = this.defaultHeaders;
    let localVarCredential;
    localVarCredential = this.configuration.lookupCredential("access_token");
    if (localVarCredential) {
      localVarHeaders = localVarHeaders.set("x-access-token", localVarCredential);
    }
    let localVarHttpHeaderAcceptSelected = options && options.httpHeaderAccept;
    if (localVarHttpHeaderAcceptSelected === void 0) {
      const httpHeaderAccepts = [
        "application/json"
      ];
      localVarHttpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
    }
    if (localVarHttpHeaderAcceptSelected !== void 0) {
      localVarHeaders = localVarHeaders.set("Accept", localVarHttpHeaderAcceptSelected);
    }
    let localVarHttpContext = options && options.context;
    if (localVarHttpContext === void 0) {
      localVarHttpContext = new HttpContext();
    }
    let localVarTransferCache = options && options.transferCache;
    if (localVarTransferCache === void 0) {
      localVarTransferCache = true;
    }
    const consumes = [
      "application/json"
    ];
    const httpContentTypeSelected = this.configuration.selectHeaderContentType(consumes);
    if (httpContentTypeSelected !== void 0) {
      localVarHeaders = localVarHeaders.set("Content-Type", httpContentTypeSelected);
    }
    let responseType_ = "json";
    if (localVarHttpHeaderAcceptSelected) {
      if (localVarHttpHeaderAcceptSelected.startsWith("text")) {
        responseType_ = "text";
      } else if (this.configuration.isJsonMime(localVarHttpHeaderAcceptSelected)) {
        responseType_ = "json";
      } else {
        responseType_ = "blob";
      }
    }
    let localVarPath = `/accounts/vendors/${this.configuration.encodeParam({ name: "id", value: id, in: "path", style: "simple", explode: false, dataType: "string", dataFormat: void 0 })}/details`;
    return this.httpClient.request("put", `${this.configuration.basePath}${localVarPath}`, {
      context: localVarHttpContext,
      body: request,
      responseType: responseType_,
      withCredentials: this.configuration.withCredentials,
      headers: localVarHeaders,
      observe,
      transferCache: localVarTransferCache,
      reportProgress
    });
  }
  updateVendorLogo(id, size, observe = "body", reportProgress = false, options) {
    if (id === null || id === void 0) {
      throw new Error("Required parameter id was null or undefined when calling updateVendorLogo.");
    }
    if (size === null || size === void 0) {
      throw new Error("Required parameter size was null or undefined when calling updateVendorLogo.");
    }
    let localVarQueryParameters = new HttpParams({ encoder: this.encoder });
    if (size !== void 0 && size !== null) {
      localVarQueryParameters = this.addToHttpParams(localVarQueryParameters, size, "size");
    }
    let localVarHeaders = this.defaultHeaders;
    let localVarCredential;
    localVarCredential = this.configuration.lookupCredential("access_token");
    if (localVarCredential) {
      localVarHeaders = localVarHeaders.set("x-access-token", localVarCredential);
    }
    let localVarHttpHeaderAcceptSelected = options && options.httpHeaderAccept;
    if (localVarHttpHeaderAcceptSelected === void 0) {
      const httpHeaderAccepts = [];
      localVarHttpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
    }
    if (localVarHttpHeaderAcceptSelected !== void 0) {
      localVarHeaders = localVarHeaders.set("Accept", localVarHttpHeaderAcceptSelected);
    }
    let localVarHttpContext = options && options.context;
    if (localVarHttpContext === void 0) {
      localVarHttpContext = new HttpContext();
    }
    let localVarTransferCache = options && options.transferCache;
    if (localVarTransferCache === void 0) {
      localVarTransferCache = true;
    }
    let responseType_ = "json";
    if (localVarHttpHeaderAcceptSelected) {
      if (localVarHttpHeaderAcceptSelected.startsWith("text")) {
        responseType_ = "text";
      } else if (this.configuration.isJsonMime(localVarHttpHeaderAcceptSelected)) {
        responseType_ = "json";
      } else {
        responseType_ = "blob";
      }
    }
    let localVarPath = `/accounts/vendors/${this.configuration.encodeParam({ name: "id", value: id, in: "path", style: "simple", explode: false, dataType: "string", dataFormat: void 0 })}/logo`;
    return this.httpClient.request("post", `${this.configuration.basePath}${localVarPath}`, {
      context: localVarHttpContext,
      params: localVarQueryParameters,
      responseType: responseType_,
      withCredentials: this.configuration.withCredentials,
      headers: localVarHeaders,
      observe,
      transferCache: localVarTransferCache,
      reportProgress
    });
  }
  static \u0275fac = function VendorsService_Factory(__ngFactoryType__) {
    return new (__ngFactoryType__ || _VendorsService)(\u0275\u0275inject(HttpClient), \u0275\u0275inject(BASE_PATH, 8), \u0275\u0275inject(Configuration, 8));
  };
  static \u0275prov = /* @__PURE__ */ \u0275\u0275defineInjectable({ token: _VendorsService, factory: _VendorsService.\u0275fac, providedIn: "root" });
};
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(VendorsService, [{
    type: Injectable,
    args: [{
      providedIn: "root"
    }]
  }], () => [{ type: HttpClient }, { type: void 0, decorators: [{
    type: Optional
  }, {
    type: Inject,
    args: [BASE_PATH]
  }] }, { type: Configuration, decorators: [{
    type: Optional
  }] }], null);
})();

// src/app/api/api/zoneGroups.service.ts
var ZoneGroupsService = class _ZoneGroupsService {
  httpClient;
  basePath = "";
  defaultHeaders = new HttpHeaders();
  configuration = new Configuration();
  encoder;
  constructor(httpClient, basePath, configuration) {
    this.httpClient = httpClient;
    if (configuration) {
      this.configuration = configuration;
    }
    if (typeof this.configuration.basePath !== "string") {
      const firstBasePath = Array.isArray(basePath) ? basePath[0] : void 0;
      if (firstBasePath != void 0) {
        basePath = firstBasePath;
      }
      if (typeof basePath !== "string") {
        basePath = this.basePath;
      }
      this.configuration.basePath = basePath;
    }
    this.encoder = this.configuration.encoder || new CustomHttpParameterCodec();
  }
  // @ts-ignore
  addToHttpParams(httpParams, value, key) {
    if (typeof value === "object" && value instanceof Date === false) {
      httpParams = this.addToHttpParamsRecursive(httpParams, value);
    } else {
      httpParams = this.addToHttpParamsRecursive(httpParams, value, key);
    }
    return httpParams;
  }
  addToHttpParamsRecursive(httpParams, value, key) {
    if (value == null) {
      return httpParams;
    }
    if (typeof value === "object") {
      if (Array.isArray(value)) {
        value.forEach((elem) => httpParams = this.addToHttpParamsRecursive(httpParams, elem, key));
      } else if (value instanceof Date) {
        if (key != null) {
          httpParams = httpParams.append(key, value.toISOString().substring(0, 10));
        } else {
          throw Error("key may not be null if value is Date");
        }
      } else {
        Object.keys(value).forEach((k) => httpParams = this.addToHttpParamsRecursive(httpParams, value[k], key != null ? `${key}.${k}` : k));
      }
    } else if (key != null) {
      httpParams = httpParams.append(key, value);
    } else {
      throw Error("key may not be null if value is not object or array");
    }
    return httpParams;
  }
  createZoneGroup(request, observe = "body", reportProgress = false, options) {
    if (request === null || request === void 0) {
      throw new Error("Required parameter request was null or undefined when calling createZoneGroup.");
    }
    let localVarHeaders = this.defaultHeaders;
    let localVarCredential;
    localVarCredential = this.configuration.lookupCredential("access_token");
    if (localVarCredential) {
      localVarHeaders = localVarHeaders.set("x-access-token", localVarCredential);
    }
    let localVarHttpHeaderAcceptSelected = options && options.httpHeaderAccept;
    if (localVarHttpHeaderAcceptSelected === void 0) {
      const httpHeaderAccepts = [
        "application/json"
      ];
      localVarHttpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
    }
    if (localVarHttpHeaderAcceptSelected !== void 0) {
      localVarHeaders = localVarHeaders.set("Accept", localVarHttpHeaderAcceptSelected);
    }
    let localVarHttpContext = options && options.context;
    if (localVarHttpContext === void 0) {
      localVarHttpContext = new HttpContext();
    }
    let localVarTransferCache = options && options.transferCache;
    if (localVarTransferCache === void 0) {
      localVarTransferCache = true;
    }
    const consumes = [
      "application/json"
    ];
    const httpContentTypeSelected = this.configuration.selectHeaderContentType(consumes);
    if (httpContentTypeSelected !== void 0) {
      localVarHeaders = localVarHeaders.set("Content-Type", httpContentTypeSelected);
    }
    let responseType_ = "json";
    if (localVarHttpHeaderAcceptSelected) {
      if (localVarHttpHeaderAcceptSelected.startsWith("text")) {
        responseType_ = "text";
      } else if (this.configuration.isJsonMime(localVarHttpHeaderAcceptSelected)) {
        responseType_ = "json";
      } else {
        responseType_ = "blob";
      }
    }
    let localVarPath = `/entities/zonegroups`;
    return this.httpClient.request("post", `${this.configuration.basePath}${localVarPath}`, {
      context: localVarHttpContext,
      body: request,
      responseType: responseType_,
      withCredentials: this.configuration.withCredentials,
      headers: localVarHeaders,
      observe,
      transferCache: localVarTransferCache,
      reportProgress
    });
  }
  deleteZoneGroup(id, observe = "body", reportProgress = false, options) {
    if (id === null || id === void 0) {
      throw new Error("Required parameter id was null or undefined when calling deleteZoneGroup.");
    }
    let localVarHeaders = this.defaultHeaders;
    let localVarCredential;
    localVarCredential = this.configuration.lookupCredential("access_token");
    if (localVarCredential) {
      localVarHeaders = localVarHeaders.set("x-access-token", localVarCredential);
    }
    let localVarHttpHeaderAcceptSelected = options && options.httpHeaderAccept;
    if (localVarHttpHeaderAcceptSelected === void 0) {
      const httpHeaderAccepts = [
        "application/json"
      ];
      localVarHttpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
    }
    if (localVarHttpHeaderAcceptSelected !== void 0) {
      localVarHeaders = localVarHeaders.set("Accept", localVarHttpHeaderAcceptSelected);
    }
    let localVarHttpContext = options && options.context;
    if (localVarHttpContext === void 0) {
      localVarHttpContext = new HttpContext();
    }
    let localVarTransferCache = options && options.transferCache;
    if (localVarTransferCache === void 0) {
      localVarTransferCache = true;
    }
    let responseType_ = "json";
    if (localVarHttpHeaderAcceptSelected) {
      if (localVarHttpHeaderAcceptSelected.startsWith("text")) {
        responseType_ = "text";
      } else if (this.configuration.isJsonMime(localVarHttpHeaderAcceptSelected)) {
        responseType_ = "json";
      } else {
        responseType_ = "blob";
      }
    }
    let localVarPath = `/entities/zonegroups/${this.configuration.encodeParam({ name: "id", value: id, in: "path", style: "simple", explode: false, dataType: "string", dataFormat: void 0 })}`;
    return this.httpClient.request("delete", `${this.configuration.basePath}${localVarPath}`, {
      context: localVarHttpContext,
      responseType: responseType_,
      withCredentials: this.configuration.withCredentials,
      headers: localVarHeaders,
      observe,
      transferCache: localVarTransferCache,
      reportProgress
    });
  }
  getZoneGroup(id, observe = "body", reportProgress = false, options) {
    if (id === null || id === void 0) {
      throw new Error("Required parameter id was null or undefined when calling getZoneGroup.");
    }
    let localVarHeaders = this.defaultHeaders;
    let localVarCredential;
    localVarCredential = this.configuration.lookupCredential("access_token");
    if (localVarCredential) {
      localVarHeaders = localVarHeaders.set("x-access-token", localVarCredential);
    }
    let localVarHttpHeaderAcceptSelected = options && options.httpHeaderAccept;
    if (localVarHttpHeaderAcceptSelected === void 0) {
      const httpHeaderAccepts = [
        "application/json"
      ];
      localVarHttpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
    }
    if (localVarHttpHeaderAcceptSelected !== void 0) {
      localVarHeaders = localVarHeaders.set("Accept", localVarHttpHeaderAcceptSelected);
    }
    let localVarHttpContext = options && options.context;
    if (localVarHttpContext === void 0) {
      localVarHttpContext = new HttpContext();
    }
    let localVarTransferCache = options && options.transferCache;
    if (localVarTransferCache === void 0) {
      localVarTransferCache = true;
    }
    let responseType_ = "json";
    if (localVarHttpHeaderAcceptSelected) {
      if (localVarHttpHeaderAcceptSelected.startsWith("text")) {
        responseType_ = "text";
      } else if (this.configuration.isJsonMime(localVarHttpHeaderAcceptSelected)) {
        responseType_ = "json";
      } else {
        responseType_ = "blob";
      }
    }
    let localVarPath = `/entities/zonegroups/${this.configuration.encodeParam({ name: "id", value: id, in: "path", style: "simple", explode: false, dataType: "string", dataFormat: void 0 })}`;
    return this.httpClient.request("get", `${this.configuration.basePath}${localVarPath}`, {
      context: localVarHttpContext,
      responseType: responseType_,
      withCredentials: this.configuration.withCredentials,
      headers: localVarHeaders,
      observe,
      transferCache: localVarTransferCache,
      reportProgress
    });
  }
  listZoneGroups(owner, offset, limit, sort, filter, observe = "body", reportProgress = false, options) {
    if (owner === null || owner === void 0) {
      throw new Error("Required parameter owner was null or undefined when calling listZoneGroups.");
    }
    let localVarQueryParameters = new HttpParams({ encoder: this.encoder });
    if (owner !== void 0 && owner !== null) {
      localVarQueryParameters = this.addToHttpParams(localVarQueryParameters, owner, "owner");
    }
    if (offset !== void 0 && offset !== null) {
      localVarQueryParameters = this.addToHttpParams(localVarQueryParameters, offset, "offset");
    }
    if (limit !== void 0 && limit !== null) {
      localVarQueryParameters = this.addToHttpParams(localVarQueryParameters, limit, "limit");
    }
    if (sort !== void 0 && sort !== null) {
      localVarQueryParameters = this.addToHttpParams(localVarQueryParameters, sort, "sort");
    }
    if (filter !== void 0 && filter !== null) {
      localVarQueryParameters = this.addToHttpParams(localVarQueryParameters, filter, "filter");
    }
    let localVarHeaders = this.defaultHeaders;
    let localVarCredential;
    localVarCredential = this.configuration.lookupCredential("access_token");
    if (localVarCredential) {
      localVarHeaders = localVarHeaders.set("x-access-token", localVarCredential);
    }
    let localVarHttpHeaderAcceptSelected = options && options.httpHeaderAccept;
    if (localVarHttpHeaderAcceptSelected === void 0) {
      const httpHeaderAccepts = [
        "application/json"
      ];
      localVarHttpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
    }
    if (localVarHttpHeaderAcceptSelected !== void 0) {
      localVarHeaders = localVarHeaders.set("Accept", localVarHttpHeaderAcceptSelected);
    }
    let localVarHttpContext = options && options.context;
    if (localVarHttpContext === void 0) {
      localVarHttpContext = new HttpContext();
    }
    let localVarTransferCache = options && options.transferCache;
    if (localVarTransferCache === void 0) {
      localVarTransferCache = true;
    }
    let responseType_ = "json";
    if (localVarHttpHeaderAcceptSelected) {
      if (localVarHttpHeaderAcceptSelected.startsWith("text")) {
        responseType_ = "text";
      } else if (this.configuration.isJsonMime(localVarHttpHeaderAcceptSelected)) {
        responseType_ = "json";
      } else {
        responseType_ = "blob";
      }
    }
    let localVarPath = `/entities/zonegroups`;
    return this.httpClient.request("get", `${this.configuration.basePath}${localVarPath}`, {
      context: localVarHttpContext,
      params: localVarQueryParameters,
      responseType: responseType_,
      withCredentials: this.configuration.withCredentials,
      headers: localVarHeaders,
      observe,
      transferCache: localVarTransferCache,
      reportProgress
    });
  }
  updateZoneGroup(id, request, observe = "body", reportProgress = false, options) {
    if (id === null || id === void 0) {
      throw new Error("Required parameter id was null or undefined when calling updateZoneGroup.");
    }
    if (request === null || request === void 0) {
      throw new Error("Required parameter request was null or undefined when calling updateZoneGroup.");
    }
    let localVarHeaders = this.defaultHeaders;
    let localVarCredential;
    localVarCredential = this.configuration.lookupCredential("access_token");
    if (localVarCredential) {
      localVarHeaders = localVarHeaders.set("x-access-token", localVarCredential);
    }
    let localVarHttpHeaderAcceptSelected = options && options.httpHeaderAccept;
    if (localVarHttpHeaderAcceptSelected === void 0) {
      const httpHeaderAccepts = [
        "application/json"
      ];
      localVarHttpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
    }
    if (localVarHttpHeaderAcceptSelected !== void 0) {
      localVarHeaders = localVarHeaders.set("Accept", localVarHttpHeaderAcceptSelected);
    }
    let localVarHttpContext = options && options.context;
    if (localVarHttpContext === void 0) {
      localVarHttpContext = new HttpContext();
    }
    let localVarTransferCache = options && options.transferCache;
    if (localVarTransferCache === void 0) {
      localVarTransferCache = true;
    }
    const consumes = [
      "application/json"
    ];
    const httpContentTypeSelected = this.configuration.selectHeaderContentType(consumes);
    if (httpContentTypeSelected !== void 0) {
      localVarHeaders = localVarHeaders.set("Content-Type", httpContentTypeSelected);
    }
    let responseType_ = "json";
    if (localVarHttpHeaderAcceptSelected) {
      if (localVarHttpHeaderAcceptSelected.startsWith("text")) {
        responseType_ = "text";
      } else if (this.configuration.isJsonMime(localVarHttpHeaderAcceptSelected)) {
        responseType_ = "json";
      } else {
        responseType_ = "blob";
      }
    }
    let localVarPath = `/entities/zonegroups/${this.configuration.encodeParam({ name: "id", value: id, in: "path", style: "simple", explode: false, dataType: "string", dataFormat: void 0 })}`;
    return this.httpClient.request("put", `${this.configuration.basePath}${localVarPath}`, {
      context: localVarHttpContext,
      body: request,
      responseType: responseType_,
      withCredentials: this.configuration.withCredentials,
      headers: localVarHeaders,
      observe,
      transferCache: localVarTransferCache,
      reportProgress
    });
  }
  static \u0275fac = function ZoneGroupsService_Factory(__ngFactoryType__) {
    return new (__ngFactoryType__ || _ZoneGroupsService)(\u0275\u0275inject(HttpClient), \u0275\u0275inject(BASE_PATH, 8), \u0275\u0275inject(Configuration, 8));
  };
  static \u0275prov = /* @__PURE__ */ \u0275\u0275defineInjectable({ token: _ZoneGroupsService, factory: _ZoneGroupsService.\u0275fac, providedIn: "root" });
};
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(ZoneGroupsService, [{
    type: Injectable,
    args: [{
      providedIn: "root"
    }]
  }], () => [{ type: HttpClient }, { type: void 0, decorators: [{
    type: Optional
  }, {
    type: Inject,
    args: [BASE_PATH]
  }] }, { type: Configuration, decorators: [{
    type: Optional
  }] }], null);
})();

// src/app/api/api/zones.service.ts
var ZonesService = class _ZonesService {
  httpClient;
  basePath = "";
  defaultHeaders = new HttpHeaders();
  configuration = new Configuration();
  encoder;
  constructor(httpClient, basePath, configuration) {
    this.httpClient = httpClient;
    if (configuration) {
      this.configuration = configuration;
    }
    if (typeof this.configuration.basePath !== "string") {
      const firstBasePath = Array.isArray(basePath) ? basePath[0] : void 0;
      if (firstBasePath != void 0) {
        basePath = firstBasePath;
      }
      if (typeof basePath !== "string") {
        basePath = this.basePath;
      }
      this.configuration.basePath = basePath;
    }
    this.encoder = this.configuration.encoder || new CustomHttpParameterCodec();
  }
  // @ts-ignore
  addToHttpParams(httpParams, value, key) {
    if (typeof value === "object" && value instanceof Date === false) {
      httpParams = this.addToHttpParamsRecursive(httpParams, value);
    } else {
      httpParams = this.addToHttpParamsRecursive(httpParams, value, key);
    }
    return httpParams;
  }
  addToHttpParamsRecursive(httpParams, value, key) {
    if (value == null) {
      return httpParams;
    }
    if (typeof value === "object") {
      if (Array.isArray(value)) {
        value.forEach((elem) => httpParams = this.addToHttpParamsRecursive(httpParams, elem, key));
      } else if (value instanceof Date) {
        if (key != null) {
          httpParams = httpParams.append(key, value.toISOString().substring(0, 10));
        } else {
          throw Error("key may not be null if value is Date");
        }
      } else {
        Object.keys(value).forEach((k) => httpParams = this.addToHttpParamsRecursive(httpParams, value[k], key != null ? `${key}.${k}` : k));
      }
    } else if (key != null) {
      httpParams = httpParams.append(key, value);
    } else {
      throw Error("key may not be null if value is not object or array");
    }
    return httpParams;
  }
  createZone(request, observe = "body", reportProgress = false, options) {
    if (request === null || request === void 0) {
      throw new Error("Required parameter request was null or undefined when calling createZone.");
    }
    let localVarHeaders = this.defaultHeaders;
    let localVarCredential;
    localVarCredential = this.configuration.lookupCredential("access_token");
    if (localVarCredential) {
      localVarHeaders = localVarHeaders.set("x-access-token", localVarCredential);
    }
    let localVarHttpHeaderAcceptSelected = options && options.httpHeaderAccept;
    if (localVarHttpHeaderAcceptSelected === void 0) {
      const httpHeaderAccepts = [
        "application/json"
      ];
      localVarHttpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
    }
    if (localVarHttpHeaderAcceptSelected !== void 0) {
      localVarHeaders = localVarHeaders.set("Accept", localVarHttpHeaderAcceptSelected);
    }
    let localVarHttpContext = options && options.context;
    if (localVarHttpContext === void 0) {
      localVarHttpContext = new HttpContext();
    }
    let localVarTransferCache = options && options.transferCache;
    if (localVarTransferCache === void 0) {
      localVarTransferCache = true;
    }
    const consumes = [
      "application/json"
    ];
    const httpContentTypeSelected = this.configuration.selectHeaderContentType(consumes);
    if (httpContentTypeSelected !== void 0) {
      localVarHeaders = localVarHeaders.set("Content-Type", httpContentTypeSelected);
    }
    let responseType_ = "json";
    if (localVarHttpHeaderAcceptSelected) {
      if (localVarHttpHeaderAcceptSelected.startsWith("text")) {
        responseType_ = "text";
      } else if (this.configuration.isJsonMime(localVarHttpHeaderAcceptSelected)) {
        responseType_ = "json";
      } else {
        responseType_ = "blob";
      }
    }
    let localVarPath = `/entities/zones`;
    return this.httpClient.request("post", `${this.configuration.basePath}${localVarPath}`, {
      context: localVarHttpContext,
      body: request,
      responseType: responseType_,
      withCredentials: this.configuration.withCredentials,
      headers: localVarHeaders,
      observe,
      transferCache: localVarTransferCache,
      reportProgress
    });
  }
  getZone(id, observe = "body", reportProgress = false, options) {
    if (id === null || id === void 0) {
      throw new Error("Required parameter id was null or undefined when calling getZone.");
    }
    let localVarHeaders = this.defaultHeaders;
    let localVarCredential;
    localVarCredential = this.configuration.lookupCredential("access_token");
    if (localVarCredential) {
      localVarHeaders = localVarHeaders.set("x-access-token", localVarCredential);
    }
    let localVarHttpHeaderAcceptSelected = options && options.httpHeaderAccept;
    if (localVarHttpHeaderAcceptSelected === void 0) {
      const httpHeaderAccepts = [
        "application/json"
      ];
      localVarHttpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
    }
    if (localVarHttpHeaderAcceptSelected !== void 0) {
      localVarHeaders = localVarHeaders.set("Accept", localVarHttpHeaderAcceptSelected);
    }
    let localVarHttpContext = options && options.context;
    if (localVarHttpContext === void 0) {
      localVarHttpContext = new HttpContext();
    }
    let localVarTransferCache = options && options.transferCache;
    if (localVarTransferCache === void 0) {
      localVarTransferCache = true;
    }
    let responseType_ = "json";
    if (localVarHttpHeaderAcceptSelected) {
      if (localVarHttpHeaderAcceptSelected.startsWith("text")) {
        responseType_ = "text";
      } else if (this.configuration.isJsonMime(localVarHttpHeaderAcceptSelected)) {
        responseType_ = "json";
      } else {
        responseType_ = "blob";
      }
    }
    let localVarPath = `/entities/zones/${this.configuration.encodeParam({ name: "id", value: id, in: "path", style: "simple", explode: false, dataType: "string", dataFormat: void 0 })}`;
    return this.httpClient.request("get", `${this.configuration.basePath}${localVarPath}`, {
      context: localVarHttpContext,
      responseType: responseType_,
      withCredentials: this.configuration.withCredentials,
      headers: localVarHeaders,
      observe,
      transferCache: localVarTransferCache,
      reportProgress
    });
  }
  listZones(owner, offset, limit, sort, filter, bounds, observe = "body", reportProgress = false, options) {
    if (owner === null || owner === void 0) {
      throw new Error("Required parameter owner was null or undefined when calling listZones.");
    }
    let localVarQueryParameters = new HttpParams({ encoder: this.encoder });
    if (owner !== void 0 && owner !== null) {
      localVarQueryParameters = this.addToHttpParams(localVarQueryParameters, owner, "owner");
    }
    if (offset !== void 0 && offset !== null) {
      localVarQueryParameters = this.addToHttpParams(localVarQueryParameters, offset, "offset");
    }
    if (limit !== void 0 && limit !== null) {
      localVarQueryParameters = this.addToHttpParams(localVarQueryParameters, limit, "limit");
    }
    if (sort !== void 0 && sort !== null) {
      localVarQueryParameters = this.addToHttpParams(localVarQueryParameters, sort, "sort");
    }
    if (filter !== void 0 && filter !== null) {
      localVarQueryParameters = this.addToHttpParams(localVarQueryParameters, filter, "filter");
    }
    if (bounds !== void 0 && bounds !== null) {
      localVarQueryParameters = this.addToHttpParams(localVarQueryParameters, bounds, "bounds");
    }
    let localVarHeaders = this.defaultHeaders;
    let localVarCredential;
    localVarCredential = this.configuration.lookupCredential("access_token");
    if (localVarCredential) {
      localVarHeaders = localVarHeaders.set("x-access-token", localVarCredential);
    }
    let localVarHttpHeaderAcceptSelected = options && options.httpHeaderAccept;
    if (localVarHttpHeaderAcceptSelected === void 0) {
      const httpHeaderAccepts = [
        "application/json"
      ];
      localVarHttpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
    }
    if (localVarHttpHeaderAcceptSelected !== void 0) {
      localVarHeaders = localVarHeaders.set("Accept", localVarHttpHeaderAcceptSelected);
    }
    let localVarHttpContext = options && options.context;
    if (localVarHttpContext === void 0) {
      localVarHttpContext = new HttpContext();
    }
    let localVarTransferCache = options && options.transferCache;
    if (localVarTransferCache === void 0) {
      localVarTransferCache = true;
    }
    let responseType_ = "json";
    if (localVarHttpHeaderAcceptSelected) {
      if (localVarHttpHeaderAcceptSelected.startsWith("text")) {
        responseType_ = "text";
      } else if (this.configuration.isJsonMime(localVarHttpHeaderAcceptSelected)) {
        responseType_ = "json";
      } else {
        responseType_ = "blob";
      }
    }
    let localVarPath = `/entities/zones`;
    return this.httpClient.request("get", `${this.configuration.basePath}${localVarPath}`, {
      context: localVarHttpContext,
      params: localVarQueryParameters,
      responseType: responseType_,
      withCredentials: this.configuration.withCredentials,
      headers: localVarHeaders,
      observe,
      transferCache: localVarTransferCache,
      reportProgress
    });
  }
  updateZone(id, request, observe = "body", reportProgress = false, options) {
    if (id === null || id === void 0) {
      throw new Error("Required parameter id was null or undefined when calling updateZone.");
    }
    if (request === null || request === void 0) {
      throw new Error("Required parameter request was null or undefined when calling updateZone.");
    }
    let localVarHeaders = this.defaultHeaders;
    let localVarCredential;
    localVarCredential = this.configuration.lookupCredential("access_token");
    if (localVarCredential) {
      localVarHeaders = localVarHeaders.set("x-access-token", localVarCredential);
    }
    let localVarHttpHeaderAcceptSelected = options && options.httpHeaderAccept;
    if (localVarHttpHeaderAcceptSelected === void 0) {
      const httpHeaderAccepts = [
        "application/json"
      ];
      localVarHttpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
    }
    if (localVarHttpHeaderAcceptSelected !== void 0) {
      localVarHeaders = localVarHeaders.set("Accept", localVarHttpHeaderAcceptSelected);
    }
    let localVarHttpContext = options && options.context;
    if (localVarHttpContext === void 0) {
      localVarHttpContext = new HttpContext();
    }
    let localVarTransferCache = options && options.transferCache;
    if (localVarTransferCache === void 0) {
      localVarTransferCache = true;
    }
    const consumes = [
      "application/json"
    ];
    const httpContentTypeSelected = this.configuration.selectHeaderContentType(consumes);
    if (httpContentTypeSelected !== void 0) {
      localVarHeaders = localVarHeaders.set("Content-Type", httpContentTypeSelected);
    }
    let responseType_ = "json";
    if (localVarHttpHeaderAcceptSelected) {
      if (localVarHttpHeaderAcceptSelected.startsWith("text")) {
        responseType_ = "text";
      } else if (this.configuration.isJsonMime(localVarHttpHeaderAcceptSelected)) {
        responseType_ = "json";
      } else {
        responseType_ = "blob";
      }
    }
    let localVarPath = `/entities/zones/${this.configuration.encodeParam({ name: "id", value: id, in: "path", style: "simple", explode: false, dataType: "string", dataFormat: void 0 })}`;
    return this.httpClient.request("put", `${this.configuration.basePath}${localVarPath}`, {
      context: localVarHttpContext,
      body: request,
      responseType: responseType_,
      withCredentials: this.configuration.withCredentials,
      headers: localVarHeaders,
      observe,
      transferCache: localVarTransferCache,
      reportProgress
    });
  }
  static \u0275fac = function ZonesService_Factory(__ngFactoryType__) {
    return new (__ngFactoryType__ || _ZonesService)(\u0275\u0275inject(HttpClient), \u0275\u0275inject(BASE_PATH, 8), \u0275\u0275inject(Configuration, 8));
  };
  static \u0275prov = /* @__PURE__ */ \u0275\u0275defineInjectable({ token: _ZonesService, factory: _ZonesService.\u0275fac, providedIn: "root" });
};
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(ZonesService, [{
    type: Injectable,
    args: [{
      providedIn: "root"
    }]
  }], () => [{ type: HttpClient }, { type: void 0, decorators: [{
    type: Optional
  }, {
    type: Inject,
    args: [BASE_PATH]
  }] }, { type: Configuration, decorators: [{
    type: Optional
  }] }], null);
})();

// src/app/api/model/alertAction.ts
var AlertAction;
(function(AlertAction2) {
  AlertAction2.TypeEnum = {
    RequestVideo: "request_video",
    RequestPhoto: "request_photo",
    LabelCurrentTrip: "label_current_trip"
  };
})(AlertAction || (AlertAction = {}));

// src/app/api/model/alertCreateRequest.ts
var AlertCreateRequest;
(function(AlertCreateRequest2) {
  AlertCreateRequest2.StateEnum = {
    Active: "active",
    Deleted: "deleted"
  };
  AlertCreateRequest2.PriorityEnum = {
    Low: "low",
    Medium: "medium",
    High: "high"
  };
})(AlertCreateRequest || (AlertCreateRequest = {}));

// src/app/api/model/alertListItem.ts
var AlertListItem;
(function(AlertListItem2) {
  AlertListItem2.StateEnum = {
    Active: "active",
    Deleted: "deleted"
  };
  AlertListItem2.PriorityEnum = {
    Low: "low",
    Medium: "medium",
    High: "high"
  };
})(AlertListItem || (AlertListItem = {}));

// src/app/api/model/alertNotify.ts
var AlertNotify;
(function(AlertNotify2) {
  AlertNotify2.TypeEnum = {
    User: "user",
    Role: "role"
  };
})(AlertNotify || (AlertNotify = {}));

// src/app/api/model/alertResponse.ts
var AlertResponse;
(function(AlertResponse2) {
  AlertResponse2.StateEnum = {
    Active: "active",
    Deleted: "deleted"
  };
  AlertResponse2.PriorityEnum = {
    Low: "low",
    Medium: "medium",
    High: "high"
  };
})(AlertResponse || (AlertResponse = {}));

// src/app/api/model/alertUpdateRequest.ts
var AlertUpdateRequest;
(function(AlertUpdateRequest2) {
  AlertUpdateRequest2.StateEnum = {
    Active: "active",
    Deleted: "deleted"
  };
  AlertUpdateRequest2.PriorityEnum = {
    Low: "low",
    Medium: "medium",
    High: "high"
  };
})(AlertUpdateRequest || (AlertUpdateRequest = {}));

// src/app/api/model/analyticsBaseReportResponse.ts
var AnalyticsBaseReportResponse;
(function(AnalyticsBaseReportResponse2) {
  AnalyticsBaseReportResponse2.StatusEnum = {
    Queued: "queued",
    Running: "running",
    Completed: "completed",
    Aborted: "aborted",
    Failed: "failed",
    Retry: "retry"
  };
  AnalyticsBaseReportResponse2.ModeEnum = {
    Single: "single",
    Repeat: "repeat"
  };
})(AnalyticsBaseReportResponse || (AnalyticsBaseReportResponse = {}));

// src/app/api/model/analyticsDataSourceOptions.ts
var AnalyticsDataSourceOptions;
(function(AnalyticsDataSourceOptions2) {
  AnalyticsDataSourceOptions2.RollupEnum = {
    Hour: "hour",
    Day: "day"
  };
})(AnalyticsDataSourceOptions || (AnalyticsDataSourceOptions = {}));

// src/app/api/model/analyticsDimension.ts
var AnalyticsDimension;
(function(AnalyticsDimension2) {
  AnalyticsDimension2.DimEnum = {
    Time: "time",
    Asset: "asset",
    CostCentre: "costCentre",
    ZoneCostCentre: "zoneCostCentre",
    AssetGroup: "assetGroup",
    ZoneGroup: "zoneGroup",
    Device: "device",
    IoType: "ioType",
    Alert: "alert",
    Event: "event",
    AssetState: "assetState",
    AssetCategory0: "assetCategory0",
    AssetCategory1: "assetCategory1",
    AssetCategory2: "assetCategory2",
    AssetCategory3: "assetCategory3",
    AssetCategory4: "assetCategory4",
    Overspeed: "overspeed",
    Shift: "shift",
    Company: "company",
    Geography: "geography",
    DeviceType: "deviceType"
  };
})(AnalyticsDimension || (AnalyticsDimension = {}));

// src/app/api/model/analyticsOutputFilter.ts
var AnalyticsOutputFilter;
(function(AnalyticsOutputFilter2) {
  AnalyticsOutputFilter2.ModeEnum = {
    Include: "include",
    Exclude: "exclude",
    Range: "range"
  };
})(AnalyticsOutputFilter || (AnalyticsOutputFilter = {}));

// src/app/api/model/analyticsOutputRequest.ts
var AnalyticsOutputRequest;
(function(AnalyticsOutputRequest2) {
  AnalyticsOutputRequest2.RowEnum = {
    Time: "time",
    Asset: "asset",
    CostCentre: "costCentre",
    ZoneCostCentre: "zoneCostCentre",
    AssetGroup: "assetGroup",
    ZoneGroup: "zoneGroup",
    Device: "device",
    IoType: "ioType",
    Alert: "alert",
    Event: "event",
    AssetState: "assetState",
    AssetCategory0: "assetCategory0",
    AssetCategory1: "assetCategory1",
    AssetCategory2: "assetCategory2",
    AssetCategory3: "assetCategory3",
    AssetCategory4: "assetCategory4",
    Overspeed: "overspeed",
    Shift: "shift",
    Company: "company",
    Geography: "geography",
    DeviceType: "deviceType"
  };
  AnalyticsOutputRequest2.GroupEnum = {
    Time: "time",
    Asset: "asset",
    CostCentre: "costCentre",
    ZoneCostCentre: "zoneCostCentre",
    AssetGroup: "assetGroup",
    ZoneGroup: "zoneGroup",
    Device: "device",
    IoType: "ioType",
    Alert: "alert",
    Event: "event",
    AssetState: "assetState",
    AssetCategory0: "assetCategory0",
    AssetCategory1: "assetCategory1",
    AssetCategory2: "assetCategory2",
    AssetCategory3: "assetCategory3",
    AssetCategory4: "assetCategory4",
    Overspeed: "overspeed",
    Shift: "shift",
    Company: "company",
    Geography: "geography",
    DeviceType: "deviceType"
  };
})(AnalyticsOutputRequest || (AnalyticsOutputRequest = {}));

// src/app/api/model/analyticsOutputSettings.ts
var AnalyticsOutputSettings;
(function(AnalyticsOutputSettings2) {
  AnalyticsOutputSettings2.TimeOptionsEnum = {
    Days: "days",
    Hours: "hours"
  };
})(AnalyticsOutputSettings || (AnalyticsOutputSettings = {}));

// src/app/api/model/analyticsSettingsRequest.ts
var AnalyticsSettingsRequest;
(function(AnalyticsSettingsRequest2) {
  AnalyticsSettingsRequest2.RowEnum = {
    Time: "time",
    Asset: "asset",
    CostCentre: "costCentre",
    ZoneCostCentre: "zoneCostCentre",
    AssetGroup: "assetGroup",
    ZoneGroup: "zoneGroup",
    Device: "device",
    IoType: "ioType",
    Alert: "alert",
    Event: "event",
    AssetState: "assetState",
    AssetCategory0: "assetCategory0",
    AssetCategory1: "assetCategory1",
    AssetCategory2: "assetCategory2",
    AssetCategory3: "assetCategory3",
    AssetCategory4: "assetCategory4",
    Overspeed: "overspeed",
    Shift: "shift",
    Company: "company",
    Geography: "geography",
    DeviceType: "deviceType"
  };
  AnalyticsSettingsRequest2.GroupEnum = {
    Time: "time",
    Asset: "asset",
    CostCentre: "costCentre",
    ZoneCostCentre: "zoneCostCentre",
    AssetGroup: "assetGroup",
    ZoneGroup: "zoneGroup",
    Device: "device",
    IoType: "ioType",
    Alert: "alert",
    Event: "event",
    AssetState: "assetState",
    AssetCategory0: "assetCategory0",
    AssetCategory1: "assetCategory1",
    AssetCategory2: "assetCategory2",
    AssetCategory3: "assetCategory3",
    AssetCategory4: "assetCategory4",
    Overspeed: "overspeed",
    Shift: "shift",
    Company: "company",
    Geography: "geography",
    DeviceType: "deviceType"
  };
})(AnalyticsSettingsRequest || (AnalyticsSettingsRequest = {}));

// src/app/api/model/analyticsSortOptions.ts
var AnalyticsSortOptions;
(function(AnalyticsSortOptions2) {
  AnalyticsSortOptions2.TypeEnum = {
    Alphabetic: "alphabetic",
    Numeric: "numeric"
  };
  AnalyticsSortOptions2.DirectionEnum = {
    Asc: "asc",
    Desc: "desc"
  };
})(AnalyticsSortOptions || (AnalyticsSortOptions = {}));

// src/app/api/model/assetCreateRequest.ts
var AssetCreateRequest;
(function(AssetCreateRequest2) {
  AssetCreateRequest2.ColorEnum = {
    Blue: "blue",
    Lightblue: "lightblue",
    Green: "green",
    Olive: "olive",
    Orange: "orange",
    Pink: "pink",
    Purple: "purple",
    Red: "red",
    Teal: "teal",
    Yellow: "yellow",
    White: "white",
    Gray: "gray"
  };
  AssetCreateRequest2.StateEnum = {
    Inactive: "inactive",
    Active: "active",
    Suspended: "suspended",
    Deleted: "deleted"
  };
})(AssetCreateRequest || (AssetCreateRequest = {}));

// src/app/api/model/assetListItem.ts
var AssetListItem;
(function(AssetListItem2) {
  AssetListItem2.ColorEnum = {
    Blue: "blue",
    Lightblue: "lightblue",
    Green: "green",
    Olive: "olive",
    Orange: "orange",
    Pink: "pink",
    Purple: "purple",
    Red: "red",
    Teal: "teal",
    Yellow: "yellow",
    White: "white",
    Gray: "gray"
  };
  AssetListItem2.StateEnum = {
    Inactive: "inactive",
    Active: "active",
    Suspended: "suspended",
    Deleted: "deleted"
  };
})(AssetListItem || (AssetListItem = {}));

// src/app/api/model/assetRatingProfileCreateRequest.ts
var AssetRatingProfileCreateRequest;
(function(AssetRatingProfileCreateRequest2) {
  AssetRatingProfileCreateRequest2.StateEnum = {
    Active: "active",
    Deleted: "deleted"
  };
})(AssetRatingProfileCreateRequest || (AssetRatingProfileCreateRequest = {}));

// src/app/api/model/assetRatingProfileListItem.ts
var AssetRatingProfileListItem;
(function(AssetRatingProfileListItem2) {
  AssetRatingProfileListItem2.StateEnum = {
    Active: "active",
    Deleted: "deleted"
  };
})(AssetRatingProfileListItem || (AssetRatingProfileListItem = {}));

// src/app/api/model/assetRatingProfileResponse.ts
var AssetRatingProfileResponse;
(function(AssetRatingProfileResponse2) {
  AssetRatingProfileResponse2.StateEnum = {
    Active: "active",
    Deleted: "deleted"
  };
})(AssetRatingProfileResponse || (AssetRatingProfileResponse = {}));

// src/app/api/model/assetRatingProfileUpdateRequest.ts
var AssetRatingProfileUpdateRequest;
(function(AssetRatingProfileUpdateRequest2) {
  AssetRatingProfileUpdateRequest2.StateEnum = {
    Active: "active",
    Deleted: "deleted"
  };
})(AssetRatingProfileUpdateRequest || (AssetRatingProfileUpdateRequest = {}));

// src/app/api/model/assetResponse.ts
var AssetResponse;
(function(AssetResponse2) {
  AssetResponse2.ColorEnum = {
    Blue: "blue",
    Lightblue: "lightblue",
    Green: "green",
    Olive: "olive",
    Orange: "orange",
    Pink: "pink",
    Purple: "purple",
    Red: "red",
    Teal: "teal",
    Yellow: "yellow",
    White: "white",
    Gray: "gray"
  };
  AssetResponse2.StateEnum = {
    Inactive: "inactive",
    Active: "active",
    Suspended: "suspended",
    Deleted: "deleted"
  };
})(AssetResponse || (AssetResponse = {}));

// src/app/api/model/assetStateProfileCreateRequest.ts
var AssetStateProfileCreateRequest;
(function(AssetStateProfileCreateRequest2) {
  AssetStateProfileCreateRequest2.StateEnum = {
    Active: "active",
    Deleted: "deleted"
  };
})(AssetStateProfileCreateRequest || (AssetStateProfileCreateRequest = {}));

// src/app/api/model/assetStateProfileListItem.ts
var AssetStateProfileListItem;
(function(AssetStateProfileListItem2) {
  AssetStateProfileListItem2.StateEnum = {
    Active: "active",
    Deleted: "deleted"
  };
})(AssetStateProfileListItem || (AssetStateProfileListItem = {}));

// src/app/api/model/assetStateProfileResponse.ts
var AssetStateProfileResponse;
(function(AssetStateProfileResponse2) {
  AssetStateProfileResponse2.StateEnum = {
    Active: "active",
    Deleted: "deleted"
  };
})(AssetStateProfileResponse || (AssetStateProfileResponse = {}));

// src/app/api/model/assetStateProfileUpdateRequest.ts
var AssetStateProfileUpdateRequest;
(function(AssetStateProfileUpdateRequest2) {
  AssetStateProfileUpdateRequest2.StateEnum = {
    Active: "active",
    Deleted: "deleted"
  };
})(AssetStateProfileUpdateRequest || (AssetStateProfileUpdateRequest = {}));

// src/app/api/model/assetTagCreateRequest.ts
var AssetTagCreateRequest;
(function(AssetTagCreateRequest2) {
  AssetTagCreateRequest2.ModeEnum = {
    Movable: "movable",
    Fixed: "fixed",
    Stock: "stock"
  };
  AssetTagCreateRequest2.StateEnum = {
    Active: "active",
    Deleted: "deleted"
  };
})(AssetTagCreateRequest || (AssetTagCreateRequest = {}));

// src/app/api/model/assetTagListItem.ts
var AssetTagListItem;
(function(AssetTagListItem2) {
  AssetTagListItem2.ModeEnum = {
    Movable: "movable",
    Fixed: "fixed",
    Stock: "stock"
  };
  AssetTagListItem2.StateEnum = {
    Active: "active",
    Deleted: "deleted"
  };
})(AssetTagListItem || (AssetTagListItem = {}));

// src/app/api/model/assetTagResponse.ts
var AssetTagResponse;
(function(AssetTagResponse2) {
  AssetTagResponse2.ModeEnum = {
    Movable: "movable",
    Fixed: "fixed",
    Stock: "stock"
  };
  AssetTagResponse2.StateEnum = {
    Active: "active",
    Deleted: "deleted"
  };
})(AssetTagResponse || (AssetTagResponse = {}));

// src/app/api/model/assetTagUpdateRequest.ts
var AssetTagUpdateRequest;
(function(AssetTagUpdateRequest2) {
  AssetTagUpdateRequest2.ModeEnum = {
    Movable: "movable",
    Fixed: "fixed",
    Stock: "stock"
  };
  AssetTagUpdateRequest2.StateEnum = {
    Active: "active",
    Deleted: "deleted"
  };
})(AssetTagUpdateRequest || (AssetTagUpdateRequest = {}));

// src/app/api/model/assetUpdateRequest.ts
var AssetUpdateRequest;
(function(AssetUpdateRequest2) {
  AssetUpdateRequest2.ColorEnum = {
    Blue: "blue",
    Lightblue: "lightblue",
    Green: "green",
    Olive: "olive",
    Orange: "orange",
    Pink: "pink",
    Purple: "purple",
    Red: "red",
    Teal: "teal",
    Yellow: "yellow",
    White: "white",
    Gray: "gray"
  };
  AssetUpdateRequest2.StateEnum = {
    Inactive: "inactive",
    Active: "active",
    Suspended: "suspended",
    Deleted: "deleted"
  };
})(AssetUpdateRequest || (AssetUpdateRequest = {}));

// src/app/api/model/assetZoneTarget.ts
var AssetZoneTarget;
(function(AssetZoneTarget2) {
  AssetZoneTarget2.ZoneTypeEnum = {
    Location: "location",
    Keepin: "keepin",
    Nogo: "nogo",
    Route: "route"
  };
  AssetZoneTarget2.TargetSelectionTypeEnum = {
    Any: "any",
    Group: "group",
    Specific: "specific"
  };
})(AssetZoneTarget || (AssetZoneTarget = {}));

// src/app/api/model/auditEventChange.ts
var AuditEventChange;
(function(AuditEventChange2) {
  AuditEventChange2.ActionEnum = {
    Added: "added",
    Modified: "modified",
    Removed: "removed"
  };
})(AuditEventChange || (AuditEventChange = {}));

// src/app/api/model/auditEventResponse.ts
var AuditEventResponse;
(function(AuditEventResponse2) {
  AuditEventResponse2.EventTypeEnum = {
    Created: "created",
    Modified: "modified",
    Deleted: "deleted"
  };
})(AuditEventResponse || (AuditEventResponse = {}));

// src/app/api/model/authEndpoint.ts
var AuthEndpoint;
(function(AuthEndpoint2) {
  AuthEndpoint2.TypeEnum = {
    Local: "local",
    Oidc: "oidc"
  };
})(AuthEndpoint || (AuthEndpoint = {}));

// src/app/api/model/authInfo.ts
var AuthInfo;
(function(AuthInfo2) {
  AuthInfo2.AvailableAuthEnum = {
    Local: "local",
    Oidc: "oidc"
  };
})(AuthInfo || (AuthInfo = {}));

// src/app/api/model/calculatedMeasure.ts
var CalculatedMeasure;
(function(CalculatedMeasure2) {
  CalculatedMeasure2.FormatEnum = {
    Distance: "distance",
    Speed: "speed",
    Volume: "volume",
    Number: "number",
    Integer: "integer",
    Duration: "duration",
    Consumption: "consumption",
    DistanceRate: "distanceRate"
  };
})(CalculatedMeasure || (CalculatedMeasure = {}));

// src/app/api/model/cellProperties.ts
var CellProperties;
(function(CellProperties2) {
  CellProperties2.TypeEnum = {
    Average: "average",
    Max: "max",
    Min: "min",
    Total: "total",
    Data: "data"
  };
})(CellProperties || (CellProperties = {}));

// src/app/api/model/cellSet.ts
var CellSet;
(function(CellSet2) {
  CellSet2.StatusEnum = {
    Error: "error",
    Running: "running",
    Generating: "generating",
    Completed: "completed"
  };
})(CellSet || (CellSet = {}));

// src/app/api/model/cellValue.ts
var CellValue;
(function(CellValue2) {
  CellValue2.TypeEnum = {
    DataCell: "DATA_CELL",
    RowHeader: "ROW_HEADER",
    RowHeaderHeader: "ROW_HEADER_HEADER",
    ColumnHeader: "COLUMN_HEADER",
    ColumnHeaderHeader: "COLUMN_HEADER_HEADER"
  };
})(CellValue || (CellValue = {}));

// src/app/api/model/chartSeriesItem.ts
var ChartSeriesItem;
(function(ChartSeriesItem2) {
  ChartSeriesItem2.OrientationEnum = {
    Horizontal: "horizontal",
    Vertical: "vertical"
  };
  ChartSeriesItem2.YAxisEnum = {
    Left: "left",
    Right: "right"
  };
})(ChartSeriesItem || (ChartSeriesItem = {}));

// src/app/api/model/chartXAxisLabels.ts
var ChartXAxisLabels;
(function(ChartXAxisLabels2) {
  ChartXAxisLabels2.LayoutEnum = {
    Horizontal: "horizontal",
    Auto: "auto"
  };
})(ChartXAxisLabels || (ChartXAxisLabels = {}));

// src/app/api/model/clientCreateRequest.ts
var ClientCreateRequest;
(function(ClientCreateRequest2) {
  ClientCreateRequest2.StateEnum = {
    Inactive: "inactive",
    Active: "active",
    Suspended: "suspended",
    Deleted: "deleted"
  };
})(ClientCreateRequest || (ClientCreateRequest = {}));

// src/app/api/model/clientListItem.ts
var ClientListItem;
(function(ClientListItem2) {
  ClientListItem2.StateEnum = {
    Inactive: "inactive",
    Active: "active",
    Suspended: "suspended",
    Deleted: "deleted"
  };
})(ClientListItem || (ClientListItem = {}));

// src/app/api/model/clientMeasurementUnits.ts
var ClientMeasurementUnits;
(function(ClientMeasurementUnits2) {
  ClientMeasurementUnits2.DistanceUnitEnum = {
    Kilometres: "kilometres",
    Metres: "metres",
    Feet: "feet",
    Inches: "inches",
    Miles: "miles",
    NauticalMiles: "nauticalMiles",
    Yards: "yards"
  };
  ClientMeasurementUnits2.AltitudeUnitEnum = {
    Metres: "metres",
    Kilometres: "kilometres",
    Feet: "feet",
    Inches: "inches",
    Miles: "miles",
    NauticalMiles: "nauticalMiles",
    Yards: "yards"
  };
  ClientMeasurementUnits2.SpeedUnitEnum = {
    KilometresPerHour: "kilometresPerHour",
    MetresPerSecond: "metresPerSecond",
    MilesPerHour: "milesPerHour",
    Knots: "knots"
  };
  ClientMeasurementUnits2.AreaUnitEnum = {
    SquareKilometres: "squareKilometres",
    Acres: "acres",
    Hectares: "hectares",
    SquareFeet: "squareFeet",
    Squaremetres: "squaremetres",
    SquareInches: "squareInches",
    SquareMiles: "squareMiles",
    SquareYards: "squareYards"
  };
  ClientMeasurementUnits2.VolumeUnitEnum = {
    Litres: "litres",
    Cubicmetres: "cubicmetres",
    CubicFeet: "cubicFeet",
    Gallons: "gallons",
    Ounces: "ounces",
    GallonsUs: "gallonsUs",
    OuncesUs: "ouncesUs"
  };
  ClientMeasurementUnits2.WeightUnitEnum = {
    Kilograms: "kilograms",
    Ounces: "ounces",
    Pounds: "pounds",
    Tonnes: "tonnes"
  };
  ClientMeasurementUnits2.TimeUnitEnum = {
    HHmmss: "HHmmss",
    Hmmss: "Hmmss",
    Hmmssa: "hmmssa"
  };
  ClientMeasurementUnits2.DateUnitEnum = {
    Yyyymmdd1: "yyyymmdd1",
    Yyyymmdd2: "yyyymmdd2",
    Yyyymmdd3: "yyyymmdd3",
    Ddmmyyyy1: "ddmmyyyy1",
    Ddmmyyyy2: "ddmmyyyy2",
    Ddmmyyyy3: "ddmmyyyy3",
    Dmyyyy1: "dmyyyy1",
    Dmyyyy2: "dmyyyy2",
    Dmyyyy3: "dmyyyy3",
    Mmddyyyy1: "mmddyyyy1",
    Mdyyyy1: "mdyyyy1"
  };
  ClientMeasurementUnits2.TemperatureUnitEnum = {
    Celsius: "celsius",
    Fahrenheit: "fahrenheit"
  };
})(ClientMeasurementUnits || (ClientMeasurementUnits = {}));

// src/app/api/model/clientResponse.ts
var ClientResponse;
(function(ClientResponse2) {
  ClientResponse2.StateEnum = {
    Inactive: "inactive",
    Active: "active",
    Suspended: "suspended",
    Deleted: "deleted"
  };
})(ClientResponse || (ClientResponse = {}));

// src/app/api/model/clientUpdateRequest.ts
var ClientUpdateRequest;
(function(ClientUpdateRequest2) {
  ClientUpdateRequest2.StateEnum = {
    Inactive: "inactive",
    Active: "active",
    Suspended: "suspended",
    Deleted: "deleted"
  };
})(ClientUpdateRequest || (ClientUpdateRequest = {}));

// src/app/api/model/companyDataRetentionSettings.ts
var CompanyDataRetentionSettings;
(function(CompanyDataRetentionSettings2) {
  CompanyDataRetentionSettings2.RetainForUnitEnum = {
    Days: "days",
    Months: "months",
    Years: "years"
  };
})(CompanyDataRetentionSettings || (CompanyDataRetentionSettings = {}));

// src/app/api/model/companyResponse.ts
var CompanyResponse;
(function(CompanyResponse2) {
  CompanyResponse2.StateEnum = {
    Inactive: "inactive",
    Active: "active",
    Suspended: "suspended",
    Deleted: "deleted"
  };
  CompanyResponse2.TypeEnum = {
    Distributor: "distributor",
    Vendor: "vendor",
    Client: "client"
  };
})(CompanyResponse || (CompanyResponse = {}));

// src/app/api/model/completedReportResponse.ts
var CompletedReportResponse;
(function(CompletedReportResponse2) {
  CompletedReportResponse2.SourceEnum = {
    Dataset: "dataset",
    Analytics: "analytics"
  };
  CompletedReportResponse2.StatusEnum = {
    Queued: "queued",
    Running: "running",
    Completed: "completed",
    Aborted: "aborted",
    Failed: "failed",
    Retry: "retry"
  };
  CompletedReportResponse2.OutputFormatEnum = {
    Pdf: "pdf",
    Xlsx: "xlsx",
    Xml: "xml",
    Csv: "csv",
    Raw: "raw",
    Json: "json",
    RawCompact: "raw_compact",
    Source: "source"
  };
  CompletedReportResponse2.TriggeredByEnum = {
    User: "user",
    Schedule: "schedule",
    Dashboard: "dashboard"
  };
})(CompletedReportResponse || (CompletedReportResponse = {}));

// src/app/api/model/contact.ts
var Contact;
(function(Contact2) {
  Contact2.TypeEnum = {
    Emergency: "emergency",
    Administrative: "administrative",
    Technical: "technical",
    Operational: "operational",
    Management: "management",
    Owner: "owner"
  };
})(Contact || (Contact = {}));

// src/app/api/model/dashboardCreateRequest.ts
var DashboardCreateRequest;
(function(DashboardCreateRequest2) {
  DashboardCreateRequest2.LevelEnum = {
    System: "system",
    Distributor: "distributor",
    Vendor: "vendor",
    Client: "client"
  };
})(DashboardCreateRequest || (DashboardCreateRequest = {}));

// src/app/api/model/dashboardListItem.ts
var DashboardListItem;
(function(DashboardListItem2) {
  DashboardListItem2.LevelEnum = {
    System: "system",
    Distributor: "distributor",
    Vendor: "vendor",
    Client: "client"
  };
})(DashboardListItem || (DashboardListItem = {}));

// src/app/api/model/dashboardResponse.ts
var DashboardResponse;
(function(DashboardResponse2) {
  DashboardResponse2.LevelEnum = {
    System: "system",
    Distributor: "distributor",
    Vendor: "vendor",
    Client: "client"
  };
})(DashboardResponse || (DashboardResponse = {}));

// src/app/api/model/dashboardTemplateListItem.ts
var DashboardTemplateListItem;
(function(DashboardTemplateListItem2) {
  DashboardTemplateListItem2.StateEnum = {
    Active: "active",
    Deleted: "deleted"
  };
})(DashboardTemplateListItem || (DashboardTemplateListItem = {}));

// src/app/api/model/dashboardTemplateResponse.ts
var DashboardTemplateResponse;
(function(DashboardTemplateResponse2) {
  DashboardTemplateResponse2.StateEnum = {
    Active: "active",
    Deleted: "deleted"
  };
})(DashboardTemplateResponse || (DashboardTemplateResponse = {}));

// src/app/api/model/dashboardTemplateUpdateRequest.ts
var DashboardTemplateUpdateRequest;
(function(DashboardTemplateUpdateRequest2) {
  DashboardTemplateUpdateRequest2.StateEnum = {
    Active: "active",
    Deleted: "deleted"
  };
})(DashboardTemplateUpdateRequest || (DashboardTemplateUpdateRequest = {}));

// src/app/api/model/dashboardUpdateRequest.ts
var DashboardUpdateRequest;
(function(DashboardUpdateRequest2) {
  DashboardUpdateRequest2.LevelEnum = {
    System: "system",
    Distributor: "distributor",
    Vendor: "vendor",
    Client: "client"
  };
})(DashboardUpdateRequest || (DashboardUpdateRequest = {}));

// src/app/api/model/dashboardWidget.ts
var DashboardWidget;
(function(DashboardWidget2) {
  DashboardWidget2.WidgetTypeEnum = {
    Chart: "chart",
    Grid: "grid",
    Text: "text",
    Stat: "stat",
    Pie: "pie"
  };
})(DashboardWidget || (DashboardWidget = {}));

// src/app/api/model/dashboardWidgetDataSource.ts
var DashboardWidgetDataSource;
(function(DashboardWidgetDataSource2) {
  DashboardWidgetDataSource2.TypeEnum = {
    Report: "analytics-report",
    Mock: "analytics-mock"
  };
})(DashboardWidgetDataSource || (DashboardWidgetDataSource = {}));

// src/app/api/model/deviceBitmapConfiguration.ts
var DeviceBitmapConfiguration;
(function(DeviceBitmapConfiguration2) {
  DeviceBitmapConfiguration2.TargetTypeEnum = {
    DigitalInput: "digital_input",
    DigitalOutput: "digital_output",
    CanInput: "can_input",
    ValueInput: "value_input"
  };
})(DeviceBitmapConfiguration || (DeviceBitmapConfiguration = {}));

// src/app/api/model/deviceConfigProfileCreateRequest.ts
var DeviceConfigProfileCreateRequest;
(function(DeviceConfigProfileCreateRequest2) {
  DeviceConfigProfileCreateRequest2.StateEnum = {
    Active: "active",
    Deleted: "deleted"
  };
})(DeviceConfigProfileCreateRequest || (DeviceConfigProfileCreateRequest = {}));

// src/app/api/model/deviceConfigProfileListItem.ts
var DeviceConfigProfileListItem;
(function(DeviceConfigProfileListItem2) {
  DeviceConfigProfileListItem2.StateEnum = {
    Active: "active",
    Deleted: "deleted"
  };
})(DeviceConfigProfileListItem || (DeviceConfigProfileListItem = {}));

// src/app/api/model/deviceConfigProfileResponse.ts
var DeviceConfigProfileResponse;
(function(DeviceConfigProfileResponse2) {
  DeviceConfigProfileResponse2.StateEnum = {
    Active: "active",
    Deleted: "deleted"
  };
})(DeviceConfigProfileResponse || (DeviceConfigProfileResponse = {}));

// src/app/api/model/deviceConfigProfileUpdateRequest.ts
var DeviceConfigProfileUpdateRequest;
(function(DeviceConfigProfileUpdateRequest2) {
  DeviceConfigProfileUpdateRequest2.StateEnum = {
    Active: "active",
    Deleted: "deleted"
  };
})(DeviceConfigProfileUpdateRequest || (DeviceConfigProfileUpdateRequest = {}));

// src/app/api/model/deviceCreateRequest.ts
var DeviceCreateRequest;
(function(DeviceCreateRequest2) {
  DeviceCreateRequest2.StateEnum = {
    Inactive: "inactive",
    Active: "active",
    Suspended: "suspended",
    Deleted: "deleted"
  };
})(DeviceCreateRequest || (DeviceCreateRequest = {}));

// src/app/api/model/deviceListItem.ts
var DeviceListItem;
(function(DeviceListItem2) {
  DeviceListItem2.StateEnum = {
    Inactive: "inactive",
    Active: "active",
    Suspended: "suspended",
    Deleted: "deleted"
  };
})(DeviceListItem || (DeviceListItem = {}));

// src/app/api/model/deviceProviderCreateRequest.ts
var DeviceProviderCreateRequest;
(function(DeviceProviderCreateRequest2) {
  DeviceProviderCreateRequest2.StateEnum = {
    Active: "active",
    Suspended: "suspended",
    Deleted: "deleted"
  };
})(DeviceProviderCreateRequest || (DeviceProviderCreateRequest = {}));

// src/app/api/model/deviceProviderListItem.ts
var DeviceProviderListItem;
(function(DeviceProviderListItem2) {
  DeviceProviderListItem2.StateEnum = {
    Active: "active",
    Suspended: "suspended",
    Deleted: "deleted"
  };
})(DeviceProviderListItem || (DeviceProviderListItem = {}));

// src/app/api/model/deviceProviderResponse.ts
var DeviceProviderResponse;
(function(DeviceProviderResponse2) {
  DeviceProviderResponse2.StateEnum = {
    Active: "active",
    Suspended: "suspended",
    Deleted: "deleted"
  };
})(DeviceProviderResponse || (DeviceProviderResponse = {}));

// src/app/api/model/deviceProviderTypeListItem.ts
var DeviceProviderTypeListItem;
(function(DeviceProviderTypeListItem2) {
  DeviceProviderTypeListItem2.StateEnum = {
    Active: "active",
    Suspended: "suspended",
    Deleted: "deleted"
  };
})(DeviceProviderTypeListItem || (DeviceProviderTypeListItem = {}));

// src/app/api/model/deviceProviderTypeResponse.ts
var DeviceProviderTypeResponse;
(function(DeviceProviderTypeResponse2) {
  DeviceProviderTypeResponse2.StateEnum = {
    Active: "active",
    Suspended: "suspended",
    Deleted: "deleted"
  };
})(DeviceProviderTypeResponse || (DeviceProviderTypeResponse = {}));

// src/app/api/model/deviceProviderUpdateRequest.ts
var DeviceProviderUpdateRequest;
(function(DeviceProviderUpdateRequest2) {
  DeviceProviderUpdateRequest2.StateEnum = {
    Active: "active",
    Suspended: "suspended",
    Deleted: "deleted"
  };
})(DeviceProviderUpdateRequest || (DeviceProviderUpdateRequest = {}));

// src/app/api/model/deviceResponse.ts
var DeviceResponse;
(function(DeviceResponse2) {
  DeviceResponse2.StateEnum = {
    Inactive: "inactive",
    Active: "active",
    Suspended: "suspended",
    Deleted: "deleted"
  };
})(DeviceResponse || (DeviceResponse = {}));

// src/app/api/model/deviceTypeCreateRequest.ts
var DeviceTypeCreateRequest;
(function(DeviceTypeCreateRequest2) {
  DeviceTypeCreateRequest2.StateEnum = {
    Active: "active",
    Deleted: "deleted"
  };
})(DeviceTypeCreateRequest || (DeviceTypeCreateRequest = {}));

// src/app/api/model/deviceTypeListItem.ts
var DeviceTypeListItem;
(function(DeviceTypeListItem2) {
  DeviceTypeListItem2.StateEnum = {
    Active: "active",
    Deleted: "deleted"
  };
})(DeviceTypeListItem || (DeviceTypeListItem = {}));

// src/app/api/model/deviceTypeResponse.ts
var DeviceTypeResponse;
(function(DeviceTypeResponse2) {
  DeviceTypeResponse2.StateEnum = {
    Active: "active",
    Deleted: "deleted"
  };
})(DeviceTypeResponse || (DeviceTypeResponse = {}));

// src/app/api/model/deviceTypeUpdateRequest.ts
var DeviceTypeUpdateRequest;
(function(DeviceTypeUpdateRequest2) {
  DeviceTypeUpdateRequest2.StateEnum = {
    Active: "active",
    Deleted: "deleted"
  };
})(DeviceTypeUpdateRequest || (DeviceTypeUpdateRequest = {}));

// src/app/api/model/deviceUpdateRequest.ts
var DeviceUpdateRequest;
(function(DeviceUpdateRequest2) {
  DeviceUpdateRequest2.StateEnum = {
    Inactive: "inactive",
    Active: "active",
    Suspended: "suspended",
    Deleted: "deleted"
  };
})(DeviceUpdateRequest || (DeviceUpdateRequest = {}));

// src/app/api/model/distributorCreateRequest.ts
var DistributorCreateRequest;
(function(DistributorCreateRequest2) {
  DistributorCreateRequest2.StateEnum = {
    Inactive: "inactive",
    Active: "active",
    Suspended: "suspended",
    Deleted: "deleted"
  };
})(DistributorCreateRequest || (DistributorCreateRequest = {}));

// src/app/api/model/distributorListItem.ts
var DistributorListItem;
(function(DistributorListItem2) {
  DistributorListItem2.StateEnum = {
    Inactive: "inactive",
    Active: "active",
    Suspended: "suspended",
    Deleted: "deleted"
  };
})(DistributorListItem || (DistributorListItem = {}));

// src/app/api/model/distributorResponse.ts
var DistributorResponse;
(function(DistributorResponse2) {
  DistributorResponse2.StateEnum = {
    Inactive: "inactive",
    Active: "active",
    Suspended: "suspended",
    Deleted: "deleted"
  };
})(DistributorResponse || (DistributorResponse = {}));

// src/app/api/model/distributorUpdateRequest.ts
var DistributorUpdateRequest;
(function(DistributorUpdateRequest2) {
  DistributorUpdateRequest2.StateEnum = {
    Inactive: "inactive",
    Active: "active",
    Suspended: "suspended",
    Deleted: "deleted"
  };
})(DistributorUpdateRequest || (DistributorUpdateRequest = {}));

// src/app/api/model/emailProviderCreateRequest.ts
var EmailProviderCreateRequest;
(function(EmailProviderCreateRequest2) {
  EmailProviderCreateRequest2.StateEnum = {
    Active: "active",
    Suspended: "suspended",
    Deleted: "deleted"
  };
})(EmailProviderCreateRequest || (EmailProviderCreateRequest = {}));

// src/app/api/model/emailProviderListItem.ts
var EmailProviderListItem;
(function(EmailProviderListItem2) {
  EmailProviderListItem2.StateEnum = {
    Active: "active",
    Suspended: "suspended",
    Deleted: "deleted"
  };
})(EmailProviderListItem || (EmailProviderListItem = {}));

// src/app/api/model/emailProviderResponse.ts
var EmailProviderResponse;
(function(EmailProviderResponse2) {
  EmailProviderResponse2.StateEnum = {
    Active: "active",
    Suspended: "suspended",
    Deleted: "deleted"
  };
})(EmailProviderResponse || (EmailProviderResponse = {}));

// src/app/api/model/emailProviderTypeListItem.ts
var EmailProviderTypeListItem;
(function(EmailProviderTypeListItem2) {
  EmailProviderTypeListItem2.StateEnum = {
    Active: "active",
    Deleted: "deleted"
  };
})(EmailProviderTypeListItem || (EmailProviderTypeListItem = {}));

// src/app/api/model/emailProviderTypeResponse.ts
var EmailProviderTypeResponse;
(function(EmailProviderTypeResponse2) {
  EmailProviderTypeResponse2.StateEnum = {
    Active: "active",
    Deleted: "deleted"
  };
})(EmailProviderTypeResponse || (EmailProviderTypeResponse = {}));

// src/app/api/model/emailProviderUpdateRequest.ts
var EmailProviderUpdateRequest;
(function(EmailProviderUpdateRequest2) {
  EmailProviderUpdateRequest2.StateEnum = {
    Active: "active",
    Suspended: "suspended",
    Deleted: "deleted"
  };
})(EmailProviderUpdateRequest || (EmailProviderUpdateRequest = {}));

// src/app/api/model/emailServerConfiguration.ts
var EmailServerConfiguration;
(function(EmailServerConfiguration2) {
  EmailServerConfiguration2.StateEnum = {
    Active: "active",
    Suspended: "suspended"
  };
})(EmailServerConfiguration || (EmailServerConfiguration = {}));

// src/app/api/model/eventActorFilter.ts
var EventActorFilter;
(function(EventActorFilter2) {
  EventActorFilter2.ActorTypeEnum = {
    Asset: "asset",
    User: "user",
    Client: "client"
  };
  EventActorFilter2.ActorSelectionTypeEnum = {
    Any: "any",
    Group: "group",
    AccessGroup: "accessGroup",
    Specific: "specific"
  };
})(EventActorFilter || (EventActorFilter = {}));

// src/app/api/model/eventMedia.ts
var EventMedia;
(function(EventMedia2) {
  EventMedia2.MediaTypeEnum = {
    Video: "video",
    Photo: "photo"
  };
})(EventMedia || (EventMedia = {}));

// src/app/api/model/eventTargetFilter.ts
var EventTargetFilter;
(function(EventTargetFilter2) {
  EventTargetFilter2.TargetSelectionTypeEnum = {
    Any: "any",
    Group: "group",
    Specific: "specific"
  };
})(EventTargetFilter || (EventTargetFilter = {}));

// src/app/api/model/exportTaskCreateRequest.ts
var ExportTaskCreateRequest;
(function(ExportTaskCreateRequest2) {
  ExportTaskCreateRequest2.StateEnum = {
    Suspended: "suspended",
    Active: "active",
    Deleted: "deleted"
  };
  ExportTaskCreateRequest2.DeliveryMethodEnum = {
    Http: "http",
    Stream: "stream",
    Firehose: "firehose"
  };
  ExportTaskCreateRequest2.DocumentVersionEnum = {
    V1: "v1",
    V2: "v2"
  };
})(ExportTaskCreateRequest || (ExportTaskCreateRequest = {}));

// src/app/api/model/exportTaskListItem.ts
var ExportTaskListItem;
(function(ExportTaskListItem2) {
  ExportTaskListItem2.StateEnum = {
    Suspended: "suspended",
    Active: "active",
    Deleted: "deleted"
  };
  ExportTaskListItem2.DeliveryMethodEnum = {
    Http: "http",
    Stream: "stream",
    Firehose: "firehose"
  };
  ExportTaskListItem2.DocumentVersionEnum = {
    V1: "v1",
    V2: "v2"
  };
})(ExportTaskListItem || (ExportTaskListItem = {}));

// src/app/api/model/exportTaskResponse.ts
var ExportTaskResponse;
(function(ExportTaskResponse2) {
  ExportTaskResponse2.StateEnum = {
    Suspended: "suspended",
    Active: "active",
    Deleted: "deleted"
  };
  ExportTaskResponse2.DeliveryMethodEnum = {
    Http: "http",
    Stream: "stream",
    Firehose: "firehose"
  };
  ExportTaskResponse2.DocumentVersionEnum = {
    V1: "v1",
    V2: "v2"
  };
})(ExportTaskResponse || (ExportTaskResponse = {}));

// src/app/api/model/exportTaskUpdateRequest.ts
var ExportTaskUpdateRequest;
(function(ExportTaskUpdateRequest2) {
  ExportTaskUpdateRequest2.StateEnum = {
    Suspended: "suspended",
    Active: "active",
    Deleted: "deleted"
  };
  ExportTaskUpdateRequest2.DeliveryMethodEnum = {
    Http: "http",
    Stream: "stream",
    Firehose: "firehose"
  };
  ExportTaskUpdateRequest2.DocumentVersionEnum = {
    V1: "v1",
    V2: "v2"
  };
})(ExportTaskUpdateRequest || (ExportTaskUpdateRequest = {}));

// src/app/api/model/forwardGeocodeResult.ts
var ForwardGeocodeResult;
(function(ForwardGeocodeResult2) {
  ForwardGeocodeResult2.TypeEnum = {
    Location: "location",
    Keepin: "keepin",
    Nogo: "nogo",
    Route: "route",
    Address: "address"
  };
})(ForwardGeocodeResult || (ForwardGeocodeResult = {}));

// src/app/api/model/fuelCardCreateRequest.ts
var FuelCardCreateRequest;
(function(FuelCardCreateRequest2) {
  FuelCardCreateRequest2.StateEnum = {
    Inactive: "inactive",
    Active: "active",
    Suspended: "suspended",
    Deleted: "deleted"
  };
})(FuelCardCreateRequest || (FuelCardCreateRequest = {}));

// src/app/api/model/fuelCardListItem.ts
var FuelCardListItem;
(function(FuelCardListItem2) {
  FuelCardListItem2.StateEnum = {
    Inactive: "inactive",
    Active: "active",
    Suspended: "suspended",
    Deleted: "deleted"
  };
})(FuelCardListItem || (FuelCardListItem = {}));

// src/app/api/model/fuelCardResponse.ts
var FuelCardResponse;
(function(FuelCardResponse2) {
  FuelCardResponse2.StateEnum = {
    Inactive: "inactive",
    Active: "active",
    Suspended: "suspended",
    Deleted: "deleted"
  };
})(FuelCardResponse || (FuelCardResponse = {}));

// src/app/api/model/fuelCardUpdateRequest.ts
var FuelCardUpdateRequest;
(function(FuelCardUpdateRequest2) {
  FuelCardUpdateRequest2.StateEnum = {
    Inactive: "inactive",
    Active: "active",
    Suspended: "suspended",
    Deleted: "deleted"
  };
})(FuelCardUpdateRequest || (FuelCardUpdateRequest = {}));

// src/app/api/model/geoLockProfileCreateRequest.ts
var GeoLockProfileCreateRequest;
(function(GeoLockProfileCreateRequest2) {
  GeoLockProfileCreateRequest2.StateEnum = {
    Active: "active",
    Deleted: "deleted"
  };
})(GeoLockProfileCreateRequest || (GeoLockProfileCreateRequest = {}));

// src/app/api/model/geoLockProfileListItem.ts
var GeoLockProfileListItem;
(function(GeoLockProfileListItem2) {
  GeoLockProfileListItem2.StateEnum = {
    Active: "active",
    Deleted: "deleted"
  };
})(GeoLockProfileListItem || (GeoLockProfileListItem = {}));

// src/app/api/model/geoLockProfileResponse.ts
var GeoLockProfileResponse;
(function(GeoLockProfileResponse2) {
  GeoLockProfileResponse2.StateEnum = {
    Active: "active",
    Deleted: "deleted"
  };
})(GeoLockProfileResponse || (GeoLockProfileResponse = {}));

// src/app/api/model/geoLockProfileUpdateRequest.ts
var GeoLockProfileUpdateRequest;
(function(GeoLockProfileUpdateRequest2) {
  GeoLockProfileUpdateRequest2.StateEnum = {
    Active: "active",
    Deleted: "deleted"
  };
})(GeoLockProfileUpdateRequest || (GeoLockProfileUpdateRequest = {}));

// src/app/api/model/idNameState.ts
var IdNameState;
(function(IdNameState2) {
  IdNameState2.StateEnum = {
    Active: "active",
    Inactive: "inactive",
    Suspended: "suspended",
    Deleted: "deleted"
  };
})(IdNameState || (IdNameState = {}));

// src/app/api/model/ioTypeCreateRequest.ts
var IoTypeCreateRequest;
(function(IoTypeCreateRequest2) {
  IoTypeCreateRequest2.StateEnum = {
    Active: "active",
    Deleted: "deleted"
  };
  IoTypeCreateRequest2.TypeEnum = {
    DigitalInput: "digital_input",
    DigitalOutput: "digital_output",
    AnalogInput: "analog_input",
    TemperatureInput: "temperature_input",
    CanInput: "can_input",
    CounterInput: "counter_input",
    CameraInput: "camera_input",
    ValueInput: "value_input"
  };
  IoTypeCreateRequest2.SmoothingTypeEnum = {
    None: "none",
    MovingAverage5: "moving_average_5",
    MovingAverage10: "moving_average_10",
    MovingAverage20: "moving_average_20",
    MovingAverage50: "moving_average_50",
    MovingAverage100: "moving_average_100",
    MovingAverage200: "moving_average_200"
  };
})(IoTypeCreateRequest || (IoTypeCreateRequest = {}));

// src/app/api/model/ioTypeListItem.ts
var IoTypeListItem;
(function(IoTypeListItem2) {
  IoTypeListItem2.StateEnum = {
    Active: "active",
    Deleted: "deleted"
  };
  IoTypeListItem2.TypeEnum = {
    DigitalInput: "digital_input",
    DigitalOutput: "digital_output",
    AnalogInput: "analog_input",
    TemperatureInput: "temperature_input",
    CanInput: "can_input",
    CounterInput: "counter_input",
    CameraInput: "camera_input",
    ValueInput: "value_input"
  };
  IoTypeListItem2.SmoothingTypeEnum = {
    None: "none",
    MovingAverage5: "moving_average_5",
    MovingAverage10: "moving_average_10",
    MovingAverage20: "moving_average_20",
    MovingAverage50: "moving_average_50",
    MovingAverage100: "moving_average_100",
    MovingAverage200: "moving_average_200"
  };
})(IoTypeListItem || (IoTypeListItem = {}));

// src/app/api/model/ioTypeRateConfig.ts
var IoTypeRateConfig;
(function(IoTypeRateConfig2) {
  IoTypeRateConfig2.TypeEnum = {
    None: "none",
    ValPerKm: "val_per_km",
    KmPerVal: "km_per_val",
    ValPerMile: "val_per_mile",
    MilePerVal: "mile_per_val",
    ValPerHour: "val_per_hour",
    HourPerVal: "hour_per_val"
  };
})(IoTypeRateConfig || (IoTypeRateConfig = {}));

// src/app/api/model/ioTypeResponse.ts
var IoTypeResponse;
(function(IoTypeResponse2) {
  IoTypeResponse2.StateEnum = {
    Active: "active",
    Deleted: "deleted"
  };
  IoTypeResponse2.TypeEnum = {
    DigitalInput: "digital_input",
    DigitalOutput: "digital_output",
    AnalogInput: "analog_input",
    TemperatureInput: "temperature_input",
    CanInput: "can_input",
    CounterInput: "counter_input",
    CameraInput: "camera_input",
    ValueInput: "value_input"
  };
  IoTypeResponse2.SmoothingTypeEnum = {
    None: "none",
    MovingAverage5: "moving_average_5",
    MovingAverage10: "moving_average_10",
    MovingAverage20: "moving_average_20",
    MovingAverage50: "moving_average_50",
    MovingAverage100: "moving_average_100",
    MovingAverage200: "moving_average_200"
  };
})(IoTypeResponse || (IoTypeResponse = {}));

// src/app/api/model/ioTypeUpdateRequest.ts
var IoTypeUpdateRequest;
(function(IoTypeUpdateRequest2) {
  IoTypeUpdateRequest2.StateEnum = {
    Active: "active",
    Deleted: "deleted"
  };
  IoTypeUpdateRequest2.TypeEnum = {
    DigitalInput: "digital_input",
    DigitalOutput: "digital_output",
    AnalogInput: "analog_input",
    TemperatureInput: "temperature_input",
    CanInput: "can_input",
    CounterInput: "counter_input",
    CameraInput: "camera_input",
    ValueInput: "value_input"
  };
  IoTypeUpdateRequest2.SmoothingTypeEnum = {
    None: "none",
    MovingAverage5: "moving_average_5",
    MovingAverage10: "moving_average_10",
    MovingAverage20: "moving_average_20",
    MovingAverage50: "moving_average_50",
    MovingAverage100: "moving_average_100",
    MovingAverage200: "moving_average_200"
  };
})(IoTypeUpdateRequest || (IoTypeUpdateRequest = {}));

// src/app/api/model/labelCreateRequest.ts
var LabelCreateRequest;
(function(LabelCreateRequest2) {
  LabelCreateRequest2.StateEnum = {
    Active: "active",
    Deleted: "deleted"
  };
})(LabelCreateRequest || (LabelCreateRequest = {}));

// src/app/api/model/labelListItem.ts
var LabelListItem;
(function(LabelListItem2) {
  LabelListItem2.StateEnum = {
    Active: "active",
    Deleted: "deleted"
  };
})(LabelListItem || (LabelListItem = {}));

// src/app/api/model/labelResponse.ts
var LabelResponse;
(function(LabelResponse2) {
  LabelResponse2.StateEnum = {
    Active: "active",
    Deleted: "deleted"
  };
})(LabelResponse || (LabelResponse = {}));

// src/app/api/model/labelUpdateRequest.ts
var LabelUpdateRequest;
(function(LabelUpdateRequest2) {
  LabelUpdateRequest2.StateEnum = {
    Active: "active",
    Deleted: "deleted"
  };
})(LabelUpdateRequest || (LabelUpdateRequest = {}));

// src/app/api/model/mapRoute.ts
var MapRoute;
(function(MapRoute2) {
  MapRoute2.StrategyEnum = {
    Fastest: "fastest",
    Shortest: "shortest"
  };
})(MapRoute || (MapRoute = {}));

// src/app/api/model/mapSetLayer.ts
var MapSetLayer;
(function(MapSetLayer2) {
  MapSetLayer2.ServerTypeEnum = {
    Google: "google",
    Wms: "wms",
    Osm: "osm",
    Wmts: "wmts",
    Dds: "dds",
    Tms: "tms",
    Mbs: "mbs"
  };
  MapSetLayer2.ImageTypeEnum = {
    Png: "png",
    Jpg: "jpg",
    Jpeg: "jpeg",
    Gif: "gif",
    Mvt: "mvt"
  };
})(MapSetLayer || (MapSetLayer = {}));

// src/app/api/model/mapSetListItem.ts
var MapSetListItem;
(function(MapSetListItem2) {
  MapSetListItem2.StateEnum = {
    Active: "active",
    Deleted: "deleted"
  };
})(MapSetListItem || (MapSetListItem = {}));

// src/app/api/model/mapSetResponse.ts
var MapSetResponse;
(function(MapSetResponse2) {
  MapSetResponse2.StateEnum = {
    Active: "active",
    Deleted: "deleted"
  };
})(MapSetResponse || (MapSetResponse = {}));

// src/app/api/model/mapsetCreateRequest.ts
var MapsetCreateRequest;
(function(MapsetCreateRequest2) {
  MapsetCreateRequest2.StateEnum = {
    Active: "active",
    Deleted: "deleted"
  };
})(MapsetCreateRequest || (MapsetCreateRequest = {}));

// src/app/api/model/mapsetUpdateRequest.ts
var MapsetUpdateRequest;
(function(MapsetUpdateRequest2) {
  MapsetUpdateRequest2.StateEnum = {
    Active: "active",
    Deleted: "deleted"
  };
})(MapsetUpdateRequest || (MapsetUpdateRequest = {}));

// src/app/api/model/measureDescription.ts
var MeasureDescription;
(function(MeasureDescription2) {
  MeasureDescription2.FormatEnum = {
    Duration: "duration",
    Number: "number",
    Integer: "integer",
    Percent: "percent"
  };
})(MeasureDescription || (MeasureDescription = {}));

// src/app/api/model/mediaInfoResponse.ts
var MediaInfoResponse;
(function(MediaInfoResponse2) {
  MediaInfoResponse2.StatusEnum = {
    Queued: "queued",
    Pending: "pending",
    Uploading: "uploading",
    Available: "available",
    Downloading: "downloading",
    Processing: "processing",
    Ready: "ready",
    Failed: "failed",
    Unavailable: "unavailable",
    Canceled: "canceled",
    Deleted: "deleted"
  };
})(MediaInfoResponse || (MediaInfoResponse = {}));

// src/app/api/model/notificationActions.ts
var NotificationActions;
(function(NotificationActions2) {
  NotificationActions2.LowEnum = {
    None: "none",
    Email: "email",
    Sms: "sms",
    Emailsms: "emailsms"
  };
  NotificationActions2.MediumEnum = {
    None: "none",
    Email: "email",
    Sms: "sms",
    Emailsms: "emailsms"
  };
  NotificationActions2.HighEnum = {
    None: "none",
    Email: "email",
    Sms: "sms",
    Emailsms: "emailsms"
  };
})(NotificationActions || (NotificationActions = {}));

// src/app/api/model/oTPSettings.ts
var OTPSettings;
(function(OTPSettings2) {
  OTPSettings2.MandatoryForEnum = {
    Optional: "optional",
    Everyone: "everyone",
    Administrators: "administrators"
  };
})(OTPSettings || (OTPSettings = {}));

// src/app/api/model/overspeedProfileCreateRequest.ts
var OverspeedProfileCreateRequest;
(function(OverspeedProfileCreateRequest2) {
  OverspeedProfileCreateRequest2.StateEnum = {
    Active: "active",
    Deleted: "deleted"
  };
})(OverspeedProfileCreateRequest || (OverspeedProfileCreateRequest = {}));

// src/app/api/model/overspeedProfileListItem.ts
var OverspeedProfileListItem;
(function(OverspeedProfileListItem2) {
  OverspeedProfileListItem2.StateEnum = {
    Active: "active",
    Deleted: "deleted"
  };
})(OverspeedProfileListItem || (OverspeedProfileListItem = {}));

// src/app/api/model/overspeedProfileResponse.ts
var OverspeedProfileResponse;
(function(OverspeedProfileResponse2) {
  OverspeedProfileResponse2.StateEnum = {
    Active: "active",
    Deleted: "deleted"
  };
})(OverspeedProfileResponse || (OverspeedProfileResponse = {}));

// src/app/api/model/overspeedProfileUpdateRequest.ts
var OverspeedProfileUpdateRequest;
(function(OverspeedProfileUpdateRequest2) {
  OverspeedProfileUpdateRequest2.StateEnum = {
    Active: "active",
    Deleted: "deleted"
  };
})(OverspeedProfileUpdateRequest || (OverspeedProfileUpdateRequest = {}));

// src/app/api/model/pieChartOptions.ts
var PieChartOptions;
(function(PieChartOptions2) {
  PieChartOptions2.DataEnum = {
    Average: "average",
    Total: "total"
  };
})(PieChartOptions || (PieChartOptions = {}));

// src/app/api/model/policyStatement.ts
var PolicyStatement;
(function(PolicyStatement2) {
  PolicyStatement2.EffectEnum = {
    Allow: "allow",
    Deny: "deny"
  };
})(PolicyStatement || (PolicyStatement = {}));

// src/app/api/model/queueReportRequest.ts
var QueueReportRequest;
(function(QueueReportRequest2) {
  QueueReportRequest2.SourceEnum = {
    Dataset: "dataset",
    Analytics: "analytics"
  };
  QueueReportRequest2.OutputFormatEnum = {
    Pdf: "pdf",
    Xlsx: "xlsx",
    Xml: "xml",
    Csv: "csv",
    Raw: "raw",
    Json: "json",
    RawCompact: "raw_compact",
    Source: "source"
  };
})(QueueReportRequest || (QueueReportRequest = {}));

// src/app/api/model/queuedReportResponse.ts
var QueuedReportResponse;
(function(QueuedReportResponse2) {
  QueuedReportResponse2.SourceEnum = {
    Dataset: "dataset",
    Analytics: "analytics"
  };
  QueuedReportResponse2.StatusEnum = {
    Queued: "queued",
    Running: "running",
    Completed: "completed",
    Aborted: "aborted",
    Failed: "failed",
    Retry: "retry"
  };
  QueuedReportResponse2.OutputFormatEnum = {
    Pdf: "pdf",
    Xlsx: "xlsx",
    Xml: "xml",
    Csv: "csv",
    Raw: "raw",
    Json: "json",
    RawCompact: "raw_compact",
    Source: "source"
  };
  QueuedReportResponse2.TriggeredByEnum = {
    User: "user",
    Schedule: "schedule",
    Dashboard: "dashboard"
  };
})(QueuedReportResponse || (QueuedReportResponse = {}));

// src/app/api/model/rebuildDashboardWidgetResponse.ts
var RebuildDashboardWidgetResponse;
(function(RebuildDashboardWidgetResponse2) {
  RebuildDashboardWidgetResponse2.StatusEnum = {
    Ok: "ok",
    Failed: "failed"
  };
})(RebuildDashboardWidgetResponse || (RebuildDashboardWidgetResponse = {}));

// src/app/api/model/reminderCreateRequest.ts
var ReminderCreateRequest;
(function(ReminderCreateRequest2) {
  ReminderCreateRequest2.TypeEnum = {
    Odo: "odo",
    Hours: "hours",
    Time: "time"
  };
  ReminderCreateRequest2.ModeEnum = {
    Once: "once",
    Repeating: "repeating"
  };
})(ReminderCreateRequest || (ReminderCreateRequest = {}));

// src/app/api/model/reminderListItem.ts
var ReminderListItem;
(function(ReminderListItem2) {
  ReminderListItem2.TypeEnum = {
    Odo: "odo",
    Hours: "hours",
    Time: "time"
  };
  ReminderListItem2.ModeEnum = {
    Once: "once",
    Repeating: "repeating"
  };
})(ReminderListItem || (ReminderListItem = {}));

// src/app/api/model/reminderReset.ts
var ReminderReset;
(function(ReminderReset2) {
  ReminderReset2.TypeEnum = {
    None: "none",
    Daily: "daily",
    Weekly: "weekly",
    Monthly: "monthly"
  };
})(ReminderReset || (ReminderReset = {}));

// src/app/api/model/reminderResponse.ts
var ReminderResponse;
(function(ReminderResponse2) {
  ReminderResponse2.TypeEnum = {
    Odo: "odo",
    Hours: "hours",
    Time: "time"
  };
  ReminderResponse2.ModeEnum = {
    Once: "once",
    Repeating: "repeating"
  };
})(ReminderResponse || (ReminderResponse = {}));

// src/app/api/model/reminderUpdateRequest.ts
var ReminderUpdateRequest;
(function(ReminderUpdateRequest2) {
  ReminderUpdateRequest2.TypeEnum = {
    Odo: "odo",
    Hours: "hours",
    Time: "time"
  };
  ReminderUpdateRequest2.ModeEnum = {
    Once: "once",
    Repeating: "repeating"
  };
})(ReminderUpdateRequest || (ReminderUpdateRequest = {}));

// src/app/api/model/reportDefinitionColumnOptions.ts
var ReportDefinitionColumnOptions;
(function(ReportDefinitionColumnOptions2) {
  ReportDefinitionColumnOptions2.AlignEnum = {
    Left: "Left",
    Center: "Center",
    Right: "Right"
  };
})(ReportDefinitionColumnOptions || (ReportDefinitionColumnOptions = {}));

// src/app/api/model/reportDefinitionResponse.ts
var ReportDefinitionResponse;
(function(ReportDefinitionResponse2) {
  ReportDefinitionResponse2.SourceEnum = {
    Dataset: "dataset",
    Analytics: "analytics"
  };
})(ReportDefinitionResponse || (ReportDefinitionResponse = {}));

// src/app/api/model/reportTemplateConfig.ts
var ReportTemplateConfig;
(function(ReportTemplateConfig2) {
  ReportTemplateConfig2.OutputFormatEnum = {
    Pdf: "pdf",
    Xlsx: "xlsx",
    Xml: "xml",
    Csv: "csv",
    Raw: "raw",
    Json: "json",
    RawCompact: "raw_compact",
    Source: "source"
  };
})(ReportTemplateConfig || (ReportTemplateConfig = {}));

// src/app/api/model/reverseGeocodeResult.ts
var ReverseGeocodeResult;
(function(ReverseGeocodeResult2) {
  ReverseGeocodeResult2.TypeEnum = {
    Location: "location",
    Keepin: "keepin",
    Nogo: "nogo",
    Route: "route",
    Address: "address"
  };
})(ReverseGeocodeResult || (ReverseGeocodeResult = {}));

// src/app/api/model/roadProfileCreateRequest.ts
var RoadProfileCreateRequest;
(function(RoadProfileCreateRequest2) {
  RoadProfileCreateRequest2.StateEnum = {
    Active: "active",
    Deleted: "deleted"
  };
})(RoadProfileCreateRequest || (RoadProfileCreateRequest = {}));

// src/app/api/model/roadProfileListItem.ts
var RoadProfileListItem;
(function(RoadProfileListItem2) {
  RoadProfileListItem2.StateEnum = {
    Active: "active",
    Deleted: "deleted"
  };
})(RoadProfileListItem || (RoadProfileListItem = {}));

// src/app/api/model/roadProfileResponse.ts
var RoadProfileResponse;
(function(RoadProfileResponse2) {
  RoadProfileResponse2.StateEnum = {
    Active: "active",
    Deleted: "deleted"
  };
})(RoadProfileResponse || (RoadProfileResponse = {}));

// src/app/api/model/roadProfileUpdateRequest.ts
var RoadProfileUpdateRequest;
(function(RoadProfileUpdateRequest2) {
  RoadProfileUpdateRequest2.StateEnum = {
    Active: "active",
    Deleted: "deleted"
  };
})(RoadProfileUpdateRequest || (RoadProfileUpdateRequest = {}));

// src/app/api/model/roadSpeedModifierEntry.ts
var RoadSpeedModifierEntry;
(function(RoadSpeedModifierEntry2) {
  RoadSpeedModifierEntry2.UnitEnum = {
    Kmh: "kmh",
    Mph: "mph"
  };
})(RoadSpeedModifierEntry || (RoadSpeedModifierEntry = {}));

// src/app/api/model/schedule.ts
var Schedule;
(function(Schedule2) {
  Schedule2.ScheduleTypeEnum = {
    Once: "once",
    Hourly: "hourly",
    Daily: "daily",
    Weekly: "weekly",
    Monthly: "monthly"
  };
})(Schedule || (Schedule = {}));

// src/app/api/model/scheduledReportCreateRequest.ts
var ScheduledReportCreateRequest;
(function(ScheduledReportCreateRequest2) {
  ScheduledReportCreateRequest2.StateEnum = {
    Active: "active",
    Deleted: "deleted"
  };
  ScheduledReportCreateRequest2.ScheduleTypeEnum = {
    Report: "report",
    Analytics: "analytics"
  };
})(ScheduledReportCreateRequest || (ScheduledReportCreateRequest = {}));

// src/app/api/model/scheduledReportListItem.ts
var ScheduledReportListItem;
(function(ScheduledReportListItem2) {
  ScheduledReportListItem2.StateEnum = {
    Active: "active",
    Deleted: "deleted"
  };
  ScheduledReportListItem2.ScheduleTypeEnum = {
    Report: "report",
    Analytics: "analytics"
  };
})(ScheduledReportListItem || (ScheduledReportListItem = {}));

// src/app/api/model/scheduledReportReport.ts
var ScheduledReportReport;
(function(ScheduledReportReport2) {
  ScheduledReportReport2.OutputFormatEnum = {
    Pdf: "pdf",
    Xlsx: "xlsx",
    Xml: "xml",
    Csv: "csv",
    Raw: "raw",
    Json: "json",
    RawCompact: "raw_compact",
    Source: "source"
  };
})(ScheduledReportReport || (ScheduledReportReport = {}));

// src/app/api/model/scheduledReportResponse.ts
var ScheduledReportResponse;
(function(ScheduledReportResponse2) {
  ScheduledReportResponse2.StateEnum = {
    Active: "active",
    Deleted: "deleted"
  };
  ScheduledReportResponse2.ScheduleTypeEnum = {
    Report: "report",
    Analytics: "analytics"
  };
})(ScheduledReportResponse || (ScheduledReportResponse = {}));

// src/app/api/model/scheduledReportUpdateRequest.ts
var ScheduledReportUpdateRequest;
(function(ScheduledReportUpdateRequest2) {
  ScheduledReportUpdateRequest2.StateEnum = {
    Active: "active",
    Deleted: "deleted"
  };
  ScheduledReportUpdateRequest2.ScheduleTypeEnum = {
    Report: "report",
    Analytics: "analytics"
  };
})(ScheduledReportUpdateRequest || (ScheduledReportUpdateRequest = {}));

// src/app/api/model/simCardCreateRequest.ts
var SimCardCreateRequest;
(function(SimCardCreateRequest2) {
  SimCardCreateRequest2.StateEnum = {
    Inactive: "inactive",
    Active: "active",
    Suspended: "suspended",
    Deleted: "deleted"
  };
})(SimCardCreateRequest || (SimCardCreateRequest = {}));

// src/app/api/model/simCardListItem.ts
var SimCardListItem;
(function(SimCardListItem2) {
  SimCardListItem2.StateEnum = {
    Inactive: "inactive",
    Active: "active",
    Suspended: "suspended",
    Deleted: "deleted"
  };
})(SimCardListItem || (SimCardListItem = {}));

// src/app/api/model/simCardResponse.ts
var SimCardResponse;
(function(SimCardResponse2) {
  SimCardResponse2.StateEnum = {
    Inactive: "inactive",
    Active: "active",
    Suspended: "suspended",
    Deleted: "deleted"
  };
})(SimCardResponse || (SimCardResponse = {}));

// src/app/api/model/simCardUpdateRequest.ts
var SimCardUpdateRequest;
(function(SimCardUpdateRequest2) {
  SimCardUpdateRequest2.StateEnum = {
    Inactive: "inactive",
    Active: "active",
    Suspended: "suspended",
    Deleted: "deleted"
  };
})(SimCardUpdateRequest || (SimCardUpdateRequest = {}));

// src/app/api/model/smsGatewayProviderCreateRequest.ts
var SmsGatewayProviderCreateRequest;
(function(SmsGatewayProviderCreateRequest2) {
  SmsGatewayProviderCreateRequest2.DirectionEnum = {
    Oneway: "oneway",
    Twoway: "twoway"
  };
  SmsGatewayProviderCreateRequest2.StateEnum = {
    Active: "active",
    Suspended: "suspended",
    Deleted: "deleted"
  };
})(SmsGatewayProviderCreateRequest || (SmsGatewayProviderCreateRequest = {}));

// src/app/api/model/smsGatewayProviderListItem.ts
var SmsGatewayProviderListItem;
(function(SmsGatewayProviderListItem2) {
  SmsGatewayProviderListItem2.DirectionEnum = {
    Oneway: "oneway",
    Twoway: "twoway"
  };
  SmsGatewayProviderListItem2.StateEnum = {
    Active: "active",
    Suspended: "suspended",
    Deleted: "deleted"
  };
})(SmsGatewayProviderListItem || (SmsGatewayProviderListItem = {}));

// src/app/api/model/smsGatewayProviderResponse.ts
var SmsGatewayProviderResponse;
(function(SmsGatewayProviderResponse2) {
  SmsGatewayProviderResponse2.DirectionEnum = {
    Oneway: "oneway",
    Twoway: "twoway"
  };
  SmsGatewayProviderResponse2.StateEnum = {
    Active: "active",
    Suspended: "suspended",
    Deleted: "deleted"
  };
})(SmsGatewayProviderResponse || (SmsGatewayProviderResponse = {}));

// src/app/api/model/smsGatewayProviderTypeListItem.ts
var SmsGatewayProviderTypeListItem;
(function(SmsGatewayProviderTypeListItem2) {
  SmsGatewayProviderTypeListItem2.DirectionEnum = {
    Oneway: "oneway",
    Twoway: "twoway"
  };
  SmsGatewayProviderTypeListItem2.StateEnum = {
    Active: "active",
    Deleted: "deleted"
  };
})(SmsGatewayProviderTypeListItem || (SmsGatewayProviderTypeListItem = {}));

// src/app/api/model/smsGatewayProviderTypeResponse.ts
var SmsGatewayProviderTypeResponse;
(function(SmsGatewayProviderTypeResponse2) {
  SmsGatewayProviderTypeResponse2.DirectionEnum = {
    Oneway: "oneway",
    Twoway: "twoway"
  };
  SmsGatewayProviderTypeResponse2.StateEnum = {
    Active: "active",
    Deleted: "deleted"
  };
})(SmsGatewayProviderTypeResponse || (SmsGatewayProviderTypeResponse = {}));

// src/app/api/model/smsGatewayProviderUpdateRequest.ts
var SmsGatewayProviderUpdateRequest;
(function(SmsGatewayProviderUpdateRequest2) {
  SmsGatewayProviderUpdateRequest2.DirectionEnum = {
    Oneway: "oneway",
    Twoway: "twoway"
  };
  SmsGatewayProviderUpdateRequest2.StateEnum = {
    Active: "active",
    Suspended: "suspended",
    Deleted: "deleted"
  };
})(SmsGatewayProviderUpdateRequest || (SmsGatewayProviderUpdateRequest = {}));

// src/app/api/model/sslCertificateCreateRequest.ts
var SslCertificateCreateRequest;
(function(SslCertificateCreateRequest2) {
  SslCertificateCreateRequest2.StateEnum = {
    Inactive: "inactive",
    Active: "active",
    Deleted: "deleted"
  };
})(SslCertificateCreateRequest || (SslCertificateCreateRequest = {}));

// src/app/api/model/sslCertificateListItem.ts
var SslCertificateListItem;
(function(SslCertificateListItem2) {
  SslCertificateListItem2.StateEnum = {
    Inactive: "inactive",
    Active: "active",
    Deleted: "deleted"
  };
})(SslCertificateListItem || (SslCertificateListItem = {}));

// src/app/api/model/sslCertificateResponse.ts
var SslCertificateResponse;
(function(SslCertificateResponse2) {
  SslCertificateResponse2.StateEnum = {
    Inactive: "inactive",
    Active: "active",
    Deleted: "deleted"
  };
})(SslCertificateResponse || (SslCertificateResponse = {}));

// src/app/api/model/sslCertificateUpdateRequest.ts
var SslCertificateUpdateRequest;
(function(SslCertificateUpdateRequest2) {
  SslCertificateUpdateRequest2.StateEnum = {
    Inactive: "inactive",
    Active: "active",
    Deleted: "deleted"
  };
})(SslCertificateUpdateRequest || (SslCertificateUpdateRequest = {}));

// src/app/api/model/statChartOptions.ts
var StatChartOptions;
(function(StatChartOptions2) {
  StatChartOptions2.DataEnum = {
    Average: "average",
    Total: "total",
    First: "first",
    Last: "last"
  };
  StatChartOptions2.TrendEnum = {
    None: "none",
    Percentage: "percentage",
    Actual: "actual"
  };
})(StatChartOptions || (StatChartOptions = {}));

// src/app/api/model/statsEntityOutputOptions.ts
var StatsEntityOutputOptions;
(function(StatsEntityOutputOptions2) {
  StatsEntityOutputOptions2.GroupLevelEnum = {
    All: "all",
    Type: "type",
    Name: "name",
    Company: "company",
    User: "user",
    Distributor: "distributor",
    Vendor: "vendor",
    Client: "client"
  };
  StatsEntityOutputOptions2.RowLevelEnum = {
    All: "all",
    Year: "year",
    Month: "month",
    Day: "day",
    Hour: "hour"
  };
})(StatsEntityOutputOptions || (StatsEntityOutputOptions = {}));

// src/app/api/model/targetLine.ts
var TargetLine;
(function(TargetLine2) {
  TargetLine2.TypeEnum = {
    Dashed: "dashed",
    Solid: "solid"
  };
})(TargetLine || (TargetLine = {}));

// src/app/api/model/taskResponse.ts
var TaskResponse;
(function(TaskResponse2) {
  TaskResponse2.StateEnum = {
    Pending: "pending",
    Executing: "executing",
    Waiting: "waiting",
    Success: "success",
    Canceling: "canceling",
    Canceled: "canceled",
    Failed: "failed",
    Timedout: "timedout",
    Deferred: "deferred"
  };
})(TaskResponse || (TaskResponse = {}));

// src/app/api/model/testNotificationsRequest.ts
var TestNotificationsRequest;
(function(TestNotificationsRequest2) {
  TestNotificationsRequest2.NotificationChannelsEnum = {
    Email: "email",
    Sms: "sms"
  };
})(TestNotificationsRequest || (TestNotificationsRequest = {}));

// src/app/api/model/themeCreateRequest.ts
var ThemeCreateRequest;
(function(ThemeCreateRequest2) {
  ThemeCreateRequest2.StateEnum = {
    Active: "active",
    Deleted: "deleted"
  };
})(ThemeCreateRequest || (ThemeCreateRequest = {}));

// src/app/api/model/themeCustomHTMLTag.ts
var ThemeCustomHTMLTag;
(function(ThemeCustomHTMLTag2) {
  ThemeCustomHTMLTag2.LocationEnum = {
    Head: "head",
    Body: "body"
  };
})(ThemeCustomHTMLTag || (ThemeCustomHTMLTag = {}));

// src/app/api/model/themeResponse.ts
var ThemeResponse;
(function(ThemeResponse2) {
  ThemeResponse2.StateEnum = {
    Active: "active",
    Deleted: "deleted"
  };
})(ThemeResponse || (ThemeResponse = {}));

// src/app/api/model/themeUpdateRequest.ts
var ThemeUpdateRequest;
(function(ThemeUpdateRequest2) {
  ThemeUpdateRequest2.StateEnum = {
    Active: "active",
    Deleted: "deleted"
  };
})(ThemeUpdateRequest || (ThemeUpdateRequest = {}));

// src/app/api/model/tripResponse.ts
var TripResponse;
(function(TripResponse2) {
  TripResponse2.TripTypeEnum = {
    Inactive: "inactive",
    Active: "active",
    Mixed: "mixed"
  };
})(TripResponse || (TripResponse = {}));

// src/app/api/model/userCreateRequest.ts
var UserCreateRequest;
(function(UserCreateRequest2) {
  UserCreateRequest2.StateEnum = {
    Inactive: "inactive",
    Active: "active",
    Suspended: "suspended",
    Deleted: "deleted"
  };
})(UserCreateRequest || (UserCreateRequest = {}));

// src/app/api/model/userCreateResponse.ts
var UserCreateResponse;
(function(UserCreateResponse2) {
  UserCreateResponse2.StateEnum = {
    Inactive: "inactive",
    Active: "active",
    Suspended: "suspended",
    Deleted: "deleted"
  };
})(UserCreateResponse || (UserCreateResponse = {}));

// src/app/api/model/userListItem.ts
var UserListItem;
(function(UserListItem2) {
  UserListItem2.StateEnum = {
    Inactive: "inactive",
    Active: "active",
    Suspended: "suspended",
    Deleted: "deleted"
  };
})(UserListItem || (UserListItem = {}));

// src/app/api/model/userProfileResponse.ts
var UserProfileResponse;
(function(UserProfileResponse2) {
  UserProfileResponse2.StateEnum = {
    Inactive: "inactive",
    Active: "active",
    Suspended: "suspended",
    Deleted: "deleted"
  };
})(UserProfileResponse || (UserProfileResponse = {}));

// src/app/api/model/userResetResponse.ts
var UserResetResponse;
(function(UserResetResponse2) {
  UserResetResponse2.StateEnum = {
    Inactive: "inactive",
    Active: "active",
    Suspended: "suspended",
    Deleted: "deleted"
  };
})(UserResetResponse || (UserResetResponse = {}));

// src/app/api/model/userResponse.ts
var UserResponse;
(function(UserResponse2) {
  UserResponse2.StateEnum = {
    Inactive: "inactive",
    Active: "active",
    Suspended: "suspended",
    Deleted: "deleted"
  };
})(UserResponse || (UserResponse = {}));

// src/app/api/model/userUpdateRequest.ts
var UserUpdateRequest;
(function(UserUpdateRequest2) {
  UserUpdateRequest2.StateEnum = {
    Inactive: "inactive",
    Active: "active",
    Suspended: "suspended",
    Deleted: "deleted"
  };
})(UserUpdateRequest || (UserUpdateRequest = {}));

// src/app/api/model/vendorCreateRequest.ts
var VendorCreateRequest;
(function(VendorCreateRequest2) {
  VendorCreateRequest2.StateEnum = {
    Inactive: "inactive",
    Active: "active",
    Suspended: "suspended",
    Deleted: "deleted"
  };
})(VendorCreateRequest || (VendorCreateRequest = {}));

// src/app/api/model/vendorListItem.ts
var VendorListItem;
(function(VendorListItem2) {
  VendorListItem2.StateEnum = {
    Inactive: "inactive",
    Active: "active",
    Suspended: "suspended",
    Deleted: "deleted"
  };
})(VendorListItem || (VendorListItem = {}));

// src/app/api/model/vendorResponse.ts
var VendorResponse;
(function(VendorResponse2) {
  VendorResponse2.StateEnum = {
    Inactive: "inactive",
    Active: "active",
    Suspended: "suspended",
    Deleted: "deleted"
  };
})(VendorResponse || (VendorResponse = {}));

// src/app/api/model/vendorUpdateRequest.ts
var VendorUpdateRequest;
(function(VendorUpdateRequest2) {
  VendorUpdateRequest2.StateEnum = {
    Inactive: "inactive",
    Active: "active",
    Suspended: "suspended",
    Deleted: "deleted"
  };
})(VendorUpdateRequest || (VendorUpdateRequest = {}));

// src/app/api/model/zoneCreateRequest.ts
var ZoneCreateRequest;
(function(ZoneCreateRequest2) {
  ZoneCreateRequest2.StateEnum = {
    Inactive: "inactive",
    Active: "active",
    Deleted: "deleted"
  };
  ZoneCreateRequest2.ZoneTypeEnum = {
    Location: "location",
    Keepin: "keepin",
    Nogo: "nogo",
    Route: "route"
  };
})(ZoneCreateRequest || (ZoneCreateRequest = {}));

// src/app/api/model/zoneListItem.ts
var ZoneListItem;
(function(ZoneListItem2) {
  ZoneListItem2.StateEnum = {
    Inactive: "inactive",
    Active: "active",
    Deleted: "deleted"
  };
  ZoneListItem2.ZoneTypeEnum = {
    Location: "location",
    Keepin: "keepin",
    Nogo: "nogo",
    Route: "route"
  };
})(ZoneListItem || (ZoneListItem = {}));

// src/app/api/model/zoneResponse.ts
var ZoneResponse;
(function(ZoneResponse2) {
  ZoneResponse2.StateEnum = {
    Inactive: "inactive",
    Active: "active",
    Deleted: "deleted"
  };
  ZoneResponse2.ZoneTypeEnum = {
    Location: "location",
    Keepin: "keepin",
    Nogo: "nogo",
    Route: "route"
  };
})(ZoneResponse || (ZoneResponse = {}));

// src/app/api/model/zoneUpdateRequest.ts
var ZoneUpdateRequest;
(function(ZoneUpdateRequest2) {
  ZoneUpdateRequest2.StateEnum = {
    Inactive: "inactive",
    Active: "active",
    Deleted: "deleted"
  };
  ZoneUpdateRequest2.ZoneTypeEnum = {
    Location: "location",
    Keepin: "keepin",
    Nogo: "nogo",
    Route: "route"
  };
})(ZoneUpdateRequest || (ZoneUpdateRequest = {}));

// src/app/shared/services/local-storage.service.ts
var LZString = __toESM(require_lz_string());
var StorageQuotaError = class extends Error {
  constructor(message) {
    super(message);
    this.name = "StorageQuotaError";
  }
};
var LocalStorageService = class _LocalStorageService {
  static MAX_ITEM_SIZE = 2 * 1024 * 1024;
  // 2MB
  static STORAGE_LIMIT = 5 * 1024 * 1024;
  // 5MB
  static COMPRESSION_THRESHOLD = 1024;
  // 1KB
  static CURRENT_VERSION = 1;
  // Keys that should be scoped per-user
  static USER_SCOPED_KEYS = /* @__PURE__ */ new Set([
    LOCAL_STORAGE_KEY_SELECTED_CLIENT,
    LOCAL_STORAGE_SIDEBAR_STATE_KEY
  ]);
  // Keys that should never be namespaced (truly global)
  static GLOBAL_KEYS = /* @__PURE__ */ new Set([
    LOCAL_STORAGE_LAST_AUTHENTICATED_USER_ID
  ]);
  // Keys that should only be namespaced by API (shared across users on same API)
  // Note: User sessions are API-scoped because they're available before profile loads
  static API_SCOPED_KEYS = /* @__PURE__ */ new Set([
    LOCAL_STORAGE_KEY_ACCESS_TOKEN,
    LOCAL_STORAGE_KEY_REFRESH_TOKEN,
    LOCAL_STORAGE_KEY_TOKEN_EXPIRY,
    LOCAL_STORAGE_KEY_USER_SESSION,
    LOCAL_STORAGE_KEY_SELECTED_CLIENT_ID
  ]);
  apiUrlService = inject(ApiUrlService);
  // Store current user ID internally to avoid circular dependency
  currentUserId = null;
  /**
   * Sets the current user ID for namespacing.
   * Should be called by AuthDataService after profile is loaded.
   */
  setCurrentUserId(userId) {
    this.currentUserId = userId;
  }
  /**
   * Gets the current user ID for namespacing.
   */
  getCurrentUserId() {
    return this.currentUserId;
  }
  /**
   * Generates a namespaced key based on scope requirements.
   * - GLOBAL_KEYS: No namespace
   * - API_SCOPED_KEYS: API URL hash only
   * - USER_SCOPED_KEYS: API URL hash + User ID
   * - Default: API URL hash + User ID
   *
   * @param key - The original key
   * @returns A namespaced key
   */
  generateNamespacedKey(key) {
    try {
      if (_LocalStorageService.GLOBAL_KEYS.has(key)) {
        return key;
      }
      const apiUrl = this.apiUrlService.getCurrentApiUrl();
      const apiHash = this.simpleHash(apiUrl);
      if (_LocalStorageService.API_SCOPED_KEYS.has(key)) {
        return `${apiHash}_${key}`;
      }
      if (_LocalStorageService.USER_SCOPED_KEYS.has(key)) {
        const userId2 = isDefined(this.currentUserId) ? this.currentUserId : "pending";
        return `${apiHash}_${userId2}_${key}`;
      }
      const userId = isDefined(this.currentUserId) ? this.currentUserId : "anonymous";
      return `${apiHash}_${userId}_${key}`;
    } catch (error) {
      console.warn("Could not generate namespaced key, using original key:", error);
      return key;
    }
  }
  /**
   * Simple hash function to create a short identifier from API URL
   */
  simpleHash(str) {
    let hash = 0;
    for (let i = 0; i < str.length; i++) {
      const char = str.codePointAt(i);
      if (char !== void 0) {
        hash = (hash << 5) - hash + char;
        hash = hash & hash;
      }
    }
    return Math.abs(hash).toString(36);
  }
  /**
   * Clears all user-scoped data for a specific user.
   * @param userId - The user ID whose data should be cleared (optional, uses current if not provided)
   */
  clearUserScopedData(userId) {
    try {
      const apiUrl = this.apiUrlService.getCurrentApiUrl();
      const apiHash = this.simpleHash(apiUrl);
      const targetUserId = userId ?? this.currentUserId ?? "pending";
      const prefix = `${apiHash}_${targetUserId}_`;
      const keysToRemove = [];
      for (let i = 0; i < localStorage.length; i++) {
        const key = localStorage.key(i);
        if (isDefined(key) && key.startsWith(prefix)) {
          keysToRemove.push(key);
        }
      }
      for (const key of keysToRemove) {
        localStorage.removeItem(key);
      }
    } catch (error) {
      console.error("Error clearing user-scoped data:", error);
    }
  }
  /**
   * Clears all API-scoped data (tokens, etc.) for the current API.
   * Used during logout to clear authentication state.
   */
  clearApiScopedData() {
    try {
      const apiUrl = this.apiUrlService.getCurrentApiUrl();
      const apiHash = this.simpleHash(apiUrl);
      for (const key of _LocalStorageService.API_SCOPED_KEYS) {
        const storageKey = `${apiHash}_${key}`;
        localStorage.removeItem(storageKey);
      }
    } catch (error) {
      console.error("Error clearing API-scoped data:", error);
    }
  }
  /**
   * Checks if there's a user mismatch (different user trying to access data).
   * Returns true if the last authenticated user is different from the current user.
   */
  detectUserMismatch(currentUserId) {
    const lastUserId = localStorage.getItem(LOCAL_STORAGE_LAST_AUTHENTICATED_USER_ID);
    return isDefined(lastUserId) && lastUserId !== currentUserId;
  }
  /**
   * Records the current authenticated user ID.
   */
  setLastAuthenticatedUserId(userId) {
    localStorage.setItem(LOCAL_STORAGE_LAST_AUTHENTICATED_USER_ID, userId);
  }
  /**
   * Migrates data from 'pending' namespace to actual user ID namespace.
   * Called after successful login when user profile becomes available.
   */
  migrateFromPendingToUser(userId) {
    try {
      const apiUrl = this.apiUrlService.getCurrentApiUrl();
      const apiHash = this.simpleHash(apiUrl);
      const pendingPrefix = `${apiHash}_pending_`;
      const userPrefix = `${apiHash}_${userId}_`;
      const keysToMigrate = [];
      for (let i = 0; i < localStorage.length; i++) {
        const key = localStorage.key(i);
        if (isDefined(key) && key.startsWith(pendingPrefix)) {
          const baseName = key.substring(pendingPrefix.length);
          keysToMigrate.push({
            old: key,
            new: `${userPrefix}${baseName}`
          });
        }
      }
      for (const { old: oldKey, new: newKey } of keysToMigrate) {
        const value = localStorage.getItem(oldKey);
        if (isDefined(value)) {
          localStorage.setItem(newKey, value);
          localStorage.removeItem(oldKey);
        }
      }
    } catch (error) {
      console.error("Error migrating from pending to user:", error);
    }
  }
  /**
   * Migrates an existing non-namespaced item to the current namespace.
   * This is useful for migrating existing user preferences and settings.
   *
   * @param key - The key of the item to migrate
   * @param removeOriginal - Whether to remove the original non-namespaced item (default: true)
   * @returns true if migration was successful, false if no data found to migrate
   */
  migrateToNamespace(key, removeOriginal = true) {
    try {
      const existingData = this.getItem(key, false);
      if (existingData === null) {
        return false;
      }
      this.setItem(key, existingData, void 0, true);
      if (removeOriginal) {
        this.removeItem(key, false);
      }
      return true;
    } catch (error) {
      console.error(`Failed to migrate localStorage key ${key}:`, error);
      return false;
    }
  }
  /**
   * Migrates multiple keys to the current namespace.
   *
   * @param keys - Array of keys to migrate
   * @param removeOriginals - Whether to remove original non-namespaced items (default: true)
   * @returns Object with migration results for each key
   */
  migrateMultipleToNamespace(keys, removeOriginals = true) {
    const results = {};
    for (const key of keys) {
      results[key] = this.migrateToNamespace(key, removeOriginals);
    }
    return results;
  }
  getItem(key, useNamespace = true) {
    try {
      const storageKey = useNamespace ? this.generateNamespacedKey(key) : key;
      const value = localStorage.getItem(storageKey);
      if (isNullOrUndefined(value))
        return null;
      let parsedValue;
      try {
        parsedValue = JSON.parse(value);
        if (!isObject(parsedValue) || !hasProperty(parsedValue, "metadata")) {
          return JSON.parse(value);
        }
      } catch {
        return value;
      }
      if (parsedValue.metadata.version !== _LocalStorageService.CURRENT_VERSION) {
        console.warn(`Version mismatch for key: ${key}`);
        this.removeItem(key);
        return null;
      }
      if (hasProperty(parsedValue.metadata, "expires") && isNumber(parsedValue.metadata.expires) && Date.now() > parsedValue.metadata.expires) {
        this.removeItem(key);
        return null;
      }
      let data = parsedValue.data;
      if (hasProperty(parsedValue.metadata, "compressed") && parsedValue.metadata.compressed === true) {
        if (isString(data)) {
          data = LZString.decompress(data);
        }
      }
      return isString(data) ? JSON.parse(data) : data;
    } catch (error) {
      console.warn(`Failed to retrieve item with key: ${key}`, error);
      return null;
    }
  }
  setItem(key, value, ttlMinutes, useNamespace = true) {
    if (!isString(key) || !this.validateKey(key)) {
      throw new Error("Invalid key provided");
    }
    const metadata = {
      version: _LocalStorageService.CURRENT_VERSION,
      timestamp: Date.now(),
      expires: isDefined(ttlMinutes) && isNumber(ttlMinutes) ? Date.now() + ttlMinutes * 60 * 1e3 : void 0
    };
    let stringValue = JSON.stringify(value);
    if (stringValue.length > _LocalStorageService.COMPRESSION_THRESHOLD) {
      stringValue = LZString.compress(stringValue);
      metadata.compressed = true;
    }
    const storageItem = {
      data: stringValue,
      metadata
    };
    const finalValue = JSON.stringify(storageItem);
    const itemSize = new Blob([finalValue]).size;
    if (itemSize > _LocalStorageService.MAX_ITEM_SIZE) {
      throw new StorageQuotaError(`Item size (${itemSize} bytes) exceeds maximum allowed size`);
    }
    if (!this.hasAvailableSpace(itemSize)) {
      throw new StorageQuotaError("Storage quota exceeded");
    }
    try {
      const storageKey = useNamespace ? this.generateNamespacedKey(key) : key;
      localStorage.setItem(storageKey, finalValue);
    } catch (error) {
      if (this.isQuotaExceededError(error)) {
        throw new StorageQuotaError("Storage quota exceeded");
      }
      throw error;
    }
  }
  removeItem(key, useNamespace = true) {
    try {
      const storageKey = useNamespace ? this.generateNamespacedKey(key) : key;
      localStorage.removeItem(storageKey);
    } catch (error) {
      console.error("Error removing from localStorage:", error);
    }
  }
  clear() {
    try {
      localStorage.clear();
    } catch (error) {
      console.error("Error clearing localStorage:", error);
    }
  }
  getCurrentUsage() {
    let totalSize = 0;
    for (let i = 0; i < localStorage.length; i++) {
      const key = localStorage.key(i);
      if (isDefined(key) && isString(key)) {
        const item = localStorage.getItem(key);
        if (isDefined(item)) {
          totalSize += new Blob([item]).size;
        }
      }
    }
    return totalSize;
  }
  validateKey(key) {
    return isString(key) && key.length > 0;
  }
  hasAvailableSpace(additionalBytes) {
    if (!isNumber(additionalBytes))
      return false;
    let totalSize = 0;
    for (let i = 0; i < localStorage.length; i++) {
      const key = localStorage.key(i);
      if (isDefined(key)) {
        const item = localStorage.getItem(key);
        if (isDefined(item)) {
          totalSize += new Blob([item]).size;
        }
      }
    }
    return totalSize + additionalBytes <= _LocalStorageService.STORAGE_LIMIT;
  }
  isQuotaExceededError(error) {
    return isObject(error) && hasProperty(error, "name") && isString(error["name"]) && (error["name"] === "QuotaExceededError" || error["name"] === "NS_ERROR_DOM_QUOTA_REACHED");
  }
  static \u0275fac = function LocalStorageService_Factory(__ngFactoryType__) {
    return new (__ngFactoryType__ || _LocalStorageService)();
  };
  static \u0275prov = /* @__PURE__ */ \u0275\u0275defineInjectable({ token: _LocalStorageService, factory: _LocalStorageService.\u0275fac, providedIn: "root" });
};
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(LocalStorageService, [{
    type: Injectable,
    args: [{
      providedIn: "root"
    }]
  }], null, null);
})();

// src/app/core/services/user-session.service.ts
var UserSessionService = class _UserSessionService {
  localStorageService = inject(LocalStorageService);
  router = inject(Router);
  userSessions = signal([], ...ngDevMode ? [{ debugName: "userSessions" }] : []);
  currentUserSession = signal(null, ...ngDevMode ? [{ debugName: "currentUserSession" }] : []);
  constructor() {
    this.loadSessionsFromStorage();
    effect(() => {
      const session = this.currentUserSession();
      if (session) {
        this.localStorageService.setItem(LOCAL_STORAGE_KEY_SELECTED_CLIENT_ID, session.id, void 0, true);
      }
    });
  }
  setUserSessions(sessions) {
    this.userSessions.set(sessions);
    this.localStorageService.setItem(LOCAL_STORAGE_KEY_USER_SESSION, JSON.stringify(sessions), void 0, true);
    const lastSelectedId = this.localStorageService.getItem(LOCAL_STORAGE_KEY_SELECTED_CLIENT_ID, true);
    const sessionToSelect = sessions.find((s) => s.id === lastSelectedId) ?? sessions[0];
    if (sessions.length > 1 && isNullOrUndefined(lastSelectedId)) {
      return this.router.navigate(["/auth", "select-client"]);
    } else if (isDefined(sessionToSelect)) {
      this.setCurrentUserSession(sessionToSelect.id);
      return this.router.navigate(["/position"]);
    } else {
      return this.router.navigate(["/auth", "login"]);
    }
  }
  setCurrentUserSession(sessionId) {
    const session = this.userSessions().find((s) => s.id === sessionId);
    if (isDefined(session)) {
      this.currentUserSession.set(session);
    }
  }
  loadSessionsFromStorage() {
    const sessionsStr = this.localStorageService.getItem(LOCAL_STORAGE_KEY_USER_SESSION, true);
    if (isDefined(sessionsStr)) {
      const sessions = JSON.parse(sessionsStr);
      this.userSessions.set(sessions);
      const selectedId = this.localStorageService.getItem(LOCAL_STORAGE_KEY_SELECTED_CLIENT_ID, true);
      if (isDefined(selectedId)) {
        this.setCurrentUserSession(selectedId);
      }
    }
  }
  /**
   * Reloads sessions from storage.
   * Should be called after user profile is loaded to ensure correct namespace.
   */
  reloadSessionsFromStorage() {
    this.loadSessionsFromStorage();
  }
  clearAllSessions() {
    this.userSessions.set([]);
    this.currentUserSession.set(null);
    this.localStorageService.removeItem(LOCAL_STORAGE_KEY_USER_SESSION, true);
    this.localStorageService.removeItem(LOCAL_STORAGE_KEY_SELECTED_CLIENT_ID, true);
  }
  static \u0275fac = function UserSessionService_Factory(__ngFactoryType__) {
    return new (__ngFactoryType__ || _UserSessionService)();
  };
  static \u0275prov = /* @__PURE__ */ \u0275\u0275defineInjectable({ token: _UserSessionService, factory: _UserSessionService.\u0275fac, providedIn: "root" });
};
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(UserSessionService, [{
    type: Injectable,
    args: [{
      providedIn: "root"
    }]
  }], () => [], null);
})();

export {
  environment,
  isNullOrUndefined,
  isDefined,
  isString,
  isNumber,
  isBoolean,
  isArray,
  isObject,
  isEmpty,
  hasProperty,
  isFunction,
  isSelectOption,
  isDeepEqual,
  getAllRouteParams,
  createGuardedGridRoute,
  setNestedProperty,
  enumToSelectOptionValues,
  SpatialUtils,
  phoneValidator,
  mobileValidator,
  ApiUrlService,
  AuthService,
  Configuration,
  AccountsService,
  AssetsService,
  AuthService2,
  ClientsService,
  DataService,
  DeviceProviderTypesService,
  DeviceProvidersService,
  DeviceTypesService,
  EmailProvidersService,
  EntitiesService,
  FeedsService,
  HistoryService,
  SearchService,
  StatsService,
  ThemesService,
  AlertListItem,
  AlertResponse,
  AssetRatingProfileListItem,
  AssetRatingProfileResponse,
  AssetResponse,
  AssetStateProfileListItem,
  AssetStateProfileResponse,
  AssetTagListItem,
  AssetTagResponse,
  ClientListItem,
  ClientResponse,
  ClientUpdateRequest,
  DeviceBitmapConfiguration,
  DeviceConfigProfileListItem,
  DeviceConfigProfileResponse,
  DeviceListItem,
  DeviceProviderListItem,
  DeviceProviderResponse,
  DeviceTypeListItem,
  DistributorListItem,
  DistributorResponse,
  DistributorUpdateRequest,
  EmailProviderListItem,
  GeoLockProfileListItem,
  GeoLockProfileResponse,
  IoTypeListItem,
  IoTypeResponse,
  NotificationActions,
  OverspeedProfileListItem,
  OverspeedProfileResponse,
  RoadProfileListItem,
  RoadSpeedModifierEntry,
  SimCardListItem,
  SimCardResponse,
  SmsGatewayProviderListItem,
  SmsGatewayProviderResponse,
  ThemeResponse,
  UserUpdateRequest,
  VendorListItem,
  VendorResponse,
  VendorUpdateRequest,
  ZoneListItem,
  ApiModule,
  LOCAL_STORAGE_KEY_SELECTED_CLIENT,
  LOCAL_STORAGE_KEY_ACCESS_TOKEN,
  LOCAL_STORAGE_KEY_REFRESH_TOKEN,
  LOCAL_STORAGE_KEY_TOKEN_EXPIRY,
  LOCAL_STORAGE_KEY_USER_SESSION,
  LOCAL_STORAGE_SIDEBAR_STATE_KEY,
  MOBILE_BREAKPOINT,
  DEFAULT_PAGE_SIZE,
  DEFAULT_PAGE_SIZE_OPTIONS,
  DEFAULT_SYSTEM_ID,
  SUPER_ADMIN_ROLE_ID,
  DEFAULT_LIST_SIZE,
  DEFAULT_EMAIL_PROVIDER,
  GRID_CONFIGS,
  TREE_TABLE_CONFIGS,
  COLORS,
  SEARCH_DEBOUNCE_TIME,
  CLIENT_SEARCH_LIMIT,
  ErrorReasons,
  APP_FEATURE_FLAGS,
  BACKEND_FEATURE_FLAGS,
  AppFeatureDefaults,
  BackendFeatureDefaults,
  AppFeatures,
  AppFeatureFlagDefaults,
  getBackendFeatureDefaults,
  initializeFeatureDefaults,
  AppListsTranslations,
  LocalStorageService,
  UserSessionService,
  AuthTokenManagerService
};
//# sourceMappingURL=chunk-UOL47JT7.js.map
