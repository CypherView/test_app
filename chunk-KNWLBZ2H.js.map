{"version":3,"sources":["src/app/features/administration/services/admin-tree-client.service.ts","src/app/features/administration/services/admin-tree-group.service.ts","src/app/features/administration/services/admin-tree-vendor.service.ts","src/app/features/administration/services/admin-tree-node.service.ts","src/app/features/administration/services/admin-tree.service.ts","src/app/features/administration/services/admin-search.service.ts","src/app/features/administration/services/admin-data.service.ts","src/app/features/administration/models/event-source.enum.ts","src/app/features/administration/services/admin-tree-context-extractor.service.ts","src/app/features/administration/services/admin-tree-management.service.ts","src/app/features/administration/services/admin-navigation.service.ts","src/app/features/administration/services/admin-tree-event-handler.service.ts","node_modules/primeng/fesm2022/primeng-toolbar.mjs","src/app/shared/components/tree-panel/tree-panel.component.ts","src/app/shared/components/tree-panel/tree-panel.component.html","src/app/shared/components/tree-search/tree-search.component.ts","src/app/shared/components/tree-search/tree-search.component.html","src/app/features/administration/components/admin-container/tree-navigation-panel/tree-navigation-panel.component.ts","src/app/features/administration/components/admin-container/tree-navigation-panel/tree-navigation-panel.component.html","src/app/features/administration/components/assets/asset-move-form/asset-move-form.component.ts","src/app/features/administration/components/assets/asset-move-form/asset-move-form.component.html","src/app/features/administration/services/entity/entity-details-configuration.service.ts","src/app/shared/pipes/truncate.pipe.ts","src/app/features/administration/components/details-panel/details-panel.component.ts","src/app/features/administration/components/details-panel/details-panel.component.html","src/app/features/administration/components/admin-container/admin-main-content/admin-main-content.component.ts","src/app/features/administration/components/admin-container/admin-main-content/admin-main-content.component.html","src/app/features/administration/services/admin-container-state.service.ts","src/app/features/administration/services/admin-route-handler.service.ts","src/app/features/administration/services/admin-scroll-management.service.ts","src/app/features/administration/services/admin-tree-refresh.service.ts","src/app/features/administration/components/admin-container/admin-container.component.ts","src/app/features/administration/components/admin-container/admin-container.component.html","src/app/features/administration/resolvers/client.resolver.ts","src/app/features/administration/resolvers/distributor.resolver.ts","src/app/features/administration/resolvers/vendor.resolver.ts","src/app/features/administration/administration-routing.module.ts","src/app/shared/services/grid-base.service.ts","node_modules/primeng/fesm2022/primeng-stepper.mjs","src/app/shared/components/stepper/stepper.component.ts","src/app/shared/components/stepper/stepper.component.html","src/app/shared/components/wizard/wizard.component.ts","src/app/shared/components/wizard/wizard.component.html","src/app/features/administration/components/device-providers/device-provider-create-wizard/device-provider-create-wizard.component.ts","src/app/features/administration/components/device-providers/device-provider-create-wizard/device-provider-create-wizard.component.html","src/app/features/administration/configs/device-providers.grid.config.ts","src/app/features/administration/components/email-providers/email-provider-create-wizard/email-provider-create-wizard.component.ts","src/app/features/administration/components/email-providers/email-provider-create-wizard/email-provider-create-wizard.component.html","src/app/features/administration/configs/email-providers.grid.config.ts","src/app/features/administration/components/assets/asset-create-wizard/asset-create-wizard.component.ts","src/app/features/administration/components/assets/asset-create-wizard/asset-create-wizard.component.html","src/app/features/administration/configs/assets.grid.config.ts","src/app/features/administration/components/alerts/alert-create-wizard/alert-create-wizard.component.ts","src/app/features/administration/components/alerts/alert-create-wizard/alert-create-wizard.component.html","src/app/features/administration/configs/alerts.grid.config.ts","src/app/features/administration/components/asset-tags/asset-tag-create-wizard/asset-tag-create-wizard.component.ts","src/app/features/administration/components/asset-tags/asset-tag-create-wizard/asset-tag-create-wizard.component.html","src/app/features/administration/configs/asset-tags.grid.config.ts","src/app/features/administration/components/device/device-create-wizard/device-create-wizard.component.ts","src/app/features/administration/components/device/device-create-wizard/device-create-wizard.component.html","src/app/features/administration/configs/device.grid.config.ts","src/app/features/administration/components/geofences/geofence-coordinates-section/geofence-coordinates-section.component.ts","src/app/features/administration/components/geofences/geofence-coordinates-section/geofence-coordinates-section.component.html","src/app/features/administration/components/geofences/geofence-create-wizard/geofence-create-wizard.component.ts","src/app/features/administration/components/geofences/geofence-create-wizard/geofence-create-wizard.component.html","src/app/features/administration/configs/geofences.grid.config.ts","src/app/features/administration/components/sim-cards/sim-card-create-wizard/sim-card-create-wizard.component.ts","src/app/features/administration/components/sim-cards/sim-card-create-wizard/sim-card-create-wizard.component.html","src/app/features/administration/configs/sim-cards.grid.config.ts","src/app/features/administration/components/asset-rating-profiles/asset-rating-profile-create-wizard/asset-rating-profile-create-wizard.component.ts","src/app/features/administration/components/asset-rating-profiles/asset-rating-profile-create-wizard/asset-rating-profile-create-wizard.component.html","src/app/features/administration/configs/asset-rating-profiles.grid.config.ts","src/app/features/administration/components/asset-state-profiles/asset-state-profile-create-wizard/asset-state-profile-create-wizard.component.ts","src/app/features/administration/components/asset-state-profiles/asset-state-profile-create-wizard/asset-state-profile-create-wizard.component.html","src/app/features/administration/configs/asset-state-profiles.grid.config.ts","src/app/features/administration/components/io-types/io-type-create-wizard/io-type-create-wizard.component.ts","src/app/features/administration/components/io-types/io-type-create-wizard/io-type-create-wizard.component.html","src/app/features/administration/configs/io-types.grid.config.ts","src/app/features/administration/components/overspeed-profiles/overspeed-profile-create-wizard/overspeed-profile-create-wizard.component.ts","src/app/features/administration/components/overspeed-profiles/overspeed-profile-create-wizard/overspeed-profile-create-wizard.component.html","src/app/features/administration/configs/overspeed-profiles.grid.config.ts","src/app/features/administration/components/road-profiles/road-profile-create-wizard/road-profile-create-wizard.component.ts","src/app/features/administration/components/road-profiles/road-profile-create-wizard/road-profile-create-wizard.component.html","src/app/features/administration/configs/road-profiles.grid.config.ts","src/app/features/administration/components/sms-gateway-providers/sms-gateway-provider-create-wizard/sms-gateway-provider-create-wizard.component.ts","src/app/features/administration/components/sms-gateway-providers/sms-gateway-provider-create-wizard/sms-gateway-provider-create-wizard.component.html","src/app/features/administration/configs/sms-gateway-provider.grid.config.ts","src/app/features/administration/components/themes/theme-create-wizard/theme-create-wizard.component.ts","src/app/features/administration/components/themes/theme-create-wizard/theme-create-wizard.component.html","src/app/features/administration/configs/themes.grid.config.ts","src/app/features/administration/components/device-config-profiles/device-config-profile-create-wizard/device-config-profile-create-wizard.component.ts","src/app/features/administration/components/device-config-profiles/device-config-profile-create-wizard/device-config-profile-create-wizard.component.html","src/app/features/administration/configs/device-config-profiles.config.ts","src/app/features/administration/components/custom-fields/custom-field-create-wizard/custom-field-create-wizard.component.ts","src/app/features/administration/components/custom-fields/custom-field-create-wizard/custom-field-create-wizard.component.html","src/app/features/administration/configs/custom-fields.grid.config.ts","src/app/features/administration/components/user-roles/user-role-create-wizard/user-role-create-wizard.component.ts","src/app/features/administration/components/user-roles/user-role-create-wizard/user-role-create-wizard.component.html","src/app/features/administration/configs/user-roles.grid.config.ts","src/app/features/administration/components/users/user-create-wizard/user-create-wizard.component.ts","src/app/features/administration/components/users/user-create-wizard/user-create-wizard.component.html","src/app/features/administration/configs/users.grid.config.ts","src/app/features/administration/components/distributor-vendors/distributor-vendor-create-wizard/distributor-vendor-create-wizard.component.ts","src/app/features/administration/components/distributor-vendors/distributor-vendor-create-wizard/distributor-vendor-create-wizard.component.html","src/app/features/administration/configs/vendors.grid.config.ts","src/app/features/administration/components/vendor-clients/vendor-client-create-wizard/vendor-client-create-wizard.component.ts","src/app/features/administration/components/vendor-clients/vendor-client-create-wizard/vendor-client-create-wizard.component.html","src/app/features/administration/configs/clients.grid.config.ts","src/app/features/administration/components/super-admin-distributors/super-admin-distributors-create-wizard/super-admin-distributors-create-wizard.component.ts","src/app/features/administration/components/super-admin-distributors/super-admin-distributors-create-wizard/super-admin-distributors-create-wizard.component.html","src/app/features/administration/configs/distributors.grid.config.ts","src/app/features/administration/components/geo-lock-profiles/geo-lock-profile-create-wizard/geo-lock-profile-create-wizard.component.ts","src/app/features/administration/components/geo-lock-profiles/geo-lock-profile-create-wizard/geo-lock-profile-create-wizard.component.html","src/app/features/administration/configs/geo-lock-profiles.grid.config.ts","src/app/features/administration/configs/admin-grid-configs-registration.ts","src/app/features/administration/components/asset-categories/asset-category-create-wizard/asset-category-create-wizard.component.ts","src/app/features/administration/components/asset-categories/asset-category-create-wizard/asset-category-create-wizard.component.html","src/app/features/administration/configs/asset-categories.grid.config.ts","src/app/features/administration/components/asset-groups/asset-group-create-wizard/asset-group-create-wizard.component.ts","src/app/features/administration/components/asset-groups/asset-group-create-wizard/asset-group-create-wizard.component.html","src/app/features/administration/configs/asset-groups.grid.config.ts","src/app/features/administration/components/company-groups/company-group-create-wizard/company-group-create-wizard.component.ts","src/app/features/administration/components/company-groups/company-group-create-wizard/company-group-create-wizard.component.html","src/app/features/administration/configs/company-groups.grid.config.ts","src/app/features/administration/components/cost-centres/cost-centre-create-wizard/cost-centre-create-wizard.component.ts","src/app/features/administration/components/cost-centres/cost-centre-create-wizard/cost-centre-create-wizard.component.html","src/app/features/administration/configs/cost-centres.grid.config.ts","src/app/features/administration/components/geofence-groups/geofence-group-create-wizard/geofence-group-create-wizard.component.ts","src/app/features/administration/components/geofence-groups/geofence-group-create-wizard/geofence-group-create-wizard.component.html","src/app/features/administration/configs/geofence-groups.grid.config.ts","src/app/features/administration/components/device-types/device-types-create-wizard/device-types-create-wizard.component.ts","src/app/features/administration/components/device-types/device-types-create-wizard/device-types-create-wizard.component.html","src/app/features/administration/configs/device-types.grid.config.ts","src/app/features/administration/configs/admin-tree-table-configs-registration.ts","src/app/features/administration/administration.module.ts"],"sourcesContent":["import { inject, Injectable } from '@angular/core';\nimport { firstValueFrom, map, catchError, of } from 'rxjs';\nimport {\n  AccountsService,\n  ClientListItem,\n  ClientListResponse,\n  ClientResponse,\n} from '../../../api';\nimport { UtilityService } from '../../../core/services/utility.service';\nimport { ADMIN_TREE, ClientFilters } from '../models/tree-node-data.interface';\nimport { isDefined } from '../../../shared/utils';\nimport { RequestCacheService } from '../../../shared/services/request-cache.service';\n\n/**\n * Service responsible for handling client-related operations in the admin tree\n */\n@Injectable({\n  providedIn: 'root',\n})\nexport class AdminTreeClientService {\n  private readonly accountsService = inject(AccountsService);\n  private readonly utilityService = inject(UtilityService);\n  private readonly cacheService = inject(RequestCacheService);\n  /**\n   * Lists all clients for a given vendor and optional group\n   *\n   * This is the core method for loading paginated client data. It's used throughout\n   * the tree system for:\n   * - Initial vendor expansion (first 100 clients)\n   * - \"Load More\" button clicks (next 100 clients)\n   * - Automatic pagination during client search (loadClientsUntilFound)\n   *\n   * Features:\n   * - Pagination support (offset/limit)\n   * - Filtering by group (direct vendor clients or group clients)\n   * - Optional search query for name filtering\n   * - Excludes deleted clients (state != DELETED_STATE)\n   * - Caching for performance (10 seconds)\n   *\n   * The returned hasMore flag is critical for pagination logic - it tells the\n   * caller whether there are more clients to load beyond the current page.\n   *\n   * @param vendorId The ID of the vendor to fetch clients for\n   * @param groupId Optional group ID to filter clients (undefined = direct vendor clients)\n   * @param offset Starting offset for pagination (0-based)\n   * @param limit Maximum number of results to return (default: 100)\n   * @param searchQuery Optional search query to filter clients by name\n   * @returns Promise resolving to {clients, total, hasMore}\n   * @throws Error if vendorId is not provided\n   */\n  async listVendorClients(\n    vendorId: string,\n    groupId?: string,\n    offset?: number,\n    limit?: number,\n    searchQuery?: string,\n  ): Promise<{ clients: ClientListItem[]; total: number; hasMore: boolean }> {\n    if (!vendorId) {\n      throw new Error('Vendor ID is required');\n    }\n    const filters: ClientFilters = {\n      group: { value: groupId ?? ADMIN_TREE.DEFAULT_GROUP_ID, operator: '=' },\n      state: { value: ADMIN_TREE.DELETED_STATE, operator: '!=' },\n    };\n\n    // Add search query filter if provided\n    if (isDefined(searchQuery) && searchQuery.trim().length > 0) {\n      filters['name'] = `*${searchQuery.trim()}*`;\n    }\n\n    const rqlFilter = this.utilityService.constructRqlFilter(filters);\n\n    // Include search query in cache key for proper caching\n    const searchSuffix = isDefined(searchQuery) ? `-search-${searchQuery}` : '';\n    const cacheKey = `admin-tree-clients-${vendorId}-${groupId ?? 'all'}-${offset ?? 0}-${limit ?? ADMIN_TREE.PAGINATION.DEFAULT_PAGE_SIZE}${searchSuffix}`;\n\n    return this.cacheService.getOrFetchAsync(\n      cacheKey,\n      () =>\n        firstValueFrom(\n          this.accountsService\n            .listClients(\n              vendorId,\n              offset ?? ADMIN_TREE.PAGINATION.INITIAL_PAGE,\n              limit ?? ADMIN_TREE.PAGINATION.DEFAULT_PAGE_SIZE,\n              'name',\n              rqlFilter,\n            )\n            .pipe(\n              map((response: ClientListResponse) => {\n                return {\n                  clients: response.items,\n                  total: response.count,\n                  hasMore:\n                    response.count >\n                    (offset ?? 0) + (response.items.length ?? 0),\n                };\n              }),\n            ),\n        ),\n      10000,\n    );\n  }\n\n  /**\n   * Fetches a single client by ID\n   * @param clientId - The ID of the client to fetch\n   * @returns Promise resolving to ClientResponse or null if not found\n   * @throws Error if clientId is not provided\n   */\n  async fetchClient(clientId: string): Promise<ClientResponse | null> {\n    if (!clientId) {\n      throw new Error('Client ID is required');\n    }\n\n    return firstValueFrom(\n      this.accountsService.getClient(clientId).pipe(catchError(() => of(null))),\n    );\n  }\n\n  /**\n   * Attempts to load a client using saved ID or default ID\n   * @param savedClientId - Previously saved client ID\n   * @param defaultClientId - Fallback client ID\n   * @returns Promise resolving to ClientResponse or null if neither client exists\n   */\n  async tryLoadClient(\n    savedClientId?: string,\n    defaultClientId?: string,\n  ): Promise<ClientResponse | null> {\n    if (isDefined(savedClientId)) {\n      const client = await this.fetchClient(savedClientId);\n      if (client) return client;\n    }\n\n    if (isDefined(defaultClientId)) {\n      return this.fetchClient(defaultClientId);\n    }\n\n    return null;\n  }\n}\n","import { inject, Injectable } from '@angular/core';\nimport { firstValueFrom, map, catchError, of } from 'rxjs';\nimport { AccountsService, CompanyGroupResponse } from '../../../api';\nimport { RequestCacheService } from '../../../shared/services/request-cache.service';\nimport { UtilityService } from '../../../core/services/utility.service';\nimport { isDefined } from '../../../shared/utils';\n\n/**\n * Service responsible for managing company group operations in the admin tree.\n * Handles fetching and listing company groups for vendors.\n */\n@Injectable({\n  providedIn: 'root',\n})\nexport class AdminTreeGroupService {\n  private readonly accountsService = inject(AccountsService);\n  private readonly cacheService = inject(RequestCacheService);\n  private readonly utilityService = inject(UtilityService);\n\n  /**\n   * Lists all company groups for a given vendor\n   * @param vendorId - The ID of the vendor to fetch groups for\n   * @param searchQuery - Optional search query to filter groups by name\n   * @returns Promise resolving to array of CompanyGroupResponse\n   * @throws Error if vendorId is empty or undefined\n   */\n  async listCompanyGroups(\n    vendorId: string,\n    searchQuery?: string,\n  ): Promise<CompanyGroupResponse[]> {\n    if (!vendorId?.trim()) {\n      throw new Error('Vendor ID is required');\n    }\n\n    // Build filter for search query if provided\n    let rqlFilter = '';\n    if (isDefined(searchQuery) && searchQuery.trim().length > 0) {\n      const filters = {\n        name: `*${searchQuery.trim()}*`,\n      };\n      rqlFilter = this.utilityService.constructRqlFilter(filters);\n    }\n\n    // Include search query in cache key for proper caching\n    const searchSuffix = isDefined(searchQuery) ? `-search-${searchQuery}` : '';\n    const cacheKey = `admin-tree-groups-${vendorId}${searchSuffix}`;\n\n    return this.cacheService.getOrFetchAsync(\n      cacheKey,\n      () =>\n        firstValueFrom(\n          this.accountsService\n            .listCompanyGroups(\n              vendorId,\n              undefined, // offset\n              undefined, // limit\n              'name', // sort\n              rqlFilter, // filter\n            )\n            .pipe(\n              map((response) => response.items ?? []),\n              catchError(() => of([])),\n            ),\n        ),\n      30000,\n    );\n  }\n}\n","import { inject, Injectable } from '@angular/core';\nimport { firstValueFrom, catchError, of, map } from 'rxjs';\nimport {\n  AccountsService,\n  VendorResponse,\n  VendorListItem,\n  DistributorResponse,\n  DistributorListItem,\n} from '../../../api';\nimport { DEFAULT_LIST_SIZE } from '../../../core/models';\n\n/**\n * Service responsible for managing vendor-related operations in the admin tree.\n * Handles fetching vendor data, distributor relationships, and vendor lists.\n */\n@Injectable({\n  providedIn: 'root',\n})\nexport class AdminTreeVendorService {\n  private readonly accountsService = inject(AccountsService);\n\n  /**\n   * Fetches a vendor associated with a client\n   * @param vendorId - The ID of the vendor to fetch\n   * @returns Promise resolving to VendorResponse or null if not found\n   * @throws Error if vendorId is empty or undefined\n   */\n  async fetchClientVendor(vendorId: string): Promise<VendorResponse | null> {\n    if (!vendorId?.trim()) {\n      throw new Error('Vendor ID is required');\n    }\n\n    return firstValueFrom(\n      this.accountsService.getVendor(vendorId).pipe(\n        catchError(() => {\n          return of(null);\n        }),\n      ),\n    );\n  }\n\n  /**\n   * Fetches a distributor associated with a vendor\n   * @param distributorId - The ID of the distributor to fetch\n   * @returns Promise resolving to VendorResponse or null if not found\n   * @throws Error if distributorId is empty or undefined\n   */\n  async fetchVendorDistributor(\n    distributorId: string,\n  ): Promise<DistributorResponse | null> {\n    if (!distributorId?.trim()) {\n      throw new Error('Distributor ID is required');\n    }\n\n    return firstValueFrom(\n      this.accountsService.getDistributor(distributorId).pipe(\n        catchError(() => {\n          return of(null);\n        }),\n      ),\n    );\n  }\n\n  /**\n   * Lists all vendors associated with a distributor\n   * @param distributorId - The ID of the distributor to fetch vendors for\n   * @param filter - Optional filter string in RQL format (e.g., 'state!=deleted')\n   * @returns Promise resolving to array of VendorListItem\n   * @throws Error if distributorId is empty or undefined\n   */\n  async listDistributorVendors(\n    distributorId: string,\n    filter?: string,\n  ): Promise<VendorListItem[]> {\n    if (!distributorId?.trim()) {\n      throw new Error('Distributor ID is required');\n    }\n\n    // Use provided filter or default to active vendors\n    const vendorFilter = filter ?? 'state!=deleted';\n\n    return firstValueFrom(\n      this.accountsService\n        .listVendors(\n          distributorId,\n          0,\n          DEFAULT_LIST_SIZE,\n          'name:asc',\n          vendorFilter,\n        )\n        .pipe(\n          map((response) => response.items ?? []),\n          catchError(() => {\n            return of([]);\n          }),\n        ),\n    );\n  }\n\n  /**\n   * Lists all distributors for a given owner\n   * @param ownerId - The ID of the owner to fetch distributors for\n   * @returns Promise resolving to array of DistributorListItem\n   * @throws Error if ownerId is empty or undefined\n   */\n  async listDistributors(ownerId: string): Promise<DistributorListItem[]> {\n    if (!ownerId?.trim()) {\n      throw new Error('Owner ID is required');\n    }\n\n    return firstValueFrom(\n      this.accountsService\n        .listDistributors(\n          ownerId,\n          0,\n          DEFAULT_LIST_SIZE,\n          'name:asc',\n          'state=active',\n        )\n        .pipe(\n          map((response) => response.items ?? []),\n          catchError(() => {\n            return of([]);\n          }),\n        ),\n    );\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { TreeNode } from 'primeng/api';\nimport { ClientResponse } from '../../../api';\n\n/**\n * Service responsible for tree node operations and traversal.\n * Provides methods for finding and manipulating nodes in the administration tree.\n */\n@Injectable({\n  providedIn: 'root',\n})\nexport class AdminTreeNodeService {\n  /**\n   * Finds the parent vendor node of a given target node in the tree\n   * @param nodes - Array of tree nodes to search through\n   * @param targetNode - The node whose parent vendor is being searched for\n   * @returns The parent vendor TreeNode if found, null otherwise\n   */\n  findParentVendorNode(\n    nodes: TreeNode[],\n    targetNode: TreeNode,\n  ): TreeNode | null {\n    for (const node of nodes) {\n      if (!node.children) continue;\n\n      const found = this.searchChildNodes(node, targetNode);\n      if (found) return node;\n\n      for (const child of node.children) {\n        if (!child.children) continue;\n        const foundInChild = this.findParentVendorNode([child], targetNode);\n        if (foundInChild) return foundInChild;\n      }\n    }\n    return null;\n  }\n\n  private searchChildNodes(node: TreeNode, targetNode: TreeNode): boolean {\n    return node.children?.includes(targetNode) ?? false;\n  }\n\n  /**\n   * Finds a node in the tree that corresponds to the selected client\n   * @param nodes - Array of tree nodes to search through\n   * @param selectedClient - The client to search for\n   * @returns The matching TreeNode if found, null otherwise\n   */\n  findSelectedNode(\n    nodes: TreeNode[],\n    selectedClient: ClientResponse | null,\n  ): TreeNode | null {\n    if (!selectedClient) return null;\n    return this.searchNode(nodes, selectedClient.id);\n  }\n\n  /**\n   * Recursively searches for a node with matching client ID\n   * @param nodes - Array of tree nodes to search through\n   * @param clientId - The client ID to search for\n   * @returns The matching TreeNode if found, null otherwise\n   */\n  private searchNode(nodes: TreeNode[], clientId: string): TreeNode | null {\n    for (const node of nodes) {\n      if (node.key === clientId) {\n        return node;\n      }\n      if (node.children) {\n        const found = this.searchNode(node.children, clientId);\n        if (found) return found;\n      }\n    }\n    return null;\n  }\n}\n","import { inject, Injectable } from '@angular/core';\nimport { TreeNode } from 'primeng/api';\nimport {\n  ClientListItem,\n  ClientResponse,\n  CompanyGroupResponse,\n  DistributorResponse,\n  DistributorListItem,\n  VendorListItem,\n  VendorResponse,\n} from '../../../api';\nimport { AdminTreeClientService } from './admin-tree-client.service';\nimport { AdminTreeGroupService } from './admin-tree-group.service';\nimport { AdminTreeVendorService } from './admin-tree-vendor.service';\nimport { AdminTreeNodeService } from './admin-tree-node.service';\nimport { ClientTreeNode, ADMIN_TREE } from '../models';\n\n/**\n * Service responsible for coordinating operations between different tree-related services.\n * Acts as a facade for client, vendor, group, and node operations in the admin tree.\n */\n@Injectable({\n  providedIn: 'root',\n})\nexport class AdminTreeService {\n  private readonly clientService = inject(AdminTreeClientService);\n  private readonly vendorService = inject(AdminTreeVendorService);\n  private readonly groupService = inject(AdminTreeGroupService);\n  private readonly treeNodeService = inject(AdminTreeNodeService);\n\n  /**\n   * Lists all clients for a given vendor and optional group\n   * @param vendorId - The ID of the vendor to fetch clients for\n   * @param groupId - Optional group ID to filter clients\n   * @param offset - Starting offset for pagination\n   * @param limit - Maximum number of results to return\n   * @param searchQuery - Optional search query to filter clients by name\n   * @returns Promise resolving to array of ClientListItem\n   * @throws Error if vendorId is not provided\n   */\n  listVendorClients(\n    vendorId: string,\n    groupId?: string,\n    offset?: number,\n    limit?: number,\n    searchQuery?: string,\n  ): Promise<{\n    clients: ClientListItem[];\n    total: number;\n    hasMore: boolean;\n  }> {\n    return this.clientService.listVendorClients(\n      vendorId,\n      groupId,\n      offset,\n      limit,\n      searchQuery,\n    );\n  }\n\n  /**\n   * Fetches a single client by ID\n   * @param clientId - The ID of the client to fetch\n   * @returns Promise resolving to ClientResponse or null if not found\n   */\n  fetchClient(clientId: string): Promise<ClientResponse | null> {\n    return this.clientService.fetchClient(clientId);\n  }\n\n  /**\n   * Fetches a vendor associated with a client\n   * @param vendorId - The ID of the vendor to fetch\n   * @returns Promise resolving to ClientResponse or null if not found\n   */\n  fetchClientVendor(vendorId: string): Promise<ClientResponse | null> {\n    return this.vendorService.fetchClientVendor(vendorId);\n  }\n\n  /**\n   * Fetches a distributor associated with a vendor\n   * @param distributorId - The ID of the distributor to fetch\n   * @returns Promise resolving to DistributorResponse or null if not found\n   */\n  fetchVendorDistributor(\n    distributorId: string,\n  ): Promise<DistributorResponse | null> {\n    return this.vendorService.fetchVendorDistributor(distributorId);\n  }\n\n  /**\n   * Lists all company groups for a given vendor\n   * @param vendorId - The ID of the vendor to fetch groups for\n   * @param searchQuery - Optional search query to filter groups by name\n   * @returns Promise resolving to array of CompanyGroupResponse\n   */\n  listCompanyGroups(\n    vendorId: string,\n    searchQuery?: string,\n  ): Promise<CompanyGroupResponse[]> {\n    return this.groupService.listCompanyGroups(vendorId, searchQuery);\n  }\n\n  /**\n   * Finds the parent vendor node of a given target node in the tree\n   * @param nodes - Array of tree nodes to search through\n   * @param targetNode - The node whose parent vendor is being searched for\n   * @returns The parent vendor TreeNode if found, null otherwise\n   */\n  findParentVendorNode(\n    nodes: TreeNode[],\n    targetNode: TreeNode,\n  ): TreeNode | null {\n    return this.treeNodeService.findParentVendorNode(nodes, targetNode);\n  }\n\n  /**\n   * Finds a node in the tree that corresponds to the selected client\n   * @param nodes - Array of tree nodes to search through\n   * @param selectedClient - The client to search for\n   * @returns The matching TreeNode if found, null otherwise\n   */\n  findSelectedNode(\n    nodes: TreeNode[],\n    selectedClient: ClientResponse | null,\n  ): TreeNode | null {\n    return this.treeNodeService.findSelectedNode(nodes, selectedClient);\n  }\n\n  /**\n   * Lists all vendors associated with a distributor\n   * @param distributorId - The ID of the distributor to fetch vendors for\n   * @param filter - Optional filter string in RQL format (e.g., 'state!=deleted')\n   * @returns Promise resolving to array of VendorListItem\n   */\n  listDistributorVendors(\n    distributorId: string,\n    filter?: string,\n  ): Promise<VendorListItem[]> {\n    return this.vendorService.listDistributorVendors(distributorId, filter);\n  }\n\n  /**\n   * Lists all distributors for a given owner\n   * @param ownerId - The ID of the owner to fetch distributors for\n   * @returns Promise resolving to array of DistributorListItem\n   */\n  listDistributors(ownerId: string): Promise<DistributorListItem[]> {\n    return this.vendorService.listDistributors(ownerId);\n  }\n\n  /**\n   * Attempts to load a client using saved ID or default ID\n   * @param savedClientId - Previously saved client ID\n   * @param defaultClientId - Fallback client ID\n   * @returns Promise resolving to ClientResponse or null if neither client exists\n   */\n  tryLoadClient(\n    savedClientId?: string,\n    defaultClientId?: string,\n  ): Promise<ClientResponse | null> {\n    return this.clientService.tryLoadClient(savedClientId, defaultClientId);\n  }\n\n  createClientNode(\n    client: ClientResponse | ClientListItem,\n    isSelected: boolean,\n  ): ClientTreeNode {\n    return {\n      key: client.id,\n      label: `${client.name ?? ''} ${ADMIN_TREE.LABELS.CLIENT}`,\n      data: { ...client, type: ADMIN_TREE.NODE_TYPES.CLIENT },\n      leaf: true,\n      icon: ADMIN_TREE.ICONS.CLIENT,\n      checked: isSelected,\n      selectable: true,\n      type: ADMIN_TREE.NODE_TYPES.CLIENT,\n    };\n  }\n\n  createVendorNode(\n    vendor: VendorResponse | VendorListItem,\n    isExpanded: boolean,\n    children: TreeNode[],\n    isSelected: boolean,\n  ): TreeNode {\n    return {\n      key: vendor.id,\n      label: `${vendor.name ?? ''} ${ADMIN_TREE.LABELS.VENDOR}`,\n      data: vendor,\n      expanded: isExpanded,\n      leaf: false,\n      icon: ADMIN_TREE.ICONS.VENDOR,\n      children: children,\n      checked: isSelected,\n      type: ADMIN_TREE.NODE_TYPES.VENDOR,\n      selectable: true,\n    };\n  }\n\n  createDistributorNode(\n    distributor: DistributorResponse,\n    isExpanded: boolean,\n    isSelected: boolean,\n  ): TreeNode {\n    return {\n      key: distributor.id,\n      label: `${distributor.name ?? ''} ${ADMIN_TREE.LABELS.DISTRIBUTOR}`,\n      data: distributor,\n      expanded: isExpanded,\n      leaf: false,\n      icon: ADMIN_TREE.ICONS.DISTRIBUTOR,\n      children: [],\n      checked: isSelected,\n      type: ADMIN_TREE.NODE_TYPES.DISTRIBUTOR,\n      selectable: true,\n    };\n  }\n\n  createGroupNode(\n    group: CompanyGroupResponse,\n    isExpanded: boolean,\n    children: TreeNode[],\n    isSelected: boolean,\n  ): TreeNode {\n    return {\n      key: group.id,\n      label: `${group.name ?? ''} ${ADMIN_TREE.LABELS.GROUP}`,\n      data: group,\n      expanded: isExpanded,\n      leaf: false,\n      icon: ADMIN_TREE.ICONS.GROUP,\n      children: children,\n      checked: isSelected,\n      type: ADMIN_TREE.NODE_TYPES.GROUP,\n    };\n  }\n\n  createSuperAdminNode(\n    isExpanded: boolean,\n    children: TreeNode[],\n    isSelected: boolean,\n  ): TreeNode {\n    return {\n      key: 'super-admin-root',\n      label: `Super Admin ${ADMIN_TREE.LABELS.SUPER_ADMIN}`,\n      data: {\n        id: 'super-admin-root',\n        name: 'Super Admin',\n        type: ADMIN_TREE.NODE_TYPES.SUPER_ADMIN,\n      },\n      expanded: isExpanded,\n      leaf: false,\n      icon: ADMIN_TREE.ICONS.SUPER_ADMIN,\n      children: children,\n      checked: isSelected,\n      type: ADMIN_TREE.NODE_TYPES.SUPER_ADMIN,\n      selectable: true,\n    };\n  }\n}\n","import { inject, Injectable, signal, computed } from '@angular/core';\nimport {\n  BehaviorSubject,\n  debounceTime,\n  distinctUntilChanged,\n  switchMap,\n  of,\n  Observable,\n  catchError,\n  firstValueFrom,\n} from 'rxjs';\nimport { AdminTreeService } from './admin-tree.service';\nimport { AdminStateService } from './admin-state.service';\nimport { RequestCacheService } from '../../../shared/services/request-cache.service';\nimport { isDefined, isNullOrUndefined } from '../../../shared/utils';\nimport {\n  ClientListItem,\n  VendorListItem,\n  EntitySearchResponse,\n  EntitySearchResult,\n  ClientResponse,\n} from '../../../api';\nimport { ADMIN_TREE } from '../models';\nimport { TreeSearchResult } from '../../../shared/models';\nimport { SearchService } from '../../../api/api/search.service';\nimport { DEFAULT_SYSTEM_ID } from '../../../core/models';\n\nexport interface SearchState {\n  query: string;\n  results: TreeSearchResult[];\n  isSearching: boolean;\n  expandedForSearch: Set<string>;\n  highlightedNodes: Set<string>;\n}\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class AdminSearchService {\n  private readonly adminTreeService = inject(AdminTreeService);\n  private readonly adminState = inject(AdminStateService);\n  private readonly cacheService = inject(RequestCacheService);\n  private readonly searchService = inject(SearchService);\n\n  private readonly searchQuery$ = new BehaviorSubject<string>('');\n  private readonly searchState = signal<SearchState>({\n    query: '',\n    results: [],\n    isSearching: false,\n    expandedForSearch: new Set(),\n    highlightedNodes: new Set(),\n  });\n\n  // Public computed values\n  readonly query = computed(() => this.searchState().query);\n  readonly results = computed(() => this.searchState().results);\n  readonly isSearching = computed(() => this.searchState().isSearching);\n  readonly expandedForSearch = computed(\n    () => this.searchState().expandedForSearch,\n  );\n  readonly highlightedNodes = computed(\n    () => this.searchState().highlightedNodes,\n  );\n  readonly hasResults = computed(() => this.searchState().results.length > 0);\n  readonly hasQuery = computed(\n    () => this.searchState().query.trim().length > 0,\n  );\n\n  constructor() {\n    this.setupSearchStream();\n  }\n\n  private setupSearchStream(): void {\n    this.searchQuery$\n      .pipe(\n        debounceTime(300),\n        distinctUntilChanged(),\n        switchMap((query) => this.performSearch(query)),\n      )\n      .subscribe((results) => {\n        this.updateTreeSearchResults(results);\n      });\n  }\n\n  updateQuery(query: string): void {\n    const trimmedQuery = query.trim();\n    // Only update and trigger a search if the effective query has changed.\n    if (trimmedQuery !== this.query()) {\n      this.searchState.update((state) => ({\n        ...state,\n        query: trimmedQuery,\n        isSearching: trimmedQuery.length > 0,\n      }));\n      this.searchQuery$.next(trimmedQuery);\n    }\n  }\n\n  clearSearch(): void {\n    this.searchState.set({\n      query: '',\n      results: [],\n      isSearching: false,\n      expandedForSearch: new Set(),\n      highlightedNodes: new Set(),\n    });\n    this.searchQuery$.next('');\n  }\n\n  private performSearch(query: string): Observable<TreeSearchResult[]> {\n    if (!query || query.length < 2) {\n      return of([]);\n    }\n\n    // Use the global search service instead of local tree search\n    return this.cacheService.getOrFetch(\n      `admin-search-${query}`,\n      () =>\n        this.searchService.searchEntities(query, false).pipe(\n          switchMap((response: EntitySearchResponse) => {\n            const results = this.mapEntitySearchToTreeResults(response.items);\n            return of(results);\n          }),\n        ),\n      30000,\n    );\n  }\n\n  /**\n   * Maps EntitySearchResult[] to TreeSearchResult[]\n   * Creates the tree structure path for each search result\n   */\n  private mapEntitySearchToTreeResults(\n    entities: EntitySearchResult[],\n  ): TreeSearchResult[] {\n    return entities.map((entity) => this.mapEntityToTreeResult(entity));\n  }\n\n  /**\n   * Maps a single EntitySearchResult to TreeSearchResult\n   * Determines the tree path based on entity type and owner hierarchy\n   */\n  private mapEntityToTreeResult(entity: EntitySearchResult): TreeSearchResult {\n    const path: string[] = [];\n    const parentIds: string[] = [];\n\n    // Start with distributor if it exists\n    const distributor = this.adminState.vendorDistributor();\n    if (distributor) {\n      path.push(distributor.name ?? 'Distributor');\n      parentIds.push(distributor.id);\n    }\n\n    // Add owner hierarchy based on entity type\n    if (entity.owner?.id) {\n      this.addOwnerHierarchy(entity, path, parentIds);\n    }\n\n    // Add the entity itself to the path\n    path.push(entity.name);\n\n    // Map entity type to tree node type\n    const nodeType = this.getNodeType(entity.type);\n\n    return {\n      id: entity.id,\n      name: entity.name,\n      type: nodeType,\n      path,\n      parentIds,\n      matched: true,\n      owner: entity.owner,\n      state: entity.state,\n      fields: entity.fields,\n    };\n  }\n\n  /**\n   * Adds owner hierarchy to the path and parentIds arrays\n   */\n  private addOwnerHierarchy(\n    entity: EntitySearchResult,\n    path: string[],\n    parentIds: string[],\n  ): void {\n    if (entity.type === 'client' && entity.owner?.type === 'vendor') {\n      this.addVendorToPath(entity.owner.id, path, parentIds);\n    } else if (entity.type === 'client' && entity.owner?.type === 'group') {\n      this.addGroupHierarchy(\n        entity.owner.id,\n        entity.owner.name,\n        path,\n        parentIds,\n      );\n    } else if (entity.type === 'group' && entity.owner?.type === 'vendor') {\n      this.addVendorToPath(entity.owner.id, path, parentIds);\n    }\n  }\n\n  /**\n   * Adds vendor to path and parentIds\n   */\n  private addVendorToPath(\n    vendorId: string,\n    path: string[],\n    parentIds: string[],\n  ): void {\n    const vendor = this.adminState.getVendorById(vendorId);\n    if (vendor) {\n      path.push(vendor.name ?? 'Vendor');\n      parentIds.push(vendor.id);\n    }\n  }\n\n  /**\n   * Adds group hierarchy (vendor + group) to path and parentIds\n   */\n  private addGroupHierarchy(\n    groupId: string,\n    groupName: string | null | undefined,\n    path: string[],\n    parentIds: string[],\n  ): void {\n    const vendorId = this.findVendorIdForGroup(groupId);\n\n    if (isDefined(vendorId)) {\n      this.addVendorToPath(vendorId, path, parentIds);\n\n      // Add the group\n      path.push(groupName ?? 'Group');\n      parentIds.push(groupId);\n    }\n  }\n\n  /**\n   * Maps entity type string to tree node type\n   */\n  private getNodeType(entityType: string): string {\n    switch (entityType) {\n      case 'vendor':\n        return ADMIN_TREE.NODE_TYPES.VENDOR;\n      case 'group':\n        return ADMIN_TREE.NODE_TYPES.GROUP;\n      case 'client':\n      default:\n        return entityType;\n    }\n  }\n\n  /**\n   * Updates the search state with results and handles UI updates\n   */\n  private updateTreeSearchResults(results: TreeSearchResult[]): void {\n    const highlightedNodes = new Set(results.map((r) => r.id));\n    const expandedForSearch = new Set<string>();\n\n    // Add parent IDs to expansion set\n    for (const result of results) {\n      for (const parentId of result.parentIds) {\n        expandedForSearch.add(parentId);\n      }\n    }\n\n    this.searchState.update((state) => ({\n      ...state,\n      results,\n      isSearching: false,\n      highlightedNodes,\n      expandedForSearch,\n    }));\n  }\n\n  isNodeHighlighted(nodeId: string): boolean {\n    return this.highlightedNodes().has(nodeId);\n  }\n\n  shouldExpandForSearch(nodeId: string): boolean {\n    return this.expandedForSearch().has(nodeId);\n  }\n\n  async prepareResultForNavigation(result: TreeSearchResult): Promise<void> {\n    // Ensure all parent nodes are loaded and expanded before navigation\n    await this.ensureParentNodesLoaded(result);\n\n    // Clear search after navigation\n    this.clearSearch();\n  }\n\n  async ensureParentNodesLoaded(result: TreeSearchResult): Promise<void> {\n    for (const parentId of result.parentIds) {\n      const parentNode = this.findNodeInState(parentId);\n\n      if (parentNode) {\n        await this.loadParentNode(parentNode, parentId);\n      } else {\n        await this.handleUnknownParent(result.parentIds, parentId);\n      }\n    }\n  }\n\n  private async loadParentNode(\n    parentNode: { id: string; type: string },\n    parentId: string,\n  ): Promise<void> {\n    const distributorId = this.adminState.getCurrentDistributorId();\n    if (isNullOrUndefined(distributorId)) {\n      return;\n    }\n\n    switch (parentNode.type) {\n      case ADMIN_TREE.NODE_TYPES.DISTRIBUTOR:\n        // Ensure distributor is expanded\n        this.adminState.setExpandedDistributor(parentId, true);\n        break;\n\n      case ADMIN_TREE.NODE_TYPES.VENDOR:\n        // Ensure vendor node is loaded and expanded using distributor-scoped methods\n        if (\n          !this.adminState.isDistributorVendorLoaded(distributorId, parentId)\n        ) {\n          await this.loadVendorData(parentId, distributorId);\n        }\n        this.adminState.setDistributorNodeExpanded(\n          distributorId,\n          parentId,\n          true,\n        );\n        break;\n\n      case ADMIN_TREE.NODE_TYPES.GROUP: {\n        // Ensure group is expanded and its clients are loaded\n        const vendorId = this.findVendorIdForGroup(parentId, distributorId);\n        if (isDefined(vendorId)) {\n          await this.loadGroupData(vendorId, parentId, distributorId);\n          this.adminState.setDistributorExpandedGroup(\n            distributorId,\n            parentId,\n            true,\n          );\n        }\n        break;\n      }\n    }\n  }\n\n  private async loadVendorData(\n    vendorId: string,\n    distributorId?: string,\n  ): Promise<void> {\n    const contextDistributorId =\n      distributorId ?? this.adminState.getCurrentDistributorId();\n    if (isNullOrUndefined(contextDistributorId)) {\n      return;\n    }\n\n    try {\n      // Load vendor groups and direct clients\n      const [groups, clientResponse] = await Promise.all([\n        this.adminTreeService.listCompanyGroups(vendorId),\n        this.adminTreeService.listVendorClients(vendorId, undefined, 0, 100),\n      ]);\n\n      this.adminState.setDistributorVendorGroups(\n        contextDistributorId,\n        vendorId,\n        groups,\n      );\n      this.adminState.addDistributorVendorClients(\n        contextDistributorId,\n        vendorId,\n        clientResponse.clients,\n        {\n          offset: 0,\n          limit: 100,\n          total: clientResponse.total,\n          hasMore: clientResponse.hasMore,\n        },\n      );\n      this.adminState.markDistributorVendorAsLoaded(\n        contextDistributorId,\n        vendorId,\n      );\n    } catch (error) {\n      console.error(`Failed to load vendor data for ${vendorId}:`, error);\n      this.adminState.markDistributorVendorAsFailedToLoad(\n        contextDistributorId,\n        vendorId,\n      );\n    }\n  }\n\n  private async loadGroupData(\n    vendorId: string,\n    groupId: string,\n    distributorId?: string,\n  ): Promise<void> {\n    const contextDistributorId =\n      distributorId ?? this.adminState.getCurrentDistributorId();\n    if (isNullOrUndefined(contextDistributorId)) {\n      return;\n    }\n\n    try {\n      // Check if group clients are already loaded using distributor-scoped pagination\n      const paginationKey = this.adminState.getDistributorPaginationKey(\n        contextDistributorId,\n        vendorId,\n        groupId,\n      );\n      const distributorPagination =\n        this.adminState.clientPagination()[contextDistributorId];\n      if (isDefined(distributorPagination?.[paginationKey])) {\n        return; // Already loaded\n      }\n\n      const clientResponse = await this.adminTreeService.listVendorClients(\n        vendorId,\n        groupId,\n        0,\n        100,\n      );\n\n      this.adminState.addGroupClients(\n        contextDistributorId,\n        vendorId,\n        groupId,\n        clientResponse.clients,\n        {\n          offset: 0,\n          limit: 100,\n          total: clientResponse.total,\n          hasMore: clientResponse.hasMore,\n        },\n      );\n    } catch (error) {\n      console.error(\n        `Failed to load group data for ${vendorId}/${groupId}:`,\n        error,\n      );\n    }\n  }\n\n  private findNodeInState(nodeId: string): { id: string; type: string } | null {\n    // Check distributor\n    const distributor = this.adminState.vendorDistributor();\n    if (distributor?.id === nodeId) {\n      return { id: distributor.id, type: ADMIN_TREE.NODE_TYPES.DISTRIBUTOR };\n    }\n\n    // Get current distributor context\n    const distributorId = this.adminState.getCurrentDistributorId();\n    if (isNullOrUndefined(distributorId)) {\n      return null;\n    }\n\n    // Check vendors using distributor-scoped data\n    const distributorVendors =\n      this.adminState.distributorVendors()[distributorId] ?? [];\n    const vendor = distributorVendors.find((v) => v.id === nodeId);\n    if (vendor) {\n      return { id: vendor.id, type: ADMIN_TREE.NODE_TYPES.VENDOR };\n    }\n\n    // Check groups using distributor-scoped data\n    const vendorGroups = this.adminState.vendorGroups()[distributorId] ?? {};\n    for (const groups of Object.values(vendorGroups)) {\n      const group = groups.find((g) => g.id === nodeId);\n      if (group) {\n        return { id: group.id, type: ADMIN_TREE.NODE_TYPES.GROUP };\n      }\n    }\n\n    return null;\n  }\n\n  private async handleUnknownParent(\n    parentIds: string[],\n    parentId: string,\n  ): Promise<void> {\n    const vendorInParents = this.findVendorInParents(parentIds);\n    if (isDefined(vendorInParents)) {\n      const distributorId = this.adminState.getCurrentDistributorId();\n      if (isDefined(distributorId)) {\n        await this.loadGroupData(vendorInParents, parentId, distributorId);\n        this.adminState.setDistributorExpandedGroup(\n          distributorId,\n          parentId,\n          true,\n        );\n      } else {\n        // Fallback to legacy method\n        await this.loadGroupData(vendorInParents, parentId);\n        this.adminState.setExpandedGroup(parentId, true);\n      }\n    }\n  }\n\n  private findVendorInParents(parentIds: string[]): string | null {\n    // Get current distributor context\n    const distributorId = this.adminState.getCurrentDistributorId();\n    if (isNullOrUndefined(distributorId)) {\n      return null;\n    }\n\n    // Use distributor-scoped vendors instead of global vendors\n    const distributorVendors =\n      this.adminState.distributorVendors()[distributorId] ?? [];\n    return (\n      parentIds.find((id) => distributorVendors.some((v) => v.id === id)) ??\n      null\n    );\n  }\n\n  private findVendorIdForGroup(\n    groupId: string,\n    distributorId?: string,\n  ): string | null {\n    const contextDistributorId =\n      distributorId ?? this.adminState.getCurrentDistributorId();\n    if (isNullOrUndefined(contextDistributorId)) {\n      return null;\n    }\n\n    const vendorGroups =\n      this.adminState.vendorGroups()[contextDistributorId] ?? {};\n    for (const [vendorId, groups] of Object.entries(vendorGroups)) {\n      if (groups.some((group) => group.id === groupId)) {\n        return vendorId;\n      }\n    }\n    return null;\n  }\n\n  /**\n   * Creates a TreeSearchResult object for a given client.\n   * This is used to prepare for navigation from outside the search component,\n   * e.g., from a 'View in Tree' action.\n   * @param client The client list item.\n   * @param vendorId The ID of the parent vendor.\n   * @param groupId The optional ID of the parent group.\n   * @returns A TreeSearchResult object.\n   */\n  createSearchResultForClient(\n    client: ClientListItem,\n    vendorId: string,\n    groupId?: string,\n  ): TreeSearchResult {\n    if (isDefined(groupId)) {\n      return this.createGroupClientTreeSearchResult(client, vendorId, groupId);\n    }\n    return this.createClientTreeSearchResult(client, vendorId);\n  }\n\n  /**\n   * Creates a TreeSearchResult object for a given vendor.\n   * @param vendor The vendor list item.\n   * @returns A TreeSearchResult object.\n   */\n  createSearchResultForVendor(vendor: {\n    id: string;\n    name?: string | null;\n  }): TreeSearchResult {\n    return this.createVendorTreeSearchResult(vendor);\n  }\n\n  /**\n   * Helper methods for creating tree search results\n   */\n  private createClientTreeSearchResult(\n    client: ClientListItem,\n    vendorId: string,\n  ): TreeSearchResult {\n    const vendor = this.adminState.getVendorById(vendorId);\n    const distributor = this.adminState.vendorDistributor();\n\n    const path: string[] = [];\n    const parentIds: string[] = [];\n\n    if (distributor) {\n      path.push(distributor.name ?? 'Distributor');\n      parentIds.push(distributor.id);\n    }\n\n    if (vendor) {\n      path.push(vendor.name ?? 'Vendor');\n      parentIds.push(vendor.id);\n    }\n\n    path.push(client.name ?? 'Client');\n\n    return {\n      id: client.id,\n      name: client.name ?? '',\n      type: ADMIN_TREE.NODE_TYPES.CLIENT,\n      path,\n      parentIds,\n      matched: true,\n    };\n  }\n\n  private createGroupClientTreeSearchResult(\n    client: ClientListItem,\n    vendorId: string,\n    groupId: string,\n  ): TreeSearchResult {\n    const vendor = this.adminState.getVendorById(vendorId);\n    const distributor = this.adminState.vendorDistributor();\n\n    const path: string[] = [];\n    const parentIds: string[] = [];\n\n    if (distributor) {\n      path.push(distributor.name ?? 'Distributor');\n      parentIds.push(distributor.id);\n    }\n\n    if (vendor) {\n      path.push(vendor.name ?? 'Vendor');\n      parentIds.push(vendor.id);\n    }\n\n    // Add the group to both path and parentIds using distributor-scoped data\n    const distributorId = this.adminState.getCurrentDistributorId();\n    let group = null;\n\n    if (isDefined(distributorId)) {\n      const vendorGroups =\n        this.adminState.vendorGroups()[distributorId]?.[vendorId] ?? [];\n      group = vendorGroups.find((g) => g.id === groupId);\n    }\n\n    if (group) {\n      path.push(group.name ?? 'Group');\n      parentIds.push(group.id);\n    } else {\n      // If group is not in loaded state, use placeholder\n      path.push('Group');\n      parentIds.push(groupId);\n    }\n\n    path.push(client.name ?? 'Client');\n\n    return {\n      id: client.id,\n      name: client.name ?? '',\n      type: ADMIN_TREE.NODE_TYPES.CLIENT,\n      path,\n      parentIds,\n      matched: true,\n    };\n  }\n\n  private createVendorTreeSearchResult(vendor: {\n    id: string;\n    name?: string | null;\n  }): TreeSearchResult {\n    const distributor = this.adminState.vendorDistributor();\n\n    const path: string[] = [];\n    const parentIds: string[] = [];\n\n    if (distributor) {\n      path.push(distributor.name ?? 'Distributor');\n      parentIds.push(distributor.id);\n    }\n\n    path.push(vendor.name ?? 'Vendor');\n\n    return {\n      id: vendor.id,\n      name: vendor.name ?? '',\n      type: ADMIN_TREE.NODE_TYPES.VENDOR,\n      path,\n      parentIds,\n      matched: true,\n    };\n  }\n\n  /**\n   * Finds the vendor and group IDs for a given client by searching through all loaded data.\n   * This is useful when you have a client ID but need to determine its hierarchy.\n   * @param clientId The ID of the client to find\n   * @param distributorId Optional distributor ID to scope the search\n   * @returns Object containing vendorId and optional groupId, or null if not found\n   */\n  findClientHierarchy(\n    clientId: string,\n    distributorId?: string,\n  ): { distributorId: string; vendorId: string; groupId?: string } | null {\n    // If distributor is specified, search within that distributor's data\n    if (isDefined(distributorId)) {\n      return this.findClientInDistributor(clientId, distributorId);\n    }\n\n    // Otherwise, search across all distributors\n    const distributorVendorClients = this.adminState.vendorClients();\n    for (const [distId] of Object.entries(distributorVendorClients)) {\n      const result = this.findClientInDistributor(clientId, distId);\n      if (result) return result;\n    }\n\n    return null;\n  }\n\n  private findClientInDistributor(\n    clientId: string,\n    distributorId: string,\n  ): { distributorId: string; vendorId: string; groupId?: string } | null {\n    // Search in vendor clients for this distributor\n    const vendorClients = this.adminState.vendorClients()[distributorId] ?? {};\n    for (const [vendorId, clients] of Object.entries(vendorClients)) {\n      if (clients.some((client) => client.id === clientId)) {\n        return { distributorId, vendorId };\n      }\n    }\n\n    // Search in group clients for this distributor\n    const groupClients = this.adminState.groupClients()[distributorId] ?? {};\n    for (const [vendorId, groups] of Object.entries(groupClients)) {\n      for (const [groupId, clients] of Object.entries(groups)) {\n        if (clients.some((client) => client.id === clientId)) {\n          return { distributorId, vendorId, groupId };\n        }\n      }\n    }\n\n    return null;\n  }\n\n  /**\n   * Handles showing a client in the tree by preparing the tree and returning navigation info.\n   * @param client The client entity to show.\n   * @param vendorId The ID of the parent vendor.\n   * @param groupId The optional ID of the parent group.\n   * @returns Promise that resolves to the search result for navigation\n   */\n  async handleClientInTree(\n    client: ClientListItem,\n    vendorId: string,\n    groupId?: string,\n  ): Promise<TreeSearchResult> {\n    const result = this.createSearchResultForClient(client, vendorId, groupId);\n\n    // Use the search service's utility to expand all parent nodes\n    await this.ensureParentNodesLoaded(result);\n\n    return result;\n  }\n\n  /**\n   * Handles showing a vendor in the tree by preparing the tree and returning navigation info.\n   * @param vendor The vendor entity to show.\n   * @returns Promise that resolves to the search result for navigation\n   */\n  async handleVendorInTree(vendor: VendorListItem): Promise<TreeSearchResult> {\n    const result = this.createSearchResultForVendor(vendor);\n\n    // Use the search service's utility to expand all parent nodes\n    await this.ensureParentNodesLoaded(result);\n\n    return result;\n  }\n\n  /**\n   * Prepares a client for tree selection by ensuring its hierarchy is loaded and expanded.\n   *\n   * This method is used when you have just a client ID and need to make it visible and\n   * selectable in the tree. It's typically called from deep links or when navigating\n   * from another part of the application.\n   *\n   * Approach:\n   * 1. First checks if client is already in loaded data (fast path)\n   * 2. If not found, uses global search API to find the client\n   * 3. Uses search result to determine parent hierarchy\n   * 4. Ensures all parents are loaded and expanded\n   * 5. Returns TreeSearchResult for navigation\n   *\n   * This method does NOT use pagination - it relies on global search which is more\n   * efficient when you don't know where the client is in the hierarchy.\n   *\n   * @param clientId The ID of the client to select\n   * @returns Promise that resolves with the TreeSearchResult if successful, null if client not found\n   */\n  async prepareClientForTreeSelection(\n    clientId: string,\n  ): Promise<TreeSearchResult | null> {\n    // First, check if we can find the client in already loaded data\n    const hierarchy = this.findClientHierarchy(clientId);\n\n    if (hierarchy) {\n      // Try to find the client in the loaded data\n      const client = this.findClientInLoadedData(\n        clientId,\n        hierarchy.vendorId,\n        hierarchy.groupId,\n      );\n      if (client) {\n        const result = this.createSearchResultForClient(\n          client,\n          hierarchy.vendorId,\n          hierarchy.groupId,\n        );\n        await this.ensureParentNodesLoaded(result);\n        return result;\n      }\n    }\n\n    // Client not found in loaded data, use global search to find it\n    try {\n      const searchResponse = await firstValueFrom(\n        this.searchService\n          .searchEntities(clientId)\n          .pipe(catchError(() => of(null))),\n      );\n\n      if (searchResponse?.items) {\n        const clientEntity = searchResponse.items.find(\n          (item) => item.id === clientId,\n        );\n        if (clientEntity) {\n          const result = this.mapEntityToTreeResult(clientEntity);\n          await this.ensureParentNodesLoaded(result);\n          return result;\n        }\n      }\n    } catch (error) {\n      console.error('Failed to search for client:', error);\n    }\n\n    console.warn(`Client ${clientId} not found in any vendor hierarchy`);\n    return null;\n  }\n\n  /**\n   * Prepares a client for tree selection using owner information from ClientDataService.\n   *\n   * This is the PREFERRED method for loading a client into the tree when you have\n   * the full client object with owner information. It's more efficient than\n   * prepareClientForTreeSelection because:\n   *\n   * 1. No global search API call needed (saves network request)\n   * 2. Owner info tells us exactly where in hierarchy to look\n   * 3. Can use targeted pagination instead of broad search\n   *\n   * This method handles two scenarios:\n   * 1. Vendor-owned clients (no group, or group = DEFAULT_SYSTEM_ID)\n   *    - Loads vendor's direct clients with pagination\n   * 2. Group-owned clients (has group ID)\n   *    - Loads group's clients with pagination\n   *\n   * Both scenarios use loadClientsUntilFound which has safety limits to prevent\n   * infinite loops (max 50 pagination attempts, error handling, etc.)\n   *\n   * @param client The client with owner information from ClientDataService\n   * @returns Promise that resolves with the TreeSearchResult if successful, null if not found\n   */\n  async prepareClientForTreeSelectionWithOwner(\n    client: Partial<ClientResponse>,\n  ): Promise<TreeSearchResult | null> {\n    if (!isDefined(client.id) || !isDefined(client.owner)) {\n      console.warn('Client missing ID or owner information');\n      return null;\n    }\n\n    try {\n      // Determine hierarchy based on owner information\n      if (\n        client.group === DEFAULT_SYSTEM_ID ||\n        isNullOrUndefined(client.group)\n      ) {\n        return await this.handleVendorOwnedClient(client);\n      } else {\n        return await this.handleGroupOwnedClient(client);\n      }\n    } catch (error) {\n      console.error('Failed to prepare client for tree selection:', error);\n      return null;\n    }\n  }\n\n  /**\n   * Handles a client owned directly by a vendor\n   */\n  private async handleVendorOwnedClient(\n    client: Partial<ClientResponse>,\n  ): Promise<TreeSearchResult | null> {\n    if (!isDefined(client.owner?.id) || !isDefined(client.id)) return null;\n\n    const vendorId = client.owner.id;\n\n    // Ensure vendor is loaded and expanded\n    await this.ensureVendorLoadedAndExpanded(vendorId);\n\n    // Load clients until we find the target client\n    const foundClient = await this.loadClientsUntilFound(client.id, vendorId);\n\n    if (foundClient) {\n      const result = this.createSearchResultForClient(foundClient, vendorId);\n      await this.ensureParentNodesLoaded(result);\n      return result;\n    }\n\n    return null;\n  }\n\n  /**\n   * Handles a client owned by a group\n   */\n  private async handleGroupOwnedClient(\n    client: Partial<ClientResponse>,\n  ): Promise<TreeSearchResult | null> {\n    if (!isDefined(client.group) || !isDefined(client.id)) return null;\n    const groupId = client.group;\n\n    // Find the vendor that owns this group\n    const vendorId = this.findVendorIdForGroup(groupId);\n    if (!isDefined(vendorId)) {\n      return null;\n    }\n\n    // Ensure vendor is loaded and expanded\n    await this.ensureVendorLoadedAndExpanded(vendorId);\n\n    // Ensure group is expanded\n    this.adminState.setExpandedGroup(groupId, true);\n\n    // Load group clients until we find the target client\n    const foundClient = await this.loadClientsUntilFound(\n      client.id,\n      vendorId,\n      groupId,\n    );\n\n    if (foundClient) {\n      const result = this.createSearchResultForClient(\n        foundClient,\n        vendorId,\n        groupId,\n      );\n      await this.ensureParentNodesLoaded(result);\n      return result;\n    }\n\n    return null;\n  }\n\n  /**\n   * Ensures a vendor is loaded and expanded\n   */\n  private async ensureVendorLoadedAndExpanded(vendorId: string): Promise<void> {\n    const distributorId = this.adminState.getCurrentDistributorId();\n    if (isNullOrUndefined(distributorId)) {\n      return;\n    }\n\n    // Load vendor data if not already loaded\n    if (!this.adminState.isDistributorVendorLoaded(distributorId, vendorId)) {\n      await this.loadVendorData(vendorId, distributorId);\n    }\n\n    // Ensure vendor is expanded\n    this.adminState.setDistributorNodeExpanded(distributorId, vendorId, true);\n  }\n\n  /**\n   * Recursively loads clients using the load more functionality until the target client is found\n   *\n   * This is a critical method that implements safe pagination to find a specific client\n   * without causing infinite loops. It's used when:\n   * - A deep link points to a client not in loaded data\n   * - A search result selects a client that hasn't been loaded yet\n   * - Navigation requires a specific client that may be deep in the pagination\n   *\n   * Safety Mechanisms (prevents infinite loops):\n   * 1. MAX_PAGINATION_ATTEMPTS limit (50 attempts = 5000 clients max)\n   * 2. Error handling that breaks the loop on API failures\n   * 3. hasMore check from pagination state\n   * 4. Updates pagination state to hasMore=false on errors\n   *\n   * Flow:\n   * 1. Check if client is already in loaded data (quick return)\n   * 2. Load initial page if no pagination exists (first 100 clients)\n   * 3. Loop through remaining pages until client found or limits reached:\n   *    - Load next 100 clients\n   *    - Check if target client is in the new batch\n   *    - Break on error to prevent infinite retries\n   *    - Stop at MAX_PAGINATION_ATTEMPTS\n   * 4. Return client if found, null otherwise\n   *\n   * @param targetClientId The ID of the client to find\n   * @param vendorId The vendor ID that owns the client (or its group)\n   * @param groupId Optional group ID if client is in a group\n   * @returns Promise resolving to ClientListItem if found, null if not found after all attempts\n   */\n  private async loadClientsUntilFound(\n    targetClientId: string,\n    vendorId: string,\n    groupId?: string,\n  ): Promise<ClientListItem | null> {\n    const distributorId = this.adminState.getCurrentDistributorId();\n    if (isNullOrUndefined(distributorId)) {\n      return null;\n    }\n\n    // Check if client is already in loaded data\n    let foundClient = this.findClientInLoadedData(\n      targetClientId,\n      vendorId,\n      groupId,\n      distributorId,\n    );\n    if (foundClient) {\n      return foundClient;\n    }\n\n    // If not found, start loading more clients recursively\n    const paginationKey = this.adminState.getDistributorPaginationKey(\n      distributorId,\n      vendorId,\n      groupId,\n    );\n\n    // Get current pagination state using distributor-scoped pagination\n    let currentPagination =\n      this.adminState.clientPagination()[distributorId]?.[paginationKey];\n\n    // If no pagination exists, load the first page\n    if (isNullOrUndefined(currentPagination)) {\n      await this.loadInitialClients(vendorId, groupId, distributorId);\n\n      // Check again after initial load\n      foundClient = this.findClientInLoadedData(\n        targetClientId,\n        vendorId,\n        groupId,\n        distributorId,\n      );\n      if (foundClient) {\n        return foundClient;\n      }\n\n      // Update pagination state\n      currentPagination =\n        this.adminState.clientPagination()[distributorId]?.[paginationKey];\n    }\n\n    // Safety mechanism: Limit the number of pagination attempts to prevent infinite loops\n    const MAX_PAGINATION_ATTEMPTS = 50; // Maximum 5000 clients (50 * 100)\n    let paginationAttempts = 0;\n\n    // Continue loading more pages until client is found or no more data\n    while (\n      isDefined(currentPagination) &&\n      currentPagination.hasMore &&\n      isNullOrUndefined(foundClient) &&\n      paginationAttempts < MAX_PAGINATION_ATTEMPTS\n    ) {\n      paginationAttempts++;\n\n      try {\n        await this.loadMoreClientsPage(vendorId, groupId, distributorId);\n      } catch (error) {\n        console.error(\n          `Error loading page ${paginationAttempts} while searching for client ${targetClientId}:`,\n          error,\n        );\n        // Break the loop on error to prevent infinite retries\n        break;\n      }\n\n      // Check if client is now found\n      foundClient = this.findClientInLoadedData(\n        targetClientId,\n        vendorId,\n        groupId,\n        distributorId,\n      );\n      if (foundClient) {\n        console.log(\n          `Client ${targetClientId} found after ${paginationAttempts} pagination attempts`,\n        );\n        return foundClient;\n      }\n\n      // Update pagination state for next iteration\n      currentPagination =\n        this.adminState.clientPagination()[distributorId]?.[paginationKey];\n    }\n\n    // Log if we hit the pagination limit\n    if (paginationAttempts >= MAX_PAGINATION_ATTEMPTS) {\n      console.warn(\n        `Reached maximum pagination attempts (${MAX_PAGINATION_ATTEMPTS}) while searching for client ${targetClientId}`,\n      );\n    }\n\n    return foundClient ?? null;\n  }\n\n  /**\n   * Loads initial clients for a vendor or group within distributor context\n   */\n  private async loadInitialClients(\n    vendorId: string,\n    groupId?: string,\n    distributorId?: string,\n  ): Promise<void> {\n    const contextDistributorId =\n      distributorId ?? this.adminState.getCurrentDistributorId();\n    if (isNullOrUndefined(contextDistributorId)) {\n      return;\n    }\n\n    try {\n      const clientResponse = await this.adminTreeService.listVendorClients(\n        vendorId,\n        groupId,\n        0,\n        100,\n      );\n\n      const paginationUpdate = {\n        offset: 0,\n        limit: 100,\n        total: clientResponse.total,\n        hasMore: clientResponse.hasMore,\n      };\n\n      if (isDefined(groupId)) {\n        this.adminState.addGroupClients(\n          contextDistributorId,\n          vendorId,\n          groupId,\n          clientResponse.clients,\n          paginationUpdate,\n          false, // Replace, not append\n        );\n      } else {\n        this.adminState.addDistributorVendorClients(\n          contextDistributorId,\n          vendorId,\n          clientResponse.clients,\n          paginationUpdate,\n          false, // Replace, not append\n        );\n      }\n    } catch (error) {\n      console.error('Failed to load initial clients:', error);\n    }\n  }\n\n  /**\n   * Loads the next page of clients using the existing load more functionality\n   *\n   * This method loads the next 100 clients from the API and updates the state.\n   * It includes critical error handling to prevent infinite loops:\n   *\n   * Error Handling:\n   * - On error, sets hasMore=false to stop future pagination attempts\n   * - Uses empty array to update just the pagination state\n   * - Re-throws error so caller knows the load failed\n   *\n   * The error handling is crucial because without it, a persistent API error\n   * (network issue, auth problem, etc.) would cause the caller to retry\n   * indefinitely, causing an infinite loop and browser hang.\n   *\n   * @param vendorId The vendor ID to load clients for\n   * @param groupId Optional group ID if loading group clients\n   * @param distributorId Optional distributor ID (uses current if not provided)\n   * @throws Error if the API request fails (after updating state to prevent retries)\n   */\n  private async loadMoreClientsPage(\n    vendorId: string,\n    groupId?: string,\n    distributorId?: string,\n  ): Promise<void> {\n    const contextDistributorId =\n      distributorId ?? this.adminState.getCurrentDistributorId();\n    if (isNullOrUndefined(contextDistributorId)) {\n      return;\n    }\n\n    const paginationKey = this.adminState.getDistributorPaginationKey(\n      contextDistributorId,\n      vendorId,\n      groupId,\n    );\n    const currentPagination =\n      this.adminState.clientPagination()[contextDistributorId]?.[paginationKey];\n\n    if (!currentPagination?.hasMore || currentPagination.loadingMore) {\n      return;\n    }\n\n    const nextOffset = currentPagination.offset + currentPagination.limit;\n\n    try {\n      this.adminState.setDistributorLoadingMore(\n        contextDistributorId,\n        vendorId,\n        groupId,\n        true,\n      );\n\n      const clientResponse = await this.adminTreeService.listVendorClients(\n        vendorId,\n        groupId,\n        nextOffset,\n        100,\n      );\n\n      const paginationUpdate = {\n        offset: nextOffset,\n        limit: 100,\n        total: clientResponse.total,\n        hasMore: clientResponse.hasMore,\n      };\n\n      if (isDefined(groupId)) {\n        this.adminState.addGroupClients(\n          contextDistributorId,\n          vendorId,\n          groupId,\n          clientResponse.clients,\n          paginationUpdate,\n          true, // Append results\n        );\n      } else {\n        this.adminState.addDistributorVendorClients(\n          contextDistributorId,\n          vendorId,\n          clientResponse.clients,\n          paginationUpdate,\n          true, // Append results\n        );\n      }\n    } catch (error) {\n      console.error('Failed to load more clients:', error);\n      // Mark as no more data to prevent retry loops on persistent errors\n      this.adminState.setDistributorLoadingMore(\n        contextDistributorId,\n        vendorId,\n        groupId,\n        false,\n      );\n      // Update pagination to indicate no more data available due to error\n      // Use existing methods with empty arrays to update just pagination\n      const errorPaginationUpdate = {\n        offset: nextOffset,\n        limit: 100,\n        total: currentPagination.total,\n        hasMore: false, // Stop trying to load more after an error\n      };\n      if (isDefined(groupId)) {\n        this.adminState.addGroupClients(\n          contextDistributorId,\n          vendorId,\n          groupId,\n          [], // Empty array - just updating pagination\n          errorPaginationUpdate,\n          false,\n        );\n      } else {\n        this.adminState.addDistributorVendorClients(\n          contextDistributorId,\n          vendorId,\n          [], // Empty array - just updating pagination\n          errorPaginationUpdate,\n          false,\n        );\n      }\n      // Re-throw the error so the caller knows the load failed\n      throw error;\n    }\n  }\n\n  /**\n   * Searches for and loads a client using the global search API\n   * @param clientId The ID of the client to find\n   * @param _searchContext Optional context about where to look (vendor/group) - not used in global search\n   * @returns Promise that resolves to true if client was found and loaded\n   */\n  async searchAndLoadClient(\n    clientId: string,\n    _searchContext?: { vendorId?: string; groupId?: string },\n  ): Promise<boolean> {\n    // Use global search to find the client first\n    try {\n      const searchResponse = await firstValueFrom(\n        this.cacheService.getOrFetch(\n          `admin-search-${clientId}`,\n          () =>\n            this.searchService\n              .searchEntities(clientId)\n              .pipe(catchError(() => of(null))),\n          30000,\n        ),\n      );\n\n      if (searchResponse?.items) {\n        const clientEntity = searchResponse.items.find(\n          (item) => item.id === clientId,\n        );\n        if (clientEntity) {\n          const result = this.mapEntityToTreeResult(clientEntity);\n          await this.ensureParentNodesLoaded(result);\n          return true;\n        }\n      }\n    } catch (error) {\n      console.error('Failed to search and load client:', error);\n    }\n\n    return false;\n  }\n\n  /**\n   * Finds a client in the currently loaded data within distributor context\n   */\n  private findClientInLoadedData(\n    clientId: string,\n    vendorId: string,\n    groupId?: string,\n    distributorId?: string,\n  ): ClientListItem | undefined {\n    const contextDistributorId =\n      distributorId ?? this.adminState.getCurrentDistributorId();\n    if (isNullOrUndefined(contextDistributorId)) {\n      return undefined;\n    }\n\n    if (isDefined(groupId)) {\n      // Search in group clients using distributor-scoped data\n      const groupClients =\n        this.adminState.groupClients()[contextDistributorId]?.[vendorId]?.[\n          groupId\n        ];\n      return groupClients?.find((client) => client.id === clientId);\n    } else {\n      // Search in vendor clients using distributor-scoped data\n      const vendorClients =\n        this.adminState.vendorClients()[contextDistributorId]?.[vendorId];\n      return vendorClients?.find((client) => client.id === clientId);\n    }\n  }\n\n  /**\n   * Preloads search data for better performance\n   * This method is called from AdminDataService for background preloading\n   */\n  async preloadSearchData(): Promise<void> {\n    const distributorId = this.adminState.getCurrentDistributorId();\n    if (isNullOrUndefined(distributorId)) {\n      return;\n    }\n\n    // With global search, we don't need to preload data as much\n    // But we can still preload some basic vendor/group data if needed\n    try {\n      const distributorVendors =\n        this.adminState.distributorVendors()[distributorId] ?? [];\n\n      // Preload basic vendor data for common operations\n      const preloadPromises = distributorVendors.map(async (vendor) => {\n        try {\n          if (\n            !this.adminState.isDistributorVendorLoaded(distributorId, vendor.id)\n          ) {\n            await this.loadVendorData(vendor.id, distributorId);\n          }\n        } catch (error) {\n          console.warn(\n            `Failed to preload vendor data for ${vendor.id}:`,\n            error,\n          );\n        }\n      });\n\n      await Promise.all(preloadPromises);\n    } catch (error) {\n      console.warn('Failed to preload search data:', error);\n    }\n  }\n}\n","import { Injectable, inject } from '@angular/core';\nimport { ClientResponse, VendorListItem, VendorResponse } from '../../../api';\nimport { AdminTreeService } from './admin-tree.service';\nimport { AdminStateService } from './admin-state.service';\nimport { AdminSearchService } from './admin-search.service';\nimport { MessageService, TreeNode } from 'primeng/api';\nimport {\n  DEFAULT_LIST_SIZE,\n  DEFAULT_SYSTEM_ID,\n  LOCAL_STORAGE_KEY_SELECTED_CLIENT,\n} from '../../../core/models';\nimport { AuthDataService } from '../../../core/services/auth-data.service';\nimport { LocalStorageService } from '../../../shared/services/local-storage.service';\nimport { ADMIN_TREE } from '../models/tree-node-data.interface';\nimport { isDefined, isNullOrUndefined } from '../../../shared/utils';\nimport { HttpErrorResponse } from '@angular/common/http';\nimport { ApiSchemaService } from '../../../core/services/api-schema.service';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class AdminDataService {\n  private readonly adminTreeService = inject(AdminTreeService);\n  private readonly adminState = inject(AdminStateService);\n  private readonly adminSearchService = inject(AdminSearchService);\n  private readonly messageService = inject(MessageService);\n  private readonly localStorageService = inject(LocalStorageService);\n  private readonly authDataService = inject(AuthDataService);\n  private readonly apiSchemaService = inject(ApiSchemaService);\n\n  private async loadClient(routeClientId?: string): Promise<void> {\n    // Priority order: 1. Route client ID, 2. Saved client ID, 3. Default client ID\n    const savedClientId = this.localStorageService.getItem<\n      Partial<ClientResponse>\n    >(LOCAL_STORAGE_KEY_SELECTED_CLIENT)?.id;\n    const defaultClientId =\n      this.authDataService.getUserProfile()?.defaultClient?.id;\n\n    // Use route client ID if provided, otherwise fall back to saved or default\n    const clientIdToLoad = routeClientId ?? savedClientId ?? defaultClientId;\n\n    if (isNullOrUndefined(clientIdToLoad)) {\n      this.messageService.add({\n        severity: 'warn',\n        summary: 'Warning',\n        detail: 'No client found for the user',\n      });\n      return;\n    }\n\n    try {\n      const client = await this.adminTreeService.tryLoadClient(\n        clientIdToLoad,\n        defaultClientId,\n      );\n      this.adminState.setSelectedClient(client);\n      if (!client) {\n        this.messageService.add({\n          severity: 'warn',\n          summary: 'Warning',\n          detail: 'No client found for the user',\n        });\n      }\n    } catch (error: unknown) {\n      this.messageService.add({\n        severity: 'error',\n        summary: 'Error',\n        detail: `An error occurred while initializing the client:  ${error instanceof Error ? error.message : 'Unknown error'}`,\n      });\n    }\n  }\n\n  private async loadVendorData(ownerId: string): Promise<void> {\n    try {\n      const vendor = await this.adminTreeService.fetchClientVendor(ownerId);\n      if (isNullOrUndefined(vendor?.id)) return;\n\n      this.adminState.setClientVendor(vendor);\n    } catch (error) {\n      if (error instanceof HttpErrorResponse && error?.status === 403) {\n        const selectedClient = this.adminState.selectedClient();\n        if (selectedClient) {\n          this.adminState.setFallbackToClient(selectedClient);\n        }\n      } else {\n        throw error;\n      }\n    }\n  }\n\n  private async loadDistributorData(\n    vendor: VendorResponse | VendorListItem,\n  ): Promise<void> {\n    try {\n      const [groups, clients] = await Promise.all([\n        this.adminTreeService.listCompanyGroups(vendor.id),\n        this.adminTreeService.listVendorClients(\n          vendor.id,\n          undefined,\n          0,\n          DEFAULT_LIST_SIZE,\n        ),\n      ]);\n\n      this.adminState.setDistributorVendorGroups(\n        vendor.owner.id,\n        vendor.id,\n        groups,\n      );\n      this.adminState.addDistributorVendorClients(\n        vendor.owner.id,\n        vendor.id,\n        clients.clients,\n        {\n          offset: 0,\n          limit: DEFAULT_LIST_SIZE,\n          total: clients.total,\n          hasMore: clients.hasMore,\n        },\n      );\n      this.adminState.markDistributorVendorAsLoaded(vendor.owner.id, vendor.id);\n\n      const distributor = await this.adminTreeService.fetchVendorDistributor(\n        vendor.owner?.id,\n      );\n      if (!distributor) {\n        this.adminState.setFallbackToVendor(vendor);\n        return;\n      }\n\n      this.adminState.setVendorDistributor(distributor);\n      this.adminState.setExpandedDistributor(distributor.id, true);\n\n      // Check if vendors are already loaded for this distributor\n      const distributorVendors = this.adminState.getDistributorVendors(\n        distributor.id,\n      );\n      if (!distributorVendors.length) {\n        const vendors = await this.adminTreeService.listDistributorVendors(\n          distributor.id,\n        );\n        this.adminState.setDistributorVendors(distributor.id, vendors);\n      }\n    } catch (error) {\n      if (error instanceof HttpErrorResponse && error?.status === 403) {\n        this.adminState.setFallbackToVendor(vendor);\n      } else {\n        throw error;\n      }\n    }\n  }\n\n  /**\n   * Loads the initial hierarchical data for the administration tree.\n   * This includes loading client data, vendor data, and distributor data in sequence.\n   * Sets loading states and handles errors during the loading process.\n   *\n   * @param routeClientId Optional client ID from the route parameters\n   * @returns Promise<void> Resolves when all data is loaded or if an error occurs\n   * @throws Displays error message via MessageService if loading fails\n   */\n  async loadInitialData(routeClientId?: string): Promise<void> {\n    this.adminState.setInitialLoading(true);\n    try {\n      if (!this.adminState.hasClientData()) {\n        await this.loadClient(routeClientId);\n      }\n      const selectedClient = this.adminState.selectedClient();\n      if (isNullOrUndefined(selectedClient?.owner?.id)) return;\n\n      if (!this.adminState.hasVendorData()) {\n        await this.loadVendorData(selectedClient.owner.id);\n      }\n      const vendor = this.adminState.clientVendor();\n      if (!vendor) return;\n\n      // Load both groups and direct vendor clients\n      const [groups, vendorClientResponse] = await Promise.all([\n        this.adminTreeService.listCompanyGroups(vendor.id),\n        this.adminTreeService.listVendorClients(\n          vendor.id,\n          undefined,\n          0,\n          DEFAULT_LIST_SIZE,\n        ), // First page\n      ]);\n\n      this.adminState.setDistributorVendorGroups(\n        vendor.owner.id,\n        vendor.id,\n        groups,\n      );\n      this.adminState.addDistributorVendorClients(\n        vendor.owner.id,\n        vendor.id,\n        vendorClientResponse.clients,\n        {\n          offset: 0,\n          limit: DEFAULT_LIST_SIZE,\n          total: vendorClientResponse.total,\n          hasMore: vendorClientResponse.hasMore,\n        },\n        false, // Replace on initial load\n      );\n      this.adminState.markDistributorVendorAsLoaded(vendor.owner.id, vendor.id);\n\n      // If client belongs to a group, load that group's clients\n      if (isDefined(selectedClient.group)) {\n        const groupClientResponse =\n          await this.adminTreeService.listVendorClients(\n            vendor.id,\n            selectedClient.group,\n            0,\n            DEFAULT_LIST_SIZE,\n          );\n        this.adminState.addGroupClients(\n          vendor.owner.id,\n          vendor.id,\n          selectedClient.group,\n          groupClientResponse.clients,\n          {\n            offset: 0,\n            limit: DEFAULT_LIST_SIZE,\n            total: groupClientResponse.total,\n            hasMore: groupClientResponse.hasMore,\n          },\n          false, // Replace on initial load\n        );\n        this.adminState.setDistributorExpandedGroup(\n          vendor.owner.id,\n          selectedClient.group,\n          true,\n        );\n      }\n\n      // Expand the vendor node\n      this.adminState.setDistributorNodeExpanded(\n        vendor.owner.id,\n        vendor.id,\n        true,\n      );\n\n      if (vendor.owner?.id) {\n        await this.loadDistributorData(vendor);\n      }\n\n      const usesModernSchema = this.apiSchemaService.usesModernSchema();\n      // If super admin, also load all distributors\n      if (this.authDataService.isSuperAdmin() && usesModernSchema) {\n        try {\n          const distributors =\n            await this.adminTreeService.listDistributors(DEFAULT_SYSTEM_ID);\n          this.adminState.setDistributors(distributors);\n        } catch (error) {\n          console.error('Error loading distributors for super admin:', error);\n          // Don't throw here as this is supplementary data\n        }\n      }\n    } catch (error: unknown) {\n      this.messageService.add({\n        severity: 'error',\n        summary: 'Error',\n        detail: `Failed to load initial data:  ${error instanceof Error ? error.message : 'Unknown error'}`,\n      });\n    } finally {\n      this.adminState.setInitialLoading(false);\n\n      // Start background search data preloading for better search performance\n      // This runs in the background and doesn't block the UI\n      this.preloadSearchDataInBackground();\n    }\n  }\n\n  /**\n   * Preloads search data in the background to improve search performance\n   * This method runs asynchronously and doesn't block the UI\n   */\n  private preloadSearchDataInBackground(): void {\n    // Run preloading in background without waiting\n    this.adminSearchService.preloadSearchData().catch((error: unknown) => {\n      console.warn('Background search data preloading failed:', error);\n      // Don't show user-facing error for background operation\n    });\n  }\n\n  /**\n   * Expands a tree node and loads its children data.\n   * For vendor nodes, loads company groups and clients.\n   * For group nodes, loads the associated clients.\n   *\n   * @param node - The TreeNode to expand\n   * @returns Promise<void> Resolves when child data is loaded\n   * @throws Displays error message via MessageService if loading fails\n   */\n  async expandNode(node: TreeNode): Promise<void> {\n    if (\n      isNullOrUndefined(node.data?.id) ||\n      node.type !== ADMIN_TREE.NODE_TYPES.VENDOR\n    )\n      return;\n    const vendorId = node.data.id;\n\n    // Get the distributor context for this vendor node\n    const distributorId = this.getDistributorContextFromNode(node);\n    if (isNullOrUndefined(distributorId)) {\n      console.warn('Could not determine distributor context for vendor node');\n      return;\n    }\n\n    // Check if already loaded for this distributor using the public computed properties\n    const distributorLoadedVendors =\n      this.adminState.loadedVendors()[distributorId];\n    if (distributorLoadedVendors?.has(vendorId)) return;\n\n    try {\n      this.adminState.addDistributorLoadingVendor(distributorId, vendorId);\n      this.adminState.setDistributorNodeExpanded(distributorId, vendorId, true);\n\n      const [groups, clientResponse] = await Promise.all([\n        this.adminTreeService.listCompanyGroups(vendorId),\n        this.adminTreeService.listVendorClients(\n          vendorId,\n          undefined,\n          0,\n          DEFAULT_LIST_SIZE,\n        ), // First page\n      ]);\n\n      this.adminState.setDistributorVendorGroups(\n        distributorId,\n        vendorId,\n        groups,\n      );\n      this.adminState.addDistributorVendorClients(\n        distributorId,\n        vendorId,\n        clientResponse.clients,\n        {\n          offset: 0,\n          limit: DEFAULT_LIST_SIZE,\n          total: clientResponse.total,\n          hasMore: clientResponse.hasMore,\n        },\n        false, // Replace on initial expand\n      );\n      this.adminState.markDistributorVendorAsLoaded(distributorId, vendorId);\n    } catch (error: unknown) {\n      this.messageService.add({\n        severity: 'error',\n        summary: 'Error',\n        detail: `Failed to load vendor data: ${error instanceof Error ? error.message : 'Unknown error'}`,\n      });\n    } finally {\n      this.adminState.removeDistributorLoadingVendor(distributorId, vendorId);\n    }\n  }\n\n  /**\n   * Helper method to get distributor context from a tree node by walking up the tree\n   * @param node - The tree node to get context from\n   * @returns The distributor ID or null if not found\n   */\n  getDistributorContextFromNode(node: TreeNode): string | null {\n    let current = node.parent;\n    while (current) {\n      if (current.type === ADMIN_TREE.NODE_TYPES.DISTRIBUTOR) {\n        return current.data?.id ?? null;\n      }\n      current = current.parent;\n    }\n\n    // Fallback to current distributor from state\n    return this.adminState.getCurrentDistributorId();\n  }\n\n  /**\n   * Expands a group node and loads its associated clients.\n   *\n   * @param groupNode - The group TreeNode to expand\n   * @returns Promise<void> Resolves when client data is loaded\n   * @throws Displays error message via MessageService if loading fails\n   */\n  async expandGroup(groupNode: TreeNode): Promise<void> {\n    if (\n      isNullOrUndefined(groupNode.data?.id) ||\n      isNullOrUndefined(groupNode.parent?.data?.id)\n    )\n      return;\n\n    const groupId = groupNode.data.id;\n    const vendorId = groupNode.parent.data.id;\n\n    // Get distributor context from the tree hierarchy\n    const distributorId = this.getDistributorContextFromNode(groupNode);\n    if (isNullOrUndefined(distributorId)) {\n      console.warn('Could not determine distributor context for group node');\n      return;\n    }\n\n    // Check if already loaded using distributor-scoped pagination\n    const paginationKey = this.adminState.getDistributorPaginationKey(\n      distributorId,\n      vendorId,\n      groupId,\n    );\n    const distributorPagination =\n      this.adminState.clientPagination()[distributorId];\n    if (isDefined(distributorPagination?.[paginationKey])) return;\n\n    try {\n      // Mark as expanded optimistically\n      this.adminState.setDistributorExpandedGroup(distributorId, groupId, true);\n\n      const clientResponse = await this.adminTreeService.listVendorClients(\n        vendorId,\n        groupId,\n        0,\n        DEFAULT_LIST_SIZE,\n      );\n\n      this.adminState.addGroupClients(\n        distributorId,\n        vendorId,\n        groupId,\n        clientResponse.clients,\n        {\n          offset: 0,\n          limit: DEFAULT_LIST_SIZE,\n          total: clientResponse.total,\n          hasMore: clientResponse.hasMore,\n        },\n        false, // Replace on initial expand\n      );\n    } catch (error: unknown) {\n      this.adminState.setDistributorExpandedGroup(\n        distributorId,\n        groupId,\n        false,\n      ); // Revert expansion on error\n      this.messageService.add({\n        severity: 'error',\n        summary: 'Error',\n        detail: `Failed to load group clients: ${error instanceof Error ? error.message : 'Unknown error'}`,\n      });\n    }\n  }\n\n  async expandDistributor(distributorNode: TreeNode): Promise<void> {\n    const distributorId = distributorNode.data.id;\n    if (isNullOrUndefined(distributorId)) return;\n\n    try {\n      // Load vendors for this specific distributor\n      const vendors =\n        await this.adminTreeService.listDistributorVendors(distributorId);\n\n      // Use the new distributor-scoped method\n      this.adminState.setDistributorVendors(distributorId, vendors);\n      this.adminState.setExpandedDistributor(distributorId, true);\n    } catch (error: unknown) {\n      this.messageService.add({\n        severity: 'error',\n        summary: 'Error',\n        detail: `Failed to load distributor vendors: ${error instanceof Error ? error.message : 'Unknown error'}`,\n      });\n    }\n  }\n\n  collapseNode(node: TreeNode): void {\n    this.adminState.toggleNodeExpansion(node.data.id, false);\n  }\n\n  collapseGroup(groupNode: TreeNode): void {\n    const distributorId = this.getDistributorContextFromNode(groupNode);\n    if (isDefined(distributorId)) {\n      this.adminState.setDistributorExpandedGroup(\n        distributorId,\n        groupNode.data.id,\n        false,\n      );\n    } else {\n      // Fallback to legacy method if no distributor context\n      this.adminState.setExpandedGroup(groupNode.data.id, false);\n    }\n  }\n\n  collapseDistributor(distributorNode: TreeNode): void {\n    this.adminState.setExpandedDistributor(distributorNode.data.id, false);\n  }\n\n  /**\n   * Selects a node in the tree and updates the selected client in the admin state.\n   *\n   * @param node - The TreeNode to select\n   */\n  selectNode(node: TreeNode): void {\n    // Prevent selecting the \"Load More\" node as a client\n    if (\n      isNullOrUndefined(node.data?.id) ||\n      node.type === ADMIN_TREE.NODE_TYPES.LOAD_MORE\n    )\n      return;\n\n    // Only select actual client nodes\n    if (node.type === ADMIN_TREE.NODE_TYPES.CLIENT) {\n      this.adminState.setSelectedClient(node.data as ClientResponse);\n      this.adminState.setClientVendor(null); // Clear vendor when selecting a client\n    } else if (node.type === ADMIN_TREE.NODE_TYPES.VENDOR) {\n      this.adminState.setClientVendor(node.data as VendorResponse);\n      this.adminState.setSelectedClient(null);\n    } else if (node.type === ADMIN_TREE.NODE_TYPES.GROUP) {\n      // For group nodes, we can either select the group or the first client in the group\n      this.adminState.setSelectedClient(null);\n      this.adminState.setClientVendor(null); // Clear vendor when selecting a group\n\n      // Use distributor-scoped expansion if possible\n      const distributorId = this.getDistributorContextFromNode(node);\n      if (isDefined(distributorId)) {\n        this.adminState.setDistributorExpandedGroup(\n          distributorId,\n          node.data.id,\n          true,\n        );\n      } else {\n        // Fallback to legacy method\n        this.adminState.setExpandedGroup(node.data.id, true);\n      }\n    } else if (node.type === ADMIN_TREE.NODE_TYPES.DISTRIBUTOR) {\n      this.adminState.setVendorDistributor(node.data as VendorResponse);\n      this.adminState.setSelectedClient(null); // Clear client when selecting a distributor\n      this.adminState.setClientVendor(null); // Clear vendor when selecting a distributor\n    }\n  }\n\n  /**\n   * Recursively searches through the tree nodes to find a node matching the given client ID.\n   *\n   * @param nodes - Array of TreeNodes to search through\n   * @param clientId - The client ID to search for\n   * @returns TreeNode if found, null otherwise\n   */\n  findSelectedNode(nodes: TreeNode[], clientId: string): TreeNode | null {\n    for (const node of nodes) {\n      if (node.key === clientId) {\n        return node;\n      }\n      if (node.children) {\n        const found = this.findSelectedNode(node.children, clientId);\n        if (found) return found;\n      }\n    }\n    return null;\n  }\n\n  /**\n   * Loads the next page of clients for a given vendor or group within a distributor context.\n   * @param vendorId - The ID of the vendor.\n   * @param groupId - Optional group ID.\n   * @param distributorId - Optional distributor ID. If not provided, will try to get from current context.\n   */\n  async loadMoreClients(\n    vendorId: string,\n    groupId?: string,\n    distributorId?: string,\n  ): Promise<void> {\n    // Get distributor context - use provided ID or try to get current context\n    const contextDistributorId =\n      distributorId ?? this.adminState.getCurrentDistributorId();\n\n    if (isNullOrUndefined(contextDistributorId)) {\n      return;\n    }\n\n    const paginationKey = this.adminState.getDistributorPaginationKey(\n      contextDistributorId,\n      vendorId,\n      groupId,\n    );\n\n    const currentPagination =\n      this.adminState.clientPagination()[contextDistributorId]?.[paginationKey];\n\n    if (\n      isNullOrUndefined(currentPagination) ||\n      isNullOrUndefined(currentPagination.hasMore) ||\n      currentPagination.loadingMore === true\n    ) {\n      return; // No more pages or already loading\n    }\n\n    const nextOffset = currentPagination.offset + currentPagination.limit;\n\n    try {\n      this.adminState.setDistributorLoadingMore(\n        contextDistributorId,\n        vendorId,\n        groupId,\n        true,\n      );\n\n      const clientResponse = await this.adminTreeService.listVendorClients(\n        vendorId,\n        groupId,\n        nextOffset,\n        DEFAULT_LIST_SIZE,\n      );\n\n      const paginationUpdate = {\n        offset: nextOffset,\n        limit: DEFAULT_LIST_SIZE,\n        total: clientResponse.total,\n        hasMore: clientResponse.hasMore,\n      };\n\n      if (isDefined(groupId)) {\n        this.adminState.addGroupClients(\n          contextDistributorId,\n          vendorId,\n          groupId,\n          clientResponse.clients,\n          paginationUpdate,\n          true, // Append results\n        );\n      } else {\n        this.adminState.addDistributorVendorClients(\n          contextDistributorId,\n          vendorId,\n          clientResponse.clients,\n          paginationUpdate,\n          true, // Append results\n        );\n      }\n    } catch (error: unknown) {\n      this.messageService.add({\n        severity: 'error',\n        summary: 'Error',\n        detail: `Failed to load more clients: ${error instanceof Error ? error.message : 'Unknown error'}`,\n      });\n      // Reset loading state on error\n      this.adminState.setDistributorLoadingMore(\n        contextDistributorId,\n        vendorId,\n        groupId,\n        false,\n      );\n    }\n    // Loading state is reset within addDistributorVendorClients/addGroupClients on success\n  }\n\n  /**\n   * Handles client creation event to refresh the tree state.\n   * This method is called when a client is created, and it refreshes the relevant parts of the tree.\n   */\n  async handleClientCreated(clientId: string): Promise<ClientResponse | null> {\n    try {\n      // Load the new client to get its details\n      const client = await this.adminTreeService.tryLoadClient(clientId);\n      if (!client) {\n        console.warn('Could not load newly created client:', clientId);\n        return null;\n      }\n\n      const vendorId = client.owner?.id;\n      if (!vendorId) {\n        console.warn('Client does not have a vendor ID:', clientId);\n        return null;\n      }\n\n      // Note: Legacy method that needs refactoring for distributor-scoped architecture\n      // Currently disabled to avoid conflicts with new distributor-scoped state\n      return client;\n    } catch (_error) {\n      this.messageService.add({\n        severity: 'error',\n        summary: 'Error',\n        detail: 'Failed to refresh vendor data after client creation',\n      });\n      // Re-throw to maintain error propagation\n      throw _error;\n    }\n  }\n\n  /**\n   * Expands a super admin node and loads distributor data\n   * @param _superAdminNode - The super admin node to expand\n   */\n  expandSuperAdmin(_superAdminNode: TreeNode): void {\n    // Legacy method - expansion state management moved to distributor-scoped pattern\n    // Implementation would require distributor context to properly manage state\n  }\n\n  /**\n   * Collapses a super admin node\n   * @param _superAdminNode - The super admin node to collapse\n   */\n  collapseSuperAdmin(_superAdminNode: TreeNode): void {\n    // Legacy method - expansion state management moved to distributor-scoped pattern\n    // Implementation would require distributor context to properly manage state\n  }\n}\n","export enum EventSource {\n  USER = 'user',\n  SYSTEM = 'system',\n  ROUTE = 'route',\n  SEARCH = 'search',\n  BROADCAST = 'broadcast',\n  INITIAL_LOAD = 'initial_load',\n}\n","import { Injectable } from '@angular/core';\nimport { TreeNode } from 'primeng/api';\nimport { ContextExtractor } from '../../../shared/components/tree-panel/tree-panel.component';\nimport { isDefined } from '../../../shared/utils';\n\n/**\n * Context extractor for admin tree that understands vendor/group/client relationships\n */\n@Injectable({\n  providedIn: 'root',\n})\nexport class AdminTreeContextExtractorService implements ContextExtractor {\n  /**\n   * Extracts search context by looking at the current tree structure\n   * to determine which vendor/group might contain the missing client\n   */\n  extractContext(\n    _nodeKey: string,\n    nodes: TreeNode[],\n  ): Record<string, unknown> | undefined {\n    // Look through the current tree to find potential vendor/group contexts\n    // This is a best-effort attempt to provide context for progressive loading\n    const context: { vendorId?: string; groupId?: string } = {};\n\n    const extractFromNodes = (\n      treeNodes: TreeNode[],\n      currentVendorId?: string,\n      currentGroupId?: string,\n    ): void => {\n      for (const node of treeNodes) {\n        if (node.type === 'vendor') {\n          currentVendorId = node.key as string;\n          currentGroupId = undefined; // Reset group when entering new vendor\n        } else if (node.type === 'group') {\n          currentGroupId = node.key as string;\n        }\n\n        // If we find any client in this context, use this vendor/group as potential context\n        if (\n          node.type === 'client' &&\n          isDefined(currentVendorId) &&\n          currentVendorId !== ''\n        ) {\n          context.vendorId = currentVendorId;\n          if (isDefined(currentGroupId) && currentGroupId !== '') {\n            context.groupId = currentGroupId;\n          }\n        }\n\n        if (node.children && node.children.length > 0) {\n          extractFromNodes(node.children, currentVendorId, currentGroupId);\n        }\n      }\n    };\n\n    extractFromNodes(nodes);\n\n    // Return context if we found at least a vendor\n    return isDefined(context.vendorId) && context.vendorId !== ''\n      ? context\n      : undefined;\n  }\n}\n","import { computed, inject, Injectable } from '@angular/core';\nimport { TreeNode } from 'primeng/api';\nimport { AdminStateService } from './admin-state.service';\nimport { AdminTreeService } from './admin-tree.service';\nimport { AuthDataService } from '../../../core/services/auth-data.service';\nimport { ApiSchemaService } from '../../../core/services/api-schema.service';\nimport { AdminSearchService } from './admin-search.service';\nimport {\n  ClientResponse,\n  ClientListItem,\n  DistributorResponse,\n  DistributorListItem,\n  VendorListItem,\n  VendorResponse,\n} from '../../../api';\nimport { ADMIN_TREE } from '../models/tree-node-data.interface';\nimport { isDefined } from '../../../shared/utils';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class AdminTreeManagementService {\n  private readonly adminState = inject(AdminStateService);\n  private readonly adminTreeService = inject(AdminTreeService);\n  private readonly authDataService = inject(AuthDataService);\n  private readonly apiSchemaService = inject(ApiSchemaService);\n  private readonly adminSearchService = inject(AdminSearchService);\n\n  readonly hierarchyTree = computed(() => {\n    const distributor = this.adminState.vendorDistributor();\n    const vendor = this.adminState.clientVendor();\n    const selectedClient = this.adminState.selectedClient();\n    const isSuperAdmin = this.authDataService.isSuperAdmin();\n    const usesModernSchema = this.apiSchemaService.usesModernSchema();\n\n    const searchExpandedNodes = this.adminSearchService.expandedForSearch();\n\n    if (isSuperAdmin && usesModernSchema && distributor) {\n      const tree = this.buildSuperAdminHierarchy(distributor, selectedClient);\n      return this.applySearchEnhancements(tree, searchExpandedNodes);\n    } else if (distributor) {\n      const tree = this.buildDistributorHierarchy(distributor, selectedClient);\n      return this.applySearchEnhancements(tree, searchExpandedNodes);\n    } else if (vendor) {\n      const tree = this.buildVendorOnlyHierarchy(vendor, selectedClient);\n      return this.applySearchEnhancements(tree, searchExpandedNodes);\n    } else if (selectedClient) {\n      return [this.adminTreeService.createClientNode(selectedClient, true)];\n    }\n\n    return [];\n  });\n\n  private buildSuperAdminHierarchy(\n    distributor: DistributorResponse,\n    selectedClient: ClientResponse | null,\n  ): TreeNode[] {\n    // Use distributor-scoped expanded nodes - super admin context uses 'super-admin' as distributor key\n    const superAdminExpandedNodes =\n      this.adminState.expandedNodes()['super-admin'] ?? new Set();\n    const usesModernSchema = this.apiSchemaService.usesModernSchema();\n    const allDistributors = this.adminState.distributors();\n\n    const isSuperAdminExpanded =\n      usesModernSchema || superAdminExpandedNodes.has('super-admin-root');\n\n    const superAdminNode = this.adminTreeService.createSuperAdminNode(\n      isSuperAdminExpanded,\n      [],\n      false,\n    );\n\n    if (isSuperAdminExpanded) {\n      if (allDistributors.length > 0) {\n        // Build tree with all distributors using distributor-scoped data\n        superAdminNode.children = allDistributors.map((dist) => {\n          return this.buildDistributorNodeWithContext(dist, selectedClient);\n        });\n      } else {\n        // Fallback to single distributor behavior when no distributors in state yet\n        const distributorTree = this.buildDistributorHierarchy(\n          distributor,\n          selectedClient,\n        );\n        superAdminNode.children = distributorTree;\n      }\n    } else {\n      superAdminNode.children = [];\n    }\n\n    return [superAdminNode];\n  }\n\n  /**\n   * Builds a distributor node with its own vendor hierarchy using distributor-scoped data\n   */\n  private buildDistributorNodeWithContext(\n    distributor: DistributorListItem,\n    selectedClient: ClientResponse | null,\n  ): TreeNode {\n    const distributorId = distributor.id;\n    const expandedDistributors = this.adminState.expandedDistributors();\n    const isDistributorExpanded = expandedDistributors.has(distributorId);\n\n    const distributorNode = this.adminTreeService.createDistributorNode(\n      {\n        ...distributor,\n        entity: {\n          id: distributor.id,\n          name: distributor.name,\n          creationDate: new Date().toISOString(),\n          modifiedDate: new Date().toISOString(),\n        },\n        owner: { id: '', name: '' },\n        tags: null,\n      } as DistributorResponse,\n      isDistributorExpanded,\n      false,\n    );\n\n    if (isDistributorExpanded) {\n      // Get vendors specific to THIS distributor\n      const distributorVendors =\n        this.adminState.getDistributorVendors(distributorId);\n\n      distributorNode.children = distributorVendors.map((vendor) =>\n        this.buildVendorNodeWithDistributorContext(\n          vendor,\n          selectedClient,\n          distributorId,\n        ),\n      );\n    } else {\n      distributorNode.children = [];\n    }\n\n    return distributorNode;\n  }\n\n  private buildDistributorHierarchy(\n    distributor: DistributorResponse,\n    selectedClient: ClientResponse | null,\n  ): TreeNode[] {\n    const distributorId = distributor.id;\n    const expandedDistributors = this.adminState.expandedDistributors();\n    const isDistributorExpanded = expandedDistributors.has(distributorId);\n\n    const distributorNode = this.adminTreeService.createDistributorNode(\n      distributor,\n      isDistributorExpanded,\n      false,\n    );\n\n    if (isDistributorExpanded) {\n      // Use distributor-scoped vendors instead of global vendors\n      const distributorVendors =\n        this.adminState.getDistributorVendors(distributorId);\n      distributorNode.children = distributorVendors.map((vendor) =>\n        this.buildVendorNodeWithDistributorContext(\n          vendor,\n          selectedClient,\n          distributorId,\n        ),\n      );\n    } else {\n      distributorNode.children = [];\n    }\n\n    return [distributorNode];\n  }\n\n  private buildVendorOnlyHierarchy(\n    vendor: VendorResponse | VendorListItem,\n    selectedClient: ClientResponse | null,\n  ): TreeNode[] {\n    // For vendor-only hierarchy, use the current distributor context\n    const distributorId = this.adminState.getCurrentDistributorId();\n    if (isDefined(distributorId)) {\n      const vendorNode = this.buildVendorNodeWithDistributorContext(\n        vendor,\n        selectedClient,\n        distributorId,\n      );\n      return [vendorNode];\n    } else {\n      // Fallback: create a simple vendor node without distributor context\n      // This uses legacy global state as a fallback\n      const vendorNode = this.adminTreeService.createVendorNode(\n        vendor,\n        false,\n        [],\n        false,\n      );\n      return [vendorNode];\n    }\n  }\n\n  private createLoadMoreNode(\n    vendorId: string,\n    groupId: string | undefined,\n    loading: boolean,\n  ): TreeNode {\n    const key = `loadmore_${vendorId}${isDefined(groupId) ? '_' + groupId : ''}`;\n    return {\n      key: key,\n      label: 'Load More...',\n      type: ADMIN_TREE.NODE_TYPES.LOAD_MORE,\n      leaf: true,\n      icon: loading ? 'pi pi-spin pi-spinner' : 'pi pi-plus',\n      data: {\n        type: ADMIN_TREE.NODE_TYPES.LOAD_MORE,\n        vendorId: vendorId,\n        groupId: groupId,\n        loading: loading,\n      },\n      styleClass: 'load-more-node',\n    };\n  }\n\n  /**\n   * Builds a vendor node with distributor context, using distributor-scoped data\n   */\n  private buildVendorNodeWithDistributorContext(\n    vendor: VendorResponse | VendorListItem,\n    selectedClient: ClientResponse | null,\n    distributorId: string,\n  ): TreeNode {\n    const vendorClients = this.adminState.getDistributorVendorClients(\n      distributorId,\n      vendor.id,\n    );\n    const vendorGroups = this.adminState.getDistributorVendorGroups(\n      distributorId,\n      vendor.id,\n    );\n    const isVendorExpanded = this.adminState.isDistributorNodeExpanded(\n      distributorId,\n      vendor.id,\n    );\n\n    const children: TreeNode[] = [];\n    const vendorNode = this.adminTreeService.createVendorNode(\n      vendor,\n      isVendorExpanded,\n      children,\n      false,\n    );\n\n    if (isVendorExpanded) {\n      // Add group nodes if groups exist\n      if (vendorGroups.length > 0) {\n        children.push(\n          ...vendorGroups.map((group) => {\n            // Use distributor-scoped group expansion check\n            const isGroupExpanded = this.adminState.isDistributorGroupExpanded(\n              distributorId,\n              group.id,\n            );\n            const groupChildren: TreeNode[] = [];\n            const groupNode = this.adminTreeService.createGroupNode(\n              group,\n              isGroupExpanded,\n              groupChildren,\n              false,\n            );\n\n            if (isGroupExpanded) {\n              const clientsInGroup = this.getGroupClientsForDistributor(\n                distributorId,\n                vendor.id,\n                group.id,\n              );\n              groupChildren.push(\n                ...clientsInGroup.map((client) =>\n                  this.adminTreeService.createClientNode(\n                    client,\n                    client.id === selectedClient?.id,\n                  ),\n                ),\n              );\n\n              // Add \"Load More\" node if needed for this group\n              const groupPagination =\n                this.adminState.getDistributorPaginationState(\n                  distributorId,\n                  vendor.id,\n                  group.id,\n                );\n              if (groupPagination?.hasMore === true) {\n                groupChildren.push(\n                  this.createLoadMoreNode(\n                    vendor.id,\n                    group.id,\n                    groupPagination?.loadingMore ?? false,\n                  ),\n                );\n              }\n            }\n\n            return groupNode;\n          }),\n        );\n      }\n\n      // Add direct clients (not in groups)\n      children.push(\n        ...vendorClients.map((client) =>\n          this.adminTreeService.createClientNode(\n            client,\n            client.id === selectedClient?.id,\n          ),\n        ),\n      );\n\n      // Add \"Load More\" node for vendor if needed\n      const vendorPagination = this.adminState.getDistributorPaginationState(\n        distributorId,\n        vendor.id,\n      );\n      if (vendorPagination?.hasMore === true) {\n        children.push(\n          this.createLoadMoreNode(\n            vendor.id,\n            undefined,\n            vendorPagination?.loadingMore ?? false,\n          ),\n        );\n      }\n    }\n\n    return vendorNode;\n  }\n\n  /**\n   * Helper method to get group clients for a specific distributor\n   */\n  private getGroupClientsForDistributor(\n    distributorId: string,\n    vendorId: string,\n    groupId: string,\n  ): ClientListItem[] {\n    return this.adminState.getGroupClients(distributorId, vendorId, groupId);\n  }\n\n  private applySearchEnhancements(\n    nodes: TreeNode[],\n    searchExpandedNodes: Set<string>,\n  ): TreeNode[] {\n    return nodes.map((node) =>\n      this.enhanceNodeForSearch(node, searchExpandedNodes),\n    );\n  }\n\n  private enhanceNodeForSearch(\n    node: TreeNode,\n    searchExpandedNodes: Set<string>,\n  ): TreeNode {\n    const enhanced = { ...node };\n\n    if (this.adminSearchService.isNodeHighlighted(node.key as string)) {\n      enhanced.styleClass = [enhanced.styleClass, 'search-highlighted']\n        .filter(Boolean)\n        .join(' ');\n    }\n\n    if (searchExpandedNodes.has(node.key as string)) {\n      enhanced.expanded = true;\n    }\n\n    if (enhanced.children) {\n      enhanced.children = enhanced.children.map((child) =>\n        this.enhanceNodeForSearch(child, searchExpandedNodes),\n      );\n    }\n\n    return enhanced;\n  }\n}\n","import { inject, Injectable } from '@angular/core';\nimport { Router } from '@angular/router';\nimport { isDefined, isNullOrUndefined } from '../../../shared/utils';\nimport { ADMIN_TREE } from '../models/tree-node-data.interface';\nimport { BroadcastEventMessageService } from './broadcast-event-messages.service';\nimport { DEFAULT_SYSTEM_ID } from '../../../core/models';\nimport { IdNameType } from '../../../api';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class AdminNavigationService {\n  private readonly router = inject(Router);\n  private readonly broadcastService = inject(BroadcastEventMessageService);\n\n  async navigateToNode(nodeType: string, nodeKey: string): Promise<boolean> {\n    let entityType = '';\n    const entityId = nodeKey;\n\n    switch (nodeType) {\n      case ADMIN_TREE.NODE_TYPES.CLIENT:\n        entityType = 'client';\n        break;\n      case ADMIN_TREE.NODE_TYPES.VENDOR:\n        entityType = 'vendor';\n        break;\n      case ADMIN_TREE.NODE_TYPES.GROUP:\n        return false; // Prevent navigation for now\n      case ADMIN_TREE.NODE_TYPES.DISTRIBUTOR:\n        entityType = 'distributor';\n        break;\n      case ADMIN_TREE.NODE_TYPES.SUPER_ADMIN:\n        return this.navigateToSuperAdminDistributors();\n      default:\n        console.warn('Unknown node type for navigation:', nodeType);\n        return false;\n    }\n\n    if (entityType && entityId) {\n      this.broadcastService.broadcast('entity-changed', {\n        entityType: nodeType,\n        entityId: nodeKey,\n      });\n      return this.handleEntityNavigation(entityType, entityId);\n    }\n    return false;\n  }\n\n  private handleEntityNavigation(\n    entityType: string,\n    entityId: string,\n  ): Promise<boolean> {\n    const currentUrl = this.router.url.split('?')[0]; // Remove query params\n    const urlSegments = currentUrl\n      .split('/')\n      .filter((segment) => segment.length > 0);\n\n    // Extract current entity info from URL\n    // Expected format: /administration/client/123/assets or /admin/client/123/assets\n    let currentEntityType: string | undefined;\n    let currentEntityId: string | undefined;\n    let currentEntityTypeIndex = -1;\n\n    // Find entity type in URL segments\n    const entityTypes = new Set([\n      'client',\n      'vendor',\n      'distributor',\n      'super-admin',\n    ]);\n    for (let i = 0; i < urlSegments.length; i++) {\n      if (entityTypes.has(urlSegments[i])) {\n        currentEntityType = urlSegments[i];\n        currentEntityTypeIndex = i;\n        // Entity ID should be the next segment\n        if (i + 1 < urlSegments.length) {\n          currentEntityId = urlSegments[i + 1];\n        }\n        break;\n      }\n    }\n    if (currentEntityType === entityType && currentEntityId === entityId) {\n      return Promise.resolve(true);\n    }\n\n    let tabPath = '';\n\n    // Extract tab path if switching within the same entity type\n    if (currentEntityType === entityType && currentEntityTypeIndex > -1) {\n      // Extract everything after /entityType/entityId/\n      const tabSegments = urlSegments.slice(currentEntityTypeIndex + 2);\n      if (tabSegments.length > 0) {\n        tabPath = tabSegments.join('/');\n      }\n    }\n\n    const navigationTarget: (string | undefined)[] = [\n      '/admin',\n      entityType,\n      entityId,\n    ];\n    if (tabPath) {\n      navigationTarget.push(...tabPath.split('/'));\n    }\n\n    return this.router.navigate(navigationTarget.filter(isDefined));\n  }\n\n  private async navigateToSuperAdminDistributors(): Promise<boolean> {\n    try {\n      return await this.router.navigate([\n        '/admin',\n        'super-admin',\n        DEFAULT_SYSTEM_ID,\n        'distributors',\n      ]);\n    } catch (error) {\n      console.error('Failed to navigate to super admin distributors:', error);\n      return false;\n    }\n  }\n\n  navigateToEntityDetails(\n    entityType: string,\n    entityId: string,\n    owner: IdNameType,\n  ): Promise<boolean> {\n    if (isNullOrUndefined(owner)) {\n      console.error(\n        `Cannot navigate to ${entityType} details without an owner.`,\n      );\n      return Promise.resolve(false);\n    }\n\n    let path: string[] = [];\n    const queryParams = { details: entityId, type: entityType };\n\n    switch (entityType) {\n      case 'device':\n        path = [\n          '/admin',\n          'client',\n          owner.id,\n          'hardware',\n          'client-hardware-devices',\n        ];\n        break;\n      case 'simcard':\n        path = ['/admin', 'client', owner.id, 'hardware', 'client-sim-cards'];\n        break;\n      case 'asset':\n        path = [\n          '/admin',\n          'client',\n          owner.id,\n          'assets',\n          'grid',\n          'client-assets',\n        ];\n        break;\n      case 'user': {\n        const ownerEntityType = owner.type === 'vendor' ? 'vendor' : 'client';\n        const accountPath =\n          ownerEntityType === 'vendor' ? 'distributor-users' : 'client-users';\n        path = ['/admin', ownerEntityType, owner.id, 'accounts', accountPath];\n        break;\n      }\n      default:\n        console.warn(\n          `Navigation to details not implemented for entity type: ${entityType}`,\n        );\n        return Promise.resolve(false);\n    }\n\n    return this.router.navigate(path, { queryParams });\n  }\n}\n","import { inject, Injectable, signal, DestroyRef } from '@angular/core';\nimport { MessageService, TreeNode } from 'primeng/api';\nimport { takeUntilDestroyed } from '@angular/core/rxjs-interop';\n\nimport { AdminDataService } from './admin-data.service';\nimport { AdminStateService } from './admin-state.service';\nimport { AdminSearchService } from './admin-search.service';\nimport { BroadcastEventMessageService } from './broadcast-event-messages.service';\nimport { EntityDetailsService } from './entity/entity-details.service';\nimport { AdminNavigationService } from './admin-navigation.service';\nimport { ADMIN_TREE } from '../models/tree-node-data.interface';\nimport { EventSource } from '../models/event-source.enum';\nimport {\n  ClientListItem,\n  VendorListItem,\n  ClientResponse,\n  IdNameType,\n} from '../../../api';\nimport { TreeSearchResult } from '../../../shared/models';\nimport { isDefined, isNullOrUndefined } from '../../../shared/utils';\nimport { NodeNotFoundEvent } from '../../../shared/components/tree-panel/tree-panel.component';\nimport { AdminTreeClientService } from './admin-tree-client.service';\n\n// Constants for timing and configuration\nconst TIMING = {\n  SCROLL_SUPPRESSION: 2000,\n  NODE_SELECTION_DELAY: 100,\n  NODE_MONITORING_INTERVAL: 150,\n  NODE_SELECTION_TIMEOUT: 10000,\n} as const;\n\n// Interfaces for better type safety\ninterface PendingNodeSelection {\n  nodeId: string;\n  nodeType: string;\n  timestamp: number;\n}\n\ninterface EntityUpdateData {\n  entityType: string;\n  operation: string;\n  entityId: string;\n}\n\n// Custom error classes for better error handling\nclass ClientLoadFailureError extends Error {\n  constructor(message: string) {\n    super(message);\n    this.name = 'ClientLoadFailureError';\n  }\n}\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class AdminTreeEventHandlerService {\n  private readonly adminDataService = inject(AdminDataService);\n  private readonly adminState = inject(AdminStateService);\n  private readonly adminSearchService = inject(AdminSearchService);\n  private readonly broadcastService = inject(BroadcastEventMessageService);\n  private readonly detailsService = inject(EntityDetailsService);\n  private readonly navigationService = inject(AdminNavigationService);\n  private readonly messageService = inject(MessageService);\n  private readonly destroyRef = inject(DestroyRef);\n  private readonly clientService = inject(AdminTreeClientService);\n\n  // Node search loading state\n  readonly searchingForNode = signal<boolean>(false);\n  readonly searchingNodeKey = signal<string | null>(null);\n\n  // Expose signals for component to use\n  readonly selectedTreeNode = signal<TreeNode | null>(null);\n\n  // Tree panel state\n  readonly treeCollapsed = signal<boolean>(true);\n\n  // Signal-based communication instead of callbacks\n  readonly scrollToClient = signal<string | null>(null);\n  readonly suppressScroll = signal<number | null>(null);\n  readonly toggleTreePanel = signal<boolean>(false);\n  readonly errorMessage = signal<{ error: unknown; message: string } | null>(\n    null,\n  );\n\n  // Track current event source\n  private currentEventSource: EventSource = EventSource.USER;\n\n  // Pending node selection for event-driven approach\n  private pendingNodeSelection: PendingNodeSelection | null = null;\n\n  // Required dependencies that will be injected via initialization\n  private hierarchyTreeGetter?: () => TreeNode[];\n  private findNodeByKeyRecursiveCallback?: (\n    nodes: TreeNode[],\n    key: string,\n  ) => TreeNode | null;\n\n  /**\n   * Sets the event source for the next operation\n   */\n  setEventSource(source: EventSource): void {\n    this.currentEventSource = source;\n  }\n\n  /**\n   * Resets event source back to user after operation\n   */\n  private resetEventSource(): void {\n    this.currentEventSource = EventSource.USER;\n  }\n\n  /**\n   * Checks if current event allows auto-scrolling\n   */\n  shouldAllowAutoScroll(): boolean {\n    return this.currentEventSource !== EventSource.USER;\n  }\n\n  /**\n   * Initialize the service with required dependencies\n   */\n  initialize(dependencies: {\n    getHierarchyTree: () => TreeNode[];\n    findNodeByKeyRecursive: (nodes: TreeNode[], key: string) => TreeNode | null;\n  }): void {\n    this.hierarchyTreeGetter = dependencies.getHierarchyTree;\n    this.findNodeByKeyRecursiveCallback = dependencies.findNodeByKeyRecursive;\n\n    this.setupBroadcastSubscriptions();\n  }\n\n  /**\n   * Cleanup method to clear any pending operations\n   */\n  cleanup(): void {\n    this.pendingNodeSelection = null;\n  }\n\n  /**\n   * Setup broadcast event subscriptions\n   */\n  private setupBroadcastSubscriptions(): void {\n    // Handle 'view-entity-in-tree' events\n    this.broadcastService\n      .on('view-entity-in-tree')\n      .pipe(takeUntilDestroyed(this.destroyRef))\n      .subscribe((data) => {\n        const item = data?.entity;\n        if (isDefined(item?.id) && item.entityType === 'client') {\n          // Set event source to BROADCAST to allow auto-scrolling\n          this.setEventSource(EventSource.BROADCAST);\n          this.handleClientInTree(\n            item as ClientListItem,\n            item['vendorId'] as string,\n            item['groupId'] as string | undefined,\n          ).catch((err) => this.handleError(err, 'Error showing item in tree'));\n        }\n\n        if (isDefined(item?.id) && item.entityType === 'vendor') {\n          // Set event source to BROADCAST to allow auto-scrolling\n          this.setEventSource(EventSource.BROADCAST);\n          this.handleVendorInTree(item as VendorListItem).catch((err) =>\n            this.handleError(err, 'Error showing vendor in tree'),\n          );\n        }\n      });\n\n    // Handle entity updates to refresh tree state\n    this.broadcastService\n      .on('entity-updated')\n      .pipe(takeUntilDestroyed(this.destroyRef))\n      .subscribe((data: unknown) => {\n        if (\n          isDefined(data) &&\n          typeof data === 'object' &&\n          data !== null &&\n          'entityType' in data &&\n          'operation' in data &&\n          'entityId' in data\n        ) {\n          const updateData = data as EntityUpdateData;\n\n          if (\n            updateData.entityType === 'client' &&\n            updateData.operation === 'create' &&\n            updateData.entityId\n          ) {\n            // Set event source to SYSTEM to allow auto-scrolling for created clients\n            this.setEventSource(EventSource.SYSTEM);\n            this.handleClientCreated(updateData.entityId).catch((err) =>\n              this.handleError(\n                err,\n                'Error refreshing tree after client creation',\n              ),\n            );\n          }\n        }\n      });\n  }\n\n  /**\n   * Handles node expansion\n   */\n  async onNodeExpand(node: TreeNode): Promise<void> {\n    try {\n      this.handleScrollSuppressionForExpansion();\n      await this.expandNodeByType(node);\n    } catch (error: unknown) {\n      this.handleError(error, 'Failed to expand node');\n    } finally {\n      this.resetEventSource();\n    }\n  }\n\n  /**\n   * Handles scroll suppression logic for node expansion\n   */\n  private handleScrollSuppressionForExpansion(): void {\n    // Only suppress scrolling temporarily if this is a system event that should allow scrolling\n    // For user events, suppress scrolling completely to prevent auto-scroll during user interactions\n    if (this.shouldAllowAutoScroll()) {\n      this.suppressScroll.set(TIMING.SCROLL_SUPPRESSION);\n    } else {\n      // For user events, suppress scrolling indefinitely (until manually cleared)\n      this.suppressScroll.set(0);\n    }\n  }\n\n  /**\n   * Expands node based on its type\n   */\n  private async expandNodeByType(node: TreeNode): Promise<void> {\n    switch (node.type) {\n      case ADMIN_TREE.NODE_TYPES.VENDOR:\n        await this.handleVendorNodeExpansion(node);\n        break;\n      case ADMIN_TREE.NODE_TYPES.GROUP:\n        await this.handleGroupNodeExpansion(node);\n        break;\n      case ADMIN_TREE.NODE_TYPES.DISTRIBUTOR:\n        await this.adminDataService.expandDistributor(node);\n        break;\n      case ADMIN_TREE.NODE_TYPES.SUPER_ADMIN:\n        this.adminDataService.expandSuperAdmin(node);\n        break;\n    }\n  }\n\n  /**\n   * Handles vendor node expansion logic\n   */\n  private async handleVendorNodeExpansion(node: TreeNode): Promise<void> {\n    if (isDefined(node.data?.id)) {\n      const vendorId = node.data.id;\n\n      // Get distributor context for this vendor node\n      const distributorId =\n        this.adminDataService.getDistributorContextFromNode(node);\n      if (isDefined(distributorId) && !(node.children?.length ?? 0)) {\n        // Check if vendor is loaded for this distributor\n        const distributorLoadedVendors =\n          this.adminState.loadedVendors()[distributorId];\n        if (distributorLoadedVendors?.has(vendorId)) {\n          // Remove from loaded vendors to force reload\n          this.adminState.removeDistributorLoadedVendor(\n            distributorId,\n            vendorId,\n          );\n        }\n      }\n    }\n    await this.adminDataService.expandNode(node);\n  }\n\n  /**\n   * Handles group node expansion logic\n   */\n  private async handleGroupNodeExpansion(node: TreeNode): Promise<void> {\n    if (isDefined(node.data?.id) && isDefined(node?.parent?.data?.id)) {\n      const groupId = node.data.id;\n      const vendorId = node?.parent?.data.id;\n\n      // Get distributor context for this group node\n      const distributorId =\n        this.adminDataService.getDistributorContextFromNode(node);\n\n      if (isDefined(distributorId)) {\n        // Use distributor-scoped pagination key\n        const paginationKey = this.adminState.getDistributorPaginationKey(\n          distributorId,\n          vendorId,\n          groupId,\n        );\n\n        // Check if group clients are already loaded using distributor-scoped data\n        if (\n          !(node.children?.length ?? 0) &&\n          isDefined(\n            this.adminState.clientPagination()[distributorId]?.[paginationKey],\n          )\n        ) {\n          this.adminState.clearDistributorGroupPagination(\n            distributorId,\n            vendorId,\n            groupId,\n          );\n        }\n      } else {\n        // Fallback to legacy behavior for backward compatibility\n        const paginationKey = `${vendorId}_${groupId}`;\n        if (\n          !(node.children?.length ?? 0) &&\n          isDefined(this.adminState.clientPagination()[paginationKey])\n        ) {\n          this.adminState.clearGroupPagination(vendorId, groupId);\n        }\n      }\n    }\n    await this.adminDataService.expandGroup(node);\n  }\n\n  /**\n   * Handles node collapse\n   */\n  onNodeCollapse(node: TreeNode): void {\n    if (!isDefined(node.data?.id)) return;\n\n    // Only suppress scrolling temporarily for system events\n    // For user events, suppress scrolling completely\n    if (this.shouldAllowAutoScroll()) {\n      this.suppressScroll.set(TIMING.SCROLL_SUPPRESSION);\n    } else {\n      this.suppressScroll.set(0);\n    }\n\n    switch (node.type) {\n      case ADMIN_TREE.NODE_TYPES.VENDOR:\n        this.adminDataService.collapseNode(node);\n        break;\n      case ADMIN_TREE.NODE_TYPES.GROUP:\n        this.adminDataService.collapseGroup(node);\n        break;\n      case ADMIN_TREE.NODE_TYPES.DISTRIBUTOR:\n        this.adminDataService.collapseDistributor(node);\n        break;\n      case ADMIN_TREE.NODE_TYPES.SUPER_ADMIN:\n        this.adminDataService.collapseSuperAdmin(node);\n        break;\n    }\n\n    this.resetEventSource();\n  }\n\n  /**\n   * Handles node selection\n   */\n  async onNodeSelect(node: TreeNode): Promise<void> {\n    this.selectedTreeNode.set(node);\n\n    if (node.type === ADMIN_TREE.NODE_TYPES.LOAD_MORE) {\n      // Load More is always user-initiated, so suppress scrolling\n      this.suppressScroll.set(0); // Indefinite suppression\n\n      const loadData = node.data as {\n        vendorId: string;\n        groupId?: string;\n        loading?: boolean;\n      };\n      if (isDefined(loadData.vendorId)) {\n        await this.adminDataService.loadMoreClients(\n          loadData.vendorId,\n          loadData.groupId,\n        );\n      }\n    } else if (isDefined(node.key) && isDefined(node.type)) {\n      this.adminDataService.selectNode(node);\n      await this.navigationService.navigateToNode(node.type, node.key);\n\n      // Only scroll for system-initiated selections\n      if (\n        node.type === ADMIN_TREE.NODE_TYPES.CLIENT &&\n        this.shouldAllowAutoScroll()\n      ) {\n        this.scrollToClient.set(node.key);\n      }\n    }\n\n    this.resetEventSource();\n  }\n\n  /**\n   * Updates tree selection programmatically without triggering navigation\n   * Use this for syncing tree state with route changes or other non-user actions\n   */\n  setTreeSelection(node: TreeNode | null): void {\n    this.selectedTreeNode.set(node);\n    if (node) {\n      this.adminDataService.selectNode(node);\n    }\n  }\n\n  /**\n   * Handles node unselection\n   */\n  onNodeUnselect(node: TreeNode): void {\n    if (this.selectedTreeNode()?.key === node.key) {\n      this.selectedTreeNode.set(null);\n      this.adminState.setSelectedClient(null);\n    }\n  }\n\n  /**\n   * Handles when a node is not found in the current tree data\n   *\n   * This is a critical method for handling deep links and search results where the target\n   * client may not be in the currently loaded tree data. It implements several safeguards\n   * to prevent infinite loops:\n   *\n   * 1. Duplicate Search Prevention: Checks if already searching for this node\n   * 2. Delegates to AdminSearchService which has:\n   *    - Maximum pagination attempts (50 attempts = 5000 clients max)\n   *    - Error handling that breaks pagination loops\n   *    - Fallback to global search API\n   * 3. Clears scroll requests on failure to prevent retry loops\n   *\n   * Flow:\n   * 1. Check if already searching (prevent duplicates)\n   * 2. Set searching flags\n   * 3. Fetch client using API with owner info\n   * 4. Load parent hierarchy and paginate until client found\n   * 5. Wait for node to appear in tree\n   * 6. Select and scroll to node\n   * 7. Clear searching flags and scroll requests\n   *\n   * @param event Contains the nodeKey (client ID) and optional context\n   */\n  onNodeNotFoundInData(event: NodeNotFoundEvent): void {\n    const clientId = event.nodeKey;\n\n    // Prevent infinite loops - check if we're already searching for this node\n    // This is the first line of defense against duplicate search requests\n    if (this.searchingForNode() && this.searchingNodeKey() === clientId) {\n      console.warn(\n        `Already searching for node ${clientId}, skipping duplicate request`,\n      );\n      return;\n    }\n\n    this.searchingForNode.set(true);\n    this.searchingNodeKey.set(clientId);\n\n    // Use existing AdminSearchService methods to handle the client loading\n    this.fetchClientForTreeSelection(clientId)\n      .then(async () => {\n        await this.handleSuccessfulClientLoad(clientId);\n      })\n      .catch((error: unknown) => {\n        if (this.isClientLoadFailureError(error)) {\n          this.handleFailedClientLoad(clientId);\n        } else if (this.isClientNotFoundError(error)) {\n          this.handleClientNotFound(clientId);\n        } else {\n          this.handleClientLoadError(error);\n        }\n        // Clear scroll requests for this client to prevent infinite loops\n        this.clearScrollRequestsForClient(clientId);\n      })\n      .finally(() => {\n        this.searchingForNode.set(false);\n        this.searchingNodeKey.set(null);\n        this.resetEventSource();\n      });\n  }\n\n  /**\n   * Clears any pending scroll requests for a specific client to prevent infinite loops\n   */\n  private clearScrollRequestsForClient(clientId: string): void {\n    // Check if the current scroll request is for this client\n    const currentScrollClient = this.scrollToClient();\n    if (currentScrollClient === clientId) {\n      this.scrollToClient.set(null);\n    }\n  }\n\n  /**\n   * Handles successful client loading - waits for node in tree and attempts selection\n   */\n  private async handleSuccessfulClientLoad(clientId: string): Promise<void> {\n    // Wait for tree to rebuild with new data\n    const nodeFoundInTree = await this.waitForNodeInTree(clientId);\n\n    if (nodeFoundInTree === true) {\n      await this.handleNodeFoundInTree(clientId);\n    } else {\n      this.handleNodeNotFoundAfterLoad(clientId);\n    }\n  }\n\n  /**\n   * Handles the case when a node is found in the tree after loading\n   */\n  private async handleNodeFoundInTree(clientId: string): Promise<void> {\n    // Set event source to SYSTEM to allow scrolling after successful load\n    this.setEventSource(EventSource.SYSTEM);\n    const selectionSuccess = this.trySelectPendingNode(clientId);\n\n    if (selectionSuccess) {\n      await this.handleClientLoadSuccess(clientId);\n    } else {\n      this.handleNodeSelectionFailure(clientId);\n    }\n  }\n\n  /**\n   * Handles the case when a node is not found in tree after data loading\n   */\n  private handleNodeNotFoundAfterLoad(clientId: string): void {\n    console.warn(`Node ${clientId} not found in tree after data loading`);\n    this.clearScrollRequestsForClient(clientId);\n  }\n\n  /**\n   * Handles the case when node selection fails despite the node being found\n   */\n  private handleNodeSelectionFailure(clientId: string): void {\n    console.warn(`Node ${clientId} found in tree but selection failed`);\n  }\n\n  /**\n   * Handles failed client loading\n   */\n  private handleFailedClientLoad(clientId: string): void {\n    console.warn(`Failed to load client ${clientId} using existing methods`);\n    this.clearScrollRequestsForClient(clientId);\n  }\n\n  /**\n   * Waits for a node to appear in the tree after data loading\n   * Polls the hierarchyTree computed signal until the node is found\n   */\n  private async waitForNodeInTree(nodeId: string): Promise<boolean> {\n    const maxAttempts = 20; // 2 seconds max (20 * 100ms)\n    const delayMs = 100;\n\n    for (let i = 0; i < maxAttempts; i++) {\n      const tree = this.hierarchyTreeGetter?.() ?? [];\n      const node = this.findNodeByKeyRecursiveCallback?.(tree, nodeId);\n\n      if (node) {\n        return true;\n      }\n\n      // Wait before checking again\n      await new Promise((resolve) => setTimeout(resolve, delayMs));\n    }\n\n    return false;\n  }\n\n  /**\n   * Loads a client using the existing AdminSearchService methods\n   *\n   * This method attempts to load a client's data and ensure it appears in the tree.\n   * It tries two approaches in order:\n   *\n   * 1. Get client from API with owner info, then use prepareClientForTreeSelectionWithOwner\n   *    - This is more efficient as it uses owner info to load the exact hierarchy\n   *    - Calls loadClientsUntilFound which paginates with safety limits\n   *\n   * 2. Fallback to global search (searchAndLoadClient)\n   *    - Uses the search API to find the client\n   *    - Loads parent hierarchy based on search results\n   *\n   * Throws ClientLoadFailureError if both approaches fail, which is caught by the caller\n   * to prevent infinite retry loops.\n   *\n   * @param clientId The ID of the client to load\n   * @throws ClientLoadFailureError if client cannot be loaded or found\n   */\n  private async fetchClientForTreeSelection(clientId: string): Promise<void> {\n    try {\n      // First, try to get the client from the ClientDataService to get owner info\n      const client = await this.getClientWithOwnerInfo(clientId);\n\n      if (client) {\n        // Use the existing prepareClientForTreeSelectionWithOwner method\n        // This will call either handleVendorOwnedClient or handleGroupOwnedClient\n        const result =\n          await this.adminSearchService.prepareClientForTreeSelectionWithOwner(\n            client,\n          );\n        if (result === null) {\n          throw new ClientLoadFailureError(\n            `Failed to prepare client ${clientId} for tree selection`,\n          );\n        }\n      } else {\n        // Fallback to the existing searchAndLoadClient method\n        const success =\n          await this.adminSearchService.searchAndLoadClient(clientId);\n        if (!success) {\n          throw new ClientLoadFailureError(\n            `Failed to search and load client ${clientId}`,\n          );\n        }\n      }\n    } catch (error) {\n      if (error instanceof ClientLoadFailureError) {\n        throw error; // Re-throw our custom error\n      }\n      console.error(\n        `Failed to load client ${clientId} using existing methods:`,\n        error,\n      );\n      throw new ClientLoadFailureError(\n        `Failed to load client ${clientId} using existing methods`,\n      );\n    }\n  }\n\n  /**\n   * Gets client information with owner details from ClientDataService\n   * This provides the owner info needed for handleVendorOwnedClient/handleGroupOwnedClient\n   */\n  private async getClientWithOwnerInfo(\n    clientId: string,\n  ): Promise<Partial<ClientResponse> | null> {\n    try {\n      return await this.clientService.fetchClient(clientId);\n    } catch (error) {\n      console.warn(\n        `Failed to get client ${clientId} from ClientDataService:`,\n        error,\n      );\n      return null;\n    }\n  }\n\n  /**\n   * Handles search query changes\n   */\n  onSearchQueryChange(query: string): void {\n    this.adminSearchService.updateQuery(query);\n  }\n\n  /**\n   * Handles search result selection\n   */\n  async onSearchResultSelect(result: TreeSearchResult): Promise<void> {\n    try {\n      // Set event source to SEARCH to allow auto-scrolling\n      this.setEventSource(EventSource.SEARCH);\n\n      await this.adminSearchService.prepareResultForNavigation(result);\n      await new Promise((resolve) => setTimeout(resolve, 100));\n      await this.navigateToSearchResult(result);\n    } catch (error) {\n      this.handleError(error, 'Failed to navigate to search result');\n    } finally {\n      this.resetEventSource();\n    }\n  }\n\n  /**\n   * Handles search clear\n   */\n  onSearchClear(): void {\n    this.adminSearchService.clearSearch();\n  }\n\n  /**\n   * Handles the 'view-entity-in-tree' event for a client\n   */\n  private async handleClientInTree(\n    client: ClientListItem,\n    vendorId: string,\n    groupId?: string,\n  ): Promise<void> {\n    try {\n      this.detailsService.closeDetailsPanel();\n\n      if (this.treeCollapsed()) {\n        this.toggleTreePanel.set(true);\n      }\n\n      const result = await this.adminSearchService.handleClientInTree(\n        client,\n        vendorId,\n        groupId,\n      );\n\n      await new Promise((resolve) =>\n        setTimeout(resolve, TIMING.NODE_SELECTION_DELAY),\n      );\n      await this.navigateToSearchResult(result);\n    } catch (err) {\n      this.handleError(err, 'Error showing item in tree');\n    } finally {\n      this.resetEventSource();\n    }\n  }\n\n  /**\n   * Handles the 'view-entity-in-tree' event for a vendor\n   */\n  private async handleVendorInTree(vendor: VendorListItem): Promise<void> {\n    try {\n      this.detailsService.closeDetailsPanel();\n\n      if (this.treeCollapsed()) {\n        this.toggleTreePanel.set(true);\n      }\n\n      const result = await this.adminSearchService.handleVendorInTree(vendor);\n      await new Promise((resolve) =>\n        setTimeout(resolve, TIMING.NODE_SELECTION_DELAY),\n      );\n      await this.navigateToSearchResult(result);\n    } catch (err) {\n      this.handleError(err, 'Error showing vendor in tree');\n    } finally {\n      this.resetEventSource();\n    }\n  }\n\n  /**\n   * Common method to navigate to a search result and update the tree selection\n   */\n  private async navigateToSearchResult(\n    result: TreeSearchResult,\n  ): Promise<void> {\n    const { type, id, name, owner } = result;\n    switch (type) {\n      case ADMIN_TREE.NODE_TYPES.CLIENT:\n      case ADMIN_TREE.NODE_TYPES.VENDOR:\n      case ADMIN_TREE.NODE_TYPES.DISTRIBUTOR:\n        await this.navigationService.navigateToNode(result.type, result.id);\n        await this.updateAdminStateForSearchResult(result);\n\n        // Use event-driven approach to handle node selection after data loads\n        await this.scheduleNodeSelection(result.id, result.type);\n        break;\n      case 'device':\n      case 'simcard':\n      case 'asset':\n      case 'user':\n        if (isDefined(owner) && isDefined(name)) {\n          await this.updateAdminStateForSearchResult(\n            result.owner as IdNameType,\n          );\n          await this.scheduleNodeSelection(\n            (result.owner as IdNameType).id,\n            (result.owner as IdNameType).type as string,\n          );\n\n          await this.navigateAndSelectInGrid(type, id, name, owner);\n        } else {\n          console.warn(\n            `Cannot navigate to ${type} without owner information or name.`,\n          );\n        }\n        break;\n\n      default:\n        console.warn(`Navigation not handled for search result type: ${type}`);\n    }\n  }\n\n  /**\n   * Schedules node selection to happen when the node becomes available\n   * Now uses existing search infrastructure for better reliability\n   */\n  async scheduleNodeSelection(nodeId: string, nodeType: string): Promise<void> {\n    // Try immediate selection first\n    const immediateResult = this.trySelectPendingNode(nodeId);\n    if (immediateResult) {\n      return;\n    }\n\n    // For client nodes, use existing search infrastructure\n    if (nodeType === ADMIN_TREE.NODE_TYPES.CLIENT) {\n      this.searchingForNode.set(true);\n      this.searchingNodeKey.set(nodeId);\n\n      try {\n        // Use existing searchAndLoadClient - it handles all the tree loading logic\n        await this.adminSearchService.searchAndLoadClient(nodeId);\n\n        // After search completes, try selection again\n        setTimeout(() => {\n          this.trySelectPendingNode(nodeId);\n          this.searchingForNode.set(false);\n          this.searchingNodeKey.set(null);\n        }, TIMING.NODE_SELECTION_DELAY);\n      } catch (error) {\n        console.error(`Failed to search and load client ${nodeId}:`, error);\n        this.searchingForNode.set(false);\n        this.searchingNodeKey.set(null);\n\n        // Even if search fails, try to load the client data directly\n        try {\n          const client =\n            await this.adminDataService.handleClientCreated(nodeId);\n          if (client) {\n            this.adminState.setSelectedClient(client);\n          }\n        } catch (loadError) {\n          console.error(`Failed to load client ${nodeId} directly:`, loadError);\n        }\n      }\n    } else {\n      // For non-client nodes, use the existing monitoring approach\n      this.scheduleNodeSelectionWithMonitoring(nodeId, nodeType);\n    }\n  }\n\n  private scheduleNodeSelectionWithMonitoring(\n    nodeId: string,\n    nodeType: string,\n  ): void {\n    // Store the pending selection\n    this.pendingNodeSelection = { nodeId, nodeType, timestamp: Date.now() };\n\n    // Monitor for availability using existing logic\n    this.monitorForNodeAvailability();\n  }\n\n  /**\n   * Monitors for node availability using existing infrastructure\n   */\n  private monitorForNodeAvailability(): void {\n    // Check every 150ms while we have a pending selection\n    const checkInterval = setInterval(() => {\n      if (!this.pendingNodeSelection) {\n        clearInterval(checkInterval);\n        return;\n      }\n      const { nodeId } = this.pendingNodeSelection;\n      this.trySelectPendingNode(nodeId);\n    }, TIMING.NODE_MONITORING_INTERVAL);\n\n    // Set up a safety timeout to prevent infinite monitoring\n    setTimeout(() => {\n      if (this.pendingNodeSelection) {\n        const { nodeId } = this.pendingNodeSelection;\n        console.warn(\n          `Timeout: Could not find tree node for ${nodeId} after extended wait`,\n        );\n        this.pendingNodeSelection = null;\n      }\n      clearInterval(checkInterval);\n    }, TIMING.NODE_SELECTION_TIMEOUT);\n  }\n\n  /**\n   * Tries to select the pending node if it's now available\n   * Leverages existing callback infrastructure\n   */\n  private trySelectPendingNode(nodeId: string): boolean {\n    const finalTree = this.hierarchyTreeGetter?.() ?? [];\n    const nodeToSelect = this.findNodeByKeyRecursiveCallback?.(\n      finalTree,\n      nodeId,\n    );\n\n    if (nodeToSelect) {\n      this.selectedTreeNode.set(nodeToSelect);\n      this.adminDataService.selectNode(nodeToSelect);\n      this.scrollToClient.set(nodeId);\n      return true;\n    }\n    return false;\n  }\n\n  /**\n   * Updates the admin state with the selected entity from search results\n   */\n  private async updateAdminStateForSearchResult(\n    result: IdNameType,\n  ): Promise<void> {\n    try {\n      if (result.type === ADMIN_TREE.NODE_TYPES.CLIENT) {\n        // Use the updated findClientHierarchy method with distributor support\n        const hierarchy = this.adminSearchService.findClientHierarchy(\n          result.id,\n        );\n        if (hierarchy) {\n          const client = this.findClientInState(\n            result.id,\n            hierarchy.vendorId,\n            hierarchy.groupId,\n            hierarchy.distributorId, // Pass distributor ID\n          );\n          if (client) {\n            const clientResponse: ClientResponse = {\n              ...client,\n              entity: isDefined(client['entity'])\n                ? client['entity']\n                : { id: client.id, name: client.name },\n            } as ClientResponse;\n            this.adminState.setSelectedClient(clientResponse);\n          }\n        }\n      } else if (result.type === ADMIN_TREE.NODE_TYPES.VENDOR) {\n        // Use distributor-scoped vendor lookup\n        const distributorId = this.adminState.getCurrentDistributorId();\n        const vendor = this.adminState.getVendorById(\n          result.id,\n          distributorId ?? undefined,\n        );\n        if (vendor) {\n          this.adminState.setSelectedClient(null);\n        }\n      }\n    } catch (error) {\n      console.error('Failed to update admin state for search result:', error);\n    }\n  }\n\n  /**\n   * Finds a client in the admin state using distributor-scoped data\n   */\n  private findClientInState(\n    clientId: string,\n    vendorId: string,\n    groupId?: string,\n    distributorId?: string,\n  ): ClientListItem | undefined {\n    const contextDistributorId =\n      distributorId ?? this.adminState.getCurrentDistributorId();\n    if (isNullOrUndefined(contextDistributorId)) {\n      return undefined;\n    }\n\n    if (isDefined(groupId)) {\n      // Use distributor-scoped group clients\n      const groupClients =\n        this.adminState.groupClients()[contextDistributorId]?.[vendorId]?.[\n          groupId\n        ];\n      return groupClients?.find((client) => client.id === clientId);\n    } else {\n      // Use distributor-scoped vendor clients\n      const vendorClients =\n        this.adminState.vendorClients()[contextDistributorId]?.[vendorId];\n      return vendorClients?.find((client) => client.id === clientId);\n    }\n  }\n\n  /**\n   * Handles client creation event to refresh the tree state\n   */\n  private async handleClientCreated(clientId: string): Promise<void> {\n    try {\n      const client = await this.adminDataService.handleClientCreated(clientId);\n\n      if (!client) {\n        return;\n      }\n\n      if (this.treeCollapsed()) {\n        this.toggleTreePanel.set(true);\n      }\n\n      // Use the same event-driven approach for newly created clients\n      await this.scheduleNodeSelection(clientId, ADMIN_TREE.NODE_TYPES.CLIENT);\n    } catch (error) {\n      this.handleError(error, 'Error refreshing tree after client creation');\n    } finally {\n      this.resetEventSource();\n    }\n  }\n\n  private isClientNotFoundError(error: unknown): boolean {\n    return error instanceof Error && error.message.includes('not found');\n  }\n\n  private isClientLoadFailureError(error: unknown): boolean {\n    return error instanceof ClientLoadFailureError;\n  }\n\n  private async handleClientLoadSuccess(clientId: string): Promise<void> {\n    // Use the same event-driven approach for successfully loaded clients\n    await this.scheduleNodeSelection(clientId, ADMIN_TREE.NODE_TYPES.CLIENT);\n  }\n\n  private handleClientNotFound(clientId: string): void {\n    this.messageService.add({\n      severity: 'warn',\n      summary: 'Client not found',\n      detail: `Could not locate client ${clientId} in the company structure.`,\n    });\n  }\n\n  private handleClientLoadError(error: unknown): void {\n    console.error('Error during client search:', error);\n    this.messageService.add({\n      severity: 'error',\n      summary: 'Loading error',\n      detail: 'Failed to load client data. Please try again.',\n    });\n  }\n\n  private handleError(error: unknown, message: string): void {\n    console.error(message, error);\n    this.errorMessage.set({ error, message });\n  }\n\n  /**\n   * Navigates to a grid view and triggers filter + selection for the entity\n   * Removed arbitrary delay - let the grid-filter-and-select handler wait for readiness\n   */\n  private async navigateAndSelectInGrid(\n    entityType: string,\n    entityId: string,\n    entityName: string,\n    owner: IdNameType,\n  ): Promise<void> {\n    // Navigate to the entity details route (which shows the grid)\n    await this.navigationService.navigateToEntityDetails(\n      entityType,\n      entityId,\n      owner,\n    );\n\n    // Broadcast event immediately - the handler will wait for grid readiness\n    this.broadcastService.broadcast('grid-filter-and-select', {\n      entityType,\n      entityId,\n      entityName,\n      filterField: 'name',\n    });\n  }\n}\n","import * as i1 from '@angular/common';\nimport { CommonModule } from '@angular/common';\nimport * as i0 from '@angular/core';\nimport { Injectable, inject, ContentChildren, ContentChild, Input, ViewEncapsulation, ChangeDetectionStrategy, Component, NgModule } from '@angular/core';\nimport { SharedModule, PrimeTemplate } from 'primeng/api';\nimport { BaseComponent } from 'primeng/basecomponent';\nimport { style } from '@primeuix/styles/toolbar';\nimport { BaseStyle } from 'primeng/base';\nconst _c0 = [\"start\"];\nconst _c1 = [\"end\"];\nconst _c2 = [\"center\"];\nconst _c3 = [\"*\"];\nfunction Toolbar_div_1_ng_container_1_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementContainer(0);\n  }\n}\nfunction Toolbar_div_1_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\");\n    i0.ɵɵtemplate(1, Toolbar_div_1_ng_container_1_Template, 1, 0, \"ng-container\", 1);\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const ctx_r0 = i0.ɵɵnextContext();\n    i0.ɵɵclassMap(ctx_r0.cx(\"start\"));\n    i0.ɵɵattribute(\"data-pc-section\", \"start\");\n    i0.ɵɵadvance();\n    i0.ɵɵproperty(\"ngTemplateOutlet\", ctx_r0.startTemplate || ctx_r0._startTemplate);\n  }\n}\nfunction Toolbar_div_2_ng_container_1_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementContainer(0);\n  }\n}\nfunction Toolbar_div_2_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\");\n    i0.ɵɵtemplate(1, Toolbar_div_2_ng_container_1_Template, 1, 0, \"ng-container\", 1);\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const ctx_r0 = i0.ɵɵnextContext();\n    i0.ɵɵclassMap(ctx_r0.cx(\"center\"));\n    i0.ɵɵattribute(\"data-pc-section\", \"center\");\n    i0.ɵɵadvance();\n    i0.ɵɵproperty(\"ngTemplateOutlet\", ctx_r0.centerTemplate || ctx_r0._centerTemplate);\n  }\n}\nfunction Toolbar_div_3_ng_container_1_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementContainer(0);\n  }\n}\nfunction Toolbar_div_3_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\");\n    i0.ɵɵtemplate(1, Toolbar_div_3_ng_container_1_Template, 1, 0, \"ng-container\", 1);\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const ctx_r0 = i0.ɵɵnextContext();\n    i0.ɵɵclassMap(ctx_r0.cx(\"end\"));\n    i0.ɵɵattribute(\"data-pc-section\", \"end\");\n    i0.ɵɵadvance();\n    i0.ɵɵproperty(\"ngTemplateOutlet\", ctx_r0.endTemplate || ctx_r0._endTemplate);\n  }\n}\nconst classes = {\n  root: () => ['p-toolbar p-component'],\n  start: 'p-toolbar-start',\n  center: 'p-toolbar-center',\n  end: 'p-toolbar-end'\n};\nclass ToolbarStyle extends BaseStyle {\n  name = 'toolbar';\n  theme = style;\n  classes = classes;\n  static ɵfac = /* @__PURE__ */(() => {\n    let ɵToolbarStyle_BaseFactory;\n    return function ToolbarStyle_Factory(__ngFactoryType__) {\n      return (ɵToolbarStyle_BaseFactory || (ɵToolbarStyle_BaseFactory = i0.ɵɵgetInheritedFactory(ToolbarStyle)))(__ngFactoryType__ || ToolbarStyle);\n    };\n  })();\n  static ɵprov = /* @__PURE__ */i0.ɵɵdefineInjectable({\n    token: ToolbarStyle,\n    factory: ToolbarStyle.ɵfac\n  });\n}\n(() => {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(ToolbarStyle, [{\n    type: Injectable\n  }], null, null);\n})();\n/**\n *\n * Toolbar is a grouping component for buttons and other content.\n *\n * [Live Demo](https://www.primeng.org/toolbar/)\n *\n * @module toolbarstyle\n *\n */\nvar ToolbarClasses;\n(function (ToolbarClasses) {\n  /**\n   * Class name of the root element\n   */\n  ToolbarClasses[\"root\"] = \"p-toolbar\";\n  /**\n   * Class name of the start element\n   */\n  ToolbarClasses[\"start\"] = \"p-toolbar-start\";\n  /**\n   * Class name of the center element\n   */\n  ToolbarClasses[\"center\"] = \"p-toolbar-center\";\n  /**\n   * Class name of the end element\n   */\n  ToolbarClasses[\"end\"] = \"p-toolbar-end\";\n})(ToolbarClasses || (ToolbarClasses = {}));\n\n/**\n * Toolbar is a grouping component for buttons and other content.\n * @group Components\n */\nclass Toolbar extends BaseComponent {\n  /**\n   * Style class of the component.\n   * @deprecated since v20.0.0, use `class` instead.\n   * @group Props\n   */\n  styleClass;\n  /**\n   * Defines a string value that labels an interactive element.\n   * @group Props\n   */\n  ariaLabelledBy;\n  _componentStyle = inject(ToolbarStyle);\n  getBlockableElement() {\n    return this.el.nativeElement.children[0];\n  }\n  /**\n   * Defines template option for start.\n   * @group Templates\n   */\n  startTemplate;\n  /**\n   * Defines template option for end.\n   * @group Templates\n   */\n  endTemplate;\n  /**\n   * Defines template option for center.\n   * @group Templates\n   */\n  centerTemplate;\n  templates;\n  _startTemplate;\n  _endTemplate;\n  _centerTemplate;\n  ngAfterContentInit() {\n    this.templates.forEach(item => {\n      switch (item.getType()) {\n        case 'start':\n        case 'left':\n          this._startTemplate = item.template;\n          break;\n        case 'end':\n        case 'right':\n          this._endTemplate = item.template;\n          break;\n        case 'center':\n          this._centerTemplate = item.template;\n          break;\n      }\n    });\n  }\n  static ɵfac = /* @__PURE__ */(() => {\n    let ɵToolbar_BaseFactory;\n    return function Toolbar_Factory(__ngFactoryType__) {\n      return (ɵToolbar_BaseFactory || (ɵToolbar_BaseFactory = i0.ɵɵgetInheritedFactory(Toolbar)))(__ngFactoryType__ || Toolbar);\n    };\n  })();\n  static ɵcmp = /* @__PURE__ */i0.ɵɵdefineComponent({\n    type: Toolbar,\n    selectors: [[\"p-toolbar\"]],\n    contentQueries: function Toolbar_ContentQueries(rf, ctx, dirIndex) {\n      if (rf & 1) {\n        i0.ɵɵcontentQuery(dirIndex, _c0, 4);\n        i0.ɵɵcontentQuery(dirIndex, _c1, 4);\n        i0.ɵɵcontentQuery(dirIndex, _c2, 4);\n        i0.ɵɵcontentQuery(dirIndex, PrimeTemplate, 4);\n      }\n      if (rf & 2) {\n        let _t;\n        i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.startTemplate = _t.first);\n        i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.endTemplate = _t.first);\n        i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.centerTemplate = _t.first);\n        i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.templates = _t);\n      }\n    },\n    hostAttrs: [\"data-pc-section\", \"root\", \"data-pc-name\", \"toolbar\", \"role\", \"toolbar\"],\n    hostVars: 3,\n    hostBindings: function Toolbar_HostBindings(rf, ctx) {\n      if (rf & 2) {\n        i0.ɵɵattribute(\"aria-labelledby\", ctx.ariaLabelledBy);\n        i0.ɵɵclassMap(ctx.cn(ctx.cx(\"root\"), ctx.styleClass));\n      }\n    },\n    inputs: {\n      styleClass: \"styleClass\",\n      ariaLabelledBy: \"ariaLabelledBy\"\n    },\n    features: [i0.ɵɵProvidersFeature([ToolbarStyle]), i0.ɵɵInheritDefinitionFeature],\n    ngContentSelectors: _c3,\n    decls: 4,\n    vars: 3,\n    consts: [[3, \"class\", 4, \"ngIf\"], [4, \"ngTemplateOutlet\"]],\n    template: function Toolbar_Template(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵprojectionDef();\n        i0.ɵɵprojection(0);\n        i0.ɵɵtemplate(1, Toolbar_div_1_Template, 2, 4, \"div\", 0)(2, Toolbar_div_2_Template, 2, 4, \"div\", 0)(3, Toolbar_div_3_Template, 2, 4, \"div\", 0);\n      }\n      if (rf & 2) {\n        i0.ɵɵadvance();\n        i0.ɵɵproperty(\"ngIf\", ctx.startTemplate || ctx._startTemplate);\n        i0.ɵɵadvance();\n        i0.ɵɵproperty(\"ngIf\", ctx.centerTemplate || ctx._centerTemplate);\n        i0.ɵɵadvance();\n        i0.ɵɵproperty(\"ngIf\", ctx.endTemplate || ctx._endTemplate);\n      }\n    },\n    dependencies: [CommonModule, i1.NgIf, i1.NgTemplateOutlet, SharedModule],\n    encapsulation: 2,\n    changeDetection: 0\n  });\n}\n(() => {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(Toolbar, [{\n    type: Component,\n    args: [{\n      selector: 'p-toolbar',\n      standalone: true,\n      imports: [CommonModule, SharedModule],\n      template: `\n        <ng-content></ng-content>\n        <div [class]=\"cx('start')\" *ngIf=\"startTemplate || _startTemplate\" [attr.data-pc-section]=\"'start'\">\n            <ng-container *ngTemplateOutlet=\"startTemplate || _startTemplate\"></ng-container>\n        </div>\n        <div [class]=\"cx('center')\" *ngIf=\"centerTemplate || _centerTemplate\" [attr.data-pc-section]=\"'center'\">\n            <ng-container *ngTemplateOutlet=\"centerTemplate || _centerTemplate\"></ng-container>\n        </div>\n        <div [class]=\"cx('end')\" *ngIf=\"endTemplate || _endTemplate\" [attr.data-pc-section]=\"'end'\">\n            <ng-container *ngTemplateOutlet=\"endTemplate || _endTemplate\"></ng-container>\n        </div>\n    `,\n      changeDetection: ChangeDetectionStrategy.OnPush,\n      encapsulation: ViewEncapsulation.None,\n      providers: [ToolbarStyle],\n      host: {\n        '[class]': 'cn(cx(\"root\"), styleClass)',\n        'data-pc-section': 'root',\n        'data-pc-name': 'toolbar',\n        role: 'toolbar',\n        '[attr.aria-labelledby]': 'ariaLabelledBy'\n      }\n    }]\n  }], null, {\n    styleClass: [{\n      type: Input\n    }],\n    ariaLabelledBy: [{\n      type: Input\n    }],\n    startTemplate: [{\n      type: ContentChild,\n      args: ['start', {\n        descendants: false\n      }]\n    }],\n    endTemplate: [{\n      type: ContentChild,\n      args: ['end', {\n        descendants: false\n      }]\n    }],\n    centerTemplate: [{\n      type: ContentChild,\n      args: ['center', {\n        descendants: false\n      }]\n    }],\n    templates: [{\n      type: ContentChildren,\n      args: [PrimeTemplate]\n    }]\n  });\n})();\nclass ToolbarModule {\n  static ɵfac = function ToolbarModule_Factory(__ngFactoryType__) {\n    return new (__ngFactoryType__ || ToolbarModule)();\n  };\n  static ɵmod = /* @__PURE__ */i0.ɵɵdefineNgModule({\n    type: ToolbarModule,\n    imports: [Toolbar, SharedModule],\n    exports: [Toolbar, SharedModule]\n  });\n  static ɵinj = /* @__PURE__ */i0.ɵɵdefineInjector({\n    imports: [Toolbar, SharedModule, SharedModule]\n  });\n}\n(() => {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(ToolbarModule, [{\n    type: NgModule,\n    args: [{\n      imports: [Toolbar, SharedModule],\n      exports: [Toolbar, SharedModule]\n    }]\n  }], null, null);\n})();\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { Toolbar, ToolbarClasses, ToolbarModule, ToolbarStyle };\n","import {\n  Component,\n  ElementRef,\n  input,\n  output,\n  ViewChild,\n  effect,\n} from '@angular/core';\nimport { TreeNode } from 'primeng/api';\nimport { Tree, TreeModule, TreeNodeExpandEvent } from 'primeng/tree';\nimport { isNullOrUndefined } from '../../utils';\n\n/**\n * Interface for handling node not found scenarios\n */\nexport interface NodeNotFoundEvent {\n  nodeKey: string;\n  context?: Record<string, unknown>;\n}\n\n/**\n * Interface for context extraction strategy\n */\nexport interface ContextExtractor {\n  extractContext(\n    nodeKey: string,\n    nodes: TreeNode[],\n  ): Record<string, unknown> | undefined;\n}\n\n@Component({\n  selector: 'app-tree-panel',\n  standalone: true,\n  imports: [TreeModule],\n  templateUrl: './tree-panel.component.html',\n  styleUrl: './tree-panel.component.scss',\n})\nexport class TreePanelComponent {\n  @ViewChild('treeComponent') treeComponent!: Tree;\n  @ViewChild('treeWrapper') treeWrapper!: ElementRef<HTMLDivElement>;\n\n  readonly nodes = input<TreeNode[]>([]);\n  readonly selectionMode = input<'single' | 'multiple' | 'checkbox'>('single');\n  readonly loading = input(false);\n  readonly searchingForNode = input(false);\n  readonly searchingNodeKey = input<string | null>(null);\n  readonly emptyMessage = input('No data available');\n  readonly styleClass = input('');\n  readonly selection = input<TreeNode | TreeNode[] | null>(null);\n  readonly scrollToNodeKey = input<string | null>(null);\n  readonly scrollToCenterNodeKey = input<string | null>(null);\n  readonly contextExtractor = input<ContextExtractor | null>(null);\n\n  readonly nodeSelect = output<TreeNode>();\n  readonly nodeUnselect = output<TreeNode>();\n  readonly nodeExpand = output<TreeNode>();\n  readonly nodeCollapse = output<TreeNode>();\n  readonly nodeNotFoundInData = output<NodeNotFoundEvent>();\n\n  readonly loadingMessage = 'Loading...';\n\n  constructor() {\n    // Effect to watch for scroll requests\n    effect(() => {\n      const nodeKey = this.scrollToNodeKey();\n      if (nodeKey !== null && nodeKey !== '') {\n        // Delay scrolling to allow DOM updates\n        setTimeout(() => this.scrollToNode(nodeKey), 150);\n      }\n    });\n\n    // Effect to watch for center scroll requests (for expanded nodes)\n    effect(() => {\n      const nodeKey = this.scrollToCenterNodeKey();\n      if (nodeKey !== null && nodeKey !== '') {\n        // Delay scrolling to allow DOM updates\n        setTimeout(() => this.scrollToCenterNode(nodeKey), 150);\n      }\n    });\n  }\n\n  onNodeSelect(event: { node: TreeNode }): void {\n    this.nodeSelect.emit(event.node);\n  }\n\n  onNodeUnselect(event: { node: TreeNode }): void {\n    this.nodeUnselect.emit(event.node);\n  }\n\n  onNodeExpand(event: TreeNodeExpandEvent): void {\n    this.nodeExpand.emit(event.node);\n  }\n\n  onNodeCollapse(event: { node: TreeNode }): void {\n    this.nodeCollapse.emit(event.node);\n  }\n\n  /**\n   * Scrolls to a specific node in the tree and centers it in the viewport\n   * @param nodeKey The key of the node to scroll to\n   */\n  private scrollToNode(nodeKey: string): void {\n    // Step 1: Search in the data first\n    const targetNode = this.findNodeInData(nodeKey);\n\n    if (targetNode === null) {\n      // Use the context extractor if provided, otherwise pass undefined context\n      const extractor = this.contextExtractor();\n      const context = extractor?.extractContext(nodeKey, this.nodes());\n\n      this.nodeNotFoundInData.emit({\n        nodeKey,\n        context,\n      });\n      return;\n    }\n\n    // Step 2: Ensure node path is expanded\n    this.expandPathToNode(targetNode);\n\n    // Step 3: Use improved scroll approach with PrimeNG native methods\n    this.performOptimizedScroll(nodeKey);\n  }\n\n  /**\n   * Performs optimized scrolling using PrimeNG's native methods with fallbacks\n   */\n  private performOptimizedScroll(nodeKey: string): void {\n    // Use requestAnimationFrame to ensure DOM updates are complete\n    requestAnimationFrame(() => {\n      requestAnimationFrame(() => {\n        // First attempt: Use PrimeNG native scroll\n        const success = this.scrollToNodeInDOM(nodeKey);\n\n        if (!success) {\n          // Retry after short delay if first attempt fails\n          setTimeout(() => {\n            this.scrollToNodeInDOM(nodeKey);\n          }, 300);\n        }\n      });\n    });\n  }\n\n  /**\n   * Scrolls to center a specific node (for expanded nodes visibility)\n   * This is different from scrollToNode - it only centers without selecting\n   * @param nodeKey The key of the node to center in the viewport\n   */\n  private scrollToCenterNode(nodeKey: string): void {\n    // Step 1: Search in the data first to ensure node exists\n    const targetNode = this.findNodeInData(nodeKey);\n\n    if (targetNode === null) {\n      // Use the context extractor if provided, otherwise pass undefined context\n      const extractor = this.contextExtractor();\n      const context = extractor?.extractContext(nodeKey, this.nodes());\n\n      this.nodeNotFoundInData.emit({\n        nodeKey,\n        context,\n      });\n      return;\n    }\n\n    // Step 2: Find the DOM element without expanding paths or triggering node events\n    const nodeElement = this.findNodeElementInDOM(nodeKey);\n    if (nodeElement) {\n      // For expanded nodes, we want to scroll to show the children area, not just center the parent\n      this.scrollToShowExpandedChildren(nodeElement, targetNode);\n    }\n  }\n\n  /**\n   * Scrolls to position the expanded node and its children optimally in the viewport\n   * @param nodeElement The DOM element of the parent node\n   * @param targetNode The tree node data\n   */\n  private scrollToShowExpandedChildren(\n    nodeElement: HTMLElement,\n    targetNode: TreeNode,\n  ): void {\n    const treeWrapper = this.treeWrapper?.nativeElement;\n    if (isNullOrUndefined(treeWrapper)) {\n      return;\n    }\n\n    // Check if the node is actually expanded and has children\n    if (\n      isNullOrUndefined(targetNode.expanded) ||\n      !targetNode.children ||\n      targetNode.children.length === 0\n    ) {\n      // If not expanded or no children, just center the node itself\n      this.scrollWithoutVirtualScroll(nodeElement);\n      return;\n    }\n\n    // Calculate position to show the parent node and some of its children\n    const elementRect = nodeElement.getBoundingClientRect();\n    const wrapperRect = treeWrapper.getBoundingClientRect();\n\n    // Position the parent node in the upper third of the viewport\n    // This allows the children to be visible below it\n    const elementTopRelativeToWrapper = elementRect.top - wrapperRect.top;\n    const wrapperHeight = treeWrapper.clientHeight;\n\n    // Position parent at 1/3 from top instead of center\n    const offsetFromTop = wrapperHeight / 3;\n    const targetScrollTop =\n      treeWrapper.scrollTop + elementTopRelativeToWrapper - offsetFromTop;\n\n    // Use scrollTo if available, otherwise set scrollTop directly\n    if (typeof treeWrapper.scrollTo === 'function') {\n      treeWrapper.scrollTo({\n        top: Math.max(0, targetScrollTop),\n        behavior: 'smooth',\n      });\n    } else {\n      treeWrapper.scrollTop = Math.max(0, targetScrollTop);\n    }\n\n    // Highlight the parent node briefly to show what was expanded\n    setTimeout(() => this.highlightElement(nodeElement), 300);\n  }\n\n  /**\n   * Recursively searches for a node in the tree data\n   */\n  private findNodeInData(nodeKey: string): TreeNode | null {\n    const searchInNodes = (nodes: TreeNode[]): TreeNode | null => {\n      for (const node of nodes) {\n        if (\n          node.key === nodeKey ||\n          node.data?.id === nodeKey ||\n          node.label?.includes(nodeKey) === true\n        ) {\n          return node;\n        }\n\n        if (node.children && node.children.length > 0) {\n          const found = searchInNodes(node.children);\n          if (found) return found;\n        }\n      }\n      return null;\n    };\n\n    return searchInNodes(this.nodes());\n  }\n\n  /**\n   * Expands all parent nodes to make the target node visible\n   */\n  private expandPathToNode(targetNode: TreeNode): void {\n    const pathToExpand: TreeNode[] = [];\n\n    const findPath = (\n      nodes: TreeNode[],\n      target: TreeNode,\n      path: TreeNode[],\n    ): boolean => {\n      for (const node of nodes) {\n        const currentPath = [...path, node];\n\n        if (node === target) {\n          pathToExpand.push(...path);\n          return true;\n        }\n\n        if (node.children && node.children.length > 0) {\n          if (findPath(node.children, target, currentPath)) {\n            return true;\n          }\n        }\n      }\n      return false;\n    };\n\n    findPath(this.nodes(), targetNode, []);\n\n    // Expand all nodes in the path\n    for (const nodeToExpand of pathToExpand) {\n      if (nodeToExpand.expanded !== true) {\n        nodeToExpand.expanded = true;\n        this.nodeExpand.emit(nodeToExpand);\n      }\n    }\n  }\n\n  /**\n   * Scrolls to a node using the appropriate method based on virtual scroll setting\n   * @returns true if successful, false otherwise\n   */\n  private scrollToNodeInDOM(nodeKey: string): boolean {\n    const treeComponent = this.treeComponent;\n\n    if (isNullOrUndefined(treeComponent)) {\n      return false;\n    }\n\n    try {\n      // First, find the node in the data to ensure it exists\n      const nodeData = this.findNodeInData(nodeKey);\n      if (isNullOrUndefined(nodeData)) {\n        return false;\n      }\n\n      // Find the DOM element\n      const nodeElement = this.findNodeElementInDOM(nodeKey);\n      if (isNullOrUndefined(nodeElement)) {\n        return this.tryAlternativeScrollMethods(nodeKey);\n      }\n\n      // Choose scroll method based on virtual scroll setting\n      if (treeComponent.virtualScroll === true) {\n        return this.scrollWithVirtualScroll(\n          treeComponent,\n          nodeElement,\n          nodeKey,\n        );\n      } else {\n        return this.scrollWithoutVirtualScroll(nodeElement);\n      }\n    } catch (error) {\n      console.error('Error scrolling to tree node:', error);\n      return false;\n    }\n  }\n\n  /**\n   * Scrolls using virtual scroll method\n   */\n  private scrollWithVirtualScroll(\n    treeComponent: Tree,\n    nodeElement: HTMLElement,\n    _nodeKey: string,\n  ): boolean {\n    const treeContainer = treeComponent.el?.nativeElement;\n    if (isNullOrUndefined(treeContainer)) {\n      return false;\n    }\n\n    // Calculate position to center the element within the virtual scroll container\n    const elementRect = nodeElement.getBoundingClientRect();\n    const containerRect = treeContainer.getBoundingClientRect();\n\n    const elementTopRelativeToContainer = elementRect.top - containerRect.top;\n    const containerHeight = treeContainer.clientHeight;\n    const elementHeight = elementRect.height;\n\n    // Center calculation for virtual scroll\n    const centerOffset = (containerHeight - elementHeight) / 2;\n    const targetScrollTop =\n      treeContainer.scrollTop + elementTopRelativeToContainer - centerOffset;\n\n    treeComponent.scrollTo({\n      top: Math.max(0, targetScrollTop),\n      behavior: 'smooth',\n    });\n\n    setTimeout(() => this.highlightElement(nodeElement), 300);\n    return true;\n  }\n\n  /**\n   * Scrolls without virtual scroll using wrapper element\n   */\n  private scrollWithoutVirtualScroll(nodeElement: HTMLElement): boolean {\n    const treeWrapper = this.treeWrapper?.nativeElement;\n    if (isNullOrUndefined(treeWrapper)) {\n      return false;\n    }\n\n    // Calculate position to center the element within the tree container\n    const elementRect = nodeElement.getBoundingClientRect();\n    const wrapperRect = treeWrapper.getBoundingClientRect();\n\n    // Calculate the scroll position to center the element\n    const elementTopRelativeToWrapper = elementRect.top - wrapperRect.top;\n    const wrapperHeight = treeWrapper.clientHeight;\n    const elementHeight = elementRect.height;\n\n    // Center calculation: position element in middle of visible area\n    const centerOffset = (wrapperHeight - elementHeight) / 2;\n    const targetScrollTop =\n      treeWrapper.scrollTop + elementTopRelativeToWrapper - centerOffset;\n\n    // Use scrollTo if available, otherwise set scrollTop directly\n    if (typeof treeWrapper.scrollTo === 'function') {\n      treeWrapper.scrollTo({\n        top: Math.max(0, targetScrollTop),\n        behavior: 'smooth',\n      });\n    } else {\n      // For browsers that don't support scrollTo, use scrollTop directly\n      treeWrapper.scrollTop = Math.max(0, targetScrollTop);\n    }\n\n    setTimeout(() => this.highlightElement(nodeElement), 300);\n    return true;\n  }\n\n  /**\n   * Try alternative scroll methods when primary methods fail\n   */\n  private tryAlternativeScrollMethods(nodeKey: string): boolean {\n    // Try virtual scroll by index if available\n    const treeComponent = this.treeComponent;\n    if (treeComponent?.virtualScroll === true) {\n      const nodeIndex = this.findNodeIndex(nodeKey);\n      if (nodeIndex !== -1) {\n        treeComponent.scrollToVirtualIndex(nodeIndex);\n        return true;\n      }\n    }\n\n    // Final fallback\n    return this.fallbackDOMScroll(nodeKey);\n  }\n\n  /**\n   * Finds the DOM element for a specific node key\n   */\n  private findNodeElementInDOM(nodeKey: string): HTMLElement | null {\n    const treeWrapper = this.treeWrapper?.nativeElement;\n    if (isNullOrUndefined(treeWrapper)) {\n      return null;\n    }\n\n    return this.findNodeElement(treeWrapper, nodeKey);\n  }\n\n  /**\n   * Finds the index of a node in the flattened tree structure\n   */\n  private findNodeIndex(nodeKey: string): number {\n    let index = 0;\n\n    const searchInNodes = (nodes: TreeNode[]): number => {\n      for (const node of nodes) {\n        if (\n          node.key === nodeKey ||\n          node.data?.id === nodeKey ||\n          node.label?.includes(nodeKey) === true\n        ) {\n          return index;\n        }\n\n        index++;\n\n        if (\n          node.children &&\n          node.children.length > 0 &&\n          node.expanded === true\n        ) {\n          const foundIndex = searchInNodes(node.children);\n          if (foundIndex !== -1) {\n            return foundIndex;\n          }\n        }\n      }\n      return -1;\n    };\n\n    return searchInNodes(this.nodes());\n  }\n\n  /**\n   * Fallback DOM-based scrolling method\n   */\n  private fallbackDOMScroll(nodeKey: string): boolean {\n    const treeWrapper = this.treeWrapper?.nativeElement;\n\n    if (isNullOrUndefined(treeWrapper)) {\n      return false;\n    }\n\n    try {\n      const nodeElement = this.findNodeElement(treeWrapper, nodeKey);\n      if (nodeElement === null) {\n        return false;\n      }\n\n      // Use custom centering logic instead of scrollIntoView\n      const elementRect = nodeElement.getBoundingClientRect();\n      const wrapperRect = treeWrapper.getBoundingClientRect();\n\n      const elementTopRelativeToWrapper = elementRect.top - wrapperRect.top;\n      const wrapperHeight = treeWrapper.clientHeight;\n      const elementHeight = elementRect.height;\n\n      const centerOffset = (wrapperHeight - elementHeight) / 2;\n      const targetScrollTop =\n        treeWrapper.scrollTop + elementTopRelativeToWrapper - centerOffset;\n\n      if (typeof treeWrapper.scrollTo === 'function') {\n        treeWrapper.scrollTo({\n          top: Math.max(0, targetScrollTop),\n          behavior: 'smooth',\n        });\n      } else {\n        treeWrapper.scrollTop = Math.max(0, targetScrollTop);\n      }\n\n      this.highlightElement(nodeElement);\n      return true;\n    } catch (error) {\n      console.error('Error in fallback DOM scroll:', error);\n      return false;\n    }\n  }\n\n  private findNodeElement(\n    treeElement: HTMLElement,\n    nodeKey: string,\n  ): HTMLElement | null {\n    // Strategy 1: Try PrimeNG-specific selectors\n    let nodeElement = this.findBySelectors(treeElement, nodeKey);\n\n    // Strategy 2: Search through all tree nodes\n    nodeElement ??= this.findByNodeSearch(treeElement, nodeKey);\n\n    // Strategy 3: Look for tree node content\n    nodeElement ??= this.findByContentSearch(treeElement, nodeKey);\n\n    return nodeElement;\n  }\n\n  private findBySelectors(\n    treeElement: HTMLElement,\n    nodeKey: string,\n  ): HTMLElement | null {\n    const selectors = [\n      `[data-pc-section=\"node\"][aria-label*=\"${nodeKey}\"]`,\n      `.p-treenode[data-key=\"${nodeKey}\"]`,\n      `[data-id=\"${nodeKey}\"]`,\n      `[aria-label*=\"${nodeKey}\"]`,\n    ];\n\n    for (const selector of selectors) {\n      const element = treeElement.querySelector(selector) as HTMLElement;\n      if (element !== null) {\n        return element;\n      }\n    }\n    return null;\n  }\n\n  private findByNodeSearch(\n    treeElement: HTMLElement,\n    nodeKey: string,\n  ): HTMLElement | null {\n    const allNodes = treeElement.querySelectorAll(\n      '.p-treenode, .p-treenode-content, [role=\"treeitem\"]',\n    );\n\n    for (const node of Array.from(allNodes)) {\n      const htmlNode = node as HTMLElement;\n\n      if (this.isMatchingNode(htmlNode, nodeKey)) {\n        return htmlNode;\n      }\n    }\n    return null;\n  }\n\n  private findByContentSearch(\n    treeElement: HTMLElement,\n    nodeKey: string,\n  ): HTMLElement | null {\n    const contentNodes = treeElement.querySelectorAll(\n      '.p-treenode-label, .p-treenode-content',\n    );\n\n    for (const node of Array.from(contentNodes)) {\n      const htmlNode = node as HTMLElement;\n      const textContent = htmlNode.textContent;\n\n      if (textContent?.includes(nodeKey) === true) {\n        const treeNode = htmlNode.closest('.p-treenode') as HTMLElement;\n        if (treeNode !== null) {\n          return treeNode;\n        }\n      }\n    }\n    return null;\n  }\n\n  private isMatchingNode(htmlNode: HTMLElement, nodeKey: string): boolean {\n    const dataKey = htmlNode.getAttribute('data-key');\n    const ariaLabel = htmlNode.getAttribute('aria-label');\n    const textContent = htmlNode.textContent?.trim();\n\n    return (\n      dataKey === nodeKey ||\n      ariaLabel?.includes(nodeKey) === true ||\n      textContent?.includes(nodeKey) === true ||\n      htmlNode.querySelector(`[data-key=\"${nodeKey}\"]`) !== null\n    );\n  }\n\n  private scrollToElement(\n    treeElement: HTMLElement,\n    nodeElement: HTMLElement,\n  ): void {\n    const treeRect = treeElement.getBoundingClientRect();\n    const nodeRect = nodeElement.getBoundingClientRect();\n    const treeScrollTop = treeElement.scrollTop;\n    const nodeOffsetTop = nodeRect.top - treeRect.top + treeScrollTop;\n    const centerPosition =\n      nodeOffsetTop - treeRect.height / 2 + nodeRect.height / 2;\n\n    treeElement.scrollTo({\n      top: Math.max(0, centerPosition),\n      behavior: 'smooth',\n    });\n  }\n\n  private highlightElement(nodeElement: HTMLElement): void {\n    nodeElement.style.transition = 'background-color 0.3s ease';\n    nodeElement.style.backgroundColor = 'rgba(59, 130, 246, 0.1)';\n\n    setTimeout(() => {\n      if (nodeElement !== null) {\n        nodeElement.style.backgroundColor = '';\n        setTimeout(() => {\n          if (nodeElement !== null) {\n            nodeElement.style.transition = '';\n          }\n        }, 300);\n      }\n    }, 1500);\n  }\n\n  /**\n   * Alternative method to find nodes using PrimeNG Tree component properties\n   */\n  private findNodeUsingPrimeNGTree(nodeKey: string): HTMLElement | null {\n    if (isNullOrUndefined(this.treeComponent)) {\n      return null;\n    }\n\n    try {\n      // Get the PrimeNG Tree's native element\n      const treeEl = this.treeComponent.el?.nativeElement;\n      if (isNullOrUndefined(treeEl)) {\n        return null;\n      }\n\n      // Try different strategies to find the node\n      const strategies = [\n        () => treeEl.querySelector(`[data-key=\"${nodeKey}\"]`),\n        () => treeEl.querySelector(`[aria-label*=\"${nodeKey}\"]`),\n        () => {\n          // Search through all tree items\n          const allItems = treeEl.querySelectorAll(\n            '[role=\"treeitem\"], .p-treenode',\n          );\n          for (const item of Array.from(allItems)) {\n            const element = item as HTMLElement;\n            if (element.textContent?.includes(nodeKey) === true) {\n              return element;\n            }\n          }\n          return null;\n        },\n      ];\n\n      for (const element of strategies) {\n        const result = element();\n        if (result !== null) {\n          return result as HTMLElement;\n        }\n      }\n\n      return null;\n    } catch (error) {\n      console.error('Error in findNodeUsingPrimeNGTree:', error);\n      return null;\n    }\n  }\n}\n","<div #treeWrapper class=\"tree-panel-wrapper h-full overflow-auto relative\">\n  <!-- Custom loading overlay for node search -->\n  @if (searchingForNode()) {\n    <div\n      class=\"node-search-overlay absolute inset-0 bg-white bg-opacity-75 flex items-center justify-center z-10\"\n    >\n      <div\n        class=\"node-search-message flex items-center space-x-2 bg-white px-4 py-2 rounded-lg border\"\n      >\n        <i class=\"pi pi-spin pi-spinner text-blue-500\"></i>\n        <span class=\"text-sm text-gray-700\">{{ loadingMessage }}</span>\n      </div>\n    </div>\n  }\n\n  <p-tree\n    #treeComponent\n    [value]=\"nodes()\"\n    [selectionMode]=\"selectionMode()\"\n    [selection]=\"selection()\"\n    [loading]=\"loading() && !searchingForNode()\"\n    [emptyMessage]=\"emptyMessage()\"\n    [styleClass]=\"styleClass()\"\n    (onNodeSelect)=\"onNodeSelect($event)\"\n    (onNodeUnselect)=\"onNodeUnselect($event)\"\n    (onNodeExpand)=\"onNodeExpand($event)\"\n    (onNodeCollapse)=\"onNodeCollapse($event)\"\n  />\n</div>\n","import {\n  Component,\n  input,\n  output,\n  signal,\n  computed,\n  ChangeDetectionStrategy,\n  ViewChild,\n  ElementRef,\n  OnDestroy,\n  inject,\n} from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { FormsModule } from '@angular/forms';\nimport { InputTextModule } from 'primeng/inputtext';\nimport { ButtonModule } from 'primeng/button';\nimport { ProgressSpinnerModule } from 'primeng/progressspinner';\nimport { ScrollerModule } from 'primeng/scroller';\nimport { isDefined, isNullOrUndefined } from '../../utils';\nimport { TreeSearchResult } from '../../models';\nimport { IconField } from 'primeng/iconfield';\nimport { InputIcon } from 'primeng/inputicon';\nimport { TooltipModule } from 'primeng/tooltip';\nimport {\n  FaIconLibrary,\n  FontAwesomeModule,\n} from '@fortawesome/angular-fontawesome';\nimport {\n  faMicrochip,\n  faCubes,\n  faSquareBinary,\n  faGauge,\n  faSitemap,\n  faRoad,\n  faUserSecret,\n  faBuildingUser,\n} from '@fortawesome/free-solid-svg-icons';\n\nimport {\n  getEntityIconClass,\n  isEntityIconFontAwesome,\n} from '../../models/entity-icons.model';\n\n@Component({\n  selector: 'app-tree-search',\n  standalone: true,\n  imports: [\n    CommonModule,\n    FormsModule,\n    InputTextModule,\n    ButtonModule,\n    ProgressSpinnerModule,\n    ScrollerModule,\n    InputIcon,\n    IconField,\n    TooltipModule,\n    FontAwesomeModule,\n  ],\n  templateUrl: './tree-search.component.html',\n  styleUrl: './tree-search.component.scss',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class TreeSearchComponent implements OnDestroy {\n  @ViewChild('searchInput') searchInput!: ElementRef<HTMLInputElement>;\n  @ViewChild('searchContainer') searchContainer!: ElementRef<HTMLDivElement>;\n\n  // Inputs\n  readonly placeholder = input<string>('Search company structure...');\n  readonly disabled = input<boolean>(false);\n  readonly results = input<TreeSearchResult[]>([]);\n  readonly isSearching = input<boolean>(false);\n  readonly maxDisplayResults = input<number>(10);\n\n  // Outputs\n  readonly queryChange = output<string>();\n  readonly resultSelect = output<TreeSearchResult>();\n  readonly searchClear = output<void>();\n\n  // Internal state\n  readonly searchQuery = signal<string>('');\n  readonly showResults = signal<boolean>(false);\n  readonly selectedIndex = signal<number>(-1);\n  readonly showAll = signal<boolean>(false); // Added showAll signal\n\n  // Computed values\n  readonly hasQuery = computed(() => this.searchQuery().trim().length > 0);\n  readonly hasResults = computed(() => this.results().length > 0);\n  readonly displayResults = computed(() => {\n    if (this.showAll()) {\n      return this.results();\n    }\n    const maxResults = this.maxDisplayResults();\n    return this.results().slice(0, maxResults);\n  });\n  readonly hasMoreResults = computed(\n    () => !this.showAll() && this.results().length > this.maxDisplayResults(),\n  );\n\n  private readonly clickListener?: (event: Event) => void;\n  private readonly library = inject(FaIconLibrary);\n  private readonly labelCache = new Map<string, string>();\n\n  constructor() {\n    this.library.addIcons(\n      faMicrochip,\n      faCubes,\n      faSquareBinary,\n      faGauge,\n      faSitemap,\n      faRoad,\n      faUserSecret,\n      faBuildingUser,\n    );\n    // Close results panel when clicking outside\n    this.clickListener = (event: Event) => {\n      const container = this.searchContainer?.nativeElement;\n      if (\n        this.showResults() &&\n        isDefined(container) &&\n        !container.contains(event.target as Node)\n      ) {\n        this.hideResults();\n      }\n    };\n    document.addEventListener('click', this.clickListener);\n  }\n\n  ngOnDestroy(): void {\n    if (this.clickListener) {\n      document.removeEventListener('click', this.clickListener);\n    }\n  }\n\n  onSearchInput(value: string): void {\n    this.searchQuery.set(value);\n    this.queryChange.emit(value);\n    this.showAll.set(false); // Reset showAll on new search\n\n    if (value.trim().length > 0) {\n      this.showResults.set(true);\n      this.selectedIndex.set(-1);\n    } else {\n      this.hideResults();\n    }\n  }\n\n  onSearchKeydown(event: KeyboardEvent): void {\n    const results = this.displayResults();\n\n    switch (event.key) {\n      case 'ArrowDown':\n        event.preventDefault();\n        this.selectedIndex.update((index) =>\n          Math.min(index + 1, results.length - 1),\n        );\n        break;\n\n      case 'ArrowUp':\n        event.preventDefault();\n        this.selectedIndex.update((index) => Math.max(index - 1, -1));\n        break;\n\n      case 'Enter': {\n        event.preventDefault();\n        const selectedIdx = this.selectedIndex();\n\n        // If an item is selected, use it; otherwise, select the first result if available\n        if (selectedIdx >= 0 && selectedIdx < results.length) {\n          this.selectResult(results[selectedIdx]);\n        } else if (results.length > 0) {\n          // Default action: select the first result when no item is selected\n          this.selectResult(results[0]);\n        }\n        break;\n      }\n\n      case 'Escape':\n        event.preventDefault();\n        this.clearSearch();\n        break;\n    }\n  }\n\n  selectResult(result: TreeSearchResult): void {\n    this.resultSelect.emit(result);\n    this.hideResults();\n    this.searchInput.nativeElement.blur();\n  }\n\n  clearSearch(): void {\n    this.searchQuery.set('');\n    this.hideResults();\n    this.searchClear.emit();\n    this.searchInput.nativeElement.focus();\n  }\n\n  private hideResults(): void {\n    this.showResults.set(false);\n    this.selectedIndex.set(-1);\n    this.showAll.set(false); // Reset showAll when hiding results\n  }\n\n  onInputFocus(): void {\n    if (this.hasQuery() && this.hasResults()) {\n      this.showResults.set(true);\n    }\n  }\n\n  getResultTypeIcon(type: string): string {\n    return getEntityIconClass(type);\n  }\n\n  isIconFontAwesome(type: string): boolean {\n    return isEntityIconFontAwesome(type);\n  }\n\n  getResultTypeLabel(type: string): string {\n    if (!type) {\n      return '';\n    }\n\n    if (this.labelCache.has(type)) {\n      return this.labelCache.get(type) as string;\n    }\n\n    // Convert camelCase or PascalCase to Title Case with spaces\n    const formatted = type\n      .replace(/([A-Z])/g, ' $1')\n      .trim()\n      .split(' ')\n      .map((word) => word.charAt(0).toUpperCase() + word.slice(1).toLowerCase())\n      .join(' ');\n\n    this.labelCache.set(type, formatted);\n    return formatted;\n  }\n\n  formatPath(path: string[]): string {\n    if (isNullOrUndefined(path) || path.length === 0) {\n      return '';\n    }\n    return path.slice(0, -1).join(' > ');\n  }\n\n  showAllResults(): void {\n    this.showAll.set(true);\n  }\n\n  getFaIconName(type: string): string {\n    const iconClass = getEntityIconClass(type);\n    return iconClass.replace('fas fa-', '');\n  }\n}\n","<div #searchContainer class=\"tree-search-container relative\">\n  <div class=\"p-inputgroup\">\n    <p-iconfield>\n      <input\n        #searchInput\n        type=\"text\"\n        pInputText\n        [placeholder]=\"placeholder()\"\n        [disabled]=\"disabled()\"\n        [value]=\"searchQuery()\"\n        (input)=\"onSearchInput(searchInput.value)\"\n        (keydown)=\"onSearchKeydown($event)\"\n        (focus)=\"onInputFocus()\"\n        class=\"tree-search-input h-10\"\n        autocomplete=\"off\"\n      />\n\n      @if (hasQuery()) {\n        <p-inputicon\n          class=\"pi pi-times cursor-pointer hover:text-gray-600 transition-colors clear-search-icon\"\n          (click)=\"clearSearch()\"\n          (keydown.enter)=\"clearSearch()\"\n          (keydown.space)=\"clearSearch()\"\n          pTooltip=\"Clear search\"\n          tooltipPosition=\"top\"\n          tabindex=\"0\"\n        />\n      } @else {\n        <p-inputicon class=\"pi pi-search\" />\n      }\n    </p-iconfield>\n  </div>\n\n  @if (showResults()) {\n    <div\n      class=\"search-results-panel absolute top-full left-0 right-0 z-50 mt-1 bg-white border border-gray-300 rounded shadow-lg max-h-80 overflow-hidden\"\n    >\n      @if (isSearching()) {\n        <div class=\"p-4 text-center\">\n          <i class=\"pi pi-spin pi-spinner mr-2\"></i>\n          <span>Searching...</span>\n        </div>\n      } @else if (hasResults()) {\n        <div class=\"search-results-list\">\n          @for (result of displayResults(); track result.id; let i = $index) {\n            <div\n              class=\"search-result-item p-3 cursor-pointer border-b border-gray-200 last:border-b-0 hover:bg-blue-50 transition-colors\"\n              [class.selected]=\"selectedIndex() === i\"\n              (click)=\"selectResult(result)\"\n              (keydown.enter)=\"selectResult(result)\"\n            >\n              <div class=\"flex items-start gap-3\">\n                <div class=\"flex-shrink-0 mt-0.5\">\n                  @if (isIconFontAwesome(result.type)) {\n                    <fa-icon\n                      [icon]=\"['fas', getFaIconName(result.type)]\"\n                      class=\"text-primary !text-2xl opacity-50 transition-opacity duration-200\"\n                    ></fa-icon>\n                  } @else {\n                    <i\n                      [class]=\"\n                        getResultTypeIcon(result.type) +\n                        ' text-primary !text-2xl opacity-50 transition-opacity duration-200'\n                      \"\n                    ></i>\n                  }\n                </div>\n                <div class=\"flex-1 min-w-0\">\n                  <div class=\"flex items-center gap-2 mb-1\">\n                    <span class=\"font-semibold text-gray-900 truncate\">\n                      {{ result.name }}\n                    </span>\n                    <span\n                      class=\"text-sm uppercase tracking-wide text-gray-500 font-medium px-1.5 py-0.5 bg-gray-50 rounded flex-shrink-0 opacity-70\"\n                    >\n                      {{ getResultTypeLabel(result.type) }}\n                    </span>\n                  </div>\n\n                  @if (result.path.length > 1) {\n                    <div class=\"text-sm text-gray-500 truncate mb-2\">\n                      {{ formatPath(result.path) }}\n                    </div>\n                  }\n\n                  @if (\n                    result.owner?.name ||\n                    result.state ||\n                    (result.fields && result.fields.length > 0)\n                  ) {\n                    <div class=\"metadata-table text-sm\">\n                      @if (result.state) {\n                        <div class=\"metadata-row\">\n                          <span class=\"metadata-label\">State</span>\n                          <span class=\"metadata-divider\"></span>\n                          <span class=\"metadata-value capitalize\">{{\n                            result.state\n                          }}</span>\n                        </div>\n                      }\n                      @if (result.fields && result.fields.length > 0) {\n                        <div class=\"metadata-row\">\n                          <span class=\"metadata-label\">Tags</span>\n                          <span class=\"metadata-divider\"></span>\n                          <div class=\"metadata-value flex flex-wrap gap-1\">\n                            @for (field of result.fields; track field) {\n                              <span class=\"field-badge\">{{ field }}</span>\n                            }\n                          </div>\n                        </div>\n                      }\n                    </div>\n                  }\n                </div>\n              </div>\n            </div>\n          }\n          @if (hasMoreResults()) {\n            <div class=\"p-2 text-center text-sm bg-gray-50\">\n              <p-button\n                [label]=\"\n                  '+' +\n                  (results().length - displayResults().length) +\n                  ' more results'\n                \"\n                class=\"p-button-text p-button-sm\"\n                (onClick)=\"showAllResults()\"\n              />\n            </div>\n          }\n        </div>\n      } @else if (hasQuery()) {\n        <div class=\"p-4 text-center text-gray-500\">\n          No results found for \"{{ searchQuery() }}\"\n        </div>\n      }\n    </div>\n  }\n</div>\n","import {\n  ChangeDetectionStrategy,\n  Component,\n  computed,\n  inject,\n  input,\n  output,\n} from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { TreeNode } from 'primeng/api';\nimport { ToolbarModule } from 'primeng/toolbar';\nimport { faAngleLeft, faAngleRight } from '@fortawesome/free-solid-svg-icons';\nimport { FontAwesomeModule } from '@fortawesome/angular-fontawesome';\n\nimport {\n  TreePanelComponent,\n  NodeNotFoundEvent,\n} from '../../../../../shared/components/tree-panel/tree-panel.component';\nimport { TreeSearchComponent } from '../../../../../shared/components/tree-search/tree-search.component';\nimport { TreeSearchResult } from '../../../../../shared/models';\nimport { AdminStateService } from '../../../services/admin-state.service';\nimport { AdminTreeContextExtractorService } from '../../../services/admin-tree-context-extractor.service';\n\n@Component({\n  selector: 'app-tree-navigation-panel',\n  standalone: true,\n  imports: [\n    CommonModule,\n    TreePanelComponent,\n    TreeSearchComponent,\n    ToolbarModule,\n    FontAwesomeModule,\n  ],\n  templateUrl: './tree-navigation-panel.component.html',\n  styleUrl: './tree-navigation-panel.component.scss',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class TreeNavigationPanelComponent {\n  private readonly adminState = inject(AdminStateService);\n  readonly contextExtractor = inject(AdminTreeContextExtractorService);\n\n  // Input properties\n  readonly treeCollapsed = input.required<() => boolean>();\n  readonly hierarchyTree = input.required<() => TreeNode[]>();\n  readonly isLoading = input.required<() => boolean>();\n  readonly searchingForNode = input.required<() => boolean>();\n  readonly searchingNodeKey = input.required<() => string | null>();\n  readonly selectedTreeNode = input.required<() => TreeNode | null>();\n  readonly scrollToNodeKey = input.required<() => string | null>();\n  readonly scrollToCenterNodeKey = input.required<() => string | null>();\n  readonly searchResults = input.required<() => TreeSearchResult[]>();\n  readonly isSearching = input.required<() => boolean>();\n\n  // Output events\n  readonly toggleTreePanel = output<void>();\n  readonly navigateToSelectedClient = output<void>();\n  readonly nodeExpand = output<TreeNode>();\n  readonly nodeCollapse = output<TreeNode>();\n  readonly nodeSelect = output<TreeNode>();\n  readonly nodeNotFoundInData = output<NodeNotFoundEvent>();\n  readonly searchQueryChange = output<string>();\n  readonly searchResultSelect = output<TreeSearchResult>();\n  readonly searchClear = output<void>();\n\n  // Font Awesome icons\n  readonly faAngleLeft = faAngleLeft;\n  readonly faAngleRight = faAngleRight;\n\n  /**\n   * Computed property for the toggle button text\n   */\n  readonly toggleButtonText = computed(() => {\n    return (\n      this.adminState.selectedClient()?.name ??\n      this.adminState.clientVendor()?.name ??\n      this.adminState.vendorDistributor()?.name ??\n      'COMPANY STRUCTURE'\n    );\n  });\n\n  /**\n   * Finds the currently selected node for the tree panel\n   */\n  findSelectedNode(): TreeNode | null {\n    return this.selectedTreeNode()();\n  }\n\n  // Event handlers - these simply emit to parent\n  onToggleTreePanel(): void {\n    this.toggleTreePanel.emit();\n  }\n\n  onNavigateToSelectedClient(): void {\n    this.navigateToSelectedClient.emit();\n  }\n\n  onNodeExpand(node: TreeNode): void {\n    this.nodeExpand.emit(node);\n  }\n\n  onNodeCollapse(node: TreeNode): void {\n    this.nodeCollapse.emit(node);\n  }\n\n  onNodeSelect(node: TreeNode): void {\n    this.nodeSelect.emit(node);\n  }\n\n  onNodeNotFoundInData(event: NodeNotFoundEvent): void {\n    this.nodeNotFoundInData.emit(event);\n  }\n\n  onSearchQueryChange(query: string): void {\n    this.searchQueryChange.emit(query);\n  }\n\n  onSearchResultSelect(result: TreeSearchResult): void {\n    this.searchResultSelect.emit(result);\n  }\n\n  onSearchClear(): void {\n    this.searchClear.emit();\n  }\n}\n","<div class=\"h-full flex relative\">\n  <!-- Tree Panel - conditionally shown -->\n  @if (!treeCollapsed()()) {\n    <div class=\"h-full flex-grow flex flex-col pr-8\">\n      <div class=\"flex items-center px-4 m-2\">\n        <app-tree-search\n          [results]=\"searchResults()()\"\n          [isSearching]=\"isSearching()()\"\n          (queryChange)=\"onSearchQueryChange($event)\"\n          (resultSelect)=\"onSearchResultSelect($event)\"\n          (searchClear)=\"onSearchClear()\"\n          class=\"w-full\"\n        ></app-tree-search>\n      </div>\n      <hr />\n      <!-- Tree container with flex and overflow handling -->\n      <div class=\"flex-grow flex overflow-hidden\">\n        <app-tree-panel\n          [nodes]=\"hierarchyTree()()\"\n          [loading]=\"isLoading()()\"\n          [searchingForNode]=\"searchingForNode()()\"\n          [searchingNodeKey]=\"searchingNodeKey()()\"\n          [selection]=\"findSelectedNode()\"\n          [scrollToNodeKey]=\"scrollToNodeKey()()\"\n          [scrollToCenterNodeKey]=\"scrollToCenterNodeKey()()\"\n          [contextExtractor]=\"contextExtractor\"\n          (nodeExpand)=\"onNodeExpand($event)\"\n          (nodeCollapse)=\"onNodeCollapse($event)\"\n          (nodeSelect)=\"onNodeSelect($event)\"\n          (nodeNotFoundInData)=\"onNodeNotFoundInData($event)\"\n          class=\"w-full overflow-auto\"\n        ></app-tree-panel>\n      </div>\n    </div>\n  }\n\n  <!-- Toggle Button - always visible -->\n  <div\n    class=\"vertical-toggle-panel flex h-full z-10 flex-col\"\n    [ngClass]=\"{ 'absolute right-0 inset-y-0': !treeCollapsed()() }\"\n  >\n    <!-- Home Icon Button - positioned at top -->\n    <button\n      class=\"group flex items-center justify-center p-1.5 md:p-2 bg-gray-50 hover:bg-gray-100 rounded transition cursor-pointer border border-gray-300 shadow-sm my-2 md:my-4\"\n      (click)=\"onNavigateToSelectedClient()\"\n      [attr.aria-label]=\"'Navigate to selected client'\"\n      title=\"Go to selected client\"\n    >\n      <span\n        class=\"pi pi-home text-gray-700 group-hover:text-primary transition text-xs md:text-sm\"\n      ></span>\n    </button>\n\n    <!-- Spacer to push the toggle button to center -->\n    <div class=\"flex-grow flex items-center justify-center\">\n      <!-- Tree Toggle Button - centered -->\n      <button\n        class=\"group flex flex-col items-center justify-center px-0.5 md:px-1 py-1.5 md:py-2 bg-gray-100 hover:bg-gray-200 rounded transition cursor-pointer border border-gray-300 shadow-sm\"\n        (click)=\"onToggleTreePanel()\"\n        [attr.aria-label]=\"\n          treeCollapsed()()\n            ? 'Expand company structure'\n            : 'Collapse company structure'\n        \"\n      >\n        <span\n          class=\"text-xs md:text-sm font-semibold text-gray-700 tracking-tight select-none vertical-toggle-button\"\n        >\n          {{ toggleButtonText() }}\n        </span>\n        <span class=\"mt-1 md:mt-2\">\n          <fa-icon\n            [icon]=\"treeCollapsed()() ? faAngleRight : faAngleLeft\"\n            class=\"text-gray-500 group-hover:text-primary transition text-sm md:text-base\"\n          ></fa-icon>\n        </span>\n      </button>\n    </div>\n  </div>\n</div>\n","import { CommonModule } from '@angular/common';\nimport {\n  ChangeDetectorRef,\n  Component,\n  DestroyRef,\n  effect,\n  inject,\n  OnInit,\n  signal,\n} from '@angular/core';\nimport { takeUntilDestroyed } from '@angular/core/rxjs-interop';\nimport { FormGroup, ReactiveFormsModule, Validators } from '@angular/forms';\nimport { ButtonModule } from 'primeng/button';\nimport { DynamicDialogRef, DynamicDialogConfig } from 'primeng/dynamicdialog';\n\nimport {\n  EntitiesService,\n  AssetResponse,\n  AssetMoveRequest,\n  ClientListItem,\n  AccountsService,\n} from '../../../../../api';\nimport {\n  hasProperty,\n  isDefined,\n  isNullOrUndefined,\n} from '../../../../../shared/utils';\nimport { BroadcastEventMessageService } from '../../../services/broadcast-event-messages.service';\nimport {\n  createAutocompleteField,\n  createDropdownField,\n  FormAction,\n  FormFieldConfig,\n} from '../../../../../shared/models';\nimport { DynamicFormComponent } from '../../../../../shared/components/forms/dynamic-form/dynamic-form.component';\nimport { Subject, debounceTime, switchMap, of, catchError } from 'rxjs';\nimport { UtilityService } from '../../../../../core/services/utility.service';\nimport { SEARCH_DEBOUNCE_TIME } from '../../../../../core/models';\n\n@Component({\n  selector: 'app-asset-move-form',\n  imports: [\n    CommonModule,\n    ReactiveFormsModule,\n    ButtonModule,\n    DynamicFormComponent,\n  ],\n  templateUrl: './asset-move-form.component.html',\n  styleUrl: './asset-move-form.component.scss',\n})\nexport class AssetMoveFormComponent implements OnInit {\n  private readonly entitiesService = inject(EntitiesService);\n  private readonly broadcastService = inject(BroadcastEventMessageService);\n  private readonly utilityService = inject(UtilityService);\n  private readonly accountsService = inject(AccountsService);\n  protected readonly destroyRef = inject(DestroyRef);\n  private readonly dialogRef = inject(DynamicDialogRef);\n  private readonly dialogConfig = inject(DynamicDialogConfig);\n\n  ownerId: string | null = null;\n  assetId: string | null = null;\n  protected formFields: FormFieldConfig[] = [];\n  clientsSearchResults = signal<ClientListItem[] | undefined>(undefined);\n  private readonly searchSubject = new Subject<string>();\n  private readonly cdr = inject(ChangeDetectorRef);\n  protected actions: FormAction[] = [\n    {\n      label: 'Cancel',\n      action: () => this.onCancel(),\n      severity: 'secondary',\n    },\n    {\n      label: 'Ok',\n      action: (formData: FormGroup) => {\n        const value = {\n          ...formData.value,\n          destinationClientId: formData.value['destinationClientId']?.id,\n        };\n        this.onWizardComplete(value as AssetMoveRequest);\n      },\n      severity: 'primary',\n      disabled: (form?: FormGroup) => {\n        if (isNullOrUndefined(form)) return true;\n        return form.pristine || form.invalid;\n      },\n    },\n  ];\n\n  constructor() {\n    effect(() => {\n      const searchResults = this.clientsSearchResults();\n      const field = this.formFields.find(\n        (f) => f.key === 'destinationClientId',\n      );\n      if (field?.props) {\n        // Update the suggestions\n        field.props = {\n          ...field.props,\n          suggestions: searchResults,\n        };\n      }\n      this.cdr.detectChanges();\n    });\n  }\n\n  ngOnInit(): void {\n    if (isDefined(this.dialogConfig.data)) {\n      this.ownerId = this.dialogConfig.data.ownerId ?? null;\n\n      // Get the asset ID from dialog data\n      this.assetId = this.dialogConfig.data.assetId ?? null;\n    }\n    this.formFields = [\n      createAutocompleteField(\n        'destinationClientId',\n        'Destination Client',\n        [],\n        this.clientsSearchResults(),\n        this.searchClient.bind(this),\n        {\n          layout: 'horizontal',\n          labelWidth: '1/3',\n          name: 'destinationClientId',\n          props: {\n            appendTo: 'body',\n            showClear: true,\n            multiple: false,\n            field: 'name',\n            completeOnFocus: false,\n            typeahead: true,\n            showEmptyMessage: true,\n            emptyMessage: 'No clients found',\n          },\n        },\n      ),\n      createDropdownField(\n        'includeDevice',\n        'Include Device',\n        [\n          {\n            label: 'Yes',\n            value: true,\n          },\n          {\n            label: 'No',\n            value: false,\n          },\n        ],\n        true,\n        {\n          layout: 'horizontal',\n          labelWidth: '1/3',\n          name: 'includeDevice',\n          props: {\n            appendTo: 'body',\n          },\n          validations: [\n            {\n              name: 'required',\n              validator: Validators.required,\n              message: 'Include Device is required',\n            },\n          ],\n        },\n      ),\n      createDropdownField(\n        'includeSimCard',\n        'Include Sim Card',\n        [\n          {\n            label: 'Yes',\n            value: true,\n          },\n          {\n            label: 'No',\n            value: false,\n          },\n        ],\n        true,\n        {\n          layout: 'horizontal',\n          labelWidth: '1/3',\n          name: 'includeSimCard',\n          props: {\n            appendTo: 'body',\n          },\n        },\n      ),\n    ];\n    this.setUpClientsSearch();\n  }\n\n  private setUpClientsSearch(): void {\n    this.searchSubject\n      .pipe(\n        debounceTime(SEARCH_DEBOUNCE_TIME),\n        takeUntilDestroyed(this.destroyRef),\n        switchMap((searchTerm) => {\n          const filters = {\n            state: { value: 'active', operator: '=' },\n            name: { value: `*${searchTerm}*`, operator: '=' },\n          };\n          const rqlFilter = this.utilityService.constructRqlFilter(filters);\n\n          return this.accountsService\n            .listClients(this.ownerId ?? '', 0, 10, 'name', rqlFilter)\n            .pipe(\n              catchError(() => {\n                return of({ items: [] });\n              }),\n            );\n        }),\n      )\n      .subscribe({\n        next: (data) => {\n          if (isDefined(data) && hasProperty(data, 'items')) {\n            this.clientsSearchResults.set(\n              isNullOrUndefined(data.items) ? [] : data.items,\n            );\n          }\n        },\n        error: () => {\n          this.clientsSearchResults.set([]);\n        },\n      });\n  }\n\n  searchClient(searchTerm: string) {\n    this.clientsSearchResults.set(undefined);\n    this.searchSubject.next(searchTerm);\n  }\n\n  onWizardComplete(context: AssetMoveRequest): void {\n    if (isNullOrUndefined(this.assetId)) {\n      return;\n    }\n\n    this.entitiesService\n      .moveAsset(this.assetId, context)\n      .pipe(takeUntilDestroyed(this.destroyRef))\n      .subscribe({\n        next: (response: AssetResponse) => {\n          this.broadcastService.broadcast('entity-updated', {\n            entityType: 'asset',\n            operation: 'update',\n            entityId: response.id,\n          });\n          this.dialogRef.close(response);\n        },\n        error: () => {},\n      });\n  }\n\n  // Update cancel to close dialog with no result\n  onCancel(): void {\n    this.dialogRef.close();\n  }\n}\n","<span class=\"muted text-justify\"\n  >Select the destination client into which you'd like to move this asset. The\n  asset will be copied to the new client and then deleted in this client.</span\n>\n<div class=\"p-fluid mt-4\">\n  <app-dynamic-form [fields]=\"formFields\" [actions]=\"actions\">\n  </app-dynamic-form>\n</div>\n","import { inject, Injectable } from '@angular/core';\nimport { EntityDetailsStateService } from './entity-details.state.service';\nimport { ConfirmationService } from 'primeng/api';\nimport {\n  BehaviorSubject,\n  catchError,\n  Observable,\n  Subject,\n  switchMap,\n  tap,\n  throwError,\n} from 'rxjs';\nimport { ActionIcon, StateOption } from '../../models';\nimport {\n  AccountsService,\n  AlertResponse,\n  AssetRatingProfileResponse,\n  AssetResponse,\n  AssetStateProfileResponse,\n  AssetTagResponse,\n  ClientUpdateRequest,\n  CustomFieldDefinition,\n  DeviceConfigProfileResponse,\n  DeviceProviderResponse,\n  DistributorUpdateRequest,\n  EntitiesService,\n  GeoLockProfileResponse,\n  IoTypeResponse,\n  OverspeedProfileResponse,\n  SimCardResponse,\n  SmsGatewayProviderResponse,\n  UserUpdateRequest,\n  VendorUpdateRequest,\n  ZoneResponse,\n} from '../../../../api';\nimport { isDefined, isNullOrUndefined } from '../../../../shared/utils';\nimport { BroadcastEventMessageService } from '../broadcast-event-messages.service';\nimport { AuthDataService } from '../../../../core/services/auth-data.service';\nimport { DynamicDialogRef, DialogService } from 'primeng/dynamicdialog';\nimport { AssetMoveFormComponent } from '../../components/assets/asset-move-form/asset-move-form.component';\n\ninterface OperationParams {\n  state?: string;\n  companyId?: string;\n  customFields?: Record<string, CustomFieldDefinition[]>;\n  ownerType?: 'client' | 'vendor' | 'distributor';\n  // Add other possible parameters here as needed\n}\n\n@Injectable({ providedIn: 'root' })\nexport class DetailsConfigurationService {\n  private readonly entityStateService = inject(EntityDetailsStateService);\n  private readonly entitiesService = inject(EntitiesService);\n  private readonly confirmationService = inject(ConfirmationService);\n  private readonly broadcastService = inject(BroadcastEventMessageService);\n  private readonly accountsService = inject(AccountsService);\n  private readonly authDataService = inject(AuthDataService);\n  private dialogRef: DynamicDialogRef | null = null;\n  private readonly dialogService = inject(DialogService);\n\n  // Track which popover is active\n  readonly activePopover = new BehaviorSubject<string | null>(null);\n\n  // Registry of entity action handlers\n  private readonly actionHandlers: Record<\n    string,\n    Record<\n      string,\n      (entityId: string, params: OperationParams) => Observable<unknown>\n    >\n  > = {};\n\n  // Registry of entity action providers\n  private readonly actionProviders: Record<\n    string,\n    (entityId: string) => ActionIcon[]\n  > = {};\n\n  // State options for different entity types\n  readonly stateOptions: Record<string, StateOption[]> = {};\n\n  constructor() {\n    // Register default handlers\n    this.initializeDefaultHandlers();\n  }\n\n  /**\n   * Initialize default operation handlers and state options\n   */\n  private initializeDefaultHandlers(): void {\n    this.initializeSimCardHandlers();\n    this.initializeAssetHandlers();\n    this.initializeAssetTagHandlers();\n    this.initializeDeviceConfigProfileHandlers();\n    this.initializeDeviceHandlers();\n    this.initializeGeofenceHandlers();\n    this.initializeIOTypeHandlers();\n    this.initializeDeviceProviderHandlers();\n    this.initializeSMSGatewayProviderHandlers();\n    this.initializeOverspeedProfileHandlers();\n    this.initializeUserRoleHandlers();\n    this.initializeUserHandlers();\n    this.initializeAlertHandlers();\n    this.initializeCustomFieldHandlers();\n    this.initializeGeofenceGroupsHandlers();\n    this.initializeAssetGroupsHandlers();\n    this.initializeCostCentreHandlers();\n    this.initializeAssetCategoriesHandlers();\n    this.initializeVendorClientHandlers();\n    this.initializeDistributorVendorHandlers();\n    this.initializeAssetRatingProfileHandlers();\n    this.initializeSuperAdminDistributorHandlers();\n    this.initializeAssetStateProfileHandlers();\n    this.initializeCompanyGroupHandlers();\n    this.initializeGeoLockProfileHandlers();\n  }\n\n  /**\n   * Gets action icons for the currently selected entity\n   */\n  getActionIcons(): ActionIcon[] {\n    const entityType = this.entityStateService.getSelectedItemType();\n    const entityId = this.entityStateService.getSelectedItemId();\n\n    if (!entityType || !entityId) {\n      return [];\n    }\n\n    // Common actions for all entities\n    const commonActions: ActionIcon[] = [];\n\n    // Entity-specific actions\n    const specificActions = this.getEntitySpecificActions(entityType, entityId);\n\n    return [...commonActions, ...specificActions];\n  }\n\n  /**\n   * Get entity-specific action icons\n   */\n  private getEntitySpecificActions(\n    entityType: string,\n    entityId: string,\n  ): ActionIcon[] {\n    const provider = this.actionProviders[entityType];\n    return isDefined(provider) ? provider(entityId) : [];\n  }\n\n  /**\n   * Create a state change action\n   */\n  createStateChangeAction(tooltip = 'Change State'): ActionIcon {\n    return {\n      id: 'changeState',\n      icon: 'pi pi-trash',\n      tooltip,\n      visible: true,\n      showPopover: true,\n      popoverType: 'state',\n      action: () => {\n        this.togglePopover('changeState');\n      },\n    };\n  }\n\n  /**\n   * Create a delete action\n   */\n  createDeleteAction(\n    entityType: string,\n    entityId: string,\n    tooltip = 'Delete',\n  ): ActionIcon {\n    return {\n      id: 'delete',\n      icon: 'pi pi-trash',\n      tooltip,\n      visible: true,\n      action: () => {\n        this.confirmDelete(entityType, entityId).subscribe();\n      },\n    };\n  }\n\n  /**\n   * Create a view in tree action\n   */\n  createViewInTreeAction(tooltip: string): ActionIcon {\n    return {\n      id: 'viewInTree',\n      icon: 'pi pi-sitemap',\n      tooltip,\n      visible: true,\n      action: () => {\n        const entity = this.entityStateService.selectedItem();\n        if (entity) {\n          this.broadcastService.broadcast('view-entity-in-tree', {\n            entity,\n          });\n        }\n      },\n    };\n  }\n\n  createAssetMoveAction(entityId: string): ActionIcon {\n    return {\n      id: 'move',\n      icon: 'assets/sprites/sprite.svg#share-from-square-regular',\n      tooltip: 'Move Asset',\n      visible: true,\n      isSvg: true,\n      action: () => {\n        this.confirmAssetMove(entityId).subscribe();\n      },\n    };\n  }\n\n  confirmAssetMove(assetId: string): Observable<unknown> {\n    this.dialogRef = this.dialogService.open(AssetMoveFormComponent, {\n      header: 'Move Asset',\n      contentStyle: { overflow: 'auto', ' margin-top': '1rem' },\n      baseZIndex: 10000,\n      position: 'top',\n      modal: true,\n      width: '500px',\n      data: {\n        assetId: assetId,\n        ownerId: this.authDataService.getUserProfile()?.owner.id,\n      },\n    });\n\n    return this.dialogRef.onClose;\n  }\n\n  /**\n   * Create a custom field delete action (uses confirmation with special parameters)\n   */\n  createCustomFieldDeleteAction(entityId: string): ActionIcon {\n    return {\n      id: 'delete',\n      icon: 'pi pi-trash',\n      tooltip: 'Delete Custom Field',\n      visible: true,\n      action: () => {\n        this.confirmCustomFieldDelete(entityId).subscribe();\n      },\n    };\n  }\n\n  /**\n   * Confirm and execute custom field deletion\n   */\n  confirmCustomFieldDelete(entityId: string): Observable<unknown> {\n    const resultSubject = new Subject<unknown>();\n\n    const message = `Are you sure you want to delete this custom field?`;\n\n    this.confirmationService.confirm({\n      message,\n      header: 'Confirm Delete',\n      icon: 'pi pi-exclamation-triangle',\n      accept: () => {\n        this.deleteCustomField(entityId).subscribe({\n          next: (result) => {\n            this.broadcastService.broadcast('entity-deleted', {\n              entityType: 'custom-field',\n              operation: 'delete',\n              entityId,\n              data: result,\n            });\n            resultSubject.next(result);\n          },\n          error: (error) => resultSubject.error(error),\n          complete: () => resultSubject.complete(),\n        });\n      },\n      reject: () => {\n        resultSubject.complete();\n      },\n      acceptButtonProps: { label: 'Delete' },\n      rejectButtonProps: { label: 'Cancel', severity: 'secondary' },\n    });\n\n    return resultSubject.asObservable();\n  }\n\n  /**\n   * Delete a custom field by removing it from the parent company's customFields array\n   */\n  private deleteCustomField(entityId: string): Observable<unknown> {\n    if (isNullOrUndefined(entityId)) {\n      return throwError(\n        () => new Error('Entity ID is required for custom field deletion.'),\n      );\n    }\n\n    const [companyId, entityType, fieldId] = entityId.split('.');\n\n    if (!companyId || !entityType || !fieldId) {\n      return throwError(\n        () =>\n          new Error(\n            'Invalid custom field entity ID format. Expected: companyId.entityType.fieldId',\n          ),\n      );\n    }\n\n    // First get the company to determine its type and current customFields\n    return this.accountsService.getCompany(companyId).pipe(\n      switchMap((company) => {\n        if (!company.customFields) {\n          return throwError(\n            () => new Error('Company has no custom fields to delete.'),\n          );\n        }\n\n        // Deep clone the customFields to avoid mutation\n        const customFields: Record<string, CustomFieldDefinition[]> =\n          JSON.parse(JSON.stringify(company.customFields));\n\n        // Get the current custom fields for this entity type\n        const currentFields = customFields[entityType];\n        if (!Array.isArray(currentFields) || currentFields.length === 0) {\n          return throwError(\n            () =>\n              new Error(\n                `No custom fields found for entity type: ${entityType}`,\n              ),\n          );\n        }\n\n        // Filter out the field to be deleted\n        const filteredFields = currentFields.filter(\n          (field) => field.id !== fieldId,\n        );\n\n        // Update the customFields object\n        customFields[entityType] = filteredFields;\n\n        // Determine the update method based on company type\n        switch (company.type) {\n          case 'client':\n            return this.accountsService.updateClientDetails(companyId, {\n              customFields,\n            });\n          case 'vendor':\n            return this.accountsService.updateVendorDetails(companyId, {\n              customFields,\n            });\n          case 'distributor':\n            return this.accountsService.updateDistributorDetails(companyId, {\n              customFields,\n            });\n          default:\n            return throwError(\n              () =>\n                new Error(\n                  `Unsupported company type ('${company.type}') for custom field deletion.`,\n                ),\n            );\n        }\n      }),\n    );\n  }\n\n  /**\n   * Toggle popover visibility\n   */\n  togglePopover(id: string | null): void {\n    if (this.activePopover.value === id) {\n      this.activePopover.next(null);\n    } else {\n      this.activePopover.next(id);\n    }\n  }\n\n  /**\n   * Update entity state\n   */\n  updateEntityState(\n    entityType: string,\n    entityId: string,\n    state: string,\n  ): Observable<unknown> {\n    // Close popover\n    this.activePopover.next(null);\n    const resultSubject = new Subject<unknown>();\n    const message = `\n    <div class=\"flex flex-col gap-2\">\n      <div>You are about to apply the following changes to 1 item:</div>\n      <div class=\"p-2\">\n        <div class=\"flex items-center\">\n          <span class=\"font-medium capitalize\">${state}</span>\n          <span class=\"mx-2\">→</span>\n          <span>Change state to <span class=\"capitalize\">'${state}'</span></span>\n        </div>\n      </div>\n      <div class=\"mt-2\">Are you sure you want to continue?</div>\n    </div>\n  `;\n\n    // Show confirmation\n    this.confirmationService.confirm({\n      message,\n      header: 'Bulk Update',\n      icon: 'pi pi-exclamation-triangle',\n      accept: () => {\n        this.executeOperation(entityType, 'updateState', entityId, {\n          state,\n        }).subscribe({\n          next: (result) => resultSubject.next(result),\n          error: (error) => resultSubject.error(error),\n          complete: () => resultSubject.complete(),\n        });\n      },\n      reject: () => {\n        resultSubject.complete();\n      },\n      acceptButtonProps: { label: 'Apply' },\n      rejectButtonProps: { label: 'Cancel', severity: 'secondary' },\n    });\n\n    return resultSubject.asObservable();\n  }\n\n  /**\n   * Confirm and execute entity deletion\n   */\n  confirmDelete(entityType: string, entityId: string): Observable<unknown> {\n    const resultSubject = new Subject<unknown>();\n\n    const message = `Are you sure you want to delete this ${entityType.replace(/-/g, ' ')}?`;\n\n    this.confirmationService.confirm({\n      message,\n      header: 'Confirm Delete',\n      icon: 'pi pi-exclamation-triangle',\n      accept: () => {\n        this.executeOperation(entityType, 'delete', entityId).subscribe({\n          next: (result) => resultSubject.next(result),\n          error: (error) => resultSubject.error(error),\n          complete: () => resultSubject.complete(),\n        });\n      },\n      reject: () => {\n        resultSubject.complete();\n      },\n      acceptButtonProps: { label: 'Delete' },\n      rejectButtonProps: { label: 'Cancel', severity: 'secondary' },\n    });\n\n    return resultSubject.asObservable();\n  }\n\n  /**\n   * Execute an operation on an entity\n   * @returns Observable of the operation result\n   */\n  executeOperation(\n    entityType: string,\n    operationType: string,\n    entityId: string,\n    params?: OperationParams,\n  ): Observable<unknown> {\n    if (isNullOrUndefined(this.actionHandlers[entityType]?.[operationType])) {\n      const errorMsg = `No handler found for operation ${operationType} on entity type ${entityType}`;\n      return throwError(() => new Error(errorMsg));\n    }\n\n    const handler = this.actionHandlers[entityType][operationType];\n    return handler(entityId, params || {}).pipe(\n      tap((res) => {\n        // Broadcast appropriate event based on operation type\n        const eventType =\n          operationType === 'delete' ? 'entity-deleted' : 'entity-updated';\n        this.broadcastService.broadcast(eventType, {\n          entityType,\n          operation: operationType,\n          entityId,\n          data: res,\n        });\n      }),\n      catchError((error) => {\n        return throwError(() => error);\n      }),\n    );\n  }\n\n  /**\n   * Get state options for an entity type\n   */\n  getStateOptions(entityType: string): StateOption[] {\n    return this.stateOptions[entityType] ?? [];\n  }\n\n  /**\n   * Register a new operation handler\n   */\n  registerOperationHandler(\n    entityType: string,\n    operationType: string,\n    handler: (entityId: string, params: OperationParams) => Observable<unknown>,\n  ): void {\n    if (isNullOrUndefined(this.actionHandlers[entityType])) {\n      this.actionHandlers[entityType] = {};\n    }\n\n    this.actionHandlers[entityType][operationType] = handler;\n  }\n\n  /**\n   * Register state options for an entity type\n   */\n  registerStateOptions(entityType: string, options: StateOption[]): void {\n    this.stateOptions[entityType] = options;\n  }\n\n  /**\n   * Register action provider for an entity type\n   */\n  registerActionProvider(\n    entityType: string,\n    provider: (entityId: string) => ActionIcon[],\n  ): void {\n    this.actionProviders[entityType] = provider;\n  }\n\n  /**\n   * Get SIM card state options directly from enum\n   */\n  private getSimCardStateOptions(): StateOption[] {\n    return [\n      { label: 'Active', value: SimCardResponse.StateEnum.Active },\n      { label: 'Inactive', value: SimCardResponse.StateEnum.Inactive },\n      { label: 'Suspended', value: SimCardResponse.StateEnum.Suspended },\n      { label: 'Deleted', value: SimCardResponse.StateEnum.Deleted },\n    ];\n  }\n\n  private initializeSimCardHandlers(): void {\n    // Register simcard handlers\n    this.registerOperationHandler(\n      'simcard',\n      'updateState',\n      (entityId, params) => {\n        if (isNullOrUndefined(params.state)) {\n          return throwError(() => new Error('State parameter is required'));\n        }\n\n        return this.entitiesService.updateSimCard(entityId, {\n          state: params.state as SimCardResponse.StateEnum,\n        });\n      },\n    );\n\n    // Register action provider\n    if (this.authDataService.hasPermission('simcards:create')) {\n      this.registerActionProvider('simcard', () => [\n        this.createStateChangeAction('Change SIM Card State'),\n      ]);\n    }\n\n    // Register state options\n    this.registerStateOptions('simcard', this.getSimCardStateOptions());\n  }\n\n  private initializeAssetHandlers(): void {\n    // Register asset handlers\n    this.registerOperationHandler(\n      'asset',\n      'updateState',\n      (entityId, params) => {\n        if (isNullOrUndefined(params.state)) {\n          return throwError(() => new Error('State parameter is required'));\n        }\n\n        return this.entitiesService.updateAsset(entityId, {\n          state: params.state as AssetResponse.StateEnum,\n        });\n      },\n    );\n\n    // Register action provider\n    if (this.authDataService.hasPermission('assets:create')) {\n      this.registerActionProvider('asset', (assetId) => [\n        this.createAssetMoveAction(assetId),\n        this.createStateChangeAction('Change Asset State'),\n      ]);\n    }\n\n    // Register state options\n    this.registerStateOptions('asset', [\n      { label: 'Active', value: AssetResponse.StateEnum.Active },\n      { label: 'Inactive', value: AssetResponse.StateEnum.Inactive },\n      { label: 'Suspended', value: AssetResponse.StateEnum.Suspended },\n      { label: 'Deleted', value: AssetResponse.StateEnum.Deleted },\n    ]);\n  }\n\n  private initializeAssetTagHandlers(): void {\n    // Register asset tags handlers\n    this.registerOperationHandler(\n      'asset-tag',\n      'updateState',\n      (entityId, params) => {\n        if (isNullOrUndefined(params.state)) {\n          return throwError(() => new Error('State parameter is required'));\n        }\n\n        return this.entitiesService.updateAssetTag(entityId, {\n          state: params.state as AssetTagResponse.StateEnum,\n        });\n      },\n    );\n\n    // Register action provider\n    this.registerActionProvider('asset-tag', () => [\n      this.createStateChangeAction('Change Asset Tags State'),\n    ]);\n\n    // Register state options\n    this.registerStateOptions('asset-tag', [\n      { label: 'Active', value: AssetTagResponse.StateEnum.Active },\n      { label: 'Deleted', value: AssetTagResponse.StateEnum.Deleted },\n    ]);\n  }\n\n  private initializeDeviceConfigProfileHandlers(): void {\n    // Register device config profile handlers\n    this.registerOperationHandler(\n      'device-config-profile',\n      'updateState',\n      (entityId, params) => {\n        if (isNullOrUndefined(params.state)) {\n          return throwError(() => new Error('State parameter is required'));\n        }\n\n        return this.entitiesService.updateDeviceConfigProfile(entityId, {\n          state: params.state as DeviceConfigProfileResponse.StateEnum,\n        });\n      },\n    );\n\n    // Register action provider\n    this.registerActionProvider('device-config-profile', () => [\n      this.createStateChangeAction('Change Device Config Profile State'),\n    ]);\n\n    // Register state options\n    this.registerStateOptions('device-config-profile', [\n      { label: 'Active', value: DeviceConfigProfileResponse.StateEnum.Active },\n      {\n        label: 'Deleted',\n        value: DeviceConfigProfileResponse.StateEnum.Deleted,\n      },\n    ]);\n  }\n\n  private initializeDeviceHandlers(): void {\n    // Register device handlers\n    this.registerOperationHandler(\n      'device',\n      'updateState',\n      (entityId, params) => {\n        if (isNullOrUndefined(params.state)) {\n          return throwError(() => new Error('State parameter is required'));\n        }\n\n        return this.entitiesService.updateDevice(entityId, {\n          state: params.state as AssetResponse.StateEnum,\n        });\n      },\n    );\n\n    // Register action provider\n    if (this.authDataService.hasPermission('devices:create')) {\n      this.registerActionProvider('device', () => [\n        this.createStateChangeAction('Change Device State'),\n      ]);\n    }\n\n    // Register state options\n    this.registerStateOptions('device', [\n      { label: 'Active', value: AssetResponse.StateEnum.Active },\n      { label: 'Inactive', value: AssetResponse.StateEnum.Inactive },\n      { label: 'Suspended', value: AssetResponse.StateEnum.Suspended },\n      { label: 'Deleted', value: AssetResponse.StateEnum.Deleted },\n    ]);\n  }\n\n  private initializeGeofenceHandlers(): void {\n    // Register geofence handlers\n    this.registerOperationHandler(\n      'geofence',\n      'updateState',\n      (entityId, params) => {\n        if (isNullOrUndefined(params.state)) {\n          return throwError(() => new Error('State parameter is required'));\n        }\n\n        return this.entitiesService.updateZone(entityId, {\n          state: params.state as ZoneResponse.StateEnum,\n        });\n      },\n    );\n\n    // Register action provider\n    if (this.authDataService.hasPermission('zones:create')) {\n      this.registerActionProvider('geofence', () => [\n        this.createStateChangeAction('Change Geofence State'),\n      ]);\n    }\n\n    // Register state options\n    this.registerStateOptions('geofence', [\n      { label: 'Active', value: AssetResponse.StateEnum.Active },\n      { label: 'Inactive', value: AssetResponse.StateEnum.Inactive },\n      { label: 'Deleted', value: AssetResponse.StateEnum.Deleted },\n    ]);\n  }\n\n  private initializeIOTypeHandlers(): void {\n    // Register IO type handlers\n    this.registerOperationHandler(\n      'io-type',\n      'updateState',\n      (entityId, params) => {\n        if (isNullOrUndefined(params.state)) {\n          return throwError(() => new Error('State parameter is required'));\n        }\n\n        return this.entitiesService.updateIoType(entityId, {\n          state: params.state as IoTypeResponse.StateEnum,\n        });\n      },\n    );\n\n    // Register action provider\n    this.registerActionProvider('io-type', () => [\n      this.createStateChangeAction('Change IO Type State'),\n    ]);\n\n    // Register state options\n    this.registerStateOptions('io-type', [\n      { label: 'Active', value: IoTypeResponse.StateEnum.Active },\n      { label: 'Deleted', value: IoTypeResponse.StateEnum.Deleted },\n    ]);\n  }\n\n  private initializeDeviceProviderHandlers(): void {\n    // Register device provider handlers\n    this.registerOperationHandler(\n      'device-provider',\n      'updateState',\n      (entityId, params) => {\n        if (isNullOrUndefined(params.state)) {\n          return throwError(() => new Error('State parameter is required'));\n        }\n\n        return this.entitiesService.updateDeviceProvider(entityId, {\n          state: params.state as DeviceProviderResponse.StateEnum,\n        });\n      },\n    );\n\n    // Register action provider\n    this.registerActionProvider('device-provider', () => [\n      this.createStateChangeAction('Change Device Provider State'),\n    ]);\n\n    // Register state options\n    this.registerStateOptions('device-provider', [\n      { label: 'Active', value: DeviceProviderResponse.StateEnum.Active },\n      { label: 'Deleted', value: DeviceProviderResponse.StateEnum.Deleted },\n      { label: 'Suspended', value: DeviceProviderResponse.StateEnum.Suspended },\n    ]);\n  }\n\n  private initializeSMSGatewayProviderHandlers(): void {\n    // Register SMS Gateway provider handlers\n    this.registerOperationHandler(\n      'sms-gateway-provider',\n      'updateState',\n      (entityId, params) => {\n        if (isNullOrUndefined(params.state)) {\n          return throwError(() => new Error('State parameter is required'));\n        }\n\n        return this.entitiesService.updateSmsGatewayProvider(entityId, {\n          state: params.state as SmsGatewayProviderResponse.StateEnum,\n        });\n      },\n    );\n\n    // Register action provider\n    if (this.authDataService.hasPermission('sms-gateway-providers:create')) {\n      this.registerActionProvider('sms-gateway-provider', () => [\n        this.createStateChangeAction('Change SMS Gateway Provider State'),\n      ]);\n    }\n\n    // Register state options\n    this.registerStateOptions('sms-gateway-provider', [\n      { label: 'Active', value: SmsGatewayProviderResponse.StateEnum.Active },\n      { label: 'Deleted', value: SmsGatewayProviderResponse.StateEnum.Deleted },\n      {\n        label: 'Suspended',\n        value: SmsGatewayProviderResponse.StateEnum.Suspended,\n      },\n    ]);\n  }\n\n  private initializeOverspeedProfileHandlers(): void {\n    // Register overspeed profile handlers\n    this.registerOperationHandler(\n      'overspeed-profile',\n      'updateState',\n      (entityId, params) => {\n        if (isNullOrUndefined(params.state)) {\n          return throwError(() => new Error('State parameter is required'));\n        }\n\n        return this.entitiesService.updateOverspeedProfile(entityId, {\n          state: params.state as OverspeedProfileResponse.StateEnum,\n        });\n      },\n    );\n    // Register action provider\n    this.registerActionProvider('overspeed-profile', () => [\n      this.createStateChangeAction('Change Overspeed Profile State'),\n    ]);\n    // Register state options\n    this.registerStateOptions('overspeed-profile', [\n      { label: 'Active', value: OverspeedProfileResponse.StateEnum.Active },\n      { label: 'Deleted', value: OverspeedProfileResponse.StateEnum.Deleted },\n    ]);\n  }\n\n  private initializeUserRoleHandlers(): void {\n    // Register user role handlers\n    this.registerOperationHandler('user-role', 'delete', (entityId) => {\n      return this.accountsService.deleteUserRole(entityId);\n    });\n    // Register action provider\n    if (this.authDataService.hasPermission('user-roles:create')) {\n      this.registerActionProvider('user-role', (entityId) => [\n        this.createDeleteAction('user-role', entityId, 'Delete User Role'),\n      ]);\n    }\n  }\n\n  private initializeUserHandlers(): void {\n    // Register user handlers\n    this.registerOperationHandler('user', 'updateState', (entityId, params) => {\n      if (isNullOrUndefined(params.state)) {\n        return throwError(() => new Error('State parameter is required'));\n      }\n\n      return this.accountsService.updateUser(entityId, {\n        state: params.state as UserUpdateRequest.StateEnum,\n      });\n    });\n    // Register action provider\n    if (this.authDataService.hasPermission('users:create')) {\n      this.registerActionProvider('user', () => [\n        this.createStateChangeAction('Change User State'),\n      ]);\n    }\n    // Register state options\n    this.registerStateOptions('user', [\n      { label: 'Active', value: UserUpdateRequest.StateEnum.Active },\n      { label: 'Inactive', value: UserUpdateRequest.StateEnum.Inactive },\n      { label: 'Suspended', value: UserUpdateRequest.StateEnum.Suspended },\n      { label: 'Deleted', value: UserUpdateRequest.StateEnum.Deleted },\n    ]);\n  }\n\n  private initializeAlertHandlers(): void {\n    // Register alert handlers\n    this.registerOperationHandler(\n      'alert',\n      'updateState',\n      (entityId, params) => {\n        if (isNullOrUndefined(params.state)) {\n          return throwError(() => new Error('State parameter is required'));\n        }\n\n        return this.entitiesService.updateAlert(entityId, {\n          state: params.state as AlertResponse.StateEnum,\n        });\n      },\n    );\n\n    // Register action provider\n    if (this.authDataService.hasPermission('alerts:create')) {\n      this.registerActionProvider('alert', () => [\n        this.createStateChangeAction('Change Alert State'),\n      ]);\n    }\n\n    // Register state options\n    this.registerStateOptions('alert', [\n      { label: 'Active', value: AlertResponse.StateEnum.Active },\n      { label: 'Deleted', value: AlertResponse.StateEnum.Deleted },\n    ]);\n  }\n\n  private initializeCustomFieldHandlers(): void {\n    // Register custom field handlers\n    this.registerOperationHandler(\n      'custom-field',\n      'delete',\n      (entityId, _params) => {\n        return this.deleteCustomField(entityId);\n      },\n    );\n\n    // Register action provider\n    this.registerActionProvider('custom-field', (entityId: string) => [\n      this.createCustomFieldDeleteAction(entityId),\n    ]);\n  }\n\n  private initializeGeofenceGroupsHandlers(): void {\n    // Register geofence group handlers\n    this.registerOperationHandler('geofence-group', 'delete', (entityId) => {\n      return this.entitiesService.deleteZoneGroup(entityId);\n    });\n\n    // Register action provider\n\n    this.registerActionProvider('geofence-group', (entityId) => [\n      this.createDeleteAction(\n        'geofence-group',\n        entityId,\n        'Delete Geofence Group',\n      ),\n    ]);\n  }\n\n  private initializeAssetGroupsHandlers(): void {\n    // Register asset group handlers\n    this.registerOperationHandler('asset-group', 'delete', (entityId) => {\n      return this.entitiesService.deleteAssetGroup(entityId);\n    });\n\n    // Register action provider\n    this.registerActionProvider('asset-group', (entityId) => [\n      this.createDeleteAction('asset-group', entityId, 'Delete Asset Group'),\n    ]);\n  }\n\n  private initializeCostCentreHandlers(): void {\n    // Register cost centre handlers\n    this.registerOperationHandler('cost-centre', 'delete', (entityId) => {\n      return this.entitiesService.deleteCostCentre(entityId);\n    });\n\n    // Register action provider\n    this.registerActionProvider('cost-centre', (entityId) => [\n      this.createDeleteAction('cost-centre', entityId, 'Delete Cost Centre'),\n    ]);\n  }\n\n  private initializeAssetCategoriesHandlers(): void {\n    // Register asset category handlers\n    this.registerOperationHandler('asset-category', 'delete', (entityId) => {\n      return this.entitiesService.deleteAssetCategory(entityId);\n    });\n\n    // Register action provider\n    this.registerActionProvider('asset-category', (entityId) => [\n      this.createDeleteAction(\n        'asset-category',\n        entityId,\n        'Delete Asset Category',\n      ),\n    ]);\n  }\n\n  private initializeVendorClientHandlers(): void {\n    // Register vendor/client handlers\n    this.registerOperationHandler(\n      'client',\n      'updateState',\n      (entityId, params) => {\n        if (isNullOrUndefined(params.state)) {\n          return throwError(() => new Error('State parameter is required'));\n        }\n\n        return this.accountsService.updateClient(entityId, {\n          state: params.state as ClientUpdateRequest.StateEnum,\n        });\n      },\n    );\n    // Register action provider\n    this.registerActionProvider('client', () => [\n      this.createViewInTreeAction('View this client in the Navigation Tree'),\n      this.createStateChangeAction('Change Client State'),\n    ]);\n\n    // Register state options\n    this.registerStateOptions('client', [\n      { label: 'Active', value: ClientUpdateRequest.StateEnum.Active },\n      { label: 'Inactive', value: ClientUpdateRequest.StateEnum.Inactive },\n      { label: 'Suspended', value: ClientUpdateRequest.StateEnum.Suspended },\n      { label: 'Deleted', value: ClientUpdateRequest.StateEnum.Deleted },\n    ]);\n  }\n\n  private initializeDistributorVendorHandlers(): void {\n    // Register distributor/vendor handlers\n    this.registerOperationHandler(\n      'vendor',\n      'updateState',\n      (entityId, params) => {\n        if (isNullOrUndefined(params.state)) {\n          return throwError(() => new Error('State parameter is required'));\n        }\n\n        return this.accountsService.updateVendor(entityId, {\n          state: params.state as VendorUpdateRequest.StateEnum,\n        });\n      },\n    );\n    // Register action provider\n    this.registerActionProvider('vendor', () => [\n      this.createViewInTreeAction('View this vendor in the Navigation Tree'),\n      this.createStateChangeAction('Change Vendor State'),\n    ]);\n\n    // Register state options\n    this.registerStateOptions('vendor', [\n      { label: 'Active', value: VendorUpdateRequest.StateEnum.Active },\n      { label: 'Inactive', value: VendorUpdateRequest.StateEnum.Inactive },\n      { label: 'Suspended', value: VendorUpdateRequest.StateEnum.Suspended },\n      { label: 'Deleted', value: VendorUpdateRequest.StateEnum.Deleted },\n    ]);\n  }\n\n  private initializeAssetRatingProfileHandlers(): void {\n    // Register asset rating profile handlers\n    this.registerOperationHandler(\n      'asset-rating-profile',\n      'updateState',\n      (entityId, params) => {\n        if (isNullOrUndefined(params.state)) {\n          return throwError(() => new Error('State parameter is required'));\n        }\n\n        return this.entitiesService.updateAssetRatingProfile(entityId, {\n          state: params.state as AssetRatingProfileResponse.StateEnum,\n        });\n      },\n    );\n\n    // Register action provider\n    this.registerActionProvider('asset-rating-profile', () => [\n      this.createStateChangeAction('Change Asset Rating Profile State'),\n    ]);\n\n    // Register state options\n    this.registerStateOptions('asset-rating-profile', [\n      { label: 'Active', value: AssetRatingProfileResponse.StateEnum.Active },\n      { label: 'Deleted', value: AssetRatingProfileResponse.StateEnum.Deleted },\n    ]);\n  }\n\n  private initializeSuperAdminDistributorHandlers(): void {\n    // Register super admin distributor handlers\n    this.registerOperationHandler(\n      'distributor',\n      'updateState',\n      (entityId, params) => {\n        if (isNullOrUndefined(params.state)) {\n          return throwError(() => new Error('State parameter is required'));\n        }\n\n        return this.accountsService.updateDistributor(entityId, {\n          state: params.state as DistributorUpdateRequest.StateEnum,\n        });\n      },\n    );\n    // Register action provider\n    this.registerActionProvider('distributor', () => [\n      this.createViewInTreeAction(\n        'View this distributor in the Navigation Tree',\n      ),\n      this.createStateChangeAction('Change Distributor State'),\n    ]);\n    // Register state options\n    this.registerStateOptions('distributor', [\n      { label: 'Active', value: DistributorUpdateRequest.StateEnum.Active },\n      { label: 'Inactive', value: DistributorUpdateRequest.StateEnum.Inactive },\n      {\n        label: 'Suspended',\n        value: DistributorUpdateRequest.StateEnum.Suspended,\n      },\n      { label: 'Deleted', value: DistributorUpdateRequest.StateEnum.Deleted },\n    ]);\n  }\n\n  private initializeAssetStateProfileHandlers(): void {\n    // Register asset state profile handlers\n    this.registerOperationHandler(\n      'asset-state-profile',\n      'updateState',\n      (entityId, params) => {\n        if (isNullOrUndefined(params.state)) {\n          return throwError(() => new Error('State parameter is required'));\n        }\n\n        return this.entitiesService.updateAssetStateProfile(entityId, {\n          state: params.state as AssetStateProfileResponse.StateEnum,\n        });\n      },\n    );\n\n    // Register action provider\n    this.registerActionProvider('asset-state-profile', () => [\n      this.createStateChangeAction('Change Asset State Profile State'),\n    ]);\n\n    // Register state options\n    this.registerStateOptions('asset-state-profile', [\n      { label: 'Active', value: AssetStateProfileResponse.StateEnum.Active },\n      { label: 'Deleted', value: AssetStateProfileResponse.StateEnum.Deleted },\n    ]);\n  }\n\n  private initializeCompanyGroupHandlers(): void {\n    // Register company group handlers\n    this.registerOperationHandler('company-group', 'delete', (entityId) => {\n      return this.accountsService.deleteCompanyGroup(entityId);\n    });\n\n    // Register action provider\n    this.registerActionProvider('company-group', (entityId) => [\n      this.createDeleteAction(\n        'company-group',\n        entityId,\n        'Delete Company Group',\n      ),\n    ]);\n  }\n\n  private initializeGeoLockProfileHandlers(): void {\n    // Register geo lock profile handlers\n    this.registerOperationHandler(\n      'geo-lock-profile',\n      'updateState',\n      (entityId, params) => {\n        if (isNullOrUndefined(params.state)) {\n          return throwError(() => new Error('State parameter is required'));\n        }\n\n        return this.entitiesService.updateGeoLockProfile(entityId, {\n          state: params.state as GeoLockProfileResponse.StateEnum,\n        });\n      },\n    );\n\n    // Register action provider\n    this.registerActionProvider('geo-lock-profile', () => [\n      this.createStateChangeAction('Change Geo Lock Profile State'),\n    ]);\n\n    // Register state options\n    this.registerStateOptions('geo-lock-profile', [\n      { label: 'Active', value: GeoLockProfileResponse.StateEnum.Active },\n      { label: 'Deleted', value: GeoLockProfileResponse.StateEnum.Deleted },\n    ]);\n  }\n}\n","import { Pipe, PipeTransform } from '@angular/core';\n\n@Pipe({\n  name: 'truncate',\n})\nexport class TruncatePipe implements PipeTransform {\n  transform(value: string, ...args: string[]): string {\n    if (!value) return value;\n    const limit = args[0] ? parseInt(args[0], 10) : 20;\n    const trail = args[1] ? args[1] : '...';\n    return value.length > limit ? value.substring(0, limit) + trail : value;\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport {\n  Component,\n  DestroyRef,\n  effect,\n  inject,\n  OnInit,\n  output,\n} from '@angular/core';\nimport { ActivatedRoute, RouterModule } from '@angular/router';\n\nimport { ButtonModule } from 'primeng/button';\nimport { CardModule } from 'primeng/card';\nimport { ProgressSpinnerModule } from 'primeng/progressspinner';\nimport { EntityDetailsService } from '../../services/entity/entity-details.service';\nimport { ToolbarModule } from 'primeng/toolbar';\nimport { DetailsConfigurationService } from '../../services/entity/entity-details-configuration.service';\nimport { TooltipModule } from 'primeng/tooltip';\nimport { ConfirmDialogModule } from 'primeng/confirmdialog';\nimport { ActionIcon, StateOption } from '../../models';\nimport { EntityDetailsStateService } from '../../services/entity/entity-details.state.service';\nimport { takeUntilDestroyed } from '@angular/core/rxjs-interop';\nimport { BroadcastEventMessageService } from '../../services/broadcast-event-messages.service';\nimport { DetailsComponentFactory } from '../../factories';\nimport { TruncatePipe } from '../../../../shared/pipes/truncate.pipe';\n\n@Component({\n  selector: 'app-details-panel',\n  imports: [\n    CommonModule,\n    ButtonModule,\n    ProgressSpinnerModule,\n    CardModule,\n    RouterModule,\n    ToolbarModule,\n    TooltipModule,\n    ConfirmDialogModule,\n    TruncatePipe,\n  ],\n\n  templateUrl: './details-panel.component.html',\n  styleUrl: './details-panel.component.scss',\n})\nexport class DetailsPanelComponent implements OnInit {\n  readonly detailsService = inject(EntityDetailsService);\n  readonly stateService = inject(EntityDetailsStateService);\n  private readonly detailsConfigService = inject(DetailsConfigurationService);\n  private readonly broadcastService = inject(BroadcastEventMessageService);\n  private readonly destroyRef = inject(DestroyRef);\n  private readonly activatedRoute = inject(ActivatedRoute);\n  private readonly detailsFactory = inject(DetailsComponentFactory);\n  readonly closePanel = output<void>();\n\n  actionIcons: ActionIcon[] = [];\n\n  // Get currently active popover\n  get activePopover(): string | null {\n    return this.detailsConfigService.activePopover.value;\n  }\n\n  // Get state options for current entity\n  get stateOptions(): StateOption[] {\n    const entityType = this.stateService.getSelectedItemType();\n    return entityType\n      ? this.detailsConfigService.getStateOptions(entityType)\n      : [];\n  }\n\n  // Get current state of the entity\n  get currentState(): string {\n    const entity = this.stateService.selectedItem();\n    return (entity?.['state'] as string) ?? '';\n  }\n\n  constructor() {\n    effect(() => {\n      this.stateService.selectedItem();\n      this.updateActionIcons();\n    });\n  }\n\n  ngOnInit() {\n    // Load initial icons\n    this.updateActionIcons();\n  }\n\n  updateActionIcons() {\n    this.actionIcons = this.detailsConfigService.getActionIcons();\n  }\n\n  executeAction(action: () => void) {\n    action();\n  }\n\n  togglePopover(id: string) {\n    this.detailsConfigService.togglePopover(id);\n  }\n\n  updateState(state: string) {\n    // Don't update if it's the current state already\n    if (state === this.currentState) {\n      this.togglePopover('changeState'); // Just close the popover\n      return;\n    }\n\n    const routeEntityType = this.detailsFactory.getEntityTypeFromRoute(\n      this.activatedRoute,\n      'type',\n    );\n\n    const entityType =\n      this.stateService.getSelectedItemType() ?? routeEntityType;\n    const entityId = this.stateService.getSelectedItemId();\n\n    if (entityType && entityId) {\n      this.detailsConfigService\n        .updateEntityState(entityType, entityId, state)\n        .pipe(takeUntilDestroyed(this.destroyRef))\n        .subscribe();\n    }\n  }\n\n  onClosePanel() {\n    this.detailsService.closeDetailsPanel();\n    this.closePanel.emit();\n  }\n}\n","<div class=\"h-full flex flex-col overflow-hidden\">\n  <p-toolbar styleClass=\"!rounded-none !border-x-0 h-header\">\n    <ng-template #start>\n      <span class=\"pi pi-box pr-2 !text-xl\" [attr.aria-label]=\"'box'\"></span>\n      <h2\n        class=\"font-semibold cursor-pointer\"\n        [pTooltip]=\"detailsService.getSelectedItemTitle()\"\n      >\n        {{ detailsService.getSelectedItemTitle() | truncate: '35' }}\n      </h2>\n    </ng-template>\n    <ng-template #center> </ng-template>\n    <ng-template #end>\n      <div class=\"flex row gap-2 items-center\">\n        <!-- Dynamic action icons -->\n        @for (icon of actionIcons; track icon.id) {\n          @if (icon.visible) {\n            <div class=\"relative\">\n              <!-- SVG icon -->\n              @if (icon.isSvg) {\n                <div\n                  pTooltip=\"{{ icon.tooltip }}\"\n                  tooltipPosition=\"left\"\n                  appendTo=\"body\"\n                >\n                  <svg\n                    class=\"custom-icon-svg w-[1.25rem] h-[1.25rem] cursor-pointer action hover\"\n                    [class.opacity-50]=\"icon.disabled\"\n                    [class.pointer-events-none]=\"icon.disabled\"\n                    [attr.aria-label]=\"icon.tooltip\"\n                    (click)=\"!icon.disabled && executeAction(icon.action)\"\n                    (keydown.enter)=\"\n                      !icon.disabled && executeAction(icon.action)\n                    \"\n                  >\n                    <use [attr.href]=\"icon.icon\"></use>\n                  </svg>\n                </div>\n              }\n              <!-- PrimeNG icon -->\n              @else {\n                <span\n                  class=\"{{ icon.icon }} action hover !text-xl cursor-pointer\"\n                  [class.opacity-50]=\"icon.disabled\"\n                  [attr.aria-label]=\"icon.tooltip\"\n                  pTooltip=\"{{ icon.tooltip }}\"\n                  tooltipPosition=\"left\"\n                  appendTo=\"body\"\n                  (click)=\"!icon.disabled && executeAction(icon.action)\"\n                  (keydown.enter)=\"!icon.disabled && executeAction(icon.action)\"\n                ></span>\n              }\n\n              <!-- State Popover -->\n              @if (\n                icon.showPopover &&\n                icon.popoverType === 'state' &&\n                icon.id === 'changeState'\n              ) {\n                @if (activePopover === 'changeState') {\n                  <div\n                    class=\"state-popover absolute right-0 top-8 bg-white shadow-lg rounded-md p-2 z-10 w-48\"\n                  >\n                    <h3 class=\"text-sm font-medium mb-2\">Change State To</h3>\n                    <ul class=\"space-y-1\">\n                      @for (state of stateOptions; track state.value) {\n                        <li>\n                          <button\n                            class=\"w-full text-left py-2 px-2 text-sm flex items-center hover:bg-emphasis cursor-pointer\"\n                            (click)=\"updateState(state.value)\"\n                          >\n                            <span class=\"flex-1\">{{ state.label }}</span>\n                            @if (state.value === currentState) {\n                              <span\n                                class=\"pi pi-check text-primary ml-2\"\n                              ></span>\n                            }\n                          </button>\n                        </li>\n                      }\n                    </ul>\n                    <div class=\"border-t mt-2 pt-2 flex justify-end\">\n                      <button\n                        class=\"text-xs\"\n                        (click)=\"togglePopover('changeState')\"\n                      >\n                        Cancel\n                      </button>\n                    </div>\n                  </div>\n                }\n              }\n            </div>\n          }\n        }\n        <!-- Close button (always present) -->\n        <button\n          pButton\n          icon=\"pi pi-times\"\n          class=\"p-button-rounded\"\n          (click)=\"onClosePanel()\"\n          aria-label=\"Close details panel\"\n        ></button>\n      </div>\n    </ng-template>\n  </p-toolbar>\n  <div class=\"flex-1 p-0 overflow-auto\">\n    @if (detailsService.isLoading() && !detailsService.isSoftRefreshing()) {\n      <div class=\"flex flex-col justify-content-center items-center h-full\">\n        <p-progressSpinner styleClass=\"w-8 h-8\"></p-progressSpinner>\n      </div>\n    }\n    @if (\n      (!detailsService.isLoading() || detailsService.isSoftRefreshing()) &&\n      detailsService.detailsComponent()\n    ) {\n      <ng-container\n        [ngComponentOutlet]=\"detailsService.detailsComponent()!\"\n        [ngComponentOutletInputs]=\"detailsService.detailsInputs()\"\n      >\n      </ng-container>\n    }\n  </div>\n</div>\n\n<!-- Confirmation dialog -->\n<p-confirmDialog>\n  <ng-template #message let-message>\n    <div class=\"py-2 px-1\">\n      <div [innerHTML]=\"message.message\"></div>\n    </div>\n  </ng-template>\n</p-confirmDialog>\n","import {\n  ChangeDetectionStrategy,\n  Component,\n  inject,\n  input,\n  output,\n} from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { RouterModule } from '@angular/router';\n\nimport { AdaptiveLayoutComponent } from '../../../../../shared/components/splitter/adaptive-layout/adaptive-layout.component';\nimport { DetailsPanelComponent } from '../../details-panel/details-panel.component';\nimport { EntityDetailsService } from '../../../services/entity/entity-details.service';\n\n@Component({\n  selector: 'app-admin-main-content',\n  standalone: true,\n  imports: [\n    CommonModule,\n    RouterModule,\n    AdaptiveLayoutComponent,\n    DetailsPanelComponent,\n  ],\n  templateUrl: './admin-main-content.component.html',\n  styleUrl: './admin-main-content.component.scss',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class AdminMainContentComponent {\n  readonly detailsService = inject(EntityDetailsService);\n\n  // Input properties\n  readonly nestedContentScrollable = input.required<() => boolean>();\n  readonly detailsPanelClass = input.required<() => string>();\n\n  // Output events\n  readonly routerOutletActivate = output<unknown>();\n\n  /**\n   * Handles router outlet activation\n   */\n  onRouterOutletActivate(component: unknown): void {\n    this.routerOutletActivate.emit(component);\n  }\n}\n","<app-adaptive-layout\n  [ngClass]=\"detailsPanelClass()()\"\n  [panels]=\"[\n    {\n      content: nestedContent,\n      scrollable: nestedContentScrollable()(),\n      minSize: detailsService.showPanel() ? 20 : 100,\n      maxSize: detailsService.showPanel() ? 80 : 100,\n    },\n    {\n      content: detailsContent,\n      scrollable: true,\n      minSize: detailsService.showPanel() ? 20 : 0,\n      maxSize: detailsService.showPanel() ? 80 : 0,\n    },\n  ]\"\n  [panelSizes]=\"detailsService.showPanel() ? [65, 35] : [100, 0]\"\n  [minSizes]=\"detailsService.showPanel() ? [20, 20] : [100, 0]\"\n  [defaultLayout]=\"'horizontal'\"\n  [responsive]=\"true\"\n  stateKey=\"details-layout\"\n  class=\"h-full w-full overflow-hidden\"\n>\n  <!-- Nested router outlet template - always present -->\n  <ng-template #nestedContent>\n    <div class=\"h-full w-full flex flex-col\">\n      <router-outlet\n        (activate)=\"onRouterOutletActivate($event)\"\n      ></router-outlet>\n    </div>\n  </ng-template>\n\n  <!-- Details panel template - conditionally rendered -->\n  <ng-template #detailsContent>\n    @if (detailsService.showPanel()) {\n      <app-details-panel\n        (close)=\"detailsService.closeDetailsPanel()\"\n        class=\"h-full flex flex-col\"\n      ></app-details-panel>\n    }\n  </ng-template>\n</app-adaptive-layout>\n","import { inject, Injectable, signal } from '@angular/core';\nimport { LocalStorageService } from '../../../shared/services/local-storage.service';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class AdminContainerStateService {\n  private readonly localStorage = inject(LocalStorageService);\n\n  // Container-specific state signals\n  readonly treeCollapsed = signal<boolean>(true);\n  readonly nestedContentScrollable = signal<boolean>(false);\n  readonly scrollToNodeKey = signal<string | null>(null);\n  readonly suppressScrollToClient = signal<boolean>(false);\n  readonly scrollToCenterNodeKey = signal<string | null>(null);\n\n  // UI state\n  readonly selectedItem = signal<unknown>(null);\n  readonly detailsLoading = signal<boolean>(false);\n  readonly hasMoreData = signal<boolean>(false);\n  readonly loadingMore = signal<boolean>(false);\n\n  constructor() {\n    // Initialize tree collapsed state from local storage\n    const storedTreeState = this.localStorage.getItem<boolean>(\n      'admin-tree-collapsed',\n    );\n    if (storedTreeState !== null) {\n      this.treeCollapsed.set(storedTreeState);\n    }\n  }\n\n  /**\n   * Toggles the tree panel state and persists to local storage\n   */\n  toggleTreePanel(): void {\n    const newState = !this.treeCollapsed();\n    this.treeCollapsed.set(newState);\n    this.localStorage.setItem('admin-tree-collapsed', newState);\n  }\n\n  /**\n   * Sets the nested content scrollable state\n   */\n  setNestedContentScrollable(scrollable: boolean): void {\n    if (this.nestedContentScrollable() !== scrollable) {\n      this.nestedContentScrollable.set(scrollable);\n    }\n  }\n\n  /**\n   * Scrolls the tree to center on the specified client node\n   * @param clientId The ID of the client to scroll to\n   */\n  scrollToClient(clientId: string): void {\n    // Check if scrolling is suppressed (e.g., during user interactions)\n    if (this.suppressScrollToClient()) {\n      return;\n    }\n\n    // Prevent duplicate scroll requests for the same client\n    if (this.scrollToNodeKey() === clientId) {\n      return;\n    }\n\n    // Clear any previous scroll request\n    this.scrollToNodeKey.set(null);\n\n    // Use a small delay to ensure the tree has updated\n    setTimeout(() => {\n      // Double-check suppression before actually scrolling\n      if (!this.suppressScrollToClient()) {\n        this.scrollToNodeKey.set(clientId);\n        // Clear the scroll signal after triggering\n        setTimeout(() => {\n          // Only clear if it's still the same client ID\n          if (this.scrollToNodeKey() === clientId) {\n            this.scrollToNodeKey.set(null);\n          }\n        }, 200);\n      }\n    }, 100);\n  }\n  /**\n   * Temporarily suppresses automatic scrolling to selected client during user interactions\n   * @param durationMs Duration in milliseconds to suppress scrolling (default: 2000ms)\n   */\n  temporarilySuppressScrollToClient(durationMs = 2000): void {\n    this.suppressScrollToClient.set(true);\n    if (durationMs === 0) {\n      return; // No need to set a timeout if duration is 0\n    }\n    // Clear suppression after the specified duration\n    setTimeout(() => this.suppressScrollToClient.set(false), durationMs);\n  }\n\n  /**\n   * Resets all state to initial values\n   */\n  reset(): void {\n    this.selectedItem.set(null);\n    this.detailsLoading.set(false);\n    this.hasMoreData.set(false);\n    this.loadingMore.set(false);\n    this.scrollToNodeKey.set(null);\n    this.suppressScrollToClient.set(false);\n  }\n}\n","import { DestroyRef, inject, Injectable } from '@angular/core';\nimport { ActivatedRoute, Data, NavigationEnd, Router } from '@angular/router';\nimport { filter, map } from 'rxjs';\nimport { takeUntilDestroyed } from '@angular/core/rxjs-interop';\n\nimport { AdminDataService } from './admin-data.service';\nimport { AdminContainerStateService } from './admin-container-state.service';\nimport { EntityDetailsService } from './entity/entity-details.service';\nimport { ClientDataService } from '../../clients/services/client-data.service';\nimport { ADMIN_TREE } from '../models/tree-node-data.interface';\nimport { isDefined, hasProperty, isString } from '../../../shared/utils';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class AdminRouteHandlerService {\n  private readonly router = inject(Router);\n  private readonly activatedRoute = inject(ActivatedRoute);\n  private readonly adminDataService = inject(AdminDataService);\n  private readonly containerState = inject(AdminContainerStateService);\n  private readonly detailsService = inject(EntityDetailsService);\n  private readonly clientDataService = inject(ClientDataService);\n  private readonly destroyRef = inject(DestroyRef);\n\n  /**\n   * Initializes route handling and sets up navigation event subscriptions\n   */\n  initializeRouteHandling(callbacks: {\n    selectNodeFromRouteOrState: () => void;\n    ensureSuperAdminNodeExpansion: () => void;\n    onChangeDetection: () => void;\n  }): void {\n    // Handle initial client navigation if needed\n    this.handleInitialClientNavigation();\n\n    // Load initial data and setup\n    this.loadInitialDataAndSetup(callbacks);\n\n    // Setup navigation event handling\n    this.setupNavigationEventHandling(callbacks);\n\n    // Setup scrollable state handling\n    this.setupScrollableStateHandling();\n  }\n\n  /**\n   * Handles initial client navigation if no route path is present\n   */\n  private handleInitialClientNavigation(): void {\n    const selectedClient = this.clientDataService.getSelectedClient();\n\n    const currentUrl = this.router.url;\n    const isAtBaseAdminRoute =\n      currentUrl === '/admin' || currentUrl.startsWith('/admin?');\n\n    if (\n      isDefined(selectedClient) &&\n      hasProperty(selectedClient, 'id') &&\n      isString(selectedClient.id) &&\n      isAtBaseAdminRoute\n    ) {\n      this.router\n        .navigate(['/admin', 'client', selectedClient.id])\n        .catch((err) =>\n          console.error('Failed to navigate to default client:', err),\n        );\n    }\n  }\n\n  /**\n   * Loads initial data and performs setup\n   */\n  private loadInitialDataAndSetup(callbacks: {\n    selectNodeFromRouteOrState: () => void;\n    ensureSuperAdminNodeExpansion: () => void;\n    onChangeDetection: () => void;\n  }): void {\n    // Get the client ID from the route if available\n    const { keyToSelect, typeToSelect } = this.getEntityInfoFromRoute();\n    const routeClientId =\n      typeToSelect === ADMIN_TREE.NODE_TYPES.CLIENT && isDefined(keyToSelect)\n        ? keyToSelect\n        : undefined;\n\n    this.adminDataService\n      .loadInitialData(routeClientId)\n      .then(() => {\n        // Ensure super admin node is expanded by default when using modern schema\n        callbacks.ensureSuperAdminNodeExpansion();\n\n        callbacks.selectNodeFromRouteOrState();\n        callbacks.onChangeDetection();\n      })\n      .catch(() => {\n        // Even on error, try to restore selection if possible (e.g. from route)\n        callbacks.selectNodeFromRouteOrState();\n        callbacks.onChangeDetection();\n      });\n  }\n\n  /**\n   * Sets up navigation event handling for details panel query params and route synchronization\n   */\n  private setupNavigationEventHandling(callbacks: {\n    selectNodeFromRouteOrState: () => void;\n  }): void {\n    this.router.events\n      .pipe(\n        filter(\n          (event): event is NavigationEnd => event instanceof NavigationEnd,\n        ),\n        takeUntilDestroyed(this.destroyRef),\n      )\n      .subscribe(() => {\n        this.handleDetailsQueryParams();\n        // After any navigation, try to sync tree selection with the route\n        callbacks.selectNodeFromRouteOrState();\n      });\n  }\n\n  /**\n   * Handles details panel query parameters\n   */\n  private handleDetailsQueryParams(): void {\n    const currentQueryParams = this.activatedRoute.snapshot.queryParams;\n    const hasDetailsParams =\n      isDefined(currentQueryParams['details']) &&\n      isDefined(currentQueryParams['type']);\n\n    if (this.detailsService.showPanel() && !hasDetailsParams) {\n      const item = this.detailsService.selectedItem();\n      if (\n        isDefined(item) &&\n        hasProperty(item, 'id') &&\n        hasProperty(item, 'type')\n      ) {\n        const baseUrl = this.router.url.split('?')[0];\n        this.router\n          .navigate([baseUrl], {\n            queryParams: { details: item['id'], type: item['type'] ?? '' },\n            queryParamsHandling: 'merge',\n            replaceUrl: true,\n          })\n          .catch(() => {});\n      }\n    }\n  }\n\n  /**\n   * Sets up handling for nested content scrollable state based on route data\n   */\n  private setupScrollableStateHandling(): void {\n    // Function to get scrollable state from route\n    const getScrollableState = (route: ActivatedRoute): boolean => {\n      let currentRoute = route;\n      while (currentRoute.firstChild) {\n        currentRoute = currentRoute.firstChild;\n      }\n      const routeData: Data = currentRoute.snapshot.data;\n      if (\n        isDefined(routeData) &&\n        typeof routeData['nestedContentScrollable'] === 'boolean'\n      ) {\n        return routeData['nestedContentScrollable'];\n      }\n      return false; // Default to false\n    };\n\n    // Set initial state\n    this.containerState.setNestedContentScrollable(\n      getScrollableState(this.activatedRoute),\n    );\n\n    // Subscribe to subsequent navigation events\n    this.router.events\n      .pipe(\n        filter(\n          (event): event is NavigationEnd => event instanceof NavigationEnd,\n        ),\n        map(() => getScrollableState(this.activatedRoute)), // Reuse the logic\n        takeUntilDestroyed(this.destroyRef),\n      )\n      .subscribe((scrollableValue: boolean) => {\n        this.containerState.setNestedContentScrollable(scrollableValue);\n      });\n  }\n\n  /**\n   * Gets entity information from route parameters\n   */\n  getEntityInfoFromRoute(): {\n    keyToSelect: string | null;\n    typeToSelect: string | null;\n  } {\n    // First try route traversal\n    const routeResult = this.extractFromRouteTree();\n    if (\n      isDefined(routeResult.keyToSelect) &&\n      isDefined(routeResult.typeToSelect)\n    ) {\n      return routeResult;\n    }\n\n    // Fallback: Parse the URL directly\n    return this.extractFromUrl();\n  }\n\n  /**\n   * Extracts entity info by traversing the route tree\n   */\n  private extractFromRouteTree(): {\n    keyToSelect: string | null;\n    typeToSelect: string | null;\n  } {\n    let currentRoute: ActivatedRoute | null = this.activatedRoute;\n    let keyToSelect: string | null = null;\n    let typeToSelect: string | null = null;\n\n    while (currentRoute !== null) {\n      const snapshot = currentRoute.snapshot;\n\n      if (snapshot.url.length > 0) {\n        const entityTypePath = snapshot.url[0]?.path;\n\n        if (entityTypePath) {\n          const entityId =\n            snapshot.params[`${entityTypePath}Id`] ??\n            snapshot.params['id'] ??\n            (snapshot.url.length > 1 ? snapshot.url[1]?.path : null);\n\n          typeToSelect = this.getEntityTypeFromPath(entityTypePath);\n\n          if (isDefined(entityId) && isDefined(typeToSelect)) {\n            keyToSelect = entityId;\n            break;\n          }\n        }\n      }\n\n      currentRoute = currentRoute.firstChild;\n    }\n\n    return { keyToSelect, typeToSelect };\n  }\n\n  /**\n   * Extracts entity info by parsing the URL directly\n   */\n  private extractFromUrl(): {\n    keyToSelect: string | null;\n    typeToSelect: string | null;\n  } {\n    let keyToSelect: string | null = null;\n    let typeToSelect: string | null = null;\n\n    const adminRoutePattern =\n      /\\/admin\\/(client|vendor|distributor|group)\\/([^/?]+)/;\n    const urlMatch = adminRoutePattern.exec(this.router.url);\n\n    if (urlMatch) {\n      const [, pathType, entityId] = urlMatch;\n      typeToSelect = this.getEntityTypeFromPath(pathType);\n      keyToSelect = entityId;\n    }\n\n    return { keyToSelect, typeToSelect };\n  }\n\n  /**\n   * Maps URL path to entity type\n   */\n  private getEntityTypeFromPath(path: string): string | null {\n    switch (path) {\n      case ADMIN_TREE.NODE_TYPES.CLIENT:\n      case 'client':\n        return ADMIN_TREE.NODE_TYPES.CLIENT;\n      case ADMIN_TREE.NODE_TYPES.VENDOR:\n      case 'vendor':\n        return ADMIN_TREE.NODE_TYPES.VENDOR;\n      case ADMIN_TREE.NODE_TYPES.DISTRIBUTOR:\n      case 'distributor':\n        return ADMIN_TREE.NODE_TYPES.DISTRIBUTOR;\n      case ADMIN_TREE.NODE_TYPES.GROUP:\n      case 'group':\n        return ADMIN_TREE.NODE_TYPES.GROUP;\n      default:\n        return null;\n    }\n  }\n}\n","import { effect, inject, Injectable } from '@angular/core';\nimport { TreeNode } from 'primeng/api';\n\nimport { AdminStateService } from './admin-state.service';\nimport { AdminDataService } from './admin-data.service';\nimport { AdminContainerStateService } from './admin-container-state.service';\nimport { AdminTreeManagementService } from './admin-tree-management.service';\nimport { ADMIN_TREE } from '../models/tree-node-data.interface';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class AdminScrollManagementService {\n  private readonly adminState = inject(AdminStateService);\n  private readonly adminDataService = inject(AdminDataService);\n  private readonly containerState = inject(AdminContainerStateService);\n  private readonly treeManagementService = inject(AdminTreeManagementService);\n\n  // Track if the service has been initialized\n  private initialized = false;\n\n  // Dependencies for scroll effects\n  private selectedTreeNode!: () => TreeNode | null;\n  private setSelectedTreeNode!: (node: TreeNode | null) => void;\n  private findNodeRecursively!: (\n    nodes: TreeNode[],\n    key: string,\n    type?: string,\n  ) => TreeNode | null;\n\n  /**\n   * Initializes the scroll management service with required dependencies\n   */\n  initialize(dependencies: {\n    selectedTreeNode: () => TreeNode | null;\n    setSelectedTreeNode: (node: TreeNode | null) => void;\n    findNodeRecursively: (\n      nodes: TreeNode[],\n      key: string,\n      type?: string,\n    ) => TreeNode | null;\n  }): void {\n    if (this.initialized) {\n      return;\n    }\n\n    this.selectedTreeNode = dependencies.selectedTreeNode;\n    this.setSelectedTreeNode = dependencies.setSelectedTreeNode;\n    this.findNodeRecursively = dependencies.findNodeRecursively;\n\n    this.setupScrollEffects();\n    this.initialized = true;\n  }\n\n  /**\n   * Sets up the reactive effects for scroll management\n   */\n  private setupScrollEffects(): void {\n    // Effect to sync tree selection and scroll when adminState.selectedClient() changes from other sources\n    effect(() => {\n      const currentSelectedClient = this.adminState.selectedClient();\n      const currentTreeNode = this.selectedTreeNode();\n      const suppressScroll = this.containerState.suppressScrollToClient();\n\n      // This effect syncs tree selection if adminState.selectedClient() changes from other sources.\n      // Route-driven selection is handled elsewhere.\n      if (\n        currentSelectedClient &&\n        (currentTreeNode?.key !== currentSelectedClient.id ||\n          currentTreeNode?.data?.type !== ADMIN_TREE.NODE_TYPES.CLIENT)\n      ) {\n        const treeNodes = this.treeManagementService.hierarchyTree();\n        if (treeNodes.length > 0) {\n          const nodeToSelect = this.findNodeRecursively(\n            treeNodes,\n            currentSelectedClient.id,\n            ADMIN_TREE.NODE_TYPES.CLIENT,\n          );\n\n          if (nodeToSelect) {\n            // Update tree node selection\n            this.setSelectedTreeNode(nodeToSelect);\n            // Update global state\n            this.adminDataService.selectNode(nodeToSelect);\n            // Only scroll if not suppressed (e.g., during load more operations)\n            if (!suppressScroll) {\n              this.scrollToClient(currentSelectedClient.id);\n            }\n          } else {\n            // Node not found in tree - DO NOT trigger scroll or async loading\n            console.warn(\n              `Client ${currentSelectedClient.id} not found in loaded tree data. Skipping scroll to prevent infinite loop.`,\n            );\n          }\n        }\n      }\n    });\n\n    // Effect to handle initial scroll when tree first loads with data\n    effect(() => {\n      const treeNodes = this.treeManagementService.hierarchyTree();\n      const selectedClient = this.adminState.selectedClient();\n      const currentTreeNode = this.selectedTreeNode();\n      const suppressScroll = this.containerState.suppressScrollToClient();\n\n      // Only trigger on initial load when:\n      // 1. Tree has nodes (just loaded)\n      // 2. We have a selected client\n      // 3. Tree node matches the selected client\n      // 4. Tree is not collapsed (visible)\n      // 5. Scrolling is not suppressed (e.g., during load more operations)\n      // 6. Client actually exists in the tree data\n      if (\n        treeNodes.length > 0 &&\n        selectedClient &&\n        currentTreeNode?.key === selectedClient.id &&\n        !this.containerState.treeCollapsed() &&\n        !suppressScroll\n      ) {\n        // Verify the client exists in the tree before scrolling\n        const nodeExists = this.findNodeRecursively(\n          treeNodes,\n          selectedClient.id,\n          ADMIN_TREE.NODE_TYPES.CLIENT,\n        );\n\n        if (nodeExists) {\n          // Small delay to ensure DOM is ready\n          setTimeout(() => {\n            // Double-check suppression before scrolling\n            if (!this.containerState.suppressScrollToClient()) {\n              this.scrollToClient(selectedClient.id);\n            }\n          }, 200);\n        }\n      }\n    });\n  }\n\n  /**\n   * Scrolls the tree to center on the specified client node\n   * @param clientId The ID of the client to scroll to\n   */\n  scrollToClient(clientId: string): void {\n    this.containerState.scrollToClient(clientId);\n  }\n\n  /**\n   * Scrolls to center a specific node (for expansion visibility)\n   * This is different from scrollToClient which is for selection\n   */\n  scrollToCenterNode(nodeKey: string): void {\n    // Set a different scroll target for centering vs selection\n    this.containerState.scrollToCenterNodeKey.set(nodeKey);\n\n    // Clear after a short delay to reset state\n    setTimeout(() => this.containerState.scrollToCenterNodeKey.set(null), 200);\n  }\n\n  /**\n   * Temporarily suppresses automatic scrolling to selected client during user interactions\n   * @param durationMs Duration in milliseconds to suppress scrolling (default: 2000ms)\n   */\n  temporarilySuppressScrollToClient(durationMs = 2000): void {\n    this.containerState.temporarilySuppressScrollToClient(durationMs);\n  }\n\n  /**\n   * Handles scroll behavior for search result navigation\n   * @param entityId The ID of the entity to scroll to\n   */\n  handleSearchResultScroll(entityId: string): void {\n    // Trigger tree scroll to center the selected entity\n    this.scrollToClient(entityId);\n  }\n\n  /**\n   * Handles scroll behavior for node selection with optional delay\n   * @param nodeKey The key of the node to scroll to\n   * @param delay Optional delay in milliseconds\n   */\n  handleNodeSelectionScroll(nodeKey: string, delay = 200): void {\n    if (!this.containerState.treeCollapsed()) {\n      setTimeout(() => {\n        this.scrollToClient(nodeKey);\n      }, delay);\n    }\n  }\n\n  /**\n   * Handles scroll behavior for client navigation with delay\n   * @param clientId The ID of the client to scroll to\n   * @param delay Delay in milliseconds (default: 300ms)\n   */\n  handleClientNavigationScroll(clientId: string, delay = 300): void {\n    setTimeout(() => {\n      this.scrollToClient(clientId);\n    }, delay);\n  }\n}\n","import { inject, Injectable } from '@angular/core';\nimport { AdminStateService } from './admin-state.service';\nimport { AdminTreeService } from './admin-tree.service';\nimport { BroadcastEventMessageService } from './broadcast-event-messages.service';\nimport { DEFAULT_LIST_SIZE, DEFAULT_SYSTEM_ID } from '../../../core/models';\nimport { isDefined, isNullOrUndefined } from '../../../shared/utils';\n\ninterface TreeRefreshMessage {\n  entityType: 'distributor' | 'vendor' | 'client';\n  operation: ClientRefreshOperation;\n  distributorId?: string;\n  vendorId?: string;\n  entityId?: string;\n  state?: string;\n  includeDeleted?: boolean;\n}\n\ninterface VendorFilterChangeMessage {\n  distributorId: string;\n  includeDeleted: boolean;\n}\n\ntype ClientRefreshOperation = 'create' | 'update' | 'delete';\ntype RefreshStrategy = 'full-replace' | 'smart-update' | 'paginated-refresh';\n\n/**\n * Service responsible for managing tree refresh operations for all entity types.\n * Centralizes the logic for keeping the admin tree in sync with entity changes.\n */\n@Injectable({\n  providedIn: 'root',\n})\nexport class AdminTreeRefreshService {\n  private readonly adminState = inject(AdminStateService);\n  private readonly adminTreeService = inject(AdminTreeService);\n  private readonly broadcastService = inject(BroadcastEventMessageService);\n\n  /**\n   * Initializes the service by setting up event listeners for tree refresh operations\n   */\n  initialize(): void {\n    // Listen for tree refresh requirements\n    this.broadcastService.on('tree-refresh-required').subscribe((message) => {\n      this.handleTreeRefreshRequired(message);\n    });\n\n    // Listen for vendor filter changes from grid\n    this.broadcastService.on('vendor-filter-changed').subscribe((message) => {\n      this.handleVendorFilterChange(message);\n    });\n  }\n\n  /**\n   * Handles refreshing vendor data in the tree based on state changes\n   * @param vendorId - The ID of the vendor that changed\n   * @param distributorId - The ID of the parent distributor\n   * @param includeDeleted - Whether to include deleted vendors (for filtering)\n   */\n  async refreshVendorData(\n    vendorId: string,\n    distributorId: string,\n    includeDeleted = false,\n  ): Promise<void> {\n    // Check if distributor is expanded\n    if (!this.adminState.isDistributorExpanded(distributorId)) {\n      return Promise.resolve();\n    }\n\n    try {\n      // Create filter based on whether to include deleted items\n      const filter = includeDeleted ? undefined : 'state!=deleted';\n\n      const vendors = await this.adminTreeService.listDistributorVendors(\n        distributorId,\n        filter,\n      );\n\n      this.adminState.setDistributorVendors(distributorId, vendors);\n    } catch (error) {\n      console.error('Error refreshing vendor data:', error);\n      throw error;\n    }\n  }\n\n  /**\n   * Handles refreshing distributor data under super-admin\n   */\n  async refreshDistributorData(): Promise<void> {\n    try {\n      // Check if super-admin is expanded\n      const superAdminExpandedNodes =\n        this.adminState.expandedNodes()['super-admin'];\n      const superAdminExpanded =\n        superAdminExpandedNodes?.has?.('super-admin-root');\n\n      if (superAdminExpanded) {\n        const distributors =\n          await this.adminTreeService.listDistributors(DEFAULT_SYSTEM_ID);\n        this.adminState.setDistributors(distributors);\n      }\n    } catch (error) {\n      console.error('Error refreshing distributor data:', error);\n      throw error;\n    }\n  }\n\n  /**\n   * Handles refreshing client data for a specific vendor\n   * @param vendorId - The ID of the vendor whose clients should be refreshed\n   * @param distributorId - The ID of the parent distributor\n   * @param operation - The operation that triggered the refresh (affects strategy)\n   */\n  async refreshClientData(\n    vendorId: string,\n    distributorId: string,\n    operation: ClientRefreshOperation = 'update',\n  ): Promise<void> {\n    try {\n      // Check if vendor is expanded using distributor-scoped expansion state\n      const isVendorExpanded = this.adminState.isDistributorNodeExpanded(\n        distributorId,\n        vendorId,\n      );\n\n      if (!isVendorExpanded) {\n        return;\n      }\n\n      // Get current client state to determine strategy\n      // Note: AdminStateService methods may not exist yet, so we use optional chaining\n      const currentClients = this.adminState.getDistributorVendorClients?.(\n        distributorId,\n        vendorId,\n      );\n      // Future enhancement: Add pagination info when AdminStateService has these methods\n      // const currentPaginationInfo = this.adminState.getDistributorVendorClientsPaginationInfo?.(distributorId, vendorId);\n\n      // Determine refresh strategy based on operation and current state\n      const strategy = this.determineClientRefreshStrategy(\n        operation,\n        currentClients,\n        null,\n      );\n\n      switch (strategy) {\n        case 'full-replace':\n          await this.fullClientReplace(vendorId, distributorId);\n          break;\n\n        case 'smart-update':\n          await this.smartClientUpdate(vendorId, distributorId, operation);\n          break;\n\n        case 'paginated-refresh':\n          await this.paginatedClientRefresh(vendorId, distributorId, null);\n          break;\n\n        default:\n          console.warn('Unknown refresh strategy:', strategy);\n          // Fall back to full replace\n          await this.fullClientReplace(vendorId, distributorId);\n      }\n    } catch (error) {\n      console.error('Error refreshing client data:', error);\n      throw error;\n    }\n  }\n\n  /**\n   * Determines the best refresh strategy based on current state and operation\n   */\n  private determineClientRefreshStrategy(\n    operation: ClientRefreshOperation,\n    currentClients: unknown,\n    _paginationInfo: unknown,\n  ): RefreshStrategy {\n    // If no clients loaded yet, do a full replace\n    if (\n      currentClients === undefined ||\n      currentClients === null ||\n      (Array.isArray(currentClients) && currentClients.length === 0)\n    ) {\n      return 'full-replace';\n    }\n\n    // Different strategies based on operation type\n    switch (operation) {\n      case 'delete':\n        // For deletions, always do full replace to ensure deleted items are removed\n        return 'full-replace';\n\n      case 'create':\n        // For creates, we could use smart update but full replace is safer for now\n        // In the future, this could be 'smart-update' to append new items\n        return 'full-replace';\n\n      case 'update':\n        // For updates, smart update could work to just refresh existing items\n        // But for now, full replace ensures we get the latest state\n        return 'smart-update';\n\n      default:\n        return 'full-replace';\n    }\n  }\n\n  /**\n   * Full replace strategy - replaces all client data with fresh first page\n   */\n  private async fullClientReplace(\n    vendorId: string,\n    distributorId: string,\n  ): Promise<void> {\n    const result = await this.adminTreeService.listVendorClients(vendorId);\n\n    this.adminState.addDistributorVendorClients(\n      distributorId,\n      vendorId,\n      result.clients,\n      {\n        offset: 0,\n        limit: DEFAULT_LIST_SIZE,\n        total: result.total,\n        hasMore: result.hasMore,\n      },\n      false, // Replace existing clients\n    );\n  }\n\n  /**\n   * Smart update strategy - handles specific operations without losing pagination\n   */\n  private async smartClientUpdate(\n    vendorId: string,\n    distributorId: string,\n    _operation: ClientRefreshOperation,\n  ): Promise<void> {\n    // For now, fall back to full replace\n    // This can be enhanced later with more sophisticated logic\n    await this.fullClientReplace(vendorId, distributorId);\n  }\n\n  /**\n   * Paginated refresh strategy - refreshes all currently loaded pages\n   */\n  private async paginatedClientRefresh(\n    vendorId: string,\n    distributorId: string,\n    _currentPaginationInfo?: unknown,\n  ): Promise<void> {\n    // For now, fall back to full replace\n    // This can be enhanced later when pagination info is available\n    await this.fullClientReplace(vendorId, distributorId);\n  }\n\n  /**\n   * Handles tree refresh requirements after entity operations\n   */\n  private handleTreeRefreshRequired(message: unknown): void {\n    // Basic shape guard\n    if (\n      !isDefined(message) ||\n      message === null ||\n      typeof message !== 'object' ||\n      !('entityType' in message) ||\n      !('operation' in message)\n    ) {\n      return;\n    }\n\n    const m = message as TreeRefreshMessage;\n\n    switch (m.entityType) {\n      case 'vendor':\n        this.handleVendorRefresh(m);\n        break;\n\n      case 'distributor':\n        this.handleDistributorRefresh(m);\n        break;\n\n      case 'client':\n        this.handleClientRefresh(m);\n        break;\n\n      default:\n        console.warn('Unhandled entity type for tree refresh:', m.entityType);\n    }\n  }\n\n  /**\n   * Handles vendor-specific refresh logic\n   */\n  private handleVendorRefresh(message: TreeRefreshMessage): void {\n    // Prefer distributorId from message if provided\n    const distributorId =\n      message.distributorId ?? this.adminState.vendorDistributor()?.id;\n\n    if (isDefined(distributorId)) {\n      // For updates, check if we need to include deleted vendors based on current filter state\n      const includeDeleted = message.includeDeleted ?? false;\n\n      this.refreshVendorData(\n        message.entityId ?? '',\n        distributorId,\n        includeDeleted,\n      ).catch((error: unknown) => {\n        console.error('Error handling vendor refresh:', error);\n      });\n    }\n  }\n\n  /**\n   * Handles distributor-specific refresh logic\n   */\n  private handleDistributorRefresh(_message: TreeRefreshMessage): void {\n    this.refreshDistributorData().catch((error: unknown) => {\n      console.error('Error handling distributor refresh:', error);\n    });\n  }\n\n  /**\n   * Handles client-specific refresh logic\n   */\n  private handleClientRefresh(message: TreeRefreshMessage): void {\n    let vendorId = message.vendorId;\n    let distributorId: string | undefined | null = message.distributorId;\n\n    // Try to get vendor and distributor context if not provided\n    if (isNullOrUndefined(vendorId) || isNullOrUndefined(distributorId)) {\n      const context = this.extractClientContext(message);\n      vendorId = vendorId ?? context.vendorId;\n      distributorId = distributorId ?? context.distributorId;\n    }\n\n    // Fallback to current distributor context if still not found\n    distributorId = distributorId ?? this.adminState.getCurrentDistributorId();\n\n    if (isNullOrUndefined(vendorId) || isNullOrUndefined(distributorId)) {\n      console.warn(\n        'Client refresh requested but no vendorId or distributorId available.',\n      );\n      return;\n    }\n\n    // Pass the operation type to help determine refresh strategy\n    this.refreshClientData(vendorId, distributorId, message.operation).catch(\n      (error: unknown) => {\n        console.error('Error handling client refresh:', error);\n      },\n    );\n  }\n\n  /**\n   * Extracts vendor and distributor context for client operations\n   */\n  private extractClientContext(_message: TreeRefreshMessage): {\n    vendorId?: string;\n    distributorId?: string;\n  } {\n    // This method can be enhanced to extract context from current selection\n    // For now, return empty object to use fallback logic\n    return {};\n  }\n\n  /**\n   * Handles vendor filter changes from the grid\n   */\n  private handleVendorFilterChange(message: unknown): void {\n    if (\n      !isDefined(message) ||\n      message === null ||\n      typeof message !== 'object' ||\n      !('distributorId' in message) ||\n      !('includeDeleted' in message)\n    ) {\n      return;\n    }\n\n    const m = message as VendorFilterChangeMessage;\n\n    // Refresh vendor data with the new filter setting\n    this.refreshVendorData('', m.distributorId, m.includeDeleted).catch(\n      (error: unknown) => {\n        console.error('Error handling vendor filter change:', error);\n      },\n    );\n  }\n\n  /**\n   * Manually triggers a vendor refresh for a specific distributor\n   * @param distributorId - The distributor ID\n   * @param includeDeleted - Whether to include deleted vendors\n   */\n  async triggerVendorRefresh(\n    distributorId: string,\n    includeDeleted = false,\n  ): Promise<void> {\n    return this.refreshVendorData('', distributorId, includeDeleted);\n  }\n\n  /**\n   * Manually triggers a client refresh for a specific vendor\n   * @param vendorId - The vendor ID\n   * @param distributorId - The distributor ID\n   * @param operation - The type of operation that triggered this refresh\n   */\n  async triggerClientRefresh(\n    vendorId: string,\n    distributorId: string,\n    operation: ClientRefreshOperation = 'update',\n  ): Promise<void> {\n    return this.refreshClientData(vendorId, distributorId, operation);\n  }\n}\n","import {\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  computed,\n  effect,\n  inject,\n  OnDestroy,\n  OnInit,\n  signal,\n  Type,\n} from '@angular/core';\nimport { Router } from '@angular/router';\nimport { CommonModule } from '@angular/common';\n\nimport { MessageService, TreeNode } from 'primeng/api';\nimport { faAngleLeft, faAngleRight } from '@fortawesome/free-solid-svg-icons';\n\nimport { AdaptiveLayoutComponent } from '../../../../shared/components/splitter/adaptive-layout/adaptive-layout.component';\nimport { NodeNotFoundEvent } from '../../../../shared/components/tree-panel/tree-panel.component';\nimport { AdminDataService } from '../../services/admin-data.service';\nimport { AdminStateService } from '../../services/admin-state.service';\nimport { ADMIN_TREE } from '../../models/tree-node-data.interface';\nimport { EventSource } from '../../models/event-source.enum';\nimport { ClientResponse, VendorResponse } from '../../../../api';\nimport { isDefined, isNullOrUndefined } from '../../../../shared/utils';\nimport { ClientDataService } from '../../../clients/services/client-data.service';\nimport { ProgressSpinnerModule } from 'primeng/progressspinner';\nimport { EntityDetailsService } from '../../services/entity/entity-details.service';\nimport { AdminSearchService } from '../../services/admin-search.service';\nimport { TreeSearchResult } from '../../../../shared/models';\nimport { AuthDataService } from '../../../../core/services/auth-data.service';\nimport { ApiSchemaService } from '../../../../core/services/api-schema.service';\nimport { AdminTreeContextExtractorService } from '../../services/admin-tree-context-extractor.service';\nimport { AdminTreeManagementService } from '../../services/admin-tree-management.service';\nimport { AdminNavigationService } from '../../services/admin-navigation.service';\nimport { AdminTreeEventHandlerService } from '../../services/admin-tree-event-handler.service';\nimport { TreeNavigationPanelComponent } from './tree-navigation-panel/tree-navigation-panel.component';\nimport { AdminMainContentComponent } from './admin-main-content/admin-main-content.component';\nimport { AdminContainerStateService } from '../../services/admin-container-state.service';\nimport { AdminRouteHandlerService } from '../../services/admin-route-handler.service';\nimport { AdminScrollManagementService } from '../../services/admin-scroll-management.service';\nimport { AdminTreeService } from '../../services/admin-tree.service';\nimport { AdminTreeRefreshService } from '../../services/admin-tree-refresh.service';\n\n@Component({\n  selector: 'app-admin-container',\n  imports: [\n    AdaptiveLayoutComponent,\n    CommonModule,\n    ProgressSpinnerModule,\n    TreeNavigationPanelComponent,\n    AdminMainContentComponent,\n  ],\n  templateUrl: './admin-container.component.html',\n  styleUrl: './admin-container.component.scss',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\n\n/*\n * Admin Container Layout\n *\n * This component uses a PrimeNG p-splitter for resizable panels.\n * The layout adapts between showing/hiding detail panels based on state.\n */\nexport class AdminContainerComponent implements OnInit, OnDestroy {\n  public readonly adminState = inject(AdminStateService);\n  private readonly adminDataService = inject(AdminDataService);\n  private readonly messageService = inject(MessageService);\n  private readonly clientDataService = inject(ClientDataService);\n  private readonly cdr = inject(ChangeDetectorRef);\n  readonly detailsService = inject(EntityDetailsService);\n  private readonly adminSearchService = inject(AdminSearchService);\n  private readonly adminTreeService = inject(AdminTreeService);\n  private readonly authDataService = inject(AuthDataService);\n  private readonly apiSchemaService = inject(ApiSchemaService);\n  readonly contextExtractor = inject(AdminTreeContextExtractorService);\n  private readonly treeManagementService = inject(AdminTreeManagementService);\n  private readonly navigationService = inject(AdminNavigationService);\n  private readonly treeEventHandler = inject(AdminTreeEventHandlerService);\n  private readonly containerState = inject(AdminContainerStateService);\n  private readonly routeHandler = inject(AdminRouteHandlerService);\n  private readonly scrollManagement = inject(AdminScrollManagementService);\n  private readonly treeRefreshService = inject(AdminTreeRefreshService);\n  private readonly router = inject(Router);\n\n  readonly isLoading = this.adminState.isLoading;\n  readonly selectedItem = this.containerState.selectedItem;\n  readonly detailsComponent = signal<Type<unknown> | null>(null);\n  readonly detailsInputs = signal<Record<string, unknown>>({});\n  readonly hasMoreData = this.containerState.hasMoreData;\n  readonly loadingMore = this.containerState.loadingMore;\n  selectedTreeNode = this.treeEventHandler.selectedTreeNode;\n  readonly scrollToNodeKey = this.containerState.scrollToNodeKey;\n  readonly scrollToCenterNodeKey = this.containerState.scrollToCenterNodeKey;\n\n  // Node search loading state\n  readonly searchingForNode = this.treeEventHandler.searchingForNode;\n  readonly searchingNodeKey = this.treeEventHandler.searchingNodeKey;\n\n  // Search-related computed values\n  readonly searchResults = this.adminSearchService.results;\n  readonly isSearching = this.adminSearchService.isSearching;\n  readonly hasSearchQuery = this.adminSearchService.hasQuery;\n\n  // Computed loading state for tree (combines general loading + node search loading)\n  readonly treeLoading = computed(\n    () => this.isLoading() || this.searchingForNode(),\n  );\n\n  /**\n   * Computed property that builds the hierarchy tree including \"Load More\" nodes.\n   * Now enhanced with search highlighting and expansion.\n   */\n  readonly hierarchyTree = this.treeManagementService.hierarchyTree;\n\n  activeGridComponent: unknown;\n  readonly detailsLoading = signal<boolean>(false);\n\n  /**\n   * Returns the CSS class for the main container based on details panel state\n   */\n  readonly hostClass = computed(() => {\n    return this.detailsService.showPanel() ? 'has-details' : '';\n  });\n\n  /**\n   * Returns the CSS class for the main splitter\n   */\n  readonly mainSplitterClass = computed(() => {\n    return 'main-layout';\n  });\n\n  /**\n   * Returns the CSS class for the details panel based on its visibility\n   */\n  readonly detailsPanelClass = computed(() => {\n    return this.detailsService.showPanel()\n      ? 'details-visible-state'\n      : 'details-hidden-state';\n  });\n\n  /**\n   * Signal to determine if the nested router outlet content should be scrollable.\n   * Defaults to false (for grid pages).\n   */\n  protected nestedContentScrollable =\n    this.containerState.nestedContentScrollable;\n\n  faAngleLeft = faAngleLeft;\n  faAngleRight = faAngleRight;\n\n  // Collapsible tree state\n  readonly treeCollapsed = this.containerState.treeCollapsed;\n\n  // Flag to prevent infinite loops when programmatically changing selected client\n  private isNavigatingToClient = false;\n  private initialRouteProcessed = false;\n  // Flag to track when component is fully initialized and ready for runtime client changes\n  private componentFullyInitialized = false;\n\n  // Only show tree if user has access to more than one client\n  readonly showTreePanel = computed(() => {\n    // Check if there are multiple clients in any vendor across all distributors\n    const distributorVendorClients = this.adminState.vendorClients();\n\n    // Iterate through all distributors\n    for (const [_distributorId, vendorClients] of Object.entries(\n      distributorVendorClients,\n    )) {\n      // Check if any vendor in this distributor has multiple clients\n      for (const [_vendorId, clients] of Object.entries(vendorClients)) {\n        if (Array.isArray(clients) && clients.length > 1) {\n          return true;\n        }\n      }\n    }\n\n    // Fallback: check if there are multiple distributors with clients\n    const distributorCount = Object.keys(distributorVendorClients).length;\n    if (distributorCount > 1) {\n      // Multiple distributors means multiple client contexts\n      return true;\n    }\n\n    return false;\n  });\n\n  toggleTreePanel() {\n    this.containerState.toggleTreePanel();\n  }\n\n  constructor() {\n    // Initialize scroll management service with required dependencies\n    this.scrollManagement.initialize({\n      selectedTreeNode: () => this.selectedTreeNode(),\n      setSelectedTreeNode: (node: TreeNode | null) =>\n        this.treeEventHandler.setTreeSelection(node),\n      findNodeRecursively: (nodes: TreeNode[], key: string, type?: string) =>\n        this.findNodeRecursively(nodes, key, type),\n    });\n\n    // Effect to handle scroll to client signals\n    effect(() => {\n      const clientId = this.treeEventHandler.scrollToClient();\n      if (clientId !== null && clientId !== '') {\n        this.scrollToClient(clientId);\n        this.treeEventHandler.scrollToClient.set(null); // Clear after handling\n      }\n    });\n\n    // Effect to handle scroll suppression signals\n    effect(() => {\n      const suppressDuration = this.treeEventHandler.suppressScroll();\n      if (suppressDuration !== null) {\n        this.temporarilySuppressScrollToClient(suppressDuration);\n        this.treeEventHandler.suppressScroll.set(null); // Clear after handling\n      }\n    });\n\n    // Effect to handle tree panel toggle signals\n    effect(() => {\n      const shouldToggle = this.treeEventHandler.toggleTreePanel();\n      if (shouldToggle) {\n        this.toggleTreePanel();\n        this.treeEventHandler.toggleTreePanel.set(false); // Clear after handling\n      }\n    });\n\n    // Effect to handle error messages\n    effect(() => {\n      const errorData = this.treeEventHandler.errorMessage();\n      if (errorData) {\n        this.handleError(errorData.error, errorData.message);\n        this.treeEventHandler.errorMessage.set(null); // Clear after handling\n      }\n    });\n\n    // Track previous client ID to detect actual changes\n    let previousClientId: string | undefined = undefined;\n\n    // Effect to watch for selected client changes and automatically navigate to it\n    effect(() => {\n      const selectedClient = this.clientDataService.getSelectedClientSignal()();\n      const currentClientId = selectedClient?.id;\n\n      // Skip if this is the initial value or if the client hasn't actually changed\n      if (!this.initialRouteProcessed || currentClientId === previousClientId) {\n        previousClientId = currentClientId;\n        return;\n      }\n\n      // Update the previous value for next comparison\n      previousClientId = currentClientId;\n\n      // Only proceed with navigation logic if component is fully initialized\n      if (!this.componentFullyInitialized) {\n        // Just update tree selection during initialization without navigation\n        if (isDefined(selectedClient?.id)) {\n          this.updateTreeSelectionForCurrentClient(selectedClient).catch(\n            () => {},\n          );\n        }\n        return;\n      }\n\n      // Component is fully initialized - this is a runtime client change\n      if (isDefined(selectedClient?.id) && !this.isNavigatingToClient) {\n        // Check if we're already on the correct route\n        const currentUrl = this.router.url;\n        const expectedClientPath = `/admin/client/${selectedClient.id}`;\n\n        if (currentUrl.startsWith(expectedClientPath)) {\n          // Already on the correct route, just update tree selection\n          this.updateTreeSelectionForCurrentClient(selectedClient).catch(\n            () => {},\n          );\n          return;\n        }\n\n        // Not on the correct route - navigate to the client\n        this.treeEventHandler.setEventSource(EventSource.SYSTEM);\n        this.containerState.suppressScrollToClient.set(false);\n\n        void Promise.resolve().then(async () => {\n          await this.handleSelectedClientChange(selectedClient);\n        });\n      }\n    });\n\n    // Track previous route-based selection to detect route changes for non-client nodes\n    let previousRouteKey: string | undefined = undefined;\n    let previousRouteType: string | undefined = undefined;\n\n    // Effect to watch for route-based node selection changes (handles all node types)\n    effect(() => {\n      if (!this.initialRouteProcessed) return;\n\n      const { keyToSelect, typeToSelect } =\n        this.routeHandler.getEntityInfoFromRoute();\n      const currentRouteKey = isDefined(keyToSelect) ? keyToSelect : undefined;\n      const currentRouteType = isDefined(typeToSelect)\n        ? typeToSelect\n        : undefined;\n\n      // Skip if route-based selection hasn't changed\n      if (\n        currentRouteKey === previousRouteKey &&\n        currentRouteType === previousRouteType\n      ) {\n        return;\n      }\n\n      // Update previous values for next comparison\n      previousRouteKey = currentRouteKey;\n      previousRouteType = currentRouteType;\n\n      // Handle route-based selection for any node type (not just clients)\n      if (isDefined(keyToSelect) && isDefined(typeToSelect)) {\n        // Skip client nodes if they're already handled by the client effect above\n        if (typeToSelect === ADMIN_TREE.NODE_TYPES.CLIENT) {\n          return;\n        }\n\n        // Check if the current selected node already matches what the route wants\n        const currentSelected = this.selectedTreeNode();\n        if (\n          currentSelected?.key === keyToSelect &&\n          currentSelected?.type === typeToSelect\n        ) {\n          return;\n        }\n\n        // Set this as a system-initiated event\n        this.treeEventHandler.setEventSource(EventSource.SYSTEM);\n        this.containerState.suppressScrollToClient.set(false);\n\n        // Use a longer delay to ensure the tree has time to update after user selection\n        void Promise.resolve().then(async () => {\n          // Small delay to allow tree to stabilize after user selection\n          setTimeout(async () => {\n            await this.handleRouteBasedSelection(keyToSelect, typeToSelect);\n          }, 100);\n        });\n      }\n    });\n\n    let previousCollapsed = this.treeCollapsed();\n    effect(() => {\n      const collapsed = this.treeCollapsed();\n      // Transition: was collapsed and now expanded\n      if (previousCollapsed && !collapsed) {\n        // Clear any indefinite suppression set by user expand actions\n        this.containerState.suppressScrollToClient.set(false);\n\n        // Prefer a selected tree node (visual center), fallback to selected client (auto-scroll)\n        const selectedNode = this.selectedTreeNode();\n        if (isDefined(selectedNode?.key)) {\n          // center the selected node\n          this.scrollManagement.scrollToCenterNode(selectedNode.key);\n        } else {\n          const selClient = this.adminState.selectedClient();\n          if (\n            isDefined(selClient?.id) &&\n            this.treeEventHandler.shouldAllowAutoScroll()\n          ) {\n            this.scrollManagement.scrollToClient(selClient.id);\n          }\n        }\n      }\n      previousCollapsed = collapsed;\n    });\n  }\n\n  /**\n   * Updates tree selection when we're already on the correct route but selection is wrong\n   */\n  private async updateTreeSelectionForCurrentClient(\n    selectedClient: Partial<ClientResponse>,\n  ): Promise<void> {\n    if (!isDefined(selectedClient.id)) return;\n\n    try {\n      // Update admin state\n      this.adminState.setSelectedClient(selectedClient as ClientResponse);\n\n      // Prepare tree data if needed\n      const searchResult =\n        await this.adminSearchService.prepareClientForTreeSelectionWithOwner(\n          selectedClient,\n        );\n\n      if (searchResult) {\n        const treeNodes = this.hierarchyTree();\n        const nodeToSelect = this.findNodeByKeyRecursive(\n          treeNodes,\n          selectedClient.id,\n        );\n\n        if (nodeToSelect) {\n          this.treeEventHandler.setTreeSelection(nodeToSelect);\n\n          // Only scroll if tree is expanded and this is a system event\n          if (\n            !this.treeCollapsed() &&\n            this.treeEventHandler.shouldAllowAutoScroll()\n          ) {\n            this.scrollManagement.scrollToClient(selectedClient.id);\n          }\n        }\n      }\n    } catch (error) {\n      console.warn('Error updating tree selection for current client:', error);\n    }\n  }\n\n  ngOnInit(): void {\n    // Initialize the tree event handler with required dependencies\n    this.treeEventHandler.initialize({\n      getHierarchyTree: () => this.hierarchyTree(),\n      findNodeByKeyRecursive: (nodes: TreeNode[], key: string) =>\n        this.findNodeByKeyRecursive(nodes, key),\n    });\n\n    // Initialize route handling using the route handler service\n    this.routeHandler.initializeRouteHandling({\n      selectNodeFromRouteOrState: () => void this.selectNodeFromRouteOrState(),\n      ensureSuperAdminNodeExpansion: () => this.ensureSuperAdminNodeExpansion(),\n      onChangeDetection: () => {\n        this.cdr.detectChanges();\n        this.initialRouteProcessed = true; // Mark initial route as processed\n        this.componentFullyInitialized = true;\n      },\n    });\n\n    // Initialize the tree refresh service\n    this.treeRefreshService.initialize();\n  }\n\n  ngOnDestroy(): void {\n    // Cleanup any subscriptions or resources if needed\n    this.treeEventHandler.cleanup();\n    this.adminState.clearAllState();\n  }\n\n  /**\n   * Scrolls the tree to center on the specified client node\n   * @param clientId The ID of the client to scroll to\n   */\n  private scrollToClient(clientId: string): void {\n    this.scrollManagement.scrollToClient(clientId);\n  }\n\n  /**\n   * Temporarily suppresses automatic scrolling to selected client during user interactions\n   * @param durationMs Duration in milliseconds to suppress scrolling (default: 2000ms)\n   */\n  private temporarilySuppressScrollToClient(durationMs = 2000): void {\n    this.scrollManagement.temporarilySuppressScrollToClient(durationMs);\n  }\n\n  /**\n   * Handles when a node is not found in the current tree data\n   */\n  onNodeNotFoundInData(event: NodeNotFoundEvent): void {\n    this.treeEventHandler.onNodeNotFoundInData(event);\n  }\n\n  /**\n   * Finds a node in the hierarchy recursively by key and type.\n   */\n  private findNodeRecursively(\n    nodes: TreeNode[],\n    key: string,\n    type?: string,\n  ): TreeNode | null {\n    for (const node of nodes) {\n      if (node.key === key && (isNullOrUndefined(type) || node.type === type)) {\n        return node;\n      }\n      if (node.children) {\n        const found = this.findNodeByKeyRecursive(node.children, key);\n        if (found) {\n          return found;\n        }\n      }\n    }\n    return null;\n  }\n\n  // --- Tree Building Logic with Pagination ---\n\n  /**\n   * Ensures the super admin node is expanded by default when using modern schema\n   */\n  private ensureSuperAdminNodeExpansion(): void {\n    const isSuperAdmin = this.authDataService.isSuperAdmin();\n    const usesModernSchema = this.apiSchemaService.usesModernSchema();\n    const distributor = this.adminState.vendorDistributor();\n\n    if (isSuperAdmin && usesModernSchema && distributor) {\n      // Use distributor-scoped expanded nodes with 'super-admin' as the distributor key\n      const superAdminExpandedNodes =\n        this.adminState.expandedNodes()['super-admin'] ?? new Set();\n\n      if (!superAdminExpandedNodes.has('super-admin-root')) {\n        // Use the new distributor-scoped node expansion method\n        this.adminState.setDistributorNodeExpanded(\n          'super-admin',\n          'super-admin-root',\n          true,\n        );\n      }\n    }\n  }\n  private async navigateToNode(\n    nodeType: string,\n    nodeKey: string,\n  ): Promise<boolean> {\n    return this.navigationService.navigateToNode(nodeType, nodeKey);\n  }\n\n  private handleError(error: unknown, message: string): void {\n    console.error(message, error);\n    this.messageService.add({\n      severity: 'error',\n      summary: 'Error',\n      detail: `${message}: ${error instanceof Error ? error.message : 'Unknown error'}`,\n    });\n  }\n\n  /**\n   * Navigates to the selected client from clientDataService and selects it in the tree\n   * This method handles the home button functionality\n   */\n  async navigateToSelectedClient(): Promise<void> {\n    const selectedClient = this.clientDataService.getSelectedClient();\n\n    if (!selectedClient || !isDefined(selectedClient.id)) {\n      this.messageService.add({\n        severity: 'warn',\n        summary: 'Warning',\n        detail: 'No client selected to navigate to',\n      });\n      return;\n    }\n\n    try {\n      // Set this as a system-initiated event to allow auto-scrolling\n      this.treeEventHandler.setEventSource(EventSource.SYSTEM);\n      // Clear any existing scroll suppression for system events\n      this.containerState.suppressScrollToClient.set(false);\n\n      // Check if client has owner information needed for tree navigation\n      if (isNullOrUndefined(selectedClient.owner?.id)) {\n        // Load the full client data to get owner information\n        const fullClient = await this.adminTreeService.fetchClient(\n          selectedClient.id,\n        );\n\n        if (fullClient) {\n          await this.handleSelectedClientChange(fullClient);\n        } else {\n          console.warn('Could not load full client data for navigation');\n          // Fallback navigation\n          await this.navigateToNode(\n            ADMIN_TREE.NODE_TYPES.CLIENT,\n            selectedClient.id,\n          );\n          this.adminState.setSelectedClient(selectedClient as ClientResponse);\n        }\n      } else {\n        // Client has owner info, use the navigation logic directly\n        await this.handleSelectedClientChange(selectedClient);\n      }\n\n      // Only expand tree if user explicitly requests it (removed automatic expansion)\n      // The toggle button will show the selected client name regardless\n    } catch (error) {\n      this.handleError(error, 'Error navigating to selected client');\n    }\n  }\n\n  /**\n   * Handles automatic navigation when the selected client changes\n   * This prevents infinite loops by setting a flag during navigation\n   * Uses the client's owner information for efficient hierarchy loading\n   */\n  private async handleSelectedClientChange(\n    selectedClient: Partial<ClientResponse>,\n  ): Promise<void> {\n    if (this.isNavigatingToClient || !isDefined(selectedClient.id)) {\n      return;\n    }\n\n    try {\n      this.isNavigatingToClient = true;\n\n      // Always update the admin state first, regardless of tree loading success\n      this.adminState.setSelectedClient(selectedClient as ClientResponse);\n\n      // Always navigate to the client\n      await this.navigateToNode(\n        ADMIN_TREE.NODE_TYPES.CLIENT,\n        selectedClient.id,\n      );\n\n      // If tree panel is collapsed, still prepare the tree data but don't do visual operations\n      if (this.treeCollapsed()) {\n        // Prepare tree data in background so it's ready when user expands\n        try {\n          await this.adminSearchService.prepareClientForTreeSelectionWithOwner(\n            selectedClient,\n          );\n\n          // Update the selected tree node even when collapsed so it's correct when expanded\n          const treeNodes = this.hierarchyTree();\n          const nodeToSelect = this.findNodeByKeyRecursive(\n            treeNodes,\n            selectedClient.id,\n          );\n\n          if (nodeToSelect) {\n            this.treeEventHandler.setTreeSelection(nodeToSelect);\n          }\n        } catch (error) {\n          console.warn('Could not prepare tree data while collapsed:', error);\n        }\n        return;\n      }\n\n      // Tree panel is expanded, so prepare the tree hierarchy and do visual operations\n      const searchResult =\n        await this.adminSearchService.prepareClientForTreeSelectionWithOwner(\n          selectedClient,\n        );\n\n      if (searchResult) {\n        // Find and select the proper node from the fully loaded tree\n        const treeNodes = this.hierarchyTree();\n        const nodeToSelect = this.findNodeByKeyRecursive(\n          treeNodes,\n          selectedClient.id,\n        );\n\n        if (nodeToSelect) {\n          this.treeEventHandler.setTreeSelection(nodeToSelect);\n        } else {\n          console.warn('Could not find tree node for client after preparation');\n        }\n\n        // Scroll to the client since tree is visible\n        this.scrollManagement.scrollToClient(selectedClient.id);\n      } else {\n        console.warn('Could not prepare client for tree selection');\n      }\n    } catch (error) {\n      this.handleError(error, 'Error handling selected client change');\n    } finally {\n      // Reset the flag to allow future navigation\n      this.isNavigatingToClient = false;\n    }\n  }\n\n  /** Recursive helper to find TreeNode by key */\n  private findNodeByKeyRecursive(\n    nodes: TreeNode[],\n    key: string,\n  ): TreeNode | null {\n    for (const node of nodes) {\n      if (node.key === key) {\n        return node;\n      }\n      if (node.children) {\n        const found = this.findNodeByKeyRecursive(node.children, key);\n        if (found) return found;\n      }\n    }\n    return null;\n  }\n\n  /**\n   * Handles node expansion\n   */\n  async onNodeExpand(node: TreeNode): Promise<void> {\n    // User-initiated expansion - suppress auto-scrolling for this action\n    this.temporarilySuppressScrollToClient(0); // Suppress indefinitely until cleared\n    this.treeEventHandler.setEventSource(EventSource.USER);\n    try {\n      // Perform the expansion\n      await this.treeEventHandler.onNodeExpand(node);\n\n      // After expansion, scroll to center the expanded node\n      // This ensures the newly loaded children are visible\n      this.scrollToExpandedNode(node);\n    } catch (error) {\n      this.handleError(error, 'Error expanding node');\n    }\n  }\n\n  async onGroupExpand(groupNode: TreeNode): Promise<void> {\n    // User-initiated group expansion - suppress auto-scrolling for this action\n    this.temporarilySuppressScrollToClient(0); // Suppress indefinitely until cleared\n    this.treeEventHandler.setEventSource(EventSource.USER);\n    try {\n      await this.treeEventHandler.onNodeExpand(groupNode);\n      this.scrollToExpandedNode(groupNode);\n    } catch (error) {\n      this.handleError(error, 'Error expanding group');\n    }\n  }\n\n  onNodeCollapse(node: TreeNode): void {\n    // User-initiated collapse - suppress auto-scrolling for this action\n    this.temporarilySuppressScrollToClient(0); // Suppress indefinitely until cleared\n    this.treeEventHandler.setEventSource(EventSource.USER);\n    this.treeEventHandler.onNodeCollapse(node);\n  }\n\n  async onNodeSelect(node: TreeNode): Promise<void> {\n    // User-initiated selection - suppress auto-scrolling for this action\n    this.temporarilySuppressScrollToClient(0); // Suppress indefinitely until cleared\n    this.treeEventHandler.setEventSource(EventSource.USER);\n\n    // Let the tree event handler handle the selection - don't duplicate the logic\n    return this.treeEventHandler.onNodeSelect(node);\n  }\n\n  onNodeUnselect(node: TreeNode): void {\n    this.treeEventHandler.onNodeUnselect(node);\n  }\n\n  findSelectedNode(): TreeNode | null {\n    // First check the selectedTreeNode from internal state\n    const selectedNode = this.selectedTreeNode();\n    if (selectedNode) return selectedNode;\n\n    // Get current route information to determine what should be selected\n    const { keyToSelect, typeToSelect } = this.getEntityInfoFromRoute();\n\n    if (!isDefined(keyToSelect)) {\n      // Fallback to client-based selection if no route-based selection\n      const selectedClient = this.adminState.selectedClient();\n      if (!selectedClient) return null;\n\n      const nodes = this.hierarchyTree();\n      return this.adminDataService.findSelectedNode(nodes, selectedClient.id);\n    }\n\n    // Find the node based on route parameters\n    const nodes = this.hierarchyTree();\n    if (isDefined(typeToSelect)) {\n      return this.findNodeByTypeAndKey(nodes, keyToSelect, typeToSelect);\n    } else {\n      return this.findNodeByKeyRecursive(nodes, keyToSelect);\n    }\n  }\n\n  // Capture the activated router outlet component\n  onRouterOutletActivate(component: unknown): void {\n    this.activeGridComponent = component;\n  }\n\n  /**\n   * Scrolls to center an expanded node to show its children\n   */\n  private scrollToExpandedNode(node: TreeNode): void {\n    if (isDefined(node.key)) {\n      // Use a different scroll method that centers the node instead of selecting it\n      this.scrollManagement.scrollToCenterNode(node.key);\n    }\n  }\n\n  /**\n   * Gets entity information from route parameters\n   */\n  private getEntityInfoFromRoute(): {\n    keyToSelect: string | null;\n    typeToSelect: string | null;\n  } {\n    return this.routeHandler.getEntityInfoFromRoute();\n  }\n\n  /**\n   * Selects a node in the tree based on the current route parameters.\n   * This method updates the `selectedTreeNode` signal and loads missing data if needed.\n   */\n  private async selectNodeFromRouteOrState(): Promise<void> {\n    const { keyToSelect, typeToSelect } = this.getEntityInfoFromRoute();\n    const treeNodes = this.hierarchyTree();\n\n    // If no key to select, clear selection\n    if (isNullOrUndefined(keyToSelect)) {\n      this.treeEventHandler.setTreeSelection(null);\n      return;\n    }\n\n    // First try to find the node in the current tree\n    const nodeToSelect = this.findNodeToSelect(\n      treeNodes,\n      keyToSelect,\n      typeToSelect,\n    );\n\n    if (nodeToSelect) {\n      // Node found in tree - select it\n      this.treeEventHandler.setTreeSelection(nodeToSelect);\n      this.updateStateBasedOnNodeType(nodeToSelect);\n      this.scrollManagement.handleNodeSelectionScroll(keyToSelect);\n    } else if (isDefined(keyToSelect) && isDefined(typeToSelect)) {\n      // Node NOT found in tree - need to load it (important for page refresh!)\n      await this.handleRouteBasedSelection(keyToSelect, typeToSelect);\n    }\n  }\n\n  /**\n   * Updates the selected node based on provided key and type\n   */\n  private updateSelectedNode(\n    keyToSelect: string | null,\n    typeToSelect: string | null,\n    treeNodes: TreeNode[],\n  ): void {\n    // Clear selection if no key or type\n    if (isNullOrUndefined(keyToSelect) && isNullOrUndefined(typeToSelect)) {\n      this.treeEventHandler.setTreeSelection(null);\n      return;\n    }\n\n    if (!isDefined(keyToSelect) || treeNodes.length === 0) {\n      return;\n    }\n\n    // Find the node to select\n    const nodeToSelect = this.findNodeToSelect(\n      treeNodes,\n      keyToSelect,\n      typeToSelect,\n    );\n\n    if (nodeToSelect) {\n      this.treeEventHandler.setTreeSelection(nodeToSelect);\n\n      // Update state based on node type\n      this.updateStateBasedOnNodeType(nodeToSelect);\n\n      // If tree is visible and this is the initial selection, scroll to the node\n      this.scrollManagement.handleNodeSelectionScroll(keyToSelect);\n    }\n  }\n\n  /**\n   * Finds the correct node to select based on key and optional type\n   */\n  private findNodeToSelect(\n    treeNodes: TreeNode[],\n    key: string,\n    type: string | null,\n  ): TreeNode | null {\n    // If we have a type, try to find by both key and type first\n    if (isDefined(type)) {\n      const nodeByType = this.findNodeByTypeAndKey(treeNodes, key, type);\n      if (nodeByType) return nodeByType;\n    }\n\n    // Fall back to just finding by key\n    return this.findNodeByKeyRecursive(treeNodes, key);\n  }\n\n  /**\n   * Finds a node in the hierarchy by both key and type.\n   * This is a helper method to avoid code duplication.\n   */\n  private findNodeByTypeAndKey(\n    nodes: TreeNode[],\n    key: string,\n    type: string,\n  ): TreeNode | null {\n    for (const node of nodes) {\n      if (node.key === key && node.type === type) {\n        return node;\n      }\n\n      if (node.children) {\n        const found = this.findNodeByTypeAndKey(node.children, key, type);\n        if (found) return found;\n      }\n    }\n\n    return null;\n  }\n\n  /**\n   * Handles search query changes\n   */\n  onSearchQueryChange(query: string): void {\n    this.treeEventHandler.onSearchQueryChange(query);\n  }\n\n  /**\n   * Handles search result selection\n   */\n  async onSearchResultSelect(result: TreeSearchResult): Promise<void> {\n    // Clear any existing scroll suppression for system-initiated search result selection\n    this.containerState.suppressScrollToClient.set(false);\n    return this.treeEventHandler.onSearchResultSelect(result);\n  }\n\n  /**\n   * Handles search clear\n   */\n  onSearchClear(): void {\n    // Clear any existing scroll suppression when clearing search\n    this.containerState.suppressScrollToClient.set(false);\n    this.treeEventHandler.onSearchClear();\n  }\n\n  /**\n   * Handles selection based on route parameters for any node type\n   */\n  private async handleRouteBasedSelection(\n    keyToSelect: string,\n    typeToSelect: string | null,\n  ): Promise<void> {\n    // Check if the node exists in the tree AND is already correctly selected\n    const currentSelected = this.selectedTreeNode();\n    const treeNodes = this.hierarchyTree();\n    const nodeExistsInTree = this.findNodeToSelect(\n      treeNodes,\n      keyToSelect,\n      typeToSelect,\n    );\n\n    if (\n      nodeExistsInTree &&\n      currentSelected?.key === keyToSelect &&\n      currentSelected?.type === typeToSelect\n    ) {\n      return;\n    }\n\n    // Prepare tree data based on node type (loads missing clients)\n    const searchResult = await this.prepareTreeDataForNodeType(\n      keyToSelect,\n      typeToSelect,\n    );\n\n    if (isDefined(searchResult)) {\n      // Update tree selection (this sets the selected node)\n      await this.updateTreeSelectionFromRoute(keyToSelect, typeToSelect);\n\n      // After loading and selecting, scroll to the node if tree is visible\n      if (\n        !this.treeCollapsed() &&\n        typeToSelect === ADMIN_TREE.NODE_TYPES.CLIENT\n      ) {\n        // Small delay to ensure the node is rendered in the tree\n        setTimeout(() => {\n          this.scrollManagement.scrollToClient(keyToSelect);\n        }, 300);\n      }\n    } else {\n      console.warn(\n        '[Route Handler] prepareTreeDataForNodeType returned null, cannot proceed',\n      );\n    }\n  }\n\n  /**\n   * Prepares tree data based on node type\n   */\n  private async prepareTreeDataForNodeType(\n    keyToSelect: string,\n    typeToSelect: string | null,\n  ): Promise<unknown> {\n    if (typeToSelect === ADMIN_TREE.NODE_TYPES.CLIENT) {\n      return this.prepareClientTreeData();\n    }\n\n    return this.prepareNonClientTreeData(typeToSelect);\n  }\n  /**\n   * Prepares tree data for client nodes with distributor context\n   */\n  private async prepareClientTreeData(): Promise<TreeSearchResult | null> {\n    const currentClient = this.adminState.selectedClient();\n\n    if (!currentClient) return null;\n\n    // Ensure client data service is updated with distributor context\n    this.clientDataService.setSelectedClient(currentClient);\n\n    // Use the search service method that handles distributor-scoped data loading\n\n    const result =\n      await this.adminSearchService.prepareClientForTreeSelectionWithOwner(\n        currentClient,\n      );\n\n    return result;\n  }\n\n  /**\n   * Prepares tree data for non-client nodes\n   */\n  private async prepareNonClientTreeData(\n    typeToSelect: string | null,\n  ): Promise<{ success: boolean } | null> {\n    try {\n      const treeNodes = this.hierarchyTree();\n      if (treeNodes.length > 0) {\n        // For non-client nodes, we need to ensure the tree hierarchy is properly loaded\n        // This is especially important for vendor/distributor nodes that might not be expanded\n        return { success: true };\n      }\n\n      console.warn('Tree not loaded for non-client node type:', typeToSelect);\n      return null;\n    } catch (error) {\n      console.warn(\n        'Error checking tree state for node type:',\n        typeToSelect,\n        error,\n      );\n      return null;\n    }\n  }\n\n  /**\n   * Updates tree selection based on route parameters with distributor context\n   */\n  private async updateTreeSelectionFromRoute(\n    keyToSelect: string,\n    typeToSelect: string | null,\n  ): Promise<void> {\n    // Use the tree event handler's scheduling system instead of direct search\n    await this.treeEventHandler.scheduleNodeSelection(\n      keyToSelect,\n      typeToSelect ?? 'client',\n    );\n\n    // Update state for client nodes\n    if (typeToSelect === ADMIN_TREE.NODE_TYPES.CLIENT) {\n      await this.updateClientStateFromRoute(keyToSelect);\n    }\n  }\n\n  /**\n   * Updates client state when navigating via route\n   */\n  private async updateClientStateFromRoute(keyToSelect: string): Promise<void> {\n    const currentClient = this.adminState.selectedClient();\n\n    if (currentClient?.id === keyToSelect) {\n      this.syncClientDataService(currentClient);\n    } else {\n      await this.loadAndSetClientFromRoute(keyToSelect);\n    }\n  }\n\n  /**\n   * Syncs client data service with current client\n   */\n  private syncClientDataService(currentClient: Partial<ClientResponse>): void {\n    this.clientDataService.setSelectedClient(currentClient);\n  }\n\n  /**\n   * Loads client data from API and updates state\n   */\n  private async loadAndSetClientFromRoute(keyToSelect: string): Promise<void> {\n    try {\n      const client = await this.adminTreeService.fetchClient(keyToSelect);\n      if (client) {\n        this.setClientAndSyncServices(client);\n        await this.setVendorContextForClient(client);\n      }\n    } catch (error) {\n      console.warn('Error loading client data for selection:', error);\n    }\n  }\n\n  /**\n   * Sets client in both admin state and client data service\n   */\n  private setClientAndSyncServices(client: ClientResponse): void {\n    this.adminState.setSelectedClient(client);\n    this.clientDataService.setSelectedClient(client);\n  }\n\n  /**\n   * Sets vendor distributor context for client if available\n   */\n  private async setVendorContextForClient(\n    client: ClientResponse,\n  ): Promise<void> {\n    if (!client.owner?.id) return;\n\n    const distributorId = this.adminState.getCurrentDistributorId();\n    if (!isDefined(distributorId)) return;\n\n    const vendor = this.adminState.getVendorById(\n      client.owner.id,\n      distributorId,\n    );\n    if (vendor) {\n      this.adminState.setClientVendor(vendor as VendorResponse);\n    }\n  }\n\n  /**\n   * Handles client-based selection with distributor context (fallback when no route selection)\n   */\n  private async handleClientBasedSelection(\n    currentClient: Partial<ClientResponse>,\n  ): Promise<void> {\n    if (!isDefined(currentClient.id)) return;\n\n    // Always update clientDataService to match the route\n    this.clientDataService.setSelectedClient(currentClient);\n\n    // Prepare tree data for the route-based client with distributor context\n    const searchResult =\n      await this.adminSearchService.prepareClientForTreeSelectionWithOwner(\n        currentClient,\n      );\n\n    if (searchResult) {\n      // Update tree selection to match the route with distributor context\n      const treeNodes = this.hierarchyTree();\n      const nodeToSelect = this.findNodeByKeyRecursive(\n        treeNodes,\n        currentClient.id,\n      );\n\n      if (nodeToSelect) {\n        this.treeEventHandler.setTreeSelection(nodeToSelect);\n\n        // Only scroll if tree is expanded and this is a system event\n        if (\n          !this.treeCollapsed() &&\n          this.treeEventHandler.shouldAllowAutoScroll()\n        ) {\n          this.scrollManagement.scrollToClient(currentClient.id);\n        }\n      }\n    }\n  }\n  /**\n   * Updates application state based on the selected node type\n   */\n  private updateStateBasedOnNodeType(node: TreeNode): void {\n    if (!isDefined(node.type) || !isDefined(node.key)) return;\n\n    if (node.type === ADMIN_TREE.NODE_TYPES.CLIENT) {\n      // For clients, ensure clientDataService is updated\n      const clientData = node.data as Partial<ClientResponse>;\n      if (isDefined(clientData)) {\n        this.adminState.setSelectedClient(clientData as ClientResponse);\n      }\n    }\n    // Handle other node types as needed\n  }\n}\n","<div class=\"flex h-full overflow-hidden\" [ngClass]=\"hostClass()\">\n  <!-- Backdrop and spinner overlay when loading -->\n  @if (isLoading()) {\n    <div class=\"fixed inset-0 bg-black bg-opacity-30 z-40\"></div>\n    <p-progressSpinner\n      class=\"fixed z-50 top-1/2 left-1/2 -translate-x-1/2 -translate-y-1/2\"\n      styleClass=\"w-8 h-8\"\n      strokeWidth=\"2\"\n    ></p-progressSpinner>\n  }\n\n  <app-adaptive-layout\n    [ngClass]=\"mainSplitterClass()\"\n    [panels]=\"[\n      {\n        content: treeNavigationTemplate,\n        scrollable: false,\n        minSize: treeCollapsed() ? '36px' : 15,\n      },\n      { content: mainContentTemplate, scrollable: true, minSize: 10 },\n    ]\"\n    [panelSizes]=\"treeCollapsed() ? ['36px', 100] : [25, 75]\"\n    [minSizes]=\"[treeCollapsed() ? '36px' : 15, 10]\"\n    [defaultLayout]=\"'horizontal'\"\n    [responsive]=\"true\"\n    stateKey=\"main-layout\"\n    class=\"h-full w-full\"\n  >\n    <!-- Tree navigation panel -->\n    <ng-template #treeNavigationTemplate>\n      <app-tree-navigation-panel\n        [treeCollapsed]=\"treeCollapsed\"\n        [hierarchyTree]=\"hierarchyTree\"\n        [isLoading]=\"isLoading\"\n        [searchingForNode]=\"searchingForNode\"\n        [searchingNodeKey]=\"searchingNodeKey\"\n        [selectedTreeNode]=\"selectedTreeNode\"\n        [scrollToNodeKey]=\"scrollToNodeKey\"\n        [scrollToCenterNodeKey]=\"scrollToCenterNodeKey\"\n        [searchResults]=\"searchResults\"\n        [isSearching]=\"isSearching\"\n        (toggleTreePanel)=\"toggleTreePanel()\"\n        (navigateToSelectedClient)=\"navigateToSelectedClient()\"\n        (nodeExpand)=\"onNodeExpand($event)\"\n        (nodeCollapse)=\"onNodeCollapse($event)\"\n        (nodeSelect)=\"onNodeSelect($event)\"\n        (nodeNotFoundInData)=\"onNodeNotFoundInData($event)\"\n        (searchQueryChange)=\"onSearchQueryChange($event)\"\n        (searchResultSelect)=\"onSearchResultSelect($event)\"\n        (searchClear)=\"onSearchClear()\"\n      ></app-tree-navigation-panel>\n    </ng-template>\n\n    <!-- Main content panel -->\n    <ng-template #mainContentTemplate>\n      <app-admin-main-content\n        [nestedContentScrollable]=\"nestedContentScrollable\"\n        [detailsPanelClass]=\"detailsPanelClass\"\n        (routerOutletActivate)=\"onRouterOutletActivate($event)\"\n      ></app-admin-main-content>\n    </ng-template>\n  </app-adaptive-layout>\n</div>\n","import { ResolveFn } from '@angular/router';\nimport { inject } from '@angular/core';\nimport { catchError, map, of } from 'rxjs';\nimport { MessageService } from 'primeng/api';\n\nimport { AccountsService, ClientResponse } from '../../../api';\nimport { isDefined, isString } from '../../../shared/utils';\n\nexport const clientResolver: ResolveFn<ClientResponse | null> = (\n  route,\n  _state,\n) => {\n  const accountsService = inject(AccountsService);\n  const messageService = inject(MessageService);\n  const clientId = route.paramMap.get('clientId');\n\n  if (!isDefined(clientId) || !isString(clientId)) {\n    messageService.add({\n      severity: 'error',\n      summary: 'Error',\n      detail: 'Invalid client ID',\n    });\n    return of(null);\n  }\n\n  return accountsService.getClient(clientId).pipe(\n    map((response) => {\n      if (!isDefined(response)) {\n        messageService.add({\n          severity: 'error',\n          summary: 'Error',\n          detail: 'No client data found',\n        });\n        return null;\n      }\n      return response;\n    }),\n    catchError(() => {\n      messageService.add({\n        severity: 'error',\n        summary: 'Error',\n        detail: 'Failed to load client data',\n      });\n      return of(null);\n    }),\n  );\n};\n","import { ResolveFn } from '@angular/router';\nimport { AccountsService, DistributorResponse } from '../../../api';\nimport { inject } from '@angular/core';\nimport { catchError, map, of } from 'rxjs';\nimport { MessageService } from 'primeng/api';\nimport { isDefined, isString } from '../../../shared/utils';\n\nexport const distributorResolver: ResolveFn<DistributorResponse | null> = (\n  route,\n  _state,\n) => {\n  const accountsService = inject(AccountsService);\n  const messageService = inject(MessageService);\n  const distributorId = route.paramMap.get('distributorId');\n\n  if (!isDefined(distributorId) || !isString(distributorId)) {\n    messageService.add({\n      severity: 'error',\n      summary: 'Error',\n      detail: 'Invalid distributor ID',\n    });\n    return of(null);\n  }\n\n  return accountsService.getDistributor(distributorId).pipe(\n    map((response) => {\n      if (!isDefined(response)) {\n        messageService.add({\n          severity: 'error',\n          summary: 'Error',\n          detail: 'No distributor data found',\n        });\n        return null;\n      }\n      return response;\n    }),\n    catchError(() => {\n      messageService.add({\n        severity: 'error',\n        summary: 'Error',\n        detail: 'Failed to load distributor data',\n      });\n      return of(null);\n    }),\n  );\n};\n","import { ResolveFn } from '@angular/router';\nimport { AccountsService, VendorResponse } from '../../../api';\nimport { inject } from '@angular/core';\nimport { catchError, of } from 'rxjs';\nimport { MessageService } from 'primeng/api';\nimport { isNullOrUndefined } from '../../../shared/utils';\n\nexport const vendorResolver: ResolveFn<VendorResponse | null> = (\n  route,\n  _state,\n) => {\n  const accountsService = inject(AccountsService);\n  const messageService = inject(MessageService);\n  const vendorId = route.paramMap.get('vendorId');\n  if (isNullOrUndefined(vendorId)) {\n    messageService.add({\n      severity: 'error',\n      summary: 'Error',\n      detail: 'Vendor ID not found',\n    });\n    return of(null);\n  }\n  return accountsService.getVendor(vendorId).pipe(\n    catchError(() => {\n      messageService.add({\n        severity: 'error',\n        summary: 'Error',\n        detail: 'Failed to load vendor data',\n      });\n      return of(null);\n    }),\n  );\n};\n","import { RouterModule, Routes } from '@angular/router';\n\nimport { AdminContainerComponent } from './components/admin-container/admin-container.component';\nimport { NgModule } from '@angular/core';\nimport { clientResolver } from './resolvers/client.resolver';\nimport { distributorResolver } from './resolvers/distributor.resolver';\nimport { vendorResolver } from './resolvers/vendor.resolver';\n\nconst routes: Routes = [\n  {\n    path: '',\n    component: AdminContainerComponent,\n    children: [\n      {\n        path: 'super-admin/:superAdminId',\n        loadChildren: () =>\n          import('./components/super-admin/super-admin.module').then(\n            (m) => m.SuperAdminModule,\n          ),\n      },\n      {\n        path: 'vendor/:vendorId',\n        resolve: {\n          vendor: vendorResolver,\n        },\n        loadChildren: () =>\n          import('./components/vendors/vendors.module').then(\n            (m) => m.VendorsModule,\n          ),\n      },\n      {\n        path: 'distributor/:distributorId',\n        resolve: {\n          distributor: distributorResolver,\n        },\n        loadChildren: () =>\n          import('./components/distributors/distributors.module').then(\n            (m) => m.DistributorsModule,\n          ),\n      },\n      {\n        path: 'client/:clientId',\n        resolve: {\n          client: clientResolver,\n        },\n        loadChildren: () =>\n          import('./components/clients/clients.module').then(\n            (m) => m.ClientsModule,\n          ),\n      },\n    ],\n  },\n];\n\n@NgModule({\n  imports: [RouterModule.forChild(routes)],\n  exports: [RouterModule],\n})\nexport class AdministrationRoutingModule {}\n","import { Injectable } from '@angular/core';\nimport { TableLazyLoadEvent } from 'primeng/table';\nimport { DataGridParams, FilterCriteria, FilterValue } from '../models';\nimport { DEFAULT_PAGE_SIZE, DEFAULT_SYSTEM_ID } from '../../core/models';\nimport { isDefined } from '../utils';\n\ntype FilterTransformation = (field: string) => string;\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class GridBaseService {\n  handleFilters(\n    currentFilters: Record<string, FilterCriteria>,\n    field: string,\n    value: FilterValue,\n    transformations?: Record<string, FilterTransformation>,\n    filterMatchMode?: string,\n  ): Record<string, FilterCriteria> {\n    if (field === '*' && value === null) {\n      return {};\n    }\n\n    const newFilters = { ...currentFilters };\n\n    if (isDefined(value) && value.toString().length > 0) {\n      // Apply field transformations if provided\n      const transformedField = transformations?.[field]\n        ? transformations[field](field)\n        : field;\n\n      let processedValue = value;\n      let operator: '=' | '!=' | '>' | '<' | '>=' | '<=' | 'like' | 'in' = '=';\n\n      // Handle different filter match modes\n      if (filterMatchMode === 'contains' && typeof value === 'string') {\n        processedValue = `*${value}*`;\n      } else if (\n        filterMatchMode === 'startsWith' &&\n        typeof value === 'string'\n      ) {\n        processedValue = `${value}*`;\n      } else if (filterMatchMode === 'endsWith' && typeof value === 'string') {\n        processedValue = `*${value}`;\n      } else if (filterMatchMode === 'in') {\n        operator = 'in';\n      }\n\n      newFilters[transformedField] = { value: processedValue, operator };\n    } else {\n      delete newFilters[field];\n    }\n\n    return newFilters;\n  }\n\n  constructGridParams(\n    baseParams: Record<string, unknown>,\n    event?: TableLazyLoadEvent,\n    defaultPageSize = DEFAULT_PAGE_SIZE,\n  ): DataGridParams {\n    return {\n      ...baseParams,\n      owner: (baseParams['owner'] as string) || DEFAULT_SYSTEM_ID,\n      offset: isDefined(event?.first) ? event.first : 0,\n      limit: isDefined(event?.rows) ? event.rows : defaultPageSize,\n      sortField: isDefined(event?.sortField) ? event.sortField : 'name',\n      sortOrder: isDefined(event?.sortOrder) ? event.sortOrder : 'asc',\n    };\n  }\n}\n","import * as i1 from '@angular/common';\nimport { CommonModule } from '@angular/common';\nimport * as i0 from '@angular/core';\nimport { Injectable, contentChildren, forwardRef, inject, ViewEncapsulation, ChangeDetectionStrategy, Component, model, computed, contentChild, effect, input, ContentChildren, ContentChild, signal, NgModule } from '@angular/core';\nimport { trigger, state, transition, style as style$1, animate } from '@angular/animations';\nimport { find, findIndexInList, uuid } from '@primeuix/utils';\nimport { SharedModule, PrimeTemplate } from 'primeng/api';\nimport { BaseComponent } from 'primeng/basecomponent';\nimport { transformToBoolean } from 'primeng/utils';\nimport { BaseStyle } from 'primeng/base';\nimport { style } from '@primeuix/styles/stepper';\nconst _c0 = [\"*\"];\nconst _c1 = [\"content\"];\nconst _c2 = (a0, a1, a2) => ({\n  activateCallback: a0,\n  value: a1,\n  active: a2\n});\nfunction Step_Conditional_0_Conditional_5_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelement(0, \"p-stepper-separator\");\n  }\n}\nfunction Step_Conditional_0_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r1 = i0.ɵɵgetCurrentView();\n    i0.ɵɵelementStart(0, \"button\", 0);\n    i0.ɵɵlistener(\"click\", function Step_Conditional_0_Template_button_click_0_listener() {\n      i0.ɵɵrestoreView(_r1);\n      const ctx_r1 = i0.ɵɵnextContext();\n      return i0.ɵɵresetView(ctx_r1.onStepClick());\n    });\n    i0.ɵɵelementStart(1, \"span\");\n    i0.ɵɵtext(2);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(3, \"span\");\n    i0.ɵɵprojection(4);\n    i0.ɵɵelementEnd()();\n    i0.ɵɵconditionalCreate(5, Step_Conditional_0_Conditional_5_Template, 1, 0, \"p-stepper-separator\");\n  }\n  if (rf & 2) {\n    const ctx_r1 = i0.ɵɵnextContext();\n    i0.ɵɵclassMap(ctx_r1.cx(\"header\"));\n    i0.ɵɵproperty(\"tabindex\", ctx_r1.isStepDisabled() ? -1 : undefined)(\"disabled\", ctx_r1.isStepDisabled());\n    i0.ɵɵattribute(\"id\", ctx_r1.id())(\"role\", \"tab\")(\"aria-controls\", ctx_r1.ariaControls());\n    i0.ɵɵadvance();\n    i0.ɵɵclassMap(ctx_r1.cx(\"number\"));\n    i0.ɵɵadvance();\n    i0.ɵɵtextInterpolate(ctx_r1.value());\n    i0.ɵɵadvance();\n    i0.ɵɵclassMap(ctx_r1.cx(\"title\"));\n    i0.ɵɵadvance(2);\n    i0.ɵɵconditional(ctx_r1.isSeparatorVisible() ? 5 : -1);\n  }\n}\nfunction Step_Conditional_1_ng_container_0_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementContainer(0);\n  }\n}\nfunction Step_Conditional_1_Conditional_1_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelement(0, \"p-stepper-separator\");\n  }\n}\nfunction Step_Conditional_1_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵtemplate(0, Step_Conditional_1_ng_container_0_Template, 1, 0, \"ng-container\", 1);\n    i0.ɵɵconditionalCreate(1, Step_Conditional_1_Conditional_1_Template, 1, 0, \"p-stepper-separator\");\n  }\n  if (rf & 2) {\n    const ctx_r1 = i0.ɵɵnextContext();\n    i0.ɵɵproperty(\"ngTemplateOutlet\", ctx_r1.content || ctx_r1._contentTemplate)(\"ngTemplateOutletContext\", i0.ɵɵpureFunction3(3, _c2, ctx_r1.onStepClick.bind(ctx_r1), ctx_r1.value(), ctx_r1.active()));\n    i0.ɵɵadvance();\n    i0.ɵɵconditional(ctx_r1.isSeparatorVisible() ? 1 : -1);\n  }\n}\nconst _c3 = a0 => ({\n  transitionParams: a0\n});\nconst _c4 = a0 => ({\n  value: \"visible\",\n  params: a0\n});\nconst _c5 = a0 => ({\n  value: \"hidden\",\n  params: a0\n});\nfunction StepPanel_Conditional_0_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelement(0, \"p-stepper-separator\");\n  }\n}\nfunction StepPanel_Conditional_2_ng_container_0_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementContainer(0);\n  }\n}\nfunction StepPanel_Conditional_2_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵtemplate(0, StepPanel_Conditional_2_ng_container_0_Template, 1, 0, \"ng-container\", 0);\n  }\n  if (rf & 2) {\n    const ctx_r0 = i0.ɵɵnextContext();\n    i0.ɵɵproperty(\"ngTemplateOutlet\", ctx_r0.contentTemplate || ctx_r0._contentTemplate)(\"ngTemplateOutletContext\", i0.ɵɵpureFunction3(2, _c2, ctx_r0.updateValue.bind(ctx_r0), ctx_r0.value(), ctx_r0.active()));\n  }\n}\nconst classes$5 = {\n  root: ({\n    instance\n  }) => ['p-stepitem', {\n    'p-stepitem-active': instance.isActive()\n  }]\n};\nclass StepItemStyle extends BaseStyle {\n  name = 'stepitem';\n  classes = classes$5;\n  static ɵfac = /* @__PURE__ */(() => {\n    let ɵStepItemStyle_BaseFactory;\n    return function StepItemStyle_Factory(__ngFactoryType__) {\n      return (ɵStepItemStyle_BaseFactory || (ɵStepItemStyle_BaseFactory = i0.ɵɵgetInheritedFactory(StepItemStyle)))(__ngFactoryType__ || StepItemStyle);\n    };\n  })();\n  static ɵprov = /* @__PURE__ */i0.ɵɵdefineInjectable({\n    token: StepItemStyle,\n    factory: StepItemStyle.ɵfac\n  });\n}\n(() => {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(StepItemStyle, [{\n    type: Injectable\n  }], null, null);\n})();\n/**\n *\n * Stepper is a component that streamlines a wizard-like workflow, organizing content into coherent steps and visually guiding users through a numbered progression in a multi-step process.\n *\n * [Live Demo](https://www.primeng.org/stepper/)\n *\n * @module stepitemstyle\n *\n */\nvar StepItemClasses;\n(function (StepItemClasses) {\n  /**\n   * Class name of the root element\n   */\n  StepItemClasses[\"root\"] = \"p-stepitem\";\n})(StepItemClasses || (StepItemClasses = {}));\nconst classes$4 = {\n  root: 'p-steplist'\n};\nclass StepListStyle extends BaseStyle {\n  name = 'steplist';\n  classes = classes$4;\n  static ɵfac = /* @__PURE__ */(() => {\n    let ɵStepListStyle_BaseFactory;\n    return function StepListStyle_Factory(__ngFactoryType__) {\n      return (ɵStepListStyle_BaseFactory || (ɵStepListStyle_BaseFactory = i0.ɵɵgetInheritedFactory(StepListStyle)))(__ngFactoryType__ || StepListStyle);\n    };\n  })();\n  static ɵprov = /* @__PURE__ */i0.ɵɵdefineInjectable({\n    token: StepListStyle,\n    factory: StepListStyle.ɵfac\n  });\n}\n(() => {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(StepListStyle, [{\n    type: Injectable\n  }], null, null);\n})();\n/**\n *\n * Stepper is a component that streamlines a wizard-like workflow, organizing content into coherent steps and visually guiding users through a numbered progression in a multi-step process.\n *\n * [Live Demo](https://www.primeng.org/stepper/)\n *\n * @module stepliststyle\n *\n */\nvar StepListClasses;\n(function (StepListClasses) {\n  /**\n   * Class name of the root element\n   */\n  StepListClasses[\"root\"] = \"p-stepitem\";\n})(StepListClasses || (StepListClasses = {}));\nconst classes$3 = {\n  root: 'p-steppanels'\n};\nclass StepPanelsStyle extends BaseStyle {\n  name = 'steppanel';\n  classes = classes$3;\n  static ɵfac = /* @__PURE__ */(() => {\n    let ɵStepPanelsStyle_BaseFactory;\n    return function StepPanelsStyle_Factory(__ngFactoryType__) {\n      return (ɵStepPanelsStyle_BaseFactory || (ɵStepPanelsStyle_BaseFactory = i0.ɵɵgetInheritedFactory(StepPanelsStyle)))(__ngFactoryType__ || StepPanelsStyle);\n    };\n  })();\n  static ɵprov = /* @__PURE__ */i0.ɵɵdefineInjectable({\n    token: StepPanelsStyle,\n    factory: StepPanelsStyle.ɵfac\n  });\n}\n(() => {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(StepPanelsStyle, [{\n    type: Injectable\n  }], null, null);\n})();\n/**\n *\n * StepPanel is a helper component for Stepper component.\n *\n * [Live Demo](https://www.primeng.org/stepper/)\n *\n * @module steppanelsstyle\n *\n */\nvar StepPanelsClasses;\n(function (StepPanelsClasses) {\n  /**\n   * Class name of the root element\n   */\n  StepPanelsClasses[\"root\"] = \"p-steppanels\";\n})(StepPanelsClasses || (StepPanelsClasses = {}));\nconst classes$2 = {\n  root: ({\n    instance\n  }) => ['p-steppanel', {\n    'p-steppanel-active': instance.isVertical() && instance.active()\n  }],\n  content: 'p-steppanel-content'\n};\nclass StepPanelStyle extends BaseStyle {\n  name = 'steppanel';\n  classes = classes$2;\n  static ɵfac = /* @__PURE__ */(() => {\n    let ɵStepPanelStyle_BaseFactory;\n    return function StepPanelStyle_Factory(__ngFactoryType__) {\n      return (ɵStepPanelStyle_BaseFactory || (ɵStepPanelStyle_BaseFactory = i0.ɵɵgetInheritedFactory(StepPanelStyle)))(__ngFactoryType__ || StepPanelStyle);\n    };\n  })();\n  static ɵprov = /* @__PURE__ */i0.ɵɵdefineInjectable({\n    token: StepPanelStyle,\n    factory: StepPanelStyle.ɵfac\n  });\n}\n(() => {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(StepPanelStyle, [{\n    type: Injectable\n  }], null, null);\n})();\n/**\n *\n * StepPanel is a helper component for Stepper component.\n *\n * [Live Demo](https://www.primeng.org/stepper/)\n *\n * @module steppanelstyle\n *\n */\nvar StepPanelClasses;\n(function (StepPanelClasses) {\n  /**\n   * Class name of the root element\n   */\n  StepPanelClasses[\"root\"] = \"p-steppanel\";\n})(StepPanelClasses || (StepPanelClasses = {}));\nconst theme = /*css*/`\n    ${style}\n\n    /* For PrimeNG */\n    .p-steppanel:not(.p-steppanel-active) > .p-steppanel-content,\n    .p-steppanel-content.ng-animating {\n        overflow: hidden;\n    }\n`;\nconst classes$1 = {\n  root: ({\n    instance\n  }) => ['p-stepper p-component', {\n    'p-readonly': instance.linear()\n  }],\n  separator: 'p-stepper-separator'\n};\nclass StepperStyle extends BaseStyle {\n  name = 'stepper';\n  theme = theme;\n  classes = classes$1;\n  static ɵfac = /* @__PURE__ */(() => {\n    let ɵStepperStyle_BaseFactory;\n    return function StepperStyle_Factory(__ngFactoryType__) {\n      return (ɵStepperStyle_BaseFactory || (ɵStepperStyle_BaseFactory = i0.ɵɵgetInheritedFactory(StepperStyle)))(__ngFactoryType__ || StepperStyle);\n    };\n  })();\n  static ɵprov = /* @__PURE__ */i0.ɵɵdefineInjectable({\n    token: StepperStyle,\n    factory: StepperStyle.ɵfac\n  });\n}\n(() => {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(StepperStyle, [{\n    type: Injectable\n  }], null, null);\n})();\n/**\n *\n * Stepper is a component that streamlines a wizard-like workflow, organizing content into coherent steps and visually guiding users through a numbered progression in a multi-step process.\n *\n * [Live Demo](https://www.primeng.org/stepper/)\n *\n * @module stepperstyle\n *\n */\nvar StepperClasses;\n(function (StepperClasses) {\n  /**\n   * Class name of the root element\n   */\n  StepperClasses[\"root\"] = \"p-stepper\";\n  /**\n   * Class name of the separator element\n   */\n  StepperClasses[\"separator\"] = \"p-stepper-separator\";\n})(StepperClasses || (StepperClasses = {}));\nconst classes = {\n  root: ({\n    instance\n  }) => ['p-step', {\n    'p-step-active': instance.active(),\n    'p-disabled': instance.isStepDisabled()\n  }],\n  header: 'p-step-header',\n  number: 'p-step-number',\n  title: 'p-step-title'\n};\nclass StepStyle extends BaseStyle {\n  name = 'step';\n  classes = classes;\n  static ɵfac = /* @__PURE__ */(() => {\n    let ɵStepStyle_BaseFactory;\n    return function StepStyle_Factory(__ngFactoryType__) {\n      return (ɵStepStyle_BaseFactory || (ɵStepStyle_BaseFactory = i0.ɵɵgetInheritedFactory(StepStyle)))(__ngFactoryType__ || StepStyle);\n    };\n  })();\n  static ɵprov = /* @__PURE__ */i0.ɵɵdefineInjectable({\n    token: StepStyle,\n    factory: StepStyle.ɵfac\n  });\n}\n(() => {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(StepStyle, [{\n    type: Injectable\n  }], null, null);\n})();\n/**\n *\n * Stepper is a component that streamlines a wizard-like workflow, organizing content into coherent steps and visually guiding users through a numbered progression in a multi-step process.\n *\n * [Live Demo](https://www.primeng.org/stepper/)\n *\n * @module stepstyle\n *\n */\nvar StepClasses;\n(function (StepClasses) {\n  /**\n   * Class name of the root element\n   */\n  StepClasses[\"root\"] = \"p-step\";\n  /**\n   * Class name of the header element\n   */\n  StepClasses[\"header\"] = \"p-step-header\";\n  /**\n   * Class name of the number element\n   */\n  StepClasses[\"number\"] = \"p-step-number\";\n  /**\n   * Class name of the title element\n   */\n  StepClasses[\"title\"] = \"p-step-title\";\n})(StepClasses || (StepClasses = {}));\nclass StepList extends BaseComponent {\n  steps = contentChildren(forwardRef(() => Step), ...(ngDevMode ? [{\n    debugName: \"steps\"\n  }] : []));\n  _componentStyle = inject(StepListStyle);\n  static ɵfac = /* @__PURE__ */(() => {\n    let ɵStepList_BaseFactory;\n    return function StepList_Factory(__ngFactoryType__) {\n      return (ɵStepList_BaseFactory || (ɵStepList_BaseFactory = i0.ɵɵgetInheritedFactory(StepList)))(__ngFactoryType__ || StepList);\n    };\n  })();\n  static ɵcmp = /* @__PURE__ */i0.ɵɵdefineComponent({\n    type: StepList,\n    selectors: [[\"p-step-list\"]],\n    contentQueries: function StepList_ContentQueries(rf, ctx, dirIndex) {\n      if (rf & 1) {\n        i0.ɵɵcontentQuerySignal(dirIndex, ctx.steps, Step, 4);\n      }\n      if (rf & 2) {\n        i0.ɵɵqueryAdvance();\n      }\n    },\n    hostVars: 2,\n    hostBindings: function StepList_HostBindings(rf, ctx) {\n      if (rf & 2) {\n        i0.ɵɵclassMap(ctx.cx(\"root\"));\n      }\n    },\n    features: [i0.ɵɵProvidersFeature([StepListStyle]), i0.ɵɵInheritDefinitionFeature],\n    ngContentSelectors: _c0,\n    decls: 1,\n    vars: 0,\n    template: function StepList_Template(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵprojectionDef();\n        i0.ɵɵprojection(0);\n      }\n    },\n    dependencies: [CommonModule],\n    encapsulation: 2,\n    changeDetection: 0\n  });\n}\n(() => {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(StepList, [{\n    type: Component,\n    args: [{\n      selector: 'p-step-list',\n      standalone: true,\n      imports: [CommonModule],\n      template: ` <ng-content></ng-content>`,\n      changeDetection: ChangeDetectionStrategy.OnPush,\n      encapsulation: ViewEncapsulation.None,\n      host: {\n        '[class]': 'cx(\"root\")'\n      },\n      providers: [StepListStyle]\n    }]\n  }], null, null);\n})();\nclass StepperSeparator extends BaseComponent {\n  _componentStyle = inject(StepperStyle);\n  static ɵfac = /* @__PURE__ */(() => {\n    let ɵStepperSeparator_BaseFactory;\n    return function StepperSeparator_Factory(__ngFactoryType__) {\n      return (ɵStepperSeparator_BaseFactory || (ɵStepperSeparator_BaseFactory = i0.ɵɵgetInheritedFactory(StepperSeparator)))(__ngFactoryType__ || StepperSeparator);\n    };\n  })();\n  static ɵcmp = /* @__PURE__ */i0.ɵɵdefineComponent({\n    type: StepperSeparator,\n    selectors: [[\"p-stepper-separator\"]],\n    hostVars: 2,\n    hostBindings: function StepperSeparator_HostBindings(rf, ctx) {\n      if (rf & 2) {\n        i0.ɵɵclassMap(ctx.cx(\"separator\"));\n      }\n    },\n    features: [i0.ɵɵProvidersFeature([StepperStyle]), i0.ɵɵInheritDefinitionFeature],\n    ngContentSelectors: _c0,\n    decls: 1,\n    vars: 0,\n    template: function StepperSeparator_Template(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵprojectionDef();\n        i0.ɵɵprojection(0);\n      }\n    },\n    dependencies: [CommonModule],\n    encapsulation: 2,\n    changeDetection: 0\n  });\n}\n(() => {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(StepperSeparator, [{\n    type: Component,\n    args: [{\n      selector: 'p-stepper-separator',\n      standalone: true,\n      imports: [CommonModule],\n      template: ` <ng-content></ng-content>`,\n      changeDetection: ChangeDetectionStrategy.OnPush,\n      encapsulation: ViewEncapsulation.None,\n      host: {\n        '[class]': 'cx(\"separator\")'\n      },\n      providers: [StepperStyle]\n    }]\n  }], null, null);\n})();\n/**\n * StepItem is a helper component for Stepper component used in vertical orientation.\n * @group Components\n */\nclass StepItem extends BaseComponent {\n  pcStepper = inject(forwardRef(() => Stepper));\n  /**\n   * Value of step.\n   * @type {<number | undefined>}\n   * @defaultValue undefined\n   * @group Props\n   */\n  value = model(...(ngDevMode ? [undefined, {\n    debugName: \"value\"\n  }] : []));\n  isActive = computed(() => this.pcStepper.value() === this.value(), ...(ngDevMode ? [{\n    debugName: \"isActive\"\n  }] : []));\n  step = contentChild(forwardRef(() => Step), ...(ngDevMode ? [{\n    debugName: \"step\"\n  }] : []));\n  stepPanel = contentChild(forwardRef(() => StepPanel), ...(ngDevMode ? [{\n    debugName: \"stepPanel\"\n  }] : []));\n  constructor() {\n    super();\n    effect(() => {\n      this.step().value.set(this.value());\n    });\n    effect(() => {\n      this.stepPanel().value.set(this.value());\n    });\n  }\n  _componentStyle = inject(StepItemStyle);\n  static ɵfac = function StepItem_Factory(__ngFactoryType__) {\n    return new (__ngFactoryType__ || StepItem)();\n  };\n  static ɵcmp = /* @__PURE__ */i0.ɵɵdefineComponent({\n    type: StepItem,\n    selectors: [[\"p-step-item\"]],\n    contentQueries: function StepItem_ContentQueries(rf, ctx, dirIndex) {\n      if (rf & 1) {\n        i0.ɵɵcontentQuerySignal(dirIndex, ctx.step, Step, 5);\n        i0.ɵɵcontentQuerySignal(dirIndex, ctx.stepPanel, StepPanel, 5);\n      }\n      if (rf & 2) {\n        i0.ɵɵqueryAdvance(2);\n      }\n    },\n    hostVars: 3,\n    hostBindings: function StepItem_HostBindings(rf, ctx) {\n      if (rf & 2) {\n        i0.ɵɵattribute(\"data-p-active\", ctx.isActive());\n        i0.ɵɵclassMap(ctx.cx(\"root\"));\n      }\n    },\n    inputs: {\n      value: [1, \"value\"]\n    },\n    outputs: {\n      value: \"valueChange\"\n    },\n    features: [i0.ɵɵProvidersFeature([StepItemStyle]), i0.ɵɵInheritDefinitionFeature],\n    ngContentSelectors: _c0,\n    decls: 1,\n    vars: 0,\n    template: function StepItem_Template(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵprojectionDef();\n        i0.ɵɵprojection(0);\n      }\n    },\n    dependencies: [CommonModule],\n    encapsulation: 2,\n    changeDetection: 0\n  });\n}\n(() => {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(StepItem, [{\n    type: Component,\n    args: [{\n      selector: 'p-step-item',\n      standalone: true,\n      imports: [CommonModule],\n      template: ` <ng-content></ng-content>`,\n      changeDetection: ChangeDetectionStrategy.OnPush,\n      encapsulation: ViewEncapsulation.None,\n      host: {\n        '[class]': 'cx(\"root\")',\n        '[attr.data-p-active]': 'isActive()'\n      },\n      providers: [StepItemStyle]\n    }]\n  }], () => [], null);\n})();\n/**\n * Step is a helper component for Stepper component.\n * @group Components\n */\nclass Step extends BaseComponent {\n  pcStepper = inject(forwardRef(() => Stepper));\n  /**\n   * Active value of stepper.\n   * @type {number}\n   * @defaultValue undefined\n   * @group Props\n   */\n  value = model(...(ngDevMode ? [undefined, {\n    debugName: \"value\"\n  }] : []));\n  /**\n   * Whether the step is disabled.\n   * @type {boolean}\n   * @defaultValue false\n   * @group Props\n   */\n  disabled = input(false, ...(ngDevMode ? [{\n    debugName: \"disabled\",\n    transform: v => transformToBoolean(v)\n  }] : [{\n    transform: v => transformToBoolean(v)\n  }]));\n  active = computed(() => this.pcStepper.isStepActive(this.value()), ...(ngDevMode ? [{\n    debugName: \"active\"\n  }] : []));\n  isStepDisabled = computed(() => !this.active() && (this.pcStepper.linear() || this.disabled()), ...(ngDevMode ? [{\n    debugName: \"isStepDisabled\"\n  }] : []));\n  id = computed(() => `${this.pcStepper.id()}_step_${this.value()}`, ...(ngDevMode ? [{\n    debugName: \"id\"\n  }] : []));\n  ariaControls = computed(() => `${this.pcStepper.id()}_steppanel_${this.value()}`, ...(ngDevMode ? [{\n    debugName: \"ariaControls\"\n  }] : []));\n  isSeparatorVisible = computed(() => {\n    if (this.pcStepper.stepList()) {\n      const steps = this.pcStepper.stepList().steps();\n      const index = steps.indexOf(this);\n      const stepLen = steps.length;\n      return index !== stepLen - 1;\n    } else {\n      return false;\n    }\n  }, ...(ngDevMode ? [{\n    debugName: \"isSeparatorVisible\"\n  }] : []));\n  /**\n   * Content template.\n   * @type {TemplateRef<StepContentTemplateContext>}\n   * @group Templates\n   */\n  content;\n  templates;\n  _contentTemplate;\n  _componentStyle = inject(StepStyle);\n  ngAfterContentInit() {\n    this.templates?.forEach(item => {\n      switch (item.getType()) {\n        case 'content':\n          this._contentTemplate = item.template;\n          break;\n      }\n    });\n  }\n  onStepClick() {\n    this.pcStepper.updateValue(this.value());\n  }\n  static ɵfac = /* @__PURE__ */(() => {\n    let ɵStep_BaseFactory;\n    return function Step_Factory(__ngFactoryType__) {\n      return (ɵStep_BaseFactory || (ɵStep_BaseFactory = i0.ɵɵgetInheritedFactory(Step)))(__ngFactoryType__ || Step);\n    };\n  })();\n  static ɵcmp = /* @__PURE__ */i0.ɵɵdefineComponent({\n    type: Step,\n    selectors: [[\"p-step\"]],\n    contentQueries: function Step_ContentQueries(rf, ctx, dirIndex) {\n      if (rf & 1) {\n        i0.ɵɵcontentQuery(dirIndex, _c1, 4);\n        i0.ɵɵcontentQuery(dirIndex, PrimeTemplate, 4);\n      }\n      if (rf & 2) {\n        let _t;\n        i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.content = _t.first);\n        i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.templates = _t);\n      }\n    },\n    hostVars: 7,\n    hostBindings: function Step_HostBindings(rf, ctx) {\n      if (rf & 2) {\n        i0.ɵɵattribute(\"aria-current\", ctx.active() ? \"step\" : undefined)(\"role\", \"presentation\")(\"data-p-active\", ctx.active())(\"data-p-disabled\", ctx.isStepDisabled())(\"data-pc-name\", \"step\");\n        i0.ɵɵclassMap(ctx.cx(\"root\"));\n      }\n    },\n    inputs: {\n      value: [1, \"value\"],\n      disabled: [1, \"disabled\"]\n    },\n    outputs: {\n      value: \"valueChange\"\n    },\n    features: [i0.ɵɵProvidersFeature([StepStyle]), i0.ɵɵInheritDefinitionFeature],\n    ngContentSelectors: _c0,\n    decls: 2,\n    vars: 1,\n    consts: [[\"type\", \"button\", 3, \"click\", \"tabindex\", \"disabled\"], [4, \"ngTemplateOutlet\", \"ngTemplateOutletContext\"]],\n    template: function Step_Template(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵprojectionDef();\n        i0.ɵɵconditionalCreate(0, Step_Conditional_0_Template, 6, 13)(1, Step_Conditional_1_Template, 2, 7);\n      }\n      if (rf & 2) {\n        i0.ɵɵconditional(!ctx.content && !ctx._contentTemplate ? 0 : 1);\n      }\n    },\n    dependencies: [CommonModule, i1.NgTemplateOutlet, StepperSeparator, SharedModule],\n    encapsulation: 2,\n    changeDetection: 0\n  });\n}\n(() => {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(Step, [{\n    type: Component,\n    args: [{\n      selector: 'p-step',\n      standalone: true,\n      imports: [CommonModule, StepperSeparator, SharedModule],\n      template: `\n        @if (!content && !_contentTemplate) {\n            <button [attr.id]=\"id()\" [class]=\"cx('header')\" [attr.role]=\"'tab'\" [tabindex]=\"isStepDisabled() ? -1 : undefined\" [attr.aria-controls]=\"ariaControls()\" [disabled]=\"isStepDisabled()\" (click)=\"onStepClick()\" type=\"button\">\n                <span [class]=\"cx('number')\">{{ value() }}</span>\n                <span [class]=\"cx('title')\">\n                    <ng-content></ng-content>\n                </span>\n            </button>\n            @if (isSeparatorVisible()) {\n                <p-stepper-separator />\n            }\n        } @else {\n            <ng-container *ngTemplateOutlet=\"content || _contentTemplate; context: { activateCallback: onStepClick.bind(this), value: value(), active: active() }\"></ng-container>\n            @if (isSeparatorVisible()) {\n                <p-stepper-separator />\n            }\n        }\n    `,\n      changeDetection: ChangeDetectionStrategy.OnPush,\n      encapsulation: ViewEncapsulation.None,\n      host: {\n        '[class]': 'cx(\"root\")',\n        '[attr.aria-current]': 'active() ? \"step\" : undefined',\n        '[attr.role]': '\"presentation\"',\n        '[attr.data-p-active]': 'active()',\n        '[attr.data-p-disabled]': 'isStepDisabled()',\n        '[attr.data-pc-name]': '\"step\"'\n      },\n      providers: [StepStyle]\n    }]\n  }], null, {\n    content: [{\n      type: ContentChild,\n      args: ['content', {\n        descendants: false\n      }]\n    }],\n    templates: [{\n      type: ContentChildren,\n      args: [PrimeTemplate]\n    }]\n  });\n})();\n/**\n * StepPanel is a helper component for Stepper component.\n * @group Components\n */\nclass StepPanel extends BaseComponent {\n  pcStepper = inject(forwardRef(() => Stepper));\n  transitionOptions = computed(() => this.pcStepper.transitionOptions(), ...(ngDevMode ? [{\n    debugName: \"transitionOptions\"\n  }] : []));\n  /**\n   * Active value of stepper.\n   * @type {number}\n   * @defaultValue undefined\n   * @group Props\n   */\n  value = model(undefined, ...(ngDevMode ? [{\n    debugName: \"value\"\n  }] : []));\n  active = computed(() => this.pcStepper.value() === this.value(), ...(ngDevMode ? [{\n    debugName: \"active\"\n  }] : []));\n  visible = signal(this.active(), ...(ngDevMode ? [{\n    debugName: \"visible\"\n  }] : []));\n  isVisible = computed(() => this.active() || this.isVertical() && this.visible(), ...(ngDevMode ? [{\n    debugName: \"isVisible\"\n  }] : []));\n  ariaControls = computed(() => `${this.pcStepper.id()}_step_${this.value()}`, ...(ngDevMode ? [{\n    debugName: \"ariaControls\"\n  }] : []));\n  id = computed(() => `${this.pcStepper.id()}_steppanel_${this.value()}`, ...(ngDevMode ? [{\n    debugName: \"id\"\n  }] : []));\n  isVertical = computed(() => this.pcStepper.stepItems().length > 0, ...(ngDevMode ? [{\n    debugName: \"isVertical\"\n  }] : []));\n  isSeparatorVisible = computed(() => {\n    if (this.pcStepper.stepItems()) {\n      const stepLen = this.pcStepper.stepItems().length;\n      const stepPanelElements = find(this.pcStepper.el.nativeElement, '[data-pc-name=\"steppanel\"]');\n      const index = findIndexInList(this.el.nativeElement, stepPanelElements);\n      return index !== stepLen - 1;\n    }\n  }, ...(ngDevMode ? [{\n    debugName: \"isSeparatorVisible\"\n  }] : []));\n  /**\n   * Content template.\n   * @param {StepPanelContentTemplateContext} context - Context of the template\n   * @see {@link StepPanelContentTemplateContext}\n   * @group Templates\n   */\n  contentTemplate;\n  templates;\n  _contentTemplate;\n  _componentStyle = inject(StepPanelStyle);\n  ngAfterContentInit() {\n    this.templates?.forEach(item => {\n      switch (item.getType()) {\n        case 'content':\n          this._contentTemplate = item.template;\n          break;\n      }\n    });\n  }\n  onAnimationStart(event) {\n    if (event.toState === 'visible') {\n      this.visible.set(true);\n    }\n  }\n  onAnimationEnd(event) {\n    if (event.toState === 'hidden') {\n      this.visible.set(false);\n    }\n  }\n  updateValue(value) {\n    this.pcStepper.updateValue(value);\n  }\n  static ɵfac = /* @__PURE__ */(() => {\n    let ɵStepPanel_BaseFactory;\n    return function StepPanel_Factory(__ngFactoryType__) {\n      return (ɵStepPanel_BaseFactory || (ɵStepPanel_BaseFactory = i0.ɵɵgetInheritedFactory(StepPanel)))(__ngFactoryType__ || StepPanel);\n    };\n  })();\n  static ɵcmp = /* @__PURE__ */i0.ɵɵdefineComponent({\n    type: StepPanel,\n    selectors: [[\"p-step-panel\"]],\n    contentQueries: function StepPanel_ContentQueries(rf, ctx, dirIndex) {\n      if (rf & 1) {\n        i0.ɵɵcontentQuery(dirIndex, _c1, 5);\n        i0.ɵɵcontentQuery(dirIndex, PrimeTemplate, 4);\n      }\n      if (rf & 2) {\n        let _t;\n        i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.contentTemplate = _t.first);\n        i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.templates = _t);\n      }\n    },\n    hostVars: 7,\n    hostBindings: function StepPanel_HostBindings(rf, ctx) {\n      if (rf & 2) {\n        i0.ɵɵattribute(\"role\", \"tabpanel\")(\"aria-controls\", ctx.ariaControls())(\"id\", ctx.id())(\"data-p-active\", ctx.active())(\"data-pc-name\", \"steppanel\");\n        i0.ɵɵclassMap(ctx.cx(\"root\"));\n      }\n    },\n    inputs: {\n      value: [1, \"value\"]\n    },\n    outputs: {\n      value: \"valueChange\"\n    },\n    features: [i0.ɵɵProvidersFeature([StepPanelStyle]), i0.ɵɵInheritDefinitionFeature],\n    decls: 3,\n    vars: 13,\n    consts: [[4, \"ngTemplateOutlet\", \"ngTemplateOutletContext\"]],\n    template: function StepPanel_Template(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵconditionalCreate(0, StepPanel_Conditional_0_Template, 1, 0, \"p-stepper-separator\");\n        i0.ɵɵelementStart(1, \"div\");\n        i0.ɵɵlistener(\"@content.start\", function StepPanel_Template_div_animation_content_start_1_listener($event) {\n          return ctx.onAnimationStart($event);\n        })(\"@content.done\", function StepPanel_Template_div_animation_content_done_1_listener($event) {\n          return ctx.onAnimationEnd($event);\n        });\n        i0.ɵɵconditionalCreate(2, StepPanel_Conditional_2_Template, 1, 6, \"ng-container\");\n        i0.ɵɵelementEnd();\n      }\n      if (rf & 2) {\n        i0.ɵɵconditional(ctx.isSeparatorVisible() ? 0 : -1);\n        i0.ɵɵadvance();\n        i0.ɵɵclassMap(ctx.cx(\"content\"));\n        i0.ɵɵproperty(\"@content\", ctx.isVertical() ? ctx.active() ? i0.ɵɵpureFunction1(7, _c4, i0.ɵɵpureFunction1(5, _c3, ctx.transitionOptions())) : i0.ɵɵpureFunction1(11, _c5, i0.ɵɵpureFunction1(9, _c3, ctx.transitionOptions())) : undefined);\n        i0.ɵɵadvance();\n        i0.ɵɵconditional(ctx.isVisible() ? 2 : -1);\n      }\n    },\n    dependencies: [CommonModule, i1.NgTemplateOutlet, StepperSeparator, SharedModule],\n    encapsulation: 2,\n    data: {\n      animation: [trigger('content', [state('hidden', style$1({\n        height: '0'\n      })), state('visible', style$1({\n        height: '*'\n      })), transition('visible <=> hidden', [animate('400ms cubic-bezier(0.86, 0, 0.07, 1)')]), transition('void => *', animate(0))])]\n    },\n    changeDetection: 0\n  });\n}\n(() => {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(StepPanel, [{\n    type: Component,\n    args: [{\n      selector: 'p-step-panel',\n      standalone: true,\n      imports: [CommonModule, StepperSeparator, SharedModule],\n      template: `\n        @if (isSeparatorVisible()) {\n            <p-stepper-separator />\n        }\n        <div\n            [class]=\"cx('content')\"\n            [@content]=\"isVertical() ? (active() ? { value: 'visible', params: { transitionParams: transitionOptions() } } : { value: 'hidden', params: { transitionParams: transitionOptions() } }) : undefined\"\n            (@content.start)=\"onAnimationStart($event)\"\n            (@content.done)=\"onAnimationEnd($event)\"\n        >\n            @if (isVisible()) {\n                <ng-container *ngTemplateOutlet=\"contentTemplate || _contentTemplate; context: { activateCallback: updateValue.bind(this), value: value(), active: active() }\"></ng-container>\n            }\n        </div>\n    `,\n      changeDetection: ChangeDetectionStrategy.OnPush,\n      encapsulation: ViewEncapsulation.None,\n      host: {\n        '[class]': 'cx(\"root\")',\n        '[attr.role]': '\"tabpanel\"',\n        '[attr.aria-controls]': 'ariaControls()',\n        '[attr.id]': 'id()',\n        '[attr.data-p-active]': 'active()',\n        '[attr.data-pc-name]': '\"steppanel\"'\n      },\n      animations: [trigger('content', [state('hidden', style$1({\n        height: '0'\n      })), state('visible', style$1({\n        height: '*'\n      })), transition('visible <=> hidden', [animate('400ms cubic-bezier(0.86, 0, 0.07, 1)')]), transition('void => *', animate(0))])],\n      providers: [StepPanelStyle]\n    }]\n  }], null, {\n    contentTemplate: [{\n      type: ContentChild,\n      args: ['content']\n    }],\n    templates: [{\n      type: ContentChildren,\n      args: [PrimeTemplate]\n    }]\n  });\n})();\nclass StepPanels extends BaseComponent {\n  _componentStyle = inject(StepPanelsStyle);\n  static ɵfac = /* @__PURE__ */(() => {\n    let ɵStepPanels_BaseFactory;\n    return function StepPanels_Factory(__ngFactoryType__) {\n      return (ɵStepPanels_BaseFactory || (ɵStepPanels_BaseFactory = i0.ɵɵgetInheritedFactory(StepPanels)))(__ngFactoryType__ || StepPanels);\n    };\n  })();\n  static ɵcmp = /* @__PURE__ */i0.ɵɵdefineComponent({\n    type: StepPanels,\n    selectors: [[\"p-step-panels\"]],\n    hostVars: 2,\n    hostBindings: function StepPanels_HostBindings(rf, ctx) {\n      if (rf & 2) {\n        i0.ɵɵclassMap(ctx.cx(\"root\"));\n      }\n    },\n    features: [i0.ɵɵProvidersFeature([StepPanelsStyle]), i0.ɵɵInheritDefinitionFeature],\n    ngContentSelectors: _c0,\n    decls: 1,\n    vars: 0,\n    template: function StepPanels_Template(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵprojectionDef();\n        i0.ɵɵprojection(0);\n      }\n    },\n    dependencies: [CommonModule, SharedModule],\n    encapsulation: 2,\n    changeDetection: 0\n  });\n}\n(() => {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(StepPanels, [{\n    type: Component,\n    args: [{\n      selector: 'p-step-panels',\n      standalone: true,\n      imports: [CommonModule, SharedModule],\n      template: ` <ng-content></ng-content>`,\n      changeDetection: ChangeDetectionStrategy.OnPush,\n      encapsulation: ViewEncapsulation.None,\n      host: {\n        '[class]': 'cx(\"root\")'\n      },\n      providers: [StepPanelsStyle]\n    }]\n  }], null, null);\n})();\n/**\n * Stepper is a component that streamlines a wizard-like workflow, organizing content into coherent steps and visually guiding users through a numbered progression in a multistep process.\n * @group Components\n */\nclass Stepper extends BaseComponent {\n  /**\n   * A model that can hold a numeric value or be undefined.\n   * @defaultValue undefined\n   * @type {ModelSignal<number | undefined>}\n   * @group Props\n   */\n  value = model(undefined, ...(ngDevMode ? [{\n    debugName: \"value\"\n  }] : []));\n  /**\n   * A boolean variable that captures user input.\n   * @defaultValue false\n   * @type {InputSignalWithTransform<any, boolean >}\n   * @group Props\n   */\n  linear = input(false, ...(ngDevMode ? [{\n    debugName: \"linear\",\n    transform: v => transformToBoolean(v)\n  }] : [{\n    transform: v => transformToBoolean(v)\n  }]));\n  /**\n   * Transition options of the animation.\n   * @defaultValue 400ms cubic-bezier(0.86, 0, 0.07, 1)\n   * @type {InputSignal<string >}\n   * @group Props\n   */\n  transitionOptions = input('400ms cubic-bezier(0.86, 0, 0.07, 1)', ...(ngDevMode ? [{\n    debugName: \"transitionOptions\"\n  }] : []));\n  _componentStyle = inject(StepperStyle);\n  id = signal(uuid('pn_id_'), ...(ngDevMode ? [{\n    debugName: \"id\"\n  }] : []));\n  stepItems = contentChildren(StepItem, ...(ngDevMode ? [{\n    debugName: \"stepItems\"\n  }] : []));\n  steps = contentChildren(Step, ...(ngDevMode ? [{\n    debugName: \"steps\"\n  }] : []));\n  stepList = contentChild(StepList, ...(ngDevMode ? [{\n    debugName: \"stepList\"\n  }] : []));\n  updateValue(value) {\n    this.value.set(value);\n  }\n  isStepActive(value) {\n    return this.value() === value;\n  }\n  static ɵfac = /* @__PURE__ */(() => {\n    let ɵStepper_BaseFactory;\n    return function Stepper_Factory(__ngFactoryType__) {\n      return (ɵStepper_BaseFactory || (ɵStepper_BaseFactory = i0.ɵɵgetInheritedFactory(Stepper)))(__ngFactoryType__ || Stepper);\n    };\n  })();\n  static ɵcmp = /* @__PURE__ */i0.ɵɵdefineComponent({\n    type: Stepper,\n    selectors: [[\"p-stepper\"]],\n    contentQueries: function Stepper_ContentQueries(rf, ctx, dirIndex) {\n      if (rf & 1) {\n        i0.ɵɵcontentQuerySignal(dirIndex, ctx.stepItems, StepItem, 4);\n        i0.ɵɵcontentQuerySignal(dirIndex, ctx.steps, Step, 4);\n        i0.ɵɵcontentQuerySignal(dirIndex, ctx.stepList, StepList, 5);\n      }\n      if (rf & 2) {\n        i0.ɵɵqueryAdvance(3);\n      }\n    },\n    hostVars: 4,\n    hostBindings: function Stepper_HostBindings(rf, ctx) {\n      if (rf & 2) {\n        i0.ɵɵattribute(\"role\", \"tablist\")(\"id\", ctx.id());\n        i0.ɵɵclassMap(ctx.cx(\"root\"));\n      }\n    },\n    inputs: {\n      value: [1, \"value\"],\n      linear: [1, \"linear\"],\n      transitionOptions: [1, \"transitionOptions\"]\n    },\n    outputs: {\n      value: \"valueChange\"\n    },\n    features: [i0.ɵɵProvidersFeature([StepperStyle]), i0.ɵɵInheritDefinitionFeature],\n    ngContentSelectors: _c0,\n    decls: 1,\n    vars: 0,\n    template: function Stepper_Template(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵprojectionDef();\n        i0.ɵɵprojection(0);\n      }\n    },\n    dependencies: [CommonModule, SharedModule],\n    encapsulation: 2,\n    changeDetection: 0\n  });\n}\n(() => {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(Stepper, [{\n    type: Component,\n    args: [{\n      selector: 'p-stepper',\n      standalone: true,\n      imports: [CommonModule, SharedModule],\n      template: ` <ng-content></ng-content>`,\n      changeDetection: ChangeDetectionStrategy.OnPush,\n      encapsulation: ViewEncapsulation.None,\n      providers: [StepperStyle],\n      host: {\n        '[class]': 'cx(\"root\")',\n        '[attr.role]': '\"tablist\"',\n        '[attr.id]': 'id()'\n      }\n    }]\n  }], null, null);\n})();\nclass StepperModule {\n  static ɵfac = function StepperModule_Factory(__ngFactoryType__) {\n    return new (__ngFactoryType__ || StepperModule)();\n  };\n  static ɵmod = /* @__PURE__ */i0.ɵɵdefineNgModule({\n    type: StepperModule,\n    imports: [Stepper, StepList, StepPanels, StepPanel, StepItem, Step, StepperSeparator, SharedModule],\n    exports: [Stepper, StepList, StepPanels, StepPanel, StepItem, Step, StepperSeparator, SharedModule]\n  });\n  static ɵinj = /* @__PURE__ */i0.ɵɵdefineInjector({\n    imports: [Stepper, StepList, StepPanels, StepPanel, StepItem, Step, StepperSeparator, SharedModule, SharedModule]\n  });\n}\n(() => {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(StepperModule, [{\n    type: NgModule,\n    args: [{\n      imports: [Stepper, StepList, StepPanels, StepPanel, StepItem, Step, StepperSeparator, SharedModule],\n      exports: [Stepper, StepList, StepPanels, StepPanel, StepItem, Step, StepperSeparator, SharedModule]\n    }]\n  }], null, null);\n})();\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { Step, StepItem, StepList, StepPanel, StepPanels, Stepper, StepperClasses, StepperModule, StepperSeparator, StepperStyle };\n","import { Component, input, model, output } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { ButtonModule } from 'primeng/button';\nimport { StepperModule } from 'primeng/stepper';\nimport { Step } from '../../models';\n\n@Component({\n  selector: 'app-stepper',\n  imports: [CommonModule, ButtonModule, StepperModule],\n  templateUrl: './stepper.component.html',\n  styleUrls: ['./stepper.component.scss'],\n})\nexport class StepperComponent {\n  readonly steps = input<Step[]>([]);\n  readonly currentStepValue = model<number>(1);\n  readonly showNavButtons = input(true);\n  readonly linearProgression = input(false);\n  readonly containerClass = input('basis-[50rem]');\n  readonly showSteps = input(true);\n\n  readonly stepChange = output<number>();\n  readonly complete = output<void>();\n  readonly nextStep = output<number>();\n  readonly prevStep = output<number>();\n  readonly loading = input(false);\n\n  isLastStep(value: number): boolean {\n    return value === Math.max(...this.steps().map((s) => s.value));\n  }\n\n  isFirstStep(value: number): boolean {\n    return value === Math.min(...this.steps().map((s) => s.value));\n  }\n\n  getNextStep(currentValue: number): number {\n    const sortedValues = [...this.steps().map((s) => s.value)].sort(\n      (a, b) => a - b,\n    );\n    const currentIndex = sortedValues.indexOf(currentValue);\n    return sortedValues[currentIndex + 1] || currentValue;\n  }\n\n  getPrevStep(currentValue: number): number {\n    const sortedValues = [...this.steps().map((s) => s.value)].sort(\n      (a, b) => a - b,\n    );\n    const currentIndex = sortedValues.indexOf(currentValue);\n    return sortedValues[currentIndex - 1] || currentValue;\n  }\n\n  // Methods for external navigation\n  goNext(): void {\n    const nextStep = this.getNextStep(this.currentStepValue());\n    if (nextStep !== this.currentStepValue()) {\n      this.currentStepValue.set(nextStep);\n      this.stepChange.emit(nextStep);\n      this.nextStep.emit(nextStep);\n    }\n  }\n\n  goBack(): void {\n    const prevStep = this.getPrevStep(this.currentStepValue());\n    if (prevStep !== this.currentStepValue()) {\n      this.currentStepValue.set(prevStep);\n      this.stepChange.emit(prevStep);\n      this.prevStep.emit(prevStep);\n    }\n  }\n\n  // Check if we can finish the wizard\n  canFinish(): boolean {\n    return (\n      this.isLastStep(this.currentStepValue()) &&\n      !(this.getCurrentStep()?.disableNext ?? false)\n    );\n  }\n\n  // Get the current step object\n  getCurrentStep(): Step | undefined {\n    return this.steps().find((s) => s.value === this.currentStepValue());\n  }\n}\n","<div class=\"card flex justify-center\">\n  <p-stepper\n    [value]=\"currentStepValue()\"\n    [class]=\"containerClass()\"\n    [linear]=\"linearProgression()\"\n  >\n    @if (showSteps()) {\n      <p-step-list>\n        @for (step of steps(); track step.value) {\n          <p-step [value]=\"step.value\">{{ step.header }}</p-step>\n        }\n      </p-step-list>\n    }\n    <p-step-panels>\n      @for (step of steps(); track step.value) {\n        <p-step-panel [value]=\"step.value\">\n          <ng-template\n            pTemplate=\"content\"\n            let-activateCallback=\"activateCallback\"\n          >\n            <div class=\"flex flex-col\">\n              <div class=\"min-h-48\">\n                <!-- Content container -->\n                <ng-container\n                  *ngTemplateOutlet=\"step.content; context: { $implicit: step }\"\n                ></ng-container>\n              </div>\n\n              @if (showNavButtons()) {\n                <div\n                  class=\"flex pt-6\"\n                  [ngClass]=\"{\n                    'justify-end': isFirstStep(step.value),\n                    'justify-between':\n                      !isFirstStep(step.value) && !isLastStep(step.value),\n                    'justify-start': isLastStep(step.value),\n                  }\"\n                >\n                  @if (!isFirstStep(step.value)) {\n                    <p-button\n                      label=\"Back\"\n                      severity=\"secondary\"\n                      icon=\"pi pi-arrow-left\"\n                      (onClick)=\"activateCallback(getPrevStep(step.value))\"\n                    />\n                  }\n\n                  @if (!isLastStep(step.value)) {\n                    <p-button\n                      label=\"Next\"\n                      icon=\"pi pi-arrow-right\"\n                      iconPos=\"right\"\n                      (onClick)=\"activateCallback(getNextStep(step.value))\"\n                      [disabled]=\"step.disableNext\"\n                    />\n                  } @else {\n                    <p-button\n                      label=\"Finish\"\n                      icon=\"pi pi-check\"\n                      iconPos=\"right\"\n                      severity=\"success\"\n                      [loading]=\"loading()\"\n                      (onClick)=\"complete.emit()\"\n                    />\n                  }\n                </div>\n              }\n            </div>\n          </ng-template>\n        </p-step-panel>\n      }\n    </p-step-panels>\n  </p-stepper>\n</div>\n","import { Component, input, model, output, ViewChild } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { DialogModule } from 'primeng/dialog';\nimport { ButtonModule } from 'primeng/button';\nimport { StepperComponent } from '../stepper/stepper.component';\nimport { Step } from '../../models';\n\n@Component({\n  selector: 'app-wizard',\n  standalone: true,\n  imports: [CommonModule, DialogModule, ButtonModule, StepperComponent],\n  templateUrl: './wizard.component.html',\n  styleUrls: ['./wizard.component.scss'],\n})\nexport class WizardComponent {\n  @ViewChild(StepperComponent) stepper?: StepperComponent;\n\n  // Input properties\n  readonly steps = input<Step[]>([]);\n  readonly visible = model<boolean>(false);\n  readonly header = input('Wizard');\n  readonly linearProgression = input(true);\n  readonly showFooterButtons = input(true);\n  readonly closeOnEscape = input(true);\n  readonly useWizardButtonsOnly = input(false);\n  readonly showSteps = input(true);\n  readonly contentOnly = input(false);\n  readonly loading = model<boolean>(false);\n\n  // Output properties\n  readonly visibleChange = output<boolean>();\n  readonly onCancel = output<void>();\n  readonly complete = output<Step[]>();\n  readonly stepChange = output<number>();\n\n  // Component state\n  currentStep = 1;\n\n  hideDialog(): void {\n    this.visible.set(false);\n    this.visibleChange.emit(false);\n  }\n\n  cancelWizard(): void {\n    this.onCancel.emit();\n    this.hideDialog();\n  }\n\n  onComplete(): void {\n    // Verify steps exist\n    if (this.steps().length === 0) {\n      console.warn('No steps defined in the wizard');\n      return;\n    }\n\n    this.complete.emit(this.steps());\n    this.hideDialog();\n  }\n\n  test() {\n    this.loading.set(true);\n  }\n\n  onStepComplete(): void {\n    this.onComplete();\n  }\n\n  onStepChange(step: number): void {\n    this.currentStep = step;\n    this.stepChange.emit(step);\n  }\n\n  isLastStep(): boolean {\n    if (this.steps().length === 0) return true;\n    return this.currentStep === Math.max(...this.steps().map((s) => s.value));\n  }\n\n  isFirstStep(): boolean {\n    if (this.steps().length === 0) return true;\n    return this.currentStep === Math.min(...this.steps().map((s) => s.value));\n  }\n\n  // Methods for footer buttons\n  async goNext(): Promise<void> {\n    // Check if current step needs validation\n    const currentStepData = this.steps().find(\n      (s) => s.value === this.currentStep,\n    );\n\n    if (currentStepData?.validate) {\n      // Run validation function\n      const validationResult = currentStepData.validate();\n\n      // Handle both synchronous and async validation\n      if (validationResult instanceof Promise) {\n        await validationResult.then((isValid) => {\n          if (isValid) {\n            // Only proceed if validation passed\n            this.stepper?.goNext();\n          }\n        });\n      } else if (validationResult) {\n        // If synchronous and valid\n        this.stepper?.goNext();\n      }\n    } else {\n      // No validation required, proceed\n      this.stepper?.goNext();\n    }\n  }\n\n  canGoNext(): boolean {\n    // Check if we can go to next step\n    const currentStepData = this.steps().find(\n      (s) => s.value === this.currentStep,\n    );\n\n    // Add the validation check to the existing conditions\n    return !this.isLastStep() && !(currentStepData?.disableNext ?? false);\n    // Note: The actual form validation is handled by the disableNext property,\n    // which should be updated by the form's validity state\n  }\n\n  goBack(): void {\n    this.stepper?.goBack();\n  }\n\n  canFinish(): boolean {\n    return this.isLastStep() && (this.stepper?.canFinish() ?? false);\n  }\n}\n","<!-- If contentOnly is true, don't use p-dialog -->\n@if (contentOnly()) {\n  <div class=\"wizard-content\">\n    <app-stepper\n      [steps]=\"steps()\"\n      [currentStepValue]=\"currentStep\"\n      [linearProgression]=\"linearProgression()\"\n      [showNavButtons]=\"!useWizardButtonsOnly()\"\n      [showSteps]=\"showSteps()\"\n      [loading]=\"loading()\"\n      (stepChange)=\"onStepChange($event)\"\n      (complete)=\"onStepComplete()\"\n    >\n    </app-stepper>\n  </div>\n  <!-- Footer buttons without dialog -->\n  @if (showFooterButtons()) {\n    <div class=\"flex justify-end gap-2 w-full mt-3\">\n      <p-button\n        label=\"Cancel\"\n        icon=\"pi pi-times\"\n        severity=\"secondary\"\n        (onClick)=\"cancelWizard()\"\n      ></p-button>\n      @if (!isFirstStep()) {\n        <p-button\n          label=\"Back\"\n          icon=\"pi pi-arrow-left\"\n          severity=\"secondary\"\n          (onClick)=\"goBack()\"\n        ></p-button>\n      }\n      @if (!isLastStep()) {\n        <p-button\n          label=\"Next\"\n          icon=\"pi pi-arrow-right\"\n          iconPos=\"right\"\n          [disabled]=\"!canGoNext()\"\n          (onClick)=\"goNext()\"\n        ></p-button>\n      }\n      @if (isLastStep()) {\n        <p-button\n          label=\"Finish\"\n          icon=\"pi pi-check\"\n          severity=\"primary\"\n          [disabled]=\"!canFinish()\"\n          [loading]=\"loading()\"\n          (onClick)=\"onComplete()\"\n        ></p-button>\n      }\n    </div>\n  }\n} @else {\n  <p-dialog\n    [visible]=\"visible()\"\n    [header]=\"header()\"\n    [modal]=\"true\"\n    [draggable]=\"false\"\n    [resizable]=\"false\"\n    [closeOnEscape]=\"closeOnEscape()\"\n    (onHide)=\"hideDialog()\"\n    (visibleChange)=\"hideDialog()\"\n    styleClass=\"wizard-dialog\"\n  >\n    <!-- Existing dialog content -->\n    <div class=\"wizard-content\">\n      <app-stepper\n        [steps]=\"steps()\"\n        [currentStepValue]=\"currentStep\"\n        [linearProgression]=\"linearProgression()\"\n        [showNavButtons]=\"!useWizardButtonsOnly()\"\n        [showSteps]=\"showSteps()\"\n        [loading]=\"loading()\"\n        (stepChange)=\"onStepChange($event)\"\n        (complete)=\"onStepComplete()\"\n      >\n      </app-stepper>\n    </div>\n    <ng-template pTemplate=\"footer\">\n      <!-- Existing footer buttons -->\n      @if (showFooterButtons()) {\n        <div class=\"flex justify-end gap-2 w-full\">\n          <p-button\n            label=\"Cancel\"\n            icon=\"pi pi-times\"\n            severity=\"secondary\"\n            (onClick)=\"cancelWizard()\"\n          ></p-button>\n          @if (!isFirstStep()) {\n            <p-button\n              label=\"Back\"\n              icon=\"pi pi-arrow-left\"\n              severity=\"secondary\"\n              (onClick)=\"goBack()\"\n            ></p-button>\n          }\n          @if (!isLastStep()) {\n            <p-button\n              label=\"Next\"\n              icon=\"pi pi-arrow-right\"\n              iconPos=\"right\"\n              [disabled]=\"!canGoNext()\"\n              (onClick)=\"goNext()\"\n            ></p-button>\n          }\n          @if (isLastStep()) {\n            <p-button\n              label=\"Finish\"\n              icon=\"pi pi-check\"\n              severity=\"primary\"\n              [disabled]=\"!canFinish()\"\n              [loading]=\"loading()\"\n              (onClick)=\"onComplete()\"\n            ></p-button>\n          }\n        </div>\n      }\n    </ng-template>\n  </p-dialog>\n}\n\n<!-- Original dialog version -->\n","import {\n  AfterViewInit,\n  Component,\n  DestroyRef,\n  inject,\n  OnInit,\n  signal,\n  TemplateRef,\n  ViewChild,\n} from '@angular/core';\nimport { takeUntilDestroyed } from '@angular/core/rxjs-interop';\nimport { CommonModule } from '@angular/common';\nimport { ReactiveFormsModule } from '@angular/forms';\n\nimport { ButtonModule } from 'primeng/button';\nimport { DynamicDialogRef, DynamicDialogConfig } from 'primeng/dynamicdialog';\n\nimport {\n  EntitiesService,\n  DeviceProviderCreateRequest,\n  DeviceProviderResponse,\n  DeviceProviderTypeResponse,\n} from '../../../../../api';\nimport { isDefined, isNullOrUndefined } from '../../../../../shared/utils';\nimport { BroadcastEventMessageService } from '../../../services/broadcast-event-messages.service';\nimport { DeviceProviderDetailsSectionComponent } from '../device-provider-details-section/device-provider-details-section.component';\nimport { Step } from '../../../../../shared/models';\nimport { WizardComponent } from '../../../../../shared/components/wizard/wizard.component';\nimport { DeviceProviderParametersSectionComponent } from '../device-provider-parameters-section/device-provider-parameters-section.component';\nimport { RequestCacheService } from '../../../../../shared/services/request-cache.service';\nimport { finalize, firstValueFrom } from 'rxjs';\nimport { FormBuilderField } from '../../device/device-accessory-section/device-accessory-section.component';\n\n@Component({\n  selector: 'app-device-provider-create-wizard',\n  imports: [\n    CommonModule,\n    ReactiveFormsModule,\n    WizardComponent,\n    ButtonModule,\n    DeviceProviderDetailsSectionComponent,\n    DeviceProviderParametersSectionComponent,\n  ],\n  templateUrl: './device-provider-create-wizard.component.html',\n  styleUrl: './device-provider-create-wizard.component.scss',\n})\nexport class DeviceProviderCreateWizardComponent\n  implements AfterViewInit, OnInit\n{\n  @ViewChild('deviceProviderDetailsStep')\n  deviceProviderDetailsStep!: TemplateRef<{\n    $implicit: Step;\n  }> | null;\n  @ViewChild('deviceProviderParametersStep')\n  deviceProviderParametersStep!: TemplateRef<{\n    $implicit: Step;\n  }>;\n  @ViewChild('confirmationTemplate', { static: true })\n  confirmationTemplate!: TemplateRef<{ $implicit: Step }> | null;\n\n  // References to form components\n  @ViewChild('deviceProviderDetailsForm')\n  deviceProviderDetailsForm!: DeviceProviderDetailsSectionComponent;\n  @ViewChild('deviceProviderParametersForm')\n  deviceProviderParametersForm!: DeviceProviderParametersSectionComponent;\n  private readonly entitiesService = inject(EntitiesService);\n  private readonly broadcastService = inject(BroadcastEventMessageService);\n  private readonly cacheService = inject(RequestCacheService);\n  protected readonly destroyRef = inject(DestroyRef);\n  private readonly dialogRef = inject(DynamicDialogRef);\n  private readonly dialogConfig = inject(DynamicDialogConfig);\n\n  // DeviceProvider model to collect data across steps\n  newDeviceProvider = signal<DeviceProviderCreateRequest>(\n    {} as DeviceProviderCreateRequest,\n  );\n  readonly deviceProviderParametersFields = signal<\n    { key: string; title: string }[] | null\n  >(null);\n  deviceProviderType = signal<DeviceProviderTypeResponse | null>(null);\n  // Form validity state\n  formIsValid = signal<boolean>(false);\n\n  displayWizard = false;\n  steps: Step[] = [];\n  previousStepIndex = 0;\n  currentStepIndex = 0;\n  ownerId: string | null = null;\n  isSubmitting = signal<boolean>(false);\n\n  ngAfterViewInit() {\n    setTimeout(() => {\n      // Only update the view-dependent properties\n      this.steps[0].content = this.deviceProviderDetailsStep;\n      this.steps[0].validate = () => this.deviceProviderDetailsForm.validate();\n\n      this.steps[1].content = this.deviceProviderParametersStep;\n      this.steps[1].validate = () =>\n        this.deviceProviderParametersForm.validate();\n\n      this.steps[2].content = this.confirmationTemplate;\n      this.steps[2].validate = () => true;\n    });\n  }\n\n  ngOnInit(): void {\n    if (isDefined(this.dialogConfig.data)) {\n      this.ownerId = this.dialogConfig.data.ownerId ?? null;\n\n      // Initialize deviceProvider with ownerId\n      this.newDeviceProvider.update((current) => ({\n        ...current,\n        ownerId: this.ownerId ?? '',\n      }));\n    }\n\n    this.steps = [\n      {\n        value: 1,\n        header: 'Device Provider Details',\n        complete: false,\n        content: null,\n      },\n      {\n        value: 2,\n        header: 'Device Provider Parameters',\n        content: null,\n        complete: false,\n      },\n      {\n        value: 3,\n        header: 'Confirmation',\n        complete: true,\n        content: null,\n      },\n    ];\n  }\n\n  openWizard() {\n    this.displayWizard = true;\n    this.newDeviceProvider.set({} as DeviceProviderCreateRequest);\n  }\n\n  // Form validity handlers\n  onDetailsFormValidityChange(isValid: boolean) {\n    this.steps[0].disableNext = !isValid;\n    this.formIsValid.set(isValid);\n  }\n\n  onParametersFormValidityChange(isValid: boolean) {\n    this.steps[1].disableNext = !isValid;\n    this.formIsValid.set(isValid);\n  }\n\n  updateDeviceProviderDetails(formData: Record<string, unknown>) {\n    this.newDeviceProvider.update((current) => {\n      const { ownerId: _ownerId, ...rest } = formData;\n      const updated = { ...current, ...rest };\n\n      if (isNullOrUndefined(updated.ownerId)) {\n        updated.ownerId = this.ownerId ?? '';\n      }\n\n      return updated;\n    });\n    this.loadDeviceProviderType(\n      this.newDeviceProvider().deviceProviderType?.id,\n    ).catch(() => {});\n  }\n\n  updateDeviceProviderParameters(formData: Record<string, unknown>) {\n    this.newDeviceProvider.update((current) => {\n      const updated = { ...current, ...formData };\n      return updated;\n    });\n  }\n\n  onWizardComplete(): void {\n    const deviceProviderData = this.newDeviceProvider();\n\n    if (\n      isNullOrUndefined(deviceProviderData) ||\n      Object.keys(deviceProviderData).length === 0\n    ) {\n      return;\n    }\n\n    this.isSubmitting.set(true);\n    this.entitiesService\n      .createDeviceProvider(deviceProviderData)\n      .pipe(\n        takeUntilDestroyed(this.destroyRef),\n        finalize(() => this.isSubmitting.set(false)),\n      )\n      .subscribe({\n        next: (response: DeviceProviderResponse) => {\n          this.broadcastService.broadcast('entity-updated', {\n            entityType: 'device-provider',\n            operation: 'create',\n            entityId: response.id,\n          });\n          this.dialogRef.close(response);\n        },\n      });\n  }\n\n  // Update cancel to close dialog with no result\n  onWizardCancel(): void {\n    this.newDeviceProvider.set({} as DeviceProviderCreateRequest);\n    this.dialogRef.close();\n  }\n\n  async loadDeviceProviderType(\n    deviceProviderTypeId: string | undefined,\n  ): Promise<void> {\n    if (isNullOrUndefined(deviceProviderTypeId)) return;\n    await this.cacheService\n      .getOrFetchAsync(\n        `deviceProviderType-${deviceProviderTypeId}`,\n        () =>\n          firstValueFrom(\n            this.entitiesService.getDeviceProviderType(deviceProviderTypeId),\n          ),\n        300000,\n      )\n      .then((response) => {\n        this.deviceProviderType.set(response);\n        const params: { groups: { fields: FormBuilderField[] }[] } = JSON.parse(\n          response.parameters,\n        );\n        const values: { key: string; title: string }[] = [];\n        params.groups.forEach((group) => {\n          group.fields.forEach((field: FormBuilderField) => {\n            values.push({\n              key: field.id,\n              title: field.title,\n            });\n          });\n        });\n        this.deviceProviderParametersFields.set(values);\n      });\n  }\n}\n","<app-wizard\n  [contentOnly]=\"true\"\n  [steps]=\"steps\"\n  [showSteps]=\"false\"\n  [useWizardButtonsOnly]=\"true\"\n  [loading]=\"isSubmitting()\"\n  (complete)=\"onWizardComplete()\"\n  (onCancel)=\"onWizardCancel()\"\n>\n</app-wizard>\n\n<!-- Step 1: Device Provider Details -->\n<ng-template #deviceProviderDetailsStep let-step>\n  <div class=\"p-fluid\">\n    <app-device-provider-details-section\n      #deviceProviderDetailsForm\n      [createMode]=\"true\"\n      [entity]=\"newDeviceProvider()\"\n      [ownerId]=\"ownerId\"\n      (formValidityChange)=\"onDetailsFormValidityChange($event)\"\n      (formValueChange)=\"updateDeviceProviderDetails($event)\"\n    ></app-device-provider-details-section>\n  </div>\n</ng-template>\n\n<ng-template #deviceProviderParametersStep let-step>\n  <div class=\"p-fluid\">\n    <app-device-provider-parameters-section\n      #deviceProviderParametersForm\n      [createMode]=\"true\"\n      [entity]=\"newDeviceProvider()\"\n      [deviceProviderType]=\"deviceProviderType()\"\n      (formValidityChange)=\"onParametersFormValidityChange($event)\"\n      (formValueChange)=\"updateDeviceProviderParameters($event)\"\n    ></app-device-provider-parameters-section>\n  </div>\n</ng-template>\n\n<ng-template #confirmationTemplate let-step>\n  <div class=\"flex gap-6\">\n    <span class=\"pi pi-check !text-5xl\"></span>\n\n    <div class=\"flex-1\">\n      <div class=\"grid\">\n        <!-- Device Provider Details Section -->\n        <div class=\"col-12 md:col-6\">\n          <p class=\"mb-4\">\n            You've completed all of the information required and we're ready to\n            create your Device Provider.\n          </p>\n\n          <div class=\"space-y-2\">\n            <!-- Each field in a side-by-side layout -->\n            <div class=\"flex\">\n              <div class=\"w-1/3 font-medium\">Type:</div>\n              <div class=\"w-2/3\">\n                {{ newDeviceProvider().deviceProviderType?.name }}\n              </div>\n            </div>\n\n            <div class=\"flex\">\n              <div class=\"w-1/3 font-medium\">Name:</div>\n              <div class=\"w-2/3\">\n                {{ newDeviceProvider().name || 'Not provided' }}\n              </div>\n            </div>\n\n            @for (item of deviceProviderParametersFields(); track $index) {\n              <div class=\"flex\">\n                <div class=\"w-1/3 font-medium\">{{ item.title }}:</div>\n                <div class=\"w-2/3\">\n                  {{ newDeviceProvider().parameters?.[item.key] }}\n                </div>\n              </div>\n            }\n          </div>\n        </div>\n      </div>\n\n      <div\n        class=\"mt-4 pt-4 border-top-1 border-surface-200 dark:border-surface-700\"\n      >\n        <p class=\"mb-0\">Click finish to create this Device Provider.</p>\n      </div>\n    </div>\n  </div>\n</ng-template>\n","import {\n  computed,\n  DestroyRef,\n  inject,\n  Injectable,\n  signal,\n} from '@angular/core';\nimport { takeUntilDestroyed } from '@angular/core/rxjs-interop';\nimport { tap } from 'rxjs';\n\nimport { TableLazyLoadEvent } from 'primeng/table';\n\nimport {\n  DataGridParams,\n  DATE_FORMATS,\n  FilterCriteria,\n  FilterValue,\n  GridColumn,\n  GridConfiguration,\n  GridDataService,\n} from '../../../shared/models';\nimport { DeviceProvidersDataAdapter } from '../services/adapters/device-providers-data-adapter.service';\nimport { DeviceProviderListItem, EntitiesService } from '../../../api';\nimport { UtilityService } from '../../../core/services/utility.service';\nimport { GridBaseService } from '../../../shared/services/grid-base.service';\nimport { DEFAULT_PAGE_SIZE } from '../../../core/models';\nimport { isDefined } from '../../../shared/utils';\nimport { DialogService, DynamicDialogRef } from 'primeng/dynamicdialog';\nimport { DeviceProviderCreateWizardComponent } from '../components/device-providers/device-provider-create-wizard/device-provider-create-wizard.component';\nimport { MeasurementDateTimeService } from '../../../shared/services/measurement-units/measurement-date-time.service';\n@Injectable({\n  providedIn: 'root',\n})\nexport class DeviceProvidersGridConfig\n  implements GridConfiguration<DeviceProviderListItem>\n{\n  private readonly deviceProvidersService = inject(DeviceProvidersDataAdapter);\n  private readonly entitiesService = inject(EntitiesService);\n  private readonly utilityService = inject(UtilityService);\n  private readonly gridBaseService = inject(GridBaseService);\n  private readonly measurementDateTimeService = inject(\n    MeasurementDateTimeService,\n  );\n  private readonly destroyRef = inject(DestroyRef);\n  private readonly defaultStateValues = [\n    DeviceProviderListItem.StateEnum.Active,\n  ];\n  private readonly filterState = signal<Record<string, FilterCriteria>>({\n    state: {\n      value: this.defaultStateValues,\n      operator: 'in',\n    },\n  });\n  private params: Record<string, string> = {};\n  private readonly fieldTransformations: Record<string, () => string> = {\n    type: () => 'deviceProviderType.id',\n  };\n  private dialogRef: DynamicDialogRef | null = null;\n  private readonly dialogService = inject(DialogService);\n\n  private readonly rqlFilter = computed(() =>\n    this.utilityService.constructRqlFilter(this.filterState()),\n  );\n  private readonly stateLabels: Record<\n    DeviceProviderListItem.StateEnum,\n    string\n  > = {\n    active: 'Active',\n    deleted: 'Deleted',\n    suspended: 'Suspended',\n  };\n\n  entityType = 'device-providers';\n  columns: GridColumn<DeviceProviderListItem>[] = [\n    {\n      field: 'name',\n      header: 'Name',\n      filter: true,\n      filterType: 'text',\n      filterMatchMode: 'contains',\n    },\n    {\n      field: 'type',\n      header: 'Type',\n      filter: true,\n      filterType: 'toggle',\n      filterMatchMode: 'in',\n      filterConfig: {\n        type: 'toggle',\n        options: [],\n      },\n      valueGetter: (rowData: DeviceProviderListItem) => {\n        return rowData.deviceProviderType?.name ?? '';\n      },\n    },\n    {\n      field: 'state',\n      header: 'State',\n      filter: true,\n      filterType: 'toggle',\n      filterMatchMode: 'in',\n      filterConfig: {\n        type: 'toggle',\n        options: [\n          { label: 'Active', value: DeviceProviderListItem.StateEnum.Active },\n          { label: 'Deleted', value: DeviceProviderListItem.StateEnum.Deleted },\n          {\n            label: 'Suspended',\n            value: DeviceProviderListItem.StateEnum.Suspended,\n          },\n        ],\n        defaultSelected: this.defaultStateValues,\n      },\n      valueGetter: (rowData: DeviceProviderListItem) =>\n        isDefined(rowData.state) ? this.stateLabels[rowData.state] : '',\n    },\n    {\n      field: 'modifiedDate',\n      header: 'Modified',\n      filter: false,\n      valueGetter: (rowData: DeviceProviderListItem) =>\n        isDefined(rowData.modifiedDate)\n          ? this.measurementDateTimeService.formatDateTime(\n              this.measurementDateTimeService.createDateAssumingUtc(\n                rowData.modifiedDate,\n              ),\n              DATE_FORMATS.DATE_TIME_SECONDS,\n            )\n          : '',\n    },\n  ];\n\n  dataService: GridDataService<DeviceProviderListItem> =\n    this.deviceProvidersService;\n  ownerId = '';\n\n  private loadFilterOptions(): void {\n    this.entitiesService\n      .listDeviceProviderTypes(this.ownerId)\n      .pipe(\n        takeUntilDestroyed(this.destroyRef),\n        tap((types) => {\n          const typeColumn = this.columns.find((col) => col.field === 'type');\n          if (typeColumn?.filterConfig) {\n            typeColumn.filterConfig.options = types.items\n              .map((type) => ({\n                label: type.name,\n                value: type.id,\n              }))\n              .sort((a, b) => a.label.localeCompare(b.label));\n          }\n        }),\n      )\n      .subscribe();\n  }\n\n  getFilters(): Record<string, FilterCriteria> {\n    return this.filterState();\n  }\n\n  clearFilters(): void {\n    this.filterState.set({});\n  }\n\n  initialize(params: Record<string, string>): void {\n    this.params = params;\n    if (isDefined(this.params['clientId'])) {\n      this.ownerId = String(this.params['clientId']);\n    } else if (isDefined(this.params['vendorId'])) {\n      this.ownerId = String(this.params['vendorId']);\n    } else if (isDefined(this.params['distributorId'])) {\n      this.ownerId = String(this.params['distributorId']);\n    }\n    this.loadFilterOptions();\n  }\n\n  getTitle(): string {\n    return 'Device Providers';\n  }\n\n  getRequestParams(event?: TableLazyLoadEvent): DataGridParams {\n    return {\n      owner: this.ownerId,\n      offset: isDefined(event?.first) ? event.first : 0,\n      recurse: false,\n      limit: isDefined(event?.rows) ? event.rows : DEFAULT_PAGE_SIZE,\n      sortField: 'name',\n      filters: this.rqlFilter(),\n    };\n  }\n\n  onFilterChange(field: string, value: FilterValue): void {\n    const column = this.columns.find((col) => col.field === field);\n\n    if (Array.isArray(value)) {\n      const newFilters = this.gridBaseService.handleFilters(\n        this.filterState(),\n        field,\n        value,\n        undefined,\n        column?.filterMatchMode,\n      );\n\n      this.filterState.set(newFilters);\n      return;\n    }\n\n    // For non-array values, use the grid base service\n    const newFilters = this.gridBaseService.handleFilters(\n      this.filterState(),\n      field,\n      value,\n      undefined,\n      column?.filterMatchMode,\n    );\n\n    this.filterState.set(newFilters);\n  }\n\n  onAdd(): void {\n    this.openDeviceProviderCreationDialog(this.ownerId)\n      .pipe(takeUntilDestroyed(this.destroyRef))\n      .subscribe((createdDeviceProvider) => {\n        if (isDefined(createdDeviceProvider)) {\n          // Refresh your deviceProvider list or take any other necessary actions\n          // this.refreshDeviceProviders();\n        }\n      });\n  }\n\n  openDeviceProviderCreationDialog(ownerId: string) {\n    this.dialogRef = this.dialogService.open(\n      DeviceProviderCreateWizardComponent,\n      {\n        header: 'Device Provider Wizard',\n        contentStyle: { overflow: 'auto' },\n        baseZIndex: 10000,\n        data: { ownerId: ownerId },\n        position: 'top',\n        modal: true,\n      },\n    );\n\n    return this.dialogRef.onClose;\n  }\n}\n","import {\n  AfterViewInit,\n  Component,\n  DestroyRef,\n  inject,\n  OnInit,\n  signal,\n  TemplateRef,\n  ViewChild,\n} from '@angular/core';\nimport { takeUntilDestroyed } from '@angular/core/rxjs-interop';\nimport { CommonModule } from '@angular/common';\nimport { ReactiveFormsModule } from '@angular/forms';\n\nimport { ButtonModule } from 'primeng/button';\nimport { DynamicDialogRef, DynamicDialogConfig } from 'primeng/dynamicdialog';\n\nimport {\n  EntitiesService,\n  EmailProviderCreateRequest,\n  EmailProviderResponse,\n  EmailProviderTypeResponse,\n} from '../../../../../api';\nimport { isDefined, isNullOrUndefined } from '../../../../../shared/utils';\nimport { BroadcastEventMessageService } from '../../../services/broadcast-event-messages.service';\nimport { EmailProviderDetailsSectionComponent } from '../email-provider-details-section/email-provider-details-section.component';\nimport { Step } from '../../../../../shared/models';\nimport { WizardComponent } from '../../../../../shared/components/wizard/wizard.component';\nimport { EmailProviderParametersSectionComponent } from '../email-provider-parameters-section/email-provider-parameters-section.component';\nimport { RequestCacheService } from '../../../../../shared/services/request-cache.service';\nimport { finalize, firstValueFrom } from 'rxjs';\n\ninterface FormField {\n  id: string;\n  title: string;\n  type: string;\n  value?: string | number;\n  defaultValue?: string | number;\n  required?: boolean;\n  description?: string;\n  min?: number;\n  max?: number;\n  values?: { key: string; value: string; fields: FormField[] }[];\n}\n@Component({\n  selector: 'app-email-provider-create-wizard',\n  imports: [\n    CommonModule,\n    ReactiveFormsModule,\n    WizardComponent,\n    ButtonModule,\n    EmailProviderDetailsSectionComponent,\n    EmailProviderParametersSectionComponent,\n  ],\n  templateUrl: './email-provider-create-wizard.component.html',\n  styleUrl: './email-provider-create-wizard.component.scss',\n})\nexport class EmailProviderCreateWizardComponent\n  implements AfterViewInit, OnInit\n{\n  @ViewChild('emailProviderDetailsStep')\n  emailProviderDetailsStep!: TemplateRef<{\n    $implicit: Step;\n  }> | null;\n  @ViewChild('emailProviderParametersStep')\n  emailProviderParametersStep!: TemplateRef<{\n    $implicit: Step;\n  }>;\n  @ViewChild('confirmationTemplate', { static: true })\n  confirmationTemplate!: TemplateRef<{ $implicit: Step }> | null;\n\n  // References to form components\n  @ViewChild('emailProviderDetailsForm')\n  emailProviderDetailsForm!: EmailProviderDetailsSectionComponent;\n  @ViewChild('emailProviderParametersForm')\n  emailProviderParametersForm!: EmailProviderParametersSectionComponent;\n  private readonly entitiesService = inject(EntitiesService);\n  private readonly broadcastService = inject(BroadcastEventMessageService);\n  private readonly cacheService = inject(RequestCacheService);\n  protected readonly destroyRef = inject(DestroyRef);\n  private readonly dialogRef = inject(DynamicDialogRef);\n  private readonly dialogConfig = inject(DynamicDialogConfig);\n\n  // EmailProvider model to collect data across steps\n  newEmailProvider = signal<EmailProviderCreateRequest>(\n    {} as EmailProviderCreateRequest,\n  );\n  readonly emailProviderParametersFields = signal<\n    { key: string; title: string }[] | null\n  >(null);\n  emailProviderType = signal<EmailProviderTypeResponse | null>(null);\n  // Form validity state\n  formIsValid = signal<boolean>(false);\n\n  displayWizard = false;\n  steps: Step[] = [];\n  previousStepIndex = 0;\n  currentStepIndex = 0;\n  ownerId: string | null = null;\n  isSubmitting = signal<boolean>(false);\n\n  ngAfterViewInit() {\n    setTimeout(() => {\n      // Only update the view-dependent properties\n      this.steps[0].content = this.emailProviderDetailsStep;\n      this.steps[0].validate = () => this.emailProviderDetailsForm.validate();\n\n      this.steps[1].content = this.emailProviderParametersStep;\n      this.steps[1].validate = () =>\n        this.emailProviderParametersForm.validate();\n\n      this.steps[2].content = this.confirmationTemplate;\n      this.steps[2].validate = () => true;\n    });\n  }\n\n  ngOnInit(): void {\n    if (isDefined(this.dialogConfig.data)) {\n      this.ownerId = this.dialogConfig.data.ownerId ?? null;\n\n      // Initialize emailProvider with ownerId\n      this.newEmailProvider.update((current) => ({\n        ...current,\n        ownerId: this.ownerId ?? '',\n      }));\n    }\n\n    this.steps = [\n      {\n        value: 1,\n        header: 'Email Provider Details',\n        complete: false,\n        content: null,\n      },\n      {\n        value: 2,\n        header: 'Email Provider Parameters',\n        content: null,\n        complete: false,\n      },\n      {\n        value: 3,\n        header: 'Confirmation',\n        complete: true,\n        content: null,\n      },\n    ];\n  }\n\n  openWizard() {\n    this.displayWizard = true;\n    this.newEmailProvider.set({} as EmailProviderCreateRequest);\n  }\n\n  // Form validity handlers\n  onDetailsFormValidityChange(isValid: boolean) {\n    this.steps[0].disableNext = !isValid;\n    this.formIsValid.set(isValid);\n  }\n\n  onParametersFormValidityChange(isValid: boolean) {\n    this.steps[1].disableNext = !isValid;\n    this.formIsValid.set(isValid);\n  }\n\n  updateEmailProviderDetails(formData: Record<string, unknown>) {\n    this.newEmailProvider.update((current) => {\n      const { ownerId: _ownerId, ...rest } = formData;\n      const updated = { ...current, ...rest };\n\n      if (isNullOrUndefined(updated.ownerId)) {\n        updated.ownerId = this.ownerId ?? '';\n      }\n\n      return updated;\n    });\n    this.loadEmailProviderType(this.newEmailProvider()['type']?.id).catch(\n      () => {},\n    );\n  }\n\n  updateEmailProviderParameters(formData: Record<string, unknown>) {\n    this.newEmailProvider.update((current) => {\n      const updated = { ...current, ...formData };\n      return updated;\n    });\n  }\n\n  onWizardComplete(): void {\n    const emailProviderData = this.newEmailProvider();\n\n    if (\n      isNullOrUndefined(emailProviderData) ||\n      Object.keys(emailProviderData).length === 0\n    ) {\n      return;\n    }\n\n    this.isSubmitting.set(true);\n    this.entitiesService\n      .createEmailProvider(emailProviderData)\n      .pipe(\n        takeUntilDestroyed(this.destroyRef),\n        finalize(() => this.isSubmitting.set(false)),\n      )\n      .subscribe({\n        next: (response: EmailProviderResponse) => {\n          this.broadcastService.broadcast('entity-updated', {\n            entityType: 'email-provider',\n            operation: 'create',\n            entityId: response.id,\n          });\n          this.dialogRef.close(response);\n        },\n      });\n  }\n\n  // Update cancel to close dialog with no result\n  onWizardCancel(): void {\n    this.newEmailProvider.set({} as EmailProviderCreateRequest);\n    this.dialogRef.close();\n  }\n\n  async loadEmailProviderType(\n    emailProviderTypeId: string | undefined,\n  ): Promise<void> {\n    if (isNullOrUndefined(emailProviderTypeId)) return;\n\n    try {\n      const response = await this.cacheService.getOrFetchAsync(\n        `emailProviderType-${emailProviderTypeId}`,\n        () =>\n          firstValueFrom(\n            this.entitiesService.getEmailProviderType(emailProviderTypeId),\n          ),\n        300000,\n      );\n\n      this.emailProviderType.set(response);\n      this.processEmailProviderParameters(response);\n    } catch (error) {\n      console.error('Failed to load email provider type:', error);\n      // Optionally handle the error (show notification, reset state, etc.)\n    }\n  }\n\n  private processEmailProviderParameters(\n    emailProviderType: EmailProviderTypeResponse,\n  ): void {\n    const parameterDefinition = emailProviderType?.parameterDefinition ?? '{}';\n\n    try {\n      const params: { groups: { fields: FormField[] }[] } =\n        JSON.parse(parameterDefinition);\n      const fields = this.extractFieldsFromGroups(params.groups);\n      this.emailProviderParametersFields.set(fields);\n    } catch (error) {\n      console.error('Failed to parse parameter definition:', error);\n      this.emailProviderParametersFields.set([]);\n    }\n  }\n\n  private extractFieldsFromGroups(\n    groups: { fields: FormField[] }[],\n  ): { key: string; title: string }[] {\n    const fields: { key: string; title: string }[] = [];\n\n    groups.forEach((group) => {\n      group.fields.forEach((field) => {\n        this.addFieldToCollection(field, fields);\n        this.addConditionalFields(field, fields);\n      });\n    });\n\n    return fields;\n  }\n\n  private addFieldToCollection(\n    field: FormField,\n    fields: { key: string; title: string }[],\n  ): void {\n    fields.push({\n      key: field.id,\n      title: field.title,\n    });\n  }\n\n  private addConditionalFields(\n    field: FormField,\n    fields: { key: string; title: string }[],\n  ): void {\n    if (!field.values) return;\n\n    field.values.forEach((value) => {\n      if (isDefined(value.fields)) {\n        value.fields.forEach((subField) => {\n          this.addFieldToCollection(subField, fields);\n          // Recursively handle nested conditional fields\n          this.addConditionalFields(subField, fields);\n        });\n      }\n    });\n  }\n}\n","<app-wizard\n  [contentOnly]=\"true\"\n  [steps]=\"steps\"\n  [showSteps]=\"false\"\n  [useWizardButtonsOnly]=\"true\"\n  [loading]=\"isSubmitting()\"\n  (complete)=\"onWizardComplete()\"\n  (onCancel)=\"onWizardCancel()\"\n>\n</app-wizard>\n\n<!-- Step 1: Email Provider Details -->\n<ng-template #emailProviderDetailsStep let-step>\n  <div class=\"p-fluid\">\n    <app-email-provider-details-section\n      #emailProviderDetailsForm\n      [createMode]=\"true\"\n      [entity]=\"newEmailProvider()\"\n      [ownerId]=\"ownerId\"\n      (formValidityChange)=\"onDetailsFormValidityChange($event)\"\n      (formValueChange)=\"updateEmailProviderDetails($event)\"\n    ></app-email-provider-details-section>\n  </div>\n</ng-template>\n\n<ng-template #emailProviderParametersStep let-step>\n  <div class=\"p-fluid\">\n    <app-email-provider-parameters-section\n      #emailProviderParametersForm\n      [createMode]=\"true\"\n      [entity]=\"newEmailProvider()\"\n      [emailProviderType]=\"emailProviderType()\"\n      (formValidityChange)=\"onParametersFormValidityChange($event)\"\n      (formValueChange)=\"updateEmailProviderParameters($event)\"\n    ></app-email-provider-parameters-section>\n  </div>\n</ng-template>\n\n<ng-template #confirmationTemplate let-step>\n  <div class=\"flex gap-6\">\n    <span class=\"pi pi-check !text-5xl\"></span>\n\n    <div class=\"flex-1\">\n      <div class=\"grid\">\n        <!-- Email Provider Details Section -->\n        <div class=\"col-12 md:col-6\">\n          <p class=\"mb-4\">\n            You've completed all of the information required and we're ready to\n            create your Email Provider.\n          </p>\n\n          <div class=\"space-y-2\">\n            <!-- Each field in a side-by-side layout -->\n            <div class=\"flex\">\n              <div class=\"w-1/3 font-medium\">Type:</div>\n              <div class=\"w-2/3\">\n                {{ newEmailProvider().type?.name }}\n              </div>\n            </div>\n\n            <div class=\"flex\">\n              <div class=\"w-1/3 font-medium\">Name:</div>\n              <div class=\"w-2/3\">\n                {{ newEmailProvider().name || 'Not provided' }}\n              </div>\n            </div>\n\n            @for (item of emailProviderParametersFields(); track $index) {\n              <div class=\"flex\">\n                <div class=\"w-1/3 font-medium\">{{ item.title }}:</div>\n                <div class=\"w-2/3\">\n                  {{ newEmailProvider().parameters?.[item.key] }}\n                </div>\n              </div>\n            }\n          </div>\n        </div>\n      </div>\n\n      <div\n        class=\"mt-4 pt-4 border-top-1 border-surface-200 dark:border-surface-700\"\n      >\n        <p class=\"mb-0\">Click finish to create this Email Provider.</p>\n      </div>\n    </div>\n  </div>\n</ng-template>\n","import {\n  DestroyRef,\n  Injectable,\n  computed,\n  inject,\n  signal,\n} from '@angular/core';\nimport { takeUntilDestroyed } from '@angular/core/rxjs-interop';\nimport { tap } from 'rxjs';\n\nimport { TableLazyLoadEvent } from 'primeng/table';\n\nimport {\n  DataGridParams,\n  DATE_FORMATS,\n  FilterCriteria,\n  FilterValue,\n  GridColumn,\n  GridConfiguration,\n  GridDataService,\n} from '../../../shared/models';\nimport { EmailProvidersDataAdapter } from '../services/adapters/email-providers-data-adapter.service';\nimport { EmailProviderListItem, EntitiesService, IdName } from '../../../api';\nimport { UtilityService } from '../../../core/services/utility.service';\nimport { GridBaseService } from '../../../shared/services/grid-base.service';\nimport { DEFAULT_PAGE_SIZE } from '../../../core/models';\nimport { isDefined } from '../../../shared/utils';\nimport { DialogService, DynamicDialogRef } from 'primeng/dynamicdialog';\nimport { EmailProviderCreateWizardComponent } from '../components/email-providers/email-provider-create-wizard/email-provider-create-wizard.component';\nimport { MeasurementDateTimeService } from '../../../shared/services/measurement-units/measurement-date-time.service';\nimport { ApiSchemaService } from '../../../core/services/api-schema.service';\n@Injectable({\n  providedIn: 'root',\n})\nexport class EmailProvidersGridConfig\n  implements GridConfiguration<EmailProviderListItem>\n{\n  private readonly emailProvidersService = inject(EmailProvidersDataAdapter);\n  private readonly entitiesService = inject(EntitiesService);\n  private readonly utilityService = inject(UtilityService);\n  private readonly gridBaseService = inject(GridBaseService);\n  private readonly measurementDateTimeService = inject(\n    MeasurementDateTimeService,\n  );\n  private readonly apiSchemaService = inject(ApiSchemaService);\n  private readonly destroyRef = inject(DestroyRef);\n  private readonly defaultStateValues = [\n    EmailProviderListItem.StateEnum.Active,\n  ];\n  private readonly filterState = signal<Record<string, FilterCriteria>>({\n    state: {\n      value: this.defaultStateValues,\n      operator: 'in',\n    },\n  });\n  private params: Record<string, string> = {};\n  private readonly fieldTransformations: Record<string, string> = {\n    type: 'type.id',\n  };\n  private dialogRef: DynamicDialogRef | null = null;\n  private readonly dialogService = inject(DialogService);\n\n  private readonly rqlFilter = computed(() =>\n    this.utilityService.constructRqlFilter(this.filterState()),\n  );\n  private readonly stateLabels: Record<\n    EmailProviderListItem.StateEnum,\n    string\n  > = {\n    active: 'Active',\n    deleted: 'Deleted',\n    suspended: 'Suspended',\n  };\n\n  entityType = 'email-providers';\n  columns: GridColumn<EmailProviderListItem>[] = [\n    {\n      field: 'name',\n      header: 'Name',\n      filter: true,\n      filterType: 'text',\n      filterMatchMode: 'contains',\n    },\n    {\n      field: 'type',\n      header: 'Type',\n      filter: true,\n      filterType: 'toggle',\n      filterMatchMode: 'in',\n      filterConfig: {\n        type: 'toggle',\n        options: [],\n      },\n      valueGetter: (rowData: EmailProviderListItem) => {\n        const typeValue = this.apiSchemaService.getEntityType<\n          Record<string, unknown>,\n          IdName\n        >(rowData, 'emailprovider');\n        return typeValue?.name ?? '';\n      },\n    },\n    {\n      field: 'state',\n      header: 'State',\n      filter: true,\n      filterType: 'multiselect',\n      filterMatchMode: 'in',\n      filterConfig: {\n        type: 'multiselect',\n        options: [\n          { label: 'Active', value: EmailProviderListItem.StateEnum.Active },\n          { label: 'Deleted', value: EmailProviderListItem.StateEnum.Deleted },\n          {\n            label: 'Suspended',\n            value: EmailProviderListItem.StateEnum.Suspended,\n          },\n        ],\n        defaultSelected: this.defaultStateValues,\n      },\n      valueGetter: (rowData: EmailProviderListItem) =>\n        isDefined(rowData.state) ? this.stateLabels[rowData.state] : '',\n    },\n    {\n      field: 'modifiedDate',\n      header: 'Modified',\n      filter: false,\n      valueGetter: (rowData: EmailProviderListItem) =>\n        isDefined(rowData.modifiedDate)\n          ? this.measurementDateTimeService.formatDateTime(\n              this.measurementDateTimeService.createDateAssumingUtc(\n                rowData.modifiedDate,\n              ),\n              DATE_FORMATS.DATE_TIME_SECONDS,\n            )\n          : '',\n    },\n  ];\n\n  dataService: GridDataService<EmailProviderListItem> =\n    this.emailProvidersService;\n  ownerId = '';\n\n  private loadFilterOptions(): void {\n    this.entitiesService\n      .listEmailProviderTypes(this.ownerId)\n      .pipe(\n        takeUntilDestroyed(this.destroyRef),\n        tap((types) => {\n          const typeColumn = this.columns.find((col) => col.field === 'type');\n          if (typeColumn?.filterConfig) {\n            typeColumn.filterConfig.options = types.items\n              .map((type) => ({\n                label: type.name ?? '',\n                value: type.id,\n              }))\n              .sort((a, b) => a.label.localeCompare(b.label));\n          }\n        }),\n      )\n      .subscribe();\n  }\n\n  getFilters(): Record<string, FilterCriteria> {\n    return this.filterState();\n  }\n\n  clearFilters(): void {\n    this.filterState.set({});\n  }\n\n  initialize(params: Record<string, string>): void {\n    this.params = params;\n    if (isDefined(this.params['clientId'])) {\n      this.ownerId = String(this.params['clientId']);\n    } else if (isDefined(this.params['vendorId'])) {\n      this.ownerId = String(this.params['vendorId']);\n    } else if (isDefined(this.params['distributorId'])) {\n      this.ownerId = String(this.params['distributorId']);\n    }\n    this.loadFilterOptions();\n  }\n\n  getTitle(): string {\n    return 'Email Providers';\n  }\n\n  getRequestParams(event?: TableLazyLoadEvent): DataGridParams {\n    return {\n      owner: this.ownerId,\n      offset: isDefined(event?.first) ? event.first : 0,\n      recurse: false,\n      limit: isDefined(event?.rows) ? event.rows : DEFAULT_PAGE_SIZE,\n      sortField: 'name',\n      filters: this.rqlFilter(),\n    };\n  }\n\n  onFilterChange(field: string, value: FilterValue): void {\n    const actualField = this.fieldTransformations[field] || field;\n    const column = this.columns.find((col) => col.field === field);\n\n    if (Array.isArray(value)) {\n      const newFilters = this.gridBaseService.handleFilters(\n        this.filterState(),\n        actualField,\n        value,\n        undefined,\n        column?.filterMatchMode,\n      );\n\n      this.filterState.set(newFilters);\n      return;\n    }\n\n    // For non-array values, use the grid base service\n    const newFilters = this.gridBaseService.handleFilters(\n      this.filterState(),\n      actualField,\n      value,\n      undefined,\n      column?.filterMatchMode,\n    );\n\n    this.filterState.set(newFilters);\n  }\n\n  onAdd(): void {\n    this.openEmailProviderCreationDialog(this.ownerId)\n      .pipe(takeUntilDestroyed(this.destroyRef))\n      .subscribe((createdEmailProvider) => {\n        if (isDefined(createdEmailProvider)) {\n          // Refresh your emailProvider list or take any other necessary actions\n          // this.refreshEmailProviders();\n        }\n      });\n  }\n\n  openEmailProviderCreationDialog(ownerId: string) {\n    this.dialogRef = this.dialogService.open(\n      EmailProviderCreateWizardComponent,\n      {\n        header: 'Email Provider Wizard',\n        contentStyle: { overflow: 'auto' },\n        baseZIndex: 10000,\n        data: { ownerId: ownerId },\n        position: 'top',\n        modal: true,\n      },\n    );\n\n    return this.dialogRef.onClose;\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport {\n  Component,\n  ViewChild,\n  AfterViewInit,\n  TemplateRef,\n  signal,\n  inject,\n  OnInit,\n  DestroyRef,\n  computed,\n} from '@angular/core';\nimport { ReactiveFormsModule } from '@angular/forms';\nimport { WizardComponent } from '../../../../../shared/components/wizard/wizard.component';\nimport { AssetGroupingItem, Step } from '../../../../../shared/models';\nimport { ButtonModule } from 'primeng/button';\nimport { AssetDetailsSectionComponent } from '../asset-details-section/asset-details-section.component';\nimport {\n  isDefined,\n  isEmpty,\n  isNullOrUndefined,\n} from '../../../../../shared/utils';\nimport { AssetCategoriesSectionComponent } from '../asset-categories-section/asset-categories-section.component';\nimport {\n  AssetCreateRequest,\n  AssetResponse,\n  EntitiesService,\n  IdName,\n} from '../../../../../api';\nimport { takeUntilDestroyed } from '@angular/core/rxjs-interop';\nimport { DynamicDialogRef, DynamicDialogConfig } from 'primeng/dynamicdialog';\nimport { BroadcastEventMessageService } from '../../../services/broadcast-event-messages.service';\nimport { InfoSectionComponent } from '../../shared/info-section/info-section.component';\nimport { CacheInvalidationService } from '../../../../../shared/services/cache-invalidation.service';\nimport { AssetGroupingService } from '../../../../../shared/services/asset-grouping.service';\nimport { DEFAULT_SYSTEM_ID } from '../../../../../core/models';\nimport { finalize } from 'rxjs';\n\n// Interface for asset form data structure\ninterface AssetFormDetails {\n  name?: string;\n  mapIconName?: string;\n  assetType?: { id: string; name: string };\n  color?: string;\n  costCentre?: { id: string; name: string };\n  groups?: { id: string; name: string }[];\n  tags?: string[];\n  assetTag?: string;\n  ownerId?: string;\n  [key: string]: unknown; // For other dynamic properties\n}\n\n// Interface for asset categories form data\ninterface AssetCategoriesFormData {\n  categories?: IdName[] | null;\n}\n\n@Component({\n  selector: 'app-asset-create-wizard',\n  standalone: true,\n  imports: [\n    CommonModule,\n    ReactiveFormsModule,\n    WizardComponent,\n    ButtonModule,\n    AssetDetailsSectionComponent,\n    AssetCategoriesSectionComponent,\n    InfoSectionComponent,\n  ],\n  templateUrl: './asset-create-wizard.component.html',\n  styleUrl: './asset-create-wizard.component.scss',\n})\nexport class AssetCreateWizardComponent implements AfterViewInit, OnInit {\n  @ViewChild('assetDetailsStep') assetDetailsStep!: TemplateRef<{\n    $implicit: Step;\n  }> | null;\n  @ViewChild('assetCategoriesStep', { static: true })\n  assetCategoriesStep!: TemplateRef<{ $implicit: Step }> | null;\n  @ViewChild('confirmationTemplate', { static: true })\n  confirmationTemplate!: TemplateRef<{ $implicit: Step }> | null;\n  @ViewChild('infoSectionStep', { static: true })\n  infoSectionStep!: TemplateRef<{ $implicit: Step }> | null;\n\n  // References to form components\n  @ViewChild('assetDetailsForm')\n  assetDetailsForm!: AssetDetailsSectionComponent;\n  @ViewChild('assetCategoriesForm')\n  assetCategoriesForm!: AssetCategoriesSectionComponent;\n  @ViewChild('infoSectionForm')\n  infoSectionForm!: InfoSectionComponent<AssetResponse>;\n\n  private readonly entitiesService = inject(EntitiesService);\n  private readonly broadcastService = inject(BroadcastEventMessageService);\n  protected readonly destroyRef = inject(DestroyRef);\n  private readonly dialogRef = inject(DynamicDialogRef);\n  private readonly dialogConfig = inject(DynamicDialogConfig);\n  private readonly cacheInvalidationService = inject(CacheInvalidationService);\n  private readonly assetGroupingService = inject(AssetGroupingService);\n\n  // Asset model to collect data across steps\n  newAsset = signal<AssetCreateRequest>({} as AssetCreateRequest);\n  readonly infoSectionFields = computed(() => {\n    const asset = this.newAsset();\n    if (!asset.fields) {\n      return [];\n    }\n\n    // Get custom fields from the info section component if available\n    const customFields = this.infoSectionForm?.entityCustomFields?.();\n    if (Array.isArray(customFields) && customFields.length > 0) {\n      return customFields.map((field) => ({\n        key: field['title'] ?? 'Field',\n        value: this.formatFieldValue(\n          asset.fields?.[field['id']],\n          field['type'],\n        ),\n      }));\n    }\n\n    // Fallback: show all fields as key-value pairs\n    return Object.entries(asset.fields).map(([key, value]) => ({\n      key: key.charAt(0).toUpperCase() + key.slice(1),\n      value: this.formatFieldValue(value, 'text'),\n    }));\n  });\n  // Form validity state\n  formIsValid = signal<boolean>(false);\n\n  displayWizard = false;\n  steps: Step[] = [];\n  ownerId: string | null = null;\n  assetCategories: AssetGroupingItem[] = [];\n  isSubmitting = signal<boolean>(false);\n\n  ngAfterViewInit() {\n    setTimeout(() => {\n      this.steps = [\n        {\n          value: 1,\n          header: 'Asset Details',\n          content: this.assetDetailsStep,\n          complete: false,\n          validate: () => this.assetDetailsForm.validate(),\n        },\n        {\n          value: 2,\n          header: 'Categories',\n          content: this.assetCategoriesStep,\n          complete: false,\n          validate: () => this.assetCategoriesForm.validate(),\n        },\n        {\n          value: 3,\n          header: 'Info',\n          content: this.infoSectionStep,\n          complete: false,\n          validate: () => this.infoSectionForm.validate(),\n        },\n        {\n          value: 4,\n          header: 'Confirmation',\n          content: this.confirmationTemplate,\n          complete: true,\n        },\n      ];\n    });\n  }\n\n  ngOnInit(): void {\n    if (isDefined(this.dialogConfig.data)) {\n      this.ownerId = this.dialogConfig.data.ownerId ?? null;\n\n      // Initialize asset with ownerId\n      this.newAsset.update((current) => ({\n        ...current,\n        ownerId: this.ownerId ?? '',\n      }));\n\n      this.assetGroupingService\n        .getAssetCategories(this.ownerId ?? DEFAULT_SYSTEM_ID)\n        .then((assetCategories) => {\n          this.assetCategories = assetCategories;\n        })\n        .catch(() => {\n          this.assetCategories = [];\n        });\n    }\n  }\n\n  openWizard() {\n    this.displayWizard = true;\n    this.newAsset.set({} as AssetCreateRequest);\n  }\n\n  // Form validity handlers\n  onDetailsFormValidityChange(isValid: boolean) {\n    this.steps[0].disableNext = !isValid;\n    this.formIsValid.set(isValid);\n  }\n\n  onCategoriesFormValidityChange(isValid: boolean) {\n    this.steps[1].disableNext = !isValid;\n    this.formIsValid.set(isValid);\n  }\n\n  onInfoFormValidityChange(isValid: boolean) {\n    this.steps[2].disableNext = !isValid;\n    this.formIsValid.set(isValid);\n  }\n\n  // Update the asset state with form data\n  updateAssetDetails(formData: AssetFormDetails) {\n    this.newAsset.update((current) => {\n      const updated = { ...current };\n\n      Object.keys(formData).forEach((key) => {\n        if (key !== 'ownerId') {\n          updated[key] = formData[key];\n        }\n      });\n\n      if (isNullOrUndefined(updated.ownerId)) {\n        updated.ownerId = this.ownerId ?? '';\n      }\n\n      return updated;\n    });\n  }\n\n  updateAssetCategories(formData: AssetCategoriesFormData) {\n    this.newAsset.update((current) => {\n      const updated = { ...current };\n\n      updated.categories = isEmpty(formData.categories)\n        ? null\n        : formData.categories;\n\n      if (isNullOrUndefined(updated.ownerId)) {\n        updated.ownerId = this.ownerId ?? '';\n      }\n\n      return updated;\n    });\n  }\n\n  updateInfoSection(formData: Record<string, unknown>) {\n    this.newAsset.update((current) => {\n      const updated = { ...current };\n      Object.keys(formData).forEach((key) => {\n        updated[key] = formData[key];\n      });\n      return updated;\n    });\n  }\n\n  onWizardComplete(): void {\n    // Process the final data from all steps\n    const assetData = this.newAsset();\n    this.isSubmitting.set(true);\n\n    this.entitiesService\n      .createAsset(assetData)\n      .pipe(\n        takeUntilDestroyed(this.destroyRef),\n        finalize(() => this.isSubmitting.set(false)),\n      )\n      .subscribe({\n        next: (response: AssetResponse) => {\n          this.cacheInvalidationService.clearAssetCategoryCaches();\n          this.broadcastService.broadcast('entity-updated', {\n            entityType: 'asset',\n            operation: 'create',\n            entityId: response.id,\n          });\n          this.dialogRef.close(response);\n        },\n        error: (error: Error) => {\n          console.error('Error creating asset:', error);\n        },\n      });\n  }\n\n  // Update cancel to close dialog with no result\n  onWizardCancel(): void {\n    this.newAsset.set({} as AssetCreateRequest);\n    this.dialogRef.close();\n  }\n\n  convertIdNameCollectionToNameStrings(\n    collection: IdName[] | null | undefined,\n  ): string {\n    if (!Array.isArray(collection)) return '';\n    return collection.map((item) => item.name).join(', ');\n  }\n\n  convertStringCollectionToNameStrings(\n    collection: string[] | null | undefined,\n  ): string {\n    if (!Array.isArray(collection)) return '';\n    return collection.join(', ');\n  }\n\n  // Get categories formatted as key-value pairs for display\n  getCategoriesAsKeyValuePairs(): { key: string; value: string }[] {\n    const asset = this.newAsset();\n    if (!asset.categories || asset.categories.length === 0) {\n      return [];\n    }\n\n    // Group categories by their parent category (form field groups)\n    const parentCategories = this.assetCategories.filter(\n      (cat) => cat.parent === DEFAULT_SYSTEM_ID,\n    );\n\n    const result: { key: string; value: string }[] = [];\n\n    parentCategories.forEach((parentCat) => {\n      // Find selected category in this group\n      const selectedCategory = asset.categories?.find((selectedCat) => {\n        const fullCategory = this.assetCategories.find(\n          (cat) => cat.id === selectedCat.id,\n        );\n        return fullCategory?.index === parentCat.index;\n      });\n\n      if (selectedCategory) {\n        result.push({\n          key: parentCat.name ?? 'Category',\n          value: selectedCategory.name ?? 'Selected',\n        });\n      }\n    });\n\n    return result;\n  }\n\n  // Helper method to format field values based on type\n  private formatFieldValue(value: unknown, type: string): string {\n    if (value === null || value === undefined) {\n      return 'Not set';\n    }\n\n    switch (type) {\n      case 'boolean':\n        return value === true ? 'Yes' : 'No';\n      case 'date':\n        if (value instanceof Date) {\n          return value.toLocaleDateString();\n        }\n        return typeof value === 'string' ? value : JSON.stringify(value);\n      case 'number':\n        return typeof value === 'number'\n          ? value.toString()\n          : JSON.stringify(value);\n      default:\n        return typeof value === 'string' ? value : JSON.stringify(value);\n    }\n  }\n}\n","<app-wizard\n  [contentOnly]=\"true\"\n  [steps]=\"steps\"\n  [showSteps]=\"false\"\n  [useWizardButtonsOnly]=\"true\"\n  [loading]=\"isSubmitting()\"\n  (complete)=\"onWizardComplete()\"\n  (onCancel)=\"onWizardCancel()\"\n>\n</app-wizard>\n\n<!-- Step 1: Asset Details -->\n<ng-template #assetDetailsStep let-step>\n  <div class=\"p-fluid\">\n    <app-asset-details-section\n      #assetDetailsForm\n      [createMode]=\"true\"\n      [entity]=\"newAsset()\"\n      [ownerId]=\"ownerId\"\n      (formValidityChange)=\"onDetailsFormValidityChange($event)\"\n      (formValueChange)=\"updateAssetDetails($event)\"\n    ></app-asset-details-section>\n  </div>\n</ng-template>\n\n<ng-template #assetCategoriesStep let-step>\n  <div class=\"p-fluid\">\n    <app-asset-categories-section\n      #assetCategoriesForm\n      [createMode]=\"true\"\n      [entity]=\"newAsset()\"\n      [ownerId]=\"ownerId\"\n      (formValidityChange)=\"onCategoriesFormValidityChange($event)\"\n      (formValueChange)=\"updateAssetCategories($event)\"\n    ></app-asset-categories-section>\n  </div>\n</ng-template>\n\n<ng-template #infoSectionStep let-step>\n  <div class=\"p-fluid\">\n    <app-info-section\n      #infoSectionForm\n      [createMode]=\"true\"\n      [entity]=\"newAsset()\"\n      entityType=\"asset\"\n      (formValidityChange)=\"onInfoFormValidityChange($event)\"\n      (formValueChange)=\"updateInfoSection($event)\"\n    ></app-info-section>\n  </div>\n</ng-template>\n\n<ng-template #confirmationTemplate let-step>\n  <div class=\"flex gap-6\">\n    <span class=\"pi pi-check !text-5xl\"></span>\n\n    <div class=\"flex-1\">\n      <div class=\"grid\">\n        <!-- Asset Details Section -->\n        <div class=\"col-12 md:col-6\">\n          <p class=\"mb-4\">\n            You've completed all of the information required and we're ready to\n            create your Asset.\n          </p>\n\n          <div class=\"space-y-2\">\n            <!-- Each field in a side-by-side layout -->\n            <div class=\"flex\">\n              <div class=\"w-1/3 font-medium\">Name:</div>\n              <div class=\"w-2/3\">{{ newAsset().name || 'Not provided' }}</div>\n            </div>\n\n            <div class=\"flex\">\n              <div class=\"w-1/3 font-medium\">Asset Type:</div>\n              <div class=\"w-2/3\">\n                {{ newAsset().assetType.name || 'Not selected' }}\n              </div>\n            </div>\n\n            <div class=\"flex\">\n              <div class=\"w-1/3 font-medium\">Color:</div>\n              <div class=\"w-2/3\">\n                {{ newAsset().color || 'Not selected' }}\n              </div>\n            </div>\n\n            <div class=\"flex\">\n              <div class=\"w-1/3 font-medium\">Asset Tag:</div>\n              <div class=\"w-2/3\">{{ newAsset().assetTag || 'None' }}</div>\n            </div>\n\n            <div class=\"flex\">\n              <div class=\"w-1/3 font-medium\">Cost Centre:</div>\n              <div class=\"w-2/3\">\n                {{ newAsset().costCentre.name || 'Not selected' }}\n              </div>\n            </div>\n\n            <div class=\"flex\">\n              <div class=\"w-1/3 font-medium\">Tags:</div>\n              <div class=\"w-2/3\">\n                {{ convertStringCollectionToNameStrings(newAsset().tags) }}\n              </div>\n            </div>\n\n            <div class=\"flex\">\n              <div class=\"w-1/3 font-medium\">Groups:</div>\n              <div class=\"w-2/3\">\n                {{ convertIdNameCollectionToNameStrings(newAsset().groups) }}\n              </div>\n            </div>\n\n            <!-- Asset Categories Section -->\n            @for (\n              category of getCategoriesAsKeyValuePairs();\n              track category.key\n            ) {\n              <div class=\"flex\">\n                <div class=\"w-1/3 font-medium\">{{ category.key }}:</div>\n                <div class=\"w-2/3\">{{ category.value }}</div>\n              </div>\n            }\n\n            @if (getCategoriesAsKeyValuePairs().length === 0) {\n              <div class=\"flex\">\n                <div class=\"w-1/3 font-medium\">Categories:</div>\n                <div class=\"w-2/3\">No categories selected</div>\n              </div>\n            }\n\n            <!-- Info Section Custom Fields -->\n            @for (field of infoSectionFields(); track field.key) {\n              <div class=\"flex\">\n                <div class=\"w-1/3 font-medium\">{{ field.key }}:</div>\n                <div class=\"w-2/3\">{{ field.value }}</div>\n              </div>\n            }\n          </div>\n        </div>\n      </div>\n\n      <div\n        class=\"mt-4 pt-4 border-top-1 border-surface-200 dark:border-surface-700\"\n      >\n        <p class=\"mb-0\">Click finish to create this Asset.</p>\n      </div>\n    </div>\n  </div>\n</ng-template>\n","import {\n  DestroyRef,\n  Injectable,\n  computed,\n  effect,\n  inject,\n  signal,\n} from '@angular/core';\n\nimport { TableLazyLoadEvent } from 'primeng/table';\nimport { DialogService, DynamicDialogRef } from 'primeng/dynamicdialog';\nimport { catchError, combineLatest, EMPTY } from 'rxjs';\nimport { takeUntilDestroyed } from '@angular/core/rxjs-interop';\n\nimport {\n  GridConfiguration,\n  GridDataService,\n  DataGridParams,\n  GridColumn,\n  FilterCriteria,\n  FilterValue,\n  DATE_FORMATS,\n  AssetGroupingItem,\n} from '../../../shared/models';\nimport { UtilityService } from '../../../core/services/utility.service';\nimport { GridBaseService } from '../../../shared/services/grid-base.service';\nimport { isDefined } from '../../../shared/utils';\nimport { AssetsDataAdapter } from '../services/adapters';\nimport { AssetListItem, EntitiesService, ClientResponse } from '../../../api';\nimport { DEFAULT_PAGE_SIZE, DEFAULT_SYSTEM_ID } from '../../../core/models';\nimport { AssetCreateWizardComponent } from '../components/assets/asset-create-wizard/asset-create-wizard.component';\nimport { MeasurementDateTimeService } from '../../../shared/services/measurement-units/measurement-date-time.service';\nimport { AdminStateService } from '../services/admin-state.service';\nimport { AssetGroupingService } from '../../../shared/services/asset-grouping.service';\n@Injectable({\n  providedIn: 'root',\n})\nexport class AssetsGridConfig implements GridConfiguration<AssetListItem> {\n  entityType = 'assets';\n\n  private readonly assetsService = inject(AssetsDataAdapter);\n  private readonly utilityService = inject(UtilityService);\n  private readonly gridBaseService = inject(GridBaseService);\n  private readonly entitiesService = inject(EntitiesService);\n  private readonly adminStateService = inject(AdminStateService);\n  private readonly assetGroupingService = inject(AssetGroupingService);\n  private readonly defaultStateValues = ['active', 'suspended', 'inactive'];\n  private readonly filterState = signal<Record<string, FilterCriteria>>({\n    state: {\n      value: this.defaultStateValues,\n      operator: 'in',\n    },\n  });\n  private readonly paramsSignal = signal<Record<string, string>>({\n    clientId: '',\n  });\n\n  private readonly destroyRef = inject(DestroyRef);\n  private dialogRef: DynamicDialogRef | null = null;\n  private readonly dialogService = inject(DialogService);\n  private readonly measurementDateTimeService = inject(\n    MeasurementDateTimeService,\n  );\n\n  private readonly rqlFilter = computed(() =>\n    this.utilityService.constructRqlFilter({\n      ...this.filterState(),\n      ...{\n        'owner.id': {\n          value: this.paramsSignal()['clientId'],\n          operator: '=',\n        },\n      },\n    }),\n  );\n  private readonly fieldTransformations: Record<string, string> = {\n    costCentre: 'costCentre.id',\n    assetType: 'assetType.id',\n    groups: 'groups.id',\n    categories: 'categories.id',\n  };\n\n  columnsSignal = signal<GridColumn<AssetListItem>[]>([]);\n\n  get columns(): GridColumn<AssetListItem>[] {\n    return this.columnsSignal();\n  }\n\n  private readonly baseColumns: GridColumn<AssetListItem>[] = [\n    {\n      field: 'name',\n      header: 'Name',\n      filter: true,\n      filterType: 'text',\n      filterMatchMode: 'contains',\n      transform: 'text-ellipsis',\n    },\n    {\n      field: 'assetType',\n      header: 'Type',\n      valueGetter: (rowData: AssetListItem) =>\n        isDefined(rowData.assetType?.name) ? rowData.assetType?.name : '',\n      filterType: 'multiselect',\n      filter: true,\n      filterMatchMode: 'in',\n      filterConfig: {\n        type: 'multiselect',\n        options: [],\n      },\n    },\n    {\n      field: 'state',\n      header: 'State',\n      filter: true,\n      filterType: 'multiselect',\n      filterMatchMode: 'in',\n      filterConfig: {\n        type: 'multiselect',\n        options: [\n          { label: 'Active', value: 'active' },\n          { label: 'Suspended', value: 'suspended' },\n          { label: 'Deleted', value: 'deleted' },\n          { label: 'Inactive', value: 'inactive' },\n        ],\n        defaultSelected: this.defaultStateValues,\n      },\n      transform: 'capitalize',\n    },\n    {\n      field: 'costCentre',\n      header: 'Cost Centre',\n      valueGetter: (rowData: AssetListItem) =>\n        isDefined(rowData.costCentre?.name) ? rowData.costCentre?.name : '',\n      filter: true,\n      filterType: 'multiselect',\n      filterMatchMode: 'in',\n      filterConfig: {\n        type: 'multiselect',\n        options: [],\n      },\n    },\n    {\n      field: 'groups',\n      header: 'Groups',\n      valueGetter: (rowData: AssetListItem) =>\n        isDefined(rowData.groups)\n          ? rowData.groups.map((g) => g.name).join(', ')\n          : '',\n      filter: true,\n      filterType: 'multiselect',\n      filterMatchMode: 'in',\n      filterConfig: {\n        type: 'multiselect',\n        options: [],\n      },\n    },\n    {\n      field: 'devices',\n      header: 'Devices',\n      valueGetter: (rowData: AssetListItem) =>\n        isDefined(rowData.devices)\n          ? rowData.devices.map((d) => d.name).join(', ')\n          : '',\n      filter: true,\n      filterType: 'text',\n    },\n    {\n      field: 'cameras',\n      header: 'Cameras',\n      filter: false,\n    },\n    {\n      field: 'linkedFrom',\n      header: 'Linked From Client',\n      valueGetter: (rowData: AssetListItem) => {\n        return isDefined(rowData['linkedFrom'])\n          ? rowData['linkedFrom'].map((l: string) => l).join(', ')\n          : '';\n      },\n      filter: true,\n      filterType: 'text',\n    },\n    {\n      field: 'linkedTo',\n      header: 'Linked To Client',\n      valueGetter: (rowData: AssetListItem) => {\n        return isDefined(rowData['linkedTo'])\n          ? rowData['linkedTo'].map((l: string) => l).join(', ')\n          : '';\n      },\n      filter: true,\n      filterType: 'text',\n    },\n    {\n      field: 'modifiedDate',\n      header: 'Modified',\n      filter: false,\n      valueGetter: (rowData: AssetListItem) => {\n        return isDefined(rowData['modifiedDate'])\n          ? this.measurementDateTimeService.formatDateTime(\n              this.measurementDateTimeService.createDateAssumingUtc(\n                rowData['modifiedDate'],\n              ),\n              DATE_FORMATS.DATE_TIME_SECONDS,\n            )\n          : rowData['modifiedDate'];\n      },\n    },\n  ];\n\n  defaultVisibleColumns = [\n    'name',\n    'assetType',\n    'state',\n    'costCentre',\n    'groups',\n    'devices',\n    'cameras',\n    'modifiedDate',\n  ];\n\n  dataService: GridDataService<AssetListItem> = this.assetsService;\n\n  constructor() {\n    effect(() => {\n      const client = this.adminStateService.selectedClient();\n      if (isDefined(client?.id)) {\n        void this.buildColumns(client);\n      }\n    });\n  }\n\n  private async buildColumns(client: ClientResponse): Promise<void> {\n    const clientId = client.id;\n\n    // Fetch categories and build complete column list\n    await this.assetGroupingService\n      .getAssetCategories(clientId)\n      .then((assetCategories) => {\n        const newColumns: GridColumn<AssetListItem>[] = [...this.baseColumns];\n\n        // Add category columns\n        this.addCategoryColumns(newColumns, assetCategories);\n\n        // Add custom field columns\n        this.addCustomFieldColumns(newColumns, client);\n\n        this.columnsSignal.set(newColumns);\n      });\n  }\n\n  private addCategoryColumns(\n    columns: GridColumn<AssetListItem>[],\n    assetCategories: AssetGroupingItem[],\n  ): void {\n    const deviceIndex = columns.findIndex((col) => col.field === 'devices');\n    const insertIndex = deviceIndex !== -1 ? deviceIndex : columns.length - 2;\n    const categoryColumns = assetCategories\n      .filter((category) => category.parent === DEFAULT_SYSTEM_ID)\n      .map((category) => this.createCategoryColumn(category, assetCategories));\n\n    columns.splice(insertIndex, 0, ...categoryColumns);\n  }\n\n  private createCategoryColumn(\n    category: AssetGroupingItem,\n    assetCategories: AssetGroupingItem[],\n  ): GridColumn<AssetListItem> {\n    return {\n      field: `category.${category.index}`,\n      header: isDefined(category.name)\n        ? category.name\n        : `Category ${category.index}`,\n      valueGetter: (rowData: AssetListItem) => {\n        const cat = isDefined(category?.index)\n          ? rowData.categories[category.index]\n          : undefined;\n        return isDefined(cat) ? (cat.name as string) : '';\n      },\n      filter: true,\n      filterType: 'multiselect',\n      filterMatchMode: 'in',\n      filterConfig: {\n        type: 'multiselect',\n        options: assetCategories\n          .filter((c) => c.parent === category.id)\n          .map((c) => ({ label: isDefined(c.name) ? c.name : '', value: c.id }))\n          .sort((a, b) => a.label.localeCompare(b.label)),\n      },\n    };\n  }\n\n  private addCustomFieldColumns(\n    columns: GridColumn<AssetListItem>[],\n    client: { customFields?: { asset?: { id: string; title: string }[] } },\n  ): void {\n    const modifiedIndex = columns.findIndex(\n      (col) => col.field === 'modifiedDate',\n    );\n    const customFieldInsertIndex =\n      modifiedIndex !== -1 ? modifiedIndex : columns.length;\n\n    const customFieldColumns = (client?.customFields?.asset ?? []).map(\n      (customField) => ({\n        field: `customFields.${customField.id}`,\n        header: customField.title,\n        filter: true,\n        filterType: 'text' as const,\n        filterMatchMode: 'contains' as const,\n      }),\n    );\n\n    columns.splice(customFieldInsertIndex, 0, ...customFieldColumns);\n  }\n\n  getFilters(): Record<string, FilterCriteria> {\n    return this.filterState();\n  }\n\n  clearFilters(): void {\n    this.filterState.set({\n      state: {\n        value: this.defaultStateValues,\n        operator: 'in',\n      },\n    });\n  }\n\n  initialize(params: Record<string, string>): void {\n    this.paramsSignal.set(params);\n    this.loadFilterOptions();\n    // Trigger column rebuild when params change\n    const client = this.adminStateService.selectedClient();\n    if (isDefined(client?.id)) {\n      void this.buildColumns(client);\n    }\n  }\n\n  getTitle(): string {\n    return 'Assets';\n  }\n\n  getRequestParams(event?: TableLazyLoadEvent): DataGridParams {\n    let sortField = 'name:asc'; // Default\n\n    if (isDefined(event?.sortField)) {\n      const sortOrder = event.sortOrder === 1 ? 'asc' : 'desc';\n      sortField = `${event.sortField}:${sortOrder}`;\n    }\n\n    return {\n      owner: this.paramsSignal()['clientId'],\n      offset: isDefined(event?.first) ? event.first : 0,\n      recurse: false,\n      limit: isDefined(event?.rows) ? event.rows : DEFAULT_PAGE_SIZE,\n      sortField: sortField,\n      filters: this.rqlFilter(),\n    };\n  }\n\n  onFilterChange(field: string, value: FilterValue): void {\n    let actualField = this.fieldTransformations[field] || field;\n\n    // Transform category.* fields to categories.id for filtering\n    if (field.startsWith('category.')) {\n      actualField = 'categories.id';\n    }\n\n    const column = this.columnsSignal().find((col) => col.field === field);\n\n    if (Array.isArray(value)) {\n      const newFilters = this.gridBaseService.handleFilters(\n        this.filterState(),\n        actualField,\n        value,\n        undefined,\n        column?.filterMatchMode,\n      );\n\n      this.filterState.set(newFilters);\n      return;\n    }\n\n    // For non-array values, use the grid base service\n    const newFilters = this.gridBaseService.handleFilters(\n      this.filterState(),\n      actualField,\n      value,\n      undefined,\n      column?.filterMatchMode,\n    );\n\n    this.filterState.set(newFilters);\n  }\n\n  private loadFilterOptions(): void {\n    combineLatest([\n      this.entitiesService.listAssetTypes(this.paramsSignal()['clientId']),\n      this.entitiesService.listCostCentres(this.paramsSignal()['clientId']),\n      this.entitiesService.listAssetGroups(this.paramsSignal()['clientId']),\n    ])\n      .pipe(\n        takeUntilDestroyed(this.destroyRef),\n        catchError(() => {\n          return EMPTY;\n        }),\n      )\n      .subscribe(([types, costCentres, listAssetGroups]) => {\n        const currentColumns = this.columnsSignal();\n\n        const typeColumn = currentColumns.find(\n          (col) => col.field === 'assetType',\n        );\n        if (typeColumn?.filterConfig) {\n          typeColumn.filterConfig.options = types.items\n            .map((type) => ({\n              label: type.name,\n              value: type.id,\n            }))\n            .sort((a, b) => (a.label ?? '').localeCompare(b.label ?? ''));\n        }\n\n        const costCentreColumn = currentColumns.find(\n          (col) => col.field === 'costCentre',\n        );\n        if (costCentreColumn?.filterConfig) {\n          costCentreColumn.filterConfig.options = costCentres.items\n            .map((costCentre) => ({\n              label: costCentre.name ?? '',\n              value: costCentre.id,\n            }))\n            .sort((a, b) => a.label.localeCompare(b.label));\n        }\n\n        const groupColumn = currentColumns.find(\n          (col) => col.field === 'groups',\n        );\n        if (groupColumn?.filterConfig) {\n          groupColumn.filterConfig.options = listAssetGroups.items\n            .map((group) => ({\n              label: group.name ?? '',\n              value: group.id,\n            }))\n            .sort((a, b) => a.label.localeCompare(b.label));\n        }\n\n        // Update the signal with the modified columns\n        this.columnsSignal.set([...currentColumns]);\n      });\n  }\n\n  onAdd(): void {\n    const clientId = this.paramsSignal()['clientId'];\n\n    this.openAssetCreationDialog(clientId).subscribe((createdAsset) => {\n      if (isDefined(createdAsset)) {\n        // Refresh your asset list or take any other necessary actions\n        // this.refreshAssets();\n      }\n    });\n  }\n\n  openAssetCreationDialog(ownerId: string) {\n    this.dialogRef = this.dialogService.open(AssetCreateWizardComponent, {\n      header: 'Asset Wizard',\n      contentStyle: { overflow: 'auto' },\n      baseZIndex: 10000,\n      data: {\n        ownerId: ownerId,\n      },\n      position: 'top',\n      modal: true,\n    });\n\n    return this.dialogRef.onClose;\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport {\n  AfterViewInit,\n  ChangeDetectorRef,\n  Component,\n  DestroyRef,\n  inject,\n  OnInit,\n  signal,\n  TemplateRef,\n  ViewChild,\n} from '@angular/core';\nimport { takeUntilDestroyed } from '@angular/core/rxjs-interop';\nimport { ReactiveFormsModule } from '@angular/forms';\n\nimport { ButtonModule } from 'primeng/button';\nimport { DynamicDialogRef, DynamicDialogConfig } from 'primeng/dynamicdialog';\n\nimport {\n  EntitiesService,\n  AlertCreateRequest,\n  AlertResponse,\n  AlertNotify,\n} from '../../../../../api';\nimport { WizardComponent } from '../../../../../shared/components/wizard/wizard.component';\nimport { isDefined, isNullOrUndefined } from '../../../../../shared/utils';\nimport { BroadcastEventMessageService } from '../../../services/broadcast-event-messages.service';\nimport { AlertDetailsSectionComponent } from '../alert-details-section/alert-details-section.component';\nimport { Step } from '../../../../../shared/models';\nimport { AlertIconStorageService } from '../../../../../shared/services/alert-icon-storage.service';\nimport { finalize } from 'rxjs';\n\n@Component({\n  selector: 'app-alert-create-wizard',\n  imports: [\n    CommonModule,\n    ReactiveFormsModule,\n    WizardComponent,\n    ButtonModule,\n    AlertDetailsSectionComponent,\n  ],\n  templateUrl: './alert-create-wizard.component.html',\n  styleUrl: './alert-create-wizard.component.scss',\n})\nexport class AlertCreateWizardComponent implements AfterViewInit, OnInit {\n  @ViewChild('alertDetailsStep') alertDetailsStep!: TemplateRef<{\n    $implicit: Step;\n  }> | null;\n  @ViewChild('confirmationTemplate', { static: true })\n  confirmationTemplate!: TemplateRef<{ $implicit: Step }> | null;\n\n  // References to form components\n  @ViewChild('alertDetailsForm')\n  alertDetailsForm!: AlertDetailsSectionComponent;\n\n  private readonly entitiesService = inject(EntitiesService);\n  private readonly broadcastService = inject(BroadcastEventMessageService);\n  protected readonly destroyRef = inject(DestroyRef);\n  private readonly dialogRef = inject(DynamicDialogRef);\n  private readonly dialogConfig = inject(DynamicDialogConfig);\n  private readonly cdr = inject(ChangeDetectorRef);\n  private readonly alertIconStorageService = inject(AlertIconStorageService);\n\n  // Alert model to collect data across steps\n  newAlert = signal<AlertCreateRequest>({} as AlertCreateRequest);\n\n  // Form validity state\n  formIsValid = signal<boolean>(false);\n\n  steps: Step[] = [];\n  ownerId: string | null = null;\n  isSubmitting = signal<boolean>(false);\n\n  ngAfterViewInit() {\n    this.steps = [\n      {\n        value: 1,\n        header: 'Alert Details',\n        content: this.alertDetailsStep,\n        complete: false,\n        validate: () => this.alertDetailsForm.validate(),\n      },\n      {\n        value: 2,\n        header: 'Confirmation',\n        content: this.confirmationTemplate,\n        complete: true,\n      },\n    ];\n    this.cdr.detectChanges();\n  }\n\n  ngOnInit(): void {\n    if (isDefined(this.dialogConfig.data)) {\n      this.ownerId = this.dialogConfig.data.ownerId ?? null;\n\n      // Initialize alert with ownerId\n      this.newAlert.update((current) => ({\n        ...current,\n        ownerId: this.ownerId ?? '',\n      }));\n    }\n  }\n\n  openWizard() {\n    this.newAlert.set({} as AlertCreateRequest);\n  }\n\n  // Form validity handlers\n  onDetailsFormValidityChange(isValid: boolean) {\n    this.steps[0].disableNext = !isValid;\n    this.formIsValid.set(isValid);\n  }\n\n  // Update the alert state with form data\n  updateAlertDetails(formData: Record<string, unknown>) {\n    this.newAlert.update((current) => {\n      const updated = { ...current };\n\n      Object.keys(formData).forEach((key) => {\n        if (key !== 'ownerId') {\n          updated[key] = formData[key];\n        }\n      });\n\n      if (isNullOrUndefined(updated.ownerId)) {\n        updated.ownerId = this.ownerId ?? '';\n      }\n\n      return updated;\n    });\n  }\n\n  onWizardComplete(): void {\n    // Process the final data from all steps\n    const alertData = this.newAlert();\n\n    // Extract iconName for separate storage\n    const iconName = (alertData as unknown as { iconName?: string })?.iconName;\n\n    // Create API data without iconName\n    const { iconName: _, ...apiAlertData } = alertData as unknown as {\n      iconName?: string;\n    } & AlertCreateRequest;\n    this.isSubmitting.set(true);\n\n    this.entitiesService\n      .createAlert(apiAlertData)\n      .pipe(\n        takeUntilDestroyed(this.destroyRef),\n        finalize(() => this.isSubmitting.set(false)),\n      )\n      .subscribe({\n        next: (response: AlertResponse) => {\n          // Save the icon name to storage after successful creation\n          if (isDefined(iconName) && iconName !== '') {\n            this.alertIconStorageService.setAlertIcon(response.id, iconName);\n          }\n\n          this.broadcastService.broadcast('entity-updated', {\n            entityType: 'alert',\n            operation: 'create',\n            entityId: response.id,\n          });\n          this.dialogRef.close(response);\n        },\n        error: (error: Error) => {\n          // Handle error, could show message and keep dialog open\n          console.error('Error creating alert:', error);\n        },\n      });\n  }\n\n  // Update cancel to close dialog with no result\n  onWizardCancel(): void {\n    this.newAlert.set({} as AlertCreateRequest);\n    this.dialogRef.close();\n  }\n\n  getNotificationIndividualNames(\n    notify: AlertNotify[] | null | undefined,\n  ): string {\n    if (!notify) return '';\n    return notify.map((individual) => individual.name).join(', ');\n  }\n}\n","<app-wizard\n  [contentOnly]=\"true\"\n  [steps]=\"steps\"\n  [showSteps]=\"false\"\n  [useWizardButtonsOnly]=\"true\"\n  [loading]=\"isSubmitting()\"\n  (complete)=\"onWizardComplete()\"\n  (onCancel)=\"onWizardCancel()\"\n>\n</app-wizard>\n\n<!-- Step 1: Alert Details -->\n<ng-template #alertDetailsStep let-step>\n  <div class=\"p-fluid\">\n    <app-alert-details-section\n      #alertDetailsForm\n      [createMode]=\"true\"\n      [entity]=\"newAlert()\"\n      [ownerId]=\"ownerId\"\n      (formValidityChange)=\"onDetailsFormValidityChange($event)\"\n      (formValueChange)=\"updateAlertDetails($event)\"\n    ></app-alert-details-section>\n  </div>\n</ng-template>\n\n<ng-template #confirmationTemplate let-step>\n  <div class=\"flex gap-6\">\n    <span class=\"pi pi-check !text-5xl\"></span>\n\n    <div class=\"flex-1\">\n      <div class=\"grid\">\n        <!-- Alert Details Section -->\n        <div class=\"col-12 md:col-6\">\n          <p class=\"mb-4\">\n            You've completed all of the information required and we're ready to\n            create your Alert.\n          </p>\n\n          <div class=\"space-y-2\">\n            <!-- Each field in a side-by-side layout -->\n            <div class=\"flex\">\n              <div class=\"w-1/3 font-medium\">Name:</div>\n              <div class=\"w-2/3\">{{ newAlert().name || 'Not provided' }}</div>\n            </div>\n\n            <div class=\"flex\">\n              <div class=\"w-1/3 font-medium\">Cost Center:</div>\n              <div class=\"w-2/3\">\n                {{ newAlert().costCentre?.name || 'Not provided' }}\n              </div>\n            </div>\n\n            <div class=\"flex\">\n              <div class=\"w-1/3 font-medium\">Priority:</div>\n              <div class=\"w-2/3\">\n                {{ newAlert().priority || 'Not provided' }}\n              </div>\n            </div>\n\n            <div class=\"flex\">\n              <div class=\"w-1/3 font-medium\">Notify:</div>\n              <div class=\"w-2/3\">\n                {{ getNotificationIndividualNames(newAlert().notify) }}\n              </div>\n            </div>\n          </div>\n        </div>\n      </div>\n\n      <div\n        class=\"mt-4 pt-4 border-top-1 border-surface-200 dark:border-surface-700\"\n      >\n        <p class=\"mb-0\">Click finish to create this Alert.</p>\n      </div>\n    </div>\n  </div>\n</ng-template>\n","import { Injectable, computed, inject, signal } from '@angular/core';\n\nimport { TableLazyLoadEvent } from 'primeng/table';\n\nimport {\n  GridConfiguration,\n  GridDataService,\n  DataGridParams,\n  GridColumn,\n  FilterCriteria,\n  FilterValue,\n  DATE_FORMATS,\n} from '../../../shared/models';\nimport { UtilityService } from '../../../core/services/utility.service';\nimport { GridBaseService } from '../../../shared/services/grid-base.service';\nimport { isDefined } from '../../../shared/utils';\nimport { AlertsDataAdapter } from '../services/adapters';\nimport { AlertListItem } from '../../../api';\nimport { DEFAULT_PAGE_SIZE } from '../../../core/models';\nimport { MeasurementDateTimeService } from '../../../shared/services/measurement-units/measurement-date-time.service';\nimport { DynamicDialogRef, DialogService } from 'primeng/dynamicdialog';\nimport { AlertCreateWizardComponent } from '../components/alerts/alert-create-wizard/alert-create-wizard.component';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class AlertsGridConfig implements GridConfiguration<AlertListItem> {\n  private readonly alertsService = inject(AlertsDataAdapter);\n  private readonly utilityService = inject(UtilityService);\n  private readonly gridBaseService = inject(GridBaseService);\n  private dialogRef: DynamicDialogRef | null = null;\n  private readonly dialogService = inject(DialogService);\n  private readonly measurementDateTimeService = inject(\n    MeasurementDateTimeService,\n  );\n\n  private readonly defaultStateValues = [AlertListItem.StateEnum.Active];\n  private readonly filterState = signal<Record<string, FilterCriteria>>({\n    state: {\n      value: this.defaultStateValues,\n      operator: 'in',\n    },\n  });\n  private params: Record<string, string> = { clientId: '' };\n\n  private readonly rqlFilter = computed(() =>\n    this.utilityService.constructRqlFilter(this.filterState()),\n  );\n  private readonly fieldTransformations: Record<string, string> = {\n    costCentre: 'costCentre.id',\n  };\n  private readonly priorityLabels: Record<AlertListItem.PriorityEnum, string> =\n    {\n      high: 'High',\n      medium: 'Medium',\n      low: 'Low',\n    };\n  private readonly stateLabels: Record<AlertListItem.StateEnum, string> = {\n    active: 'Active',\n    deleted: 'Deleted',\n  };\n\n  entityType = 'alerts';\n  columns: GridColumn<AlertListItem>[] = [\n    {\n      field: 'name',\n      header: 'Name',\n      filter: true,\n      filterType: 'text',\n      filterMatchMode: 'contains',\n    },\n    {\n      field: 'costCentre',\n      header: 'Cost Centre',\n      valueGetter: (rowData: AlertListItem) =>\n        isDefined(rowData.costCentre?.name) ? rowData.costCentre?.name : '',\n      filter: true,\n      filterType: 'multiselect',\n      filterMatchMode: 'in',\n      filterConfig: {\n        type: 'multiselect',\n        options: [],\n      },\n    },\n    {\n      field: 'priority',\n      header: 'Priority',\n      valueGetter: (rowData: AlertListItem) =>\n        isDefined(rowData.priority)\n          ? this.priorityLabels[rowData.priority]\n          : '',\n      filter: true,\n      filterType: 'multiselect',\n      filterMatchMode: 'in',\n      filterConfig: {\n        type: 'multiselect',\n        options: [\n          { label: 'High', value: AlertListItem.PriorityEnum.High },\n          { label: 'Medium', value: AlertListItem.PriorityEnum.Medium },\n          { label: 'Low', value: AlertListItem.PriorityEnum.Low },\n        ],\n      },\n    },\n    {\n      field: 'state',\n      header: 'State',\n      valueGetter: (rowData: AlertListItem) =>\n        isDefined(rowData.state) ? this.stateLabels[rowData.state] : '',\n      filter: true,\n      filterType: 'multiselect',\n      filterMatchMode: 'in',\n      filterConfig: {\n        type: 'multiselect',\n        options: [\n          { label: 'Active', value: AlertListItem.StateEnum.Active },\n          { label: 'Deleted', value: AlertListItem.StateEnum.Deleted },\n        ],\n        defaultSelected: this.defaultStateValues,\n      },\n    },\n    {\n      field: 'modifiedDate',\n      header: 'Modified',\n      filter: false,\n      valueGetter: (rowData: AlertListItem) =>\n        isDefined(rowData.modifiedDate)\n          ? this.measurementDateTimeService.formatDateTime(\n              this.measurementDateTimeService.createDateAssumingUtc(\n                rowData.modifiedDate,\n              ),\n              DATE_FORMATS.DATE_TIME_SECONDS,\n            )\n          : '',\n    },\n  ];\n\n  dataService: GridDataService<AlertListItem> = this.alertsService;\n\n  getFilters(): Record<string, FilterCriteria> {\n    return this.filterState();\n  }\n\n  clearFilters(): void {\n    this.filterState.set({\n      state: {\n        value: this.defaultStateValues,\n        operator: 'in',\n      },\n    });\n  }\n\n  initialize(params: Record<string, string>): void {\n    this.params = params;\n  }\n\n  getTitle(): string {\n    return 'Alerts';\n  }\n\n  getRequestParams(event?: TableLazyLoadEvent): DataGridParams {\n    // Add sorting support\n    let sortField = 'name:asc'; // Default\n\n    if (isDefined(event?.sortField)) {\n      const sortOrder = event.sortOrder === 1 ? 'asc' : 'desc';\n      sortField = `${event.sortField}:${sortOrder}`;\n    }\n\n    return {\n      owner: this.params['clientId'],\n      offset: isDefined(event?.first) ? event.first : 0,\n      recurse: false,\n      limit: isDefined(event?.rows) ? event.rows : DEFAULT_PAGE_SIZE,\n      sortField: sortField,\n      filters: this.rqlFilter(),\n    };\n  }\n\n  onFilterChange(field: string, value: FilterValue): void {\n    const actualField = this.fieldTransformations[field] || field;\n    const column = this.columns.find((col) => col.field === field);\n\n    if (Array.isArray(value)) {\n      const newFilters = this.gridBaseService.handleFilters(\n        this.filterState(),\n        actualField,\n        value,\n        undefined,\n        column?.filterMatchMode,\n      );\n\n      this.filterState.set(newFilters);\n      return;\n    }\n\n    // For non-array values, use the grid base service\n    const newFilters = this.gridBaseService.handleFilters(\n      this.filterState(),\n      actualField,\n      value,\n      undefined,\n      column?.filterMatchMode,\n    );\n\n    this.filterState.set(newFilters);\n  }\n\n  onAdd(): void {\n    const clientId = this.params['clientId'];\n\n    this.openAlertCreationDialog(clientId).subscribe((createdAlert) => {\n      if (isDefined(createdAlert)) {\n        // Refresh your alert list or take any other necessary actions\n        // this.refreshAlerts();\n      }\n    });\n  }\n\n  openAlertCreationDialog(ownerId: string) {\n    this.dialogRef = this.dialogService.open(AlertCreateWizardComponent, {\n      header: 'Alert Wizard',\n      contentStyle: { overflow: 'auto' },\n      baseZIndex: 10000,\n      data: { ownerId: ownerId },\n      position: 'top',\n      modal: true,\n    });\n\n    return this.dialogRef.onClose;\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport {\n  AfterViewInit,\n  ChangeDetectorRef,\n  Component,\n  DestroyRef,\n  inject,\n  OnInit,\n  signal,\n  TemplateRef,\n  ViewChild,\n} from '@angular/core';\nimport { takeUntilDestroyed } from '@angular/core/rxjs-interop';\nimport { ReactiveFormsModule } from '@angular/forms';\n\nimport { ButtonModule } from 'primeng/button';\nimport { DynamicDialogRef, DynamicDialogConfig } from 'primeng/dynamicdialog';\n\nimport {\n  EntitiesService,\n  AssetTagCreateRequest,\n  AssetTagResponse,\n} from '../../../../../api';\nimport { WizardComponent } from '../../../../../shared/components/wizard/wizard.component';\nimport { isDefined, isNullOrUndefined } from '../../../../../shared/utils';\nimport { BroadcastEventMessageService } from '../../../services/broadcast-event-messages.service';\nimport { AssetTagDetailsSectionComponent } from '../asset-tag-details-section/asset-tag-details-section.component';\nimport { Step } from '../../../../../shared/models';\nimport { finalize } from 'rxjs';\n\n@Component({\n  selector: 'app-asset-tag-create-wizard',\n  imports: [\n    CommonModule,\n    ReactiveFormsModule,\n    WizardComponent,\n    ButtonModule,\n    AssetTagDetailsSectionComponent,\n  ],\n  templateUrl: './asset-tag-create-wizard.component.html',\n  styleUrl: './asset-tag-create-wizard.component.scss',\n})\nexport class AssetTagCreateWizardComponent implements AfterViewInit, OnInit {\n  @ViewChild('assetTagDetailsStep') assetTagDetailsStep!: TemplateRef<{\n    $implicit: Step;\n  }> | null;\n  @ViewChild('confirmationTemplate', { static: true })\n  confirmationTemplate!: TemplateRef<{ $implicit: Step }> | null;\n\n  // References to form components\n  @ViewChild('assetTagDetailsForm')\n  assetTagDetailsForm!: AssetTagDetailsSectionComponent;\n\n  private readonly entitiesService = inject(EntitiesService);\n  private readonly broadcastService = inject(BroadcastEventMessageService);\n  protected readonly destroyRef = inject(DestroyRef);\n  private readonly dialogRef = inject(DynamicDialogRef);\n  private readonly dialogConfig = inject(DynamicDialogConfig);\n  private readonly cdr = inject(ChangeDetectorRef);\n\n  // AssetTag model to collect data across steps\n  newAssetTag = signal<AssetTagCreateRequest>({} as AssetTagCreateRequest);\n\n  // Form validity state\n  formIsValid = signal<boolean>(false);\n\n  displayWizard = false;\n  steps: Step[] = [];\n  previousStepIndex = 0;\n  currentStepIndex = 0;\n  ownerId: string | null = null;\n  isSubmitting = signal<boolean>(false);\n\n  ngAfterViewInit() {\n    this.steps = [\n      {\n        value: 1,\n        header: 'Asset Tag Details',\n        content: this.assetTagDetailsStep,\n        complete: false,\n        validate: () => this.assetTagDetailsForm.validate(),\n      },\n      {\n        value: 2,\n        header: 'Confirmation',\n        content: this.confirmationTemplate,\n        complete: true,\n      },\n    ];\n    this.cdr.detectChanges();\n  }\n\n  ngOnInit(): void {\n    if (isDefined(this.dialogConfig.data)) {\n      this.ownerId = this.dialogConfig.data.ownerId ?? null;\n\n      // Initialize assetTag with ownerId\n      this.newAssetTag.update((current) => ({\n        ...current,\n        ownerId: this.ownerId ?? '',\n      }));\n    }\n  }\n\n  openWizard() {\n    this.displayWizard = true;\n    this.newAssetTag.set({} as AssetTagCreateRequest);\n  }\n\n  // Form validity handlers\n  onDetailsFormValidityChange(isValid: boolean) {\n    this.steps[0].disableNext = !isValid;\n    this.formIsValid.set(isValid);\n  }\n\n  // Update the assetTag state with form data\n  updateAssetTagDetails(formData: Record<string, unknown>) {\n    this.newAssetTag.update((current) => {\n      const updated = { ...current };\n\n      Object.keys(formData).forEach((key) => {\n        if (key !== 'ownerId') {\n          updated[key] = formData[key];\n        }\n      });\n\n      if (isNullOrUndefined(updated.ownerId)) {\n        updated.ownerId = this.ownerId ?? '';\n      }\n\n      return updated;\n    });\n  }\n\n  onWizardComplete(): void {\n    // Process the final data from all steps\n    const assetTagData = this.newAssetTag();\n    this.isSubmitting.set(true);\n\n    this.entitiesService\n      .createAssetTag(assetTagData)\n      .pipe(\n        takeUntilDestroyed(this.destroyRef),\n        finalize(() => this.isSubmitting.set(false)),\n      )\n      .subscribe({\n        next: (response: AssetTagResponse) => {\n          this.broadcastService.broadcast('entity-updated', {\n            entityType: 'asset-tag',\n            operation: 'create',\n            entityId: response.id,\n          });\n          this.dialogRef.close(response);\n        },\n        error: (error: Error) => {\n          // Handle error, could show message and keep dialog open\n          console.error('Error creating asset tag:', error);\n        },\n      });\n  }\n\n  // Update cancel to close dialog with no result\n  onWizardCancel(): void {\n    this.newAssetTag.set({} as AssetTagCreateRequest);\n    this.dialogRef.close();\n  }\n}\n","<app-wizard\n  [contentOnly]=\"true\"\n  [steps]=\"steps\"\n  [showSteps]=\"false\"\n  [useWizardButtonsOnly]=\"true\"\n  [loading]=\"isSubmitting()\"\n  (complete)=\"onWizardComplete()\"\n  (onCancel)=\"onWizardCancel()\"\n>\n</app-wizard>\n\n<!-- Step 1: AssetTag Details -->\n<ng-template #assetTagDetailsStep let-step>\n  <div class=\"p-fluid\">\n    <app-asset-tag-details-section\n      #assetTagDetailsForm\n      [createMode]=\"true\"\n      [entity]=\"newAssetTag()\"\n      [ownerId]=\"ownerId\"\n      (formValidityChange)=\"onDetailsFormValidityChange($event)\"\n      (formValueChange)=\"updateAssetTagDetails($event)\"\n    ></app-asset-tag-details-section>\n  </div>\n</ng-template>\n\n<ng-template #confirmationTemplate let-step>\n  <div class=\"flex gap-6\">\n    <span class=\"pi pi-check !text-5xl\"></span>\n\n    <div class=\"flex-1\">\n      <div class=\"grid\">\n        <!-- AssetTag Details Section -->\n        <div class=\"col-12 md:col-6\">\n          <p class=\"mb-4\">\n            You've completed all of the information required and we're ready to\n            create your Asset Tag.\n          </p>\n\n          <div class=\"space-y-2\">\n            <!-- Each field in a side-by-side layout -->\n            <div class=\"flex\">\n              <div class=\"w-1/3 font-medium\">Name:</div>\n              <div class=\"w-2/3\">\n                {{ newAssetTag().name || 'Not provided' }}\n              </div>\n            </div>\n\n            <div class=\"flex\">\n              <div class=\"w-1/3 font-medium\">Serial Number:</div>\n              <div class=\"w-2/3\">\n                {{ newAssetTag().serialNumber || 'Not provided' }}\n              </div>\n            </div>\n\n            <div class=\"flex\">\n              <div class=\"w-1/3 font-medium\">Tag Type:</div>\n              <div class=\"w-2/3\">\n                {{ newAssetTag().assetTagType.name || 'Not provided' }}\n              </div>\n            </div>\n          </div>\n\n          <div class=\"flex\">\n            <div class=\"w-1/3 font-medium\">Mode:</div>\n            <div class=\"w-2/3\">\n              {{ newAssetTag().mode }}\n            </div>\n          </div>\n        </div>\n      </div>\n\n      <div\n        class=\"mt-4 pt-4 border-top-1 border-surface-200 dark:border-surface-700\"\n      >\n        <p class=\"mb-0\">Click finish to create this Asset Tag.</p>\n      </div>\n    </div>\n  </div>\n</ng-template>\n","import { Injectable, computed, inject, signal } from '@angular/core';\n\nimport { TableLazyLoadEvent } from 'primeng/table';\n\nimport {\n  GridConfiguration,\n  GridDataService,\n  DataGridParams,\n  GridColumn,\n  FilterCriteria,\n  FilterValue,\n  DATE_FORMATS,\n} from '../../../shared/models';\nimport { UtilityService } from '../../../core/services/utility.service';\nimport { GridBaseService } from '../../../shared/services/grid-base.service';\nimport { isDefined } from '../../../shared/utils';\nimport { AssetTagsDataAdapter } from '../services/adapters';\nimport { AssetTagListItem } from '../../../api';\nimport { DEFAULT_PAGE_SIZE } from '../../../core/models';\nimport { DynamicDialogRef, DialogService } from 'primeng/dynamicdialog';\nimport { AssetTagCreateWizardComponent } from '../components/asset-tags/asset-tag-create-wizard/asset-tag-create-wizard.component';\nimport { MeasurementDateTimeService } from '../../../shared/services/measurement-units/measurement-date-time.service';\n\n@Injectable({ providedIn: 'root' })\nexport class AssetTagsGridConfig\n  implements GridConfiguration<AssetTagListItem>\n{\n  private readonly assetTagsService = inject(AssetTagsDataAdapter);\n  private readonly utilityService = inject(UtilityService);\n  private readonly gridBaseService = inject(GridBaseService);\n  private dialogRef: DynamicDialogRef | null = null;\n  private readonly dialogService = inject(DialogService);\n  private readonly measurementDateTimeService = inject(\n    MeasurementDateTimeService,\n  );\n\n  private readonly defaultStateValues = [AssetTagListItem.StateEnum.Active];\n  private readonly filterState = signal<Record<string, FilterCriteria>>({\n    state: { value: this.defaultStateValues, operator: 'in' },\n  });\n  private params: Record<string, string> = { clientId: '' };\n\n  private readonly rqlFilter = computed(() =>\n    this.utilityService.constructRqlFilter(this.filterState()),\n  );\n  private readonly fieldTransformations: Record<string, string> = {\n    tagType: 'assetTagType.name',\n    asset: 'asset.name',\n  };\n\n  private readonly stateLabels: Record<AssetTagListItem.StateEnum, string> = {\n    active: 'Active',\n    deleted: 'Deleted',\n  };\n\n  entityType = 'asset-tags';\n  columns: GridColumn<AssetTagListItem>[] = [\n    {\n      field: 'name',\n      header: 'Name',\n      filter: true,\n      filterType: 'text',\n      filterMatchMode: 'contains',\n    },\n    {\n      field: 'serialNumber',\n      header: 'Serial Number',\n      filter: true,\n      filterType: 'text',\n      filterMatchMode: 'contains',\n    },\n    {\n      field: 'tagType',\n      header: 'Tag Type',\n      valueGetter: (rowData: AssetTagListItem) =>\n        rowData.assetTagType?.name ?? '',\n      filter: true,\n      filterType: 'text',\n      filterMatchMode: 'contains',\n    },\n    {\n      field: 'mode',\n      header: 'Mode',\n      filter: true,\n      filterType: 'multiselect',\n      filterMatchMode: 'in',\n      filterConfig: {\n        type: 'multiselect',\n        options: [\n          { label: 'Movable', value: AssetTagListItem.ModeEnum.Movable },\n          { label: 'Fixed', value: AssetTagListItem.ModeEnum.Fixed },\n          { label: 'Stock', value: AssetTagListItem.ModeEnum.Stock },\n        ],\n      },\n      transform: 'capitalize',\n    },\n    {\n      field: 'state',\n      header: 'State',\n      valueGetter: (rowData: AssetTagListItem) =>\n        isDefined(rowData.state) ? this.stateLabels[rowData.state] : '',\n      filter: true,\n      filterType: 'multiselect',\n      filterMatchMode: 'in',\n      filterConfig: {\n        type: 'multiselect',\n        options: [\n          { label: 'Active', value: AssetTagListItem.StateEnum.Active },\n          { label: 'Deleted', value: AssetTagListItem.StateEnum.Deleted },\n        ],\n        defaultSelected: this.defaultStateValues,\n      },\n    },\n    {\n      field: 'asset',\n      header: 'Asset',\n      valueGetter: (rowData: AssetTagListItem) => rowData.asset?.name ?? '',\n      filter: true,\n      filterType: 'text',\n      filterMatchMode: 'contains',\n    },\n    {\n      field: 'modifiedDate',\n      header: 'Modified',\n      filter: false,\n      valueGetter: (rowData: AssetTagListItem) =>\n        isDefined(rowData['modifiedDate'])\n          ? this.measurementDateTimeService.formatDateTime(\n              this.measurementDateTimeService.createDateAssumingUtc(\n                rowData['modifiedDate'],\n              ),\n              DATE_FORMATS.DATE_TIME_SECONDS,\n            )\n          : '',\n    },\n  ];\n\n  dataService: GridDataService<AssetTagListItem> = this.assetTagsService;\n\n  getFilters(): Record<string, FilterCriteria> {\n    return this.filterState();\n  }\n\n  clearFilters(): void {\n    this.filterState.set({\n      state: { value: this.defaultStateValues, operator: 'in' },\n    });\n  }\n\n  initialize(params: Record<string, string>): void {\n    this.params = params;\n  }\n\n  getTitle(): string {\n    return 'Asset Tags';\n  }\n\n  getRequestParams(event?: TableLazyLoadEvent): DataGridParams {\n    // Add sorting support\n    let sortField = 'name:asc'; // Default\n\n    if (isDefined(event?.sortField)) {\n      const sortOrder = event.sortOrder === 1 ? 'asc' : 'desc';\n      sortField = `${event.sortField}:${sortOrder}`;\n    }\n\n    return {\n      owner: this.params['clientId'],\n      offset: isDefined(event?.first) ? event.first : 0,\n      recurse: false,\n      limit: isDefined(event?.rows) ? event.rows : DEFAULT_PAGE_SIZE,\n      sortField: sortField,\n      filters: this.rqlFilter(),\n    };\n  }\n\n  onFilterChange(field: string, value: FilterValue): void {\n    const actualField = this.fieldTransformations[field] || field;\n    const column = this.columns.find((col) => col.field === field);\n\n    if (Array.isArray(value)) {\n      const newFilters = this.gridBaseService.handleFilters(\n        this.filterState(),\n        actualField,\n        value,\n        undefined,\n        column?.filterMatchMode,\n      );\n\n      this.filterState.set(newFilters);\n      return;\n    }\n\n    // For non-array values, use the grid base service\n    const newFilters = this.gridBaseService.handleFilters(\n      this.filterState(),\n      actualField,\n      value,\n      undefined,\n      column?.filterMatchMode,\n    );\n\n    this.filterState.set(newFilters);\n  }\n\n  onAdd(): void {\n    const clientId = this.params['clientId'];\n\n    this.openAssetTagCreationDialog(clientId).subscribe();\n  }\n\n  openAssetTagCreationDialog(ownerId: string) {\n    this.dialogRef = this.dialogService.open(AssetTagCreateWizardComponent, {\n      header: 'Asset Tag Wizard',\n      contentStyle: { overflow: 'auto' },\n      baseZIndex: 10000,\n      data: { ownerId: ownerId },\n      position: 'top',\n      modal: true,\n    });\n\n    return this.dialogRef.onClose;\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport {\n  Component,\n  ViewChild,\n  AfterViewInit,\n  TemplateRef,\n  signal,\n  inject,\n  OnInit,\n  DestroyRef,\n} from '@angular/core';\nimport { ReactiveFormsModule } from '@angular/forms';\nimport { WizardComponent } from '../../../../../shared/components/wizard/wizard.component';\nimport { Step } from '../../../../../shared/models';\nimport { ButtonModule } from 'primeng/button';\nimport { DeviceDetailsSectionComponent } from '../device-details-section/device-details-section.component';\nimport {\n  isDefined,\n  isEmpty,\n  isNullOrUndefined,\n} from '../../../../../shared/utils';\nimport {\n  DeviceCreateRequest,\n  DeviceResponse,\n  EntitiesService,\n} from '../../../../../api';\nimport { takeUntilDestroyed } from '@angular/core/rxjs-interop';\nimport { DynamicDialogRef, DynamicDialogConfig } from 'primeng/dynamicdialog';\nimport { BroadcastEventMessageService } from '../../../services/broadcast-event-messages.service';\nimport { InfoSectionComponent } from '../../shared/info-section/info-section.component';\nimport { AdminStateService } from '../../../services/admin-state.service';\nimport { finalize } from 'rxjs';\n\n@Component({\n  selector: 'app-device-create-wizard',\n  standalone: true,\n  imports: [\n    CommonModule,\n    ReactiveFormsModule,\n    WizardComponent,\n    ButtonModule,\n    DeviceDetailsSectionComponent,\n    InfoSectionComponent,\n  ],\n  templateUrl: './device-create-wizard.component.html',\n  styleUrl: './device-create-wizard.component.scss',\n})\nexport class DeviceCreateWizardComponent implements AfterViewInit, OnInit {\n  @ViewChild('deviceDetailsStep') deviceDetailsStep!: TemplateRef<{\n    $implicit: Step;\n  }> | null;\n  @ViewChild('deviceInfoStep', { static: true })\n  deviceInfoStep!: TemplateRef<{ $implicit: Step }> | null;\n  @ViewChild('confirmationTemplate', { static: true })\n  confirmationTemplate!: TemplateRef<{ $implicit: Step }> | null;\n\n  // References to form components\n  @ViewChild('deviceDetailsForm')\n  deviceDetailsForm!: DeviceDetailsSectionComponent;\n  @ViewChild('deviceInfoForm')\n  deviceInfoForm!: InfoSectionComponent<DeviceResponse>;\n\n  private readonly entitiesService = inject(EntitiesService);\n  private readonly broadcastService = inject(BroadcastEventMessageService);\n  protected readonly destroyRef = inject(DestroyRef);\n  private readonly dialogRef = inject(DynamicDialogRef);\n  private readonly dialogConfig = inject(DynamicDialogConfig);\n  private readonly adminStateService = inject(AdminStateService);\n  readonly entityCustomFields = signal<Record<string, string>[]>([]);\n\n  // Device model to collect data across steps\n  newDevice = signal<DeviceCreateRequest>({} as DeviceCreateRequest);\n\n  // Form validity state\n  formIsValid = signal<boolean>(false);\n\n  displayWizard = false;\n  steps: Step[] = [];\n  previousStepIndex = 0;\n  currentStepIndex = 0;\n  ownerId: string | null = null;\n  isSubmitting = signal<boolean>(false);\n\n  ngAfterViewInit() {\n    setTimeout(() => {\n      this.steps = [\n        {\n          value: 1,\n          header: 'Device Details',\n          content: this.deviceDetailsStep,\n          complete: false,\n          validate: () => this.deviceDetailsForm.validate(),\n        },\n        {\n          value: 2,\n          header: 'Device Information',\n          content: this.deviceInfoStep,\n          complete: false,\n          validate: () => this.deviceInfoForm.validate(),\n        },\n        {\n          value: 3,\n          header: 'Confirmation',\n          content: this.confirmationTemplate,\n          complete: true,\n        },\n      ];\n    });\n  }\n\n  ngOnInit(): void {\n    if (isDefined(this.dialogConfig.data)) {\n      this.ownerId = this.dialogConfig.data.ownerId ?? null;\n\n      // Initialize device with ownerId\n      this.newDevice.update((current) => ({\n        ...current,\n        ownerId: this.ownerId ?? '',\n      }));\n    }\n\n    const selectedClient = this.adminStateService.selectedClient();\n\n    if (selectedClient) {\n      // Update the custom fields signal\n      this.entityCustomFields.set([\n        ...(selectedClient.customFields?.['device'] ?? []),\n      ]);\n    }\n  }\n\n  openWizard() {\n    this.displayWizard = true;\n    this.newDevice.set({} as DeviceCreateRequest);\n  }\n\n  // Form validity handlers\n  onDetailsFormValidityChange(isValid: boolean) {\n    this.steps[0].disableNext = !isValid;\n    this.formIsValid.set(isValid);\n  }\n\n  onInfoFormValidityChange(isValid: boolean) {\n    this.steps[1].disableNext = !isValid;\n    this.formIsValid.set(isValid);\n  }\n\n  // Update the device state with form data\n  updateDeviceDetails(formData: Record<string, unknown>) {\n    this.newDevice.update((current) => {\n      const updated = { ...current };\n\n      Object.keys(formData).forEach((key) => {\n        if (key !== 'ownerId') {\n          updated[key] = formData[key];\n        }\n      });\n\n      if (isNullOrUndefined(updated.ownerId)) {\n        updated.ownerId = this.ownerId ?? '';\n      }\n\n      return updated;\n    });\n  }\n\n  updateDeviceInfo(formData: Record<string, unknown>) {\n    this.newDevice.update((current) => {\n      const updated = { ...current };\n\n      updated['fields'] = isEmpty(formData['fields'])\n        ? undefined\n        : (formData as Record<string, Record<string, object>>)['fields'];\n\n      if (isNullOrUndefined(updated.ownerId)) {\n        updated.ownerId = this.ownerId ?? '';\n      }\n\n      return updated;\n    });\n  }\n\n  onWizardComplete(): void {\n    // Process the final data from all steps\n    const deviceData = this.newDevice();\n    this.isSubmitting.set(true);\n\n    this.entitiesService\n      .createDevice(deviceData)\n      .pipe(\n        takeUntilDestroyed(this.destroyRef),\n        finalize(() => this.isSubmitting.set(false)),\n      )\n      .subscribe({\n        next: (response: DeviceResponse) => {\n          this.broadcastService.broadcast('entity-updated', {\n            entityType: 'device',\n            operation: 'create',\n            entityId: response.id,\n          });\n          this.dialogRef.close(response);\n        },\n        error: (error: Error) => {\n          console.error('Error creating device:', error);\n        },\n      });\n  }\n\n  // Update cancel to close dialog with no result\n  onWizardCancel(): void {\n    this.newDevice.set({} as DeviceCreateRequest);\n    this.dialogRef.close();\n  }\n}\n","<app-wizard\n  [contentOnly]=\"true\"\n  [steps]=\"steps\"\n  [showSteps]=\"false\"\n  [useWizardButtonsOnly]=\"true\"\n  [loading]=\"isSubmitting()\"\n  (complete)=\"onWizardComplete()\"\n  (onCancel)=\"onWizardCancel()\"\n>\n</app-wizard>\n\n<!-- Step 1: Device Details -->\n<ng-template #deviceDetailsStep let-step>\n  <div class=\"p-fluid\">\n    <app-device-details-section\n      #deviceDetailsForm\n      [createMode]=\"true\"\n      [entity]=\"newDevice()\"\n      [ownerId]=\"ownerId\"\n      (formValidityChange)=\"onDetailsFormValidityChange($event)\"\n      (formValueChange)=\"updateDeviceDetails($event)\"\n    ></app-device-details-section>\n  </div>\n</ng-template>\n\n<ng-template #deviceInfoStep let-step>\n  <div class=\"p-fluid\">\n    <app-info-section\n      #deviceInfoForm\n      [createMode]=\"true\"\n      [entity]=\"newDevice()\"\n      entityType=\"device\"\n      (formValidityChange)=\"onInfoFormValidityChange($event)\"\n      (formValueChange)=\"updateDeviceInfo($event)\"\n    ></app-info-section>\n  </div>\n</ng-template>\n\n<ng-template #confirmationTemplate let-step>\n  <div class=\"flex gap-6\">\n    <span class=\"pi pi-check !text-5xl\"></span>\n\n    <div class=\"flex-1\">\n      <div class=\"grid\">\n        <!-- Device Details Section -->\n        <div class=\"col-12 md:col-6\">\n          <p class=\"mb-4\">\n            You've completed all of the information required and we're ready to\n            create your Device.\n          </p>\n\n          <div class=\"space-y-2\">\n            <div class=\"flex\">\n              <div class=\"w-1/3 font-medium\">Serial Number:</div>\n              <div class=\"w-2/3\">{{ newDevice().name || 'Not provided' }}</div>\n            </div>\n\n            <div class=\"flex\">\n              <div class=\"w-1/3 font-medium\">Device Type:</div>\n              <div class=\"w-2/3\">\n                {{ newDevice().deviceType.name || 'Not selected' }}\n              </div>\n            </div>\n\n            <div class=\"flex\">\n              <div class=\"w-1/3 font-medium\">Configuration:</div>\n              <div class=\"w-2/3\">{{ newDevice().configProfile?.name }}</div>\n            </div>\n\n            <!-- Device Info Section -->\n            <div class=\"space-y-2\">\n              @for (item of entityCustomFields(); track $index) {\n                <div class=\"flex\">\n                  <div class=\"w-1/3 font-medium\">{{ item?.['title'] }}</div>\n                  <div class=\"w-2/3\">\n                    {{ newDevice()['fields']?.[item['id']] || 'Not provided' }}\n                  </div>\n                </div>\n              }\n            </div>\n          </div>\n        </div>\n      </div>\n\n      <div\n        class=\"mt-4 pt-4 border-top-1 border-surface-200 dark:border-surface-700\"\n      >\n        <p class=\"mb-0\">Click finish to create this Device.</p>\n      </div>\n    </div>\n  </div>\n</ng-template>\n","import { Injectable, computed, inject, signal } from '@angular/core';\n\nimport { TableLazyLoadEvent } from 'primeng/table';\n\nimport {\n  GridConfiguration,\n  GridDataService,\n  DataGridParams,\n  GridColumn,\n  FilterCriteria,\n  FilterValue,\n  DATE_FORMATS,\n} from '../../../shared/models';\nimport { UtilityService } from '../../../core/services/utility.service';\nimport { GridBaseService } from '../../../shared/services/grid-base.service';\nimport { isDefined, isString } from '../../../shared/utils';\nimport { DevicesDataAdapter } from '../services/adapters';\nimport { DeviceListItem } from '../../../api';\nimport { DEFAULT_PAGE_SIZE } from '../../../core/models';\nimport { DynamicDialogRef, DialogService } from 'primeng/dynamicdialog';\nimport { DeviceCreateWizardComponent } from '../components/device/device-create-wizard/device-create-wizard.component';\nimport { MeasurementDateTimeService } from '../../../shared/services/measurement-units/measurement-date-time.service';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class DevicesGridConfig implements GridConfiguration<DeviceListItem> {\n  private readonly devicesService = inject(DevicesDataAdapter);\n  private readonly utilityService = inject(UtilityService);\n  private readonly gridBaseService = inject(GridBaseService);\n  private dialogRef: DynamicDialogRef | null = null;\n  private readonly dialogService = inject(DialogService);\n  private readonly measurementDateTimeService = inject(\n    MeasurementDateTimeService,\n  );\n\n  private readonly defaultStateValues = [\n    DeviceListItem.StateEnum.Active,\n    DeviceListItem.StateEnum.Inactive,\n    DeviceListItem.StateEnum.Suspended,\n  ];\n  private readonly filterState = signal<Record<string, FilterCriteria>>({\n    state: {\n      value: this.defaultStateValues,\n      operator: 'in',\n    },\n  });\n  private params: Record<string, string> = { clientId: '' };\n\n  private readonly rqlFilter = computed(() =>\n    this.utilityService.constructRqlFilter(this.filterState()),\n  );\n  private readonly fieldTransformations: Record<string, string> = {\n    ['01usv']: 'fields.01usv',\n    ['02udr']: 'fields.02udr',\n    simCard: 'simcard.name',\n    asset: 'asset.name',\n    configProfile: 'configProfile.name',\n    deviceType: 'deviceType.name',\n  };\n  private readonly stateLabels: Record<DeviceListItem.StateEnum, string> = {\n    active: 'Active',\n    deleted: 'Deleted',\n    inactive: 'Inactive',\n    suspended: 'Suspended',\n  };\n\n  entityType = 'devices';\n  columns: GridColumn<DeviceListItem>[] = [\n    {\n      field: 'name',\n      header: 'Name',\n      filter: true,\n      filterType: 'text',\n      filterMatchMode: 'contains',\n    },\n    {\n      field: 'deviceType',\n      header: 'Type',\n      valueGetter: (rowData: DeviceListItem) =>\n        isDefined(rowData.deviceType?.name) ? rowData.deviceType?.name : '',\n      filter: true,\n      filterType: 'multiselect',\n      filterMatchMode: 'in',\n      filterConfig: {\n        type: 'multiselect',\n        options: [],\n      },\n    },\n    {\n      field: 'state',\n      header: 'State',\n      valueGetter: (rowData: DeviceListItem) =>\n        isDefined(rowData.state) ? this.stateLabels[rowData.state] : '',\n      filter: true,\n      filterType: 'multiselect',\n      filterMatchMode: 'in',\n      filterConfig: {\n        type: 'multiselect',\n        options: [\n          { label: 'Active', value: DeviceListItem.StateEnum.Active },\n          { label: 'Deleted', value: DeviceListItem.StateEnum.Deleted },\n          { label: 'Inactive', value: DeviceListItem.StateEnum.Inactive },\n          { label: 'Suspended', value: DeviceListItem.StateEnum.Suspended },\n        ],\n        defaultSelected: this.defaultStateValues,\n      },\n      transform: 'capitalize',\n    },\n    {\n      field: 'asset',\n      header: 'Asset',\n      valueGetter: (rowData: DeviceListItem) =>\n        isDefined(rowData.asset?.name) ? rowData.asset?.name : '',\n      filter: true,\n      filterType: 'text',\n      filterMatchMode: 'contains',\n    },\n    {\n      field: 'simCard',\n      header: 'SIM Card',\n      valueGetter: (rowData: DeviceListItem) =>\n        isDefined(rowData.simcard?.name) ? rowData.simcard?.name : '',\n      filter: true,\n      filterType: 'text',\n      filterMatchMode: 'contains',\n    },\n    {\n      field: 'configProfile',\n      header: 'Config Profile',\n      valueGetter: (rowData: DeviceListItem) =>\n        isDefined(rowData.configProfile?.name)\n          ? rowData.configProfile?.name\n          : '',\n      filter: true,\n      filterType: 'text',\n      filterMatchMode: 'contains',\n    },\n    {\n      field: '01usv',\n      header: 'Device Serial',\n      valueGetter: (rowData: DeviceListItem) =>\n        isDefined(rowData.fields?.['01usv']) &&\n        isString(rowData.fields?.['01usv'])\n          ? rowData.fields?.['01usv']\n          : '',\n      filter: true,\n      filterType: 'text',\n      filterMatchMode: 'contains',\n    },\n    {\n      field: '02udr',\n      header: 'Device Remarks',\n      valueGetter: (rowData: DeviceListItem) =>\n        isDefined(rowData.fields?.['02udr']) &&\n        isString(rowData.fields?.['02udr'])\n          ? rowData.fields?.['02udr']\n          : '',\n      filter: true,\n      filterType: 'text',\n      filterMatchMode: 'contains',\n    },\n    {\n      field: 'modifiedDate',\n      header: 'Modified',\n      filter: false,\n      valueGetter: (rowData: DeviceListItem) =>\n        isDefined(rowData['modifiedDate'])\n          ? this.measurementDateTimeService.formatDateTime(\n              this.measurementDateTimeService.createDateAssumingUtc(\n                rowData['modifiedDate'],\n              ),\n              DATE_FORMATS.DATE_TIME_SECONDS,\n            )\n          : '',\n    },\n  ];\n\n  dataService: GridDataService<DeviceListItem> = this.devicesService;\n\n  getFilters(): Record<string, FilterCriteria> {\n    return this.filterState();\n  }\n\n  clearFilters(): void {\n    this.filterState.set({\n      state: {\n        value: this.defaultStateValues,\n        operator: 'in',\n      },\n    });\n  }\n\n  initialize(params: Record<string, string>): void {\n    this.params = params;\n  }\n\n  getTitle(): string {\n    return 'Devices';\n  }\n\n  getRequestParams(event?: TableLazyLoadEvent): DataGridParams {\n    // Add sorting support\n    let sortField = 'name:asc'; // Default\n\n    if (isDefined(event?.sortField)) {\n      const sortOrder = event.sortOrder === 1 ? 'asc' : 'desc';\n      sortField = `${event.sortField}:${sortOrder}`;\n    }\n\n    return {\n      owner: this.params['clientId'],\n      offset: isDefined(event?.first) ? event.first : 0,\n      recurse: false,\n      limit: isDefined(event?.rows) ? event.rows : DEFAULT_PAGE_SIZE,\n      sortField: sortField,\n      filters: this.rqlFilter(),\n    };\n  }\n\n  onFilterChange(field: string, value: FilterValue): void {\n    const actualField = this.fieldTransformations[field] || field;\n    const column = this.columns.find((col) => col.field === field);\n\n    if (Array.isArray(value)) {\n      const newFilters = this.gridBaseService.handleFilters(\n        this.filterState(),\n        actualField,\n        value,\n        undefined,\n        column?.filterMatchMode,\n      );\n\n      this.filterState.set(newFilters);\n      return;\n    }\n\n    // For non-array values, use the grid base service\n    const newFilters = this.gridBaseService.handleFilters(\n      this.filterState(),\n      actualField,\n      value,\n      undefined,\n      column?.filterMatchMode,\n    );\n\n    this.filterState.set(newFilters);\n  }\n\n  onAdd(): void {\n    const clientId = this.params['clientId'];\n\n    this.openDeviceCreationDialog(clientId).subscribe();\n  }\n\n  openDeviceCreationDialog(ownerId: string) {\n    this.dialogRef = this.dialogService.open(DeviceCreateWizardComponent, {\n      header: 'Device Wizard',\n      baseZIndex: 10000,\n      data: {\n        ownerId: ownerId,\n      },\n      position: 'top',\n      modal: true,\n    });\n\n    return this.dialogRef.onClose;\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { Component, inject, input } from '@angular/core';\nimport { Validators } from '@angular/forms';\n\nimport {\n  ZoneCreateRequest,\n  ZoneListItem,\n  ZoneResponse,\n  ZoneUpdateRequest,\n  EntitiesService,\n} from '../../../../../api';\nimport { DynamicFormComponent } from '../../../../../shared/components/forms/dynamic-form/dynamic-form.component';\nimport {\n  AssetGroupingTreeItem,\n  createDropdownField,\n  createNumberField,\n  MeasurementUnitType,\n} from '../../../../../shared/models';\nimport { TypedEntitySectionBaseComponent } from '../../base';\nimport { MeasurementUnitsService } from '../../../../../shared/services/measurement-units/measurement-units.service';\nimport { Observable } from 'rxjs';\n\n@Component({\n  selector: 'app-geofence-coordinates-section',\n  imports: [CommonModule, DynamicFormComponent],\n  templateUrl: './geofence-coordinates-section.component.html',\n  styleUrl: './geofence-coordinates-section.component.scss',\n})\nexport class GeofenceCoordinatesSectionComponent extends TypedEntitySectionBaseComponent<\n  ZoneListItem,\n  ZoneUpdateRequest,\n  ZoneCreateRequest,\n  ZoneResponse\n> {\n  readonly ownerId = input<string | null>(null);\n  private readonly measurementUnitsService = inject(MeasurementUnitsService);\n  private readonly entitiesService = inject(EntitiesService);\n\n  zoneGroups: AssetGroupingTreeItem[] = [];\n  costCenters: AssetGroupingTreeItem[] = [];\n\n  constructor() {\n    super();\n  }\n\n  protected override updateFormFields(): void {\n    const geofence = this.entity();\n    this.formFields = [\n      createNumberField('lat', 'Latitude', geofence?.['lat'] ?? undefined, {\n        name: 'lat',\n        validations: [\n          {\n            name: 'required',\n            validator: Validators.required,\n            message: 'Latitude is required',\n          },\n          {\n            name: 'min',\n            validator: Validators.min(-90),\n            message: 'Latitude must be greater or equal to -90',\n          },\n          {\n            name: 'max',\n            validator: Validators.max(90),\n            message: 'Latitude must be less or equal to 90',\n          },\n        ],\n        props: {\n          appendTo: 'body',\n          showClear: true,\n          min: -90,\n          max: 90,\n          step: 0.00001,\n          maxFractionDigits: 5,\n        },\n      }),\n      createNumberField('lon', 'Longitude', geofence?.['lon'], {\n        name: 'lon',\n        validations: [\n          {\n            name: 'required',\n            validator: Validators.required,\n            message: 'Longitude is required',\n          },\n          {\n            name: 'min',\n            validator: Validators.min(-180),\n            message: 'Longitude must be greater or equal to -180',\n          },\n          {\n            name: 'max',\n            validator: Validators.max(180),\n            message: 'Longitude must be less or equal to 180',\n          },\n        ],\n        props: {\n          appendTo: 'body',\n          showClear: true,\n          min: -180,\n          max: 180,\n          step: 0.00001,\n          maxFractionDigits: 5,\n        },\n      }),\n      createDropdownField(\n        'shape',\n        'Shape',\n        [\n          { label: 'Hexagon', value: 'hexagon' },\n          { label: 'Octagon', value: 'octagon' },\n          { label: 'Square', value: 'square' },\n          { label: 'Triangle', value: 'triangle' },\n        ],\n        geofence?.['shape'] ?? '',\n        {\n          name: 'shape',\n          validations: [\n            {\n              name: 'required',\n              validator: Validators.required,\n              message: 'Shape is required',\n            },\n          ],\n          props: {\n            appendTo: 'body',\n            showClear: true,\n          },\n        },\n      ),\n      createNumberField('shapeRadius', 'Radius', geofence?.['shapeRadius'], {\n        name: 'shapeRadius',\n        validations: [\n          {\n            name: 'required',\n            validator: Validators.required,\n            message: 'Radius is required',\n          },\n          {\n            name: 'min',\n            validator: Validators.min(0),\n            message: 'Radius must be greater or equal to 0',\n          },\n        ],\n        props: {\n          appendTo: 'body',\n          showClear: true,\n          suffix: this.measurementUnitsService.unitSymbol(\n            MeasurementUnitType.DISTANCE,\n          ),\n        },\n      }),\n    ];\n  }\n\n  override getUpdateMethod(): (\n    id: string,\n    data: ZoneUpdateRequest,\n  ) => Observable<ZoneResponse> {\n    return (id, data) => this.entitiesService.updateZone(id, data);\n  }\n\n  protected override transformFormData(\n    formData: Record<string, unknown> | Record<string, string | number>[],\n  ): ZoneUpdateRequest {\n    // Handle both possible input types\n    const normalizedFormData = Array.isArray(formData)\n      ? formData.reduce((acc, item) => ({ ...acc, ...item }), {})\n      : formData;\n\n    // Transform the coordinate-specific form data\n    const transformedData: Partial<ZoneUpdateRequest> = {};\n\n    // Map coordinate fields\n    if (normalizedFormData['lat'] !== undefined) {\n      transformedData['lat'] = normalizedFormData['lat'] as number;\n    }\n\n    if (normalizedFormData['lon'] !== undefined) {\n      transformedData['lon'] = normalizedFormData['lon'] as number;\n    }\n\n    if (normalizedFormData['shape'] !== undefined) {\n      transformedData['shape'] = normalizedFormData['shape'] as string;\n    }\n\n    if (normalizedFormData['shapeRadius'] !== undefined) {\n      // Convert the radius to backend units\n      const radiusValue = normalizedFormData['shapeRadius'] as number;\n      transformedData['shapeRadius'] = this.measurementUnitsService.toBackend(\n        MeasurementUnitType.DISTANCE,\n        radiusValue,\n      );\n    }\n\n    // For coordinate updates, we typically need the zone ID\n    const entity = this.entity();\n    if (entity && 'id' in entity) {\n      transformedData['id'] = (entity as Record<string, unknown>)[\n        'id'\n      ] as string;\n    }\n\n    // Add ownerId if available and not null/undefined\n    const ownerId = this.ownerId();\n    if (ownerId !== null && ownerId !== undefined) {\n      transformedData['ownerId'] = ownerId;\n    }\n\n    return transformedData as ZoneUpdateRequest;\n  }\n}\n","<div class=\"card pt-2\">\n  <div class=\"mb-4 p-2 flex justify-start items-center\">\n    <span\n      class=\"pi pi-map-marker !text-[2.5rem]\"\n      [ngClass]=\"{ 'icon-primary': isFormEditable() }\"\n      [attr.aria-label]=\"'map marker icon'\"\n    ></span>\n\n    <div class=\"pl-6 flex-1\">\n      <div class=\"flex justify-between items-center\">\n        @if (!isFormEditable() && !createMode()) {\n          <div class=\"icon-light\">\n            <span\n              class=\"pi pi-pen-to-square action hover !text-2xl\"\n              [attr.aria-label]=\"'Edit geofence coordinates'\"\n              (click)=\"onEdit()\"\n              (keydown.enter)=\"onEdit()\"\n            ></span>\n          </div>\n        }\n      </div>\n      <span>\n        Enter the latitude and longitude of the geofence you'd like to\n        create.</span\n      >\n    </div>\n  </div>\n\n  @if (isFormEditable() || (createMode() && formFields.length)) {\n    <app-dynamic-form\n      [fields]=\"formFields\"\n      [actions]=\"actions\"\n      [hideActions]=\"createMode()\"\n      (formSubmit)=\"onSubmit($event)\"\n      (formValidityChange)=\"onFormValidityChange($event)\"\n      (formValueChange)=\"onFormValueChange($event)\"\n    >\n    </app-dynamic-form>\n  }\n</div>\n","import { CommonModule } from '@angular/common';\nimport {\n  AfterViewInit,\n  ChangeDetectorRef,\n  Component,\n  DestroyRef,\n  inject,\n  OnInit,\n  signal,\n  TemplateRef,\n  ViewChild,\n} from '@angular/core';\nimport { takeUntilDestroyed } from '@angular/core/rxjs-interop';\nimport { ReactiveFormsModule } from '@angular/forms';\n\nimport { ButtonModule } from 'primeng/button';\nimport { DynamicDialogRef, DynamicDialogConfig } from 'primeng/dynamicdialog';\n\nimport {\n  EntitiesService,\n  ZoneCreateRequest,\n  ZoneResponse,\n} from '../../../../../api';\nimport { WizardComponent } from '../../../../../shared/components/wizard/wizard.component';\nimport {\n  isDefined,\n  isNullOrUndefined,\n  SpatialUtils,\n} from '../../../../../shared/utils';\nimport { BroadcastEventMessageService } from '../../../services/broadcast-event-messages.service';\nimport { GeofenceDetailsSectionComponent } from '../geofence-details-section/geofence-details-section.component';\nimport { MeasurementUnitType, Step } from '../../../../../shared/models';\nimport { GeofenceCoordinatesSectionComponent } from '../geofence-coordinates-section/geofence-coordinates-section.component';\nimport { MeasurementUnitsService } from '../../../../../shared/services/measurement-units/measurement-units.service';\nimport { finalize } from 'rxjs';\n\n@Component({\n  selector: 'app-geofence-create-wizard',\n  imports: [\n    CommonModule,\n    ReactiveFormsModule,\n    WizardComponent,\n    ButtonModule,\n    GeofenceDetailsSectionComponent,\n    GeofenceCoordinatesSectionComponent,\n  ],\n  templateUrl: './geofence-create-wizard.component.html',\n  styleUrl: './geofence-create-wizard.component.scss',\n})\nexport class GeofenceCreateWizardComponent implements AfterViewInit, OnInit {\n  @ViewChild('geofenceDetailsStep') geofenceDetailsStep!: TemplateRef<{\n    $implicit: Step;\n  }> | null;\n  @ViewChild('geofenceCoordinatesStep')\n  geofenceCoordinatesStep!: TemplateRef<{ $implicit: Step }> | null;\n  @ViewChild('confirmationTemplate', { static: true })\n  confirmationTemplate!: TemplateRef<{ $implicit: Step }> | null;\n\n  // References to form components\n  @ViewChild('geofenceDetailsForm')\n  geofenceDetailsForm!: GeofenceDetailsSectionComponent;\n  @ViewChild('geofenceCoordinatesForm')\n  geofenceCoordinatesForm!: GeofenceCoordinatesSectionComponent;\n\n  private readonly entitiesService = inject(EntitiesService);\n  private readonly broadcastService = inject(BroadcastEventMessageService);\n  private readonly measurementUnitsService = inject(MeasurementUnitsService);\n  protected readonly destroyRef = inject(DestroyRef);\n  private readonly dialogRef = inject(DynamicDialogRef);\n  private readonly dialogConfig = inject(DynamicDialogConfig);\n  private readonly cdr = inject(ChangeDetectorRef);\n  private readonly shapePoints = [3, 4, 6, 8];\n  private readonly shapes = ['triangle', 'square', 'hexagon', 'octagon'];\n  protected geofenceCoordinates: Record<string, unknown> | undefined;\n\n  // Geofence model to collect data across steps\n  newGeofence = signal<ZoneCreateRequest>({} as ZoneCreateRequest);\n\n  // Form validity state\n  formIsValid = signal<boolean>(false);\n\n  displayWizard = false;\n  steps: Step[] = [];\n  previousStepIndex = 0;\n  currentStepIndex = 0;\n  ownerId: string | null = null;\n  isSubmitting = signal<boolean>(false);\n\n  ngAfterViewInit() {\n    this.steps = [\n      {\n        value: 1,\n        header: 'Geofence Details',\n        content: this.geofenceDetailsStep,\n        complete: false,\n        validate: () => this.geofenceDetailsForm.validate(),\n      },\n      {\n        value: 2,\n        header: 'Geofence Coordinates',\n        content: this.geofenceCoordinatesStep,\n        complete: false,\n        validate: () => this.geofenceCoordinatesForm.validate(),\n      },\n      {\n        value: 3,\n        header: 'Confirmation',\n        content: this.confirmationTemplate,\n        complete: true,\n      },\n    ];\n    this.cdr.detectChanges();\n  }\n\n  ngOnInit(): void {\n    if (isDefined(this.dialogConfig.data)) {\n      this.ownerId = this.dialogConfig.data.ownerId ?? null;\n\n      // Initialize geofence with ownerId\n      this.newGeofence.update((current) => ({\n        ...current,\n        ownerId: this.ownerId ?? '',\n      }));\n    }\n  }\n\n  openWizard() {\n    this.displayWizard = true;\n    this.newGeofence.set({} as ZoneCreateRequest);\n  }\n\n  // Form validity handlers\n  onDetailsFormValidityChange(isValid: boolean) {\n    this.steps[0].disableNext = !isValid;\n    this.formIsValid.set(isValid);\n  }\n\n  onCoordinatesFormValidityChange(isValid: boolean) {\n    this.steps[1].disableNext = !isValid;\n    this.formIsValid.set(isValid);\n  }\n\n  // Update the geofence state with form data\n  updateGeofenceDetails(formData: Record<string, unknown>) {\n    this.newGeofence.update((current) => {\n      const updated = { ...current };\n\n      Object.keys(formData).forEach((key) => {\n        if (key !== 'ownerId') {\n          updated[key] = formData[key];\n        }\n      });\n\n      if (isNullOrUndefined(updated.ownerId)) {\n        updated.ownerId = this.ownerId ?? '';\n      }\n\n      return updated;\n    });\n  }\n\n  updateGeofenceCoordinates(formData: Record<string, unknown>) {\n    this.geofenceCoordinates = formData;\n    const radius = this.measurementUnitsService.toBackend(\n      MeasurementUnitType.DISTANCE,\n      formData['shapeRadius'] as number,\n    ) as number;\n    const points = SpatialUtils.generateRegularPolygon(\n      { x: formData['lon'] as number, y: formData['lat'] as number },\n      radius,\n      this.shapePoints[this.shapes.indexOf(formData['shape'] as string)],\n    );\n    this.newGeofence.update((current) => ({\n      ...current,\n      ...formData,\n      points,\n    }));\n  }\n\n  onWizardComplete(): void {\n    // Process the final data from all steps\n    const geofenceData = this.newGeofence();\n\n    this.isSubmitting.set(true);\n    this.entitiesService\n      .createZone(geofenceData)\n      .pipe(\n        takeUntilDestroyed(this.destroyRef),\n        finalize(() => this.isSubmitting.set(false)),\n      )\n      .subscribe({\n        next: (response: ZoneResponse) => {\n          this.broadcastService.broadcast('entity-updated', {\n            entityType: 'geofence',\n            operation: 'create',\n            entityId: response.id,\n          });\n          this.dialogRef.close(response);\n        },\n        error: (error: Error) => {\n          // Handle error, could show message and keep dialog open\n          console.error('Error creating geofence:', error);\n        },\n      });\n  }\n\n  // Update cancel to close dialog with no result\n  onWizardCancel(): void {\n    this.newGeofence.set({} as ZoneCreateRequest);\n    this.dialogRef.close();\n  }\n}\n","<app-wizard\n  [contentOnly]=\"true\"\n  [steps]=\"steps\"\n  [showSteps]=\"false\"\n  [useWizardButtonsOnly]=\"true\"\n  [loading]=\"isSubmitting()\"\n  (complete)=\"onWizardComplete()\"\n  (onCancel)=\"onWizardCancel()\"\n>\n</app-wizard>\n\n<!-- Step 1: Geofence Details -->\n<ng-template #geofenceDetailsStep let-step>\n  <div class=\"p-fluid\">\n    <app-geofence-details-section\n      #geofenceDetailsForm\n      [createMode]=\"true\"\n      [entity]=\"newGeofence()\"\n      [ownerId]=\"ownerId\"\n      (formValidityChange)=\"onDetailsFormValidityChange($event)\"\n      (formValueChange)=\"updateGeofenceDetails($event)\"\n    ></app-geofence-details-section>\n  </div>\n</ng-template>\n\n<!-- Step 2: Geofence Coordinates -->\n<ng-template #geofenceCoordinatesStep let-step>\n  <div class=\"p-fluid\">\n    <app-geofence-coordinates-section\n      #geofenceCoordinatesForm\n      [createMode]=\"true\"\n      [entity]=\"newGeofence()\"\n      (formValidityChange)=\"onCoordinatesFormValidityChange($event)\"\n      (formValueChange)=\"updateGeofenceCoordinates($event)\"\n    ></app-geofence-coordinates-section>\n  </div>\n</ng-template>\n\n<ng-template #confirmationTemplate let-step>\n  <div class=\"flex gap-6\">\n    <span class=\"pi pi-check !text-5xl\"></span>\n\n    <div class=\"flex-1\">\n      <div class=\"grid\">\n        <!-- Geofence Details Section -->\n        <div class=\"col-12 md:col-6\">\n          <p class=\"mb-4\">\n            You've completed all of the information required and we're ready to\n            create your Geofence.\n          </p>\n\n          <div class=\"space-y-2\">\n            <!-- Each field in a side-by-side layout -->\n            <div class=\"flex\">\n              <div class=\"w-1/3 font-medium\">Name:</div>\n              <div class=\"w-2/3\">\n                {{ newGeofence().name || 'Not provided' }}\n              </div>\n            </div>\n\n            <div class=\"flex\">\n              <div class=\"w-1/3 font-medium\">Type:</div>\n              <div class=\"w-2/3\">\n                {{ newGeofence().zoneType || 'Not provided' }}\n              </div>\n            </div>\n\n            <div class=\"flex\">\n              <div class=\"w-1/3 font-medium\">Cost Centre:</div>\n              <div class=\"w-2/3\">\n                {{ newGeofence().costCentre?.name || 'Not provided' }}\n              </div>\n            </div>\n\n            <div class=\"flex\">\n              <div class=\"w-1/3 font-medium\">Group:</div>\n              <div class=\"w-2/3\">\n                {{ newGeofence().group?.name || 'Not provided' }}\n              </div>\n            </div>\n\n            <div class=\"flex\">\n              <div class=\"w-1/3 font-medium\">Speed Limit:</div>\n              <div class=\"w-2/3\">\n                {{ newGeofence().speed || 'Not provided' }}\n              </div>\n            </div>\n\n            <div class=\"flex\">\n              <div class=\"w-1/3 font-medium\">Proximity Warning:</div>\n              <div class=\"w-2/3\">\n                {{ newGeofence().radius || 'Not provided' }}\n              </div>\n            </div>\n\n            <div class=\"flex\">\n              <div class=\"w-1/3 font-medium\">Latitude:</div>\n              <div class=\"w-2/3\">\n                {{ geofenceCoordinates?.['lat'] || 'Not provided' }}\n              </div>\n            </div>\n\n            <div class=\"flex\">\n              <div class=\"w-1/3 font-medium\">Longitude:</div>\n              <div class=\"w-2/3\">\n                {{ geofenceCoordinates?.['lon'] || 'Not provided' }}\n              </div>\n            </div>\n\n            <div class=\"flex\">\n              <div class=\"w-1/3 font-medium\">Shape:</div>\n              <div class=\"w-2/3\">\n                {{ geofenceCoordinates?.['shape'] || 'Not provided' }}\n              </div>\n            </div>\n          </div>\n        </div>\n      </div>\n\n      <div\n        class=\"mt-4 pt-4 border-top-1 border-surface-200 dark:border-surface-700\"\n      >\n        <p class=\"mb-0\">Click finish to create this Geofence.</p>\n      </div>\n    </div>\n  </div>\n</ng-template>\n","import {\n  DestroyRef,\n  Injectable,\n  computed,\n  inject,\n  signal,\n} from '@angular/core';\n\nimport { TableLazyLoadEvent } from 'primeng/table';\nimport { catchError, combineLatest, EMPTY } from 'rxjs';\nimport { takeUntilDestroyed } from '@angular/core/rxjs-interop';\n\nimport {\n  GridConfiguration,\n  GridDataService,\n  DataGridParams,\n  GridColumn,\n  FilterCriteria,\n  FilterValue,\n  DATE_FORMATS,\n} from '../../../shared/models';\nimport { UtilityService } from '../../../core/services/utility.service';\nimport { GridBaseService } from '../../../shared/services/grid-base.service';\nimport { isDefined } from '../../../shared/utils';\nimport { GeofencesDataAdapter } from '../services/adapters';\nimport { EntitiesService, ZoneListItem } from '../../../api';\nimport { DEFAULT_PAGE_SIZE } from '../../../core/models';\nimport { DynamicDialogRef, DialogService } from 'primeng/dynamicdialog';\nimport { GeofenceCreateWizardComponent } from '../components/geofences/geofence-create-wizard/geofence-create-wizard.component';\nimport { MeasurementDateTimeService } from '../../../shared/services/measurement-units/measurement-date-time.service';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class GeofencesGridConfig implements GridConfiguration<ZoneListItem> {\n  entityType = 'geofences';\n\n  private readonly geofencesService = inject(GeofencesDataAdapter);\n  private readonly utilityService = inject(UtilityService);\n  private readonly gridBaseService = inject(GridBaseService);\n  private readonly entitiesService = inject(EntitiesService);\n  private dialogRef: DynamicDialogRef | null = null;\n  private readonly dialogService = inject(DialogService);\n  private readonly measurementDateTimeService = inject(\n    MeasurementDateTimeService,\n  );\n\n  private readonly defaultStateValues = ['active', 'inactive'];\n  private readonly filterState = signal<Record<string, FilterCriteria>>({\n    state: {\n      value: this.defaultStateValues,\n      operator: 'in',\n    },\n  });\n  private params: Record<string, string> = { clientId: '' };\n  private readonly destroyRef = inject(DestroyRef);\n\n  private readonly rqlFilter = computed(() =>\n    this.utilityService.constructRqlFilter(this.filterState()),\n  );\n  private readonly fieldTransformations: Record<string, string> = {\n    costCentre: 'costCentre.id',\n    groups: 'groups.id',\n  };\n  private readonly zoneTypeLabels: Record<string, string> = {\n    location: 'Location',\n    keepin: 'Keep In',\n    nogo: 'No Go',\n    route: 'Route',\n  };\n\n  columns: GridColumn<ZoneListItem>[] = [\n    {\n      field: 'name',\n      header: 'Name',\n      filter: true,\n      filterType: 'text',\n      filterMatchMode: 'contains',\n    },\n    {\n      field: 'zoneType',\n      header: 'Type',\n      sortable: true,\n      filterType: 'multiselect',\n      filter: true,\n      filterMatchMode: 'in',\n      valueGetter: (rowData: ZoneListItem) => {\n        if (!isDefined(rowData.zoneType)) {\n          return '';\n        }\n        const label = this.zoneTypeLabels[rowData.zoneType];\n        return isDefined(label) ? label : rowData.zoneType;\n      },\n      filterConfig: {\n        type: 'multiselect',\n        options: [\n          { label: 'Location', value: 'location' },\n          { label: 'Keep In', value: 'keepin' },\n          { label: 'No Go', value: 'nogo' },\n          { label: 'Route', value: 'route' },\n        ],\n      },\n    },\n    {\n      field: 'costCentre',\n      header: 'Cost Centre',\n      valueGetter: (rowData: ZoneListItem) =>\n        isDefined(rowData.costCentre?.name) ? rowData.costCentre?.name : '',\n      filter: true,\n      filterType: 'multiselect',\n      filterMatchMode: 'in',\n      filterConfig: {\n        type: 'multiselect',\n        options: [],\n      },\n    },\n    {\n      field: 'group',\n      header: 'Group',\n      valueGetter: (rowData: ZoneListItem) =>\n        isDefined(rowData.group?.name) ? rowData.group?.name : '',\n      filter: true,\n      filterType: 'multiselect',\n      filterMatchMode: 'in',\n      filterConfig: {\n        type: 'multiselect',\n        options: [],\n      },\n    },\n    {\n      field: 'state',\n      header: 'State',\n      filter: true,\n      filterType: 'multiselect',\n      filterMatchMode: 'in',\n      filterConfig: {\n        type: 'multiselect',\n        options: [\n          { label: 'Active', value: 'active' },\n          { label: 'Inactive', value: 'inactive' },\n          { label: 'Deleted', value: 'deleted' },\n        ],\n        defaultSelected: this.defaultStateValues,\n      },\n      transform: 'capitalize',\n    },\n    {\n      field: 'modifiedDate',\n      header: 'Modified',\n      filter: false,\n      valueGetter: (rowData: ZoneListItem) =>\n        isDefined(rowData.modifiedDate)\n          ? this.measurementDateTimeService.formatDateTime(\n              this.measurementDateTimeService.createDateAssumingUtc(\n                rowData.modifiedDate,\n              ),\n              DATE_FORMATS.DATE_TIME_SECONDS,\n            )\n          : '',\n    },\n  ];\n\n  defaultVisibleColumns = ['name', 'zoneType', 'costCentre', 'group', 'state'];\n\n  dataService: GridDataService<ZoneListItem> = this.geofencesService;\n\n  getFilters(): Record<string, FilterCriteria> {\n    return this.filterState();\n  }\n\n  clearFilters(): void {\n    this.filterState.set({\n      state: {\n        value: this.defaultStateValues,\n        operator: 'in',\n      },\n    });\n  }\n\n  initialize(params: Record<string, string>): void {\n    this.params = params;\n    this.loadFilterOptions();\n  }\n\n  getTitle(): string {\n    return 'Geofences';\n  }\n\n  getRequestParams(event?: TableLazyLoadEvent): DataGridParams {\n    let sortField = 'name:asc'; // Default\n\n    if (isDefined(event?.sortField)) {\n      const sortOrder = event.sortOrder === 1 ? 'asc' : 'desc';\n      sortField = `${event.sortField}:${sortOrder}`;\n    }\n\n    return {\n      owner: this.params['clientId'],\n      offset: isDefined(event?.first) ? event.first : 0,\n      recurse: false,\n      limit: isDefined(event?.rows) ? event.rows : DEFAULT_PAGE_SIZE,\n      sortField: sortField,\n      filters: this.rqlFilter(),\n    };\n  }\n\n  onFilterChange(field: string, value: FilterValue): void {\n    const actualField = this.fieldTransformations[field] || field;\n    const column = this.columns.find((col) => col.field === field);\n\n    if (Array.isArray(value)) {\n      const newFilters = this.gridBaseService.handleFilters(\n        this.filterState(),\n        actualField,\n        value,\n        undefined,\n        column?.filterMatchMode,\n      );\n\n      this.filterState.set(newFilters);\n      return;\n    }\n\n    // For non-array values, use the grid base service\n    const newFilters = this.gridBaseService.handleFilters(\n      this.filterState(),\n      actualField,\n      value,\n      undefined,\n      column?.filterMatchMode,\n    );\n\n    this.filterState.set(newFilters);\n  }\n\n  private loadFilterOptions(): void {\n    combineLatest([\n      this.entitiesService.listCostCentres(this.params['clientId']),\n      this.entitiesService.listZoneGroups(this.params['clientId']),\n    ])\n      .pipe(\n        takeUntilDestroyed(this.destroyRef),\n        catchError(() => {\n          return EMPTY;\n        }),\n      )\n      .subscribe(([costCentres, zoneGroups]) => {\n        const costCentreColumn = this.columns.find(\n          (col) => col.field === 'costCentre',\n        );\n        if (costCentreColumn?.filterConfig) {\n          costCentreColumn.filterConfig.options = costCentres.items\n            .map((costCentre) => ({\n              label: costCentre.name ?? '',\n              value: costCentre.id,\n            }))\n            .sort((a, b) => a.label.localeCompare(b.label));\n        }\n\n        const groupColumn = this.columns.find((col) => col.field === 'group');\n        if (groupColumn?.filterConfig) {\n          groupColumn.filterConfig.options = zoneGroups.items\n            .map((group) => ({\n              label: group.name ?? '',\n              value: group.id,\n            }))\n            .sort((a, b) => a.label.localeCompare(b.label));\n        }\n      });\n  }\n\n  onAdd(): void {\n    const clientId = this.params['clientId'];\n\n    this.openGeofenceCreationDialog(clientId).subscribe();\n  }\n\n  openGeofenceCreationDialog(ownerId: string) {\n    this.dialogRef = this.dialogService.open(GeofenceCreateWizardComponent, {\n      header: 'Geofence Wizard',\n      baseZIndex: 10000,\n      data: { ownerId: ownerId },\n      position: 'top',\n      modal: true,\n    });\n\n    return this.dialogRef.onClose;\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport {\n  AfterViewInit,\n  ChangeDetectorRef,\n  Component,\n  DestroyRef,\n  inject,\n  OnInit,\n  signal,\n  TemplateRef,\n  ViewChild,\n} from '@angular/core';\nimport { takeUntilDestroyed } from '@angular/core/rxjs-interop';\nimport { ReactiveFormsModule } from '@angular/forms';\n\nimport { ButtonModule } from 'primeng/button';\nimport { DynamicDialogRef, DynamicDialogConfig } from 'primeng/dynamicdialog';\n\nimport {\n  EntitiesService,\n  SimCardCreateRequest,\n  SimCardResponse,\n} from '../../../../../api';\nimport { WizardComponent } from '../../../../../shared/components/wizard/wizard.component';\nimport { isDefined, isNullOrUndefined } from '../../../../../shared/utils';\nimport { SimCardDetailsSectionComponent } from '../sim-card-details-section/sim-card-details-section.component';\nimport { Step } from '../../../../../shared/models';\nimport { BroadcastEventMessageService } from '../../../services/broadcast-event-messages.service';\nimport { finalize } from 'rxjs';\n\n@Component({\n  selector: 'app-sim-card-create-wizard',\n  imports: [\n    CommonModule,\n    ReactiveFormsModule,\n    WizardComponent,\n    ButtonModule,\n    SimCardDetailsSectionComponent,\n  ],\n  templateUrl: './sim-card-create-wizard.component.html',\n  styleUrl: './sim-card-create-wizard.component.scss',\n})\nexport class SimCardCreateWizardComponent implements AfterViewInit, OnInit {\n  @ViewChild('simCardDetailsStep') simCardDetailsStep!: TemplateRef<{\n    $implicit: Step;\n  }> | null;\n  @ViewChild('confirmationTemplate', { static: true })\n  confirmationTemplate!: TemplateRef<{ $implicit: Step }> | null;\n\n  // References to form components\n  @ViewChild('simCardDetailsForm')\n  simCardDetailsForm!: SimCardDetailsSectionComponent;\n\n  private readonly entitiesService = inject(EntitiesService);\n  private readonly broadcastService = inject(BroadcastEventMessageService);\n  protected readonly destroyRef = inject(DestroyRef);\n  private readonly dialogRef = inject(DynamicDialogRef);\n  private readonly dialogConfig = inject(DynamicDialogConfig);\n  private readonly cdr = inject(ChangeDetectorRef);\n\n  // SimCard model to collect data across steps\n  newSimCard = signal<SimCardCreateRequest>({} as SimCardCreateRequest);\n\n  // Form validity state\n  formIsValid = signal<boolean>(false);\n\n  displayWizard = false;\n  steps: Step[] = [];\n  previousStepIndex = 0;\n  currentStepIndex = 0;\n  ownerId: string | null = null;\n  isSubmitting = signal<boolean>(false);\n\n  ngAfterViewInit() {\n    this.steps = [\n      {\n        value: 1,\n        header: 'Sim Card Details',\n        content: this.simCardDetailsStep,\n        complete: false,\n        validate: () => this.simCardDetailsForm.validate(),\n      },\n      {\n        value: 2,\n        header: 'Confirmation',\n        content: this.confirmationTemplate,\n        complete: true,\n      },\n    ];\n    this.cdr.detectChanges();\n  }\n\n  ngOnInit(): void {\n    if (isDefined(this.dialogConfig.data)) {\n      this.ownerId = this.dialogConfig.data.ownerId ?? null;\n\n      // Initialize simCard with ownerId\n      this.newSimCard.update((current) => ({\n        ...current,\n        ownerId: this.ownerId ?? '',\n      }));\n    }\n  }\n\n  openWizard() {\n    this.displayWizard = true;\n    this.newSimCard.set({} as SimCardCreateRequest);\n  }\n\n  // Form validity handlers\n  onDetailsFormValidityChange(isValid: boolean) {\n    this.steps[0].disableNext = !isValid;\n    this.formIsValid.set(isValid);\n  }\n\n  // Update the simCard state with form data\n  updateSimCardDetails(formData: Record<string, unknown>) {\n    this.newSimCard.update((current) => {\n      const updated = { ...current };\n\n      Object.keys(formData).forEach((key) => {\n        if (key !== 'ownerId') {\n          updated[key] = formData[key];\n        }\n      });\n\n      if (isNullOrUndefined(updated.ownerId)) {\n        updated.ownerId = this.ownerId ?? '';\n      }\n\n      return updated;\n    });\n  }\n\n  onWizardComplete(): void {\n    // Process the final data from all steps\n    const simCardData = this.newSimCard();\n    this.isSubmitting.set(true);\n\n    this.entitiesService\n      .createSimCard(simCardData)\n      .pipe(\n        takeUntilDestroyed(this.destroyRef),\n        finalize(() => this.isSubmitting.set(false)),\n      )\n      .subscribe({\n        next: (response: SimCardResponse) => {\n          this.broadcastService.broadcast('entity-updated', {\n            entityType: 'simcard',\n            operation: 'create',\n            entityId: response.id,\n          });\n          this.dialogRef.close(response);\n        },\n        error: (error: Error) => {\n          // Handle error, could show message and keep dialog open\n          console.error('Error creating sim card:', error);\n        },\n      });\n  }\n\n  // Update cancel to close dialog with no result\n  onWizardCancel(): void {\n    this.newSimCard.set({} as SimCardCreateRequest);\n    this.dialogRef.close();\n  }\n}\n","<app-wizard\n  [contentOnly]=\"true\"\n  [steps]=\"steps\"\n  [showSteps]=\"false\"\n  [useWizardButtonsOnly]=\"true\"\n  [loading]=\"isSubmitting()\"\n  (complete)=\"onWizardComplete()\"\n  (onCancel)=\"onWizardCancel()\"\n>\n</app-wizard>\n\n<!-- Step 1: SimCard Details -->\n<ng-template #simCardDetailsStep let-step>\n  <div class=\"p-fluid\">\n    <app-sim-card-details-section\n      #simCardDetailsForm\n      [createMode]=\"true\"\n      [entity]=\"newSimCard()\"\n      [ownerId]=\"ownerId\"\n      (formValidityChange)=\"onDetailsFormValidityChange($event)\"\n      (formValueChange)=\"updateSimCardDetails($event)\"\n    ></app-sim-card-details-section>\n  </div>\n</ng-template>\n\n<ng-template #confirmationTemplate let-step>\n  <div class=\"flex gap-6\">\n    <span class=\"pi pi-check !text-5xl\"></span>\n\n    <div class=\"flex-1\">\n      <div class=\"grid\">\n        <!-- SimCard Details Section -->\n        <div class=\"col-12 md:col-6\">\n          <p class=\"mb-4\">\n            You've completed all of the information required and we're ready to\n            create your SIM Card.\n          </p>\n\n          <div class=\"space-y-2\">\n            <!-- Each field in a side-by-side layout -->\n            <div class=\"flex\">\n              <div class=\"w-1/3 font-medium\">Serial Number:</div>\n              <div class=\"w-2/3\">{{ newSimCard().name || 'Not provided' }}</div>\n            </div>\n\n            <div class=\"flex\">\n              <div class=\"w-1/3 font-medium\">Network:</div>\n              <div class=\"w-2/3\">\n                {{ newSimCard().networkName || 'Not provided' }}\n              </div>\n            </div>\n\n            <div class=\"flex\">\n              <div class=\"w-1/3 font-medium\">Number:</div>\n              <div class=\"w-2/3\">\n                {{ newSimCard().number || 'Not provided' }}\n              </div>\n            </div>\n          </div>\n\n          <div class=\"flex\">\n            <div class=\"w-1/3 font-medium\">Description:</div>\n            <div class=\"w-2/3\">\n              {{ newSimCard().description || 'Not provided' }}\n            </div>\n          </div>\n        </div>\n      </div>\n\n      <div\n        class=\"mt-4 pt-4 border-top-1 border-surface-200 dark:border-surface-700\"\n      >\n        <p class=\"mb-0\">Click finish to create this SIM Card.</p>\n      </div>\n    </div>\n  </div>\n</ng-template>\n","import {\n  DestroyRef,\n  Injectable,\n  computed,\n  inject,\n  signal,\n} from '@angular/core';\n\nimport { TableLazyLoadEvent } from 'primeng/table';\n\nimport {\n  GridConfiguration,\n  GridDataService,\n  DataGridParams,\n  GridColumn,\n  FilterCriteria,\n  FilterValue,\n  DATE_FORMATS,\n} from '../../../shared/models';\nimport { UtilityService } from '../../../core/services/utility.service';\nimport { GridBaseService } from '../../../shared/services/grid-base.service';\nimport { isDefined } from '../../../shared/utils';\nimport { SimCardsDataAdapter } from '../services/adapters';\nimport { SimCardListItem } from '../../../api';\nimport { DEFAULT_PAGE_SIZE } from '../../../core/models';\nimport { SimCardCreateWizardComponent } from '../components/sim-cards/sim-card-create-wizard/sim-card-create-wizard.component';\nimport { DialogService, DynamicDialogRef } from 'primeng/dynamicdialog';\nimport { MeasurementDateTimeService } from '../../../shared/services/measurement-units/measurement-date-time.service';\n\n@Injectable({ providedIn: 'root' })\nexport class SimCardsGridConfig implements GridConfiguration<SimCardListItem> {\n  private readonly simCardsService = inject(SimCardsDataAdapter);\n  private readonly utilityService = inject(UtilityService);\n  private readonly gridBaseService = inject(GridBaseService);\n  private dialogRef: DynamicDialogRef | null = null;\n  private readonly dialogService = inject(DialogService);\n  private readonly measurementDateTimeService = inject(\n    MeasurementDateTimeService,\n  );\n\n  private readonly defaultStateValues = [\n    SimCardListItem.StateEnum.Active,\n    SimCardListItem.StateEnum.Inactive,\n    SimCardListItem.StateEnum.Suspended,\n  ];\n  private readonly filterState = signal<Record<string, FilterCriteria>>({\n    state: { value: this.defaultStateValues, operator: 'in' },\n  });\n  private params: Record<string, string> = { clientId: '' };\n  private readonly destroyRef = inject(DestroyRef);\n\n  private readonly rqlFilter = computed(() =>\n    this.utilityService.constructRqlFilter(this.filterState()),\n  );\n  private readonly fieldTransformations: Record<string, string> = {\n    device: 'device.name',\n  };\n\n  private readonly stateLabels: Record<SimCardListItem.StateEnum, string> = {\n    active: 'Active',\n    deleted: 'Deleted',\n    inactive: 'Inactive',\n    suspended: 'Suspended',\n  };\n\n  entityType = 'sim-cards';\n  columns: GridColumn<SimCardListItem>[] = [\n    {\n      field: 'name',\n      header: 'Serial Number',\n      filter: true,\n      filterType: 'text',\n      filterMatchMode: 'contains',\n    },\n    {\n      field: 'networkName',\n      header: 'Network',\n      valueGetter: (rowData: SimCardListItem) => rowData.networkName ?? '',\n      filter: true,\n      filterType: 'text',\n      filterMatchMode: 'contains',\n    },\n    {\n      field: 'number',\n      header: 'Number',\n      filter: true,\n      filterType: 'text',\n      filterMatchMode: 'contains',\n    },\n    {\n      field: 'state',\n      header: 'State',\n      valueGetter: (rowData: SimCardListItem) =>\n        isDefined(rowData.state) ? this.stateLabels[rowData.state] : '',\n      filter: true,\n      filterType: 'multiselect',\n      filterMatchMode: 'in',\n      filterConfig: {\n        type: 'multiselect',\n        options: [\n          { label: 'Active', value: SimCardListItem.StateEnum.Active },\n          { label: 'Inactive', value: SimCardListItem.StateEnum.Inactive },\n          { label: 'Suspended', value: SimCardListItem.StateEnum.Suspended },\n          { label: 'Deleted', value: SimCardListItem.StateEnum.Deleted },\n        ],\n        defaultSelected: this.defaultStateValues,\n      },\n    },\n    {\n      field: 'description',\n      header: 'Description',\n      filter: true,\n      filterType: 'text',\n      filterMatchMode: 'contains',\n    },\n    {\n      field: 'device',\n      header: 'Device',\n      valueGetter: (rowData: SimCardListItem) => rowData.device?.name ?? '',\n      filter: true,\n      filterType: 'text',\n      filterMatchMode: 'contains',\n    },\n    {\n      field: 'modifiedDate',\n      header: 'Modified',\n      filter: false,\n      valueGetter: (rowData: SimCardListItem) =>\n        isDefined(rowData['modifiedDate'])\n          ? this.measurementDateTimeService.formatDateTime(\n              this.measurementDateTimeService.createDateAssumingUtc(\n                rowData['modifiedDate'],\n              ),\n              DATE_FORMATS.DATE_TIME_SECONDS,\n            )\n          : '',\n    },\n  ];\n\n  dataService: GridDataService<SimCardListItem> = this.simCardsService;\n\n  getFilters(): Record<string, FilterCriteria> {\n    return this.filterState();\n  }\n\n  clearFilters(): void {\n    this.filterState.set({\n      state: { value: this.defaultStateValues, operator: 'in' },\n    });\n  }\n\n  initialize(params: Record<string, string>): void {\n    this.params = params;\n  }\n\n  getTitle(): string {\n    return 'Sim Cards';\n  }\n\n  getRequestParams(event?: TableLazyLoadEvent): DataGridParams {\n    // Add sorting support\n    let sortField = 'name:asc'; // Default\n\n    if (isDefined(event?.sortField)) {\n      const sortOrder = event.sortOrder === 1 ? 'asc' : 'desc';\n      sortField = `${event.sortField}:${sortOrder}`;\n    }\n\n    return {\n      owner: this.params['clientId'],\n      offset: isDefined(event?.first) ? event.first : 0,\n      recurse: false,\n      limit: isDefined(event?.rows) ? event.rows : DEFAULT_PAGE_SIZE,\n      sortField: sortField,\n      filters: this.rqlFilter(),\n    };\n  }\n\n  onFilterChange(field: string, value: FilterValue): void {\n    const actualField = this.fieldTransformations[field] || field;\n    const column = this.columns.find((col) => col.field === field);\n\n    if (Array.isArray(value)) {\n      const newFilters = this.gridBaseService.handleFilters(\n        this.filterState(),\n        actualField,\n        value,\n        undefined,\n        column?.filterMatchMode,\n      );\n\n      this.filterState.set(newFilters);\n      return;\n    }\n\n    // For non-array values, use the grid base service\n    const newFilters = this.gridBaseService.handleFilters(\n      this.filterState(),\n      actualField,\n      value,\n      undefined,\n      column?.filterMatchMode,\n    );\n\n    this.filterState.set(newFilters);\n  }\n\n  onAdd(): void {\n    const clientId = this.params['clientId'];\n\n    this.openSimCardCreationDialog(clientId).subscribe((createdSimCard) => {\n      if (isDefined(createdSimCard)) {\n        // Refresh your simCard list or take any other necessary actions\n        // this.refreshSimCards();\n      }\n    });\n  }\n\n  openSimCardCreationDialog(ownerId: string) {\n    this.dialogRef = this.dialogService.open(SimCardCreateWizardComponent, {\n      header: 'Sim Card Wizard',\n      contentStyle: { overflow: 'auto' },\n      baseZIndex: 10000,\n      data: { ownerId: ownerId },\n      position: 'top',\n      modal: true,\n    });\n\n    return this.dialogRef.onClose;\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport {\n  AfterViewInit,\n  ChangeDetectorRef,\n  Component,\n  DestroyRef,\n  inject,\n  OnInit,\n  signal,\n  TemplateRef,\n  ViewChild,\n} from '@angular/core';\nimport { takeUntilDestroyed } from '@angular/core/rxjs-interop';\nimport { ReactiveFormsModule } from '@angular/forms';\n\nimport { ButtonModule } from 'primeng/button';\nimport { DynamicDialogRef, DynamicDialogConfig } from 'primeng/dynamicdialog';\n\nimport {\n  EntitiesService,\n  AssetRatingProfileCreateRequest,\n  AssetRatingProfileResponse,\n} from '../../../../../api';\nimport { WizardComponent } from '../../../../../shared/components/wizard/wizard.component';\nimport { isDefined, isNullOrUndefined } from '../../../../../shared/utils';\nimport { BroadcastEventMessageService } from '../../../services/broadcast-event-messages.service';\nimport { AssetRatingProfileDetailsSectionComponent } from '../asset-rating-profile-details-section/asset-rating-profile-details-section.component';\nimport { Step } from '../../../../../shared/models';\nimport { finalize } from 'rxjs';\n\n@Component({\n  selector: 'app-asset-rating-profile-create-wizard',\n  imports: [\n    CommonModule,\n    ReactiveFormsModule,\n    WizardComponent,\n    ButtonModule,\n    AssetRatingProfileDetailsSectionComponent,\n  ],\n  templateUrl: './asset-rating-profile-create-wizard.component.html',\n  styleUrl: './asset-rating-profile-create-wizard.component.scss',\n})\nexport class AssetRatingProfileCreateWizardComponent\n  implements AfterViewInit, OnInit\n{\n  @ViewChild('assetRatingProfileDetailsStep')\n  assetRatingProfileDetailsStep!: TemplateRef<{\n    $implicit: Step;\n  }> | null;\n  @ViewChild('confirmationTemplate', { static: true })\n  confirmationTemplate!: TemplateRef<{ $implicit: Step }> | null;\n  private readonly cdr = inject(ChangeDetectorRef);\n\n  // References to form components\n  @ViewChild('assetRatingProfileDetailsForm')\n  assetRatingProfileDetailsForm!: AssetRatingProfileDetailsSectionComponent;\n\n  private readonly entitiesService = inject(EntitiesService);\n  private readonly broadcastService = inject(BroadcastEventMessageService);\n  protected readonly destroyRef = inject(DestroyRef);\n  private readonly dialogRef = inject(DynamicDialogRef);\n  private readonly dialogConfig = inject(DynamicDialogConfig);\n\n  // AssetRatingProfile model to collect data across steps\n  newAssetRatingProfile = signal<AssetRatingProfileCreateRequest>(\n    {} as AssetRatingProfileCreateRequest,\n  );\n\n  // Form validity state\n  formIsValid = signal<boolean>(false);\n\n  displayWizard = false;\n  steps: Step[] = [];\n  previousStepIndex = 0;\n  currentStepIndex = 0;\n  ownerId: string | null = null;\n  isSubmitting = signal<boolean>(false);\n\n  ngAfterViewInit() {\n    this.steps = [\n      {\n        value: 1,\n        header: 'Asset Rating Profile Details',\n        content: this.assetRatingProfileDetailsStep,\n        complete: false,\n        validate: () => this.assetRatingProfileDetailsForm.validate(),\n      },\n      {\n        value: 2,\n        header: 'Confirmation',\n        content: this.confirmationTemplate,\n        complete: true,\n      },\n    ];\n    this.cdr.detectChanges(); // Trigger change detection to update the view\n  }\n\n  ngOnInit(): void {\n    if (isDefined(this.dialogConfig.data)) {\n      this.ownerId = this.dialogConfig.data.ownerId ?? null;\n\n      // Initialize assetRatingProfile with ownerId\n      this.newAssetRatingProfile.update((current) => ({\n        ...current,\n        ownerId: this.ownerId ?? '',\n      }));\n    }\n  }\n\n  openWizard() {\n    this.displayWizard = true;\n    this.newAssetRatingProfile.set({} as AssetRatingProfileCreateRequest);\n  }\n\n  // Form validity handlers\n  onDetailsFormValidityChange(isValid: boolean) {\n    this.steps[0].disableNext = !isValid;\n    this.formIsValid.set(isValid);\n  }\n\n  // Update the assetRatingProfile state with form data\n  updateAssetRatingProfileDetails(formData: Record<string, unknown>) {\n    this.newAssetRatingProfile.update((current) => {\n      const updated = { ...current };\n\n      Object.keys(formData).forEach((key) => {\n        if (key !== 'ownerId') {\n          updated[key] = formData[key];\n        }\n      });\n\n      if (isNullOrUndefined(updated.ownerId)) {\n        updated.ownerId = this.ownerId ?? '';\n      }\n\n      return updated;\n    });\n  }\n\n  onWizardComplete(): void {\n    // Process the final data from all steps\n    const assetRatingProfileData = this.newAssetRatingProfile();\n    this.isSubmitting.set(true);\n\n    this.entitiesService\n      .createAssetRatingProfile(assetRatingProfileData)\n      .pipe(\n        takeUntilDestroyed(this.destroyRef),\n        finalize(() => this.isSubmitting.set(false)),\n      )\n      .subscribe({\n        next: (response: AssetRatingProfileResponse) => {\n          this.broadcastService.broadcast('entity-updated', {\n            entityType: 'asset-rating-profile',\n            operation: 'create',\n            entityId: response.id,\n          });\n          this.dialogRef.close(response);\n        },\n        error: (error: Error) => {\n          // Handle error, could show message and keep dialog open\n          console.error('Error creating asset rating profile:', error);\n        },\n      });\n  }\n\n  // Update cancel to close dialog with no result\n  onWizardCancel(): void {\n    this.newAssetRatingProfile.set({} as AssetRatingProfileCreateRequest);\n    this.dialogRef.close();\n  }\n}\n","<app-wizard\n  [contentOnly]=\"true\"\n  [steps]=\"steps\"\n  [showSteps]=\"false\"\n  [useWizardButtonsOnly]=\"true\"\n  [loading]=\"isSubmitting()\"\n  (complete)=\"onWizardComplete()\"\n  (onCancel)=\"onWizardCancel()\"\n>\n</app-wizard>\n\n<!-- Step 1: AssetRatingProfile Details -->\n<ng-template #assetRatingProfileDetailsStep let-step>\n  <div class=\"p-fluid\">\n    <app-asset-rating-profile-details-section\n      #assetRatingProfileDetailsForm\n      [createMode]=\"true\"\n      [entity]=\"newAssetRatingProfile()\"\n      [ownerId]=\"ownerId\"\n      (formValidityChange)=\"onDetailsFormValidityChange($event)\"\n      (formValueChange)=\"updateAssetRatingProfileDetails($event)\"\n    ></app-asset-rating-profile-details-section>\n  </div>\n</ng-template>\n\n<ng-template #confirmationTemplate let-step>\n  <div class=\"flex gap-6\">\n    <span class=\"pi pi-check !text-5xl\"></span>\n\n    <div class=\"flex-1\">\n      <div class=\"grid\">\n        <!-- AssetRatingProfile Details Section -->\n        <div class=\"col-12 md:col-6\">\n          <p class=\"mb-4\">\n            You've completed all of the information required and we're ready to\n            create your Asset Rating Profile.\n          </p>\n\n          <div class=\"space-y-2\">\n            <!-- Each field in a side-by-side layout -->\n            <div class=\"flex\">\n              <div class=\"w-1/3 font-medium\">Name:</div>\n              <div class=\"w-2/3\">\n                {{ newAssetRatingProfile().name || 'Not provided' }}\n              </div>\n            </div>\n          </div>\n        </div>\n      </div>\n\n      <div\n        class=\"mt-4 pt-4 border-top-1 border-surface-200 dark:border-surface-700\"\n      >\n        <p class=\"mb-0\">Click finish to create this Asset Rating Profile.</p>\n      </div>\n    </div>\n  </div>\n</ng-template>\n","import { Injectable, computed, inject, signal } from '@angular/core';\n\nimport { TableLazyLoadEvent } from 'primeng/table';\n\nimport {\n  GridConfiguration,\n  GridDataService,\n  DataGridParams,\n  GridColumn,\n  FilterCriteria,\n  FilterValue,\n  DATE_FORMATS,\n} from '../../../shared/models';\nimport { UtilityService } from '../../../core/services/utility.service';\nimport { GridBaseService } from '../../../shared/services/grid-base.service';\nimport { isDefined } from '../../../shared/utils';\nimport { AssetRatingProfilesDataAdapter } from '../services/adapters';\nimport { AssetRatingProfileListItem } from '../../../api';\nimport { DEFAULT_PAGE_SIZE } from '../../../core/models';\nimport { MeasurementDateTimeService } from '../../../shared/services/measurement-units/measurement-date-time.service';\nimport { DynamicDialogRef, DialogService } from 'primeng/dynamicdialog';\nimport { AssetRatingProfileCreateWizardComponent } from '../components/asset-rating-profiles/asset-rating-profile-create-wizard/asset-rating-profile-create-wizard.component';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class AssetRatingProfilesGridConfig\n  implements GridConfiguration<AssetRatingProfileListItem>\n{\n  private readonly assetRatingProfilesService = inject(\n    AssetRatingProfilesDataAdapter,\n  );\n  private readonly utilityService = inject(UtilityService);\n  private readonly gridBaseService = inject(GridBaseService);\n  private readonly measurementDateTimeService = inject(\n    MeasurementDateTimeService,\n  );\n  private dialogRef: DynamicDialogRef | null = null;\n  private readonly dialogService = inject(DialogService);\n\n  private readonly defaultStateValues = [\n    AssetRatingProfileListItem.StateEnum.Active,\n  ];\n  private readonly filterState = signal<Record<string, FilterCriteria>>({\n    state: {\n      value: this.defaultStateValues,\n      operator: 'in',\n    },\n  });\n  private params: Record<string, string> = { clientId: '' };\n  ownerId = '';\n\n  private readonly rqlFilter = computed(() =>\n    this.utilityService.constructRqlFilter(this.filterState()),\n  );\n\n  private readonly stateLabels: Record<\n    AssetRatingProfileListItem.StateEnum,\n    string\n  > = {\n    active: 'Active',\n    deleted: 'Deleted',\n  };\n\n  entityType = 'asset-rating-profiles';\n  columns: GridColumn<AssetRatingProfileListItem>[] = [\n    {\n      field: 'name',\n      header: 'Name',\n      filter: true,\n      filterType: 'text',\n      filterMatchMode: 'contains',\n    },\n    {\n      field: 'state',\n      header: 'State',\n      valueGetter: (rowData: AssetRatingProfileListItem) =>\n        isDefined(rowData.state) ? this.stateLabels[rowData.state] : '',\n      filter: true,\n      filterType: 'multiselect',\n      filterMatchMode: 'in',\n      filterConfig: {\n        type: 'multiselect',\n        options: [\n          {\n            label: 'Active',\n            value: AssetRatingProfileListItem.StateEnum.Active,\n          },\n          {\n            label: 'Deleted',\n            value: AssetRatingProfileListItem.StateEnum.Deleted,\n          },\n        ],\n        defaultSelected: this.defaultStateValues,\n      },\n    },\n    {\n      field: 'modifiedDate',\n      header: 'Modified',\n      filter: false,\n      valueGetter: (rowData: AssetRatingProfileListItem) =>\n        isDefined(rowData.modifiedDate)\n          ? this.measurementDateTimeService.formatDateTime(\n              this.measurementDateTimeService.createDateAssumingUtc(\n                rowData.modifiedDate,\n              ),\n              DATE_FORMATS.DATE_TIME_SECONDS,\n            )\n          : '',\n    },\n  ];\n\n  dataService: GridDataService<AssetRatingProfileListItem> =\n    this.assetRatingProfilesService;\n\n  getFilters(): Record<string, FilterCriteria> {\n    return this.filterState();\n  }\n\n  clearFilters(): void {\n    this.filterState.set({\n      state: {\n        value: this.defaultStateValues,\n        operator: 'in',\n      },\n    });\n  }\n\n  initialize(params: Record<string, string>) {\n    this.params = params;\n    if (isDefined(this.params['clientId'])) {\n      this.ownerId = String(this.params['clientId']);\n    } else if (isDefined(this.params['vendorId'])) {\n      this.ownerId = String(this.params['vendorId']);\n    }\n  }\n  getTitle(): string {\n    return 'Asset Rating Profiles';\n  }\n\n  getRequestParams(event?: TableLazyLoadEvent): DataGridParams {\n    let sortField = 'name:asc'; // Default\n\n    if (isDefined(event?.sortField)) {\n      const sortOrder = event.sortOrder === 1 ? 'asc' : 'desc';\n      sortField = `${event.sortField}:${sortOrder}`;\n    }\n\n    return {\n      owner: this.ownerId,\n      offset: isDefined(event?.first) ? event.first : 0,\n      recurse: false,\n      limit: isDefined(event?.rows) ? event.rows : DEFAULT_PAGE_SIZE,\n      sortField: sortField,\n      filters: this.rqlFilter(),\n    };\n  }\n\n  onFilterChange(field: string, value: FilterValue): void {\n    const column = this.columns.find((col) => col.field === field);\n\n    if (Array.isArray(value)) {\n      const newFilters = this.gridBaseService.handleFilters(\n        this.filterState(),\n        field,\n        value,\n        undefined,\n        column?.filterMatchMode,\n      );\n\n      this.filterState.set(newFilters);\n      return;\n    }\n\n    // For non-array values, use the grid base service\n    const newFilters = this.gridBaseService.handleFilters(\n      this.filterState(),\n      field,\n      value,\n      undefined,\n      column?.filterMatchMode,\n    );\n\n    this.filterState.set(newFilters);\n  }\n\n  onAdd(): void {\n    this.openAssetRatingProfileCreationDialog(this.ownerId).subscribe();\n  }\n\n  openAssetRatingProfileCreationDialog(ownerId: string) {\n    this.dialogRef = this.dialogService.open(\n      AssetRatingProfileCreateWizardComponent,\n      {\n        header: 'Asset Rating Profile Wizard',\n        contentStyle: { overflow: 'auto' },\n        baseZIndex: 10000,\n        data: { ownerId: ownerId },\n        position: 'top',\n        modal: true,\n      },\n    );\n\n    return this.dialogRef.onClose;\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport {\n  AfterViewInit,\n  ChangeDetectorRef,\n  Component,\n  DestroyRef,\n  inject,\n  OnInit,\n  signal,\n  TemplateRef,\n  ViewChild,\n} from '@angular/core';\nimport { takeUntilDestroyed } from '@angular/core/rxjs-interop';\nimport { ReactiveFormsModule } from '@angular/forms';\n\nimport { ButtonModule } from 'primeng/button';\nimport { DynamicDialogRef, DynamicDialogConfig } from 'primeng/dynamicdialog';\n\nimport {\n  EntitiesService,\n  AssetStateProfileCreateRequest,\n  AssetStateProfileResponse,\n} from '../../../../../api';\nimport { WizardComponent } from '../../../../../shared/components/wizard/wizard.component';\nimport { isDefined, isNullOrUndefined } from '../../../../../shared/utils';\nimport { BroadcastEventMessageService } from '../../../services/broadcast-event-messages.service';\nimport { AssetStateProfileDetailsSectionComponent } from '../asset-state-profile-details-section/asset-state-profile-details-section.component';\nimport { Step } from '../../../../../shared/models';\nimport { finalize } from 'rxjs';\n\n@Component({\n  selector: 'app-asset-state-profile-create-wizard',\n  imports: [\n    CommonModule,\n    ReactiveFormsModule,\n    WizardComponent,\n    ButtonModule,\n    AssetStateProfileDetailsSectionComponent,\n  ],\n  templateUrl: './asset-state-profile-create-wizard.component.html',\n  styleUrl: './asset-state-profile-create-wizard.component.scss',\n})\nexport class AssetStateProfileCreateWizardComponent\n  implements AfterViewInit, OnInit\n{\n  @ViewChild('assetStateProfileDetailsStep')\n  assetStateProfileDetailsStep!: TemplateRef<{\n    $implicit: Step;\n  }> | null;\n  @ViewChild('confirmationTemplate', { static: true })\n  confirmationTemplate!: TemplateRef<{ $implicit: Step }> | null;\n  private readonly cdr = inject(ChangeDetectorRef);\n\n  // References to form components\n  @ViewChild('assetStateProfileDetailsForm')\n  assetStateProfileDetailsForm!: AssetStateProfileDetailsSectionComponent;\n\n  private readonly entitiesService = inject(EntitiesService);\n  private readonly broadcastService = inject(BroadcastEventMessageService);\n  protected readonly destroyRef = inject(DestroyRef);\n  private readonly dialogRef = inject(DynamicDialogRef);\n  private readonly dialogConfig = inject(DynamicDialogConfig);\n\n  // AssetStateProfile model to collect data across steps\n  newAssetStateProfile = signal<AssetStateProfileCreateRequest>(\n    {} as AssetStateProfileCreateRequest,\n  );\n\n  // Form validity state\n  formIsValid = signal<boolean>(false);\n\n  displayWizard = false;\n  steps: Step[] = [];\n  previousStepIndex = 0;\n  currentStepIndex = 0;\n  ownerId: string | null = null;\n  isSubmitting = signal<boolean>(false);\n\n  ngAfterViewInit() {\n    this.steps = [\n      {\n        value: 1,\n        header: 'Asset State Profile Details',\n        content: this.assetStateProfileDetailsStep,\n        complete: false,\n        validate: () => this.assetStateProfileDetailsForm.validate(),\n      },\n      {\n        value: 2,\n        header: 'Confirmation',\n        content: this.confirmationTemplate,\n        complete: true,\n      },\n    ];\n    this.cdr.detectChanges(); // Trigger change detection to update the view\n  }\n\n  ngOnInit(): void {\n    if (isDefined(this.dialogConfig.data)) {\n      this.ownerId = this.dialogConfig.data.ownerId ?? null;\n\n      // Initialize assetStateProfile with ownerId\n      this.newAssetStateProfile.update((current) => ({\n        ...current,\n        ownerId: this.ownerId ?? '',\n      }));\n    }\n  }\n\n  openWizard() {\n    this.displayWizard = true;\n    this.newAssetStateProfile.set({} as AssetStateProfileCreateRequest);\n  }\n\n  // Form validity handlers\n  onDetailsFormValidityChange(isValid: boolean) {\n    this.steps[0].disableNext = !isValid;\n    this.formIsValid.set(isValid);\n  }\n\n  // Update the assetStateProfile state with form data\n  updateAssetStateProfileDetails(formData: Record<string, unknown>) {\n    this.newAssetStateProfile.update((current) => {\n      const updated = { ...current };\n\n      Object.keys(formData).forEach((key) => {\n        if (key !== 'ownerId') {\n          updated[key] = formData[key];\n        }\n      });\n\n      if (isNullOrUndefined(updated.ownerId)) {\n        updated.ownerId = this.ownerId ?? '';\n      }\n\n      return updated;\n    });\n  }\n\n  onWizardComplete(): void {\n    // Process the final data from all steps\n    const assetStateProfileData = this.newAssetStateProfile();\n    this.isSubmitting.set(true);\n\n    this.entitiesService\n      .createAssetStateProfile(assetStateProfileData)\n      .pipe(\n        takeUntilDestroyed(this.destroyRef),\n        finalize(() => this.isSubmitting.set(false)),\n      )\n      .subscribe({\n        next: (response: AssetStateProfileResponse) => {\n          this.broadcastService.broadcast('entity-updated', {\n            entityType: 'asset-state-profile',\n            operation: 'create',\n            entityId: response.id,\n          });\n          this.dialogRef.close(response);\n        },\n        error: (error: Error) => {\n          // Handle error, could show message and keep dialog open\n          console.error('Error creating asset state profile:', error);\n        },\n      });\n  }\n\n  // Update cancel to close dialog with no result\n  onWizardCancel(): void {\n    this.newAssetStateProfile.set({} as AssetStateProfileCreateRequest);\n    this.dialogRef.close();\n  }\n}\n","<app-wizard\n  [contentOnly]=\"true\"\n  [steps]=\"steps\"\n  [showSteps]=\"false\"\n  [useWizardButtonsOnly]=\"true\"\n  [loading]=\"isSubmitting()\"\n  (complete)=\"onWizardComplete()\"\n  (onCancel)=\"onWizardCancel()\"\n>\n</app-wizard>\n\n<!-- Step 1: AssetStateProfile Details -->\n<ng-template #assetStateProfileDetailsStep let-step>\n  <div class=\"p-fluid\">\n    <app-asset-state-profile-details-section\n      #assetStateProfileDetailsForm\n      [createMode]=\"true\"\n      [entity]=\"newAssetStateProfile()\"\n      [ownerId]=\"ownerId\"\n      (formValidityChange)=\"onDetailsFormValidityChange($event)\"\n      (formValueChange)=\"updateAssetStateProfileDetails($event)\"\n    ></app-asset-state-profile-details-section>\n  </div>\n</ng-template>\n\n<ng-template #confirmationTemplate let-step>\n  <div class=\"flex gap-6\">\n    <span class=\"pi pi-check !text-5xl\"></span>\n\n    <div class=\"flex-1\">\n      <div class=\"grid\">\n        <!-- AssetStateProfile Details Section -->\n        <div class=\"col-12 md:col-6\">\n          <p class=\"mb-4\">\n            You've completed all of the information required and we're ready to\n            create your Asset State Profile.\n          </p>\n\n          <div class=\"space-y-2\">\n            <!-- Each field in a side-by-side layout -->\n            <div class=\"flex\">\n              <div class=\"w-1/3 font-medium\">Name:</div>\n              <div class=\"w-2/3\">\n                {{ newAssetStateProfile().name || 'Not provided' }}\n              </div>\n            </div>\n          </div>\n        </div>\n      </div>\n\n      <div\n        class=\"mt-4 pt-4 border-top-1 border-surface-200 dark:border-surface-700\"\n      >\n        <p class=\"mb-0\">Click finish to create this Asset State Profile.</p>\n      </div>\n    </div>\n  </div>\n</ng-template>\n","import { Injectable, computed, inject, signal } from '@angular/core';\n\nimport { TableLazyLoadEvent } from 'primeng/table';\n\nimport {\n  GridConfiguration,\n  GridDataService,\n  DataGridParams,\n  GridColumn,\n  FilterCriteria,\n  FilterValue,\n  DATE_FORMATS,\n} from '../../../shared/models';\nimport { UtilityService } from '../../../core/services/utility.service';\nimport { GridBaseService } from '../../../shared/services/grid-base.service';\nimport { isDefined } from '../../../shared/utils';\nimport { AssetStateProfilesDataAdapter } from '../services/adapters';\nimport { AssetStateProfileListItem } from '../../../api';\nimport { DEFAULT_PAGE_SIZE } from '../../../core/models';\nimport { MeasurementDateTimeService } from '../../../shared/services/measurement-units/measurement-date-time.service';\nimport { DialogService, DynamicDialogRef } from 'primeng/dynamicdialog';\nimport { AssetStateProfileCreateWizardComponent } from '../components/asset-state-profiles/asset-state-profile-create-wizard/asset-state-profile-create-wizard.component';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class AssetStateProfilesGridConfig\n  implements GridConfiguration<AssetStateProfileListItem>\n{\n  private readonly assetStateProfilesService = inject(\n    AssetStateProfilesDataAdapter,\n  );\n  private readonly utilityService = inject(UtilityService);\n  private readonly gridBaseService = inject(GridBaseService);\n  private readonly measurementDateTimeService = inject(\n    MeasurementDateTimeService,\n  );\n  private dialogRef: DynamicDialogRef | null = null;\n  private readonly dialogService = inject(DialogService);\n\n  private readonly defaultStateValues = [\n    AssetStateProfileListItem.StateEnum.Active,\n  ];\n  private readonly filterState = signal<Record<string, FilterCriteria>>({\n    state: {\n      value: this.defaultStateValues,\n      operator: 'in',\n    },\n  });\n  private params: Record<string, string> = { clientId: '' };\n\n  private readonly rqlFilter = computed(() =>\n    this.utilityService.constructRqlFilter(this.filterState()),\n  );\n\n  private readonly stateLabels: Record<\n    AssetStateProfileListItem.StateEnum,\n    string\n  > = {\n    active: 'Active',\n    deleted: 'Deleted',\n  };\n\n  entityType = 'asset-state-profiles';\n  columns: GridColumn<AssetStateProfileListItem>[] = [\n    {\n      field: 'name',\n      header: 'Name',\n      filter: true,\n      filterType: 'text',\n      filterMatchMode: 'contains',\n    },\n    {\n      field: 'state',\n      header: 'State',\n      valueGetter: (rowData: AssetStateProfileListItem) =>\n        isDefined(rowData.state) ? this.stateLabels[rowData.state] : '',\n      filter: true,\n      filterType: 'multiselect',\n      filterMatchMode: 'in',\n      filterConfig: {\n        type: 'multiselect',\n        options: [\n          {\n            label: 'Active',\n            value: AssetStateProfileListItem.StateEnum.Active,\n          },\n          {\n            label: 'Deleted',\n            value: AssetStateProfileListItem.StateEnum.Deleted,\n          },\n        ],\n        defaultSelected: this.defaultStateValues,\n      },\n    },\n    {\n      field: 'modifiedDate',\n      header: 'Modified',\n      filter: false,\n      valueGetter: (rowData: AssetStateProfileListItem) =>\n        isDefined(rowData.modifiedDate)\n          ? this.measurementDateTimeService.formatDateTime(\n              this.measurementDateTimeService.createDateAssumingUtc(\n                rowData.modifiedDate,\n              ),\n              DATE_FORMATS.DATE_TIME_SECONDS,\n            )\n          : '',\n    },\n  ];\n  ownerId = '';\n\n  dataService: GridDataService<AssetStateProfileListItem> =\n    this.assetStateProfilesService;\n\n  getFilters(): Record<string, FilterCriteria> {\n    return this.filterState();\n  }\n\n  clearFilters(): void {\n    this.filterState.set({\n      state: {\n        value: this.defaultStateValues,\n        operator: 'in',\n      },\n    });\n  }\n\n  initialize(params: Record<string, string>) {\n    this.params = params;\n    if (isDefined(this.params['clientId'])) {\n      this.ownerId = String(this.params['clientId']);\n    } else if (isDefined(this.params['vendorId'])) {\n      this.ownerId = String(this.params['vendorId']);\n    }\n  }\n\n  getTitle(): string {\n    return 'Asset State Profiles';\n  }\n\n  getRequestParams(event?: TableLazyLoadEvent): DataGridParams {\n    let sortField = 'name:asc'; // Default\n\n    if (isDefined(event?.sortField)) {\n      const sortOrder = event.sortOrder === 1 ? 'asc' : 'desc';\n      sortField = `${event.sortField}:${sortOrder}`;\n    }\n\n    return {\n      owner: this.ownerId,\n      offset: isDefined(event?.first) ? event.first : 0,\n      recurse: false,\n      limit: isDefined(event?.rows) ? event.rows : DEFAULT_PAGE_SIZE,\n      sortField: sortField,\n      filters: this.rqlFilter(),\n    };\n  }\n\n  onFilterChange(field: string, value: FilterValue): void {\n    const column = this.columns.find((col) => col.field === field);\n\n    if (Array.isArray(value)) {\n      const newFilters = this.gridBaseService.handleFilters(\n        this.filterState(),\n        field,\n        value,\n        undefined,\n        column?.filterMatchMode,\n      );\n\n      this.filterState.set(newFilters);\n      return;\n    }\n\n    // For non-array values, use the grid base service\n    const newFilters = this.gridBaseService.handleFilters(\n      this.filterState(),\n      field,\n      value,\n      undefined,\n      column?.filterMatchMode,\n    );\n\n    this.filterState.set(newFilters);\n  }\n\n  onAdd(): void {\n    this.openAssetStateProfileCreationDialog(this.ownerId).subscribe();\n  }\n\n  openAssetStateProfileCreationDialog(ownerId: string) {\n    this.dialogRef = this.dialogService.open(\n      AssetStateProfileCreateWizardComponent,\n      {\n        header: 'Asset State Profile Wizard',\n        contentStyle: { overflow: 'auto' },\n        baseZIndex: 10000,\n        data: { ownerId: ownerId },\n        position: 'top',\n        modal: true,\n      },\n    );\n\n    return this.dialogRef.onClose;\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport {\n  AfterViewInit,\n  Component,\n  DestroyRef,\n  inject,\n  OnInit,\n  signal,\n  TemplateRef,\n  ViewChild,\n} from '@angular/core';\nimport { takeUntilDestroyed } from '@angular/core/rxjs-interop';\nimport { ReactiveFormsModule } from '@angular/forms';\n\nimport { ButtonModule } from 'primeng/button';\nimport { DynamicDialogRef, DynamicDialogConfig } from 'primeng/dynamicdialog';\n\nimport {\n  EntitiesService,\n  IoTypeCreateRequest,\n  IoTypeResponse,\n} from '../../../../../api';\nimport { WizardComponent } from '../../../../../shared/components/wizard/wizard.component';\nimport { isDefined, isNullOrUndefined } from '../../../../../shared/utils';\nimport { IoTypeDetailsSectionComponent } from '../io-type-details-section/io-type-details-section.component';\nimport { Step } from '../../../../../shared/models';\nimport { BroadcastEventMessageService } from '../../../services/broadcast-event-messages.service';\nimport { UtilityService } from '../../../../../core/services/utility.service';\nimport { finalize } from 'rxjs';\n\n@Component({\n  selector: 'app-io-type-create-wizard',\n  imports: [\n    CommonModule,\n    ReactiveFormsModule,\n    WizardComponent,\n    ButtonModule,\n    IoTypeDetailsSectionComponent,\n  ],\n  templateUrl: './io-type-create-wizard.component.html',\n  styleUrl: './io-type-create-wizard.component.scss',\n})\nexport class IoTypeCreateWizardComponent implements AfterViewInit, OnInit {\n  @ViewChild('ioTypeDetailsStep') ioTypeDetailsStep!: TemplateRef<{\n    $implicit: Step;\n  }> | null;\n  @ViewChild('confirmationTemplate', { static: true })\n  confirmationTemplate!: TemplateRef<{ $implicit: Step }> | null;\n\n  // References to form components\n  @ViewChild('ioTypeDetailsForm')\n  ioTypeDetailsForm!: IoTypeDetailsSectionComponent;\n\n  private readonly entitiesService = inject(EntitiesService);\n  private readonly broadcastService = inject(BroadcastEventMessageService);\n  protected readonly destroyRef = inject(DestroyRef);\n  private readonly dialogRef = inject(DynamicDialogRef);\n  private readonly dialogConfig = inject(DynamicDialogConfig);\n  private readonly utilityService = inject(UtilityService);\n\n  // IoType model to collect data across steps\n  newIoType = signal<IoTypeCreateRequest>({} as IoTypeCreateRequest);\n\n  // Form validity state\n  formIsValid = signal<boolean>(false);\n\n  displayWizard = false;\n  steps: Step[] = [];\n  previousStepIndex = 0;\n  currentStepIndex = 0;\n  ownerId: string | null = null;\n  isSubmitting = signal<boolean>(false);\n\n  ngOnInit(): void {\n    this.steps = [\n      {\n        value: 1,\n        header: 'Io type Details',\n        content: null,\n        complete: false,\n        validate: () => this.ioTypeDetailsForm?.validate(),\n      },\n      {\n        value: 2,\n        header: 'Confirmation',\n        content: null,\n        complete: true,\n      },\n    ];\n\n    if (isDefined(this.dialogConfig.data)) {\n      this.ownerId = this.dialogConfig.data.ownerId ?? null;\n\n      this.newIoType.update((current) => ({\n        ...current,\n        ownerId: this.ownerId ?? '',\n      }));\n    }\n  }\n\n  ngAfterViewInit() {\n    if (this.steps.length > 0 && this.ioTypeDetailsStep) {\n      this.steps[0].content = this.ioTypeDetailsStep;\n    }\n    if (this.steps.length > 1 && this.confirmationTemplate) {\n      this.steps[1].content = this.confirmationTemplate;\n    }\n  }\n\n  openWizard() {\n    this.displayWizard = true;\n    this.newIoType.set({} as IoTypeCreateRequest);\n  }\n\n  // Form validity handlers\n  onDetailsFormValidityChange(isValid: boolean) {\n    this.steps[0].disableNext = !isValid;\n    this.formIsValid.set(isValid);\n  }\n\n  // Update the ioType state with form data\n  updateIoTypeDetails(formData: Record<string, unknown>) {\n    this.newIoType.update((current) => {\n      const updated = { ...current };\n\n      Object.keys(formData).forEach((key) => {\n        if (key !== 'ownerId') {\n          updated[key] = formData[key];\n        }\n      });\n\n      if (isNullOrUndefined(updated.ownerId)) {\n        updated.ownerId = this.ownerId ?? '';\n      }\n\n      return updated;\n    });\n  }\n\n  onWizardComplete(): void {\n    // Process the final data from all steps\n    const ioTypeData = this.newIoType();\n\n    this.isSubmitting.set(true);\n    this.entitiesService\n      .createIoType(ioTypeData)\n      .pipe(\n        takeUntilDestroyed(this.destroyRef),\n        finalize(() => this.isSubmitting.set(false)),\n      )\n      .subscribe({\n        next: (response: IoTypeResponse) => {\n          this.broadcastService.broadcast('entity-updated', {\n            entityType: 'iotype',\n            operation: 'create',\n            entityId: response.id,\n          });\n          this.dialogRef.close(response);\n        },\n        error: (error: Error) => {\n          // Handle error, could show message and keep dialog open\n          console.error('Error creating IO type:', error);\n        },\n      });\n  }\n\n  // Update cancel to close dialog with no result\n  onWizardCancel(): void {\n    this.newIoType.set({} as IoTypeCreateRequest);\n    this.dialogRef.close();\n  }\n\n  decamelize(str: unknown): string {\n    return this.utilityService.decamelize(str as string);\n  }\n}\n","<app-wizard\n  [contentOnly]=\"true\"\n  [steps]=\"steps\"\n  [showSteps]=\"false\"\n  [useWizardButtonsOnly]=\"true\"\n  [loading]=\"isSubmitting()\"\n  (complete)=\"onWizardComplete()\"\n  (onCancel)=\"onWizardCancel()\"\n>\n</app-wizard>\n\n<!-- Step 1: IoType Details -->\n<ng-template #ioTypeDetailsStep let-step>\n  <div class=\"p-fluid\">\n    <app-io-type-details-section\n      #ioTypeDetailsForm\n      [createMode]=\"true\"\n      [entity]=\"newIoType()\"\n      [ownerId]=\"ownerId\"\n      (formValidityChange)=\"onDetailsFormValidityChange($event)\"\n      (formValueChange)=\"updateIoTypeDetails($event)\"\n    ></app-io-type-details-section>\n  </div>\n</ng-template>\n\n<ng-template #confirmationTemplate let-step>\n  <div class=\"flex gap-6\">\n    <span class=\"pi pi-check !text-5xl\"></span>\n\n    <div class=\"flex-1\">\n      <div class=\"grid\">\n        <!-- IoType Details Section -->\n        <div class=\"col-12 md:col-6\">\n          <p class=\"mb-4\">\n            You've completed all of the information required and we're ready to\n            create your IO Type.\n          </p>\n\n          <div class=\"space-y-2\">\n            <!-- Each field in a side-by-side layout -->\n            <div class=\"flex\">\n              <div class=\"w-1/3 font-medium\">Name:</div>\n              <div class=\"w-2/3\">{{ newIoType().name || 'Not provided' }}</div>\n            </div>\n\n            @if (newIoType().type) {\n              <div class=\"flex\">\n                <div class=\"w-1/3 font-medium\">Type:</div>\n                <div class=\"w-2/3 capitalize\">\n                  {{ decamelize(newIoType().type) }}\n                </div>\n              </div>\n            }\n\n            @if (newIoType().unit) {\n              <div class=\"flex\">\n                <div class=\"w-1/3 font-medium\">Unit:</div>\n                <div class=\"w-2/3\">{{ newIoType().unit }}</div>\n              </div>\n            }\n            @if (newIoType().smoothingType) {\n              <div class=\"flex\">\n                <div class=\"w-1/3 font-medium\">Smoothing Type:</div>\n                <div class=\"w-2/3\">\n                  {{ decamelize(newIoType().smoothingType) }}\n                </div>\n              </div>\n            }\n\n            @if (newIoType().text?.active) {\n              <div class=\"flex\">\n                <div class=\"w-1/3 font-medium\">Active Text:</div>\n                <div class=\"w-2/3\">{{ newIoType().text?.active }}</div>\n              </div>\n            }\n\n            @if (newIoType().text?.inactive) {\n              <div class=\"flex\">\n                <div class=\"w-1/3 font-medium\">Inactive Text:</div>\n                <div class=\"w-2/3\">{{ newIoType().text?.inactive }}</div>\n              </div>\n            }\n\n            @if (newIoType().rate?.type) {\n              <div class=\"flex\">\n                <div class=\"w-1/3 font-medium\">Rate Type:</div>\n                <div class=\"w-2/3\">{{ newIoType().rate?.type }}</div>\n              </div>\n            }\n            @if (newIoType().rate?.multiplier) {\n              <div class=\"flex\">\n                <div class=\"w-1/3 font-medium\">Rate multiplier:</div>\n                <div class=\"w-2/3\">{{ newIoType().rate?.multiplier }}</div>\n              </div>\n            }\n\n            @if (newIoType().rate?.unit) {\n              <div class=\"flex\">\n                <div class=\"w-1/3 font-medium\">Rate unit:</div>\n                <div class=\"w-2/3\">{{ newIoType().rate?.unit }}</div>\n              </div>\n            }\n          </div>\n        </div>\n      </div>\n\n      <div\n        class=\"mt-4 pt-4 border-top-1 border-surface-200 dark:border-surface-700\"\n      >\n        <p class=\"mb-0\">Click finish to create this IO Type.</p>\n      </div>\n    </div>\n  </div>\n</ng-template>\n","import { Injectable, computed, inject, signal } from '@angular/core';\n\nimport { TableLazyLoadEvent } from 'primeng/table';\n\nimport {\n  GridConfiguration,\n  GridDataService,\n  DataGridParams,\n  GridColumn,\n  FilterCriteria,\n  FilterValue,\n  DATE_FORMATS,\n} from '../../../shared/models';\nimport { UtilityService } from '../../../core/services/utility.service';\nimport { GridBaseService } from '../../../shared/services/grid-base.service';\nimport { isDefined, isString } from '../../../shared/utils';\nimport { IoTypesDataAdapter } from '../services/adapters';\nimport { IoTypeListItem } from '../../../api';\nimport { DEFAULT_PAGE_SIZE } from '../../../core/models';\nimport { DynamicDialogRef, DialogService } from 'primeng/dynamicdialog';\nimport { IoTypeCreateWizardComponent } from '../components/io-types/io-type-create-wizard/io-type-create-wizard.component';\nimport { MeasurementDateTimeService } from '../../../shared/services/measurement-units/measurement-date-time.service';\nimport { ApiSchemaService } from '../../../core/services/api-schema.service';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class IoTypesGridConfig implements GridConfiguration<IoTypeListItem> {\n  private readonly ioTypesService = inject(IoTypesDataAdapter);\n  private readonly utilityService = inject(UtilityService);\n  private readonly gridBaseService = inject(GridBaseService);\n  private readonly apiSchemaService = inject(ApiSchemaService);\n  private dialogRef: DynamicDialogRef | null = null;\n  private readonly dialogService = inject(DialogService);\n  private readonly measurementDateTimeService = inject(\n    MeasurementDateTimeService,\n  );\n\n  private readonly defaultStateValues = [IoTypeListItem.StateEnum.Active];\n  private readonly filterState = signal<Record<string, FilterCriteria>>({\n    state: {\n      value: this.defaultStateValues,\n      operator: 'in',\n    },\n  });\n  private params: Record<string, string> = { ownerId: '' };\n  private ownerId = '';\n\n  private readonly rqlFilter = computed(() =>\n    this.utilityService.constructRqlFilter(this.filterState()),\n  );\n\n  private readonly stateLabels: Record<IoTypeListItem.StateEnum, string> = {\n    active: 'Active',\n    deleted: 'Deleted',\n  };\n\n  private readonly typeLabels: Record<IoTypeListItem.TypeEnum, string> = {\n    analog_input: 'Analog Input',\n    camera_input: 'Camera Input',\n    digital_input: 'Digital Input',\n    digital_output: 'Digital Output',\n    can_input: 'CAN Input',\n    counter_input: 'Counter Input',\n    temperature_input: 'Temperature Input',\n    value_input: 'Value Input',\n  };\n\n  entityType = 'io-types';\n  columns: GridColumn<IoTypeListItem>[] = [\n    {\n      field: 'name',\n      header: 'Name',\n      filter: true,\n      filterType: 'text',\n      filterMatchMode: 'contains',\n    },\n    {\n      field: 'type',\n      header: 'Type',\n      valueGetter: (rowData: IoTypeListItem) => {\n        const typeValue = this.apiSchemaService.getEntityType<\n          Record<string, unknown>,\n          IoTypeListItem.TypeEnum\n        >(rowData as Record<string, unknown>, 'iotype');\n        return isDefined(typeValue) && isString(typeValue)\n          ? this.typeLabels[typeValue]\n          : '';\n      },\n      filter: true,\n      filterType: 'multiselect',\n      filterMatchMode: 'in',\n      filterConfig: {\n        type: 'multiselect',\n        options: [\n          {\n            label: 'Digital Input',\n            value: IoTypeListItem.TypeEnum.DigitalInput,\n          },\n          {\n            label: 'Digital Output',\n            value: IoTypeListItem.TypeEnum.DigitalOutput,\n          },\n          { label: 'Analog Input', value: IoTypeListItem.TypeEnum.AnalogInput },\n          {\n            label: 'Temperature Input',\n            value: IoTypeListItem.TypeEnum.TemperatureInput,\n          },\n          { label: 'CAN Input', value: IoTypeListItem.TypeEnum.CanInput },\n          {\n            label: 'Counter Input',\n            value: IoTypeListItem.TypeEnum.CounterInput,\n          },\n          { label: 'Camera Input', value: IoTypeListItem.TypeEnum.CameraInput },\n          { label: 'Value Input', value: IoTypeListItem.TypeEnum.ValueInput },\n        ],\n      },\n    },\n    {\n      field: 'state',\n      header: 'State',\n      valueGetter: (rowData: IoTypeListItem) =>\n        isDefined(rowData.state) ? this.stateLabels[rowData.state] : '',\n      filter: true,\n      filterType: 'multiselect',\n      filterMatchMode: 'in',\n      filterConfig: {\n        type: 'multiselect',\n        options: [\n          { label: 'Active', value: IoTypeListItem.StateEnum.Active },\n          { label: 'Deleted', value: IoTypeListItem.StateEnum.Deleted },\n        ],\n        defaultSelected: this.defaultStateValues,\n      },\n      transform: 'capitalize',\n    },\n    {\n      field: 'modifiedDate',\n      header: 'Modified',\n      filter: false,\n      valueGetter: (rowData: IoTypeListItem) =>\n        isDefined(rowData.modifiedDate)\n          ? this.measurementDateTimeService.formatDateTime(\n              this.measurementDateTimeService.createDateAssumingUtc(\n                rowData.modifiedDate,\n              ),\n              DATE_FORMATS.DATE_TIME_SECONDS,\n            )\n          : '',\n    },\n  ];\n\n  dataService: GridDataService<IoTypeListItem> = this.ioTypesService;\n\n  getFilters(): Record<string, FilterCriteria> {\n    return this.filterState();\n  }\n\n  clearFilters(): void {\n    this.filterState.set({\n      state: {\n        value: this.defaultStateValues,\n        operator: 'in',\n      },\n    });\n  }\n\n  initialize(params: Record<string, string>): void {\n    this.params = params;\n    if (isDefined(this.params['clientId'])) {\n      this.ownerId = String(this.params['clientId']);\n    } else if (isDefined(this.params['vendorId'])) {\n      this.ownerId = String(this.params['vendorId']);\n    }\n  }\n\n  getTitle(): string {\n    return 'I/O Types';\n  }\n\n  getRequestParams(event?: TableLazyLoadEvent): DataGridParams {\n    // Add sorting support\n    let sortField = 'name:asc'; // Default\n\n    if (isDefined(event?.sortField)) {\n      const sortOrder = event.sortOrder === 1 ? 'asc' : 'desc';\n      sortField = `${event.sortField}:${sortOrder}`;\n    }\n\n    return {\n      owner: this.ownerId,\n      offset: isDefined(event?.first) ? event.first : 0,\n      recurse: false,\n      limit: isDefined(event?.rows) ? event.rows : DEFAULT_PAGE_SIZE,\n      sortField: sortField,\n      filters: this.rqlFilter(),\n    };\n  }\n\n  onFilterChange(field: string, value: FilterValue): void {\n    const column = this.columns.find((col) => col.field === field);\n\n    if (Array.isArray(value)) {\n      const newFilters = this.gridBaseService.handleFilters(\n        this.filterState(),\n        field,\n        value,\n        undefined,\n        column?.filterMatchMode,\n      );\n\n      this.filterState.set(newFilters);\n      return;\n    }\n\n    // For non-array values, use the grid base service\n    const newFilters = this.gridBaseService.handleFilters(\n      this.filterState(),\n      field,\n      value,\n      undefined,\n      column?.filterMatchMode,\n    );\n\n    this.filterState.set(newFilters);\n  }\n\n  onAdd(): void {\n    this.openIoTypeCreationDialog(this.ownerId).subscribe();\n  }\n\n  openIoTypeCreationDialog(ownerId: string) {\n    this.dialogRef = this.dialogService.open(IoTypeCreateWizardComponent, {\n      header: 'IO Type Wizard',\n      contentStyle: { overflow: 'auto' },\n      baseZIndex: 10000,\n      data: { ownerId: ownerId },\n      position: 'top',\n      modal: true,\n    });\n\n    return this.dialogRef.onClose;\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport {\n  AfterViewInit,\n  ChangeDetectorRef,\n  Component,\n  DestroyRef,\n  inject,\n  OnInit,\n  signal,\n  TemplateRef,\n  ViewChild,\n} from '@angular/core';\nimport { takeUntilDestroyed } from '@angular/core/rxjs-interop';\nimport { ReactiveFormsModule } from '@angular/forms';\n\nimport { ButtonModule } from 'primeng/button';\nimport { DynamicDialogRef, DynamicDialogConfig } from 'primeng/dynamicdialog';\n\nimport {\n  EntitiesService,\n  OverspeedProfileCreateRequest,\n  OverspeedProfileResponse,\n} from '../../../../../api';\nimport { WizardComponent } from '../../../../../shared/components/wizard/wizard.component';\nimport { isDefined, isNullOrUndefined } from '../../../../../shared/utils';\nimport { OverspeedProfileDetailsSectionComponent } from '../overspeed-profile-details-section/overspeed-profile-details-section.component';\nimport { Step } from '../../../../../shared/models';\nimport { BroadcastEventMessageService } from '../../../services/broadcast-event-messages.service';\nimport { finalize } from 'rxjs';\n\n@Component({\n  selector: 'app-overspeed-profile-create-wizard',\n  imports: [\n    CommonModule,\n    ReactiveFormsModule,\n    WizardComponent,\n    ButtonModule,\n    OverspeedProfileDetailsSectionComponent,\n  ],\n  templateUrl: './overspeed-profile-create-wizard.component.html',\n  styleUrl: './overspeed-profile-create-wizard.component.scss',\n})\nexport class OverspeedProfileCreateWizardComponent\n  implements AfterViewInit, OnInit\n{\n  @ViewChild('overspeedProfileDetailsStep')\n  overspeedProfileDetailsStep!: TemplateRef<{\n    $implicit: Step;\n  }> | null;\n  @ViewChild('confirmationTemplate', { static: true })\n  confirmationTemplate!: TemplateRef<{ $implicit: Step }> | null;\n  private readonly cdr = inject(ChangeDetectorRef);\n\n  // References to form components\n  @ViewChild('overspeedProfileDetailsForm')\n  overspeedProfileDetailsForm!: OverspeedProfileDetailsSectionComponent;\n\n  private readonly entitiesService = inject(EntitiesService);\n  private readonly broadcastService = inject(BroadcastEventMessageService);\n  protected readonly destroyRef = inject(DestroyRef);\n  private readonly dialogRef = inject(DynamicDialogRef);\n  private readonly dialogConfig = inject(DynamicDialogConfig);\n\n  // OverspeedProfile model to collect data across steps\n  newOverspeedProfile = signal<OverspeedProfileCreateRequest>(\n    {} as OverspeedProfileCreateRequest,\n  );\n\n  // Form validity state\n  formIsValid = signal<boolean>(false);\n\n  displayWizard = false;\n  steps: Step[] = [];\n  previousStepIndex = 0;\n  currentStepIndex = 0;\n  ownerId: string | null = null;\n  isSubmitting = signal<boolean>(false);\n\n  ngAfterViewInit() {\n    this.steps = [\n      {\n        value: 1,\n        header: 'Overspeed Profile Details',\n        content: this.overspeedProfileDetailsStep,\n        complete: false,\n        validate: () => this.overspeedProfileDetailsForm.validate(),\n      },\n      {\n        value: 2,\n        header: 'Confirmation',\n        content: this.confirmationTemplate,\n        complete: true,\n      },\n    ];\n    this.cdr.detectChanges(); // Trigger change detection to update the view\n  }\n\n  ngOnInit(): void {\n    if (isDefined(this.dialogConfig.data)) {\n      this.ownerId = this.dialogConfig.data.ownerId ?? null;\n\n      // Initialize overspeedProfile with ownerId\n      this.newOverspeedProfile.update((current) => ({\n        ...current,\n        ownerId: this.ownerId ?? '',\n      }));\n    }\n  }\n\n  openWizard() {\n    this.displayWizard = true;\n    this.newOverspeedProfile.set({} as OverspeedProfileCreateRequest);\n  }\n\n  // Form validity handlers\n  onDetailsFormValidityChange(isValid: boolean) {\n    this.steps[0].disableNext = !isValid;\n    this.formIsValid.set(isValid);\n  }\n\n  // Update the overspeedProfile state with form data\n  updateOverspeedProfileDetails(formData: Record<string, unknown>) {\n    this.newOverspeedProfile.update((current) => {\n      const updated = { ...current };\n\n      Object.keys(formData).forEach((key) => {\n        if (key !== 'ownerId') {\n          updated[key] = formData[key];\n        }\n      });\n\n      if (isNullOrUndefined(updated.ownerId)) {\n        updated.ownerId = this.ownerId ?? '';\n      }\n\n      return updated;\n    });\n  }\n\n  onWizardComplete(): void {\n    // Process the final data from all steps\n    const overspeedProfileData = this.newOverspeedProfile();\n    this.isSubmitting.set(true);\n\n    this.entitiesService\n      .createOverspeedProfile(overspeedProfileData)\n      .pipe(\n        takeUntilDestroyed(this.destroyRef),\n        finalize(() => this.isSubmitting.set(false)),\n      )\n      .subscribe({\n        next: (response: OverspeedProfileResponse) => {\n          this.broadcastService.broadcast('entity-updated', {\n            entityType: 'overspeed-profile',\n            operation: 'create',\n            entityId: response.id,\n          });\n          this.dialogRef.close(response);\n        },\n        error: (error: Error) => {\n          // Handle error, could show message and keep dialog open\n          console.error('Error creating overspeed profile:', error);\n        },\n      });\n  }\n\n  // Update cancel to close dialog with no result\n  onWizardCancel(): void {\n    this.newOverspeedProfile.set({} as OverspeedProfileCreateRequest);\n    this.dialogRef.close();\n  }\n}\n","<app-wizard\n  [contentOnly]=\"true\"\n  [steps]=\"steps\"\n  [showSteps]=\"false\"\n  [useWizardButtonsOnly]=\"true\"\n  [loading]=\"isSubmitting()\"\n  (complete)=\"onWizardComplete()\"\n  (onCancel)=\"onWizardCancel()\"\n>\n</app-wizard>\n\n<!-- Step 1: OverspeedProfile Details -->\n<ng-template #overspeedProfileDetailsStep let-step>\n  <div class=\"p-fluid\">\n    <app-overspeed-profile-details-section\n      #overspeedProfileDetailsForm\n      [createMode]=\"true\"\n      [entity]=\"newOverspeedProfile()\"\n      [ownerId]=\"ownerId\"\n      (formValidityChange)=\"onDetailsFormValidityChange($event)\"\n      (formValueChange)=\"updateOverspeedProfileDetails($event)\"\n    ></app-overspeed-profile-details-section>\n  </div>\n</ng-template>\n\n<ng-template #confirmationTemplate let-step>\n  <div class=\"flex gap-6\">\n    <span class=\"pi pi-check !text-5xl\"></span>\n\n    <div class=\"flex-1\">\n      <div class=\"grid\">\n        <!-- OverspeedProfile Details Section -->\n        <div class=\"col-12 md:col-6\">\n          <p class=\"mb-4\">\n            You've completed all of the information required and we're ready to\n            create your Overspeed Profile.\n          </p>\n\n          <div class=\"space-y-2\">\n            <!-- Each field in a side-by-side layout -->\n            <div class=\"flex\">\n              <div class=\"w-1/3 font-medium\">Name:</div>\n              <div class=\"w-2/3\">\n                {{ newOverspeedProfile().name || 'Not provided' }}\n              </div>\n            </div>\n          </div>\n        </div>\n      </div>\n\n      <div\n        class=\"mt-4 pt-4 border-top-1 border-surface-200 dark:border-surface-700\"\n      >\n        <p class=\"mb-0\">Click finish to create this Overspeed Profile.</p>\n      </div>\n    </div>\n  </div>\n</ng-template>\n","import { Injectable, computed, inject, signal } from '@angular/core';\n\nimport { TableLazyLoadEvent } from 'primeng/table';\n\nimport {\n  GridConfiguration,\n  GridDataService,\n  DataGridParams,\n  GridColumn,\n  FilterCriteria,\n  FilterValue,\n  DATE_FORMATS,\n} from '../../../shared/models';\nimport { UtilityService } from '../../../core/services/utility.service';\nimport { GridBaseService } from '../../../shared/services/grid-base.service';\nimport { isDefined } from '../../../shared/utils';\nimport { OverspeedProfilesDataAdapter } from '../services/adapters';\nimport { OverspeedProfileListItem } from '../../../api';\nimport { DEFAULT_PAGE_SIZE } from '../../../core/models';\nimport { MeasurementDateTimeService } from '../../../shared/services/measurement-units/measurement-date-time.service';\nimport { DynamicDialogRef, DialogService } from 'primeng/dynamicdialog';\nimport { OverspeedProfileCreateWizardComponent } from '../components/overspeed-profiles/overspeed-profile-create-wizard/overspeed-profile-create-wizard.component';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class OverspeedProfilesGridConfig\n  implements GridConfiguration<OverspeedProfileListItem>\n{\n  private readonly overspeedProfilesService = inject(\n    OverspeedProfilesDataAdapter,\n  );\n  private readonly utilityService = inject(UtilityService);\n  private readonly gridBaseService = inject(GridBaseService);\n  private readonly measurementDateTimeService = inject(\n    MeasurementDateTimeService,\n  );\n  private dialogRef: DynamicDialogRef | null = null;\n  private readonly dialogService = inject(DialogService);\n\n  private readonly defaultStateValues = [\n    OverspeedProfileListItem.StateEnum.Active,\n  ];\n  private readonly filterState = signal<Record<string, FilterCriteria>>({\n    state: {\n      value: this.defaultStateValues,\n      operator: 'in',\n    },\n  });\n  private params: Record<string, string> = { ownerId: '' };\n  ownerId = '';\n\n  private readonly rqlFilter = computed(() =>\n    this.utilityService.constructRqlFilter(this.filterState()),\n  );\n  private readonly stateLabels: Record<\n    OverspeedProfileListItem.StateEnum,\n    string\n  > = {\n    active: 'Active',\n    deleted: 'Deleted',\n  };\n\n  entityType = 'overspeed-profiles';\n  columns: GridColumn<OverspeedProfileListItem>[] = [\n    {\n      field: 'name',\n      header: 'Name',\n      filter: true,\n      filterType: 'text',\n      filterMatchMode: 'contains',\n    },\n    {\n      field: 'state',\n      header: 'State',\n      valueGetter: (rowData: OverspeedProfileListItem) =>\n        isDefined(rowData.state) ? this.stateLabels[rowData.state] : '',\n      filter: true,\n      filterType: 'multiselect',\n      filterMatchMode: 'in',\n      filterConfig: {\n        type: 'multiselect',\n        options: [\n          {\n            label: 'Active',\n            value: OverspeedProfileListItem.StateEnum.Active,\n          },\n          {\n            label: 'Deleted',\n            value: OverspeedProfileListItem.StateEnum.Deleted,\n          },\n        ],\n        defaultSelected: this.defaultStateValues,\n      },\n    },\n    {\n      field: 'modifiedDate',\n      header: 'Modified',\n      filter: false,\n      valueGetter: (rowData: OverspeedProfileListItem) =>\n        isDefined(rowData.modifiedDate)\n          ? this.measurementDateTimeService.formatDateTime(\n              this.measurementDateTimeService.createDateAssumingUtc(\n                rowData.modifiedDate,\n              ),\n              DATE_FORMATS.DATE_TIME_SECONDS,\n            )\n          : '',\n    },\n  ];\n\n  dataService: GridDataService<OverspeedProfileListItem> =\n    this.overspeedProfilesService;\n\n  getFilters(): Record<string, FilterCriteria> {\n    return this.filterState();\n  }\n\n  clearFilters(): void {\n    this.filterState.set({\n      state: {\n        value: this.defaultStateValues,\n        operator: 'in',\n      },\n    });\n  }\n\n  initialize(params: Record<string, string>) {\n    this.params = params;\n    if (isDefined(this.params['clientId'])) {\n      this.ownerId = String(this.params['clientId']);\n    } else if (isDefined(this.params['vendorId'])) {\n      this.ownerId = String(this.params['vendorId']);\n    }\n  }\n\n  getTitle(): string {\n    return 'Overspeed Profiles';\n  }\n\n  getRequestParams(event?: TableLazyLoadEvent): DataGridParams {\n    let sortField = 'name:asc'; // Default\n\n    if (isDefined(event?.sortField)) {\n      const sortOrder = event.sortOrder === 1 ? 'asc' : 'desc';\n      sortField = `${event.sortField}:${sortOrder}`;\n    }\n\n    return {\n      owner: this.ownerId,\n      offset: isDefined(event?.first) ? event.first : 0,\n      recurse: false,\n      limit: isDefined(event?.rows) ? event.rows : DEFAULT_PAGE_SIZE,\n      sortField: sortField,\n      filters: this.rqlFilter(),\n    };\n  }\n\n  onFilterChange(field: string, value: FilterValue): void {\n    const column = this.columns.find((col) => col.field === field);\n\n    if (Array.isArray(value)) {\n      const newFilters = this.gridBaseService.handleFilters(\n        this.filterState(),\n        field,\n        value,\n        undefined,\n        column?.filterMatchMode,\n      );\n\n      this.filterState.set(newFilters);\n      return;\n    }\n\n    // For non-array values, use the grid base service\n    const newFilters = this.gridBaseService.handleFilters(\n      this.filterState(),\n      field,\n      value,\n      undefined,\n      column?.filterMatchMode,\n    );\n\n    this.filterState.set(newFilters);\n  }\n\n  onAdd(): void {\n    this.openOverspeedProfileCreationDialog(this.ownerId).subscribe();\n  }\n\n  openOverspeedProfileCreationDialog(ownerId: string) {\n    this.dialogRef = this.dialogService.open(\n      OverspeedProfileCreateWizardComponent,\n      {\n        header: 'Overspeed Profile Wizard',\n        contentStyle: { overflow: 'auto' },\n        baseZIndex: 10000,\n        data: { ownerId: ownerId },\n        position: 'top',\n        modal: true,\n      },\n    );\n\n    return this.dialogRef.onClose;\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport {\n  AfterViewInit,\n  ChangeDetectorRef,\n  Component,\n  DestroyRef,\n  inject,\n  OnInit,\n  signal,\n  TemplateRef,\n  ViewChild,\n} from '@angular/core';\nimport { takeUntilDestroyed } from '@angular/core/rxjs-interop';\nimport { ReactiveFormsModule } from '@angular/forms';\n\nimport { ButtonModule } from 'primeng/button';\nimport { DynamicDialogRef, DynamicDialogConfig } from 'primeng/dynamicdialog';\n\nimport {\n  EntitiesService,\n  RoadProfileCreateRequest,\n  RoadProfileResponse,\n} from '../../../../../api';\nimport { WizardComponent } from '../../../../../shared/components/wizard/wizard.component';\nimport { isDefined, isNullOrUndefined } from '../../../../../shared/utils';\nimport { RoadProfileDetailsSectionComponent } from '../road-profile-details-section/road-profile-details-section.component';\nimport { Step } from '../../../../../shared/models';\nimport { BroadcastEventMessageService } from '../../../services/broadcast-event-messages.service';\nimport { finalize } from 'rxjs';\n\n@Component({\n  selector: 'app-road-profile-create-wizard',\n  imports: [\n    CommonModule,\n    ReactiveFormsModule,\n    WizardComponent,\n    ButtonModule,\n    RoadProfileDetailsSectionComponent,\n  ],\n  templateUrl: './road-profile-create-wizard.component.html',\n  styleUrl: './road-profile-create-wizard.component.scss',\n})\nexport class RoadProfileCreateWizardComponent implements AfterViewInit, OnInit {\n  @ViewChild('roadProfileDetailsStep')\n  roadProfileDetailsStep!: TemplateRef<{\n    $implicit: Step;\n  }> | null;\n  @ViewChild('confirmationTemplate', { static: true })\n  confirmationTemplate!: TemplateRef<{ $implicit: Step }> | null;\n  private readonly cdr = inject(ChangeDetectorRef);\n\n  // References to form components\n  @ViewChild('roadProfileDetailsForm')\n  roadProfileDetailsForm!: RoadProfileDetailsSectionComponent;\n\n  private readonly entitiesService = inject(EntitiesService);\n  private readonly broadcastService = inject(BroadcastEventMessageService);\n  protected readonly destroyRef = inject(DestroyRef);\n  private readonly dialogRef = inject(DynamicDialogRef);\n  private readonly dialogConfig = inject(DynamicDialogConfig);\n\n  // RoadProfile model to collect data across steps\n  newRoadProfile = signal<RoadProfileCreateRequest>(\n    {} as RoadProfileCreateRequest,\n  );\n\n  // Form validity state\n  formIsValid = signal<boolean>(false);\n\n  displayWizard = false;\n  steps: Step[] = [];\n  previousStepIndex = 0;\n  currentStepIndex = 0;\n  ownerId: string | null = null;\n  isSubmitting = signal<boolean>(false);\n\n  ngAfterViewInit() {\n    this.steps = [\n      {\n        value: 1,\n        header: 'Road Profile Details',\n        content: this.roadProfileDetailsStep,\n        complete: false,\n        validate: () => this.roadProfileDetailsForm.validate(),\n      },\n      {\n        value: 2,\n        header: 'Confirmation',\n        content: this.confirmationTemplate,\n        complete: true,\n      },\n    ];\n    this.cdr.detectChanges(); // Trigger change detection to update the view\n  }\n\n  ngOnInit(): void {\n    if (isDefined(this.dialogConfig.data)) {\n      this.ownerId = this.dialogConfig.data.ownerId ?? null;\n\n      // Initialize roadProfile with ownerId\n      this.newRoadProfile.update((current) => ({\n        ...current,\n        ownerId: this.ownerId ?? '',\n      }));\n    }\n  }\n\n  openWizard() {\n    this.displayWizard = true;\n    this.newRoadProfile.set({} as RoadProfileCreateRequest);\n  }\n\n  // Form validity handlers\n  onDetailsFormValidityChange(isValid: boolean) {\n    this.steps[0].disableNext = !isValid;\n    this.formIsValid.set(isValid);\n  }\n\n  // Update the roadProfile state with form data\n  updateRoadProfileDetails(formData: Record<string, unknown>) {\n    this.newRoadProfile.update((current) => {\n      const updated = { ...current };\n\n      Object.keys(formData).forEach((key) => {\n        if (key !== 'ownerId') {\n          updated[key] = formData[key];\n        }\n      });\n\n      if (isNullOrUndefined(updated.ownerId)) {\n        updated.ownerId = this.ownerId ?? '';\n      }\n\n      return updated;\n    });\n  }\n\n  onWizardComplete(): void {\n    // Process the final data from all steps\n    const roadProfileData = this.newRoadProfile();\n    this.isSubmitting.set(true);\n\n    this.entitiesService\n      .createRoadProfile(roadProfileData)\n      .pipe(\n        takeUntilDestroyed(this.destroyRef),\n        finalize(() => this.isSubmitting.set(false)),\n      )\n      .subscribe({\n        next: (response: RoadProfileResponse) => {\n          this.broadcastService.broadcast('entity-updated', {\n            entityType: 'road-profile',\n            operation: 'create',\n            entityId: response.id,\n          });\n          this.dialogRef.close(response);\n        },\n        error: (error: Error) => {\n          // Handle error, could show message and keep dialog open\n          console.error('Error creating road profile:', error);\n        },\n      });\n  }\n\n  // Update cancel to close dialog with no result\n  onWizardCancel(): void {\n    this.newRoadProfile.set({} as RoadProfileCreateRequest);\n    this.dialogRef.close();\n  }\n}\n","<app-wizard\n  [contentOnly]=\"true\"\n  [steps]=\"steps\"\n  [showSteps]=\"false\"\n  [useWizardButtonsOnly]=\"true\"\n  [loading]=\"isSubmitting()\"\n  (complete)=\"onWizardComplete()\"\n  (onCancel)=\"onWizardCancel()\"\n>\n</app-wizard>\n\n<!-- Step 1: RoadProfile Details -->\n<ng-template #roadProfileDetailsStep let-step>\n  <div class=\"p-fluid\">\n    <app-road-profile-details-section\n      #roadProfileDetailsForm\n      [createMode]=\"true\"\n      [entity]=\"newRoadProfile()\"\n      [ownerId]=\"ownerId\"\n      (formValidityChange)=\"onDetailsFormValidityChange($event)\"\n      (formValueChange)=\"updateRoadProfileDetails($event)\"\n    ></app-road-profile-details-section>\n  </div>\n</ng-template>\n\n<ng-template #confirmationTemplate let-step>\n  <div class=\"flex gap-6\">\n    <span class=\"pi pi-check !text-5xl\"></span>\n\n    <div class=\"flex-1\">\n      <div class=\"grid\">\n        <!-- RoadProfile Details Section -->\n        <div class=\"col-12 md:col-6\">\n          <p class=\"mb-4\">\n            You've completed all of the information required and we're ready to\n            create your Road Profile.\n          </p>\n\n          <div class=\"space-y-2\">\n            <!-- Each field in a side-by-side layout -->\n            <div class=\"flex\">\n              <div class=\"w-1/3 font-medium\">Name:</div>\n              <div class=\"w-2/3\">\n                {{ newRoadProfile().name || 'Not provided' }}\n              </div>\n            </div>\n          </div>\n        </div>\n      </div>\n\n      <div\n        class=\"mt-4 pt-4 border-top-1 border-surface-200 dark:border-surface-700\"\n      >\n        <p class=\"mb-0\">Click finish to create this Road Profile.</p>\n      </div>\n    </div>\n  </div>\n</ng-template>\n","import { Injectable, computed, inject, signal } from '@angular/core';\n\nimport { TableLazyLoadEvent } from 'primeng/table';\n\nimport {\n  GridConfiguration,\n  GridDataService,\n  DataGridParams,\n  GridColumn,\n  FilterCriteria,\n  FilterValue,\n  DATE_FORMATS,\n} from '../../../shared/models';\nimport { UtilityService } from '../../../core/services/utility.service';\nimport { GridBaseService } from '../../../shared/services/grid-base.service';\nimport { isDefined } from '../../../shared/utils';\nimport { RoadProfilesDataAdapter } from '../services/adapters';\nimport { RoadProfileListItem } from '../../../api';\nimport { DEFAULT_PAGE_SIZE } from '../../../core/models';\nimport { MeasurementDateTimeService } from '../../../shared/services/measurement-units/measurement-date-time.service';\nimport { DynamicDialogRef, DialogService } from 'primeng/dynamicdialog';\nimport { RoadProfileCreateWizardComponent } from '../components/road-profiles/road-profile-create-wizard/road-profile-create-wizard.component';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class RoadProfilesGridConfig\n  implements GridConfiguration<RoadProfileListItem>\n{\n  private readonly roadProfilesService = inject(RoadProfilesDataAdapter);\n  private readonly utilityService = inject(UtilityService);\n  private readonly gridBaseService = inject(GridBaseService);\n  private readonly measurementDateTimeService = inject(\n    MeasurementDateTimeService,\n  );\n  private dialogRef: DynamicDialogRef | null = null;\n  private readonly dialogService = inject(DialogService);\n\n  private readonly defaultStateValues = [RoadProfileListItem.StateEnum.Active];\n  private readonly filterState = signal<Record<string, FilterCriteria>>({\n    state: {\n      value: this.defaultStateValues,\n      operator: 'in',\n    },\n  });\n  private params: Record<string, string> = { ownerId: '' };\n\n  private readonly rqlFilter = computed(() =>\n    this.utilityService.constructRqlFilter(this.filterState()),\n  );\n\n  private readonly stateLabels: Record<RoadProfileListItem.StateEnum, string> =\n    {\n      active: 'Active',\n      deleted: 'Deleted',\n    };\n\n  entityType = 'road-profiles';\n  columns: GridColumn<RoadProfileListItem>[] = [\n    {\n      field: 'name',\n      header: 'Name',\n      filter: true,\n      filterType: 'text',\n      filterMatchMode: 'contains',\n    },\n    {\n      field: 'state',\n      header: 'State',\n      valueGetter: (rowData: RoadProfileListItem) =>\n        isDefined(rowData.state) ? this.stateLabels[rowData.state] : '',\n      filter: true,\n      filterType: 'multiselect',\n      filterMatchMode: 'in',\n      filterConfig: {\n        type: 'multiselect',\n        options: [\n          {\n            label: 'Active',\n            value: RoadProfileListItem.StateEnum.Active,\n          },\n          {\n            label: 'Deleted',\n            value: RoadProfileListItem.StateEnum.Deleted,\n          },\n        ],\n        defaultSelected: this.defaultStateValues,\n      },\n    },\n    {\n      field: 'modifiedDate',\n      header: 'Modified',\n      filter: false,\n      valueGetter: (rowData: RoadProfileListItem) =>\n        isDefined(rowData.modifiedDate)\n          ? this.measurementDateTimeService.formatDateTime(\n              this.measurementDateTimeService.createDateAssumingUtc(\n                rowData.modifiedDate,\n              ),\n              DATE_FORMATS.DATE_TIME_SECONDS,\n            )\n          : '',\n    },\n  ];\n\n  dataService: GridDataService<RoadProfileListItem> = this.roadProfilesService;\n  ownerId = '';\n\n  getFilters(): Record<string, FilterCriteria> {\n    return this.filterState();\n  }\n\n  clearFilters(): void {\n    this.filterState.set({\n      state: {\n        value: this.defaultStateValues,\n        operator: 'in',\n      },\n    });\n  }\n\n  initialize(params: Record<string, string>) {\n    this.params = params;\n    if (isDefined(this.params['clientId'])) {\n      this.ownerId = String(this.params['clientId']);\n    } else if (isDefined(this.params['vendorId'])) {\n      this.ownerId = String(this.params['vendorId']);\n    } else if (isDefined(this.params['distributorId'])) {\n      this.ownerId = String(this.params['distributorId']);\n    }\n  }\n\n  getTitle(): string {\n    return 'Road Profiles';\n  }\n\n  getRequestParams(event?: TableLazyLoadEvent): DataGridParams {\n    let sortField = 'name:asc'; // Default\n\n    if (isDefined(event?.sortField)) {\n      const sortOrder = event.sortOrder === 1 ? 'asc' : 'desc';\n      sortField = `${event.sortField}:${sortOrder}`;\n    }\n\n    return {\n      owner: this.ownerId,\n      offset: isDefined(event?.first) ? event.first : 0,\n      recurse: false,\n      limit: isDefined(event?.rows) ? event.rows : DEFAULT_PAGE_SIZE,\n      sortField: sortField,\n      filters: this.rqlFilter(),\n    };\n  }\n\n  onFilterChange(field: string, value: FilterValue): void {\n    const column = this.columns.find((col) => col.field === field);\n\n    if (Array.isArray(value)) {\n      const newFilters = this.gridBaseService.handleFilters(\n        this.filterState(),\n        field,\n        value,\n        undefined,\n        column?.filterMatchMode,\n      );\n\n      this.filterState.set(newFilters);\n      return;\n    }\n\n    // For non-array values, use the grid base service\n    const newFilters = this.gridBaseService.handleFilters(\n      this.filterState(),\n      field,\n      value,\n      undefined,\n      column?.filterMatchMode,\n    );\n\n    this.filterState.set(newFilters);\n  }\n\n  onAdd(): void {\n    this.openRoadProfileCreationDialog(this.ownerId).subscribe();\n  }\n\n  openRoadProfileCreationDialog(ownerId: string) {\n    this.dialogRef = this.dialogService.open(RoadProfileCreateWizardComponent, {\n      header: 'Road Profile Wizard',\n      contentStyle: { overflow: 'auto' },\n      baseZIndex: 10000,\n      data: { ownerId: ownerId },\n      position: 'top',\n      modal: true,\n    });\n\n    return this.dialogRef.onClose;\n  }\n}\n","import {\n  AfterViewInit,\n  Component,\n  DestroyRef,\n  inject,\n  OnInit,\n  signal,\n  TemplateRef,\n  ViewChild,\n} from '@angular/core';\nimport { takeUntilDestroyed } from '@angular/core/rxjs-interop';\nimport { CommonModule } from '@angular/common';\nimport { ReactiveFormsModule } from '@angular/forms';\n\nimport { ButtonModule } from 'primeng/button';\nimport { DynamicDialogRef, DynamicDialogConfig } from 'primeng/dynamicdialog';\n\nimport {\n  EntitiesService,\n  SmsGatewayProviderCreateRequest,\n  SmsGatewayProviderResponse,\n  SmsGatewayProviderTypeResponse,\n} from '../../../../../api';\nimport { isDefined, isNullOrUndefined } from '../../../../../shared/utils';\nimport { BroadcastEventMessageService } from '../../../services/broadcast-event-messages.service';\nimport { SmsGatewayProviderDetailsSectionComponent } from '../sms-gateway-provider-details-section/sms-gateway-provider-details-section.component';\nimport { Step } from '../../../../../shared/models';\nimport { WizardComponent } from '../../../../../shared/components/wizard/wizard.component';\nimport { SmsGatewayProviderParametersSectionComponent } from '../sms-gateway-provider-parameters-section/sms-gateway-provider-parameters-section.component';\nimport { RequestCacheService } from '../../../../../shared/services/request-cache.service';\nimport { finalize, firstValueFrom } from 'rxjs';\nimport { FormBuilderField } from '../../device/device-accessory-section/device-accessory-section.component';\nimport { ApiSchemaService } from '../../../../../core/services/api-schema.service';\n\n@Component({\n  selector: 'app-sms-gateway-provider-create-wizard',\n  imports: [\n    CommonModule,\n    ReactiveFormsModule,\n    WizardComponent,\n    ButtonModule,\n    SmsGatewayProviderDetailsSectionComponent,\n    SmsGatewayProviderParametersSectionComponent,\n  ],\n  templateUrl: './sms-gateway-provider-create-wizard.component.html',\n  styleUrl: './sms-gateway-provider-create-wizard.component.scss',\n})\nexport class SmsGatewayProviderCreateWizardComponent\n  implements AfterViewInit, OnInit\n{\n  @ViewChild('smsGatewayProviderDetailsStep')\n  smsGatewayProviderDetailsStep!: TemplateRef<{\n    $implicit: Step;\n  }> | null;\n  @ViewChild('smsGatewayProviderParametersStep')\n  smsGatewayProviderParametersStep!: TemplateRef<{\n    $implicit: Step;\n  }>;\n  @ViewChild('confirmationTemplate', { static: true })\n  confirmationTemplate!: TemplateRef<{ $implicit: Step }> | null;\n\n  // References to form components\n  @ViewChild('smsGatewayProviderDetailsForm')\n  smsGatewayProviderDetailsForm!: SmsGatewayProviderDetailsSectionComponent;\n  @ViewChild('smsGatewayProviderParametersForm')\n  smsGatewayProviderParametersForm!: SmsGatewayProviderParametersSectionComponent;\n  private readonly entitiesService = inject(EntitiesService);\n  private readonly broadcastService = inject(BroadcastEventMessageService);\n  private readonly cacheService = inject(RequestCacheService);\n  protected readonly destroyRef = inject(DestroyRef);\n  private readonly dialogRef = inject(DynamicDialogRef);\n  private readonly dialogConfig = inject(DynamicDialogConfig);\n  private readonly apiSchemaService = inject(ApiSchemaService);\n\n  typePropertyKey =\n    this.apiSchemaService.getTypePropertyKey('smsgatewayprovider');\n\n  // SmsGatewayProvider model to collect data across steps\n  newSmsGatewayProvider = signal<SmsGatewayProviderCreateRequest>(\n    {} as SmsGatewayProviderCreateRequest,\n  );\n  readonly smsGatewayProviderParametersFields = signal<\n    { key: string; title: string }[] | null\n  >(null);\n  smsGatewayProviderType = signal<SmsGatewayProviderTypeResponse | null>(null);\n  // Form validity state\n  formIsValid = signal<boolean>(false);\n\n  steps: Step[] = [];\n  previousStepIndex = 0;\n  currentStepIndex = 0;\n  ownerId: string | null = null;\n  isSubmitting = signal<boolean>(false);\n\n  ngAfterViewInit() {\n    setTimeout(() => {\n      // Only update the view-dependent properties\n      this.steps[0].content = this.smsGatewayProviderDetailsStep;\n      this.steps[0].validate = () =>\n        this.smsGatewayProviderDetailsForm.validate();\n\n      this.steps[1].content = this.smsGatewayProviderParametersStep;\n      this.steps[1].validate = () =>\n        this.smsGatewayProviderParametersForm.validate();\n\n      this.steps[2].content = this.confirmationTemplate;\n      this.steps[2].validate = () => true;\n    });\n  }\n\n  ngOnInit(): void {\n    if (isDefined(this.dialogConfig.data)) {\n      this.ownerId = this.dialogConfig.data.ownerId ?? null;\n\n      // Initialize smsGatewayProvider with ownerId\n      this.newSmsGatewayProvider.update((current) => ({\n        ...current,\n        ownerId: this.ownerId ?? '',\n      }));\n    }\n\n    this.steps = [\n      {\n        value: 1,\n        header: 'SMS Gateway Provider Details',\n        complete: false,\n        content: null,\n      },\n      {\n        value: 2,\n        header: 'SMS Gateway Provider Parameters',\n        content: null,\n        complete: false,\n      },\n      {\n        value: 3,\n        header: 'Confirmation',\n        complete: true,\n        content: null,\n      },\n    ];\n  }\n\n  // Form validity handlers\n  onDetailsFormValidityChange(isValid: boolean) {\n    this.steps[0].disableNext = !isValid;\n    this.formIsValid.set(isValid);\n  }\n\n  onParametersFormValidityChange(isValid: boolean) {\n    this.steps[1].disableNext = !isValid;\n    this.formIsValid.set(isValid);\n  }\n\n  updateSmsGatewayProviderDetails(formData: Record<string, unknown>) {\n    this.newSmsGatewayProvider.update((current) => {\n      const { ownerId: _ownerId, ...rest } = formData;\n      const updated = { ...current, ...rest };\n\n      if (isNullOrUndefined(updated.ownerId)) {\n        updated.ownerId = this.ownerId ?? '';\n      }\n\n      return updated;\n    });\n    // Load the SMS Gateway Provider Type based on the selected type\n    this.loadSmsGatewayProviderType(\n      this.newSmsGatewayProvider()[this.typePropertyKey]?.id,\n    ).catch(() => {});\n  }\n\n  updateSmsGatewayProviderParameters(formData: Record<string, unknown>) {\n    this.newSmsGatewayProvider.update((current) => {\n      const updated = {\n        ...current,\n        ...{ parameters: formData as Record<string, Record<string, unknown>> },\n      };\n      return updated;\n    });\n  }\n\n  onWizardComplete(): void {\n    const smsGatewayProviderData = this.newSmsGatewayProvider();\n\n    if (\n      isNullOrUndefined(smsGatewayProviderData) ||\n      Object.keys(smsGatewayProviderData).length === 0\n    ) {\n      return;\n    }\n\n    this.isSubmitting.set(true);\n    this.entitiesService\n      .createSmsGatewayProvider(smsGatewayProviderData)\n      .pipe(\n        takeUntilDestroyed(this.destroyRef),\n        finalize(() => this.isSubmitting.set(false)),\n      )\n      .subscribe({\n        next: (response: SmsGatewayProviderResponse) => {\n          this.broadcastService.broadcast('entity-updated', {\n            entityType: 'sms-gateway-provider',\n            operation: 'create',\n            entityId: response.id,\n          });\n          this.dialogRef.close(response);\n        },\n      });\n  }\n\n  // Update cancel to close dialog with no result\n  onWizardCancel(): void {\n    this.newSmsGatewayProvider.set({} as SmsGatewayProviderCreateRequest);\n    this.dialogRef.close();\n  }\n\n  async loadSmsGatewayProviderType(\n    smsGatewayProviderTypeId: string | undefined,\n  ): Promise<void> {\n    if (isNullOrUndefined(smsGatewayProviderTypeId)) return;\n\n    const response = await this.cacheService.getOrFetchAsync(\n      `smsGatewayProviderType-${smsGatewayProviderTypeId}`,\n      () =>\n        firstValueFrom(\n          this.entitiesService.getSmsGatewayProviderType(\n            smsGatewayProviderTypeId,\n          ),\n        ),\n      300000,\n    );\n\n    this.smsGatewayProviderType.set(response);\n    const params: { groups: { fields: FormBuilderField[] }[] } = JSON.parse(\n      response.parameterDefinition ?? '{\"groups\":[]}',\n    );\n\n    const values = this.extractParameterFields(params);\n    this.smsGatewayProviderParametersFields.set(values);\n  }\n\n  private extractParameterFields(params: {\n    groups: { fields: FormBuilderField[] }[];\n  }): { key: string; title: string }[] {\n    const values: { key: string; title: string }[] = [];\n\n    for (const group of params.groups) {\n      for (const field of group.fields) {\n        // Add the main field\n        values.push({\n          key: field.id,\n          title: field.title,\n        });\n\n        // Process combo field values if they exist\n        if (field.type === 'combo' && field.values) {\n          this.processComboFieldValues(field.values, values);\n        }\n      }\n    }\n\n    return values;\n  }\n\n  private processComboFieldValues(\n    options: {\n      key: string;\n      value: string;\n      fields?: FormBuilderField[];\n    }[],\n    values: { key: string; title: string }[],\n  ): void {\n    for (const option of options) {\n      if (isDefined(option.fields)) {\n        this.processOptionFields(option.fields, values);\n      }\n    }\n  }\n\n  private processOptionFields(\n    fields: FormBuilderField[],\n    values: { key: string; title: string }[],\n  ): void {\n    for (const subField of fields) {\n      values.push({\n        key: subField.id,\n        title: subField.title,\n      });\n    }\n  }\n\n  getParametersTitle(key: string): string {\n    return (\n      this.smsGatewayProviderParametersFields()?.find(\n        (field) => field.key === key,\n      )?.title ?? ''\n    );\n  }\n}\n","<app-wizard\n  [contentOnly]=\"true\"\n  [steps]=\"steps\"\n  [showSteps]=\"false\"\n  [loading]=\"isSubmitting()\"\n  [useWizardButtonsOnly]=\"true\"\n  (complete)=\"onWizardComplete()\"\n  (onCancel)=\"onWizardCancel()\"\n>\n</app-wizard>\n\n<!-- Step 1: Sms Gateway Provider Details -->\n<ng-template #smsGatewayProviderDetailsStep let-step>\n  <div class=\"p-fluid\">\n    <app-sms-gateway-provider-details-section\n      #smsGatewayProviderDetailsForm\n      [createMode]=\"true\"\n      [entity]=\"newSmsGatewayProvider()\"\n      [ownerId]=\"ownerId\"\n      (formValidityChange)=\"onDetailsFormValidityChange($event)\"\n      (formValueChange)=\"updateSmsGatewayProviderDetails($event)\"\n    ></app-sms-gateway-provider-details-section>\n  </div>\n</ng-template>\n\n<ng-template #smsGatewayProviderParametersStep let-step>\n  <div class=\"p-fluid\">\n    <app-sms-gateway-provider-parameters-section\n      #smsGatewayProviderParametersForm\n      [createMode]=\"true\"\n      [entity]=\"newSmsGatewayProvider()\"\n      [smsGatewayProviderType]=\"smsGatewayProviderType()\"\n      (formValidityChange)=\"onParametersFormValidityChange($event)\"\n      (formValueChange)=\"updateSmsGatewayProviderParameters($event)\"\n    ></app-sms-gateway-provider-parameters-section>\n  </div>\n</ng-template>\n\n<ng-template #confirmationTemplate let-step>\n  <div class=\"flex gap-6\">\n    <span class=\"pi pi-check !text-5xl\"></span>\n\n    <div class=\"flex-1\">\n      <div class=\"grid\">\n        <!-- Sms Gateway Provider Details Section -->\n        <div class=\"col-12 md:col-6\">\n          <p class=\"mb-4\">\n            You've completed all of the information required and we're ready to\n            create your SMS Gateway Provider.\n          </p>\n\n          <div class=\"space-y-2\">\n            <!-- Each field in a side-by-side layout -->\n            <div class=\"flex\">\n              <div class=\"w-1/3 font-medium\">Type:</div>\n              <div class=\"w-2/3\">\n                {{ newSmsGatewayProvider()[typePropertyKey]?.name }}\n              </div>\n            </div>\n\n            <div class=\"flex\">\n              <div class=\"w-1/3 font-medium\">Name:</div>\n              <div class=\"w-2/3\">\n                {{ newSmsGatewayProvider().name || 'Not provided' }}\n              </div>\n            </div>\n\n            @for (\n              item of newSmsGatewayProvider().parameters | keyvalue;\n              track $index\n            ) {\n              <div class=\"flex\">\n                <div class=\"w-1/3 font-medium\">\n                  {{ getParametersTitle(item.key) }}:\n                </div>\n                <div class=\"w-2/3\">\n                  {{ item.value }}\n                </div>\n              </div>\n            }\n          </div>\n        </div>\n      </div>\n\n      <div\n        class=\"mt-4 pt-4 border-top-1 border-surface-200 dark:border-surface-700\"\n      >\n        <p class=\"mb-0\">Click finish to create this SMS Gateway Provider.</p>\n      </div>\n    </div>\n  </div>\n</ng-template>\n","import {\n  DATE_FORMATS,\n  DataGridParams,\n  FilterCriteria,\n  FilterValue,\n  GridColumn,\n  GridConfiguration,\n  GridDataService,\n} from '../../../shared/models';\nimport {\n  DestroyRef,\n  Injectable,\n  computed,\n  inject,\n  signal,\n} from '@angular/core';\nimport { DialogService, DynamicDialogRef } from 'primeng/dynamicdialog';\nimport { EMPTY, catchError } from 'rxjs';\nimport {\n  EntitiesService,\n  IdName,\n  SmsGatewayProviderListItem,\n} from '../../../api';\n\nimport { DEFAULT_PAGE_SIZE } from '../../../core/models';\nimport { GridBaseService } from '../../../shared/services/grid-base.service';\nimport { MeasurementDateTimeService } from '../../../shared/services/measurement-units/measurement-date-time.service';\nimport { SmsGatewayProviderCreateWizardComponent } from '../components/sms-gateway-providers/sms-gateway-provider-create-wizard/sms-gateway-provider-create-wizard.component';\nimport { SmsGatewayProvidersDataAdapter } from '../services/adapters';\nimport { TableLazyLoadEvent } from 'primeng/table';\nimport { UtilityService } from '../../../core/services/utility.service';\nimport { isDefined } from '../../../shared/utils';\nimport { takeUntilDestroyed } from '@angular/core/rxjs-interop';\nimport { ApiSchemaService } from '../../../core/services/api-schema.service';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class SmsGatewayProvidersGridConfig\n  implements GridConfiguration<SmsGatewayProviderListItem>\n{\n  private readonly smsGatewayProvidersService = inject(\n    SmsGatewayProvidersDataAdapter,\n  );\n  private readonly utilityService = inject(UtilityService);\n  private readonly gridBaseService = inject(GridBaseService);\n  private readonly entitiesService = inject(EntitiesService);\n  private dialogRef: DynamicDialogRef | null = null;\n  private readonly dialogService = inject(DialogService);\n  private readonly measurementDateTimeService = inject(\n    MeasurementDateTimeService,\n  );\n  private readonly apiSchemaService = inject(ApiSchemaService);\n\n  private readonly defaultStateValues = [\n    SmsGatewayProviderListItem.StateEnum.Active,\n    SmsGatewayProviderListItem.StateEnum.Suspended,\n    SmsGatewayProviderListItem.StateEnum.Deleted,\n  ];\n  private readonly filterState = signal<Record<string, FilterCriteria>>({\n    state: {\n      value: this.defaultStateValues,\n      operator: 'in',\n    },\n  });\n  private params: Record<string, string> = { ownerId: '' };\n  private readonly destroyRef = inject(DestroyRef);\n\n  private readonly rqlFilter = computed(() =>\n    this.utilityService.constructRqlFilter(this.filterState()),\n  );\n  private readonly fieldTransformations: Record<string, string> = {\n    type: 'type.id',\n  };\n  private readonly stateLabels: Record<\n    SmsGatewayProviderListItem.StateEnum,\n    string\n  > = {\n    active: 'Active',\n    suspended: 'Suspended',\n    deleted: 'Deleted',\n  };\n\n  entityType = 'sms-gateway-providers';\n  columns: GridColumn<SmsGatewayProviderListItem>[] = [\n    {\n      field: 'name',\n      header: 'Name',\n      filter: true,\n      filterType: 'text',\n      filterMatchMode: 'contains',\n    },\n    {\n      field: 'type',\n      header: 'Type',\n      sortable: true,\n      filterType: 'multiselect',\n      filter: true,\n      filterMatchMode: 'in',\n      valueGetter: (rowData: SmsGatewayProviderListItem) => {\n        const typeValue = this.apiSchemaService.getEntityType<\n          Record<string, unknown>,\n          IdName\n        >(rowData as Record<string, unknown>, 'smsgatewayprovider');\n        return isDefined(typeValue?.name) ? typeValue?.name : '';\n      },\n      filterConfig: {\n        type: 'multiselect',\n        options: [],\n      },\n    },\n    {\n      field: 'state',\n      header: 'State',\n      valueGetter: (rowData: SmsGatewayProviderListItem) =>\n        isDefined(rowData.state) ? this.stateLabels[rowData.state] : '',\n      filter: true,\n      filterType: 'multiselect',\n      filterMatchMode: 'in',\n      filterConfig: {\n        type: 'multiselect',\n        options: [\n          {\n            label: 'Active',\n            value: SmsGatewayProviderListItem.StateEnum.Active,\n          },\n          {\n            label: 'Suspended',\n            value: SmsGatewayProviderListItem.StateEnum.Suspended,\n          },\n          {\n            label: 'Deleted',\n            value: SmsGatewayProviderListItem.StateEnum.Deleted,\n          },\n        ],\n        defaultSelected: this.defaultStateValues,\n      },\n    },\n    {\n      field: 'modifiedDate',\n      header: 'Modified',\n      filter: false,\n      valueGetter: (rowData: SmsGatewayProviderListItem) =>\n        isDefined(rowData.modifiedDate)\n          ? this.measurementDateTimeService.formatDateTime(\n              this.measurementDateTimeService.createDateAssumingUtc(\n                rowData.modifiedDate,\n              ),\n              DATE_FORMATS.DATE_TIME_SECONDS,\n            )\n          : '',\n    },\n  ];\n\n  ownerId = '';\n\n  dataService: GridDataService<SmsGatewayProviderListItem> =\n    this.smsGatewayProvidersService;\n\n  getFilters(): Record<string, FilterCriteria> {\n    return this.filterState();\n  }\n\n  clearFilters(): void {\n    this.filterState.set({\n      state: {\n        value: this.defaultStateValues,\n        operator: 'in',\n      },\n    });\n  }\n\n  initialize(params: Record<string, string>): void {\n    this.params = params;\n    if (isDefined(this.params['clientId'])) {\n      this.ownerId = String(this.params['clientId']);\n    } else if (isDefined(this.params['vendorId'])) {\n      this.ownerId = String(this.params['vendorId']);\n    } else if (isDefined(this.params['distributorId'])) {\n      this.ownerId = String(this.params['distributorId']);\n    }\n\n    this.loadFilterOptions();\n  }\n\n  getTitle(): string {\n    return 'SMS Gateway';\n  }\n\n  getRequestParams(event?: TableLazyLoadEvent): DataGridParams {\n    let sortField = 'name:asc'; // Default\n\n    if (isDefined(event?.sortField)) {\n      const sortOrder = event.sortOrder === 1 ? 'asc' : 'desc';\n      sortField = `${event.sortField}:${sortOrder}`;\n    }\n\n    return {\n      owner: this.ownerId,\n      offset: isDefined(event?.first) ? event.first : 0,\n      recurse: false,\n      limit: isDefined(event?.rows) ? event.rows : DEFAULT_PAGE_SIZE,\n      sortField: sortField,\n      filters: this.rqlFilter(),\n    };\n  }\n\n  onFilterChange(field: string, value: FilterValue): void {\n    const actualField = this.fieldTransformations[field] || field;\n    const column = this.columns.find((col) => col.field === field);\n\n    if (Array.isArray(value)) {\n      const newFilters = this.gridBaseService.handleFilters(\n        this.filterState(),\n        actualField,\n        value,\n        undefined,\n        column?.filterMatchMode,\n      );\n\n      this.filterState.set(newFilters);\n      return;\n    }\n\n    // For non-array values, use the grid base service\n    const newFilters = this.gridBaseService.handleFilters(\n      this.filterState(),\n      actualField,\n      value,\n      undefined,\n      column?.filterMatchMode,\n    );\n\n    this.filterState.set(newFilters);\n  }\n\n  private loadFilterOptions(): void {\n    this.entitiesService\n      .listSmsGatewayProviderTypes(this.ownerId)\n      .pipe(\n        takeUntilDestroyed(this.destroyRef),\n        catchError(() => {\n          return EMPTY;\n        }),\n      )\n      .subscribe((smsGatewayProviderTypes) => {\n        const typeColumn = this.columns.find((col) => col.field === 'type');\n        if (typeColumn?.filterConfig) {\n          typeColumn.filterConfig.options = smsGatewayProviderTypes.items\n            .map((type) => ({\n              label: type.name ?? '',\n              value: type.id,\n            }))\n            .sort((a, b) => a.label.localeCompare(b.label));\n        }\n      });\n  }\n\n  onAdd(): void {\n    this.openSmsGatewayProviderCreationDialog(this.ownerId)\n      .pipe(takeUntilDestroyed(this.destroyRef))\n      .subscribe();\n  }\n\n  openSmsGatewayProviderCreationDialog(ownerId: string) {\n    this.dialogRef = this.dialogService.open(\n      SmsGatewayProviderCreateWizardComponent,\n      {\n        header: 'SMS Gateway Config Profile Wizard',\n        contentStyle: { overflow: 'auto' },\n        baseZIndex: 10000,\n        data: { ownerId: ownerId },\n        position: 'top',\n        modal: true,\n      },\n    );\n\n    return this.dialogRef.onClose;\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport {\n  AfterViewInit,\n  ChangeDetectorRef,\n  Component,\n  DestroyRef,\n  inject,\n  OnInit,\n  signal,\n  TemplateRef,\n  ViewChild,\n} from '@angular/core';\nimport { takeUntilDestroyed } from '@angular/core/rxjs-interop';\nimport { ReactiveFormsModule } from '@angular/forms';\n\nimport { ButtonModule } from 'primeng/button';\nimport { DynamicDialogRef, DynamicDialogConfig } from 'primeng/dynamicdialog';\n\nimport {\n  EntitiesService,\n  ThemeCreateRequest,\n  ThemeResponse,\n} from '../../../../../api';\nimport { WizardComponent } from '../../../../../shared/components/wizard/wizard.component';\nimport { isDefined, isNullOrUndefined } from '../../../../../shared/utils';\nimport { BroadcastEventMessageService } from '../../../services/broadcast-event-messages.service';\nimport { ThemeDetailsSectionComponent } from '../theme-details-section/theme-details-section.component';\nimport { Step } from '../../../../../shared/models';\nimport { finalize } from 'rxjs';\n\n@Component({\n  selector: 'app-theme-create-wizard',\n  imports: [\n    CommonModule,\n    ReactiveFormsModule,\n    WizardComponent,\n    ButtonModule,\n    ThemeDetailsSectionComponent,\n  ],\n  templateUrl: './theme-create-wizard.component.html',\n  styleUrl: './theme-create-wizard.component.scss',\n})\nexport class ThemeCreateWizardComponent implements AfterViewInit, OnInit {\n  @ViewChild('themeDetailsStep') themeDetailsStep!: TemplateRef<{\n    $implicit: Step;\n  }> | null;\n  @ViewChild('confirmationTemplate', { static: true })\n  confirmationTemplate!: TemplateRef<{ $implicit: Step }> | null;\n\n  // References to form components\n  @ViewChild('themeDetailsForm')\n  themeDetailsForm!: ThemeDetailsSectionComponent;\n\n  private readonly entitiesService = inject(EntitiesService);\n  private readonly broadcastService = inject(BroadcastEventMessageService);\n  protected readonly destroyRef = inject(DestroyRef);\n  private readonly dialogRef = inject(DynamicDialogRef);\n  private readonly dialogConfig = inject(DynamicDialogConfig);\n  private readonly cdr = inject(ChangeDetectorRef);\n\n  // Theme model to collect data across steps\n  newTheme = signal<ThemeCreateRequest>({} as ThemeCreateRequest);\n\n  // Form validity state\n  formIsValid = signal<boolean>(false);\n\n  steps: Step[] = [];\n  ownerId: string | null = null;\n  isSubmitting = signal<boolean>(false);\n\n  ngAfterViewInit() {\n    this.steps = [\n      {\n        value: 1,\n        header: 'Theme Details',\n        content: this.themeDetailsStep,\n        complete: false,\n        validate: () => this.themeDetailsForm.validate(),\n      },\n      {\n        value: 2,\n        header: 'Confirmation',\n        content: this.confirmationTemplate,\n        complete: true,\n      },\n    ];\n    this.cdr.detectChanges();\n  }\n\n  ngOnInit(): void {\n    if (isDefined(this.dialogConfig.data)) {\n      this.ownerId = this.dialogConfig.data.ownerId ?? null;\n\n      // Initialize theme with ownerId\n      this.newTheme.update((current) => ({\n        ...current,\n        ownerId: this.ownerId ?? '',\n      }));\n    }\n  }\n\n  openWizard() {\n    this.newTheme.set({} as ThemeCreateRequest);\n  }\n\n  // Form validity handlers\n  onDetailsFormValidityChange(isValid: boolean) {\n    this.steps[0].disableNext = !isValid;\n    this.formIsValid.set(isValid);\n  }\n\n  // Update the theme state with form data\n  updateThemeDetails(formData: Record<string, unknown>) {\n    this.newTheme.update((current) => {\n      const updated = { ...current };\n\n      Object.keys(formData).forEach((key) => {\n        if (key !== 'ownerId') {\n          updated[key] = formData[key];\n        }\n      });\n\n      if (isNullOrUndefined(updated.ownerId)) {\n        updated.ownerId = this.ownerId ?? '';\n      }\n\n      return updated;\n    });\n  }\n\n  onWizardComplete(): void {\n    // Process the final data from all steps\n    const themeData = this.newTheme();\n\n    this.isSubmitting.set(true);\n\n    this.entitiesService\n      .createTheme({ ...themeData, theme: 'default' })\n      .pipe(\n        takeUntilDestroyed(this.destroyRef),\n        finalize(() => this.isSubmitting.set(false)),\n      )\n      .subscribe({\n        next: (response: ThemeResponse) => {\n          this.broadcastService.broadcast('entity-updated', {\n            entityType: 'theme',\n            operation: 'create',\n            entityId: response.id,\n          });\n          this.dialogRef.close(response);\n        },\n        error: (error: Error) => {\n          // Handle error, could show message and keep dialog open\n          console.error('Error creating theme:', error);\n        },\n      });\n  }\n\n  // Update cancel to close dialog with no result\n  onWizardCancel(): void {\n    this.newTheme.set({} as ThemeCreateRequest);\n    this.dialogRef.close();\n  }\n}\n","<app-wizard\n  [contentOnly]=\"true\"\n  [steps]=\"steps\"\n  [showSteps]=\"false\"\n  [useWizardButtonsOnly]=\"true\"\n  [loading]=\"isSubmitting()\"\n  (complete)=\"onWizardComplete()\"\n  (onCancel)=\"onWizardCancel()\"\n>\n</app-wizard>\n\n<!-- Step 1: Theme Details -->\n<ng-template #themeDetailsStep let-step>\n  <div class=\"p-fluid\">\n    <app-theme-details-section\n      #themeDetailsForm\n      [createMode]=\"true\"\n      [entity]=\"newTheme()\"\n      [ownerId]=\"ownerId\"\n      (formValidityChange)=\"onDetailsFormValidityChange($event)\"\n      (formValueChange)=\"updateThemeDetails($event)\"\n    ></app-theme-details-section>\n  </div>\n</ng-template>\n\n<ng-template #confirmationTemplate let-step>\n  <div class=\"flex gap-6\">\n    <span class=\"pi pi-check !text-5xl\"></span>\n\n    <div class=\"flex-1\">\n      <div class=\"grid\">\n        <!-- Theme Details Section -->\n        <div class=\"col-12 md:col-6\">\n          <p class=\"mb-4\">\n            You've completed all of the information required and we're ready to\n            create your Theme.\n          </p>\n\n          <div class=\"space-y-2\">\n            <!-- Each field in a side-by-side layout -->\n            <div class=\"flex\">\n              <div class=\"w-1/3 font-medium\">Name:</div>\n              <div class=\"w-2/3\">{{ newTheme().name || 'Not provided' }}</div>\n            </div>\n\n            <div class=\"flex\">\n              <div class=\"w-1/3 font-medium\">Description:</div>\n              <div class=\"w-2/3\">\n                {{ newTheme().description || 'Not provided' }}\n              </div>\n            </div>\n\n            <div class=\"flex\">\n              <div class=\"w-1/3 font-medium\">Custom CSS Link:</div>\n              <div class=\"w-2/3\">\n                {{ newTheme().settings?.['cssSrc'] || 'Not provided' }}\n              </div>\n            </div>\n          </div>\n        </div>\n      </div>\n\n      <div\n        class=\"mt-4 pt-4 border-top-1 border-surface-200 dark:border-surface-700\"\n      >\n        <p class=\"mb-0\">Click finish to create this Theme.</p>\n      </div>\n    </div>\n  </div>\n</ng-template>\n","import { Injectable, computed, inject, signal } from '@angular/core';\n\nimport { TableLazyLoadEvent } from 'primeng/table';\n\nimport {\n  GridConfiguration,\n  GridDataService,\n  DataGridParams,\n  GridColumn,\n  FilterCriteria,\n  FilterValue,\n  DATE_FORMATS,\n} from '../../../shared/models';\nimport { UtilityService } from '../../../core/services/utility.service';\nimport { GridBaseService } from '../../../shared/services/grid-base.service';\nimport { isDefined } from '../../../shared/utils';\nimport { ThemesDataAdapter } from '../services/adapters';\nimport { ThemeListItem, ThemeResponse } from '../../../api';\nimport { DEFAULT_PAGE_SIZE } from '../../../core/models';\nimport { MeasurementDateTimeService } from '../../../shared/services/measurement-units/measurement-date-time.service';\nimport { getThemeDictionary } from '../../../shared/models/theme-dictionary';\nimport { DynamicDialogRef, DialogService } from 'primeng/dynamicdialog';\nimport { ThemeCreateWizardComponent } from '../components/themes/theme-create-wizard/theme-create-wizard.component';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class ThemesGridConfig implements GridConfiguration<ThemeListItem> {\n  private readonly themesService = inject(ThemesDataAdapter);\n  private readonly utilityService = inject(UtilityService);\n  private readonly gridBaseService = inject(GridBaseService);\n  private readonly measurementDateTimeService = inject(\n    MeasurementDateTimeService,\n  );\n  private dialogRef: DynamicDialogRef | null = null;\n  private readonly dialogService = inject(DialogService);\n\n  private readonly defaultStateValues = [ThemeResponse.StateEnum.Active];\n  private readonly filterState = signal<Record<string, FilterCriteria>>({\n    state: {\n      value: this.defaultStateValues,\n      operator: 'in',\n    },\n  });\n  private params: Record<string, string> = { clientId: '' };\n\n  private readonly rqlFilter = computed(() =>\n    this.utilityService.constructRqlFilter(this.filterState()),\n  );\n  private readonly fieldTransformations: Record<string, string> = {};\n  private readonly stateLabels: Record<ThemeResponse.StateEnum, string> = {\n    active: 'Active',\n    deleted: 'Deleted',\n  };\n  baseThemes: { value: string; label: string }[] = Object.entries(\n    getThemeDictionary(),\n  ).map((key) => ({\n    value: key[0],\n    label: key[1].name ?? '',\n  }));\n\n  entityType = 'themes';\n  columns: GridColumn<ThemeListItem>[] = [\n    {\n      field: 'name',\n      header: 'Name',\n      filter: true,\n      filterType: 'text',\n      filterMatchMode: 'contains',\n    },\n    {\n      field: 'description',\n      header: 'Description',\n      filter: true,\n      filterType: 'text',\n      filterMatchMode: 'contains',\n    },\n    {\n      field: 'theme',\n      header: 'Base Theme',\n      filter: true,\n      filterType: 'multiselect',\n      filterMatchMode: 'in',\n      filterConfig: {\n        type: 'multiselect',\n        options: this.baseThemes,\n      },\n      valueGetter: (rowData: ThemeListItem) =>\n        isDefined(rowData['theme'])\n          ? (this.baseThemes.find((theme) => theme.value === rowData['theme'])\n              ?.label ?? '')\n          : '',\n    },\n    {\n      field: 'state',\n      header: 'State',\n      valueGetter: (rowData: ThemeListItem) =>\n        isDefined(rowData['state'])\n          ? this.stateLabels[rowData['state'] as ThemeResponse.StateEnum]\n          : '',\n      filter: true,\n      filterType: 'multiselect',\n      filterMatchMode: 'in',\n      filterConfig: {\n        type: 'multiselect',\n        options: [\n          { label: 'Active', value: ThemeResponse.StateEnum.Active },\n          { label: 'Deleted', value: ThemeResponse.StateEnum.Deleted },\n        ],\n        defaultSelected: this.defaultStateValues,\n      },\n      transform: 'capitalize',\n    },\n    {\n      field: 'modifiedDate',\n      header: 'Modified',\n      filter: false,\n      valueGetter: (rowData: ThemeListItem) =>\n        isDefined(rowData['modifiedDate'])\n          ? this.measurementDateTimeService.formatDateTime(\n              this.measurementDateTimeService.createDateAssumingUtc(\n                rowData['modifiedDate'],\n              ),\n              DATE_FORMATS.DATE_TIME_SECONDS,\n            )\n          : '',\n    },\n  ];\n\n  dataService: GridDataService<ThemeListItem> = this.themesService;\n  ownerId = '';\n\n  getFilters(): Record<string, FilterCriteria> {\n    return this.filterState();\n  }\n\n  clearFilters(): void {\n    this.filterState.set({\n      state: {\n        value: this.defaultStateValues,\n        operator: 'in',\n      },\n    });\n  }\n\n  initialize(params: Record<string, string>): void {\n    this.params = params;\n    if (isDefined(this.params['clientId'])) {\n      this.ownerId = String(this.params['clientId']);\n    } else if (isDefined(this.params['vendorId'])) {\n      this.ownerId = String(this.params['vendorId']);\n    } else if (isDefined(this.params['distributorId'])) {\n      this.ownerId = String(this.params['distributorId']);\n    }\n  }\n\n  getTitle(): string {\n    return 'Themes';\n  }\n\n  getRequestParams(event?: TableLazyLoadEvent): DataGridParams {\n    // Add sorting support\n    let sortField = 'name:asc'; // Default\n\n    if (isDefined(event?.sortField)) {\n      const sortOrder = event.sortOrder === 1 ? 'asc' : 'desc';\n      sortField = `${event.sortField}:${sortOrder}`;\n    }\n\n    return {\n      owner: this.ownerId,\n      offset: isDefined(event?.first) ? event.first : 0,\n      recurse: false,\n      limit: isDefined(event?.rows) ? event.rows : DEFAULT_PAGE_SIZE,\n      sortField: sortField,\n      filters: this.rqlFilter(),\n    };\n  }\n\n  onFilterChange(field: string, value: FilterValue): void {\n    const actualField = this.fieldTransformations[field] || field;\n    const column = this.columns.find((col) => col.field === field);\n\n    if (Array.isArray(value)) {\n      const newFilters = this.gridBaseService.handleFilters(\n        this.filterState(),\n        actualField,\n        value,\n        undefined,\n        column?.filterMatchMode,\n      );\n\n      this.filterState.set(newFilters);\n      return;\n    }\n\n    // For non-array values, use the grid base service\n    const newFilters = this.gridBaseService.handleFilters(\n      this.filterState(),\n      actualField,\n      value,\n      undefined,\n      column?.filterMatchMode,\n    );\n\n    this.filterState.set(newFilters);\n  }\n\n  onAdd(): void {\n    const clientId = this.ownerId;\n\n    this.openThemeCreationDialog(clientId).subscribe();\n  }\n\n  openThemeCreationDialog(ownerId: string) {\n    this.dialogRef = this.dialogService.open(ThemeCreateWizardComponent, {\n      header: 'Theme Wizard',\n      contentStyle: { overflow: 'auto' },\n      baseZIndex: 10000,\n      data: { ownerId: ownerId },\n      position: 'top',\n      modal: true,\n    });\n\n    return this.dialogRef.onClose;\n  }\n}\n","import {\n  AfterViewInit,\n  Component,\n  DestroyRef,\n  inject,\n  OnInit,\n  signal,\n  TemplateRef,\n  ViewChild,\n} from '@angular/core';\nimport { takeUntilDestroyed } from '@angular/core/rxjs-interop';\nimport { CommonModule } from '@angular/common';\nimport { ReactiveFormsModule } from '@angular/forms';\n\nimport { ButtonModule } from 'primeng/button';\nimport { DynamicDialogRef, DynamicDialogConfig } from 'primeng/dynamicdialog';\n\nimport {\n  EntitiesService,\n  DeviceConfigProfileCreateRequest,\n  DeviceConfigProfileResponse,\n} from '../../../../../api';\nimport { isDefined, isNullOrUndefined } from '../../../../../shared/utils';\nimport { BroadcastEventMessageService } from '../../../services/broadcast-event-messages.service';\nimport { DeviceConfigProfileDetailsSectionComponent } from '../device-config-profile-details-section/device-config-profile-details-section.component';\nimport { Step } from '../../../../../shared/models';\nimport { WizardComponent } from '../../../../../shared/components/wizard/wizard.component';\nimport { finalize } from 'rxjs';\n\n@Component({\n  selector: 'app-device-config-profile-create-wizard',\n  imports: [\n    CommonModule,\n    ReactiveFormsModule,\n    WizardComponent,\n    ButtonModule,\n    DeviceConfigProfileDetailsSectionComponent,\n  ],\n  templateUrl: './device-config-profile-create-wizard.component.html',\n  styleUrl: './device-config-profile-create-wizard.component.scss',\n})\nexport class DeviceConfigProfileCreateWizardComponent\n  implements AfterViewInit, OnInit\n{\n  @ViewChild('deviceConfigProfileDetailsStep')\n  deviceConfigProfileDetailsStep!: TemplateRef<{\n    $implicit: Step;\n  }> | null;\n  @ViewChild('confirmationTemplate', { static: true })\n  confirmationTemplate!: TemplateRef<{ $implicit: Step }> | null;\n\n  // References to form components\n  @ViewChild('deviceConfigProfileDetailsForm')\n  deviceConfigProfileDetailsForm!: DeviceConfigProfileDetailsSectionComponent;\n\n  private readonly entitiesService = inject(EntitiesService);\n  private readonly broadcastService = inject(BroadcastEventMessageService);\n  protected readonly destroyRef = inject(DestroyRef);\n  private readonly dialogRef = inject(DynamicDialogRef);\n  private readonly dialogConfig = inject(DynamicDialogConfig);\n\n  // DeviceConfigProfile model to collect data across steps\n  newDeviceConfigProfile = signal<DeviceConfigProfileCreateRequest>(\n    {} as DeviceConfigProfileCreateRequest,\n  );\n\n  // Form validity state\n  formIsValid = signal<boolean>(false);\n\n  displayWizard = false;\n  steps: Step[] = [];\n  previousStepIndex = 0;\n  currentStepIndex = 0;\n  ownerId: string | null = null;\n  isSubmitting = signal<boolean>(false);\n\n  ngAfterViewInit() {\n    setTimeout(() => {\n      this.steps = [\n        {\n          value: 1,\n          header: 'Device Config Profile Details',\n          content: this.deviceConfigProfileDetailsStep,\n          complete: false,\n          validate: () => this.deviceConfigProfileDetailsForm.validate(),\n        },\n        {\n          value: 2,\n          header: 'Confirmation',\n          content: this.confirmationTemplate,\n          complete: true,\n        },\n      ];\n    });\n  }\n\n  ngOnInit(): void {\n    if (isDefined(this.dialogConfig.data)) {\n      this.ownerId = this.dialogConfig.data.ownerId ?? null;\n\n      // Initialize deviceConfigProfile with ownerId\n      this.newDeviceConfigProfile.update((current) => ({\n        ...current,\n        ownerId: this.ownerId ?? '',\n      }));\n    }\n  }\n\n  openWizard() {\n    this.displayWizard = true;\n    this.newDeviceConfigProfile.set({} as DeviceConfigProfileCreateRequest);\n  }\n\n  // Form validity handlers\n  onDetailsFormValidityChange(isValid: boolean) {\n    this.steps[0].disableNext = !isValid;\n    this.formIsValid.set(isValid);\n  }\n\n  updateDeviceConfigProfileDetails(formData: Record<string, unknown>) {\n    this.newDeviceConfigProfile.update((current) => {\n      const { ownerId: _ownerId, ...rest } = formData;\n      const updated = { ...current, ...rest };\n\n      if (isNullOrUndefined(updated.ownerId)) {\n        updated.ownerId = this.ownerId ?? '';\n      }\n\n      return updated;\n    });\n  }\n\n  onWizardComplete(): void {\n    const deviceConfigProfileData = this.newDeviceConfigProfile();\n\n    if (\n      isNullOrUndefined(deviceConfigProfileData) ||\n      Object.keys(deviceConfigProfileData).length === 0\n    ) {\n      return;\n    }\n\n    this.isSubmitting.set(true);\n    this.entitiesService\n      .createDeviceConfigProfile(deviceConfigProfileData)\n      .pipe(\n        takeUntilDestroyed(this.destroyRef),\n        finalize(() => this.isSubmitting.set(false)),\n      )\n      .subscribe({\n        next: (response: DeviceConfigProfileResponse) => {\n          this.broadcastService.broadcast('entity-updated', {\n            entityType: 'device-config-profile',\n            operation: 'create',\n            entityId: response.id,\n          });\n          this.dialogRef.close(response);\n        },\n      });\n  }\n\n  // Update cancel to close dialog with no result\n  onWizardCancel(): void {\n    this.newDeviceConfigProfile.set({} as DeviceConfigProfileCreateRequest);\n    this.dialogRef.close();\n  }\n}\n","<app-wizard\n  [contentOnly]=\"true\"\n  [steps]=\"steps\"\n  [showSteps]=\"false\"\n  [useWizardButtonsOnly]=\"true\"\n  [loading]=\"isSubmitting()\"\n  (complete)=\"onWizardComplete()\"\n  (onCancel)=\"onWizardCancel()\"\n>\n</app-wizard>\n\n<!-- Step 1: Device Config Profile Details -->\n<ng-template #deviceConfigProfileDetailsStep let-step>\n  <div class=\"p-fluid\">\n    <app-device-config-profile-details-section\n      #deviceConfigProfileDetailsForm\n      [createMode]=\"true\"\n      [entity]=\"newDeviceConfigProfile()\"\n      [ownerId]=\"ownerId\"\n      (formValidityChange)=\"onDetailsFormValidityChange($event)\"\n      (formValueChange)=\"updateDeviceConfigProfileDetails($event)\"\n    ></app-device-config-profile-details-section>\n  </div>\n</ng-template>\n\n<ng-template #confirmationTemplate let-step>\n  <div class=\"flex gap-6\">\n    <span class=\"pi pi-check !text-5xl\"></span>\n\n    <div class=\"flex-1\">\n      <div class=\"grid\">\n        <!-- DeviceConfigProfile Details Section -->\n        <div class=\"col-12 md:col-6\">\n          <p class=\"mb-4\">\n            You've completed all of the information required and we're ready to\n            create your Device Config Profile.\n          </p>\n\n          <div class=\"space-y-2\">\n            <!-- Each field in a side-by-side layout -->\n            <div class=\"flex\">\n              <div class=\"w-1/3 font-medium\">Name:</div>\n              <div class=\"w-2/3\">\n                {{ newDeviceConfigProfile().name || 'Not provided' }}\n              </div>\n            </div>\n\n            <div class=\"flex\">\n              <div class=\"w-1/3 font-medium\">Device Type:</div>\n              <div class=\"w-2/3\">\n                {{ newDeviceConfigProfile().deviceType?.name }}\n              </div>\n            </div>\n          </div>\n        </div>\n      </div>\n\n      <div\n        class=\"mt-4 pt-4 border-top-1 border-surface-200 dark:border-surface-700\"\n      >\n        <p class=\"mb-0\">Click finish to create this Device Config Profile.</p>\n      </div>\n    </div>\n  </div>\n</ng-template>\n","import {\n  DestroyRef,\n  Injectable,\n  computed,\n  inject,\n  signal,\n} from '@angular/core';\n\nimport { TableLazyLoadEvent } from 'primeng/table';\nimport { catchError, EMPTY, firstValueFrom } from 'rxjs';\n\nimport {\n  GridConfiguration,\n  GridDataService,\n  DataGridParams,\n  GridColumn,\n  FilterCriteria,\n  FilterValue,\n  DATE_FORMATS,\n} from '../../../shared/models';\nimport { UtilityService } from '../../../core/services/utility.service';\nimport { GridBaseService } from '../../../shared/services/grid-base.service';\nimport { isDefined, isEmpty, isNullOrUndefined } from '../../../shared/utils';\nimport { DeviceConfigProfilesDataAdapter } from '../services/adapters';\nimport {\n  EntitiesService,\n  DeviceConfigProfileListItem,\n  IdName,\n  DeviceTypeListItem,\n} from '../../../api';\nimport { DEFAULT_PAGE_SIZE } from '../../../core/models';\nimport { AdminStateService } from '../services/admin-state.service';\nimport { AdminTreeService } from '../services/admin-tree.service';\nimport { DynamicDialogRef, DialogService } from 'primeng/dynamicdialog';\nimport { takeUntilDestroyed } from '@angular/core/rxjs-interop';\nimport { DeviceConfigProfileCreateWizardComponent } from '../components/device-config-profiles/device-config-profile-create-wizard/device-config-profile-create-wizard.component';\nimport { MeasurementDateTimeService } from '../../../shared/services/measurement-units/measurement-date-time.service';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class DeviceConfigProfilesGridConfig\n  implements GridConfiguration<DeviceConfigProfileListItem>\n{\n  private readonly deviceConfigProfilesService = inject(\n    DeviceConfigProfilesDataAdapter,\n  );\n  private readonly utilityService = inject(UtilityService);\n  private readonly gridBaseService = inject(GridBaseService);\n  private readonly entitiesService = inject(EntitiesService);\n  private readonly adminStateService = inject(AdminStateService);\n  private readonly adminTreeService = inject(AdminTreeService);\n  private dialogRef: DynamicDialogRef | null = null;\n  private readonly dialogService = inject(DialogService);\n  private readonly measurementDateTimeService = inject(\n    MeasurementDateTimeService,\n  );\n\n  private readonly defaultStateValues = [\n    DeviceConfigProfileListItem.StateEnum.Active,\n  ];\n  private readonly filterState = signal<Record<string, FilterCriteria>>({\n    state: {\n      value: this.defaultStateValues,\n      operator: 'in',\n    },\n  });\n  private params: Record<string, string> = { ownerId: '' };\n  private ownerId = '';\n  private readonly destroyRef = inject(DestroyRef);\n\n  private readonly rqlFilter = computed(() =>\n    this.utilityService.constructRqlFilter(this.filterState()),\n  );\n  private readonly fieldTransformations: Record<string, string> = {\n    type: 'deviceType.id',\n  };\n  private readonly stateLabels: Record<\n    DeviceConfigProfileListItem.StateEnum,\n    string\n  > = {\n    active: 'Active',\n    deleted: 'Deleted',\n  };\n\n  entityType = 'device-config-profiles';\n  columns: GridColumn<DeviceConfigProfileListItem>[] = [\n    {\n      field: 'name',\n      header: 'Name',\n      filter: true,\n      filterType: 'text',\n      filterMatchMode: 'contains',\n    },\n    {\n      field: 'type',\n      header: 'Type',\n      sortable: true,\n      filterType: 'multiselect',\n      filter: true,\n      filterMatchMode: 'in',\n      valueGetter: (rowData: DeviceConfigProfileListItem) => {\n        return rowData.deviceType?.name ?? '';\n      },\n      filterConfig: {\n        type: 'multiselect',\n        options: [],\n      },\n    },\n    {\n      field: 'state',\n      header: 'State',\n      valueGetter: (rowData: DeviceConfigProfileListItem) =>\n        isDefined(rowData.state) ? this.stateLabels[rowData.state] : '',\n      filter: true,\n      filterType: 'multiselect',\n      filterMatchMode: 'in',\n      filterConfig: {\n        type: 'multiselect',\n        options: [\n          {\n            label: 'Active',\n            value: DeviceConfigProfileListItem.StateEnum.Active,\n          },\n          {\n            label: 'Deleted',\n            value: DeviceConfigProfileListItem.StateEnum.Deleted,\n          },\n        ],\n        defaultSelected: this.defaultStateValues,\n      },\n    },\n    {\n      field: 'modifiedDate',\n      header: 'Modified',\n      filter: false,\n      valueGetter: (rowData: DeviceConfigProfileListItem) =>\n        isDefined(rowData.modifiedDate)\n          ? this.measurementDateTimeService.formatDateTime(\n              this.measurementDateTimeService.createDateAssumingUtc(\n                rowData['modifiedDate'],\n              ),\n              DATE_FORMATS.DATE_TIME_SECONDS,\n            )\n          : '',\n    },\n  ];\n\n  dataService: GridDataService<DeviceConfigProfileListItem> =\n    this.deviceConfigProfilesService;\n\n  getFilters(): Record<string, FilterCriteria> {\n    return this.filterState();\n  }\n\n  clearFilters(): void {\n    this.filterState.set({\n      state: {\n        value: this.defaultStateValues,\n        operator: 'in',\n      },\n    });\n  }\n\n  initialize(params: Record<string, string>) {\n    this.params = params;\n    if (isDefined(this.params['clientId'])) {\n      this.ownerId = String(this.params['clientId']);\n    } else if (isDefined(this.params['vendorId'])) {\n      this.ownerId = String(this.params['vendorId']);\n    }\n    this.loadFilterOptions().catch(() => {});\n  }\n\n  getTitle(): string {\n    return 'Device Config Profiles';\n  }\n\n  getRequestParams(event?: TableLazyLoadEvent): DataGridParams {\n    let sortField = 'name:asc'; // Default\n\n    if (isDefined(event?.sortField)) {\n      const sortOrder = event.sortOrder === 1 ? 'asc' : 'desc';\n      sortField = `${event.sortField}:${sortOrder}`;\n    }\n\n    return {\n      owner: this.ownerId,\n      offset: isDefined(event?.first) ? event.first : 0,\n      recurse: false,\n      limit: isDefined(event?.rows) ? event.rows : DEFAULT_PAGE_SIZE,\n      sortField: sortField,\n      filters: this.rqlFilter(),\n    };\n  }\n\n  onFilterChange(field: string, value: FilterValue): void {\n    const actualField = this.fieldTransformations[field] || field;\n    const column = this.columns.find((col) => col.field === field);\n\n    if (Array.isArray(value)) {\n      const newFilters = this.gridBaseService.handleFilters(\n        this.filterState(),\n        actualField,\n        value,\n        undefined,\n        column?.filterMatchMode,\n      );\n\n      this.filterState.set(newFilters);\n      return;\n    }\n\n    // For non-array values, use the grid base service\n    const newFilters = this.gridBaseService.handleFilters(\n      this.filterState(),\n      actualField,\n      value,\n      undefined,\n      column?.filterMatchMode,\n    );\n\n    this.filterState.set(newFilters);\n  }\n\n  onAdd(): void {\n    this.openDeviceConfigProfileCreationDialog(this.ownerId)\n      .pipe(takeUntilDestroyed(this.destroyRef))\n      .subscribe((createdDeviceConfigProfile) => {\n        if (isDefined(createdDeviceConfigProfile)) {\n          // Refresh your deviceConfigProfile list or take any other necessary actions\n          // this.refreshDeviceConfigProfiles();\n        }\n      });\n  }\n\n  openDeviceConfigProfileCreationDialog(ownerId: string) {\n    this.dialogRef = this.dialogService.open(\n      DeviceConfigProfileCreateWizardComponent,\n      {\n        header: 'Device Config Profile Wizard',\n        contentStyle: { overflow: 'auto' },\n        baseZIndex: 10000,\n        data: { ownerId: ownerId },\n        position: 'top',\n        modal: true,\n      },\n    );\n\n    return this.dialogRef.onClose;\n  }\n\n  private async loadFilterOptions(): Promise<void> {\n    try {\n      // Get device types from the API\n      const deviceTypesResponse = await firstValueFrom(\n        this.entitiesService.listDeviceTypes(this.ownerId).pipe(\n          catchError(() => {\n            console.error('Failed to load device types');\n            return EMPTY;\n          }),\n        ),\n      );\n\n      if (\n        isNullOrUndefined(deviceTypesResponse) ||\n        isEmpty(deviceTypesResponse.items)\n      ) {\n        console.warn('No device types found for client');\n        return;\n      }\n\n      const deviceTypes = deviceTypesResponse.items;\n      let allowedRootDeviceTypeIds =\n        await this.getAvailableRootDeviceTypeIdsForClient();\n\n      if (isEmpty(allowedRootDeviceTypeIds)) {\n        allowedRootDeviceTypeIds =\n          await this.getAvailableRootDeviceTypeIdsForVendor();\n      }\n\n      const typeColumn = this.columns.find((col) => col.field === 'type');\n      if (typeColumn?.filterConfig) {\n        const exceptionDeviceTypeIds: string[] = [];\n\n        const filteredOptions = this.filterAllowedDeviceTypes(\n          this.ownerId,\n          deviceTypes,\n          allowedRootDeviceTypeIds,\n          exceptionDeviceTypeIds,\n        );\n        typeColumn.filterConfig.options = filteredOptions.map((option) => ({\n          label: option.value,\n          value: option.key,\n        }));\n      }\n    } catch (error) {\n      console.error('Error loading device type filter options:', error);\n    }\n  }\n\n  /**\n   * Gets the available root device type IDs for the current client\n   * @returns Promise resolving to an array of device type IDs\n   */\n  private async getAvailableRootDeviceTypeIdsForClient(): Promise<string[]> {\n    if (isNullOrUndefined(this.params['clientId'])) {\n      return [];\n    }\n\n    // First check the admin state service\n    const client = this.adminStateService.getClientById(\n      this.params['clientId'],\n    );\n\n    if (client && isDefined(client.availableDeviceTypes)) {\n      return client.availableDeviceTypes.map(\n        (deviceType: IdName) => deviceType.id,\n      );\n    }\n\n    // If client not found in state, try loading from service\n    try {\n      const fetchedClient = await this.adminTreeService.tryLoadClient(\n        this.params['clientId'],\n      );\n\n      if (fetchedClient?.availableDeviceTypes) {\n        return fetchedClient.availableDeviceTypes.map(\n          (deviceType: IdName) => deviceType.id,\n        );\n      }\n    } catch (error) {\n      console.error('Error loading client device types:', error);\n    }\n\n    return [];\n  }\n\n  /**\n   * Gets the available root device type IDs for a selected vendor\n   * @returns Promise resolving to an array of device type IDs\n   */\n  private async getAvailableRootDeviceTypeIdsForVendor(): Promise<string[]> {\n    const clientId = this.params['clientId'];\n    let client = null;\n    let vendorId = null;\n    if (isDefined(clientId)) {\n      client =\n        this.adminStateService.getClientById(clientId) ??\n        (await this.adminTreeService.tryLoadClient(clientId));\n      vendorId = client ? client.owner.id : null;\n    } else {\n      vendorId = this.params['vendorId'];\n    }\n\n    if (isNullOrUndefined(vendorId)) {\n      return [];\n    }\n    // First check the admin state service\n    const vendor = this.adminStateService.getVendorById(vendorId);\n\n    if (vendor && isDefined(vendor.availableDeviceTypes)) {\n      return vendor.availableDeviceTypes.map(\n        (deviceType: IdName) => deviceType.id,\n      );\n    }\n\n    // If vendor not found in state, try loading from service\n    try {\n      const fetchedVendor =\n        await this.adminTreeService.fetchClientVendor(vendorId);\n\n      if (fetchedVendor && isDefined(fetchedVendor.availableDeviceTypes)) {\n        return fetchedVendor.availableDeviceTypes.map(\n          (deviceType: IdName) => deviceType.id,\n        );\n      }\n    } catch (error) {\n      console.error('Error loading vendor device types:', error);\n    }\n\n    return [];\n  }\n\n  /**\n   * Filters device types based on allowed types and exceptions,\n   * and formats them for dropdown selection\n   *\n   * @param ownerId - ID of the owner (client/vendor)\n   * @param deviceTypes - List of device types to filter\n   * @param allowedTypes - List of allowed root device type IDs\n   * @param exceptions - Device type IDs that are always allowed\n   * @returns Array of formatted key-value pairs for dropdown options\n   */\n  private filterAllowedDeviceTypes(\n    ownerId: string,\n    deviceTypes: DeviceTypeListItem[],\n    allowedTypes: string[],\n    exceptions: string[],\n  ): { key: string; value: string }[] {\n    return deviceTypes\n      .filter((item) => {\n        // Always include exceptions\n        if (exceptions.includes(item.id)) {\n          return true;\n        }\n\n        // Otherwise, check if it's active, has a parent, and meets ownership criteria\n        return (\n          item.state === 'active' &&\n          isDefined(item.parent) &&\n          (item.owner.id === ownerId ||\n            allowedTypes.length === 0 ||\n            allowedTypes.includes(item.parent.id))\n        );\n      })\n      .map((item) => {\n        // Find the parent device type name\n        const parentName =\n          deviceTypes.find((x) => x.id === item?.parent?.id)?.name ?? 'Unknown';\n\n        return {\n          key: item.id,\n          value: `${parentName} - ${item.name}`,\n        };\n      })\n      .sort((a, b) => a.value.localeCompare(b.value));\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport {\n  AfterViewInit,\n  ChangeDetectorRef,\n  Component,\n  DestroyRef,\n  inject,\n  OnInit,\n  signal,\n  TemplateRef,\n  ViewChild,\n} from '@angular/core';\nimport { takeUntilDestroyed } from '@angular/core/rxjs-interop';\nimport { ReactiveFormsModule } from '@angular/forms';\nimport { ButtonModule } from 'primeng/button';\nimport { DynamicDialogRef, DynamicDialogConfig } from 'primeng/dynamicdialog';\n\nimport {\n  AccountsService,\n  ClientResponse,\n  CustomFieldDefinition,\n  VendorResponse,\n} from '../../../../../api';\nimport { WizardComponent } from '../../../../../shared/components/wizard/wizard.component';\nimport { isDefined } from '../../../../../shared/utils';\nimport { BroadcastEventMessageService } from '../../../services/broadcast-event-messages.service';\nimport { CustomFieldDetailsSectionComponent } from '../custom-field-details-section/custom-field-details-section.component';\nimport { Step } from '../../../../../shared/models';\nimport { firstValueFrom, Observable } from 'rxjs';\n\n@Component({\n  selector: 'app-custom-field-create-wizard',\n  imports: [\n    CommonModule,\n    ReactiveFormsModule,\n    WizardComponent,\n    ButtonModule,\n    CustomFieldDetailsSectionComponent,\n  ],\n  templateUrl: './custom-field-create-wizard.component.html',\n  styleUrl: './custom-field-create-wizard.component.scss',\n})\nexport class CustomFieldCreateWizardComponent implements AfterViewInit, OnInit {\n  @ViewChild('customFieldDetailsStep') customFieldDetailsStep!: TemplateRef<{\n    $implicit: Step;\n  }> | null;\n  @ViewChild('confirmationTemplate', { static: true })\n  confirmationTemplate!: TemplateRef<{ $implicit: Step }> | null;\n\n  // References to form components\n  @ViewChild('customFieldDetailsForm')\n  customFieldDetailsForm!: CustomFieldDetailsSectionComponent;\n\n  private readonly accountsService = inject(AccountsService);\n  private readonly broadcastService = inject(BroadcastEventMessageService);\n  protected readonly destroyRef = inject(DestroyRef);\n  private readonly dialogRef = inject(DynamicDialogRef);\n  private readonly dialogConfig = inject(DynamicDialogConfig);\n  private readonly cdr = inject(ChangeDetectorRef);\n\n  // CustomField model to collect data across steps\n  newCustomField = signal<CustomFieldDefinition>({} as CustomFieldDefinition);\n\n  // Form validity state\n  formIsValid = signal<boolean>(false);\n\n  displayWizard = false;\n  steps: Step[] = [];\n  previousStepIndex = 0;\n  currentStepIndex = 0;\n  ownerId: string | null = null;\n  loading = signal<boolean>(false);\n\n  ngAfterViewInit() {\n    this.steps = [\n      {\n        value: 1,\n        header: 'Custom Field Details',\n        content: this.customFieldDetailsStep,\n        complete: false,\n        validate: () => this.customFieldDetailsForm.validate(),\n      },\n      {\n        value: 2,\n        header: 'Confirmation',\n        content: this.confirmationTemplate,\n        complete: true,\n      },\n    ];\n\n    this.cdr.detectChanges();\n  }\n\n  ngOnInit(): void {\n    if (isDefined(this.dialogConfig.data)) {\n      this.ownerId = this.dialogConfig.data.ownerId ?? null;\n\n      // Initialize customField with ownerId\n      this.newCustomField.update((current) => ({\n        ...current,\n      }));\n    }\n  }\n\n  openWizard() {\n    this.displayWizard = true;\n    this.newCustomField.set({} as CustomFieldDefinition);\n  }\n\n  // Form validity handlers\n  onDetailsFormValidityChange(isValid: boolean) {\n    this.steps[0].disableNext = !isValid;\n    this.formIsValid.set(isValid);\n  }\n\n  // Update the customField state with form data\n  updateCustomFieldDetails(formData: Record<string, unknown>) {\n    this.newCustomField.update((current) => {\n      const updated = { ...current, ...formData } as CustomFieldDefinition;\n\n      return updated;\n    });\n  }\n\n  onWizardComplete(): void {\n    this.loading.set(true);\n    firstValueFrom(this.accountsService.getCompany(this.ownerId ?? ''))\n      .then((company) => {\n        const customFieldData = {\n          id: this.newCustomField()['tag'],\n          title: this.newCustomField()['title'],\n          type: this.newCustomField()['type'],\n          required: this.newCustomField()['required'],\n          values: this.newCustomField()['values']?.map((value) => ({\n            key: value.key,\n            value: value.value,\n          })),\n          owner: company.type,\n        };\n\n        customFieldData.required = !!customFieldData.required;\n        customFieldData.values = customFieldData.values ?? [];\n        const customFields: Record<string, CustomFieldDefinition[]> =\n          JSON.parse(JSON.stringify(company.customFields));\n        const bucket =\n          customFields[this.newCustomField()['entityType']['id']] ?? [];\n        bucket.push(customFieldData);\n        customFields[this.newCustomField()['entityType']['id']] = bucket;\n\n        // Check for duplicate IDs\n        // Helper to count duplicate custom field IDs\n        function getDuplicateFieldCount(\n          fields: Record<string, CustomFieldDefinition[]>,\n          id: string,\n        ): number {\n          let count = 0;\n          for (const arr of Object.values(fields)) {\n            if (Array.isArray(arr)) {\n              for (const x of arr) {\n                if (x.id === id) count++;\n              }\n            }\n          }\n          return count;\n        }\n\n        const duplicateCount = getDuplicateFieldCount(\n          customFields,\n          customFieldData.id,\n        );\n        if (duplicateCount > 1) {\n          throw new Error('A custom field with the same ID already exists');\n        }\n\n        const updateDetails$: Observable<ClientResponse | VendorResponse> =\n          company.type === 'client'\n            ? this.accountsService.updateClientDetails(\n                this.ownerId ?? '',\n                { customFields },\n                'body',\n              )\n            : this.accountsService.updateVendorDetails(\n                this.ownerId ?? '',\n                { customFields },\n                'body',\n              );\n\n        return updateDetails$\n          .pipe(takeUntilDestroyed(this.destroyRef))\n          .subscribe({\n            next: (response: ClientResponse | VendorResponse) => {\n              this.broadcastService.broadcast('entity-updated', {\n                entityType: 'custom-field',\n                operation: 'create',\n                entityId: response.id,\n              });\n              this.loading.set(false);\n              this.dialogRef.close(response);\n            },\n            error: (error: Error) => {\n              this.loading.set(false);\n              // Handle error, could show message and keep dialog open\n              console.error('Error creating custom field:', error);\n            },\n          });\n      })\n      .catch(() => {});\n  }\n\n  // Update cancel to close dialog with no result\n  onWizardCancel(): void {\n    this.newCustomField.set({} as CustomFieldDefinition);\n    this.dialogRef.close();\n  }\n}\n","<app-wizard\n  [contentOnly]=\"true\"\n  [steps]=\"steps\"\n  [showSteps]=\"false\"\n  [useWizardButtonsOnly]=\"true\"\n  [loading]=\"loading()\"\n  (complete)=\"onWizardComplete()\"\n  (onCancel)=\"onWizardCancel()\"\n>\n</app-wizard>\n\n<!-- Step 1: CustomField Details -->\n<ng-template #customFieldDetailsStep let-step>\n  <div class=\"p-fluid\">\n    <app-custom-field-details-section\n      #customFieldDetailsForm\n      [createMode]=\"true\"\n      [entity]=\"newCustomField()\"\n      (formValidityChange)=\"onDetailsFormValidityChange($event)\"\n      (formValueChange)=\"updateCustomFieldDetails($event)\"\n    ></app-custom-field-details-section>\n  </div>\n</ng-template>\n\n<ng-template #confirmationTemplate let-step>\n  <div class=\"flex gap-6\">\n    <span class=\"pi pi-check !text-5xl\"></span>\n\n    <div class=\"flex-1\">\n      <div class=\"grid\">\n        <!-- CustomField Details Section -->\n        <div class=\"col-12 md:col-6\">\n          <p class=\"mb-4\">\n            You've completed all of the information required and we're ready to\n            create your Custom Field.\n          </p>\n\n          <div class=\"space-y-2\">\n            <div class=\"flex\">\n              <div class=\"w-1/3 font-medium\">Id:</div>\n              <div class=\"w-2/3\">\n                {{ newCustomField()['tag'] }}\n              </div>\n            </div>\n\n            <div class=\"flex\">\n              <div class=\"w-1/3 font-medium\">Name:</div>\n              <div class=\"w-2/3\">\n                {{ newCustomField().title }}\n              </div>\n            </div>\n\n            <div class=\"flex\">\n              <div class=\"w-1/3 font-medium\">Applies To:</div>\n              <div class=\"w-2/3\">\n                {{ newCustomField()['entityType']['name'] }}\n              </div>\n            </div>\n\n            <div class=\"flex\">\n              <div class=\"w-1/3 font-medium\">Type:</div>\n              <div class=\"w-2/3\">\n                {{ newCustomField().type }}\n              </div>\n            </div>\n          </div>\n        </div>\n      </div>\n\n      <div\n        class=\"mt-4 pt-4 border-top-1 border-surface-200 dark:border-surface-700\"\n      >\n        <p class=\"mb-0\">Click finish to create this Custom Field.</p>\n      </div>\n    </div>\n  </div>\n</ng-template>\n","import { computed, inject, Injectable, signal } from '@angular/core';\n\nimport { CustomFieldsDataAdapter } from '../services/adapters';\nimport {\n  DataGridParams,\n  FilterCriteria,\n  FilterValue,\n  GridColumn,\n  GridConfiguration,\n} from '../../../shared/models';\nimport { isDefined } from '../../../shared/utils';\nimport { CustomFieldResponse } from '../models';\nimport { DynamicDialogRef, DialogService } from 'primeng/dynamicdialog';\nimport { TableLazyLoadEvent } from 'primeng/table';\nimport { DEFAULT_PAGE_SIZE } from '../../../core/models';\nimport { CustomFieldCreateWizardComponent } from '../components/custom-fields/custom-field-create-wizard/custom-field-create-wizard.component';\nimport { UtilityService } from '../../../core/services/utility.service';\nimport { GridBaseService } from '../../../shared/services/grid-base.service';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class CustomFieldsGridConfig\n  implements GridConfiguration<CustomFieldResponse>\n{\n  private readonly customFieldsService = inject(CustomFieldsDataAdapter);\n  private readonly assetTypes = this.customFieldsService.assetTypes;\n  private readonly types = this.customFieldsService.types;\n  private dialogRef: DynamicDialogRef | null = null;\n  private readonly dialogService = inject(DialogService);\n  private readonly utilityService = inject(UtilityService);\n  private readonly gridBaseService = inject(GridBaseService);\n\n  private params: Record<string, string> = {};\n  private readonly filterState = signal<Record<string, FilterCriteria>>({});\n  private readonly rqlFilter = computed(() =>\n    this.utilityService.constructRqlFilter(this.filterState()),\n  );\n  columnsSignal = computed(() => this.createColumns());\n\n  entityType = 'custom-fields';\n  columns: GridColumn<CustomFieldResponse>[] = [];\n\n  dataService = this.customFieldsService;\n  ownerId = '';\n\n  private createColumns(): GridColumn<CustomFieldResponse>[] {\n    return [\n      {\n        field: 'name',\n        header: 'Name',\n        filter: true,\n        filterType: 'text',\n        filterMatchMode: 'contains',\n      },\n      {\n        field: 'entityType',\n        header: 'Applies To',\n        valueGetter: (rowData: CustomFieldResponse): string =>\n          isDefined(rowData?._entityType?.name) ? rowData._entityType.name : '',\n        filter: true,\n        filterType: 'multiselect',\n        filterMatchMode: 'in',\n        filterConfig: {\n          type: 'multiselect',\n          options: this.assetTypes().map((type) => ({\n            label: type.name ?? '',\n            value: type.id ?? '',\n          })),\n        },\n      },\n      {\n        field: 'type',\n        header: 'Type',\n        valueGetter: (rowData: CustomFieldResponse) =>\n          isDefined(rowData?.type?.name) ? rowData.type.name : '',\n        filter: true,\n        filterType: 'multiselect',\n        filterMatchMode: 'in',\n        filterConfig: {\n          type: 'multiselect',\n          options: this.types().map((type) => ({\n            label: type.name ?? '',\n            value: type.id ?? '',\n          })),\n        },\n      },\n    ];\n  }\n\n  clearFilters(): void {\n    this.filterState.set({});\n  }\n\n  initialize(params: Record<string, string>): void {\n    this.params = params;\n    if (isDefined(this.params['clientId'])) {\n      this.ownerId = String(this.params['clientId']);\n    } else if (isDefined(this.params['vendorId'])) {\n      this.ownerId = String(this.params['vendorId']);\n    }\n  }\n\n  getTitle(): string {\n    return 'Custom Fields';\n  }\n\n  getRequestParams(event?: TableLazyLoadEvent): DataGridParams {\n    // Add sorting support\n    let sortField = 'name:asc'; // Default\n\n    if (isDefined(event?.sortField)) {\n      const sortOrder = event.sortOrder === 1 ? 'asc' : 'desc';\n      sortField = `${event.sortField}:${sortOrder}`;\n    }\n\n    return {\n      owner: this.ownerId,\n      offset: isDefined(event?.first) ? event.first : 0,\n      recurse: false,\n      limit: isDefined(event?.rows) ? event.rows : DEFAULT_PAGE_SIZE,\n      sortField: sortField,\n      filters: this.rqlFilter(),\n    };\n  }\n\n  onFilterChange(field: string, value: FilterValue): void {\n    const column = this.columns.find((col) => col.field === field);\n\n    if (Array.isArray(value)) {\n      const newFilters = this.gridBaseService.handleFilters(\n        this.filterState(),\n        field,\n        value,\n        undefined,\n        column?.filterMatchMode,\n      );\n\n      this.filterState.set(newFilters);\n      return;\n    }\n\n    // For non-array values, use the grid base service\n    const newFilters = this.gridBaseService.handleFilters(\n      this.filterState(),\n      field,\n      value,\n      undefined,\n      column?.filterMatchMode,\n    );\n\n    this.filterState.set(newFilters);\n  }\n\n  onAdd(): void {\n    const clientId = this.ownerId;\n\n    this.openCustomFieldCreationDialog(clientId).subscribe(\n      (createdCustomField) => {\n        if (isDefined(createdCustomField)) {\n          // Refresh your customField list or take any other necessary actions\n          // this.refreshCustomFields();\n        }\n      },\n    );\n  }\n\n  openCustomFieldCreationDialog(ownerId: string) {\n    this.dialogRef = this.dialogService.open(CustomFieldCreateWizardComponent, {\n      header: 'Custom Field Wizard',\n      contentStyle: { overflow: 'auto' },\n      baseZIndex: 10000,\n      data: { ownerId: ownerId },\n      position: 'top',\n      modal: true,\n    });\n\n    return this.dialogRef.onClose;\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport {\n  AfterViewInit,\n  ChangeDetectorRef,\n  Component,\n  DestroyRef,\n  inject,\n  OnInit,\n  signal,\n  TemplateRef,\n  ViewChild,\n} from '@angular/core';\nimport { takeUntilDestroyed } from '@angular/core/rxjs-interop';\nimport { ReactiveFormsModule } from '@angular/forms';\n\nimport { ButtonModule } from 'primeng/button';\nimport { DynamicDialogRef, DynamicDialogConfig } from 'primeng/dynamicdialog';\n\nimport {\n  AccountsService,\n  UserRoleCreateRequest,\n  UserRoleResponse,\n} from '../../../../../api';\nimport { WizardComponent } from '../../../../../shared/components/wizard/wizard.component';\nimport { isDefined, isNullOrUndefined } from '../../../../../shared/utils';\nimport { UserRoleDetailsSectionComponent } from '../user-role-details-section/user-role-details-section.component';\nimport { Step } from '../../../../../shared/models';\nimport { BroadcastEventMessageService } from '../../../services/broadcast-event-messages.service';\nimport { finalize } from 'rxjs';\n\n@Component({\n  selector: 'app-user-role-create-wizard',\n  imports: [\n    CommonModule,\n    ReactiveFormsModule,\n    WizardComponent,\n    ButtonModule,\n    UserRoleDetailsSectionComponent,\n  ],\n  templateUrl: './user-role-create-wizard.component.html',\n  styleUrl: './user-role-create-wizard.component.scss',\n})\nexport class UserRoleCreateWizardComponent implements AfterViewInit, OnInit {\n  @ViewChild('userRoleDetailsStep')\n  userRoleDetailsStep!: TemplateRef<{\n    $implicit: Step;\n  }> | null;\n  @ViewChild('confirmationTemplate', { static: true })\n  confirmationTemplate!: TemplateRef<{ $implicit: Step }> | null;\n  private readonly cdr = inject(ChangeDetectorRef);\n\n  // References to form components\n  @ViewChild('userRoleDetailsForm')\n  userRoleDetailsForm!: UserRoleDetailsSectionComponent;\n\n  private readonly accountsService = inject(AccountsService);\n  private readonly broadcastService = inject(BroadcastEventMessageService);\n  protected readonly destroyRef = inject(DestroyRef);\n  private readonly dialogRef = inject(DynamicDialogRef);\n  private readonly dialogConfig = inject(DynamicDialogConfig);\n\n  // UserRole model to collect data across steps\n  newUserRole = signal<UserRoleCreateRequest>({} as UserRoleCreateRequest);\n\n  // Form validity state\n  formIsValid = signal<boolean>(false);\n\n  displayWizard = false;\n  steps: Step[] = [];\n  previousStepIndex = 0;\n  currentStepIndex = 0;\n  ownerId: string | null = null;\n  isSubmitting = signal<boolean>(false);\n\n  ngAfterViewInit() {\n    this.steps = [\n      {\n        value: 1,\n        header: 'User Role Details',\n        content: this.userRoleDetailsStep,\n        complete: false,\n        validate: () => this.userRoleDetailsForm.validate(),\n      },\n      {\n        value: 2,\n        header: 'Confirmation',\n        content: this.confirmationTemplate,\n        complete: true,\n      },\n    ];\n    this.cdr.detectChanges(); // Trigger change detection to update the view\n  }\n\n  ngOnInit(): void {\n    if (isDefined(this.dialogConfig.data)) {\n      this.ownerId = this.dialogConfig.data.ownerId ?? null;\n\n      // Initialize userRole with ownerId\n      this.newUserRole.update((current) => ({\n        ...current,\n        ownerId: this.ownerId ?? '',\n      }));\n    }\n  }\n\n  openWizard() {\n    this.displayWizard = true;\n    this.newUserRole.set({} as UserRoleCreateRequest);\n  }\n\n  // Form validity handlers\n  onDetailsFormValidityChange(isValid: boolean) {\n    this.steps[0].disableNext = !isValid;\n    this.formIsValid.set(isValid);\n  }\n\n  // Update the userRole state with form data\n  updateUserRoleDetails(formData: Record<string, unknown>) {\n    this.newUserRole.update((current) => {\n      const updated = { ...current };\n\n      Object.keys(formData).forEach((key) => {\n        if (key !== 'ownerId') {\n          updated[key] = formData[key];\n        }\n      });\n\n      if (isNullOrUndefined(updated.ownerId)) {\n        updated.ownerId = this.ownerId ?? '';\n      }\n\n      return updated;\n    });\n  }\n\n  onWizardComplete(): void {\n    // Process the final data from all steps\n    const userRoleData = this.newUserRole();\n    this.isSubmitting.set(true);\n\n    this.accountsService\n      .createUserRole(userRoleData)\n      .pipe(\n        takeUntilDestroyed(this.destroyRef),\n        finalize(() => this.isSubmitting.set(false)),\n      )\n      .subscribe({\n        next: (response: UserRoleResponse) => {\n          this.broadcastService.broadcast('entity-updated', {\n            entityType: 'userrole',\n            operation: 'create',\n            entityId: response.id,\n          });\n          this.dialogRef.close(response);\n        },\n        error: (error: Error) => {\n          // Handle error, could show message and keep dialog open\n          console.error('Error creating user role:', error);\n        },\n      });\n  }\n\n  // Update cancel to close dialog with no result\n  onWizardCancel(): void {\n    this.newUserRole.set({} as UserRoleCreateRequest);\n    this.dialogRef.close();\n  }\n}\n","<app-wizard\n  [contentOnly]=\"true\"\n  [steps]=\"steps\"\n  [showSteps]=\"false\"\n  [useWizardButtonsOnly]=\"true\"\n  [loading]=\"isSubmitting()\"\n  (complete)=\"onWizardComplete()\"\n  (onCancel)=\"onWizardCancel()\"\n>\n</app-wizard>\n\n<!-- Step 1: UserRole Details -->\n<ng-template #userRoleDetailsStep let-step>\n  <div class=\"p-fluid\">\n    <app-user-role-details-section\n      #userRoleDetailsForm\n      [createMode]=\"true\"\n      [entity]=\"newUserRole()\"\n      (formValidityChange)=\"onDetailsFormValidityChange($event)\"\n      (formValueChange)=\"updateUserRoleDetails($event)\"\n    ></app-user-role-details-section>\n  </div>\n</ng-template>\n\n<ng-template #confirmationTemplate let-step>\n  <div class=\"flex gap-6\">\n    <span class=\"pi pi-check !text-5xl\"></span>\n\n    <div class=\"flex-1\">\n      <div class=\"grid\">\n        <!-- UserRole Details Section -->\n        <div class=\"col-12 md:col-6\">\n          <p class=\"mb-4\">\n            You've completed all of the information required and we're ready to\n            create your User Role.\n          </p>\n\n          <div class=\"space-y-2\">\n            <!-- Each field in a side-by-side layout -->\n            <div class=\"flex\">\n              <div class=\"w-1/3 font-medium\">Name:</div>\n              <div class=\"w-2/3\">\n                {{ newUserRole().name || 'Not provided' }}\n              </div>\n            </div>\n          </div>\n        </div>\n      </div>\n\n      <div\n        class=\"mt-4 pt-4 border-top-1 border-surface-200 dark:border-surface-700\"\n      >\n        <p class=\"mb-0\">Click finish to create this User Role.</p>\n      </div>\n    </div>\n  </div>\n</ng-template>\n","import { Injectable, computed, inject, signal } from '@angular/core';\n\nimport { TableLazyLoadEvent } from 'primeng/table';\n\nimport {\n  GridConfiguration,\n  GridDataService,\n  DataGridParams,\n  GridColumn,\n  FilterCriteria,\n  FilterValue,\n  DATE_FORMATS,\n} from '../../../shared/models';\nimport { UtilityService } from '../../../core/services/utility.service';\nimport { GridBaseService } from '../../../shared/services/grid-base.service';\nimport { isDefined } from '../../../shared/utils';\nimport { UserRolesDataAdapter } from '../services/adapters';\nimport { UserRoleListItem } from '../../../api';\nimport { DEFAULT_PAGE_SIZE } from '../../../core/models';\nimport { MeasurementDateTimeService } from '../../../shared/services/measurement-units/measurement-date-time.service';\nimport { DynamicDialogRef, DialogService } from 'primeng/dynamicdialog';\nimport { UserRoleCreateWizardComponent } from '../components/user-roles/user-role-create-wizard/user-role-create-wizard.component';\n\n@Injectable({ providedIn: 'root' })\nexport class UserRolesGridConfig\n  implements GridConfiguration<UserRoleListItem>\n{\n  private readonly userRolesService = inject(UserRolesDataAdapter);\n  private readonly utilityService = inject(UtilityService);\n  private readonly gridBaseService = inject(GridBaseService);\n  private readonly measurementDateTimeService = inject(\n    MeasurementDateTimeService,\n  );\n  private dialogRef: DynamicDialogRef | null = null;\n  private readonly dialogService = inject(DialogService);\n\n  private readonly filterState = signal<Record<string, FilterCriteria>>({});\n  private params: Record<string, string> = {};\n\n  private readonly rqlFilter = computed(() =>\n    this.utilityService.constructRqlFilter(this.filterState()),\n  );\n\n  entityType = 'user-roles';\n  columns: GridColumn<UserRoleListItem>[] = [\n    {\n      field: 'name',\n      header: 'Name',\n      filter: true,\n      filterType: 'text',\n      filterMatchMode: 'contains',\n    },\n    {\n      field: 'description',\n      header: 'Description',\n      filter: true,\n      filterType: 'text',\n      filterMatchMode: 'contains',\n    },\n\n    {\n      field: 'modifiedDate',\n      header: 'Modified',\n      filter: false,\n      valueGetter: (rowData: UserRoleListItem) =>\n        isDefined(rowData.modifiedDate)\n          ? this.measurementDateTimeService.formatDateTime(\n              this.measurementDateTimeService.createDateAssumingUtc(\n                rowData.modifiedDate,\n              ),\n              DATE_FORMATS.DATE_TIME_SECONDS,\n            )\n          : '',\n    },\n  ];\n\n  dataService: GridDataService<UserRoleListItem> = this.userRolesService;\n  ownerId = '';\n\n  getFilters(): Record<string, FilterCriteria> {\n    return this.filterState();\n  }\n\n  clearFilters(): void {\n    this.filterState.set({});\n  }\n\n  initialize(params: Record<string, string>): void {\n    this.params = params;\n    if (isDefined(this.params['clientId'])) {\n      this.ownerId = String(this.params['clientId']);\n    } else if (isDefined(this.params['vendorId'])) {\n      this.ownerId = String(this.params['vendorId']);\n    } else if (isDefined(this.params['distributorId'])) {\n      this.ownerId = String(this.params['distributorId']);\n    } else if (isDefined(this.params['superAdminId'])) {\n      this.ownerId = String(this.params['superAdminId']);\n    }\n  }\n\n  getTitle(): string {\n    return 'User Roles';\n  }\n\n  getRequestParams(event?: TableLazyLoadEvent): DataGridParams {\n    // Add sorting support\n    let sortField = 'name:asc'; // Default\n\n    if (isDefined(event?.sortField)) {\n      const sortOrder = event.sortOrder === 1 ? 'asc' : 'desc';\n      sortField = `${event.sortField}:${sortOrder}`;\n    }\n\n    return {\n      owner: this.ownerId,\n      offset: isDefined(event?.first) ? event.first : 0,\n      recurse: false,\n      limit: isDefined(event?.rows) ? event.rows : DEFAULT_PAGE_SIZE,\n      sortField: sortField,\n      filters: this.rqlFilter(),\n    };\n  }\n\n  onFilterChange(field: string, value: FilterValue): void {\n    const column = this.columns.find((col) => col.field === field);\n\n    if (Array.isArray(value)) {\n      const newFilters = this.gridBaseService.handleFilters(\n        this.filterState(),\n        field,\n        value,\n        undefined,\n        column?.filterMatchMode,\n      );\n\n      this.filterState.set(newFilters);\n      return;\n    }\n\n    // For non-array values, use the grid base service\n    const newFilters = this.gridBaseService.handleFilters(\n      this.filterState(),\n      field,\n      value,\n      undefined,\n      column?.filterMatchMode,\n    );\n\n    this.filterState.set(newFilters);\n  }\n\n  onAdd(): void {\n    const clientId = this.ownerId;\n\n    this.openUserRoleCreationDialog(clientId).subscribe();\n  }\n\n  openUserRoleCreationDialog(ownerId: string) {\n    this.dialogRef = this.dialogService.open(UserRoleCreateWizardComponent, {\n      header: 'User Role Wizard',\n      baseZIndex: 10000,\n      data: { ownerId: ownerId },\n      position: 'top',\n      modal: true,\n    });\n\n    return this.dialogRef.onClose;\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport {\n  AfterViewInit,\n  ChangeDetectorRef,\n  Component,\n  DestroyRef,\n  inject,\n  OnInit,\n  signal,\n  TemplateRef,\n  ViewChild,\n} from '@angular/core';\nimport { takeUntilDestroyed } from '@angular/core/rxjs-interop';\nimport { ReactiveFormsModule } from '@angular/forms';\n\nimport { ButtonModule } from 'primeng/button';\nimport { DynamicDialogRef, DynamicDialogConfig } from 'primeng/dynamicdialog';\n\nimport {\n  AccountsService,\n  IdName,\n  UserCreateRequest,\n  UserResponse,\n} from '../../../../../api';\nimport { WizardComponent } from '../../../../../shared/components/wizard/wizard.component';\nimport {\n  isDefined,\n  isEmpty,\n  isNullOrUndefined,\n} from '../../../../../shared/utils';\nimport { UserDetailsSectionComponent } from '../user-details-section/user-details-section.component';\nimport { Step } from '../../../../../shared/models';\nimport { BroadcastEventMessageService } from '../../../services/broadcast-event-messages.service';\nimport { UserRolesSectionComponent } from '../user-roles-section/user-roles-section.component';\nimport { finalize } from 'rxjs';\nimport { UtilsService } from '../../../../../shared/services/utils.service';\n\n@Component({\n  selector: 'app-user-create-wizard',\n  imports: [\n    CommonModule,\n    ReactiveFormsModule,\n    WizardComponent,\n    ButtonModule,\n    UserDetailsSectionComponent,\n    UserRolesSectionComponent,\n  ],\n  templateUrl: './user-create-wizard.component.html',\n  styleUrl: './user-create-wizard.component.scss',\n})\nexport class UserCreateWizardComponent implements AfterViewInit, OnInit {\n  @ViewChild('userDetailsStep')\n  userDetailsStep!: TemplateRef<{\n    $implicit: Step;\n  }> | null;\n  @ViewChild('userRolesStep')\n  userRolesStep!: TemplateRef<{ $implicit: Step }> | null;\n  @ViewChild('confirmationTemplate', { static: true })\n  confirmationTemplate!: TemplateRef<{ $implicit: Step }> | null;\n  private readonly cdr = inject(ChangeDetectorRef);\n\n  // References to form components\n  @ViewChild('userDetailsForm')\n  userDetailsForm!: UserDetailsSectionComponent;\n  @ViewChild('userRolesForm')\n  userRolesForm!: UserRolesSectionComponent;\n\n  private readonly accountsService = inject(AccountsService);\n  private readonly broadcastService = inject(BroadcastEventMessageService);\n  protected readonly destroyRef = inject(DestroyRef);\n  private readonly dialogRef = inject(DynamicDialogRef);\n  private readonly dialogConfig = inject(DynamicDialogConfig);\n  private readonly utilsService = inject(UtilsService);\n\n  // User model to collect data across steps\n  newUser = signal<UserCreateRequest>({} as UserCreateRequest);\n\n  displayWizard = false;\n  steps: Step[] = [];\n  previousStepIndex = 0;\n  currentStepIndex = 0;\n  ownerId: string | null = null;\n  isSubmitting = signal<boolean>(false);\n\n  ngAfterViewInit() {\n    this.steps = [\n      {\n        value: 1,\n        header: 'User Details',\n        content: this.userDetailsStep,\n        complete: false,\n        validate: () => this.userDetailsForm.validate(),\n      },\n      {\n        value: 2,\n        header: 'User Roles',\n        content: this.userRolesStep,\n        complete: false,\n        validate: () => this.userRolesForm.validate(),\n      },\n      {\n        value: 3,\n        header: 'Confirmation',\n        content: this.confirmationTemplate,\n        complete: true,\n      },\n    ];\n    this.cdr.detectChanges(); // Trigger change detection to update the view\n  }\n\n  ngOnInit(): void {\n    if (isDefined(this.dialogConfig.data)) {\n      this.ownerId = this.dialogConfig.data.ownerId ?? null;\n\n      // Initialize user with ownerId\n      this.newUser.update((current) => ({\n        ...current,\n        ownerId: this.ownerId ?? '',\n      }));\n    }\n  }\n\n  openWizard() {\n    this.displayWizard = true;\n    this.newUser.set({} as UserCreateRequest);\n  }\n\n  // Form validity handlers\n  onDetailsFormValidityChange(isValid: boolean) {\n    this.steps[0].disableNext = !isValid;\n  }\n\n  onRolesFormValidityChange(isValid: boolean) {\n    this.steps[1].disableNext = !isValid;\n  }\n\n  // Update the user state with form data\n  updateUserDetails(formData: Record<string, unknown>) {\n    this.newUser.update((current) => {\n      const updated = { ...current };\n\n      for (const key of Object.keys(formData)) {\n        if (key !== 'ownerId') {\n          updated[key] = formData[key];\n        }\n      }\n\n      if (isNullOrUndefined(updated.ownerId)) {\n        updated.ownerId = this.ownerId ?? '';\n      }\n\n      return updated;\n    });\n  }\n\n  updateUserRoles(formData: Record<string, unknown>) {\n    this.newUser.update((current) => ({\n      ...current,\n      roles: formData['roles'] as IdName[],\n    }));\n  }\n\n  onWizardComplete(): void {\n    // Process the final data from all steps\n    const userData = this.newUser();\n    this.isSubmitting.set(true);\n\n    this.accountsService\n      .createUser(userData)\n      .pipe(\n        takeUntilDestroyed(this.destroyRef),\n        finalize(() => this.isSubmitting.set(false)),\n      )\n      .subscribe({\n        next: (response: UserResponse) => {\n          this.broadcastService.broadcast('entity-updated', {\n            entityType: 'user',\n            operation: 'create',\n            entityId: response.id,\n          });\n          this.dialogRef.close(response);\n        },\n        error: (error: Error) => {\n          // Handle error, could show message and keep dialog open\n          console.error('Error creating user:', error);\n        },\n      });\n  }\n\n  // Update cancel to close dialog with no result\n  onWizardCancel(): void {\n    this.newUser.set({} as UserCreateRequest);\n    this.dialogRef.close();\n  }\n\n  getRoleNames(roles: IdName[] | null | undefined): string {\n    if (isEmpty(roles)) {\n      return 'No roles assigned';\n    }\n    return roles?.map((role) => role.name).join(', ') ?? 'No roles assigned';\n  }\n}\n","<app-wizard\n  [contentOnly]=\"true\"\n  [steps]=\"steps\"\n  [showSteps]=\"false\"\n  [useWizardButtonsOnly]=\"true\"\n  [loading]=\"isSubmitting()\"\n  (complete)=\"onWizardComplete()\"\n  (onCancel)=\"onWizardCancel()\"\n>\n  <!-- Step 1: User Details -->\n  <ng-template #userDetailsStep let-step>\n    <div class=\"p-fluid\">\n      <app-user-details-section\n        #userDetailsForm\n        [createMode]=\"true\"\n        [entity]=\"newUser()\"\n        [ownerId]=\"ownerId\"\n        (formValidityChange)=\"onDetailsFormValidityChange($event)\"\n        (formValueChange)=\"updateUserDetails($event)\"\n      ></app-user-details-section>\n    </div>\n  </ng-template>\n\n  <!-- Step 2: User Roles -->\n  <ng-template #userRolesStep let-step>\n    <div class=\"p-fluid\">\n      <app-user-roles-section\n        #userRolesForm\n        [createMode]=\"true\"\n        [entity]=\"newUser()\"\n        [ownerId]=\"ownerId\"\n        (formValidityChange)=\"onRolesFormValidityChange($event)\"\n        (formValueChange)=\"updateUserRoles($event)\"\n      ></app-user-roles-section>\n    </div>\n  </ng-template>\n\n  <ng-template #confirmationTemplate let-step>\n    <div class=\"flex gap-6\">\n      <span class=\"pi pi-check !text-5xl\"></span>\n\n      <div class=\"flex-1\">\n        <div class=\"grid\">\n          <!-- User Details Section -->\n          <div class=\"col-12 md:col-6\">\n            <p class=\"mb-4\">\n              You've completed all of the information required and we're ready\n              to create your User.\n            </p>\n\n            <div class=\"space-y-2\">\n              <!-- Each field in a side-by-side layout -->\n              <div class=\"flex\">\n                <div class=\"w-1/3 font-medium\">Name:</div>\n                <div class=\"w-2/3\">\n                  {{ newUser().name || 'Not provided' }}\n                </div>\n              </div>\n\n              <div class=\"flex\">\n                <div class=\"w-1/3 font-medium\">Email Address:</div>\n                <div class=\"w-2/3\">\n                  {{ newUser().emailAddress || 'Not provided' }}\n                </div>\n              </div>\n\n              <div class=\"flex\">\n                <div class=\"w-1/3 font-medium\">Mobile Number:</div>\n                <div class=\"w-2/3\">\n                  {{ newUser().mobile || 'Not provided' }}\n                </div>\n              </div>\n\n              @if (newUser().costCentre) {\n                <div class=\"flex\">\n                  <div class=\"w-1/3 font-medium\">Cost Centre:</div>\n                  <div class=\"w-2/3\">\n                    {{ newUser().costCentre?.name || 'Not provided' }}\n                  </div>\n                </div>\n              }\n\n              <div class=\"flex\">\n                <div class=\"w-1/3 font-medium\">Time Zone:</div>\n                <div class=\"w-2/3\">\n                  {{ newUser().timeZoneId || 'Not provided' }}\n                </div>\n              </div>\n\n              <div class=\"flex\">\n                <div class=\"w-1/3 font-medium\">Default Client:</div>\n                <div class=\"w-2/3\">\n                  {{ newUser().defaultClient?.name || 'Not provided' }}\n                </div>\n              </div>\n              <div class=\"flex\">\n                <div class=\"w-1/3 font-medium\">Send Invite:</div>\n                <div class=\"w-2/3\">\n                  {{ newUser()['invite'] ? 'Yes' : 'No' }}\n                </div>\n              </div>\n              <div class=\"flex\">\n                <div class=\"w-1/3 font-medium\">Roles:</div>\n                <div class=\"w-2/3\">\n                  {{ getRoleNames(newUser().roles) }}\n                </div>\n              </div>\n            </div>\n\n            <div\n              class=\"mt-4 pt-4 border-top-1 border-surface-200 dark:border-surface-700\"\n            >\n              <p class=\"mb-0\">Click finish to create this User.</p>\n            </div>\n          </div>\n        </div>\n      </div>\n    </div></ng-template\n  >\n</app-wizard>\n","import {\n  DestroyRef,\n  Injectable,\n  computed,\n  inject,\n  signal,\n} from '@angular/core';\n\nimport { TableLazyLoadEvent } from 'primeng/table';\nimport { catchError, EMPTY } from 'rxjs';\nimport { takeUntilDestroyed } from '@angular/core/rxjs-interop';\n\nimport {\n  GridConfiguration,\n  GridDataService,\n  DataGridParams,\n  GridColumn,\n  FilterCriteria,\n  FilterValue,\n  DATE_FORMATS,\n} from '../../../shared/models';\nimport { UtilityService } from '../../../core/services/utility.service';\nimport { GridBaseService } from '../../../shared/services/grid-base.service';\nimport { isDefined } from '../../../shared/utils';\nimport { UsersDataAdapter } from '../services/adapters';\nimport { UserListItem, EntitiesService } from '../../../api';\nimport { DEFAULT_PAGE_SIZE } from '../../../core/models';\nimport { MeasurementDateTimeService } from '../../../shared/services/measurement-units/measurement-date-time.service';\nimport { DynamicDialogRef, DialogService } from 'primeng/dynamicdialog';\nimport { UserCreateWizardComponent } from '../components/users/user-create-wizard/user-create-wizard.component';\nimport { cloneDeepWith } from 'lodash';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class UsersGridConfig implements GridConfiguration<UserListItem> {\n  private readonly usersService = inject(UsersDataAdapter);\n  private readonly utilityService = inject(UtilityService);\n  private readonly gridBaseService = inject(GridBaseService);\n  private readonly entitiesService = inject(EntitiesService);\n  private dialogRef: DynamicDialogRef | null = null;\n  private readonly dialogService = inject(DialogService);\n  private readonly measurementDateTimeService = inject(\n    MeasurementDateTimeService,\n  );\n  private readonly defaultStateValues = ['active', 'suspended', 'inactive'];\n  private readonly filterState = signal<Record<string, FilterCriteria>>({\n    state: {\n      value: this.defaultStateValues,\n      operator: 'in',\n    },\n  });\n  private params: Record<string, string> = {};\n  private readonly destroyRef = inject(DestroyRef);\n\n  private readonly rqlFilter = computed(() =>\n    this.utilityService.constructRqlFilter(this.filterState()),\n  );\n  private readonly fieldTransformations: Record<string, string> = {\n    costCentre: 'costCentre.id',\n  };\n\n  private readonly baseColumns: GridColumn<UserListItem>[] = [\n    {\n      field: 'name',\n      header: 'Name',\n      filter: true,\n      filterType: 'text',\n      filterMatchMode: 'contains',\n      transform: 'text-ellipsis',\n    },\n    {\n      field: 'emailAddress',\n      header: 'Email',\n      filter: true,\n      filterType: 'text',\n      filterMatchMode: 'contains',\n      transform: 'text-ellipsis',\n    },\n    {\n      field: 'mobile',\n      header: 'Mobile Number',\n      filter: true,\n      filterType: 'text',\n      filterMatchMode: 'contains',\n      transform: 'text-ellipsis',\n    },\n    {\n      field: 'state',\n      header: 'State',\n      filter: true,\n      filterType: 'multiselect',\n      filterMatchMode: 'in',\n      filterConfig: {\n        type: 'multiselect',\n        options: [\n          { label: 'Active', value: 'active' },\n          { label: 'Suspended', value: 'suspended' },\n          { label: 'Deleted', value: 'deleted' },\n          { label: 'Inactive', value: 'inactive' },\n        ],\n        defaultSelected: this.defaultStateValues,\n      },\n      transform: 'capitalize',\n    },\n    {\n      field: 'costCentre',\n      header: 'Cost Centre',\n      valueGetter: (rowData: UserListItem) =>\n        isDefined(rowData.costCentre?.name) ? rowData.costCentre?.name : '',\n      filter: true,\n      filterType: 'multiselect',\n      filterMatchMode: 'in',\n      filterConfig: {\n        type: 'multiselect',\n        options: [],\n      },\n    },\n\n    {\n      field: 'timeZoneId',\n      header: 'Timezone',\n      filter: true,\n      filterType: 'text',\n      filterMatchMode: 'contains',\n      transform: 'text-ellipsis',\n    },\n    {\n      field: 'language',\n      header: 'Language',\n      filter: true,\n      filterType: 'text',\n      filterMatchMode: 'contains',\n      transform: 'text-ellipsis',\n    },\n    {\n      field: 'modifiedDate',\n      header: 'Modified',\n      filter: false,\n      valueGetter: (rowData: UserListItem) =>\n        isDefined(rowData.modifiedDate)\n          ? this.measurementDateTimeService.formatDateTime(\n              this.measurementDateTimeService.createDateAssumingUtc(\n                rowData.modifiedDate,\n              ),\n              DATE_FORMATS.DATE_TIME_SECONDS,\n            )\n          : '',\n    },\n  ];\n  columns: GridColumn<UserListItem>[] = [];\n  dataService: GridDataService<UserListItem> = this.usersService;\n  ownerId = '';\n  entityType = 'users';\n\n  getFilters(): Record<string, FilterCriteria> {\n    return this.filterState();\n  }\n\n  clearFilters(): void {\n    this.filterState.set({\n      state: {\n        value: this.defaultStateValues,\n        operator: 'in',\n      },\n    });\n  }\n\n  initialize(params: Record<string, string>): void {\n    this.params = params;\n    let isClientContext = false;\n\n    // Reset columns to the base definition (deep copy to avoid modifying baseColumns)\n    this.columns = cloneDeepWith(this.baseColumns, (value) => {\n      if (typeof value === 'function') {\n        return value;\n      }\n      // Let lodash handle other types\n      return undefined;\n    });\n\n    if (isDefined(this.params['clientId'])) {\n      this.ownerId = String(this.params['clientId']);\n      isClientContext = true;\n    } else if (isDefined(this.params['vendorId'])) {\n      this.ownerId = String(this.params['vendorId']);\n    } else if (isDefined(this.params['distributorId'])) {\n      this.ownerId = String(this.params['distributorId']);\n    } else if (isDefined(this.params['superAdminId'])) {\n      this.ownerId = String(this.params['superAdminId']);\n    }\n\n    if (isClientContext) {\n      // Client context: costCentre column is relevant, load its filter options.\n      this.loadFilterOptions();\n    } else {\n      // Not a client context: remove the costCentre column from the current set.\n      this.columns = this.columns.filter((col) => col.field !== 'costCentre');\n    }\n  }\n\n  getTitle(): string {\n    return 'Users';\n  }\n\n  getRequestParams(event?: TableLazyLoadEvent): DataGridParams {\n    let sortField = 'name:asc'; // Default\n\n    if (isDefined(event?.sortField)) {\n      const sortOrder = event.sortOrder === 1 ? 'asc' : 'desc';\n      sortField = `${event.sortField}:${sortOrder}`;\n    }\n\n    return {\n      owner: this.ownerId,\n      offset: isDefined(event?.first) ? event.first : 0,\n      recurse: false,\n      limit: isDefined(event?.rows) ? event.rows : DEFAULT_PAGE_SIZE,\n      sortField: sortField,\n      filters: this.rqlFilter(),\n    };\n  }\n\n  onFilterChange(field: string, value: FilterValue): void {\n    const actualField = this.fieldTransformations[field] || field;\n    const column = this.columns.find((col) => col.field === field);\n\n    if (Array.isArray(value)) {\n      const newFilters = this.gridBaseService.handleFilters(\n        this.filterState(),\n        actualField,\n        value,\n        undefined,\n        column?.filterMatchMode,\n      );\n\n      this.filterState.set(newFilters);\n      return;\n    }\n\n    // For non-array values, use the grid base service\n    const newFilters = this.gridBaseService.handleFilters(\n      this.filterState(),\n      actualField,\n      value,\n      undefined,\n      column?.filterMatchMode,\n    );\n\n    this.filterState.set(newFilters);\n  }\n\n  private loadFilterOptions(): void {\n    this.entitiesService\n      .listCostCentres(this.ownerId)\n      .pipe(\n        takeUntilDestroyed(this.destroyRef),\n        catchError(() => {\n          return EMPTY;\n        }),\n      )\n      .subscribe((costCentres) => {\n        const costCentreColumn = this.columns.find(\n          (col) => col.field === 'costCentre',\n        );\n        if (costCentreColumn?.filterConfig) {\n          costCentreColumn.filterConfig.options = costCentres.items\n            .map((costCentre) => ({\n              label: costCentre.name ?? '',\n              value: costCentre.id,\n            }))\n            .sort((a, b) => a.label.localeCompare(b.label));\n        }\n      });\n  }\n\n  onAdd(): void {\n    const clientId = this.ownerId;\n\n    this.openUserCreationDialog(clientId).subscribe((createdUser) => {\n      if (isDefined(createdUser)) {\n        // Refresh your user list or take any other necessary actions\n        // this.refreshUsers();\n      }\n    });\n  }\n\n  openUserCreationDialog(ownerId: string) {\n    this.dialogRef = this.dialogService.open(UserCreateWizardComponent, {\n      header: 'User Wizard',\n      contentStyle: { overflow: 'auto' },\n      baseZIndex: 10000,\n      data: { ownerId: ownerId },\n      position: 'top',\n      modal: true,\n    });\n\n    return this.dialogRef.onClose;\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport {\n  AfterViewInit,\n  Component,\n  DestroyRef,\n  inject,\n  OnInit,\n  signal,\n  TemplateRef,\n  ViewChild,\n} from '@angular/core';\nimport { takeUntilDestroyed } from '@angular/core/rxjs-interop';\nimport { ReactiveFormsModule } from '@angular/forms';\n\nimport { ButtonModule } from 'primeng/button';\nimport { DynamicDialogRef, DynamicDialogConfig } from 'primeng/dynamicdialog';\n\nimport {\n  VendorCreateRequest,\n  VendorResponse,\n  AccountsService,\n} from '../../../../../api';\nimport { WizardComponent } from '../../../../../shared/components/wizard/wizard.component';\nimport { isDefined, isNullOrUndefined } from '../../../../../shared/utils';\nimport { Step } from '../../../../../shared/models';\nimport { BroadcastEventMessageService } from '../../../services/broadcast-event-messages.service';\nimport { VendorDetailsComponent } from '../../vendors/vendor-details/vendor-details/vendor-details.component';\nimport { RequestCacheService } from '../../../../../shared/services/request-cache.service';\nimport { catchError, finalize, of } from 'rxjs';\nimport { DEFAULT_SYSTEM_ID } from '../../../../../core/models';\n\n@Component({\n  selector: 'app-distributor-vendor-create-wizard',\n  imports: [\n    CommonModule,\n    ReactiveFormsModule,\n    WizardComponent,\n    ButtonModule,\n    VendorDetailsComponent,\n  ],\n  templateUrl: './distributor-vendor-create-wizard.component.html',\n  styleUrl: './distributor-vendor-create-wizard.component.scss',\n})\nexport class DistributorVendorCreateWizardComponent\n  implements AfterViewInit, OnInit\n{\n  @ViewChild('vendorDetailsStep') vendorDetailsStep!: TemplateRef<{\n    $implicit: Step;\n  }> | null;\n  @ViewChild('confirmationTemplate', { static: true })\n  confirmationTemplate!: TemplateRef<{ $implicit: Step }> | null;\n\n  // References to form components\n  @ViewChild('vendorDetailsForm')\n  vendorDetailsForm!: VendorDetailsComponent;\n\n  private readonly accountsService = inject(AccountsService);\n  private readonly broadcastService = inject(BroadcastEventMessageService);\n  protected readonly destroyRef = inject(DestroyRef);\n  private readonly dialogRef = inject(DynamicDialogRef);\n  private readonly dialogConfig = inject(DynamicDialogConfig);\n  private readonly cacheService = inject(RequestCacheService);\n\n  // Vendor model to collect data across steps\n  newVendor = signal<VendorCreateRequest>({} as VendorCreateRequest);\n\n  // Form validity state\n  formIsValid = signal<boolean>(false);\n\n  displayWizard = false;\n  steps: Step[] = [];\n  previousStepIndex = 0;\n  currentStepIndex = 0;\n  ownerId: string | null = null;\n  companyGroups: { label: string; value: string }[] = [];\n  isSubmitting = signal<boolean>(false);\n\n  ngAfterViewInit() {\n    this.steps = [\n      {\n        value: 1,\n        header: 'Vendor Details',\n        content: this.vendorDetailsStep,\n        complete: false,\n        validate: () => this.vendorDetailsForm.validate(),\n      },\n      {\n        value: 2,\n        header: 'Confirmation',\n        content: this.confirmationTemplate,\n        complete: true,\n      },\n    ];\n  }\n\n  ngOnInit(): void {\n    if (isDefined(this.dialogConfig.data)) {\n      this.ownerId = this.dialogConfig.data.ownerId ?? null;\n\n      // Initialize vendor with ownerId\n      this.newVendor.update((current) => ({\n        ...current,\n        ownerId: this.ownerId ?? '',\n      }));\n\n      this.cacheService\n        .getOrFetch(\n          `company-groups-${this.ownerId}`,\n          () => this.accountsService.listCompanyGroups(this.ownerId as string),\n          300000, // 5 minutes cache TTL\n        )\n        .pipe(\n          takeUntilDestroyed(this.destroyRef),\n          catchError(() => {\n            return of({ items: [] });\n          }),\n        )\n        .subscribe((data) => {\n          this.companyGroups = [\n            { value: DEFAULT_SYSTEM_ID, label: 'None' },\n            ...data.items\n              .map((item) => ({\n                label: item.name ?? '',\n                value: item.id ?? '',\n              }))\n              .sort((a, b) => a.label.localeCompare(b.label)),\n          ];\n        });\n    }\n  }\n\n  openWizard() {\n    this.displayWizard = true;\n    this.newVendor.set({} as VendorCreateRequest);\n  }\n\n  // Form validity handlers\n  onDetailsFormValidityChange(isValid: boolean) {\n    this.steps[0].disableNext = !isValid;\n    this.formIsValid.set(isValid);\n  }\n\n  // Update the vendor state with form data\n  updateVendorDetails(formData: Record<string, unknown>) {\n    this.newVendor.update((current) => {\n      const updated = { ...current };\n\n      Object.keys(formData).forEach((key) => {\n        if (key !== 'ownerId') {\n          updated[key] = formData[key];\n        }\n      });\n\n      if (isNullOrUndefined(updated.ownerId)) {\n        updated.ownerId = this.ownerId ?? '';\n      }\n\n      return updated;\n    });\n  }\n\n  onWizardComplete(): void {\n    // Process the final data from all steps\n    const vendorData = this.newVendor();\n    this.isSubmitting.set(true);\n\n    this.accountsService\n      .createVendor(vendorData)\n      .pipe(\n        takeUntilDestroyed(this.destroyRef),\n        finalize(() => this.isSubmitting.set(false)),\n      )\n      .subscribe({\n        next: (response: VendorResponse) => {\n          this.broadcastService.broadcast('entity-updated', {\n            entityType: 'vendor',\n            operation: 'create',\n            entityId: response.id,\n          });\n          this.broadcastService.broadcast('tree-refresh-required', {\n            entityType: 'vendor',\n            operation: 'create',\n            entityId: response.id,\n          });\n          this.dialogRef.close(response);\n        },\n        error: (error: Error) => {\n          // Handle error, could show message and keep dialog open\n          console.error('Error creating vendor:', error);\n        },\n      });\n  }\n\n  // Update cancel to close dialog with no result\n  onWizardCancel(): void {\n    this.newVendor.set({} as VendorCreateRequest);\n    this.dialogRef.close();\n  }\n\n  getGroupName(groupId: string | null | undefined): string {\n    if (isNullOrUndefined(groupId) || groupId === '') {\n      return 'Not provided';\n    }\n    if (groupId === DEFAULT_SYSTEM_ID) {\n      return 'None';\n    }\n    const group = this.companyGroups.find((g) => g.value === groupId);\n    return isDefined(group) ? group.label : 'Unknown Group';\n  }\n}\n","<app-wizard\n  [contentOnly]=\"true\"\n  [steps]=\"steps\"\n  [showSteps]=\"false\"\n  [useWizardButtonsOnly]=\"true\"\n  [loading]=\"isSubmitting()\"\n  (complete)=\"onWizardComplete()\"\n  (onCancel)=\"onWizardCancel()\"\n>\n</app-wizard>\n\n<!-- Step 1: Vendor Details -->\n<ng-template #vendorDetailsStep let-step>\n  <div class=\"p-fluid\">\n    <app-vendor-details\n      #vendorDetailsForm\n      [createMode]=\"true\"\n      [entity]=\"newVendor()\"\n      [ownerId]=\"ownerId\"\n      (formValidityChange)=\"onDetailsFormValidityChange($event)\"\n      (formValueChange)=\"updateVendorDetails($event)\"\n    ></app-vendor-details>\n  </div>\n</ng-template>\n\n<ng-template #confirmationTemplate let-step>\n  <div class=\"flex gap-6\">\n    <span class=\"pi pi-check !text-5xl\"></span>\n\n    <div class=\"flex-1\">\n      <div class=\"grid\">\n        <!-- Vendor Details Section -->\n        <div class=\"col-12 md:col-6\">\n          <p class=\"mb-4\">\n            You've completed all of the information required and we're ready to\n            create your Vendor.\n          </p>\n\n          <div class=\"space-y-2\">\n            <!-- Each field in a side-by-side layout -->\n            <div class=\"flex\">\n              <div class=\"w-1/3 font-medium\">Name:</div>\n              <div class=\"w-2/3\">{{ newVendor().name || 'Not provided' }}</div>\n            </div>\n\n            <div class=\"flex\">\n              <div class=\"w-1/3 font-medium\">Website:</div>\n              <div class=\"w-2/3\">\n                {{ newVendor().website || 'Not provided' }}\n              </div>\n            </div>\n\n            <div class=\"flex\">\n              <div class=\"w-1/3 font-medium\">Group:</div>\n              <div class=\"w-2/3\">\n                {{ getGroupName(newVendor().group) || 'Not provided' }}\n              </div>\n            </div>\n          </div>\n        </div>\n      </div>\n\n      <div\n        class=\"mt-4 pt-4 border-top-1 border-surface-200 dark:border-surface-700\"\n      >\n        <p class=\"mb-0\">Click finish to create this Vendor.</p>\n      </div>\n    </div>\n  </div>\n</ng-template>\n","import {\n  DestroyRef,\n  Injectable,\n  computed,\n  inject,\n  signal,\n} from '@angular/core';\n\nimport { TableLazyLoadEvent } from 'primeng/table';\n\nimport {\n  GridConfiguration,\n  GridDataService,\n  DataGridParams,\n  GridColumn,\n  FilterCriteria,\n  FilterValue,\n  DATE_FORMATS,\n} from '../../../shared/models';\nimport { UtilityService } from '../../../core/services/utility.service';\nimport { GridBaseService } from '../../../shared/services/grid-base.service';\nimport { isDefined, isNullOrUndefined } from '../../../shared/utils';\nimport { VendorsDataAdapter } from '../services/adapters';\nimport { AccountsService, VendorListItem } from '../../../api';\nimport { DEFAULT_PAGE_SIZE } from '../../../core/models';\nimport { takeUntilDestroyed } from '@angular/core/rxjs-interop';\nimport { catchError, EMPTY } from 'rxjs';\nimport { MeasurementDateTimeService } from '../../../shared/services/measurement-units/measurement-date-time.service';\nimport { DynamicDialogRef, DialogService } from 'primeng/dynamicdialog';\nimport { DistributorVendorCreateWizardComponent } from '../components/distributor-vendors/distributor-vendor-create-wizard/distributor-vendor-create-wizard.component';\nimport { BroadcastEventMessageService } from '../services/broadcast-event-messages.service';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class VendorsGridConfig implements GridConfiguration<VendorListItem> {\n  private readonly vendorsService = inject(VendorsDataAdapter);\n  private readonly utilityService = inject(UtilityService);\n  private readonly gridBaseService = inject(GridBaseService);\n  private readonly accountsService = inject(AccountsService);\n  private readonly measurementDateTimeService = inject(\n    MeasurementDateTimeService,\n  );\n  private dialogRef: DynamicDialogRef | null = null;\n  private readonly dialogService = inject(DialogService);\n  private readonly broadcastService = inject(BroadcastEventMessageService);\n\n  private readonly destroyRef = inject(DestroyRef);\n  private readonly defaultStateValues = [\n    VendorListItem.StateEnum.Active,\n    VendorListItem.StateEnum.Inactive,\n    VendorListItem.StateEnum.Suspended,\n  ];\n  private readonly filterState = signal<Record<string, FilterCriteria>>({\n    state: {\n      value: this.defaultStateValues,\n      operator: 'in',\n    },\n  });\n  private params: Record<string, string> = { distributorId: '' };\n\n  private readonly rqlFilter = computed(() =>\n    this.utilityService.constructRqlFilter(this.filterState()),\n  );\n  private readonly fieldTransformations: Record<string, string> = {\n    type: 'type.id',\n  };\n  private readonly stateLabels: Record<VendorListItem.StateEnum, string> = {\n    active: 'Active',\n    deleted: 'Deleted',\n    inactive: 'Inactive',\n    suspended: 'Suspended',\n  };\n\n  entityType = 'vendors';\n  columns: GridColumn<VendorListItem>[] = [\n    {\n      field: 'name',\n      header: 'Name',\n      filter: true,\n      filterType: 'text',\n      filterMatchMode: 'contains',\n    },\n    {\n      field: 'website',\n      header: 'Website',\n      filter: true,\n      filterType: 'text',\n      filterMatchMode: 'contains',\n    },\n    {\n      field: 'group',\n      header: 'Group',\n      valueGetter: (rowData: VendorListItem) => {\n        if (isNullOrUndefined(rowData.group)) return 'None';\n\n        const value = this.vendorGroupTypes.find(\n          (group) => group.value === rowData.group,\n        )?.label;\n        return value ?? 'None';\n      },\n      filter: true,\n      filterType: 'multiselect',\n      filterMatchMode: 'in',\n      filterConfig: {\n        type: 'multiselect',\n        options: [],\n      },\n    },\n    {\n      field: 'state',\n      header: 'State',\n      valueGetter: (rowData: VendorListItem) =>\n        isDefined(rowData.state) ? this.stateLabels[rowData.state] : '',\n      filter: true,\n      filterType: 'multiselect',\n      filterMatchMode: 'in',\n      filterConfig: {\n        type: 'multiselect',\n        options: [\n          { label: 'Active', value: VendorListItem.StateEnum.Active },\n          { label: 'Deleted', value: VendorListItem.StateEnum.Deleted },\n          { label: 'Inactive', value: VendorListItem.StateEnum.Inactive },\n          { label: 'Suspended', value: VendorListItem.StateEnum.Suspended },\n        ],\n        defaultSelected: this.defaultStateValues,\n      },\n      transform: 'capitalize',\n    },\n    {\n      field: 'clients',\n      header: 'Clients',\n      valueGetter: (rowData: VendorListItem) =>\n        isDefined(rowData.counts?.['client']) ? rowData.counts?.['client'] : 0,\n    },\n    {\n      field: 'assets',\n      header: 'Assets',\n      valueGetter: (rowData: VendorListItem) =>\n        isDefined(rowData.counts?.['asset']) ? rowData.counts?.['asset'] : 0,\n    },\n    {\n      field: 'devices',\n      header: 'Devices',\n      valueGetter: (rowData: VendorListItem) =>\n        isDefined(rowData.counts?.['device']) ? rowData.counts?.['device'] : 0,\n    },\n    {\n      field: 'companion-camera',\n      header: 'Companion Camera Devices',\n      valueGetter: (rowData: VendorListItem) =>\n        isDefined(rowData.counts?.['companionCameraDevice'])\n          ? rowData.counts?.['companionCameraDevice']\n          : 0,\n    },\n    {\n      field: 'users',\n      header: 'Users',\n      valueGetter: (rowData: VendorListItem) =>\n        isDefined(rowData.counts?.['user']) ? rowData.counts?.['user'] : 0,\n    },\n    {\n      field: 'modifiedDate',\n      header: 'Modified',\n      filter: false,\n      valueGetter: (rowData: VendorListItem) =>\n        isDefined(rowData.modifiedDate)\n          ? this.measurementDateTimeService.formatDateTime(\n              this.measurementDateTimeService.createDateAssumingUtc(\n                rowData.modifiedDate,\n              ),\n              DATE_FORMATS.DATE_TIME_SECONDS,\n            )\n          : '',\n    },\n  ];\n\n  dataService: GridDataService<VendorListItem> = this.vendorsService;\n  vendorGroupTypes: { label: string; value: string }[] = [];\n\n  getFilters(): Record<string, FilterCriteria> {\n    return this.filterState();\n  }\n\n  clearFilters(): void {\n    this.filterState.set({\n      state: {\n        value: this.defaultStateValues,\n        operator: 'in',\n      },\n    });\n  }\n\n  initialize(params: Record<string, string>): void {\n    this.params = params;\n    this.loadFilterOptions();\n  }\n\n  getTitle(): string {\n    return 'Vendors';\n  }\n\n  getRequestParams(event?: TableLazyLoadEvent): DataGridParams {\n    // Add sorting support\n    let sortField = 'name:asc'; // Default\n\n    if (isDefined(event?.sortField)) {\n      const sortOrder = event.sortOrder === 1 ? 'asc' : 'desc';\n      sortField = `${event.sortField}:${sortOrder}`;\n    }\n\n    return {\n      owner: this.params['distributorId'],\n      offset: isDefined(event?.first) ? event.first : 0,\n      recurse: false,\n      limit: isDefined(event?.rows) ? event.rows : DEFAULT_PAGE_SIZE,\n      sortField: sortField,\n      filters: this.rqlFilter(),\n      counts: 'client,asset,device,companion-camera,user',\n    };\n  }\n\n  onFilterChange(field: string, value: FilterValue): void {\n    const actualField = this.fieldTransformations[field] || field;\n    const column = this.columns.find((col) => col.field === field);\n\n    const newFilters = this.gridBaseService.handleFilters(\n      this.filterState(),\n      actualField,\n      value,\n      undefined,\n      column?.filterMatchMode,\n    );\n\n    this.filterState.set(newFilters);\n\n    // If state filter changes, notify the tree to refresh with appropriate filter\n    if (field === 'state') {\n      const includeDeleted =\n        Array.isArray(value) &&\n        value.includes(VendorListItem.StateEnum.Deleted);\n\n      // Broadcast filter change event for tree\n      this.broadcastService.broadcast('vendor-filter-changed', {\n        distributorId: this.params['distributorId'],\n        includeDeleted,\n      });\n    }\n  }\n\n  private loadFilterOptions(): void {\n    this.accountsService\n      .listCompanyGroups(this.params['distributorId'])\n      .pipe(\n        takeUntilDestroyed(this.destroyRef),\n        catchError(() => {\n          return EMPTY;\n        }),\n      )\n      .subscribe((groups) => {\n        const typeColumn = this.columns.find((col) => col.field === 'group');\n        if (typeColumn?.filterConfig) {\n          this.vendorGroupTypes = groups.items\n            .map((type) => ({\n              label: type.name ?? '',\n              value: type.id,\n            }))\n            .sort((a, b) => a.label.localeCompare(b.label));\n          typeColumn.filterConfig.options = this.vendorGroupTypes;\n        }\n      });\n  }\n\n  onAdd(): void {\n    const ownerId = this.params['distributorId'];\n\n    this.openVendorCreationDialog(ownerId).subscribe();\n  }\n\n  openVendorCreationDialog(ownerId: string) {\n    this.dialogRef = this.dialogService.open(\n      DistributorVendorCreateWizardComponent,\n      {\n        header: 'Vendor Wizard',\n        contentStyle: { overflow: 'auto' },\n        baseZIndex: 10000,\n        data: { ownerId: ownerId },\n        position: 'top',\n        modal: true,\n      },\n    );\n\n    return this.dialogRef.onClose;\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport {\n  AfterViewInit,\n  ChangeDetectorRef,\n  Component,\n  DestroyRef,\n  inject,\n  OnInit,\n  signal,\n  TemplateRef,\n  ViewChild,\n} from '@angular/core';\nimport { takeUntilDestroyed } from '@angular/core/rxjs-interop';\nimport { ReactiveFormsModule } from '@angular/forms';\n\nimport { ButtonModule } from 'primeng/button';\nimport { DynamicDialogRef, DynamicDialogConfig } from 'primeng/dynamicdialog';\n\nimport {\n  ClientCreateRequest,\n  ClientResponse,\n  AccountsService,\n} from '../../../../../api';\nimport { WizardComponent } from '../../../../../shared/components/wizard/wizard.component';\nimport { isDefined, isNullOrUndefined } from '../../../../../shared/utils';\nimport { Step } from '../../../../../shared/models';\nimport { BroadcastEventMessageService } from '../../../services/broadcast-event-messages.service';\nimport { ClientDetailsComponent } from '../../clients/client-details/client-details/client-details.component';\nimport { RequestCacheService } from '../../../../../shared/services/request-cache.service';\nimport { catchError, finalize, of } from 'rxjs';\nimport { DEFAULT_SYSTEM_ID } from '../../../../../core/models';\n\n@Component({\n  selector: 'app-vendor-client-create-wizard',\n  imports: [\n    CommonModule,\n    ReactiveFormsModule,\n    WizardComponent,\n    ButtonModule,\n    ClientDetailsComponent,\n  ],\n  templateUrl: './vendor-client-create-wizard.component.html',\n  styleUrl: './vendor-client-create-wizard.component.scss',\n})\nexport class VendorClientCreateWizardComponent\n  implements AfterViewInit, OnInit\n{\n  @ViewChild('clientDetailsStep') clientDetailsStep!: TemplateRef<{\n    $implicit: Step;\n  }> | null;\n  @ViewChild('confirmationTemplate', { static: true })\n  confirmationTemplate!: TemplateRef<{ $implicit: Step }> | null;\n\n  // References to form components\n  @ViewChild('clientDetailsForm')\n  clientDetailsForm!: ClientDetailsComponent;\n\n  private readonly accountsService = inject(AccountsService);\n  private readonly broadcastService = inject(BroadcastEventMessageService);\n  protected readonly destroyRef = inject(DestroyRef);\n  private readonly dialogRef = inject(DynamicDialogRef);\n  private readonly dialogConfig = inject(DynamicDialogConfig);\n  private readonly cacheService = inject(RequestCacheService);\n  private readonly cdr = inject(ChangeDetectorRef);\n\n  // Client model to collect data across steps\n  newClient = signal<ClientCreateRequest>({} as ClientCreateRequest);\n\n  // Form validity state\n  formIsValid = signal<boolean>(false);\n\n  displayWizard = false;\n  steps: Step[] = [];\n  previousStepIndex = 0;\n  currentStepIndex = 0;\n  ownerId: string | null = null;\n  companyGroups: { label: string; value: string }[] = [];\n  isSubmitting = signal<boolean>(false);\n\n  ngAfterViewInit() {\n    this.steps = [\n      {\n        value: 1,\n        header: 'Client Details',\n        content: this.clientDetailsStep,\n        complete: false,\n        validate: () => this.clientDetailsForm.validate(),\n      },\n      {\n        value: 2,\n        header: 'Confirmation',\n        content: this.confirmationTemplate,\n        complete: true,\n      },\n    ];\n    this.cdr.detectChanges();\n  }\n\n  ngOnInit(): void {\n    if (isDefined(this.dialogConfig.data)) {\n      this.ownerId = this.dialogConfig.data.ownerId ?? null;\n\n      // Initialize client with ownerId\n      this.newClient.update((current) => ({\n        ...current,\n        ownerId: this.ownerId ?? '',\n      }));\n\n      this.cacheService\n        .getOrFetch(\n          `company-groups-${this.ownerId}`,\n          () => this.accountsService.listCompanyGroups(this.ownerId as string),\n          300000, // 5 minutes cache TTL\n        )\n        .pipe(\n          takeUntilDestroyed(this.destroyRef),\n          catchError(() => {\n            return of({ items: [] });\n          }),\n        )\n        .subscribe((data) => {\n          this.companyGroups = [\n            { value: DEFAULT_SYSTEM_ID, label: 'None' },\n            ...data.items\n              .map((item) => ({\n                label: item.name ?? '',\n                value: item.id ?? '',\n              }))\n              .sort((a, b) => a.label.localeCompare(b.label)),\n          ];\n        });\n    }\n  }\n\n  openWizard() {\n    this.displayWizard = true;\n    this.newClient.set({} as ClientCreateRequest);\n  }\n\n  // Form validity handlers\n  onDetailsFormValidityChange(isValid: boolean) {\n    this.steps[0].disableNext = !isValid;\n    this.formIsValid.set(isValid);\n  }\n\n  // Update the client state with form data\n  updateClientDetails(formData: Record<string, unknown>) {\n    this.newClient.update((current) => {\n      const updated = { ...current };\n\n      Object.keys(formData).forEach((key) => {\n        if (key !== 'ownerId') {\n          updated[key] = formData[key];\n        }\n      });\n\n      if (isNullOrUndefined(updated.ownerId)) {\n        updated.ownerId = this.ownerId ?? '';\n      }\n\n      return updated;\n    });\n  }\n\n  onWizardComplete(): void {\n    // Process the final data from all steps\n    const clientData = this.newClient();\n    this.isSubmitting.set(true);\n\n    this.accountsService\n      .createClient(clientData)\n      .pipe(\n        takeUntilDestroyed(this.destroyRef),\n        finalize(() => this.isSubmitting.set(false)),\n      )\n      .subscribe({\n        next: (response: ClientResponse) => {\n          this.broadcastService.broadcast('entity-updated', {\n            entityType: 'client',\n            operation: 'create',\n            entityId: response.id,\n          });\n          this.broadcastService.broadcast('tree-refresh-required', {\n            entityType: 'client',\n            operation: 'create',\n            entityId: response.id,\n          });\n          this.dialogRef.close(response);\n        },\n        error: (error: Error) => {\n          // Handle error, could show message and keep dialog open\n          console.error('Error creating client:', error);\n        },\n      });\n  }\n\n  // Update cancel to close dialog with no result\n  onWizardCancel(): void {\n    this.newClient.set({} as ClientCreateRequest);\n    this.dialogRef.close();\n  }\n\n  getGroupName(groupId: string | null | undefined): string {\n    if (isNullOrUndefined(groupId) || groupId === '') {\n      return 'Not provided';\n    }\n    if (groupId === DEFAULT_SYSTEM_ID) {\n      return 'None';\n    }\n    const group = this.companyGroups.find((g) => g.value === groupId);\n    return isDefined(group) ? group.label : 'Unknown Group';\n  }\n}\n","<app-wizard\n  [contentOnly]=\"true\"\n  [steps]=\"steps\"\n  [showSteps]=\"false\"\n  [useWizardButtonsOnly]=\"true\"\n  [loading]=\"isSubmitting()\"\n  (complete)=\"onWizardComplete()\"\n  (onCancel)=\"onWizardCancel()\"\n>\n</app-wizard>\n\n<!-- Step 1: Client Details -->\n<ng-template #clientDetailsStep let-step>\n  <div class=\"p-fluid\">\n    <app-client-details\n      #clientDetailsForm\n      [createMode]=\"true\"\n      [entity]=\"newClient()\"\n      [ownerId]=\"ownerId\"\n      (formValidityChange)=\"onDetailsFormValidityChange($event)\"\n      (formValueChange)=\"updateClientDetails($event)\"\n    ></app-client-details>\n  </div>\n</ng-template>\n\n<ng-template #confirmationTemplate let-step>\n  <div class=\"flex gap-6\">\n    <span class=\"pi pi-check !text-5xl\"></span>\n\n    <div class=\"flex-1\">\n      <div class=\"grid\">\n        <!-- Client Details Section -->\n        <div class=\"col-12 md:col-6\">\n          <p class=\"mb-4\">\n            You've completed all of the information required and we're ready to\n            create your Client.\n          </p>\n\n          <div class=\"space-y-2\">\n            <!-- Each field in a side-by-side layout -->\n            <div class=\"flex\">\n              <div class=\"w-1/3 font-medium\">Name:</div>\n              <div class=\"w-2/3\">{{ newClient().name || 'Not provided' }}</div>\n            </div>\n\n            <div class=\"flex\">\n              <div class=\"w-1/3 font-medium\">Website:</div>\n              <div class=\"w-2/3\">\n                {{ newClient().website || 'Not provided' }}\n              </div>\n            </div>\n\n            <div class=\"flex\">\n              <div class=\"w-1/3 font-medium\">Group:</div>\n              <div class=\"w-2/3\">\n                {{ getGroupName(newClient().group) || 'Not provided' }}\n              </div>\n            </div>\n          </div>\n        </div>\n      </div>\n\n      <div\n        class=\"mt-4 pt-4 border-top-1 border-surface-200 dark:border-surface-700\"\n      >\n        <p class=\"mb-0\">Click finish to create this Client.</p>\n      </div>\n    </div>\n  </div>\n</ng-template>\n","import {\n  DestroyRef,\n  Injectable,\n  computed,\n  inject,\n  signal,\n} from '@angular/core';\n\nimport { TableLazyLoadEvent } from 'primeng/table';\n\nimport {\n  GridConfiguration,\n  GridDataService,\n  DataGridParams,\n  GridColumn,\n  FilterCriteria,\n  FilterValue,\n  DATE_FORMATS,\n} from '../../../shared/models';\nimport { UtilityService } from '../../../core/services/utility.service';\nimport { GridBaseService } from '../../../shared/services/grid-base.service';\nimport { isDefined, isNullOrUndefined } from '../../../shared/utils';\nimport { ClientsDataAdapter } from '../services/adapters';\nimport { AccountsService, ClientListItem } from '../../../api';\nimport { DEFAULT_PAGE_SIZE } from '../../../core/models';\nimport { takeUntilDestroyed } from '@angular/core/rxjs-interop';\nimport { catchError, EMPTY } from 'rxjs';\nimport { MeasurementDateTimeService } from '../../../shared/services/measurement-units/measurement-date-time.service';\nimport { DynamicDialogRef, DialogService } from 'primeng/dynamicdialog';\nimport { VendorClientCreateWizardComponent } from '../components/vendor-clients/vendor-client-create-wizard/vendor-client-create-wizard.component';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class ClientsGridConfig implements GridConfiguration<ClientListItem> {\n  private readonly clientsService = inject(ClientsDataAdapter);\n  private readonly utilityService = inject(UtilityService);\n  private readonly gridBaseService = inject(GridBaseService);\n  private readonly accountsService = inject(AccountsService);\n  private readonly measurementDateTimeService = inject(\n    MeasurementDateTimeService,\n  );\n  private dialogRef: DynamicDialogRef | null = null;\n  private readonly dialogService = inject(DialogService);\n\n  private readonly destroyRef = inject(DestroyRef);\n  private readonly defaultStateValues = [\n    ClientListItem.StateEnum.Active,\n    ClientListItem.StateEnum.Inactive,\n    ClientListItem.StateEnum.Suspended,\n  ];\n  private readonly filterState = signal<Record<string, FilterCriteria>>({\n    state: {\n      value: this.defaultStateValues,\n      operator: 'in',\n    },\n  });\n  private params: Record<string, string> = { vendorId: '' };\n\n  private readonly rqlFilter = computed(() =>\n    this.utilityService.constructRqlFilter(this.filterState()),\n  );\n\n  private readonly stateLabels: Record<ClientListItem.StateEnum, string> = {\n    active: 'Active',\n    deleted: 'Deleted',\n    inactive: 'Inactive',\n    suspended: 'Suspended',\n  };\n\n  entityType = 'clients';\n  columns: GridColumn<ClientListItem>[] = [\n    {\n      field: 'name',\n      header: 'Name',\n      filter: true,\n      filterType: 'text',\n      filterMatchMode: 'contains',\n    },\n    {\n      field: 'website',\n      header: 'Website',\n      filter: true,\n      filterType: 'text',\n      filterMatchMode: 'contains',\n    },\n    {\n      field: 'group',\n      header: 'Group',\n      valueGetter: (rowData: ClientListItem) => {\n        if (isNullOrUndefined(rowData.group)) return 'None';\n\n        const value = this.clientGroupTypes.find(\n          (group) => group.value === rowData.group,\n        )?.label;\n        return value ?? 'None';\n      },\n      filter: true,\n      filterType: 'multiselect',\n      filterMatchMode: 'in',\n      filterConfig: {\n        type: 'multiselect',\n        options: [],\n      },\n    },\n    {\n      field: 'state',\n      header: 'State',\n      valueGetter: (rowData: ClientListItem) =>\n        isDefined(rowData.state) ? this.stateLabels[rowData.state] : '',\n      filter: true,\n      filterType: 'multiselect',\n      filterMatchMode: 'in',\n      filterConfig: {\n        type: 'multiselect',\n        options: [\n          { label: 'Active', value: ClientListItem.StateEnum.Active },\n          { label: 'Deleted', value: ClientListItem.StateEnum.Deleted },\n          { label: 'Inactive', value: ClientListItem.StateEnum.Inactive },\n          { label: 'Suspended', value: ClientListItem.StateEnum.Suspended },\n        ],\n        defaultSelected: this.defaultStateValues,\n      },\n      transform: 'capitalize',\n    },\n    {\n      field: 'assets',\n      header: 'Assets',\n      valueGetter: (rowData: ClientListItem) =>\n        isDefined(rowData.counts?.['asset']) ? rowData.counts?.['asset'] : 0,\n    },\n    {\n      field: 'devices',\n      header: 'Devices',\n      valueGetter: (rowData: ClientListItem) =>\n        isDefined(rowData.counts?.['device']) ? rowData.counts?.['device'] : 0,\n    },\n    {\n      field: 'companion-camera',\n      header: 'Companion Camera Devices',\n      valueGetter: (rowData: ClientListItem) =>\n        isDefined(rowData.counts?.['companion-camera'])\n          ? rowData.counts?.['companion-camera']\n          : 0,\n    },\n    {\n      field: 'users',\n      header: 'Users',\n      valueGetter: (rowData: ClientListItem) =>\n        isDefined(rowData.counts?.['user']) ? rowData.counts?.['user'] : 0,\n    },\n    {\n      field: 'modifiedDate',\n      header: 'Modified',\n      filter: false,\n      valueGetter: (rowData: ClientListItem) =>\n        isDefined(rowData.modifiedDate)\n          ? this.measurementDateTimeService.formatDateTime(\n              this.measurementDateTimeService.createDateAssumingUtc(\n                rowData.modifiedDate,\n              ),\n              DATE_FORMATS.DATE_TIME_SECONDS,\n            )\n          : '',\n    },\n  ];\n\n  dataService: GridDataService<ClientListItem> = this.clientsService;\n  clientGroupTypes: { label: string; value: string }[] = [];\n\n  getFilters(): Record<string, FilterCriteria> {\n    return this.filterState();\n  }\n\n  clearFilters(): void {\n    this.filterState.set({\n      state: {\n        value: this.defaultStateValues,\n        operator: 'in',\n      },\n    });\n  }\n\n  initialize(params: Record<string, string>): void {\n    this.params = params;\n    this.loadFilterOptions();\n  }\n\n  getTitle(): string {\n    return 'Clients';\n  }\n\n  getRequestParams(event?: TableLazyLoadEvent): DataGridParams {\n    // Add sorting support\n    let sortField = 'name:asc'; // Default\n\n    if (isDefined(event?.sortField)) {\n      const sortOrder = event.sortOrder === 1 ? 'asc' : 'desc';\n      sortField = `${event.sortField}:${sortOrder}`;\n    }\n\n    return {\n      owner: this.params['vendorId'],\n      offset: isDefined(event?.first) ? event.first : 0,\n      recurse: false,\n      limit: isDefined(event?.rows) ? event.rows : DEFAULT_PAGE_SIZE,\n      sortField: sortField,\n      filters: this.rqlFilter(),\n      counts: 'asset,device,companion-camera,user',\n    };\n  }\n\n  onFilterChange(field: string, value: FilterValue): void {\n    const actualField = field;\n    const column = this.columns.find((col) => col.field === field);\n\n    if (Array.isArray(value)) {\n      const newFilters = this.gridBaseService.handleFilters(\n        this.filterState(),\n        actualField,\n        value,\n        undefined,\n        column?.filterMatchMode,\n      );\n\n      this.filterState.set(newFilters);\n      return;\n    }\n\n    const newFilters = this.gridBaseService.handleFilters(\n      this.filterState(),\n      actualField,\n      value,\n      undefined,\n      column?.filterMatchMode,\n    );\n\n    this.filterState.set(newFilters);\n  }\n\n  private loadFilterOptions(): void {\n    this.accountsService\n      .listCompanyGroups(this.params['vendorId'])\n      .pipe(\n        takeUntilDestroyed(this.destroyRef),\n        catchError(() => {\n          return EMPTY;\n        }),\n      )\n      .subscribe((groups) => {\n        const typeColumn = this.columns.find((col) => col.field === 'type');\n        if (typeColumn?.filterConfig) {\n          this.clientGroupTypes = groups.items\n            .map((type) => ({\n              label: type.name ?? '',\n              value: type.id,\n            }))\n            .sort((a, b) => a.label.localeCompare(b.label));\n          typeColumn.filterConfig.options = this.clientGroupTypes;\n        }\n      });\n  }\n\n  onAdd(): void {\n    const ownerId = this.params['vendorId'];\n\n    this.openClientCreationDialog(ownerId).subscribe((createdClient) => {\n      if (isDefined(createdClient)) {\n        // Refresh your client list or take any other necessary actions\n        // this.refreshClients();\n      }\n    });\n  }\n\n  openClientCreationDialog(ownerId: string) {\n    this.dialogRef = this.dialogService.open(\n      VendorClientCreateWizardComponent,\n      {\n        header: 'Client Wizard',\n        contentStyle: { overflow: 'auto' },\n        baseZIndex: 10000,\n        data: { ownerId: ownerId },\n        position: 'top',\n        modal: true,\n      },\n    );\n\n    return this.dialogRef.onClose;\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport {\n  AfterViewInit,\n  ChangeDetectorRef,\n  Component,\n  DestroyRef,\n  inject,\n  OnInit,\n  signal,\n  TemplateRef,\n  ViewChild,\n} from '@angular/core';\nimport { takeUntilDestroyed } from '@angular/core/rxjs-interop';\n\nimport { ButtonModule } from 'primeng/button';\nimport { DynamicDialogRef, DynamicDialogConfig } from 'primeng/dynamicdialog';\n\nimport {\n  AccountsService,\n  DistributorCreateRequest,\n  DistributorResponse,\n} from '../../../../../api';\nimport { WizardComponent } from '../../../../../shared/components/wizard/wizard.component';\nimport { isDefined, isNullOrUndefined } from '../../../../../shared/utils';\nimport { BroadcastEventMessageService } from '../../../services/broadcast-event-messages.service';\nimport { DistributorDetailsComponent } from '../../distributors/distributor-details/distributor-details/distributor-details.component';\nimport { Step } from '../../../../../shared/models';\nimport { finalize } from 'rxjs';\n\n@Component({\n  selector: 'app-super-admin-distributors-create-wizard',\n  imports: [\n    CommonModule,\n    WizardComponent,\n    ButtonModule,\n    DistributorDetailsComponent,\n  ],\n  templateUrl: './super-admin-distributors-create-wizard.component.html',\n  styleUrl: './super-admin-distributors-create-wizard.component.scss',\n})\nexport class SuperAdminDistributorsCreateWizardComponent\n  implements AfterViewInit, OnInit\n{\n  @ViewChild('distributorDetailsStep') distributorDetailsStep!: TemplateRef<{\n    $implicit: Step;\n  }> | null;\n  @ViewChild('confirmationTemplate', { static: true })\n  confirmationTemplate!: TemplateRef<{ $implicit: Step }> | null;\n\n  // References to form components\n  @ViewChild('distributorDetailsForm')\n  distributorDetailsForm!: DistributorDetailsComponent;\n\n  private readonly accountsService = inject(AccountsService);\n  private readonly broadcastService = inject(BroadcastEventMessageService);\n  protected readonly destroyRef = inject(DestroyRef);\n  private readonly dialogRef = inject(DynamicDialogRef);\n  private readonly dialogConfig = inject(DynamicDialogConfig);\n  private readonly cdr = inject(ChangeDetectorRef);\n\n  // Distributor model to collect data across steps\n  newDistributor = signal<DistributorCreateRequest>(\n    {} as DistributorCreateRequest,\n  );\n\n  // Form validity state\n  formIsValid = signal<boolean>(false);\n\n  steps: Step[] = [];\n  ownerId: string | null = null;\n  isSubmitting = signal<boolean>(false);\n\n  ngAfterViewInit() {\n    this.steps = [\n      {\n        value: 1,\n        header: 'Distributor Details',\n        content: this.distributorDetailsStep,\n        complete: false,\n        validate: () => this.distributorDetailsForm.validate(),\n      },\n      {\n        value: 2,\n        header: 'Confirmation',\n        content: this.confirmationTemplate,\n        complete: true,\n      },\n    ];\n    this.cdr.detectChanges();\n  }\n\n  ngOnInit(): void {\n    if (isDefined(this.dialogConfig.data)) {\n      this.ownerId = this.dialogConfig.data.ownerId ?? null;\n\n      // Initialize distributor with ownerId\n      this.newDistributor.update((current) => ({\n        ...current,\n        ownerId: this.ownerId ?? '',\n      }));\n    }\n  }\n\n  openWizard() {\n    this.newDistributor.set({} as DistributorCreateRequest);\n  }\n\n  // Form validity handlers\n  onDetailsFormValidityChange(isValid: boolean) {\n    this.steps[0].disableNext = !isValid;\n    this.formIsValid.set(isValid);\n  }\n\n  // Update the distributor state with form data\n  updateDistributorDetails(formData: Record<string, unknown>) {\n    this.newDistributor.update((current) => {\n      const updated = { ...current };\n\n      Object.keys(formData).forEach((key) => {\n        if (key !== 'ownerId') {\n          updated[key] = formData[key];\n        }\n      });\n\n      if (isNullOrUndefined(updated.ownerId)) {\n        updated.ownerId = this.ownerId ?? '';\n      }\n\n      return updated;\n    });\n  }\n\n  onWizardComplete(): void {\n    // Process the final data from all steps\n    const distributorData = this.newDistributor();\n    this.isSubmitting.set(true);\n\n    this.accountsService\n      .createDistributor(distributorData)\n      .pipe(\n        takeUntilDestroyed(this.destroyRef),\n        finalize(() => this.isSubmitting.set(false)),\n      )\n      .subscribe({\n        next: (response: DistributorResponse) => {\n          this.broadcastService.broadcast('entity-updated', {\n            entityType: 'distributor',\n            operation: 'create',\n            entityId: response.id,\n          });\n          this.broadcastService.broadcast('tree-refresh-required', {\n            entityType: 'distributor',\n            operation: 'create',\n            entityId: response.id,\n          });\n          this.dialogRef.close(response);\n        },\n        error: (error: Error) => {\n          // Handle error, could show message and keep dialog open\n          console.error('Error creating distributor:', error);\n        },\n      });\n  }\n\n  // Update cancel to close dialog with no result\n  onWizardCancel(): void {\n    this.newDistributor.set({} as DistributorCreateRequest);\n    this.dialogRef.close();\n  }\n}\n","<app-wizard\n  [contentOnly]=\"true\"\n  [steps]=\"steps\"\n  [showSteps]=\"false\"\n  [useWizardButtonsOnly]=\"true\"\n  [loading]=\"isSubmitting()\"\n  (complete)=\"onWizardComplete()\"\n  (onCancel)=\"onWizardCancel()\"\n>\n</app-wizard>\n\n<!-- Step 1: Distributor Details -->\n<ng-template #distributorDetailsStep let-step>\n  <div class=\"p-fluid\">\n    <app-distributor-details\n      #distributorDetailsForm\n      [createMode]=\"true\"\n      [entity]=\"newDistributor()\"\n      [ownerId]=\"ownerId\"\n      (formValidityChange)=\"onDetailsFormValidityChange($event)\"\n      (formValueChange)=\"updateDistributorDetails($event)\"\n    ></app-distributor-details>\n  </div>\n</ng-template>\n\n<ng-template #confirmationTemplate let-step>\n  <div class=\"flex gap-6\">\n    <span class=\"pi pi-check !text-5xl\"></span>\n\n    <div class=\"flex-1\">\n      <div class=\"grid\">\n        <!-- Distributor Details Section -->\n        <div class=\"col-12 md:col-6\">\n          <p class=\"mb-4\">\n            You've completed all of the information required and we're ready to\n            create your Distributor.\n          </p>\n\n          <div class=\"space-y-2\">\n            <!-- Each field in a side-by-side layout -->\n            <div class=\"flex\">\n              <div class=\"w-1/3 font-medium\">Name:</div>\n              <div class=\"w-2/3\">\n                {{ newDistributor().name || 'Not provided' }}\n              </div>\n            </div>\n\n            <div class=\"flex\">\n              <div class=\"w-1/3 font-medium\">Website:</div>\n              <div class=\"w-2/3\">\n                {{ newDistributor().website || 'Not provided' }}\n              </div>\n            </div>\n\n            <div class=\"flex\">\n              <div class=\"w-1/3 font-medium\">Tags:</div>\n              <div class=\"w-2/3\">\n                {{ newDistributor().tags?.toString() || 'Not provided' }}\n              </div>\n            </div>\n          </div>\n        </div>\n      </div>\n\n      <div\n        class=\"mt-4 pt-4 border-top-1 border-surface-200 dark:border-surface-700\"\n      >\n        <p class=\"mb-0\">Click finish to create this Distributor.</p>\n      </div>\n    </div>\n  </div>\n</ng-template>\n","import { Injectable, computed, inject, signal } from '@angular/core';\n\nimport { TableLazyLoadEvent } from 'primeng/table';\n\nimport {\n  GridConfiguration,\n  GridDataService,\n  DataGridParams,\n  GridColumn,\n  FilterCriteria,\n  FilterValue,\n  DATE_FORMATS,\n} from '../../../shared/models';\nimport { UtilityService } from '../../../core/services/utility.service';\nimport { GridBaseService } from '../../../shared/services/grid-base.service';\nimport { isDefined } from '../../../shared/utils';\nimport { DistributorsDataAdapter } from '../services/adapters';\nimport { DistributorListItem } from '../../../api';\nimport { DEFAULT_PAGE_SIZE, DEFAULT_SYSTEM_ID } from '../../../core/models';\nimport { MeasurementDateTimeService } from '../../../shared/services/measurement-units/measurement-date-time.service';\nimport { DynamicDialogRef, DialogService } from 'primeng/dynamicdialog';\nimport { SuperAdminDistributorsCreateWizardComponent } from '../components/super-admin-distributors/super-admin-distributors-create-wizard/super-admin-distributors-create-wizard.component';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class DistributorsGridConfig\n  implements GridConfiguration<DistributorListItem>\n{\n  private readonly distributorsService = inject(DistributorsDataAdapter);\n  private readonly utilityService = inject(UtilityService);\n  private readonly gridBaseService = inject(GridBaseService);\n  private readonly measurementDateTimeService = inject(\n    MeasurementDateTimeService,\n  );\n  private dialogRef: DynamicDialogRef | null = null;\n  private readonly dialogService = inject(DialogService);\n\n  private readonly defaultStateValues = [\n    DistributorListItem.StateEnum.Active,\n    DistributorListItem.StateEnum.Inactive,\n    DistributorListItem.StateEnum.Suspended,\n  ];\n  private readonly filterState = signal<Record<string, FilterCriteria>>({\n    state: {\n      value: this.defaultStateValues,\n      operator: 'in',\n    },\n  });\n  private params: Record<string, string> = {};\n\n  private readonly rqlFilter = computed(() =>\n    this.utilityService.constructRqlFilter(this.filterState()),\n  );\n\n  private readonly stateLabels: Record<DistributorListItem.StateEnum, string> =\n    {\n      active: 'Active',\n      deleted: 'Deleted',\n      inactive: 'Inactive',\n      suspended: 'Suspended',\n    };\n\n  entityType = 'distributors';\n  columns: GridColumn<DistributorListItem>[] = [\n    {\n      field: 'name',\n      header: 'Name',\n      filter: true,\n      filterType: 'text',\n      filterMatchMode: 'contains',\n    },\n    {\n      field: 'website',\n      header: 'Website',\n      filter: true,\n      filterType: 'text',\n      filterMatchMode: 'contains',\n    },\n    {\n      field: 'state',\n      header: 'State',\n      valueGetter: (rowData: DistributorListItem) =>\n        isDefined(rowData.state) ? this.stateLabels[rowData.state] : '',\n      filter: true,\n      filterType: 'multiselect',\n      filterMatchMode: 'in',\n      filterConfig: {\n        type: 'multiselect',\n        options: [\n          { label: 'Active', value: DistributorListItem.StateEnum.Active },\n          { label: 'Deleted', value: DistributorListItem.StateEnum.Deleted },\n          { label: 'Inactive', value: DistributorListItem.StateEnum.Inactive },\n          {\n            label: 'Suspended',\n            value: DistributorListItem.StateEnum.Suspended,\n          },\n        ],\n        defaultSelected: this.defaultStateValues,\n      },\n      transform: 'capitalize',\n    },\n    {\n      field: 'vendor',\n      header: 'Vendors',\n      valueGetter: (rowData: DistributorListItem) =>\n        isDefined(rowData.counts?.['vendor']) ? rowData.counts?.['vendor'] : 0,\n    },\n    {\n      field: 'clients',\n      header: 'Clients',\n      valueGetter: (rowData: DistributorListItem) =>\n        isDefined(rowData.counts?.['client']) ? rowData.counts?.['client'] : 0,\n    },\n    {\n      field: 'assets',\n      header: 'Assets',\n      valueGetter: (rowData: DistributorListItem) =>\n        isDefined(rowData.counts?.['asset']) ? rowData.counts?.['asset'] : 0,\n    },\n    {\n      field: 'devices',\n      header: 'Devices',\n      valueGetter: (rowData: DistributorListItem) =>\n        isDefined(rowData.counts?.['device']) ? rowData.counts?.['device'] : 0,\n    },\n    {\n      field: 'companion-camera',\n      header: 'Companion Camera Devices',\n      valueGetter: (rowData: DistributorListItem) =>\n        isDefined(rowData.counts?.['companion-camera'])\n          ? rowData.counts?.['companion-camera']\n          : 0,\n    },\n    {\n      field: 'users',\n      header: 'Users',\n      valueGetter: (rowData: DistributorListItem) =>\n        isDefined(rowData.counts?.['user']) ? rowData.counts?.['user'] : 0,\n    },\n    {\n      field: 'modifiedDate',\n      header: 'Modified',\n      filter: false,\n      valueGetter: (rowData: DistributorListItem) =>\n        isDefined(rowData.modifiedDate)\n          ? this.measurementDateTimeService.formatDateTime(\n              this.measurementDateTimeService.createDateAssumingUtc(\n                rowData.modifiedDate,\n              ),\n              DATE_FORMATS.DATE_TIME_SECONDS,\n            )\n          : '',\n    },\n  ];\n\n  dataService: GridDataService<DistributorListItem> = this.distributorsService;\n  distributorGroupTypes: { label: string; value: string }[] = [];\n\n  getFilters(): Record<string, FilterCriteria> {\n    return this.filterState();\n  }\n\n  clearFilters(): void {\n    this.filterState.set({\n      state: {\n        value: this.defaultStateValues,\n        operator: 'in',\n      },\n    });\n  }\n\n  initialize(params: Record<string, string>): void {\n    this.params = params;\n  }\n\n  getTitle(): string {\n    return 'Distributors';\n  }\n\n  getRequestParams(event?: TableLazyLoadEvent): DataGridParams {\n    // Add sorting support\n    let sortField = 'name:asc'; // Default\n\n    if (isDefined(event?.sortField)) {\n      const sortOrder = event.sortOrder === 1 ? 'asc' : 'desc';\n      sortField = `${event.sortField}:${sortOrder}`;\n    }\n\n    return {\n      owner: DEFAULT_SYSTEM_ID,\n      offset: isDefined(event?.first) ? event.first : 0,\n      recurse: false,\n      limit: isDefined(event?.rows) ? event.rows : DEFAULT_PAGE_SIZE,\n      sortField: sortField,\n      filters: this.rqlFilter(),\n      counts: 'vendor,client,asset,device,companion-camera,user',\n    };\n  }\n\n  onFilterChange(field: string, value: FilterValue): void {\n    const actualField = field;\n    const column = this.columns.find((col) => col.field === field);\n\n    if (Array.isArray(value)) {\n      const newFilters = this.gridBaseService.handleFilters(\n        this.filterState(),\n        actualField,\n        value,\n        undefined,\n        column?.filterMatchMode,\n      );\n\n      this.filterState.set(newFilters);\n      return;\n    }\n\n    const newFilters = this.gridBaseService.handleFilters(\n      this.filterState(),\n      actualField,\n      value,\n      undefined,\n      column?.filterMatchMode,\n    );\n\n    this.filterState.set(newFilters);\n  }\n\n  onAdd(): void {\n    const ownerId = DEFAULT_SYSTEM_ID;\n\n    this.openDistributorCreationDialog(ownerId).subscribe(\n      (createdDistributor) => {\n        if (isDefined(createdDistributor)) {\n          // Refresh your distributor list or take any other necessary actions\n          // this.refreshDistributors();\n        }\n      },\n    );\n  }\n\n  openDistributorCreationDialog(ownerId: string) {\n    this.dialogRef = this.dialogService.open(\n      SuperAdminDistributorsCreateWizardComponent,\n      {\n        header: 'Distributor Wizard',\n        contentStyle: { overflow: 'auto' },\n        baseZIndex: 10000,\n        data: { ownerId: ownerId },\n        position: 'top',\n        modal: true,\n      },\n    );\n\n    return this.dialogRef.onClose;\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport {\n  AfterViewInit,\n  ChangeDetectorRef,\n  Component,\n  DestroyRef,\n  inject,\n  OnInit,\n  signal,\n  TemplateRef,\n  ViewChild,\n} from '@angular/core';\nimport { takeUntilDestroyed } from '@angular/core/rxjs-interop';\nimport { ReactiveFormsModule } from '@angular/forms';\n\nimport { ButtonModule } from 'primeng/button';\nimport { DynamicDialogRef, DynamicDialogConfig } from 'primeng/dynamicdialog';\nimport { finalize } from 'rxjs';\n\nimport {\n  EntitiesService,\n  GeoLockProfileCreateRequest,\n  GeoLockProfileResponse,\n} from '../../../../../api';\nimport { WizardComponent } from '../../../../../shared/components/wizard/wizard.component';\nimport { isDefined, isNullOrUndefined } from '../../../../../shared/utils';\nimport { BroadcastEventMessageService } from '../../../services/broadcast-event-messages.service';\nimport { GeoLockProfileDetailsSectionComponent } from '../geo-lock-profile-details-section/geo-lock-profile-details-section.component';\nimport { MeasurementUnitType, Step } from '../../../../../shared/models';\nimport { MeasurementUnitsService } from '../../../../../shared/services/measurement-units/measurement-units.service';\n\n@Component({\n  selector: 'app-geo-lock-profile-create-wizard',\n  imports: [\n    CommonModule,\n    ReactiveFormsModule,\n    WizardComponent,\n    ButtonModule,\n    GeoLockProfileDetailsSectionComponent,\n  ],\n  templateUrl: './geo-lock-profile-create-wizard.component.html',\n  styleUrl: './geo-lock-profile-create-wizard.component.scss',\n})\nexport class GeoLockProfileCreateWizardComponent\n  implements AfterViewInit, OnInit\n{\n  @ViewChild('geoLockProfileDetailsStep')\n  geoLockProfileDetailsStep!: TemplateRef<{\n    $implicit: Step;\n  }> | null;\n  @ViewChild('confirmationTemplate', { static: true })\n  confirmationTemplate!: TemplateRef<{ $implicit: Step }> | null;\n  private readonly cdr = inject(ChangeDetectorRef);\n\n  // References to form components\n  @ViewChild('geoLockProfileDetailsForm')\n  geoLockProfileDetailsForm!: GeoLockProfileDetailsSectionComponent;\n\n  private readonly entitiesService = inject(EntitiesService);\n  private readonly broadcastService = inject(BroadcastEventMessageService);\n  protected readonly destroyRef = inject(DestroyRef);\n  private readonly dialogRef = inject(DynamicDialogRef);\n  private readonly dialogConfig = inject(DynamicDialogConfig);\n  readonly measurementUnitsService = inject(MeasurementUnitsService);\n\n  // GeoLockProfile model to collect data across steps\n  newGeoLockProfile = signal<GeoLockProfileCreateRequest>(\n    {} as GeoLockProfileCreateRequest,\n  );\n\n  // Form validity state\n  formIsValid = signal<boolean>(false);\n\n  displayWizard = false;\n  steps: Step[] = [];\n  ownerId: string | null = null;\n  isSubmitting = signal<boolean>(false);\n\n  ngAfterViewInit() {\n    this.steps = [\n      {\n        value: 1,\n        header: 'Geo Lock Profile Details',\n        content: this.geoLockProfileDetailsStep,\n        complete: false,\n        validate: () => this.geoLockProfileDetailsForm.validate(),\n      },\n      {\n        value: 2,\n        header: 'Confirmation',\n        content: this.confirmationTemplate,\n        complete: true,\n      },\n    ];\n    this.cdr.detectChanges(); // Trigger change detection to update the view\n  }\n\n  ngOnInit(): void {\n    if (isDefined(this.dialogConfig.data)) {\n      this.ownerId = this.dialogConfig.data.ownerId ?? null;\n\n      // Initialize geoLockProfile with ownerId\n      this.newGeoLockProfile.update((current) => ({\n        ...current,\n        ownerId: this.ownerId ?? '',\n      }));\n    }\n  }\n\n  openWizard() {\n    this.displayWizard = true;\n    this.newGeoLockProfile.set({} as GeoLockProfileCreateRequest);\n  }\n\n  // Form validity handlers\n  onDetailsFormValidityChange(isValid: boolean) {\n    this.steps[0].disableNext = !isValid;\n    this.formIsValid.set(isValid);\n  }\n\n  // Update the geoLockProfile state with form data\n  updateGeoLockProfileDetails(formData: Record<string, unknown>) {\n    this.newGeoLockProfile.update((current) => {\n      const updated = { ...current };\n\n      Object.keys(formData).forEach((key) => {\n        if (key !== 'ownerId') {\n          updated[key] = formData[key];\n        }\n      });\n\n      if (isNullOrUndefined(updated.ownerId)) {\n        updated.ownerId = this.ownerId ?? '';\n      }\n\n      return updated;\n    });\n  }\n\n  onWizardComplete(): void {\n    // Process the final data from all steps\n    const geoLockProfileData = this.newGeoLockProfile();\n    this.isSubmitting.set(true);\n\n    this.entitiesService\n      .createGeoLockProfile(geoLockProfileData)\n      .pipe(\n        takeUntilDestroyed(this.destroyRef),\n        finalize(() => this.isSubmitting.set(false)),\n      )\n      .subscribe({\n        next: (response: GeoLockProfileResponse) => {\n          this.broadcastService.broadcast('entity-updated', {\n            entityType: 'geo-lock-profile',\n            operation: 'create',\n            entityId: response.id,\n          });\n          this.dialogRef.close(response);\n        },\n        error: (error: Error) => {\n          // Handle error, could show message and keep dialog open\n          console.error('Error creating geo lock profile:', error);\n        },\n      });\n  }\n\n  // Update cancel to close dialog with no result\n  onWizardCancel(): void {\n    this.newGeoLockProfile.set({} as GeoLockProfileCreateRequest);\n    this.dialogRef.close();\n  }\n\n  getRadius(): number | null {\n    const radius = this.newGeoLockProfile().radiusKm;\n    return isDefined(radius)\n      ? this.measurementUnitsService.fromBackend(\n          MeasurementUnitType.DISTANCE,\n          radius,\n          2,\n        )\n      : null;\n  }\n}\n","<app-wizard\n  [contentOnly]=\"true\"\n  [steps]=\"steps\"\n  [showSteps]=\"false\"\n  [useWizardButtonsOnly]=\"true\"\n  [loading]=\"isSubmitting()\"\n  (complete)=\"onWizardComplete()\"\n  (onCancel)=\"onWizardCancel()\"\n>\n</app-wizard>\n\n<!-- Step 1: GeoLockProfile Details -->\n<ng-template #geoLockProfileDetailsStep let-step>\n  <div class=\"p-fluid\">\n    <app-geo-lock-profile-details-section\n      #geoLockProfileDetailsForm\n      [createMode]=\"true\"\n      [entity]=\"newGeoLockProfile()\"\n      [ownerId]=\"ownerId\"\n      (formValidityChange)=\"onDetailsFormValidityChange($event)\"\n      (formValueChange)=\"updateGeoLockProfileDetails($event)\"\n    ></app-geo-lock-profile-details-section>\n  </div>\n</ng-template>\n\n<ng-template #confirmationTemplate let-step>\n  <div class=\"flex gap-6\">\n    <span class=\"pi pi-check !text-5xl\"></span>\n\n    <div class=\"flex-1\">\n      <div class=\"grid\">\n        <!-- GeoLockProfile Details Section -->\n        <div class=\"col-12 md:col-6\">\n          <p class=\"mb-4\">\n            You've completed all of the information required and we're ready to\n            create your Geo Lock Profile.\n          </p>\n\n          <div class=\"space-y-2\">\n            <!-- Each field in a side-by-side layout -->\n            <div class=\"flex\">\n              <div class=\"w-1/3 font-medium\">Name:</div>\n              <div class=\"w-2/3\">\n                {{ newGeoLockProfile().name || 'Not provided' }}\n              </div>\n            </div>\n\n            <div class=\"flex\">\n              <div class=\"w-1/3 font-medium\">Radius:</div>\n              <div class=\"w-2/3\">\n                {{ getRadius() || 'Not provided' }}\n              </div>\n            </div>\n          </div>\n        </div>\n      </div>\n\n      <div\n        class=\"mt-4 pt-4 border-top-1 border-surface-200 dark:border-surface-700\"\n      >\n        <p class=\"mb-0\">Click finish to create this Geo Lock Profile.</p>\n      </div>\n    </div>\n  </div>\n</ng-template>\n","import { computed, inject, Injectable, signal } from '@angular/core';\n\nimport { GeoLockProfilesDataAdapter } from '../services/adapters';\nimport { GeoLockProfileListItem } from '../../../api';\nimport { isDefined } from '../../../shared/utils';\nimport {\n  DataGridParams,\n  DATE_FORMATS,\n  FilterCriteria,\n  FilterValue,\n  GridColumn,\n  GridConfiguration,\n} from '../../../shared/models';\nimport { MeasurementDateTimeService } from '../../../shared/services/measurement-units/measurement-date-time.service';\nimport { TableLazyLoadEvent } from 'primeng/table';\nimport { DEFAULT_PAGE_SIZE } from '../../../core/models';\nimport { UtilityService } from '../../../core/services/utility.service';\nimport { GridBaseService } from '../../../shared/services/grid-base.service';\nimport { GeoLockProfileCreateWizardComponent } from '../components/geo-lock-profiles/geo-lock-profile-create-wizard/geo-lock-profile-create-wizard.component';\nimport { DynamicDialogRef, DialogService } from 'primeng/dynamicdialog';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class GeoLockProfilesGridConfig\n  implements GridConfiguration<GeoLockProfileListItem>\n{\n  private readonly geoLockProfilesService = inject(GeoLockProfilesDataAdapter);\n  private readonly measurementDateTimeService = inject(\n    MeasurementDateTimeService,\n  );\n  private readonly utilityService = inject(UtilityService);\n  private readonly gridBaseService = inject(GridBaseService);\n  private dialogRef: DynamicDialogRef | null = null;\n  private readonly dialogService = inject(DialogService);\n\n  protected readonly defaultStateValues = [\n    GeoLockProfileListItem.StateEnum.Active,\n  ];\n  protected readonly filterState = signal<Record<string, FilterCriteria>>({\n    state: {\n      value: this.defaultStateValues,\n      operator: 'in',\n    },\n  });\n  private params: Record<string, string> = {};\n  private readonly stateLabels: Record<\n    GeoLockProfileListItem.StateEnum,\n    string\n  > = {\n    active: 'Active',\n    deleted: 'Deleted',\n  };\n  private readonly rqlFilter = computed(() =>\n    this.utilityService.constructRqlFilter(this.filterState()),\n  );\n\n  entityType = 'geo-lock-profiles';\n  columns: GridColumn<GeoLockProfileListItem>[] = [\n    {\n      field: 'name',\n      header: 'Name',\n      filter: true,\n      filterType: 'text',\n      filterMatchMode: 'contains',\n    },\n    {\n      field: 'state',\n      header: 'State',\n      valueGetter: (rowData: GeoLockProfileListItem) =>\n        isDefined(rowData.state) ? this.stateLabels[rowData.state] : '',\n      filter: true,\n      filterType: 'multiselect',\n      filterMatchMode: 'in',\n      filterConfig: {\n        type: 'multiselect',\n        options: [\n          { label: 'Active', value: GeoLockProfileListItem.StateEnum.Active },\n          { label: 'Deleted', value: GeoLockProfileListItem.StateEnum.Deleted },\n        ],\n        defaultSelected: this.defaultStateValues,\n      },\n    },\n    {\n      field: 'modifiedDate',\n      header: 'Modified',\n      filter: false,\n      valueGetter: (rowData: GeoLockProfileListItem) =>\n        isDefined(rowData.modifiedDate)\n          ? this.measurementDateTimeService.formatDateTime(\n              this.measurementDateTimeService.createDateAssumingUtc(\n                rowData.modifiedDate,\n              ),\n              DATE_FORMATS.DATE_TIME_SECONDS,\n            )\n          : '',\n    },\n  ];\n\n  dataService = this.geoLockProfilesService;\n  ownerId = '';\n\n  getTitle(): string {\n    return 'Geo Lock Profiles';\n  }\n\n  getFilters(): Record<string, FilterCriteria> {\n    return this.filterState();\n  }\n\n  clearFilters(): void {\n    this.filterState.set({});\n  }\n\n  initialize(params: Record<string, string>): void {\n    this.params = params;\n    if (isDefined(this.params['clientId'])) {\n      this.ownerId = String(this.params['clientId']);\n    } else if (isDefined(this.params['vendorId'])) {\n      this.ownerId = String(this.params['vendorId']);\n    } else if (isDefined(this.params['distributorId'])) {\n      this.ownerId = String(this.params['distributorId']);\n    }\n  }\n\n  getRequestParams(event?: TableLazyLoadEvent): DataGridParams {\n    return {\n      owner: this.ownerId,\n      offset: isDefined(event?.first) ? event.first : 0,\n      recurse: false,\n      limit: isDefined(event?.rows) ? event.rows : DEFAULT_PAGE_SIZE,\n      sortField: 'name',\n      filters: this.rqlFilter(),\n    };\n  }\n\n  onFilterChange(field: string, value: FilterValue): void {\n    const actualField = field;\n    const column = this.columns.find((col) => col.field === field);\n\n    if (Array.isArray(value)) {\n      const newFilters = this.gridBaseService.handleFilters(\n        this.filterState(),\n        actualField,\n        value,\n        undefined,\n        column?.filterMatchMode,\n      );\n\n      this.filterState.set(newFilters);\n      return;\n    }\n\n    // For non-array values, use the grid base service\n    const newFilters = this.gridBaseService.handleFilters(\n      this.filterState(),\n      actualField,\n      value,\n      undefined,\n      column?.filterMatchMode,\n    );\n\n    this.filterState.set(newFilters);\n  }\n\n  onAdd(): void {\n    this.openGeoLockProfileCreationDialog(this.ownerId).subscribe();\n  }\n\n  openGeoLockProfileCreationDialog(ownerId: string) {\n    this.dialogRef = this.dialogService.open(\n      GeoLockProfileCreateWizardComponent,\n      {\n        header: 'Geo Lock Profile Wizard',\n        contentStyle: { overflow: 'auto' },\n        baseZIndex: 10000,\n        data: { ownerId: ownerId },\n        position: 'top',\n        modal: true,\n      },\n    );\n\n    return this.dialogRef.onClose;\n  }\n}\n","import { Provider, Type } from '@angular/core';\nimport {\n  GridConfiguration,\n  GridConfigurationEntry,\n} from '../../../shared/models';\nimport { AlertsGridConfig } from './alerts.grid.config';\nimport { AssetRatingProfilesGridConfig } from './asset-rating-profiles.grid.config';\nimport { AssetStateProfilesGridConfig } from './asset-state-profiles.grid.config';\nimport { AssetTagsGridConfig } from './asset-tags.grid.config';\nimport { AssetsGridConfig } from './assets.grid.config';\nimport { DevicesGridConfig } from './device.grid.config';\nimport { EmailProvidersGridConfig } from './email-providers.grid.config';\nimport { GRID_CONFIGS } from '../../../core/models';\nimport { GeofencesGridConfig } from './geofences.grid.config';\nimport { IoTypesGridConfig } from './io-types.grid.config';\nimport { OverspeedProfilesGridConfig } from './overspeed-profiles.grid.config';\nimport { RoadProfilesGridConfig } from './road-profiles.grid.config';\nimport { SimCardsGridConfig } from './sim-cards.grid.config';\nimport { SmsGatewayProvidersGridConfig } from './sms-gateway-provider.grid.config';\nimport { ThemesGridConfig } from './themes.grid.config';\nimport { DeviceConfigProfilesGridConfig } from './device-config-profiles.config';\nimport { CustomFieldsGridConfig } from './custom-fields.grid.config';\nimport { DeviceProvidersGridConfig } from './device-providers.grid.config';\nimport { UserRolesGridConfig } from './user-roles.grid.config';\nimport { UsersGridConfig } from './users.grid.config';\nimport { VendorsGridConfig } from './vendors.grid.config';\nimport { ClientsGridConfig } from './clients.grid.config';\nimport { DistributorsGridConfig } from './distributors.grid.config';\nimport { GeoLockProfilesGridConfig } from './geo-lock-profiles.grid.config';\n\n/**\n * Entity type constants for grid configurations\n * Centralized definition of entity types for better maintainability\n */\nexport const GRID_ENTITY_TYPES = {\n  // Client entity types\n  CLIENT_DEVICE_PROVIDERS: 'client-device-providers',\n  CLIENT_ASSETS: 'client-assets',\n  CLIENT_GEOFENCES: 'client-geofences',\n  CLIENT_ALERTS: 'client-alerts',\n  CLIENT_HARDWARE_DEVICES: 'client-hardware-devices',\n  CLIENT_ASSET_TAGS: 'client-asset-tags',\n  CLIENT_SIM_CARDS: 'client-sim-cards',\n  CLIENT_SMS_GATEWAY_PROVIDERS: 'client-sms-gateway-providers',\n  CLIENT_IO_TYPES: 'client-io-types',\n  CLIENT_DEVICE_CONFIG_PROFILES: 'client-device-config-profiles',\n  CLIENT_ASSET_RATING_PROFILES: 'client-asset-rating-profiles',\n  CLIENT_ASSET_STATE_PROFILES: 'client-asset-state-profiles',\n  CLIENT_OVERSPEED_PROFILES: 'client-overspeed-profiles',\n  CLIENT_CUSTOM_FIELDS: 'client-custom-fields',\n  CLIENT_USERS: 'client-users',\n  CLIENT_USER_ROLES: 'client-user-roles',\n  CLIENT_ROAD_PROFILES: 'client-road-profiles',\n  CLIENT_GEO_LOCK_PROFILES: 'client-geo-lock-profiles',\n\n  // Vendor entity types\n  VENDOR_ROAD_PROFILES: 'vendor-road-profiles',\n  VENDOR_OVERSPEED_PROFILES: 'vendor-overspeed-profiles',\n  VENDOR_IO_TYPES: 'vendor-io-types',\n  VENDOR_DEVICE_CONFIG_PROFILES: 'vendor-device-config-profiles',\n  VENDOR_THEMES: 'vendor-themes',\n  VENDOR_CUSTOM_FIELDS: 'vendor-custom-fields',\n  VENDOR_SMS_GATEWAY_PROVIDERS: 'vendor-sms-gateway-providers',\n  VENDOR_EMAIL_PROVIDERS: 'vendor-email-providers',\n  VENDOR_USERS: 'vendor-users',\n  VENDOR_USER_ROLES: 'vendor-user-roles',\n  VENDOR_CLIENTS: 'vendor-clients',\n\n  // Distributor entity types\n  DISTRIBUTOR_VENDORS: 'distributor-vendors',\n  DISTRIBUTOR_USERS: 'distributor-users',\n  DISTRIBUTOR_USER_ROLES: 'distributor-user-roles',\n  DISTRIBUTOR_ROAD_PROFILES: 'distributor-road-profiles',\n  DISTRIBUTOR_THEMES: 'distributor-themes',\n  DISTRIBUTOR_DEVICE_PROVIDERS: 'distributor-device-providers',\n  DISTRIBUTOR_EMAIL_PROVIDERS: 'distributor-email-providers',\n\n  // Super Admin entity types\n  SUPER_ADMIN_DISTRIBUTORS: 'super-admin-distributors',\n  SUPER_ADMIN_USERS: 'system-users',\n  SUPER_ADMIN_USER_ROLES: 'system-user-roles',\n} as const;\n\n/**\n * Type-safe entity type keys\n */\nexport type GridEntityType =\n  (typeof GRID_ENTITY_TYPES)[keyof typeof GRID_ENTITY_TYPES];\n\n/**\n * Helper function to create a grid configuration entry\n */\nfunction createGridConfigEntry<T>(\n  entityType: GridEntityType,\n  config: Type<GridConfiguration<T>>,\n): GridConfigurationEntry {\n  return { entityType, config: config as Type<GridConfiguration<unknown>> };\n}\n\n/**\n * Client-specific grid configurations\n */\nconst CLIENT_CONFIGS: GridConfigurationEntry[] = [\n  createGridConfigEntry(\n    GRID_ENTITY_TYPES.CLIENT_DEVICE_PROVIDERS,\n    DeviceProvidersGridConfig,\n  ),\n  createGridConfigEntry(GRID_ENTITY_TYPES.CLIENT_ASSETS, AssetsGridConfig),\n  createGridConfigEntry(\n    GRID_ENTITY_TYPES.CLIENT_GEOFENCES,\n    GeofencesGridConfig,\n  ),\n  createGridConfigEntry(GRID_ENTITY_TYPES.CLIENT_ALERTS, AlertsGridConfig),\n  createGridConfigEntry(\n    GRID_ENTITY_TYPES.CLIENT_HARDWARE_DEVICES,\n    DevicesGridConfig,\n  ),\n  createGridConfigEntry(\n    GRID_ENTITY_TYPES.CLIENT_ASSET_TAGS,\n    AssetTagsGridConfig,\n  ),\n  createGridConfigEntry(GRID_ENTITY_TYPES.CLIENT_SIM_CARDS, SimCardsGridConfig),\n  createGridConfigEntry(\n    GRID_ENTITY_TYPES.CLIENT_SMS_GATEWAY_PROVIDERS,\n    SmsGatewayProvidersGridConfig,\n  ),\n  createGridConfigEntry(GRID_ENTITY_TYPES.CLIENT_IO_TYPES, IoTypesGridConfig),\n  createGridConfigEntry(\n    GRID_ENTITY_TYPES.CLIENT_DEVICE_CONFIG_PROFILES,\n    DeviceConfigProfilesGridConfig,\n  ),\n  createGridConfigEntry(\n    GRID_ENTITY_TYPES.CLIENT_ASSET_RATING_PROFILES,\n    AssetRatingProfilesGridConfig,\n  ),\n  createGridConfigEntry(\n    GRID_ENTITY_TYPES.CLIENT_ASSET_STATE_PROFILES,\n    AssetStateProfilesGridConfig,\n  ),\n  createGridConfigEntry(\n    GRID_ENTITY_TYPES.CLIENT_OVERSPEED_PROFILES,\n    OverspeedProfilesGridConfig,\n  ),\n  createGridConfigEntry(\n    GRID_ENTITY_TYPES.CLIENT_CUSTOM_FIELDS,\n    CustomFieldsGridConfig,\n  ),\n  createGridConfigEntry(GRID_ENTITY_TYPES.CLIENT_USERS, UsersGridConfig),\n  createGridConfigEntry(\n    GRID_ENTITY_TYPES.CLIENT_USER_ROLES,\n    UserRolesGridConfig,\n  ),\n  createGridConfigEntry(\n    GRID_ENTITY_TYPES.CLIENT_ROAD_PROFILES,\n    RoadProfilesGridConfig,\n  ),\n  createGridConfigEntry(\n    GRID_ENTITY_TYPES.CLIENT_GEO_LOCK_PROFILES,\n    GeoLockProfilesGridConfig,\n  ),\n];\n\n/**\n * Vendor-specific grid configurations\n */\nconst VENDOR_CONFIGS: GridConfigurationEntry[] = [\n  createGridConfigEntry(\n    GRID_ENTITY_TYPES.VENDOR_ROAD_PROFILES,\n    RoadProfilesGridConfig,\n  ),\n  createGridConfigEntry(\n    GRID_ENTITY_TYPES.VENDOR_OVERSPEED_PROFILES,\n    OverspeedProfilesGridConfig,\n  ),\n  createGridConfigEntry(GRID_ENTITY_TYPES.VENDOR_IO_TYPES, IoTypesGridConfig),\n  createGridConfigEntry(\n    GRID_ENTITY_TYPES.VENDOR_DEVICE_CONFIG_PROFILES,\n    DeviceConfigProfilesGridConfig,\n  ),\n  createGridConfigEntry(GRID_ENTITY_TYPES.VENDOR_THEMES, ThemesGridConfig),\n  createGridConfigEntry(\n    GRID_ENTITY_TYPES.VENDOR_CUSTOM_FIELDS,\n    CustomFieldsGridConfig,\n  ),\n  createGridConfigEntry(\n    GRID_ENTITY_TYPES.VENDOR_SMS_GATEWAY_PROVIDERS,\n    SmsGatewayProvidersGridConfig,\n  ),\n  createGridConfigEntry(\n    GRID_ENTITY_TYPES.VENDOR_EMAIL_PROVIDERS,\n    EmailProvidersGridConfig,\n  ),\n  createGridConfigEntry(GRID_ENTITY_TYPES.VENDOR_USERS, UsersGridConfig),\n  createGridConfigEntry(\n    GRID_ENTITY_TYPES.VENDOR_USER_ROLES,\n    UserRolesGridConfig,\n  ),\n  createGridConfigEntry(GRID_ENTITY_TYPES.VENDOR_CLIENTS, ClientsGridConfig),\n];\n\n/**\n * Distributor-specific grid configurations\n */\nconst DISTRIBUTOR_CONFIGS: GridConfigurationEntry[] = [\n  createGridConfigEntry(\n    GRID_ENTITY_TYPES.DISTRIBUTOR_VENDORS,\n    VendorsGridConfig,\n  ),\n  createGridConfigEntry(GRID_ENTITY_TYPES.DISTRIBUTOR_USERS, UsersGridConfig),\n  createGridConfigEntry(\n    GRID_ENTITY_TYPES.DISTRIBUTOR_USER_ROLES,\n    UserRolesGridConfig,\n  ),\n  createGridConfigEntry(\n    GRID_ENTITY_TYPES.DISTRIBUTOR_ROAD_PROFILES,\n    RoadProfilesGridConfig,\n  ),\n  createGridConfigEntry(GRID_ENTITY_TYPES.DISTRIBUTOR_THEMES, ThemesGridConfig),\n  createGridConfigEntry(\n    GRID_ENTITY_TYPES.DISTRIBUTOR_DEVICE_PROVIDERS,\n    DeviceProvidersGridConfig,\n  ),\n  createGridConfigEntry(\n    GRID_ENTITY_TYPES.DISTRIBUTOR_EMAIL_PROVIDERS,\n    EmailProvidersGridConfig,\n  ),\n];\n\n/**\n * Super Admin-specific grid configurations\n * These configurations are used for managing distributors at the super admin level\n */\nconst SUPER_ADMIN_CONFIGS: GridConfigurationEntry[] = [\n  createGridConfigEntry(\n    GRID_ENTITY_TYPES.SUPER_ADMIN_DISTRIBUTORS,\n    DistributorsGridConfig,\n  ),\n  createGridConfigEntry(GRID_ENTITY_TYPES.SUPER_ADMIN_USERS, UsersGridConfig),\n  createGridConfigEntry(\n    GRID_ENTITY_TYPES.SUPER_ADMIN_USER_ROLES,\n    UserRolesGridConfig,\n  ),\n];\n/**\n * All grid configuration entries organized by scope\n */\nconst ALL_GRID_CONFIGS: GridConfigurationEntry[] = [\n  ...CLIENT_CONFIGS,\n  ...VENDOR_CONFIGS,\n  ...DISTRIBUTOR_CONFIGS,\n  ...SUPER_ADMIN_CONFIGS,\n];\n\n/**\n * Provider for all administration grid configurations\n * Organized by scope (client, vendor, distributor, system) for better maintainability\n */\nexport const ADMIN_GRID_CONFIGS_PROVIDER: Provider = {\n  provide: GRID_CONFIGS,\n  useValue: ALL_GRID_CONFIGS,\n  multi: true,\n};\n","import { CommonModule } from '@angular/common';\nimport {\n  AfterViewInit,\n  ChangeDetectorRef,\n  Component,\n  DestroyRef,\n  inject,\n  OnInit,\n  signal,\n  TemplateRef,\n  ViewChild,\n} from '@angular/core';\nimport { takeUntilDestroyed } from '@angular/core/rxjs-interop';\nimport { ReactiveFormsModule } from '@angular/forms';\n\nimport { ButtonModule } from 'primeng/button';\nimport { DynamicDialogRef, DynamicDialogConfig } from 'primeng/dynamicdialog';\n\nimport {\n  EntitiesService,\n  AssetCategoryCreateRequest,\n  AssetCategoryResponse,\n} from '../../../../../api';\nimport { WizardComponent } from '../../../../../shared/components/wizard/wizard.component';\nimport { isDefined, isNullOrUndefined } from '../../../../../shared/utils';\nimport { AssetCategoryDetailsSectionComponent } from '../asset-category-details-section/asset-category-details-section.component';\nimport { Step } from '../../../../../shared/models';\nimport { BroadcastEventMessageService } from '../../../services/broadcast-event-messages.service';\nimport { finalize } from 'rxjs';\nimport { RequestCacheService } from '../../../../../shared/services/request-cache.service';\n\n@Component({\n  selector: 'app-asset-category-create-wizard',\n  imports: [\n    CommonModule,\n    ReactiveFormsModule,\n    WizardComponent,\n    ButtonModule,\n    AssetCategoryDetailsSectionComponent,\n  ],\n  templateUrl: './asset-category-create-wizard.component.html',\n  styleUrl: './asset-category-create-wizard.component.scss',\n})\nexport class AssetCategoryCreateWizardComponent\n  implements AfterViewInit, OnInit\n{\n  @ViewChild('assetCategoryDetailsStep')\n  assetCategoryDetailsStep!: TemplateRef<{\n    $implicit: Step;\n  }> | null;\n  @ViewChild('confirmationTemplate', { static: true })\n  confirmationTemplate!: TemplateRef<{ $implicit: Step }> | null;\n\n  // References to form components\n  @ViewChild('assetCategoryDetailsForm')\n  assetCategoryDetailsForm!: AssetCategoryDetailsSectionComponent;\n\n  private readonly entitiesService = inject(EntitiesService);\n  private readonly broadcastService = inject(BroadcastEventMessageService);\n  protected readonly destroyRef = inject(DestroyRef);\n  private readonly dialogRef = inject(DynamicDialogRef);\n  private readonly dialogConfig = inject(DynamicDialogConfig);\n  private readonly cdr = inject(ChangeDetectorRef);\n  private readonly cacheService = inject(RequestCacheService);\n\n  // AssetCategory model to collect data across steps\n  newAssetCategory = signal<AssetCategoryCreateRequest>(\n    {} as AssetCategoryCreateRequest,\n  );\n\n  // Form validity state\n  formIsValid = signal<boolean>(false);\n\n  steps: Step[] = [];\n  previousStepIndex = 0;\n  currentStepIndex = 0;\n  ownerId: string | null = null;\n  isSubmitting = signal<boolean>(false);\n\n  ngAfterViewInit() {\n    this.steps = [\n      {\n        value: 1,\n        header: 'Asset Category Details',\n        content: this.assetCategoryDetailsStep,\n        complete: false,\n        validate: () => this.assetCategoryDetailsForm.validate(),\n      },\n      {\n        value: 2,\n        header: 'Confirmation',\n        content: this.confirmationTemplate,\n        complete: true,\n      },\n    ];\n    this.cdr.detectChanges();\n  }\n\n  ngOnInit(): void {\n    if (isDefined(this.dialogConfig.data)) {\n      this.ownerId = this.dialogConfig.data.ownerId ?? null;\n\n      // Initialize assetCategory with ownerId\n      this.newAssetCategory.update((current) => ({\n        ...current,\n        ownerId: this.ownerId ?? '',\n      }));\n    }\n  }\n\n  openWizard() {\n    this.newAssetCategory.set({} as AssetCategoryCreateRequest);\n  }\n\n  // Form validity handlers\n  onDetailsFormValidityChange(isValid: boolean) {\n    this.steps[0].disableNext = !isValid;\n    this.formIsValid.set(isValid);\n  }\n\n  // Update the assetCategory state with form data\n  updateAssetCategoryDetails(formData: Record<string, unknown>) {\n    this.newAssetCategory.update((current) => {\n      const updated = { ...current };\n\n      Object.keys(formData).forEach((key) => {\n        if (key !== 'ownerId') {\n          updated[key] = formData[key];\n        }\n      });\n\n      if (isNullOrUndefined(updated.ownerId)) {\n        updated.ownerId = this.ownerId ?? '';\n      }\n\n      return updated;\n    });\n  }\n\n  onWizardComplete(): void {\n    // Process the final data from all steps\n    const assetCategoryData = this.newAssetCategory();\n    this.isSubmitting.set(true);\n\n    this.entitiesService\n      .createAssetCategory(assetCategoryData)\n      .pipe(\n        takeUntilDestroyed(this.destroyRef),\n        finalize(() => this.isSubmitting.set(false)),\n      )\n      .subscribe({\n        next: (response: AssetCategoryResponse) => {\n          this.broadcastService.broadcast('entity-updated', {\n            entityType: 'asset-category',\n            operation: 'create',\n            entityId: response.id,\n          });\n          this.dialogRef.close(response);\n          this.cacheService.clearCacheByPattern(`asset-categories-`);\n        },\n        error: (error: Error) => {\n          // Handle error, could show message and keep dialog open\n          console.error('Error creating asset category:', error);\n        },\n      });\n  }\n\n  // Update cancel to close dialog with no result\n  onWizardCancel(): void {\n    this.newAssetCategory.set({} as AssetCategoryCreateRequest);\n    this.dialogRef.close();\n  }\n}\n","<app-wizard\n  [contentOnly]=\"true\"\n  [steps]=\"steps\"\n  [showSteps]=\"false\"\n  [useWizardButtonsOnly]=\"true\"\n  [loading]=\"isSubmitting()\"\n  (complete)=\"onWizardComplete()\"\n  (onCancel)=\"onWizardCancel()\"\n>\n</app-wizard>\n\n<!-- Step 1: Asset Category Details -->\n<ng-template #assetCategoryDetailsStep let-step>\n  <div class=\"p-fluid\">\n    <app-asset-category-details-section\n      #assetCategoryDetailsForm\n      [createMode]=\"true\"\n      [entity]=\"newAssetCategory()\"\n      [ownerId]=\"ownerId\"\n      (formValidityChange)=\"onDetailsFormValidityChange($event)\"\n      (formValueChange)=\"updateAssetCategoryDetails($event)\"\n    ></app-asset-category-details-section>\n  </div>\n</ng-template>\n\n<ng-template #confirmationTemplate let-step>\n  <div class=\"flex gap-6\">\n    <span class=\"pi pi-check !text-5xl\"></span>\n\n    <div class=\"flex-1\">\n      <div class=\"grid\">\n        <!-- Asset Category Details Section -->\n        <div class=\"col-12 md:col-6\">\n          <p class=\"mb-4\">\n            You've completed all of the information required and we're ready to\n            create your Asset Category.\n          </p>\n\n          <div class=\"space-y-2\">\n            <div class=\"flex\">\n              <div class=\"w-1/3 font-medium\">Parent:</div>\n              <div class=\"w-2/3\">\n                {{ newAssetCategory().parent?.name || 'Not provided' }}\n              </div>\n            </div>\n\n            <div class=\"flex\">\n              <div class=\"w-1/3 font-medium\">Name:</div>\n              <div class=\"w-2/3\">\n                {{ newAssetCategory().name || 'Not provided' }}\n              </div>\n            </div>\n          </div>\n        </div>\n      </div>\n\n      <div\n        class=\"mt-4 pt-4 border-top-1 border-surface-200 dark:border-surface-700\"\n      >\n        <p class=\"mb-0\">Click finish to create this Asset Category.</p>\n      </div>\n    </div>\n  </div>\n</ng-template>\n","import { Injectable, inject } from '@angular/core';\n\nimport { TableLazyLoadEvent } from 'primeng/table';\n\nimport {\n  DataGridParams,\n  DATE_FORMATS,\n  TreeTableColumn,\n  TreeTableConfiguration,\n} from '../../../shared/models';\nimport { isDefined } from '../../../shared/utils';\n\nimport { AssetCategoryResponse } from '../../../api';\nimport { AssetCategoriesDataAdapter } from '../services/adapters';\nimport { MeasurementDateTimeService } from '../../../shared/services/measurement-units/measurement-date-time.service';\nimport { DynamicDialogRef, DialogService } from 'primeng/dynamicdialog';\nimport { take } from 'rxjs';\nimport { AssetCategoryCreateWizardComponent } from '../components/asset-categories/asset-category-create-wizard/asset-category-create-wizard.component';\nimport { DEFAULT_LIST_SIZE } from '../../../core/models';\n\n@Injectable({ providedIn: 'root' })\nexport class AssetCategoriesGridConfig\n  implements TreeTableConfiguration<AssetCategoryResponse>\n{\n  private readonly assetCategoriesService = inject(AssetCategoriesDataAdapter);\n  private readonly measurementDateTimeService = inject(\n    MeasurementDateTimeService,\n  );\n  private dialogRef: DynamicDialogRef | null = null;\n  private readonly dialogService = inject(DialogService);\n\n  private params: Record<string, string> = { clientId: '' };\n\n  entityType = 'asset-categories';\n  columns: TreeTableColumn<AssetCategoryResponse>[] = [\n    {\n      field: 'name',\n      header: 'Name',\n      filterType: 'text',\n    },\n\n    {\n      field: 'modifiedDate',\n      header: 'Modified',\n      valueGetter: (rowData: AssetCategoryResponse) =>\n        isDefined(rowData?.entity?.modifiedDate)\n          ? this.measurementDateTimeService.formatDateTime(\n              this.measurementDateTimeService.createDateAssumingUtc(\n                rowData?.entity?.modifiedDate,\n              ),\n              DATE_FORMATS.DATE_TIME_SECONDS,\n            )\n          : '',\n    },\n  ];\n\n  dataService = this.assetCategoriesService;\n\n  initialize(params: Record<string, string>): void {\n    this.params = params;\n  }\n\n  getTitle(): string {\n    return 'Categories';\n  }\n\n  getRequestParams(event?: TableLazyLoadEvent): DataGridParams {\n    // Add sorting support\n    let sortField = 'name:asc'; // Default\n\n    if (isDefined(event?.sortField)) {\n      const sortOrder = event.sortOrder === 1 ? 'asc' : 'desc';\n      sortField = `${event.sortField}:${sortOrder}`;\n    }\n\n    return {\n      owner: this.params['clientId'],\n      offset: isDefined(event?.first) ? event.first : 0,\n      recurse: false,\n      limit: DEFAULT_LIST_SIZE,\n      sortField: sortField,\n    };\n  }\n\n  onAdd(): void {\n    const clientId = this.params['clientId'];\n\n    this.openAssetCategoryCreationDialog(clientId).pipe(take(1)).subscribe();\n  }\n\n  openAssetCategoryCreationDialog(ownerId: string) {\n    this.dialogRef = this.dialogService.open(\n      AssetCategoryCreateWizardComponent,\n      {\n        header: 'Asset Category Wizard',\n        contentStyle: { overflow: 'auto' },\n        baseZIndex: 10000,\n        data: { ownerId: ownerId },\n        position: 'top',\n        modal: true,\n      },\n    );\n\n    return this.dialogRef.onClose;\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport {\n  AfterViewInit,\n  ChangeDetectorRef,\n  Component,\n  DestroyRef,\n  inject,\n  OnInit,\n  signal,\n  TemplateRef,\n  ViewChild,\n} from '@angular/core';\nimport { takeUntilDestroyed } from '@angular/core/rxjs-interop';\nimport { ReactiveFormsModule } from '@angular/forms';\n\nimport { ButtonModule } from 'primeng/button';\nimport { DynamicDialogRef, DynamicDialogConfig } from 'primeng/dynamicdialog';\n\nimport {\n  EntitiesService,\n  AssetGroupCreateRequest,\n  AssetGroupResponse,\n} from '../../../../../api';\nimport { WizardComponent } from '../../../../../shared/components/wizard/wizard.component';\nimport { isDefined, isNullOrUndefined } from '../../../../../shared/utils';\nimport { AssetGroupDetailsSectionComponent } from '../asset-group-details-section/asset-group-details-section.component';\nimport { Step } from '../../../../../shared/models';\nimport { BroadcastEventMessageService } from '../../../services/broadcast-event-messages.service';\nimport { finalize } from 'rxjs';\n\n@Component({\n  selector: 'app-asset-group-create-wizard',\n  imports: [\n    CommonModule,\n    ReactiveFormsModule,\n    WizardComponent,\n    ButtonModule,\n    AssetGroupDetailsSectionComponent,\n  ],\n  templateUrl: './asset-group-create-wizard.component.html',\n  styleUrl: './asset-group-create-wizard.component.scss',\n})\nexport class AssetGroupCreateWizardComponent implements AfterViewInit, OnInit {\n  @ViewChild('assetGroupDetailsStep')\n  assetGroupDetailsStep!: TemplateRef<{\n    $implicit: Step;\n  }> | null;\n  @ViewChild('confirmationTemplate', { static: true })\n  confirmationTemplate!: TemplateRef<{ $implicit: Step }> | null;\n\n  // References to form components\n  @ViewChild('assetGroupDetailsForm')\n  assetGroupDetailsForm!: AssetGroupDetailsSectionComponent;\n\n  private readonly entitiesService = inject(EntitiesService);\n  private readonly broadcastService = inject(BroadcastEventMessageService);\n  protected readonly destroyRef = inject(DestroyRef);\n  private readonly dialogRef = inject(DynamicDialogRef);\n  private readonly dialogConfig = inject(DynamicDialogConfig);\n  private readonly cdr = inject(ChangeDetectorRef);\n\n  // AssetGroup model to collect data across steps\n  newAssetGroup = signal<AssetGroupCreateRequest>(\n    {} as AssetGroupCreateRequest,\n  );\n\n  // Form validity state\n  formIsValid = signal<boolean>(false);\n\n  steps: Step[] = [];\n  previousStepIndex = 0;\n  currentStepIndex = 0;\n  ownerId: string | null = null;\n  isSubmitting = signal<boolean>(false);\n\n  ngAfterViewInit() {\n    this.steps = [\n      {\n        value: 1,\n        header: 'Asset Group Details',\n        content: this.assetGroupDetailsStep,\n        complete: false,\n        validate: () => this.assetGroupDetailsForm.validate(),\n      },\n      {\n        value: 2,\n        header: 'Confirmation',\n        content: this.confirmationTemplate,\n        complete: true,\n      },\n    ];\n    this.cdr.detectChanges();\n  }\n\n  ngOnInit(): void {\n    if (isDefined(this.dialogConfig.data)) {\n      this.ownerId = this.dialogConfig.data.ownerId ?? null;\n\n      // Initialize assetGroup with ownerId\n      this.newAssetGroup.update((current) => ({\n        ...current,\n        ownerId: this.ownerId ?? '',\n      }));\n    }\n  }\n\n  openWizard() {\n    this.newAssetGroup.set({} as AssetGroupCreateRequest);\n  }\n\n  // Form validity handlers\n  onDetailsFormValidityChange(isValid: boolean) {\n    this.steps[0].disableNext = !isValid;\n    this.formIsValid.set(isValid);\n  }\n\n  // Update the assetGroup state with form data\n  updateAssetGroupDetails(formData: Record<string, unknown>) {\n    this.newAssetGroup.update((current) => {\n      const updated = { ...current };\n\n      Object.keys(formData).forEach((key) => {\n        if (key !== 'ownerId') {\n          updated[key] = formData[key];\n        }\n      });\n\n      if (isNullOrUndefined(updated.ownerId)) {\n        updated.ownerId = this.ownerId ?? '';\n      }\n\n      return updated;\n    });\n  }\n\n  onWizardComplete(): void {\n    // Process the final data from all steps\n    const assetGroupData = this.newAssetGroup();\n    this.isSubmitting.set(true);\n\n    this.entitiesService\n      .createAssetGroup(assetGroupData)\n      .pipe(\n        takeUntilDestroyed(this.destroyRef),\n        finalize(() => this.isSubmitting.set(false)),\n      )\n      .subscribe({\n        next: (response: AssetGroupResponse) => {\n          this.broadcastService.broadcast('entity-updated', {\n            entityType: 'asset-group',\n            operation: 'create',\n            entityId: response.id,\n          });\n          this.dialogRef.close(response);\n        },\n        error: (error: Error) => {\n          // Handle error, could show message and keep dialog open\n          console.error('Error creating asset group:', error);\n        },\n      });\n  }\n\n  // Update cancel to close dialog with no result\n  onWizardCancel(): void {\n    this.newAssetGroup.set({} as AssetGroupCreateRequest);\n    this.dialogRef.close();\n  }\n}\n","<app-wizard\n  [contentOnly]=\"true\"\n  [steps]=\"steps\"\n  [showSteps]=\"false\"\n  [useWizardButtonsOnly]=\"true\"\n  [loading]=\"isSubmitting()\"\n  (complete)=\"onWizardComplete()\"\n  (onCancel)=\"onWizardCancel()\"\n>\n</app-wizard>\n\n<!-- Step 1: Asset Group Details -->\n<ng-template #assetGroupDetailsStep let-step>\n  <div class=\"p-fluid\">\n    <app-asset-group-details-section\n      #assetGroupDetailsForm\n      [createMode]=\"true\"\n      [entity]=\"newAssetGroup()\"\n      [ownerId]=\"ownerId\"\n      (formValidityChange)=\"onDetailsFormValidityChange($event)\"\n      (formValueChange)=\"updateAssetGroupDetails($event)\"\n    ></app-asset-group-details-section>\n  </div>\n</ng-template>\n\n<ng-template #confirmationTemplate let-step>\n  <div class=\"flex gap-6\">\n    <span class=\"pi pi-check !text-5xl\"></span>\n\n    <div class=\"flex-1\">\n      <div class=\"grid\">\n        <!-- Asset Group Details Section -->\n        <div class=\"col-12 md:col-6\">\n          <p class=\"mb-4\">\n            You've completed all of the information required and we're ready to\n            create your Asset Group.\n          </p>\n\n          <div class=\"space-y-2\">\n            <div class=\"flex\">\n              <div class=\"w-1/3 font-medium\">Parent:</div>\n              <div class=\"w-2/3\">\n                {{ newAssetGroup().parent?.name || 'Root' }}\n              </div>\n            </div>\n\n            <div class=\"flex\">\n              <div class=\"w-1/3 font-medium\">Name:</div>\n              <div class=\"w-2/3\">\n                {{ newAssetGroup().name || 'Not provided' }}\n              </div>\n            </div>\n          </div>\n        </div>\n      </div>\n\n      <div\n        class=\"mt-4 pt-4 border-top-1 border-surface-200 dark:border-surface-700\"\n      >\n        <p class=\"mb-0\">Click finish to create this Asset Group.</p>\n      </div>\n    </div>\n  </div>\n</ng-template>\n","import { Injectable, inject } from '@angular/core';\n\nimport { TableLazyLoadEvent } from 'primeng/table';\n\nimport {\n  DataGridParams,\n  DATE_FORMATS,\n  TreeTableColumn,\n  TreeTableConfiguration,\n} from '../../../shared/models';\nimport { isDefined } from '../../../shared/utils';\n\nimport { AssetGroupResponse } from '../../../api';\nimport { AssetGroupsDataAdapter } from '../services/adapters';\nimport { MeasurementDateTimeService } from '../../../shared/services/measurement-units/measurement-date-time.service';\nimport { DynamicDialogRef, DialogService } from 'primeng/dynamicdialog';\nimport { AssetGroupCreateWizardComponent } from '../components/asset-groups/asset-group-create-wizard/asset-group-create-wizard.component';\nimport { DEFAULT_LIST_SIZE } from '../../../core/models';\n\n@Injectable({ providedIn: 'root' })\nexport class AssetGroupsGridConfig\n  implements TreeTableConfiguration<AssetGroupResponse>\n{\n  private readonly assetGroupsService = inject(AssetGroupsDataAdapter);\n  private readonly measurementDateTimeService = inject(\n    MeasurementDateTimeService,\n  );\n  private dialogRef: DynamicDialogRef | null = null;\n  private readonly dialogService = inject(DialogService);\n  private params: Record<string, string> = { clientId: '' };\n\n  entityType = 'asset-groups';\n  columns: TreeTableColumn<AssetGroupResponse>[] = [\n    {\n      field: 'name',\n      header: 'Name',\n      filterType: 'text',\n    },\n\n    {\n      field: 'modifiedDate',\n      header: 'Modified',\n      valueGetter: (rowData: AssetGroupResponse) =>\n        isDefined(rowData?.entity?.modifiedDate)\n          ? this.measurementDateTimeService.formatDateTime(\n              this.measurementDateTimeService.createDateAssumingUtc(\n                rowData?.entity?.modifiedDate,\n              ),\n              DATE_FORMATS.DATE_TIME_SECONDS,\n            )\n          : '',\n    },\n  ];\n\n  dataService = this.assetGroupsService;\n  ownerId = '';\n\n  initialize(params: Record<string, string>): void {\n    this.params = params;\n    if (isDefined(this.params['clientId'])) {\n      this.ownerId = String(this.params['clientId']);\n    } else if (isDefined(this.params['vendorId'])) {\n      this.ownerId = String(this.params['vendorId']);\n    }\n  }\n\n  getTitle(): string {\n    return 'Asset Groups';\n  }\n\n  getRequestParams(event?: TableLazyLoadEvent): DataGridParams {\n    // Add sorting support\n    let sortField = 'name:asc'; // Default\n\n    if (isDefined(event?.sortField)) {\n      const sortOrder = event.sortOrder === 1 ? 'asc' : 'desc';\n      sortField = `${event.sortField}:${sortOrder}`;\n    }\n\n    return {\n      owner: this.ownerId,\n      offset: isDefined(event?.first) ? event.first : 0,\n      recurse: false,\n      limit: DEFAULT_LIST_SIZE,\n      sortField: sortField,\n    };\n  }\n\n  onAdd(): void {\n    const clientId = this.params['clientId'];\n\n    this.openAssetGroupCreationDialog(clientId).subscribe();\n  }\n\n  openAssetGroupCreationDialog(ownerId: string) {\n    this.dialogRef = this.dialogService.open(AssetGroupCreateWizardComponent, {\n      header: 'Asset Group Wizard',\n      contentStyle: { overflow: 'auto' },\n      baseZIndex: 10000,\n      data: { ownerId: ownerId },\n      position: 'top',\n      modal: true,\n    });\n\n    return this.dialogRef.onClose;\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport {\n  AfterViewInit,\n  ChangeDetectorRef,\n  Component,\n  DestroyRef,\n  inject,\n  OnInit,\n  signal,\n  TemplateRef,\n  ViewChild,\n} from '@angular/core';\nimport { takeUntilDestroyed } from '@angular/core/rxjs-interop';\nimport { ReactiveFormsModule } from '@angular/forms';\n\nimport { ButtonModule } from 'primeng/button';\nimport { DynamicDialogRef, DynamicDialogConfig } from 'primeng/dynamicdialog';\n\nimport {\n  CompanyGroupCreateRequest,\n  CompanyGroupResponse,\n  AccountsService,\n} from '../../../../../api';\nimport { WizardComponent } from '../../../../../shared/components/wizard/wizard.component';\nimport { isDefined, isNullOrUndefined } from '../../../../../shared/utils';\nimport { CompanyGroupDetailsSectionComponent } from '../company-group-details-section/company-group-details-section.component';\nimport { Step } from '../../../../../shared/models';\nimport { BroadcastEventMessageService } from '../../../services/broadcast-event-messages.service';\nimport { finalize } from 'rxjs';\n\n@Component({\n  selector: 'app-company-group-create-wizard',\n  imports: [\n    CommonModule,\n    ReactiveFormsModule,\n    WizardComponent,\n    ButtonModule,\n    CompanyGroupDetailsSectionComponent,\n  ],\n  templateUrl: './company-group-create-wizard.component.html',\n  styleUrl: './company-group-create-wizard.component.scss',\n})\nexport class CompanyGroupCreateWizardComponent\n  implements AfterViewInit, OnInit\n{\n  @ViewChild('companyGroupDetailsStep')\n  companyGroupDetailsStep!: TemplateRef<{\n    $implicit: Step;\n  }> | null;\n  @ViewChild('confirmationTemplate', { static: true })\n  confirmationTemplate!: TemplateRef<{ $implicit: Step }> | null;\n\n  // References to form components\n  @ViewChild('companyGroupDetailsForm')\n  companyGroupDetailsForm!: CompanyGroupDetailsSectionComponent;\n\n  private readonly accountsService = inject(AccountsService);\n  private readonly broadcastService = inject(BroadcastEventMessageService);\n  protected readonly destroyRef = inject(DestroyRef);\n  private readonly dialogRef = inject(DynamicDialogRef);\n  private readonly dialogConfig = inject(DynamicDialogConfig);\n  private readonly cdr = inject(ChangeDetectorRef);\n\n  // CompanyGroup model to collect data across steps\n  newCompanyGroup = signal<CompanyGroupCreateRequest>(\n    {} as CompanyGroupCreateRequest,\n  );\n\n  // Form validity state\n  formIsValid = signal<boolean>(false);\n\n  steps: Step[] = [];\n  previousStepIndex = 0;\n  currentStepIndex = 0;\n  ownerId: string | null = null;\n  isSubmitting = signal<boolean>(false);\n\n  ngAfterViewInit() {\n    this.steps = [\n      {\n        value: 1,\n        header: 'Company Group Details',\n        content: this.companyGroupDetailsStep,\n        complete: false,\n        validate: () => this.companyGroupDetailsForm.validate(),\n      },\n      {\n        value: 2,\n        header: 'Confirmation',\n        content: this.confirmationTemplate,\n        complete: true,\n      },\n    ];\n    this.cdr.detectChanges();\n  }\n\n  ngOnInit(): void {\n    if (isDefined(this.dialogConfig.data)) {\n      this.ownerId = this.dialogConfig.data.ownerId ?? null;\n\n      // Initialize companyGroup with ownerId\n      this.newCompanyGroup.update((current) => ({\n        ...current,\n        ownerId: this.ownerId ?? '',\n      }));\n    }\n  }\n\n  openWizard() {\n    this.newCompanyGroup.set({} as CompanyGroupCreateRequest);\n  }\n\n  // Form validity handlers\n  onDetailsFormValidityChange(isValid: boolean) {\n    this.steps[0].disableNext = !isValid;\n    this.formIsValid.set(isValid);\n  }\n\n  // Update the companyGroup state with form data\n  updateCompanyGroupDetails(formData: Record<string, unknown>) {\n    this.newCompanyGroup.update((current) => {\n      const updated = { ...current };\n\n      Object.keys(formData).forEach((key) => {\n        if (key !== 'ownerId') {\n          updated[key] = formData[key];\n        }\n      });\n\n      if (isNullOrUndefined(updated.ownerId)) {\n        updated.ownerId = this.ownerId ?? '';\n      }\n\n      return updated;\n    });\n  }\n\n  onWizardComplete(): void {\n    // Process the final data from all steps\n    const companyGroupData = this.newCompanyGroup();\n    this.isSubmitting.set(true);\n\n    this.accountsService\n      .createCompanyGroup(companyGroupData)\n      .pipe(\n        takeUntilDestroyed(this.destroyRef),\n        finalize(() => this.isSubmitting.set(false)),\n      )\n      .subscribe({\n        next: (response: CompanyGroupResponse) => {\n          this.broadcastService.broadcast('entity-updated', {\n            entityType: 'company-group',\n            operation: 'create',\n            entityId: response.id,\n          });\n          this.dialogRef.close(response);\n        },\n        error: (error: Error) => {\n          // Handle error, could show message and keep dialog open\n          console.error('Error creating company group:', error);\n        },\n      });\n  }\n\n  // Update cancel to close dialog with no result\n  onWizardCancel(): void {\n    this.newCompanyGroup.set({} as CompanyGroupCreateRequest);\n    this.dialogRef.close();\n  }\n}\n","<app-wizard\n  [contentOnly]=\"true\"\n  [steps]=\"steps\"\n  [showSteps]=\"false\"\n  [useWizardButtonsOnly]=\"true\"\n  [loading]=\"isSubmitting()\"\n  (complete)=\"onWizardComplete()\"\n  (onCancel)=\"onWizardCancel()\"\n>\n</app-wizard>\n\n<!-- Step 1: Company Group Details -->\n<ng-template #companyGroupDetailsStep>\n  <div class=\"p-fluid\">\n    <app-company-group-details-section\n      #companyGroupDetailsForm\n      [createMode]=\"true\"\n      [entity]=\"newCompanyGroup()\"\n      [ownerId]=\"ownerId\"\n      (formValidityChange)=\"onDetailsFormValidityChange($event)\"\n      (formValueChange)=\"updateCompanyGroupDetails($event)\"\n    ></app-company-group-details-section>\n  </div>\n</ng-template>\n\n<ng-template #confirmationTemplate>\n  <div class=\"flex gap-6\">\n    <span class=\"pi pi-check !text-5xl\"></span>\n\n    <div class=\"flex-1\">\n      <div class=\"grid\">\n        <!-- Company Group Details Section -->\n        <div class=\"col-12 md:col-6\">\n          <p class=\"mb-4\">\n            You've completed all of the information required and we're ready to\n            create your Company Group.\n          </p>\n\n          <div class=\"space-y-2\">\n            <div class=\"flex\">\n              <div class=\"w-1/3 font-medium\">Parent:</div>\n              <div class=\"w-2/3\">\n                {{ newCompanyGroup().parent?.name || 'Root' }}\n              </div>\n            </div>\n\n            <div class=\"flex\">\n              <div class=\"w-1/3 font-medium\">Name:</div>\n              <div class=\"w-2/3\">\n                {{ newCompanyGroup().name || 'Not provided' }}\n              </div>\n            </div>\n          </div>\n        </div>\n      </div>\n\n      <div\n        class=\"mt-4 pt-4 border-top-1 border-surface-200 dark:border-surface-700\"\n      >\n        <p class=\"mb-0\">Click finish to create this Company Group.</p>\n      </div>\n    </div>\n  </div>\n</ng-template>\n","import { Injectable, inject } from '@angular/core';\n\nimport { TableLazyLoadEvent } from 'primeng/table';\n\nimport {\n  DataGridParams,\n  DATE_FORMATS,\n  TreeTableColumn,\n  TreeTableConfiguration,\n} from '../../../shared/models';\nimport { isDefined } from '../../../shared/utils';\n\nimport { CompanyGroupResponse } from '../../../api';\nimport { CompanyGroupsDataAdapter } from '../services/adapters';\nimport { MeasurementDateTimeService } from '../../../shared/services/measurement-units/measurement-date-time.service';\nimport { DEFAULT_LIST_SIZE } from '../../../core/models';\nimport { DynamicDialogRef, DialogService } from 'primeng/dynamicdialog';\nimport { take } from 'rxjs';\nimport { CompanyGroupCreateWizardComponent } from '../components/company-groups/company-group-create-wizard/company-group-create-wizard.component';\n\n@Injectable({ providedIn: 'root' })\nexport class CompanyGroupsGridConfig\n  implements TreeTableConfiguration<CompanyGroupResponse>\n{\n  private readonly companyGroupsService = inject(CompanyGroupsDataAdapter);\n  private readonly measurementDateTimeService = inject(\n    MeasurementDateTimeService,\n  );\n  private dialogRef: DynamicDialogRef | null = null;\n  private readonly dialogService = inject(DialogService);\n\n  private params: Record<string, string> = {};\n\n  entityType = 'company-groups';\n  columns: TreeTableColumn<CompanyGroupResponse>[] = [\n    {\n      field: 'name',\n      header: 'Name',\n      filterType: 'text',\n    },\n\n    {\n      field: 'modifiedDate',\n      header: 'Modified',\n      valueGetter: (rowData: CompanyGroupResponse) =>\n        isDefined(rowData.entity.modifiedDate)\n          ? this.measurementDateTimeService.formatDateTime(\n              this.measurementDateTimeService.createDateAssumingUtc(\n                rowData.entity.modifiedDate,\n              ),\n              DATE_FORMATS.DATE_TIME_SECONDS,\n            )\n          : '',\n    },\n  ];\n\n  dataService = this.companyGroupsService;\n  ownerId = '';\n\n  initialize(params: Record<string, string>): void {\n    this.params = params;\n    if (isDefined(this.params['clientId'])) {\n      this.ownerId = String(this.params['clientId']);\n    } else if (isDefined(this.params['vendorId'])) {\n      this.ownerId = String(this.params['vendorId']);\n    } else if (isDefined(this.params['distributorId'])) {\n      this.ownerId = String(this.params['distributorId']);\n    }\n  }\n\n  getTitle(): string {\n    return 'Company Groups';\n  }\n\n  getRequestParams(event?: TableLazyLoadEvent): DataGridParams {\n    // Add sorting support\n    let sortField = 'name:asc'; // Default\n\n    if (isDefined(event?.sortField)) {\n      const sortOrder = event.sortOrder === 1 ? 'asc' : 'desc';\n      sortField = `${event.sortField}:${sortOrder}`;\n    }\n\n    return {\n      owner: this.ownerId,\n      offset: isDefined(event?.first) ? event.first : 0,\n      recurse: false,\n      limit: DEFAULT_LIST_SIZE,\n      sortField: sortField,\n    };\n  }\n\n  onAdd(): void {\n    const clientId = this.ownerId;\n\n    this.openCompanyGroupCreationDialog(clientId).pipe(take(1)).subscribe();\n  }\n\n  openCompanyGroupCreationDialog(ownerId: string) {\n    this.dialogRef = this.dialogService.open(\n      CompanyGroupCreateWizardComponent,\n      {\n        header: 'Company Group Wizard',\n        contentStyle: { overflow: 'auto' },\n        baseZIndex: 10000,\n        data: { ownerId: ownerId },\n        position: 'top',\n        modal: true,\n      },\n    );\n\n    return this.dialogRef.onClose;\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport {\n  AfterViewInit,\n  ChangeDetectorRef,\n  Component,\n  DestroyRef,\n  inject,\n  OnInit,\n  signal,\n  TemplateRef,\n  ViewChild,\n} from '@angular/core';\nimport { takeUntilDestroyed } from '@angular/core/rxjs-interop';\nimport { ReactiveFormsModule } from '@angular/forms';\n\nimport { ButtonModule } from 'primeng/button';\nimport { DynamicDialogRef, DynamicDialogConfig } from 'primeng/dynamicdialog';\n\nimport {\n  EntitiesService,\n  CostCentreCreateRequest,\n  CostCentreResponse,\n} from '../../../../../api';\nimport { WizardComponent } from '../../../../../shared/components/wizard/wizard.component';\nimport { isDefined, isNullOrUndefined } from '../../../../../shared/utils';\nimport { CostCentreDetailsSectionComponent } from '../cost-centre-details-section/cost-centre-details-section.component';\nimport { Step } from '../../../../../shared/models';\nimport { BroadcastEventMessageService } from '../../../services/broadcast-event-messages.service';\nimport { finalize } from 'rxjs';\n\n@Component({\n  selector: 'app-cost-centre-create-wizard',\n  imports: [\n    CommonModule,\n    ReactiveFormsModule,\n    WizardComponent,\n    ButtonModule,\n    CostCentreDetailsSectionComponent,\n  ],\n  templateUrl: './cost-centre-create-wizard.component.html',\n  styleUrl: './cost-centre-create-wizard.component.scss',\n})\nexport class CostCentreCreateWizardComponent implements AfterViewInit, OnInit {\n  @ViewChild('costCentreDetailsStep')\n  costCentreDetailsStep!: TemplateRef<{\n    $implicit: Step;\n  }> | null;\n  @ViewChild('confirmationTemplate', { static: true })\n  confirmationTemplate!: TemplateRef<{ $implicit: Step }> | null;\n\n  // References to form components\n  @ViewChild('costCentreDetailsForm')\n  costCentreDetailsForm!: CostCentreDetailsSectionComponent;\n\n  private readonly entitiesService = inject(EntitiesService);\n  private readonly broadcastService = inject(BroadcastEventMessageService);\n  protected readonly destroyRef = inject(DestroyRef);\n  private readonly dialogRef = inject(DynamicDialogRef);\n  private readonly dialogConfig = inject(DynamicDialogConfig);\n  private readonly cdr = inject(ChangeDetectorRef);\n\n  // CostCentre model to collect data across steps\n  newCostCentre = signal<CostCentreCreateRequest>(\n    {} as CostCentreCreateRequest,\n  );\n\n  // Form validity state\n  formIsValid = signal<boolean>(false);\n\n  steps: Step[] = [];\n  previousStepIndex = 0;\n  currentStepIndex = 0;\n  ownerId: string | null = null;\n  isSubmitting = signal<boolean>(false);\n\n  ngAfterViewInit() {\n    this.steps = [\n      {\n        value: 1,\n        header: 'Cost Centre Details',\n        content: this.costCentreDetailsStep,\n        complete: false,\n        validate: () => this.costCentreDetailsForm.validate(),\n      },\n      {\n        value: 2,\n        header: 'Confirmation',\n        content: this.confirmationTemplate,\n        complete: true,\n      },\n    ];\n    this.cdr.detectChanges();\n  }\n\n  ngOnInit(): void {\n    if (isDefined(this.dialogConfig.data)) {\n      this.ownerId = this.dialogConfig.data.ownerId ?? null;\n\n      // Initialize costCentre with ownerId\n      this.newCostCentre.update((current) => ({\n        ...current,\n        ownerId: this.ownerId ?? '',\n      }));\n    }\n  }\n\n  openWizard() {\n    this.newCostCentre.set({} as CostCentreCreateRequest);\n  }\n\n  // Form validity handlers\n  onDetailsFormValidityChange(isValid: boolean) {\n    this.steps[0].disableNext = !isValid;\n    this.formIsValid.set(isValid);\n  }\n\n  // Update the costCentre state with form data\n  updateCostCentreDetails(formData: Record<string, unknown>) {\n    this.newCostCentre.update((current) => {\n      const updated = { ...current };\n\n      Object.keys(formData).forEach((key) => {\n        if (key !== 'ownerId') {\n          updated[key] = formData[key];\n        }\n      });\n\n      if (isNullOrUndefined(updated.ownerId)) {\n        updated.ownerId = this.ownerId ?? '';\n      }\n\n      return updated;\n    });\n  }\n\n  onWizardComplete(): void {\n    // Process the final data from all steps\n    const costCentreData = this.newCostCentre();\n    this.isSubmitting.set(true);\n\n    this.entitiesService\n      .createCostCentre(costCentreData)\n      .pipe(\n        takeUntilDestroyed(this.destroyRef),\n        finalize(() => this.isSubmitting.set(false)),\n      )\n      .subscribe({\n        next: (response: CostCentreResponse) => {\n          this.broadcastService.broadcast('entity-updated', {\n            entityType: 'cost-centre',\n            operation: 'create',\n            entityId: response.id,\n          });\n          this.dialogRef.close(response);\n        },\n        error: (error: Error) => {\n          // Handle error, could show message and keep dialog open\n          console.error('Error creating cost centre:', error);\n        },\n      });\n  }\n\n  // Update cancel to close dialog with no result\n  onWizardCancel(): void {\n    this.newCostCentre.set({} as CostCentreCreateRequest);\n    this.dialogRef.close();\n  }\n}\n","<app-wizard\n  [contentOnly]=\"true\"\n  [steps]=\"steps\"\n  [showSteps]=\"false\"\n  [useWizardButtonsOnly]=\"true\"\n  [loading]=\"isSubmitting()\"\n  (complete)=\"onWizardComplete()\"\n  (onCancel)=\"onWizardCancel()\"\n>\n</app-wizard>\n\n<!-- Step 1: Cost Centre Details -->\n<ng-template #costCentreDetailsStep let-step>\n  <div class=\"p-fluid\">\n    <app-cost-centre-details-section\n      #costCentreDetailsForm\n      [createMode]=\"true\"\n      [entity]=\"newCostCentre()\"\n      [ownerId]=\"ownerId\"\n      (formValidityChange)=\"onDetailsFormValidityChange($event)\"\n      (formValueChange)=\"updateCostCentreDetails($event)\"\n    ></app-cost-centre-details-section>\n  </div>\n</ng-template>\n\n<ng-template #confirmationTemplate let-step>\n  <div class=\"flex gap-6\">\n    <span class=\"pi pi-check !text-5xl\"></span>\n\n    <div class=\"flex-1\">\n      <div class=\"grid\">\n        <!-- Cost Centre Details Section -->\n        <div class=\"col-12 md:col-6\">\n          <p class=\"mb-4\">\n            You've completed all of the information required and we're ready to\n            create your Cost Centre.\n          </p>\n\n          <div class=\"space-y-2\">\n            <div class=\"flex\">\n              <div class=\"w-1/3 font-medium\">Parent:</div>\n              <div class=\"w-2/3\">\n                {{ newCostCentre().parent?.name || 'Not provided' }}\n              </div>\n            </div>\n\n            <div class=\"flex\">\n              <div class=\"w-1/3 font-medium\">Name:</div>\n              <div class=\"w-2/3\">\n                {{ newCostCentre().name || 'Not provided' }}\n              </div>\n            </div>\n          </div>\n        </div>\n      </div>\n\n      <div\n        class=\"mt-4 pt-4 border-top-1 border-surface-200 dark:border-surface-700\"\n      >\n        <p class=\"mb-0\">Click finish to create this Cost Centre.</p>\n      </div>\n    </div>\n  </div>\n</ng-template>\n","import { Injectable, inject } from '@angular/core';\n\nimport { TableLazyLoadEvent } from 'primeng/table';\n\nimport {\n  DataGridParams,\n  DATE_FORMATS,\n  TreeTableColumn,\n  TreeTableConfiguration,\n} from '../../../shared/models';\nimport { isDefined } from '../../../shared/utils';\n\nimport { CostCentreResponse } from '../../../api';\nimport { CostCentresDataAdapter } from '../services/adapters';\nimport { MeasurementDateTimeService } from '../../../shared/services/measurement-units/measurement-date-time.service';\nimport { DynamicDialogRef, DialogService } from 'primeng/dynamicdialog';\nimport { CostCentreCreateWizardComponent } from '../components/cost-centres/cost-centre-create-wizard/cost-centre-create-wizard.component';\nimport { take } from 'rxjs';\nimport { DEFAULT_LIST_SIZE } from '../../../core/models';\n\n@Injectable({ providedIn: 'root' })\nexport class CostCentresGridConfig\n  implements TreeTableConfiguration<CostCentreResponse>\n{\n  private readonly costCentresService = inject(CostCentresDataAdapter);\n  private readonly measurementDateTimeService = inject(\n    MeasurementDateTimeService,\n  );\n  private dialogRef: DynamicDialogRef | null = null;\n  private readonly dialogService = inject(DialogService);\n\n  private params: Record<string, string> = { clientId: '' };\n\n  entityType = 'cost-centres';\n  columns: TreeTableColumn<CostCentreResponse>[] = [\n    {\n      field: 'name',\n      header: 'Name',\n      filterType: 'text',\n    },\n\n    {\n      field: 'modifiedDate',\n      header: 'Modified',\n      valueGetter: (rowData: CostCentreResponse) =>\n        isDefined(rowData?.entity?.modifiedDate)\n          ? this.measurementDateTimeService.formatDateTime(\n              this.measurementDateTimeService.createDateAssumingUtc(\n                rowData?.entity?.modifiedDate,\n              ),\n              DATE_FORMATS.DATE_TIME_SECONDS,\n            )\n          : '',\n    },\n  ];\n\n  dataService = this.costCentresService;\n\n  initialize(params: Record<string, string>): void {\n    this.params = params;\n  }\n\n  getTitle(): string {\n    return 'Cost Centres';\n  }\n\n  getRequestParams(event?: TableLazyLoadEvent): DataGridParams {\n    // Add sorting support\n    let sortField = 'name:asc'; // Default\n\n    if (isDefined(event?.sortField)) {\n      const sortOrder = event.sortOrder === 1 ? 'asc' : 'desc';\n      sortField = `${event.sortField}:${sortOrder}`;\n    }\n\n    return {\n      owner: this.params['clientId'],\n      offset: isDefined(event?.first) ? event.first : 0,\n      recurse: false,\n      limit: DEFAULT_LIST_SIZE,\n      sortField: sortField,\n    };\n  }\n\n  onAdd(): void {\n    const clientId = this.params['clientId'];\n\n    this.openCostCentreCreationDialog(clientId).pipe(take(1)).subscribe();\n  }\n\n  openCostCentreCreationDialog(ownerId: string) {\n    this.dialogRef = this.dialogService.open(CostCentreCreateWizardComponent, {\n      header: 'Cost Centre Wizard',\n      contentStyle: { overflow: 'auto' },\n      baseZIndex: 10000,\n      data: { ownerId: ownerId },\n      position: 'top',\n      modal: true,\n    });\n\n    return this.dialogRef.onClose;\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport {\n  AfterViewInit,\n  ChangeDetectorRef,\n  Component,\n  DestroyRef,\n  inject,\n  OnInit,\n  signal,\n  TemplateRef,\n  ViewChild,\n} from '@angular/core';\nimport { takeUntilDestroyed } from '@angular/core/rxjs-interop';\nimport { ReactiveFormsModule } from '@angular/forms';\n\nimport { ButtonModule } from 'primeng/button';\nimport { DynamicDialogRef, DynamicDialogConfig } from 'primeng/dynamicdialog';\n\nimport {\n  EntitiesService,\n  ZoneGroupCreateRequest,\n  ZoneGroupResponse,\n} from '../../../../../api';\nimport { WizardComponent } from '../../../../../shared/components/wizard/wizard.component';\nimport { isDefined, isNullOrUndefined } from '../../../../../shared/utils';\nimport { GeofenceGroupDetailsSectionComponent } from '../geofence-group-details-section/geofence-group-details-section.component';\nimport { Step } from '../../../../../shared/models';\nimport { BroadcastEventMessageService } from '../../../services/broadcast-event-messages.service';\nimport { finalize } from 'rxjs';\n\n@Component({\n  selector: 'app-geofence-group-create-wizard',\n  imports: [\n    CommonModule,\n    ReactiveFormsModule,\n    WizardComponent,\n    ButtonModule,\n    GeofenceGroupDetailsSectionComponent,\n  ],\n  templateUrl: './geofence-group-create-wizard.component.html',\n  styleUrl: './geofence-group-create-wizard.component.scss',\n})\nexport class GeofenceGroupCreateWizardComponent\n  implements AfterViewInit, OnInit\n{\n  @ViewChild('geofenceGroupDetailsStep')\n  geofenceGroupDetailsStep!: TemplateRef<{\n    $implicit: Step;\n  }> | null;\n  @ViewChild('confirmationTemplate', { static: true })\n  confirmationTemplate!: TemplateRef<{ $implicit: Step }> | null;\n\n  // References to form components\n  @ViewChild('geofenceGroupDetailsForm')\n  geofenceGroupDetailsForm!: GeofenceGroupDetailsSectionComponent;\n\n  private readonly entitiesService = inject(EntitiesService);\n  private readonly broadcastService = inject(BroadcastEventMessageService);\n  protected readonly destroyRef = inject(DestroyRef);\n  private readonly dialogRef = inject(DynamicDialogRef);\n  private readonly dialogConfig = inject(DynamicDialogConfig);\n  private readonly cdr = inject(ChangeDetectorRef);\n\n  // GeofenceGroup model to collect data across steps\n  newGeofenceGroup = signal<ZoneGroupCreateRequest>(\n    {} as ZoneGroupCreateRequest,\n  );\n\n  // Form validity state\n  formIsValid = signal<boolean>(false);\n\n  steps: Step[] = [];\n  previousStepIndex = 0;\n  currentStepIndex = 0;\n  ownerId: string | null = null;\n  isSubmitting = signal<boolean>(false);\n\n  ngAfterViewInit() {\n    this.steps = [\n      {\n        value: 1,\n        header: 'Geofence Group Details',\n        content: this.geofenceGroupDetailsStep,\n        complete: false,\n        validate: () => this.geofenceGroupDetailsForm.validate(),\n      },\n      {\n        value: 2,\n        header: 'Confirmation',\n        content: this.confirmationTemplate,\n        complete: true,\n      },\n    ];\n    this.cdr.detectChanges();\n  }\n\n  ngOnInit(): void {\n    if (isDefined(this.dialogConfig.data)) {\n      this.ownerId = this.dialogConfig.data.ownerId ?? null;\n\n      // Initialize geofenceGroup with ownerId\n      this.newGeofenceGroup.update((current) => ({\n        ...current,\n        ownerId: this.ownerId ?? '',\n      }));\n    }\n  }\n\n  openWizard() {\n    this.newGeofenceGroup.set({} as ZoneGroupCreateRequest);\n  }\n\n  // Form validity handlers\n  onDetailsFormValidityChange(isValid: boolean) {\n    this.steps[0].disableNext = !isValid;\n    this.formIsValid.set(isValid);\n  }\n\n  // Update the geofenceGroup state with form data\n  updateGeofenceGroupDetails(formData: Record<string, unknown>) {\n    this.newGeofenceGroup.update((current) => {\n      const updated = { ...current };\n\n      Object.keys(formData).forEach((key) => {\n        if (key !== 'ownerId') {\n          updated[key] = formData[key];\n        }\n      });\n\n      if (isNullOrUndefined(updated.ownerId)) {\n        updated.ownerId = this.ownerId ?? '';\n      }\n\n      return updated;\n    });\n  }\n\n  onWizardComplete(): void {\n    // Process the final data from all steps\n    const geofenceGroupData = this.newGeofenceGroup();\n\n    this.isSubmitting.set(true);\n    this.entitiesService\n      .createZoneGroup(geofenceGroupData)\n      .pipe(\n        takeUntilDestroyed(this.destroyRef),\n        finalize(() => this.isSubmitting.set(false)),\n      )\n      .subscribe({\n        next: (response: ZoneGroupResponse) => {\n          this.broadcastService.broadcast('entity-updated', {\n            entityType: 'geofence-group',\n            operation: 'create',\n            entityId: response.id,\n          });\n          this.dialogRef.close(response);\n        },\n        error: (error: Error) => {\n          // Handle error, could show message and keep dialog open\n          console.error('Error creating geofence group:', error);\n        },\n      });\n  }\n\n  // Update cancel to close dialog with no result\n  onWizardCancel(): void {\n    this.newGeofenceGroup.set({} as ZoneGroupCreateRequest);\n    this.dialogRef.close();\n  }\n}\n","<app-wizard\n  [contentOnly]=\"true\"\n  [steps]=\"steps\"\n  [showSteps]=\"false\"\n  [useWizardButtonsOnly]=\"true\"\n  [loading]=\"isSubmitting()\"\n  (complete)=\"onWizardComplete()\"\n  (onCancel)=\"onWizardCancel()\"\n>\n</app-wizard>\n\n<!-- Step 1: GeofenceGroup Details -->\n<ng-template #geofenceGroupDetailsStep let-step>\n  <div class=\"p-fluid\">\n    <app-geofence-group-details-section\n      #geofenceGroupDetailsForm\n      [createMode]=\"true\"\n      [entity]=\"newGeofenceGroup()\"\n      [ownerId]=\"ownerId\"\n      (formValidityChange)=\"onDetailsFormValidityChange($event)\"\n      (formValueChange)=\"updateGeofenceGroupDetails($event)\"\n    ></app-geofence-group-details-section>\n  </div>\n</ng-template>\n\n<ng-template #confirmationTemplate let-step>\n  <div class=\"flex gap-6\">\n    <span class=\"pi pi-check !text-5xl\"></span>\n\n    <div class=\"flex-1\">\n      <div class=\"grid\">\n        <!-- GeofenceGroup Details Section -->\n        <div class=\"col-12 md:col-6\">\n          <p class=\"mb-4\">\n            You've completed all of the information required and we're ready to\n            create your Geofence Group.\n          </p>\n\n          <div class=\"space-y-2\">\n            <div class=\"flex\">\n              <div class=\"w-1/3 font-medium\">Parent:</div>\n              <div class=\"w-2/3\">\n                {{ newGeofenceGroup().parent?.name || 'Root' }}\n              </div>\n            </div>\n\n            <div class=\"flex\">\n              <div class=\"w-1/3 font-medium\">Name:</div>\n              <div class=\"w-2/3\">\n                {{ newGeofenceGroup().name || 'Not provided' }}\n              </div>\n            </div>\n          </div>\n        </div>\n      </div>\n\n      <div\n        class=\"mt-4 pt-4 border-top-1 border-surface-200 dark:border-surface-700\"\n      >\n        <p class=\"mb-0\">Click finish to create this Geofence Group.</p>\n      </div>\n    </div>\n  </div>\n</ng-template>\n","import { Injectable, inject } from '@angular/core';\n\nimport { TableLazyLoadEvent } from 'primeng/table';\n\nimport {\n  DataGridParams,\n  DATE_FORMATS,\n  TreeTableColumn,\n  TreeTableConfiguration,\n} from '../../../shared/models';\nimport { isDefined } from '../../../shared/utils';\n\nimport { ZoneGroupListItem } from '../../../api';\nimport { GeofenceGroupsDataAdapter } from '../services/adapters';\nimport { MeasurementDateTimeService } from '../../../shared/services/measurement-units/measurement-date-time.service';\nimport { DynamicDialogRef, DialogService } from 'primeng/dynamicdialog';\nimport { GeofenceGroupCreateWizardComponent } from '../components/geofence-groups/geofence-group-create-wizard/geofence-group-create-wizard.component';\nimport { DEFAULT_LIST_SIZE } from '../../../core/models';\n\n@Injectable({ providedIn: 'root' })\nexport class GeofenceGroupsGridConfig\n  implements TreeTableConfiguration<ZoneGroupListItem>\n{\n  private readonly geofenceGroupsService = inject(GeofenceGroupsDataAdapter);\n  private readonly measurementDateTimeService = inject(\n    MeasurementDateTimeService,\n  );\n  private dialogRef: DynamicDialogRef | null = null;\n  private readonly dialogService = inject(DialogService);\n\n  private params: Record<string, string> = { clientId: '' };\n\n  entityType = 'geofence-groups';\n  columns: TreeTableColumn<ZoneGroupListItem>[] = [\n    {\n      field: 'name',\n      header: 'Name',\n      filterType: 'text',\n    },\n\n    {\n      field: 'modifiedDate',\n      header: 'Modified',\n      valueGetter: (rowData: ZoneGroupListItem) =>\n        isDefined(rowData?.modifiedDate)\n          ? this.measurementDateTimeService.formatDateTime(\n              this.measurementDateTimeService.createDateAssumingUtc(\n                rowData.modifiedDate,\n              ),\n              DATE_FORMATS.DATE_TIME_SECONDS,\n            )\n          : '',\n    },\n  ];\n\n  dataService = this.geofenceGroupsService;\n\n  initialize(params: Record<string, string>): void {\n    this.params = params;\n  }\n\n  getTitle(): string {\n    return 'Geofence Groups';\n  }\n\n  getRequestParams(event?: TableLazyLoadEvent): DataGridParams {\n    // Add sorting support\n    let sortField = 'name:asc'; // Default\n\n    if (isDefined(event?.sortField)) {\n      const sortOrder = event.sortOrder === 1 ? 'asc' : 'desc';\n      sortField = `${event.sortField}:${sortOrder}`;\n    }\n\n    return {\n      owner: this.params['clientId'],\n      offset: isDefined(event?.first) ? event.first : 0,\n      recurse: false,\n      limit: DEFAULT_LIST_SIZE,\n      sortField: sortField,\n    };\n  }\n\n  onAdd(): void {\n    const clientId = this.params['clientId'];\n\n    this.openGeofenceGroupCreationDialog(clientId).subscribe();\n  }\n\n  openGeofenceGroupCreationDialog(ownerId: string) {\n    this.dialogRef = this.dialogService.open(\n      GeofenceGroupCreateWizardComponent,\n      {\n        header: 'Geofence Group Wizard',\n        contentStyle: { overflow: 'auto' },\n        baseZIndex: 10000,\n        data: { ownerId: ownerId },\n        position: 'top',\n        modal: true,\n      },\n    );\n\n    return this.dialogRef.onClose;\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport {\n  AfterViewInit,\n  ChangeDetectorRef,\n  Component,\n  DestroyRef,\n  inject,\n  OnInit,\n  signal,\n  TemplateRef,\n  ViewChild,\n} from '@angular/core';\nimport { takeUntilDestroyed } from '@angular/core/rxjs-interop';\n\nimport { ButtonModule } from 'primeng/button';\nimport { DynamicDialogRef, DynamicDialogConfig } from 'primeng/dynamicdialog';\n\nimport {\n  DeviceTypeCreateRequest,\n  DeviceTypeResponse,\n  DeviceTypesService,\n} from '../../../../../api';\nimport { WizardComponent } from '../../../../../shared/components/wizard/wizard.component';\nimport { isDefined, isNullOrUndefined } from '../../../../../shared/utils';\nimport { BroadcastEventMessageService } from '../../../services/broadcast-event-messages.service';\nimport { Step } from '../../../../../shared/models';\nimport { finalize } from 'rxjs';\nimport { DeviceTypesInformationSectionComponent } from '../device-types-information-section/device-types-information-section.component';\n\n@Component({\n  selector: 'app-device-types-create-wizard',\n  imports: [\n    CommonModule,\n    WizardComponent,\n    ButtonModule,\n    DeviceTypesInformationSectionComponent,\n  ],\n  templateUrl: './device-types-create-wizard.component.html',\n  styleUrl: './device-types-create-wizard.component.scss',\n})\nexport class DeviceTypesCreateWizardComponent implements AfterViewInit, OnInit {\n  @ViewChild('deviceTypeDetailsStep') deviceTypeDetailsStep!: TemplateRef<{\n    $implicit: Step;\n  }> | null;\n  @ViewChild('confirmationTemplate', { static: true })\n  confirmationTemplate!: TemplateRef<{ $implicit: Step }> | null;\n\n  // References to form components\n  @ViewChild('deviceTypeDetailsForm')\n  deviceTypeDetailsForm!: DeviceTypesInformationSectionComponent;\n\n  private readonly deviceTypesService = inject(DeviceTypesService);\n  private readonly broadcastService = inject(BroadcastEventMessageService);\n  protected readonly destroyRef = inject(DestroyRef);\n  private readonly dialogRef = inject(DynamicDialogRef);\n  private readonly dialogConfig = inject(DynamicDialogConfig);\n  private readonly cdr = inject(ChangeDetectorRef);\n\n  // Device type model to collect data across steps\n  newDeviceType = signal<DeviceTypeCreateRequest>(\n    {} as DeviceTypeCreateRequest,\n  );\n\n  // Form validity state\n  formIsValid = signal<boolean>(false);\n\n  steps: Step[] = [];\n  ownerId: string | null = null;\n  isSubmitting = signal<boolean>(false);\n\n  // Make Object available to template\n  protected readonly Object = Object;\n\n  ngAfterViewInit() {\n    this.steps = [\n      {\n        value: 1,\n        header: 'Device Type Details',\n        content: this.deviceTypeDetailsStep,\n        complete: false,\n        disableNext: true,\n        validate: () => this.deviceTypeDetailsForm.validate(),\n      },\n      {\n        value: 2,\n        header: 'Confirmation',\n        content: this.confirmationTemplate,\n        complete: true,\n      },\n    ];\n    this.cdr.detectChanges();\n  }\n\n  ngOnInit(): void {\n    if (isDefined(this.dialogConfig.data)) {\n      this.ownerId = this.dialogConfig.data.ownerId ?? null;\n\n      // Initialize device type with ownerId\n      this.newDeviceType.update((current) => ({\n        ...current,\n        ownerId: this.ownerId ?? '',\n      }));\n    }\n\n    // Initialize form validity state\n    this.formIsValid.set(false);\n  }\n\n  openWizard() {\n    this.newDeviceType.set({} as DeviceTypeCreateRequest);\n    // Reset form validity\n    this.formIsValid.set(false);\n    // Ensure the first step is initially disabled until validation passes\n    if (this.steps.length > 0) {\n      this.steps[0].disableNext = true;\n      this.steps[0].complete = false;\n    }\n  }\n\n  // Form validity handlers\n  onDetailsFormValidityChange(isValid: boolean) {\n    this.steps[0].disableNext = !isValid;\n    this.formIsValid.set(isValid);\n\n    // Emit validation state for parent components if needed\n    if (isDefined(this.steps[0])) {\n      this.steps[0].complete = isValid;\n    }\n  }\n\n  // Update the device type state with form data\n  updateDeviceTypeDetails(formData: Record<string, unknown>) {\n    this.newDeviceType.update((current) => {\n      const updated = { ...current };\n\n      for (const key of Object.keys(formData)) {\n        if (key !== 'ownerId') {\n          updated[key] = formData[key];\n        }\n      }\n\n      if (isNullOrUndefined(updated.ownerId)) {\n        updated.ownerId = this.ownerId ?? '';\n      }\n\n      return updated;\n    });\n  }\n\n  onWizardComplete(): void {\n    // Process the final data from all steps\n    const deviceTypeData = this.newDeviceType();\n    this.isSubmitting.set(true);\n\n    this.deviceTypesService\n      .createDeviceType(deviceTypeData)\n      .pipe(\n        takeUntilDestroyed(this.destroyRef),\n        finalize(() => this.isSubmitting.set(false)),\n      )\n      .subscribe({\n        next: (response: DeviceTypeResponse) => {\n          this.broadcastService.broadcast('entity-updated', {\n            entityType: 'device-types',\n            operation: 'create',\n            entityId: response.id,\n          });\n          this.broadcastService.broadcast('tree-refresh-required', {\n            entityType: 'device-types',\n            operation: 'create',\n            entityId: response.id,\n          });\n          this.dialogRef.close(response);\n        },\n        error: (error: Error) => {\n          // Handle error, could show message and keep dialog open\n          console.error('Error creating device type:', error);\n        },\n      });\n  }\n\n  // Update cancel to close dialog with no result\n  onWizardCancel(): void {\n    this.newDeviceType.set({} as DeviceTypeCreateRequest);\n    this.dialogRef.close();\n  }\n}\n","<app-wizard\n  [contentOnly]=\"true\"\n  [steps]=\"steps\"\n  [showSteps]=\"false\"\n  [useWizardButtonsOnly]=\"true\"\n  [loading]=\"isSubmitting()\"\n  (complete)=\"onWizardComplete()\"\n  (onCancel)=\"onWizardCancel()\"\n>\n</app-wizard>\n\n<!-- Step 1: Device Type Details -->\n<ng-template #deviceTypeDetailsStep let-step>\n  <div class=\"p-fluid\">\n    <app-device-types-information-section\n      #deviceTypeDetailsForm\n      [createMode]=\"true\"\n      [entity]=\"newDeviceType()\"\n      [ownerId]=\"ownerId\"\n      (formValidityChange)=\"onDetailsFormValidityChange($event)\"\n      (formValueChange)=\"updateDeviceTypeDetails($event)\"\n    ></app-device-types-information-section>\n  </div>\n</ng-template>\n\n<ng-template #confirmationTemplate let-step>\n  <div class=\"flex gap-6\">\n    <span class=\"pi pi-check !text-5xl\"></span>\n\n    <div class=\"flex-1\">\n      <div class=\"grid\">\n        <!-- Device Type Details Section -->\n        <div class=\"col-12 lg:col-6\">\n          <h4 class=\"mb-3 text-900\">Device Type Details</h4>\n          <div class=\"mb-4 space-y-2\">\n            <div class=\"flex\">\n              <div class=\"w-1/3 font-medium\">Name:</div>\n              <div class=\"w-2/3\">\n                {{ newDeviceType().name || 'Not provided' }}\n              </div>\n            </div>\n            <div class=\"flex\">\n              <div class=\"w-1/3 font-medium\">Short Name:</div>\n              <div class=\"w-2/3\">\n                {{ newDeviceType().shortName || 'Not provided' }}\n              </div>\n            </div>\n            <div class=\"flex\">\n              <div class=\"w-1/3 font-medium\">Tag:</div>\n              <div class=\"w-2/3\">\n                {{ newDeviceType().tag || 'Not provided' }}\n              </div>\n            </div>\n            <div class=\"flex\">\n              <div class=\"w-1/3 font-medium\">State:</div>\n              <div class=\"w-2/3\">\n                {{ newDeviceType().state || 'Not provided' }}\n              </div>\n            </div>\n          </div>\n        </div>\n      </div>\n\n      <div\n        class=\"pt-4 mt-4 border-top-1 border-surface-200 dark:border-surface-700\"\n      >\n        <p class=\"mb-0\">\n          <strong>Ready to create your Device Type!</strong><br />\n          Click finish to create this device type with all the configured\n          settings.\n        </p>\n      </div>\n    </div>\n  </div>\n</ng-template>\n","import {\n  DATE_FORMATS,\n  DataGridParams,\n  TreeTableColumn,\n  TreeTableConfiguration,\n} from '../../../shared/models';\n\nimport { DEFAULT_LIST_SIZE, DEFAULT_SYSTEM_ID } from '../../../core/models';\nimport { DeviceTypeListItem } from '../../../api/model/deviceTypeListItem';\nimport { DeviceTypesDataAdapter } from '../services/adapters/device-types.adapter.service';\nimport { MeasurementDateTimeService } from '../../../shared/services/measurement-units/measurement-date-time.service';\nimport { TableLazyLoadEvent } from 'primeng/table';\nimport { inject, Injectable } from '@angular/core';\nimport { isDefined } from '../../../shared/utils';\nimport { DynamicDialogRef, DialogService } from 'primeng/dynamicdialog';\nimport { DeviceTypesCreateWizardComponent } from '../components/device-types/device-types-create-wizard/device-types-create-wizard.component';\n\n@Injectable({ providedIn: 'root' })\nexport class DeviceTypesGridConfig\n  implements TreeTableConfiguration<DeviceTypeListItem>\n{\n  private readonly deviceTypesService = inject(DeviceTypesDataAdapter);\n\n  private readonly measurementDateTimeService = inject(\n    MeasurementDateTimeService,\n  );\n  private dialogRef: DynamicDialogRef | null = null;\n  private readonly dialogService = inject(DialogService);\n\n  private params: Record<string, string> = { clientId: '' };\n\n  dataService = this.deviceTypesService;\n\n  entityType = 'device-types';\n  columns: TreeTableColumn<DeviceTypeListItem>[] = [\n    {\n      field: 'name',\n      header: 'Name',\n      filterType: 'text',\n    },\n    {\n      field: 'shortName',\n      header: 'Short Name',\n      filterType: 'text',\n    },\n    {\n      field: 'tag',\n      header: 'Tag',\n      filterType: 'text',\n    },\n    {\n      field: 'state',\n      header: 'Status',\n      filterType: 'multiselect',\n    },\n    {\n      field: 'modifiedDate',\n      header: 'Modified',\n      valueGetter: (rowData: DeviceTypeListItem) =>\n        isDefined(rowData.modifiedDate)\n          ? this.measurementDateTimeService.formatDateTime(\n              this.measurementDateTimeService.createDateAssumingUtc(\n                rowData.modifiedDate,\n              ),\n              DATE_FORMATS.DATE_TIME_SECONDS,\n            )\n          : '',\n    },\n  ];\n\n  getTitle(): string {\n    return 'Device Types';\n  }\n\n  initialize(params: Record<string, string>): void {\n    this.params = params;\n  }\n\n  getRequestParams(event?: TableLazyLoadEvent): DataGridParams {\n    let sortField = 'name:asc';\n\n    if (isDefined(event?.sortField)) {\n      const sortOrder = event.sortOrder === 1 ? 'asc' : 'desc';\n      sortField = `${event.sortField}:${sortOrder}`;\n    }\n\n    return {\n      owner: DEFAULT_SYSTEM_ID,\n      offset: isDefined(event?.first) ? event.first : 0,\n      recurse: false,\n      limit: DEFAULT_LIST_SIZE,\n      sortField,\n      filters: '',\n    };\n  }\n\n  onAdd(): void {\n    const ownerId = DEFAULT_SYSTEM_ID;\n    this.openDeviceTypeCreationDialog(ownerId).subscribe();\n  }\n\n  openDeviceTypeCreationDialog(ownerId: string) {\n    this.dialogRef = this.dialogService.open(DeviceTypesCreateWizardComponent, {\n      header: 'Device Type Wizard',\n      contentStyle: { overflow: 'auto' },\n      baseZIndex: 10000,\n      data: { ownerId: ownerId },\n      position: 'top',\n      modal: true,\n    });\n\n    return this.dialogRef.onClose;\n  }\n}\n","import { Type } from '@angular/core';\nimport { TREE_TABLE_CONFIGS } from '../../../core/models';\nimport {\n  TreeTableConfiguration,\n  TreeTableConfigurationEntry,\n} from '../../../shared/models';\nimport { AssetCategoriesGridConfig } from './asset-categories.grid.config';\nimport { AssetGroupsGridConfig } from './asset-groups.grid.config';\nimport { CompanyGroupsGridConfig } from './company-groups.grid.config';\nimport { CostCentresGridConfig } from './cost-centres.grid.config';\nimport { GeofenceGroupsGridConfig } from './geofence-groups.grid.config';\nimport { DeviceTypesGridConfig } from './device-types.grid.config';\n\n/**\n * Helper function to create a tree table configuration entry\n */\nfunction createTreeTableConfigEntry<T>(\n  entityType: string, // Changed from TreeTableEntityType to string\n  config: Type<TreeTableConfiguration<T>>,\n): TreeTableConfigurationEntry {\n  return {\n    entityType,\n    config: config as Type<TreeTableConfiguration<unknown>>,\n  };\n}\n\nexport const ADMIN_TREE_TABLE_CONFIGS = {\n  provide: TREE_TABLE_CONFIGS,\n  useValue: [\n    createTreeTableConfigEntry('client-cost-centres', CostCentresGridConfig),\n    createTreeTableConfigEntry('client-asset-groups', AssetGroupsGridConfig),\n    createTreeTableConfigEntry(\n      'client-asset-categories',\n      AssetCategoriesGridConfig,\n    ),\n    createTreeTableConfigEntry(\n      'client-geofence-groups',\n      GeofenceGroupsGridConfig,\n    ),\n    createTreeTableConfigEntry(\n      'vendor-company-groups',\n      CompanyGroupsGridConfig,\n    ),\n    createTreeTableConfigEntry(\n      'distributor-company-groups',\n      CompanyGroupsGridConfig,\n    ),\n    createTreeTableConfigEntry('device-types', DeviceTypesGridConfig),\n  ],\n  multi: true,\n};\n","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\n\nimport { AdministrationRoutingModule } from './administration-routing.module';\nimport {\n  ADMIN_GRID_CONFIGS_PROVIDER,\n  ADMIN_TREE_TABLE_CONFIGS,\n} from './configs';\nimport { GridConfigurationFactory } from '../../shared/components/grid/grid-config-factory';\nimport { TreeTableConfigurationFactory } from '../../shared/components/tree-table/tree-table-config-factory';\nimport { AdminTreetableContainerComponent } from './components/admin-treetable-container/admin-treetable-container.component';\n\n@NgModule({\n  declarations: [],\n  imports: [\n    CommonModule,\n    AdministrationRoutingModule,\n    AdminTreetableContainerComponent,\n  ],\n  providers: [\n    GridConfigurationFactory,\n    ADMIN_GRID_CONFIGS_PROVIDER,\n    TreeTableConfigurationFactory,\n    ADMIN_TREE_TABLE_CONFIGS,\n  ],\n})\nexport class AdministrationModule {}\n"],"mappings":"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","names":["filter","filter","state","EventSource","style","ToolbarClasses","_c2","_c0","state","_forTrack0","state","_c2","_c0","_c1","_c3","filter","nodes","_c2","_c0","_c1","_c3","_c4","_c5","_c0","_c1","_c2","_c3","_c4","_c5","StepItemClasses","StepListClasses","StepPanelsClasses","StepPanelClasses","style","StepperClasses","classes","StepClasses","_forTrack0","_c1","_c0","s","s","newFilters","newFilters","_forTrack0","newFilters","newFilters","newFilters","newFilters","_c0","newFilters","newFilters","newFilters","newFilters","newFilters","newFilters","newFilters","newFilters","theme","newFilters","newFilters","newFilters","newFilters","newFilters","newFilters","newFilters","newFilters"],"x_google_ignoreList":[12,38]}