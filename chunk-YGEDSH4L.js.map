{"version":3,"sources":["node_modules/@angular/cdk/fesm2022/breakpoints-observer.mjs","node_modules/@angular/cdk/fesm2022/layout.mjs","src/app/shared/components/splitter/adaptive-layout/adaptive-layout.component.ts","src/app/shared/components/splitter/adaptive-layout/adaptive-layout.component.html"],"sourcesContent":["import * as i0 from '@angular/core';\nimport { inject, CSP_NONCE, Injectable, NgZone } from '@angular/core';\nimport { Subject, combineLatest, concat, Observable } from 'rxjs';\nimport { take, skip, debounceTime, map, startWith, takeUntil } from 'rxjs/operators';\nimport { Platform } from './platform2.mjs';\nimport { coerceArray } from './array.mjs';\n\n/** Global registry for all dynamically-created, injected media queries. */\nconst mediaQueriesForWebkitCompatibility = new Set();\n/** Style tag that holds all of the dynamically-created media queries. */\nlet mediaQueryStyleNode;\n/** A utility for calling matchMedia queries. */\nclass MediaMatcher {\n  _platform = inject(Platform);\n  _nonce = inject(CSP_NONCE, {\n    optional: true\n  });\n  /** The internal matchMedia method to return back a MediaQueryList like object. */\n  _matchMedia;\n  constructor() {\n    this._matchMedia = this._platform.isBrowser && window.matchMedia ?\n    // matchMedia is bound to the window scope intentionally as it is an illegal invocation to\n    // call it from a different scope.\n    window.matchMedia.bind(window) : noopMatchMedia;\n  }\n  /**\n   * Evaluates the given media query and returns the native MediaQueryList from which results\n   * can be retrieved.\n   * Confirms the layout engine will trigger for the selector query provided and returns the\n   * MediaQueryList for the query provided.\n   */\n  matchMedia(query) {\n    if (this._platform.WEBKIT || this._platform.BLINK) {\n      createEmptyStyleRule(query, this._nonce);\n    }\n    return this._matchMedia(query);\n  }\n  static ɵfac = function MediaMatcher_Factory(__ngFactoryType__) {\n    return new (__ngFactoryType__ || MediaMatcher)();\n  };\n  static ɵprov = /* @__PURE__ */i0.ɵɵdefineInjectable({\n    token: MediaMatcher,\n    factory: MediaMatcher.ɵfac,\n    providedIn: 'root'\n  });\n}\n(() => {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(MediaMatcher, [{\n    type: Injectable,\n    args: [{\n      providedIn: 'root'\n    }]\n  }], () => [], null);\n})();\n/**\n * Creates an empty stylesheet that is used to work around browser inconsistencies related to\n * `matchMedia`. At the time of writing, it handles the following cases:\n * 1. On WebKit browsers, a media query has to have at least one rule in order for `matchMedia`\n * to fire. We work around it by declaring a dummy stylesheet with a `@media` declaration.\n * 2. In some cases Blink browsers will stop firing the `matchMedia` listener if none of the rules\n * inside the `@media` match existing elements on the page. We work around it by having one rule\n * targeting the `body`. See https://github.com/angular/components/issues/23546.\n */\nfunction createEmptyStyleRule(query, nonce) {\n  if (mediaQueriesForWebkitCompatibility.has(query)) {\n    return;\n  }\n  try {\n    if (!mediaQueryStyleNode) {\n      mediaQueryStyleNode = document.createElement('style');\n      if (nonce) {\n        mediaQueryStyleNode.setAttribute('nonce', nonce);\n      }\n      mediaQueryStyleNode.setAttribute('type', 'text/css');\n      document.head.appendChild(mediaQueryStyleNode);\n    }\n    if (mediaQueryStyleNode.sheet) {\n      mediaQueryStyleNode.sheet.insertRule(`@media ${query} {body{ }}`, 0);\n      mediaQueriesForWebkitCompatibility.add(query);\n    }\n  } catch (e) {\n    console.error(e);\n  }\n}\n/** No-op matchMedia replacement for non-browser platforms. */\nfunction noopMatchMedia(query) {\n  // Use `as any` here to avoid adding additional necessary properties for\n  // the noop matcher.\n  return {\n    matches: query === 'all' || query === '',\n    media: query,\n    addListener: () => {},\n    removeListener: () => {}\n  };\n}\n\n/** Utility for checking the matching state of `@media` queries. */\nclass BreakpointObserver {\n  _mediaMatcher = inject(MediaMatcher);\n  _zone = inject(NgZone);\n  /**  A map of all media queries currently being listened for. */\n  _queries = new Map();\n  /** A subject for all other observables to takeUntil based on. */\n  _destroySubject = new Subject();\n  constructor() {}\n  /** Completes the active subject, signalling to all other observables to complete. */\n  ngOnDestroy() {\n    this._destroySubject.next();\n    this._destroySubject.complete();\n  }\n  /**\n   * Whether one or more media queries match the current viewport size.\n   * @param value One or more media queries to check.\n   * @returns Whether any of the media queries match.\n   */\n  isMatched(value) {\n    const queries = splitQueries(coerceArray(value));\n    return queries.some(mediaQuery => this._registerQuery(mediaQuery).mql.matches);\n  }\n  /**\n   * Gets an observable of results for the given queries that will emit new results for any changes\n   * in matching of the given queries.\n   * @param value One or more media queries to check.\n   * @returns A stream of matches for the given queries.\n   */\n  observe(value) {\n    const queries = splitQueries(coerceArray(value));\n    const observables = queries.map(query => this._registerQuery(query).observable);\n    let stateObservable = combineLatest(observables);\n    // Emit the first state immediately, and then debounce the subsequent emissions.\n    stateObservable = concat(stateObservable.pipe(take(1)), stateObservable.pipe(skip(1), debounceTime(0)));\n    return stateObservable.pipe(map(breakpointStates => {\n      const response = {\n        matches: false,\n        breakpoints: {}\n      };\n      breakpointStates.forEach(({\n        matches,\n        query\n      }) => {\n        response.matches = response.matches || matches;\n        response.breakpoints[query] = matches;\n      });\n      return response;\n    }));\n  }\n  /** Registers a specific query to be listened for. */\n  _registerQuery(query) {\n    // Only set up a new MediaQueryList if it is not already being listened for.\n    if (this._queries.has(query)) {\n      return this._queries.get(query);\n    }\n    const mql = this._mediaMatcher.matchMedia(query);\n    // Create callback for match changes and add it is as a listener.\n    const queryObservable = new Observable(observer => {\n      // Listener callback methods are wrapped to be placed back in ngZone. Callbacks must be placed\n      // back into the zone because matchMedia is only included in Zone.js by loading the\n      // webapis-media-query.js file alongside the zone.js file.  Additionally, some browsers do not\n      // have MediaQueryList inherit from EventTarget, which causes inconsistencies in how Zone.js\n      // patches it.\n      const handler = e => this._zone.run(() => observer.next(e));\n      mql.addListener(handler);\n      return () => {\n        mql.removeListener(handler);\n      };\n    }).pipe(startWith(mql), map(({\n      matches\n    }) => ({\n      query,\n      matches\n    })), takeUntil(this._destroySubject));\n    // Add the MediaQueryList to the set of queries.\n    const output = {\n      observable: queryObservable,\n      mql\n    };\n    this._queries.set(query, output);\n    return output;\n  }\n  static ɵfac = function BreakpointObserver_Factory(__ngFactoryType__) {\n    return new (__ngFactoryType__ || BreakpointObserver)();\n  };\n  static ɵprov = /* @__PURE__ */i0.ɵɵdefineInjectable({\n    token: BreakpointObserver,\n    factory: BreakpointObserver.ɵfac,\n    providedIn: 'root'\n  });\n}\n(() => {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(BreakpointObserver, [{\n    type: Injectable,\n    args: [{\n      providedIn: 'root'\n    }]\n  }], () => [], null);\n})();\n/**\n * Split each query string into separate query strings if two queries are provided as comma\n * separated.\n */\nfunction splitQueries(queries) {\n  return queries.map(query => query.split(',')).reduce((a1, a2) => a1.concat(a2)).map(query => query.trim());\n}\nexport { BreakpointObserver, MediaMatcher };\n","import * as i0 from '@angular/core';\nimport { NgModule } from '@angular/core';\nexport { BreakpointObserver, MediaMatcher } from './breakpoints-observer.mjs';\nimport 'rxjs';\nimport 'rxjs/operators';\nimport './platform2.mjs';\nimport '@angular/common';\nimport './array.mjs';\nclass LayoutModule {\n  static ɵfac = function LayoutModule_Factory(__ngFactoryType__) {\n    return new (__ngFactoryType__ || LayoutModule)();\n  };\n  static ɵmod = /* @__PURE__ */i0.ɵɵdefineNgModule({\n    type: LayoutModule\n  });\n  static ɵinj = /* @__PURE__ */i0.ɵɵdefineInjector({});\n}\n(() => {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(LayoutModule, [{\n    type: NgModule,\n    args: [{}]\n  }], null, null);\n})();\n\n// PascalCase is being used as Breakpoints is used like an enum.\n// tslint:disable-next-line:variable-name\nconst Breakpoints = {\n  XSmall: '(max-width: 599.98px)',\n  Small: '(min-width: 600px) and (max-width: 959.98px)',\n  Medium: '(min-width: 960px) and (max-width: 1279.98px)',\n  Large: '(min-width: 1280px) and (max-width: 1919.98px)',\n  XLarge: '(min-width: 1920px)',\n  Handset: '(max-width: 599.98px) and (orientation: portrait), ' + '(max-width: 959.98px) and (orientation: landscape)',\n  Tablet: '(min-width: 600px) and (max-width: 839.98px) and (orientation: portrait), ' + '(min-width: 960px) and (max-width: 1279.98px) and (orientation: landscape)',\n  Web: '(min-width: 840px) and (orientation: portrait), ' + '(min-width: 1280px) and (orientation: landscape)',\n  HandsetPortrait: '(max-width: 599.98px) and (orientation: portrait)',\n  TabletPortrait: '(min-width: 600px) and (max-width: 839.98px) and (orientation: portrait)',\n  WebPortrait: '(min-width: 840px) and (orientation: portrait)',\n  HandsetLandscape: '(max-width: 959.98px) and (orientation: landscape)',\n  TabletLandscape: '(min-width: 960px) and (max-width: 1279.98px) and (orientation: landscape)',\n  WebLandscape: '(min-width: 1280px) and (orientation: landscape)'\n};\nexport { Breakpoints, LayoutModule };\n","import {\n  AfterViewInit,\n  Component,\n  DestroyRef,\n  ElementRef,\n  HostListener,\n  OnDestroy,\n  OnInit,\n  Renderer2,\n  computed,\n  effect,\n  inject,\n  input,\n  signal,\n} from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { BreakpointObserver, Breakpoints } from '@angular/cdk/layout';\nimport { Subject, debounceTime, takeUntil } from 'rxjs';\n\nimport { SplitterModule } from 'primeng/splitter';\nimport { ButtonModule } from 'primeng/button';\n\nimport {\n  LayoutMode,\n  LayoutState,\n  PanelConfig,\n  PanelState,\n} from '../../../models/layout.model';\nimport { LocalStorageService } from '../../../services/local-storage.service';\nimport { takeUntilDestroyed } from '@angular/core/rxjs-interop';\nimport {\n  hasProperty,\n  isArray,\n  isDefined,\n  isEmpty,\n  isNullOrUndefined,\n  isNumber,\n  isObject,\n  isString,\n} from '../../../utils';\n\n@Component({\n  selector: 'app-adaptive-layout',\n  imports: [CommonModule, SplitterModule, ButtonModule],\n  templateUrl: './adaptive-layout.component.html',\n  styleUrl: './adaptive-layout.component.scss',\n})\nexport class AdaptiveLayoutComponent\n  implements OnInit, OnDestroy, AfterViewInit\n{\n  private readonly localStorage = inject(LocalStorageService);\n\n  readonly panels = input<PanelConfig[]>([]);\n  readonly height = input<string>('100%');\n  readonly stateKey = input<string>('splitter-state');\n  // Accept numbers (percentage) or pixel strings (e.g. '64px')\n  readonly defaultSizes = input<(number | string)[]>([]);\n  readonly minSizes = input<(number | string)[]>([]);\n  readonly defaultLayout = input<LayoutMode>('horizontal');\n  readonly responsive = input<boolean>(true);\n\n  private readonly destroy$ = new Subject<void>();\n  private readonly resizeSubject = new Subject<void>();\n  private static readonly DEFAULT_MIN_SIZE = 0;\n  private static readonly DEFAULT_MAX_SIZE = 100;\n  private static readonly COLLAPSED_PANEL_SIZE = 40;\n  // Observe container size to normalize when measurable and on resizes\n  private resizeObserver: ResizeObserver | null = null;\n\n  readonly panelSizes = input<(number | string)[]>([25, 75]);\n\n  // Add a writable signal for managing current panel sizes\n  private readonly currentPanelSizes = signal<number[]>([]); // always stored internally as percentages\n\n  // Regular property for template binding to avoid function calls\n  panelSizesForTemplate: number[] = [25, 75]; // normalized percentages passed to splitter\n\n  // Keep original raw inputs for recalculation (to support px on resize)\n  private rawPanelSizes: (number | string)[] = [25, 75];\n  private rawMinSizes: (number | string)[] = [];\n\n  // Add a getter that ensures we always return a valid array\n  getSafePanelSizes(): number[] {\n    const sizes = this.panelSizesForTemplate;\n    if (!Array.isArray(sizes) || sizes.length === 0) {\n      return [25, 75];\n    }\n    return sizes;\n  }\n\n  // Computed signal for template binding\n  readonly computedPanelSizes = computed(() => {\n    const sizes = this.currentPanelSizes();\n    const defaultSizes = this.defaultSizes();\n    const inputSizes = this.panelSizes();\n\n    // Use current sizes if available, otherwise fallback to defaults\n    if (Array.isArray(sizes) && sizes.length > 0) {\n      return sizes;\n    } else if (Array.isArray(defaultSizes) && defaultSizes.length > 0) {\n      return defaultSizes;\n    } else if (Array.isArray(inputSizes) && inputSizes.length > 0) {\n      return inputSizes;\n    }\n    return [25, 75]; // Final fallback\n  });\n\n  panelStates: PanelState[] = [];\n  stateStorage = 'session';\n  currentLayout: LayoutMode = 'horizontal';\n  currentHeight = '100%';\n  containerClass = '';\n  touchStartX = 0;\n  private readonly destroyRef = inject(DestroyRef);\n  private readonly breakpointObserver = inject(BreakpointObserver);\n  private readonly elementRef = inject(ElementRef);\n  private readonly renderer = inject(Renderer2);\n\n  constructor() {\n    this.setupResizeListener();\n\n    // Initialize current panel sizes from input\n    effect(() => {\n      const inputSizes = this.panelSizes();\n      const defaultSizes = this.defaultSizes();\n      if (Array.isArray(inputSizes) && inputSizes.length > 0) {\n        this.rawPanelSizes = [...inputSizes];\n      } else if (Array.isArray(defaultSizes) && defaultSizes.length > 0) {\n        this.rawPanelSizes = [...defaultSizes];\n      } else {\n        this.rawPanelSizes = [25, 75];\n      }\n      this.normalizeAndSetPanelSizes();\n    });\n\n    effect(() => {\n      // Read the current panel sizes signal to track it\n      const sizes = this.currentPanelSizes();\n\n      // Skip immediate execution during initialization\n      if (isNullOrUndefined(this.elementRef?.nativeElement)) return;\n\n      // Apply hidden panel styles with a small delay to ensure DOM is ready\n      setTimeout(() => this.applyHiddenPanelStyles(sizes), 0);\n    });\n  }\n\n  ngOnInit() {\n    this.initializePanelStates();\n    this.loadSavedState();\n    this.currentHeight = this.height();\n\n    // Ensure panel sizes are properly initialized\n    if (\n      !Array.isArray(this.panelSizesForTemplate) ||\n      this.panelSizesForTemplate.length === 0\n    ) {\n      this.normalizeAndSetPanelSizes();\n    }\n\n    this.breakpointObserver\n      .observe([Breakpoints.Handset, Breakpoints.Tablet])\n      .pipe(takeUntilDestroyed(this.destroyRef))\n      .subscribe((result) => {\n        this.currentLayout = result.matches ? 'vertical' : 'horizontal';\n      });\n  }\n\n  ngOnDestroy() {\n    this.destroy$.next();\n    this.destroy$.complete();\n    this.resizeSubject.complete();\n\n    // Clean up the ResizeObserver\n    if (this.resizeObserver) {\n      this.resizeObserver.disconnect();\n      this.resizeObserver = null;\n    }\n  }\n\n  ngAfterViewInit() {\n    // Apply styling after view initialization\n    this.applyHiddenPanelStyles(this.currentPanelSizes());\n\n    // Normalize once the view is painted to ensure container has dimensions\n    requestAnimationFrame(() => this.normalizeAndSetPanelSizes());\n\n    // Observe container for dimension changes and (re)normalize\n    const container: HTMLElement =\n      this.elementRef.nativeElement.querySelector('.adaptive-layout') ??\n      this.elementRef.nativeElement;\n\n    const ResizeObserverCtor = (\n      globalThis as unknown as { ResizeObserver?: typeof ResizeObserver }\n    ).ResizeObserver;\n    if (typeof ResizeObserverCtor === 'function') {\n      this.resizeObserver = new ResizeObserverCtor((entries) => {\n        for (const entry of entries) {\n          if (entry.contentRect.width > 0) {\n            this.resizeSubject.next();\n          }\n        }\n      });\n      this.resizeObserver.observe(container);\n    }\n  }\n\n  // Add a getter for the template to use\n  getCurrentPanelSizes(): number[] {\n    const sizes = this.currentPanelSizes();\n    // Ensure we always return a valid array\n    return Array.isArray(sizes) && sizes.length > 0 ? sizes : [25, 75];\n  }\n\n  // Add defensive getters for template\n  getPanels(): PanelConfig[] {\n    const panels = this.panels();\n    return Array.isArray(panels) ? panels : [];\n  }\n\n  getMinSizes(): number[] {\n    const minSizesInput = this.minSizes();\n    if (Array.isArray(minSizesInput)) {\n      this.rawMinSizes = [...minSizesInput];\n      return this.normalizeValues(minSizesInput);\n    }\n    return [];\n  }\n\n  /**\n   * Apply special styles to panels that should be hidden\n   * @param panelSizes The current panel sizes to evaluate\n   */\n  private applyHiddenPanelStyles(panelSizes: number[]) {\n    if (isNullOrUndefined(this.elementRef?.nativeElement)) return;\n\n    if (isEmpty(panelSizes)) return;\n\n    const hasHiddenPanel = panelSizes.some((size) => size === 0);\n\n    if (hasHiddenPanel) {\n      this.renderer.addClass(this.elementRef.nativeElement, 'has-hidden-panel');\n    } else {\n      this.renderer.removeClass(\n        this.elementRef.nativeElement,\n        'has-hidden-panel',\n      );\n    }\n\n    // Apply individual panel classes\n    const panelElements =\n      this.elementRef.nativeElement.querySelectorAll('.p-splitter-panel');\n\n    if (!isEmpty(panelElements)) {\n      panelSizes.forEach((size, index) => {\n        if (index < panelElements.length) {\n          const panel = panelElements[index];\n          if (size === 0) {\n            this.renderer.addClass(panel, 'zero-width-panel');\n            // Also hide the splitter gutter if this panel is zero-width\n            const gutter = this.elementRef.nativeElement.querySelector(\n              `.p-splitter-gutter:nth-of-type(${index * 2 + 1})`,\n            );\n            if (isDefined(gutter)) {\n              this.renderer.setStyle(gutter, 'display', 'none');\n            }\n          } else {\n            this.renderer.removeClass(panel, 'zero-width-panel');\n            // Make gutter visible again\n            const gutter = this.elementRef.nativeElement.querySelector(\n              `.p-splitter-gutter:nth-of-type(${index * 2 + 1})`,\n            );\n            if (isDefined(gutter)) {\n              this.renderer.removeStyle(gutter, 'display');\n            }\n          }\n        }\n      });\n    }\n  }\n\n  private setupResizeListener() {\n    this.resizeSubject\n      .pipe(debounceTime(150), takeUntil(this.destroy$))\n      .subscribe({\n        next: () => this.normalizeAndSetPanelSizes(),\n        error: (error) => console.error('Resize error:', error),\n      });\n  }\n\n  @HostListener('window:resize')\n  onResize() {\n    if (this.responsive()) {\n      this.resizeSubject.next();\n    }\n    // Debounced via resizeSubject\n  }\n\n  private initializePanelStates() {\n    if (!isArray(this.panels())) {\n      console.warn('No panels provided for initialization');\n      return;\n    }\n\n    this.panelStates = this.panels().map((panel, _index) => {\n      const defaultSize = 100 / this.panels().length;\n\n      return {\n        size: isNumber(defaultSize) ? defaultSize : 0,\n        collapsed: false,\n        minSize:\n          isDefined(panel) && isNumber(panel.minSize)\n            ? panel.minSize\n            : AdaptiveLayoutComponent.DEFAULT_MIN_SIZE,\n        maxSize:\n          isDefined(panel) && isNumber(panel.maxSize)\n            ? panel.maxSize\n            : AdaptiveLayoutComponent.DEFAULT_MAX_SIZE,\n        hidden: false,\n      };\n    });\n  }\n\n  private loadSavedState() {\n    try {\n      const savedState: LayoutState | null =\n        this.localStorage.getItem<LayoutState>(this.stateKey());\n      if (!savedState) {\n        this.currentLayout = this.defaultLayout();\n        return;\n      }\n\n      const state: LayoutState = savedState;\n      if (!this.isValidState(state)) {\n        return;\n      }\n\n      this.panelStates = state.panelStates;\n      this.currentLayout = state.layoutMode;\n\n      // Update panel sizes if they exist in the saved state\n      if (Array.isArray(state.panelSizes) && state.panelSizes.length > 0) {\n        const validSizes = state.panelSizes.filter(\n          (size) => typeof size === 'number' && !isNaN(size),\n        );\n        if (validSizes.length > 0) {\n          this.currentPanelSizes.set([...validSizes]);\n          this.panelSizesForTemplate = [...validSizes];\n        }\n      }\n    } catch (e) {\n      console.error('Error loading saved state:', e);\n    }\n  }\n\n  private isValidState(state: unknown): state is LayoutState {\n    return (\n      isObject(state) &&\n      hasProperty(state, 'panelStates') &&\n      hasProperty(state, 'panelSizes') &&\n      hasProperty(state, 'layoutMode') &&\n      Array.isArray(state['panelStates']) &&\n      Array.isArray(state['panelSizes']) &&\n      isString(state['layoutMode'])\n    );\n  }\n\n  // Touch support handlers\n  private calculatePercentageMoved(diff: number): number {\n    return (diff / window.innerWidth) * 100;\n  }\n\n  private updatePanelSize(panelIndex: number, percentageMoved: number): void {\n    if (!isNumber(panelIndex) || !isNumber(percentageMoved)) {\n      console.warn('Invalid parameters for panel size update');\n      return;\n    }\n\n    const currentPanel = this.panelStates[panelIndex];\n    if (!isDefined(currentPanel)) {\n      console.warn('Panel not found at index:', panelIndex);\n      return;\n    }\n\n    const minSize = isNumber(currentPanel.minSize) ? currentPanel.minSize : 10;\n    const maxSize = isNumber(currentPanel.maxSize) ? currentPanel.maxSize : 90;\n    const currentSizes = this.currentPanelSizes();\n    const currentSize = currentSizes[panelIndex];\n\n    if (!isNumber(currentSize)) {\n      console.warn('Invalid current panel size');\n      return;\n    }\n\n    const newSize = Math.max(\n      minSize,\n      Math.min(maxSize, currentSize + percentageMoved),\n    );\n\n    if (newSize !== currentSize) {\n      // Update the signal with a new array\n      const newSizes = [...currentSizes];\n      newSizes[panelIndex] = newSize;\n\n      // Validate the new sizes array\n      const validSizes = newSizes.filter(\n        (size) => typeof size === 'number' && !isNaN(size),\n      );\n      if (validSizes.length > 0) {\n        this.currentPanelSizes.set(validSizes);\n        this.panelSizesForTemplate = validSizes;\n      }\n    }\n  }\n\n  private getPanelIndex(touchX: number): number {\n    let cumulativeWidth = 0;\n    const sizes = this.currentPanelSizes();\n    for (let i = 0; i < sizes.length; i++) {\n      cumulativeWidth += (sizes[i] / 100) * window.innerWidth;\n      if (touchX < cumulativeWidth) {\n        return i;\n      }\n    }\n    return sizes.length - 1; // Default to the last panel if not found\n  }\n\n  handleTouchStart(event: TouchEvent) {\n    this.touchStartX = event.touches[0].clientX;\n  }\n\n  handleTouchMove(event: TouchEvent) {\n    const touchX = event.touches[0].clientX;\n    const diff = touchX - this.touchStartX;\n\n    if (Math.abs(diff) > 10) {\n      event.preventDefault();\n      const percentageMoved = this.calculatePercentageMoved(diff);\n      const panelIndex = this.getPanelIndex(touchX);\n      this.updatePanelSize(panelIndex, percentageMoved);\n    }\n  }\n\n  handleTouchEnd(_event: TouchEvent) {\n    this.touchStartX = 0;\n  }\n\n  // ---------------- New normalization logic ----------------\n\n  /** Normalize raw panelSizes (number | 'Npx') to percentages and update signals */\n  private normalizeAndSetPanelSizes(): void {\n    // Guard: wait until container has a measurable width\n    const width = this.getContainerWidth();\n    if (width <= 0) {\n      // Try again on next frame\n      requestAnimationFrame(() => this.normalizeAndSetPanelSizes());\n      return;\n    }\n\n    const normalized = this.normalizeValues(this.rawPanelSizes);\n    // Ensure sum = 100\n    const sum = normalized.reduce((a, b) => a + b, 0);\n    let final = normalized;\n    if (sum !== 100 && sum > 0) {\n      final = normalized.map((v) => (v / sum) * 100);\n    }\n    this.currentPanelSizes.set(final);\n    this.panelSizesForTemplate = final;\n  }\n\n  /** Normalize an array of (number|string) to percentages; pixel entries converted relative to container width */\n  private normalizeValues(values: (number | string)[]): number[] {\n    if (!Array.isArray(values) || values.length === 0) return [];\n    const cw = this.getContainerWidth();\n    return values.map((v) => this.toPercent(v, cw));\n  }\n\n  private toPercent(value: number | string, containerWidth: number): number {\n    if (typeof value === 'number') {\n      return isFinite(value) && value >= 0 ? value : 0;\n    }\n    const trimmed = value.trim().toLowerCase();\n    if (trimmed.endsWith('px')) {\n      const px = parseFloat(trimmed.slice(0, -2));\n      if (!isFinite(px) || px < 0) return 0;\n      return containerWidth > 0 ? (px / containerWidth) * 100 : 0;\n    }\n    // numeric string\n    const num = parseFloat(trimmed);\n    return isFinite(num) && num >= 0 ? num : 0;\n  }\n\n  private getContainerWidth(): number {\n    const el: HTMLElement | null =\n      this.elementRef?.nativeElement?.querySelector('.adaptive-layout') ??\n      this.elementRef?.nativeElement;\n    const width = el?.clientWidth ?? 0;\n    return isFinite(width) && width > 0 ? width : 0;\n  }\n}\n","<div [ngClass]=\"containerClass\" class=\"adaptive-layout\">\n  @if (getSafePanelSizes().length > 0 && getPanels().length > 0) {\n    <p-splitter\n      styleClass=\"h-full w-full\"\n      [panelSizes]=\"getSafePanelSizes()\"\n      [layout]=\"currentLayout\"\n      [minSizes]=\"getMinSizes()\"\n      (touchstart)=\"handleTouchStart($event)\"\n      (touchmove)=\"handleTouchMove($event)\"\n      (touchend)=\"handleTouchEnd($event)\"\n    >\n      @for (panel of getPanels(); track $index; let i = $index) {\n        <ng-template pTemplate>\n          <div\n            class=\"h-full w-full flex flex-col transition-all duration-300 ease-in-out\"\n          >\n            <div\n              class=\"flex-1 h-full\"\n              [ngClass]=\"panel.scrollable ? 'overflow-auto' : 'overflow-hidden'\"\n            >\n              <ng-container *ngTemplateOutlet=\"panel.content\"></ng-container>\n            </div>\n          </div>\n        </ng-template>\n      }\n    </p-splitter>\n  }\n</div>\n"],"mappings":"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","names":[],"x_google_ignoreList":[0,1]}