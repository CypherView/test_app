{
  "version": 3,
  "sources": ["src/app/features/development/services/dual-api.service.ts", "src/app/features/development/services/telemetry-comparison.service.ts", "src/app/features/development/services/events.service.ts", "src/app/features/development/services/events-comparison.service.ts", "src/app/features/development/services/trips.service.ts", "src/app/features/development/services/trips-comparison.service.ts", "src/app/features/development/services/unified-timeline.service.ts", "src/app/features/development/components/telemetry-comparison/telemetry-comparison.component.ts", "src/app/features/development/components/telemetry-comparison/telemetry-comparison.component.html", "src/app/features/development/development-routing.module.ts", "src/app/features/development/development.module.ts"],
  "sourcesContent": ["import { Injectable, inject } from '@angular/core';\nimport { HttpClient, HttpHeaders } from '@angular/common/http';\nimport { Observable, forkJoin, switchMap, map, catchError, of } from 'rxjs';\nimport { isDefined, isNullOrUndefined } from '../../../shared/utils';\n\nexport interface DualApiConfig {\n  cypherViewUrl: string;\n  keyApiUrl: string;\n  cypherViewAuth: {\n    username: string;\n    password: string;\n  };\n  keyApiAuth: {\n    username: string;\n    password: string;\n  };\n}\n\nexport interface AuthResponse {\n  accessToken?: string;\n  idToken?: string;\n}\n\nexport interface TelemetryApiResponse {\n  count: number;\n  limit: number;\n  start: string;\n  end: string;\n  items: unknown[];\n}\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class DualApiService {\n  private readonly http = inject(HttpClient);\n\n  private readonly config: DualApiConfig = {\n    cypherViewUrl: 'https://v1-test-api.cypherview.net',\n    keyApiUrl: 'https://api.us1.kt1.io/fleet/v2',\n    cypherViewAuth: {\n      username: '', // Will be set from user input or environment\n      password: '',\n    },\n    keyApiAuth: {\n      username: '', // Will be set from user input or environment\n      password: '',\n    },\n  };\n\n  private cypherViewToken: string | null = null;\n  private keyApiToken: string | null = null;\n\n  /**\n   * Authenticate with CypherView API\n   */\n  private authenticateCypherView(): Observable<string> {\n    const authUrl = `${this.config.cypherViewUrl}/auth/signin`;\n\n    return this.http\n      .post<AuthResponse>(authUrl, {\n        username: this.config.cypherViewAuth.username,\n        password: this.config.cypherViewAuth.password,\n      })\n      .pipe(\n        map((response) => {\n          const token = response.accessToken ?? response.idToken;\n          if (isNullOrUndefined(token)) {\n            throw new Error('No access token received from CypherView');\n          }\n          this.cypherViewToken = token;\n          console.log('‚úÖ CypherView authentication successful');\n          return token;\n        }),\n        catchError((error) => {\n          console.error('‚ùå CypherView authentication failed:', error);\n          throw error;\n        }),\n      );\n  }\n\n  /**\n   * Authenticate with Key API\n   */\n  private authenticateKeyApi(): Observable<string> {\n    const authUrl = `${this.config.keyApiUrl}/auth/signin`;\n\n    console.log('üîê Attempting Key API authentication...');\n    console.log('Auth URL:', authUrl);\n    console.log('Username:', this.config.keyApiAuth.username);\n    console.log(\n      'Password length:',\n      this.config.keyApiAuth.password?.length || 0,\n    );\n\n    return this.http\n      .post<AuthResponse>(authUrl, {\n        username: this.config.keyApiAuth.username,\n        password: this.config.keyApiAuth.password,\n      })\n      .pipe(\n        map((response) => {\n          console.log('üîê Key API auth response:', response);\n          const token = response.accessToken ?? response.idToken;\n          if (isNullOrUndefined(token)) {\n            throw new Error('No access token received from Key API');\n          }\n          this.keyApiToken = token;\n          console.log('‚úÖ Key API authentication successful');\n          console.log('üîê Token length:', token.length);\n          console.log('üîê Token preview:', token.substring(0, 50) + '...');\n          console.log('üîê Token type:', typeof token);\n          return token;\n        }),\n        catchError((error) => {\n          console.error('‚ùå Key API authentication failed:', error);\n          console.error('üîê Auth error details:', {\n            status: error.status,\n            statusText: error.statusText,\n            url: authUrl,\n            username: this.config.keyApiAuth.username,\n            message: error.message,\n          });\n\n          if (error.status === 401) {\n            console.error(\n              'üö´ Invalid credentials for Key API - check username/password',\n            );\n          } else if (error.status === 404) {\n            console.error('üö´ Key API authentication endpoint not found');\n          }\n\n          throw error;\n        }),\n      );\n  }\n\n  /**\n   * Get telemetry data from CypherView API\n   */\n  getCypherViewTelemetry(\n    vehicleId: string,\n    startDate: string,\n    endDate: string,\n    limit?: number,\n  ): Observable<unknown[]> {\n    console.log('üîÑ Fetching CypherView telemetry...');\n\n    // Use existing HistoryService approach for CypherView\n    // Since we're already authenticated through the app\n    const url = `/api/v2/history/telemetry/${vehicleId}`;\n    const params: { start: string; end: string; limit?: string } = {\n      start: startDate,\n      end: endDate,\n    };\n    if (isDefined(limit)) params.limit = limit.toString();\n\n    console.log('üîÑ CypherView telemetry URL:', url);\n    console.log('üîÑ CypherView telemetry params:', params);\n\n    return this.http.get<TelemetryApiResponse>(url, { params }).pipe(\n      map((response) => {\n        console.log(\n          '‚úÖ CypherView telemetry received:',\n          response.items?.length || 0,\n          'records',\n        );\n        return response.items ?? [];\n      }),\n      catchError((error) => {\n        console.error('‚ùå CypherView telemetry error:', error);\n        console.error('‚ùå Error details:', {\n          status: error.status,\n          statusText: error.statusText,\n          message: error.message,\n          url: error.url,\n        });\n        return of([]);\n      }),\n    );\n  }\n\n  /**\n   * Search for a vehicle in Key API by device name\n   */\n  private searchKeyApiVehicleByDeviceName(\n    deviceName: string,\n  ): Observable<string | null> {\n    console.log('üîç Searching Key API for device name:', deviceName);\n\n    // First authenticate if we don't have a token\n    const authObs = isDefined(this.keyApiToken)\n      ? (console.log('üîç Reusing existing Key API token for search'),\n        of(this.keyApiToken))\n      : (console.log('üîç Authenticating to Key API for search'),\n        this.authenticateKeyApi());\n\n    return authObs.pipe(\n      switchMap((token) => {\n        const url = `${this.config.keyApiUrl}/entities/assets`;\n        const params = {\n          limit: '100',\n          search: deviceName,\n        };\n\n        const headers = new HttpHeaders({\n          'x-access-token': token,\n          'Content-Type': 'application/json',\n        });\n\n        console.log('üîç Searching vehicles with URL:', url);\n        console.log('üîç Search params:', params);\n\n        return this.http.get<Record<string, unknown>>(url, { headers, params });\n      }),\n      map((response) => {\n        console.log('üîç Key API vehicle search response:', response);\n\n        if (\n          isNullOrUndefined(response['items']) ||\n          !Array.isArray(response['items'])\n        ) {\n          console.warn('‚ö†Ô∏è No vehicles found in Key API search response');\n          return null;\n        }\n\n        // Search for exact device name match\n        const matchingVehicle = response['items'].find((vehicle) => {\n          const vehicleDeviceName = vehicle.device?.name ?? vehicle.name ?? '';\n          console.log(\n            'üîç Checking vehicle:',\n            vehicleDeviceName,\n            'vs target:',\n            deviceName,\n          );\n          return vehicleDeviceName === deviceName;\n        });\n\n        if (isDefined(matchingVehicle)) {\n          console.log('‚úÖ Found matching vehicle in Key API:', matchingVehicle);\n          return matchingVehicle.id ?? null;\n        } else {\n          console.warn(\n            '‚ö†Ô∏è No matching vehicle found for device name:',\n            deviceName,\n          );\n          console.log(\n            'Available vehicles:',\n            response['items'].map((v) => ({\n              id: v.id,\n              name: v.name,\n              deviceName: v.device?.name ?? 'No device name',\n            })),\n          );\n          return null;\n        }\n      }),\n      catchError((error) => {\n        console.error('‚ùå Key API vehicle search error:', error);\n        console.error('üìç Search error details:', {\n          status: error.status,\n          statusText: error.statusText,\n          message: error.message,\n          url: error.url,\n          deviceName,\n        });\n\n        // Reset token on auth failure\n        if (error.status === 401 || error.status === 403) {\n          this.keyApiToken = null;\n        }\n        return of(null);\n      }),\n    );\n  }\n\n  /**\n   * Get telemetry data from Key API\n   * First tries the CypherView vehicle ID directly, then falls back to device name mapping if that fails\n   */\n  getKeyApiTelemetry(\n    cypherViewVehicleId: string,\n    startDate: string,\n    endDate: string,\n    limit?: number,\n    deviceName?: string,\n  ): Observable<unknown[]> {\n    console.log('üîÑ Fetching Key API telemetry...');\n    console.log('üîÑ CypherView Vehicle ID:', cypherViewVehicleId);\n    console.log('üîÑ Device Name for fallback:', deviceName);\n\n    // First try using the CypherView vehicle ID directly (like Python does)\n    return this.fetchKeyApiTelemetryData(\n      cypherViewVehicleId,\n      startDate,\n      endDate,\n      limit,\n    ).pipe(\n      catchError((error) => {\n        // If the direct vehicle ID fails and we have a device name, try mapping by device name\n        if (\n          (error.status === 404 || error.status === 401) &&\n          isDefined(deviceName)\n        ) {\n          console.warn(\n            '‚ö†Ô∏è CypherView vehicle ID failed on Key API, trying device name mapping...',\n          );\n          return this.searchKeyApiVehicleByDeviceName(deviceName).pipe(\n            switchMap((keyVehicleId) => {\n              if (isNullOrUndefined(keyVehicleId)) {\n                console.error(\n                  '‚ùå Could not find matching vehicle in Key API for device:',\n                  deviceName,\n                );\n                return of([]);\n              }\n\n              console.log(\n                '‚úÖ Found Key API vehicle ID:',\n                keyVehicleId,\n                'for device:',\n                deviceName,\n              );\n              return this.fetchKeyApiTelemetryData(\n                keyVehicleId,\n                startDate,\n                endDate,\n                limit,\n              );\n            }),\n            catchError((searchError) => {\n              console.error('‚ùå Device name mapping also failed:', searchError);\n              return of([]);\n            }),\n          );\n        } else {\n          // No device name available or different error type\n          console.error(\n            '‚ùå Key API telemetry failed and no device name available for mapping',\n          );\n          return of([]);\n        }\n      }),\n    );\n  }\n\n  /**\n   * Fetch telemetry data from Key API using a specific vehicle ID\n   */\n  private fetchKeyApiTelemetryData(\n    keyVehicleId: string,\n    startDate: string,\n    endDate: string,\n    limit?: number,\n  ): Observable<unknown[]> {\n    // First authenticate if we don't have a token\n    const authObs = isDefined(this.keyApiToken)\n      ? (console.log('üîÑ Reusing existing Key API token'), of(this.keyApiToken))\n      : (console.log('üîÑ Authenticating to Key API'),\n        this.authenticateKeyApi());\n\n    return authObs.pipe(\n      switchMap((token) => {\n        const url = `${this.config.keyApiUrl}/data/history/telemetry/${keyVehicleId}`;\n        const params: Record<string, string> = {\n          start: startDate,\n          end: endDate,\n        };\n        if (isDefined(limit)) params['limit'] = limit.toString();\n\n        const headers = new HttpHeaders({\n          'x-access-token': token,\n          'Content-Type': 'application/json',\n        });\n\n        console.log('üîÑ Fetching telemetry from Key API:');\n        console.log('  URL:', url);\n        console.log('  Vehicle ID:', keyVehicleId);\n        console.log('  Params:', params);\n        console.log('  Token length:', token?.length || 0);\n        console.log('  Token preview:', token?.substring(0, 20) + '...');\n\n        return this.http.get<TelemetryApiResponse>(url, { headers, params });\n      }),\n      map((response) => {\n        console.log(\n          '‚úÖ Key API telemetry received:',\n          response.items?.length || 0,\n          'records',\n        );\n        return response.items ?? [];\n      }),\n      catchError((error) => {\n        console.error('‚ùå Key API telemetry error:', error);\n        console.error('üìç Error details:', {\n          status: error.status,\n          statusText: error.statusText,\n          message: error.message,\n          url: error.url,\n          vehicleId: keyVehicleId,\n        });\n\n        if (error.status === 404) {\n          console.warn('‚ö†Ô∏è Vehicle ID not found in Key API:', keyVehicleId);\n        }\n\n        // Reset token on auth failure\n        if (error.status === 401 || error.status === 403) {\n          this.keyApiToken = null;\n        }\n        return of([]);\n      }),\n    );\n  }\n\n  /**\n   * Set authentication credentials\n   */\n  setCredentials(\n    cypherViewAuth: { username: string; password: string },\n    keyApiAuth: { username: string; password: string },\n  ): void {\n    this.config.cypherViewAuth = cypherViewAuth;\n    this.config.keyApiAuth = keyApiAuth;\n\n    // Clear existing tokens to force re-authentication\n    this.cypherViewToken = null;\n    this.keyApiToken = null;\n  }\n\n  /**\n   * Get events data from Key API\n   */\n  getKeyApiEvents(\n    cypherViewVehicleId: string,\n    startDate: string,\n    endDate: string,\n    limit?: number,\n    deviceName?: string,\n  ): Observable<unknown[]> {\n    console.log('üîÑ Fetching Key API events...');\n    console.log('üîÑ CypherView Vehicle ID:', cypherViewVehicleId);\n    console.log('üîÑ Device Name for fallback:', deviceName);\n\n    // First try using the CypherView vehicle ID directly\n    return this.fetchKeyApiEventsData(\n      cypherViewVehicleId,\n      startDate,\n      endDate,\n      limit,\n    ).pipe(\n      catchError((error) => {\n        // If the direct vehicle ID fails and we have a device name, try mapping by device name\n        if (\n          (error.status === 404 || error.status === 401) &&\n          isDefined(deviceName)\n        ) {\n          console.warn(\n            '‚ö†Ô∏è CypherView vehicle ID failed on Key API events, trying device name mapping...',\n          );\n          return this.searchKeyApiVehicleByDeviceName(deviceName).pipe(\n            switchMap((keyVehicleId) => {\n              if (isNullOrUndefined(keyVehicleId)) {\n                console.error(\n                  '‚ùå Could not find matching vehicle in Key API for events device:',\n                  deviceName,\n                );\n                return of([]);\n              }\n\n              console.log(\n                '‚úÖ Found Key API vehicle ID for events:',\n                keyVehicleId,\n                'for device:',\n                deviceName,\n              );\n              return this.fetchKeyApiEventsData(\n                keyVehicleId,\n                startDate,\n                endDate,\n                limit,\n              );\n            }),\n            catchError((searchError) => {\n              console.error(\n                '‚ùå Device name mapping for events also failed:',\n                searchError,\n              );\n              return of([]);\n            }),\n          );\n        } else {\n          console.error(\n            '‚ùå Key API events failed and no device name available for mapping',\n          );\n          return of([]);\n        }\n      }),\n    );\n  }\n\n  /**\n   * Fetch events data from Key API using a specific vehicle ID\n   */\n  private fetchKeyApiEventsData(\n    keyVehicleId: string,\n    startDate: string,\n    endDate: string,\n    limit?: number,\n  ): Observable<unknown[]> {\n    // First authenticate if we don't have a token\n    const authObs = isDefined(this.keyApiToken)\n      ? (console.log('üîÑ Reusing existing Key API token for events'),\n        of(this.keyApiToken))\n      : (console.log('üîÑ Authenticating to Key API for events'),\n        this.authenticateKeyApi());\n\n    return authObs.pipe(\n      switchMap((token) => {\n        const url = `${this.config.keyApiUrl}/data/history/events/${keyVehicleId}`;\n        const params: Record<string, string> = {\n          start: startDate,\n          end: endDate,\n        };\n        if (isDefined(limit)) params['limit'] = limit.toString();\n\n        const headers = new HttpHeaders({\n          'x-access-token': token,\n          'Content-Type': 'application/json',\n        });\n\n        console.log('üîÑ Fetching events from Key API:');\n        console.log('  URL:', url);\n        console.log('  Vehicle ID:', keyVehicleId);\n        console.log('  Params:', params);\n\n        return this.http.get<TelemetryApiResponse>(url, { headers, params });\n      }),\n      map((response) => {\n        console.log(\n          '‚úÖ Key API events received:',\n          response.items?.length || 0,\n          'records',\n        );\n        return response.items ?? [];\n      }),\n      catchError((error) => {\n        console.error('‚ùå Key API events error:', error);\n        console.error('üìç Events error details:', {\n          status: error.status,\n          statusText: error.statusText,\n          message: error.message,\n          url: error.url,\n          vehicleId: keyVehicleId,\n        });\n\n        if (error.status === 404) {\n          console.warn(\n            '‚ö†Ô∏è Vehicle ID not found in Key API events:',\n            keyVehicleId,\n          );\n        }\n\n        // Reset token on auth failure\n        if (error.status === 401 || error.status === 403) {\n          this.keyApiToken = null;\n        }\n        return of([]);\n      }),\n    );\n  }\n\n  /**\n   * Get trips data from Key API\n   */\n  getKeyApiTrips(\n    cypherViewVehicleId: string,\n    startDate: string,\n    endDate: string,\n    limit?: number,\n    deviceName?: string,\n  ): Observable<unknown[]> {\n    console.log('üîÑ Fetching Key API trips...');\n    console.log('üîÑ CypherView Vehicle ID:', cypherViewVehicleId);\n    console.log('üîÑ Device Name for fallback:', deviceName);\n\n    // First try using the CypherView vehicle ID directly\n    return this.fetchKeyApiTripsData(\n      cypherViewVehicleId,\n      startDate,\n      endDate,\n      limit,\n    ).pipe(\n      catchError((error) => {\n        // If the direct vehicle ID fails and we have a device name, try mapping by device name\n        if (\n          (error.status === 404 || error.status === 401) &&\n          isDefined(deviceName)\n        ) {\n          console.warn(\n            '‚ö†Ô∏è CypherView vehicle ID failed on Key API trips, trying device name mapping...',\n          );\n          return this.searchKeyApiVehicleByDeviceName(deviceName).pipe(\n            switchMap((keyVehicleId) => {\n              if (isNullOrUndefined(keyVehicleId)) {\n                console.error(\n                  '‚ùå Could not find matching vehicle in Key API for trips device:',\n                  deviceName,\n                );\n                return of([]);\n              }\n\n              console.log(\n                '‚úÖ Found Key API vehicle ID for trips:',\n                keyVehicleId,\n                'for device:',\n                deviceName,\n              );\n              return this.fetchKeyApiTripsData(\n                keyVehicleId,\n                startDate,\n                endDate,\n                limit,\n              );\n            }),\n            catchError((searchError) => {\n              console.error(\n                '‚ùå Device name mapping for trips also failed:',\n                searchError,\n              );\n              return of([]);\n            }),\n          );\n        } else {\n          console.error(\n            '‚ùå Key API trips failed and no device name available for mapping',\n          );\n          return of([]);\n        }\n      }),\n    );\n  }\n\n  /**\n   * Fetch trips data from Key API using a specific vehicle ID\n   */\n  private fetchKeyApiTripsData(\n    keyVehicleId: string,\n    startDate: string,\n    endDate: string,\n    limit?: number,\n  ): Observable<unknown[]> {\n    // First authenticate if we don't have a token\n    const authObs = isDefined(this.keyApiToken)\n      ? (console.log('üîÑ Reusing existing Key API token for trips'),\n        of(this.keyApiToken))\n      : (console.log('üîÑ Authenticating to Key API for trips'),\n        this.authenticateKeyApi());\n\n    return authObs.pipe(\n      switchMap((token) => {\n        const url = `${this.config.keyApiUrl}/data/history/trips/${keyVehicleId}`;\n        const params: Record<string, string> = {\n          start: startDate,\n          end: endDate,\n        };\n        if (isDefined(limit)) params['limit'] = limit.toString();\n\n        const headers = new HttpHeaders({\n          'x-access-token': token,\n          'Content-Type': 'application/json',\n        });\n\n        console.log('üîÑ Fetching trips from Key API:');\n        console.log('  URL:', url);\n        console.log('  Vehicle ID:', keyVehicleId);\n        console.log('  Params:', params);\n\n        return this.http.get<TelemetryApiResponse>(url, { headers, params });\n      }),\n      map((response) => {\n        console.log(\n          '‚úÖ Key API trips received:',\n          response.items?.length || 0,\n          'records',\n        );\n        return response.items ?? [];\n      }),\n      catchError((error) => {\n        console.error('‚ùå Key API trips error:', error);\n        console.error('üìç Trips error details:', {\n          status: error.status,\n          statusText: error.statusText,\n          message: error.message,\n          url: error.url,\n          vehicleId: keyVehicleId,\n        });\n\n        if (error.status === 404) {\n          console.warn(\n            '‚ö†Ô∏è Vehicle ID not found in Key API trips:',\n            keyVehicleId,\n          );\n        }\n\n        // Reset token on auth failure\n        if (error.status === 401 || error.status === 403) {\n          this.keyApiToken = null;\n        }\n        return of([]);\n      }),\n    );\n  }\n\n  /**\n   * Test authentication for both APIs\n   */\n  testAuthentication(): Observable<{ cypherView: boolean; keyApi: boolean }> {\n    const cypherViewTest = isDefined(this.cypherViewToken)\n      ? of(true)\n      : this.authenticateCypherView().pipe(\n          map(() => true),\n          catchError(() => of(false)),\n        );\n\n    const keyApiTest = this.authenticateKeyApi().pipe(\n      map(() => true),\n      catchError(() => of(false)),\n    );\n\n    // Run both authentication checks in parallel and return results as an object\n    return forkJoin({\n      cypherView: cypherViewTest,\n      keyApi: keyApiTest,\n    });\n  }\n}\n", "import { Injectable, inject } from '@angular/core';\nimport { Observable, forkJoin, map, catchError, of } from 'rxjs';\nimport { HistoryService } from '../../../api/api/history.service';\nimport { DataService } from '../../../api/api/data.service';\nimport { DualApiService } from './dual-api.service';\nimport { isDefined, isNullOrUndefined } from '../../../shared/utils';\nimport { TelemetryResponse } from '../../../api';\n\nexport interface TelemetryRecord {\n  timestamp?: string;\n  received?: string;\n  active?: boolean;\n  location?: {\n    lat?: number;\n    lon?: number;\n    accuracy?: number;\n    gc?: Record<string, unknown>;\n    [key: string]: unknown;\n  };\n  zones?: {\n    id?: string;\n    name?: string;\n    [key: string]: unknown;\n  }[];\n  telemetry?: Record<string, unknown>;\n  origin?: {\n    id?: string;\n    name?: string;\n  };\n  [key: string]: unknown;\n}\n\nexport interface AlignedRecord {\n  testRecord: TelemetryRecord | null;\n  prodRecord: TelemetryRecord | null;\n  index: number;\n  timestampDiff?: number;\n}\n\nexport interface ComparisonSummary {\n  totalAligned: number;\n  bothPresent: number;\n  testOnly: number;\n  prodOnly: number;\n  matchRate: number;\n  qualityStatus: string;\n}\n\nexport interface FieldComparison {\n  field: string;\n  testValue: string;\n  prodValue: string;\n  status: 'identical' | 'different' | 'missing_test' | 'missing_prod';\n  displayTest: string;\n  displayProd: string;\n}\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class TelemetryComparisonService {\n  private readonly historyService = inject(HistoryService);\n  private readonly dataService = inject(DataService);\n  private readonly dualApiService = inject(DualApiService);\n\n  getTelemetryComparison(\n    vehicleId: string,\n    startDate: Date,\n    endDate: Date,\n    limit?: number,\n    deviceName?: string,\n  ): Observable<{\n    alignedRecords: AlignedRecord[];\n    summary: ComparisonSummary;\n    testRecords: TelemetryRecord[];\n    prodRecords: TelemetryRecord[];\n  }> {\n    console.log('üöÄ Starting telemetry comparison for:', {\n      vehicleId,\n      startDate,\n      endDate,\n      limit,\n      deviceName,\n    });\n\n    // Fetch data from both APIs in parallel\n    // Use HistoryService for CypherView (authenticated through existing app auth)\n    const cypherViewData$ = this.historyService\n      .getTelemetryHistory(\n        vehicleId,\n        startDate.toISOString(),\n        endDate.toISOString(),\n        limit,\n      )\n      .pipe(\n        map((response) => response.items ?? []),\n        catchError((error) => {\n          console.error('‚ùå CypherView telemetry error:', error);\n          return of([]);\n        }),\n      );\n\n    const keyData$ = this.dualApiService.getKeyApiTelemetry(\n      vehicleId,\n      startDate.toISOString(),\n      endDate.toISOString(),\n      limit,\n      deviceName, // Pass device name for vehicle mapping\n    );\n\n    return forkJoin({\n      testData: cypherViewData$.pipe(\n        map((items) => this.mapToTelemetryRecords(items)),\n      ),\n      prodData: keyData$.pipe(\n        map((items) =>\n          this.mapToTelemetryRecords(items as TelemetryResponse[]),\n        ),\n      ),\n    }).pipe(\n      map(({ testData, prodData }) => {\n        const alignedRecords = this.alignRecordsByTimestamp(testData, prodData);\n        const summary = this.calculateSummary(alignedRecords);\n\n        return {\n          alignedRecords,\n          summary,\n          testRecords: testData,\n          prodRecords: prodData,\n        };\n      }),\n      catchError((error) => {\n        console.error('Error fetching telemetry comparison:', error);\n        return of({\n          alignedRecords: [],\n          summary: this.getEmptySummary(),\n          testRecords: [],\n          prodRecords: [],\n        });\n      }),\n    );\n  }\n\n  private mapToTelemetryRecords(items: TelemetryResponse[]): TelemetryRecord[] {\n    return items.map(\n      (item: TelemetryResponse) =>\n        ({\n          ...item,\n          timestamp: item.date ?? item['timestamp'] ?? item.received,\n        }) as TelemetryRecord,\n    );\n  }\n\n  setKeyApiCredentials(username: string, password: string): void {\n    this.dualApiService.setCredentials(\n      { username: '', password: '' }, // CypherView uses existing auth\n      { username, password }, // Key API credentials from user\n    );\n  }\n\n  // For now, we'll simulate comparison by fetching the same data twice\n  // TODO: Replace with actual test/prod API calls when Key API is available\n  private simulateEnvironmentDifferences(\n    records: TelemetryRecord[],\n    environment: 'test' | 'prod',\n  ): TelemetryRecord[] {\n    if (environment === 'test') {\n      return records; // Return original CypherView data as \"test\"\n    }\n\n    // Simulate \"production\" data with slight differences\n    return records.map((record) => {\n      const modifiedRecord = { ...record };\n\n      // Add some simulated differences for demo purposes\n      if (modifiedRecord.telemetry) {\n        const telemetry = { ...modifiedRecord.telemetry };\n\n        // Simulate small speed differences\n        Object.keys(telemetry).forEach((key) => {\n          if (\n            key.toLowerCase().includes('speed') &&\n            typeof telemetry[key] === 'object'\n          ) {\n            const speedData = telemetry[key] as { value?: number };\n            if (speedData.value !== undefined) {\n              speedData.value = speedData.value + Math.floor(Math.random() * 3);\n            }\n          }\n        });\n\n        modifiedRecord.telemetry = telemetry;\n      }\n\n      // Occasionally remove zones to simulate differences\n      if (Math.random() > 0.8) {\n        modifiedRecord.zones = [];\n      }\n\n      return modifiedRecord;\n    });\n  }\n\n  private generateMockData(\n    environment: 'test' | 'prod',\n    vehicleId: string,\n    startDate: Date,\n    endDate: Date,\n    limit?: number,\n  ): TelemetryRecord[] {\n    const records: TelemetryRecord[] = [];\n    const duration = endDate.getTime() - startDate.getTime();\n    const recordCount = Math.min(limit ?? 20, 20);\n\n    for (let i = 0; i < recordCount; i++) {\n      const timestamp = new Date(\n        startDate.getTime() + (duration * i) / recordCount,\n      );\n      const record: TelemetryRecord = {\n        timestamp: timestamp.toISOString(),\n        received: timestamp.toISOString(),\n        active: true,\n        location: {\n          lat: -26.2041 + (Math.random() - 0.5) * 0.01,\n          lon: 28.0473 + (Math.random() - 0.5) * 0.01,\n          accuracy: environment === 'test' ? 0 : Math.floor(Math.random() * 50),\n          gc: {\n            country: 'South Africa',\n            city: 'Johannesburg',\n          },\n        },\n        zones: [{ id: '123', name: 'Test Zone' }],\n        telemetry: {\n          speed: Math.floor(Math.random() * 120),\n          ignition: true,\n          fuel_level: 80 + Math.floor(Math.random() * 20),\n          battery_voltage: 12.5 + Math.random() * 2,\n        },\n        origin: {\n          id: vehicleId,\n          name: `Vehicle ${vehicleId}`,\n        },\n      };\n\n      // Add some differences between environments\n      if (environment === 'prod' && record.telemetry) {\n        record.telemetry['speed'] =\n          (Number(record.telemetry['speed']) || 0) +\n          Math.floor(Math.random() * 5);\n        if (Math.random() > 0.8) {\n          delete record.zones; // Sometimes missing in prod\n        }\n      }\n\n      records.push(record);\n    }\n\n    return records;\n  }\n\n  private alignRecordsByTimestamp(\n    testRecords: TelemetryRecord[],\n    prodRecords: TelemetryRecord[],\n    toleranceSeconds = 2,\n  ): AlignedRecord[] {\n    const aligned: AlignedRecord[] = [];\n    const usedProdIndices = new Set<number>();\n\n    // Parse timestamp helper\n    const parseTimestamp = (record: TelemetryRecord | null): Date | null => {\n      if (!record) return null;\n      const tsStr = record.timestamp ?? record.received;\n      if (isNullOrUndefined(tsStr)) return null;\n\n      try {\n        return new Date(tsStr.replace('Z', '+00:00'));\n      } catch {\n        return null;\n      }\n    };\n\n    // Sort records by timestamp\n    const sortedTestRecords = [...testRecords].sort((a, b) => {\n      const aTime = parseTimestamp(a);\n      const bTime = parseTimestamp(b);\n      if (!aTime || !bTime) return 0;\n      return aTime.getTime() - bTime.getTime();\n    });\n\n    const sortedProdRecords = [...prodRecords]\n      .map((record, index) => ({ record, originalIndex: index }))\n      .sort((a, b) => {\n        const aTime = parseTimestamp(a.record);\n        const bTime = parseTimestamp(b.record);\n        if (!aTime || !bTime) return 0;\n        return aTime.getTime() - bTime.getTime();\n      });\n\n    // Match test records with production records\n    sortedTestRecords.forEach((testRecord, index) => {\n      const testTime = parseTimestamp(testRecord);\n      let bestMatch: TelemetryRecord | null = null;\n      let bestDiff = Infinity;\n      let bestIdx: number | null = null;\n\n      if (testTime) {\n        sortedProdRecords.forEach(({ record: prodRecord, originalIndex }) => {\n          if (usedProdIndices.has(originalIndex)) return;\n\n          const prodTime = parseTimestamp(prodRecord);\n          if (prodTime) {\n            const diff = Math.abs(\n              (testTime.getTime() - prodTime.getTime()) / 1000,\n            );\n            if (diff <= toleranceSeconds && diff < bestDiff) {\n              bestMatch = prodRecord;\n              bestDiff = diff;\n              bestIdx = originalIndex;\n            }\n          }\n        });\n      }\n\n      if (isDefined(bestMatch) && bestIdx !== null) {\n        usedProdIndices.add(bestIdx);\n        aligned.push({\n          testRecord,\n          prodRecord: bestMatch,\n          index,\n          timestampDiff: bestDiff,\n        });\n      } else {\n        aligned.push({\n          testRecord,\n          prodRecord: null,\n          index,\n          timestampDiff: undefined,\n        });\n      }\n    });\n\n    // Add unmatched production records\n    sortedProdRecords.forEach(({ record: prodRecord, originalIndex }) => {\n      if (!usedProdIndices.has(originalIndex)) {\n        aligned.push({\n          testRecord: null,\n          prodRecord,\n          index: aligned.length,\n          timestampDiff: undefined,\n        });\n      }\n    });\n\n    return aligned;\n  }\n\n  private calculateSummary(alignedRecords: AlignedRecord[]): ComparisonSummary {\n    const bothPresent = alignedRecords.filter(\n      (r) => r.testRecord && r.prodRecord,\n    ).length;\n    const testOnly = alignedRecords.filter(\n      (r) => isDefined(r.testRecord) && !r.prodRecord,\n    ).length;\n    const prodOnly = alignedRecords.filter(\n      (r) => isNullOrUndefined(r.testRecord) && isDefined(r.prodRecord),\n    ).length;\n    const totalAligned = alignedRecords.length;\n\n    const matchRate = totalAligned > 0 ? (bothPresent / totalAligned) * 100 : 0;\n\n    let qualityStatus = 'üî¥ Poor';\n    if (matchRate >= 95) qualityStatus = 'üü¢ Excellent';\n    else if (matchRate >= 85) qualityStatus = 'üü° Good';\n    else if (matchRate >= 70) qualityStatus = 'üü† Fair';\n\n    return {\n      totalAligned,\n      bothPresent,\n      testOnly,\n      prodOnly,\n      matchRate,\n      qualityStatus,\n    };\n  }\n\n  private getEmptySummary(): ComparisonSummary {\n    return {\n      totalAligned: 0,\n      bothPresent: 0,\n      testOnly: 0,\n      prodOnly: 0,\n      matchRate: 0,\n      qualityStatus: '‚ùå No Data',\n    };\n  }\n\n  private formatTimestampForDisplay(timestamp: string): string {\n    if (!timestamp) return '';\n    try {\n      const dt = new Date(timestamp);\n      return dt.toLocaleString('en-GB', {\n        year: 'numeric',\n        month: '2-digit',\n        day: '2-digit',\n        hour: '2-digit',\n        minute: '2-digit',\n        second: '2-digit',\n      });\n    } catch {\n      return timestamp;\n    }\n  }\n\n  extractAllFields(record: TelemetryRecord | null): Record<string, string> {\n    if (!record) return {};\n\n    const fields: Record<string, string> = {};\n\n    // Basic fields (timestamp first, then active) - convert timestamp to local time\n    fields['timestamp'] = this.formatTimestampForDisplay(\n      record.timestamp ?? record.received ?? '',\n    );\n    fields['active'] = String(record.active ?? '');\n\n    // Zones fields\n    const zones = record.zones || [];\n    if (Array.isArray(zones)) {\n      const zoneNames = zones.map((z) => z.name).filter(Boolean);\n      const zoneIds = zones.map((z) => z.id).filter(Boolean);\n\n      fields['zones.names'] = zoneNames.join(', ');\n      fields['zones.ids'] = zoneIds.join(', ');\n      fields['zones.count'] = String(zones.length);\n    }\n\n    // Location fields\n    const location = record.location || {};\n    Object.entries(location).forEach(([key, value]) => {\n      if (key === 'gc' && typeof value === 'object') {\n        Object.entries(value as Record<string, unknown>).forEach(\n          ([gcKey, gcValue]) => {\n            fields[`location.gc.${gcKey}`] = String((gcValue as string) ?? '');\n          },\n        );\n      } else if (\n        ['lat', 'latitude', 'lon', 'longitude'].includes(key) &&\n        value != null\n      ) {\n        try {\n          fields[`location.${key}`] = Number(value).toFixed(6);\n        } catch {\n          fields[`location.${key}`] = String((value as string) ?? '');\n        }\n      } else {\n        fields[`location.${key}`] = String((value as string) ?? '');\n      }\n    });\n\n    // Telemetry fields\n    const telemetry = record.telemetry || {};\n    Object.entries(telemetry).forEach(([key, value]) => {\n      // Transform CypherView system fields to standard field names\n      let fieldName = key;\n      if (key.startsWith('cvc_')) {\n        fieldName = key.substring(4); // Remove cvc_ prefix\n      } else if (key.startsWith('cve_')) {\n        fieldName = key.substring(4); // Remove cve_ prefix\n      } else if (key.startsWith('cv_')) {\n        fieldName = key.substring(3); // Remove cv_ prefix\n      }\n\n      fields[`telemetry.${fieldName}`] = String((value as string) ?? '');\n    });\n\n    // Check for telemetry fields at root level if no telemetry object\n    if (!record.telemetry) {\n      const commonTelemetryFields = [\n        'ignition',\n        'priority',\n        'eventId',\n        'moving',\n        'fuel_level',\n        'engine_temp',\n        'battery_voltage',\n        'satellites',\n        'hdop',\n        'pdop',\n        'gsm_signal',\n        'total_mileage',\n        'vehicle_speed',\n        'accelerator_pedal_position',\n        'driver_id',\n        'fuel_consumed',\n        'output_01',\n        'output_02',\n        'digital_01',\n        'digital_02',\n        'speed',\n        'heading',\n        'direction',\n      ];\n\n      commonTelemetryFields.forEach((field) => {\n        if (field in record) {\n          fields[field] = String((record[field] as string) ?? '');\n        }\n      });\n    }\n\n    return fields;\n  }\n\n  compareFields(\n    testRecord: TelemetryRecord | null,\n    prodRecord: TelemetryRecord | null,\n  ): FieldComparison[] {\n    const testFields = this.extractAllFields(testRecord);\n    const prodFields = this.extractAllFields(prodRecord);\n\n    const allFields = new Set([\n      ...Object.keys(testFields),\n      ...Object.keys(prodFields),\n    ]);\n\n    // Sort fields with priority: timestamp, active, zones, then alphabetically\n    const priorityFields = [\n      'timestamp',\n      'active',\n      'zones.count',\n      'zones.names',\n      'zones.ids',\n    ];\n    const sortedFields = [\n      ...priorityFields.filter((f) => allFields.has(f)),\n      ...Array.from(allFields)\n        .filter((f) => !priorityFields.includes(f))\n        .sort((a, b) => a.localeCompare(b)),\n    ];\n\n    return sortedFields.map((field) => {\n      const testValue = testFields[field] || '';\n      const prodValue = prodFields[field] || '';\n\n      let status: 'identical' | 'different' | 'missing_test' | 'missing_prod';\n      let displayTest = testValue;\n      let displayProd = prodValue;\n\n      // Normalize values for comparison\n      const normalizeValue = (val: string) => {\n        if (!val) return '';\n        try {\n          return String(parseFloat(val));\n        } catch {\n          return val.trim();\n        }\n      };\n\n      const testNormalized = normalizeValue(testValue);\n      const prodNormalized = normalizeValue(prodValue);\n\n      if (!testValue && prodValue) {\n        status = 'missing_test';\n        displayTest = '‚ùå MISSING';\n      } else if (testValue && !prodValue) {\n        status = 'missing_prod';\n        displayProd = '‚ùå MISSING';\n      } else if (testNormalized !== prodNormalized && testValue && prodValue) {\n        status = 'different';\n        displayTest = `üîπ ${testValue}`;\n        displayProd = `üî∏ ${prodValue}`;\n      } else if (testNormalized === prodNormalized && testValue) {\n        status = 'identical';\n        displayTest = `‚úÖ ${testValue}`;\n        displayProd = `‚úÖ ${prodValue}`;\n      } else {\n        status = 'identical';\n      }\n\n      return {\n        field,\n        testValue,\n        prodValue,\n        status,\n        displayTest,\n        displayProd,\n      };\n    });\n  }\n}\n", "import { Injectable, inject } from '@angular/core';\nimport { Observable } from 'rxjs';\nimport { HistoryService } from '../../../api/api/history.service';\nimport { EventListResponse } from '../../../api/model/eventListResponse';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class EventsService {\n  private readonly historyService = inject(HistoryService);\n\n  /**\n   * Get events for a specific asset within a date range\n   * Wraps the HistoryService.getEventHistory method\n   */\n  getEvents(\n    assetId: string,\n    startDate: string,\n    endDate: string,\n    limit?: number,\n  ): Observable<EventListResponse> {\n    return this.historyService.getEventHistory(\n      assetId,\n      startDate,\n      endDate,\n      limit,\n    );\n  }\n}\n", "import { Injectable, inject } from '@angular/core';\nimport { Observable, forkJoin, map, catchError, of } from 'rxjs';\nimport { EventsService } from './events.service';\nimport { DualApiService } from './dual-api.service';\nimport { isDefined, isNullOrUndefined } from '../../../shared/utils';\nimport { EventResponse, IdNameType } from '../../../api';\n\nexport interface EventRecord {\n  timestamp?: string;\n  received?: string;\n  eventTime?: string;\n  eventType?: string;\n  eventId?: string;\n  priority?: number;\n  location?: {\n    lat?: number;\n    lon?: number;\n    accuracy?: number;\n    gc?: Record<string, unknown>;\n    [key: string]: unknown;\n  };\n  zones?: {\n    id?: string;\n    name?: string;\n    [key: string]: unknown;\n  }[];\n  eventData?: Record<string, unknown>;\n  origin?: {\n    id?: string;\n    name?: string;\n  };\n  [key: string]: unknown;\n}\n\nexport interface AlignedEventRecord {\n  testRecord: EventRecord | null;\n  prodRecord: EventRecord | null;\n  index: number;\n  timestampDiff?: number;\n}\n\nexport interface EventComparisonSummary {\n  totalAligned: number;\n  bothPresent: number;\n  testOnly: number;\n  prodOnly: number;\n  matchRate: number;\n  qualityStatus: string;\n}\n\nexport interface EventFieldComparison {\n  field: string;\n  testValue: string;\n  prodValue: string;\n  status: 'identical' | 'different' | 'missing_test' | 'missing_prod';\n  displayTest: string;\n  displayProd: string;\n}\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class EventsComparisonService {\n  private readonly eventsService = inject(EventsService);\n  private readonly dualApiService = inject(DualApiService);\n\n  getEventsComparison(\n    vehicleId: string,\n    startDate: Date,\n    endDate: Date,\n    limit?: number,\n    deviceName?: string,\n  ): Observable<{\n    alignedRecords: AlignedEventRecord[];\n    summary: EventComparisonSummary;\n    testRecords: EventRecord[];\n    prodRecords: EventRecord[];\n  }> {\n    console.log('üöÄ Starting events comparison for:', {\n      vehicleId,\n      startDate,\n      endDate,\n      limit,\n      deviceName,\n    });\n\n    // Fetch events from both APIs in parallel\n    const cypherViewEvents$ = this.eventsService\n      .getEvents(\n        vehicleId,\n        startDate.toISOString(),\n        endDate.toISOString(),\n        limit,\n      )\n      .pipe(\n        map((response) => response.items ?? []),\n        catchError((error) => {\n          console.error('‚ùå CypherView events error:', error);\n          return of([]);\n        }),\n      );\n\n    const keyEvents$ = this.dualApiService.getKeyApiEvents(\n      vehicleId,\n      startDate.toISOString(),\n      endDate.toISOString(),\n      limit,\n      deviceName,\n    );\n\n    return forkJoin({\n      testData: cypherViewEvents$.pipe(\n        map((items: EventResponse[]) => this.mapToEventRecords(items)),\n      ),\n      prodData: keyEvents$.pipe(\n        map((items) => this.mapToEventRecords(items as EventResponse[])),\n      ),\n    }).pipe(\n      map(({ testData, prodData }) => {\n        const alignedRecords = this.alignRecordsByTimestamp(testData, prodData);\n        const summary = this.calculateSummary(alignedRecords);\n\n        return {\n          alignedRecords,\n          summary,\n          testRecords: testData,\n          prodRecords: prodData,\n        };\n      }),\n      catchError((error) => {\n        console.error('Error fetching events comparison:', error);\n        return of({\n          alignedRecords: [],\n          summary: this.getEmptySummary(),\n          testRecords: [],\n          prodRecords: [],\n        });\n      }),\n    );\n  }\n\n  private mapToEventRecords(items: EventResponse[]): EventRecord[] {\n    return items.map(\n      (item: EventResponse) =>\n        ({\n          ...item,\n          timestamp:\n            item.eventDate ??\n            item['eventTime'] ??\n            item['timestamp'] ??\n            item['received'] ??\n            item['date'],\n        }) as EventRecord,\n    );\n  }\n\n  setKeyApiCredentials(username: string, password: string): void {\n    this.dualApiService.setCredentials(\n      { username: '', password: '' }, // CypherView uses existing auth\n      { username, password }, // Key API credentials from user\n    );\n  }\n\n  private alignRecordsByTimestamp(\n    testRecords: EventRecord[],\n    prodRecords: EventRecord[],\n    toleranceSeconds = 2,\n  ): AlignedEventRecord[] {\n    const aligned: AlignedEventRecord[] = [];\n    const usedProdIndices = new Set<number>();\n\n    // Parse timestamp helper\n    const parseTimestamp = (record: EventRecord | null): Date | null => {\n      if (!record) return null;\n      const tsStr =\n        record.timestamp ??\n        record['eventDate'] ??\n        record.eventTime ??\n        record.received;\n      if (isNullOrUndefined(tsStr)) return null;\n\n      try {\n        return new Date(String(tsStr as string).replace('Z', '+00:00'));\n      } catch {\n        return null;\n      }\n    };\n\n    // Sort records by timestamp\n    const sortedTestRecords = [...testRecords].sort((a, b) => {\n      const aTime = parseTimestamp(a);\n      const bTime = parseTimestamp(b);\n      if (!aTime || !bTime) return 0;\n      return aTime.getTime() - bTime.getTime();\n    });\n\n    const sortedProdRecords = [...prodRecords]\n      .map((record, index) => ({ record, originalIndex: index }))\n      .sort((a, b) => {\n        const aTime = parseTimestamp(a.record);\n        const bTime = parseTimestamp(b.record);\n        if (!aTime || !bTime) return 0;\n        return aTime.getTime() - bTime.getTime();\n      });\n\n    // Match test records with production records\n    sortedTestRecords.forEach((testRecord, index) => {\n      const testTime = parseTimestamp(testRecord);\n      let bestMatch: EventRecord | null = null;\n      let bestDiff = Infinity;\n      let bestIdx: number | null = null;\n\n      if (testTime) {\n        sortedProdRecords.forEach(({ record: prodRecord, originalIndex }) => {\n          if (usedProdIndices.has(originalIndex)) return;\n\n          const prodTime = parseTimestamp(prodRecord);\n          if (prodTime) {\n            const diff = Math.abs(\n              (testTime.getTime() - prodTime.getTime()) / 1000,\n            );\n            if (diff <= toleranceSeconds && diff < bestDiff) {\n              bestMatch = prodRecord;\n              bestDiff = diff;\n              bestIdx = originalIndex;\n            }\n          }\n        });\n      }\n\n      if (isDefined(bestMatch) && bestIdx !== null) {\n        usedProdIndices.add(bestIdx);\n        aligned.push({\n          testRecord,\n          prodRecord: bestMatch,\n          index,\n          timestampDiff: bestDiff,\n        });\n      } else {\n        aligned.push({\n          testRecord,\n          prodRecord: null,\n          index,\n          timestampDiff: undefined,\n        });\n      }\n    });\n\n    // Add unmatched production records\n    sortedProdRecords.forEach(({ record: prodRecord, originalIndex }) => {\n      if (!usedProdIndices.has(originalIndex)) {\n        aligned.push({\n          testRecord: null,\n          prodRecord,\n          index: aligned.length,\n          timestampDiff: undefined,\n        });\n      }\n    });\n\n    return aligned;\n  }\n\n  private calculateSummary(\n    alignedRecords: AlignedEventRecord[],\n  ): EventComparisonSummary {\n    const bothPresent = alignedRecords.filter(\n      (r) => isDefined(r.testRecord) && isDefined(r.prodRecord),\n    ).length;\n    const testOnly = alignedRecords.filter(\n      (r) => isDefined(r.testRecord) && !isDefined(r.prodRecord),\n    ).length;\n    const prodOnly = alignedRecords.filter(\n      (r) => !isDefined(r.testRecord) && isDefined(r.prodRecord),\n    ).length;\n    const totalAligned = alignedRecords.length;\n\n    const matchRate = totalAligned > 0 ? (bothPresent / totalAligned) * 100 : 0;\n\n    let qualityStatus = 'üî¥ Poor';\n    if (matchRate >= 95) qualityStatus = 'üü¢ Excellent';\n    else if (matchRate >= 85) qualityStatus = 'üü° Good';\n    else if (matchRate >= 70) qualityStatus = 'üü† Fair';\n\n    return {\n      totalAligned,\n      bothPresent,\n      testOnly,\n      prodOnly,\n      matchRate,\n      qualityStatus,\n    };\n  }\n\n  private getEmptySummary(): EventComparisonSummary {\n    return {\n      totalAligned: 0,\n      bothPresent: 0,\n      testOnly: 0,\n      prodOnly: 0,\n      matchRate: 0,\n      qualityStatus: '‚ùå No Data',\n    };\n  }\n\n  private formatTimestampForDisplay(timestamp: string): string {\n    if (!timestamp) return '';\n    try {\n      const dt = new Date(timestamp);\n      return dt.toLocaleString('en-GB', {\n        year: 'numeric',\n        month: '2-digit',\n        day: '2-digit',\n        hour: '2-digit',\n        minute: '2-digit',\n        second: '2-digit',\n      });\n    } catch {\n      return timestamp;\n    }\n  }\n\n  private isTimestamp(value: string): boolean {\n    if (!value) return false;\n    try {\n      const dt = new Date(value);\n      return (\n        !isNaN(dt.getTime()) &&\n        (value.includes('T') ||\n          value.includes('Z') ||\n          !!RegExp(/\\d{4}-\\d{2}-\\d{2}/).exec(value))\n      );\n    } catch {\n      return false;\n    }\n  }\n\n  private setDateField(\n    fields: Record<string, string>,\n    key: string,\n    value: unknown,\n  ) {\n    let str: string;\n    if (value == null) str = '';\n    else if (typeof value === 'object') str = JSON.stringify(value);\n    else if (\n      typeof value === 'string' ||\n      typeof value === 'number' ||\n      typeof value === 'boolean'\n    )\n      str = String(value);\n    else str = JSON.stringify(value);\n    fields[key] = this.isTimestamp(str)\n      ? this.formatTimestampForDisplay(str)\n      : str;\n  }\n\n  private setIdNameField(\n    fields: Record<string, string>,\n    key: string,\n    value: IdNameType | undefined,\n  ) {\n    fields[key] = isDefined(value)\n      ? (value.name ?? value.id ?? JSON.stringify(value))\n      : '';\n  }\n\n  private setCountField(\n    fields: Record<string, string>,\n    key: string,\n    value: unknown,\n  ) {\n    const arr = value ?? [];\n    fields[key] = Array.isArray(arr) ? String(arr.length) : '0';\n  }\n\n  private extractLocationFields(\n    fields: Record<string, string>,\n    location: Record<string, unknown> | undefined,\n  ) {\n    if (!isDefined(location) || typeof location !== 'object') return;\n\n    const safe = (k: string) => {\n      const v = location?.[k];\n      if (v == null) return '';\n      if (typeof v === 'object') return JSON.stringify(v);\n      if (\n        typeof v === 'string' ||\n        typeof v === 'number' ||\n        typeof v === 'boolean'\n      )\n        return String(v);\n      return JSON.stringify(v);\n    };\n\n    if (location['lat'] != null) {\n      try {\n        fields['location.latitude'] = Number(location['lat']).toFixed(6);\n      } catch {\n        fields['location.latitude'] = String(safe('lat'));\n      }\n    }\n\n    if (location['lon'] != null) {\n      try {\n        fields['location.longitude'] = Number(location['lon']).toFixed(6);\n      } catch {\n        fields['location.longitude'] = String(safe('lon'));\n      }\n    }\n\n    ['speed', 'heading', 'altitude', 'accuracy', 'age', 'address'].forEach(\n      (k) => {\n        if (location[k] != null) fields[`location.${k}`] = String(safe(k));\n      },\n    );\n\n    const gc = location['gc'] ?? {};\n    if (isDefined(gc) && typeof gc === 'object') {\n      const gcObj = gc as Record<string, unknown>;\n      fields['location.gc.ct'] = String((gcObj['ct'] as string) ?? '');\n      fields['location.gc.pr'] = String((gcObj['pr'] as string) ?? '');\n      fields['location.gc.tw'] = String((gcObj['tw'] as string) ?? '');\n    }\n  }\n\n  private extractTelemetryFields(\n    fields: Record<string, string>,\n    telemetry: Record<string, unknown> | undefined,\n  ) {\n    if (!isDefined(telemetry) || typeof telemetry !== 'object') return;\n\n    const telemetryData = telemetry['telemetry'] ?? {};\n    if (isDefined(telemetryData) && typeof telemetryData === 'object') {\n      Object.entries(telemetryData).forEach(([key, value]) => {\n        if (value == null) return;\n        const stringValue =\n          typeof value === 'object'\n            ? JSON.stringify(value)\n            : String(value as string);\n        fields[`telemetry.${key}`] =\n          key === 'tco_timestamp' && this.isTimestamp(stringValue)\n            ? this.formatTimestampForDisplay(stringValue)\n            : stringValue;\n      });\n    }\n\n    const zones = telemetry['zones'] ?? [];\n    if (Array.isArray(zones)) {\n      const zoneNames = zones.map((z) => z.name).filter(Boolean);\n      const zoneIds = zones.map((z) => z.id).filter(Boolean);\n      fields['zones.names'] = zoneNames.join(', ');\n      fields['zones.ids'] = zoneIds.join(', ');\n      fields['zones.count'] = String(zones.length);\n    } else {\n      fields['zones.names'] = '';\n      fields['zones.ids'] = '';\n      fields['zones.count'] = '0';\n    }\n\n    if (telemetry['active'] != null) {\n      fields['active'] = String((telemetry['active'] as string) ?? '');\n    }\n\n    const timestamp = telemetry['date'] ?? telemetry['received'] ?? '';\n    if (isDefined(timestamp)) {\n      this.setDateField(fields, 'timestamp', timestamp);\n    }\n  }\n\n  extractAllFields(record: EventRecord | null): Record<string, string> {\n    if (!record) return {};\n\n    const fields: Record<string, string> = {};\n\n    // Basic event fields (matching Python extract_event_fields)\n    fields['id'] = String((record['id'] as string) ?? record.eventId ?? '');\n    fields['type'] = String(\n      (record['type'] as string) ?? record.eventType ?? '',\n    );\n    fields['eventClass'] = String((record['eventClass'] as string) ?? '');\n    fields['eventType'] = String((record['eventType'] as string) ?? '');\n\n    // Dates\n    const eventTime =\n      record['eventDate'] ?? record.eventTime ?? record.timestamp ?? '';\n    this.setDateField(fields, 'eventDate', eventTime);\n    this.setDateField(fields, 'creationDate', record['creationDate']);\n    this.setDateField(fields, 'modifiedDate', record['modifiedDate']);\n\n    // Owner/origin\n    this.setIdNameField(\n      fields,\n      'owner',\n      record['owner'] as IdNameType | undefined,\n    );\n    this.setIdNameField(\n      fields,\n      'origin',\n      record['origin'] as IdNameType | undefined,\n    );\n\n    // Counts\n    this.setCountField(fields, 'linked.count', record['linked']);\n    this.setCountField(fields, 'alerts.count', record['alerts']);\n    this.setCountField(fields, 'notify.count', record['notify']);\n\n    const details = (record['details'] ?? {}) as Record<string, unknown>;\n    const telemetry = (details['telemetry'] ?? {}) as Record<string, unknown>;\n    const location = (telemetry['location'] ??\n      record['location'] ??\n      {}) as Record<string, unknown>;\n\n    this.extractLocationFields(fields, location);\n    this.extractTelemetryFields(fields, telemetry);\n\n    // Asset\n    const asset: IdNameType =\n      (details['asset'] as IdNameType) ?? (record['asset'] as IdNameType);\n    if (isDefined(asset)) {\n      fields['asset.name'] = asset.name ?? '';\n      fields['asset.id'] = asset.id ?? '';\n    }\n\n    // Priority\n    fields['priority'] = String(record.priority ?? '');\n\n    return fields;\n  }\n\n  compareFields(\n    testRecord: EventRecord | null,\n    prodRecord: EventRecord | null,\n  ): EventFieldComparison[] {\n    const testFields = this.extractAllFields(testRecord);\n    const prodFields = this.extractAllFields(prodRecord);\n\n    const allFields = new Set([\n      ...Object.keys(testFields),\n      ...Object.keys(prodFields),\n    ]);\n\n    // Sort fields with priority matching Python implementation\n    const priorityFields = [\n      'id',\n      'type',\n      'eventClass',\n      'eventType',\n      'eventDate',\n      'creationDate',\n      'owner',\n      'origin',\n      'linked.count',\n      'alerts.count',\n      'notify.count',\n    ];\n    const sortedFields = [\n      ...priorityFields.filter((f) => allFields.has(f)),\n      ...Array.from(allFields)\n        .filter((f) => !priorityFields.includes(f))\n        .sort((a, b) => a.localeCompare(b)),\n    ];\n\n    return sortedFields.map((field) => {\n      const testValue = testFields[field] || '';\n      const prodValue = prodFields[field] || '';\n\n      let status: 'identical' | 'different' | 'missing_test' | 'missing_prod';\n      let displayTest = testValue;\n      let displayProd = prodValue;\n\n      // Normalize values for comparison\n      const normalizeValue = (val: string) => {\n        if (!val) return '';\n        try {\n          return String(parseFloat(val));\n        } catch {\n          return val.trim();\n        }\n      };\n\n      const testNormalized = normalizeValue(testValue);\n      const prodNormalized = normalizeValue(prodValue);\n\n      if (!testValue && prodValue) {\n        status = 'missing_test';\n        displayTest = '‚ùå MISSING';\n      } else if (testValue && !prodValue) {\n        status = 'missing_prod';\n        displayProd = '‚ùå MISSING';\n      } else if (testNormalized !== prodNormalized && testValue && prodValue) {\n        status = 'different';\n        displayTest = `üîπ ${testValue}`;\n        displayProd = `üî∏ ${prodValue}`;\n      } else if (testNormalized === prodNormalized && testValue) {\n        status = 'identical';\n        displayTest = `‚úÖ ${testValue}`;\n        displayProd = `‚úÖ ${prodValue}`;\n      } else {\n        status = 'identical';\n      }\n\n      return {\n        field,\n        testValue,\n        prodValue,\n        status,\n        displayTest,\n        displayProd,\n      };\n    });\n  }\n}\n", "import { Injectable, inject } from '@angular/core';\nimport { Observable } from 'rxjs';\nimport { HistoryService } from '../../../api/api/history.service';\nimport { TripListResponse } from '../../../api/model/tripListResponse';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class TripsService {\n  private readonly historyService = inject(HistoryService);\n\n  /**\n   * Get trips for a specific asset within a date range\n   * Wraps the HistoryService.getTripHistory method\n   */\n  getTrips(\n    assetId: string,\n    startDate: string,\n    endDate: string,\n    limit?: number,\n  ): Observable<TripListResponse> {\n    return this.historyService.getTripHistory(\n      assetId,\n      startDate,\n      endDate,\n      undefined,\n      limit,\n    );\n  }\n}\n", "import { Injectable, inject } from '@angular/core';\nimport { Observable, forkJoin, map, catchError, of } from 'rxjs';\nimport { TripsService } from './trips.service';\nimport { DualApiService } from './dual-api.service';\nimport { isDefined, isNullOrUndefined } from '../../../shared/utils';\nimport { IdNameType, TripResponse } from '../../../api';\n\nexport interface TripRecord {\n  timestamp?: string;\n  startTime?: string;\n  endTime?: string;\n  tripId?: string;\n  distance?: number;\n  duration?: number;\n  averageSpeed?: number;\n  maxSpeed?: number;\n  fuelUsed?: number;\n  startLocation?: {\n    lat?: number;\n    lon?: number;\n    address?: string;\n    [key: string]: unknown;\n  };\n  endLocation?: {\n    lat?: number;\n    lon?: number;\n    address?: string;\n    [key: string]: unknown;\n  };\n  zones?: {\n    id?: string;\n    name?: string;\n    [key: string]: unknown;\n  }[];\n  tripData?: Record<string, unknown>;\n  origin?: {\n    id?: string;\n    name?: string;\n  };\n  start?: {\n    date?: string;\n    lat?: number;\n    lon?: number;\n    address?: string;\n    odometer?: number;\n    hours?: number;\n    [key: string]: unknown;\n  };\n  maxes?: {\n    speed?: number;\n    [key: string]: unknown;\n  };\n  [key: string]: unknown;\n}\n\nexport interface AlignedTripRecord {\n  testRecord: TripRecord | null;\n  prodRecord: TripRecord | null;\n  index: number;\n  timestampDiff?: number;\n}\n\nexport interface TripComparisonSummary {\n  totalAligned: number;\n  bothPresent: number;\n  testOnly: number;\n  prodOnly: number;\n  matchRate: number;\n  qualityStatus: string;\n}\n\nexport interface TripFieldComparison {\n  field: string;\n  testValue: string;\n  prodValue: string;\n  status: 'identical' | 'different' | 'missing_test' | 'missing_prod';\n  displayTest: string;\n  displayProd: string;\n}\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class TripsComparisonService {\n  private readonly tripsService = inject(TripsService);\n  private readonly dualApiService = inject(DualApiService);\n\n  getTripsComparison(\n    vehicleId: string,\n    startDate: Date,\n    endDate: Date,\n    limit?: number,\n    deviceName?: string,\n  ): Observable<{\n    alignedRecords: AlignedTripRecord[];\n    summary: TripComparisonSummary;\n    testRecords: TripRecord[];\n    prodRecords: TripRecord[];\n  }> {\n    console.log('üöÄ Starting trips comparison for:', {\n      vehicleId,\n      startDate,\n      endDate,\n      limit,\n      deviceName,\n    });\n\n    // Fetch trips from both APIs in parallel\n    const cypherViewTrips$ = this.tripsService\n      .getTrips(\n        vehicleId,\n        startDate.toISOString(),\n        endDate.toISOString(),\n        limit,\n      )\n      .pipe(\n        map((response) => response.items ?? []),\n        catchError((error) => {\n          console.error('‚ùå CypherView trips error:', error);\n          return of([]);\n        }),\n      );\n\n    const keyTrips$ = this.dualApiService.getKeyApiTrips(\n      vehicleId,\n      startDate.toISOString(),\n      endDate.toISOString(),\n      limit,\n      deviceName,\n    );\n\n    return forkJoin({\n      testData: cypherViewTrips$.pipe(\n        map((items: TripResponse[]) => this.mapToTripRecords(items)),\n      ),\n      prodData: keyTrips$.pipe(\n        map((items) => this.mapToTripRecords(items as TripResponse[])),\n      ),\n    }).pipe(\n      map(({ testData, prodData }) => {\n        const alignedRecords = this.alignRecordsByTimestamp(testData, prodData);\n        const summary = this.calculateSummary(alignedRecords);\n\n        return {\n          alignedRecords,\n          summary,\n          testRecords: testData,\n          prodRecords: prodData,\n        };\n      }),\n      catchError((error) => {\n        console.error('Error fetching trips comparison:', error);\n        return of({\n          alignedRecords: [],\n          summary: this.getEmptySummary(),\n          testRecords: [],\n          prodRecords: [],\n        });\n      }),\n    );\n  }\n\n  private mapToTripRecords(items: TripResponse[]): TripRecord[] {\n    return items.map(\n      (item: TripResponse) =>\n        ({\n          ...item,\n          timestamp:\n            item['startTime'] ??\n            item['timestamp'] ??\n            item['received'] ??\n            item['date'],\n          startTime:\n            item['startTime'] ?? item.start?.['date'] ?? item.dateStart,\n          endTime: item['endTime'] ?? item.end?.['date'] ?? item.dateEnd,\n        }) as TripRecord,\n    );\n  }\n\n  setKeyApiCredentials(username: string, password: string): void {\n    this.dualApiService.setCredentials(\n      { username: '', password: '' }, // CypherView uses existing auth\n      { username, password }, // Key API credentials from user\n    );\n  }\n\n  private alignRecordsByTimestamp(\n    testRecords: TripRecord[],\n    prodRecords: TripRecord[],\n    toleranceSeconds = 30, // Trips may have larger time tolerance\n  ): AlignedTripRecord[] {\n    const aligned: AlignedTripRecord[] = [];\n    const usedProdIndices = new Set<number>();\n\n    // Parse timestamp helper\n    const parseTimestamp = (record: TripRecord | null): Date | null => {\n      if (!record) return null;\n      const tsStr =\n        record.timestamp ??\n        record.startTime ??\n        record['start']?.date ??\n        record['received'];\n      if (isNullOrUndefined(tsStr)) return null;\n\n      try {\n        return new Date((tsStr as string).replace('Z', '+00:00'));\n      } catch {\n        return null;\n      }\n    };\n\n    // Sort records by timestamp\n    const sortedTestRecords = [...testRecords].sort((a, b) => {\n      const aTime = parseTimestamp(a);\n      const bTime = parseTimestamp(b);\n      if (!aTime || !bTime) return 0;\n      return aTime.getTime() - bTime.getTime();\n    });\n\n    const sortedProdRecords = [...prodRecords]\n      .map((record, index) => ({ record, originalIndex: index }))\n      .sort((a, b) => {\n        const aTime = parseTimestamp(a.record);\n        const bTime = parseTimestamp(b.record);\n        if (!aTime || !bTime) return 0;\n        return aTime.getTime() - bTime.getTime();\n      });\n\n    // Match test records with production records\n    sortedTestRecords.forEach((testRecord, index) => {\n      const testTime = parseTimestamp(testRecord);\n      let bestMatch: TripRecord | null = null;\n      let bestDiff = Infinity;\n      let bestIdx: number | null = null;\n\n      if (testTime) {\n        sortedProdRecords.forEach(({ record: prodRecord, originalIndex }) => {\n          if (usedProdIndices.has(originalIndex)) return;\n\n          const prodTime = parseTimestamp(prodRecord);\n          if (prodTime) {\n            const diff = Math.abs(\n              (testTime.getTime() - prodTime.getTime()) / 1000,\n            );\n            if (diff <= toleranceSeconds && diff < bestDiff) {\n              bestMatch = prodRecord;\n              bestDiff = diff;\n              bestIdx = originalIndex;\n            }\n          }\n        });\n      }\n\n      if (isDefined(bestMatch) && bestIdx !== null) {\n        usedProdIndices.add(bestIdx);\n        aligned.push({\n          testRecord,\n          prodRecord: bestMatch,\n          index,\n          timestampDiff: bestDiff,\n        });\n      } else {\n        aligned.push({\n          testRecord,\n          prodRecord: null,\n          index,\n          timestampDiff: undefined,\n        });\n      }\n    });\n\n    // Add unmatched production records\n    sortedProdRecords.forEach(({ record: prodRecord, originalIndex }) => {\n      if (!usedProdIndices.has(originalIndex)) {\n        aligned.push({\n          testRecord: null,\n          prodRecord,\n          index: aligned.length,\n          timestampDiff: undefined,\n        });\n      }\n    });\n\n    return aligned;\n  }\n\n  private calculateSummary(\n    alignedRecords: AlignedTripRecord[],\n  ): TripComparisonSummary {\n    const bothPresent = alignedRecords.filter(\n      (r) => isDefined(r.testRecord) && isDefined(r.prodRecord),\n    ).length;\n    const testOnly = alignedRecords.filter(\n      (r) => isDefined(r.testRecord) && !isDefined(r.prodRecord),\n    ).length;\n    const prodOnly = alignedRecords.filter(\n      (r) => !isDefined(r.testRecord) && isDefined(r.prodRecord),\n    ).length;\n    const totalAligned = alignedRecords.length;\n\n    const matchRate = totalAligned > 0 ? (bothPresent / totalAligned) * 100 : 0;\n\n    let qualityStatus = 'üî¥ Poor';\n    if (matchRate >= 95) qualityStatus = 'üü¢ Excellent';\n    else if (matchRate >= 85) qualityStatus = 'üü° Good';\n    else if (matchRate >= 70) qualityStatus = 'üü† Fair';\n\n    return {\n      totalAligned,\n      bothPresent,\n      testOnly,\n      prodOnly,\n      matchRate,\n      qualityStatus,\n    };\n  }\n\n  private getEmptySummary(): TripComparisonSummary {\n    return {\n      totalAligned: 0,\n      bothPresent: 0,\n      testOnly: 0,\n      prodOnly: 0,\n      matchRate: 0,\n      qualityStatus: '‚ùå No Data',\n    };\n  }\n\n  private formatTimestampForDisplay(timestamp: string): string {\n    if (!timestamp) return '';\n    try {\n      const dt = new Date(timestamp);\n      return dt.toLocaleString('en-GB', {\n        year: 'numeric',\n        month: '2-digit',\n        day: '2-digit',\n        hour: '2-digit',\n        minute: '2-digit',\n        second: '2-digit',\n      });\n    } catch {\n      return timestamp;\n    }\n  }\n\n  private isTimestamp(value: string): boolean {\n    if (!value) return false;\n    try {\n      const dt = new Date(value);\n      return (\n        !isNaN(dt.getTime()) &&\n        (value.includes('T') ||\n          value.includes('Z') ||\n          !!RegExp(/\\d{4}-\\d{2}-\\d{2}/).exec(value))\n      );\n    } catch {\n      return false;\n    }\n  }\n\n  extractAllFields(record: TripRecord | null): Record<string, string> {\n    if (!record) return {};\n\n    const fields: Record<string, string> = {};\n\n    this._extractDateTimeFields(record, fields);\n    this._extractTripInfoFields(record, fields);\n    this._extractMeasurementFields(record, fields);\n    this._extractAssetInfo(record, fields);\n    this._extractLocationFields(record, fields);\n    this._extractZoneFields(record, fields);\n\n    return fields;\n  }\n\n  private _extractDateTimeFields(\n    record: TripRecord,\n    fields: Record<string, string>,\n  ) {\n    const startTime = record.startTime ?? record.timestamp ?? '';\n    fields['dateStart'] = this.isTimestamp(startTime)\n      ? this.formatTimestampForDisplay(startTime)\n      : startTime;\n\n    const endTime = record.endTime ?? '';\n    fields['dateEnd'] = this.isTimestamp(endTime)\n      ? this.formatTimestampForDisplay(endTime)\n      : endTime;\n\n    const creationDate = record['creationDate'] ?? '';\n    const creationDateStr = String(creationDate as string);\n    fields['creationDate'] = this.isTimestamp(creationDateStr)\n      ? this.formatTimestampForDisplay(creationDateStr)\n      : creationDateStr;\n  }\n\n  private _extractTripInfoFields(\n    record: TripRecord,\n    fields: Record<string, string>,\n  ) {\n    const idVal = record.tripId ?? record['id'] ?? '';\n    fields['id'] = typeof idVal === 'string' ? idVal : String(idVal as string);\n  }\n\n  private _formatValue(value: unknown, unit: string, toFixed: number): string {\n    if (value == null) return '';\n    try {\n      return `${Number(value).toFixed(toFixed)} ${unit}`;\n    } catch {\n      return String((value as string) ?? '');\n    }\n  }\n\n  private _extractMeasurementFields(\n    record: TripRecord,\n    fields: Record<string, string>,\n  ) {\n    const distance = record.distance ?? record['distance'] ?? null;\n    fields['distance'] = this._formatValue(distance, 'km', 2);\n\n    const duration = record.duration ?? record['drivingTime'] ?? null;\n    fields['drivingTime'] = this._formatValue(duration, 'min', 2);\n\n    const maxSpeed = record.maxSpeed ?? record['maxes']?.speed;\n    fields['maxSpeed'] = this._formatValue(maxSpeed, 'km/h', 2);\n\n    if (fields['distance'] && fields['drivingTime']) {\n      try {\n        const distanceKm = Number(fields['distance'].replace(' km', ''));\n        const durationHours =\n          Number(fields['drivingTime'].replace(' min', '')) / 60;\n        if (durationHours > 0) {\n          fields['averageSpeed'] =\n            `${(distanceKm / durationHours).toFixed(2)} km/h`;\n        } else {\n          fields['averageSpeed'] = '';\n        }\n      } catch {\n        fields['averageSpeed'] = '';\n      }\n    } else {\n      fields['averageSpeed'] = '';\n    }\n\n    const fuelUsed = record.fuelUsed ?? record['fuel'] ?? null;\n    fields['fuelUsed'] = this._formatValue(fuelUsed, 'L', 2);\n\n    const idleTime = record['idleTime'];\n    if (idleTime != null) {\n      try {\n        fields['idleTime'] = `${(Number(idleTime) / 60).toFixed(2)} min`;\n      } catch {\n        fields['idleTime'] = String((idleTime as string) ?? '');\n      }\n    } else {\n      fields['idleTime'] = '';\n    }\n  }\n\n  private _extractAssetInfo(\n    record: TripRecord,\n    fields: Record<string, string>,\n  ) {\n    const asset = record['asset'] as IdNameType;\n    if (isDefined(asset)) {\n      fields['asset.name'] = asset.name ?? '';\n    }\n  }\n\n  private _extractLocationFields(\n    record: TripRecord,\n    fields: Record<string, string>,\n  ) {\n    const start = record.startLocation || record['start'];\n    if (isDefined(start)) {\n      fields['startAddress'] = start.address ?? '';\n      fields['start.latitude'] = this._formatValue(start.lat, '', 6);\n      fields['start.longitude'] = this._formatValue(start.lon, '', 6);\n      fields['start.odometer'] = this._formatValue(start['odometer'], 'km', 2);\n      fields['start.hours'] = this._formatValue(start['hours'], 'h', 2);\n    }\n\n    const end =\n      record.endLocation || (record['end'] as TripRecord['endLocation']);\n    if (isDefined(end)) {\n      fields['endAddress'] = end.address ?? '';\n      fields['end.latitude'] = this._formatValue(end.lat, '', 6);\n      fields['end.longitude'] = this._formatValue(end.lon, '', 6);\n      fields['end.odometer'] = this._formatValue(end['odometer'], 'km', 2);\n      fields['end.hours'] = this._formatValue(end['hours'], 'h', 2);\n    }\n  }\n\n  private _extractZoneFields(\n    record: TripRecord,\n    fields: Record<string, string>,\n  ) {\n    const zones = record.zones ?? [];\n    if (Array.isArray(zones)) {\n      const zoneNames = zones.map((z) => z.name).filter(Boolean);\n      const zoneIds = zones.map((z) => z.id).filter(Boolean);\n\n      fields['zones.names'] = zoneNames.join(', ');\n      fields['zones.ids'] = zoneIds.join(', ');\n      fields['zones.count'] = String(zones.length);\n    } else {\n      fields['zones.names'] = '';\n      fields['zones.ids'] = '';\n      fields['zones.count'] = '0';\n    }\n  }\n\n  compareFields(\n    testRecord: TripRecord | null,\n    prodRecord: TripRecord | null,\n  ): TripFieldComparison[] {\n    const testFields = this.extractAllFields(testRecord);\n    const prodFields = this.extractAllFields(prodRecord);\n\n    const allFields = new Set([\n      ...Object.keys(testFields),\n      ...Object.keys(prodFields),\n    ]);\n\n    // Sort fields with priority matching Python implementation\n    const priorityFields = [\n      'dateStart',\n      'dateEnd',\n      'id',\n      'distance',\n      'drivingTime',\n      'averageSpeed',\n      'maxSpeed',\n      'fuelUsed',\n      'idleTime',\n    ];\n    const sortedFields = [\n      ...priorityFields.filter((f) => allFields.has(f)),\n      ...Array.from(allFields)\n        .filter((f) => !priorityFields.includes(f))\n        .sort((a, b) => a.localeCompare(b)),\n    ];\n\n    return sortedFields.map((field) => {\n      const testValue = testFields[field] || '';\n      const prodValue = prodFields[field] || '';\n\n      let status: 'identical' | 'different' | 'missing_test' | 'missing_prod';\n      let displayTest = testValue;\n      let displayProd = prodValue;\n\n      // Normalize values for comparison\n      const normalizeValue = (val: string) => {\n        if (!val) return '';\n        try {\n          return String(parseFloat(val));\n        } catch {\n          return val.trim();\n        }\n      };\n\n      const testNormalized = normalizeValue(testValue);\n      const prodNormalized = normalizeValue(prodValue);\n\n      if (!testValue && prodValue) {\n        status = 'missing_test';\n        displayTest = '‚ùå MISSING';\n      } else if (testValue && !prodValue) {\n        status = 'missing_prod';\n        displayProd = '‚ùå MISSING';\n      } else if (testNormalized !== prodNormalized && testValue && prodValue) {\n        status = 'different';\n        displayTest = `üîπ ${testValue}`;\n        displayProd = `üî∏ ${prodValue}`;\n      } else if (testNormalized === prodNormalized && testValue) {\n        status = 'identical';\n        displayTest = `‚úÖ ${testValue}`;\n        displayProd = `‚úÖ ${prodValue}`;\n      } else {\n        status = 'identical';\n      }\n\n      return {\n        field,\n        testValue,\n        prodValue,\n        status,\n        displayTest,\n        displayProd,\n      };\n    });\n  }\n}\n", "import { Injectable, inject } from '@angular/core';\nimport { Observable, forkJoin, map, catchError, of } from 'rxjs';\nimport {\n  TelemetryComparisonService,\n  AlignedRecord,\n  TelemetryRecord,\n  FieldComparison,\n} from './telemetry-comparison.service';\nimport {\n  EventsComparisonService,\n  AlignedEventRecord,\n  EventRecord,\n} from './events-comparison.service';\nimport {\n  TripsComparisonService,\n  AlignedTripRecord,\n  TripRecord,\n} from './trips-comparison.service';\nimport { isDefined, isNullOrUndefined } from '../../../shared/utils';\n\nexport type TimelineRecordType =\n  | 'telemetry'\n  | 'event'\n  | 'trip_start'\n  | 'trip_end';\n\nexport type RecordUnion = TelemetryRecord | EventRecord | TripRecord;\nexport interface UnifiedTimelineRecord {\n  type: TimelineRecordType;\n  timestamp: string;\n  index: number;\n  timestampDiff?: number;\n  testRecord: RecordUnion | null;\n  prodRecord: RecordUnion | null;\n  status: 'both-environments' | 'cypherView-only' | 'key-only';\n  matchingFields?: number;\n  totalFields?: number;\n  matchPercentage?: number;\n  data?: unknown; // Store the original aligned record for detailed view\n}\n\nexport interface UnifiedTimelineSummary {\n  totalRecords: number;\n  telemetryCount: number;\n  eventsCount: number;\n  tripsCount: number;\n  bothPresentCount: number;\n  testOnlyCount: number;\n  prodOnlyCount: number;\n  overallMatchRate: number;\n  qualityStatus: string;\n  timeRange: {\n    start: string;\n    end: string;\n    duration: string;\n  };\n}\n\nexport interface UnifiedTimelineResult {\n  records: UnifiedTimelineRecord[];\n  summary: UnifiedTimelineSummary;\n  rawData: {\n    telemetry: {\n      alignedRecords: AlignedRecord[];\n      testRecords: TelemetryRecord[];\n      prodRecords: TelemetryRecord[];\n    };\n    events: {\n      alignedRecords: AlignedEventRecord[];\n      testRecords: EventRecord[];\n      prodRecords: EventRecord[];\n    };\n    trips: {\n      alignedRecords: AlignedTripRecord[];\n      testRecords: TripRecord[];\n      prodRecords: TripRecord[];\n    };\n  };\n}\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class UnifiedTimelineService {\n  private readonly telemetryService = inject(TelemetryComparisonService);\n  private readonly eventsService = inject(EventsComparisonService);\n  private readonly tripsService = inject(TripsComparisonService);\n\n  /**\n   * Get unified timeline comparing telemetry, events, and trips data\n   * Replicates Python merge_json_reports.py functionality\n   */\n  getUnifiedTimeline(\n    vehicleId: string,\n    startDate: Date,\n    endDate: Date,\n    limit?: number,\n    deviceName?: string,\n  ): Observable<UnifiedTimelineResult> {\n    console.log('üöÄ Starting unified timeline analysis for:', {\n      vehicleId,\n      startDate,\n      endDate,\n      limit,\n      deviceName,\n    });\n\n    // Fetch all data types in parallel (like Python does)\n    const telemetryData$ = this.telemetryService.getTelemetryComparison(\n      vehicleId,\n      startDate,\n      endDate,\n      limit,\n      deviceName,\n    );\n    const eventsData$ = this.eventsService.getEventsComparison(\n      vehicleId,\n      startDate,\n      endDate,\n      limit,\n      deviceName,\n    );\n    const tripsData$ = this.tripsService.getTripsComparison(\n      vehicleId,\n      startDate,\n      endDate,\n      limit,\n      deviceName,\n    );\n\n    return forkJoin({\n      telemetry: telemetryData$,\n      events: eventsData$,\n      trips: tripsData$,\n    }).pipe(\n      map(({ telemetry, events, trips }) => {\n        console.log('üìä All data fetched:', {\n          telemetry: telemetry.alignedRecords.length,\n          events: events.alignedRecords.length,\n          trips: trips.alignedRecords.length,\n        });\n\n        // Merge all records into unified timeline (replicates merge_records() function)\n        const unifiedRecords = this.mergeRecordsChronologically(\n          telemetry,\n          events,\n          trips,\n        );\n\n        // Debug: Log timestamp distribution\n        console.log('üìä Timeline records after merge:', {\n          total: unifiedRecords.length,\n          telemetry: unifiedRecords.filter((r) => r.type === 'telemetry')\n            .length,\n          events: unifiedRecords.filter((r) => r.type === 'event').length,\n          trip_starts: unifiedRecords.filter((r) => r.type === 'trip_start')\n            .length,\n          trip_ends: unifiedRecords.filter((r) => r.type === 'trip_end').length,\n        });\n\n        // Debug: Log first few timestamps to check sorting\n        console.log(\n          'üïê First 10 timestamps:',\n          unifiedRecords.slice(0, 10).map((r) => ({\n            type: r.type,\n            timestamp: r.timestamp,\n            date: new Date(r.timestamp).toISOString(),\n          })),\n        );\n\n        // Calculate unified summary (replicates create_unified_report() function)\n        const summary = this.calculateUnifiedSummary(\n          unifiedRecords,\n          startDate,\n          endDate,\n        );\n\n        return {\n          records: unifiedRecords,\n          summary,\n          rawData: { telemetry, events, trips },\n        };\n      }),\n      catchError((error) => {\n        console.error('‚ùå Unified timeline error:', error);\n        return of({\n          records: [],\n          summary: this.getEmptyUnifiedSummary(startDate, endDate),\n          rawData: {\n            telemetry: { alignedRecords: [], testRecords: [], prodRecords: [] },\n            events: { alignedRecords: [], testRecords: [], prodRecords: [] },\n            trips: { alignedRecords: [], testRecords: [], prodRecords: [] },\n          },\n        });\n      }),\n    );\n  }\n\n  /**\n   * Merge records from all data types and sort chronologically\n   * Replicates Python merge_records() functionality\n   */\n  private mergeRecordsChronologically(\n    telemetry: { alignedRecords: AlignedRecord[] },\n    events: { alignedRecords: AlignedEventRecord[] },\n    trips: { alignedRecords: AlignedTripRecord[] },\n  ): UnifiedTimelineRecord[] {\n    const unifiedRecords: UnifiedTimelineRecord[] = [];\n\n    // Convert telemetry records\n    telemetry.alignedRecords.forEach((record: AlignedRecord, index: number) => {\n      unifiedRecords.push(\n        this.convertToUnifiedRecord('telemetry', record, index),\n      );\n    });\n\n    // Convert event records\n    events.alignedRecords.forEach(\n      (record: AlignedEventRecord, index: number) => {\n        unifiedRecords.push(\n          this.convertToUnifiedRecord('event', record, index),\n        );\n      },\n    );\n\n    // Convert trip records - create two records per trip (start and end)\n    trips.alignedRecords.forEach((record: AlignedTripRecord, index: number) => {\n      // Create trip start record\n      unifiedRecords.push(\n        this.convertToUnifiedRecord('trip_start', record, index),\n      );\n      // Create trip end record\n      unifiedRecords.push(\n        this.convertToUnifiedRecord('trip_end', record, index),\n      );\n    });\n\n    // Sort chronologically by timestamp (replicates Python sorting)\n    return unifiedRecords.sort((a, b) => {\n      try {\n        const timeA = new Date(a.timestamp).getTime();\n        const timeB = new Date(b.timestamp).getTime();\n\n        // Check for invalid dates\n        if (isNaN(timeA) || isNaN(timeB)) {\n          console.warn('‚ö†Ô∏è Invalid timestamp found:', {\n            recordA: a.type,\n            timestampA: a.timestamp,\n            recordB: b.type,\n            timestampB: b.timestamp,\n          });\n          return 0;\n        }\n\n        return timeA - timeB;\n      } catch (error) {\n        console.error('‚ùå Error sorting records:', error, {\n          recordA: a,\n          recordB: b,\n        });\n        return 0;\n      }\n    });\n  }\n\n  /**\n   * Convert individual aligned records to unified format\n   * Replicates get_record_timestamp() and record conversion logic\n   */\n  private convertToUnifiedRecord(\n    type: TimelineRecordType,\n    alignedRecord: AlignedRecord | AlignedEventRecord | AlignedTripRecord,\n    index: number,\n  ): UnifiedTimelineRecord {\n    const testRecord = alignedRecord.testRecord;\n    const prodRecord = alignedRecord.prodRecord;\n\n    // Extract timestamp (prioritize test record, fallback to prod)\n    const timestamp =\n      this.extractTimestamp(testRecord, type) ??\n      this.extractTimestamp(prodRecord, type) ??\n      new Date().toISOString();\n\n    // Determine record status\n    let status: 'both-environments' | 'cypherView-only' | 'key-only';\n    if (testRecord && prodRecord) {\n      status = 'both-environments';\n    } else if (testRecord && !prodRecord) {\n      status = 'cypherView-only';\n    } else {\n      status = 'key-only';\n    }\n\n    // Calculate field matching for this record type\n    const { matchingFields, totalFields, matchPercentage } =\n      this.calculateRecordMatching(type, alignedRecord);\n\n    return {\n      type,\n      timestamp,\n      index,\n      timestampDiff: alignedRecord.timestampDiff,\n      testRecord,\n      prodRecord,\n      status,\n      matchingFields,\n      totalFields,\n      matchPercentage,\n      data: alignedRecord, // Store original for detailed comparison\n    };\n  }\n\n  /**\n   * Extract timestamp from any record type\n   * Replicates Python get_record_timestamp() logic\n   */\n  private extractTimestamp(\n    record: RecordUnion | null,\n    recordType?: TimelineRecordType,\n  ): string | null {\n    if (isNullOrUndefined(record)) return null;\n\n    const timestampKeys = this.getTimestampKeys(recordType);\n\n    for (const key of timestampKeys) {\n      const ts = record[key] as string | number | undefined;\n\n      if (isDefined(ts)) {\n        try {\n          const normalizedTs = typeof ts === 'string' ? ts : ts.toString();\n          const testDate = new Date(normalizedTs);\n          if (!isNaN(testDate.getTime())) {\n            return normalizedTs;\n          }\n        } catch {\n          console.warn('‚ö†Ô∏è Invalid timestamp format encountered:', ts);\n        }\n      }\n    }\n\n    return null;\n  }\n\n  /**\n   * Get the priority-ordered list of keys to check for a timestamp.\n   */\n  private getTimestampKeys(recordType?: TimelineRecordType): string[] {\n    switch (recordType) {\n      case 'event':\n        return ['eventDate', 'eventTime', 'timestamp', 'received', 'date'];\n      case 'trip_start':\n        return ['startTime', 'timestamp', 'date'];\n      case 'trip_end':\n        return ['endTime', 'timestamp', 'date'];\n      default:\n        return ['timestamp', 'received', 'date'];\n    }\n  }\n\n  /**\n   * Calculate field matching percentage for a record\n   * Uses appropriate comparison service based on record type\n   */\n  private calculateRecordMatching(\n    type: TimelineRecordType,\n    alignedRecord: AlignedRecord | AlignedEventRecord | AlignedTripRecord,\n  ): { matchingFields: number; totalFields: number; matchPercentage: number } {\n    let comparisons: FieldComparison[] = [];\n\n    switch (type) {\n      case 'telemetry':\n        comparisons = this.telemetryService.compareFields(\n          alignedRecord.testRecord,\n          alignedRecord.prodRecord,\n        );\n        break;\n      case 'event':\n        comparisons = this.eventsService.compareFields(\n          alignedRecord.testRecord,\n          alignedRecord.prodRecord,\n        );\n        break;\n      case 'trip_start':\n      case 'trip_end':\n        comparisons = this.tripsService.compareFields(\n          alignedRecord.testRecord,\n          alignedRecord.prodRecord,\n        );\n        break;\n    }\n\n    const totalFields = comparisons.length;\n    const matchingFields = comparisons.filter(\n      (c) => c.status === 'identical',\n    ).length;\n    const matchPercentage =\n      totalFields > 0 ? (matchingFields / totalFields) * 100 : 0;\n\n    return { matchingFields, totalFields, matchPercentage };\n  }\n\n  /**\n   * Calculate unified summary statistics\n   * Replicates Python create_unified_report() summary logic\n   */\n  private calculateUnifiedSummary(\n    records: UnifiedTimelineRecord[],\n    startDate: Date,\n    endDate: Date,\n  ): UnifiedTimelineSummary {\n    const totalRecords = records.length;\n    const telemetryCount = records.filter((r) => r.type === 'telemetry').length;\n    const eventsCount = records.filter((r) => r.type === 'event').length;\n    const tripsCount = records.filter(\n      (r) => r.type === 'trip_start' || r.type === 'trip_end',\n    ).length;\n\n    const bothPresentCount = records.filter(\n      (r) => r.status === 'both-environments',\n    ).length;\n    const testOnlyCount = records.filter(\n      (r) => r.status === 'cypherView-only',\n    ).length;\n    const prodOnlyCount = records.filter((r) => r.status === 'key-only').length;\n\n    // Calculate overall match rate across all record types\n    const totalMatches = records.reduce(\n      (sum, r) => sum + (r.matchingFields ?? 0),\n      0,\n    );\n    const totalFields = records.reduce(\n      (sum, r) => sum + (r.totalFields ?? 0),\n      0,\n    );\n    const overallMatchRate =\n      totalFields > 0 ? (totalMatches / totalFields) * 100 : 0;\n\n    // Determine quality status\n    let qualityStatus = 'üî¥ Poor';\n    if (overallMatchRate >= 95) qualityStatus = 'üü¢ Excellent';\n    else if (overallMatchRate >= 85) qualityStatus = 'üü° Good';\n    else if (overallMatchRate >= 70) qualityStatus = 'üü† Fair';\n\n    const duration = endDate.getTime() - startDate.getTime();\n    const durationHours = Math.round((duration / (1000 * 60 * 60)) * 10) / 10;\n\n    return {\n      totalRecords,\n      telemetryCount,\n      eventsCount,\n      tripsCount,\n      bothPresentCount,\n      testOnlyCount,\n      prodOnlyCount,\n      overallMatchRate,\n      qualityStatus,\n      timeRange: {\n        start: startDate.toISOString(),\n        end: endDate.toISOString(),\n        duration: `${durationHours}h`,\n      },\n    };\n  }\n\n  /**\n   * Get empty summary for error cases\n   */\n  private getEmptyUnifiedSummary(\n    startDate: Date,\n    endDate: Date,\n  ): UnifiedTimelineSummary {\n    const duration = endDate.getTime() - startDate.getTime();\n    const durationHours = Math.round((duration / (1000 * 60 * 60)) * 10) / 10;\n\n    return {\n      totalRecords: 0,\n      telemetryCount: 0,\n      eventsCount: 0,\n      tripsCount: 0,\n      bothPresentCount: 0,\n      testOnlyCount: 0,\n      prodOnlyCount: 0,\n      overallMatchRate: 0,\n      qualityStatus: '‚ùå No Data',\n      timeRange: {\n        start: startDate.toISOString(),\n        end: endDate.toISOString(),\n        duration: `${durationHours}h`,\n      },\n    };\n  }\n\n  /**\n   * Export unified timeline as JSON (replicates Python JSON export)\n   */\n  exportAsJson(result: UnifiedTimelineResult): string {\n    return JSON.stringify(\n      {\n        summary: result.summary,\n        records: result.records,\n        metadata: {\n          generated: new Date().toISOString(),\n          tool: 'CypherView Unified Timeline',\n          version: '1.0',\n        },\n      },\n      null,\n      2,\n    );\n  }\n\n  /**\n   * Export unified timeline as detailed text report (replicates Python text export)\n   */\n  exportAsTextReport(result: UnifiedTimelineResult): string {\n    const { summary, records } = result;\n\n    let report = `UNIFIED TIMELINE COMPARISON REPORT\\n`;\n    report += `Generated: ${new Date().toISOString()}\\n`;\n    report += `\\n`;\n    report += `SUMMARY:\\n`;\n    report += `--------\\n`;\n    report += `Total Records: ${summary.totalRecords}\\n`;\n    report += `- Telemetry: ${summary.telemetryCount}\\n`;\n    report += `- Events: ${summary.eventsCount}\\n`;\n    report += `- Trips: ${summary.tripsCount}\\n`;\n    report += `\\n`;\n    report += `Status Distribution:\\n`;\n    report += `- Both Environments: ${summary.bothPresentCount}\\n`;\n    report += `- CypherView Only: ${summary.testOnlyCount}\\n`;\n    report += `- Key Only: ${summary.prodOnlyCount}\\n`;\n    report += `\\n`;\n    report += `Overall Match Rate: ${summary.overallMatchRate.toFixed(1)}% (${summary.qualityStatus})\\n`;\n    report += `Time Range: ${summary.timeRange.start} - ${summary.timeRange.end} (${summary.timeRange.duration})\\n`;\n    report += `\\n`;\n    report += `CHRONOLOGICAL TIMELINE:\\n`;\n    report += `=======================\\n`;\n\n    records.forEach((record, index) => {\n      report += `\\n[${index + 1}] ${record.timestamp} - ${record.type.toUpperCase()}\\n`;\n      report += `Status: ${record.status}\\n`;\n      if (record.matchPercentage !== undefined) {\n        report += `Field Match: ${record.matchingFields}/${record.totalFields} (${record.matchPercentage.toFixed(1)}%)\\n`;\n      }\n      if (record.timestampDiff !== undefined) {\n        report += `Time Diff: ¬±${record.timestampDiff.toFixed(1)}s\\n`;\n      }\n      report += `---\\n`;\n    });\n\n    return report;\n  }\n}\n", "import { Component, OnInit, inject, signal, computed } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { FormsModule } from '@angular/forms';\nimport { SelectModule } from 'primeng/select';\nimport { AutoCompleteModule } from 'primeng/autocomplete';\nimport { DatePickerModule } from 'primeng/datepicker';\nimport { MessageModule } from 'primeng/message';\nimport { CardModule } from 'primeng/card';\nimport { ButtonModule } from 'primeng/button';\nimport { ProgressSpinnerModule } from 'primeng/progressspinner';\n\nimport {\n  ClientsService,\n  AssetsService,\n  ClientListResponse,\n  AssetListResponse,\n  AssetListItem,\n} from '../../../../api';\nimport { AuthDataService } from '../../../../core/services/auth-data.service';\nimport { UtilityService } from '../../../../core/services/utility.service';\nimport { FilterMetadata } from 'primeng/api';\nimport {\n  TelemetryComparisonService,\n  AlignedRecord,\n  ComparisonSummary,\n  FieldComparison,\n} from '../../services/telemetry-comparison.service';\nimport { EventsComparisonService } from '../../services/events-comparison.service';\nimport { TripsComparisonService } from '../../services/trips-comparison.service';\nimport {\n  UnifiedTimelineService,\n  UnifiedTimelineRecord,\n  UnifiedTimelineSummary,\n  UnifiedTimelineResult,\n} from '../../services/unified-timeline.service';\nimport { isDefined, isNullOrUndefined } from '../../../../shared/utils';\n\ninterface DropdownOption {\n  label: string;\n  value: string;\n  assetData?: AssetListItem; // Store the full asset data for device name extraction\n}\n\ninterface TimeRangeOption {\n  label: string;\n  value: string;\n  hours: number;\n}\n\n@Component({\n  selector: 'app-telemetry-comparison',\n  imports: [\n    CommonModule,\n    FormsModule,\n    SelectModule,\n    AutoCompleteModule,\n    DatePickerModule,\n    MessageModule,\n    CardModule,\n    ButtonModule,\n    ProgressSpinnerModule,\n  ],\n  templateUrl: './telemetry-comparison.component.html',\n  styleUrl: './telemetry-comparison.component.scss',\n})\nexport class TelemetryComparisonComponent implements OnInit {\n  private readonly clientsService = inject(ClientsService);\n  private readonly assetsService = inject(AssetsService);\n  private readonly authDataService = inject(AuthDataService);\n  private readonly utilityService = inject(UtilityService);\n  private readonly telemetryComparisonService = inject(\n    TelemetryComparisonService,\n  );\n  private readonly eventsComparisonService = inject(EventsComparisonService);\n  private readonly tripsComparisonService = inject(TripsComparisonService);\n  private readonly unifiedTimelineService = inject(UnifiedTimelineService);\n\n  title = 'Telemetry Comparison';\n\n  // Signals for reactive state management\n  clients = signal<DropdownOption[]>([]);\n  assets = signal<DropdownOption[]>([]);\n  filteredClients = signal<DropdownOption[]>([]);\n  filteredAssets = signal<DropdownOption[]>([]);\n  selectedClient = signal<DropdownOption | null>(null);\n  selectedAsset = signal<DropdownOption | null>(null);\n  loadingClients = signal(false);\n  loadingAssets = signal(false);\n  errorMessage = signal<string | null>(null);\n  currentOwnerId = signal<string | null>(null);\n\n  // Date/time range signals\n  startDate = signal<Date | null>(null);\n  selectedTimeRange = signal<TimeRangeOption | null>(null);\n  timeRangeOptions = signal<TimeRangeOption[]>([\n    { label: '20 minutes', value: '20min', hours: 0.33 },\n    { label: '1 hour', value: '1h', hours: 1 },\n    { label: '4 hours', value: '4h', hours: 4 },\n    { label: '12 hours', value: '12h', hours: 12 },\n  ]);\n\n  // Key API credentials signals\n  keyApiUsername = signal('');\n  keyApiPassword = signal('');\n\n  // Unified timeline comparison signals\n  unifiedTimeline = signal<UnifiedTimelineRecord[]>([]);\n  unifiedSummary = signal<UnifiedTimelineSummary | null>(null);\n  isAnalyzing = signal(false);\n  analysisComplete = signal(false);\n  expandedRecords = signal<Set<number>>(new Set());\n\n  // Legacy telemetry-only comparison (for fallback)\n  alignedRecords = signal<AlignedRecord[]>([]);\n  comparisonSummary = signal<ComparisonSummary | null>(null);\n\n  // UI state for collapsible search area\n  showCompactSummary = signal(true);\n  showFullSearchForm = signal(false);\n\n  // Record type filters\n  showTelemetry = signal(true);\n  showEvents = signal(true);\n  showTrips = signal(true);\n\n  // Pagination signals\n  currentRecordIndex = signal(0);\n  pageSize = signal(1); // Show one record at a time\n  showPagination = signal(true);\n\n  // Computed properties for template usage\n  readonly selectedClientName = computed(() => {\n    const client = this.selectedClient();\n    return client?.label ?? 'Unknown';\n  });\n\n  readonly selectedAssetName = computed(() => {\n    const asset = this.selectedAsset();\n    return asset?.label ?? 'Unknown';\n  });\n\n  readonly endDate = computed(() => {\n    const start = this.startDate();\n    const timeRange = this.selectedTimeRange();\n    if (!start || !timeRange) return null;\n\n    const endDateTime = new Date(\n      start.getTime() + timeRange.hours * 60 * 60 * 1000,\n    );\n    return endDateTime;\n  });\n\n  readonly isReadyForAnalysis = computed(() => {\n    return !!(\n      isDefined(this.selectedClient()?.value) &&\n      isDefined(this.selectedAsset()?.value) &&\n      isDefined(this.startDate()) &&\n      isDefined(this.selectedTimeRange()) &&\n      this.keyApiUsername().trim() &&\n      this.keyApiPassword().trim()\n    );\n  });\n\n  readonly filteredRecords = computed(() => {\n    const records =\n      this.unifiedTimeline().length > 0\n        ? this.unifiedTimeline()\n        : this.alignedRecords();\n\n    if (this.unifiedTimeline().length > 0) {\n      // Filter unified timeline records based on type toggles\n      return records.filter((record) => {\n        if (this.isUnifiedTimelineRecord(record)) {\n          if (record.type === 'telemetry') return this.showTelemetry();\n          if (record.type === 'event') return this.showEvents();\n          if (record.type === 'trip_start' || record.type === 'trip_end')\n            return this.showTrips();\n        }\n        return true; // Show unknown types by default\n      });\n    } else {\n      // For legacy telemetry-only records, show all if telemetry filter is on\n      return this.showTelemetry() ? records : [];\n    }\n  });\n\n  readonly currentRecord = computed(() => {\n    const records = this.filteredRecords();\n    const index = this.currentRecordIndex();\n    return records[index] ?? null;\n  });\n\n  readonly totalRecords = computed(() => {\n    return this.filteredRecords().length;\n  });\n\n  readonly hasPrevious = computed(() => {\n    return this.currentRecordIndex() > 0;\n  });\n\n  readonly hasNext = computed(() => {\n    return this.currentRecordIndex() < this.totalRecords() - 1;\n  });\n\n  readonly recordPosition = computed(() => {\n    const current = this.currentRecordIndex() + 1;\n    const total = this.totalRecords();\n    return `${current} of ${total}`;\n  });\n\n  // Filter button labels with counts\n  readonly telemetryFilterLabel = computed(() => {\n    const count = this.unifiedTimeline().filter(\n      (r) => r.type === 'telemetry',\n    ).length;\n    return `üì° Telemetry (${count})`;\n  });\n\n  readonly eventsFilterLabel = computed(() => {\n    const count = this.unifiedTimeline().filter(\n      (r) => r.type === 'event',\n    ).length;\n    return `‚ö° Events (${count})`;\n  });\n\n  readonly tripsFilterLabel = computed(() => {\n    const count = this.unifiedTimeline().filter(\n      (r) => r.type === 'trip_start' || r.type === 'trip_end',\n    ).length;\n    return `üöó Trips (${count})`;\n  });\n\n  constructor() {}\n\n  private isUnifiedTimelineRecord(\n    record: unknown,\n  ): record is UnifiedTimelineRecord {\n    return (\n      isDefined(record) &&\n      typeof record === 'object' &&\n      record !== null &&\n      'type' in record\n    );\n  }\n\n  ngOnInit(): void {\n    console.log('TelemetryComparisonComponent ngOnInit called');\n\n    // Initialize with default start date (1 hour ago) and time range (1 hour)\n    const now = new Date();\n    const oneHourAgo = new Date(now.getTime() - 60 * 60 * 1000);\n    this.startDate.set(oneHourAgo);\n    this.selectedTimeRange.set(this.timeRangeOptions()[1]); // 1 hour option\n\n    // Get the current user's owner ID for listing clients\n    const userProfile = this.authDataService.getUserProfile();\n    console.log('User profile:', userProfile);\n    if (isDefined(userProfile?.owner?.id)) {\n      this.currentOwnerId.set(userProfile.owner.id);\n      this.loadInitialClients(userProfile.owner.id);\n    } else {\n      console.error('No user profile or owner ID found');\n      this.errorMessage.set('Unable to determine user owner ID');\n    }\n  }\n\n  private loadInitialClients(ownerId: string): void {\n    console.log('Loading initial clients for owner:', ownerId);\n    this.loadingClients.set(true);\n    this.errorMessage.set(null);\n\n    // Use the same filter approach as client-switcher for consistency\n    const filters: Record<\n      string,\n      FilterMetadata | FilterMetadata[] | string | undefined\n    > = {\n      state: {\n        value: 'active',\n        operator: '=',\n      },\n    };\n\n    const rqlFilter = this.utilityService.constructRqlFilter(filters);\n    console.log('Using initial RQL filter:', rqlFilter);\n\n    this.clientsService\n      .listClients(ownerId, 0, 100, 'name:asc', rqlFilter)\n      .subscribe({\n        next: (response: ClientListResponse) => {\n          console.log('Initial clients response:', response);\n          const clientOptions: DropdownOption[] =\n            response.items?.map((client) => ({\n              label: client.name || `Client ${client.id}`,\n              value: client.id,\n            })) ?? [];\n\n          console.log('Initial clients loaded:', clientOptions.length);\n          this.clients.set(clientOptions);\n          this.filteredClients.set(clientOptions);\n          this.loadingClients.set(false);\n        },\n        error: (error) => {\n          console.error('Error loading initial clients:', error);\n          console.error('Error details:', error.message, error.status);\n          this.errorMessage.set('Failed to load clients. Please try again.');\n          this.loadingClients.set(false);\n        },\n      });\n  }\n\n  onSearchClients(event: { query: string }): void {\n    const query = event.query?.trim() || '';\n    console.log('Client search triggered with query:', query);\n\n    const ownerId = this.currentOwnerId();\n    if (!isDefined(ownerId)) {\n      console.error('No owner ID available for client search');\n      return;\n    }\n\n    this.loadingClients.set(true);\n\n    // Use the same filter approach as client-switcher\n    const filters: Record<\n      string,\n      FilterMetadata | FilterMetadata[] | string | undefined\n    > = {\n      state: {\n        value: 'active',\n        operator: '=',\n      },\n    };\n\n    if (query.length > 0) {\n      filters['name'] = {\n        value: `*${query}*`,\n        operator: '=',\n      };\n    }\n\n    const rqlFilter = this.utilityService.constructRqlFilter(filters);\n    console.log('Using RQL filter:', rqlFilter);\n\n    this.clientsService\n      .listClients(ownerId, 0, 100, 'name:asc', rqlFilter)\n      .subscribe({\n        next: (response: ClientListResponse) => {\n          console.log('Client search response:', response);\n          const clientOptions: DropdownOption[] =\n            response.items?.map((client) => ({\n              label: client.name || `Client ${client.id}`,\n              value: client.id,\n            })) ?? [];\n\n          this.filteredClients.set(clientOptions);\n          this.loadingClients.set(false);\n        },\n        error: (error) => {\n          console.error('Error searching clients:', error);\n          this.filteredClients.set([]);\n          this.loadingClients.set(false);\n        },\n      });\n  }\n\n  onClientSelect(event: { value: DropdownOption }): void {\n    const client = event.value;\n    this.selectedClient.set(client);\n    this.selectedAsset.set(null); // Reset asset selection\n    this.assets.set([]); // Clear assets\n    this.filteredAssets.set([]); // Clear filtered assets\n\n    if (client?.value) {\n      this.loadInitialAssets(client.value);\n    }\n  }\n\n  onClientUnselect(): void {\n    this.selectedClient.set(null);\n    this.selectedAsset.set(null);\n    this.assets.set([]);\n    this.filteredAssets.set([]);\n  }\n\n  private loadInitialAssets(clientId: string): void {\n    console.log('Loading assets for client:', clientId);\n    this.loadingAssets.set(true);\n    this.errorMessage.set(null);\n\n    // Load a large set of assets for client-side filtering\n    this.assetsService.listAssets(clientId, 0, 1000).subscribe({\n      next: (response: AssetListResponse) => {\n        console.log('Assets response:', response);\n        const assetOptions: DropdownOption[] =\n          response.items?.map((asset) => ({\n            label: asset.name || `Asset ${asset.id}`,\n            value: asset.id,\n            assetData: asset, // Store the full asset data\n          })) ?? [];\n\n        console.log('Assets loaded:', assetOptions.length);\n        this.assets.set(assetOptions);\n        this.filteredAssets.set(assetOptions);\n        this.loadingAssets.set(false);\n      },\n      error: () => {\n        this.errorMessage.set('Failed to load assets. Please try again.');\n        this.loadingAssets.set(false);\n      },\n    });\n  }\n\n  onSearchAssets(event: { query: string }): void {\n    const query = event.query.trim().toLowerCase();\n\n    const allAssets = this.assets();\n\n    if (!query) {\n      this.filteredAssets.set(allAssets);\n      return;\n    }\n\n    // Client-side filtering\n    const filtered = allAssets.filter((asset) =>\n      asset.label.toLowerCase().includes(query),\n    );\n\n    this.filteredAssets.set(filtered);\n  }\n\n  onAssetSelect(event: { value: DropdownOption }): void {\n    const asset = event.value;\n    this.selectedAsset.set(asset);\n    // Here you can add logic to load telemetry data for the selected asset\n    if (asset?.value && isDefined(this.selectedClient()?.value)) {\n      // TODO: Load telemetry data\n    }\n  }\n\n  onAssetUnselect(): void {\n    this.selectedAsset.set(null);\n  }\n\n  onStartDateChange(date: Date | null): void {\n    this.startDate.set(date);\n    console.log('Start date changed to:', date);\n  }\n\n  onTimeRangeChange(timeRange: TimeRangeOption | null): void {\n    this.selectedTimeRange.set(timeRange);\n    console.log('Time range changed to:', timeRange);\n\n    // Auto-adjust start date if needed when duration changes\n    if (timeRange && this.startDate()) {\n      const currentStartDate = this.startDate();\n      if (currentStartDate) {\n        const now = new Date();\n        const durationMs = timeRange.hours * 60 * 60 * 1000; // Convert hours to milliseconds\n        const endDate = new Date(currentStartDate.getTime() + durationMs);\n\n        // If the calculated end date would be in the future (beyond current time),\n        // adjust the start date backwards to keep the end date at or before now\n        if (endDate > now) {\n          const adjustedStartDate = new Date(now.getTime() - durationMs);\n          this.startDate.set(adjustedStartDate);\n          console.log(\n            'üìÖ Auto-adjusted start date from',\n            currentStartDate.toISOString(),\n            'to',\n            adjustedStartDate.toISOString(),\n          );\n          console.log('   Reason: Duration would extend beyond current time');\n        }\n      }\n    }\n  }\n\n  /**\n   * Extract device name from the selected asset\n   */\n  private getDeviceNameFromAsset(asset: DropdownOption): string | undefined {\n    const assetData = asset.assetData;\n    if (\n      !assetData?.devices ||\n      !Array.isArray(assetData.devices) ||\n      assetData.devices.length === 0\n    ) {\n      console.warn('‚ö†Ô∏è No devices found for asset:', asset.label);\n      return undefined;\n    }\n\n    // Use the first device's name\n    const firstDevice = assetData.devices[0];\n    const deviceName = firstDevice?.name ?? undefined;\n\n    return deviceName;\n  }\n\n  onAnalyzeTelemetry(): void {\n    const client = this.selectedClient();\n    const asset = this.selectedAsset();\n    const startDate = this.startDate();\n    const endDate = this.endDate();\n    const timeRange = this.selectedTimeRange();\n\n    if (\n      this.isReadyForAnalysis() &&\n      startDate &&\n      endDate &&\n      isDefined(asset?.value)\n    ) {\n      console.log('üöÄ Analyzing unified timeline for:');\n      console.log('  Client:', client?.label, '(', client?.value, ')');\n      console.log('  Asset:', asset?.label, '(', asset?.value, ')');\n      console.log('  Start Date:', startDate);\n      console.log('  End Date:', endDate);\n      console.log('  Time Range:', timeRange?.label);\n\n      this.isAnalyzing.set(true);\n      this.errorMessage.set(null);\n      this.analysisComplete.set(false);\n\n      // Clear all previous results\n      this.unifiedTimeline.set([]);\n      this.unifiedSummary.set(null);\n      this.alignedRecords.set([]);\n      this.comparisonSummary.set(null);\n\n      // Set Key API credentials in all comparison services\n      const keyUsername = this.keyApiUsername().trim();\n      const keyPassword = this.keyApiPassword().trim();\n\n      this.telemetryComparisonService.setKeyApiCredentials(\n        keyUsername,\n        keyPassword,\n      );\n      this.eventsComparisonService.setKeyApiCredentials(\n        keyUsername,\n        keyPassword,\n      );\n      this.tripsComparisonService.setKeyApiCredentials(\n        keyUsername,\n        keyPassword,\n      );\n\n      // Extract device name from the selected asset\n      const deviceName = this.getDeviceNameFromAsset(asset);\n      console.log('üîç Extracted device name:', deviceName);\n\n      // Convert local time to proper UTC for API calls\n      // If user selects 16:28 local (GMT+2), we need to send 14:28 UTC to the API\n      // This means subtracting the timezone offset to get the equivalent UTC time\n\n      console.log('üìÖ Date conversion for API:');\n      console.log('  User selected start (local):', startDate.toString());\n      console.log('  User selected end (local):', endDate.toString());\n      console.log(\n        '  Timezone offset (minutes):',\n        startDate.getTimezoneOffset(),\n      );\n\n      // toISOString() automatically converts to UTC, which is what we want\n      console.log('  Start date will be sent as UTC:', startDate.toISOString());\n      console.log('  End date will be sent as UTC:', endDate.toISOString());\n\n      // Use unified timeline service to get all data types\n      this.unifiedTimelineService\n        .getUnifiedTimeline(\n          asset.value,\n          startDate,\n          endDate,\n          100, // Limit to 100 records for now\n          deviceName, // Pass device name for vehicle mapping\n        )\n        .subscribe({\n          next: (result: UnifiedTimelineResult) => {\n            console.log('üéâ Unified timeline result:', result);\n            console.log('üìä Timeline summary:', result.summary);\n            console.log('üìà Total records:', result.records.length);\n            console.log(\n              'üîç Record types:',\n              result.records.reduce(\n                (acc, r) => {\n                  acc[r.type] = (acc[r.type] || 0) + 1;\n                  return acc;\n                },\n                {} as Record<string, number>,\n              ),\n            );\n\n            // Check if CypherView has any data for this vehicle/time period\n            const cypherViewRecords = result.records.filter(\n              (r) => r.testRecord,\n            );\n            const totalCypherViewData =\n              result.rawData.telemetry.testRecords.length +\n              result.rawData.events.testRecords.length +\n              result.rawData.trips.testRecords.length;\n\n            if (totalCypherViewData === 0) {\n              this.isAnalyzing.set(false);\n              this.analysisComplete.set(false);\n              this.errorMessage.set(\n                `No CypherView data found for ${asset?.label} during the selected time period (${timeRange?.label}). ` +\n                  `Please verify that the device was pointing to CypherView ingestion services during this time.`,\n              );\n              return;\n            }\n\n            console.log(\n              `‚úÖ Found ${totalCypherViewData} CypherView records (${cypherViewRecords.length} matched with Key)`,\n            );\n\n            this.unifiedTimeline.set(result.records);\n            this.unifiedSummary.set(result.summary);\n            this.isAnalyzing.set(false);\n            this.analysisComplete.set(true);\n            this.currentRecordIndex.set(0);\n\n            // Auto-expand all records for easy viewing\n            this.expandAllRecords();\n          },\n          error: (error) => {\n            console.error('‚ùå Error analyzing unified timeline:', error);\n            this.errorMessage.set(\n              'Failed to analyze unified timeline. Please try again.',\n            );\n            this.isAnalyzing.set(false);\n            this.analysisComplete.set(false);\n          },\n        });\n    } else {\n      this.errorMessage.set(\n        'Please complete all fields including Key API credentials.',\n      );\n    }\n  }\n\n  toggleRecordExpansion(index: number): void {\n    const expanded = this.expandedRecords();\n    const newExpanded = new Set(expanded);\n\n    if (newExpanded.has(index)) {\n      newExpanded.delete(index);\n    } else {\n      newExpanded.add(index);\n    }\n\n    this.expandedRecords.set(newExpanded);\n  }\n\n  getFieldComparisons(\n    record: UnifiedTimelineRecord | AlignedRecord,\n  ): FieldComparison[] {\n    // Handle both unified timeline records and legacy aligned records\n    if (this.isUnifiedTimelineRecord(record)) {\n      // This is a UnifiedTimelineRecord\n      switch (record.type) {\n        case 'telemetry':\n          return this.telemetryComparisonService.compareFields(\n            record.testRecord,\n            record.prodRecord,\n          );\n        case 'event':\n          return this.eventsComparisonService.compareFields(\n            record.testRecord,\n            record.prodRecord,\n          );\n        case 'trip_start':\n        case 'trip_end':\n          return this.tripsComparisonService.compareFields(\n            record.testRecord,\n            record.prodRecord,\n          );\n        default:\n          return [];\n      }\n    } else {\n      // This is a legacy AlignedRecord\n      const alignedRecord = record;\n      return this.telemetryComparisonService.compareFields(\n        alignedRecord.testRecord,\n        alignedRecord.prodRecord,\n      );\n    }\n  }\n\n  getRecordTimestamp(record: UnifiedTimelineRecord | AlignedRecord): string {\n    // Handle both unified timeline records and legacy aligned records\n    if (this.isUnifiedTimelineRecord(record)) {\n      // This is a UnifiedTimelineRecord\n      const timestamp = record.timestamp;\n\n      try {\n        // Parse the UTC timestamp from server\n        const dt = new Date(timestamp);\n        // Display in browser's local timezone\n        return dt.toLocaleString('en-GB', {\n          year: 'numeric',\n          month: '2-digit',\n          day: '2-digit',\n          hour: '2-digit',\n          minute: '2-digit',\n          second: '2-digit',\n          // Remove timeZone to use browser's local timezone\n        });\n      } catch {\n        return timestamp;\n      }\n    } else {\n      // This is a legacy AlignedRecord\n      const alignedRecord = record;\n      const dataRecord = alignedRecord.testRecord || alignedRecord.prodRecord;\n      if (!dataRecord) return 'UNKNOWN TIME';\n\n      const timestamp =\n        dataRecord.timestamp ?? dataRecord['date'] ?? dataRecord.received;\n      if (isNullOrUndefined(timestamp)) return 'UNKNOWN TIME';\n\n      try {\n        // Parse the UTC timestamp from server\n        const dt = new Date(timestamp as string);\n        // Display in browser's local timezone\n        return dt.toLocaleString('en-GB', {\n          year: 'numeric',\n          month: '2-digit',\n          day: '2-digit',\n          hour: '2-digit',\n          minute: '2-digit',\n          second: '2-digit',\n          // Remove timeZone to use browser's local timezone\n        });\n      } catch {\n        return timestamp as string;\n      }\n    }\n  }\n\n  getRecordStatus(record: UnifiedTimelineRecord | AlignedRecord): string {\n    // Handle both unified timeline records and legacy aligned records\n    if (this.isUnifiedTimelineRecord(record)) {\n      // This is a UnifiedTimelineRecord\n      return record.status;\n    } else {\n      // This is a legacy AlignedRecord\n      const alignedRecord = record;\n      if (alignedRecord.testRecord && alignedRecord.prodRecord) {\n        return 'both-environments';\n      } else if (alignedRecord.testRecord) {\n        return 'cypherView-only';\n      } else {\n        return 'key-only';\n      }\n    }\n  }\n\n  getRecordStatusIcon(record: UnifiedTimelineRecord | AlignedRecord): string {\n    // Handle both unified timeline records and legacy aligned records\n    if (this.isUnifiedTimelineRecord(record)) {\n      // This is a UnifiedTimelineRecord - just show status\n      if (record.testRecord && record.prodRecord) {\n        return '‚úÖ';\n      } else if (record.testRecord) {\n        return 'üîπ';\n      } else {\n        return 'üî∏';\n      }\n    } else {\n      // This is a legacy AlignedRecord\n      const alignedRecord = record;\n      if (alignedRecord.testRecord && alignedRecord.prodRecord) {\n        return '‚úÖ';\n      } else if (alignedRecord.testRecord) {\n        return 'üîπ';\n      } else {\n        return 'üî∏';\n      }\n    }\n  }\n\n  getRecordTypeDisplay(record: UnifiedTimelineRecord | AlignedRecord): string {\n    // Handle both unified timeline records and legacy aligned records\n    if (this.isUnifiedTimelineRecord(record)) {\n      // This is a UnifiedTimelineRecord\n      switch (record.type) {\n        case 'telemetry':\n          return 'TELEMETRY';\n        case 'event':\n          return 'EVENT';\n        case 'trip_start':\n          return 'TRIP START';\n        case 'trip_end':\n          return 'TRIP END';\n        default:\n          return 'UNKNOWN';\n      }\n    } else {\n      // This is a legacy AlignedRecord - assume telemetry\n      return 'TELEMETRY';\n    }\n  }\n\n  getRecordTypeBadgeClass(\n    record: UnifiedTimelineRecord | AlignedRecord,\n  ): string {\n    // Handle both unified timeline records and legacy aligned records\n    if (this.isUnifiedTimelineRecord(record)) {\n      // This is a UnifiedTimelineRecord\n      switch (record.type) {\n        case 'telemetry':\n          return 'badge-telemetry';\n        case 'event':\n          return 'badge-event';\n        case 'trip_start':\n        case 'trip_end':\n          return 'badge-trip';\n        default:\n          return 'badge-unknown';\n      }\n    } else {\n      // This is a legacy AlignedRecord - assume telemetry\n      return 'badge-telemetry';\n    }\n  }\n  clearAnalysis(): void {\n    this.alignedRecords.set([]);\n    this.comparisonSummary.set(null);\n    this.analysisComplete.set(false);\n    this.expandedRecords.set(new Set());\n    this.currentRecordIndex.set(0);\n    // Keep credentials for convenience\n  }\n\n  // Pagination methods\n  goToPreviousRecord(): void {\n    if (this.hasPrevious()) {\n      this.currentRecordIndex.update((index) => index - 1);\n    }\n  }\n\n  goToNextRecord(): void {\n    if (this.hasNext()) {\n      this.currentRecordIndex.update((index) => index + 1);\n    }\n  }\n\n  goToRecord(index: number): void {\n    if (index >= 0 && index < this.totalRecords()) {\n      this.currentRecordIndex.set(index);\n    }\n  }\n\n  expandAllRecords(): void {\n    const totalRecords = this.totalRecords();\n    const allIndices = new Set(\n      Array.from({ length: totalRecords }, (_, i) => i),\n    );\n    this.expandedRecords.set(allIndices);\n  }\n\n  collapseAllRecords(): void {\n    this.expandedRecords.set(new Set());\n  }\n\n  toggleSearchArea(): void {\n    this.showCompactSummary.update((current) => !current);\n    this.showFullSearchForm.update((current) => !current);\n  }\n\n  restartAnalysis(): void {\n    // Clear all results and show full search form\n    this.analysisComplete.set(false);\n    this.unifiedTimeline.set([]);\n    this.unifiedSummary.set(null);\n    this.alignedRecords.set([]);\n    this.comparisonSummary.set(null);\n    this.errorMessage.set(null);\n    this.currentRecordIndex.set(0);\n    this.expandedRecords.set(new Set());\n\n    // Reset filters\n    this.showTelemetry.set(true);\n    this.showEvents.set(true);\n    this.showTrips.set(true);\n\n    // Show search form\n    this.showCompactSummary.set(false);\n    this.showFullSearchForm.set(false);\n  }\n\n  toggleTelemetryFilter(): void {\n    this.showTelemetry.update((current) => !current);\n    this.resetToFirstRecord();\n  }\n\n  toggleEventsFilter(): void {\n    this.showEvents.update((current) => !current);\n    this.resetToFirstRecord();\n  }\n\n  toggleTripsFilter(): void {\n    this.showTrips.update((current) => !current);\n    this.resetToFirstRecord();\n  }\n\n  private resetToFirstRecord(): void {\n    // Reset to first record when filters change\n    this.currentRecordIndex.set(0);\n  }\n\n  // Keyboard navigation\n  onKeyDown(event: KeyboardEvent): void {\n    if (event.key === 'ArrowLeft' || event.key === 'ArrowUp') {\n      event.preventDefault();\n      this.goToPreviousRecord();\n    } else if (event.key === 'ArrowRight' || event.key === 'ArrowDown') {\n      event.preventDefault();\n      this.goToNextRecord();\n    } else if (event.key === 'Home') {\n      event.preventDefault();\n      this.goToRecord(0);\n    } else if (event.key === 'End') {\n      event.preventDefault();\n      this.goToRecord(this.totalRecords() - 1);\n    }\n  }\n}\n", "<div class=\"p-4 max-w-6xl mx-auto\">\n  <div\n    class=\"mb-4 p-4 bg-gradient-to-br from-white to-gray-50 rounded-lg border border-gray-200 shadow-sm\"\n  >\n    <h1 class=\"text-3xl font-bold text-gray-800 mb-2\">{{ title }}</h1>\n    <p class=\"text-sm text-gray-600 m-0\">\n      <strong>Compare CypherView data with Key API data.</strong> This\n      development tool analyzes and compares telemetry, events, and trips\n      between both systems.\n    </p>\n  </div>\n\n  @if (errorMessage()) {\n    <p-message severity=\"error\" class=\"mb-6\">{{ errorMessage() }}</p-message>\n  }\n\n  <div>\n    <!-- Selection Panel -->\n    <p-card class=\"mb-2\">\n      <ng-template #title>\n        <div class=\"flex justify-between items-center w-full\">\n          <span>{{\n            analysisComplete() ? 'Analysis Configuration' : 'Asset Selection'\n          }}</span>\n          @if (analysisComplete()) {\n            <p-button\n              icon=\"pi pi-refresh\"\n              label=\"New Search\"\n              size=\"small\"\n              severity=\"secondary\"\n              [outlined]=\"true\"\n              (onClick)=\"restartAnalysis()\"\n            />\n          }\n        </div>\n      </ng-template>\n\n      @if (analysisComplete() && showCompactSummary()) {\n        <!-- Compact Configuration Summary -->\n        <div class=\"flex justify-between items-center gap-4\">\n          <div\n            class=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-3 flex-1 min-w-0\"\n          >\n            <div class=\"flex gap-2 items-baseline\">\n              <strong\n                class=\"text-gray-600 text-xs font-semibold uppercase tracking-wider whitespace-nowrap\"\n                >Client:</strong\n              >\n              <span class=\"text-gray-800 text-sm font-medium\">{{\n                selectedClientName()\n              }}</span>\n            </div>\n            <div class=\"flex gap-2 items-baseline\">\n              <strong\n                class=\"text-gray-600 text-xs font-semibold uppercase tracking-wider whitespace-nowrap\"\n                >Asset:</strong\n              >\n              <span class=\"text-gray-800 text-sm font-medium\">{{\n                selectedAssetName()\n              }}</span>\n            </div>\n            <div class=\"flex gap-2 items-baseline\">\n              <strong\n                class=\"text-gray-600 text-xs font-semibold uppercase tracking-wider whitespace-nowrap\"\n                >Period:</strong\n              >\n              <span class=\"text-gray-800 text-sm font-medium\"\n                >{{ startDate() | date: 'short' }} -\n                {{ endDate() | date: 'short' }}</span\n              >\n            </div>\n            <div class=\"flex gap-2 items-baseline\">\n              <strong\n                class=\"text-gray-600 text-xs font-semibold uppercase tracking-wider whitespace-nowrap\"\n                >Duration:</strong\n              >\n              <span class=\"text-gray-800 text-sm font-medium\">{{\n                selectedTimeRange()?.label\n              }}</span>\n            </div>\n          </div>\n          <div class=\"flex gap-2\">\n            <p-button\n              icon=\"pi pi-pencil\"\n              label=\"Edit\"\n              size=\"small\"\n              severity=\"secondary\"\n              [outlined]=\"true\"\n              (onClick)=\"toggleSearchArea()\"\n            />\n          </div>\n        </div>\n      } @else {\n        <!-- Full Selection Form -->\n        <div>\n          <div class=\"grid grid-cols-1 md:grid-cols-2 gap-4 mb-4\">\n            <!-- Client Autocomplete -->\n            <div class=\"flex flex-col gap-1\">\n              <label\n                for=\"client-autocomplete\"\n                class=\"font-medium text-gray-600 text-xs uppercase tracking-wider\"\n                >Client</label\n              >\n              <div class=\"relative w-full\">\n                <p-autocomplete\n                  id=\"client-autocomplete\"\n                  [(ngModel)]=\"selectedClient\"\n                  [suggestions]=\"filteredClients()\"\n                  (completeMethod)=\"onSearchClients($event)\"\n                  (onSelect)=\"onClientSelect($event)\"\n                  (onUnselect)=\"onClientUnselect()\"\n                  (onClear)=\"onClientUnselect()\"\n                  placeholder=\"Search for a client...\"\n                  field=\"label\"\n                  [minLength]=\"0\"\n                  [delay]=\"100\"\n                  [showClear]=\"true\"\n                  [forceSelection]=\"true\"\n                  class=\"w-full\"\n                  inputStyleClass=\"w-full\"\n                  [completeOnFocus]=\"true\"\n                  [dropdown]=\"true\"\n                />\n                @if (loadingClients()) {\n                  <div\n                    class=\"absolute right-10 top-1/2 transform -translate-y-1/2 z-10 pointer-events-none flex items-center justify-center\"\n                  >\n                    <p-progress-spinner\n                      strokeWidth=\"2\"\n                      class=\"w-[16px] h-[16px]\"\n                    />\n                  </div>\n                }\n              </div>\n            </div>\n\n            <!-- Asset Autocomplete -->\n            <div class=\"flex flex-col gap-1\">\n              <label\n                for=\"asset-autocomplete\"\n                class=\"font-medium text-gray-600 text-xs uppercase tracking-wider\"\n                >Asset</label\n              >\n              <div class=\"relative w-full\">\n                <p-autocomplete\n                  id=\"asset-autocomplete\"\n                  [(ngModel)]=\"selectedAsset\"\n                  [suggestions]=\"filteredAssets()\"\n                  (completeMethod)=\"onSearchAssets($event)\"\n                  (onSelect)=\"onAssetSelect($event)\"\n                  (onUnselect)=\"onAssetUnselect()\"\n                  (onClear)=\"onAssetUnselect()\"\n                  placeholder=\"Search for an asset...\"\n                  field=\"label\"\n                  [minLength]=\"0\"\n                  [delay]=\"100\"\n                  [disabled]=\"!selectedClient()\"\n                  [showClear]=\"true\"\n                  [forceSelection]=\"true\"\n                  class=\"w-full\"\n                  inputStyleClass=\"w-full\"\n                  [completeOnFocus]=\"true\"\n                  [dropdown]=\"true\"\n                />\n                @if (loadingAssets()) {\n                  <div\n                    class=\"absolute right-10 top-1/2 transform -translate-y-1/2 z-10 pointer-events-none flex items-center justify-center\"\n                  >\n                    <p-progress-spinner\n                      strokeWidth=\"2\"\n                      class=\"w-[16px] h-[16px]\"\n                    />\n                  </div>\n                }\n              </div>\n            </div>\n          </div>\n\n          <!-- Date/Time Range Row -->\n          <div class=\"grid grid-cols-1 md:grid-cols-2 gap-4 mb-4\">\n            <!-- Start Date Picker -->\n            <div class=\"flex flex-col gap-1\">\n              <label\n                for=\"start-date-picker\"\n                class=\"font-medium text-gray-600 text-xs uppercase tracking-wider\"\n                >Start Date</label\n              >\n              <p-datepicker\n                id=\"start-date-picker\"\n                [(ngModel)]=\"startDate\"\n                (onSelect)=\"onStartDateChange($event)\"\n                placeholder=\"Select start date and time\"\n                [showTime]=\"true\"\n                [showSeconds]=\"false\"\n                hourFormat=\"24\"\n                [showIcon]=\"true\"\n                [showClear]=\"true\"\n                class=\"w-full\"\n                inputStyleClass=\"w-full\"\n              />\n            </div>\n\n            <!-- Time Range Dropdown -->\n            <div class=\"flex flex-col gap-1\">\n              <label\n                for=\"time-range-select\"\n                class=\"font-medium text-gray-600 text-xs uppercase tracking-wider\"\n                >Duration</label\n              >\n              <p-select\n                id=\"time-range-select\"\n                [(ngModel)]=\"selectedTimeRange\"\n                [options]=\"timeRangeOptions()\"\n                (onChange)=\"onTimeRangeChange($event.value)\"\n                placeholder=\"Select duration\"\n                optionLabel=\"label\"\n                [showClear]=\"true\"\n                class=\"w-full\"\n              />\n            </div>\n          </div>\n\n          <!-- Key API Credentials Row -->\n          <div class=\"grid grid-cols-1 md:grid-cols-2 gap-4 mb-4\">\n            <div class=\"flex flex-col gap-1\">\n              <label\n                for=\"key-username\"\n                class=\"font-medium text-gray-600 text-xs uppercase tracking-wider\"\n                >Key API Username</label\n              >\n              <input\n                id=\"key-username\"\n                type=\"text\"\n                [(ngModel)]=\"keyApiUsername\"\n                placeholder=\"Enter Key API username\"\n                class=\"p-inputtext p-component w-full\"\n                autocomplete=\"username\"\n              />\n            </div>\n\n            <div class=\"flex flex-col gap-1\">\n              <label\n                for=\"key-password\"\n                class=\"font-medium text-gray-600 text-xs uppercase tracking-wider\"\n                >Key API Password</label\n              >\n              <input\n                id=\"key-password\"\n                type=\"password\"\n                [(ngModel)]=\"keyApiPassword\"\n                placeholder=\"Enter Key API password\"\n                class=\"p-inputtext p-component w-full\"\n                autocomplete=\"current-password\"\n              />\n            </div>\n          </div>\n\n          <!-- Date Range Summary -->\n          @if (startDate() && selectedTimeRange()) {\n            <div class=\"mb-3 p-3 bg-gray-50 rounded border border-gray-200\">\n              <div class=\"flex justify-between items-center mb-2\">\n                <strong class=\"text-gray-600 text-sm uppercase tracking-wider\"\n                  >Start:</strong\n                >\n                <span class=\"text-gray-600 font-mono text-sm\">{{\n                  startDate() | date: 'short'\n                }}</span>\n              </div>\n              <div class=\"flex justify-between items-center mb-2\">\n                <strong class=\"text-gray-600 text-sm uppercase tracking-wider\"\n                  >End:</strong\n                >\n                <span class=\"text-gray-600 font-mono text-sm\">{{\n                  endDate() | date: 'short'\n                }}</span>\n              </div>\n              <div class=\"flex justify-between items-center\">\n                <strong class=\"text-gray-600 text-sm uppercase tracking-wider\"\n                  >Duration:</strong\n                >\n                <span class=\"text-gray-600 font-mono text-sm\">{{\n                  selectedTimeRange()?.label\n                }}</span>\n              </div>\n            </div>\n          }\n\n          <!-- Action Button -->\n          <div class=\"flex justify-start pt-2 border-t border-gray-200\">\n            <p-button\n              label=\"Analyze Telemetry\"\n              icon=\"pi pi-chart-scatter\"\n              (onClick)=\"onAnalyzeTelemetry()\"\n              [disabled]=\"!isReadyForAnalysis() || isAnalyzing()\"\n              [loading]=\"isAnalyzing()\"\n              severity=\"primary\"\n            />\n            @if (analysisComplete()) {\n              <p-button\n                label=\"Clear Results\"\n                icon=\"pi pi-times\"\n                (onClick)=\"clearAnalysis()\"\n                severity=\"secondary\"\n                [outlined]=\"true\"\n              />\n              <p-button\n                [label]=\"\n                  expandedRecords().size > 0 ? 'Collapse All' : 'Expand All'\n                \"\n                [icon]=\"\n                  expandedRecords().size > 0 ? 'pi pi-minus' : 'pi pi-plus'\n                \"\n                (onClick)=\"\n                  expandedRecords().size > 0\n                    ? collapseAllRecords()\n                    : expandAllRecords()\n                \"\n                severity=\"secondary\"\n                [outlined]=\"true\"\n              />\n            }\n          </div>\n        </div>\n      }\n    </p-card>\n\n    <!-- Analysis Results Panel -->\n    <p-card\n      header=\"Unified Timeline Analysis\"\n      class=\"analysis-panel compact-card\"\n    >\n      @if (isAnalyzing()) {\n        <div\n          class=\"text-center py-12 px-8 bg-gray-50 rounded border-2 border-dashed border-gray-200\"\n        >\n          <p-progress-spinner strokeWidth=\"2\" class=\"mb-4\" />\n          <h3 class=\"my-4 text-gray-600 text-xl font-medium\">\n            Analyzing Telemetry Data\n          </h3>\n          <p class=\"my-2 text-gray-500\">\n            Fetching and comparing data from CypherView and Key environments...\n          </p>\n        </div>\n      } @else if (analysisComplete()) {\n        <!-- Unified Timeline Summary -->\n        @if (unifiedSummary(); as summary) {\n          <div\n            class=\"mb-2 p-2 px-3 bg-gray-50 rounded border-l-4 border-green-500\"\n          >\n            <div class=\"flex gap-2 items-center text-sm\">\n              <span class=\"font-semibold text-gray-600\"\n                >üìä Unified Timeline:</span\n              >\n              <span class=\"text-gray-500\"\n                >{{ summary.totalRecords }} records (üì°{{\n                  summary.telemetryCount\n                }}\n                ‚ö°{{ summary.eventsCount }} üöó{{ summary.tripsCount }}) ‚Ä¢\n                {{ summary.bothPresentCount }} both ‚Ä¢\n                {{ summary.overallMatchRate | number: '1.0-0' }}% match ‚Ä¢\n                {{ summary.qualityStatus }}</span\n              >\n            </div>\n          </div>\n\n          <!-- Record Type Filters -->\n          <div\n            class=\"flex items-center gap-3 mb-2 p-2 bg-gray-50 rounded border border-gray-200\"\n          >\n            <span\n              class=\"font-semibold text-gray-600 text-xs uppercase tracking-wider whitespace-nowrap\"\n              >Show:</span\n            >\n            <div class=\"flex gap-2 flex-wrap\">\n              <p-button\n                [label]=\"telemetryFilterLabel()\"\n                size=\"small\"\n                [severity]=\"showTelemetry() ? 'primary' : 'secondary'\"\n                [outlined]=\"!showTelemetry()\"\n                (onClick)=\"toggleTelemetryFilter()\"\n                styleClass=\"filter-btn\"\n              />\n              <p-button\n                [label]=\"eventsFilterLabel()\"\n                size=\"small\"\n                [severity]=\"showEvents() ? 'info' : 'secondary'\"\n                [outlined]=\"!showEvents()\"\n                (onClick)=\"toggleEventsFilter()\"\n                styleClass=\"filter-btn\"\n              />\n              <p-button\n                [label]=\"tripsFilterLabel()\"\n                size=\"small\"\n                [severity]=\"showTrips() ? 'help' : 'secondary'\"\n                [outlined]=\"!showTrips()\"\n                (onClick)=\"toggleTripsFilter()\"\n                styleClass=\"filter-btn\"\n              />\n            </div>\n          </div>\n        } @else {\n          <!-- Legacy telemetry-only summary -->\n          @if (comparisonSummary(); as summary) {\n            <div\n              class=\"mb-2 p-2 px-3 bg-gray-50 rounded border-l-4 border-green-500\"\n            >\n              <div class=\"flex gap-2 items-center text-sm\">\n                <span class=\"font-semibold text-gray-600\"\n                  >üìä Telemetry Only:</span\n                >\n                <span class=\"text-gray-500\"\n                  >{{ summary.totalAligned }} records ‚Ä¢\n                  {{ summary.bothPresent }} both ‚Ä¢\n                  {{ summary.matchRate | number: '1.0-0' }}% match ‚Ä¢\n                  {{ summary.qualityStatus }}</span\n                >\n              </div>\n            </div>\n          }\n        }\n\n        <!-- Compact Pagination -->\n        <div class=\"mb-2\">\n          <div\n            class=\"flex justify-center items-center gap-1 p-1 bg-gray-50 rounded border border-gray-200\"\n          >\n            <p-button\n              icon=\"pi pi-angle-double-left\"\n              [disabled]=\"!hasPrevious()\"\n              (onClick)=\"goToRecord(0)\"\n              size=\"small\"\n              severity=\"secondary\"\n              [outlined]=\"true\"\n            />\n            <p-button\n              icon=\"pi pi-angle-left\"\n              [disabled]=\"!hasPrevious()\"\n              (onClick)=\"goToPreviousRecord()\"\n              size=\"small\"\n              severity=\"secondary\"\n              [outlined]=\"true\"\n            />\n            <span\n              class=\"px-2 font-semibold text-gray-600 text-xs min-w-[60px] text-center\"\n              >{{ recordPosition() }}</span\n            >\n            <p-button\n              icon=\"pi pi-angle-right\"\n              [disabled]=\"!hasNext()\"\n              (onClick)=\"goToNextRecord()\"\n              size=\"small\"\n              severity=\"secondary\"\n              [outlined]=\"true\"\n            />\n            <p-button\n              icon=\"pi pi-angle-double-right\"\n              [disabled]=\"!hasNext()\"\n              (onClick)=\"goToRecord(totalRecords() - 1)\"\n              size=\"small\"\n              severity=\"secondary\"\n              [outlined]=\"true\"\n            />\n          </div>\n        </div>\n\n        <!-- Compact Record Display -->\n        @if (currentRecord(); as record) {\n          <div\n            (keydown)=\"onKeyDown($event)\"\n            [class]=\"\n              'border border-gray-200 rounded bg-white outline-none focus:ring-2 focus:ring-blue-200 compact-record ' +\n              getRecordStatus(record)\n            \"\n          >\n            <!-- Compact Header -->\n            <div\n              class=\"flex items-center gap-2 px-3 py-2 bg-gray-50 border-b border-gray-200 text-xs\"\n            >\n              <div\n                [class]=\"\n                  'px-2 py-0.5 rounded-xl text-[0.6rem] font-bold uppercase tracking-wide min-w-fit record-type-badge ' +\n                  getRecordTypeBadgeClass(record)\n                \"\n              >\n                {{ getRecordTypeDisplay(record) }}\n              </div>\n              <span class=\"text-base\">{{ getRecordStatusIcon(record) }}</span>\n              <span class=\"font-semibold text-gray-700 flex-1\">{{\n                getRecordTimestamp(record)\n              }}</span>\n              @if (record.timestampDiff !== undefined) {\n                <span\n                  class=\"text-gray-500 text-xs bg-gray-200 px-1 py-0.5 rounded\"\n                  >(¬±{{ record.timestampDiff | number: '1.0-0' }}s)</span\n                >\n              }\n            </div>\n\n            <!-- Comparison Header -->\n            <div\n              class=\"grid grid-cols-[150px_1fr] gap-2 px-2 py-2 bg-gray-200 border-b-2 border-gray-600 text-[0.7rem] font-bold uppercase tracking-wide text-gray-600\"\n            >\n              <div class=\"flex items-center justify-start\">Field</div>\n              <div class=\"flex items-center gap-1 font-mono text-[0.65rem]\">\n                <span\n                  class=\"flex-1 text-center text-blue-900 bg-blue-50 px-1 py-1 rounded border-l-2 border-blue-500 font-semibold\"\n                  >üîπ CypherView</span\n                >\n                <span\n                  class=\"text-gray-500 text-[0.625rem] font-semibold min-w-fit\"\n                  >vs</span\n                >\n                <span\n                  class=\"flex-1 text-center text-yellow-700 bg-yellow-50 px-1 py-1 rounded border-l-2 border-yellow-400 font-semibold\"\n                  >üî∏ Key API</span\n                >\n              </div>\n            </div>\n\n            <!-- Compact Comparison Table -->\n            <div>\n              @for (\n                comparison of getFieldComparisons(record);\n                track comparison.field\n              ) {\n                <div\n                  [class]=\"\n                    'grid grid-cols-[150px_1fr] gap-2 px-2 py-1 border-b border-gray-100 text-[0.7rem] items-center even:bg-gray-50 last:border-b-0 field-row ' +\n                    comparison.status\n                  \"\n                >\n                  <div\n                    class=\"font-semibold text-gray-600 break-words text-[0.65rem]\"\n                  >\n                    {{ comparison.field }}\n                  </div>\n                  <div class=\"flex items-center gap-1 font-mono text-[0.65rem]\">\n                    <span\n                      class=\"flex-1 px-1 py-0.5 rounded break-all cv-value\"\n                      [class.has-value]=\"comparison.testValue\"\n                      >{{ comparison.displayTest }}</span\n                    >\n                    <span class=\"text-gray-500 text-[0.625rem] font-semibold\"\n                      >vs</span\n                    >\n                    <span\n                      class=\"flex-1 px-1 py-0.5 rounded break-all key-value\"\n                      [class.has-value]=\"comparison.prodValue\"\n                      >{{ comparison.displayProd }}</span\n                    >\n                  </div>\n                </div>\n              }\n            </div>\n          </div>\n        } @else {\n          <div\n            class=\"p-12 text-center text-gray-500 bg-gray-50 rounded-lg border border-gray-200\"\n          >\n            No telemetry records found.\n          </div>\n        }\n      } @else if (isReadyForAnalysis()) {\n        <div\n          class=\"mb-8 p-6 bg-gradient-to-br from-gray-50 to-gray-100 rounded-lg border-l-4 border-blue-500 shadow-sm\"\n        >\n          <h3 class=\"m-0 mb-4 text-gray-600 text-lg font-medium\">\n            Selected Configuration\n          </h3>\n          <div class=\"grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-4 gap-4\">\n            <div class=\"flex flex-col gap-2 p-4 bg-white rounded shadow-sm\">\n              <strong\n                class=\"text-gray-600 text-sm uppercase tracking-wider font-semibold\"\n                >Client:</strong\n              >\n              <span class=\"text-gray-800 text-base font-medium\">{{\n                selectedClientName()\n              }}</span>\n            </div>\n            <div class=\"flex flex-col gap-2 p-4 bg-white rounded shadow-sm\">\n              <strong\n                class=\"text-gray-600 text-sm uppercase tracking-wider font-semibold\"\n                >Asset:</strong\n              >\n              <span class=\"text-gray-800 text-base font-medium\">{{\n                selectedAssetName()\n              }}</span>\n            </div>\n            <div class=\"flex flex-col gap-2 p-4 bg-white rounded shadow-sm\">\n              <strong\n                class=\"text-gray-600 text-sm uppercase tracking-wider font-semibold\"\n                >Time Range:</strong\n              >\n              <span class=\"text-gray-800 text-base font-medium\"\n                >{{ startDate() | date: 'short' }} -\n                {{ endDate() | date: 'short' }}</span\n              >\n            </div>\n            <div class=\"flex flex-col gap-2 p-4 bg-white rounded shadow-sm\">\n              <strong\n                class=\"text-gray-600 text-sm uppercase tracking-wider font-semibold\"\n                >Duration:</strong\n              >\n              <span class=\"text-gray-800 text-base font-medium\">{{\n                selectedTimeRange()?.label\n              }}</span>\n            </div>\n          </div>\n        </div>\n\n        <div>\n          <div\n            class=\"text-center py-12 px-8 bg-gray-50 rounded border-2 border-dashed border-gray-200\"\n          >\n            <i class=\"pi pi-chart-scatter text-5xl text-gray-500\"></i>\n            <h3 class=\"my-4 text-gray-600 text-xl font-medium\">\n              Ready for Telemetry Analysis\n            </h3>\n            <p class=\"my-2 text-gray-500\">\n              Click \"Analyze Telemetry\" to compare data between CypherView and\n              Key environments.\n            </p>\n            <p class=\"text-sm text-gray-400 italic\">\n              {{ selectedClientName() }} ‚Üí {{ selectedAssetName() }} ({{\n                selectedTimeRange()?.label\n              }})\n            </p>\n          </div>\n        </div>\n      } @else {\n        <div\n          class=\"text-center py-12 px-8 bg-gray-50 rounded border-2 border-dashed border-gray-200\"\n        >\n          <i class=\"pi pi-info-circle text-5xl text-gray-500\"></i>\n          <h3 class=\"my-4 text-gray-600 text-xl font-medium\">\n            Complete Configuration\n          </h3>\n          <p class=\"my-2 text-gray-500\">\n            Please select a client, asset, start date, and duration to begin\n            telemetry analysis.\n          </p>\n        </div>\n      }\n    </p-card>\n  </div>\n</div>\n", "import { NgModule } from '@angular/core';\nimport { RouterModule, Routes } from '@angular/router';\nimport { TelemetryComparisonComponent } from './components/telemetry-comparison/telemetry-comparison.component';\n\nconst routes: Routes = [\n  {\n    path: '',\n    redirectTo: 'telemetry-comparison',\n    pathMatch: 'full',\n  },\n  {\n    path: 'telemetry-comparison',\n    component: TelemetryComparisonComponent,\n  },\n];\n\n@NgModule({\n  imports: [RouterModule.forChild(routes)],\n  exports: [RouterModule],\n})\nexport class DevelopmentRoutingModule {}\n", "import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\n\nimport { DevelopmentRoutingModule } from './development-routing.module';\n\n@NgModule({\n  declarations: [],\n  imports: [CommonModule, DevelopmentRoutingModule],\n})\nexport class DevelopmentModule {}\n"],
  "mappings": "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",
  "names": []
}
